It would be a great feature to import by direct query from arXiv. In certain areas of science (high energy physics, astronomy, cond-mat) the unique document id is established well enough to issue these queries using the OAI2 interface of these repositories. E.g. any scientist working in the field will know what to do with something like hep-ph/0608155. A sample perl-code which has been used to add some 500 papers including full text to a bibtex database used with jabref is given here: ----------------------------------------------------- #!/usr/bin/perl #========================================================================= # # Query arXiv.org to get a reference for BibTeX. Should be used # with JabRef Reference Manager # # Takes a file name of the form # /some/path/to/file/hep-ph0608155.ps.gz # creates a hep-number of it (e.g. hep-ph/0608155) and retrieves # the bibliographic information via OAI2 from arXiv.org as # arXiv-xml-record. This one is parsed and appended to a file # called arxiv.bib in BibTeX-Format. The file given is passed on to # be usable with JabRef. # # $Id: $ # Last change: <Mon, 2006/02/06 08:42:56 arwagner ingata.homeunix.net> # Author : Alexander Wagner # Language : Perl # #------------------------------------------------------------------------- # # Copyright (C) 2005 by Alexander Wagner # # This is free software; you can redistribute it and/or modify it # under the terms of the GNU Genereal Public License as published # by the Free Software Foundation; either version 2, or (at your # option) any later version. # # This program is distributed in the hope that it will be usefull, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU # General Public License for more details. # # You should have recieved a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation Inc., 675 Mass Ave, Cambridge, MA 02139, USA. # #========================================================================= use XML::XPath; use LWP::UserAgent; use locale; my $xmlfile = "arXiv.xml"; my @dublincore = ( 'dc:title', 'dc:creator', 'dc:description', 'dc:date', 'dc:type', 'dc:identifier', 'dc:publisher', 'dc:language', 'dc:rights'); my @arxivrecord = ( 'datestamp', 'id', 'keyname', 'forenames', 'affiliation', 'title', 'comments', 'report-no', 'journal-ref', 'doi', 'abstract' ); my $bibfile = "arxiv.bib"; my $filename= $ARGV[0]; @paths = split(/\//, $filename); $file = $paths[$#paths]; my $arxivno = $file; $arxivno =~ s/.ps.gz//g; $arxivno =~ s/.pdf//g; $arxivno =~ s#-ph#-ph/#g; $arxivno =~ s#-th#-th/#g; $arxivno =~ s#-ex#-ex/#g; $arxivno =~ s#cond-mat#cond-mat/#g; $arxivno =~ s#physics#physics/#g; print "Retrieving Document information for $arxivno...\n"; my $oaiurl = "http://arxiv.org/oai2?verb=GetRecord&identifier=oai:arXiv.org:$arxivno&metadataPrefix=arXiv"; my $useragent = "Perl"; $ua = new LWP::UserAgent; $ua->agent("$useragent"); $ua->env_proxy; $request = new HTTP::Request(GET,$oaiurl); $response = $ua->request($request); my $xmlresult = $response->content(); if ($xmlresult =~ m/<h1>Retry after /) { # Handle load on server... $secnds = $xmlresult; $secnds =~ s#<html><body>\n##g; $secnds =~ s#<h1>Retry after ##g; $secnds =~ s# seconds</h1>\n##g; $secnds =~ s#</body></html>\n##g; print "arXiv reports heavy load.\n"; print "Retrying after -$secnds- seconds. Stand by...\n"; sleep($secnds+1); $request = new HTTP::Request(GET,$oaiurl); $response = $ua->request($request); $xmlresult = $response->content(); } my $xp = XML::XPath->new(xml=>$xmlresult); # my $xp = XML::XPath->new(filename=>$xmlfile); foreach $dcelem (@arxivrecord) { my $nodeset = $xp->find("//$dcelem"); if (my @nodelist = $nodeset->get_nodelist) { if ($dcelem eq "keyname") { @keynames = map($_->string_value, @nodelist); } if ($dcelem eq "forenames") { @forenames = map($_->string_value, @nodelist); } @dcentries{$dcelem} = map($_->string_value, @nodelist); } } open (OUT, ">>$bibfile") or die "Can't open $bibfile: $! \n"; my $journal = ""; my $year = ""; my $volume = ""; my $page = ""; $journal = $dcentries{'journal-ref'}; $journal =~ s/[0-9].*//g; $volume = $dcentries{'journal-ref'}; $volume =~ s/$journal//g; $volume =~ s/ .*//g; $year = $dcentries{'journal-ref'}; $year =~ s/.*?\(//g; $year =~ s/\).*//g; $page = $dcentries{'journal-ref'}; $page =~ s/$journal//g; $page =~ s/$volume//g; $page =~ s/\($year\)//g; $page =~ s/ //g; if ($year eq "" ) { $yr = $dcentries{'datestamp'}; $yr =~ s/-.*//g; print OUT "\@ARTICLE{" . $keynames[0] . ":$yr,\n"; } else { print OUT "\@ARTICLE{" . $keynames[0] . ":$year,\n"; } print OUT " author = \""; $i = 0; foreach $author (@keynames) { if ($i > 0) { print OUT " AND "; } print OUT $author . ", " . $forenames[$i]; $i++; } print OUT "\", \n"; print OUT " title = \"" . $dcentries{'title'} . "\",\n"; # print OUT " journal = \"" . $dcentries{'journal-ref'} . "\",\n"; print OUT " journal = \"$journal\",\n"; print OUT " volume = \"$volume\",\n"; print OUT " year = \"$year\",\n"; print OUT " pages = \"$page\",\n"; print OUT " eprint = \"" . $dcentries{'id'} . "\",\n"; print OUT " doi = \"" . $dcentries{'doi'} . "\",\n"; print OUT " url = \"http://de.arxiv.org/abs/" . $dcentries{'id'} . "\",\n"; print OUT " abstract = \"" . $dcentries{'abstract'} . "\",\n"; print OUT " comments = \"" . $dcentries{'comments'} . "\",\n"; print OUT " reportno = \"" . $dcentries{'report-no'} . "\",\n"; print OUT " pdf = \"$filename\",\n"; print OUT " SLACcitation = \"%%CITATION = "; ($hep, $no) = split('/', $arxivno); $hep = uc($hep); print OUT "$hep $no;%%\"\n"; print OUT "}\n\n"; ------------------------------------------------------ 