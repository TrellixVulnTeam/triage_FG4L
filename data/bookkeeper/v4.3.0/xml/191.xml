<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:26:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-191/BOOKKEEPER-191.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-191] Hub server should change ledger to write, so consumed messages have chance to be garbage collected.</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-191</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;currently, hub server write entries to only one ledger, if a topic doesn&apos;t change ownership, all entries will be added to this ledger. so those consumed messages don&apos;t have chance to be garbage collected.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12547558">BOOKKEEPER-191</key>
            <summary>Hub server should change ledger to write, so consumed messages have chance to be garbage collected.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hustlmsp">Sijie Guo</assignee>
                                    <reporter username="hustlmsp">Sijie Guo</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Mar 2012 08:14:09 +0000</created>
                <updated>Wed, 13 Feb 2013 15:46:36 +0000</updated>
                            <resolved>Thu, 9 Aug 2012 16:26:55 +0100</resolved>
                                    <version>4.1.0</version>
                                    <fixVersion>4.2.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13254507" author="hustlmsp" created="Mon, 16 Apr 2012 05:41:47 +0100"  >&lt;p&gt;attach a patch to change ledger by providing size.&lt;/p&gt;</comment>
                            <comment id="13254508" author="jiraposter@reviews.apache.org" created="Mon, 16 Apr 2012 05:46:23 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4731/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4731/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for bookkeeper.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;currently, hub server write entries to only one ledger, if a topic doesn&apos;t change ownership, all entries will be added to this ledger. so those consumed messages don&apos;t have chance to be garbage collected.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-191&quot; title=&quot;Hub server should change ledger to write, so consumed messages have chance to be garbage collected.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-191&quot;&gt;&lt;del&gt;BOOKKEEPER-191&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-191&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/BOOKKEEPER-191&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java 15162b0 &lt;br/&gt;
  hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java 791c704 &lt;br/&gt;
  hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java 95ee04c &lt;br/&gt;
  hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java 47c7030 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4731/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4731/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Sijie&lt;/p&gt;
</comment>
                            <comment id="13286444" author="hustlmsp" created="Thu, 31 May 2012 10:58:41 +0100"  >&lt;p&gt;attach a new patch which rebased to latest trunk.&lt;/p&gt;</comment>
                            <comment id="13295548" author="ikelly" created="Fri, 15 Jun 2012 10:14:04 +0100"  >&lt;p&gt;I think this could be done in a much simpler manner, without the doChangeLedger flag and PersistRequest queue. There&apos;s already request queuing build into the persistence manager. We can just use that. ChangeLedgerOp is an AsynchronousOp, so the TopicOpQueuer will not run any request for the topic until it completes it&apos;s callback.&lt;/p&gt;</comment>
                            <comment id="13430380" author="hustlmsp" created="Tue, 7 Aug 2012 16:52:37 +0100"  >&lt;p&gt;@Ivan&lt;/p&gt;

&lt;p&gt;ChangeLedgerOp is asynchronous op, but PersisteOp is synchronous op. so when the ChangeLedgerOp is executing, the previous persist ops might be still on-the-fly. so doChangeLedger is to avoid close ledger until all previous requests are finished. then it is safe to change ledger.&lt;/p&gt;</comment>
                            <comment id="13430381" author="hustlmsp" created="Tue, 7 Aug 2012 16:53:21 +0100"  >&lt;p&gt;update the patch to latest trunk.&lt;/p&gt;

&lt;p&gt;review board: &lt;a href=&quot;https://reviews.apache.org/r/4731/diff/3/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4731/diff/3/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13430409" author="ikelly" created="Tue, 7 Aug 2012 17:39:59 +0100"  >&lt;blockquote&gt;
&lt;p&gt;ChangeLedgerOp is asynchronous op, but PersisteOp is synchronous op. so when the ChangeLedgerOp is executing, the previous persist ops might be still on-the-fly. so doChangeLedger is to avoid close ledger until all previous requests are finished. then it is safe to change ledger.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As I understand it, thats not how TopicOpQueuer works. Only one op is allows to run for a topic at a time whether it&apos;s sync or async. When an op is pushed onto the TopicOpQueue, the op is first put on the work queue for that topic, and then run if it is the only thing in the queue. If it is not the only thing in the queue it will wait. Then it will be run when another op(sync or async) finishes and runs popAndRunNext().&lt;/p&gt;</comment>
                            <comment id="13430751" author="hustlmsp" created="Wed, 8 Aug 2012 01:01:29 +0100"  >&lt;p&gt;&amp;gt; When an op is pushed onto the TopicOpQueue, the op is first put on the work queue for that topic, and then run if it is the only thing in the queue. If it is not the only thing in the queue it will wait. Then it will be run when another op(sync or async) finishes and runs popAndRunNext().&lt;/p&gt;

&lt;p&gt;Yes. that is how TopicOpQueue works. But for performance consideration, PersistOp takes optimistic mechanism: it assign a message seq id for the message and call BookKeeper#asyncAddEntry to issue an addEntry operation. So the next persist op doesn&apos;t need to wait the previous one to callback, BookKeeper could guarantee its order and correctness.&lt;/p&gt;

&lt;p&gt;Considering how persist op works, the only chance to issue change ledger op is in the persist&apos;s callback when those on-the-fly addEntry operations finished. And the time between planning changing ledger and issuing change-ledger op, other persist op could be put in queue, so we have to queue them until change-ledger op executed.&lt;/p&gt;

&lt;p&gt;A detail explanation is described as below:&lt;/p&gt;

&lt;p&gt;1) several persist ops are issued. the topicqueue is as below:&lt;/p&gt;

&lt;p&gt;(persist 1)&lt;br/&gt;
(persist 2)&lt;br/&gt;
...&lt;br/&gt;
(persist K)&lt;/p&gt;


&lt;p&gt;2) persist K executes. At this point, the previous K-1 requests has been issued, but they might still not callback. K detects it is the last entry of the ledger. But it could not issue change ledger op now, other wise the change ledger op would be executed immediately after K send addEntry request. It is dangerous since all K requests might still wait for the callback from BookKeeper.&lt;/p&gt;

&lt;p&gt;so the only chance to issue change ledger op is when persist K is callback (BookKeeper guarantees all previous K-1 has succeed when K succeed).&lt;/p&gt;

&lt;p&gt;(persist 1) =&amp;gt; addEntry&lt;br/&gt;
(persist 2) =&amp;gt; addEntry&lt;br/&gt;
...&lt;br/&gt;
(persist K) &amp;lt;= executed now&lt;br/&gt;
(change ledger op) (dangerous, if issued immediately by persist K)&lt;/p&gt;

&lt;p&gt;3) so the change ledger op is issued when persist K callback. during this time period, other persist ops might still be put in the op queue.&lt;/p&gt;

&lt;p&gt;(persist K) =&amp;gt; addEntry&lt;br/&gt;
...&lt;br/&gt;
(persist N)&lt;br/&gt;
(persist M)&lt;br/&gt;
(change ledger op) (issued by callback of persist K)&lt;/p&gt;

&lt;p&gt;so we have to queue those persist requests added between issuing addEntry(K) and addEntry(K) callback.&lt;/p&gt;

&lt;p&gt;hope the explanation works for you.&lt;/p&gt;</comment>
                            <comment id="13430962" author="ikelly" created="Wed, 8 Aug 2012 10:07:07 +0100"  >&lt;p&gt;Ah, you are right. I didn&apos;t see that async add was being used there. Really my issue with the fix is that another request queue is being used, when we already have one request queue. And adding this other queue adds complexity, which I think is unnecessary.&lt;/p&gt;

&lt;p&gt;I think a simpler solution would be to insert a ChangeLedgerOp into the topic queue, and have this op wait until all previous add ops have completed&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. Having the ChangeLedgerOp in the queue will prevent any new PersistOp requests from running, and they&apos;ll just be queued in the TopicOpQueue as normal. &lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; I&apos;m unsure how to do this bit. Really we need an AtomicInt which PersistOp increments and which runs a callback when it reaches 0, the callback then runs the ChangeLedgerOp logic. &lt;/p&gt;</comment>
                            <comment id="13430983" author="hustlmsp" created="Wed, 8 Aug 2012 10:43:40 +0100"  >&lt;p&gt;I think the reason why I introduced another pending queue is you couldn&apos;t prevent requests being added between the op which inserted ChangeLedgerOp and the ChangeLedgerOp. &lt;/p&gt;

{op k}
&lt;p&gt; ------------------&amp;gt; issue ChangeLedgerOp&lt;/p&gt;
{op l}
&lt;p&gt;...&lt;/p&gt;
{op n}
{changeLedgerOp issed by op k}

&lt;p&gt;when op k or the callback of op k said it wants to changeLedger, it inserted a ChangeLedgerOp into the tail of queue. but the ChangeLedgerOp just has knowledge about the operations before op k, but no idea about the ops added between op k and the changeLedgerOp.&lt;/p&gt;

&lt;p&gt;this implementation here is quite different with ManagedLedger&apos;s implementation. For ManageLedger&apos;s implementation, it used a combination of (ledgerid, entryid) as message id, so there is no strong dependency between the operations. but for BookKeeperPersistenceManager, it used an incrementing number as message id, so there is stronger dependency between operations than ManagedLedger. so I think it is quite difficult to use only one AtomicInt to achieve change ledger semantic.&lt;/p&gt;</comment>
                            <comment id="13430998" author="ikelly" created="Wed, 8 Aug 2012 11:17:48 +0100"  >&lt;p&gt;Hmmm, yes, I can&apos;t find a clean way to do this. I guess we need to extra queue. I have a few more comments. I&apos;ll put them in review board (mostly renames etc).&lt;/p&gt;</comment>
                            <comment id="13431699" author="hustlmsp" created="Thu, 9 Aug 2012 10:16:03 +0100"  >&lt;p&gt;thanks Ivan for reviewing.&lt;/p&gt;

&lt;p&gt;update the patch to address Ivan&apos;s comments.&lt;br/&gt;
review board: &lt;a href=&quot;https://reviews.apache.org/r/4731/diff/4/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4731/diff/4/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13431781" author="ikelly" created="Thu, 9 Aug 2012 14:04:19 +0100"  >&lt;p&gt;lgtm +1. Committing&lt;/p&gt;</comment>
                            <comment id="13431901" author="ikelly" created="Thu, 9 Aug 2012 16:26:55 +0100"  >&lt;p&gt;Committed as r1371255. Thanks Sijie.&lt;/p&gt;</comment>
                            <comment id="13431922" author="hudson" created="Thu, 9 Aug 2012 16:52:31 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #641 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/641/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/641/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-191&quot; title=&quot;Hub server should change ledger to write, so consumed messages have chance to be garbage collected.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-191&quot;&gt;&lt;del&gt;BOOKKEEPER-191&lt;/del&gt;&lt;/a&gt;: Hub server should change ledger to write, so consumed messages have chance to be garbage collected. (sijie via ivank) (Revision 1371255)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12522737" name="BK-191.diff" size="44587" author="hustlmsp" created="Mon, 16 Apr 2012 05:41:45 +0100"/>
                            <attachment id="12539997" name="BOOKKEEPER-191.diff" size="42137" author="hustlmsp" created="Thu, 9 Aug 2012 10:16:03 +0100"/>
                            <attachment id="12539660" name="BOOKKEEPER-191.diff" size="41959" author="hustlmsp" created="Tue, 7 Aug 2012 16:53:21 +0100"/>
                            <attachment id="12530363" name="BOOKKEEPER-191.diff" size="41218" author="hustlmsp" created="Thu, 31 May 2012 10:58:41 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 16 Apr 2012 04:46:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>232656</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyn5gf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>169071</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>