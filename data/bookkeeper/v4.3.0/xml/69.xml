<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:30:53 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-69/BOOKKEEPER-69.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-69] ServerRedirectLoopException when a machine (hosts bookie server &amp; hub server) reboot, which is caused by race condition of topic manager</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-69</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;1) machine perf10 is rebooted. the bookie server &amp;amp; hub server are not restarted automatically after reboot.&lt;br/&gt;
2) client 1 &amp;amp; client 2 are still running. the topics owned in perf10 will be re-assigned to perf8/perf9. but they would fail because not enough bookie servers are available.&lt;br/&gt;
3) after 2 hours, we found that perf10 is rebooted. we restarted bookie server &amp;amp; hub server on perf10&lt;br/&gt;
4) then we got ServerRedirectLoopException in client.&lt;/p&gt;</description>
                <environment>&lt;p&gt;3 machines (perf8, perf9, perf10), each machine hosts a bookie server &amp;amp; a hub server.&lt;br/&gt;
perf8 is used as default server for client 1. perf9 is used as default server for client 2.&lt;/p&gt;

&lt;p&gt;bookkeeper is configured as below:&lt;br/&gt;
ensemble size is 3, quorum size is 2.&lt;/p&gt;</environment>
        <key id="12525013">BOOKKEEPER-69</key>
            <summary>ServerRedirectLoopException when a machine (hosts bookie server &amp; hub server) reboot, which is caused by race condition of topic manager</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ikelly">Ivan Kelly</assignee>
                                    <reporter username="hustlmsp">Sijie Guo</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Sep 2011 07:01:27 +0100</created>
                <updated>Wed, 7 Dec 2011 15:56:06 +0000</updated>
                            <resolved>Fri, 18 Nov 2011 10:39:01 +0000</resolved>
                                    <version>4.0.0</version>
                                    <fixVersion>4.0.0</fixVersion>
                                    <component>hedwig-client</component>
                    <component>hedwig-server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13116218" author="hustlmsp" created="Wed, 28 Sep 2011 07:15:09 +0100"  >&lt;h2&gt;&lt;a name=&quot;0.investigation&quot;&gt;&lt;/a&gt;0. investigation&lt;/h2&gt;

&lt;p&gt;we did some investigation on the ServerRedirectLoopException topic, said topic-0.&lt;br/&gt;
from zookeeper, topic-0 is owned by perf9.&lt;br/&gt;
we dump the hub server jvm of perf8 / perf9. we found that topic-0 is owned by both perf8 and perf9.&lt;br/&gt;
in perf8, topic-0 is owned in topic manger but not in persistence manager.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;1.Cause&quot;&gt;&lt;/a&gt;1. Cause &lt;/h2&gt;

&lt;p&gt;The ServerRedirectLoopException &quot;Already made the request before to redirected host: &quot; is caused by &quot;topic manager own topic but persistence manager doesn&apos;t&quot;.&lt;/p&gt;

&lt;p&gt;if &quot;topic manager own topic&quot;, a subscription request will call persistence manager to get current seq id of the topic. if the persistence manager doesn&apos;t has the topic info, persistence manager will throw a ServerNotResponsibleForTopicException with &lt;b&gt;empty redirect host&lt;/b&gt;.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;BookKeeperPersistenceManager.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        TopicInfo topicInfo = topicInfos.get(topic);

        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (topicInfo == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PubSubException.ServerNotResponsibleForTopicException(&quot;&quot;);
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;hub server will send &lt;b&gt;NOT_RESPONSIBLE_FOR_TOPIC&lt;/b&gt; to hedwig client.&lt;/p&gt;

&lt;p&gt;client handles redirect request, and it found that no host to redirect. it will try default server again, but the default server has been in tried server list. &lt;br/&gt;
client throws ServerRedirectLoopException.&lt;/p&gt;</comment>
                            <comment id="13116227" author="hustlmsp" created="Wed, 28 Sep 2011 07:24:58 +0100"  >&lt;h4&gt;&lt;a name=&quot;whytopicmanagerowntopicbutpersistencemanagerdoesn%27towntopic.&quot;&gt;&lt;/a&gt;why topic manager own topic but persistence manager doesn&apos;t own topic.&lt;/h4&gt;

&lt;p&gt;first, the topic acquisition flow and release topic flow when exception are stated as below:&lt;/p&gt;

&lt;p&gt;acquireTopic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a) check topics list, if the topic is in topic set owned by this hub server, return itself.&lt;br/&gt;
b) then, read the zk server to know who is the owner of the topic (async)&lt;br/&gt;
    i) if the node existed and the owner is not itself, return the owner and send a redirect response to client.&lt;br/&gt;
    ii) if the node existed and the owner is itself, then &lt;b&gt;it consider the zk node is stale. topic manager will delete it and go to c)&lt;/b&gt;&lt;br/&gt;
    iii) if the node is not existed go to c)&lt;br/&gt;
c) choose or claim a topic.&lt;br/&gt;
     i) if the topic manager succeed to acquire the topic, it will call listeners (persistence/subscriptions/region manager) to do their topic acquisition logic. (async)&lt;br/&gt;
        a) if all the listeners succeed to acquire topic, topic manager add the topic to topic set.&lt;br/&gt;
        b) if one of the listeners failed, topic manager starts to do &apos;lostTopic&apos; logic.&lt;/p&gt;&lt;/blockquote&gt;        

&lt;p&gt;lostTopic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a) first topic manager removes topic from topic set.&lt;br/&gt;
b) ask all the listeners (persistence/subscriptions/region manager) to do &apos;lostTopic&apos; logic (just put a releaseOp in their queues).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In our case, there are some parallel subscribe requests sent during we restart bookkeeper server.&lt;br/&gt;
For ease, we assume &apos;sub-1&apos; and &apos;sub-2&apos; subscribe &apos;topic-0&apos; in default server A at the same time.&lt;/p&gt;

&lt;p&gt;1) two topic acquire ops will be executed asynchronously.&lt;/p&gt;

&lt;p&gt;2) sub-1 acquire op succeed to claim the hub server as the topic owner ( in c) ) (the owner zk node is created). And it call listeners (persistence/subscriptions/region manager) to do their topic acquisition logic. these manager will just put an acquire op in their queues, as below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt; Persistence Manager &amp;lt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; sub-1 acquire op &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;3) then sub-2 acquire op executed. since sub-1 doesn&apos;t callback, so the topic will not in topic set. sub-2 will got to b)-ii). sub-2 deletes the zk node created by sub-1. and sub-2 does same logic as sub-1 in 2)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt; Persistence Manager &amp;lt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; sub-1 acquire op &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; sub-2 acquire op &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;4) if bookkeeper restart from failure between sub-1 acquire op execution and sub-2 acquire op execution in persistence manager. sub-1 acquire op will fail due to NotEnoughBookieException. sub-1 will enter lost topic logic. A release op will be added in persistence manager queue.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt; Persistence Manager &amp;lt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; sub-2 acquire op &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; sub-1 release op &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;5) sub-2 acquire op is executed successfully, because the bookkeeper server has been restarted. the topic will be added to topic manager&apos;s topic set.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt; Persistence Manager &amp;lt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; sub-1 release op &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;6) sub-1 release op is executed. it deletes the topic info in persistence manager. so we have &lt;b&gt;the topic in topic manager but not in persistence manager&lt;/b&gt;, which is dangerous.&lt;/p&gt;

&lt;p&gt;Even worse, if we have multi default servers (actually in our testing, we have!), we have other servers trying to claim the same topic. Assume sub-3 communicates with default server B to subscribe topic-0.&lt;/p&gt;

&lt;p&gt;in 3) of the above flow, after sub-2 delete the zk node created by sub-1. sub-3 in default server B and sub-1 in default server A have same chance to acquire topic-0. If sub-3 in default server B succeed, then we in a worse status: &lt;b&gt;server A considers itself as owner since the topic is in its topic set, also the same as server B. in zookeeper the owner is server B&lt;/b&gt;. (actually we indeed in this status in our testing!)&lt;/p&gt;</comment>
                            <comment id="13116230" author="hustlmsp" created="Wed, 28 Sep 2011 07:33:33 +0100"  >&lt;p&gt;A proposal to fix this issue is:&lt;/p&gt;

&lt;p&gt;1) make sure only one acquireOp is executed when acquiring a topic in topic manager.&lt;br/&gt;
2) the other requests to the under-acquisition topic, will queue their callbacks.&lt;br/&gt;
3) when the topic acquisition is done, all the queued callbacks will be triggered according to the acquisition result. &lt;/p&gt;</comment>
                            <comment id="13118695" author="hustlmsp" created="Sat, 1 Oct 2011 07:52:16 +0100"  >&lt;p&gt;Attach a testcase to reproduce this issue. &lt;/p&gt;</comment>
                            <comment id="13118999" author="hustlmsp" created="Sun, 2 Oct 2011 13:25:03 +0100"  >&lt;p&gt;A detailed proposal:&lt;/p&gt;


&lt;p&gt;1) introduce TopicStatus to record the status change of topic during topic acquisition/releasing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/** Acquire Topic with shouldClaim == true **/&lt;br/&gt;
CLAIMING,&lt;br/&gt;
CLAIMING_ENQUEUE_CALLBACK,&lt;br/&gt;
CLAIMING_GET_ENQUEUED_CALLBACKS,&lt;/p&gt;

&lt;p&gt;/** Acquire topic with shouldClaim == false **/&lt;br/&gt;
CHOOSING,&lt;br/&gt;
CHOOSING_ENQUEUE_CALLBACK,&lt;br/&gt;
CHOOSING_GET_ENQUEUED_CALLBACKS,&lt;/p&gt;

&lt;p&gt;/** Topic is acquired **/&lt;br/&gt;
ACQUIRED,&lt;/p&gt;

&lt;p&gt;/** Topic is failed during acquisition **/&lt;br/&gt;
ACQUIRE_FAIL_RELEASE,&lt;/p&gt;

&lt;p&gt;/** Release Topic **/&lt;br/&gt;
RELEASING,&lt;br/&gt;
RELEASE_ENQUEUE_CALLBACK,&lt;br/&gt;
RELEASE_GET_ENQUEUED_CALLBACKS&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;CLAIM/CHOOSE/RELEASE&amp;#93;&lt;/span&gt;ING : the topic is under claim/choose/release status, some one got the chance to do actual work.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;CLAIM/CHOOSE/RELEASE&amp;#93;&lt;/span&gt;_ENQUEUE_CALLBACK : there is some on doing claim/choose/release works, the op tries to queue callback.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;CLAIM/CHOOSE/RELEASE&amp;#93;&lt;/span&gt;_GET_ENQUEUED_CALLBACKS : claim/choose/release works are done. try to get all the queued callbacks and trigger them.&lt;br/&gt;
ACQUIRED : the topic is acquired by the hub server&lt;br/&gt;
ACQUIRE_FAIL_RELEASE : topic acquisition is failed due to some reason (such as NotEnoughBookiesException), enter topic releasing phase&lt;/p&gt;

&lt;p&gt;2) change topic set to a concurrent map &lt;b&gt;ConcurrentMap&amp;lt;ByteString, TopicStatus&amp;gt;&lt;/b&gt; :&lt;br/&gt;
this map is used for tracking topic status transition to ensure only one acquisition/release for a specific topic is executed at the same time.&lt;/p&gt;

&lt;p&gt;3) added HashMap&amp;lt;ByteString, List&amp;lt;Callback&amp;lt;HedwigSocketAddress&amp;gt;&amp;gt;&amp;gt; to queue get owner callbacks. added HashMap&amp;lt;ByteString, List&amp;lt;Callback&amp;lt;Void&amp;gt;&amp;gt;&amp;gt; to queue release op callbacks.&lt;/p&gt;

&lt;p&gt;4) topic status transition in get owner &amp;amp; release op flow:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;*             CLAMING_ENQUEUE_CALLBACK
*                  ^ |
*      enqueue     | |
*      callback    | |
*                  | &amp;gt;
*      claim             claim topic
* null -------&amp;gt; CLAMING -------------&amp;gt; CLAMING_GET_CALLBACKS ---------| (trigger queued callbacks)
*  ^   |                                                              |-----&amp;gt; ACQUIRED
*  |   -------&amp;gt; CHOOSING -------------&amp;gt; CHOOSING_GET_CALLBACKS -------|  |        |
*  |   choose      | ^   choose topic                                    |        |
*  |               | |                                                   |        |  Release
*  |               | |   enqueue callback                                |        |   topic
*  |               &amp;gt; |                                                   &amp;gt;        |
*  |          CHOOSING_ENQUEUE_CALLBACK                  ACQUIRE_FAILE_RELEASE    |
*  |                                                                     |        |
*  |                                                                     &amp;gt;        &amp;gt;
*  ---------------------------- RELEASE_GET_ENQUEUED_CALLBACKS &amp;lt;--------- RELEASING
*                                                                           ^ |
*                                                         enqueue callback  | |
*                                                                           | &amp;gt;
*                                                                RELEASE_ENQUEUE_CALLBACK
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;get owner:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;check topic status
	&lt;ol&gt;
		&lt;li&gt;if topic is not existed, go to 2)&lt;/li&gt;
		&lt;li&gt;if topic is CLAIMING/CHOOSING, go to 3)&lt;/li&gt;
		&lt;li&gt;if topic is ACQUIRED, callback immediately&lt;/li&gt;
		&lt;li&gt;else go to 1)&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;claim/choose topic: set topic status as CLAIMING/CHOOSING
	&lt;ol&gt;
		&lt;li&gt;if success, go to 4)&lt;/li&gt;
		&lt;li&gt;if false, go to 1) to check topic status again&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;enqueue callback&lt;/li&gt;
	&lt;li&gt;do get owner
	&lt;ol&gt;
		&lt;li&gt;real get owner&lt;/li&gt;
		&lt;li&gt;if get owner succeed
		&lt;ol&gt;
			&lt;li&gt;get enqueued callback list&lt;/li&gt;
			&lt;li&gt;mark topic as ACQUIRED&lt;/li&gt;
			&lt;li&gt;trigger all the queued callbacks&lt;/li&gt;
		&lt;/ol&gt;
		&lt;/li&gt;
		&lt;li&gt;if failed
		&lt;ol&gt;
			&lt;li&gt;get enqueued callback list&lt;/li&gt;
			&lt;li&gt;mark topic as ACQUIRE_FAIL_RELEASE&lt;/li&gt;
			&lt;li&gt;enter releasing phase, the queued callback list will be triggered at the end of topic-releasing&lt;/li&gt;
		&lt;/ol&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;release: most are same as get owner.&lt;/p&gt;</comment>
                            <comment id="13119002" author="hustlmsp" created="Sun, 2 Oct 2011 13:34:00 +0100"  >&lt;p&gt;Attach a patch implemented the proposal. And add 3 test cases in topic manager for concurrent get owner / release operations on same topic.&lt;/p&gt;</comment>
                            <comment id="13139389" author="jiraposter@reviews.apache.org" created="Sat, 29 Oct 2011 19:25:32 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2615/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2615/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for bookkeeper.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;implement the proposal to fix race condition of topic manager&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-69&quot; title=&quot;ServerRedirectLoopException when a machine (hosts bookie server &amp;amp; hub server) reboot, which is caused by race condition of topic manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-69&quot;&gt;&lt;del&gt;BOOKKEEPER-69&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/BOOKKEEPER-69&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/BOOKKEEPER-69&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicStatus.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicStatus.java&lt;/a&gt; PRE-CREATION &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java&lt;/a&gt; PRE-CREATION &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java&lt;/a&gt; 1194964 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2615/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2615/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Sijie&lt;/p&gt;
</comment>
                            <comment id="13139390" author="jiraposter@reviews.apache.org" created="Sat, 29 Oct 2011 19:25:33 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2615/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2615/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-10-29 18:25:31.143990)&lt;/p&gt;


&lt;p&gt;Review request for bookkeeper.&lt;/p&gt;


&lt;p&gt;Summary (updated)&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;implement the proposal to fix race condition of topic manager&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-69&quot; title=&quot;ServerRedirectLoopException when a machine (hosts bookie server &amp;amp; hub server) reboot, which is caused by race condition of topic manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-69&quot;&gt;&lt;del&gt;BOOKKEEPER-69&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/BOOKKEEPER-69&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/BOOKKEEPER-69&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicStatus.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicStatus.java&lt;/a&gt; PRE-CREATION &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java&lt;/a&gt; 1194964 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java&lt;/a&gt; PRE-CREATION &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java&lt;/a&gt; 1194964 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2615/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2615/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Sijie&lt;/p&gt;
</comment>
                            <comment id="13147110" author="ikelly" created="Wed, 9 Nov 2011 15:39:58 +0000"  >&lt;p&gt;Im not sure the analysis of the issue here is correct. Or at least, the test attached doesn&apos;t exercise this scenario. One problem I did spot was that the topic manager was completing the operation without error sometimes even when it couldn&apos;t acquire the topic. I&apos;ve attached a patch to fix this. &lt;/p&gt;

&lt;p&gt;There seems to be other issues with how a hub handles a bookie failure. For example, if a hub has a topic and then a bookie dies and comes back up, it can no longer publish to the topic because it doesn&apos;t clear up the ledger after the failed write.&lt;/p&gt;</comment>
                            <comment id="13147122" author="ikelly" created="Wed, 9 Nov 2011 15:56:58 +0000"  >&lt;p&gt;Actually, &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-74&quot; title=&quot;Bookkeeper Persistence Manager should give up topic on error&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-74&quot;&gt;&lt;del&gt;BOOKKEEPER-74&lt;/del&gt;&lt;/a&gt; talks about the problem im seeing with bookie failures and publish.&lt;/p&gt;</comment>
                            <comment id="13147562" author="hustlmsp" created="Thu, 10 Nov 2011 08:54:49 +0000"  >&lt;p&gt;Ivan, thanks for your comments.&lt;/p&gt;

&lt;p&gt;After checking the code again, I found that my analysis has some problems. The acquire/release op in TopicManager is executed one by one. &lt;/p&gt;

&lt;p&gt;And after reading your patch, I found that the real cause of race condition is between acquire and release. If we can follow the following patterns, we can avoid this race condition. &lt;br/&gt;
1) topic is put in topic list only after persistence manager and subscription manager acquire topic successfully.&lt;br/&gt;
2) topic is removed from topic list only after persistence manager and subscription manager released topic.&lt;/p&gt;

&lt;p&gt;now, 1) is guaranteed, 2) is not guaranteed (your patch makes sure callback is triggered after all managers release topic).&lt;/p&gt;

&lt;p&gt;I will reading codes again to confirm my thoughts, and comment later.&lt;/p&gt;</comment>
                            <comment id="13149238" author="hustlmsp" created="Sun, 13 Nov 2011 07:12:31 +0000"  >&lt;p&gt;In TopicManager, acquireTopic / releaseTopic puts a TopicOp in topicOpQueue. And the TopicOps are executed one by one. So if we can guarantee that AcquireOp and ReleaseOp trigger callback only when they finished acquire/release, we can avoid race condition.&lt;/p&gt;

&lt;p&gt;In AcquireOp:&lt;/p&gt;

&lt;p&gt;It uses a MultiCallback to trigger original callback when its listeners (SubscritpionManager / PersistenceManager) finished acquired topic, as below:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;AbstractTopicManager.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void notifyListenersAndAddToOwnedTopics(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ByteString topic,
            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Callback&amp;lt;HedwigSocketAddress&amp;gt; originalCallback, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; originalContext) {

        Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt; postCb = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt;() {

            @Override
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationFinished(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx, &lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt; resultOfOperation) {
                topics.add(topic);
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cfg.getRetentionSecs() &amp;gt; 0) {
                    scheduler.schedule(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Runnable&lt;/span&gt;() {
                        @Override
                        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void run() {
                            &lt;span class=&quot;code-comment&quot;&gt;// Enqueue a release operation. (Recall that release
&lt;/span&gt;                            &lt;span class=&quot;code-comment&quot;&gt;// doesn&apos;t &lt;span class=&quot;code-quote&quot;&gt;&quot;fail&quot;&lt;/span&gt; even &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the topic is missing.)
&lt;/span&gt;                            releaseTopic(topic, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt;() {

                                @Override
                                &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationFailed(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx, PubSubException exception) {
                                    logger.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;failure that should never happen when periodically releasing topic &quot;&lt;/span&gt;
                                                 + topic, exception);
                                }

                                @Override
                                &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationFinished(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx, &lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt; resultOfOperation) {
                                    logger.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;successful periodic release of topic &quot;&lt;/span&gt; + topic);
                                }

                            }, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
                        }
                    }, cfg.getRetentionSecs(), TimeUnit.SECONDS);
                }
                originalCallback.operationFinished(originalContext, addr);
            }

            @Override
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationFailed(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx, PubSubException exception) {
                &lt;span class=&quot;code-comment&quot;&gt;// TODO: optimization: we can release &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; as soon as we experience the first error.
&lt;/span&gt;                realReleaseTopic(topic, CallbackUtils.curry(originalCallback, addr), originalContext);
                originalCallback.operationFailed(ctx, exception);
            }
        };

        Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt; mcb = CallbackUtils.multiCallback(listeners.size(), postCb, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (TopicOwnershipChangeListener listener : listeners) {
            listener.acquiredTopic(topic, mcb, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If topic acquisition is proceed without any error, the original callback did be triggered after all acquisition works are done in every manager.&lt;/p&gt;

&lt;p&gt;If topic acquisition is proceed with any error, it did realReleaseTopic. since realReleaseTopic is processed in asynchronous way. so the original callback will be triggered immediately when realReleaseTopic is called. So topic manager may process acquiring/releasing a same topic in same time.&lt;/p&gt;

&lt;p&gt;Ivan&apos;s patch fixed this issue by letting original callback is triggered after realReleaseTopic did finished actually.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
--- a/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java
+++ b/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java
@@ -135,10 +135,19 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class AbstractTopicManager &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; TopicManager {
             }
 
             @Override
-            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationFailed(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx, PubSubException exception) {
+            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationFailed(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; PubSubException exception) {
                 &lt;span class=&quot;code-comment&quot;&gt;// TODO: optimization: we can release &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; as soon as we experience the first error.
&lt;/span&gt;-                realReleaseTopic(topic, CallbackUtils.curry(originalCallback, addr), originalContext);
-                originalCallback.operationFailed(ctx, exception);
+                Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt; cb = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt;() {
+                    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationFinished(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; _ctx, &lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt; _resultOfOperation) {
+                        originalCallback.operationFailed(ctx, exception);
+                    }
+                    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationFailed(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; _ctx, PubSubException _exception) {
+                        logger.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Exception releasing topic&quot;&lt;/span&gt;, _exception);
+                        originalCallback.operationFailed(ctx, exception);
+                    }
+                };
+                
+                realReleaseTopic(topic, cb, originalContext);
             }
         };
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although in realReleaseTopic, its listeners (SubscriptionManager/PersistenceManager) did losing topic in asynchronous way. But it wouldn&apos;t introduce race again, since operations in SubscriptionManager/PersistenceManager still be processed in a queue one by one, which means newer acquire op will be executed until older releaseOp executed.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

    &lt;span class=&quot;code-comment&quot;&gt;// AbstractTopicManager.java
&lt;/span&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void realReleaseTopic(ByteString topic, Callback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt; callback, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx) {
        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (TopicOwnershipChangeListener listener : listeners)
            listener.lostTopic(topic);
        topics.remove(topic);
        postReleaseCleanup(topic, callback, ctx);
    }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So Ivan&apos;s patch did fixed this issue. It is simple and clear. Thanks, Ivan.&lt;/p&gt;
</comment>
                            <comment id="13151986" author="hustlmsp" created="Thu, 17 Nov 2011 10:55:48 +0000"  >&lt;p&gt;attach a new patch which contains Ivan&apos;s fix and test case.&lt;/p&gt;</comment>
                            <comment id="13152770" author="ikelly" created="Fri, 18 Nov 2011 10:39:01 +0000"  >&lt;p&gt;Committed r1203576, Thanks Sijie.&lt;/p&gt;</comment>
                            <comment id="13152777" author="hudson" created="Fri, 18 Nov 2011 10:57:40 +0000"  >&lt;p&gt;Integrated in bookkeeper-trunk #228 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/228/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/228/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-69&quot; title=&quot;ServerRedirectLoopException when a machine (hosts bookie server &amp;amp; hub server) reboot, which is caused by race condition of topic manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-69&quot;&gt;&lt;del&gt;BOOKKEEPER-69&lt;/del&gt;&lt;/a&gt;: ServerRedirectLoopException when a machine (hosts bookie server &amp;amp; hub server) reboot, which is caused by race condition of topic manager (Sijie, ivank via ivank)&lt;/p&gt;

&lt;p&gt;ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12503094" name="BOOKKEEPER-69.possiblefix.diff" size="1630" author="ikelly" created="Wed, 9 Nov 2011 15:40:43 +0000"/>
                            <attachment id="12497270" name="bookkeeper-69-testcase.patch" size="10683" author="hustlmsp" created="Sat, 1 Oct 2011 07:52:16 +0100"/>
                            <attachment id="12502116" name="bookkeeper-69.patch" size="45703" author="hustlmsp" created="Thu, 3 Nov 2011 08:40:43 +0000"/>
                            <attachment id="12497401" name="bookkeeper-69.patch" size="44347" author="hustlmsp" created="Sun, 2 Oct 2011 13:34:00 +0100"/>
                            <attachment id="12504052" name="bookkeeper-69.patch_v2" size="12317" author="hustlmsp" created="Thu, 17 Nov 2011 10:55:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 29 Oct 2011 18:25:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34387</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hynzbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>173908</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>