<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:31:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-162/BOOKKEEPER-162.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-162] LedgerHandle.readLastConfirmed does not work</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-162</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;Two bookkeeper clients.&lt;br/&gt;
1st continuously writing to ledger X.&lt;br/&gt;
2nd (bk.openLedgerNoRecovery) polling ledger X for new entries and reading them.&lt;/p&gt;

&lt;p&gt;In response we always reveiceing 0 as last confirmed entry id (in fact we are receiving -1 from each bookie RecoveryData but then in ReadLastConfirmedOp, but uninitialized &quot;long maxAddConfirmed;&quot; takes priority in Math.max(...).&lt;/p&gt;

&lt;p&gt;Main question - is given scenario is expected to work at all?&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12541562">BOOKKEEPER-162</key>
            <summary>LedgerHandle.readLastConfirmed does not work</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="fpj">Flavio Junqueira</assignee>
                                    <reporter username="philipp.sushkin">Philipp Sushkin</reporter>
                        <labels>
                    </labels>
                <created>Tue, 7 Feb 2012 05:15:35 +0000</created>
                <updated>Mon, 22 Oct 2012 15:50:13 +0100</updated>
                            <resolved>Mon, 13 Feb 2012 10:20:11 +0000</resolved>
                                    <version>4.0.0</version>
                                    <fixVersion>4.1.0</fixVersion>
                                    <component>bookkeeper-client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13202106" author="fpj" created="Tue, 7 Feb 2012 06:13:19 +0000"  >&lt;p&gt;Hi Philipp, Are the adds to the ledger asynchronous? Are you calling readLastConfirmed after receiving an ack for some add operation?&lt;/p&gt;

&lt;p&gt;In principle, it should work. Check testReadFromOpenLedger in BookieReadWriteTest. &lt;/p&gt;

&lt;p&gt;Do you have logs you can share with us, both bookie and client?&lt;/p&gt;</comment>
                            <comment id="13202122" author="philipp.sushkin" created="Tue, 7 Feb 2012 07:05:37 +0000"  >&lt;p&gt;Thanks, I tried updated version of testReadFromOpenLedger&lt;/p&gt;

&lt;p&gt;So looks like it was misusing of lhOpen.getLastAddConfirmed(), should use lhOpen.readLastConfirmed() instead.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Closing issue.&lt;/b&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Test
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testReadFromOpenLedger2() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;code-comment&quot;&gt;// Create a ledger
&lt;/span&gt;            lh = bkc.createLedger(digestType, ledgerPassword);
            &lt;span class=&quot;code-comment&quot;&gt;// bkc.initMessageDigest(&lt;span class=&quot;code-quote&quot;&gt;&quot;SHA1&quot;&lt;/span&gt;);
&lt;/span&gt;            ledgerId = lh.getId();
            LedgerHandle lhOpen = bkc.openLedgerNoRecovery(ledgerId, digestType, ledgerPassword);
            LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Ledger ID: &quot;&lt;/span&gt; + lh.getId());
            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; numEntriesToWrite; i++) {
                ByteBuffer entry = ByteBuffer.allocate(4);
                entry.putInt(rng.nextInt(maxInt));
                entry.position(0);

                entries.add(entry.array());
                entriesSize.add(entry.array().length);
                lh.addEntry(entry.array());
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (i == numEntriesToWrite / 2) {
                    &lt;span class=&quot;code-comment&quot;&gt;// no recovery opened ledger &apos;s last confirmed entry id is
&lt;/span&gt;                    &lt;span class=&quot;code-comment&quot;&gt;// less than written
&lt;/span&gt;                    &lt;span class=&quot;code-comment&quot;&gt;// and it just can read until (i-1)
&lt;/span&gt;                    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; toRead = i - 1;
                    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; readLastConfirmed = lhOpen.readLastConfirmed();
                    assertTrue(readLastConfirmed != 0);
                    assertTrue(lhOpen.getLastAddConfirmed() != 0);
                    Enumeration&amp;lt;LedgerEntry&amp;gt; readEntry = lhOpen.readEntries(toRead, toRead);
                    assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;Enumeration of ledger entries has no element&quot;&lt;/span&gt;, readEntry.hasMoreElements() == &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
                    LedgerEntry e = readEntry.nextElement();
                    assertEquals(toRead, e.getEntryId());
                    Assert.assertArrayEquals(entries.get(toRead), e.getEntry());
                    &lt;span class=&quot;code-comment&quot;&gt;// should not written to a read only ledger
&lt;/span&gt;                    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                        lhOpen.addEntry(entry.array());
                        fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Should have thrown an exception here&quot;&lt;/span&gt;);
                    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BKException.BKIllegalOpException bkioe) {
                        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is the correct response
&lt;/span&gt;                    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) {
                        LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected exception&quot;&lt;/span&gt;, ex);
                        fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected exception&quot;&lt;/span&gt;);
                    }

                }
            }
            &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; last = lh.readLastConfirmed();
            assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;Last confirmed add: &quot;&lt;/span&gt; + last, last == (numEntriesToWrite - 2));

            LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;*** WRITE COMPLETE ***&quot;&lt;/span&gt;);
            &lt;span class=&quot;code-comment&quot;&gt;// close ledger
&lt;/span&gt;            lh.close();
            &lt;span class=&quot;code-comment&quot;&gt;// close read only ledger should not change metadata
&lt;/span&gt;            lhOpen.close();
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BKException e) {
            LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test failed&quot;&lt;/span&gt;, e);
            fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test failed due to BookKeeper exception&quot;&lt;/span&gt;);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
            LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test failed&quot;&lt;/span&gt;, e);
            fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test failed due to interruption&quot;&lt;/span&gt;);
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In fact nothing is done to original test, but&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
LedgerHandle lhOpen = bkc.openLedgerNoRecovery(ledgerId, digestType, ledgerPassword);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// close read only ledger should not change metadata
&lt;/span&gt;lhOpen.close();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;moved out, and &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; readLastConfirmed = lhOpen.readLastConfirmed();
assertTrue(readLastConfirmed != 0);
assertTrue(lhOpen.getLastAddConfirmed() != 0);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Small question - is there any way to get and updateledger status (closed?) using ledger handle? As I see currently there is no public api for that.&lt;/p&gt;
</comment>
                            <comment id="13202156" author="fpj" created="Tue, 7 Feb 2012 08:12:16 +0000"  >&lt;p&gt;Correct, we currently don&apos;t have an api to check if a ledger is closed. We assume that it is communicated from a writer to a reader by an external channel, e.g., through zookeeper. It wouldn&apos;t be difficult to have such a call, though. It is simply checking the ledger metadata on zookeeper.&lt;/p&gt;</comment>
                            <comment id="13202222" author="philipp.sushkin" created="Tue, 7 Feb 2012 10:45:12 +0000"  >&lt;p&gt;I modified test a little bit to make it fail.&lt;/p&gt;

&lt;p&gt;Please find failing version. It changed to use 2 different BookKeeperTestClient to simulate 2 different pc (may failing case) more precisely.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Test
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testReadFromOpenLedger2() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            BookKeeperTestClient  writerBkc = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BookKeeperTestClient(baseClientConf);
            BookKeeperTestClient  readerBkc = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BookKeeperTestClient(baseClientConf);
            &lt;span class=&quot;code-comment&quot;&gt;// Create a ledger
&lt;/span&gt;            lh = writerBkc.createLedger(digestType, ledgerPassword);
            &lt;span class=&quot;code-comment&quot;&gt;// bkc.initMessageDigest(&lt;span class=&quot;code-quote&quot;&gt;&quot;SHA1&quot;&lt;/span&gt;);
&lt;/span&gt;            ledgerId = lh.getId();
            LedgerHandle lhOpen = readerBkc.openLedgerNoRecovery(ledgerId, digestType, ledgerPassword);
            LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Ledger ID: &quot;&lt;/span&gt; + lh.getId());
            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; numEntriesToWrite; i++) {
                ByteBuffer entry = ByteBuffer.allocate(4);
                entry.putInt(rng.nextInt(maxInt));
                entry.position(0);

                entries.add(entry.array());
                entriesSize.add(entry.array().length);
                lh.addEntry(entry.array());
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (i == numEntriesToWrite / 2) {
                    &lt;span class=&quot;code-comment&quot;&gt;// no recovery opened ledger &apos;s last confirmed entry id is
&lt;/span&gt;                    &lt;span class=&quot;code-comment&quot;&gt;// less than written
&lt;/span&gt;                    &lt;span class=&quot;code-comment&quot;&gt;// and it just can read until (i-1)
&lt;/span&gt;                    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; toRead = i - 1;
                    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; readLastConfirmed = lhOpen.readLastConfirmed();
                    assertTrue(readLastConfirmed != 0);
                    Enumeration&amp;lt;LedgerEntry&amp;gt; readEntry = lhOpen.readEntries(toRead, toRead);
                    assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;Enumeration of ledger entries has no element&quot;&lt;/span&gt;, readEntry.hasMoreElements() == &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
                    LedgerEntry e = readEntry.nextElement();
                    assertEquals(toRead, e.getEntryId());
                    Assert.assertArrayEquals(entries.get(toRead), e.getEntry());
                    &lt;span class=&quot;code-comment&quot;&gt;// should not written to a read only ledger
&lt;/span&gt;                    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                        lhOpen.addEntry(entry.array());
                        fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Should have thrown an exception here&quot;&lt;/span&gt;);
                    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BKException.BKIllegalOpException bkioe) {
                        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is the correct response
&lt;/span&gt;                    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) {
                        LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected exception&quot;&lt;/span&gt;, ex);
                        fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected exception&quot;&lt;/span&gt;);
                    }

                }
            }
            &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; last = lh.readLastConfirmed();
            assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;Last confirmed add: &quot;&lt;/span&gt; + last, last == (numEntriesToWrite - 2));

            LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;*** WRITE COMPLETE ***&quot;&lt;/span&gt;);
            &lt;span class=&quot;code-comment&quot;&gt;// close ledger
&lt;/span&gt;            lh.close();
            &lt;span class=&quot;code-comment&quot;&gt;// close read only ledger should not change metadata
&lt;/span&gt;            lhOpen.close();
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BKException e) {
            LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test failed&quot;&lt;/span&gt;, e);
            fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test failed due to BookKeeper exception&quot;&lt;/span&gt;);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
            LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test failed&quot;&lt;/span&gt;, e);
            fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test failed due to interruption&quot;&lt;/span&gt;);
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;I am getting it failing, as I understand, because of &quot;lastEntry &amp;gt; lastAddConfirmed&quot; check.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;LedgerHandle.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void asyncReadEntries(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; firstEntry, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; lastEntry,
                                 ReadCallback cb, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx) {
        &lt;span class=&quot;code-comment&quot;&gt;// Little sanity check
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (firstEntry &amp;lt; 0 || lastEntry &amp;gt; lastAddConfirmed
                || firstEntry &amp;gt; lastEntry) {
            cb.readComplete(BKException.Code.ReadException, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, ctx);
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
        }
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So looks like recreation of ledger landle is required every read iteration.&lt;/p&gt;

&lt;p&gt;Is it expected?&lt;/p&gt;

</comment>
                            <comment id="13202251" author="fpj" created="Tue, 7 Feb 2012 11:46:12 +0000"  >&lt;p&gt;Philipp, Can you generate a patch with your new test, please?&lt;/p&gt;</comment>
                            <comment id="13202254" author="philipp.sushkin" created="Tue, 7 Feb 2012 11:47:24 +0000"  >&lt;p&gt;Also reproduced situation where noRecover reader always getting 0 .&lt;/p&gt;

&lt;p&gt;Unfortunately, I cannot reproduce it using bookkeeper test, only with my app. Currently trying to investigate where I could fail.&lt;/p&gt;

&lt;p&gt;Attaching log:&lt;br/&gt;
Writer sends 2 entries with simple content &apos;1&apos;, &apos;2&apos;&lt;br/&gt;
Reader tries to read lh.readLastConfirmed(), but always getting 0.&lt;/p&gt;
</comment>
                            <comment id="13202259" author="philipp.sushkin" created="Tue, 7 Feb 2012 11:57:53 +0000"  >&lt;p&gt;Please find patch with test attached.&lt;/p&gt;</comment>
                            <comment id="13202269" author="philipp.sushkin" created="Tue, 7 Feb 2012 12:07:26 +0000"  >&lt;p&gt;I am confused, now it is passing...&lt;br/&gt;
Either it happens from time to time, or something was corrupted when I was writing it. &lt;/p&gt;</comment>
                            <comment id="13202271" author="fpj" created="Tue, 7 Feb 2012 12:12:39 +0000"  >&lt;p&gt;Uploading patch that fixes this issue. It includes the test Philipp provided.&lt;/p&gt;</comment>
                            <comment id="13202272" author="philipp.sushkin" created="Tue, 7 Feb 2012 12:12:41 +0000"  >&lt;p&gt;Please find new patch attached, now test failing.&lt;/p&gt;</comment>
                            <comment id="13202274" author="fpj" created="Tue, 7 Feb 2012 12:16:31 +0000"  >&lt;p&gt;As you pointed out, the current test in trunk reopens the ledger every time, and it passes if you reopen because we set the lastAddConfirmed value to the max value read from bookies. A second read should fail if you keep reading because the lastEntry the call requests may be larger than the lastAddConfirmed, which is not updated. The patch I provided fixes this issue.&lt;/p&gt;</comment>
                            <comment id="13202275" author="philipp.sushkin" created="Tue, 7 Feb 2012 12:18:04 +0000"  >&lt;p&gt;Same patch, but reverted constructor change (I don&apos;t use Parametrized test, ofcourse).&lt;/p&gt;</comment>
                            <comment id="13202284" author="philipp.sushkin" created="Tue, 7 Feb 2012 12:27:56 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; The patch I provided fixes this issue.&lt;/p&gt;

&lt;p&gt;Thanks a lot.&lt;/p&gt;</comment>
                            <comment id="13202335" author="fpj" created="Tue, 7 Feb 2012 12:57:03 +0000"  >&lt;p&gt;I have refined the test a bit. &lt;/p&gt;</comment>
                            <comment id="13202362" author="philipp.sushkin" created="Tue, 7 Feb 2012 13:20:54 +0000"  >&lt;p&gt;I started to debug and do have small question.&lt;/p&gt;

&lt;p&gt;Same case 1 writer, 1 reader.&lt;br/&gt;
Reader tries to request lastAddConfirmed.&lt;/p&gt;

&lt;p&gt;On server side I see there is header:&lt;/p&gt;
&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt;[1, 2, 0, 0, 0, 0, 0, 0,&lt;br/&gt;
 0, 0, 0, 0, 0, 0, 0, 2,&lt;br/&gt;
 -1, -1, -1, -1, -1, -1, -1, -1]&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;built in BookieServer&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;BookieServer.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; ByteBuffer buildResponse(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; errorCode, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; version, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; opCode, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerId, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; entryId) {
        ByteBuffer rsp = ByteBuffer.allocate(24);
        rsp.putInt(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PacketHeader(version, 
                                    opCode, (&lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt;)0).toInt());
        rsp.putInt(errorCode);
        rsp.putLong(ledgerId);
        rsp.putLong(entryId);

        rsp.flip();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; rsp;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EntryId here -1, because I was requesting last confirmed.&lt;br/&gt;
Request looked like&lt;/p&gt;
&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1&amp;#93;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also data itself&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;EntryLogger.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] readEntry(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerId, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; entryId, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; location) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
...
        &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; data[] = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[entrySize];
        ByteBuffer buff = ByteBuffer.wrap(data);
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rc = fc.read(buff, pos);
 ...
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I see data itself&lt;/p&gt;
&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt; [0, 0, 0, 0, 0, 0, 0, 2,&lt;br/&gt;
 0, 0, 0, 0, 0, 0, 0, 1,&lt;br/&gt;
 -1, -1, -1, -1, -1, -1, -1, -1,&lt;br/&gt;
 0, 0, 0, 0, 0, 0, 0, 2,&lt;br/&gt;
 -16, 41, -22, 25, 26, 93, -80, -40, -80, -15, 7, -36, 72, -52, 13, -54, 39, 117, 12, -56, 2]&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On client in &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;DigestManager.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    RecoveryData verifyDigestAndReturnLastConfirmed(ChannelBuffer dataReceived) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; BKDigestMatchException {
        verifyDigest(dataReceived);
        dataReceived.readerIndex(8);

        &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; entryId = dataReceived.readLong();
        &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; lastAddConfirmed = dataReceived.readLong();
        &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; length = dataReceived.readLong();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RecoveryData(lastAddConfirmed, entryId);

    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I see (reader offset 32 after &quot;dataReceived.readerIndex(8);&quot; - *adjustm. 24 + 8)&lt;/p&gt;
&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt;[1, 2, 0, 0, 0, 0, 0, 0,&lt;br/&gt;
 0, 0, 0, 0, 0, 0, 0, 2,&lt;br/&gt;
 -1, -1, -1, -1, -1, -1, -1, -1, &lt;br/&gt;
 0, 0, 0, 0, 0, 0, 0, 2,  &amp;lt; ledgerId&lt;br/&gt;
 0, 0, 0, 0, 0, 0, 0, 1,  &amp;lt; long entryId = dataReceived.readLong();&lt;br/&gt;
 -1, -1, -1, -1, -1, -1, -1, -1, &amp;lt; long lastAddConfirmed = dataReceived.readLong(); &lt;b&gt;PROBLEM HERE&lt;/b&gt;&lt;br/&gt;
 0, 0, 0, 0, 0, 0, 0, 2,&lt;br/&gt;
 -16, 41, -22, 25, 26, 93, -80, -40, -80, -15, 7, -36, 72, -52, 13, -54, 39, 117, 12, -56, 2]&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;So, am I right: lastAddConfirmed is a part of record, not calculated on request?&lt;/p&gt;</comment>
                            <comment id="13202372" author="fpj" created="Tue, 7 Feb 2012 13:39:09 +0000"  >&lt;p&gt;It is safer to check if the maxAddConfirmed is larger than lastAddConfirmed before setting. I realized that if the ledger writer invokes it, the patch may set lastAddConfirmed incorrectly. &lt;/p&gt;</comment>
                            <comment id="13202521" author="fpj" created="Tue, 7 Feb 2012 16:46:21 +0000"  >&lt;p&gt;Yes, we write lastAddConfirmed upon every add. No bookie alone knows whether an add has been confirmed to the client application or not.&lt;/p&gt;</comment>
                            <comment id="13203255" author="philipp.sushkin" created="Wed, 8 Feb 2012 04:13:10 +0000"  >&lt;p&gt;So my problem - using async adds. That is why LedgerHandle.readLastConfirmed returns 0.&lt;br/&gt;
In fact, as I understand, it is not correct anyway. It should be -1 in this case (everybookie returned -1) ...&lt;/p&gt;

&lt;p&gt;For my particular problem - will try to to send empty messages periodically just to maintain&lt;br/&gt;
LedgerHandle.readLastConfirmed working on readers...&lt;/p&gt;</comment>
                            <comment id="13203349" author="hustlmsp" created="Wed, 8 Feb 2012 08:06:37 +0000"  >&lt;p&gt;hmm. currently readLastConfirmed doesn&apos;t work correctly in following case:&lt;/p&gt;

&lt;p&gt;1) there is no entries in the ledger, readLastConfirmed returns 0.&lt;br/&gt;
2) there is 1 entries in the ledger, readLastConfirmed returns 0.&lt;/p&gt;

&lt;p&gt;this issue is caused by giving a wrong initial value (0) for maxAddConfirmed in ReadLastConfirmedOp.&lt;/p&gt;

&lt;p&gt;the expected value would be better as below: &lt;/p&gt;

&lt;p&gt;1) there is no entries in the ledger, readLastConfirmed returns -2.&lt;br/&gt;
2) there is 1 entry in the ledger, readLastConfirmed returns -1.&lt;/p&gt;

&lt;p&gt;what is your opinion, flavio?&lt;/p&gt;</comment>
                            <comment id="13203355" author="hustlmsp" created="Wed, 8 Feb 2012 08:10:14 +0000"  >&lt;p&gt;BTW, if a ledger is closed, readLastConfirmedOp would return wrong last confirmed.&lt;br/&gt;
we should check a ledger when reading last confirmed. if the ledger is closed, we use the close value in ledger metadata as last confirmed directly, we don&apos;t need read it again.&lt;/p&gt;

&lt;p&gt;I think this is also a bug related to readLastConfirmed. it is better to fix it in this jira.&lt;/p&gt;</comment>
                            <comment id="13203358" author="fpj" created="Wed, 8 Feb 2012 08:15:52 +0000"  >&lt;p&gt;Agreed, it shouldn&apos;t return 0 when the ledger is empty. In the case the ledger has one element, it should still return -1 (empty) according to the semantics of the call. readLastConfirmed returns the maximum hint across all bookies, and the hint for a ledger is the value of the last confirmed field in the last entry it wrote. Consequently, if there is only one entry written, the hint will say that there is no add confirmed before that one, which is correct.&lt;/p&gt;

&lt;p&gt;Perhaps if you need to know precisely which entries have been confirmed, you may want to have the writer communicating to the readers though ZooKeeper or directly (e.g., TCP). The readLastConfirmed mechanism gives an approximation of the state of the ledger, and is particularly useful when writing streams continuously. &lt;/p&gt;

&lt;p&gt;If you can say more about your use case, we may be able to help you decide, Philipp.&lt;/p&gt;</comment>
                            <comment id="13203378" author="fpj" created="Wed, 8 Feb 2012 08:36:28 +0000"  >&lt;p&gt;I&apos;ll fix the initialization issue and resubmit the patch.&lt;/p&gt;</comment>
                            <comment id="13203379" author="fpj" created="Wed, 8 Feb 2012 08:38:13 +0000"  >&lt;p&gt;About the point on readLastConfirmed, I don&apos;t think that&apos;s a bug. This call gets the hints from the bookies. There is a similar call that simply reads the local value of the ledger handle once the ledger is open.&lt;/p&gt;</comment>
                            <comment id="13203383" author="hustlmsp" created="Wed, 8 Feb 2012 08:47:28 +0000"  >&lt;p&gt;hmm, I think it would be better to add more documents in readLastConfirmed to tell the difference between readLastConfirmed and getLastAddConfirmed. otherwise the different return value would make user confused. &lt;/p&gt;</comment>
                            <comment id="13203387" author="fpj" created="Wed, 8 Feb 2012 08:56:16 +0000"  >&lt;p&gt;Check the API docs: &lt;a href=&quot;http://zookeeper.apache.org/bookkeeper/docs/r4.0.0/apidocs/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://zookeeper.apache.org/bookkeeper/docs/r4.0.0/apidocs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t mind having more documentation added if it is not clear the distinction. &lt;/p&gt;</comment>
                            <comment id="13203408" author="hustlmsp" created="Wed, 8 Feb 2012 09:21:37 +0000"  >&lt;p&gt;seems the document is not so clear. It would better to add more &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13203688" author="fpj" created="Wed, 8 Feb 2012 15:55:38 +0000"  >&lt;p&gt;Fixed the initialization problem.&lt;/p&gt;</comment>
                            <comment id="13204323" author="hustlmsp" created="Thu, 9 Feb 2012 07:23:28 +0000"  >&lt;p&gt;thanks Flavio. most of the patch is good to me, except that you import LedgerHandle in PerChannelBookieClient and BookKeeperTestClient in BookieReadWriteTest, these two classes are not used, and in ReadLastConfirmedOp.java why you don&apos;t use Math.max ?&lt;/p&gt;</comment>
                            <comment id="13204344" author="fpj" created="Thu, 9 Feb 2012 08:08:37 +0000"  >&lt;p&gt;Thanks, Sijie. Not using max was part of debugging. I&apos;ve put it back.&lt;/p&gt;

&lt;p&gt;The reference to LedgerHandle in PerChannelBookieCliet is due to the constant LAST_ADD_CONFIRMED that I moved to BookieProtocol. I think we forgot to move it when we wrote BookieProtocol. To me at least it makes more sense there, though.&lt;/p&gt;

&lt;p&gt;The reference to BookKeeperTestClient was a leftover from Philipp&apos;s patch that I forgot to remove when I cleaned it up.&lt;/p&gt;

&lt;p&gt;I&apos;m attaching a new patch that fixes all these.&lt;/p&gt;</comment>
                            <comment id="13204431" author="hustlmsp" created="Thu, 9 Feb 2012 10:35:40 +0000"  >&lt;p&gt;the new patch is good to me. +1&lt;/p&gt;</comment>
                            <comment id="13204472" author="fpj" created="Thu, 9 Feb 2012 12:14:21 +0000"  >&lt;p&gt;Thanks, Sijie. If no one else has an issue with this patch, I&apos;ll commit it later today.&lt;/p&gt;</comment>
                            <comment id="13206789" author="fpj" created="Mon, 13 Feb 2012 10:20:11 +0000"  >&lt;p&gt;Committed revision 1243462.&lt;/p&gt;</comment>
                            <comment id="13206797" author="hudson" created="Mon, 13 Feb 2012 10:39:43 +0000"  >&lt;p&gt;Integrated in bookkeeper-trunk #356 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/356/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/356/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-162&quot; title=&quot;LedgerHandle.readLastConfirmed does not work&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-162&quot;&gt;&lt;del&gt;BOOKKEEPER-162&lt;/del&gt;&lt;/a&gt;: LedgerHandle.readLastConfirmed does not work (fpj) (Revision 1243462)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
fpj : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13206807" author="fpj" created="Mon, 13 Feb 2012 11:15:44 +0000"  >&lt;p&gt;Thanks for reporting and helping, Philipp.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12513925" name="BOOKKEEPER-162.patch" size="13243" author="fpj" created="Thu, 9 Feb 2012 08:08:37 +0000"/>
                            <attachment id="12513829" name="BOOKKEEPER-162.patch" size="14742" author="fpj" created="Wed, 8 Feb 2012 15:55:38 +0000"/>
                            <attachment id="12513612" name="BOOKKEEPER-162.patch" size="4861" author="fpj" created="Tue, 7 Feb 2012 13:39:09 +0000"/>
                            <attachment id="12513606" name="BOOKKEEPER-162.patch" size="4819" author="fpj" created="Tue, 7 Feb 2012 12:57:03 +0000"/>
                            <attachment id="12513602" name="BOOKKEEPER-162.patch" size="4648" author="fpj" created="Tue, 7 Feb 2012 12:12:38 +0000"/>
                            <attachment id="12513604" name="BookieReadWriteTest.java.patch" size="4049" author="philipp.sushkin" created="Tue, 7 Feb 2012 12:18:04 +0000"/>
                            <attachment id="12513603" name="BookieReadWriteTest.java.patch" size="4404" author="philipp.sushkin" created="Tue, 7 Feb 2012 12:12:41 +0000"/>
                            <attachment id="12513597" name="BookieReadWriteTest.java.patch" size="4113" author="philipp.sushkin" created="Tue, 7 Feb 2012 11:57:52 +0000"/>
                            <attachment id="12513596" name="bookkeeper.log" size="120186" author="philipp.sushkin" created="Tue, 7 Feb 2012 11:47:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 7 Feb 2012 06:13:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>226849</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy4scf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>61748</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>