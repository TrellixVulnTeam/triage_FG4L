<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:28:33 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-247/BOOKKEEPER-247.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-247] Detection of under replication</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-247</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;This JIRA discusses how the bookkeeper system will detect underreplication of ledger entries.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12554513">BOOKKEEPER-247</key>
            <summary>Detection of under replication</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12553925">BOOKKEEPER-237</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ikelly">Ivan Kelly</assignee>
                                    <reporter username="ikelly">Ivan Kelly</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 May 2012 16:13:42 +0100</created>
                <updated>Wed, 13 Feb 2013 15:46:44 +0000</updated>
                            <resolved>Fri, 17 Aug 2012 11:42:41 +0100</resolved>
                                                    <fixVersion>4.2.0</fixVersion>
                                    <component>bookkeeper-auto-recovery</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13285791" author="ikelly" created="Wed, 30 May 2012 17:24:26 +0100"  >&lt;p&gt;@rakesh, are you working on this checking now? if not i&apos;d like to take a run at it.&lt;/p&gt;</comment>
                            <comment id="13286451" author="rakeshr" created="Thu, 31 May 2012 11:04:40 +0100"  >&lt;p&gt;@Ivan, presently I&apos;m working on the &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-272&quot; title=&quot;Provide automatic mechanism to know bookie failures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-272&quot;&gt;&lt;del&gt;BOOKKEEPER-272&lt;/del&gt;&lt;/a&gt;, as it is the beginning. I&apos;have done the initial draft version and likely will upload the patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-272&quot; title=&quot;Provide automatic mechanism to know bookie failures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-272&quot;&gt;&lt;del&gt;BOOKKEEPER-272&lt;/del&gt;&lt;/a&gt;. I think we would be able to do the regression on this. &lt;/p&gt;

&lt;p&gt;Please take a look on the comments and attached docs on umbrella JIRA and would like to know your suggestions.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Rakesh&lt;/p&gt;</comment>
                            <comment id="13287552" author="ikelly" created="Fri, 1 Jun 2012 18:33:44 +0100"  >&lt;p&gt;I&apos;ve put a first pass at the detection algorithm up onto github&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;It doesn&apos;t make any assumption about where it&apos;ll be run from, as it runs through the standard bookkeeper client code. The entry point is LedgerChecker#checkLedger which you pass a LedgerHandle and a callback. On completion, the callback is given a set of LedgerFragmentReplicas, which are the fragments which are underrepliced.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://github.com/ivankelly/bookkeeper/tree/BOOKKEEPER-247&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/ivankelly/bookkeeper/tree/BOOKKEEPER-247&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://github.com/ivankelly/bookkeeper/commit/5b2d079b8792f7bdb63f4f9ae7d78cede85c58b7&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/ivankelly/bookkeeper/commit/5b2d079b8792f7bdb63f4f9ae7d78cede85c58b7&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13293352" author="umamaheswararao" created="Tue, 12 Jun 2012 05:58:37 +0100"  >&lt;p&gt;Thanks a lot Ivan,&lt;br/&gt;
 Currently we are planing to detect the replication based on Bookie failures. If one bookie shutdown or failed, then we will be able to detect with help of auditor. &lt;br/&gt;
This code is checking each ledger for under-replication. If one bookie failed, then all ledgers in that bookie should be replicated.&lt;/p&gt;

&lt;p&gt;Use of this ledger checking would be only when some disks failed in bookie and if still continue running the Bookie. That time, same bookie(partial disk failures Bookie) can use this class and find the underreplicated ledgers?&lt;/p&gt;

&lt;p&gt;If that is the case, worth editing the JIRA title as Detect under replication of ledgers on bookie disk failures?&lt;/p&gt;





</comment>
                            <comment id="13293592" author="ikelly" created="Tue, 12 Jun 2012 14:04:58 +0100"  >&lt;p&gt;A bookie failure, is really the failure of a lot of ledger fragments. I think the direction of &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-272&quot; title=&quot;Provide automatic mechanism to know bookie failures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-272&quot;&gt;&lt;del&gt;BOOKKEEPER-272&lt;/del&gt;&lt;/a&gt; matches that. The sequence of events for a bookie failure is.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Bookie fails&lt;/li&gt;
	&lt;li&gt;Auditor puts list of affected ledgers in suspected ledgers znode&lt;/li&gt;
	&lt;li&gt;Recovery worker takes a ledger from the list, and runs this detection on it. Puts underreplicated ledger fragments in underreplicated znode.&lt;/li&gt;
	&lt;li&gt;Recovery worker takes an underreplicated ledger fragment, and rereplicates it.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Each bookie is running a recovery worker, so the work of detection and rereplication will be distributed, while the auditor for checking the bookies will be centralized. Also, i think bookies should run this detection on all their ledgers, every few hours, to detect disk issues.&lt;/p&gt;</comment>
                            <comment id="13293634" author="umamaheswararao" created="Tue, 12 Jun 2012 14:58:29 +0100"  >&lt;p&gt;We are thinking about the sequence till now like below:&lt;/p&gt;

&lt;p&gt;1.Bookie fails&lt;br/&gt;
2.Auditor puts list of affected ledgers in suspected/underreplicated ledgers znode&lt;br/&gt;
3.Replication worker will take one by one ledger from suspected ledgers znode and re-replicate it.&lt;br/&gt;
  If we are able reuse the BookKeeperAdmin code to re-replicate, then BookKeeperAdmin #recoverLedger already finding the fragments and replicating then and there. Am I missing some thing here?&lt;/p&gt;

&lt;p&gt;Otherwise Recovery worker/Replication worker may need to watch two level of data. 1. suspected ledgers znode 2. underreplicated znode.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt; Also, i think bookies should run this detection on all their ledgers, every few hours, to detect disk issues&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree. I think work can be triggered on disk failures and will run hourly basis by default.&lt;/p&gt;</comment>
                            <comment id="13293639" author="ikelly" created="Tue, 12 Jun 2012 15:04:05 +0100"  >&lt;p&gt;This also works. &lt;/p&gt;</comment>
                            <comment id="13293685" author="rakeshr" created="Tue, 12 Jun 2012 16:16:19 +0100"  >&lt;p&gt;@Ivan @Uma&lt;br/&gt;
Just to summarize:- As per my understanding, the Auditor will identify the suspected ledgers and publish to everyone. The re-replicator will take this under replicated ledgers and do the re-replication.&lt;/p&gt;

&lt;p&gt;Then I feel we can use this JIRA for handling self-check on disk failures and do re-replication. Also, it would be good to modify the JIRA title accordingly. How does it sound?&lt;/p&gt;</comment>
                            <comment id="13293689" author="ikelly" created="Tue, 12 Jun 2012 16:22:53 +0100"  >&lt;p&gt;I think what is in the patch now works as a standalone patch. I&apos;d prefer to keep the patches small and modular like this and do the work over many JIRAs. It makes it easier to get code through the review and testing process. I&apos;ll open new JIRAs for the other bits.&lt;/p&gt;</comment>
                            <comment id="13396613" author="umamaheswararao" created="Tue, 19 Jun 2012 10:09:23 +0100"  >&lt;p&gt;Hi Ivan, Are you planning to make LedgerChecker as a patch?&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-299&quot; title=&quot;Provide LedgerFragmentReplicator which should replicate the fragments found from LedgerChecker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-299&quot;&gt;&lt;del&gt;BOOKKEEPER-299&lt;/del&gt;&lt;/a&gt; is using LedgerChecker for finding the missed fragments.&lt;/p&gt;</comment>
                            <comment id="13396650" author="ikelly" created="Tue, 19 Jun 2012 11:18:35 +0100"  >&lt;p&gt;@Uma, yes, but there&apos;s a chain of JIRAs which need to be submitted first though. &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-292&quot; title=&quot;Test backward compatibility automatically between versions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-292&quot;&gt;&lt;del&gt;BOOKKEEPER-292&lt;/del&gt;&lt;/a&gt; needs to go in. Once that is in, I can start working on tests for &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-2&quot; title=&quot;bookkeeper does not put enough meta-data in to do recovery properly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-2&quot;&gt;&lt;del&gt;BOOKKEEPER-2&lt;/del&gt;&lt;/a&gt; (I already have the changes to the code itself). Once &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-2&quot; title=&quot;bookkeeper does not put enough meta-data in to do recovery properly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-2&quot;&gt;&lt;del&gt;BOOKKEEPER-2&lt;/del&gt;&lt;/a&gt; is in, this can go in, and then &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-299&quot; title=&quot;Provide LedgerFragmentReplicator which should replicate the fragments found from LedgerChecker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-299&quot;&gt;&lt;del&gt;BOOKKEEPER-299&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Perhaps you could review &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-292&quot; title=&quot;Test backward compatibility automatically between versions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-292&quot;&gt;&lt;del&gt;BOOKKEEPER-292&lt;/del&gt;&lt;/a&gt; to get the ball rolling. Sijie had looked at it, but hadn&apos;t +1&apos;d.&lt;/p&gt;</comment>
                            <comment id="13396704" author="umamaheswararao" created="Tue, 19 Jun 2012 12:53:34 +0100"  >&lt;p&gt;Yep, I missed BK-2. It was mentioned in BK-2&apos;s description already.&lt;br/&gt;
BTW, I have just taken a look on BK-292. Seems Sijie +1&apos;d on it now. and tests looks great.&lt;/p&gt;</comment>
                            <comment id="13402960" author="umamaheswararao" created="Thu, 28 Jun 2012 10:46:24 +0100"  >
&lt;p&gt;I think we have to handle one special case in LedgerChecker.&lt;/p&gt;

&lt;p&gt;Take a case, creating the ledger with ensemble 3 and quorum is 2.&lt;/p&gt;

&lt;p&gt;Add a first entry:&lt;br/&gt;
 Now ensemble should look like &apos;0 A B C&apos;&lt;br/&gt;
Entry should have added to A, B.  Now kill the bookie C.&lt;/p&gt;

&lt;p&gt;Add one more entry. Now Writer will get the exception when writing to C and will lead to ensemble updation.&lt;br/&gt;
Now new ensemble should look like &apos;1 A B D&apos;&lt;/p&gt;


&lt;p&gt;Writer can continue with this ensemble util there is no failure again.&lt;/p&gt;

&lt;p&gt;Now if you run the ledger checker on this Ledger, It will consider &apos;0 A B C&apos; as UnderReplicated Fragment. But here first entry already met the quorum, we need not reoplicate any entries.&lt;/p&gt;

&lt;p&gt;I think we should skip such cases here.&lt;/p&gt;

&lt;p&gt;Some grepped logs related to this issue:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;
First entry write:

2012-06-28 14:23:46,797 - INFO  - [main:BookKeeperClusterTestCase@336] - New bookie on port 5002 has been created.
2012-06-28 14:23:46,970 - INFO  - [New I/O client worker #1-1:PerChannelBookieClient$1@146] - Successfully connected to bookie: /10.18.47.127:5000
2012-06-28 14:23:46,970 - INFO  - [New I/O client worker #1-2:PerChannelBookieClient$1@146] - Successfully connected to bookie: /10.18.47.127:5001
2012-06-28 14:23:47,064 - INFO  - [main:TestLedgerChecker@137] - Killing /10.18.47.127:5002 from ensemble=[/10.18.47.127:5000, /10.18.47.127:5001, /10.18.47.127:5002]
Ensembles after first entry : {0=[/10.18.47.127:5000, /10.18.47.127:5001, /10.18.47.127:5002]}
.......................
.......................


2012-06-28 14:23:47,549 - INFO  - [main:BookKeeperClusterTestCase@336] - New bookie on port 5003 has been created.


Second erntry write:


First entry write:

2012-06-28 14:23:46,797 - INFO  - [main:BookKeeperClusterTestCase@336] - New bookie on port 5002 has been created.
2012-06-28 14:23:46,970 - INFO  - [New I/O client worker #1-1:PerChannelBookieClient$1@146] - Successfully connected to bookie: /XX.XX.XX.127:5000
2012-06-28 14:23:46,970 - INFO  - [New I/O client worker #1-2:PerChannelBookieClient$1@146] - Successfully connected to bookie: /XX.XX.XX.127:5001
2012-06-28 14:23:47,064 - INFO  - [main:TestLedgerChecker@137] - Killing /XX.XX.XX.127:5002 from ensemble=[/XX.XX.XX.127:5000, /XX.XX.XX.127:5001, /XX.XX.XX.127:5002]
Ensembles after first entry : {0=[/XX.XX.XX.127:5000, /XX.XX.XX.127:5001, /XX.XX.XX.127:5002]}
.......................
.......................


2012-06-28 14:23:47,549 - INFO  - [main:BookKeeperClusterTestCase@336] - New bookie on port 5003 has been created.


Second erntry write:

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2012-06-28 14:23:48,537 - ERROR - &lt;span class=&quot;error&quot;&gt;&amp;#91;New I/O client boss #1:PerChannelBookieClient$1@151&amp;#93;&lt;/span&gt; - Could not connect to bookie: /XX.XX.XX.127:5002&lt;br/&gt;
2012-06-28 14:23:48,537 - WARN  - &lt;span class=&quot;error&quot;&gt;&amp;#91;New I/O client boss #1:PendingAddOp@146&amp;#93;&lt;/span&gt; - Write did not succeed: 3, 1&lt;br/&gt;
2012-06-28 14:23:48,584 - INFO  - &lt;span class=&quot;error&quot;&gt;&amp;#91;New I/O client worker #1-4:PerChannelBookieClient$1@146&amp;#93;&lt;/span&gt; - Successfully connected to bookie: /XX.XX.XX.127:5003&lt;br/&gt;
Ensembles after second entry : &lt;/p&gt;
{0=[/XX.XX.XX.127:5000, /XX.XX.XX.127:5001, /XX.XX.XX.127:5002], 1=[/XX.XX.XX.127:5000, /XX.XX.XX.127:5001, /XX.XX.XX.127:5003]}
&lt;p&gt;2012-06-28 14:23:48,631 - ERROR - &lt;span class=&quot;error&quot;&gt;&amp;#91;pool-4-thread-1:PerChannelBookieClient@618&amp;#93;&lt;/span&gt; - Unexpected read response received from bookie: /XX.XX.XX.127:5000 for ledger: 3, entry: 0 , ignoring&lt;br/&gt;
2012-06-28 14:23:49,633 - ERROR - &lt;span class=&quot;error&quot;&gt;&amp;#91;New I/O client boss #1:PerChannelBookieClient$1@151&amp;#93;&lt;/span&gt; - Could not connect to bookie: /XX.XX.XX.127:5002&lt;br/&gt;
2012-06-28 14:23:49,633 - INFO  - &lt;span class=&quot;error&quot;&gt;&amp;#91;main:TestLedgerChecker@160&amp;#93;&lt;/span&gt; - unreplicated fragment: Fragment(LedgerID: 3, FirstEntryID: 1&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;, LastEntryID: 1&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, Host: /XX.XX.XX.127:5000)&lt;br/&gt;
2012-06-28 14:23:49,633 - INFO  - &lt;span class=&quot;error&quot;&gt;&amp;#91;main:TestLedgerChecker@160&amp;#93;&lt;/span&gt; - unreplicated fragment: Fragment(LedgerID: 3, FirstEntryID: 0&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, LastEntryID: 0&lt;span class=&quot;error&quot;&gt;&amp;#91;-1&amp;#93;&lt;/span&gt;, Host: /XX.XX.XX.127:5002)&lt;br/&gt;
2012-06-28 14:23:49,633 - INFO  - &lt;span class=&quot;error&quot;&gt;&amp;#91;main:BookKeeperClusterTestCase@92&amp;#93;&lt;/span&gt; - TearDown&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

</comment>
                            <comment id="13402964" author="umamaheswararao" created="Thu, 28 Jun 2012 10:53:53 +0100"  >&lt;p&gt;I think we have to handle one special case in LedgerChecker.&lt;/p&gt;

&lt;p&gt;Take a case, creating the ledger with ensemble 3 and quorum is 2.&lt;/p&gt;

&lt;p&gt;Add a first entry:&lt;br/&gt;
Now ensemble should look like &apos;0 A B C&apos;&lt;br/&gt;
Entry should have added to A, B. Now kill the bookie C.&lt;/p&gt;

&lt;p&gt;Add one more entry. Now Writer will get the exception when writing to C and will lead to ensemble updation.&lt;br/&gt;
Now new ensemble should look like &apos;1 A B D&apos;&lt;/p&gt;

&lt;p&gt;Writer can continue with this ensemble util there is no failure again.&lt;/p&gt;

&lt;p&gt;Now if you run the ledger checker on this Ledger, It will consider &apos;0 A B C&apos; as UnderReplicated Fragment. But here first entry already met the quorum, we need not reoplicate any entries.&lt;/p&gt;

&lt;p&gt;I think we should skip such cases here.&lt;/p&gt;

&lt;p&gt;Some grepped logs related to this issue:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;
First entry write:

2012-06-28 14:23:46,797 - INFO  - [main:BookKeeperClusterTestCase@336] - New bookie on port 5002 has been created.
2012-06-28 14:23:46,970 - INFO  - [New I/O client worker #1-1:PerChannelBookieClient$1@146] - Successfully connected to bookie: /XX.XX.XX.127:5000
2012-06-28 14:23:46,970 - INFO  - [New I/O client worker #1-2:PerChannelBookieClient$1@146] - Successfully connected to bookie: /XX.XX.XX.127:5001
2012-06-28 14:23:47,064 - INFO  - [main:TestLedgerChecker@137] - Killing /XX.XX.XX.127:5002 from ensemble=[/XX.XX.XX.127:5000, /XX.XX.XX.127:5001, /XX.XX.XX.127:5002]
Ensembles after first entry : {0=[/XX.XX.XX.127:5000, /XX.XX.XX.127:5001, /XX.XX.XX.127:5002]}
.......................
.......................


2012-06-28 14:23:47,549 - INFO  - [main:BookKeeperClusterTestCase@336] - New bookie on port 5003 has been created.


Second erntry write:

2012-06-28 14:23:48,537 - ERROR - [New I/O client boss #1:PerChannelBookieClient$1@151] - Could not connect to bookie: /XX.XX.XX.127:5002
2012-06-28 14:23:48,537 - WARN  - [New I/O client boss #1:PendingAddOp@146] - Write did not succeed: 3, 1
2012-06-28 14:23:48,584 - INFO  - [New I/O client worker #1-4:PerChannelBookieClient$1@146] - Successfully connected to bookie: /XX.XX.XX.127:5003
Ensembles after second entry : {0=[/XX.XX.XX.127:5000, /XX.XX.XX.127:5001, /XX.XX.XX.127:5002], 1=[/XX.XX.XX.127:5000, /XX.XX.XX.127:5001, /XX.XX.XX.127:5003]}
2012-06-28 14:23:48,631 - ERROR - [pool-4-thread-1:PerChannelBookieClient@618] - Unexpected read response received from bookie: /XX.XX.XX.127:5000 for ledger: 3, entry: 0 , ignoring
2012-06-28 14:23:49,633 - ERROR - [New I/O client boss #1:PerChannelBookieClient$1@151] - Could not connect to bookie: /XX.XX.XX.127:5002
2012-06-28 14:23:49,633 - INFO  - [main:TestLedgerChecker@160] - unreplicated fragment: Fragment(LedgerID: 3, FirstEntryID: 1[2], LastEntryID: 1[0], Host: /XX.XX.XX.127:5000)
2012-06-28 14:23:49,633 - INFO  - [main:TestLedgerChecker@160] - unreplicated fragment: Fragment(LedgerID: 3, FirstEntryID: 0[1], LastEntryID: 0[-1], Host: /XX.XX.XX.127:5002)
2012-06-28 14:23:49,633 - INFO  - [main:BookKeeperClusterTestCase@92] - TearDown
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13402971" author="umamaheswararao" created="Thu, 28 Jun 2012 11:00:29 +0100"  >&lt;p&gt;Ivan, I have generated a patch with your GitHub code and attached patch with Test, that will fail in the above explained scenario.&lt;/p&gt;</comment>
                            <comment id="13403152" author="umamaheswararao" created="Thu, 28 Jun 2012 15:52:07 +0100"  >&lt;p&gt;How about skipping this kind of fragments like below&lt;br/&gt;
 while finding fault index from ensemble start ID, it should have a check that should not cross end entry ID also. If it is not able to find the failed BK index with in this range then we can skip this fragment right?&lt;/p&gt;</comment>
                            <comment id="13403793" author="ikelly" created="Fri, 29 Jun 2012 10:15:19 +0100"  >&lt;p&gt;This shouldn&apos;t happen, as I only check the replicas which should have the entry, for each entry. I&apos;ll check your test now. I probably missed something. Well spotted &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13403946" author="ikelly" created="Fri, 29 Jun 2012 15:42:42 +0100"  >&lt;p&gt;The problem was quite simple in the end. The code that ensures I only checked the correct replicas, only worked if the number of entries in the ledger was greater than the number of bookies in the ensemble. Adding two checks fixed it. I also moved around the code a bit. I&apos;ve pushed it to github and attached a new patch. I still need to add tests to this, so the patch shouldn&apos;t be considered ready for submission yet.&lt;/p&gt;</comment>
                            <comment id="13404723" author="umamaheswararao" created="Sun, 1 Jul 2012 14:30:03 +0100"  >&lt;p&gt;Great &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks a lot for addressing the issue.&lt;/p&gt;

&lt;p&gt;I have some scenarios verified tests, I should have included them in my previous patch, but don&apos;t want to messup with the patch which explains the problem.&lt;br/&gt;
Now I have updated the patch with the below minor modifications and newly added tests.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added javadoc for hasEntry methods.&lt;/li&gt;
	&lt;li&gt;updated correct header comments in DistributedSchedule, RRDSchedule algorithm.&lt;/li&gt;
	&lt;li&gt;Included some more tests which I have added recently.&lt;/li&gt;
	&lt;li&gt;Made the inner classes of LedgerChecker as private static.&lt;/li&gt;
	&lt;li&gt;also updated the class level javadocs for LedgerChecker and LedgerFragment.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you like the changes, you can push this to your git and make it ready for review with your added tests. And many of the scenarios works well for me.&lt;/p&gt;</comment>
                            <comment id="13404894" author="umamaheswararao" created="Mon, 2 Jul 2012 06:23:26 +0100"  >&lt;p&gt;Hi Ivan, Is it possible for you to mark the last fragment in ledger from LedgerChecker?&lt;br/&gt;
So, that i can use this information in ReplicationWorker for fencing the current writer.&lt;/p&gt;

&lt;p&gt;This is the point what we have discussed in mailing list recently.&lt;br/&gt;
Also we have seen that case rarely 2 or 3 times in our testing till now.&lt;br/&gt;
So, I will try to fence if last fragment is underReplicated fragment.&lt;/p&gt;

&lt;p&gt;Still I am thinking about introduce some delay(say 30sec, can be configarable) for this kind of ledgers and if still ledger is in that situation then I will fence.&lt;br/&gt;
Here hope is that, within that delay period, client may write the entries and may reform the ensemble with good bookies, then that fragment would not be last fragment in ensemble.&lt;/p&gt;</comment>
                            <comment id="13405001" author="ikelly" created="Mon, 2 Jul 2012 11:59:10 +0100"  >&lt;p&gt;This may not be the clearest place to check this though. I think it would be clearer to check this at the point at which the replication worker is selecting the ledger to rereplicate. If it sees that the ledger is still open, it can wait for a grace period before running the checker and rereplicating any missing fragments.&lt;/p&gt;</comment>
                            <comment id="13406472" author="umamaheswararao" created="Wed, 4 Jul 2012 13:19:18 +0100"  >&lt;p&gt;Thanks Ivan, Make sense to me. I have filed a JIRA for grace period delay in replication for opned underReplicated(last fragment) ledgers. BK-325. I will handle along with that JIRA.&lt;/p&gt;</comment>
                            <comment id="13406641" author="umamaheswararao" created="Wed, 4 Jul 2012 18:59:45 +0100"  >&lt;p&gt;Hi Ivan,&lt;/p&gt;

&lt;p&gt;Here is one boundary case came across. When client written single entry and waiting, at this time if one BK goes down, then Ledger checker is not able to find that as underReplicated fragment.&lt;/p&gt;

&lt;p&gt;I think it should detect that as under replicated, then I can wait in PendingReplicationWorker for grace period and fence the ledger. If it is not able to detect as underReplicated, we can not know whether really there is no fragments underReplicated or some one else already replicated them.&lt;/p&gt;

&lt;p&gt;Here is test to reproduce:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
     * Tests that LedgerChecker should one fragment as underReplicated
     * &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; there is an open ledger with single entry written.
     */
    @Test(timeout = 3000)
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testShouldGetOneFragmentWithSingleEntryOpenedLedger() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        LedgerHandle lh = bkc.createLedger(3, 3, BookKeeper.DigestType.CRC32,
                TEST_LEDGER_PASSWORD);
        lh.addEntry(TEST_LEDGER_ENTRY_DATA);
        ArrayList&amp;lt;InetSocketAddress&amp;gt; firstEnsemble = lh.getLedgerMetadata()
                .getEnsembles().get(0L);
        InetSocketAddress lastBookieFromEnsemble = firstEnsemble.get(0);
        LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Killing &quot;&lt;/span&gt; + lastBookieFromEnsemble + &lt;span class=&quot;code-quote&quot;&gt;&quot; from ensemble=&quot;&lt;/span&gt;
                + firstEnsemble);
        killBookie(lastBookieFromEnsemble);

        startNewBookie();
        
        &lt;span class=&quot;code-comment&quot;&gt;//Open ledger separately &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Ledger checker.
&lt;/span&gt;        LedgerHandle lh1 =bkc.openLedgerNoRecovery(lh.getId(), BookKeeper.DigestType.CRC32,
                TEST_LEDGER_PASSWORD);
        
        Set&amp;lt;LedgerFragment&amp;gt; result = getUnderReplicatedFragments(lh1);
        assertNotNull(&lt;span class=&quot;code-quote&quot;&gt;&quot;Result shouldn&apos;t be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;, result);
        assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;There should be 1 fragment. But returned fragments are &quot;&lt;/span&gt;
                + result, 1, result.size());
    }

   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Set&amp;lt;LedgerFragment&amp;gt; getUnderReplicatedFragments(LedgerHandle lh)
            &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException {
        LedgerChecker checker = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LedgerChecker(bkc);
        CheckerCallback cb = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CheckerCallback();
        checker.checkLedger(lh, cb);
        Set&amp;lt;LedgerFragment&amp;gt; result = cb.waitAndGetResult();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think the problem is, when ledger is not closed then getLastConfirmed may not give real last entry. we will get one lesser than real last entry confirmed. If the ledger is closed, then only we can get real last entry. In this case also, it has written only one entry and it was in open state. so, it may get last confirmed is nothing. Finally it is not detecting ledger any fragments from the ledger as underReplicated.&lt;/p&gt;

&lt;p&gt;If I write one more entry extra, then it can detect as underReplicated.&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Uma&lt;/p&gt;</comment>
                            <comment id="13406914" author="rakeshr" created="Thu, 5 Jul 2012 09:33:23 +0100"  >&lt;p&gt;@Uma @Ivan&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Here is one boundary case came across. When client written single entry and waiting, at this time if one BK goes down, then Ledger checker is not able to find that as underReplicated fragment.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve seen the LedgerRecoveryOp.java is doing the following logic to identify the lastAddConfirmed entry. Can we have similar stuff here also in the replication logic if the ledger is in open state.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    /**
     * Try to read past the last confirmed.
     */
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void doRecoveryRead() {
        lh.lastAddConfirmed++;
        lh.asyncReadEntries(lh.lastAddConfirmed, lh.lastAddConfirmed, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="13406918" author="umamaheswararao" created="Thu, 5 Jul 2012 09:43:34 +0100"  >&lt;p&gt;Current writer only can get the lastConfirmed entry correctly. &lt;br/&gt;
Here LedgerChecker will not be a Writer in any case, considering one entry extra will the option to go i feel.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; lastAddConfirmed = lh
                        .getLastAddConfirmed();
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(lh.metadata.isClosed() == &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;){
                    lastAddConfirmed++;
                }
                fragments.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LedgerFragment(lh.getId(), curEntryId, lastAddConfirmed, i, curEnsemble, lh
                        .getDistributionSchedule()));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with this, above given test passed. Infact all other tests also should modify to use different LedgerHandle. otherwise this will make the test failures , because writer will anyway get lastConfirmed correctly.&lt;/p&gt;
</comment>
                            <comment id="13406940" author="umamaheswararao" created="Thu, 5 Jul 2012 10:42:19 +0100"  >&lt;p&gt;One more case here, the above proposal may break that. For example if the ledger is really empty, it just created the ledger. then also, there will be one ensemble created i guess then, above incrementing will give unnecessary assumption that ledger freagment is in underReplicated.&lt;br/&gt;
Any alternatives?&lt;/p&gt;</comment>
                            <comment id="13406950" author="umamaheswararao" created="Thu, 5 Jul 2012 11:13:11 +0100"  >&lt;p&gt;Even though we treat this empty ledger as underReplicated due to the above lastAddConfirmed++, we will post pone this ledger as last fragment is underReplicated and it is in open state. After pendingReplication timeout, this ledger will get force fenced.&lt;/p&gt;

&lt;p&gt;That means, after adding the PendingReplicationWorker logic and ReplicationWorker logic, there won&apos;t be any ledger in open state more than PendingReplication grace period interval. Ofcource this is configurable. Is this behaviour fine with you all?&lt;/p&gt;</comment>
                            <comment id="13406976" author="umamaheswararao" created="Thu, 5 Jul 2012 11:57:41 +0100"  >&lt;p&gt;Attached the patch with above change and tests correction. Added one more test with this special case.&lt;/p&gt;</comment>
                            <comment id="13407182" author="ikelly" created="Thu, 5 Jul 2012 15:49:59 +0100"  >&lt;p&gt;The first case (single entry in ledger) is actually straightforward to fix. The problem is that the fragment to check has the last entry set wrong, so it never actually checks. &lt;br/&gt;
&lt;a href=&quot;https://github.com/ivankelly/bookkeeper/commit/73b55018efdc451b356781fbe9b25a148878b308&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/ivankelly/bookkeeper/commit/73b55018efdc451b356781fbe9b25a148878b308&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The empty ledger problem im not so sure of how to fix. It&apos;s not obvious how to tell the difference between. There&apos;s already a test case for this #testShouldNotGetAnyFragmentWithEmptyLedger&lt;/p&gt;

&lt;p&gt;Btw, if you guys want to add changes to the patch, could you clone the github branch, and make the mods there. It makes it easier to track what the changes between the patches are. &lt;/p&gt;</comment>
                            <comment id="13407223" author="umamaheswararao" created="Thu, 5 Jul 2012 16:49:47 +0100"  >&lt;p&gt;Hi Ivan,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Btw, if you guys want to add changes to the patch, could you clone the github branch, and make the mods there. It makes it easier to track what the changes between the patches are. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, I should have done that. Will do from next if any more changes on it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The empty ledger problem im not so sure of how to fix. It&apos;s not obvious how to tell the difference between. There&apos;s already a test case for this #testShouldNotGetAnyFragmentWithEmptyLedger&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The current fix should solve the single entry problem. But with empty ledger also we may get the entry as currentEntryId. This will make ledger checker mark that fragment as underReplicated. &lt;br/&gt;
Anyway this fragment will be postponed by worker as lastFragment is in underReplication state. Once that pendingReplication timedout, this will get force fenced.&lt;/p&gt;

&lt;p&gt;So, with PendingReplications logic, it turns out that, there won&apos;t be any ledger idle more than the pendingReplicationTime out period.&lt;/p&gt;

&lt;p&gt;Only my worry is that, In Namenode case,&lt;/p&gt;

&lt;p&gt;Just start the namenode and dont write any data. By this time, if any Bookie goes down from selected quoram. Then after 30sec, if user startes writing then it will fail with fenced exception because Replication worker already would have fenced. then this will make one switch unnecessarily.&lt;/p&gt;

&lt;p&gt;On startup, keeping system idle for some time may be normal scenario as OM may start the process one another. To start all processes, it may take some time. Because of this idleness, it will cause one switch. Another argument is, since this is startup, one switch should be ok.&lt;/p&gt;</comment>
                            <comment id="13407287" author="ikelly" created="Thu, 5 Jul 2012 18:17:26 +0100"  >&lt;p&gt;Fixed the empty ledger case.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivankelly/bookkeeper/commit/b85c94930a325b1cc275fee26d7d62e9e0cdc778&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/ivankelly/bookkeeper/commit/b85c94930a325b1cc275fee26d7d62e9e0cdc778&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regarding the namenode, even without this fix, you dont need to worry about that, as the namenode always writes a START_SEGMENT entry after starting a new log segment.&lt;/p&gt;</comment>
                            <comment id="13407395" author="umamaheswararao" created="Thu, 5 Jul 2012 19:56:02 +0100"  >&lt;p&gt;Yep, you are right It should not be a problem. openEditLogForWrite()should do that on startingActiveServices.&lt;/p&gt;

&lt;p&gt;On quick look change looks great. I like the idea to confirm the empty ledger.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks a lot for the update.&lt;/p&gt;

&lt;p&gt;small nit: testShouldGet3FragmentWithEmptyLedgerButBookiesDead  --&amp;gt; testShouldGet2FragmentsWithEmptyLedgerButBookiesDead ?&lt;/p&gt;</comment>
                            <comment id="13435557" author="umamaheswararao" created="Wed, 15 Aug 2012 22:49:15 +0100"  >&lt;p&gt;Ivan, as per the order of JIRAs to go in, I think now turn is for this JIRA.&lt;br/&gt;
Could you please generate a patch with all our latest changes discussed? It should be simple as you already added the changed code in github.&lt;br/&gt;
So, that we can continue our further reviews.&lt;/p&gt;</comment>
                            <comment id="13435832" author="ikelly" created="Thu, 16 Aug 2012 09:20:50 +0100"  >&lt;p&gt;@Uma,&lt;/p&gt;

&lt;p&gt;I&apos;ll get to this today. Yesterday was a bank holiday here, which is why there was no movement.&lt;/p&gt;</comment>
                            <comment id="13436043" author="umamaheswararao" created="Thu, 16 Aug 2012 16:43:09 +0100"  >&lt;p&gt;Great, Thanks Ivan.&lt;/p&gt;</comment>
                            <comment id="13436100" author="ikelly" created="Thu, 16 Aug 2012 17:59:30 +0100"  >&lt;p&gt;New patch is simply the old patch, rebased onto trunk and one findbug error fixed.&lt;/p&gt;</comment>
                            <comment id="13436250" author="umamaheswararao" created="Thu, 16 Aug 2012 20:25:56 +0100"  >&lt;p&gt;Latest patch looks great to me. Majority of the issues we already found and fixed above. I don&apos;t see any issues now in the patch.&lt;/p&gt;

&lt;p&gt;I am +1 to push this in.&lt;/p&gt;

&lt;p&gt;Others, could you please add your comments, if we miss anything here.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;br/&gt;
Uma&lt;/p&gt;</comment>
                            <comment id="13436611" author="rakeshr" created="Fri, 17 Aug 2012 09:40:07 +0100"  >&lt;p&gt;Thanks Ivan and the new Patch looks good.&lt;br/&gt;
+1 from me. As we discussed and covered all the known scenarios it would be fine to go.&lt;/p&gt;</comment>
                            <comment id="13436651" author="ikelly" created="Fri, 17 Aug 2012 11:42:41 +0100"  >&lt;p&gt;Committed as r1374195. Thanks for reviewing Uma &amp;amp; Rakesh&lt;/p&gt;</comment>
                            <comment id="13436658" author="hudson" created="Fri, 17 Aug 2012 12:16:43 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #651 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/651/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-247&quot; title=&quot;Detection of under replication&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-247&quot;&gt;&lt;del&gt;BOOKKEEPER-247&lt;/del&gt;&lt;/a&gt;: Detection of under replication (ivank) (Revision 1374195)&lt;/p&gt;

&lt;p&gt;     Result = ABORTED&lt;br/&gt;
ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12468954">BOOKKEEPER-2</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12594942">BOOKKEEPER-299</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12535179" name="BOOKKEEPER-247-1.patch" size="28479" author="umamaheswararao" created="Thu, 5 Jul 2012 11:57:41 +0100"/>
                            <attachment id="12541238" name="BOOKKEEPER-247.diff" size="33900" author="ikelly" created="Thu, 16 Aug 2012 17:59:30 +0100"/>
                            <attachment id="12533993" name="BOOKKEEPER-247.diff" size="19040" author="ikelly" created="Fri, 29 Jun 2012 15:47:03 +0100"/>
                            <attachment id="12533992" name="BOOKKEEPER-247.diff" size="19214" author="ikelly" created="Fri, 29 Jun 2012 15:43:03 +0100"/>
                            <attachment id="12534153" name="BOOKKEEPER-247.patch" size="25486" author="umamaheswararao" created="Sun, 1 Jul 2012 14:19:10 +0100"/>
                            <attachment id="12533797" name="BOOKKEEPER-247.patch" size="16561" author="umamaheswararao" created="Thu, 28 Jun 2012 11:00:29 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 31 May 2012 10:04:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>238763</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyn6br:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>169212</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>