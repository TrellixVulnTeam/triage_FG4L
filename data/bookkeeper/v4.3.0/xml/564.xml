<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:32:43 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-564/BOOKKEEPER-564.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-564] Better checkpoint mechanism</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-564</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;Currently, SyncThread made a checkpoint too frequently, which affects performance. data is writing to entry logger file might be blocked by syncing same entry logger file, which affect bookie to achieve higher throughput. We could schedule checkpoint only when rotating an entry log file. so new incoming entries would be written to newer entry log file and old entry log file could be synced.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12631560">BOOKKEEPER-564</key>
            <summary>Better checkpoint mechanism</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hustlmsp">Sijie Guo</assignee>
                                    <reporter username="hustlmsp">Sijie Guo</reporter>
                        <labels>
                    </labels>
                <created>Sat, 9 Feb 2013 04:52:54 +0000</created>
                <updated>Tue, 7 May 2013 05:01:51 +0100</updated>
                            <resolved>Sat, 4 May 2013 13:23:20 +0100</resolved>
                                                    <fixVersion>4.3.0</fixVersion>
                                    <component>bookkeeper-server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13604911" author="hustlmsp" created="Mon, 18 Mar 2013 07:00:39 +0000"  >&lt;p&gt;attach a patch to provide Checkpoint abstraction to make checkpoint. to unblock the pending dependency for &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13604920" author="hadoopqa" created="Mon, 18 Mar 2013 07:40:16 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12574118/BOOKKEEPER-564.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-564.patch&lt;/a&gt; downloaded at Mon Mar 18 07:10:43 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 5 line(s) with trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 6 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 818&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/289/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/289/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13615435" author="ikelly" created="Wed, 27 Mar 2013 16:12:50 +0000"  >&lt;p&gt;The patch seems to mix a couple of changes together, and doesn&apos;t actually make it much easier to address &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;&apos;s problem. However, the general idea of the changes is quite good. I have the following comments&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SyncThread javadoc is out of date now.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SyncThread#startCheckpoint calls offsetCheckPoint directly. offsetCheckPoint only called by startCheckpoint. offsetCheckPoint should be removed and the code put directly in #startCheckpoint&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the names requestCheckpoint and startCheckpoint are too synonymous. requestCheckpoint suggests that the checkpoint should begin at that point in time. It would be better to rename requestCheckpoint to newCheckpoint.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rename CheckpointProgress to Checkpointer&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in InterleavedLedgerStorage, assert checkPointer != null in the constructor. It&apos;s not nice to be passing around nulls. Create a Null implementation of checkpointer if you want not to use a full one in tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;InterleavedLedgerStorage#processEntry() is never used. Remove from this patch.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;flushOptional(boolean, boolean) is ugly. It&apos;s impossible to tell how flushOptional(false, true) is different to flushOptional(true,false) by just looking at it. For this reason, boolean parameters should be used very sparingly. The force parameter is used incorrectly. In LedgerCacheImpl#flushLedger(boolean), the parameter is used to specify whether all indices should be flushed or only one. In fact, this is a perfect example of why boolean parameters suck. I would suggest breaking flushOptional into two methods and call them directly from #checkpoint() and #flush().&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In fact, I think you should get rid of separate #flush() and #checkpoint() completely, as #flush only seems to be used when shutting down. So you can do whatever flush is doing in the #shutdown() method.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why make entrylogger preallocation optional?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;#checkpoint.checkpointComplete(running); so we only cleanup old journals on shutdown? what if we never shutdown? I think this job may be better served by a background thread or something in the journal, and never exposed to the upper level.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13623778" author="ikelly" created="Fri, 5 Apr 2013 17:44:03 +0100"  >&lt;p&gt;I&apos;ve rejigged this to work on top of the decoupled checkpoint mechanism from &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;. The patch does the same thing about only flushing the entrylogs when they&apos;re rolled, but take a different approach. Instead of the entrylogger triggering the sync, the bookie monitors the amount of unsynced data it has and when it reaches a threshold it triggers the sync.&lt;/p&gt;</comment>
                            <comment id="13623779" author="ikelly" created="Fri, 5 Apr 2013 17:44:57 +0100"  >&lt;p&gt;This is just a preliminary patch btw, it needs tests and some polishing (I still haven&apos;t updated the syncThread javadoc, etc).&lt;/p&gt;</comment>
                            <comment id="13623832" author="hustlmsp" created="Fri, 5 Apr 2013 18:40:06 +0100"  >&lt;p&gt;the jira is to separate checkpoint with flush, a checkpoint just need to sync old data before checkpoint without affecting current written data. in your patch, each time you synced data, you still flush everything dirty in ledger storage which affects under writing operations. the point why we trigger checkpoint when rolling the data is new data will be added to a new entry logger (which is in filesystem page cache) when old data is syncing to disk. so adding operation will not be affected by background syncing.&lt;/p&gt;

&lt;p&gt;And this is also important when adapting skiplist proposal. if you triggered checkpoint in sync thread, you might end up flushing current in-use skiplist, which is bad.&lt;/p&gt;

&lt;p&gt;BTW, checkpoint here doesn&apos;t resolve &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt; directly, but it provides clear interface for checkpoints. &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt; could use its interface, this is the point why I mentioned this jira in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13623992" author="ikelly" created="Fri, 5 Apr 2013 20:42:45 +0100"  >&lt;p&gt;With &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt; the way we checkpoint fundamentally changes though. It&apos;s no longer the case that we can flush/checkpoint the ledger storage and assume that everything that was in the journal before the flush/checkpoint has now been persisted. I couldn&apos;t see how to fix this in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;, even with the checkpoint mechanism.&lt;/p&gt;

&lt;p&gt;I need to think about this more. I hadn&apos;t considered the skiplist case deeply. Perhaps we need some sort of transaction id. I would like to avoid the storage making calls to the journal though (even if it is through interfaces).&lt;/p&gt;</comment>
                            <comment id="13624238" author="hustlmsp" created="Sat, 6 Apr 2013 01:38:30 +0100"  >&lt;p&gt;the patch here already covered the most part you made the change in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;. the only thing is that we need a place to tracking checkpoints to ensure data in ledger storage are synced to disk before that checkpoint. (in bookkeeper-572, you tracks the checkpoints in SyncThread). but since checkpointing is a behavior of ledger storage, it would be better to keep checkpoint in ledger storage rather than in SyncThread, so it could control how to checkpoint. so either interleaved ledger storage or skiplist based on ledger storage could control when to do checkpointing based on its storage characteristics, rather than flushing everything in ledger storage in SyncThread. &lt;/p&gt;</comment>
                            <comment id="13624370" author="ikelly" created="Sat, 6 Apr 2013 08:48:33 +0100"  >&lt;blockquote&gt;
&lt;p&gt; but since checkpointing is a behavior of ledger storage, it would be better to keep checkpoint in ledger storage rather than in SyncThread,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So why have a sync thread? The checkpoint/mark is a property of the ledger storage. It signifies the point in history to which the ledger storage has synced to disk, and therefore the point from which the bookie needs to start applying entries from the journal on a restart. The actual journal only uses it as a convenience mechanism for GC. &lt;/p&gt;

&lt;p&gt;So we should give the ledger storage absolute control over checkpointing. The ledger storage should also take care of storing the mark also, since we store it in the ledger directories. The LedgerStorage should have a method, LedgerStorage#getSyncedMark() which gives back the mark. This method can be used on recovery to find where to start applying the journal from. Also there can be a background thread to gc the journals based on what #getSyncedMark returns.&lt;/p&gt;

&lt;p&gt;Also we&apos;ll need to give the mark to the ledger storage at some point. pre &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;, this can be done after adding to ledger storage, but before adding to the journal. post &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;, the mark should be taken from the journal before adding to it, and give to the ledger storage after it has been applied to the journal.&lt;/p&gt;</comment>
                            <comment id="13626287" author="hustlmsp" created="Tue, 9 Apr 2013 07:23:57 +0100"  >&lt;blockquote&gt;
&lt;p&gt;In fact, I think you should get rid of separate #flush() and #checkpoint() completely, as #flush only seems to be used when shutting down. So you can do whatever flush is doing in the #shutdown() method.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;separate #flush and #checkpoint would make interface clearly rather than mixing things in #shutdown method.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why make entrylogger preallocation optional?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;for testing stuffs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#checkpoint.checkpointComplete(running); so we only cleanup old journals on shutdown?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;we expose as a compact flag, indicated whether we need to compact journals after checkpoint. running means if sync thread is running, we compact each time checkpoint. if running is false, it means shutting down. we don&apos;t compact journal, which speed up shutting down process.&lt;/p&gt;</comment>
                            <comment id="13626327" author="hustlmsp" created="Tue, 9 Apr 2013 08:18:05 +0100"  >&lt;p&gt;new patch addressed comments.&lt;/p&gt;</comment>
                            <comment id="13626331" author="hustlmsp" created="Tue, 9 Apr 2013 08:24:45 +0100"  >&lt;blockquote&gt;
&lt;p&gt;So we should give the ledger storage absolute control over checkpointing. The ledger storage should also take care of storing the mark also, since we store it in the ledger directories. The LedgerStorage should have a method, LedgerStorage#getSyncedMark() which gives back the mark. This method can be used on recovery to find where to start applying the journal from. Also there can be a background thread to gc the journals based on what #getSyncedMark returns.&lt;/p&gt;

&lt;p&gt;Also we&apos;ll need to give the mark to the ledger storage at some point. pre &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;, this can be done after adding to ledger storage, but before adding to the journal. post &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;, the mark should be taken from the journal before adding to it, and give to the ledger storage after it has been applied to the journal.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;you could just pass the checkpoint when adding entry to ledger storage. so for interleaved ledger storage, when it rolls an entry log file, it used its kept checkpoint to do checkpointing; for skip list based ledger storage, each skip list kept a checkpoint, when it snapshot current skip list, it used the checkpoint kept in snapshotted skip list to do checkpointing. I don&apos;t see how difficult that &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt; could be addressed based on this jira.&lt;/p&gt;</comment>
                            <comment id="13626364" author="hadoopqa" created="Tue, 9 Apr 2013 08:51:54 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12577738/BOOKKEEPER-564.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-564.patch&lt;/a&gt; downloaded at Tue Apr  9 07:21:39 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 6 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 833&lt;br/&gt;
.    Tests failed: 0&lt;br/&gt;
.    Tests errors: 1&lt;/p&gt;

&lt;p&gt;.    The patch failed the following testcases:&lt;/p&gt;

&lt;p&gt;.      &lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/320/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/320/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13626410" author="ikelly" created="Tue, 9 Apr 2013 10:06:10 +0100"  >&lt;p&gt;The more I look at it, the less I like this Checkpointer interface. It&apos;s doing exactly the type of thing I was trying to get rid of with &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt; originally. Specifically, the ledger storage is reaching around to make a call on itself through this interface (SafeEntryLogAdder does this, and it&apos;s nasty).&lt;/p&gt;

&lt;p&gt;The motivation for this interface is to allow the ledger storage itself to control when it makes a checkpoint/flush. As I said in a previous comment we can remove the sync thread and move the logic into the ledger storage directly. I&apos;m trying this now, should have a patch later.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;separate #flush and #checkpoint would make interface clearly rather than mixing things in #shutdown method.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;They can be removed from the interface completely if we allow ledger storage to handle its own flushing.&lt;/p&gt;</comment>
                            <comment id="13626621" author="ikelly" created="Tue, 9 Apr 2013 14:58:46 +0100"  >&lt;p&gt;New patch moves the sync thread into the ledger storage, removing the need for the checkpointer interface.&lt;/p&gt;

&lt;p&gt;org.apache.bookkeeper.test.ReadOnlyBookieTest still failing, as in Sijie&apos;s patch.&lt;/p&gt;</comment>
                            <comment id="13626708" author="hadoopqa" created="Tue, 9 Apr 2013 16:18:38 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12577797/0001-BOOKKEEPER-564-Better-checkpoint-mechanism.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-564-Better-checkpoint-mechanism.patch&lt;/a&gt; downloaded at Tue Apr  9 14:47:53 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 9 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch seems to introduce 2 new Findbugs warning(s) in module(s) &lt;span class=&quot;error&quot;&gt;&amp;#91;bookkeeper-server&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 833&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/323/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/323/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13626793" author="ikelly" created="Tue, 9 Apr 2013 17:38:59 +0100"  >&lt;p&gt;New patch fixes findbugs, and ReadOnlyBookieTest.&lt;/p&gt;</comment>
                            <comment id="13626822" author="hustlmsp" created="Tue, 9 Apr 2013 18:03:47 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The more I look at it, the less I like this Checkpointer interface. It&apos;s doing exactly the type of thing I was trying to get rid of with &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt; originally.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;this is also what I pointed in previous comment &quot;the patch here already covered the most part you made the change in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;.&quot;.&lt;/p&gt;</comment>
                            <comment id="13626830" author="hadoopqa" created="Tue, 9 Apr 2013 18:12:15 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12577825/0001-BOOKKEEPER-564-Better-checkpoint-mechanism.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-564-Better-checkpoint-mechanism.patch&lt;/a&gt; downloaded at Tue Apr  9 16:41:31 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 9 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 833&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/324/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/324/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13626906" author="ikelly" created="Tue, 9 Apr 2013 19:14:20 +0100"  >&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;The more I look at it, the less I like this Checkpointer interface. It&apos;s doing exactly the type of thing I was trying to get rid of with &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt; originally.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;this is also what I pointed in previous comment &quot;the patch here already covered the most part you made the change in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;.&quot;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You&apos;ve confused me now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. are you saying you don&apos;t like the checkpointer interface also?&lt;/p&gt;</comment>
                            <comment id="13626971" author="hustlmsp" created="Tue, 9 Apr 2013 20:15:43 +0100"  >&lt;p&gt;I don&apos;t like putting SyncThread in ledger storage itself, since for other ledger storage implementation, we had to same thing. The value of #checkpoint #flush interfaces and CheckPointer interface here is to bridge the journal with the ledger storage, it allows plugging different implementation for either journal or ledger storage, at least for skip list based ledger storage.&lt;/p&gt;

&lt;p&gt;The comment I raised is to say that &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt; could be resolved easily based on this jira, since it already did lots of things you tried to do in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-572&quot; title=&quot;Make the journal a write ahead log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-572&quot;&gt;&lt;del&gt;BOOKKEEPER-572&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13627016" author="ikelly" created="Tue, 9 Apr 2013 21:06:00 +0100"  >&lt;p&gt;The bridge between journal and ledger storage is the bookie, which uses both. Take a look at the last patch I posted. The sync thread as we know it has gone away completely. InterleavedLedgerStorage has an executor on which it runs checkpoints, and it also take care of storing the log mark. All the running, and flushing flag stuff that was in the SyncThread is taken care of by the executor.&lt;/p&gt;

&lt;p&gt;The log mark is a property of the ledger storage, as it defines how much of the history is contained within it. Therefore, it belongs there. Also, it is stored to the ledger dirs, which are now only written to by ledger storage.&lt;/p&gt;

&lt;p&gt;With the patch I attached, Journal and LedgerStorage are completely decoupled. The only thing they have in common is the LogMark objects, which I should be possible to make completely opaque to the LedgerStorage in future if needed.&lt;/p&gt;</comment>
                            <comment id="13627138" author="hustlmsp" created="Tue, 9 Apr 2013 22:28:50 +0100"  >&lt;p&gt;you didn&apos;t answer the question for skiplist based ledger storage. this is my concern on your latest patch on previous comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The only thing they have in common is the LogMark objects, which I should be possible to make completely opaque to the LedgerStorage in future if needed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;don&apos;t you think the opaque thing is already addressed by CheckPoint interface?&lt;/p&gt;</comment>
                            <comment id="13627577" author="ikelly" created="Wed, 10 Apr 2013 08:37:56 +0100"  >&lt;blockquote&gt;
&lt;p&gt;you didn&apos;t answer the question for skiplist based ledger storage. this is my concern on your latest patch on previous comment.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I assume you mean &quot;it allows plugging different implementation for either journal or ledger storage, at least for skip list based ledger storage.&quot;. Moving the sync thread out of Bookie makes supporting different implementations much easier, as Journal and LedgerStorage know absolutely nothing about each other now, and the LedgerStorage has 100% control over when it runs a checkpoint. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;don&apos;t you think the opaque thing is already addressed by CheckPoint interface?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;opacity yes. I was referring to something like what Checkpoint interface does in that regard. However, it also has the #checkpointComplete() which I found unnecessary once the storage of LogMark was moved into the LedgerStorage.&lt;/p&gt;</comment>
                            <comment id="13627716" author="ikelly" created="Wed, 10 Apr 2013 13:10:35 +0100"  >&lt;p&gt;If you&apos;re concerned that not having checkpointer will make skiplist harder to integrate, see&lt;br/&gt;
&lt;a href=&quot;https://github.com/ivankelly/bookkeeper/commit/dfa5a47291ad228f4aa5fdd9029a1ebc1709d7bf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/ivankelly/bookkeeper/commit/dfa5a47291ad228f4aa5fdd9029a1ebc1709d7bf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It took about an hour to do the integration.&lt;/p&gt;</comment>
                            <comment id="13628016" author="hustlmsp" created="Wed, 10 Apr 2013 18:31:06 +0100"  >&lt;p&gt;the integration is easy due to skiplist extends InterleavedLedgerStorage. but if another implementation of LedgerStorage is not based InterleavedLedgerStorage, it has to implement all the things in InterleavedLedgerStorage again.&lt;/p&gt;

&lt;p&gt;-1 for the part that you moved LogMark stuffs (like reading, write marks, which is part of Journal) into ledger storage, which make the journal constructor of &quot;Journal(ServerConfiguration conf, LogMark lastLogMark)&quot; looks like that if I passed any mark, the journal could replay starting from the passed mark. but it couldn&apos;t, since Journal gc its journal files. The mark is part of journal, which is used to gc its journal files. And Checkpoint#complete is the way to bridge ledger storage and journal, which tells journal that ledger storage already synced until this checkpoint and now it is ok for journal to move on and gc journal files.&lt;/p&gt;</comment>
                            <comment id="13628141" author="ikelly" created="Wed, 10 Apr 2013 20:17:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;the integration is easy due to skiplist extends InterleavedLedgerStorage. but if another implementation of LedgerStorage is not based InterleavedLedgerStorage, it has to implement all the things in InterleavedLedgerStorage again.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Which part needs to be reimplemented? storing the log mark? Perhaps the new ledger storage stores it in a different way. It&apos;s quite conceivable that it may store the log mark in the footer of a log file, rather than in an individual file for example. &lt;/p&gt;

&lt;p&gt;I can&apos;t think of anything else I&apos;ve moved into ledger storage, which a new ledger storage wouldn&apos;t have to implement anyhow, like checkpointing and flushing, if it even considers them different things.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;Journal(ServerConfiguration conf, LogMark lastLogMark)&quot; looks like that if I passed any mark, the journal could replay starting from the passed mark. but it couldn&apos;t, since Journal gc its journal files. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It couldn&apos;t have gc&apos;d unless the ledger storage had indicated that that mark had been synced to. And if the ledger storage has indicated this, it shouldn&apos;t expect though journals still to be there.&lt;br/&gt;
 This doesn&apos;t change whether you&apos;re having bookie asked for the last sync mark and gc, or passing it through Checkpoint#complete. Whats more, with Checkpoint#complete, you&apos;re having the ledger storage driving actions on the journal, rather than the bookie driving the action. The bookie owns the journal, so it can tell it what to do. For the ledger storage, this is not the case&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And Checkpoint#complete is the way to bridge ledger storage and journal, which tells journal that ledger storage already synced until this checkpoint&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So the journal storage tells the journal that it has synced to the checkpoint. This means that the checkpoint is something that is inheritly a property of the ledger storage. The ledger storage + the mark/checkpoint tells you something about the state of the system. The journal + mark/checkpoint tells you nothing. &lt;/p&gt;
</comment>
                            <comment id="13628195" author="ikelly" created="Wed, 10 Apr 2013 21:14:51 +0100"  >&lt;p&gt;But actually, to clarify because I think this has got off on a tangent, what I dislike about Checkpointer/CheckpointProgress/Checkpoint is the way that ledger storage is controlling the journal. This appears to me as coupling, and coupling is bad.&lt;/p&gt;</comment>
                            <comment id="13628499" author="hustlmsp" created="Thu, 11 Apr 2013 01:32:25 +0100"  >&lt;p&gt;I don&apos;t see how coupling as you said. a consistent state of ledger storage, mark/checkpoint and journal file state (gc files ) are all controlled by bookie (SyncThread):&lt;/p&gt;

&lt;p&gt;1) SyncThread ask ledger storage to persist all the data added before a mark/checkpoint by calling LedgerStorage#checkpoint&lt;br/&gt;
2) after LedgerStorage finished persisting all the data, SyncThread tells journal that it is safe to gc all the journal entries before that mark/checkpoint.&lt;/p&gt;

&lt;p&gt;the ledger storage does nothing on this above flow, which just tell SyncThread: &quot;hey, I am dirty enough and it might be the time to do a checkpoint, which reduces recovery time facing failure&quot;.&lt;/p&gt;</comment>
                            <comment id="13628777" author="ikelly" created="Thu, 11 Apr 2013 10:02:59 +0100"  >&lt;blockquote&gt;
&lt;p&gt;1) SyncThread ask ledger storage to persist all the data added before a mark/checkpoint by calling LedgerStorage#checkpoint&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If this was how it happened it wouldn&apos;t be so bad. But what actually happens is that LedgerStorage decides it wants a checkpoint, and makes a call that controls the SyncThread (#startCheckpoint). Eventually this also calls #checkpointComplete. This is control coupling. It makes LedgerStorage dependent on the behaviour of SyncThread and makes it impossible to reason about or test the LedgerStorage in isolation. While this has always been partially the case, previously SyncThread did control the checkpointing completely, so the flow was simpler. Now the ledger storage is controlling the checkpointing by means of the sync thread.&lt;/p&gt;

&lt;p&gt;And then, since the journal is controlled by the sync thread in this design, by inheritance, the journal is controlled by the Ledger storage. I&apos;d actually prefer a design where the sync thread and the journal were owned by the ledger storage. At least then the control flow would match the ownership, and the coupling would be explicit rather than the implicit coupling we have here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the ledger storage does nothing on this above flow, which just tell SyncThread: &quot;hey, I am dirty enough and it might be the time to do a checkpoint, which reduces recovery time facing failure&quot;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Again, this wouldn&apos;t be so bad. But its not the case. What actually happens is that the ledger storage is saying &quot;hey, checkpoint to this point now!&quot;&lt;/p&gt;</comment>
                            <comment id="13633678" author="hustlmsp" created="Wed, 17 Apr 2013 03:08:38 +0100"  >&lt;blockquote&gt;
&lt;p&gt;This is control coupling. It makes LedgerStorage dependent on the behaviour of SyncThread and makes it impossible to reason about or test the LedgerStorage in isolation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How it worked in previous flow on testing LedgerStorage in isolation? I don&apos;t quite understand about this part.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What actually happens is that the ledger storage is saying &quot;hey, checkpoint to this point now!&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;in previous flow, sync thread just checkpoint blindly. in current flow, ledger storage would tell the syncthread (the checkpointer) the point which is a better point to do checkpoint. the only thing that ledger storage gave out is the point to guide checkpoint. but if you mean the guide is coupling, I have nothing more to say.&lt;/p&gt;</comment>
                            <comment id="13634026" author="ikelly" created="Wed, 17 Apr 2013 14:35:43 +0100"  >&lt;blockquote&gt;
&lt;p&gt;How it worked in previous flow on testing LedgerStorage in isolation? I don&apos;t quite understand about this part.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We don&apos;t. We always construct a full bookie, because it&apos;s impossible to test the ledger storage without the bookie.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
grep -r &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; InterleavedLedgerStorage&quot;&lt;/span&gt; bookkeeper-server/src/test/java
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Another place I came across this was with the bkvhbase benchmark. I had to implement my own SyncThread.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
in previous flow, sync thread just checkpoint blindly. in current flow, ledger storage would tell the syncthread (the checkpointer) the point which is a better point to do checkpoint. the only thing that ledger storage gave out is the point to guide checkpoint. but if you mean the guide is coupling, I have nothing more to say.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It&apos;s a command rather than a guide. And how the ledger storage behaves is dependent on the sync thread. This is coupling.&lt;/p&gt;</comment>
                            <comment id="13635940" author="hustlmsp" created="Fri, 19 Apr 2013 02:48:19 +0100"  >&lt;blockquote&gt;
&lt;p&gt;We don&apos;t. We always construct a full bookie, because it&apos;s impossible to test the ledger storage without the bookie.&lt;br/&gt;
Another place I came across this was with the bkvhbase benchmark. I had to implement my own SyncThread.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;you could use ledger storage add/read/flush independently. it is a full-functioned module. You could use it as an independent module in other place if you like for different purpose. I don&apos;t understand how is bad as you said.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&apos;s a command rather than a guide. And how the ledger storage behaves is dependent on the sync thread. This is coupling.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;if its behavior is part to a bookie&apos;s behavior, I don&apos;t think it is coupling. so I don&apos;t know what behaviors that is just belonged to ledger storage and not belonged to bookie.&lt;/p&gt;

&lt;p&gt;again, why I think it is a guide rather than a command. in checkpointer interface, ledger storage just tell a better pointer to the implementation. the really execution is decided by checkpointer itself (bookie), it could use the guide offered by ledger storage, or could use a different checkpoint based on other condition (for example, CheckPoint.MAX), so the control part is up to checkpointer. &lt;/p&gt;</comment>
                            <comment id="13636063" author="hustlmsp" created="Fri, 19 Apr 2013 05:43:18 +0100"  >&lt;p&gt;one more point that using the CheckPointer interface, you could still implement a Periodical sync thread, if you don&apos;t like using the checkpoint offered by ledger storage. but it would allow us using the optimization.&lt;/p&gt;</comment>
                            <comment id="13636201" author="ikelly" created="Fri, 19 Apr 2013 10:08:50 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;We don&apos;t. We always construct a full bookie, because it&apos;s impossible to test the ledger storage without the bookie. Another place I came across this was with the bkvhbase benchmark. I had to implement my own SyncThread.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;you could use ledger storage add/read/flush independently. it is a full-functioned module. You could use it as an independent module in other place if you like for different purpose. I don&apos;t understand how is bad as you said.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Its not a complete module. We&apos;re going to be introducing a new ledger storage to trunk hopefully soon. This is going to need to be tested and benchmarked extensively. If the behaviour of the ledger storage is dependendent on the behaviour of the sync thread, which it is, then it&apos;s going to make this job much more awkward. We will have to reimplement the sync thread. But of course, the sync thread will have to match the behaviour of the existing sync thread. We can&apos;t use the existing sync thread, because it&apos;s coupled with the journal and we can&apos;t benchmark using the entire bookie, because the journal throughput will interfere with the throughput of the ledger storage (i.e. it will throttle it as the journal should be the bottleneck). &lt;em&gt;This is the core reason why I want to avoid this coupling&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;It&apos;s a command rather than a guide. And how the ledger storage behaves is dependent on the sync thread. This is coupling.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;if its behavior is part to a bookie&apos;s behavior, I don&apos;t think it is coupling. so I don&apos;t know what behaviors that is just belonged to ledger storage and not belonged to bookie.&lt;/p&gt;

&lt;p&gt;again, why I think it is a guide rather than a command. in checkpointer interface, ledger storage just tell a better pointer to the implementation. the really execution is decided by checkpointer itself (bookie), it could use the guide offered by ledger storage, or could use a different checkpoint based on other condition (for example, CheckPoint.MAX), so the control part is up to checkpointer.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;With checkpointer, an #onRotateEntryLog event in InterleavedLedgerStorage triggers a call to #startCheckpoint which pushes a sync request onto the request queue which causes a #checkpoint() to be called in the InterleavedLedgerStorage. This isn&apos;t a guide. A guide would be something that whoever triggering the checkpoint would request and based on that decide whether to checkpoint or not. LedgerStorage#isFlushRequired() was a guide. But checkpointer is not. Checkpointer uses a push mechanism, a guide would use a pull mechanism.&lt;/p&gt;

&lt;p&gt;But there&apos;s a deeper issue here. The decision to checkpoint is taken inside of the ledger storage. This suggests that the actual action to checkpoint should take place there too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;one more point that using the CheckPointer interface, you could still implement a Periodical sync thread, if you don&apos;t like using the checkpoint offered by ledger storage. but it would allow us using the optimization.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This doesn&apos;t require the checkpoint interface. It can be achieved by simply exposing #flush(). I don&apos;t think we should do this until there&apos;s a strong requirement for it though.&lt;/p&gt;</comment>
                            <comment id="13636202" author="ikelly" created="Fri, 19 Apr 2013 10:10:26 +0100"  >&lt;p&gt;Also, the fact that SyncThread needs to be changed to support the new ledger storage indicates that there is a strong coupling between the two.&lt;/p&gt;</comment>
                            <comment id="13637079" author="hustlmsp" created="Sat, 20 Apr 2013 03:12:41 +0100"  >&lt;blockquote&gt;
&lt;p&gt;We&apos;re going to be introducing a new ledger storage to trunk hopefully soon. This is going to need to be tested and benchmarked extensively. If the behaviour of the ledger storage is dependendent on the behaviour of the sync thread, which it is, then it&apos;s going to make this job much more awkward. We will have to reimplement the sync thread.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t see how we need to reimplement the sync thread for the new ledger storage. we used the same sync thread for both interleaved and skiplist ledger storage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This doesn&apos;t require the checkpoint interface. It can be achieved by simply exposing #flush(). I don&apos;t think we should do this until there&apos;s a strong requirement for it though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The ticket created here is for such requirement (if you read the description of this ticket), since we found that we could not get a sustain high throughput on heavy workload due to blind syncing (in a long run on heavy workload, we observed zero throughput at some points, which is totally bad for latency sensitive case. because the ledger storage is hanging on syncing too much data (old data which need to be synced and newly added data) due to blind syncing). &lt;/p&gt;

&lt;p&gt;As I said in last comment, you could use the checkpointer interface to do periodical sync as before or based on the calculation of number of bytes unflushed (if you don&apos;t like the way let ledger storage offering the hint). but this interface allowed us and it already helped us to use such hint to optimize the bookie to get a sustained higher throughput.&lt;/p&gt;</comment>
                            <comment id="13637149" author="ikelly" created="Sat, 20 Apr 2013 09:07:50 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I don&apos;t see how we need to reimplement the sync thread for the new ledger storage. we used the same sync thread for both interleaved and skiplist ledger storage.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We would need to reimplement it in any benchmark/test as the logic for flushing is distributed across the two places. And any reimplementation would have to behave exactly like the original SyncThread for the bench to be valid. And this will drift over time.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
As I said in last comment, you could use the checkpointer interface to do periodical sync as before or based on the calculation of number of bytes unflushed (if you don&apos;t like the way let ledger storage offering the hint). but this interface allowed us and it already helped us to use such hint to optimize the bookie to get a sustained higher throughput.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My point was that there&apos;s nothing inherent in the checkpointer interface which makes this possible. Syncing periodically can already be done calling #flush, by size can be done by comparing marks. Adding the checkpointer interface doesn&apos;t make any of this easier to do.&lt;/p&gt;</comment>
                            <comment id="13637332" author="hustlmsp" created="Sat, 20 Apr 2013 20:27:00 +0100"  >&lt;blockquote&gt;
&lt;p&gt;My point was that there&apos;s nothing inherent in the checkpointer interface which makes this possible. Syncing periodically can already be done calling #flush, by size can be done by comparing marks. Adding the checkpointer interface doesn&apos;t make any of this easier to do.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t want to argument on this interface, since it is just an interface. if you could do the optimization without ledger storage offering the hint, show the code. And my point is still that ledger storage and journal are just bookie&apos;s components, the coordinate thing and semantic guarantee is better to be done in bookie itself.&lt;/p&gt;</comment>
                            <comment id="13637845" author="ikelly" created="Mon, 22 Apr 2013 09:58:17 +0100"  >&lt;blockquote&gt;
&lt;p&gt;if you could do the optimization without ledger storage offering the hint, show the code.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m not sure which exact optimization you&apos;re referring to. My patch from the 9th of April has all the things I&apos;ve discussed except for periodic syncs, which, as I understand it, we don&apos;t want anymore. To summarize what is in the patch. &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;LedgerStorage decides when to checkpoint, and runs it autonomously&lt;/li&gt;
	&lt;li&gt;The LogMark storage is managed by LedgerStorage&lt;/li&gt;
	&lt;li&gt;The bookie coordinates LogMark usage between the Journal and LedgerStorage.&lt;/li&gt;
	&lt;li&gt;Both components can now be tested 100% independently. Journal doesn&apos;t even need the ledger storage dirs anymore.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;
&lt;p&gt;ledger storage and journal are just bookie&apos;s components, the coordinate thing and semantic guarantee is better to be done in bookie itself.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And my patch conveys this. The bookie owns the journal and the ledger storage. And controls both. The journal doesn&apos;t control the ledger storage. The ledger storage doesn&apos;t control the journal. The ledger storage doesn&apos;t control the bookie. The journal doesn&apos;t control the bookie. The control flow follows the ownership. Bookie controls ledger storage and the journal, and that&apos;s it.&lt;/p&gt;</comment>
                            <comment id="13638775" author="rakeshr" created="Tue, 23 Apr 2013 05:46:25 +0100"  >&lt;p&gt;Thanks Ivan and Sijie for the great effort and your time. Sorry for pitching late, I&apos;m busy with our internal releases and other schedules&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Its very nice idea to avoid frequent checkpointing, which affects performance.&lt;/p&gt;

&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ivank%40yahoo-inc.com&quot; class=&quot;user-hover&quot; rel=&quot;ivank@yahoo-inc.com&quot;&gt;Ivan Kelly&lt;/a&gt;, patch looks good and I&apos;m just having one thought.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&#8226;LedgerStorage decides when to checkpoint, and runs it autonomously&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If I understand your approach, LedgerStorage owns the checkpoint thread.  #onRotateEntryLog it will run the checkpointing and updates the lastSyncedMark. &lt;/p&gt;

&lt;p&gt;There is no problem with this approach. In this case, when a new LedgerStorage implementation comes in, it should again re-define the checkpointing algo. IMHO, instead of this can we think of an approach where we can decouple the checkpointing algo from Interleaved storage. Bookie can own this checkpointing logic and let him control. With this approach Bookie will have more control over the checkpointing irrespective of the plugged-in ledger storage. How does it sound?. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;, are you also thinking in similar way?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Rakesh&lt;/p&gt;</comment>
                            <comment id="13638789" author="hustlmsp" created="Tue, 23 Apr 2013 06:17:15 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikelly&quot; class=&quot;user-hover&quot; rel=&quot;ikelly&quot;&gt;Ivan Kelly&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I already commented on your patch in previous comment.&lt;/p&gt;

&lt;p&gt;1) you moved LogMark to ledger storage, which makes journal contructor &quot;Journal(conf, logmark)&quot; behavior unclear, which looks like whatever the caller that give a mark, the journal would replay starting from the given mark. but it couldn&apos;t, since journal gc its files. It is against what you said Journal is a independent component.&lt;/p&gt;

&lt;p&gt;2) you are making ledger storage too ambitious. sync thread (checkpointing) logic should be maintained by Bookie itself, as the sync(checkpointing) logic is part of bookie not ledger storage, it should be common across different ledger storage implementations. And, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt; yes, I agreed with you.&lt;/p&gt;

&lt;p&gt;&amp;gt; The LogMark storage is managed by LedgerStorage&lt;br/&gt;
&amp;gt; Journal doesn&apos;t even need the ledger storage dirs anymore.&lt;/p&gt;

&lt;p&gt;as I pointed at 1), making LogMark as a part to journal would make Journal clearer on the replaying behavior. Although we used ledger directories in Journal, it doesn&apos;t mean that LogMark is part of ledger storage. The directories recording LogMark could be any directory. the only thing why not putting the journal directory is not to affect the performance of journal.&lt;/p&gt;</comment>
                            <comment id="13638896" author="ikelly" created="Tue, 23 Apr 2013 10:01:08 +0100"  >&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
In this case, when a new LedgerStorage implementation comes in, it should again re-define the checkpointing algo. IMHO, instead of this can we think of an approach where we can decouple the checkpointing algo from Interleaved storage. Bookie can own this checkpointing logic and let him control. With this approach Bookie will have more control over the checkpointing irrespective of the plugged-in ledger storage. How does it sound?. Sijie Guo, are you also thinking in similar way?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If we want the LedgerStorage to control when checkpointing should occur, then LedgerStorage has to run the checkpoint itself. Otherwise you have coupled the LedgerStorage to the Bookie.SyncThread. There&apos;s no problem with breaking the sync thread out into a separate class, which multiple LedgerStorage implementations can use, but it should be owned by the LedgerStorage&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
1) you moved LogMark to ledger storage, which makes journal contructor &quot;Journal(conf, logmark)&quot; behavior unclear,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This should be better. The journal should just be constructed with Journal(conf). LastSyncedLogMark should only come into play for Journal#replay(JournalScanner) which should become Journal#replay(LogMark from, JournalScanner).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
sync thread (checkpointing) logic should be maintained by Bookie itself&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I strongly disagree with this because...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;as the sync(checkpointing) logic is part of bookie not ledger storage&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;...all the logic to do the checkpoint is in the LedgerStorage. The decision to make the checkpoint is taken from within the ledger storage. So this is false. The logic is part of ledger storage.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
it should be common across different ledger storage implementations.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It can be broken out into a different class which can be shared by different implementations. It should be owned by the ledger storage though.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; 1), making LogMark as a part to journal would make Journal clearer on the replaying behaviour.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The log mark is dependent on the ledger storage and only means anything in the context of the ledger storage. It should only be stored when a checkpoint has occurred. This means that the ledger storage is what decides which log mark to store. If the journal is storing the mark, the ledger storage is triggering behaviour on the journal. Again, this is another piece that could be broken out into a separate class to be used by multiple ledger storage implementations, but it should remain owned by the ledger storage.&lt;/p&gt;

&lt;p&gt;To reiterate, this changes need to be done to make it possible to benchmark the ledger storage in a way that the ledger storage will behave the same as it does when running under a bookie.&lt;/p&gt;</comment>
                            <comment id="13640224" author="ikelly" created="Wed, 24 Apr 2013 09:32:33 +0100"  >&lt;p&gt;I was thinking about this some more last night. There&apos;s no way of having the checkpointer outside of LedgerStorage without having a circular dependency. To demonstrate, if I wanted to implement a checkpointer, I would have to do something like the following.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class MyCheckpointer &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; CheckPointer {
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CheckPoint newCheckpoint() {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; generateCheckpointSomehow();
    }

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void startCheckpoint(CheckPoint checkpoint) {
        ledgerStorage.checkpoint(checkpoint);
    }
}

LedgerStorage ledgerStorage = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; InterleavedLedgerStorage(conf, dirs, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MyCheckpointer());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There&apos;s a circular dependency here and there&apos;s no way to get rid of it. This circular dependency also exists in the Sijie&apos;s patch from 9 Apr, though it&apos;s hidden behind inner classes. This is just bad software design, and I&apos;m going to -1 any patch that I find with such antipatterns.&lt;/p&gt;

&lt;p&gt;Whats more, any solution that has the syncthread and ledgerstorage as side by side objects rather than ledgerstorage owning the syncthread will run into this.&lt;/p&gt;

&lt;p&gt;However, we&apos;ve been arguing this for weeks now, and we need to find some middle ground. I realise my patch isn&apos;t going to go in as is either, due to the points made earlier. Specifically, referring to Sijie&apos;s comments on the 23rd, for 1) this can go either way, I prefer LogMark in ledger storage, or at least out of Journal, but I can live with it. However, for 2) sync thread has to be owned by ledger storage, otherwise we get the antipattern described at the start of the comment.&lt;/p&gt;

&lt;p&gt;So how about this...&lt;/p&gt;

&lt;p&gt;We morph Checkpointer into the following interface&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; CheckpointListener {
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CheckPoint newCheckpoint();
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void checkpointOccurred(Checkpoint checkpoint);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Journal implements CheckpointListener. LedgerStorage takes a Checkpoint listener on construction. SyncThread is broken out from Bookie, and LedgerStorage constructs and owns it, but the implementation is separate from any particular LedgerStorage implementation.&lt;/p&gt;

&lt;p&gt;I won&apos;t start coding this until I get some agreement that this is an acceptable way forward.&lt;/p&gt;</comment>
                            <comment id="13641414" author="rakeshr" created="Thu, 25 Apr 2013 05:40:21 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ivank%40yahoo-inc.com&quot; class=&quot;user-hover&quot; rel=&quot;ivank@yahoo-inc.com&quot;&gt;Ivan Kelly&lt;/a&gt;, thanks for pointing out the cyclic dependency. Also, I agree to keep the checkpointing inside the LedgerStorage, as he is owning the entrylogger.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Journal implements CheckpointListener&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Are you thinking like, EntryLogListener#onRotateEntryLog will trigger the checkpointing and after the successful completion will notify the Journal about the flushedLogMark, which inturn moves the &quot;lastmark&quot; pointer. &lt;/p&gt;

&lt;p&gt;Will have the following interfaces to generalize the checkpointing algo.&lt;/p&gt;

&lt;p&gt;InterLeavedStorage implements EntryLogListener#onRotateEntryLog() to do the checkpointing.&lt;br/&gt;
Journal implements CheckpointListener#checkpointOccurred(CheckPoint) which moves the &quot;lastmark&quot; pointer.&lt;/p&gt;

&lt;p&gt;Am I missing anything?&lt;/p&gt;

&lt;p&gt;Also, it would be good to move EntryLogListener outside, presently its with EntryLogger.&lt;/p&gt;</comment>
                            <comment id="13641784" author="ikelly" created="Thu, 25 Apr 2013 14:29:34 +0100"  >&lt;blockquote&gt;
&lt;p&gt;InterLeavedStorage implements EntryLogListener#onRotateEntryLog() to do the checkpointing.&lt;br/&gt;
Journal implements CheckpointListener#checkpointOccurred(CheckPoint) which moves the &quot;lastmark&quot; pointer.&lt;/p&gt;

&lt;p&gt;Am I missing anything?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is it exactly.&lt;/p&gt;</comment>
                            <comment id="13641837" author="rakeshr" created="Thu, 25 Apr 2013 15:11:11 +0100"  >&lt;p&gt;I feel its good idea and +1 for this approach.&lt;/p&gt;</comment>
                            <comment id="13642452" author="hustlmsp" created="Fri, 26 Apr 2013 01:55:23 +0100"  >&lt;p&gt;a new patch to remove circular dependency by make the ledger storage interface as  CheckPoint LedgerStorage#checkpoint(CheckPoint). The return value indicates the actual point that the ledger storage already synced all the data. keep the original sync thread.&lt;/p&gt;

&lt;p&gt;the benefit:&lt;/p&gt;

&lt;p&gt;1) we don&apos;t need to rewrite sync thread, if we provide a new ledger storage.&lt;br/&gt;
2) syncing when entry logger rotated is a tradeoff between recovery time and performance. if in future, we want to reduce recovery time and keep performance, it is easy to do it.&lt;/p&gt;</comment>
                            <comment id="13642467" author="hustlmsp" created="Fri, 26 Apr 2013 02:18:14 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Journal implements CheckpointListener. LedgerStorage takes a Checkpoint listener on construction. SyncThread is broken out from Bookie, and LedgerStorage constructs and owns it, but the implementation is separate from any particular LedgerStorage implementation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Journal implements CheckpointListener#checkpointOccurred(CheckPoint) which moves the &quot;lastmark&quot; pointer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;it doesn&apos;t make any sense to make ledger storage control journal to move the mark. the checkpoint flow is not simple a responsibility of a single component. A bookie&apos;s data has two parts, one is persisted indexed data, the other is in-memory indexed data + persisted txns. And a checkpoint is the boundary of these two parts. The SyncThread is the role to change the data from one state (in-memory + txns) to the other state (permanent indexable): 1) ledger storage persist its in-memory data, 2) journal move its pointer and gc journals if necessary, 3) if any is failed due to disk issue, it means that such kind of data conversion could not proceed any more, the bookie should be turned to readonly at this moment (otherwise, it would be OOM). when you moved sync thread to ledger storage, you are moving the 2) and 3) part implicitly to ledger storage, which make ledger storage too ambitious and the flow unclear.&lt;/p&gt;


</comment>
                            <comment id="13642477" author="hustlmsp" created="Fri, 26 Apr 2013 02:25:54 +0100"  >&lt;blockquote&gt;
&lt;p&gt;This should be better. The journal should just be constructed with Journal(conf). LastSyncedLogMark should only come into play for Journal#replay(JournalScanner) which should become Journal#replay(LogMark from, JournalScanner).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;it changes nothing. either you passed the point in constructor or in replay. journal still can&apos;t replay anything that already gc&apos;ed.&lt;/p&gt;</comment>
                            <comment id="13642518" author="hadoopqa" created="Fri, 26 Apr 2013 03:18:17 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12580634/BOOKKEEPER-564.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-564.patch&lt;/a&gt; downloaded at Fri Apr 26 01:47:57 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 1 line(s) longer than 120 characters&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 6 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 833&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/325/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/325/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13642961" author="ikelly" created="Fri, 26 Apr 2013 16:36:47 +0100"  >&lt;blockquote&gt;
&lt;p&gt;a new patch to remove circular dependency by make the ledger storage interface as CheckPoint LedgerStorage#checkpoint(CheckPoint). The return value indicates the actual point that the ledger storage already synced all the data. keep the original sync thread.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The patch does not remove the circular dependency. It&apos;s still there in the same form. There&apos;s no way to implement Checkpointer, without something like &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Checkpointer cpkt = Checkpointer();
LedgerStorage ledgerStorage = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; InterleavedLedgerStorage(cpkt);
cpkt.setLedgerStorage(ledgerStorage);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This patch doesn&apos;t explicitly do this, because SyncThread is an innerclass of Bookie, but implicitly it&apos;s the exact same thing. Try making SyncThread a static inner class and see what happens. Whats more, you don&apos;t even need the circular dependency in your patch. SyncThread#newCheckpoint calls journal#requestCheckpoint. You could simply have Journal implement Checkpointer. But by now, the name Checkpointer doesn&apos;t make sense anymore, as you aren&apos;t able to trigger a checkpoint action through the interface, so maybe rename it to CheckpointSource. And if Journal is implementing this, you may as well add checkpointComlete(Checkpoint) to CheckpointSource. And remove Checkpoint#checkpointComplete(). So the SyncThread can call journal.checkpointComplete(checkpoint), and it&apos;s clearer where the operation is occurring. Checkpoint#checkpointComplete() looks a lot like action at a distance.&lt;/p&gt;

&lt;p&gt;So -1 For this patch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) we don&apos;t need to rewrite sync thread, if we provide a new ledger storage.&lt;br/&gt;
2) syncing when entry logger rotated is a tradeoff between recovery time and performance. if in future, we want to reduce recovery time and keep performance, it is easy to do it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This can be achieved by breaking SyncThread into it&apos;s own class, and having the ledger storage own it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Journal implements CheckpointListener#checkpointOccurred(CheckPoint) which moves the &quot;lastmark&quot; pointer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;it doesn&apos;t make any sense to make ledger storage control journal to move the mark.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed, this is what I&apos;ve been arguing for weeks. But I would also go further and say it makes no sense for the journal to move the mark. There&apos;s are 3 components in checkpointing, the ledger storage, the journal and the checkpoint mark. The checkpoint mark is relates to both the ledger storage and the journal. Marks are created by the journal, and refer to the journal position, but the decision of which mark is the checkpoint mark is taken by the ledger storage. This is why I argued that it should not be stored in the journal but in the ledger storage. Equally it could be separate component completely. But since you argued it should be in the journal, and since it&apos;s a fact that the ledger storage decides which mark is the checkpoint mark, I added this interface.&lt;/p&gt;</comment>
                            <comment id="13644077" author="hustlmsp" created="Sun, 28 Apr 2013 19:09:34 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
This patch doesn&apos;t explicitly &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, because SyncThread is an innerclass of Bookie, but implicitly it&apos;s the exact same thing. Try making SyncThread a &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;inner&lt;/span&gt; class and see what happens. Whats more, you don&apos;t even need the circular dependency in your patch. SyncThread#newCheckpoint calls journal#requestCheckpoint. You could simply have Journal implement Checkpointer. But by now, the name Checkpointer doesn&apos;t make sense anymore, as you aren&apos;t able to trigger a checkpoint action through the &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt;, so maybe rename it to CheckpointSource. And &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; Journal is implementing &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, you may as well add checkpointComlete(Checkpoint) to CheckpointSource. And remove Checkpoint#checkpointComplete(). So the SyncThread can call journal.checkpointComplete(checkpoint), and it&apos;s clearer where the operation is occurring. Checkpoint#checkpointComplete() looks a lot like action at a distance.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ok. provide the CheckPointSource, which provide the method, newCheckpoint. Journal implmented this interface. SyncThread doesn&apos;t change. so ledger storage could get checkpoint from checkpointsource. If you agreed on it, I made the change.&lt;/p&gt;

&lt;p&gt;If you still don&apos;t like it, I would suggest keeping current SyncThread unchanged. I would break the entrylogger preallocation into a separated jira.&lt;/p&gt;</comment>
                            <comment id="13644080" author="hustlmsp" created="Sun, 28 Apr 2013 19:26:15 +0100"  >&lt;blockquote&gt;
&lt;p&gt;This can be achieved by breaking SyncThread into it&apos;s own class, and having the ledger storage own it. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;you can&apos;t. as I commented in previous comment, syncing flow is comprised of 3 steps, which is related to bookie&apos;s state. if you break it into its own class, and having ledger storage own it, you introduced the circular dependency from ledger storage to bookie.&lt;/p&gt;</comment>
                            <comment id="13644508" author="ikelly" created="Mon, 29 Apr 2013 15:18:54 +0100"  >&lt;p&gt;I&apos;m modified your patch to remove the prealloc stuff and make Checkpointer into CheckpointSource.&lt;/p&gt;

&lt;p&gt;There&apos;s a couple of other mods I&apos;d like to do, like make SyncThread usable by tests, and cleaning up the LogMark stuff (there&apos;s far too many classes managing what amounts to 2 longs), but that can go in followup jiras.&lt;/p&gt;</comment>
                            <comment id="13644575" author="hadoopqa" created="Mon, 29 Apr 2013 16:21:25 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12580970/0001-BOOKKEEPER-584-CheckpointSource.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-584-CheckpointSource.patch&lt;/a&gt; downloaded at Mon Apr 29 14:21:33 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 3 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt; - patch does not compile, cannot run testcases&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/327/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/327/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13644609" author="hadoopqa" created="Mon, 29 Apr 2013 17:11:08 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12580970/0001-BOOKKEEPER-584-CheckpointSource.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-584-CheckpointSource.patch&lt;/a&gt; downloaded at Mon Apr 29 15:40:39 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 3 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 834&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/328/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/328/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13645193" author="rakeshr" created="Tue, 30 Apr 2013 04:31:57 +0100"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ivank%40yahoo-inc.com&quot; class=&quot;user-hover&quot; rel=&quot;ivank@yahoo-inc.com&quot;&gt;Ivan Kelly&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt; for the patch. Just few comments.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Following are not used anywhere, can we remove these?
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Checkpoint MIN = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Checkpoint() {
&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; LogMark MAX_VALUE = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LogMark(&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;.MAX_VALUE, &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;.MAX_VALUE);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Just make the LogMarkCheckpoint to &apos;private&apos;&lt;br/&gt;
private static class LogMarkCheckpoint implements Checkpoint {&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think, journal.checkpointComplete() can mark the checkpoint completion only when the&lt;br/&gt;
journal.newCheckpoint().compareTo(lastcheckpoint) &amp;gt; 0 &lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;One general thought. Is it required to do checkpointing, once bookie marked as readonly?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13645249" author="hustlmsp" created="Tue, 30 Apr 2013 05:58:37 +0100"  >&lt;p&gt;+1 for the patch.&lt;/p&gt;</comment>
                            <comment id="13645463" author="ikelly" created="Tue, 30 Apr 2013 12:05:45 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt; new patch addresses some of the comments, for the rest..&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;public static final Checkpoint MIN = new Checkpoint() {&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is used.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think, journal.checkpointComplete() can mark the checkpoint completion only when the&lt;br/&gt;
journal.newCheckpoint().compareTo(lastcheckpoint) &amp;gt; 0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;d prefer to do this in the separate jira to clean up log marks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One general thought. Is it required to do checkpointing, once bookie marked as readonly?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Bookie can go RO when journal disk fails but ledger disk is still fine. There may be entries still unsynced to disk, so it&apos;s ok to have the sync thread continue running.&lt;/p&gt;</comment>
                            <comment id="13645493" author="hadoopqa" created="Tue, 30 Apr 2013 12:41:58 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12581142/0001-BOOKKEEPER-564-CheckpointSource.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-564-CheckpointSource.patch&lt;/a&gt; downloaded at Tue Apr 30 11:11:32 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 3 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 834&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/329/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/329/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13646729" author="rakeshr" created="Wed, 1 May 2013 18:25:10 +0100"  >
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Checkpoint MIN = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Checkpoint() {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;is used only in the following checks in LogMarkCheckpoint.java. But I couldn&apos;t see any checkpoint object is getting assigned with Checkpoint.MIN, and its an unreachable/unused code.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (o == Checkpoint.MIN) {
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 1;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13647375" author="ikelly" created="Thu, 2 May 2013 09:12:48 +0100"  >&lt;p&gt;new patch removes MIN.&lt;/p&gt;</comment>
                            <comment id="13647386" author="hadoopqa" created="Thu, 2 May 2013 09:51:57 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12581494/0001-BOOKKEEPER-564-CheckpointSource.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-564-CheckpointSource.patch&lt;/a&gt; downloaded at Thu May  2 08:21:31 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 3 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 834&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/330/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/330/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13647566" author="rakeshr" created="Thu, 2 May 2013 15:28:08 +0100"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ivank%40yahoo-inc.com&quot; class=&quot;user-hover&quot; rel=&quot;ivank@yahoo-inc.com&quot;&gt;Ivan Kelly&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;. +1 latest patch looks nice.&lt;/p&gt;</comment>
                            <comment id="13647748" author="ikelly" created="Thu, 2 May 2013 18:46:28 +0100"  >&lt;p&gt;Cancelling patch. I&apos;m getting a pretty consistent failure with the patch on ReadOnlyBookieTest&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2013-05-02 17:56:57,944 - INFO  - [pool-7-thread-1:PerChannelBookieClient@115] - Connecting to bookie: /192.168.122.1:15001
2013-05-02 17:56:57,965 - INFO  - [pool-7-thread-1:PerChannelBookieClient@115] - Connecting to bookie: /192.168.122.1:15003
2013-05-02 17:56:57,968 - INFO  - [New I/O client worker #1-1:PerChannelBookieClient$1@135] - Successfully connected to bookie: /192.168.122.1:15001
2013-05-02 17:56:57,971 - INFO  - [New I/O client worker #1-2:PerChannelBookieClient$1@135] - Successfully connected to bookie: /192.168.122.1:15003
2013-05-02 17:56:58,091 - WARN  - [main:LedgerDirsManager@98] - /tmp/bookie5716829601644809116test/current is out of space. Adding it to filled dirs list
2013-05-02 17:56:58,170 - ERROR - [SyncThread:Bookie$SyncThread@366] - Exception in SyncThread
java.lang.NullPointerException
	at org.apache.bookkeeper.bookie.FileInfo.moveToNewLocation(FileInfo.java:287)
	at org.apache.bookkeeper.bookie.LedgerCacheImpl.moveLedgerIndexFile(LedgerCacheImpl.java:408)
	at org.apache.bookkeeper.bookie.LedgerCacheImpl.flushLedger(LedgerCacheImpl.java:365)
	at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.flushOrCheckpoint(InterleavedLedgerStorage.java:169)
	at org.apache.bookkeeper.bookie.InterleavedLedgerStorage.checkpoint(InterleavedLedgerStorage.java:207)
	at org.apache.bookkeeper.bookie.Bookie$SyncThread.checkpoint(Bookie.java:280)
	at org.apache.bookkeeper.bookie.Bookie$SyncThread.run(Bookie.java:361)
2013-05-02 17:56:58,175 - INFO  - [ProcessThread(sid:0 cport:-1)::PrepRequestProcessor@466] - Processed session termination &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; sessionid: 0x13e65f5dec00004
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13647793" author="ikelly" created="Thu, 2 May 2013 19:38:36 +0100"  >&lt;p&gt;Issue was in FileInfo. checkOpen(false) being called but fc not checked for not null. Fixed.&lt;/p&gt;</comment>
                            <comment id="13648194" author="rakeshr" created="Fri, 3 May 2013 06:15:03 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikelly&quot; class=&quot;user-hover&quot; rel=&quot;ikelly&quot;&gt;Ivan Kelly&lt;/a&gt; good catch. As per the logic, moveToNewLocation() requires a null check. I&apos;d like to know when can &apos;fc&apos; become null? &lt;br/&gt;
Is this a situation like, just created an empty index file and at the same time flushOrCheckpoint() has occured ?&lt;/p&gt;</comment>
                            <comment id="13648261" author="ikelly" created="Fri, 3 May 2013 09:13:21 +0100"  >&lt;p&gt;when a FileInfo is created fc is null. it only gets set when checkOpen(true) is called. So if a FileInfo has been created but no operation has been called on it that would call checkOpen(true), then fc is null and a call to moveToNewLocation will give a NPE.&lt;/p&gt;</comment>
                            <comment id="13648588" author="rakeshr" created="Fri, 3 May 2013 18:20:05 +0100"  >&lt;p&gt;+1 ready to go in. pls trigger build...&lt;/p&gt;</comment>
                            <comment id="13649075" author="hadoopqa" created="Sat, 4 May 2013 13:18:28 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12581567/0001-BOOKKEEPER-564-CheckpointSource.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-564-CheckpointSource.patch&lt;/a&gt; downloaded at Sat May  4 11:48:13 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 3 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 834&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/331/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/331/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13649076" author="ikelly" created="Sat, 4 May 2013 13:23:20 +0100"  >&lt;p&gt;Committed r1479085. Thanks for all the work to get this change in guys. Its a great first step towards getting more efficient ledger storage into trunk.&lt;/p&gt;</comment>
                            <comment id="13650490" author="hudson" created="Tue, 7 May 2013 05:01:51 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #195 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/195/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/195/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-564&quot; title=&quot;Better checkpoint mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-564&quot;&gt;&lt;del&gt;BOOKKEEPER-564&lt;/del&gt;&lt;/a&gt;: Better checkpoint mechanism (sijie &amp;amp; ivank) (Revision 1479085)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSource.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LogMark.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12633651">BOOKKEEPER-572</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12577825" name="0001-BOOKKEEPER-564-Better-checkpoint-mechanism.patch" size="81928" author="ikelly" created="Tue, 9 Apr 2013 17:38:59 +0100"/>
                            <attachment id="12577797" name="0001-BOOKKEEPER-564-Better-checkpoint-mechanism.patch" size="77133" author="ikelly" created="Tue, 9 Apr 2013 14:58:46 +0100"/>
                            <attachment id="12581567" name="0001-BOOKKEEPER-564-CheckpointSource.patch" size="58331" author="ikelly" created="Thu, 2 May 2013 19:38:36 +0100"/>
                            <attachment id="12581494" name="0001-BOOKKEEPER-564-CheckpointSource.patch" size="53463" author="ikelly" created="Thu, 2 May 2013 09:12:48 +0100"/>
                            <attachment id="12581142" name="0001-BOOKKEEPER-564-CheckpointSource.patch" size="53944" author="ikelly" created="Tue, 30 Apr 2013 12:03:22 +0100"/>
                            <attachment id="12580970" name="0001-BOOKKEEPER-584-CheckpointSource.patch" size="54028" author="ikelly" created="Mon, 29 Apr 2013 15:18:54 +0100"/>
                            <attachment id="12577232" name="0002-BOOKKEEPER-564-Better-checkpoint-mechanism.patch" size="31192" author="ikelly" created="Fri, 5 Apr 2013 17:44:03 +0100"/>
                            <attachment id="12580634" name="BOOKKEEPER-564.patch" size="67728" author="hustlmsp" created="Fri, 26 Apr 2013 01:55:23 +0100"/>
                            <attachment id="12577738" name="BOOKKEEPER-564.patch" size="66286" author="hustlmsp" created="Tue, 9 Apr 2013 08:18:05 +0100"/>
                            <attachment id="12574118" name="BOOKKEEPER-564.patch" size="61370" author="hustlmsp" created="Mon, 18 Mar 2013 07:00:39 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 18 Mar 2013 07:40:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312056</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzbpbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>312402</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>