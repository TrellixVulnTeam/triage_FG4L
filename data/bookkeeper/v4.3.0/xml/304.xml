<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:32:34 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-304/BOOKKEEPER-304.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-304] Prepare bookie vs ledgers cache and will be used by the Auditor</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-304</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;This JIRA discusses how to build bookie -&amp;gt; ledgers cache and this will be used by the Auditor to publish the suspected ledgers of failed bookies.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12595250">BOOKKEEPER-304</key>
            <summary>Prepare bookie vs ledgers cache and will be used by the Auditor</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12553925">BOOKKEEPER-237</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rakeshr">Rakesh R</assignee>
                                    <reporter username="rakeshr">Rakesh R</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 Jun 2012 12:01:16 +0100</created>
                <updated>Wed, 13 Feb 2013 15:46:46 +0000</updated>
                            <resolved>Mon, 27 Aug 2012 15:58:16 +0100</resolved>
                                    <version>4.2.0</version>
                                    <fixVersion>4.2.0</fixVersion>
                                    <component>bookkeeper-auto-recovery</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="13397543" author="rakeshr" created="Wed, 20 Jun 2012 15:28:18 +0100"  >&lt;p&gt;Attached initial draft version to discuss the design of the bookie vs ledger cache.&lt;/p&gt;</comment>
                            <comment id="13397586" author="rakeshr" created="Wed, 20 Jun 2012 16:40:27 +0100"  >&lt;p&gt;Attached the latest patch by including LedgerManager changes also. Could you please have a look on the design.&lt;/p&gt;</comment>
                            <comment id="13397844" author="fpj" created="Wed, 20 Jun 2012 21:38:33 +0100"  >&lt;p&gt;Not sure if this is the right place to make this comment, but I was wondering if the auditor should be a package within bookkeeper-server or a separate module. It is pretty independent of BK client and Bookie, no?&lt;/p&gt;

&lt;p&gt;I was also wondering if we can code it in a way that does not require making methods public in the meta package.&lt;/p&gt;</comment>
                            <comment id="13398287" author="ikelly" created="Thu, 21 Jun 2012 09:25:05 +0100"  >&lt;p&gt;The problem with putting it in a separate module, is that starting the auditor would then be a separate admin task. We couldn&apos;t start it from the bookkeeper script along with a bookie, because that would mean bookkeeper-server would have to be dependent on bookkeeper-auditor which would be dependent on bookkeeper-server.&lt;/p&gt;

&lt;p&gt;I agree that the code should be kept as independent of bookkeeper-server as possible though. &lt;/p&gt;</comment>
                            <comment id="13398295" author="ikelly" created="Thu, 21 Jun 2012 09:53:34 +0100"  >&lt;p&gt;Regarding the patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-203&quot; title=&quot;improve ledger manager interface to remove zookeeper dependency on metadata operations.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-203&quot;&gt;&lt;del&gt;BOOKKEEPER-203&lt;/del&gt;&lt;/a&gt; changed the ledger managers so that references to ZooKeeper were completely removed. This was done because for some usecases, zookeeper isn&apos;t suitable for storing ledger metadata (like a cluster with 1billion ledgers). &lt;/p&gt;

&lt;p&gt;This patch should use the new LedgerManager. I can use asyncProcessLedgers to get the list of ledger ids, and with each ID, use readLedgerMetadata to get the ensembles. &lt;/p&gt;

&lt;p&gt;Generating this map should be quite quick (of course we should verify this statement) and given that bookie crashes should be rather rare, we can regenerate each time a bookie goes down.&lt;br/&gt;
I don&apos;t think watchers is a good approach here, as you will end up with as many watchers as you have ledgers, which could be millions, and in any case, when the watcher is triggered you have get the whole ledger list again anyhow. Also, watching is zk specific, so not possible through just the LedgerManager interface.&lt;/p&gt;</comment>
                            <comment id="13398366" author="rakeshr" created="Thu, 21 Jun 2012 13:01:48 +0100"  >&lt;p&gt;@Flavio @Ivan&lt;br/&gt;
Thanks for looking the patch. I&apos;ve few clarifications and please correct me if I&apos;m wrong.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;is that starting the auditor would then be a separate admin task&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But I got confused whether to keep the auditor service out of bookie server and hope you are considering it as an external entity used by admin.&lt;/p&gt;

&lt;p&gt;Just my idea is, during the bookie startup only one among them in the bkcluster will play as auditor(do auditing service) and is part of the bookie server side. With this approach I feel the recovery mechanism will act quickly on failures. &lt;br/&gt;
Also Auditor recovery feature is a configurable item and can be switched off/on. What&apos;s your thoughts on this?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;This patch should use the new LedgerManager. I can use asyncProcessLedgers to get the list of ledger ids, and with each ID, use readLedgerMetadata to get the ensembles.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah Ivan, I got the idea of LedgerManager generalization and will refactor the code.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;.Generating this map should be quite quick (of course we should verify this statement) and given that bookie crashes should be rather rare, we can regenerate each time a bookie goes down.&lt;br/&gt;
I don&apos;t think watchers is a good approach here, as you will end up with as many watchers as you have ledgers, which could be millions, and in any case, when the watcher is triggered you have get the whole ledger list again anyhow. Also, watching is zk specific, so not possible through just the LedgerManager interface.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As I understand, auditor won&apos;t maintain a bookie vs ledger index cache. On demand (failure notification) auditor will start parsing all the ledger metadata and get suspected ledgers corresponding to the failed bookie(s). &lt;br/&gt;
But I&apos;m just thinking the overhead of generating the indexes each time. Will it be ok?&lt;/p&gt;</comment>
                            <comment id="13398391" author="ikelly" created="Thu, 21 Jun 2012 13:39:30 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Just my idea is, during the bookie startup only one among them in the bkcluster will play as auditor(do auditing service) and is part of the bookie server side. With this approach I feel the recovery mechanism will act quickly on failures.&lt;br/&gt;
Also Auditor recovery feature is a configurable item and can be switched off/on. What&apos;s your thoughts on this?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My understanding of it is that the auditor will run in the bookie process but will not directly access any bookie internals. Instead it will do everything through the client API. The reason for putting it in the same process it just that it&apos;s more convenient. It could be moved to a different process if this proves problematic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I&apos;m just thinking the overhead of generating the indexes each time. Will it be ok?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is an open question. We&apos;ll have to run a couple of tests to verify, but to start with, it should be ok.&lt;/p&gt;</comment>
                            <comment id="13398408" author="umamaheswararao" created="Thu, 21 Jun 2012 14:13:21 +0100"  >&lt;p&gt;Yes, there will be a cycle. BK server will depend on auditor package to start the auditing service. Auditor Package will depend on some of BK sever exposed packages like core interface LedgerManager..etc.&lt;/p&gt;

&lt;p&gt;To avoid this cycle, can we have some kind of ServicePlugins.&lt;/p&gt;

&lt;p&gt;BK server lifecycle will start, stop this plugins. Presently there is only one service i.e Auditing service.&lt;/p&gt;

&lt;p&gt;Some similar pattern from DN:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void startPlugins(Configuration conf) {
    plugins = conf.getInstances(DFS_DATANODE_PLUGINS_KEY, ServicePlugin.class);
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (ServicePlugin p: plugins) {
      &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
        p.start(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
        LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Started plug-in &quot;&lt;/span&gt; + p);
      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {
        LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;ServicePlugin &quot;&lt;/span&gt; + p + &lt;span class=&quot;code-quote&quot;&gt;&quot; could not be started&quot;&lt;/span&gt;, t);
      }
    }
  }&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="13399247" author="rakeshr" created="Fri, 22 Jun 2012 11:15:57 +0100"  >&lt;p&gt;Thanks Ivan, Flavio, Uma for your reviews and suggestions.&lt;/p&gt;

&lt;p&gt;@Ivan&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My understanding of it is that the auditor will run in the bookie process but will not directly access any bookie internals. Instead it will do everything through the client API. The reason for putting it in the same process it just that it&apos;s more convenient. It could be moved to a different process if this proves problematic.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ok. I think I got it. As part of this jira I&apos;ll prepare the bookie-ledger indexing logic using LedgerManager interface and will keep as an independent module. &lt;/p&gt;

&lt;p&gt;Few more clarifications:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;But the bookkeeper-server would have to start the auditing service, still this dependency has to be resolved?&lt;/li&gt;
	&lt;li&gt;Also would like to know the suggestions on package structure?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13399427" author="rakeshr" created="Fri, 22 Jun 2012 17:43:18 +0100"  >&lt;p&gt;Thanks all for the comments.&lt;/p&gt;

&lt;p&gt;@Ivan&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;My understanding of it is that the auditor will run in the bookie process but will not directly access any bookie internals. Instead it will do everything through the client API&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To start, attached the latest patch by using the ledgermanager interface. Please have a look and would like to know the approach is correct.&lt;/p&gt;

&lt;p&gt;Hi everyone,&lt;br/&gt;
Still the package structure and bookie process dependency is open point. I feel, would need more discussion on this.&lt;/p&gt;</comment>
                            <comment id="13400394" author="ikelly" created="Mon, 25 Jun 2012 11:15:37 +0100"  >&lt;p&gt;This patch is very good. I have a couple of comments/questions.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;putLedger should be synchronized.&lt;/li&gt;
	&lt;li&gt;import StringUtils rather than using the fully qualified name.&lt;/li&gt;
	&lt;li&gt;In case of error, throw an exception from #getBookieToLedgerIndex. at the auditor level, this should result in the auditor giving up control. When a new auditor takes over, it should run a check between the contents of the bookie-&amp;gt;ledger map and the current available bookies.&lt;/li&gt;
	&lt;li&gt;It should throw a custom exception, not IOException. I&apos;ve created a ReplicationException class in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-246&quot; title=&quot;Recording of underreplication of ledger entries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-246&quot;&gt;&lt;del&gt;BOOKKEEPER-246&lt;/del&gt;&lt;/a&gt;. Perhaps you add one under that, or use the UnavailableException already defined there.&lt;/li&gt;
	&lt;li&gt;Perhaps, instead of storing the ledgers as a List&amp;lt;Long&amp;gt;, store them as a HashSet&amp;lt;Long&amp;gt;. Storing as a list, will make putLedger very slow if there is a lot of ledgers (List#contains is O&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;).&lt;br/&gt;
#Why do you need the grace period in testEnsembleReformation()?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13400544" author="fpj" created="Mon, 25 Jun 2012 16:40:29 +0100"  >&lt;p&gt;About the plugin discussion, I couldn&apos;t get a sense if you folks are more inclined towards having the auditor as a separate process or not. Is there any disadvantage of running it as a separate process? If it runs as a separate process, then making it a plugin is not necessary, yes?&lt;/p&gt;</comment>
                            <comment id="13400570" author="rakeshr" created="Mon, 25 Jun 2012 17:08:45 +0100"  >&lt;p&gt;@Ivan&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I have a couple of comments/questions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks for your time and review comments. I have reworked the comments and just have a look.&lt;/p&gt;</comment>
                            <comment id="13400701" author="rakeshr" created="Mon, 25 Jun 2012 18:33:30 +0100"  >&lt;p&gt;This patch to be applied on top of &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-272&quot; title=&quot;Provide automatic mechanism to know bookie failures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-272&quot;&gt;&lt;del&gt;BOOKKEEPER-272&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13400732" author="ikelly" created="Mon, 25 Jun 2012 19:01:00 +0100"  >&lt;p&gt;Do you not mean that &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-272&quot; title=&quot;Provide automatic mechanism to know bookie failures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-272&quot;&gt;&lt;del&gt;BOOKKEEPER-272&lt;/del&gt;&lt;/a&gt; should be applied on top of this? 272 uses the indexer, so is dependent on this. &lt;/p&gt;</comment>
                            <comment id="13432717" author="rakeshr" created="Fri, 10 Aug 2012 13:15:34 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Do you not mean that &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-272&quot; title=&quot;Provide automatic mechanism to know bookie failures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-272&quot;&gt;&lt;del&gt;BOOKKEEPER-272&lt;/del&gt;&lt;/a&gt; should be applied on top of this? 272 uses the indexer, so is dependent on this. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;@Ivan&lt;br/&gt;
I&apos;ve rebased the patch with latest trunk and now its completely independent. It would be great if review the patch.&lt;/p&gt;</comment>
                            <comment id="13436861" author="ikelly" created="Fri, 17 Aug 2012 17:52:40 +0100"  >&lt;p&gt;Looks good. However, since we can&apos;t gaurantee that process() won&apos;t be called concurrently, you should use ConcurrentHashMap and construct the sets using Collections.synchronizedSet().&lt;/p&gt;</comment>
                            <comment id="13436864" author="ikelly" created="Fri, 17 Aug 2012 17:54:25 +0100"  >&lt;p&gt;Also, in the test you define maxInt, which is already defined here:&lt;br/&gt;
&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MAX_VALUE&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MAX_VALUE&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13439326" author="rakeshr" created="Wed, 22 Aug 2012 08:11:08 +0100"  >&lt;p&gt;@Ivan&lt;br/&gt;
Thanks for the comments.&lt;/p&gt;

&lt;p&gt;Point-1)  yeah, I agree to use Collections.synchronizedSet() and will do the necessary changes.&lt;/p&gt;

&lt;p&gt;Point-2) But having doubt whether to use ConcurrentHashMap  or not?&lt;/p&gt;

&lt;p&gt;Here bookie2ledgersMap.put(bookie, ledgers); is getting called inside synchronized block as follows, I couldn&apos;t see any necessity of concurrentHashMap. I&apos;m missing anything?&lt;/p&gt;

&lt;p&gt;I&apos;m having double check to avoid two guys are seeing null simultaneously. Even if I&apos;m having ConcurrentHashMap, say if two guys has come and invoked map#get() method. Both will see null one after another and continue for creating their own separate HasSet. Isn&apos;t it?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt; ledgers = bookie2ledgersMap.get(bookie);
        &lt;span class=&quot;code-comment&quot;&gt;// creates an empty list and add to bookie &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; keeping its ledgers
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ledgers == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (bookie2ledgersMap) {
                &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; check whether the ledgerset exists or not
&lt;/span&gt;                ledgers = bookie2ledgersMap.get(bookie);
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ledgers == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                    edgers = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt;();                    
                    bookie2ledgersMap.put(bookie, ledgers);
                }
            }
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Could you please give your thoughts?&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Rakesh&lt;/p&gt;</comment>
                            <comment id="13440296" author="rakeshr" created="Thu, 23 Aug 2012 14:52:38 +0100"  >&lt;p&gt;@Ivan&lt;br/&gt;
Attached reworked patch addressing the comments. Could you have a look on the same.&lt;/p&gt;</comment>
                            <comment id="13441364" author="ikelly" created="Fri, 24 Aug 2012 19:29:39 +0100"  >&lt;p&gt;For the sets, the code should be:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
ledgers = Collections.synchronizedSet(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt;());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;How it is now, the synchronized set is never assigned to anything.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
I couldn&apos;t see any necessity of concurrentHashMap. I&apos;m missing anything?
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;While technically, HashMap + synchronized should be safe, I&apos;m quite nervous of using HashMap at all in a multi thread context. My worry is that something in #put would modify something internally in the HashMap, which would cause a non-synchronized #get to go nuts. For example, #put() could trigger a resize of the hash table, after #get() has calculated the index where it wants to put stuff. Then #get() returns a value which isn&apos;t tied to the key at all. Im don&apos;t know if this can happen with HashSet, but its feasible, and the javadoc does explicitly say that it&apos;s not thread safe if you do any ops that structurally modify the HashMap (add/delete etc). So, it&apos;s better to go with concurrent map. The double check may still make sense, to avoid creating a set each time.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt; ledgers = bookie2ledgersMap.get(bookie);
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ledgers == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
    ledgers = Collections.synchronizedSet(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt;());
    Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt; prevLedgers = bookie2ledgersMap.put(bookie, ledgers);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (prevLedgers != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
       ledgers = prevLedgers;
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13441806" author="rakeshr" created="Sat, 25 Aug 2012 08:50:06 +0100"  >&lt;p&gt;Thanks a lot Ivan for the detailed info.&lt;br/&gt;
I&apos;ve attached the patch addressing above comments. Could you please have a look at it.&lt;/p&gt;</comment>
                            <comment id="13442361" author="ikelly" created="Mon, 27 Aug 2012 12:04:23 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt; ConcurrentHashMap is used incorrectly in the patch (it was also wrong in the snippet I posted in my last comment). New patch uses it correctly (i.e. when using ConcurrentHashMap, you don&apos;t need external synchronization).&lt;/p&gt;</comment>
                            <comment id="13442364" author="umamaheswararao" created="Mon, 27 Aug 2012 12:26:11 +0100"  >&lt;p&gt;Yeah, Thanks a lot Ivan and Rekesh for working hard on this.&lt;/p&gt;

&lt;p&gt;Its true that with out complete synchronization we can handle like how Ivan did in this patch.&lt;/p&gt;

&lt;p&gt;I can see, that after put again checking for the return value and setting back to older if null. That partical peice really will make that synchronization is not required. Even someone else removes it, put may retun null and restore to older value. This is what I understud from it.&lt;/p&gt;

&lt;p&gt;+1 from me. Great efforts Rakesh and Ivan for moving this work forward.&lt;/p&gt;</comment>
                            <comment id="13442424" author="hustlmsp" created="Mon, 27 Aug 2012 15:01:16 +0100"  >&lt;p&gt;the synchronization part looks good to me.&lt;/p&gt;

&lt;p&gt;I had some minor comments about the patch.&lt;/p&gt;

&lt;p&gt;1) LedgerManagerFactory and LedgerManager is construct in the tests but they aren&apos;t be closed or uninitialized. it might be not a good practice.&lt;/p&gt;

&lt;p&gt;2) &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt; ledgerList = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt;(3);
+        LedgerHandle lh = createAndAddEntriesToLedger();
+        lh.close();
+        ledgerList.add(lh.getId());
+
+        lh = createAndAddEntriesToLedger();
+        lh.close();
+        ledgerList.add(lh.getId());
+
+        lh = createAndAddEntriesToLedger();
+        lh.close();
+        ledgerList.add(lh.getId());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It might be better to put them in a for-loop for same code.&lt;/p&gt;

&lt;p&gt;3) About the BookieLedgerIndexer. &lt;/p&gt;

&lt;p&gt;3.1) Do we need to put all ledger metadata in memory? Could we do it part by part? For example, we indexed 1~K ledgers and process them. then we indexed K+1 ~ M ledgers and process them. so we don&apos;t need to process all ledger metadata in one time. It might be useful and necessary for a bookkeeper instance contains large number of ledgers.&lt;/p&gt;</comment>
                            <comment id="13442451" author="ikelly" created="Mon, 27 Aug 2012 15:58:16 +0100"  >&lt;p&gt;Committed r1377703. Good work Rakesh.&lt;/p&gt;</comment>
                            <comment id="13442461" author="hudson" created="Mon, 27 Aug 2012 16:20:42 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #673 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/673/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/673/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-304&quot; title=&quot;Prepare bookie vs ledgers cache and will be used by the Auditor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-304&quot;&gt;&lt;del&gt;BOOKKEEPER-304&lt;/del&gt;&lt;/a&gt;: Prepare bookie vs ledgers cache and will be used by the Auditor (rakeshr via ivank) (Revision 1377703)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13442793" author="hustlmsp" created="Tue, 28 Aug 2012 00:12:18 +0100"  >&lt;p&gt;@Ivan, I added a comment before you committed the patch. Although you had committed it, I still would like to here the opinions from you, especially about the memory concern for a bookkeeper instance contains large number of ledgers.&lt;/p&gt;</comment>
                            <comment id="13442803" author="ikelly" created="Tue, 28 Aug 2012 00:26:19 +0100"  >&lt;p&gt;Ah, I missed your comment as I had this queued to go once I saw one response. We can fix the tests in another JIRA. I&apos;ll open a JIRA for it tomorrow.&lt;/p&gt;

&lt;p&gt;Regarding the memory limit, we would hit it for more than a couple of hundred million ledgers. However, I wanted to get the base case committed first, and then optimize after. I have ideas for fully distributing the auditor also, which would remove this limit, but it&apos;s not fully fleshed out yet.&lt;/p&gt;</comment>
                            <comment id="13442903" author="umamaheswararao" created="Tue, 28 Aug 2012 03:25:54 +0100"  >&lt;blockquote&gt;
&lt;p&gt; However, I wanted to get the base case committed first, and then optimize after.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Completely make sense, especially when building some big features.&lt;br/&gt;
Also, Wanted to make a note that, we are planning to keep the auditor as separate process now right. So, it should not create issues for the BK instances. We can optimize one by one for considering this new process loads. &lt;/p&gt;

&lt;p&gt;@Sijie, Your thought is good on memory optimizations. Yes, if you find out any such improvements in this new area of code, even its committed, please file a JIRAs under BK-237. We can attack one by one. Thanks a lot for your comments.&lt;/p&gt;</comment>
                            <comment id="13443133" author="hustlmsp" created="Tue, 28 Aug 2012 13:57:31 +0100"  >&lt;p&gt;thanks Ivan and Uma for replies. I agreed to let it first and optimize later.&lt;/p&gt;
</comment>
                            <comment id="13444817" author="rakeshr" created="Thu, 30 Aug 2012 10:18:36 +0100"  >&lt;p&gt;Thanks Ivan for showing me to use &apos;bookie2ledgersMap.putIfAbsent(bookie, ledgers);&apos;. Its really great and now its more readable.&lt;/p&gt;

&lt;p&gt;Thanks Sijie,Uma for your reviews. I just raised &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-384&quot; title=&quot;Clean up LedgerManagerFactory and LedgerManager usage in tests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-384&quot;&gt;&lt;del&gt;BOOKKEEPER-384&lt;/del&gt;&lt;/a&gt; to address the 1st and the 2nd comments&lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                            <outwardlinks description="requires">
                                        <issuelink>
            <issuekey id="12595818">BOOKKEEPER-317</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12558237">BOOKKEEPER-272</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12532709" name="BOOKKEEPER-304.1.patch" size="40649" author="rakeshr" created="Wed, 20 Jun 2012 16:40:27 +0100"/>
                            <attachment id="12533327" name="BOOKKEEPER-304.2.patch" size="12959" author="rakeshr" created="Mon, 25 Jun 2012 17:07:14 +0100"/>
                            <attachment id="12533068" name="BOOKKEEPER-304.2.patch" size="13161" author="rakeshr" created="Fri, 22 Jun 2012 17:38:07 +0100"/>
                            <attachment id="12540476" name="BOOKKEEPER-304.3.patch" size="16721" author="rakeshr" created="Fri, 10 Aug 2012 13:12:06 +0100"/>
                            <attachment id="12542126" name="BOOKKEEPER-304.4.patch" size="16955" author="rakeshr" created="Thu, 23 Aug 2012 14:51:22 +0100"/>
                            <attachment id="12542399" name="BOOKKEEPER-304.5.patch" size="16941" author="rakeshr" created="Sat, 25 Aug 2012 08:47:38 +0100"/>
                            <attachment id="12542591" name="BOOKKEEPER-304.diff" size="16856" author="ikelly" created="Mon, 27 Aug 2012 12:04:23 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 Jun 2012 20:38:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>293517</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyn5hz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>169078</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>