<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:31:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-461/BOOKKEEPER-461.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-461] Delivery throughput degrades when there are lots of publishers w/ high traffic.</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-461</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;When running benchmarking over the hub server, found that delivery throughput degrades when there are lots of publishers publishing messages. And the delivery throughput will goes up when there is no publishes.&lt;/p&gt;

&lt;p&gt;This issue is introduced due to ReadAheadCache only runs a single thread. So when the netty workers are busy handling publish requests, they are pushing lots of messages into ReadAheadCache&apos;s queue to put them in to read ahead cache. So the readahead cache is busy on updating keys.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12615640">BOOKKEEPER-461</key>
            <summary>Delivery throughput degrades when there are lots of publishers w/ high traffic.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hustlmsp">Sijie Guo</assignee>
                                    <reporter username="hustlmsp">Sijie Guo</reporter>
                        <labels>
                    </labels>
                <created>Sun, 11 Nov 2012 14:39:41 +0000</created>
                <updated>Wed, 13 Feb 2013 15:46:49 +0000</updated>
                            <resolved>Tue, 4 Dec 2012 17:56:12 +0000</resolved>
                                                    <fixVersion>4.2.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13494886" author="hustlmsp" created="Sun, 11 Nov 2012 14:42:46 +0000"  >&lt;p&gt;Attach a figure of the benchmark.&lt;/p&gt;</comment>
                            <comment id="13494890" author="hustlmsp" created="Sun, 11 Nov 2012 14:47:25 +0000"  >&lt;p&gt;Attach a patch to make ReadAhead running w/ multithreads.&lt;/p&gt;</comment>
                            <comment id="13495367" author="hustlmsp" created="Mon, 12 Nov 2012 16:10:21 +0000"  >&lt;p&gt;attach a new figure of the benchmark w/ the patch.&lt;/p&gt;</comment>
                            <comment id="13495479" author="yx3zhu@gmail.com" created="Mon, 12 Nov 2012 18:32:35 +0000"  >&lt;p&gt;I would suggest change &quot;Weird! Should not have two threads adding message to cache key {} at the same time.&quot; to neutral &quot;It is unexpected that more than one threads are adding message to cache key {} at the same time.&quot; :-&amp;gt;&lt;br/&gt;
Otherwise looks good.&lt;/p&gt;
</comment>
                            <comment id="13496659" author="fpj" created="Tue, 13 Nov 2012 23:17:56 +0000"  >&lt;p&gt;Hi Sijie, I have few questions about this patch&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;With enqueueWithoutFailureByTopic, does it make sense to keep enqueueWithoutFailure?&lt;/li&gt;
	&lt;li&gt;I&apos;m not entirely sure why you want some of the operations to execute in separate threads. For example, in this block:&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        enqueueWithoutFailure(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CacheRequest() {
            @Override
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void performRequest() {
                &lt;span class=&quot;code-comment&quot;&gt;// maintain the index of seq-id
&lt;/span&gt;                MapMethods.addToMultiMap(orderedIndexOnSeqId, cacheKey.getTopic(),
                                         cacheKey.getSeqId(), TreeSetLongFactory.instance);

                &lt;span class=&quot;code-comment&quot;&gt;// maintain the time index of addition
&lt;/span&gt;                MapMethods.addToMultiMap(timeIndexOfAddition, currTime,
                                        cacheKey, HashSetCacheKeyFactory.instance);
                &lt;span class=&quot;code-comment&quot;&gt;// update time index
&lt;/span&gt;                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (newCacheSize &amp;gt; maxCacheSize) {
                    collectOldCacheEntries();
                }
            }
        });
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is it the case that the MapMethods operations are expensive? &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;In the following excerpt form your patch, you&apos;re inverting the order of execution and I couldn&apos;t convince myself that it is not a problem:&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-        &lt;span class=&quot;code-comment&quot;&gt;// maintain the time index of addition
&lt;/span&gt;-        MapMethods.addToMultiMap(timeIndexOfAddition, currTime, cacheKey, HashSetCacheKeyFactory.instance);
-
-        &lt;span class=&quot;code-comment&quot;&gt;// maintain the index of seq-id
&lt;/span&gt;-        MapMethods.addToMultiMap(orderedIndexOnSeqId, cacheKey.getTopic(), cacheKey.getSeqId(),
-                                 TreeSetLongFactory.instance);
-
-        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; add the message to the cache
&lt;/span&gt;-        cacheValue.setMessageAndInvokeCallbacks(message, currTime);
+        &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (cacheValue) {
+            &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; add the message to the cache
&lt;/span&gt;+            cacheValue.setMessageAndInvokeCallbacks(message, currTime);
+        }
 
         &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; overgrown, collect old entries
&lt;/span&gt;-        collectOldCacheEntries();
+        enqueueWithoutFailure(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CacheRequest() {
+            @Override
+            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void performRequest() {
+                &lt;span class=&quot;code-comment&quot;&gt;// maintain the index of seq-id
&lt;/span&gt;+                MapMethods.addToMultiMap(orderedIndexOnSeqId, cacheKey.getTopic(),
+                                         cacheKey.getSeqId(), TreeSetLongFactory.instance);
+
+                &lt;span class=&quot;code-comment&quot;&gt;// maintain the time index of addition
&lt;/span&gt;+                MapMethods.addToMultiMap(timeIndexOfAddition, currTime,
+                                         cacheKey, HashSetCacheKeyFactory.instance);
+                &lt;span class=&quot;code-comment&quot;&gt;// update time index
&lt;/span&gt;+                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (newCacheSize &amp;gt; maxCacheSize) {
+                    collectOldCacheEntries();
+                }
+            }
+        });
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
	&lt;li&gt;Please update this: &quot;so dont need to maintain&quot; -&amp;gt; &quot;so don&apos;t need to maintain&quot;&lt;/li&gt;
	&lt;li&gt;In the graph you posted last, what are the sharp drops? Is that you restarting the hub?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13496927" author="hustlmsp" created="Wed, 14 Nov 2012 07:55:09 +0000"  >&lt;p&gt;thanks Yixue and Flavio for reviewing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;change &quot;Weird! Should not have two threads adding message to cache key {} at the same time.&quot; to neutral &quot;It is unexpected that more than one threads are adding message to cache key {} at the same time.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I will change the text.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1. With enqueueWithoutFailureByTopic, does it make sense to keep enqueueWithoutFailure?&lt;br/&gt;
2. I&apos;m not entirely sure why you want some of the operations to execute in separate threads.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;enqueueWithoutFailureByTopic is try to submit to different threads, each threads process portion of topics.&lt;/p&gt;

&lt;p&gt;enqueueWithoutFailure is try to use original cache thread to do some other non-critical operations like updating readahead cache index and cleanup readahead cache.&lt;/p&gt;

&lt;p&gt;I don&apos;t want the non-critical operations affect those critical operations like adding messages to readahead cache (affect publish operations) and delivering next message (affect deliver operations). so it still keeps enqueueWithoutFailure.&lt;/p&gt;

&lt;p&gt;The other reason to keep enqueueWithoutFailure is that, the two indices (time index and seq index) is quite difficult to modify them concurrently in high performance. so it keeps cache thread to handle index staffs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the following excerpt form your patch, you&apos;re inverting the order of execution and I couldn&apos;t convince myself that it is not a problem.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;since all the indices operations would be enqueueWithoutFailure to process by cache thread only, so the delay of index  updates is OK.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please update this: &quot;so dont need to maintain&quot; -&amp;gt; &quot;so don&apos;t need to maintain&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;will update the text.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the graph you posted last, what are the sharp drops? Is that you restarting the hub?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;the drops is because we finished one loop of benchmark and starts a new one.&lt;/p&gt;</comment>
                            <comment id="13496974" author="hustlmsp" created="Wed, 14 Nov 2012 09:37:26 +0000"  >&lt;p&gt;Attach a new patch to address text issue as Yixue and Flavio&apos;s comments.&lt;/p&gt;</comment>
                            <comment id="13503945" author="ikelly" created="Mon, 26 Nov 2012 18:06:38 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt; The new code moves the cache cleanup from being synchronous to be asynchronous. I.e. If the read ahead cache is getting too full, schedule a flush. This doesn&apos;t block many more requests trying to add to the cache before it has been cleaned up. In the post-patch graph you attached, what are the big dips?&lt;/p&gt;

&lt;p&gt;The readaheadcache seems to be solving a very common problem. Perhaps we could leverage guava&apos;s CacheBuilder, which does the same thing, and cleans up as it goes, rather than removing a lot of entries in one go, as collectOldCacheEntries does.&lt;/p&gt;</comment>
                            <comment id="13504370" author="hustlmsp" created="Tue, 27 Nov 2012 04:37:33 +0000"  >&lt;p&gt;&amp;gt; what are the big dips?&lt;/p&gt;

&lt;p&gt;the figure is formed by several benchmark runs. so the drop is between benchmarks and the figure is collected from hub server side not from benchmark.&lt;/p&gt;

&lt;p&gt;&amp;gt; The new code moves the cache cleanup from being synchronous to be asynchronous. I.e. If the read ahead cache is getting too full, schedule a flush. This doesn&apos;t block many more requests trying to add to the cache before it has been cleaned up. &lt;/p&gt;

&lt;p&gt;This is a good point. I will try looking into it and think about your suggestion using CacheBuilder.&lt;/p&gt;</comment>
                            <comment id="13508526" author="hustlmsp" created="Mon, 3 Dec 2012 07:26:10 +0000"  >&lt;p&gt;attach a new patch to stop putting entries to cache until old entries are collected.&lt;/p&gt;</comment>
                            <comment id="13508527" author="hustlmsp" created="Mon, 3 Dec 2012 07:32:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikelly&quot; class=&quot;user-hover&quot; rel=&quot;ikelly&quot;&gt;Ivan Kelly&lt;/a&gt; For 4.2.0, how about keeping the cache implementation here to just use multithreads?&lt;/p&gt;

&lt;p&gt;For 4.3.0, we could have a separated jira working on providing a better readahead cache implementation, like using a mature cache library, which we also need to consider memory issue in JVM, one solution is to use on-heap cache implementation like guava cache, the other solution is to use off-heap cache implementation like apache directmemory (&lt;a href=&quot;http://directmemory.apache.org/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://directmemory.apache.org/&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13508581" author="hadoopqa" created="Mon, 3 Dec 2012 08:40:53 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-461&quot; title=&quot;Delivery throughput degrades when there are lots of publishers w/ high traffic.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-461&quot;&gt;&lt;del&gt;BOOKKEEPER-461&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WARNING: Running test-patch on a dirty local svn workspace&lt;/p&gt;

&lt;p&gt;Patch &amp;lt;a href=&quot;/jira/secure/attachment/12555718/&lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-461&quot; title=&quot;Delivery throughput degrades when there are lots of publishers w/ high traffic.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-461&quot;&gt;&lt;del&gt;BOOKKEEPER-461&lt;/del&gt;&lt;/a&gt;.patch&quot;&amp;gt;/jira/secure/attachment/12555718/&lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-461&quot; title=&quot;Delivery throughput degrades when there are lots of publishers w/ high traffic.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-461&quot;&gt;&lt;del&gt;BOOKKEEPER-461&lt;/del&gt;&lt;/a&gt;.patch&amp;lt;/a&amp;gt; downloaded at Mon Dec  3 08:15:50 UTC 2012&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 3 line(s) with trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 2 line(s) longer than 120 characters&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 386&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/62/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/62/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13509902" author="ikelly" created="Tue, 4 Dec 2012 17:56:12 +0000"  >&lt;p&gt;Latest patch committed as r1417066. Thanks Sijie.&lt;/p&gt;

&lt;p&gt;Regarding using a cache library, waiting for 4.3 is a good idea.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12623909">BOOKKEEPER-505</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12626162">BOOKKEEPER-531</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12553480" name="BOOKKEEPER-461.diff" size="20706" author="hustlmsp" created="Wed, 14 Nov 2012 09:37:26 +0000"/>
                            <attachment id="12553126" name="BOOKKEEPER-461.diff" size="20681" author="hustlmsp" created="Mon, 12 Nov 2012 16:08:25 +0000"/>
                            <attachment id="12553028" name="BOOKKEEPER-461.diff" size="20187" author="hustlmsp" created="Sun, 11 Nov 2012 14:47:25 +0000"/>
                            <attachment id="12555718" name="BOOKKEEPER-461.patch" size="20706" author="hustlmsp" created="Mon, 3 Dec 2012 07:26:10 +0000"/>
                            <attachment id="12553128" name="pub_sub_multithreads.png" size="8249" author="hustlmsp" created="Mon, 12 Nov 2012 16:10:21 +0000"/>
                            <attachment id="12553025" name="pub_sub_singlethread.png" size="27983" author="hustlmsp" created="Sun, 11 Nov 2012 14:42:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 12 Nov 2012 18:32:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>256939</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hycvev:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>109065</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>