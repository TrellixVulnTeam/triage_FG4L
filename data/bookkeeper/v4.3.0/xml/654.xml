<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:29:01 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-654/BOOKKEEPER-654.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-654] Bookkeeper client operations are allowed even after its closure, bk#close()</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-654</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;User can perform below operations with the closed bookkeeper client, which was instantiated with external zkclient.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;open a closed ledger&lt;/li&gt;
	&lt;li&gt;create a new ledger&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Also, ledgerhandle operations like fencing/add/write are infinitely hanging.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12658945">BOOKKEEPER-654</key>
            <summary>Bookkeeper client operations are allowed even after its closure, bk#close()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hustlmsp">Sijie Guo</assignee>
                                    <reporter username="rakeshr">Rakesh R</reporter>
                        <labels>
                    </labels>
                <created>Sun, 21 Jul 2013 10:05:46 +0100</created>
                <updated>Fri, 21 Feb 2014 18:42:39 +0000</updated>
                            <resolved>Fri, 21 Feb 2014 18:01:50 +0000</resolved>
                                    <version>4.2.0</version>
                                    <fixVersion>4.3.0</fixVersion>
                                    <component>bookkeeper-client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13714674" author="rakeshr" created="Sun, 21 Jul 2013 10:11:26 +0100"  >&lt;p&gt;Attached patch which contains few test cases to understand the issue...&lt;/p&gt;</comment>
                            <comment id="13715339" author="rakeshr" created="Mon, 22 Jul 2013 17:32:14 +0100"  >&lt;p&gt;Attached patch, here I&apos;ve added bkclient#isClosed checks to the exposed apis in Bookkeeper and LedgerHandle. If yes, just returns Code.BkClientClosedException. Please review the changes. Thanks.&lt;/p&gt;

&lt;p&gt;I&apos;ve just added checks to BookieClient also, considering user can access through bk.getBookieClient().&lt;/p&gt;</comment>
                            <comment id="13715376" author="hadoopqa" created="Mon, 22 Jul 2013 18:08:36 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12593540/0002-BOOKKEEPER-654.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0002-BOOKKEEPER-654.patch&lt;/a&gt; downloaded at Mon Jul 22 16:41:52 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 901&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/426/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/426/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13715462" author="hustlmsp" created="Mon, 22 Jul 2013 19:02:02 +0100"  >&lt;p&gt;We should find why the operations are hanging and fix them, rather than just adding checking. As my knowledge, all the following bookie request should fail if bookie client is closed since it would mark bookie client as closed, so no connection would be established again and all existing channel also are closed and supposed to fail requests. (check following code)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void close() {
        closeLock.writeLock().lock();
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            closed = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (PerChannelBookieClient channel: channels.values()) {
                channel.close();
            }
        } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
            closeLock.writeLock().unlock();
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13715518" author="rakeshr" created="Mon, 22 Jul 2013 19:46:08 +0100"  >&lt;blockquote&gt;&lt;p&gt;We should find why the operations are hanging and fix them, rather than just adding checking&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;During bk#close(), it would shutdown the &apos;mainWorkerPool.shutdown();&apos;. Now when user tries to open a non-closed ledger with this bkclient, it would go for recovery and mark ledgerInrecovery in zk metadata, then on zk callback its submitting operations to the mainWorkerPool. Since the mainWorkerPool has already closed, its throwing the following exception. In the otherside, bookkeeper client call is infinitely waiting for the result, due to the exception its not sending any results back.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2013-07-22 23:47:43,390 - ERROR - [main-EventThread:ClientCnxn$EventThread@623] - Caught unexpected throwable
java.util.concurrent.RejectedExecutionException
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1774)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:768)
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:656)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:78)
	at java.util.concurrent.Executors$DelegatedExecutorService.submit(Executors.java:599)
	at org.apache.bookkeeper.util.OrderedSafeExecutor.submitOrdered(OrderedSafeExecutor.java:92)
	at org.apache.bookkeeper.util.OrderedSafeExecutor$OrderedSafeGenericCallback.operationComplete(OrderedSafeExecutor.java:130)
	at org.apache.bookkeeper.meta.AbstractZkLedgerManager$3.processResult(AbstractZkLedgerManager.java:186)
	at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:545)
	at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here one observation is, bookkeeper client is not properly conveying the message to the user saying &apos;BkClient is Closed and no operation permits&apos;, secondly the user calls are allowed to change the ledger metadata through the closed bookkeeper client.&lt;/p&gt;</comment>
                            <comment id="13715527" author="rakeshr" created="Mon, 22 Jul 2013 19:52:39 +0100"  >&lt;blockquote&gt;&lt;p&gt;As my knowledge, all the following bookie request should fail if bookie client is closed since it would mark bookie client as closed, so no connection would be established again and all existing channel also are closed and supposed to fail requests. (check following code)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Since &apos;mainWorkerPool&apos; is down in bk#close, the call stack is not reached to the PerChannelBookieClient...&lt;/p&gt;

&lt;p&gt;Bookkeeper.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void close() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException, BKException {
        ....
        ....
        mainWorkerPool.shutdown();
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!mainWorkerPool.awaitTermination(10, TimeUnit.SECONDS)) {
            LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;The mainWorkerPool did not shutdown cleanly&quot;&lt;/span&gt;);
        }
        bookieClient.close();
        ....
        ....
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13716056" author="hustlmsp" created="Tue, 23 Jul 2013 06:16:03 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        @Override
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void operationComplete(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rc, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; T result) {
            executor.submitOrdered(orderingKey, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SafeRunnable() {
                    @Override
                    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void safeRun() {
                        safeOperationComplete(rc, result);
                    }
                });
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;looks like you find the root cause, you should catch the exception and fix the callback directly in OrderedSafeGenericCallback.&lt;/p&gt;

&lt;p&gt;the only concern is that we should put such checking in a central place rather then spreading it over through the code base.&lt;/p&gt;</comment>
                            <comment id="13718723" author="rakeshr" created="Wed, 24 Jul 2013 20:12:12 +0100"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;. Reworked and updated the latest patch based on trunk version. &lt;br/&gt;
In this, I have covered the public apis in Bookkeeper &amp;amp; LedgerHandle.&lt;/p&gt;</comment>
                            <comment id="13718748" author="hadoopqa" created="Wed, 24 Jul 2013 20:38:04 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12594000/0003-BOOKKEEPER-654.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0003-BOOKKEEPER-654.patch&lt;/a&gt; downloaded at Wed Jul 24 19:11:00 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 902&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/434/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/434/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13719262" author="hustlmsp" created="Thu, 25 Jul 2013 06:54:59 +0100"  >&lt;p&gt;thanks for updating. &lt;/p&gt;

&lt;p&gt;1. in OrderedSafeExecutor, why not just catch the rejected exception rather than adding an extra boolean flag. since this flag doesn&apos;t avoid throwing rejected exception. &lt;/p&gt;

&lt;p&gt;2. in LedgerOpenOp, why we need #readComplete here? an unscheduled speculative task doesn&apos;t affect any logic. &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+                speculativeTask = scheduler.scheduleWithFixedDelay(
+                        speculativeReadRunnable, speculativeReadTimeout,
+                        speculativeReadTimeout, TimeUnit.MILLISECONDS);
+            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (RuntimeException e) {
+                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (lh.bk.bookieClient.isClosed()) {
+                    cb.readComplete(BKException.Code.BkClientClosedException,
+                            lh, PendingReadOp.&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, PendingReadOp.&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.ctx);
+                    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
+                }
+            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13720403" author="rakeshr" created="Fri, 26 Jul 2013 05:50:22 +0100"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt; for the comments. Few clarifications:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;1. in OrderedSafeExecutor, why not just catch the rejected exception rather than adding an extra boolean flag. since this flag doesn&apos;t avoid throwing rejected exception.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;From ThreadPoolExecutor JavaDoc, it says, will be rejected when the Executor has been shut down, and also when the Executor uses finite bounds for both maximum threads and work queue capacity, and is saturated.&lt;/p&gt;

&lt;p&gt;ThreadPoolExecutor.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void execute(&lt;span class=&quot;code-object&quot;&gt;Runnable&lt;/span&gt; command) {
    &lt;span class=&quot;code-comment&quot;&gt;//....
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;//....
&lt;/span&gt;    reject(command); &lt;span class=&quot;code-comment&quot;&gt;// is shutdown or saturated&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ve added the flag to convey to the user about the actual cause(either due to bk.close() or some other reason). Otherwise we need to iterate over the &apos;executor.threads&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;&apos; and see whether its shutdown like below. Any other better way to handle this?&lt;br/&gt;
OrderedSafeExecutor.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; executor.threads.length; i++) {
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(executor.threads[i].isShutdown()){
                      safeOperationComplete(BKException.Code.BkClientClosedException,
                        result);
                      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
                }
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;2. in LedgerOpenOp, why we need #readComplete here? an unscheduled speculative task doesn&apos;t affect any logic. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If we throws exception back to the caller, (callers are: LedgerRecovery#doRecoveryRead() and LedgerHandle.asyncReadEntries()) callers need to duplicate the logic of handling the exception and return the BkClientClosedException. Whats your opinion?&lt;/p&gt;

&lt;p&gt;Also, I need to remove &apos;if(bk.bookieClient.isClosed())&apos; check added at LedgerHandle.asyncReadEntries(), its not required.&lt;/p&gt;
</comment>
                            <comment id="13720414" author="hustlmsp" created="Fri, 26 Jul 2013 06:08:36 +0100"  >&lt;p&gt;&amp;gt; From ThreadPoolExecutor JavaDoc, it says, will be rejected when the Executor has been shut down, and also when the Executor uses finite bounds for both maximum threads and work queue capacity, and is saturated.&lt;/p&gt;

&lt;p&gt;but you still need to catch the exception as I commented. a shutdown flag can&apos;t avoid submitting tasks to a shutdown scheduler. that&apos;s the point.&lt;/p&gt;


&lt;p&gt;&amp;gt; If we throws exception back to the caller, (callers are: LedgerRecovery#doRecoveryRead() and LedgerHandle.asyncReadEntries()) callers need to duplicate the logic of handling the exception and return the BkClientClosedException. Whats your opinion?&lt;/p&gt;

&lt;p&gt;my point is a failure speculative task doesn&apos;t affect anything. since the original read request would fail due to bookie client is closed.&lt;/p&gt;

&lt;p&gt;isClosed checking is also not necessary. the errors already be propagated from either worker pool callback or bookie client.  &lt;/p&gt;</comment>
                            <comment id="13720759" author="rakeshr" created="Fri, 26 Jul 2013 13:59:17 +0100"  >&lt;p&gt;Thanks for the reply&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;but you still need to catch the exception as I commented. a shutdown flag can&apos;t avoid submitting tasks to a shutdown scheduler. that&apos;s the point.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In my latest submitted patch, if the executor.isShutdown, its calling the safeOperationComplete and &quot;return;&quot; back without submitting the request to the executor. In that way we are returning back to the bookkeeper client, saying &apos;BkClientClosedException&apos; and not submitting any tasks to the executor. Is that ok?&lt;br/&gt;
OrderedSafeExecutor.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
         &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void operationComplete(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rc, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; T result) {
+            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (executor.isShutdown) {
+                safeOperationComplete(BKException.Code.BkClientClosedException,
+                        result);
+                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
+            }
             executor.submitOrdered(orderingKey, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SafeRunnable() {
                     @Override
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;my point is a failure speculative task doesn&apos;t affect anything. since the original read request would fail due to bookie client is closed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Its true and agree with you&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;isClosed checking is also not necessary. the errors already be propagated from either worker pool callback or bookie client&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;ve added this check to properly conveying user about the &apos;BkClientClosedException&apos; returncode.&lt;/p&gt;</comment>
                            <comment id="13720978" author="hustlmsp" created="Fri, 26 Jul 2013 18:36:07 +0100"  >&lt;blockquote&gt;
&lt;p&gt;In my latest submitted patch, if the executor.isShutdown, its calling the safeOperationComplete and &quot;return;&quot; back without submitting the request to the executor. In that way we are returning back to the bookkeeper client, saying &apos;BkClientClosedException&apos; and not submitting any tasks to the executor. Is that ok&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;shutdown flag no problem. but as my previous comments, a shutdown flag can&apos;t avoid submitting a task to shutdown scheduler. so you still need to catch exceptions.&lt;/p&gt;</comment>
                            <comment id="13721539" author="rakeshr" created="Sat, 27 Jul 2013 07:04:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;so you still need to catch exceptions.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m misunderstood about the exception handling in your comments. It would be good if you can give some more clarity.&lt;br/&gt;
Are you pointing me to have exception handling of OrderedSafeExecutor#submit OrderedSafeExecutor#submitOrdered like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void submit(SafeRunnable r) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; BKException{
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt;{
        chooseThread().submit(r);
    &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt;(Exception e){
       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(isShutdown){
           &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; BKClientClosedException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Bookkeeper client is CLOSED!&quot;&lt;/span&gt;);
       }
       &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
    }
}
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void submitOrdered(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; orderingKey, SafeRunnable r) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; BKException{
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt;{
        chooseThread(orderingKey).submit(r);
    &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt;(Exception e){
       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(isShutdown){
           &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; BKClientClosedException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Bookkeeper client is CLOSED!&quot;&lt;/span&gt;);
       }
       &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13728988" author="hustlmsp" created="Sun, 4 Aug 2013 21:52:07 +0100"  >&lt;p&gt;no. you should not change the behavior of submit &amp;amp; submitOrdered since it is a generic class, which might be used in hedwig not just bookkeeper. &lt;/p&gt;

&lt;p&gt;my comment was in OrderedSafeGenericCallback. I said that a shutdown flag can&apos;t prevent submitOrdered after shutdown. so you need to catch exceptions of submitOrdered in #operationComplete of  OrderedSafeGenericCallback.&lt;/p&gt;

&lt;p&gt;BTW, &apos;closed&apos; is better than &apos;isShutdown&apos; for a flag.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;         public final void operationComplete(final int rc, final T result) {&lt;br/&gt;
+            if (executor.isShutdown) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {
+                safeOperationComplete(BKException.Code.BkClientClosedException,
+                        result);
+                return;
+            }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;             executor.submitOrdered(orderingKey, new SafeRunnable() {&lt;br/&gt;
                     @Override&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13729823" author="rakeshr" created="Mon, 5 Aug 2013 20:03:48 +0100"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;. Updated latest patch addresses Sijie&apos;s comment.&lt;/p&gt;</comment>
                            <comment id="13729866" author="hadoopqa" created="Mon, 5 Aug 2013 20:46:25 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12596186/0004-BOOKKEEPER-654.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0004-BOOKKEEPER-654.patch&lt;/a&gt; downloaded at Mon Aug  5 19:19:00 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 905&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/450/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/450/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13736514" author="hustlmsp" created="Mon, 12 Aug 2013 03:40:49 +0100"  >&lt;p&gt;as I commented before, we could catch the runtime exception when scheduling speculative read in PendingReadOp. but we don&apos;t need to callback when it is closed otherwise it would callback twice, returning different return codes.&lt;/p&gt;

&lt;p&gt;I don&apos;t think you need to add test cases in BookieReadWriteTest. As this test case needs to run MultiLedgerManager and MultiDigest. but it doesn&apos;t need to since it just tests the behavior when client is closed. you could put them in a separated test case just to test these behaviors.&lt;/p&gt;</comment>
                            <comment id="13740094" author="rakeshr" created="Wed, 14 Aug 2013 20:40:58 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;as I commented before, we could catch the runtime exception when scheduling speculative read in PendingReadOp. but we don&apos;t need to callback when it is closed otherwise it would callback twice, returning different return codes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Actually I was trying to address a case where bookkeeper is closed and after this, when tries to do bk#asyncReadEntries, one should get clear Code.BkClientClosedException. How we could handle this case in PendingReadOP?, as bk.scheduler has shutdown and would throw exception.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don&apos;t think you need to add test cases in BookieReadWriteTest.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, I will move it to a separate test.&lt;/p&gt;</comment>
                            <comment id="13740604" author="hustlmsp" created="Thu, 15 Aug 2013 03:32:58 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Actually I was trying to address a case where bookkeeper is closed and after this, when tries to do bk#asyncReadEntries, one should get clear Code.BkClientClosedException. How we could handle this case in PendingReadOP?, as bk.scheduler has shutdown and would throw exception.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t understand as the speculative read doesn&apos;t change the read path. PendingReadOp would fail with BkClientClosedException after BookieClient is closed, no matter there is speculative read or not, isn&apos;t it? think about if user disables speculative read by setting speculativeReadTimeout to 0, the speculative read code will never be touched.&lt;/p&gt;

&lt;p&gt;my comment was that we could catch exceptions (we don&apos;t even need to throw the exceptions as failed to schedule speculative read would not affect anything) but we don&apos;t need to callback with BKCloseException when catching exception on scheduling speculative reads. As I don&apos;t want to spread the callback over places, otherwise it is hard to debug and maintain.&lt;/p&gt;</comment>
                            <comment id="13740793" author="rakeshr" created="Thu, 15 Aug 2013 08:57:52 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt; Thanks for your time and detailed explanation.&lt;/p&gt;

&lt;p&gt;Attached reworked patch. Please have a look at it.&lt;/p&gt;</comment>
                            <comment id="13740807" author="hadoopqa" created="Thu, 15 Aug 2013 09:31:45 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12598168/0005-BOOKKEEPER-654.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0005-BOOKKEEPER-654.patch&lt;/a&gt; downloaded at Thu Aug 15 08:04:26 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 877&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/465/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/465/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13745105" author="ikelly" created="Tue, 20 Aug 2013 17:35:31 +0100"  >&lt;p&gt;Couldn&apos;t this functionality be wrapped up in SafeRunnable? I.e.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class SafeRunnable &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Runnable&lt;/span&gt; {
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void run() {
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
             safeRun();
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {
             LOG...
             error(InternalError);
        }
    }

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void safeRun();
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void error(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; errorCode);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then SafeOrderedExecutor could error any runnables submitted after shutdown has been called.&lt;/p&gt;</comment>
                            <comment id="13747494" author="ikelly" created="Thu, 22 Aug 2013 14:09:19 +0100"  >&lt;p&gt;Actually, don&apos;t do this. There&apos;s too much possibility for loops of callbacks, better to just have OrderedSafeExecutor#submit throw an exception if closed. Not a runtime exception though.&lt;/p&gt;</comment>
                            <comment id="13747535" author="ikelly" created="Thu, 22 Aug 2013 14:47:49 +0100"  >&lt;p&gt;Actually, the real problem here is that we don&apos;t keep track of the operations on a handle/client, and therefore cannot cancel them. Once we close a bookkeeper client or handle, all outstanding user requests should be cancelled immediately and all subsequent requests denied.&lt;/p&gt;</comment>
                            <comment id="13748268" author="hustlmsp" created="Fri, 23 Aug 2013 05:16:18 +0100"  >&lt;p&gt;+1 for the patch. thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13748413" author="ikelly" created="Fri, 23 Aug 2013 10:21:25 +0100"  >&lt;p&gt;-1 on the current patch. It doesn&apos;t handle the case where a client starts an async op and closes the bookkeeper client. In this case, the async op, when completed may try to add something to the executor and get a runtime exception. The cb will never be completed.&lt;/p&gt;</comment>
                            <comment id="13748667" author="ikelly" created="Fri, 23 Aug 2013 17:14:14 +0100"  >&lt;p&gt;New patch ensures that all callbacks will be completed if the bookkeeper client is closed. Also extended this to BookKeeperAdmin and LedgerChecker which depend on a BookKeeper instance. The tests are based on the tests from the previous patch, but also test the case where async requests are made and then the client closed.&lt;/p&gt;

&lt;p&gt;I&apos;ve snuck in one small other fix in BookKeeperAdmin. Previously it was blindly close the BookKeeper instance, even if it was passed in. This is wrong, as passing it in doesn&apos;t transfer ownership.&lt;/p&gt;</comment>
                            <comment id="13748696" author="hadoopqa" created="Fri, 23 Aug 2013 17:48:37 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12599649/0001-BOOKKEEPER-654-Bookkeeper-client-operations-are-allo.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-654-Bookkeeper-client-operations-are-allo.patch&lt;/a&gt; downloaded at Fri Aug 23 16:21:24 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 886&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/472/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/472/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13748768" author="hustlmsp" created="Fri, 23 Aug 2013 18:50:56 +0100"  >&lt;blockquote&gt;
&lt;p&gt;-1 on the current patch. It doesn&apos;t handle the case where a client starts an async op and closes the bookkeeper client. In this case, the async op, when completed may try to add something to the executor and get a runtime exception. The cb will never be completed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;this patch that Rakesh attached is trying to resolve this, which catch the exception and callback. I don&apos;t understand you meant.&lt;/p&gt;

&lt;p&gt;for cancellable callback that you did, I am not sure that we really need it, since it would introduce an extra referencing on callbacks. if we didn&apos;t clean the callbacks in right way or in time (backing up due to slow requests), we might have gc issue.&lt;/p&gt;</comment>
                            <comment id="13748816" author="ikelly" created="Fri, 23 Aug 2013 19:23:02 +0100"  >&lt;p&gt;Rakesh&apos;s patch only resolves the case where the OrderedSafeExecutor has been stopped before the request has been submitted. If the OrderedSafeExecutor is stopped after the request has submitted, but the request also submits to the executor, then the request callback will never get completed.&lt;/p&gt;

&lt;p&gt;For example, if you have an add request. The request is submitted to the executor fine, but then the executor is killed. The request goes to the server. Once if comes back, PerChannelBookieClient#messageReceived will get a RejectExecution when it tries to handle it, and your request is hung. I tried to build on Rakesh&apos;s patch originally, but there&apos;s a hell of a lot of cases of this, so I considered it cleaner to have a single point to cancelling callbacks.&lt;/p&gt;

&lt;p&gt;I&apos;m not particularly comfortable with this change either, with 4.2.2 so close. I do mean to do some performance tests next week before the release anyhow, so I will be keeping an eye on the memory usage of this patch at that stage (if it&apos;s in).&lt;/p&gt;</comment>
                            <comment id="13750958" author="rakeshr" created="Tue, 27 Aug 2013 05:54:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;Actually, the real problem here is that we don&apos;t keep track of the operations on a handle/client, and therefore cannot cancel them&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I could see PerChanelBookieClient is holding the outstanding requests and I&apos;m just thinking to re-use to do cancelling?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    ConcurrentHashMap&amp;lt;CompletionKey, AddCompletion&amp;gt; addCompletions = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;CompletionKey, AddCompletion&amp;gt;();
    ConcurrentHashMap&amp;lt;CompletionKey, ReadCompletion&amp;gt; readCompletions = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;CompletionKey, ReadCompletion&amp;gt;();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;Rakesh&apos;s patch only resolves the case where the OrderedSafeExecutor has been stopped before the request has been submitted. If the OrderedSafeExecutor is stopped after the request has submitted, but the request also submits to the executor, then the request callback will never get completed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Good catch. I had missed this case.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;For example, if you have an add request. The request is submitted to the executor fine, but then the executor is killed. The request goes to the server. Once if comes back, PerChannelBookieClient#messageReceived will get a RejectExecution when it tries to handle it, and your request is hung. I tried to build on Rakesh&apos;s patch originally, but there&apos;s a hell of a lot of cases of this, so I considered it cleaner to have a single point to cancelling callbacks.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I understood the idea of centralizing the callbacks using the wrappers. It would be good if we could avoid the increase of callback chains(Sijie&apos;s comment - &apos;extra referencing on callbacks&apos;). I&apos;ll try today with the other idea of cancel by using the PerChannelBookieClient&apos;s datastructures and wouldn&apos;t mind choosing the better one. What are your thoughts on this idea?&lt;/p&gt;
</comment>
                            <comment id="13751456" author="ikelly" created="Tue, 27 Aug 2013 18:10:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;I could see PerChanelBookieClient is holding the outstanding requests and I&apos;m just thinking to re-use to do cancelling?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These will not catch the case of a asyncClose request or a createLedger. Add completions and read completions are done for requests to an individual bookie. They are conceptually quite far from the actual client callbacks. Completion of these callbacks invoke code inside the bookkeeper client. Code that may have access to the OrderedSafeExecutor. So special handling needs to be put there to avoid this, so that it doesn&apos;t try to add to the executor to cancel the callback.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It would be good if we could avoid the increase of callback chains&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course, it would be better if you can do this without the extra objects. I&apos;m not sure it can be done cleanly though. Really we should never be passing the client callback past the client class (BookKeeper/LedgerHandle) at all. We should have a callback thread in the client, that all client callbacks run in, and the client internals should submit to this thread when the calls are finished. This is an even bigger change though, and there&apos;s no chance we&apos;re doing that before 4.2.2.&lt;/p&gt;</comment>
                            <comment id="13751468" author="hustlmsp" created="Tue, 27 Aug 2013 18:22:10 +0100"  >&lt;p&gt;I would suggest moving this ticket to 4.3.0 as it is not a trivial change as your comments.&lt;/p&gt;

&lt;p&gt;BTW, stepping back, do we really need to all the callbacks to be cancelled when bookkeeper client closed down? is there any user cases really need this? if not, I don&apos;t see any value to provide this to make things complicated. &lt;/p&gt;</comment>
                            <comment id="13751647" author="fpj" created="Tue, 27 Aug 2013 20:56:18 +0100"  >&lt;p&gt;I haven&apos;t looked at the patch, but I would say that we should error out outstanding requests and in fact I thought we were doing it. As for being able to execute other ledger operations, like opening another ledger or even creating a new one, I can go either way, although currently a bookkeeper object is not bound to any given ledger. I&apos;d rather not change the API to bind a bookkeeper object to a ledger, I don&apos;t see a strong reason to do it.&lt;/p&gt;</comment>
                            <comment id="13752044" author="hadoopqa" created="Wed, 28 Aug 2013 04:03:10 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12600320/0006-BOOKKEEPER-654.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0006-BOOKKEEPER-654.patch&lt;/a&gt; downloaded at Wed Aug 28 03:01:17 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; Patch failed to apply to head of branch&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;</comment>
                            <comment id="13752065" author="rakeshr" created="Wed, 28 Aug 2013 04:23:03 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikelly&quot; class=&quot;user-hover&quot; rel=&quot;ikelly&quot;&gt;Ivan Kelly&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;So special handling needs to be put there to avoid this, so that it doesn&apos;t try to add to the executor to cancel the callback.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, either should handle the RejectedException or provide &apos;public abstract void error(int errorCode)&apos; in SafeRunnable to error out the ClientClosedException.&lt;/p&gt;

&lt;p&gt;I&apos;ve uploaded latest patch to see the feasibility of this approach. Here I tried handling RejectedExceptions and cancelling the in_progress requests in PerChannelBookieClient.&lt;/p&gt;</comment>
                            <comment id="13752088" author="hadoopqa" created="Wed, 28 Aug 2013 05:19:35 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12600324/0006-BOOKKEEPER-654-handled-inprogress-and-newrequests.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0006-BOOKKEEPER-654-handled-inprogress-and-newrequests.patch&lt;/a&gt; downloaded at Wed Aug 28 03:51:38 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch seems to introduce 5 new Findbugs warning(s) in module(s) &lt;span class=&quot;error&quot;&gt;&amp;#91;bookkeeper-server&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 886&lt;br/&gt;
.    Tests failed: 1&lt;br/&gt;
.    Tests errors: 0&lt;/p&gt;

&lt;p&gt;.    The patch failed the following testcases:&lt;/p&gt;

&lt;p&gt;.      testAsyncBK2&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;(org.apache.bookkeeper.test.BookieFailureTest)&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/478/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/478/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13752261" author="ikelly" created="Wed, 28 Aug 2013 11:08:53 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I would suggest moving this ticket to 4.3.0 as it is not a trivial change as your comments.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I would agree. This is a fairly hefty change even in it&apos;s simplest form. Also, it&apos;s a change to catch bad user code. By deferring to 4.3.0, we won&apos;t break any current user code, it will merely continue to misbehave as it always has. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt; what&apos;s you&apos;re feeling on this, since you raised the issue.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;BTW, stepping back, do we really need to all the callbacks to be cancelled when bookkeeper client closed down? is there any user cases really need this? if not, I don&apos;t see any value to provide this to make things complicated.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think it&apos;s a good thing to notify the user when they&apos;ve done something stupid. Currently the code can just hang in this situation, so to a user it is unclear whether the bug is in their code or our code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I haven&apos;t looked at the patch, but I would say that we should error out outstanding requests and in fact I thought we were doing it. As for being able to execute other ledger operations, like opening another ledger or even creating a new one, I can go either way, although currently a bookkeeper object is not bound to any given ledger. I&apos;d rather not change the API to bind a bookkeeper object to a ledger, I don&apos;t see a strong reason to do it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We do error outstanding requests on a ledger handle in some cases, specifically when the add or read is in the completion key maps in PerChannelBookieClient. There&apos;s other cases, such as when there&apos;s an outstanding request to zk where this doesn&apos;t happen though.&lt;/p&gt;

&lt;p&gt;When a BookKeeper object is close, it should absolutely not be able create or open ledgers. I don&apos;t understand what you mean by an API change here. I haven&apos;t seen any API change proposed.&lt;/p&gt;</comment>
                            <comment id="13752272" author="ikelly" created="Wed, 28 Aug 2013 11:28:46 +0100"  >&lt;p&gt;My main issue with this is the pattern being used. The pattern is to try to call in executor, if fail, run in current thread context. Makes me very uncomfortable. What if the current context is the ZK callback, and the callback makes a synchronous zk call? Whats more, it&apos;s not just our code which has to be clean of such patterns. It&apos;s conceivable that a client could have a callback like &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class AddCallback {
    void addComplete(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rc, ...) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rc != BKException.Code.OK) {
            zk.setData(/* update some state about WAL */);
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
            ...
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the client in question has passed in a zk to the bookkeeper client, they now have a hung thread. Given that this JIRA is to try and protect users from themselves, we should be as comprehensive as we can. And since being comprehensive probably means big changes, I think it&apos;s better to do it in 4.3, and skip for 4.2.2. &lt;/p&gt;

&lt;p&gt;Minor comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;RunTimeException too broad&lt;/li&gt;
	&lt;li&gt;ClientClosedException should be used instead of BkClientClosedException everywhere.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13752343" author="rakeshr" created="Wed, 28 Aug 2013 13:29:12 +0100"  >&lt;p&gt;+1 moving to next version, as its not a blocking flow and would get some more time to give best way of handling the case. &lt;/p&gt;

&lt;p&gt;Basically the idea is to comply api contract, say if user would have written piece of code after closing the bkclient could cause confusions. J&lt;br/&gt;
ust wants to avoid such wrong usage patterns and gives clear notifications.&lt;/p&gt;</comment>
                            <comment id="13752355" author="fpj" created="Wed, 28 Aug 2013 13:50:32 +0100"  >&lt;blockquote&gt;&lt;p&gt;When a BookKeeper object is close, it should absolutely not be able create or open ledgers. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don&apos;t understand what you mean by an API change here. I haven&apos;t seen any API change proposed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My understanding of this proposal was that you wanted to invalidate the bookkeeper object once the ledger the object initially worked on closes. I realize now that this jira talks about BookKeeper#close and not LedgerHandler#close. If we close a ledger through LedgerHandle#close, then we are still able to perform ledger operations assuming a patch for this issue gets in, yes?&lt;/p&gt;</comment>
                            <comment id="13752381" author="ikelly" created="Wed, 28 Aug 2013 14:28:31 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; LedgerHandle#close only closes the ledger itself, in metadata. It doesn&apos;t really free any resources. BookKeeper#close closes all channels and shuts down the executor. Once the executor is dead, the client shouldn&apos;t be able to do anything.&lt;/p&gt;</comment>
                            <comment id="13753306" author="hustlmsp" created="Thu, 29 Aug 2013 06:08:27 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;ve uploaded latest patch to see the feasibility of this approach. Here I tried handling RejectedExceptions and cancelling the in_progress requests in PerChannelBookieClient.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;for the new patch, it would be better to provide a wrapper of the concurrent map used to maintain pending requests, which fails following adds after it is closed, instead of adding channel==null checking everywhere. Also, channel==null doesn&apos;t mean client is closed. &lt;/p&gt;

&lt;p&gt;you could refer &lt;a href=&quot;https://github.com/apache/bookkeeper/blob/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/bookkeeper/blob/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java&lt;/a&gt; as the example for the wrapper.&lt;/p&gt;</comment>
                            <comment id="13753330" author="hustlmsp" created="Thu, 29 Aug 2013 06:41:49 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I think it&apos;s a good thing to notify the user when they&apos;ve done something stupid. Currently the code can just hang in this situation, so to a user it is unclear whether the bug is in their code or our code.&lt;/p&gt;&lt;/blockquote&gt;


&lt;p&gt;if we want to avoid something weird, we should also catch all exceptions thrown when submitting tasks to a closed scheduler. otherwise, any uncaught runtime exception would fail the process, except the application registered uncaught exception handler. I don&apos;t see a clean way to do that, even you have a mapping to maintain all the callback things.&lt;/p&gt;

&lt;p&gt;so here is the thing: &lt;/p&gt;

&lt;p&gt;if the application uses async methods, does it matter if it doesn&apos;t receive a specific callback when it closed the bookkeeper handle? since the async way would not block anything.&lt;/p&gt;

&lt;p&gt;if the application uses sync methods, a clean change is to change SyncCounter to use time wait, when timeout, it checked if the client is closed, if it is closed, fail the sync call, if it is not closed, then wait.&lt;/p&gt;

&lt;p&gt;since this is not a critical part, I would prefer a simple way to handle it rather than involving too much code changes.&lt;/p&gt;

&lt;p&gt;Besides, I would like to see how zookeeper handle this kind of situation before we moved on, as we are kind of relying on zookeeper callbacks. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; do you know how zookeeper handles the async &amp;amp; sync methods when zookeeper client is closed?&lt;/p&gt;




</comment>
                            <comment id="13753402" author="rakeshr" created="Thu, 29 Aug 2013 08:44:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;Besides, I would like to see how zookeeper handle this kind of situation before we moved on, as we are kind of relying on zookeeper callbacks. Flavio Junqueira do you know how zookeeper handles the async &amp;amp; sync methods when zookeeper client is closed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In Zk, as per my knowledge, this case is handled at the ClientCnx level. When the ClientCnxn closes, after the successful closure, it would see client exceptions and iterates over all the &apos;outgoingQueue&apos; and &apos;pendingQueue&apos;, then notifies the clients about the zookeeper client connection closure.&lt;/p&gt;</comment>
                            <comment id="13783650" author="hustlmsp" created="Wed, 2 Oct 2013 05:58:12 +0100"  >&lt;p&gt;cancel the patch until we reached an agreement on the solution.&lt;/p&gt;</comment>
                            <comment id="13795238" author="rakeshr" created="Tue, 15 Oct 2013 15:39:09 +0100"  >&lt;p&gt;I couldn&apos;t see another approach now, to handle the outstanding requests presents in PerChannelBookieClient when closing the client. In this case with my approach, client misses callback notification and would hangs forever. IMO, like &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikelly&quot; class=&quot;user-hover&quot; rel=&quot;ikelly&quot;&gt;Ivan Kelly&lt;/a&gt; suggested, client should have a callback repository at the top layer.&lt;/p&gt;</comment>
                            <comment id="13818545" author="hustlmsp" created="Sun, 10 Nov 2013 20:55:33 +0000"  >&lt;p&gt;I think the root cause of this close sequence of bookkeeper:&lt;/p&gt;

&lt;p&gt;the correct close sequence should be:&lt;/p&gt;

&lt;p&gt;1) close the bookie client to error out all pending bookie requests, and after bookie client is close, all following request would be rejected.&lt;br/&gt;
2) close the ledger manager which erred out all pending all metadata requests, and after ledger manager is close, all metadata request would be rejected.&lt;br/&gt;
3) close scheduler.&lt;/p&gt;

&lt;p&gt;attach a patch following this sequence.&lt;/p&gt;</comment>
                            <comment id="13818555" author="hadoopqa" created="Sun, 10 Nov 2013 21:39:11 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12613062/BOOKKEEPER-654.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-654.diff&lt;/a&gt; downloaded at Sun Nov 10 21:10:53 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch seems to introduce 1 new RAT warning(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 892&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/538/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/538/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13880475" author="fpj" created="Thu, 23 Jan 2014 22:50:35 +0000"  >&lt;p&gt;In ZK, once the session is closed, pending operations get a session expired. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;, in your close sequence, do pending operations get notified? I&apos;m checking the patch in any case.  &lt;/p&gt;</comment>
                            <comment id="13880481" author="fpj" created="Thu, 23 Jan 2014 22:55:47 +0000"  >&lt;p&gt;Latest patch from Nov 2013 is stale, btw. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13880804" author="hustlmsp" created="Fri, 24 Jan 2014 08:22:41 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; rebased the change to latest trunk. And yes, the change here is to make pending operations get notified when client is closed.&lt;/p&gt;</comment>
                            <comment id="13880846" author="hustlmsp" created="Fri, 24 Jan 2014 09:27:35 +0000"  >&lt;p&gt;attach a new patch with missing license header.&lt;/p&gt;</comment>
                            <comment id="13881068" author="fpj" created="Fri, 24 Jan 2014 15:53:30 +0000"  >&lt;p&gt;the patch looks good overal. there are two main things I can spot here:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;creating a ClientClosedException so that we can error out operations once the client is closed&lt;/li&gt;
	&lt;li&gt;adding CleanupLedgerManager to reject new metadata operations once the client is closed&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;other than that, there a number of smaller changes to make it work. I was wondering if you&apos;d mind posting the patch to the review board so that I could make specific comments more easily. so far I haven&apos;t spotted any major issue.&lt;/p&gt;</comment>
                            <comment id="13881739" author="hadoopqa" created="Sat, 25 Jan 2014 07:37:55 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12625018/BOOKKEEPER-654.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-654.diff&lt;/a&gt; downloaded at Sat Jan 25 07:10:12 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 902&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/566/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/566/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13881744" author="hustlmsp" created="Sat, 25 Jan 2014 08:01:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; yes, the patch is as you described. created review: &lt;a href=&quot;https://reviews.apache.org/r/17352/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/17352/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13887334" author="fpj" created="Fri, 31 Jan 2014 01:04:14 +0000"  >&lt;p&gt;Canceling the patch until we reach agreement, see comments in the review board. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikelly&quot; class=&quot;user-hover&quot; rel=&quot;ikelly&quot;&gt;Ivan Kelly&lt;/a&gt;, it would be great if you could say more concretely how you&apos;d like to see this handled so that we can make progress.&lt;/p&gt;</comment>
                            <comment id="13888845" author="hustlmsp" created="Sun, 2 Feb 2014 06:35:49 +0000"  >&lt;p&gt;attach latest patch to catching RejectedExecutionException instead of catching RuntimeException.&lt;/p&gt;</comment>
                            <comment id="13888846" author="hustlmsp" created="Sun, 2 Feb 2014 06:36:38 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; add a separate ticket for your requirement&lt;/p&gt;</comment>
                            <comment id="13888855" author="hadoopqa" created="Sun, 2 Feb 2014 07:23:02 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12626512/BOOKKEEPER-654.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-654.diff&lt;/a&gt; downloaded at Sun Feb  2 06:54:50 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch seems to introduce 1 new RAT warning(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 902&lt;br/&gt;
.    Tests failed: 0&lt;br/&gt;
.    Tests errors: 1&lt;/p&gt;

&lt;p&gt;.    The patch failed the following testcases:&lt;/p&gt;

&lt;p&gt;.      &lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/571/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/571/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13890588" author="hadoopqa" created="Tue, 4 Feb 2014 11:42:07 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12626850/BOOKKEEPER-654.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-654.diff&lt;/a&gt; downloaded at Tue Feb  4 11:13:59 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch seems to introduce 1 new RAT warning(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 902&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/576/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/576/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13890874" author="ikelly" created="Tue, 4 Feb 2014 17:25:33 +0000"  >&lt;p&gt;I have one comment on the latest patch (duplicate functionallity in PCBC), but otherwise this can go in. &lt;/p&gt;</comment>
                            <comment id="13890940" author="ikelly" created="Tue, 4 Feb 2014 18:06:42 +0000"  >&lt;p&gt;comment is in reviewboard btw&lt;/p&gt;</comment>
                            <comment id="13896258" author="hustlmsp" created="Mon, 10 Feb 2014 06:23:55 +0000"  >&lt;p&gt;attach a patch to remove closed flag as Ivan&apos;s comment.&lt;/p&gt;</comment>
                            <comment id="13896270" author="hadoopqa" created="Mon, 10 Feb 2014 07:01:54 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12627929/BOOKKEEPER-654.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-654.diff&lt;/a&gt; downloaded at Mon Feb 10 06:33:43 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 1 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 902&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/586/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/586/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13908583" author="ikelly" created="Fri, 21 Feb 2014 18:01:50 +0000"  >&lt;p&gt;Committed r1570647. Thanks Sijie.&lt;/p&gt;</comment>
                            <comment id="13908652" author="hudson" created="Fri, 21 Feb 2014 18:42:39 +0000"  >&lt;p&gt;FAILURE: Integrated in bookkeeper-trunk #559 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/559/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/559/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-654&quot; title=&quot;Bookkeeper client operations are allowed even after its closure, bk#close()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-654&quot;&gt;&lt;del&gt;BOOKKEEPER-654&lt;/del&gt;&lt;/a&gt;: Bookkeeper client operations are allowed even after its closure, bk#close() (sijie via ivank) (ivank: rev 1570647)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12692697">BOOKKEEPER-723</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12599649" name="0001-BOOKKEEPER-654-Bookkeeper-client-operations-are-allo.patch" size="66809" author="ikelly" created="Fri, 23 Aug 2013 17:14:14 +0100"/>
                            <attachment id="12593396" name="0001-BOOKKEEPER-654-testcase-to-understand-more.patch" size="1869" author="rakeshr" created="Sun, 21 Jul 2013 10:11:26 +0100"/>
                            <attachment id="12593540" name="0002-BOOKKEEPER-654.patch" size="25485" author="rakeshr" created="Mon, 22 Jul 2013 17:23:46 +0100"/>
                            <attachment id="12594000" name="0003-BOOKKEEPER-654.patch" size="29083" author="rakeshr" created="Wed, 24 Jul 2013 20:05:34 +0100"/>
                            <attachment id="12596186" name="0004-BOOKKEEPER-654.patch" size="28953" author="rakeshr" created="Mon, 5 Aug 2013 19:57:57 +0100"/>
                            <attachment id="12598168" name="0005-BOOKKEEPER-654.patch" size="30053" author="rakeshr" created="Thu, 15 Aug 2013 08:55:37 +0100"/>
                            <attachment id="12600324" name="0006-BOOKKEEPER-654-handled-inprogress-and-newrequests.patch" size="56900" author="rakeshr" created="Wed, 28 Aug 2013 04:41:50 +0100"/>
                            <attachment id="12627929" name="BOOKKEEPER-654.diff" size="90735" author="hustlmsp" created="Mon, 10 Feb 2014 06:23:55 +0000"/>
                            <attachment id="12626850" name="BOOKKEEPER-654.diff" size="91353" author="hustlmsp" created="Tue, 4 Feb 2014 09:08:20 +0000"/>
                            <attachment id="12626512" name="BOOKKEEPER-654.diff" size="80906" author="hustlmsp" created="Sun, 2 Feb 2014 06:35:49 +0000"/>
                            <attachment id="12625018" name="BOOKKEEPER-654.diff" size="78657" author="hustlmsp" created="Fri, 24 Jan 2014 09:27:35 +0000"/>
                            <attachment id="12625010" name="BOOKKEEPER-654.diff" size="77833" author="hustlmsp" created="Fri, 24 Jan 2014 08:22:41 +0000"/>
                            <attachment id="12613062" name="BOOKKEEPER-654.diff" size="101697" author="hustlmsp" created="Sun, 10 Nov 2013 20:48:07 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 22 Jul 2013 17:08:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>339138</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzgc5z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>339458</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>