<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:29:21 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-327/BOOKKEEPER-327.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-327] System.currentTimeMillis usage in BookKeeper</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-327</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;The following exception occured in the bookie statistics logic due to the System time changes. In our bookie cluster its running a periodic syncup scripts just to unify the SystemTime in all the machines. This is causing the problem and resulting ArrayIndexOutOfBoundException.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Exception in thread &lt;span class=&quot;code-quote&quot;&gt;&quot;BookieJournal-3181&quot;&lt;/span&gt; java.lang.ArrayIndexOutOfBoundsException: -423
at org.apache.bookkeeper.proto.BKStats$OpStats.updateLatency(BKStats.java:126)
at org.apache.bookkeeper.proto.BookieServer.writeComplete(BookieServer.java:655)
at org.apache.bookkeeper.bookie.Journal.run(Journal.java:507)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This jira is raised to discuss whether to use &lt;cite&gt;System.nanoTime()&lt;/cite&gt; instead of &lt;cite&gt;System.currentTimeMillis()&lt;/cite&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12597624">BOOKKEEPER-327</key>
            <summary>System.currentTimeMillis usage in BookKeeper</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="umamaheswararao">Uma Maheswara Rao G</assignee>
                                    <reporter username="rakeshr">Rakesh R</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Jul 2012 19:04:20 +0100</created>
                <updated>Wed, 13 Feb 2013 15:46:59 +0000</updated>
                            <resolved>Tue, 24 Jul 2012 18:03:58 +0100</resolved>
                                    <version>4.0.0</version>
                    <version>4.1.0</version>
                                    <fixVersion>4.2.0</fixVersion>
                    <fixVersion>4.1.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13407451" author="umamaheswararao" created="Thu, 5 Jul 2012 21:22:43 +0100"  >&lt;p&gt;@Rakesh, can you please set the effect versions field?&lt;/p&gt;

&lt;p&gt;Since this JIRA raised for System.currentTimeMillis() discussion, I have changed currentMillis to nanoTime in BKServer code.&lt;br/&gt;
This particular changes we have done in Hadoop also. So, the above patch should work with the systems where monotonicness supports.&lt;/p&gt;

&lt;p&gt;But seeing the trace you have given looks to be different than this problem.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void updateLatency(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; latency) {
            totalLatency += latency;
            ++numSuccessOps;
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt; minLatency) {
                minLatency = latency;
            }
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;gt; maxLatency) {
                maxLatency = latency;
            }
            &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; bucket;
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt;= 100) { &lt;span class=&quot;code-comment&quot;&gt;// less than 100ms
&lt;/span&gt;                bucket = (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)(latency / 10);
            } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt;= 1000) { &lt;span class=&quot;code-comment&quot;&gt;// 100ms ~ 1000ms
&lt;/span&gt;                bucket = 1 * 9 + (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)(latency / 100);
            } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt;= 10000) { &lt;span class=&quot;code-comment&quot;&gt;// 1s ~ 10s
&lt;/span&gt;                bucket = 2 * 9 + (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)(latency / 1000);
            } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;code-comment&quot;&gt;// more than 10s
&lt;/span&gt;                bucket = 3 * 9 + 1;
            }
            ++latencyBuckets[bucket];
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;trace shows the last line. I don&apos;t see system time here.&lt;/p&gt;</comment>
                            <comment id="13407652" author="hustlmsp" created="Fri, 6 Jul 2012 02:46:34 +0100"  >&lt;p&gt;ah, I got the reason why it throws ArrayIndexOutOfBoundsException. seems that the latency becomes negative due to SystemTime changed. we need check latency when updateLatency. I think the fix is quite simple.&lt;/p&gt;</comment>
                            <comment id="13407662" author="umamaheswararao" created="Fri, 6 Jul 2012 03:38:44 +0100"  >&lt;p&gt;Oops, I missed it. elapsed time passed with &lt;/p&gt;

&lt;p&gt;long elapsedTime = System.currentTimeMillis() - startTime;&lt;br/&gt;
bkStats.getOpStats(BKStats.STATS_ADD).updateLatency(elapsedTime);&lt;/p&gt;

&lt;p&gt;etc.&lt;/p&gt;

&lt;p&gt;@Sijie, you mean you are proposing to check negative value while passing? shall we keep the currentTimeMillis to nanoTime above?&lt;/p&gt;

&lt;p&gt;or how about, checking for negative latency value, if it is negative value, that is for sure system time change, we can warn saying &quot;System time might have changed, the calculated latency will not be correct/accurate one&apos;. &lt;br/&gt;
then fall into the below category by setting latency to 0 ? But while calculating averageLatency, it will mess up. It will produce almost wrong values about avgLatency.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt;= 100) { &lt;span class=&quot;code-comment&quot;&gt;// less than 100ms
&lt;/span&gt;                bucket = (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)(latency / 10);
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13408648" author="umamaheswararao" created="Sat, 7 Jul 2012 13:14:58 +0100"  >&lt;p&gt;Update:&lt;/p&gt;

&lt;p&gt;We have seen again this issue. I am not sure about 1st occurance. &lt;br/&gt;
But with NanoTime we have seen this negative value in one of our BK cluster.&lt;/p&gt;

&lt;p&gt;We have just ran one small sample test with this elapsed time calculation.&lt;/p&gt;

&lt;p&gt;Elapsed Time: -4294965969&lt;br/&gt;
Elapsed Time: -4287444203&lt;br/&gt;
Elapsed Time: -4287387003&lt;br/&gt;
Elapsed Time: -4286339034&lt;br/&gt;
Elapsed Time: -4287371149&lt;br/&gt;
Elapsed Time: -4287349218&lt;br/&gt;
Elapsed Time: -4287274419&lt;/p&gt;


&lt;p&gt;We have 8 CPU machine running BK cluster and many other processes running on it.&lt;/p&gt;

&lt;p&gt;Also I have seen some posts abaout the similar experience.&lt;br/&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/510462/is-system-nanotime-completely-useless&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/510462/is-system-nanotime-completely-useless&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;System.currentMillis also gav backwards it seems run &apos;backwards&apos;, in the absence of clock adjustments.&lt;/p&gt;

&lt;p&gt;Finally it turns out to me that, we should not depend on this time where we are doing some sensitive operations. There should be a recovery even it went wrong in time diff value slightly.&lt;/p&gt;

&lt;p&gt;What I am thinking here is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt; 0) { &lt;span class=&quot;code-comment&quot;&gt;// less than 0ms . Ideally &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; should not
&lt;/span&gt;                &lt;span class=&quot;code-comment&quot;&gt;// happen. We have seen &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; latency negative in
&lt;/span&gt;                &lt;span class=&quot;code-comment&quot;&gt;// some cases.
&lt;/span&gt;                LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Latency time coming negative&quot;&lt;/span&gt;);
                bucket = 0;
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we will reserve 0th bucket for this kind of values which are coming with negative latency.&lt;/p&gt;

&lt;p&gt;From 1 + (int) (latency / 10); --&amp;gt; 1 * 9 + (int) (latency / 100); can be for less than 100ms latency metrics.&lt;/p&gt;

&lt;p&gt;Can you check the impact with this proposal, as I did not try Statistics till now in any of our clusters. temporarily I have disabled statistics in our cluster till this issue solved.&lt;/p&gt;</comment>
                            <comment id="13408671" author="umamaheswararao" created="Sat, 7 Jul 2012 14:35:26 +0100"  >&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2978598/will-sytem-currenttimemillis-always-return-a-value-previous-calls&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/2978598/will-sytem-currenttimemillis-always-return-a-value-previous-calls&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13408846" author="hustlmsp" created="Sun, 8 Jul 2012 05:51:34 +0100"  >&lt;p&gt;@Uma, yes. we need to negative checking for latency. but I don&apos;t think we need to reserve bucket for negative latency, because it doesn&apos;t help on calculating totalLatency and avgLatency. inorder to keep consistency between numSuccessOps and buckets, so I think the changes could be just outputting error message.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void updateLatency(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; latency) {

            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt; 0) { &lt;span class=&quot;code-comment&quot;&gt;// less than 0ms . Ideally &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; should not
&lt;/span&gt;                &lt;span class=&quot;code-comment&quot;&gt;// happen. We have seen &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; latency negative in
&lt;/span&gt;                &lt;span class=&quot;code-comment&quot;&gt;// some cases.
&lt;/span&gt;                LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Latency time coming negative&quot;&lt;/span&gt;);
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
            }

            totalLatency += latency;
            ++numSuccessOps;
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt; minLatency) {
                minLatency = latency;
            }
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;gt; maxLatency) {
                maxLatency = latency;
            }
            &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; bucket;
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt;= 100) { &lt;span class=&quot;code-comment&quot;&gt;// less than 100ms
&lt;/span&gt;                bucket = (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)(latency / 10);
            } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt;= 1000) { &lt;span class=&quot;code-comment&quot;&gt;// 100ms ~ 1000ms
&lt;/span&gt;                bucket = 1 * 9 + (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)(latency / 100);
            } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (latency &amp;lt;= 10000) { &lt;span class=&quot;code-comment&quot;&gt;// 1s ~ 10s
&lt;/span&gt;                bucket = 2 * 9 + (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)(latency / 1000);
            } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;code-comment&quot;&gt;// more than 10s
&lt;/span&gt;                bucket = 3 * 9 + 1;
            }
            ++latencyBuckets[bucket];
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; for nanoTime&lt;/p&gt;

&lt;p&gt;+1 for the changes on nanoTime.&lt;/p&gt;</comment>
                            <comment id="13408851" author="umamaheswararao" created="Sun, 8 Jul 2012 06:37:21 +0100"  >&lt;p&gt;Thanks a lot, Sijie for taking a look.&lt;/p&gt;

&lt;p&gt;I also convened with you about negative check. Because that is the case where it should not happen, Just logged the warn.&lt;br/&gt;
Why I was thinking to reserve one bucket is, if some wants to check whether there are many such cases are there or not. But thinking again, this is an unexpected case and may not occur regularly, so that bucket will not utilized and also may not help to the user. Warn message can help in that case.&lt;/p&gt;

&lt;p&gt;Updated the patch. Could you please take a look.&lt;/p&gt;
</comment>
                            <comment id="13409124" author="hustlmsp" created="Mon, 9 Jul 2012 03:04:03 +0100"  >&lt;p&gt;@Uma, thanks for the new patch.&lt;/p&gt;

&lt;p&gt;It looks good for me. just one line in BKStats. I think you copied and pasted it from LocalBookKeeper. It would be better to change it to BKStats and remove the import of LocalBookKeeper.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Logger LOG = LoggerFactory.getLogger(LocalBookKeeper.class);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13409143" author="umamaheswararao" created="Mon, 9 Jul 2012 04:03:31 +0100"  >&lt;p&gt;Oops, my mistake...sorry Sijie, somehow forgot to change that, after copy.&lt;br/&gt;
I have just removed LocalBooKeeper reference.&lt;/p&gt;

&lt;p&gt;Thanks a lot for the review Sijie.&lt;/p&gt;</comment>
                            <comment id="13409203" author="rakeshr" created="Mon, 9 Jul 2012 07:04:25 +0100"  >&lt;p&gt;Just one comment. &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.nanoTime() / NANOSECONDS_PER_MILLISECOND;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Its good to use the &apos;java.util.concurrent.TimeUnit&apos; for the nanos to millis conversion&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;TimeUnit.NANOSECONDS.toMillis(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.nanoTime())&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="13409223" author="umamaheswararao" created="Mon, 9 Jul 2012 07:46:20 +0100"  >&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; /**
     * Equivalent to &amp;lt;tt&amp;gt;NANOSECONDS.convert(duration, this)&amp;lt;/tt&amp;gt;.
     * @param duration the duration
     * @return the converted duration,
     * or &amp;lt;tt&amp;gt;Long.MIN_VALUE&amp;lt;/tt&amp;gt; if conversion would negatively
     * overflow, or &amp;lt;tt&amp;gt;Long.MAX_VALUE&amp;lt;/tt&amp;gt; if it would positively overflow.
     * @see #convert
     */
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here it will automatically conevrting on overflow the values and returning Long.MAX_VALUES or MIN_VALUE respectively.&lt;/p&gt;

&lt;p&gt;Here in latency we want to ignore on such nagative cases. Also it present in concurrent package. I feel, its ok for this small math operation in MathUtils.java.&lt;/p&gt;</comment>
                            <comment id="13409292" author="rakeshr" created="Mon, 9 Jul 2012 10:43:53 +0100"  >&lt;p&gt;Hi Uma, BTW patch looks good. Its just a suggestion only and there is no functional issue.&lt;/p&gt;</comment>
                            <comment id="13409293" author="umamaheswararao" created="Mon, 9 Jul 2012 10:49:41 +0100"  >&lt;p&gt;@Rakesh, If you feel strognly, I can change it.&lt;/p&gt;</comment>
                            <comment id="13409295" author="rakeshr" created="Mon, 9 Jul 2012 10:50:56 +0100"  >&lt;p&gt;+1 patch looks good me.&lt;/p&gt;</comment>
                            <comment id="13409477" author="hustlmsp" created="Mon, 9 Jul 2012 14:57:59 +0100"  >&lt;p&gt;+1 new patch looks good to me.&lt;/p&gt;</comment>
                            <comment id="13414654" author="hustlmsp" created="Sun, 15 Jul 2012 16:02:36 +0100"  >&lt;p&gt;seems the patch is ready to go. could anyone take a look at it? if there is no concern, I would like to let it in.&lt;/p&gt;</comment>
                            <comment id="13414782" author="fpj" created="Sun, 15 Jul 2012 22:40:20 +0100"  >&lt;p&gt;It looks good to me, I just have one comment. monotonicNow() seems to be relying on System.nanoTime() to return values that monotonically increase. To make it really monotonic despite non-monotonic implementations of System.nanoTime(), perhaps we should save the last returned value and return the last saved in the case that the value System.nanoTime() evaluates to a smaller value compared to any value it has returned before. In general, I just think it is a good idea to make sure that monotonicNow() returns monotonically increasing values.&lt;/p&gt;</comment>
                            <comment id="13414845" author="umamaheswararao" created="Mon, 16 Jul 2012 05:44:04 +0100"  >&lt;p&gt;Thanks a lot , Flavio for the comments.&lt;br/&gt;
I will take a look on it today in some time.&lt;/p&gt;</comment>
                            <comment id="13414881" author="umamaheswararao" created="Mon, 16 Jul 2012 07:50:42 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; monotonicNow() {
        &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; currentNanoTime = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.nanoTime();
        
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (currentNanoTime &amp;lt; previousNanoTime) {
            currentNanoTime = previousNanoTime;
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
            previousNanoTime = currentNanoTime;
        }
        
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; currentNanoTime / NANOSECONDS_PER_MILLISECOND;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I hope your suggetsion is like above.&lt;br/&gt;
Here I need to add synchronization to acheive the correct results out of it right.( please correct me if I unserstood your sugestion wrongly)&lt;br/&gt;
So, I am worried here, whether that will create any overhead on read/writes as they will get called in that flows as well.&lt;/p&gt;

&lt;p&gt;Alternatively I thought of ThreadLocal, but that also may not work as we are spawning many childthreads in the single read/write flow. If we have any comparision from parent thread and child thread generated value may have diff values in that case. So, I am not preferring this approach.&lt;/p&gt;


&lt;p&gt;Also we don&apos;t have any the Atomic* API&apos;s for greater/lesser values comparion setters.&lt;/p&gt;

&lt;p&gt;What is your opinion on adding synchronizations to that block?&lt;br/&gt;
Alternatively do you any Idea running in your mind?&lt;/p&gt;

&lt;p&gt;Thanks a lot,&lt;/p&gt;

&lt;p&gt;Uma&lt;/p&gt;</comment>
                            <comment id="13415051" author="fpj" created="Mon, 16 Jul 2012 13:21:09 +0100"  >&lt;p&gt;Agreed, we need to perform the operation atomically, and the skeleton you present is pretty much what I had in mind. &lt;/p&gt;

&lt;p&gt;My perception is that the synchronized block would be short and simple, so the performance overhead should be minimal, but frankly I&apos;m not sure. &lt;/p&gt;

&lt;p&gt;If you&apos;re worried about the overhead, which I believe is justifiable, perhaps we could simply rename the method since in my understanding it is not guaranteed to return monotonically increasing values.&lt;/p&gt;</comment>
                            <comment id="13415058" author="hustlmsp" created="Mon, 16 Jul 2012 13:31:10 +0100"  >&lt;p&gt;making it monotonic base on non-monotonic method would introduce overhead. I&apos;d prefer keeping it as simple as possible since it is a utility function would be used very frequently. as Flavio mentioned, in order to not make user confused, it would be better to use other name.&lt;/p&gt;</comment>
                            <comment id="13415537" author="umamaheswararao" created="Mon, 16 Jul 2012 20:10:26 +0100"  >&lt;p&gt;Thanks a lot for the comments.&lt;br/&gt;
Now changed the monitonicNow method name to just &apos;now&apos;. This represents just the current time and using internally System.nanoTime.&lt;/p&gt;</comment>
                            <comment id="13416017" author="hustlmsp" created="Tue, 17 Jul 2012 09:49:06 +0100"  >&lt;p&gt;thanks Uma for updating. +1 for new patch.&lt;/p&gt;</comment>
                            <comment id="13420981" author="fpj" created="Mon, 23 Jul 2012 22:40:12 +0100"  >&lt;p&gt;+1, thanks a lot, Uma! Committed revision 1364808.&lt;/p&gt;</comment>
                            <comment id="13420982" author="fpj" created="Mon, 23 Jul 2012 22:47:39 +0100"  >&lt;p&gt;This issue is marked for 4.0.0, but the patch doesn&apos;t apply to the 4.0 branch. Uma, Do you want to produce a patch for the 4.0 branch? Let me also point out that we don&apos;t have a bug fix release schedule for the 4.0 branch, but we could still check this one in the case we have one eventually.&lt;/p&gt;
</comment>
                            <comment id="13420994" author="hudson" created="Mon, 23 Jul 2012 23:16:45 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #617 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/617/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/617/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-327&quot; title=&quot;System.currentTimeMillis usage in BookKeeper&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-327&quot;&gt;&lt;del&gt;BOOKKEEPER-327&lt;/del&gt;&lt;/a&gt;: System.currentTimeMillis usage in BookKeeper (uma via fpj) (Revision 1364808)&lt;/p&gt;

&lt;p&gt;     Result = ABORTED&lt;br/&gt;
fpj : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13421461" author="umamaheswararao" created="Tue, 24 Jul 2012 15:54:37 +0100"  >&lt;p&gt;Thanks a lot, Flavio.&lt;/p&gt;

&lt;p&gt;IMO, this is not required in 4.0.0 as we did not decide to release any point release on that yet.&lt;br/&gt;
If any one expecting this to go into 4.0.0, I would be happy to create a patch on 4.0.0 as well.&lt;/p&gt;

&lt;p&gt;Otherwise we can mark it as closed.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Uma&lt;/p&gt;
</comment>
                            <comment id="13421540" author="fpj" created="Tue, 24 Jul 2012 18:03:58 +0100"  >&lt;p&gt;I have also committed to branch 4.1. Committed revision 1365171.&lt;/p&gt;</comment>
                            <comment id="13422011" author="umamaheswararao" created="Wed, 25 Jul 2012 06:22:44 +0100"  >&lt;p&gt;Thanks a lot, Flavio for 4.1 patch. Also thanks for resolving it.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12597985">BOOKKEEPER-330</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12535610" name="BOOKKEEPER-327-1.patch" size="21374" author="umamaheswararao" created="Mon, 9 Jul 2012 04:00:30 +0100"/>
                            <attachment id="12536695" name="BOOKKEEPER-327-2.patch" size="21429" author="umamaheswararao" created="Mon, 16 Jul 2012 20:10:26 +0100"/>
                            <attachment id="12537752" name="BOOKKEEPER-327-Branch4.1.patch" size="20876" author="fpj" created="Tue, 24 Jul 2012 22:18:28 +0100"/>
                            <attachment id="12535557" name="BOOKKEEPER-327.patch" size="21434" author="umamaheswararao" created="Sun, 8 Jul 2012 06:30:32 +0100"/>
                            <attachment id="12535253" name="BOOKKEEPER-327.patch" size="17936" author="umamaheswararao" created="Thu, 5 Jul 2012 21:16:02 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 Jul 2012 20:22:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>293570</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyn6x3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>169308</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>