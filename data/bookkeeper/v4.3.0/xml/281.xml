<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:31:45 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-281/BOOKKEEPER-281.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-281] BKClient is failing when zkclient connection delays</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-281</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;I have started the ZK cluster and when tries to create a BookKeeper client from my application, it is throwing following ZooKeeper ConnectionLossException and is exitting.&lt;/p&gt;



&lt;p&gt;12/06/01 11:44:31 WARN client.ZooKeeperSaslClient: SecurityException: java.lang.SecurityException: Unable to locate a login configuration occurred when trying to find JAAS configuration.&lt;br/&gt;
12/06/01 11:44:31 INFO client.ZooKeeperSaslClient: Client will not SASL-authenticate because the default JAAS configuration section &apos;Client&apos; could not be found. If you are not using SASL, you may ignore this. On the other hand, if you expected SASL to work, please fix your JAAS configuration.&lt;br/&gt;
12/06/01 11:44:31 INFO zookeeper.ClientCnxn: Client session timed out, have not heard from server in 4540ms for sessionid 0x0, closing socket connection and attempting reconnect&lt;br/&gt;
12/06/01 11:44:32 INFO zookeeper.ClientCnxn: Opening socket connection to server /10.18.40.91:2182&lt;br/&gt;
Exception in thread &quot;main&quot; org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss&lt;br/&gt;
       at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)&lt;br/&gt;
       at org.apache.bookkeeper.client.BookieWatcher.readBookiesBlocking(BookieWatcher.java:151)&lt;br/&gt;
       at org.apache.bookkeeper.client.BookKeeper.&amp;lt;init&amp;gt;(BookKeeper.java:139)&lt;br/&gt;
       at BKClient1.main(BKClient1.java:40)&lt;br/&gt;
12/06/01 11:44:36 WARN client.ZooKeeperSaslClient: SecurityException: java.lang.SecurityException: Unable to locate a login configuration occurred when trying to find JAAS configuration.&lt;/p&gt;



&lt;p&gt;When analyzed more, the root cause is:&lt;/p&gt;

&lt;p&gt;BookKeeper.java:&lt;br/&gt;
--------------------&lt;br/&gt;
In the constructor of BookKeeper, immediately after creating the ZK client , it is going to bookieWatcher.readBookiesBlocking() for available bookies from ZK server before reaching SyncConnected event.&lt;/p&gt;

&lt;p&gt;I think, we would properly use the existing countdown latch and wait till ZooKeeper client connection establishment before continue reading Bookies.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12558934">BOOKKEEPER-281</key>
            <summary>BKClient is failing when zkclient connection delays</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ikelly">Ivan Kelly</assignee>
                                    <reporter username="ikelly">Ivan Kelly</reporter>
                        <labels>
                    </labels>
                <created>Fri, 1 Jun 2012 10:41:50 +0100</created>
                <updated>Mon, 14 Jan 2013 16:12:57 +0000</updated>
                            <resolved>Tue, 5 Jun 2012 07:22:17 +0100</resolved>
                                                    <fixVersion>4.1.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13287327" author="ikelly" created="Fri, 1 Jun 2012 12:10:25 +0100"  >&lt;p&gt;Patch defers initialization of any zk dependent part until after sync connected has been received.&lt;/p&gt;

&lt;p&gt;test included&lt;/p&gt;</comment>
                            <comment id="13287328" author="ikelly" created="Fri, 1 Jun 2012 12:10:45 +0100"  >&lt;p&gt;ignore, fails a test.&lt;/p&gt;</comment>
                            <comment id="13287527" author="ikelly" created="Fri, 1 Jun 2012 17:46:31 +0100"  >&lt;p&gt;Tests pass cleanly now. &lt;/p&gt;</comment>
                            <comment id="13287811" author="hustlmsp" created="Sat, 2 Jun 2012 01:44:27 +0100"  >&lt;p&gt;Thanks Ivan. the patch seems good. but I had two questions need your clarification.&lt;/p&gt;

&lt;p&gt;1)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-        &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep((baseClientConf.getReadTimeout()*2)*1000);
+        &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep((baseClientConf.getReadTimeout()*3)*1000);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;why you change it from 2 to 3?&lt;/p&gt;


&lt;p&gt;2)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        bookieWatcher = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BookieWatcher(conf, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
+        
+        &lt;span class=&quot;code-comment&quot;&gt;// assume that a passed in zk is already connected
&lt;/span&gt;+        bootstrapWithZK();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in BookKeeper constructor with passed zk instance, you assumed that the passed zk instance is already connected. By in BookKeeperAdmin, the passed zk instance doesn&apos;t wait until connected to construct a bookkeeper instance. so BookKeeperAdmin would encounter same issue when zk connection delays.&lt;/p&gt;
</comment>
                            <comment id="13287846" author="rakeshr" created="Sat, 2 Jun 2012 05:01:03 +0100"  >&lt;p&gt;Nice work. Just few thoughts:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Consider the case ZK server not running and fails, should we now wait for the full session timeout? IMHO, the latch should listen either SyncConnected or Disconnected events.&lt;/li&gt;
	&lt;li&gt;BookKeeper(final ClientConfiguration conf) is not throwing timeout/interrupted exception back to the client. I feel, would great pass exceptions back to the client. How does it sound?&lt;/li&gt;
	&lt;li&gt;Also, earlier I guess BookKeeper(conf) was throwing the following exception back to the client, but in the patch it is suppressing. Any thoughts on this?
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+        } catch (KeeperException ke) {
+            LOG.error(&quot;Exception accessing zookeeper&quot;, ke);
+        } catch (IOException ioe) {
+            LOG.error(&quot;I/O exception accessing zookeeper&quot;, ioe);
+        } catch (InterruptedException ie) {
+            LOG.error(&quot;Interrupted accessing zookeeper&quot;, ie);
+        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13288405" author="ikelly" created="Mon, 4 Jun 2012 09:18:32 +0100"  >&lt;p&gt;@Sijie&lt;br/&gt;
1. This is a change to fix a intermittent failure of the test, due to the change in how &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-258&quot; title=&quot;CompactionTest failed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-258&quot;&gt;&lt;del&gt;BOOKKEEPER-258&lt;/del&gt;&lt;/a&gt; made timeouts work. Before 258, we set the timeout and when it hit, we just killed everything. Now we set the timeout, and when it triggers, we check if that amount of time has passed with the request outstanding and if so error the request. As the timeout timer is set on the connection and not the individual requests, and the requests can be made a couple of ms after the connection is set up, sometimes it can take 2 timeout periods for the requests to be timed out. This change ensures that this happens.&lt;/p&gt;

&lt;p&gt;2. This is true. I think the overall problem here is that its not possible to set a Watcher on a ZooKeeper without overriding the previous one. This means that there&apos;s no real clean way to say &quot;Don&apos;t process anything on this zk until it has connected&quot;. &lt;/p&gt;

&lt;p&gt;@Rakesh&lt;br/&gt;
1. I&apos;ll look into how best to fail fast and generate a new patch.&lt;br/&gt;
2. Passing the exception back would require waiting for the exception to occur, i.e. blocking. If this is acceptable, we would be better off just making the whole BookKeeper constructor to be blocking (I&apos;m considering this as a possible solution).&lt;br/&gt;
3. Same answer as 2.&lt;/p&gt;</comment>
                            <comment id="13288416" author="fpj" created="Mon, 4 Jun 2012 09:29:58 +0100"  >&lt;blockquote&gt;&lt;p&gt;in BookKeeper constructor with passed zk instance, you assumed that the passed zk instance is already connected. By in BookKeeperAdmin, the passed zk instance doesn&apos;t wait until connected to construct a bookkeeper instance. so BookKeeperAdmin would encounter same issue when zk connection delays.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Assuming that the zk instance is already connected seems reasonable to me. The underlying assumption is that the application which passed the zk instance is responsible for passing a working zk handle. In the case the application passes the zk handle, I&apos;m not sure it is a good idea to have the bk client sort of managing it.&lt;/p&gt;</comment>
                            <comment id="13288421" author="fpj" created="Mon, 4 Jun 2012 09:39:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;Passing the exception back would require waiting for the exception to occur, i.e. blocking. If this is acceptable, we would be better off just making the whole BookKeeper constructor to be blocking (I&apos;m considering this as a possible solution).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Since this is an initialization step, I find it acceptable to block. But, my preference, which seem to be a bit tight to do for this patch, is perhaps to implement a simple state machine and notify the application as the state changes. For example, we can notify the application when the object is ready (state READY) and when it loses its session to zk (state DISCONNECTED_FROM_ZK).&lt;/p&gt;</comment>
                            <comment id="13288422" author="ikelly" created="Mon, 4 Jun 2012 09:39:37 +0100"  >&lt;p&gt;In that case, if we receive a non connected handle we should fail straight away. For BookKeeperAdmin, I may need to refactor to ensure that it passes in a connected handle.&lt;/p&gt;</comment>
                            <comment id="13288426" author="hustlmsp" created="Mon, 4 Jun 2012 09:43:34 +0100"  >&lt;p&gt;&amp;gt; In that case, if we receive a non connected handle we should fail straight away. For BookKeeperAdmin, I may need to refactor to ensure that it passes in a connected handle.&lt;/p&gt;

&lt;p&gt;yes. we need to ensure zookeeper handle is connected in BookKeeperAdmin. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13288428" author="hustlmsp" created="Mon, 4 Jun 2012 09:44:56 +0100"  >&lt;p&gt;&amp;gt; Assuming that the zk instance is already connected seems reasonable to me. The underlying assumption is that the application which passed the zk instance is responsible for passing a working zk handle. In the case the application passes the zk handle, I&apos;m not sure it is a good idea to have the bk client sort of managing it.&lt;/p&gt;

&lt;p&gt;I agreed. My point is not to resolve the passed zk handle in bookkeeper constructor. actually we need to do same thing in BookKeeperAdmin, which is from our code.&lt;/p&gt;</comment>
                            <comment id="13288461" author="rakeshr" created="Mon, 4 Jun 2012 10:58:53 +0100"  >&lt;p&gt;@Ivan&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Passing the exception back would require waiting for the exception to occur, i.e. blocking&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here I&apos;m just thinking about the application side logic, how does the user knows about the bkclient is ready to use?. &lt;br/&gt;
I also feel a similar approach like state notification would be good(Flavio&apos;s suggestion).&lt;/p&gt;</comment>
                            <comment id="13288482" author="ikelly" created="Mon, 4 Jun 2012 11:42:48 +0100"  >&lt;p&gt;New patch makes makes BookKeeper client constructor block until zookeeper has connected. This will effectively be the same behaviour as before as we always called readBookiesBlocking in the constructors anyhow.&lt;/p&gt;</comment>
                            <comment id="13288487" author="ikelly" created="Mon, 4 Jun 2012 11:52:04 +0100"  >&lt;p&gt;Regarding state notifications, I think this is a bad idea. A user of the api shouldn&apos;t need to know if the client is ready to use or not. They should be able to just submit an async request to the client, and either the client does it and completes with success or failure due to an unrecoverable error state. The user isn&apos;t going to check the state and, on seeing that the client isn&apos;t connected, decide that it doesn&apos;t want to add an entry. My biggest problem with the ZooKeeper api is that it doesn&apos;t allow a user to submit an async request without having to ensure that its in connected state. The api is supposed to hide these kind of details. In fact, the HBase guys wrapped the whole zookeeper api to get around this problem&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. I think, in 4.2 we should perhaps take a similar approach.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://github.com/apache/hbase/blob/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/zookeeper/RecoverableZooKeeper.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hbase/blob/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/zookeeper/RecoverableZooKeeper.java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13288505" author="fpj" created="Mon, 4 Jun 2012 12:32:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;Regarding state notifications, I think this is a bad idea. A user of the api shouldn&apos;t need to know if the client is ready to use or not. They should be able to just submit an async request to the client, and either the client does it and completes with success or failure due to an unrecoverable error state.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;These are independent paths. If the application wants, it can wait until it is connected. If it doesn&apos;t check and it submits operations, then its operations might fail as you say.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The user isn&apos;t going to check the state and, on seeing that the client isn&apos;t connected, decide that it doesn&apos;t want to add an entry. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Adding an entry is probably not a good example because it doesn&apos;t depend on zookeeper in a regular run. Creating/Closing a ledger are perhaps more relevant, no? In any case, I see that as being useful, since an application might not want to submit a whole bunch of asynchronous operations to later find that none of them went through. It&apos;s true that it can happen independent of the case we are discussing here, but under the conditions we are discussing here, the application could know that it is better ti wait if we notify.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My biggest problem with the ZooKeeper api is that it doesn&apos;t allow a user to submit an async request without having to ensure that its in connected state. The api is supposed to hide these kind of details. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If the client session is expired, then we can&apos;t guarantee ordering. If we don&apos;t fail the operations, then we might end up violating our ordering guarantees.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In fact, the HBase guys wrapped the whole zookeeper api to get around this problem&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. I think, in 4.2 we should perhaps take a similar approach.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I haven&apos;t looked at the particular repository you pointed us to, but in general I find embedding zookeeper, trying to make its use completely transparent, a bad idea. If it is a separate component, it is best for debugging that the developer is aware.   &lt;/p&gt;</comment>
                            <comment id="13288508" author="fpj" created="Mon, 4 Jun 2012 12:36:45 +0100"  >&lt;p&gt;Let me also mention that this is possibly a longer discussion that we possibly don&apos;t want to have now. I suggest we try to wrap up the patch for this issue and leave a discussion on how to deal with zookeeper for a later release.&lt;/p&gt;</comment>
                            <comment id="13288540" author="hustlmsp" created="Mon, 4 Jun 2012 14:09:15 +0100"  >&lt;p&gt;agreed that a separated jira on how to deal with zookeeper.&lt;/p&gt;

&lt;p&gt;@Ivan, the new patch is simple and clear. just one question, why you change to count down the latch on all events? is there any consideration?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-                        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {
-                            connectLatch.countDown();
-                        }
+                        &lt;span class=&quot;code-comment&quot;&gt;// countdown the latch on all events, even &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; we haven&apos;t
&lt;/span&gt;+                        &lt;span class=&quot;code-comment&quot;&gt;// successfully connected.
&lt;/span&gt;+                        zkConnectLatch.countDown();
+
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
         zk = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Watcher() {
             @Override
             &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void process(WatchedEvent event) {
+                latch.countDown();
                 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
                     LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;Process&lt;/span&gt;: &quot;&lt;/span&gt; + event.getType() + &lt;span class=&quot;code-quote&quot;&gt;&quot; &quot;&lt;/span&gt; + event.getPath());
                 }
             }
         });
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13288548" author="ikelly" created="Mon, 4 Jun 2012 14:24:55 +0100"  >&lt;p&gt;ZooKeeper usage is definitely another issue. I&apos;ve created &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-284&quot; title=&quot;Review ZooKeeper usage in BookKeeper&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-284&quot;&gt;&lt;del&gt;BOOKKEEPER-284&lt;/del&gt;&lt;/a&gt; for this.&lt;/p&gt;

&lt;p&gt;@Sijie&lt;br/&gt;
The countDown for all events assumes that the first event from ZooKeeper will be a connection event. This will either be SyncConnected or Disconnected. In either case, in the following if statement, we check if the zk client is connected, and if not throw an exception. &lt;/p&gt;</comment>
                            <comment id="13288550" author="umamaheswararao" created="Mon, 4 Jun 2012 14:28:43 +0100"  >&lt;p&gt;@Sijie,&lt;br/&gt;
 I think Ivan&apos;s idea is coundown on all the events and later have a check on isConnected. If clinet gets some event means, connection might established and got the event. if connection is not in a connected state he is throwing exception. Please correct me Ivan if my understanding is wrong.&lt;/p&gt;

&lt;p&gt;Patch looks good for me.  +1 from my side on answering to Sijie&apos;s queries.&lt;/p&gt;</comment>
                            <comment id="13288556" author="umamaheswararao" created="Mon, 4 Jun 2012 14:41:05 +0100"  >&lt;p&gt;Oh, thanks Ivan. Comment overlap...Did not see your comment above. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13288609" author="hustlmsp" created="Mon, 4 Jun 2012 16:00:34 +0100"  >&lt;p&gt;@Ivan @Uma, thanks for explanation. My origin concern is that the countDownLatch will be called each time receiving a event from ZooKeeper. It might heart performance. Looking into the source code of CountDownLatch, seems it returns immediately if the count has reached zero. So the new patch is OK for me. +1.&lt;/p&gt;</comment>
                            <comment id="13288909" author="fpj" created="Mon, 4 Jun 2012 22:18:44 +0100"  >&lt;p&gt;+1, looks good.&lt;/p&gt;</comment>
                            <comment id="13289151" author="rakeshr" created="Tue, 5 Jun 2012 05:50:40 +0100"  >&lt;p&gt;+1, latest patch looks nice for me.&lt;/p&gt;</comment>
                            <comment id="13289172" author="hustlmsp" created="Tue, 5 Jun 2012 06:43:27 +0100"  >&lt;p&gt;we had three +1 on it. I would commit it.&lt;/p&gt;</comment>
                            <comment id="13289188" author="hudson" created="Tue, 5 Jun 2012 07:11:31 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #543 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/543/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/543/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-281&quot; title=&quot;BKClient is failing when zkclient connection delays&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-281&quot;&gt;&lt;del&gt;BOOKKEEPER-281&lt;/del&gt;&lt;/a&gt;: BKClient is failing when zkclient connection delays (ivank via sijie) (Revision 1346247)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
sijie : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13289192" author="hustlmsp" created="Tue, 5 Jun 2012 07:22:17 +0100"  >&lt;p&gt;Committed as r1346247 in trunk, r1346253 in 4.1.0 branch.&lt;/p&gt;

&lt;p&gt;Thanks Ivan for nice work. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12530758" name="BOOKKEEPER-281.diff" size="17128" author="ikelly" created="Mon, 4 Jun 2012 11:42:48 +0100"/>
                            <attachment id="12530570" name="BOOKKEEPER-281.diff" size="13286" author="ikelly" created="Fri, 1 Jun 2012 17:46:31 +0100"/>
                            <attachment id="12530538" name="BOOKKEEPER-281.diff" size="11378" author="ikelly" created="Fri, 1 Jun 2012 12:10:25 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 2 Jun 2012 00:44:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>250352</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy4s53:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>61715</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>