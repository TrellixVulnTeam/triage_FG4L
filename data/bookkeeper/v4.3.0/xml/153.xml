<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:32:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-153/BOOKKEEPER-153.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-153] Ledger can&apos;t be opened or closed due to zero-length metadata</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-153</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;Currently creating ledger path and writing ledger metadata are not in a transaction. so if the bookkeeper client (hub server uses bookkeeper client) is crashed, we have a ledger existed in zookeeper with zero-length metadata. we can&apos;t open/close it.&lt;/p&gt;

&lt;p&gt;we should create the ledger path with initial metadata to avoid such case. besides that, we need to add code in openLedgerOp to handle zero-length metadata for backward compatibility.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12538479">BOOKKEEPER-153</key>
            <summary>Ledger can&apos;t be opened or closed due to zero-length metadata</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ikelly">Ivan Kelly</assignee>
                                    <reporter username="hustlmsp">Sijie Guo</reporter>
                        <labels>
                    </labels>
                <created>Mon, 16 Jan 2012 07:05:04 +0000</created>
                <updated>Mon, 22 Oct 2012 15:50:18 +0100</updated>
                            <resolved>Wed, 18 Jan 2012 14:13:19 +0000</resolved>
                                    <version>4.0.0</version>
                                    <fixVersion>4.1.0</fixVersion>
                                    <component>bookkeeper-client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13186785" author="fpj" created="Mon, 16 Jan 2012 08:59:15 +0000"  >&lt;p&gt;Hi Sijie, I&apos;m not sure how adding the metadata when creating the znode avoids such cases. If a bookkeeper client creates a ledger and crashes before writing anything, then that ledger is clearly useless, so we just need to be able to identify and get rid of it.&lt;/p&gt;

&lt;p&gt;Perhaps the idea you&apos;re trying to convey is that if the metadata is written there, then we can at execute the regular operations over the ledger, like open and delete. Is it the case?&lt;/p&gt;</comment>
                            <comment id="13186880" author="hustlmsp" created="Mon, 16 Jan 2012 11:41:48 +0000"  >&lt;p&gt;currently flow of creation is&lt;/p&gt;

&lt;p&gt;1) create a zero-length bytes znode in zookeeper&lt;br/&gt;
2) allocate an ensemble to add it to ledger metadata, write it to the created znode&lt;br/&gt;
3) return the created ledger handle&lt;/p&gt;

&lt;p&gt;why not &lt;/p&gt;

&lt;p&gt;1) allocate an ensemble first &lt;br/&gt;
2) create a znode with the initial metadata in zookeeper (this creation could make adding metadata and creating znode in a same transaction)&lt;/p&gt;


&lt;p&gt;for backward compatibility, there exists zero-length metadata before. we should let regular operations (such as open / openNoRecovery ) can execute over such ledgers.&lt;/p&gt;</comment>
                            <comment id="13186882" author="fpj" created="Mon, 16 Jan 2012 11:49:15 +0000"  >&lt;p&gt;I think we have done it for simplicity, since we rely upon writeLedgerConfig to write ledger metadata, and writeLedgerConfig only invokes setData. I agree that it has the issue you&apos;re raising, though.&lt;/p&gt;

&lt;p&gt;If we keep relying upon writeLedgerConfig for writing the ledger metadata, then we will have a separation between creating it initially and writing the metadata (non-atomic). To fix the problem you&apos;re raising, it sounds like we have to either modify writeLedgerConfig or have a different code path for the initial write.&lt;/p&gt;</comment>
                            <comment id="13186951" author="hustlmsp" created="Mon, 16 Jan 2012 14:55:51 +0000"  >&lt;p&gt;we don&apos;t need to modify writeLedgerConfig. we need to change the flow of LedgerCreateOp to pass initial metadata when creating ledger path.&lt;/p&gt;

&lt;p&gt;besides that, we need to change LedgerOpenOp to handle zero-length metadata when parsing ledger metadata.&lt;/p&gt;

&lt;p&gt;I created a patch to fix it.&lt;/p&gt;</comment>
                            <comment id="13187599" author="ikelly" created="Tue, 17 Jan 2012 11:50:21 +0000"  >&lt;p&gt;The changes to LedgerCreateOp are nice. They simplify it a lot. I don&apos;t like the changes to LedgerOpenOp though. The LedgerCreateOp should stop this from happening, so now it should only happen in some sort of rare corruption case. I think it&apos;s better just to throw the IOException in this case rather than handling a special case of data.length==0 in numerous places. I assume parseLedgerConfig does throw a IOException when the data is empty.&lt;/p&gt;</comment>
                            <comment id="13187686" author="hustlmsp" created="Tue, 17 Jan 2012 13:52:41 +0000"  >&lt;p&gt;yes parseLedgerConfig did throw an IOException.&lt;/p&gt;

&lt;p&gt;since the bug is found in hub server, topic can&apos;t be acquired due to hub server can&apos;t closing such kind ledger. if we don&apos;t add code in LedgerOpenOp, we have to find all such kind ledgers and handle them manually (maybe delete them). throwing IOException here is OK for me. but I am not sure do we need to keep backward compatibility to handle data/metadata produced by old version. what is your opinion?&lt;/p&gt;</comment>
                            <comment id="13187752" author="ikelly" created="Tue, 17 Jan 2012 15:27:59 +0000"  >&lt;p&gt;but the case of the topic being mapped to a ledger whose metadata is empty shouldn&apos;t exist anymore due to the fix in LedgerCreateOp. Of course, something else could break the metadata, but it won&apos;t be our code. &lt;/p&gt;

&lt;p&gt;My problem with the LedgerOpenOp changes are that they add a special case, and a fair bit of code, for a condition that should never happen. &lt;/p&gt;</comment>
                            <comment id="13188138" author="hustlmsp" created="Wed, 18 Jan 2012 00:03:10 +0000"  >&lt;p&gt;I don&apos;t like the changes in LedgerOpenOp either. &lt;/p&gt;

&lt;p&gt;The ledgers created using this patch would never encounter such problem. My concern is that the data/metadata generated by old code, do we need to handle them in new code? The zero-length-metadata ledgers did exist in the system using &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-4&quot; title=&quot;BookKeeper client: Out of memory error&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-4&quot;&gt;&lt;del&gt;BOOKKEEPER-4&lt;/del&gt;&lt;/a&gt;.0.0. How we handle them when user upgrade it from 4.0.0 to 4.1.0?&lt;/p&gt;</comment>
                            <comment id="13188403" author="hustlmsp" created="Wed, 18 Jan 2012 10:56:05 +0000"  >&lt;p&gt;discussed with Ivan offline, these ledgers are orphan ledgers (failed creation), which only affect recovery tool. It would be better to handle such kind of ledgers in recovery tool. so I would remove code changes in LedgerOpenOp and create another jira to handle it in recovery tool.&lt;/p&gt;</comment>
                            <comment id="13188409" author="hustlmsp" created="Wed, 18 Jan 2012 11:17:22 +0000"  >&lt;p&gt;remove codes change in LedgerOpenOp&lt;/p&gt;</comment>
                            <comment id="13188457" author="ikelly" created="Wed, 18 Jan 2012 14:13:20 +0000"  >&lt;p&gt;+1 for the new patch.&lt;/p&gt;

&lt;p&gt;Committed r1232890. Thanks Sijie.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12510709" name="BK-153.patch" size="15572" author="hustlmsp" created="Mon, 16 Jan 2012 14:56:20 +0000"/>
                            <attachment id="12510973" name="BK-153.patch_v2" size="9608" author="hustlmsp" created="Wed, 18 Jan 2012 11:17:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 16 Jan 2012 08:59:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>223983</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy4run:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>61668</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>