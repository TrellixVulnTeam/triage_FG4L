<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:28:38 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-248/BOOKKEEPER-248.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-248] Rereplicating of under replicated data</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-248</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;This subtask discusses how we will rereplicate underreplicated entries.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12554514">BOOKKEEPER-248</key>
            <summary>Rereplicating of under replicated data</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12553925">BOOKKEEPER-237</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="umamaheswararao">Uma Maheswara Rao G</assignee>
                                    <reporter username="ikelly">Ivan Kelly</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 May 2012 16:14:07 +0100</created>
                <updated>Wed, 13 Feb 2013 15:46:48 +0000</updated>
                            <resolved>Fri, 24 Aug 2012 21:45:29 +0100</resolved>
                                                    <fixVersion>4.2.0</fixVersion>
                                    <component>bookkeeper-auto-recovery</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13293696" author="ikelly" created="Tue, 12 Jun 2012 16:32:13 +0100"  >&lt;p&gt;From discussions on other JIRAs, the code here should implement a recovery worker thread. The thread loop should be something like.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;) {
    l = selectLedgerToRecover();
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (l != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        List&amp;lt;LedgerFragment&amp;gt; fragments = LedgerChecker.checkLedger(l);
        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (LedgerFragment lf : fragments) {
            rereplicateFragment(lf);
        }
    }
    waitForUnderreplicatedLedgers();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13293699" author="ikelly" created="Tue, 12 Jun 2012 16:33:46 +0100"  >&lt;p&gt;selecting the ledger to recover should lock the znode, so that other worker do not try to use it. once finished, the underreplicated znode for the ledger should be deleted.&lt;/p&gt;</comment>
                            <comment id="13396038" author="umamaheswararao" created="Mon, 18 Jun 2012 18:09:26 +0100"  >&lt;p&gt;I have worked on this patch.&lt;/p&gt;

&lt;p&gt;ReplicationWorker is a thread which will start the UnderreplicateWatcher for getting the underreplicated ledgers and populate into underreplicatedLedgersQ.&lt;/p&gt;

&lt;p&gt;ReplicationWorker loop will pool for the elements from this Q. Once it picks the ledger from this Q, it will get the fragments from LedgerChecker. After that it will try to get the lock. On suceess, it will replicate that fragments using LedgerFragmentReplicator (updated in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-299&quot; title=&quot;Provide LedgerFragmentReplicator which should replicate the fragments found from LedgerChecker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-299&quot;&gt;&lt;del&gt;BOOKKEEPER-299&lt;/del&gt;&lt;/a&gt;). Again On successfull replication, it will clear the lock and delete the underreplicatedledger node. &lt;/p&gt;

&lt;p&gt;We have choosen current node as target node. If the current node is part of the fragment ensemble, then it will just skip and release lock for giving chance to other bookies to copy that fragments. Will proceed for picking other ledger.&lt;/p&gt;

&lt;p&gt;Will upload Distributed lock patch and Replication worker patches separately...&lt;/p&gt;
</comment>
                            <comment id="13396648" author="umamaheswararao" created="Tue, 19 Jun 2012 11:18:10 +0100"  >&lt;p&gt;Open question:&lt;br/&gt;
 How the ReplicationWorker can know about the ledger DigestType and password while reading the entries as part of replication?&lt;/p&gt;</comment>
                            <comment id="13396657" author="ikelly" created="Tue, 19 Jun 2012 11:23:42 +0100"  >&lt;blockquote&gt;
&lt;p&gt;How the ReplicationWorker can know about the ledger DigestType and password while reading the entries as part of replication?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-2&quot; title=&quot;bookkeeper does not put enough meta-data in to do recovery properly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-2&quot;&gt;&lt;del&gt;BOOKKEEPER-2&lt;/del&gt;&lt;/a&gt;. I have most of the code for this done, but I need to write tests. &lt;/p&gt;</comment>
                            <comment id="13396693" author="umamaheswararao" created="Tue, 19 Jun 2012 12:34:14 +0100"  >&lt;p&gt;Ok, thanks Ivan. Will make use of BK-2 metadata info once it is in.&lt;/p&gt;</comment>
                            <comment id="13437599" author="umamaheswararao" created="Sun, 19 Aug 2012 23:27:56 +0100"  >&lt;p&gt;Attached an initial patch, need to add some more tests and recheck some of the TODOs in it.&lt;br/&gt;
Ready for approach review!&lt;/p&gt;</comment>
                            <comment id="13438597" author="ikelly" created="Tue, 21 Aug 2012 11:47:03 +0100"  >&lt;p&gt;@Uma I had a look. Shape is good. Comments are as follows.&lt;/p&gt;

&lt;p&gt;The new BookKeeperAdmin constructor should only take a BookKeeper. The zookeeper client and bookies available path can be extracted from this.&lt;/p&gt;

&lt;p&gt;In ReplicationWorker#run, don&apos;t catch a Throwable. This will catch exceptions which you really don&apos;t want to catch, specifically, RuntimeExceptions like NullPointerException or ArithmeticException which are a result of programming error. &lt;/p&gt;

&lt;p&gt;In ReplicationWorker#run, when you do catch an exception, you should return from the run method. You don&apos;t want the while loop to run again. (you should also call #stop() to cleanup).&lt;/p&gt;

&lt;p&gt;ReplicationWorker#stop() should wait for #run() to have finished before cleaning up the bk client. Otherwise you&apos;re asking for null pointer exceptions to happen. Have a look guava Service &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. It may be worth using.&lt;/p&gt;

&lt;p&gt;A quick note on #doReplicateFragments would be good to explain what the boolean return value is.&lt;/p&gt;

&lt;p&gt;The flow is a bit strange between #run() and #doReplicateFragments(). You&apos;re interacting with underreplicationManager in both, depending on booleans etc. I think it would be cleaer to put all the interaction with underreplicationManager in run(). The boolean return from doReplicateFragments seems to be designed especially for this.&lt;/p&gt;

&lt;p&gt;Im not sure if I like the fact that you only replicate to a single bookie from an individual replication worker. I can see why you did it (so you&apos;ll only replicate to local), but it seems to me as if it could cause problems later, though I can&apos;t pin any specific reason right now.&lt;/p&gt;

&lt;p&gt;Why not implement a sync openLedgerNoRecovery on BookKeeperAdmin rather than in #getLedgerHandle?&lt;/p&gt;

&lt;p&gt;Also, this needs more tests. Such as multiple running workers and multiple bookie failures and ledger failures etc.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/util/concurrent/Service.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/util/concurrent/Service.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13438651" author="umamaheswararao" created="Tue, 21 Aug 2012 13:32:15 +0100"  >&lt;p&gt;Thanks a lot Ivan for the review!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In ReplicationWorker#run, don&apos;t catch a Throwable. This will catch exceptions which you really don&apos;t want to catch, specifically, RuntimeExceptions like NullPointerException or ArithmeticException which are a result of programming error. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, Ivan, I added TODO inside throwable to keep this point in mind.&lt;br/&gt;
I will try to catch all exceptions specifically now and will discuss after that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The flow is a bit strange between #run() and #doReplicateFragments(). You&apos;re interacting with underreplicationManager in both, depending on booleans etc. I think it would be cleaer to put all the interaction with underreplicationManager in run(). The boolean return from doReplicateFragments seems to be designed especially for this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Infact, I just extracted that to doReplicateFragments method from run method only &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;br/&gt;
That is mainly because, keeping pending replicationsMonitor in my mind.&lt;br/&gt;
After delaying for some ledger replication, and after timeout I wanted to reuse this method from there to replicate.&lt;/p&gt;

&lt;p&gt;Anyway, Now I will make it inline, once I moved to that JIRA, we will discuss there.&lt;/p&gt;

&lt;p&gt;Others I will take a look to address.&lt;/p&gt;

&lt;p&gt;Thanks a lot.&lt;/p&gt;

&lt;p&gt;+Uma&lt;/p&gt;</comment>
                            <comment id="13439426" author="umamaheswararao" created="Wed, 22 Aug 2012 12:27:03 +0100"  >&lt;p&gt;While writing multiple recovery workers test, I found one issue from ZKLedgerUnderreplicationManager#getLedgerToRereplicateFromHierarchy API.&lt;/p&gt;

&lt;p&gt;Issue is: &lt;br/&gt;
1) Two Workers started and trying to get the lock for same ledger.&lt;br/&gt;
2) Both worker found that lock file does not exist.&lt;br/&gt;
3) both gone ahead for creating the lock node.&lt;br/&gt;
4) One worker failed with NodeExists exception&lt;/p&gt;

&lt;p&gt;Then it is just removing the children from the list and go for latch wait for the watch notification.&lt;/p&gt;

&lt;p&gt;But here unfortunately we added the watch on lockPath with exists check call. But that time lockPatch really did not exists. SO, the lock may be invalid. Then it will never get the notification when lock has been cleaned by other worker.&lt;br/&gt;
Here other worker partly replicated and now the current worker should take lock. But it can not get that notification as it added that watch when node does not exist.&lt;/p&gt;

&lt;p&gt;Shall I handle that bug along with this JIRA?&lt;/p&gt;

&lt;p&gt;Possible solution could be that, we have to add the watcher again &lt;br/&gt;
 on KeeperException.NodeExistsException right?&lt;br/&gt;
or simply we can handle NodeCreated also in watcher and notify, let it try again(Did not think of many scenarios with this option)?&lt;/p&gt;
</comment>
                            <comment id="13439794" author="umamaheswararao" created="Wed, 22 Aug 2012 20:43:23 +0100"  >&lt;p&gt;Attached a new revision of patch which addresses the comments.&lt;/p&gt;

&lt;p&gt;Found 2 issues while testing. One I explained in my previous comment and other issue with GC (raised as a separate JIRA BK-376)&lt;br/&gt;
And regarding the below comment&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReplicationWorker#stop() should wait for #run() to have finished before cleaning up the bk client. Otherwise you&apos;re asking for null pointer exceptions to happen. Have a look guava Service &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. It may be worth using&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Actually I am initialing the required stuff in RW ctor only and all were light wait. I did not see the possibility of null pointer there.&lt;br/&gt;
Infact, introducing the guava Service would be a good idea and with my limited(used) familiarity on Guava service and time, I could not really introduce it now. If you don&apos;t mind I will replace it once I get some familiarity on it and will raise small task later.&lt;/p&gt;

&lt;p&gt;Could you please take a look on the patch.&lt;/p&gt;

</comment>
                            <comment id="13440168" author="ikelly" created="Thu, 23 Aug 2012 10:16:58 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Shall I handle that bug along with this JIRA?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This should be in another JIRA. I think the fix is quite simple, as you say (add watcher again by calling exists again after NodeExistsException).&lt;/p&gt;

&lt;p&gt;The NPE I was speaking of may not actually exist, but the way it is implemented it looks very possible. In #stop you close the underreplLM and bkc. This uninitializes both these objects. However, to stop #run, you only set workerRunning to false, which allows #run to keep going until the next iteration of the while loop, possibly using the underreplLM and bkc which you have just uninitialized. So any issue may not be a NPE exactly, but it could well be some problem of the same type. Really, what you need to do here, is have #stop() block until #run() has finished, and then cleanly the bkc etc. A countdownlatch would do it. Or alternatively, ReplicationWorker could own the Thread object which is being used to run it &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, and then #stop() could join() the thread to wait for it to finish.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; Don&apos;t start the thread from the ctor, have a explicit start() method. Starting from the ctor makes unit testing a pain, and causes findbugs issues.&lt;/p&gt;
</comment>
                            <comment id="13440178" author="ikelly" created="Thu, 23 Aug 2012 10:40:34 +0100"  >&lt;p&gt;For completeness could you add a sync BookKeeperAdmin#openLedger. Should be almost a copy/paste. Otherwise patch is good.&lt;/p&gt;

&lt;p&gt;Regarding Service, im fine with leaving that until later. We also need to think about how we run the threads. For example, it would be nice for the threads to be able to restart if they crash, but only after a delay and only for a limit number of times (to stop a persistent failure filling everything with logs). I think hbase does something like this now, so will look and see.&lt;/p&gt;</comment>
                            <comment id="13440186" author="umamaheswararao" created="Thu, 23 Aug 2012 10:59:07 +0100"  >&lt;p&gt;Thanks a lot Ivan, I will add BookKeeperAdmin#openLedger in next revision in few minutes.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Regarding Service, im fine with leaving that until later. We also need to think about how we run the threads. For example, it would be nice for the threads to be able to restart if they crash, but only after a delay and only for a limit number of times (to stop a persistent failure filling everything with logs). I think hbase does something like this now, so will look and see.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thanks. I also will invest some time on that area.&lt;/p&gt;</comment>
                            <comment id="13440225" author="umamaheswararao" created="Thu, 23 Aug 2012 12:44:45 +0100"  >&lt;p&gt;Addressed the comments from Ivan.&lt;br/&gt;
@Ivan, could you please take a look. Also Raised separate JIRA(BK-378) and put the patch for above discussed case, where multiple Workers test can block due to watcher issue in ZkLedgerUnderreplicationManager.&lt;/p&gt;</comment>
                            <comment id="13441485" author="ikelly" created="Fri, 24 Aug 2012 21:45:29 +0100"  >&lt;p&gt;Committed r1377100. Good work Uma.&lt;/p&gt;</comment>
                            <comment id="13441490" author="umamaheswararao" created="Fri, 24 Aug 2012 21:49:56 +0100"  >&lt;p&gt;Thanks a lot, Ivan for your reviews!&lt;/p&gt;</comment>
                            <comment id="13441502" author="hudson" created="Fri, 24 Aug 2012 22:06:56 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #666 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/666/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/666/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-248&quot; title=&quot;Rereplicating of under replicated data&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-248&quot;&gt;&lt;del&gt;BOOKKEEPER-248&lt;/del&gt;&lt;/a&gt;: Rereplicating of under replicated data (umamahesh via ivank) (Revision 1377100)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerHandleAdapter.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                            <outwardlinks description="requires">
                                        <issuelink>
            <issuekey id="12604589">BOOKKEEPER-378</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12542106" name="BOOKKEEPER-248.patch" size="36752" author="umamaheswararao" created="Thu, 23 Aug 2012 12:37:13 +0100"/>
                            <attachment id="12542023" name="BOOKKEEPER-248.patch" size="36686" author="umamaheswararao" created="Wed, 22 Aug 2012 20:29:47 +0100"/>
                            <attachment id="12541541" name="BOOKKEEPER-248.patch" size="20430" author="umamaheswararao" created="Sun, 19 Aug 2012 23:25:43 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 18 Jun 2012 17:09:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>238764</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyn5wn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>169144</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>