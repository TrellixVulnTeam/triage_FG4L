<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:28:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-582/BOOKKEEPER-582.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-582] Make bookie and client use protobuf for requests (non-wire part)</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-582</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;Make the client and the bookie use protobufs internally. This is the first step to using protobufs on the wire, but for the moment, BookieRequestHandler decodes the old wire protocol into the protobuf messages. Once this is in, enabling on the wire will be very simple, and the old manual serialization can be made &quot;legacy&quot; (still supported, but deprecated).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12635470">BOOKKEEPER-582</key>
            <summary>Make bookie and client use protobuf for requests (non-wire part)</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12634161">BOOKKEEPER-575</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hustlmsp">Sijie Guo</assignee>
                                    <reporter username="ikelly">Ivan Kelly</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Mar 2013 00:38:25 +0000</created>
                <updated>Sun, 5 Oct 2014 17:31:04 +0100</updated>
                            <resolved>Thu, 24 Jul 2014 23:35:14 +0100</resolved>
                                                    <fixVersion>4.3.0</fixVersion>
                                    <component>bookkeeper-client</component>
                    <component>bookkeeper-server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13594154" author="ikelly" created="Wed, 6 Mar 2013 00:40:40 +0000"  >&lt;p&gt;Patch is ready to go, but not marking as Submitted until &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-576&quot; title=&quot;Bookie client should use netty Decoder/Encoder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-576&quot;&gt;&lt;del&gt;BOOKKEEPER-576&lt;/del&gt;&lt;/a&gt; is in.&lt;/p&gt;</comment>
                            <comment id="13607608" author="hadoopqa" created="Wed, 20 Mar 2013 13:41:07 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12574540/0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch&lt;/a&gt; downloaded at Wed Mar 20 13:22:56 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 247 line(s) with trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 31 line(s) longer than 120 characters&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 4 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; patch does not compile&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt; - patch does not compile, cannot run testcases&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; distro tarball fails with the patch&lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/292/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/292/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13607651" author="ikelly" created="Wed, 20 Mar 2013 14:35:40 +0000"  >&lt;p&gt;Long lines and trailing spaces removed. They&apos;ll still show up in the protobuf generated code.&lt;/p&gt;</comment>
                            <comment id="13607695" author="hadoopqa" created="Wed, 20 Mar 2013 15:10:05 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12574552/0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch&lt;/a&gt; downloaded at Wed Mar 20 14:40:43 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 247 line(s) with trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 30 line(s) longer than 120 characters&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 4 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; patch does not compile&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt; - patch does not compile, cannot run testcases&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; distro tarball fails with the patch&lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/293/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/293/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13616908" author="hadoopqa" created="Fri, 29 Mar 2013 00:38:38 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12575911/0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch&lt;/a&gt; downloaded at Fri Mar 29 00:06:39 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 255 line(s) with trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch contains 34 line(s) longer than 120 characters&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 4 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 824&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/307/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/307/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13617149" author="vinayrpet" created="Fri, 29 Mar 2013 06:54:18 +0000"  >&lt;p&gt;Hi Ivan,&lt;br/&gt;
Nice work.!!! Patch Looks good. &lt;br/&gt;
I have some small suggestion here.&lt;/p&gt;

&lt;p&gt;1. Instead of building AddRequest/ReadRequest everytime we call addEntry/readEntry of BookieClient, its will be better to build inside BookieClient itself, and pass onto PerChannelBookieClient. It will reduce many file changes in current patch. &lt;/p&gt;
</comment>
                            <comment id="13619686" author="ikelly" created="Tue, 2 Apr 2013 11:41:36 +0100"  >&lt;p&gt;This would mean modifying BookieClient methods any time we need to add something to the protocol, which may mean the method name would get very long. I&apos;d like to actually go in the opposite direction, where addEntry and readEntry get merged and replaced with Bookie#sendRequest() which takes a BookkeeperProtocol.Request object and the protocol knows nothing of the actual meaning of the request. This requires transaction ids, which I plan to pull in in a later patch. It may be that we need to keep addEntry and readEntry for BC reasons, but I&apos;d like to move as much towards the idea I outlines as possible.&lt;/p&gt;</comment>
                            <comment id="13623905" author="hustlmsp" created="Fri, 5 Apr 2013 19:29:09 +0100"  >&lt;p&gt;looks like in this case, there are two different proposals on protobuf definitions in the community. putting tech debates aside, I am interested in how to consolidate the proposals or how we should progress on protocol changes in future for the community, since protocol change is not a trivial thing for all the users using BOOKKEEPER project. I had no idea how it works in other apache projects. In the past, I thought that creating a jira could raise the discussion or at least it could prevent duplicated works (that is why I created &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-558&quot; title=&quot;change bookkeeper request/response protocol to use protobuf&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-558&quot;&gt;&lt;del&gt;BOOKKEEPER-558&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13623976" author="ikelly" created="Fri, 5 Apr 2013 20:31:55 +0100"  >&lt;p&gt;I think the two can converge towards something very similar. The problem here was that there was a branch with protobuf changes, but no patch attached to a jira, so I wasn&apos;t aware of it when I started implementing this. I posted the first patch on 6th march. I met you guys in SF on 11th march. But in any case, there&apos;s only one protocol with 2 requests, so any design for it will look very similar.&lt;/p&gt;

&lt;p&gt;The main bone of contention seems to be BC. Maintaining BC is something I think is very worthwhile. It&apos;s very nice that I can have a ZK server at 3.4.0 and take a 3.3.0 client and they work without issue. Conversely, it has caused me to swear many times that a Hadoop 1.0.4 namenode will not work with a hadoop 0.21 client. Im not even sure how a 4.2.1 server would react with a pure protobuf message, but when I was testing the handshake stuff in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-597&quot; title=&quot;Add flag to output test logs to stdout&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-597&quot;&gt;&lt;del&gt;BOOKKEEPER-597&lt;/del&gt;&lt;/a&gt;, i managed to hang the server if the message wasn&apos;t long enough (it reads ledgerid and entryid before checking the version number. stupid, but we have to live with it).&lt;/p&gt;

&lt;p&gt;Also, I prefer to make these changes in a piecemeal fashion that have a couple of changes in one. The CL with protobufs in the twitter branch has a couple, especially around how packets are processed, extra threads etc. That is definitely something I want to bring into trunk. Not in the same patch though. Also, processing seems to be mixed with deserialisation. This is probably due to it being before the netty changes.&lt;/p&gt;

&lt;p&gt;Regarding &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-558&quot; title=&quot;change bookkeeper request/response protocol to use protobuf&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-558&quot;&gt;&lt;del&gt;BOOKKEEPER-558&lt;/del&gt;&lt;/a&gt;, thats my bad. I had clear forgot that JIRA existed when I created this one. &lt;/p&gt;</comment>
                            <comment id="13624260" author="hustlmsp" created="Sat, 6 Apr 2013 02:14:07 +0100"  >&lt;p&gt;for server side BC, server is easy to detect protocol and handle the packet in right protocol. all these two proposals handle it. the client side BC, you tried to handle in handshake isn&apos;t tight with protocol, a client could connect first with new protocol to old server, and old server would respond with EBADVERSION and downgrade to use an old version protocol. it could be achieved using either new protobuf protocol. &lt;/p&gt;

&lt;p&gt;from my perspective, implementation is a minor thing. but protocol isn&apos;t. there are lots of protobuf definitions in either BOOKKEEPER or Hedwig, how the community could collaborate on the protocol changes smoothly is the goal I tried to figure out.&lt;/p&gt;</comment>
                            <comment id="13624372" author="ikelly" created="Sat, 6 Apr 2013 09:02:41 +0100"  >&lt;blockquote&gt;&lt;p&gt;for server side BC, server is easy to detect protocol and handle the packet in right protocol. all these two proposals handle it. the client side BC, you tried to handle in handshake isn&apos;t tight with protocol, a client could connect first with new protocol to old server, and old server would respond with EBADVERSION and downgrade to use an old version protocol. it could be achieved using either new protobuf protocol. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In theory this is the case, but in practice I dont think it works out. If you look at&lt;br/&gt;
&lt;a href=&quot;https://github.com/apache/bookkeeper/blob/branch-4.2/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java#L380&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/bookkeeper/blob/branch-4.2/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java#L380&lt;/a&gt; we check the opcode and try to do a read depending on what we see. If the protobuf conspires to have a value opCode for an add, but the request isn&apos;t an add, for example, this will likely crash the server when trying to read the packet. I&apos;ll do some more testing on this on monday. It would be nice to be able to include the version in the protobuf AND preserve BC. I&apos;m not sure it&apos;s possible though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;from my perspective, implementation is a minor thing. but protocol isn&apos;t. there are lots of protobuf definitions in either BOOKKEEPER or Hedwig, how the community could collaborate on the protocol changes smoothly is the goal I tried to figure out.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think the guiding principle should be &quot;don&apos;t break BC&quot;. If something doesn&apos;t break BC, it&apos;ll get past fairly easily. If it breaks BC it&apos;ll get a lot of scrutiny. &lt;/p&gt;</comment>
                            <comment id="13626325" author="hustlmsp" created="Tue, 9 Apr 2013 08:15:45 +0100"  >&lt;blockquote&gt;
&lt;p&gt; If the protobuf conspires to have a value opCode for an add, but the request isn&apos;t an add, for example, this will likely crash the server when trying to read the packet.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;if that, an evil client implementation could crash the server. it is a bug for the old server, everyone could produce such client to crash that server. I don&apos;t think it would be a concern, if we could guarantee the new client would not crash the old server but just receiving bad version response, isn&apos;t it?&lt;/p&gt;

&lt;p&gt;no matter what protobuf changes are accepted in trunk, I am thinking that we should not tightly bound with protobuf. There is too much overhead using protobuf. taking the publisher/delivery flow in Hedwig in consideration, a message received in netty as bytes buffer, then deserialized into a Message (protobuf) object, constructed a new Message (protobuf) object with new message seq id, converted into a bytes array, formed another protobuf request in bookkeeper. Lots of objects are generated and lots of memory copies during the life-cycle of messages, which would cause gc issue for a higher publish throughput.&lt;/p&gt;

&lt;p&gt;Tightly bound with protobuf is bad for evaluating and providing more efficient and zero-copy client implementation. I would suggest we should separate the request serialization and response deserialization into a thin part rather than modifying PCBC to use protobuf objects, so it would be easy to allow different protocol implementation and to evaluate efficient zero-copy client in future. &lt;/p&gt;</comment>
                            <comment id="13649171" author="fpj" created="Sat, 4 May 2013 21:55:54 +0100"  >&lt;p&gt;I haven&apos;t read all comments, but it doesn&apos;t sound like we have agreement yet. It would be great to have this patch in soon, though, since SSL support is part of the roadmap for 4.3.0. Cancelling for the moment.&lt;/p&gt;</comment>
                            <comment id="13896275" author="hustlmsp" created="Mon, 10 Feb 2014 07:06:23 +0000"  >&lt;p&gt;attach a patch for introducing protobuf changes.&lt;/p&gt;</comment>
                            <comment id="13896279" author="hustlmsp" created="Mon, 10 Feb 2014 07:12:10 +0000"  >&lt;p&gt;also reviews in review board: &lt;a href=&quot;https://reviews.apache.org/r/17895&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/17895&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13896283" author="hustlmsp" created="Mon, 10 Feb 2014 07:13:53 +0000"  >&lt;p&gt;btw, this change is basically generated by diffing, which includes both server &amp;amp; client changes.&lt;/p&gt;</comment>
                            <comment id="13896292" author="hadoopqa" created="Mon, 10 Feb 2014 07:40:05 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12627935/BOOKKEEPER-582.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-582.diff&lt;/a&gt; downloaded at Mon Feb 10 07:11:31 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 3 testcase(s)&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch seems to introduce 4 new RAT warning(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 892&lt;br/&gt;
.    Tests failed: 1&lt;br/&gt;
.    Tests errors: 5&lt;/p&gt;

&lt;p&gt;.    The patch failed the following testcases:&lt;/p&gt;

&lt;p&gt;.      testPeriodicCheckWhenDisabled(org.apache.bookkeeper.replication.AuditorPeriodicCheckTest)&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/587/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/587/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13924028" author="ikelly" created="Fri, 7 Mar 2014 16:32:50 +0000"  >&lt;p&gt;One thing we have to be aware of here is that by using enums, we are committing to losings client-&amp;gt;server compatibility whenever we upgrade the protocol. To me, this doesn&apos;t seem to be such a problem, as we tend to mandate that servers are upgraded before clients, but I think it&apos;s something we should get a little bit more consensus on. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=umamaheswararao&quot; class=&quot;user-hover&quot; rel=&quot;umamaheswararao&quot;&gt;Uma Maheswara Rao G&lt;/a&gt; Is server client incompatibility ok for you guys as long as the server upgrades first?&lt;/p&gt;</comment>
                            <comment id="13944144" author="rakeshr" created="Sat, 22 Mar 2014 16:57:00 +0000"  >&lt;p&gt;First I&apos;d like to thank you guys(&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikelly&quot; class=&quot;user-hover&quot; rel=&quot;ikelly&quot;&gt;Ivan Kelly&lt;/a&gt; and others) for the good work and the progress. &lt;br/&gt;
Hi Ivan, sorry for the delay in replay and I also feel we can push the SSL patches.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Is server client incompatibility ok for you guys as long as the server upgrades first?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Today I&apos;ve gone through the diff present in the review board. Very first look, its ok to me and overall BK server code looks fine and taken care the compatibility part well. Also &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; has reviewed the code. &lt;br/&gt;
Like you mentioned while upgrading it should requires to upgrade bk server first and then clients(HDFS et.). This way it would be able to do the upgrade without having to shutdown the entire services(both clients as well as  server). Anyway I&apos;ll have a closer look again and will come back in a day or two. &lt;/p&gt;</comment>
                            <comment id="13944955" author="rakeshr" created="Mon, 24 Mar 2014 12:09:09 +0000"  >&lt;p&gt;From my side, the changes looks fine apart from the comments present in the review board.&lt;br/&gt;
Also, I guess this is a common pattern everyone follows while upgrading. First it should upgrade the servers one by one and now new server should be able to serve the old client requests. Should we document this specifically anywhere ?&lt;/p&gt;</comment>
                            <comment id="13975422" author="hustlmsp" created="Mon, 21 Apr 2014 06:56:58 +0100"  >&lt;p&gt;attach a new patch rebased on latest trunk and addressed comments&lt;/p&gt;</comment>
                            <comment id="13975473" author="hadoopqa" created="Mon, 21 Apr 2014 08:50:48 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12641030/BOOKKEEPER-582.v2.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-582.v2.diff&lt;/a&gt; downloaded at Mon Apr 21 07:22:24 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 3 testcase(s)&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch seems to introduce 2 new RAT warning(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 907&lt;br/&gt;
.    Tests failed: 0&lt;br/&gt;
.    Tests errors: 5&lt;/p&gt;

&lt;p&gt;.    The patch failed the following testcases:&lt;/p&gt;

&lt;p&gt;.      &lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/606/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/606/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13978048" author="ikelly" created="Wed, 23 Apr 2014 11:22:22 +0100"  >&lt;p&gt;Made a few comments on reviewboard. In general the patch is good, but I&apos;d like to see some changes to the protocol itself.&lt;/p&gt;</comment>
                            <comment id="13979401" author="hustlmsp" created="Thu, 24 Apr 2014 08:41:19 +0100"  >&lt;p&gt;new patch address typo and fix failure tests.&lt;/p&gt;</comment>
                            <comment id="13979543" author="hadoopqa" created="Thu, 24 Apr 2014 11:14:11 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12641669/BOOKKEEPER-582.v3.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-582.v3.diff&lt;/a&gt; downloaded at Thu Apr 24 09:45:53 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 4 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 900&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/607/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/607/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13979565" author="hadoopqa" created="Thu, 24 Apr 2014 11:47:55 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12641669/BOOKKEEPER-582.v3.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-582.v3.diff&lt;/a&gt; downloaded at Thu Apr 24 10:19:36 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 4 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 900&lt;br/&gt;
.    Tests failed: 1&lt;br/&gt;
.    Tests errors: 0&lt;/p&gt;

&lt;p&gt;.    The patch failed the following testcases:&lt;/p&gt;

&lt;p&gt;.      testAsyncWritesWithMultipleFailuresInLastEnsemble&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;(org.apache.bookkeeper.client.BookieWriteLedgerTest)&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/608/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/608/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13979578" author="hadoopqa" created="Thu, 24 Apr 2014 12:21:34 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12641669/BOOKKEEPER-582.v3.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-582.v3.diff&lt;/a&gt; downloaded at Thu Apr 24 10:53:24 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 4 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 900&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/609/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/609/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13979692" author="hadoopqa" created="Thu, 24 Apr 2014 14:20:32 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12641669/BOOKKEEPER-582.v3.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-582.v3.diff&lt;/a&gt; downloaded at Thu Apr 24 12:52:15 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does adds/modifies 4 testcase(s)&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 900&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1 Overall result, good!, no -1s&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/612/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/612/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13990458" author="ikelly" created="Tue, 6 May 2014 10:18:54 +0100"  >&lt;p&gt;-1 for patch..&lt;/p&gt;

&lt;p&gt;Discussion on reviewboard is going in circles. @fpj or &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt;, how do you guys vote? Patch needs a lazy majority to go in, so a +1 from one of you guys would be enough to approve it.&lt;/p&gt;</comment>
                            <comment id="13990459" author="ikelly" created="Tue, 6 May 2014 10:19:17 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13994784" author="hustlmsp" created="Mon, 12 May 2014 05:12:51 +0100"  >&lt;p&gt;ping the ticket. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt; since you had comments on the review board, could you check the latest revision and give your comments? &lt;/p&gt;</comment>
                            <comment id="14001708" author="rakeshr" created="Mon, 19 May 2014 15:04:55 +0100"  >&lt;p&gt;Hi, Protobuf changes is very nice improvement and appreciate the effort. I feel it has to be thoroughly reviewed and reach to a common agreement before push it in. As we all know backward compatibility issues will be a serious concern everywhere, sometime back we had experienced issues with &apos;com.google.guava&apos; and &apos;netty&apos; during BK-HDFS integration.&lt;/p&gt;

&lt;p&gt;I&apos;ve added few comments in RB, please see it. Truly saying, I&apos;m not an expert in protobuf, have only seen usage patterns in HDFS.&lt;/p&gt;</comment>
                            <comment id="14002777" author="hustlmsp" created="Tue, 20 May 2014 05:13:45 +0100"  >&lt;p&gt;replied your comments, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rakeshr&quot; class=&quot;user-hover&quot; rel=&quot;rakeshr&quot;&gt;Rakesh R&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14015296" author="rakeshr" created="Mon, 2 Jun 2014 11:05:18 +0100"  >&lt;p&gt;+1 from me. Since this a major improvement, it would be great to see feedback from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; too. Thanks!&lt;/p&gt;

&lt;p&gt;I referred org.apache.bookkeeper.test.TestBackwardCompat.java. Also, please include few more compatibility test cases:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;where 4.2.0 client is talking to the new server.&lt;/li&gt;
	&lt;li&gt;new client talking to 4.2.0 server&lt;/li&gt;
	&lt;li&gt;include test case where client see &quot;@return null if the statuscode is unknown.&quot; PerChannelBookieClient#statusCodeToExceptionCode(StatusCode status)&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="14015509" author="hadoopqa" created="Mon, 2 Jun 2014 17:17:50 +0100"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12641669/BOOKKEEPER-582.v3.diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;BOOKKEEPER-582.v3.diff&lt;/a&gt; downloaded at Mon Jun  2 16:13:20 UTC 2014&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; Patch failed to apply to head of branch&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;</comment>
                            <comment id="14016336" author="fpj" created="Tue, 3 Jun 2014 10:05:00 +0100"  >&lt;p&gt;I&apos;ll check it out today, thanks for the pings.&lt;/p&gt;</comment>
                            <comment id="14017194" author="fpj" created="Tue, 3 Jun 2014 22:51:52 +0100"  >&lt;p&gt;I have made a pass to the comments in the review board. It is dense, so I&apos;m not sure I&apos;m getting the key points. My understanding is that the main source of contention is the use of enums. Ivan&apos;s point is that if we update an enum and update bookies before clients, then we risk breaking clients if we are not careful. Being careful may imply code complexity.&lt;/p&gt;

&lt;p&gt;Is this the main issue or is there something else? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;, could you please summarize your view here? It would help me understand the discussion better and possibly enable meaningful suggestions.&lt;/p&gt;</comment>
                            <comment id="14017533" author="ikelly" created="Wed, 4 Jun 2014 10:49:47 +0100"  >&lt;p&gt;My 2 main issues are (i.e. the source of the -1):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;b&gt;Use of an enum for flags:&lt;/b&gt; This is covered a lot in review board, but basically, by using an enum for the flag, you can only have one flag at a time. Sijie&apos;s work around for this is to have combinatorial flags, but assuming each flag is independent of each other flag, the number of entries for the enum grows at O(n^2). In my opinion, the protocol would be cleaner and easier to maintain if each flag was a boolean.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;b&gt;Sending error messages twice:&lt;/b&gt; In the response part, there&apos;s an error message for the packet and one for each individual response. According to sijie, one is for packet level errors, the other is for entry level errors. These should use separate error codes in this case. And it would be better if these were only considered separate when there are multiple entries in a&lt;br/&gt;
response, which actually is never the case right now. For this, I would like to see separate error enums (if we are stuck with using enums) for packet level and entry level. Alternatively, we could remove the concept of packet error, and have a container message for operations with multiple reads which can hold the &quot;packet&quot; level error if needed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If these two were resolved I would change my vote to -0 or +0. The other issues, which are less important are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;b&gt;Use of enum for errors:&lt;/b&gt; Errors originate at the server, and the server can have a newer version of the protocol than the client, so the server could theoretically have a new error code that the client doesn&apos;t know about and this would cause a runtime exception on the client. In my view it would be better to have a catchall, so that you don&apos;t have to maintain a error compatibility map on the server side which will push unknown errors into some catchall category anyhow.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;b&gt;Too much required:&lt;/b&gt; Again, this is an issue of leaving the protocol open to future enhancements. We&apos;ve had problems in hedwig that we couldn&apos;t change a field for BC issues, so now we have to set it with a dummy value every time we use the message even though neither the client nor the server use it.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Resolving these would move me to a +1.&lt;/p&gt;</comment>
                            <comment id="14019110" author="hustlmsp" created="Thu, 5 Jun 2014 20:05:01 +0100"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikelly&quot; class=&quot;user-hover&quot; rel=&quot;ikelly&quot;&gt;Ivan Kelly&lt;/a&gt; for the summary. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; I would reply based on this summary.&lt;/p&gt;

&lt;p&gt;&amp;gt; Use of an enum for flags&lt;/p&gt;

&lt;p&gt;the point that Ivan made is to use optional boolean. my point is that using optional boolean, you need to do lots of negative cases checkings when you are adding more booleans. I would prefer a more specific way to figure out what flags are set, rather than doing lots of negative cases checking from implicit optional booleans.&lt;/p&gt;

&lt;p&gt;&amp;gt; Sending error messages twice&lt;/p&gt;

&lt;p&gt;the error code. one is for packet while the other while is for individual entries. the error code on individual entries are for cases that need to distinguish the status of individual one. they are same from semantic, so there is no reason to split to two set of error codes. as the splitting would introduce complexity of maintaining the codes, and mapping them back to return code in callbacks. I think it is similar as individual status codes in a zookeeper transaction.&lt;/p&gt;

&lt;p&gt;&amp;gt; Use of enum for errors&lt;/p&gt;

&lt;p&gt;I would prefer using protobuf only for wire-level packet format backward compatibility. but for application level semantic backward compatibility, I would prefer a explicit way to produce responses back to old version clients for backward compatibility. Although it might introduce codes for this, it is clear and less risky. If we agree that servers should respond responses according to the version of the protocol that old client speaks, then it doesn&apos;t matter it is using enum or integer.&lt;/p&gt;

&lt;p&gt;&amp;gt; Too much required.&lt;/p&gt;

&lt;p&gt;I think the key point here is about the required field on ledgerId and entryId. my point here is the whole bookie (either storage, protocol) is based on single entry read/write.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if you stick on current bookie storage design, the single entry read/write are primitives of bookie protocol. so make entryId and ledgerId should be required. all other protocol improvements (e.g. streaming reads, batch reads, multiple writes) could be added based on these primitives.&lt;/li&gt;
	&lt;li&gt;if you are going to redesign the whole bookie storage to change the fundamental fact, it is better to a new request type to fit in your new bookie storage, rather than patching the existing requests type to make it complicated.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;so the required fields are there based on whole bookkeeper design, they are not blocking the future enhancements.&lt;/p&gt;



</comment>
                            <comment id="14019676" author="fpj" created="Fri, 6 Jun 2014 09:44:19 +0100"  >&lt;p&gt;Ok, awesome, thanks for both summaries. Let me go through them and get back to you two asap.&lt;/p&gt;</comment>
                            <comment id="14032047" author="fpj" created="Mon, 16 Jun 2014 00:19:51 +0100"  >&lt;blockquote&gt;&lt;p&gt;Use of an enum for flags&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ideally, we use something like an enumset here, but I&apos;m not sure if it works well with protobufs. Another option is a list of enum instances. I don&apos;t like very much the use of combinations of flags, although I understand Sijie is proposing it for efficient processing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sending error messages twice&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m assuming that a packet-level error is something like a message not parsing and an app level error is something like an entry doesn&apos;t exist in a ledger. If this interpretation is right, then I don&apos;t see us sending both types of error codes in the same message. If the message goes through ok, but the operation doesn&apos;t process correctly (e.g., entry doesn&apos;t exist), then we only need the application-level error. In the case of a packet-level error, then we return only that error and the client produces a return code if needed. Also, the error codes seem to be logically separated, so they should be perhaps in different enums.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Use of enum for errors&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Introducing logic for backward compatibility is tricky. It is not hard to forget something or simply not get it 100% right. Using integers, however, is less clear, less structure, and opens up to errors due to unused values. In general, I prefer the use of enums, but I&apos;m not sure what the protobufs code does if it finds an unknown value. Is there a way of telling it to assign a default value?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Too much required&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sijie&apos;s assessment about ledgerid, entryid seems right to me. I wonder if there is something else here that Ivan is concerned about.&lt;/p&gt;
</comment>
                            <comment id="14036600" author="fpj" created="Wed, 18 Jun 2014 23:55:59 +0100"  >&lt;p&gt;are you guys tired of this issue? let&apos;s try to come to a resolution, this is issue is important, yes?&lt;/p&gt;</comment>
                            <comment id="14037184" author="ikelly" created="Thu, 19 Jun 2014 10:50:46 +0100"  >&lt;p&gt;you need to vote then. Sijie and I tried to come to consensus for many weeks on this and failed. But we don&apos;t need consensus, just a simple vote. As it is now, there are two +1 and one -1, so the patch could go in as is.&lt;/p&gt;</comment>
                            <comment id="14042815" author="fpj" created="Wed, 25 Jun 2014 00:01:11 +0100"  >&lt;p&gt;I actually like the way the patch is done. I also prefer to use enums rather than booleans. I agree though that it would be nice to send a bit vector of flags rather than a single enum to avoid the combinatorial explosion. We should check how other people have done with protobufs, I&apos;m sure we are not the first to encounter this problem. I did a bit of search, but couldn&apos;t find anything. &lt;/p&gt;

&lt;p&gt;I&apos;m also good with separating &quot;packet-level errors&quot; from &quot;app-level errors&quot;. I&apos;m just not sure I agree with the codes in StatusCodes. For example, I don&apos;t think &quot;NOLEDGER&quot; is a packet-level error. A packet-level error (or differently stated, a server error as opposed to application error) is one that reflects a problem that didn&apos;t allow the request to complete. No ledger means that the request execution has completed, but it turns out that the ledger doesn&apos;t exist, so report it. This is different from say having an IO exception that prevents the processing of the request from completing. I think that if we could separate those a bit better, then it would make more sense the separation.&lt;/p&gt;

&lt;p&gt;About the use of enum for errors, I was checking the code and the valueOf method it produces has a default value, which is null. I haven&apos;t actually checked. If the default value propagates up, then we can spot that there is an unknown value possibly because of a newer version. I haven&apos;t checked, though, how it works on the decoder side. &lt;/p&gt;

&lt;p&gt;The last point of &quot;too much required&quot; is a bit obscure to me, I&apos;m not sure what to do with it, so I&apos;m ignoring.&lt;/p&gt;

&lt;p&gt;If you just want a straight vote, then I&apos;d stick to my previous +1, but my preference is to work a bit on those error codes and perhaps investigate if protobufs has a better way of dealing with enums and flags. It doesn&apos;t sound hard to take an enumset and transform it into a bit vector, so maybe protobufs should support it or provide similar functionality.&lt;/p&gt;</comment>
                            <comment id="14048401" author="hustlmsp" created="Tue, 1 Jul 2014 02:32:27 +0100"  >&lt;p&gt;sorry for late response. I would try to get back to your comment ASAP.&lt;/p&gt;</comment>
                            <comment id="14061812" author="hustlmsp" created="Tue, 15 Jul 2014 08:55:33 +0100"  >&lt;p&gt;sorry for late response.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;About the use of enum for errors, I was checking the code and the valueOf method it produces has a default value, which is null. I haven&apos;t actually checked.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;to be fair and clear, I wrote a simple program for protobuf enum. &lt;a href=&quot;https://github.com/sijie/protobuf-enum&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sijie/protobuf-enum&lt;/a&gt; . in the example, PB1 (old protocol) will throw exception on decoding PB2 (new protocol with new enum value). for enums in requests, server with old protocol doesn&apos;t know new protocol (e.g. new request type), it would catch the exceptions and treat is as unknown requests. for enums in responses, as I mentioned, I don&apos;t like to swallow the status codes introduced in different protocols, server will only respond corresponding status code the known by given version.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I actually like the way the patch is done. I also prefer to use enums rather than booleans. I agree though that it would be nice to send a bit vector of flags rather than a single enum to avoid the combinatorial explosion.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;in zookeeper, EPHEMERAL / EPHEMERAL_SEQUENTIAL / PERSISTENT / PERSISTENT_SEQUENTIAL are used for representing create mode. what do you think about this? does it introduce any troubles in zookeeper for extension or maintenance? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;packet-level errors&quot; from &quot;app-level errors&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;the packet-level error isn&apos;t as what you described for server errors. the packet-level errors are same as app-level errors, which are used to represent the common failures of individual requests inside a package. e.g. a AUTH_FAILURE request means all requests failed with AUTH_FAILURE, a NO_LEDGER batch read means all requests underlying failed with NO_LEDGER, a SUCCESS batch read with some SUCCESS entries and some NO_ENTRY entries (due to stripping).&lt;/p&gt;

&lt;p&gt;The usage here is quite similar as how ZooKeeper Transaction batch zookeeper requests without transaction semantic.&lt;/p&gt;







</comment>
                            <comment id="14062021" author="fpj" created="Tue, 15 Jul 2014 14:03:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;in zookeeper, EPHEMERAL / EPHEMERAL_SEQUENTIAL / PERSISTENT / PERSISTENT_SEQUENTIAL are used for representing create mode. what do you think about this? does it introduce any troubles in zookeeper for extension or maintenance?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this has been mentioned before or possibly I thought of that and didn&apos;t say it, but it is right that we do it in ZK. The difference is that those aren&apos;t error codes and there are really only two options, ephemeral and sequential. Those options have never changed, while I&apos;d expect code error codes to evolve. I still prefer to use enums over booleans, and I hope java incorporates eventually this same flag feature for enums that C# has.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the packet-level error isn&apos;t as what you described for server errors.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, got it. I think calling it packet-level error is a bit confusing, though.&lt;/p&gt;

&lt;p&gt;Just so that we come to a closure, based on all the comments, do you still feel that this patch should go in unchanged or would you like to change anything?&lt;/p&gt;</comment>
                            <comment id="14069865" author="hustlmsp" created="Tue, 22 Jul 2014 06:48:37 +0100"  >&lt;p&gt;sorry for late response. I would not do changes on protocol itself. I would update the patch with latest trunk and address minor comments on ReviewBoard.&lt;/p&gt;

&lt;p&gt;BTW, I would try to get jiras marked for 4.3.0 resolved this week. So we could cut the release end of this month.&lt;/p&gt;</comment>
                            <comment id="14069954" author="hustlmsp" created="Tue, 22 Jul 2014 08:53:05 +0100"  >&lt;p&gt;attached a new patch based on latest trunk.&lt;/p&gt;</comment>
                            <comment id="14073764" author="fpj" created="Thu, 24 Jul 2014 23:34:49 +0100"  >&lt;p&gt;+1, thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;. Committed revision 1613315.&lt;/p&gt;</comment>
                            <comment id="14073781" author="hudson" created="Thu, 24 Jul 2014 23:46:34 +0100"  >&lt;p&gt;FAILURE: Integrated in bookkeeper-trunk #714 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/714/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/714/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;: Make bookie and client use protobuf for requests (non-wire part)&lt;br/&gt;
(sijie via fpj) (fpj: rev 1613315)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/pom.xml&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtoEncoding.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DefaultPerChannelBookieClientPool.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBase.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBaseV3.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientPool.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/proto/BookkeeperProtocol.proto&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/resources/findbugsExclude.xml&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/compat-deps/pom.xml&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-server/pom.xml&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14075287" author="hudson" created="Sat, 26 Jul 2014 08:18:20 +0100"  >&lt;p&gt;FAILURE: Integrated in bookkeeper-trunk #716 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/716/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/716/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-582&quot; title=&quot;Make bookie and client use protobuf for requests (non-wire part)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-582&quot;&gt;&lt;del&gt;BOOKKEEPER-582&lt;/del&gt;&lt;/a&gt;: Make bookie and client use protobuf for requests (non-wire part) (missing files) (sijie) (sijie: rev 1613567)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/compat-deps/bookkeeper-server-compat-4.2.0&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/compat-deps/bookkeeper-server-compat-4.2.0/pom.xml&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/compat-deps/hedwig-server-compat-4.2.0&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/compat-deps/hedwig-server-compat-4.2.0/pom.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310060">
                    <name>Container</name>
                                            <outwardlinks description="contains">
                                        <issuelink>
            <issuekey id="12637973">BOOKKEEPER-587</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12637976">BOOKKEEPER-589</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12518981">BOOKKEEPER-49</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12713850">BOOKKEEPER-761</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310051">
                    <name>Supercedes</name>
                                            <outwardlinks description="supercedes">
                                        <issuelink>
            <issuekey id="12629195">BOOKKEEPER-558</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12634163">BOOKKEEPER-576</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12637973">BOOKKEEPER-587</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12575911" name="0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch" size="222651" author="ikelly" created="Thu, 28 Mar 2013 18:41:31 +0000"/>
                            <attachment id="12574552" name="0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch" size="200901" author="ikelly" created="Wed, 20 Mar 2013 14:35:40 +0000"/>
                            <attachment id="12574540" name="0002-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch" size="198811" author="ikelly" created="Wed, 20 Mar 2013 13:19:32 +0000"/>
                            <attachment id="12572215" name="0003-BOOKKEEPER-582-Make-bookie-and-client-use-protobuf-f.patch" size="198811" author="ikelly" created="Wed, 6 Mar 2013 00:40:40 +0000"/>
                            <attachment id="12627935" name="BOOKKEEPER-582.diff" size="289175" author="hustlmsp" created="Mon, 10 Feb 2014 07:06:23 +0000"/>
                            <attachment id="12641030" name="BOOKKEEPER-582.v2.diff" size="291446" author="hustlmsp" created="Mon, 21 Apr 2014 06:56:58 +0100"/>
                            <attachment id="12641669" name="BOOKKEEPER-582.v3.diff" size="311439" author="hustlmsp" created="Thu, 24 Apr 2014 08:41:19 +0100"/>
                            <attachment id="12657083" name="BOOKKEEPER-582.v4.diff" size="326491" author="hustlmsp" created="Tue, 22 Jul 2014 08:53:05 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 Mar 2013 13:41:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315963</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzcdev:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>316306</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>