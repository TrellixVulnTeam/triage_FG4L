<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:25:55 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-294/BOOKKEEPER-294.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-294] Not able to start the bookkeeper before the ZK session timeout.</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-294</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;Not able to start the bookkeeper before the ZK session timeout.&lt;/p&gt;

&lt;p&gt;Here i killed the bookie and started again.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;2012-06-12 20:00:25,220 - INFO  [main:LedgerCache@65] - openFileLimit is 900, pageSize is 8192, pageLimit is 456781
2012-06-12 20:00:25,238 - ERROR [main:Bookie@453] - ZK exception registering ephemeral Znode for Bookie!
org.apache.zookeeper.KeeperException$NodeExistsException: KeeperErrorCode = NodeExists for /ledgers/available/10.18.40.216:3181
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:119)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
	at org.apache.zookeeper.ZooKeeper.create(ZooKeeper.java:778)
	at org.apache.bookkeeper.bookie.Bookie.registerBookie(Bookie.java:450)
	at org.apache.bookkeeper.bookie.Bookie.&amp;lt;init&amp;gt;(Bookie.java:348)
	at org.apache.bookkeeper.proto.BookieServer.&amp;lt;init&amp;gt;(BookieServer.java:64)
	at org.apache.bookkeeper.proto.BookieServer.main(BookieServer.java:249)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12560438">BOOKKEEPER-294</key>
            <summary>Not able to start the bookkeeper before the ZK session timeout.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rakeshr">Rakesh R</assignee>
                                    <reporter username="gopinathan.av">Gopinathan A</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Jun 2012 05:56:56 +0100</created>
                <updated>Wed, 11 Sep 2013 05:27:49 +0100</updated>
                            <resolved>Thu, 5 Jul 2012 14:10:09 +0100</resolved>
                                    <version>4.1.0</version>
                                    <fixVersion>4.2.0</fixVersion>
                    <fixVersion>4.1.1</fixVersion>
                                    <component>bookkeeper-server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="13294219" author="fpj" created="Wed, 13 Jun 2012 08:08:49 +0100"  >&lt;p&gt;I think this is included in another jira already. We have discussed zookeeper session expiration initially in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-281&quot; title=&quot;BKClient is failing when zkclient connection delays&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-281&quot;&gt;&lt;del&gt;BOOKKEEPER-281&lt;/del&gt;&lt;/a&gt; and created a new issue, &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-284&quot; title=&quot;Review ZooKeeper usage in BookKeeper&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-284&quot;&gt;&lt;del&gt;BOOKKEEPER-284&lt;/del&gt;&lt;/a&gt;. The scope of &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-284&quot; title=&quot;Review ZooKeeper usage in BookKeeper&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-284&quot;&gt;&lt;del&gt;BOOKKEEPER-284&lt;/del&gt;&lt;/a&gt; is broader, though, since we&apos;d like to review our use of ZK there. I suggest we close this jira and focus on &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-284&quot; title=&quot;Review ZooKeeper usage in BookKeeper&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-284&quot;&gt;&lt;del&gt;BOOKKEEPER-284&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13294225" author="umamaheswararao" created="Wed, 13 Jun 2012 08:23:17 +0100"  >&lt;p&gt;Hi Flavio, This is not about retries on disconnects or session timeouts.&lt;br/&gt;
Seems like, before session timeout, if we restart bookie immedaiately, it is failing with NodeExistsException. Because prevous bookie has the znode /ledgers/available/10.18.40.216:3181. On restart if it tries to create, It throws this error. Let&apos;s clean that path if exists. &lt;/p&gt;
</comment>
                            <comment id="13294254" author="rakeshr" created="Wed, 13 Jun 2012 09:04:16 +0100"  >&lt;p&gt;Yeah. On bookie start up, it will delete the bookie registration path on NodeExistsException and the new zk client will again creates the path and continue startup.&lt;/p&gt;</comment>
                            <comment id="13294260" author="fpj" created="Wed, 13 Jun 2012 09:21:20 +0100"  >&lt;p&gt;Right, I should have looked more carefully at the log excerpt, it is about bookies not clients. If the znode still exists, then the session from the previous instance of the bookie hasn&apos;t expired. I don&apos;t see a problem right now with just deleting the znode if it still exists.&lt;/p&gt;</comment>
                            <comment id="13294268" author="fpj" created="Wed, 13 Jun 2012 09:42:12 +0100"  >&lt;p&gt;Let me add another comment. One potential problem with deleting the znode is in the case that we have two bookies with the same identity. I&apos;m assuming that independent of the identification scheme we use, the administrator will be careful not to let it happen. Having two bookies with the same identity could cause inconsistencies in the state of a ledger. Is it ok to assume that there won&apos;t be two bookies with the same identity up?&lt;/p&gt;</comment>
                            <comment id="13294280" author="hustlmsp" created="Wed, 13 Jun 2012 09:53:54 +0100"  >&lt;p&gt;I think we could do this assumption. because only one process could listen on same port. For different machines use same ip to fake same identity, we have Cookie to avoid fake one to start.&lt;/p&gt;</comment>
                            <comment id="13294310" author="rakeshr" created="Wed, 13 Jun 2012 11:03:08 +0100"  >&lt;p&gt;Thanks all. I have uploaded patch by assuming, there will not be any fake bookie exists with same identity. In the patch, I&apos;m removing the old bookie&apos;s registration path if exists and continue bookie startup. &lt;/p&gt;

&lt;p&gt;Please review the patch.&lt;/p&gt;</comment>
                            <comment id="13294311" author="rakeshr" created="Wed, 13 Jun 2012 11:03:14 +0100"  >&lt;p&gt;Thanks all. I have uploaded patch by assuming, there will not be any fake bookie exists with same identity. In the patch, I&apos;m removing the old bookie&apos;s registration path if exists and continue bookie startup. &lt;/p&gt;

&lt;p&gt;Please review the patch.&lt;/p&gt;</comment>
                            <comment id="13294323" author="fpj" created="Wed, 13 Jun 2012 11:21:52 +0100"  >&lt;p&gt;Thanks, Rakesh. Why don&apos;t you simply submit zk.delete right before zk.create asynchronously? This way we can replace removeOldBookieRegistration with a pretty simple callback. Also, could you give a more descriptive name to the test, like &quot;BookieInitializationTest&quot; or something similar, instead of BookieTest?&lt;/p&gt;</comment>
                            <comment id="13294360" author="rakeshr" created="Wed, 13 Jun 2012 12:27:59 +0100"  >&lt;p&gt;Thanks Flavio for the review.&lt;/p&gt;

&lt;p&gt;Hope you are pointing me to use like:-&lt;br/&gt;
During bk registration, first will call zk.delete(path,-1,new VoidCallback()) directly without having any zk.exists() check. Inside the delete callback will do the creation of bkRegistrationPath. &lt;/p&gt;

&lt;p&gt;Am I correct?&lt;/p&gt;</comment>
                            <comment id="13294443" author="fpj" created="Wed, 13 Jun 2012 14:29:25 +0100"  >&lt;p&gt;What about something like this, Rakesh? (I haven&apos;t changed the name of the test case, btw)&lt;/p&gt;</comment>
                            <comment id="13294446" author="fpj" created="Wed, 13 Jun 2012 14:30:55 +0100"  >&lt;p&gt;Canceling until we agree on the way to do this.&lt;/p&gt;</comment>
                            <comment id="13294462" author="rakeshr" created="Wed, 13 Jun 2012 14:59:20 +0100"  >&lt;p&gt;Oh! You meant zookeeper server will first process the zkc.delete request and after that will process the zkc.create request?&lt;/p&gt;</comment>
                            <comment id="13294506" author="fpj" created="Wed, 13 Jun 2012 15:55:03 +0100"  >&lt;p&gt;Yes, that&apos;s what I meant. This way we don&apos;t have to wait for the delete to complete and we eliminate the exists call. The delete will only have effect if the znode exists.&lt;/p&gt;</comment>
                            <comment id="13294512" author="rakeshr" created="Wed, 13 Jun 2012 16:04:37 +0100"  >&lt;p&gt;I didn&apos;t think about the ZK ordered execution behaviour. Thanks a lot. I&apos;ve changed the test case name and modified the usage of KeeperException.create(int) as it is a deprecated api.&lt;/p&gt;</comment>
                            <comment id="13294531" author="fpj" created="Wed, 13 Jun 2012 16:42:52 +0100"  >&lt;p&gt;Thanks for changing the deprecated API, I keep forgetting about that.&lt;/p&gt;

&lt;p&gt;While checking that the test fails without the patch I realized that you had changed the the access privileges to package protected. Although not a big deal, I thought that we could try to keep at least protected. I didn&apos;t want make you do another change, so I made a few modifications myself to see how it looks for you, Rakesh. Let me know what you think. I&apos;m ok to drop it if it makes the test cumbersome. &lt;/p&gt;</comment>
                            <comment id="13294546" author="rakeshr" created="Wed, 13 Jun 2012 17:03:34 +0100"  >&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Thanks, it looks more cleaner now.&lt;/p&gt;</comment>
                            <comment id="13294654" author="fpj" created="Wed, 13 Jun 2012 21:54:33 +0100"  >&lt;p&gt;+1, it is good for me. Is that a +1 from you as well, Rakesh?&lt;/p&gt;

&lt;p&gt;I was also wondering if we want to commit this to the 4.1 branch too. We don&apos;t have a 4.1.1 queue on jira right now.&lt;/p&gt;</comment>
                            <comment id="13294805" author="rakeshr" created="Thu, 14 Jun 2012 05:45:55 +0100"  >&lt;p&gt;+1 from me. I&apos;d also prefer to commit in 4.1 as well.&lt;/p&gt;</comment>
                            <comment id="13294808" author="umamaheswararao" created="Thu, 14 Jun 2012 06:11:14 +0100"  >&lt;p&gt;+1 from me as well.&lt;/p&gt;

&lt;p&gt;There is one small suggestion in test:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+            b.testRegisterBookie(conf.getBookiePort());
+        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+            Assert.fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Shouldn&apos;t &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; exception on re-registring &quot;&lt;/span&gt;
+                    + &lt;span class=&quot;code-quote&quot;&gt;&quot;same bookie!&quot;&lt;/span&gt;);
+        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need not catch this exception and suppress that exception. Anyway not catching that exception also test will fail with exception trace. Otherwise we may need to go and serach logs/ edit tests to get the exception trace what it is. I don&apos;t think it is worth give another patch for this tiny nit. Lets go ahead and we can keep this in mind for next time &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;Thanks Rakesh and Flavio for the patches. Looks great.&lt;/p&gt;</comment>
                            <comment id="13294826" author="rakeshr" created="Thu, 14 Jun 2012 07:11:13 +0100"  >&lt;p&gt;Thanks Uma for pointing out. Since it helps maintainability I&apos;ve reworked and updated the patch. Please have a look.&lt;/p&gt;</comment>
                            <comment id="13294853" author="fpj" created="Thu, 14 Jun 2012 08:16:50 +0100"  >&lt;p&gt;I&apos;d rather have in the previous way because it makes clear in the test the part we expect to fail if the bug is present. In general, my preference is to have a explicit assertion statement causing the test to fail.&lt;/p&gt;

&lt;p&gt;I&apos;m canceling the patch until we converge on this one.  &lt;/p&gt;</comment>
                            <comment id="13294854" author="hustlmsp" created="Thu, 14 Jun 2012 08:19:52 +0100"  >&lt;p&gt;the patch is good except one place &apos;new_bkRegNode&apos;. I think we should keep naming consistent using camel words. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        Stat new_bkRegNode = zkc.exists(bkRegPath, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although this jira is not a blocker, but it makes user inconvenient using bookie server. I think it worths being included in 4.1 branch. +1 for creating 4.1.1 queue.&lt;/p&gt;</comment>
                            <comment id="13294906" author="umamaheswararao" created="Thu, 14 Jun 2012 09:48:18 +0100"  >&lt;blockquote&gt;
&lt;p&gt;my preference is to have a explicit assertion statement causing the test to fail.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Here we are not asserting any of the data or anything. That statement is just for failing the test on any IOException. I agree to keep the assertion if we are making any content assertion at that place. Keeping explicit catch just for making the test fail will supress that exception trace.&lt;/p&gt;

&lt;p&gt;If we are not expecting any exception but if the flow throws that, Junit test itself will automatically fail and also we will get that exception trace to console.&lt;/p&gt;</comment>
                            <comment id="13295017" author="ikelly" created="Thu, 14 Jun 2012 14:18:08 +0100"  >&lt;p&gt;-1 on this approach. &lt;/p&gt;

&lt;p&gt;We add a shutdown hook in BookieServer, precisely for this type of situation. We can just delete the znode from Bookie#shutdown. &lt;/p&gt;</comment>
                            <comment id="13295020" author="umamaheswararao" created="Thu, 14 Jun 2012 14:24:03 +0100"  >&lt;p&gt;Abrupt kill (kill -9 and start) can not invoke shutdown hook right? So, still problem exists even if we use shutdown hook. Am I missing something from your case?&lt;/p&gt;</comment>
                            <comment id="13295028" author="fpj" created="Thu, 14 Jun 2012 14:47:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;I agree to keep the assertion if we are making any content assertion at that place. Keeping explicit catch just for making the test fail will supress that exception trace.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed, that&apos;s an excellent point, Uma. I don&apos;t like the idea of mixing failures and errors, though, so let me propose a modification to the patch, check the last patch attached, please.&lt;/p&gt;</comment>
                            <comment id="13295029" author="ikelly" created="Thu, 14 Jun 2012 14:47:44 +0100"  >&lt;p&gt;yes, kill -9 will skip shutdown hook, but I think this is ok. If you&apos;re using kill -9 there&apos;s a problem. You shouldn&apos;t be starting a bookie right away after that. I think having to wait in situations like this is preferable than possibly being able to delete someone else&apos;s availability znode.&lt;/p&gt;

&lt;p&gt;The solution in the patch is actually broken. Bookie#start is called before NIOServerFactory#start, which means that if you try to start a bookie on a machine where the bookie is already running, the running bookie&apos;s availability znode is deleted, the new bookie creates one, the new bookie tries to start NIOServerFactory and fails as the socket is already bound, so crashes, taking it&apos;s availability znode with it. The initial bookie is now running, without a availability znode, so noone can contact it. &lt;/p&gt;

&lt;p&gt;If just the shutdown hook isn&apos;t enough, I suggest checking if the znode exists and if it does, Thread.sleeping for zkTimeout, and trying again. Again though, kill -9 should be a very rare case.&lt;/p&gt;</comment>
                            <comment id="13295044" author="fpj" created="Thu, 14 Jun 2012 15:10:30 +0100"  >&lt;blockquote&gt;&lt;p&gt;If just the shutdown hook isn&apos;t enough, I suggest checking if the znode exists and if it does, Thread.sleeping for zkTimeout, and trying again. Again though, kill -9 should be a very rare case.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By deleting the znode, we are certainly violating the lease contract, that&apos;s why I asked before if it was ok to assume that there is no other possible node running with the same id. I didn&apos;t consider the case of two processes on the same node, but I suppose that is a viable scenario. Waiting for the session to expire is a sound solution to me. I suppose that if the znode is still there after zkTimeout has elapsed we crash?   &lt;/p&gt;</comment>
                            <comment id="13295050" author="ikelly" created="Thu, 14 Jun 2012 15:17:59 +0100"  >&lt;p&gt;Yup, if the znode is still there, then there&apos;s still a running node, so starting a new node is ill advised.&lt;/p&gt;</comment>
                            <comment id="13295059" author="umamaheswararao" created="Thu, 14 Jun 2012 15:25:35 +0100"  >&lt;p&gt;@Flavio&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Agreed, that&apos;s an excellent point, Uma. I don&apos;t like the idea of mixing failures and errors, though, so let me propose a modification to the patch, check the last patch attached, please.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Looks fine.&lt;/p&gt;


&lt;p&gt;@Ivan&lt;br/&gt;
 Good point.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If just the shutdown hook isn&apos;t enough, I suggest checking if the znode exists and if it does, Thread.sleeping for zkTimeout, and trying again. Again though, kill -9 should be a very rare case.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Initially me and Rakesh was thinking in this lines. As Sijie pointed in other &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-294?focusedCommentId=13294280&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13294280&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;comment&lt;/a&gt;&lt;br/&gt;
 saying that, Cookies will guard from fake bookies startup.&lt;br/&gt;
To be honest, we did not verify this point and thought multiple Bookies will not start on same address and moved to the simple fix of deleting.&lt;/p&gt;</comment>
                            <comment id="13295069" author="ikelly" created="Thu, 14 Jun 2012 15:36:58 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Cookies will guard from fake bookies startup.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Cookies will protect against two bookie&apos;s with different configurations starting. This is useful for case were you replace a machine completely, and reuse the ip. The cluster will think that any ledger which was on the original machine is still available.&lt;/p&gt;

&lt;p&gt;However, in the case you did,&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ bookkeeper-server/bin/bookkeeper bookie &amp;amp;
$ bookkeeper-server/bin/bookkeeper bookie
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;you would have nothing to protect you. The availability znode existing protects you at the moment.&lt;/p&gt;</comment>
                            <comment id="13295086" author="rakeshr" created="Thu, 14 Jun 2012 16:00:17 +0100"  >&lt;p&gt;Thanks a lot Ivan for the good point.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I suggest checking if the znode exists and if it does, Thread.sleeping for zkTimeout, and trying again.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As we thought before, need to have a sliced sleeping till zkSessionTimeOut. Is it fine for others?&lt;/p&gt;

&lt;p&gt;Also would like to know whether it should be a blocking wait/sleep and the number of retries?&lt;/p&gt;</comment>
                            <comment id="13295105" author="fpj" created="Thu, 14 Jun 2012 16:28:47 +0100"  >&lt;blockquote&gt;&lt;p&gt;As we thought before, need to have a sliced sleeping till zkSessionTimeOut. Is it fine for others?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also would like to know whether it should be a blocking wait/sleep and the number of retries?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I would say no retry. If after the session expiration period the znode is still there, then it is an indication that the admin should have a look at what is going on.&lt;/p&gt;</comment>
                            <comment id="13295355" author="hustlmsp" created="Thu, 14 Jun 2012 23:24:33 +0100"  >&lt;blockquote&gt;
&lt;p&gt;you would have nothing to protect you. The availability znode existing protects you at the moment.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;@Ivan, ur right. After checking the code how bookie server starts, the bookie server registers itself before running NIOServer. There is a bit problem, registration means the bookie server is available and ready for accepting requests, but actually NIOServer is not started. so during the gap, the requests would fail.&lt;/p&gt;

&lt;p&gt;A better sequence to start the bookie is first start bookie, start NIOServer and register bookie.&lt;/p&gt;

&lt;p&gt;If the start sequence is described as above, we could prevent two bookie servers running at same port, which could achieve the assumption I commented before. Even we could ensure such assumption, I prefer the wait/sleep proposal which is a safer way.&lt;/p&gt;

&lt;p&gt;+1 for wait/sleep solution. Besides that, I would suggest adjusting the start sequence to remove the gap between znode available and NIOServer ready.&lt;/p&gt;
</comment>
                            <comment id="13295366" author="hustlmsp" created="Thu, 14 Jun 2012 23:59:03 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ bookkeeper-server/bin/bookkeeper bookie &amp;amp;
$ bookkeeper-server/bin/bookkeeper bookie
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;think a bit more about the case Ivan mentioned. I found that we lack the ability to prevent two processes accessing (writing entry log files when replaying entries) same directories when instantiating bookies. It might make data corrupted during instantiation.&lt;/p&gt;

&lt;p&gt;I think we need some file locking on the data directories to prevent two process accessing the data directories at the same time. but it would be in another jira.&lt;/p&gt;
</comment>
                            <comment id="13295434" author="umamaheswararao" created="Fri, 15 Jun 2012 03:49:41 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
I think we need some file locking on the data directories to prevent two process accessing the data directories at the same time. but it would be in another jira.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This sounds very good point Sijie. NN also has this file lock concept for protecting its storage directories from others while it is running. If others also agrees to introduce this file locking fir directories, feel free to assign this task to me.&lt;/p&gt;


&lt;p&gt;@Sijie&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
A better sequence to start the bookie is first start bookie, start NIOServer and register bookie.

If the start sequence is described as above, we could prevent two bookie servers running at same port, which could achieve the assumption I commented before. Even we could ensure such assumption, I prefer the wait/sleep proposal which is a safer way.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But both Bookie and NIOServer are threads. Again we may have to wait for their successful initialization to register right. I don&apos;t like this wait here again.&lt;br/&gt;
Currently DeathWatcher is checking for their successful startups and shutting down if not started. Am i missing some thing from ur case?&lt;/p&gt;

&lt;p&gt;How about waiting for DeathWatcherInterval+, Since NIOServer can start on same bookie, It might have failed. So, DW should have identified after that Interval priod and will kill the fake bookie. If after DeathWatcherInterval+ also not killed means, that will be valid bookie. So, register bookei can wait for DeathWatcherInterval+ before deleting existig node? I am not sure this is a good suggestion, just a thought.&lt;/p&gt;</comment>
                            <comment id="13295460" author="rakeshr" created="Fri, 15 Jun 2012 06:38:08 +0100"  >&lt;p&gt;Thanks everyone. If I understand the discussion correctly. I&apos;m trying to summarize, now we have the following cases:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;cite&gt;New bookie tries to start and fails as the socket is already bound, so crashes, taking it&apos;s availability znode with it.&lt;/cite&gt;&lt;br/&gt;
How about moving the new &apos;NIOServerFactory(conf, this); to the BookieServer constructor. NIOServerFactory internally doing the ss.socket().bind(new InetSocketAddress(conf.getBookiePort())); and will protect the already running bookie by throwing BindException. If I do this modification, I will be able to safely delete the znode if exists. How does it sound?
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; BookieServer(ServerConfiguration conf) 
            &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException, KeeperException, InterruptedException, BookieException {
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.conf = conf;

        nioServerFactory = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NIOServerFactory(conf, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);

        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.bookie = newBookie(conf);
        isStatsEnabled = conf.isStatisticsEnabled();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;&lt;/li&gt;
	&lt;li&gt;&lt;cite&gt;Before finishing the NIO startup, if client gets the available bookie would cause the client requests to fail.&lt;/cite&gt;&lt;br/&gt;
I&apos;m thinking, this is a small gap in milliseconds. Still if everyone feels is a problem. Registration of the bookie can be delayed till successful NIOServer startup. Because the bkclient will not see the server unless it is registered.
&lt;hr /&gt;&lt;/li&gt;
	&lt;li&gt;&lt;cite&gt;file lock concept for protecting its storage directories from others while it is running.&lt;/cite&gt;&lt;br/&gt;
I agree to open another JIRA and work on there.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;-Rakesh&lt;/p&gt;</comment>
                            <comment id="13295504" author="fpj" created="Fri, 15 Jun 2012 08:34:17 +0100"  >&lt;p&gt;I&apos;m not convinced that we need a separate lock mechanism for directories. Why can&apos;t we use the zookeeper lock to imply that the directories are locked? In my view, the zookeeper lock implies that a bookie with a given identity is available and there is some process responsible for that identity. That includes the directories it is using. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A better sequence to start the bookie is first start bookie, start NIOServer and register bookie.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If my rationale is correct, I think we can achieve this, without a race, by making this simple change in BookieServer:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void start() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
        nioServerFactory = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NIOServerFactory(conf, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);

        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.bookie.start();

        nioServerFactory.start();
        running = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
        deathWatcher = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DeathWatcher(conf);
        deathWatcher.start();

        &lt;span class=&quot;code-comment&quot;&gt;// register jmx
&lt;/span&gt;        registerJMX();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I simply swapped the first two statements. My rationale is: we create the socket and start/register the bookie. We may receive a request before starting the NIOServerFactory, but the socket is there already. &lt;/p&gt;</comment>
                            <comment id="13295522" author="ikelly" created="Fri, 15 Jun 2012 09:17:44 +0100"  >&lt;p&gt;Swapping these around is a good idea. There&apos;s no need for a separate locking mechanism on the filesystem, we already have a lock in zookeeper and a lock on the port. If an admin is trying to start two bookies, with different port configurations, but the same disk configurations, the cookie will stop them. &lt;/p&gt;</comment>
                            <comment id="13295545" author="umamaheswararao" created="Fri, 15 Jun 2012 10:11:45 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I simply swapped the first two statements. My rationale is: we create the socket and start/register the bookie. We may receive a request before starting the NIOServerFactory, but the socket is there already. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yep, simply swapping should work as it is binding in NIOServerFactory ctor itself. +1 to go with this idea.&lt;/p&gt;</comment>
                            <comment id="13295588" author="rakeshr" created="Fri, 15 Jun 2012 12:07:54 +0100"  >&lt;blockquote&gt;&lt;p&gt;Swapping these around is a good idea.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Swapping is a simple and good solution. &lt;br/&gt;
But the reason I tried to keep NIOServerFactory in BookieServer constructor is:&lt;/p&gt;

&lt;p&gt;In the case,&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ bookkeeper-server/bin/bookkeeper bookie &amp;amp;
$ bookkeeper-server/bin/bookkeeper bookie
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I just swap the NIOServerFactory and this.bookie.start(); statements. Here the BookieServer will creates newBookie(conf) and this inturn will do replay journals readJournal();. After this, when starting the bookie will get BindException.&lt;/p&gt;

&lt;p&gt;I feel, immediately can fail even before bookie creation by keeping NIOServerFactory in BookieServer constructor. Is this fine?&lt;/p&gt;

</comment>
                            <comment id="13295637" author="fpj" created="Fri, 15 Jun 2012 13:58:28 +0100"  >&lt;p&gt;If I understand your concern correctly, Rakesh, you don&apos;t want to perform an I/O-intensive task if the bookie is not going to start, so it is an optimization. Do you have any other concern with respect to correctness? &lt;/p&gt;

&lt;p&gt;If newBookie(conf) is I/O-intensive, then perhaps it is better off in start(), not in the constructor.&lt;/p&gt;</comment>
                            <comment id="13295645" author="rakeshr" created="Fri, 15 Jun 2012 14:13:29 +0100"  >&lt;p&gt;@Flavio&lt;br/&gt;
Yeah exactly, just my thought is to fail fast.&lt;/p&gt;</comment>
                            <comment id="13296068" author="hustlmsp" created="Sat, 16 Jun 2012 03:20:42 +0100"  >&lt;p&gt;+1 for swapping.&lt;/p&gt;</comment>
                            <comment id="13296108" author="hustlmsp" created="Sat, 16 Jun 2012 06:06:02 +0100"  >&lt;p&gt;&amp;gt; If newBookie(conf) is I/O-intensive, then perhaps it is better off in start(), not in the constructor.&lt;/p&gt;

&lt;p&gt;we&apos;d move readJournal() to bookie#start(). otherwise swapping could not avoid two processes accessing directories at same time.&lt;/p&gt;</comment>
                            <comment id="13398479" author="rakeshr" created="Thu, 21 Jun 2012 16:11:02 +0100"  >&lt;p&gt;Attached latest patch. &lt;br/&gt;
Here I just done the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;swapped NIOFactory and bookie.start()&lt;/li&gt;
	&lt;li&gt;moved the readJournal() to bookie#start()&lt;/li&gt;
	&lt;li&gt;modified NONODE log priority to debug, considering normal startup.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13401208" author="rakeshr" created="Tue, 26 Jun 2012 08:06:39 +0100"  >&lt;p&gt;@Sijie&lt;br/&gt;
Could you please review the latest patch.&lt;/p&gt;</comment>
                            <comment id="13401248" author="fpj" created="Tue, 26 Jun 2012 09:41:54 +0100"  >&lt;p&gt;After a comment from Ivan, I thought we had agreed to not delete the znode lock. Have I misunderstood it?&lt;/p&gt;</comment>
                            <comment id="13401270" author="rakeshr" created="Tue, 26 Jun 2012 10:36:17 +0100"  >&lt;p&gt;@Flavio&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;After a comment from Ivan, I thought we had agreed to not delete the znode lock. Have I misunderstood it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As I understand, the reason why Ivan disagrees due to the following issue:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The solution in the patch is actually broken. Bookie#start is called before NIOServerFactory#start, which means that if you try to start a bookie on a machine where the bookie is already running, the running bookie&apos;s availability znode is deleted, the new bookie creates one, the new bookie tries to start NIOServerFactory and fails as the socket is already bound, so crashes, taking it&apos;s availability znode with it. The initial bookie is now running, without a availability znode, so noone can contact it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This problem is resolved after the swapping of NIO and bookie#start. Now the chance of corrupting already running bookie is no more. So is the reason I continued with znode deletion during bookie#registration. &lt;/p&gt;


&lt;p&gt;Hi Ivan, please correct me if I interpreted your comments wrongly.&lt;/p&gt;
</comment>
                            <comment id="13401279" author="fpj" created="Tue, 26 Jun 2012 11:12:51 +0100"  >&lt;p&gt;Hi Rakesh, Check please the followup comments starting with this one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-294?focusedCommentId=13295044&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13295044&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/BOOKKEEPER-294?focusedCommentId=13295044&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13295044&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ack that I see no explicit agreement, though, but not deleting is what I gathered from the followup comments. The znode should go away by itself in the case the previous incarnation of the bookie is really gone.&lt;/p&gt;</comment>
                            <comment id="13401310" author="rakeshr" created="Tue, 26 Jun 2012 12:34:38 +0100"  >&lt;p&gt;From the discussions we have the following solutions:-&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;delete the znode in shutdownhook&lt;/li&gt;
	&lt;li&gt;delete the znode in startup&lt;/li&gt;
	&lt;li&gt;if znode exists, wait till the session expiry (here changing the zkTimeout and starts back will cause inconsistencies)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I&apos;d like to know which among is good. Hi folks, please help us to find good approach&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13401324" author="fpj" created="Tue, 26 Jun 2012 13:00:00 +0100"  >&lt;p&gt;My preference is 3 with no retries. If after the timeout period the znode is still there, then the operators needs to go figure out what&apos;s wrong.&lt;/p&gt;</comment>
                            <comment id="13401900" author="hustlmsp" created="Wed, 27 Jun 2012 03:39:06 +0100"  >&lt;blockquote&gt;
&lt;p&gt;+1 for wait/sleep solution. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;from my previous comment, I&apos;d prefer solution 3.&lt;/p&gt;</comment>
                            <comment id="13405030" author="rakeshr" created="Mon, 2 Jul 2012 13:11:48 +0100"  >&lt;p&gt;Thanks all, I&apos;ve uploaded latest patch includes timeout if node exists. Please review.&lt;/p&gt;</comment>
                            <comment id="13405039" author="ikelly" created="Mon, 2 Jul 2012 13:28:46 +0100"  >&lt;p&gt;I discussed this with Flavio last week, and we concluded that the best solution would be 3. &lt;/p&gt;

&lt;p&gt;I also had a look at the code, and the situation where the znode persists past the process should only ever occur on a kill -9 shutdown, because the Bookie#shutdown closes the zookeeper sessions for the bookie, which should mean all ephemerals have been removed. &lt;/p&gt;</comment>
                            <comment id="13405041" author="ikelly" created="Mon, 2 Jul 2012 13:37:26 +0100"  >&lt;p&gt;Patch looks good. However, could you move the Watcher out of the if () clause. i.e.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Watcher w = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Watcher() {
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void process(WatchedEvent event) {
        &lt;span class=&quot;code-comment&quot;&gt;// Check &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; prev znode deletion. Connection expiration is
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// not handling, since bookie has logic to shutdown.
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (EventType.NodeDeleted == event.getType()) {
             prevNodeLatch.countDown();
        }
    }
}
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; != zk.exists(zkBookieRegPath,w)) {
    LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Previous bookie registration znode: &quot;&lt;/span&gt;
             + zkBookieRegPath
             + &lt;span class=&quot;code-quote&quot;&gt;&quot; exists, so waiting zk sessiontimeout: &quot;&lt;/span&gt;
             + conf.getZkTimeout() + &lt;span class=&quot;code-quote&quot;&gt;&quot;ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; znode deletion&quot;&lt;/span&gt;);
    &lt;span class=&quot;code-comment&quot;&gt;// waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the previous bookie reg znode deletion
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!prevNodeLatch.await(conf.getZkTimeout(),
                             TimeUnit.MILLISECONDS)) {
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; KeeperException.NodeExistsException(
            zkBookieRegPath);
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As it is, it makes the flow of the method harder to follow.&lt;/p&gt;</comment>
                            <comment id="13405050" author="rakeshr" created="Mon, 2 Jul 2012 14:08:23 +0100"  >&lt;p&gt;Thanks Ivan. Latest patch addressing the above comment.&lt;/p&gt;</comment>
                            <comment id="13405114" author="ikelly" created="Mon, 2 Jul 2012 17:35:01 +0100"  >&lt;p&gt;Latest patch looks good to me. +1. Will commit tomorrow, unless any says otherwise.&lt;/p&gt;</comment>
                            <comment id="13405726" author="ikelly" created="Tue, 3 Jul 2012 10:59:05 +0100"  >&lt;p&gt;The tests don&apos;t check out for this. &lt;br/&gt;
In BookieInitializationTest you shouldn&apos;t check for the exact text, as I guess it changes across java implementations.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Assert.assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;BKServer allowed duplicate startups!&quot;&lt;/span&gt;,
                    &lt;span class=&quot;code-quote&quot;&gt;&quot;Address already in use: bind&quot;&lt;/span&gt;, be.getMessage());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On mac, the error code is &quot;Address already in use&quot;. Nothing about bind. It&apos;s better to change this to assertTrue() on be.getMessage().contains(&quot;Address already in use&quot;).&lt;/p&gt;

&lt;p&gt;There are failures in BookieJournalTest. The journal is no longer read in the constructor, so anywhere a Bookie is created in these tests, you need to call readJournal afterwards. Don&apos;t call start, as that starts GC and stuff we&apos;re not interested in in the test, and which may interfere.&lt;/p&gt;
</comment>
                            <comment id="13405826" author="rakeshr" created="Tue, 3 Jul 2012 12:58:50 +0100"  >&lt;p&gt;Oh! thats correct. I&apos;ll soon upload the patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There are failures in BookieJournalTest. The journal is no longer read in the constructor, so anywhere a Bookie is created in these tests, you need to call readJournal afterwards.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How about changing the visibility of readJournal() to default?&lt;/p&gt;</comment>
                            <comment id="13406540" author="rakeshr" created="Wed, 4 Jul 2012 15:09:44 +0100"  >&lt;p&gt;Addressing Ivan&apos;s comment. I&apos;ve increased the readJournal() visibility to default.&lt;/p&gt;</comment>
                            <comment id="13407078" author="ikelly" created="Thu, 5 Jul 2012 14:10:09 +0100"  >&lt;p&gt;Committed revision 1357587 for 4.1.1&lt;br/&gt;
Committed revision 1357581 for trunk.&lt;/p&gt;</comment>
                            <comment id="13407092" author="hudson" created="Thu, 5 Jul 2012 14:28:04 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #592 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/592/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/592/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-294&quot; title=&quot;Not able to start the bookkeeper before the ZK session timeout.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-294&quot;&gt;&lt;del&gt;BOOKKEEPER-294&lt;/del&gt;&lt;/a&gt;: Not able to start the bookkeeper before the ZK session timeout. (rakeshr via ivank) (Revision 1357581)&lt;/p&gt;

&lt;p&gt;     Result = ABORTED&lt;br/&gt;
ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12532394">BOOKKEEPER-116</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12531978" name="BOOKKEEPER-294.1.patch" size="7980" author="rakeshr" created="Wed, 13 Jun 2012 15:59:36 +0100"/>
                            <attachment id="12531986" name="BOOKKEEPER-294.2.patch" size="8399" author="fpj" created="Wed, 13 Jun 2012 16:42:52 +0100"/>
                            <attachment id="12532042" name="BOOKKEEPER-294.3.patch" size="8434" author="rakeshr" created="Thu, 14 Jun 2012 07:03:31 +0100"/>
                            <attachment id="12532077" name="BOOKKEEPER-294.4.patch" size="8710" author="fpj" created="Thu, 14 Jun 2012 14:45:00 +0100"/>
                            <attachment id="12532881" name="BOOKKEEPER-294.5.patch" size="10626" author="rakeshr" created="Thu, 21 Jun 2012 16:03:53 +0100"/>
                            <attachment id="12534270" name="BOOKKEEPER-294.6.patch" size="16104" author="rakeshr" created="Mon, 2 Jul 2012 13:07:07 +0100"/>
                            <attachment id="12534272" name="BOOKKEEPER-294.7.patch" size="16170" author="rakeshr" created="Mon, 2 Jul 2012 14:05:30 +0100"/>
                            <attachment id="12535103" name="BOOKKEEPER-294.8.patch" size="17971" author="rakeshr" created="Wed, 4 Jul 2012 15:10:32 +0100"/>
                            <attachment id="12531967" name="BOOKKEEPER-294.patch" size="7720" author="fpj" created="Wed, 13 Jun 2012 14:29:25 +0100"/>
                            <attachment id="12531944" name="BOOKKEEPER-294.patch" size="8053" author="rakeshr" created="Wed, 13 Jun 2012 10:49:31 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 13 Jun 2012 07:08:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>293528</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyn5zj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>169157</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>