<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:29:23 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-325/BOOKKEEPER-325.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-325] Delay the replication of a ledger if RW found that its last fragment is in underReplication.</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-325</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;When RW found that ledger&apos;s last fragment is in underReplication state, then we should delay that ledger replication for some grace period. optimally we can replicate other fragments.&lt;/p&gt;

&lt;p&gt;The idea is, Whenever it finds the last fragement is under replicated, It can add into PendingReplication list.&lt;br/&gt;
There will be a small daemon, which will check for the timeouts of this ledgers. &lt;/p&gt;

&lt;p&gt;Once it timed out , it will trigger the normal replication process if it is not in last fragment. Otherwise, it will fence the ledger and will trigger the replication nomally.&lt;/p&gt;

&lt;p&gt;see the discussion for more info:&lt;br/&gt;
&lt;a href=&quot;http://markmail.org/message/ruhhxxgvuqnjlu2s#query:+page:1+mid:f6ifo4sizulwiaem+state:results&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://markmail.org/message/ruhhxxgvuqnjlu2s#query:+page:1+mid:f6ifo4sizulwiaem+state:results&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12597243">BOOKKEEPER-325</key>
            <summary>Delay the replication of a ledger if RW found that its last fragment is in underReplication.</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12553925">BOOKKEEPER-237</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="umamaheswararao">Uma Maheswara Rao G</assignee>
                                    <reporter username="umamaheswararao">Uma Maheswara Rao G</reporter>
                        <labels>
                    </labels>
                <created>Tue, 3 Jul 2012 14:53:08 +0100</created>
                <updated>Wed, 13 Feb 2013 15:47:02 +0000</updated>
                            <resolved>Wed, 12 Sep 2012 19:36:39 +0100</resolved>
                                    <version>4.2.0</version>
                                    <fixVersion>4.2.0</fixVersion>
                                    <component>bookkeeper-auto-recovery</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13441171" author="umamaheswararao" created="Fri, 24 Aug 2012 15:13:16 +0100"  >&lt;p&gt;In one case, thare will be a chance of unnecessary switch for NN.&lt;/p&gt;

&lt;p&gt;One bookie failed in the current ensemble of ledger.&lt;br/&gt;
NN is just idle for few seconds (may be as per some user scenarios of NN usage)&lt;/p&gt;

&lt;p&gt;Now Auditor detected that this ledger as UnderReplicated.&lt;br/&gt;
ReplicationWorker picked that ledger for replication and found that ledger is still open.&lt;/p&gt;

&lt;p&gt;Now ReplicationWorker handedover that ledger to PendingReplicationWorker(This JIRA work).&lt;/p&gt;

&lt;p&gt;PRW did force fence of the ledger as ledger is still open after the PRW timeout. (This is as per our previous discussion for the current JIRA solution)&lt;/p&gt;

&lt;p&gt;Now NN starts writing edits and found ledger fenced and will shutdown&lt;/p&gt;

&lt;p&gt;Thinking from Namenode perspective, this particular switch may be unnecessary. &lt;br/&gt;
For now, the above behaviour can be the solution.&lt;/p&gt;

&lt;p&gt;In Future, do we need to enhance that? like some how clients should be able to detect that this particular fence happend because of PRW.&lt;/p&gt;

&lt;p&gt;So, with this hint, NN may handle to open new ledger from same NN rather than shutting down directly.&lt;br/&gt;
This is very high level thought I am thinking of.&lt;/p&gt;

&lt;p&gt;@Ivan, If you have some thoughts to avoid such situation, please share.&lt;br/&gt;
May be we can discuss this in separate JIRA.&lt;/p&gt;
</comment>
                            <comment id="13443334" author="umamaheswararao" created="Tue, 28 Aug 2012 19:14:50 +0100"  >&lt;p&gt;Attached the patch with my initial idea in implementation here.&lt;br/&gt;
Ready for approach review. I may have to add some javadocs and some testing has to be done on it. Attached mainly for approach review!&lt;/p&gt;</comment>
                            <comment id="13444840" author="umamaheswararao" created="Thu, 30 Aug 2012 10:59:16 +0100"  >&lt;p&gt;I have to handle one more case in that patch. i.e, currently I am simply fencing after penidng replication timeout if ledger is in open state.&lt;br/&gt;
Here we have to recheck whether the fragment still presnts as last fragment or not. ex: if RW added the ledger to pending replication and client reformed the ensemble immediately after that. So, the last fragment for that ledger will not be in under replication, because older fragment will just move one step above the last fragment. Current last fragment will be newly created ensemble.&lt;br/&gt;
Will handle this case in next revision of my patch.&lt;/p&gt;</comment>
                            <comment id="13446069" author="ikelly" created="Fri, 31 Aug 2012 16:53:14 +0100"  >&lt;p&gt;I don&apos;t like the idea of the deferred ledgers being moved to another thread. I think it complicates this unnecessarily. If a ledger is open and needs to wait for the grace period, it doesn&apos;t mean that it needs to be recovered immediately when the grace period is over. It&apos;s enough to do it after the recovery worker finishes what it&apos;s currently doing. As such, we just need to keep a record of the ledger which needs to be recovered later, while still holding onto the lock for it. Then we can recovery other ledgers if they&apos;re available. Then the next time we enter the ReplicationWorker loop, before calling #getLedgerToRereplicate(), have a snippet of code such as..&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; getDeferredLedger() {
   &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (DeferredReplication dr : deferred) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis() - dr.deferredAt()) &amp;gt; configuredGraceTime) {
         &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; dr.getLedgerId();
      } 
   }
   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
}

...
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (workerRunning) {
   &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerIdToReplicate = getDeferredLedger();
   &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ledgerIdToReplicate == -1) {
      ledgerIdToReplicate = underreplManager.getLedgerToRereplicate();
   }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13446077" author="ikelly" created="Fri, 31 Aug 2012 17:03:30 +0100"  >&lt;p&gt;Actually, deferred ledgers need to have a different code path for replication, which needs to&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;open the ledger without recovery&lt;/li&gt;
	&lt;li&gt;check if the last segment needs to be rereplicated &amp;amp; and is unclosed&lt;/li&gt;
	&lt;li&gt;if no, rereplicate as normal&lt;/li&gt;
	&lt;li&gt;if yes, reopen with recovery, then rereplicate as normal&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13446097" author="umamaheswararao" created="Fri, 31 Aug 2012 17:24:19 +0100"  >&lt;p&gt;Thanks a lot, Ivan.  I am fine with this approach. Initial thought was similar to it but not exactly same.  After some &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-247?focusedCommentId=13405001&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13405001&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;discussion&lt;/a&gt;, I have chosen this path, as you have suggested that we will check that in RW in some discussion earlier.&lt;br/&gt;
I will work and get a new patch with this idea.&lt;/p&gt;</comment>
                            <comment id="13446132" author="umamaheswararao" created="Fri, 31 Aug 2012 18:02:21 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (workerRunning) {
   &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerIdToReplicate = getDeferredLedger();
   &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ledgerIdToReplicate == -1) {
      ledgerIdToReplicate = underreplManager.getLedgerToRereplicate();
   }
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think here the issue is, &lt;br/&gt;
if I have one ledger in under replicated and that last fragment is in open state, I may add that ledger to differedLedger list with holding the lock right. But getLedgerToRereplicate is a blocking call right. So, RW loop will not comeback again until some one releases lock or new underReplicated ledger added in ZK.  That might be one reason for me to push that work to diff thread, that can check the status.&lt;/p&gt;

&lt;p&gt;Am i missed something from your suggestion here? &lt;/p&gt;</comment>
                            <comment id="13446194" author="ikelly" created="Fri, 31 Aug 2012 19:15:52 +0100"  >&lt;p&gt;Ah, you&apos;re right. I had misunderstood what was happening in your patch. I thought it was passing the ledger back to the replication worker to be processed when really, what it&apos;s doing is just holding the lock on the ledger for the grace period and then opening it with recovery. Also, it shouldn&apos;t blindly open the ledger for recovery. Rather, it should only open it for recovery, if after the grace period, the last ledger fragment is the same as it is at the point of deferral (and also that it is open). I don&apos;t think it should be a permanent thread either, but rather a TimerTask. When you find a ledger with open last fragment, schedule a timertask to run after the grace period and skip the release of the lock. Then on the TimerTask triggering&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;check if last ledger fragment is still open (will require a call to checker again).&lt;/li&gt;
	&lt;li&gt;If so, then open with fencing.&lt;/li&gt;
	&lt;li&gt;In all cases, release the lock.&lt;/li&gt;
&lt;/ol&gt;

</comment>
                            <comment id="13446227" author="umamaheswararao" created="Fri, 31 Aug 2012 19:41:11 +0100"  >&lt;p&gt;In this case, we may schedule many timerTasks, if there are many open ledgers within that grace period right?&lt;br/&gt;
I felt that, simple thread would be better for processing them, because there can be multiple ledgers got added to the pending replications list. I just borrowed this concept from HDFS pending replication processing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;check if last ledger fragment is still open (will require a call to checker again).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I have to check again. this added in my previous &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-325?focusedCommentId=13444840&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13444840&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;comment&lt;/a&gt; as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If so, then open with fencing.&lt;br/&gt;
In all cases, release the lock.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think patch doing the same, it is releasing the lock in all the cases.&lt;/p&gt;

&lt;p&gt;If you don&apos;t mind, could you please list the comments which are expecting to change from this patch? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ( small confusions for me from above comments)&lt;/p&gt;

&lt;p&gt;Thanks a lot,&lt;br/&gt;
Uma &lt;/p&gt;</comment>
                            <comment id="13446253" author="ikelly" created="Fri, 31 Aug 2012 19:57:40 +0100"  >&lt;blockquote&gt;
&lt;p&gt;In this case, we may schedule many timerTasks, if there are many open ledgers within that grace period right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nope, only the one Timer thread.&lt;/p&gt;

&lt;p&gt;I havent gone through the patch carefully enough to have comments (hence my earlier misunderstanding over it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;). I&apos;ll try to get it done today or tomorrow, but it may be monday before I have time to.&lt;/p&gt;</comment>
                            <comment id="13446262" author="umamaheswararao" created="Fri, 31 Aug 2012 20:07:11 +0100"  >&lt;p&gt;That&apos;s Great, Ivan. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
then I will wait for comments before changing something.&lt;/p&gt;</comment>
                            <comment id="13447193" author="ikelly" created="Mon, 3 Sep 2012 11:19:57 +0100"  >&lt;p&gt;Sorry for taking so long with this. My weekend ended up getting very busy in the end, so I only got to it this morning.&lt;/p&gt;

&lt;p&gt;ClientUtil is a test class. It shouldn&apos;t be used in production code. It breaks the encapsulation of the client package for testing, but this is not something we want exposed for API users. However, it&apos;s not needed anyhow. with &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-386&quot; title=&quot;It should not be possible to replicate a ledger fragment which is at the end of an open ledger&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-386&quot;&gt;&lt;del&gt;BOOKKEEPER-386&lt;/del&gt;&lt;/a&gt;, the information needed for the decision is available in LedgerFragment. &lt;/p&gt;

&lt;p&gt;I think the call from doReplicateFragments could be flattened. Currently there&apos;s a lot of booleans being passed around, which looks to me as if flow control is being shared across two methods when it should only be in one. I think a little refactor would make things clearer here. &lt;/p&gt;

&lt;p&gt;I suggest the following:&lt;/p&gt;

&lt;p&gt;ReplicationWorker#run() should only deal with running the worker thread, so it should be quite simple.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void run() {
        workerRunning = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (workerRunning) {
            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                rereplicate();
            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
                shutdown();
                &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.currentThread().interrupt();
                LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;InterruptedException &quot;&lt;/span&gt;
                        + &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; replicating fragments&quot;&lt;/span&gt;, e);
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BKException e) {
                shutdown();
                LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;BKException &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; replicating fragments&quot;&lt;/span&gt;, e);
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (UnavailableException e) {
                shutdown();
                LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;UnavailableException &quot;&lt;/span&gt;
                        + &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; replicating fragments&quot;&lt;/span&gt;, e);
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
            }
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then #rereplicate() should contain what was in the try block and doReplicateFragment().&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
void rereplicate() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException, BKException, UnavailableException {
   &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerIdToReplicate = underreplicationManager.getLedgerToRereplicate();
   LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Going to replicate the fragments of the ledger: &quot;&lt;/span&gt;
            + ledgerIdToReplicate);
   LedgerHandle lh;
   &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
       lh = admin.openLedgerNoRecovery(ledgerIdToReplicate);
   } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BKNoSuchLedgerExistsException e) {
       &lt;span class=&quot;code-comment&quot;&gt;// Ledger might have been deleted by user
&lt;/span&gt;       LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;BKNoSuchLedgerExistsException &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; opening &quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot;ledger &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; replication. Other clients &quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot;might have deleted the ledger. &quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot;So, no harm to &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;&quot;&lt;/span&gt;);
       underreplicationManager.markLedgerReplicated(ledgerIdToReplicate);
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BKReadException e) {
       LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;BKReadException &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;&quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot; opening ledger &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; replication.&quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot; Enough Bookies might not have available&quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot;So, no harm to &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;&quot;&lt;/span&gt;);
       underreplicationManager.releaseUnderreplicatedLedger(ledgerIdToReplicate);
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BKBookieHandleNotAvailableException e) {
       LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;BKBookieHandleNotAvailableException &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;&quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot; opening ledger &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; replication.&quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot; Enough Bookies might not have available&quot;&lt;/span&gt;
                + &lt;span class=&quot;code-quote&quot;&gt;&quot;So, no harm to &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;&quot;&lt;/span&gt;);
       underreplicationManager.releaseUnderreplicatedLedger(ledgerIdToReplicate);
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
    CheckerCallback checkerCb = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CheckerCallback();
    ledgerChecker.checkLedger(lh, checkerCb);
    Set&amp;lt;LedgerFragment&amp;gt; fragments = checkerCb.waitAndGetResult();
    LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Founds fragments &quot;&lt;/span&gt; + fragments
             + &lt;span class=&quot;code-quote&quot;&gt;&quot; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; replication from ledger: &quot;&lt;/span&gt;
             + ledgerIdToReplicate);

    &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; foundOpenFragments = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (LedgerFragment ledgerFragment : fragments) {
         &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!ledgerFragment.isClosed()) {
             foundOpenFragments = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
         } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isTargetBookieExistsInFragmentEnsemble(ledgerFragment)) {
             LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Target Bookie[&quot;&lt;/span&gt; + targetBookie
                      + &lt;span class=&quot;code-quote&quot;&gt;&quot;] found in the fragment ensemble:&quot;&lt;/span&gt;
                      + ledgerFragment.getEnsemble());
             &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
         }
         admin.replicateLedgerFragment(lh,ledgerFragment, targetBookie);
    }

    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (foundOpenFragments) {
        deferLedgerLockRelease(ledgerIdToReplicate);
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
    
    CheckerCallback checkerCb = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CheckerCallback();
    ledgerChecker.checkLedger(lh, checkerCb);
    Set&amp;lt;LedgerFragment&amp;gt; fragments = checkerCb.waitAndGetResult();

    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (fragments.size() == 0) {
        LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Ledger replicated successfully. ledger id is: &quot;&lt;/span&gt;
                 + ledgerIdToReplicate);
        underreplicationManager.markLedgerReplicated(ledgerIdToReplicate);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;code-comment&quot;&gt;// Releasing the underReplication ledger lock and compete
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the replication again &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the pending fragments
&lt;/span&gt;        underreplicationManager.releaseUnderreplicatedLedger(ledgerIdToReplicate);
    }
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We&apos;d also need a try/finally to close the lh, but I left it out for clarity.&lt;/p&gt;

&lt;p&gt;The call to checkLedgers could be encapsulated in a utility method to avoid having to construct the CheckerCallback every time.&lt;/p&gt;

&lt;p&gt;For PendingReplications, I still think this would be easier to do with a TimerTask. A Timer will only use one thread, but it already has all the logic for dealing with timeouts, rather than rewriting it all again as you have in #pendingReplicationCheck.&lt;/p&gt;

&lt;p&gt;With a timer task, PendingReplications could be replaced by one method.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
void deferLedgerLockRelease(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerId) {
   &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; gracePeriod = etc etc;
   TimerTask t = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TimerTask() {
      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void run() {
          LedgerHandle lh = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
          &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
              lh = bkadmin.openLedgerNoRecovery(ledgerId);
              Set&amp;lt;LedgerFragment&amp;gt; fragments = getUnreplicatedFragments(lh);
              &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (LedgerFragment f : fragments) {
                  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!f.isClosed()) {
                      lh = bkadmin.openLedger(ledgerId);
                      &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
                  }
              }
          } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (etc etc) {
              &lt;span class=&quot;code-comment&quot;&gt;// take appropriate action
&lt;/span&gt;          } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
              &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (lh != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                  lh.close();
              }
              underreplicationManager.releaseUnderreplicatedLedger(ledgerIdToReplicate);
          }          
      }
   };
   timer.schedule(t, gracePeriod);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13447206" author="umamaheswararao" created="Mon, 3 Sep 2012 11:43:09 +0100"  >&lt;p&gt;Thanks a lot, Ivan for taking a look.&lt;br/&gt;
Regarding ClientUtil, true, its my bad, somehow found that as utils and used I guess. I will remove it. Anyway with the abstraction from LedgerChecker now, I need not access metadata out now.&lt;/p&gt;

&lt;p&gt;I have one question, seems like, we will spawn one TimerTask per one open ledger right? if I have more open ledgers, we may spawn more tasks right?&lt;/p&gt;

&lt;p&gt;I will do the refactoring what you proposed for doReplicateFragments.&lt;/p&gt;</comment>
                            <comment id="13447209" author="ikelly" created="Mon, 3 Sep 2012 11:51:25 +0100"  >&lt;p&gt;There will be one TimerTask per ledger, but only one Thread which belongs to the Timer object. TimerTask itself is very lightweight.&lt;/p&gt;</comment>
                            <comment id="13447212" author="umamaheswararao" created="Mon, 3 Sep 2012 11:58:50 +0100"  >&lt;p&gt;Ok, make sense, Will do the changes.&lt;/p&gt;</comment>
                            <comment id="13447283" author="umamaheswararao" created="Mon, 3 Sep 2012 15:03:55 +0100"  >&lt;p&gt;Marking BK-386 as requires, as I am planning to use BK-386 parts here(for identifying closed fragment).&lt;/p&gt;</comment>
                            <comment id="13447958" author="umamaheswararao" created="Tue, 4 Sep 2012 20:10:40 +0100"  >&lt;p&gt;Attached the patch which addresses the Ivan&apos;s comments above.&lt;/p&gt;</comment>
                            <comment id="13450547" author="umamaheswararao" created="Fri, 7 Sep 2012 13:04:03 +0100"  >&lt;p&gt;Could you please take a look at this Ivan?&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Uma&lt;/p&gt;</comment>
                            <comment id="13450666" author="ikelly" created="Fri, 7 Sep 2012 15:37:35 +0100"  >&lt;p&gt;new patch looks good. There&apos;s a few minor things.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;better to call config option openLedgerRereplicationGracePeriod, Should be in ServerConfiguration, not AbstractConfiguration. The javadoc needs more detail.
  &lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * Set the grace period which the rereplication worker will wait before
 * fencing and rereplicating a ledger fragment which is still being written
 * to, on bookie failure.
 * 
 * The grace period allows the writer to detect the bookie failure, and 
 * and start writing to another ledger fragment. If the writer writes nothing
 * during the grace period, the rereplication worker assumes that it has crashed
 * and therefore fences the ledger, preventing any further writes to that ledger.
 *
 * @see LedgerHandle#openLedger
 */
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;getUnderreplicatedFragments should only take a LedgerHandle. It can construct the CheckerCallback itself.&lt;/li&gt;
	&lt;li&gt;rename (releaseDeferredLedgerLock -&amp;gt; deferLedgerLockRelease)&lt;/li&gt;
	&lt;li&gt;indentation on first line of releaseDeferredLedgerLock is off.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13450674" author="umamaheswararao" created="Fri, 7 Sep 2012 15:47:36 +0100"  >&lt;p&gt;Thanks a lot, Ivan for the review!&lt;/p&gt;

&lt;p&gt;I think, why I passed checkerCb to getUnderreplicatedFragments is because, 2 times we are calling getUnderreplicatedFragments  in rereplicate API. So, just thought to reuse the same checkerCb obj as they both will run in sequential manner and can be reused it (infact it is very light object, I can recreate also &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;
</comment>
                            <comment id="13450680" author="umamaheswararao" created="Fri, 7 Sep 2012 15:52:26 +0100"  >&lt;p&gt;Shall I change RW ctor also to take ServerConfiguration instead of AbstractConfiguration? anyway I am building ClientConfiguration explicitely for BK object.&lt;/p&gt;</comment>
                            <comment id="13450682" author="ikelly" created="Fri, 7 Sep 2012 15:55:41 +0100"  >&lt;p&gt;Yes, i client configuration isn&apos;t loaded from a file, while server configuration is.&lt;/p&gt;</comment>
                            <comment id="13450788" author="umamaheswararao" created="Fri, 7 Sep 2012 17:57:47 +0100"  >&lt;p&gt;Attached a patch, whicih addresses the Ivan&apos;s comments.&lt;/p&gt;

&lt;p&gt;@Ivan, please take a look at the new patch.&lt;/p&gt;</comment>
                            <comment id="13453907" author="umamaheswararao" created="Wed, 12 Sep 2012 12:35:35 +0100"  >&lt;p&gt;Hi Ivan, could you please check this patch? mostly It may be ready to go.&lt;/p&gt;</comment>
                            <comment id="13454219" author="ikelly" created="Wed, 12 Sep 2012 19:36:39 +0100"  >&lt;p&gt;Committed as r1384080. Good work Uma. Sorry about the delay in taking a look at the latest patch. I was travelling from friday evening, and now is the first chance I had to take another look.&lt;/p&gt;</comment>
                            <comment id="13454295" author="hudson" created="Wed, 12 Sep 2012 20:54:51 +0100"  >&lt;p&gt;Integrated in bookkeeper-trunk #706 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/706/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/706/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-325&quot; title=&quot;Delay the replication of a ledger if RW found that its last fragment is in underReplication.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-325&quot;&gt;&lt;del&gt;BOOKKEEPER-325&lt;/del&gt;&lt;/a&gt;: Delay the replication of a ledger if RW found that its last fragment is in underReplication. (umamahesh via ivank) (Revision 1384080)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                            <outwardlinks description="requires">
                                        <issuelink>
            <issuekey id="12605744">BOOKKEEPER-386</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12544243" name="BOOKKEEPER-325.patch" size="29466" author="umamaheswararao" created="Fri, 7 Sep 2012 17:56:05 +0100"/>
                            <attachment id="12543724" name="BOOKKEEPER-325.patch" size="25933" author="umamaheswararao" created="Tue, 4 Sep 2012 20:09:36 +0100"/>
                            <attachment id="12542799" name="BOOKKEEPER-325.patch" size="38193" author="umamaheswararao" created="Tue, 28 Aug 2012 19:13:12 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 31 Aug 2012 15:53:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>293559</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyn6qf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>169278</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>