<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:29:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-79/BOOKKEEPER-79.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-79] randomly startDelivery/stopDelivery will core dump in c++ hedwig client</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-79</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;p&gt;in our test program, we tried to startDelivery/stopDelivery different subscriptions randomly. And it core dump.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12527154">BOOKKEEPER-79</key>
            <summary>randomly startDelivery/stopDelivery will core dump in c++ hedwig client</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ikelly">Ivan Kelly</assignee>
                                    <reporter username="hustlmsp">Sijie Guo</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Oct 2011 08:37:18 +0100</created>
                <updated>Wed, 7 Dec 2011 15:56:07 +0000</updated>
                            <resolved>Mon, 21 Nov 2011 10:33:20 +0000</resolved>
                                    <version>4.0.0</version>
                                    <fixVersion>4.0.0</fixVersion>
                                    <component>hedwig-client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13127336" author="hustlmsp" created="Fri, 14 Oct 2011 08:47:28 +0100"  >&lt;p&gt;Did investigation on startDelivery/stopDelivery. &lt;br/&gt;
I found that stopDelivery just set flag &lt;b&gt;receiving&lt;/b&gt; as false without doing other things.&lt;/p&gt;

&lt;p&gt;Let me explain the startDelivery/stopDelivery flow.&lt;/p&gt;

&lt;p&gt;startDelivery:&lt;br/&gt;
1) check if &lt;b&gt;receiving&lt;/b&gt; is true&lt;br/&gt;
2) if &lt;b&gt;receiving&lt;/b&gt; is true, it just return without doing anything. since it has been started.&lt;br/&gt;
3) if &lt;b&gt;receiving&lt;/b&gt; is false, it set &lt;b&gt;receiving&lt;/b&gt; as true. and put an async io read in boost io queue to read 4bytes message size.&lt;br/&gt;
4) if async sizeRead succeed, it will trigger sizeReadCallback and put an async io read in boost io queue to read actual message data.&lt;/p&gt;

&lt;p&gt;if we just startDelivery without stopDelivery, the boost io queue will be:&lt;/p&gt;

&lt;p&gt;&amp;gt; boost io queue &amp;lt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read size &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read msg &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read size &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read msg &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ... &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;but if we first startDelivery (1) -&amp;gt; stopDelivery (1) -&amp;gt; startDelivery (2), &lt;br/&gt;
the second delivery will add another read size io in the queue, then it will be:&lt;/p&gt;

&lt;p&gt;&amp;gt; boost io queue &amp;lt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read size &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read msg &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ... &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;b&gt;read size&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;b&gt;read size&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; read msg &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;so the data stream is corrupted which will cause memory corrupted. it core dump.&lt;/p&gt;</comment>
                            <comment id="13127345" author="hustlmsp" created="Fri, 14 Oct 2011 09:02:41 +0100"  >&lt;p&gt;avoid putting asyc io in boost io queue when startDelivery again.&lt;/p&gt;</comment>
                            <comment id="13130660" author="ikelly" created="Wed, 19 Oct 2011 15:47:05 +0100"  >&lt;p&gt;Could you add your test program to the tests in hedwig-client/src/main/cpp/test/. I&apos;ve added another JIRA, &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-71&quot; title=&quot;hedwig c++ client does not build. &quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-71&quot;&gt;&lt;del&gt;BOOKKEEPER-71&lt;/del&gt;&lt;/a&gt; which fixes the tests, which hadn&apos;t really been run since we opensourced hedwig. Perhaps you could review that change?&lt;/p&gt;</comment>
                            <comment id="13131271" author="hustlmsp" created="Thu, 20 Oct 2011 03:07:54 +0100"  >&lt;p&gt;Ivan, Let me add the test program.&lt;/p&gt;</comment>
                            <comment id="13149746" author="hustlmsp" created="Mon, 14 Nov 2011 17:06:25 +0000"  >&lt;p&gt;attach new patch with test case.&lt;/p&gt;</comment>
                            <comment id="13152019" author="ikelly" created="Thu, 17 Nov 2011 12:19:32 +0000"  >&lt;p&gt;I&apos;m running the testcase (without the fix) and I&apos;m getting a number of different errors. What error do you get which shows this problem?&lt;/p&gt;

&lt;p&gt;Also, I&apos;m not sure the fix is correct. I don&apos;t think it&apos;s possible for receiving to be false, while stopReceivingBefore is false, because there&apos;s a lock,   &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
boost::lock_guard&amp;lt;boost::mutex&amp;gt; lock(receiving_lock);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which explicitly stops this situation.&lt;/p&gt;

&lt;p&gt;What this change seems to do is that, once you stopReceiving, the channel can never start receiving again? &lt;/p&gt;</comment>
                            <comment id="13152020" author="ikelly" created="Thu, 17 Nov 2011 12:25:23 +0000"  >&lt;p&gt;Actually, I think the problem is that we always startReceiving with readSize() even though the channel may have read the size, and be in the message reading part. I think this needs to be fixed so that the state of the channel is recorded when you stopReceiving, and when you startReceiving again, you decide what you need to read by looking at the previous state.&lt;/p&gt;</comment>
                            <comment id="13152068" author="hustlmsp" created="Thu, 17 Nov 2011 14:21:23 +0000"  >&lt;p&gt;&amp;gt; What error do you get which shows this problem?&lt;/p&gt;

&lt;p&gt;It core dump running the test case.&lt;/p&gt;

&lt;p&gt;&amp;gt; there&apos;s a lock, which explicitly stops this situation.&lt;/p&gt;

&lt;p&gt;The lock is for changing received value. stopReceiving can set receiving to false since it can obtain the lock.&lt;/p&gt;

&lt;p&gt;&amp;gt; I think this needs to be fixed so that the state of the channel is recorded when you stopReceiving&lt;/p&gt;

&lt;p&gt;We don&apos;t need to record the reading state of the channel, since the receiving check is in readSize which ensure it stop exactly in a frame of message.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

/*&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt;*/ void DuplexChannel::readSize(DuplexChannelPtr channel) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!channel-&amp;gt;isReceiving()) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
  }

  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; toread = sizeof(uint32_t) - channel-&amp;gt;in_buf.size();
  LOG4CXX_DEBUG(logger, &lt;span class=&quot;code-quote&quot;&gt;&quot; size of incoming message &quot;&lt;/span&gt; &amp;lt;&amp;lt; sizeof(uint32_t)
                &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;, currently in buffer &quot;&lt;/span&gt; &amp;lt;&amp;lt; channel-&amp;gt;in_buf.size()
                &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot; channel(&quot;&lt;/span&gt; &amp;lt;&amp;lt; channel.get() &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;)&quot;&lt;/span&gt;);

  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (toread &amp;lt; 0) {
    DuplexChannel::sizeReadCallbackHandler(channel, boost::system::error_code(), 0);
  } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;code-comment&quot;&gt;//  in_buf_size.prepare(sizeof(uint32_t));
&lt;/span&gt;    boost::asio::async_read(channel-&amp;gt;socket, channel-&amp;gt;in_buf,
                            boost::asio::transfer_at_least(sizeof(uint32_t)),
                            boost::bind(&amp;amp;DuplexChannel::sizeReadCallbackHandler,
                                        channel,
                                        boost::asio::placeholders::error,
                                        boost::asio::placeholders::bytes_transferred));
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The race here is between #startReceiving, #stopReceiving, and #readSize, as below&lt;/p&gt;

&lt;p&gt;1. #readSize passed isReceiving() checking and before async_read is called.&lt;br/&gt;
2. main thread do #startReceiving #stopReceiving. it insert a new async_read op to read size.&lt;br/&gt;
3. #readSize calls async_read to insert its async_read op to read size.&lt;/p&gt;

&lt;p&gt;But you comment remind me that the patch only fix the above case. In following case, it failed:&lt;/p&gt;

&lt;p&gt;1. main thread #stopReceiving first&lt;br/&gt;
2. #readSize check receiving, return. no more async_read op are inserted.&lt;br/&gt;
3. main thread #startReceiving, it doesn&apos;t insert any async_read op, since stopReceivingBefore is true.&lt;/p&gt;

&lt;p&gt;I think the root cause of race here is between checking receiving flag and changing receiving flag. we have lock in #startReceiving and #stopReceiving, but we have no lock in #readSize which checks receiving flag.&lt;/p&gt;

&lt;p&gt;The right fix may be:&lt;br/&gt;
need a flag which indicates whether there is a async_read size op in io service. we only do readSize if there is no async_read size op in io service when #startReceiving. said the flag is reading, its lock is reading_lock. the code is showed as below.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
void DuplexChannel::startReceiving() {
  LOG4CXX_DEBUG(logger, &lt;span class=&quot;code-quote&quot;&gt;&quot;DuplexChannel::startReceiving channel(&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;) currently receiving = &quot;&lt;/span&gt; &amp;lt;&amp;lt; receiving);

  boost::lock_guard&amp;lt;boost::mutex&amp;gt; lock(receiving_lock);
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (receiving) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
  }
  receiving = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;

  {
    boost::lock_guard&amp;lt;boost::mutex&amp;gt; lock(reading_lock);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!reading) {
      reading = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
      DuplexChannel::doReadSize(shared_from_this());
    }
  }
}

&lt;span class=&quot;code-comment&quot;&gt;// no change in #stopReceiving
&lt;/span&gt;void DuplexChannel::stopReceiving() {
  LOG4CXX_DEBUG(logger, &lt;span class=&quot;code-quote&quot;&gt;&quot;DuplexChannel::stopReceiving channel(&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;)&quot;&lt;/span&gt;);

  boost::lock_guard&amp;lt;boost::mutex&amp;gt; lock(receiving_lock);
  receiving = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
  stopReceivingBefore = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
}

/*&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt;*/ void DuplexChannel::readSize(DuplexChannelPtr channel) {
  boost::lock_guard&amp;lt;boost::mutex&amp;gt; lock(receiving_lock);
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!channel-&amp;gt;isReceiving()) {
    boost::lock_guard&amp;lt;boost::mutex&amp;gt; lock(reading_lock);
    reading = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
  }

  doReadSize(channel);
}

void doReadSize(DuplexChannelPtr channel) {

  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; toread = sizeof(uint32_t) - channel-&amp;gt;in_buf.size();
  LOG4CXX_DEBUG(logger, &lt;span class=&quot;code-quote&quot;&gt;&quot; size of incoming message &quot;&lt;/span&gt; &amp;lt;&amp;lt; sizeof(uint32_t)
                &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;, currently in buffer &quot;&lt;/span&gt; &amp;lt;&amp;lt; channel-&amp;gt;in_buf.size()
                &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot; channel(&quot;&lt;/span&gt; &amp;lt;&amp;lt; channel.get() &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;)&quot;&lt;/span&gt;);

  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (toread &amp;lt; 0) {
    DuplexChannel::sizeReadCallbackHandler(channel, boost::system::error_code(), 0);
  } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;code-comment&quot;&gt;//  in_buf_size.prepare(sizeof(uint32_t));
&lt;/span&gt;    boost::asio::async_read(channel-&amp;gt;socket, channel-&amp;gt;in_buf,
                            boost::asio::transfer_at_least(sizeof(uint32_t)),
                            boost::bind(&amp;amp;DuplexChannel::sizeReadCallbackHandler,
                                        channel,
                                        boost::asio::placeholders::error,
                                        boost::asio::placeholders::bytes_transferred));
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13152082" author="ikelly" created="Thu, 17 Nov 2011 14:44:21 +0000"  >&lt;p&gt;I think we agree on where the problem is. I think the fix will need a bit more though. Currently we seem to allow the messageReceived to be called even if stopSending has been called. stopReceiving should stop receiving, so no messages should come from the channel after it call.&lt;/p&gt;

&lt;p&gt;I&apos;ve attached pubsubtest.cpp which seems to trigger the problem more reliably.&lt;/p&gt;</comment>
                            <comment id="13152227" author="ikelly" created="Thu, 17 Nov 2011 18:53:03 +0000"  >&lt;p&gt;The above code will deadlock on mutexes. There&apos;s a number of issues, one being that we try to handle the messages in the async io thread.&lt;/p&gt;

&lt;p&gt;I&apos;ve made an attempt to sort this out, and it just gets ugly. Also, I think we should block stopDelivery from returning until we have stopped all reads, otherwise callbacks may trigger when we don&apos;t expect them. Trying this with some locks leads to deadlocks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivankelly/bookkeeper/tree/BOOKKEEPER-79&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/ivankelly/bookkeeper/tree/BOOKKEEPER-79&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can discuss this tomorrow morning.&lt;/p&gt;</comment>
                            <comment id="13152763" author="hustlmsp" created="Fri, 18 Nov 2011 10:21:58 +0000"  >&lt;p&gt;Ivan, thanks for your comments. It is great that you tried to avoid callbacks be triggered after stopReceiving in new patch. But a thread is introduced for each channel, if we have lots of subscriptions we will have same number of threads. it is not good.&lt;/p&gt;

&lt;p&gt;Beside the number of threads issue, #stopReceiving will be blocked if no data sent from server in the channel, since it only be notified in messageCallbackHandler. async_read will not trigger the bound callback if no data read from the channel.&lt;/p&gt;

&lt;p&gt;I attached a new patch based on my previous comments, which can&lt;br/&gt;
1) ensure no callbacks after #stopReceiving, also ensure no message lost between stopDelivery and startDelivery (add order checking in MessageHandlerCallback)&lt;br/&gt;
2) avoid the deadlock on mutexes.&lt;/p&gt;</comment>
                            <comment id="13152804" author="ikelly" created="Fri, 18 Nov 2011 12:01:53 +0000"  >&lt;p&gt;I think your patch is good. Could you rename last_response to outstanding_response? Also, the full test suite doesn&apos;t succeed when I run this on trunk. One problem is &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-115&quot; title=&quot;LocalBookKeeper fails after BOOKKEEPER-108&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-115&quot;&gt;&lt;del&gt;BOOKKEEPER-115&lt;/del&gt;&lt;/a&gt;, but once that is fixed, there are still problems. (running with make check)&lt;/p&gt;

&lt;p&gt;The thread issue is something we should look at in general in the future. Im of the opinion that we should only have one one channel per hub. But that requires server side buffering of messages. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Beside the number of threads issue, #stopReceiving will be blocked if no data sent from server in the channel, since it only be notified in messageCallbackHandler. async_read will not trigger the bound callback if no data read from the channel.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This was where I got stuck yesterday before giving up.&lt;/p&gt;

</comment>
                            <comment id="13152982" author="hustlmsp" created="Fri, 18 Nov 2011 17:24:09 +0000"  >&lt;p&gt;I have tried running &apos;make check&apos; several times. it is OK for me, only one time there is an Exception thrown in socket.close, the exception indicates closing a Not Connect socket.&lt;/p&gt;

&lt;p&gt;I think the exception is due to shut down a channel:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
void DuplexChannel::kill() {
    
    ...
  
    socket.cancel();
    socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);
    socket.close();

    ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think we can change using cancel/shutdown/close to cancel(&amp;amp;error)/shutdown(&amp;amp;error)/close(&amp;amp;error), which returning an error code instead of throwing exception. &lt;a href=&quot;http://www.boost.org/doc/libs/1_48_0/doc/html/boost_asio/reference/basic_stream_socket/close/overload2.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.boost.org/doc/libs/1_48_0/doc/html/boost_asio/reference/basic_stream_socket/close/overload2.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I am not sure the problems described in your comments, could you give more information about them?&lt;/p&gt;</comment>
                            <comment id="13152984" author="hustlmsp" created="Fri, 18 Nov 2011 17:25:49 +0000"  >&lt;p&gt;new patch, rename last_response to outstanding_response&lt;/p&gt;</comment>
                            <comment id="13153013" author="ikelly" created="Fri, 18 Nov 2011 18:12:51 +0000"  >&lt;p&gt;Have to you patched against the latest trunk? Did you clean before the check? I&apos;ve attached a file with the errors I get. The cancel/shutdown/error idea is good.&lt;br/&gt;
Also, pubsubtest.cpp gives warnings.&lt;/p&gt;</comment>
                            <comment id="13153427" author="hustlmsp" created="Sat, 19 Nov 2011 08:27:02 +0000"  >&lt;p&gt;I have run &apos;make clean check&apos; against latest trunk (including &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-114&quot; title=&quot;add a shutdown hook to shut down bookie server safely.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-114&quot;&gt;&lt;del&gt;BOOKKEEPER-114&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-115&quot; title=&quot;LocalBookKeeper fails after BOOKKEEPER-108&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-115&quot;&gt;&lt;del&gt;BOOKKEEPER-115&lt;/del&gt;&lt;/a&gt;) for several times. most is OK, sometimes I got following 2 exceptions.&lt;/p&gt;

&lt;p&gt;first one is Exception during socket.close, as commented in previous comments.&lt;/p&gt;

&lt;p&gt;second one is SERVER_DOWN exception thrown in publish_thread (running more than ~250 seconds) in #testRandomDelivery, which due to hub server disconnect to zk. I added code in publish thread to catch such exception to avoid it.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2011-11-19 11:59:46,856 - INFO  [&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-2-SendThread(feelpartfirm-lm.local:2181):             ClientCnxn$SendThread@1057] - Client session timed out, have not heard from server in 2908ms  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; sessionid 0x133b9f6474f0006, closing socket connection and attempting reconnect
2011-11-19 11:59:46,988 - ERROR [&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-2-EventThread:ZkUtils@75] - Topic:                    randomDeliveryTopic subscriberId: mysub-randomDelivery could not set subscription state:      consumeSeqId: local:21950,zkPath: /hedwig/CppUnitTest/topics/randomDeliveryTopic/subscribers/ mysub-randomDelivery
org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode =               ConnectionLoss &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; /hedwig/CppUnitTest/topics/randomDeliveryTopic/subscribers/mysub-          randomDelivery
        at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)
        at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
        at org.apache.hedwig.zookeeper.ZkUtils.logErrorAndCreateZKException(ZkUtils.java:74)        at org.apache.hedwig.server.subscriptions.ZkSubscriptionManager$3.                    safeProcessResult(ZkSubscriptionManager.java:186)        at org.apache.hedwig.zookeeper.SafeAsyncZKCallback$StatCallback.                      processResult(SafeAsyncZKCallback.java:30)        at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:554)
        at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:497)
2011-11-19 11:59:46,991 - WARN  [&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-2-EventThread:ZkTopicManager$2@94] - ZK client has    been disconnected to the ZK server! 2011-11-19 11:59:47,054 - INFO  [&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-2-SendThread(feelpartfirm-lm.local:2181):             ClientCnxn$SendThread@933] - Opening socket connection to server /127.0.0.1:21812011-11-19 11:59:47,058 - INFO  [&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-2-SendThread(localhost:2181):ClientCnxn$SendThread@   846] - Socket connection established to localhost/127.0.0.1:2181, initiating session2011-11-19 11:59:47,069 - INFO  [&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-2-SendThread(localhost:2181):ClientCnxn$SendThread@   1181] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid =        0x133b9f6474f0006, negotiated timeout = 4362
2011-11-19 11:59:47,069 - INFO  [&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-2-EventThread:ZkTopicManager$2@98] - ZK client has    been reconnected to the ZK server!
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="13153428" author="hustlmsp" created="Sat, 19 Nov 2011 08:29:10 +0000"  >&lt;p&gt;new patch remove warnings in pubsubtest.cpp due to unused variables. also catch exception in IntegerPublisher for testRandomDelivery. &lt;/p&gt;</comment>
                            <comment id="13153441" author="fpj" created="Sat, 19 Nov 2011 09:54:22 +0000"  >&lt;p&gt;Cancelling the patch until we clear up the issues Sijie issue Sijie is raising. &lt;/p&gt;</comment>
                            <comment id="13153442" author="fpj" created="Sat, 19 Nov 2011 09:55:05 +0000"  >&lt;p&gt;Never mind, I got confused with the comments &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13154105" author="ikelly" created="Mon, 21 Nov 2011 10:33:20 +0000"  >&lt;p&gt;Committed r1204437, Thanks Sijie.&lt;/p&gt;

&lt;p&gt;The testing problem was a problem in my environment.&lt;/p&gt;</comment>
                            <comment id="13154162" author="hudson" created="Mon, 21 Nov 2011 13:24:26 +0000"  >&lt;p&gt;Integrated in bookkeeper-trunk #234 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk/234/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk/234/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-79&quot; title=&quot;randomly startDelivery/stopDelivery will core dump in c++ hedwig client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-79&quot;&gt;&lt;del&gt;BOOKKEEPER-79&lt;/del&gt;&lt;/a&gt;: randomly startDelivery/stopDelivery will core dump in c++ hedwig client (Sijie Guo via ivank)&lt;/p&gt;

&lt;p&gt;ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/channel.cpp&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/channel.h&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/scripts/server-control.sh&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/hedwig-client/src/main/cpp/test/pubsubtest.cpp&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12503639" name="BOOKKEEPER-79.patch_v2" size="8597" author="hustlmsp" created="Mon, 14 Nov 2011 17:06:25 +0000"/>
                            <attachment id="12504194" name="BOOKKEEPER-79.patch_v3" size="12055" author="hustlmsp" created="Fri, 18 Nov 2011 10:22:27 +0000"/>
                            <attachment id="12504232" name="BOOKKEEPER-79.patch_v4" size="12207" author="hustlmsp" created="Fri, 18 Nov 2011 17:25:49 +0000"/>
                            <attachment id="12504345" name="BOOKKEEPER-79.patch_v5" size="14725" author="hustlmsp" created="Sat, 19 Nov 2011 08:29:10 +0000"/>
                            <attachment id="12498994" name="bookkeeper-79.patch" size="1587" author="hustlmsp" created="Fri, 14 Oct 2011 09:02:40 +0100"/>
                            <attachment id="12504239" name="make-check-errors.txt" size="32194" author="ikelly" created="Fri, 18 Nov 2011 18:14:28 +0000"/>
                            <attachment id="12504066" name="pubsubtest.cpp" size="16391" author="ikelly" created="Thu, 17 Nov 2011 14:40:32 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 19 Oct 2011 14:47:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>85534</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hynzif:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>173940</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>