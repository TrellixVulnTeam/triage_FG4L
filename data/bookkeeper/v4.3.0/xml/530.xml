<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat May 16 23:32:10 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/BOOKKEEPER-530/BOOKKEEPER-530.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[BOOKKEEPER-530] data might be lost during compaction.</title>
                <link>https://issues.apache.org/jira/browse/BOOKKEEPER-530</link>
                <project id="12311293" key="BOOKKEEPER">Bookkeeper</project>
                    <description>&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            entryLogger.scanEntryLog(entryLogId, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CompactionScanner(entryLogMeta));
            &lt;span class=&quot;code-comment&quot;&gt;// after moving entries to &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; entry log, remove &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; old one
&lt;/span&gt;            removeEntryLog(entryLogId);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
            LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Premature exception when compacting &quot;&lt;/span&gt; + entryLogId, e); 
        } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
            &lt;span class=&quot;code-comment&quot;&gt;// clear compacting flag
&lt;/span&gt;            compacting.set(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;currently compaction code has a bit problem: as the code described above, old entry log is removed after new entries are added to new entry log, but new entry log might not be flushed. if failures happened after removal but before flush, data would be lost.&lt;/p&gt;

&lt;p&gt;when I implemented compaction feature in &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-160&quot; title=&quot;bookie server needs to do compaction over entry log files to reclaim disk space&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-160&quot;&gt;&lt;del&gt;BOOKKEEPER-160&lt;/del&gt;&lt;/a&gt;, I remembered that I took care of letting entry go back to normal addEntry flow to reflect journal and index. But seems that the addEntry doesn&apos;t go thru journal, just move entries between entry log files w/o any flush guarantee.&lt;/p&gt;

&lt;p&gt;there are two ideas for this solution:&lt;/p&gt;

&lt;p&gt;simple one is to let compaction going to normal addEntry flow (adding entry to ledger storage and putting it in journal). the other one is GC thread either wait for ledger storage to flush in sync thread in one flush interval or force a ledger storage flush before removing entry log files.&lt;/p&gt;

&lt;p&gt;BTW, it was hard to design a test case by simulating bookie abnormally shut down itself after entry log files are removed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12625473">BOOKKEEPER-530</key>
            <summary>data might be lost during compaction.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ikelly">Ivan Kelly</assignee>
                                    <reporter username="hustlmsp">Sijie Guo</reporter>
                        <labels>
                    </labels>
                <created>Sat, 29 Dec 2012 07:38:31 +0000</created>
                <updated>Wed, 13 Feb 2013 15:46:35 +0000</updated>
                            <resolved>Thu, 10 Jan 2013 14:34:08 +0000</resolved>
                                    <version>4.1.0</version>
                                    <fixVersion>4.2.0</fixVersion>
                                    <component>bookkeeper-server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13540799" author="fpj" created="Sat, 29 Dec 2012 07:50:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;But seems that the addEntry doesn&apos;t go thru journal, just move entries between entry log files w/o any flush guarantee.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sijie, I don&apos;t understand what you&apos;re trying to say here, we do write and flush addEntry requests to the journal. &lt;/p&gt;</comment>
                            <comment id="13540818" author="hustlmsp" created="Sat, 29 Dec 2012 08:45:58 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    /** 
     * Scanner used to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; entry log compaction
     */
    class EntryLogCompactionScanner &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; EntryLogger.EntryLogScanner {
        @Override
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; accept(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerId) {
            &lt;span class=&quot;code-comment&quot;&gt;// bookie has no knowledge about which ledger is deleted
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// so just accept all ledgers.
&lt;/span&gt;            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
        }   

        @Override
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void process(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerId, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; offset, ByteBuffer buffer)
            &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
            addEntry(buffer);
        }   
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt;, in compaction scanner, we just call LedgerStorage#addEntry to move entry from old entry log file to new entry log file. we don&apos;t add this entry again to journal during moving entries. this is what I mean.&lt;/p&gt;</comment>
                            <comment id="13542439" author="ikelly" created="Wed, 2 Jan 2013 21:32:10 +0000"  >&lt;p&gt;I think it has to go through the journal, due to the issues we discussed on &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-447&quot; title=&quot;Bookie can fail to recover if index pages flushed before ledger flush acknowledged&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-447&quot;&gt;&lt;del&gt;BOOKKEEPER-447&lt;/del&gt;&lt;/a&gt;. To recap, due to the design of LedgerCacheImpl, an index files may be flushed before the corresponding entrylog has been flushed. There is a possibility, that an index file is flushed but the entry logger is not and a crash occurs. The entry is now inaccessible, as the index file points to a bad location.&lt;/p&gt;

&lt;p&gt;We can&apos;t use the stock Bookie#addEntry though, as this adds to the index before the journal, so the same issue could occur. We need an internal syncAddEntry which does the following sequence.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;add to Journal&lt;/li&gt;
	&lt;li&gt;add to entryLogger&lt;/li&gt;
	&lt;li&gt;add to ledgerIndex&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13542486" author="fpj" created="Wed, 2 Jan 2013 22:23:44 +0000"  >&lt;p&gt;I&apos;m a bit confused here, why do we need to write to the journal during compaction? Can&apos;t we write a shadow (compacted) entry log and swap with the original entry log once compaction completes? &lt;/p&gt;</comment>
                            <comment id="13542641" author="hustlmsp" created="Thu, 3 Jan 2013 01:33:18 +0000"  >&lt;p&gt;&amp;gt; I&apos;m a bit confused here, why do we need to write to the journal during compaction?&lt;/p&gt;

&lt;p&gt;I think the problem here is that we had separated index files with entry log files. during compaction, we had to modify index entries when moving entry data. if we used SSTable like structure to combine entry data and indices together like what HBase or leveldb did, we can do as you suggested. &lt;/p&gt;</comment>
                            <comment id="13543472" author="fpj" created="Fri, 4 Jan 2013 00:46:58 +0000"  >&lt;p&gt;Got it, it is using the journal for atomicity. &lt;/p&gt;</comment>
                            <comment id="13544093" author="ikelly" created="Fri, 4 Jan 2013 18:17:43 +0000"  >&lt;p&gt;Attached patch which first writes to the journal and then to the ledger storage when compacting a log.&lt;/p&gt;</comment>
                            <comment id="13544636" author="hustlmsp" created="Sat, 5 Jan 2013 09:01:42 +0000"  >&lt;p&gt;looks good. some comments about log statements.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; class BookieSafeEntryAdder &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; SafeEntryAdder {
+        @Override
+        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void safeAddEntry(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerId, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ByteBuffer buffer,
+                                 &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; GenericCallback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt; cb) {
+            journal.logAddEntry(buffer, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WriteCallback() {
+                    @Override
+                    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void writeComplete(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rc, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerId2, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; entryId,
+                                              InetSocketAddress addr, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; ctx) {
+                        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+                            addEntryByLedgerId(ledgerId, buffer);
+                            cb.operationComplete(rc, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
+                        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException ioe) {
+                            LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Error adding to ledger storage&quot;&lt;/span&gt;, ioe);
+                            &lt;span class=&quot;code-comment&quot;&gt;// couldn&apos;t add to ledger storage
&lt;/span&gt;+                            cb.operationComplete(BookieException.Code.IllegalOpException, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
+                        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BookieException bke) {
+                            LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Bookie error adding to ledger storage&quot;&lt;/span&gt;, bke);
+                            &lt;span class=&quot;code-comment&quot;&gt;// couldn&apos;t add to ledger storage
&lt;/span&gt;+                            cb.operationComplete(bke.getCode(), &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
+                        }
+                    }
+                }, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
+        }
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;first, it would be better to check the return code &apos;rc&apos; in #logAddEntry. Although currently it was just return 0, if future someone changed it, he might miss this place.&lt;/p&gt;

&lt;p&gt;second, it would be better to log more info in the log statements to indicate which ledger, which entry encountered errors.&lt;/p&gt;

&lt;p&gt;BTW, not related to this jira.&lt;br/&gt;
currently we have two different addEntry flow in the code now, one is addEntry to ledger storage first and add to journal later. the other one is adding entry to journal first and addEntry to ledger storage later. In 4.3.0, we might need to consider consolidating these two flows, as my first proposed patch for bookkeeper-447. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="13544637" author="hustlmsp" created="Sat, 5 Jan 2013 09:02:09 +0000"  >&lt;p&gt;cancel patch until comments addressed.&lt;/p&gt;</comment>
                            <comment id="13546208" author="rakeshr" created="Mon, 7 Jan 2013 19:54:00 +0000"  >&lt;p&gt;Hi Ivan, patch looks nice. Adding entries to the journal is pretty good.&lt;/p&gt;

&lt;p&gt;Just adding few more comments...&lt;/p&gt;

&lt;p&gt;1) fix typo in log statements:&lt;br/&gt;
&quot;Coundn&apos;t readd all entries&quot; -&amp;gt; &quot;Couldn&apos;t re-add all entries&quot;&lt;/p&gt;


&lt;p&gt;2) int IOException = -104;  is no where used, can we remove this?&lt;/p&gt;


&lt;p&gt;3)I&apos;m bit confused about the usage of asynchronously sending all the entries to the journal#queue and awaitCompete() in the scanner. &lt;br/&gt;
Assume there is a failure in between adding the entries, since we are adding all the entries to the journal#queue the awaitComplete() call would be unnecessarily waiting for all the entries to finish add operation. Anyway the compaction would finally throws IOException.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt;(outstandingRequests) {
                &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (outstandingRequests.get() &amp;gt; 0) {
                    outstandingRequests.wait();
                }
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (allSuccessful.get() == &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;) {
                    &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Coundn&apos;t readd all entries&quot;&lt;/span&gt;);
                }
            }                
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IMHO, how about adding one by one entry to the journal, on writeComplete() add it to entrylogger?&lt;br/&gt;
Also, the scanner would see the return code and throws exception if it fails.&lt;/p&gt;</comment>
                            <comment id="13546947" author="ikelly" created="Tue, 8 Jan 2013 15:37:40 +0000"  >&lt;p&gt;Patch addresses comments.&lt;/p&gt;</comment>
                            <comment id="13546958" author="ikelly" created="Tue, 8 Jan 2013 15:51:06 +0000"  >&lt;blockquote&gt;
&lt;p&gt;3)I&apos;m bit confused about the usage of asynchronously sending all the entries to the journal#queue and awaitCompete() in the scanner.&lt;br/&gt;
Assume there is a failure in between adding the entries, since we are adding all the entries to the journal#queue the awaitComplete() call would be unnecessarily waiting for all the entries to finish add operation. Anyway the compaction would finally throws IOException.&lt;br/&gt;
IMHO, how about adding one by one entry to the journal, on writeComplete() add it to entrylogger?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is what we do. The code adds to the journal, and when the journal callback triggers it adds to the entrylogger and index. If the journal succeeds and the entrylogger or index fails, this is fine due to the order, as the entry remains in the same place until we write the index, which is the last thing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hustlmsp&quot; class=&quot;user-hover&quot; rel=&quot;hustlmsp&quot;&gt;Sijie Guo&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;currently we have two different addEntry flow in the code now, one is addEntry to ledger storage first and add to journal later. the other one is adding entry to journal first and addEntry to ledger storage later. In 4.3.0, we might need to consider consolidating these two flows, as my first proposed patch for bookkeeper-447. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree.&lt;/p&gt;</comment>
                            <comment id="13546974" author="hadoopqa" created="Tue, 8 Jan 2013 16:10:19 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-530&quot; title=&quot;data might be lost during compaction.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-530&quot;&gt;&lt;del&gt;BOOKKEEPER-530&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12563765/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch&lt;/a&gt; downloaded at Tue Jan  8 16:05:31 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch does not add/modify any testcase&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; patch does not compile&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch seems to introduce 2 new Findbugs warning(s) in module(s) &lt;span class=&quot;error&quot;&gt;&amp;#91;bookkeeper-server&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 TESTS&lt;/font&gt; - patch does not compile, cannot run testcases&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; distro tarball fails with the patch&lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/216/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/216/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13546977" author="ikelly" created="Tue, 8 Jan 2013 16:15:52 +0000"  >&lt;p&gt;Forgot to add one change to last patch. &lt;/p&gt;</comment>
                            <comment id="13547000" author="hadoopqa" created="Tue, 8 Jan 2013 16:51:31 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-530&quot; title=&quot;data might be lost during compaction.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-530&quot;&gt;&lt;del&gt;BOOKKEEPER-530&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12563771/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch&lt;/a&gt; downloaded at Tue Jan  8 16:21:21 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch does not add/modify any testcase&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 781&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/217/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/217/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13547100" author="rakeshr" created="Tue, 8 Jan 2013 18:39:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is what we do. The code adds to the journal, and when the journal callback triggers it adds to the entrylogger and index. If the journal succeeds and the entrylogger or index fails, this is fine due to the order, as the entry remains in the same place until we write the index, which is the last thing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh! seems I hadn&apos;t explained clearly my idea. Could you please look at the below snippet of CompactionScanner#process() api. Here just tries to make await() logic simple and fail fast rather than waiting to finish all the entries in case of any failures.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        @Override
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void process(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ledgerId, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; offset, ByteBuffer entry)
            &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; CountDownLatch addEntryNotificationLatch = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CountDownLatch(1);
            safeEntryAdder.safeAddEntry(ledgerId, entry, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GenericCallback&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;&amp;gt;() {
                    @Override
                    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void operationComplete(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rc, &lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt; result) {
                        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rc != BookieException.Code.OK) {
                            LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Error {} re-adding entry &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; ledger {})&quot;&lt;/span&gt;,
                                    rc, ledgerId);
                            allSuccessful.set(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
                        }
                        addEntryNotificationLatch.countDown();
                    }
                });
            awaitComplete(addEntryNotificationLatch);
        }

        &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void awaitComplete(CountDownLatch addEntryNotificationLatch) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                addEntryNotificationLatch.await();
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (allSuccessful.get() == &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;) {
                    &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Couldn&apos;t re-add all entries&quot;&lt;/span&gt;);
                }
            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException ie) {
                &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.currentThread().interrupt();
                LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;Interrupted &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; compacting&quot;&lt;/span&gt;, ie);
                &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Couldn&apos;t re-add all entries&quot;&lt;/span&gt;, ie);
            }        
       }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;-Rakesh&lt;/p&gt;</comment>
                            <comment id="13547730" author="hustlmsp" created="Wed, 9 Jan 2013 07:42:20 +0000"  >&lt;p&gt;yeah, good point, Rakesh.&lt;/p&gt;

&lt;p&gt;Compaction should not overwhelm the journal thread which might affects normal adding operations. One by one might be better.&lt;/p&gt;</comment>
                            <comment id="13548364" author="ikelly" created="Wed, 9 Jan 2013 10:43:35 +0000"  >&lt;p&gt;with one by one it could take a very long time to compact a log. How about batching into 1000 entry chunks or something?&lt;/p&gt;</comment>
                            <comment id="13548447" author="rakeshr" created="Wed, 9 Jan 2013 12:23:24 +0000"  >&lt;p&gt;Yeah, smaller chunks would be fine and would help in balancing.&lt;/p&gt;</comment>
                            <comment id="13548548" author="ikelly" created="Wed, 9 Jan 2013 14:49:35 +0000"  >&lt;p&gt;Latest patch limits the number of re-added entries to 1000 at a time, and stops processing if there is an error.&lt;/p&gt;</comment>
                            <comment id="13548565" author="hadoopqa" created="Wed, 9 Jan 2013 15:22:04 +0000"  >&lt;p&gt;Testing JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-530&quot; title=&quot;data might be lost during compaction.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-530&quot;&gt;&lt;del&gt;BOOKKEEPER-530&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12563939/0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch&lt;/a&gt; downloaded at Wed Jan  9 14:51:23 UTC 2013&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 PATCH_APPLIES&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 CLEAN&lt;/font&gt;&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;-1 RAW_PATCH_ANALYSIS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any @author tags&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any tabs&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any trailing spaces&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not introduce any line longer than 120&lt;br/&gt;
.    &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; the patch does not add/modify any testcase&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 RAT&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new RAT warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 JAVADOC&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Javadoc warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 COMPILE&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; HEAD compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; patch compiles&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new javac warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 FINDBUGS&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; the patch does not seem to introduce new Findbugs warnings&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 TESTS&lt;/font&gt;&lt;br/&gt;
.    Tests run: 782&lt;br/&gt;
&lt;font color=&quot;green&quot;&gt;+1 DISTRO&lt;/font&gt;&lt;br/&gt;
.    &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; distro tarball builds with the patch &lt;/p&gt;

&lt;p&gt;----------------------------&lt;br/&gt;
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;-1 Overall result, please check the reported -1(s)&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;The full output of the test-patch run is available at&lt;/p&gt;

&lt;p&gt;.   &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/227/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk-precommit-build/227/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13549482" author="hustlmsp" created="Thu, 10 Jan 2013 09:44:05 +0000"  >&lt;p&gt;+1 for the latest patch.&lt;/p&gt;</comment>
                            <comment id="13549667" author="ikelly" created="Thu, 10 Jan 2013 14:34:08 +0000"  >&lt;p&gt;Committed as r1431378. Thanks for reviewing guys.&lt;/p&gt;</comment>
                            <comment id="13549680" author="hudson" created="Thu, 10 Jan 2013 14:58:25 +0000"  >&lt;p&gt;Integrated in bookkeeper-trunk2 #51 (See &lt;a href=&quot;https://builds.apache.org/job/bookkeeper-trunk2/51/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/bookkeeper-trunk2/51/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-530&quot; title=&quot;data might be lost during compaction.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-530&quot;&gt;&lt;del&gt;BOOKKEEPER-530&lt;/del&gt;&lt;/a&gt;: data might be lost during compaction. (ivank) (Revision 1431378)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
ivank : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/bookkeeper/trunk/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12563939" name="0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch" size="14271" author="ikelly" created="Wed, 9 Jan 2013 14:49:35 +0000"/>
                            <attachment id="12563771" name="0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch" size="13190" author="ikelly" created="Tue, 8 Jan 2013 16:15:52 +0000"/>
                            <attachment id="12563765" name="0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch" size="13110" author="ikelly" created="Tue, 8 Jan 2013 15:37:40 +0000"/>
                            <attachment id="12563332" name="0001-BOOKKEEPER-530-data-might-be-lost-during-compaction.patch" size="12213" author="ikelly" created="Fri, 4 Jan 2013 18:17:43 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 29 Dec 2012 07:50:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>302015</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hz0snb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>248650</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>