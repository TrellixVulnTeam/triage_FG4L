org.apache.hedwig.exceptions.PubSubException.create(StatusCode,String)
org.apache.hedwig.exceptions.PubSubException.NoTopicOwnerInfoException.NoTopicOwnerInfoException(String)
org.apache.hedwig.exceptions.PubSubException.SubscriptionStateExistsException.SubscriptionStateExistsException(String)
org.apache.hedwig.exceptions.PubSubException.TopicOwnerInfoExistsException.TopicOwnerInfoExistsException(String)
org.apache.hedwig.protocol.PubSubProtocol.assignDescriptors(com.google.protobuf.Descriptors.FileDescriptor)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.build()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.Builder()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.Builder(BuilderParent)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.buildParsed()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.buildPartial()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.clear()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.clearCzxid()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.clearHostname()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.clone()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.create()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.getDescriptorForType()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.maybeForceBuilderInitialization()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.mergeFrom(com.google.protobuf.Message)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.HubInfoData)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.setCzxid(long)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.setHostname(com.google.protobuf.ByteString)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.setHostname(String)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.getCzxid()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.getDefaultInstance()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.getDefaultInstanceForType()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.getHostname()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.getHostnameBytes()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.getSerializedSize()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.hasCzxid()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.hasHostname()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.HubInfoData(boolean)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.HubInfoData(Builder)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.initFields()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.internalGetFieldAccessorTable()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.isInitialized()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.newBuilder()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.newBuilderForType()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.newBuilder(org.apache.hedwig.protocol.PubSubProtocol.HubInfoData)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseDelimitedFrom(java.io.InputStream)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseFrom(byte[])
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseFrom(byte[],com.google.protobuf.ExtensionRegistryLite)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseFrom(com.google.protobuf.ByteString)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseFrom(com.google.protobuf.CodedInputStream)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseFrom(java.io.InputStream)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.parseFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.toBuilder()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.writeReplace()
org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.writeTo(com.google.protobuf.CodedOutputStream)
org.apache.hedwig.protocol.PubSubProtocol.HubLoadData.Builder.clearNumTopics()
org.apache.hedwig.protocol.PubSubProtocol.HubLoadData.Builder.mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.HubLoadData)
org.apache.hedwig.protocol.PubSubProtocol.HubLoadData.Builder.setNumTopics(long)
org.apache.hedwig.protocol.PubSubProtocol.HubLoadData.getNumTopics()
org.apache.hedwig.protocol.PubSubProtocol.HubLoadData.hasNumTopics()
org.apache.hedwig.protocol.PubSubProtocol.HubLoadData.HubLoadData(boolean)
org.apache.hedwig.protocol.PubSubProtocol.HubLoadData.HubLoadData(Builder)
org.apache.hedwig.protocol.PubSubProtocol.HubLoadData.newBuilder(org.apache.hedwig.protocol.PubSubProtocol.HubLoadData)
org.apache.hedwig.protocol.PubSubProtocol.StatusCode.getDescriptor()
org.apache.hedwig.protocol.PubSubProtocol.StatusCode.valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor)
org.apache.hedwig.protocol.PubSubProtocol.StatusCode.valueOf(int)
org.apache.hedwig.server.common.ServerConfiguration.isMetadataManagerBasedTopicManagerEnabled()
org.apache.hedwig.server.common.ServerConfiguration.validate()
org.apache.hedwig.server.meta.MetadataManagerFactory.newSubscriptionDataManager()
org.apache.hedwig.server.meta.MetadataManagerFactory.newTopicOwnershipManager()
org.apache.hedwig.server.meta.TestMetadataManagerFactory.writeFactoryLayout(ServerConfiguration,String,int)
org.apache.hedwig.server.meta.TestMetadataManager.TestMetadataManager(String)
org.apache.hedwig.server.meta.TestMetadataManager.testOwnerInfo()
org.apache.hedwig.server.meta.TopicOwnershipManager.deleteOwnerInfo(ByteString,Version,Callback<Void>,Void,Object)
org.apache.hedwig.server.meta.TopicOwnershipManager.readOwnerInfo(ByteString,Callback<Versioned<HubInfo>>,Versioned<HubInfo>,HubInfo,Object)
org.apache.hedwig.server.meta.TopicOwnershipManager.writeOwnerInfo(ByteString,HubInfo,Version,Callback<Version>,Version,Object)
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkSubscriptionDataManagerImpl.readSubscriptions(ByteString,Callback<Map<ByteString,InMemorySubscriptionState>>,Map<ByteString,InMemorySubscriptionState>,ByteString,InMemorySubscriptionState,Object)
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkTopicOwnershipManagerImpl.close()
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkTopicOwnershipManagerImpl.createOwnerInfo(ByteString,HubInfo,Callback<Version>,Version,Object)
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkTopicOwnershipManagerImpl.createOwnerInfo.safeProcessResult(int,String,Object,String)
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkTopicOwnershipManagerImpl.deleteOwnerInfo.safeProcessResult(int,String,Object)
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkTopicOwnershipManagerImpl.hubPath(ByteString)
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkTopicOwnershipManagerImpl.readOwnerInfo.safeProcessResult(int,String,Object,byte[],Stat)
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkTopicOwnershipManagerImpl.writeOwnerInfo.safeProcessResult(int,String,Object,Stat)
org.apache.hedwig.server.meta.ZkMetadataManagerFactory.ZkTopicOwnershipManagerImpl.ZkTopicOwnershipManagerImpl(ServerConfiguration,ZooKeeper)
org.apache.hedwig.server.netty.PubSubServer.instantiateTopicManager()
org.apache.hedwig.server.topics.HubInfo.equals(Object)
org.apache.hedwig.server.topics.HubInfo.getAddress()
org.apache.hedwig.server.topics.HubInfo.getHubInfoData()
org.apache.hedwig.server.topics.HubInfo.getZxid()
org.apache.hedwig.server.topics.HubInfo.hashCode()
org.apache.hedwig.server.topics.HubInfo.HubInfo(HedwigSocketAddress,long)
org.apache.hedwig.server.topics.HubInfo.HubInfo(HedwigSocketAddress,long,HubInfoData)
org.apache.hedwig.server.topics.HubInfo.InvalidHubInfoException.InvalidHubInfoException(String)
org.apache.hedwig.server.topics.HubInfo.InvalidHubInfoException.InvalidHubInfoException(String,Throwable)
org.apache.hedwig.server.topics.HubInfo.parse(String)
org.apache.hedwig.server.topics.HubInfo.toString()
org.apache.hedwig.server.topics.HubLoad.compareTo(HubLoad)
org.apache.hedwig.server.topics.HubLoad.HubLoad(HubLoadData)
org.apache.hedwig.server.topics.HubLoad.HubLoad(long)
org.apache.hedwig.server.topics.HubLoad.InvalidHubLoadException.InvalidHubLoadException(String)
org.apache.hedwig.server.topics.HubLoad.InvalidHubLoadException.InvalidHubLoadException(String,Throwable)
org.apache.hedwig.server.topics.HubLoad.toHubLoadData()
org.apache.hedwig.server.topics.HubServerManager.chooseLeastLoadedHub(Callback<HubInfo>,HubInfo,Object)
org.apache.hedwig.server.topics.HubServerManager.isHubAlive(HubInfo,Callback<Boolean>,Boolean,Object)
org.apache.hedwig.server.topics.HubServerManager.ManagerListener.onResume()
org.apache.hedwig.server.topics.HubServerManager.ManagerListener.onShutdown()
org.apache.hedwig.server.topics.HubServerManager.ManagerListener.onSuspend()
org.apache.hedwig.server.topics.HubServerManager.registerListener(ManagerListener)
org.apache.hedwig.server.topics.HubServerManager.registerSelf(HubLoad,Callback<HubInfo>,HubInfo,Object)
org.apache.hedwig.server.topics.HubServerManager.unregisterSelf()
org.apache.hedwig.server.topics.HubServerManager.uploadSelfLoadData(HubLoad)
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.choose(Version)
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.claim.operationFinished(Object,Version)
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.claimTopic(Object)
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.claim(Version)
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.MMGetOwnerOp(ByteString,Callback<HedwigSocketAddress>,HedwigSocketAddress,Object)
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.read()
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.read.operationFinished(Object,Versioned<HubInfo>,HubInfo)
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.read.operationFinished.operationFinished(Object,Boolean)
org.apache.hedwig.server.topics.MMTopicManager.MMGetOwnerOp.setOwner(HubInfo,Version)
org.apache.hedwig.server.topics.MMTopicManager.MMTopicManager.operationFailed(Object,PubSubException)
org.apache.hedwig.server.topics.MMTopicManager.MMTopicManager.operationFinished(Object,HubInfo)
org.apache.hedwig.server.topics.MMTopicManager.MMTopicManager(ServerConfiguration,ZooKeeper,MetadataManagerFactory,ScheduledExecutorService)
org.apache.hedwig.server.topics.MMTopicManager.postReleaseCleanup(ByteString,Callback<Void>,Void,Object)
org.apache.hedwig.server.topics.MMTopicManager.postReleaseCleanup.operationFinished.operationFinished(Object,Void)
org.apache.hedwig.server.topics.MMTopicManager.realGetOwner(ByteString,boolean,Callback<HedwigSocketAddress>,HedwigSocketAddress,Object)
org.apache.hedwig.server.topics.MMTopicManager.stop()
org.apache.hedwig.server.topics.TestHubInfo.testParseHubInfo()
org.apache.hedwig.server.topics.TestHubLoad.testParseHubLoad()
org.apache.hedwig.server.topics.TestMMTopicManager.assertOwnershipNodeDoesntExist()
org.apache.hedwig.server.topics.TestMMTopicManager.assertOwnershipNodeExists()
org.apache.hedwig.server.topics.TestMMTopicManager.CallbackQueue.getQueue()
org.apache.hedwig.server.topics.TestMMTopicManager.CallbackQueue.operationFailed.start.run()
org.apache.hedwig.server.topics.TestMMTopicManager.CallbackQueue.operationFinished(Object,T)
org.apache.hedwig.server.topics.TestMMTopicManager.CallbackQueue.take()
org.apache.hedwig.server.topics.TestMMTopicManager.check(Either<T,Exception>,T,Exception)
org.apache.hedwig.server.topics.TestMMTopicManager.CustomServerConfiguration.CustomServerConfiguration(int)
org.apache.hedwig.server.topics.TestMMTopicManager.CustomServerConfiguration.getServerPort()
org.apache.hedwig.server.topics.TestMMTopicManager.$GenericMethodDeclaration$()
org.apache.hedwig.server.topics.TestMMTopicManager.mkTopic(int)
org.apache.hedwig.server.topics.TestMMTopicManager.setUp()
org.apache.hedwig.server.topics.TestMMTopicManager.StubOwnershipChangeListener.acquiredTopic(ByteString,Callback<Void>,Void,Object)
org.apache.hedwig.server.topics.TestMMTopicManager.StubOwnershipChangeListener.lostTopic(ByteString)
org.apache.hedwig.server.topics.TestMMTopicManager.StubOwnershipChangeListener.setFailure(boolean)
org.apache.hedwig.server.topics.TestMMTopicManager.StubOwnershipChangeListener.StubOwnershipChangeListener(SynchronousQueue<Pair<ByteString,Boolean>>,Pair<ByteString,Boolean>,ByteString,Boolean)
org.apache.hedwig.server.topics.TestMMTopicManager.tearDown()
org.apache.hedwig.server.topics.TestMMTopicManager.testGetOwnerMulti()
org.apache.hedwig.server.topics.TestMMTopicManager.testGetOwnerSingle()
org.apache.hedwig.server.topics.TestMMTopicManager.testLoadBalancing()
org.apache.hedwig.server.topics.TestMMTopicManager.TestMMTopicManager(String)
org.apache.hedwig.server.topics.TestMMTopicManager.testOwnershipChange()
org.apache.hedwig.server.topics.TestMMTopicManager.testZKClientDisconnected()
org.apache.hedwig.server.topics.ZkHubServerManager.chooseLeastLoadedHub.safeProcessResult(int,String,Object,List<String>,String)
org.apache.hedwig.server.topics.ZkHubServerManager.chooseLeastLoadedNode(List<String>,String,Callback<HubInfo>,HubInfo,Object)
org.apache.hedwig.server.topics.ZkHubServerManager.getHubZkNodePath(HedwigSocketAddress)
org.apache.hedwig.server.topics.ZkHubServerManager.ZkHubServerManager(ServerConfiguration,ZooKeeper,HedwigSocketAddress)
org.apache.hedwig.server.topics.ZkHubServerManager.ZkHubsWatcher.process(WatchedEvent)
org.apache.hedwig.server.topics.ZkTopicManager.getCurrentLoadData()
org.apache.hedwig.server.topics.ZkTopicManager.registerWithZookeeper(Callback<Void>,Void,Object)
org.apache.hedwig.server.topics.ZkTopicManager.unregisterWithZookeeper()
org.apache.hedwig.server.topics.ZkTopicManager.updateLoadInformation()
org.apache.hedwig.server.topics.ZkTopicManager.ZkGetOwnerOp.choose()
org.apache.hedwig.server.topics.ZkTopicManager.ZkGetOwnerOp.chooseLeastLoadedNode(List<String>,String)
org.apache.hedwig.server.topics.ZkTopicManager.ZkGetOwnerOp.claim()
org.apache.hedwig.server.topics.ZkTopicManager.ZkGetOwnerOp.claimOrChoose()
org.apache.hedwig.server.topics.ZkTopicManager.ZkGetOwnerOp.ZkGetOwnerOp(ByteString,boolean,Callback<HedwigSocketAddress>,HedwigSocketAddress,Object)
org.apache.hedwig.server.topics.ZkTopicManager.ZkTopicManager(ZooKeeper,ServerConfiguration,ScheduledExecutorService)
