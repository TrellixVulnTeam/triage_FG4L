Currently, if you attempt to open a reader into an index at a specific commit point, it will always behave as though it's opening a completely new index - even if one were to use the DirectoryReader.openIfChanged(DirectoryReader, IndexCommit) API, and pass in an NRT reader instance. What should ideally happen here is that the SegmentReader pool managed by IndexWriter linked to the NRT reader gets reused for the commit point open as much as possible, to avoid wasting heap space.

The problem becomes evident when looking at the code in DirectoryReader:



protected DirectoryReader doOpenIfChanged(final IndexCommit commit) throws IOException {
    ensureOpen();

    // If we were obtained by writer.getReader(), re-ask the
    // writer to get a new reader.
    if (writer != null) {
      return doOpenFromWriter(commit);
    } else {
      return doOpenNoWriter(commit);
    }
  }

  private DirectoryReader doOpenFromWriter(IndexCommit commit) throws IOException {
    if (commit != null) {
      return doOpenFromCommit(commit);
    }
......



Looks like the fact that a commit point is being re-opened trumps the presence of the associated IndexWriter.