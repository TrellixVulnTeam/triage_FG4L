<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:04:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1486/LUCENE-1486.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[LUCENE-1486] Wildcards, ORs etc inside Phrase queries</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1486</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                    <description>&lt;p&gt;An extension to the default QueryParser that overrides the parsing of PhraseQueries to allow more complex syntax e.g. wildcards in phrase queries.&lt;/p&gt;

&lt;p&gt;The implementation feels a little hacky - this is arguably better handled in QueryParser itself. This works as a proof of concept  for much of the query parser syntax. Examples from the Junit test include:&lt;/p&gt;

&lt;p&gt;		checkMatches(&quot;\&quot;j*   smyth~\&quot;&quot;, &quot;1,2&quot;); //wildcards and fuzzies are OK in phrases&lt;br/&gt;
		checkMatches(&quot;\&quot;(jo* -john)  smith\&quot;&quot;, &quot;2&quot;); // boolean logic works&lt;br/&gt;
		checkMatches(&quot;\&quot;jo*  smith\&quot;~2&quot;, &quot;1,2,3&quot;); // position logic works.&lt;/p&gt;

&lt;p&gt;		checkBadQuery(&quot;\&quot;jo*  id:1 smith\&quot;&quot;); //mixing fields in a phrase is bad&lt;br/&gt;
		checkBadQuery(&quot;\&quot;jo* \&quot;smith\&quot; \&quot;&quot;); //phrases inside phrases is bad&lt;br/&gt;
		checkBadQuery(&quot;\&quot;jo* &lt;span class=&quot;error&quot;&gt;&amp;#91;sma TO smZ&amp;#93;&lt;/span&gt;\&quot; \&quot;&quot;); //range queries inside phrases not supported&lt;/p&gt;

&lt;p&gt;Code plus Junit test to follow...&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12410389">LUCENE-1486</key>
            <summary>Wildcards, ORs etc inside Phrase queries</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="erickerickson">Erick Erickson</assignee>
                                    <reporter username="markh">Mark Harwood</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Dec 2008 18:18:22 +0000</created>
                <updated>Mon, 28 Apr 2014 00:25:47 +0100</updated>
                            <resolved>Sun, 16 Mar 2014 19:36:13 +0000</resolved>
                                    <version>2.4</version>
                                    <fixVersion>4.8</fixVersion>
                                    <component>core/queryparser</component>
                        <due></due>
                            <votes>13</votes>
                                    <watches>23</watches>
                                                                <comments>
                            <comment id="12655300" author="markh" created="Wed, 10 Dec 2008 18:19:51 +0000"  >&lt;p&gt;Junit test&lt;/p&gt;</comment>
                            <comment id="12655301" author="markh" created="Wed, 10 Dec 2008 18:20:23 +0000"  >&lt;p&gt;QueryParser extension&lt;/p&gt;</comment>
                            <comment id="12655664" author="markh" created="Thu, 11 Dec 2008 14:34:37 +0000"  >&lt;p&gt;Added tests for range queries and plain PhraseQueries&lt;/p&gt;</comment>
                            <comment id="12655665" author="markh" created="Thu, 11 Dec 2008 14:35:20 +0000"  >&lt;p&gt;Fixed bug with plain phrase query, added support for range queries&lt;/p&gt;</comment>
                            <comment id="12655966" author="mikemccand" created="Fri, 12 Dec 2008 10:45:09 +0000"  >&lt;p&gt;(Added 2.9 fix version in addition to 2.4.1).&lt;/p&gt;</comment>
                            <comment id="12656034" author="markh" created="Fri, 12 Dec 2008 15:23:04 +0000"  >&lt;p&gt;Added support for &quot;Nots&quot; in phrase queries e.g. &quot;-not interested&quot;&lt;/p&gt;</comment>
                            <comment id="12656035" author="markh" created="Fri, 12 Dec 2008 15:23:22 +0000"  >&lt;p&gt;More tests for Nots&lt;/p&gt;</comment>
                            <comment id="12678015" author="markh" created="Mon, 2 Mar 2009 15:17:06 +0000"  >&lt;p&gt;Updated to cater for phrase clauses that produce no matches&lt;/p&gt;</comment>
                            <comment id="12678017" author="markh" created="Mon, 2 Mar 2009 15:18:09 +0000"  >&lt;p&gt;Updated Junit test to test for phrases with clauses that produce no matches&lt;/p&gt;</comment>
                            <comment id="12718281" author="markrmiller@gmail.com" created="Thu, 11 Jun 2009 03:25:35 +0100"  >&lt;p&gt;What do you think about this for 2.9 Mark H?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The implementation feels a little hacky - this is arguably better handled in QueryParser itself. This works as a proof of concept for much of the query parser syntax.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That leads me to think we might want to push to 3.0? Or have you moved beyond that with all of these updates?&lt;/p&gt;</comment>
                            <comment id="12718573" author="markh" created="Thu, 11 Jun 2009 19:11:32 +0100"  >&lt;p&gt;Perhaps &quot;hacky&quot; was too strong a word. I think it&apos;s a reasonable approach to handling the complexity involved in this logic. &lt;/p&gt;

&lt;p&gt;A colleague of mine has this running in production on a big installation with lots of users&lt;/p&gt;</comment>
                            <comment id="12719105" author="mikemccand" created="Sat, 13 Jun 2009 10:48:53 +0100"  >&lt;p&gt;Is there some reason not to include this in QueryParser instead?  Ie, it accepts a superset of QueryParser&apos;s current syntax?&lt;/p&gt;</comment>
                            <comment id="12719115" author="markh" created="Sat, 13 Jun 2009 12:58:23 +0100"  >&lt;p&gt;The primary reason (and perhaps not a particularly good one) was I didn&apos;t want to wade around in the Javacc syntax of the .jj file that generates the QueryParser and the required extensions could be made in a subclass.&lt;/p&gt;

&lt;p&gt;Also there is invariably a performance hit for supporting things like wildcards in phrase queries so rather than adding another &quot;off by default&quot; flag in the main parser  and conditional logic to test if &quot;wildcards etc in phrases&quot; are allowed, the subclass could be seen as a specialised extension that is to be used by those that understand the trade-offs between functionality and performance.  &lt;/p&gt;

&lt;p&gt;I can sympathise with the purist approach of having all parser syntax defined in Javacc though.&lt;/p&gt;</comment>
                            <comment id="12719639" author="markrmiller@gmail.com" created="Mon, 15 Jun 2009 17:52:47 +0100"  >&lt;p&gt;Should this go in contrib rather than core? That seems to have been the approach so far, any reason to vary it up here?&lt;/p&gt;

&lt;p&gt;Well, actually, looks like I see the multi field parser in core. Makes sense to put subclasses there I guess.&lt;/p&gt;

&lt;p&gt;You think this is ready to commit Mark? If so, I should be able to review it (unless you want to commit it yourself).&lt;/p&gt;</comment>
                            <comment id="12719644" author="markrmiller@gmail.com" created="Mon, 15 Jun 2009 18:00:37 +0100"  >&lt;p&gt;Reformatted to lucene formatting, removed author tag, removed a couple unused fields, changed to patch format&lt;/p&gt;

&lt;p&gt;Tests don&apos;t pass because it doesnt work quite correctly with the new constantscore multi term queries yet.&lt;/p&gt;</comment>
                            <comment id="12723699" author="markrmiller@gmail.com" created="Wed, 24 Jun 2009 20:30:33 +0100"  >&lt;p&gt;Hey Mark, this doesn&apos;t work correctly with the new constant score mode. I&apos;m hesitant to put something in core that only works with boolean expansion.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure what needs to be done (I started and realized my interest wasn&apos;t high enough). Could you update this? Otherwise I&apos;m tempted to push off to 3.0...&lt;/p&gt;

&lt;p&gt;Unless another brave soul steps of course. Or I may jump back in - my brain is fickle.&lt;/p&gt;</comment>
                            <comment id="12723737" author="markh" created="Wed, 24 Jun 2009 22:05:57 +0100"  >&lt;p&gt;Added fix for ConstantScoreQuery changes&lt;/p&gt;</comment>
                            <comment id="12723742" author="markh" created="Wed, 24 Jun 2009 22:12:38 +0100"  >&lt;p&gt;The fix was relatively straight-forward from what I could see. Just temporarily unset the QueryParser&apos;s ConstantScoreRewrite mode when performing the pass that is just evaluating query elements inside phrase queries. These clauses need to resolve to traditional BooleanQuery-full-of-termQueries in order that they can be inspected and rewritten as Span equivalents for complex phrases.&lt;/p&gt;

&lt;p&gt;Should do the job.&lt;/p&gt;

&lt;p&gt;Cheers&lt;br/&gt;
Mark&lt;br/&gt;
(Been far too busy with other things and missing getting my hands dirty here with Lucene!)&lt;/p&gt;</comment>
                            <comment id="12723747" author="markrmiller@gmail.com" created="Wed, 24 Jun 2009 22:25:08 +0100"  >&lt;p&gt;Figured thats all it would take. I just was feeling a bit too lazy to try and understand the whole class after I put it up in front of me for a few seconds &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Figured I&apos;d try and pawn off a piece. I made some adjustments to the patch last time, but they were basically cosmetic.&lt;/p&gt;

&lt;p&gt;Looks like I didnt escape much work this time though - I&apos;ll review and commit shortly.&lt;/p&gt;

&lt;p&gt;Thanks a lot.&lt;/p&gt;</comment>
                            <comment id="12727622" author="markrmiller@gmail.com" created="Mon, 6 Jul 2009 18:03:06 +0100"  >&lt;p&gt;Whoops - almost let some 1.5 slip by:  throw new IllegalArgumentException(pe.getMessage(), pe) is not in 1.4.&lt;/p&gt;

&lt;p&gt;Last patch. I&apos;ll commit later today.&lt;/p&gt;</comment>
                            <comment id="12727685" author="markh" created="Mon, 6 Jul 2009 19:37:06 +0100"  >&lt;p&gt;Hi Mark,&lt;br/&gt;
Mind if I try committing this patch?&lt;br/&gt;
I&apos;ve just switched from PC to Mac and my dev environment is all changed (Subclipse vs TortoiseSvn etc) and I wouldn&apos;t mind checking my config and commit rights still work in this new environment.&lt;br/&gt;
If anyone has any  mac/subclipse-related &quot;gotchas&quot; I should be aware of, do let me know. &lt;/p&gt;

&lt;p&gt;Cheers&lt;br/&gt;
Mark&lt;/p&gt;</comment>
                            <comment id="12727692" author="markrmiller@gmail.com" created="Mon, 6 Jul 2009 19:47:18 +0100"  >&lt;p&gt;Please, by all means ! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12727726" author="markh" created="Mon, 6 Jul 2009 20:41:11 +0100"  >&lt;p&gt;Committed in 791579 -  &lt;a href=&quot;http://svn.apache.org/viewvc?rev=791579&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=791579&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12733889" author="adriano_crestani" created="Wed, 22 Jul 2009 00:18:08 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I&apos;m trying to understand what kind of syntax this query parser supports. I read the code and it does not say much. Is there any documentation (wiki, javadoc, etc) that specifies the syntax? Because it&apos;s not clear for me.&lt;/p&gt;

&lt;p&gt;Thanks in advance,&lt;br/&gt;
Adriano Crestani Campos&lt;/p&gt;</comment>
                            <comment id="12733893" author="markrmiller@gmail.com" created="Wed, 22 Jul 2009 00:21:33 +0100"  >&lt;p&gt;You might check the test class - it has a few basic examples. Its not much different than whats posted in the summary:&lt;/p&gt;

&lt;p&gt;Just experiment.&lt;/p&gt;

&lt;p&gt;+    checkMatches(&quot;\&quot;john smith\&quot;&quot;, &quot;1&quot;); // Simple multi-term still works&lt;br/&gt;
+    checkMatches(&quot;\&quot;j*   smyth~\&quot;&quot;, &quot;1,2&quot;); // wildcards and fuzzies are OK in&lt;br/&gt;
+    // phrases&lt;br/&gt;
+    checkMatches(&quot;\&quot;(jo* -john)  smith\&quot;&quot;, &quot;2&quot;); // boolean logic works&lt;br/&gt;
+    checkMatches(&quot;\&quot;jo*  smith\&quot;~2&quot;, &quot;1,2,3&quot;); // position logic works.&lt;br/&gt;
+    checkMatches(&quot;\&quot;jo* &lt;span class=&quot;error&quot;&gt;&amp;#91;sma TO smZ&amp;#93;&lt;/span&gt;\&quot; &quot;, &quot;1,2&quot;); // range queries supported&lt;br/&gt;
+    checkMatches(&quot;\&quot;john\&quot;&quot;, &quot;1,3&quot;); // Simple single-term still works&lt;br/&gt;
+    checkMatches(&quot;\&quot;(john OR johathon)  smith\&quot;&quot;, &quot;1,2&quot;); // boolean logic with&lt;br/&gt;
+    // brackets works.&lt;br/&gt;
+    checkMatches(&quot;\&quot;(jo* -john) smyth~\&quot;&quot;, &quot;2&quot;); // boolean logic with&lt;br/&gt;
+    // brackets works.&lt;br/&gt;
+&lt;br/&gt;
+    // checkMatches(&quot;\&quot;john -percival\&quot;&quot;, &quot;1&quot;); // not logic doesn&apos;t work&lt;br/&gt;
+    // currently &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;br/&gt;
+&lt;br/&gt;
+    checkMatches(&quot;\&quot;john  nosuchword*\&quot;&quot;, &quot;&quot;); // phrases with clauses producing&lt;br/&gt;
+    // empty sets&lt;br/&gt;
+&lt;br/&gt;
+    checkBadQuery(&quot;\&quot;jo*  id:1 smith\&quot;&quot;); // mixing fields in a phrase is bad&lt;br/&gt;
+    checkBadQuery(&quot;\&quot;jo* \&quot;smith\&quot; \&quot;&quot;); // phrases inside phrases is bad&lt;/p&gt;</comment>
                            <comment id="12733917" author="adriano_crestani" created="Wed, 22 Jul 2009 01:25:25 +0100"  >&lt;p&gt;Thanks for the quick response Mark!&lt;/p&gt;

&lt;p&gt;OK, I&apos;m trying now to figure out what is supported reading the junits only, and I ran into some issues:&lt;/p&gt;

&lt;p&gt;What do you mean on the last check by phrase inside phrase, I don&apos;t see any phrase inside a phrase (I&apos;m not sure either what it would be, because there is no open and close phrase delimiter), all I see is a phrase &amp;lt;&quot;jo*&quot;&amp;gt;, followed by a term &amp;lt;smith&amp;gt; and an empty phrase &amp;lt;&quot; &quot;&amp;gt;. And the check passes because the query parser throws an exception complaning about the empty phrase, it seems to not be supported. I just changed the empty phrase to a valid phrase and the query works (failing the test case). But as I said, I&apos;m not sure what you were exactly trying to do there, could you give me more explation about that?&lt;/p&gt;

&lt;p&gt;I&apos;m also getting a java.util.ConcurrentModificationException when I type an escaped double quotes inside phrases. So, I suppose it&apos;s not supported, but shouldn&apos;t it throw a better exception?&lt;/p&gt;

&lt;p&gt;I also have an issue with the parse exceptions, if it comes from inside a phrase, it does not tell the correct position in the query string. I think it considers the beginning of the phrase as the beginning of the query and it only prints the phrase that contains the problem.&lt;/p&gt;

&lt;p&gt;I&apos;m attaching some changes I did in the TestComplexPhraseQuery junit that shows these problems I&apos;m getting, I think it&apos;s easier to understand if you read and run it.&lt;/p&gt;

&lt;p&gt;Sorry for so many questions, but I&apos;m just trying to understand what exactly this query parser supports or not.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Adriano Crestani Campos&lt;/p&gt;</comment>
                            <comment id="12733933" author="markrmiller@gmail.com" created="Wed, 22 Jul 2009 02:11:34 +0100"  >&lt;p&gt;You may have to wait for the author, Mark Harwood to respond. I just reviewed the issue. A couple points though:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What do you mean on the last check by phrase inside phrase, I don&apos;t see any phrase inside a phrase (I&apos;m not sure either what it would be, because there is no open and close phrase delimiter), all I see is a phrase &amp;lt;&quot;jo*&quot;&amp;gt;, followed by a term &amp;lt;smith&amp;gt; and an empty phrase &amp;lt;&quot; &quot;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Its kind of a phrase within a phrase (though the &quot;smith&quot; phrase could be turned into a term query) - unescaped: &quot;jo* &quot;smith&quot;&quot; - the full thing is phrase one, and smith is the inner phrase (though yes, only a term in the phrase).&lt;/p&gt;

&lt;p&gt;If Mark Harwood doesn&apos;t have time to answer soon, I&apos;ll dig in more and respond to your other questions/comments.&lt;/p&gt;</comment>
                            <comment id="12733940" author="michaelbusch" created="Wed, 22 Jul 2009 02:25:20 +0100"  >&lt;p&gt;Looking at the problems Adriano is seeing it almost seems like this was a bit prematurely committed? It seems like a lot of queries you could enter here are not really supported and might throw strange exceptions.&lt;/p&gt;

&lt;p&gt;Maybe it should live in contrib for now (with experimental warnings)?&lt;/p&gt;</comment>
                            <comment id="12733946" author="markrmiller@gmail.com" created="Wed, 22 Jul 2009 02:42:36 +0100"  >&lt;p&gt;I originally thought it might live in contrib as well (see above), but I&apos;m personally fine with it being in core.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It seems like a lot of queries you could enter here are not really supported and might throw strange exceptions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A lot of queries? I think Adriano is just having trouble with phrases inside phrases, which is unsupported. Other things that are not supported might throw exceptions too, but I think thats to be expected? I see what Adriano was talking about now - technically the first 2 quotes would match, and then the second two - I think Mark H was just demonstrating that you shouldn&apos;t try that query though - a user might think they are quoting smith, but for the example, it doesn&apos;t matter. I think he just trying to show that you shouldn&apos;t try and &quot;nest&quot; phrases - even though they wouldn&apos;t be interpreted that way anyway.&lt;/p&gt;

&lt;p&gt;It only supports a limited subset of the Lucene query language - perhaps we could improve the exceptions being thrown, but the exceptions the queryparser throws often leave just as much to be desired. I don&apos;t think its experimental because of that.&lt;/p&gt;

&lt;p&gt;Personally, I think the class does what it intends - allows a limited subset of the Lucene query language in phrases. Though of course it could be improved.&lt;/p&gt;

&lt;p&gt;I&apos;ll let Mark H respond though. I also don&apos;t mind seeing it moved to contrib, but I&apos;m not sure anything glaring points to it being moved at the moment. It lives up to its limited contract I think.&lt;/p&gt;</comment>
                            <comment id="12733956" author="adriano_crestani" created="Wed, 22 Jul 2009 03:37:01 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I see what Adriano was talking about now - technically the first 2 quotes would match, and then the second two - I think Mark H was just demonstrating that you shouldn&apos;t try that query though - a user might think they are quoting smith, but for the example, it doesn&apos;t matter. I think he just trying to show that you shouldn&apos;t try and &quot;nest&quot; phrases - even though they wouldn&apos;t be interpreted that way anyway.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, if you guessed his intention correctly, the comment is misleading: &quot;phrases inside phrases is bad&quot;. But lets wait for his response.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Other things that are not supported might throw exceptions too&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think a user would expect a ParseException. Probably, every query parser user catches ParserException and show a nice message to its final user. Now, if the query parser starts throwing random exception to say the syntax is invalid, every software that uses Lucene query parser is gonna start crashing. For me it&apos;s like if a compiler started throwing segmentation fault every time you forget a } in the code.&lt;/p&gt;</comment>
                            <comment id="12733957" author="markrmiller@gmail.com" created="Wed, 22 Jul 2009 03:45:06 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I think a user would expect a ParseException. Probably, every query parser user catches ParserException and show a nice message to its final user. Now, if the query parser starts throwing random exception to say the syntax is invalid, every software that uses Lucene query parser is gonna start crashing. For me it&apos;s like if a compiler started throwing segmentation fault every time you forget a } in the code.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s a fair point - addressable though - we can likely catch and rethrow in the worst case.&lt;/p&gt;

&lt;p&gt;I&apos;ll admit, the ... non exactness ... of this parser troubled me at first - one of the reasons I liked contrib as a landing spot early on. I took it for what it is in the end I suppose. I think the shortfalls brought up so far can be addressed to a large degree though.&lt;/p&gt;</comment>
                            <comment id="12733958" author="markrmiller@gmail.com" created="Wed, 22 Jul 2009 03:50:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;Well, if you guessed his intention correctly, the comment is misleading: &quot;phrases inside phrases is bad&quot;. But lets wait for his response.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think thats a bit of judgement call. We know that the way the query is parsed, you cannot really ever do &quot;phrases inside phrases&quot;. However, a user of this parser might think, that like the other syntax, perhaps you can use &quot;phrases inside phrases&quot; - and if you thought that, the example given is likely how you&apos;d imagine it to work. The outside phrase, and then the inside phrase. I certainly agree some comments would clear it up, but I think its a useful example.&lt;/p&gt;</comment>
                            <comment id="12733961" author="adriano_crestani" created="Wed, 22 Jul 2009 04:02:41 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;ll admit, the ... non exactness ... of this parser troubled me at first - one of the reasons I liked contrib as a landing spot early on. I took it for what it is in the end I suppose. I think the shortfalls brought up so far can be addressed to a large degree though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think contrib would be a good place for now, until it gets more stable and better documented.&lt;/p&gt;</comment>
                            <comment id="12733966" author="markrmiller@gmail.com" created="Wed, 22 Jul 2009 04:12:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think contrib would be a good place for now, until it gets more stable and better documented.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If Mark H thinks it should be moved, I won&apos;t disagree. But I still don&apos;t see a convincing reason. It could use some more documentation, but so could quite a few other classes in core. Its something of a subjective call,  and  more importantly, it can be addressed now.&lt;/p&gt;

&lt;p&gt;I&apos;m not yet convinced its unstable - the only major issue I see so far is the exception issue - but that wouldn&apos;t seem to prompt a move to contrib, but an update to address the concern. Moving to contrib is always an option, but I don&apos;t think its the default move based on whats been brought up. The standard move would be to address whatever issues are brought up ... so far I am just seeing the exception issue as a large one, and I think that is fairly easily addressable.&lt;/p&gt;</comment>
                            <comment id="12733982" author="michaelbusch" created="Wed, 22 Jul 2009 05:43:23 +0100"  >&lt;blockquote&gt;
&lt;p&gt;It only supports a limited subset of the Lucene query language - perhaps we could improve the exceptions being thrown, but the exceptions the queryparser throws often leave just as much to be desired. I don&apos;t think its experimental because of that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because it only supports a limited subset of the language, I feel like we could have taken a different approach here? Why not add the features that are supported and make sense to the main query parser? &lt;/p&gt;

&lt;p&gt;The documentation does not tell me what is supported and what is not currently. And looking through the code some methods now throw RuntimeExceptions, because the overridden methods themselves don&apos;t throw anything. These things feel a bit unfinished. &lt;/p&gt;

&lt;p&gt;I&apos;m not saying these issues are not fixable. But maybe we should rethink the design. My biggest concern is that this new parser doesn&apos;t seem to have a well-defined syntax. So since it doesn&apos;t check if a query is actually valid or not, it might be hard to maintain. E.g. if you add new language features to the main QP, it&apos;s currently not defined what will happen if you use them with this one.&lt;/p&gt;

&lt;p&gt;That&apos;s why I&apos;m proposing to move it to contrib and mark it as experimental. Then we have more time to decide if the approach of adding the new features to the main QP makes more sense. &lt;/p&gt;</comment>
                            <comment id="12734015" author="lafa" created="Wed, 22 Jul 2009 07:43:00 +0100"  >&lt;p&gt;I share same opinion as Michael,&lt;br/&gt;
the implementation has a lot of undefined/undocumented behaviors,&lt;br/&gt;
simple because it reuses the queryparser to parse the text inside a phrase. &lt;br/&gt;
All the lucene syntax needs to be accounted on this design, but it does not seem to be the case.&lt;/p&gt;

&lt;p&gt;Problems like Adriano described, phrase inside a phrase, position reporting for errors.&lt;/p&gt;

&lt;p&gt;I also have a lot of concerns about having the full lucene syntax inside phrases &lt;br/&gt;
and trying to restrict this by throwing exceptions for particular cases does not seem the best design.&lt;/p&gt;

&lt;p&gt;Here is a example of with OR, AND, PARENTESIS with a proximity search&lt;br/&gt;
&quot;(( jakarta OR green) AND (blue AND orange)  AND black~0.5) apache&quot;~10&lt;/p&gt;

&lt;p&gt;What should a user expect from this query, without looking at the code. I&apos;m not sure.&lt;br/&gt;
Does it even make sense to support this complex syntax? In my opinion. no&lt;/p&gt;

&lt;p&gt;I think we should define what is the subset of the language we want to support inside the phrases with a well defined behavior.&lt;br/&gt;
If Mark describes all the syntax he wants to support inside phrases, I actually don&apos;t mind to implement a new parser.for this.&lt;/p&gt;

&lt;p&gt;My view is, contrib is probably a better place to have this code, until we figure out a implementation that does not impose as many restrictions on changes to the original queryparser and describes a well defined syntax to be applied inside phrases.&lt;/p&gt;
</comment>
                            <comment id="12734141" author="lafa" created="Wed, 22 Jul 2009 15:53:43 +0100"  >&lt;p&gt;I added 2 testcases that return doc 3.&lt;br/&gt;
These queries do not make much sense,&lt;br/&gt;
I added it just to prove the point that we need more information&lt;br/&gt;
describing the use case for complex phrase qp.&lt;br/&gt;
We also should define a subset of the supported syntax we want to support inside phrases, &lt;br/&gt;
with well defined behaviors.&lt;/p&gt;

&lt;p&gt;	checkMatches(&quot;\&quot;(goos~0.5 AND (mike OR smith) AND NOT ( percival AND john) ) vacation\&quot;~3&quot;,&quot;3&quot;); // proximity with fuzzy, OR, AND, NOT&lt;br/&gt;
	checkMatches(&quot;\&quot;(goos~0.5 AND (mike OR smith) AND ( percival AND john) ) vacation\&quot;~3&quot;,&quot;3&quot;); // proximity with fuzzy, OR, AND&lt;/p&gt;</comment>
                            <comment id="12734148" author="markh" created="Wed, 22 Jul 2009 16:16:30 +0100"  >&lt;p&gt;I&apos;ll try and catch up with some of the issues raised here:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What do you mean on the last check by phrase inside phrase, I don&apos;t see any phrase inside a phrase&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Correct, the &quot;inner phrase&quot; example was a term not a phrase. This is perhaps a better example:&lt;/p&gt;

&lt;p&gt;		checkBadQuery(&quot;\&quot;jo* \&quot;percival smith\&quot; \&quot;&quot;); //phrases inside phrases is bad&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m trying now to figure out what is supported &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The Junit is currently the main form of documentation - unlike the XMLQueryParser (which has a DTD) there is no syntax to formally capture the logic. &lt;br/&gt;
Here is a basic summary of the syntax supported and how it differs from normal non-phrase use of the same operators:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Wildcard/fuzzy/range clauses can be used to define a phrase element (as opposed to simply single terms)&lt;/li&gt;
	&lt;li&gt;Brackets are used to group/define the acceptable variations for a given phrase element  e.g. &quot;(john OR jonathon) smith&quot;&lt;/li&gt;
	&lt;li&gt;&quot;AND&quot; is irrelevant - there is effectively an implied &quot;AND_NEXT_TO&quot; binding all phrase elements&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To move this forward I would suggest we consider following one of these options:&lt;/p&gt;

&lt;p&gt;1) Keep in core and improve error reporting and documentation&lt;br/&gt;
2) Move into &quot;contrib&quot; as experimental &lt;br/&gt;
3) Retain in core but simplify it to support only the simplest syntax (as in my Britney~ example)&lt;br/&gt;
4) Re-engineer the QueryParser.jj to support a formally defined syntax for acceptable &quot;within phrase&quot; operators e.g. *, ~, ( ) &lt;/p&gt;

&lt;p&gt;I think 1) is achievable if we carefully define where the existing parser breaks (e.g. ANDs and nested brackets)&lt;br/&gt;
2) is unnecessary if we can achieve 1).&lt;br/&gt;
3) would be a shame if we lost useful features for some very convoluted edge cases&lt;br/&gt;
4) is beyond my JavaCC skills.&lt;/p&gt;
















</comment>
                            <comment id="12734150" author="markrmiller@gmail.com" created="Wed, 22 Jul 2009 16:24:57 +0100"  >&lt;p&gt;My first thought is, if we can address some of the issues brought up, there is no reason to keep this out of core IMHO.&lt;/p&gt;

&lt;p&gt;My second thought is, I have a feeling a lot of this concern stems from the fact that these guys (or one of them) has to duplicate this thing with the QueryParser code in contrib. That could be reason enough to move it to contrib. But it doesn&apos;t solve the issue longer term when the old QueryParser is removed. It would need to be replaced then, or dropped from contrib.&lt;/p&gt;

&lt;p&gt;With the new info from Mark H, how hard would it be to create a new imp for the new parser that did a lot of this, in a more defined way? It seems you basically just want to be able to use multiterm queries and group/or things, right? We could even relax a little if we have to. This hasn&apos;t been released, so there is still a lot of wiggle room I think. But there does have to be a resolution with this and the new parser at some point either way.&lt;/p&gt;</comment>
                            <comment id="12734241" author="adriano_crestani" created="Wed, 22 Jul 2009 19:37:38 +0100"  >&lt;p&gt;Hi Mark H.,&lt;/p&gt;

&lt;p&gt;Thanks for the response, some comments inline:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Correct, the &quot;inner phrase&quot; example was a term not a phrase. This is perhaps a better example:&lt;/p&gt;

&lt;p&gt;checkBadQuery(&quot;\&quot;jo* \&quot;percival smith\&quot; \&quot;&quot;); //phrases inside phrases is bad&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think you did not get what I meant, even with your new example, there is no inner phrase, it is: a phrase &amp;lt;&quot;jo* &quot;&amp;gt;, followed by a term &amp;lt;percival&amp;gt;, followed by another term &amp;lt;smith&amp;gt;, and an empty phrase &amp;lt;&quot; &quot;&amp;gt;. So, with your change, the junit passes, but for the wrong reason. It gets an exception complaining about the empty phrase and not because there is an inner phrase (I still don&apos;t see how you can type an inner phrase with the current syntax). I think it&apos;s not a big deal, but I&apos;m just trying to understand and raise a probable wrong test. I expect you understood what I mean, let me know if I did not make it clear.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Junit is currently the main form of documentation&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But not the ideal, because the source code (junit code) is not released in the binary release. So, the ideal place should be in the javadocs.&lt;/p&gt;

&lt;blockquote&gt;

&lt;ul&gt;
	&lt;li&gt;Wildcard/fuzzy/range clauses can be used to define a phrase element (as opposed to simply single terms)&lt;/li&gt;
	&lt;li&gt;Brackets are used to group/define the acceptable variations for a given phrase element e.g. &quot;(john OR jonathon) smith&quot;&lt;/li&gt;
	&lt;li&gt;&quot;AND&quot; is irrelevant - there is effectively an implied &quot;AND_NEXT_TO&quot; binding all phrase elements&lt;/li&gt;
&lt;/ul&gt;

&lt;/blockquote&gt;

&lt;p&gt;Thanks, now it&apos;s clearer for me what is supported or not. I have some questions:&lt;/p&gt;

&lt;p&gt;I understand this AND_NEXT_TO implicit operator between the queries inside the phrase. However, what happens if the user do not type any explicit boolean operator between two terms inside parentheses: &quot;(query parser) lucene&quot;. Is the operator between &apos;query&apos; and &apos;parser&apos; the implicit AND_NEXT_TO or the default boolean operator (usually OR)?&lt;/p&gt;

&lt;p&gt;What happens if I type &quot;(query AND parser) lucene&quot;. In my point of view it is: &quot;(query AND parser) AND_NEXT_TO lucene&quot;. Which means for me: find any document that contains the term &apos;query&apos; and the term &apos;parser&apos; in the position x, and the term &apos;lucene&apos; in the position x+1. Is this the expected behaviour?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Keep in core and improve error reporting and documentation&lt;br/&gt;
2) Move into &quot;contrib&quot; as experimental&lt;br/&gt;
3) Retain in core but simplify it to support only the simplest syntax (as in my Britney~ example)&lt;br/&gt;
4) Re-engineer the QueryParser.jj to support a formally defined syntax for acceptable &quot;within phrase&quot; operators e.g. *, ~, ( )&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;1 is good, but I would prefer 4 too. Documentation and throw the right exception are necessary. I just don&apos;t feel confortable on the complex phrase query parser relying on the main query parser syntax, any change on the main one could easialy brake the complex phrase QP. Anyway, 4 may be done in future &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Mark M.:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With the new info from Mark H, how hard would it be to create a new imp for the new parser that did a lot of this, in a more defined way? It seems you basically just want to be able to use multiterm queries and group/or things, right? We could even relax a little if we have to. This hasn&apos;t been released, so there is still a lot of wiggle room I think. But there does have to be a resolution with this and the new parser at some point either way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I am working on the new query parser code. I started recently to read and understand how the ComplexPhraseQP works, so I could reproduce the behaviour using the new QP framework. I first tried to look at this QP as a user and could not figure out what exactly I can or not do with it. I think now we are hitting a big problem, which is related to documentation. That is why I started raising these question, because others could also have the same issues in future.&lt;/p&gt;

&lt;p&gt;So, yes, I can start coding some equivalent QP using the new QP framework, I&apos;m just questioning and trying to understand everything before I start any coding. I don&apos;t wanna code anything that wil throw ConcurrentModificationExceptions, that&apos;s why I&apos;m raising these issues now, before I start moving it to the new QP.&lt;/p&gt;

&lt;p&gt;Best Regards,&lt;br/&gt;
Adriano Crestani Campos&lt;/p&gt;</comment>
                            <comment id="12734296" author="michaelbusch" created="Wed, 22 Jul 2009 21:24:38 +0100"  >&lt;p&gt;I think the best thing to do here is do exactly define what syntax is supposed to be supported (which Mark H. did in his latest comment), and then implement the new syntax with the new queryparser. It will enforce correct syntax and give meaningful exceptions if a query was entered that is not supported.&lt;/p&gt;

&lt;p&gt;I think we can still reuse big portions of Mark&apos;s patch: we should be able to write a new QueryBuilder that produces the new ComplexPhraseQuery.&lt;/p&gt;

&lt;p&gt;Adriano/Luis: how long would it take to implement? Can we contain it for 2.9?&lt;/p&gt;

&lt;p&gt;This would mean that these new features would go into contrib in 2.9 as part of the new query parser framework, and then be moved to core in 3.0. Also from 3.0 these new features would then be part of Lucene&apos;s main query syntax. Would this makes sense?&lt;/p&gt;</comment>
                            <comment id="12734298" author="michaelbusch" created="Wed, 22 Jul 2009 21:26:25 +0100"  >&lt;p&gt;Reopening this issues; we haven&apos;t made a final decision on how we want to go forward yet, but in any case there&apos;s remaining work here.&lt;/p&gt;</comment>
                            <comment id="12734300" author="lafa" created="Wed, 22 Jul 2009 21:27:46 +0100"  >&lt;p&gt;Hi Mark H&lt;/p&gt;

&lt;p&gt;I would like to propose 5,&lt;br/&gt;
5) Re-engineer the QueryParser.jj to support a formally defined syntax for acceptable &quot;within phrase&quot; operators e.g. *, ~, ( ) &lt;br/&gt;
    I propose doing this using using the new QP implementation. (I can write the new javacc QP for this)&lt;br/&gt;
    (this implies that the code will be in contrib in 2.9 and be part of core on 3.0)&lt;/p&gt;

&lt;p&gt;I also want to propose to change the complexphrase to use single quotes,&lt;br/&gt;
this way we can have both implementation for phrases.&lt;/p&gt;

&lt;p&gt;Here is a summary:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the complexqueryparser would support all Lucene syntax even for phrases&lt;/li&gt;
	&lt;li&gt;and we could add singlequoted text to identify complexphrases&lt;br/&gt;
    1) Wildcard/fuzzy/range clauses can be used to define a phrase element (as opposed to simply single terms)&lt;br/&gt;
    2) Brackets are used to group/define the acceptable variations for a given phrase element e.g. &quot;(john OR jonathon) smith&quot;&lt;br/&gt;
    3) supported operators: OR, *, ~, ( ), ?&lt;br/&gt;
    4) disallow fields, proximity, boosting and operators on single quoted phrases (I&apos;m making an assumption here, Mark H please comment)&lt;br/&gt;
    5) singlequotes need to be escaped, double quotes will be treated as regular punctuation characters inside single quoted strings&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Mark H, can you please elaborate more on the these other operators &quot;+&quot; &quot;-&quot; &quot;^&quot; &quot;AND&quot; &quot;&amp;amp;&amp;amp;&quot; &quot;||&quot; &quot;NOT&quot; &quot;!&quot; &quot;:&quot; &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot; &amp;quot;&amp;#93;&lt;/span&gt;&quot; &quot;&lt;/p&gt;
{&quot; &quot;}
&lt;p&gt;&quot;.&lt;/p&gt;

&lt;p&gt;Example:&lt;br/&gt;
A query with single quoted (complexphrase) followed by a term and a normal phrase:&lt;/p&gt;

&lt;p&gt;query: &apos;(john OR jonathon) smith~0.3 order*&apos; order:sell  &quot;stock market&quot;  &lt;/p&gt;
</comment>
                            <comment id="12734323" author="lafa" created="Wed, 22 Jul 2009 22:10:32 +0100"  >&lt;p&gt;Mark H - &lt;/p&gt;

&lt;p&gt;Question 1)&lt;/p&gt;

&lt;p&gt;I added a doc 5 and 6&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;TestComplexPhraseQuery.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
...
  DocData docsContent[] = { &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DocData(&lt;span class=&quot;code-quote&quot;&gt;&quot;john smith&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;1&quot;&lt;/span&gt;),
      &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DocData(&lt;span class=&quot;code-quote&quot;&gt;&quot;johathon smith&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;2&quot;&lt;/span&gt;),      
      &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DocData(&lt;span class=&quot;code-quote&quot;&gt;&quot;john percival smith goes on  a b c vacation&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;3&quot;&lt;/span&gt;),
      &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DocData(&lt;span class=&quot;code-quote&quot;&gt;&quot;jackson waits tom&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;4&quot;&lt;/span&gt;),
      &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DocData(&lt;span class=&quot;code-quote&quot;&gt;&quot;johathon smith john&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;5&quot;&lt;/span&gt;),
      &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DocData(&lt;span class=&quot;code-quote&quot;&gt;&quot;johathon mary gomes smith&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;6&quot;&lt;/span&gt;),
      };
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for test &lt;br/&gt;
    checkMatches(&quot;\&quot;(jo* -john) smyth\&quot;&quot;, &quot;2&quot;); // boolean logic with&lt;/p&gt;

&lt;p&gt;would document 5 be returned or just doc 2 should be returned,&lt;br/&gt;
I&apos;m assuming position is always important and doc 5 is supposed to be returned.&lt;br/&gt;
Is this the correct behavior?&lt;/p&gt;

&lt;p&gt;Question 2)&lt;br/&gt;
Should these 2 queries behave the same when we fix the problem&lt;br/&gt;
    // checkMatches(&quot;\&quot;john -percival\&quot;&quot;, &quot;1&quot;); // not logic doesn&apos;t work&lt;br/&gt;
    // checkMatches(&quot;\&quot;john (-percival)\&quot;&quot;, &quot;1&quot;); // not logic doesn&apos;t work&lt;/p&gt;

&lt;p&gt;Question 3)&lt;br/&gt;
for query:&lt;br/&gt;
checkMatches(&quot;\&quot;jo*  smith\&quot;~2&quot;, &quot;1,2,3,5&quot;); // position logic works.&lt;br/&gt;
doc 6 is also returned, so this feature does not seem to be working.&lt;/p&gt;

&lt;p&gt;Question 4)&lt;br/&gt;
The usage of AND and AND_NEXT_TO is confusing to me&lt;br/&gt;
the query &lt;br/&gt;
checkMatches(&quot;\&quot;(jo* AND mary)  smith\&quot;&quot;, &quot;1,2,5&quot;); // boolean logic with&lt;/p&gt;

&lt;p&gt;returns 1,2,5 and not 6, but I was only expecting 6 to be returned,&lt;br/&gt;
seems that like the AND is converted into a OR.&lt;br/&gt;
What is the behavior you want to implement?&lt;/p&gt;

</comment>
                            <comment id="12734333" author="lafa" created="Wed, 22 Jul 2009 22:30:32 +0100"  >&lt;p&gt;Sorry for all the emails, &lt;br/&gt;
I&apos;m still new to JIRA and only now I realized that for every edit I do,a email is sent.&lt;/p&gt;

&lt;p&gt;But now that I found the preview button, it won&apos;t happen again. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12734337" author="markh" created="Wed, 22 Jul 2009 22:32:21 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think it&apos;s not a big deal, but I&apos;m just trying to understand and raise a probable wrong test.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Granted, the test fails for a reason other than the one for which I wanted it to fail. &lt;br/&gt;
We can probably strike the test and leave a note saying phrase-within-a-phrase just does not make sense and is not supported.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is the operator between &apos;query&apos; and &apos;parser&apos; the implicit AND_NEXT_TO or the default boolean operator (usually OR)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In brackets it&apos;s an OR - the brackets are used to suggest that the current phrase element at position X is composed of some choices that are evaluated as a subclause in the same way that in normal query logic sub-clauses are defined in brackets e.g. +a +(b OR c). There seems to be a reasonable logic to this.&lt;/p&gt;

&lt;p&gt;Ideally the ComplexPhraseQueryParser should explicitly turn this setting on while evaluating the bracketed innards of phrases just in case the base class has AND as the default.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Mark H, can you please elaborate more on the these other operators &quot;+&quot; &quot;-&quot; &quot;^&quot; &quot;AND&quot; &quot;&amp;amp;&amp;amp;&quot; &quot;||&quot; &quot;NOT&quot; &quot;!&quot; &quot;:&quot; &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot; &amp;quot;&amp;#93;&lt;/span&gt;&quot; &quot;{&quot; &quot;}&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I&apos;ll try and deal with them one by one but these are not necessarily definitive answers or guarantees of correctly implemented support&lt;/p&gt;

&lt;p&gt;OR,||,+, AND, &amp;amp;&amp;amp; ..... ignored. The implicit operator is AND_NEXT_TO apart from in bracketed sections where all elements at this level are ORed&lt;br/&gt;
^ .....boosts are carried through from TermQuerys to SpanTermQuerys&lt;br/&gt;
NOT, ! ....Creates SpanNotQueries &lt;br/&gt;
[]{} ....range queries are supported as are wildcards *, fuzzies  ~, ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;query: &apos;(john OR jonathon) smith~0.3 order*&apos; order:sell &quot;stock market&quot;&lt;/p&gt;&lt;/blockquote&gt;


&lt;p&gt;I&apos;ll post the XML query syntax equivalent of what should be parsed here shortly (just seen your next comment come in) &lt;/p&gt;


</comment>
                            <comment id="12734349" author="markh" created="Wed, 22 Jul 2009 22:59:28 +0100"  >&lt;blockquote&gt;&lt;p&gt;for test checkMatches(&quot;\&quot;(jo* -john) smyth\&quot;&quot;, &quot;2&quot;); &lt;br/&gt;
would document 5 be returned or just doc 2 should be returned,&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I presume you mean smith not smyth here otherwise nothing would match? If so, doc 5 should match and position is relevant (subject to slop factors).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Question 2)&lt;br/&gt;
Should these 2 queries behave the same when we fix the problem&lt;br/&gt;
// checkMatches(&quot;\&quot;john -percival\&quot;&quot;, &quot;1&quot;); // not logic doesn&apos;t work&lt;br/&gt;
// checkMatches(&quot;\&quot;john (-percival)\&quot;&quot;, &quot;1&quot;); // not logic doesn&apos;t work&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I suppose there&apos;s an open question as to if the second example is legal (the brackets are unnecessary)&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Question 3)&lt;br/&gt;
checkMatches(&quot;\&quot;jo* smith\&quot;~2&quot;, &quot;1,2,3,5&quot;); // position logic works.&lt;br/&gt;
doc 6 is also returned, so this feature does not seem to be working.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That looks like a bug related to slop factor?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Question 4)&lt;br/&gt;
The usage of AND and AND_NEXT_TO is confusing to me&lt;br/&gt;
the query &lt;br/&gt;
checkMatches(&quot;\&quot;(jo* AND mary) smith\&quot;&quot;, &quot;1,2,5&quot;); // boolean logic with&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;ANDs are ignored and turned into ORs (see earlier comments) but maybe a query parse error should be thrown to emphasise this.&lt;/p&gt;


</comment>
                            <comment id="12734355" author="markh" created="Wed, 22 Jul 2009 23:14:20 +0100"  >&lt;blockquote&gt;
&lt;p&gt;query: &apos;(john OR jonathon) smith~0.3 order*&apos; order:sell &quot;stock market&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Would be parsed as follows (shown as equivalent XMLQueryParser syntax)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt; 
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;BooleanQuery&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Clause occurs=&lt;span class=&quot;code-quote&quot;&gt;&quot;should&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;SpanNear &amp;gt;&lt;/span&gt;		
			&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;SpanOr&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;SpanOrTerms&amp;gt;&lt;/span&gt;john jonathon &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/SpanOrTerms&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/SpanOr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;SpanOr&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;SpanOrTerms&amp;gt;&lt;/span&gt; smith smyth&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/SpanOrTerms&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/SpanOr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;SpanOr&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;SpanOrTerms&amp;gt;&lt;/span&gt; order orders&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/SpanOrTerms&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/SpanOr&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/SpanNear&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Clause&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Clause occurs=&lt;span class=&quot;code-quote&quot;&gt;&quot;should&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;TermQuery fieldName=&lt;span class=&quot;code-quote&quot;&gt;&quot;order&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;sell&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/TermQuery&amp;gt;&lt;/span&gt;		
 &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Clause&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Clause occurs=&lt;span class=&quot;code-quote&quot;&gt;&quot;should&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;UserQuery&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;stock market&quot;&lt;/span&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/UserQuery &amp;gt;&lt;/span&gt;		
 &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Clause&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/BooleanQuery&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12734398" author="adriano_crestani" created="Thu, 23 Jul 2009 01:09:21 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I propose doing this using using the new QP implementation. (I can write the new javacc QP for this)&lt;br/&gt;
(this implies that the code will be in contrib in 2.9 and be part of core on 3.0)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be good!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Granted, the test fails for a reason other than the one for which I wanted it to fail.&lt;br/&gt;
We can probably strike the test and leave a note saying phrase-within-a-phrase just does not make sense and is not supported.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cool, I agree to remove it. But I still don&apos;t see how an user can type a phrase inside a phrase with the current syntax definition, can you give me an example?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In brackets it&apos;s an OR - the brackets are used to suggest that the current phrase element at position X is composed of some choices that are evaluated as a subclause in the same way that in normal query logic sub-clauses are defined in brackets e.g. +a +(b OR c). There seems to be a reasonable logic to this.&lt;/p&gt;

&lt;p&gt;Ideally the ComplexPhraseQueryParser should explicitly turn this setting on while evaluating the bracketed innards of phrases just in case the base class has AND as the default.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If we use the implemented java cc code Luis suggested, we would have already a query parser that throws ParseExceptions whenever the user types an AND inside a phrase.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OR,||,+, AND, &amp;amp;&amp;amp; ..... ignored&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So we should throw an excpetion if any of these is found inside a phrase. It could confuse the user if we just ignore it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;    Question 2)&lt;br/&gt;
    Should these 2 queries behave the same when we fix the problem&lt;br/&gt;
    // checkMatches(&quot;\&quot;john -percival\&quot;&quot;, &quot;1&quot;); // not logic doesn&apos;t work&lt;br/&gt;
    // checkMatches(&quot;\&quot;john (-percival)\&quot;&quot;, &quot;1&quot;); // not logic doesn&apos;t work&lt;/p&gt;

&lt;p&gt;I suppose there&apos;s an open question as to if the second example is legal (the brackets are unnecessary)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, the second is unnecessary, but I don&apos;t think it&apos;s illegal. The user could type &amp;lt;(smith)&amp;gt; outside the phrase, it makes sense to support it inside also.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;    Question 3)&lt;br/&gt;
    checkMatches(&quot;\&quot;jo* smith\&quot;~2&quot;, &quot;1,2,3,5&quot;); // position logic works.&lt;br/&gt;
    doc 6 is also returned, so this feature does not seem to be working.&lt;/p&gt;

&lt;p&gt;That looks like a bug related to slop factor?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have not checked yet, but I think it&apos;s working fine. The slop means how many switches between the terms inside the phrase is allowed to match the query. It matches doc 6, because the term &amp;lt;smith&amp;gt; switches twice to the right and matched &quot;johathon mary gomes smith&quot;. Twice = slop 2 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ANDs are ignored and turned into ORs (see earlier comments) but maybe a query parse error should be thrown to emphasise this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we could support AND also. I agree there are few cases where the user would use that. It would work as I explained before:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What happens if I type &quot;(query AND parser) lucene&quot;. In my point of view it is: &quot;(query AND parser) AND_NEXT_TO lucene&quot;. Which means for me: find any document that contains the term &apos;query&apos; and the term &apos;parser&apos; in the position x, and the term &apos;lucene&apos; in the position x+1. Is this the expected behaviour?&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="12735041" author="iorixxx" created="Fri, 24 Jul 2009 13:19:09 +0100"  >&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;I am using your ComplexPhraseQueryParser. I integrated it into Solr. &lt;br/&gt;
I am interested in it mainly because it supports OR operator and wildcards inside proximity search.&lt;/p&gt;

&lt;p&gt;Specifically : &quot;(john johathon) smith&quot;~10   and   &quot;j* smith&quot;&lt;br/&gt;
They both work perfectly, thank you for your work.&lt;/p&gt;

&lt;p&gt;I downloaded source code of it from &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=791579&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=791579&lt;/a&gt;&lt;br/&gt;
And then edited the code a little bit since I am using lucene 2.4.1:&lt;/p&gt;

&lt;p&gt;I replaced those:&lt;br/&gt;
1-) TermRangeQuery to RangeQuery.&lt;br/&gt;
2-) getConstantScoreRewrite() to getUseOldRangeQuery();&lt;br/&gt;
3-) setConstantScoreRewrite(false); to setUseOldRangeQuery(true);&lt;br/&gt;
4-) On line 168 of ComplexPhraseQueryParser.java there are two semicolons ( ; ; )&lt;/p&gt;

&lt;p&gt;I am not sure what I did is the way to start using this query parser with latest versions of lucene/solr.&lt;br/&gt;
If it is not can you suggest me better ways or where to get/download latest source code of query parser.&lt;/p&gt;

&lt;p&gt;I am having problems with multi-field searches.&lt;/p&gt;

&lt;p&gt;Query  &quot;(john johathon) smith&quot;~10 works on default field, e.g. text.&lt;/p&gt;

&lt;p&gt;But when I want to run the same query on another field (other than default field)&lt;br/&gt;
title:&quot;(john johathon) smith&quot;~10 &lt;br/&gt;
it gives exception below:&lt;br/&gt;
Cannot have clause for field &quot;text&quot; nested in phrase for field &quot;title&quot;&lt;/p&gt;

&lt;p&gt;When I ran the query distibuting field name to all terms it works:&lt;br/&gt;
title:&quot;(title:john title:johathon) title:smith&quot;~10&lt;/p&gt;

&lt;p&gt;Is there an easy way to set field of all terms (without specifying)?&lt;/p&gt;

&lt;p&gt;And about boosts of multi-field queries, is this query legal? (default operator = OR, default field = text)&lt;/p&gt;

&lt;p&gt;title:&quot;(title:john title:johathon) title:smith&quot;~10^1.5 OR &quot;(john johathon) smith&quot;~10^3.0&lt;/p&gt;

&lt;p&gt;Shortly I want to use this queryparser to query on multi-fields with different boosts.&lt;/p&gt;

&lt;p&gt;I am not sure if I am allowed to ask such question in here, if not please accept my apologies.&lt;/p&gt;

&lt;p&gt;Thank you for your consideration.&lt;/p&gt;

&lt;p&gt;Ahmet Arslan&lt;/p&gt;</comment>
                            <comment id="12735058" author="markh" created="Fri, 24 Jul 2009 14:57:09 +0100"  >&lt;p&gt;Fix for phrases using QueryParser&apos;s non-default field e.g. &lt;br/&gt;
     author:&quot;j* smith&quot;&lt;/p&gt;</comment>
                            <comment id="12736851" author="markrmiller@gmail.com" created="Wed, 29 Jul 2009 22:30:45 +0100"  >&lt;p&gt;If we don&apos;t have a clear path for this very soon I think we should pull it from this release.&lt;/p&gt;</comment>
                            <comment id="12736965" author="lafa" created="Thu, 30 Jul 2009 03:37:20 +0100"  >&lt;p&gt;My understanding is that with &quot;New flexible query parser&quot; (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1567&quot; title=&quot;New flexible query parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1567&quot;&gt;&lt;del&gt;LUCENE-1567&lt;/del&gt;&lt;/a&gt;),&lt;br/&gt;
the old QueryParser classes will be deprecated in 2.9&lt;br/&gt;
and removed in 3.0 (or moved to contrib in 3.0).&lt;/p&gt;

&lt;p&gt;This change will also make ComplexPhraseQueryParser deprecated&lt;br/&gt;
because it currently extends the old queryparser.&lt;/p&gt;

&lt;p&gt;ComplexPhraseQueryParser was not part of any lucene release&lt;br/&gt;
and was only checked in 2 months ago in trunk.&lt;/p&gt;

&lt;p&gt;For the reasons above I think we should re-implement this functionality&lt;br/&gt;
using the new flexible query parser.&lt;/p&gt;

&lt;p&gt;3.0 and 2.9 releases will be very similar &lt;br/&gt;
but 3.0 will have all deprecated APIs removed (at least this is my understanding).&lt;/p&gt;

&lt;p&gt;In my view the path should be:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Wait for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1567&quot; title=&quot;New flexible query parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1567&quot;&gt;&lt;del&gt;LUCENE-1567&lt;/del&gt;&lt;/a&gt; to be in trunk&lt;/li&gt;
	&lt;li&gt;re-implement this feature using the &quot;New flexible query parser&quot;&lt;/li&gt;
	&lt;li&gt;and probably do it using a super set of the current syntax with a new TextParser.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m not sure if I&apos;ll have the time to implement a compatible implementation of&lt;br/&gt;
ComplexPhraseQueryParser before 2.9 release &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m currently working on 1567 to finalize the patch,&lt;br/&gt;
cleaning up javadocs and some small clean up to the APIs.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to work on ComplexPhraseQueryParser,&lt;br/&gt;
once lucene-1567 is in the trunk.&lt;/p&gt;

&lt;p&gt;So in my view, ComplexPhraseQueryParser depends on 1567, &lt;br/&gt;
and will require some extra work after 1567 is in the trunk.&lt;/p&gt;

&lt;p&gt;I think we have the following, options:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;We could wait until 1567 is in trunk and wait for a compatible implementation of ComplexPhraseQueryParser using 1567,&lt;br/&gt;
  before we release 2.9. (this would still remove the current ComplexPhraseQueryParser class, and provide this features with LuceneQueryParserHelper class, or with a new TextParser name complexphrase)&lt;/li&gt;
	&lt;li&gt;We can release 2.9 with only 1567, but that will require ComplexPhraseQueryParser to be removed from trunk or at least deprecated in 2.9, and in 3.X re-implement it using the &quot;New flexible query parser&quot; APIs&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I hope this helps &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                            <comment id="12736966" author="markrmiller@gmail.com" created="Thu, 30 Jul 2009 03:39:44 +0100"  >&lt;p&gt;Okay thanks. I think we should pull it for 2.9.&lt;/p&gt;</comment>
                            <comment id="12737212" author="markrmiller@gmail.com" created="Thu, 30 Jul 2009 19:17:07 +0100"  >&lt;p&gt;Okay, so I guess the question is - who objects to pulling this from 2.9? I don&apos;t think we should release a class that extends a deprecated class and I don&apos;t think we want to hold up 2.9 waiting for an adequate non deprecated replacement.&lt;/p&gt;</comment>
                            <comment id="12737270" author="markh" created="Thu, 30 Jul 2009 21:41:50 +0100"  >&lt;p&gt;No objections to pulling from core given the impending deprecation of the QueryParser base class.&lt;/p&gt;

&lt;p&gt;I know of at least 2 folks using it so moving it to contrib would help provide somewhere to maintain fixes while we wait for the new QueryParser to incorporate the complex phrase features.&lt;/p&gt;</comment>
                            <comment id="12737311" author="michaelbusch" created="Thu, 30 Jul 2009 22:47:24 +0100"  >&lt;p&gt;+1 for moving it to conrib. Then the users Mark H. mentioned can consume it from a contrib jar until these features are in the new QP.&lt;/p&gt;</comment>
                            <comment id="12737314" author="markrmiller@gmail.com" created="Thu, 30 Jul 2009 22:53:06 +0100"  >&lt;p&gt;Alright, then - do you have time to handle that soon Mark H? If not I can probably make some time for it.&lt;/p&gt;</comment>
                            <comment id="12737913" author="markrmiller@gmail.com" created="Sat, 1 Aug 2009 17:42:57 +0100"  >&lt;p&gt;patch that moves to contrib&lt;/p&gt;</comment>
                            <comment id="12739824" author="mikemccand" created="Thu, 6 Aug 2009 00:33:22 +0100"  >&lt;p&gt;Reopening so we don&apos;t forget to do this one...&lt;/p&gt;

&lt;p&gt;Come 3.0, how will this work, even in contrib?  (Because the plan is to replace the old queryParser with the new one for 3.0).&lt;/p&gt;</comment>
                            <comment id="12739826" author="markrmiller@gmail.com" created="Thu, 6 Aug 2009 00:39:47 +0100"  >&lt;p&gt;The plan is to remove it and add a replacement built on the new QueryParser. The replacement may not be exactly the same, but it should be very similar.&lt;/p&gt;

&lt;p&gt;My inclination was to leave it out of this release - its a single class and so easy to manage and plug it in separately if you want. I don&apos;t know that we should release a class that may or may not get a replacement (promises, promises &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ) and extends a deprecated class. Contrib was once called sandbox though and consensus appeared to be to put it in contrib - so I went with that and added a warning that the class might change soon.&lt;/p&gt;</comment>
                            <comment id="12747982" author="gsingers" created="Wed, 26 Aug 2009 16:27:35 +0100"  >&lt;p&gt;I&apos;m not sure why the ComplexPhraseQuery itself is buried in the Parser.  Can&apos;t the query stand on it&apos;s own?  Seems like it could be a useful class outside of the specific content of a QueryParser, no?&lt;/p&gt;</comment>
                            <comment id="12748046" author="markh" created="Wed, 26 Aug 2009 18:42:01 +0100"  >&lt;p&gt;It does not stand on it&apos;s own as it is merely a temporary object used as a peculiarity in the way the parsing works. The SpanQuery family would be the legitimate standalone equivalents of this class.&lt;/p&gt;

&lt;p&gt;ComplexPhraseQuery objects are constructed during the the first pass of parsing to capture everything between quotes as an opaque string.&lt;br/&gt;
The ComplexPhraseQueryParser then calls &quot;parsePhraseElements(...)&quot; on these objects to complete the process of parsing in a second pass where in this context any brackets etc take on a different meaning&lt;br/&gt;
There is no merit in making this externally visible.&lt;/p&gt;


</comment>
                            <comment id="12749557" author="lafa" created="Mon, 31 Aug 2009 19:04:16 +0100"  >&lt;p&gt;We hope to implement this on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1823&quot; title=&quot;QueryParser with new features for Lucene 3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1823&quot;&gt;LUCENE-1823&lt;/a&gt;, along with other features.&lt;/p&gt;</comment>
                            <comment id="12776113" author="thetaphi" created="Tue, 10 Nov 2009 22:19:41 +0000"  >&lt;p&gt;Move to 3.1 as this is a new feature.&lt;/p&gt;</comment>
                            <comment id="12782254" author="iorixxx" created="Wed, 25 Nov 2009 00:17:50 +0000"  >&lt;p&gt;Hi Mark,&lt;/p&gt;

&lt;p&gt;Up to now, I was consuming ComplexPhraseQueryParser.java by means of copy paste into my source code, so I didn&apos;t notice.&lt;br/&gt;
Today I find out that ComplexPhraseQuery.java in Lucene 2.9.1 Misc has missed the non default field.patch.&lt;br/&gt;
It gives exception with author:&quot;fred* smith&quot; style queries.&lt;br/&gt;
I am writing a solr plugin to contribute for this query parser and Solr 1.4.0 directly depends on lucene-misc-2.9.1.jar.&lt;br/&gt;
Should I edit and include source code of  ComplexPhraseQueryParser.java in my patch to solve this problem?&lt;br/&gt;
Or is there a more convenient way to do it?&lt;/p&gt;

&lt;p&gt;Thank you for your consideration.&lt;/p&gt;</comment>
                            <comment id="12782521" author="markh" created="Wed, 25 Nov 2009 17:31:35 +0000"  >&lt;p&gt;Ugh. There&apos;s probably two separate actions required here then:&lt;br/&gt;
1) a bug needs raising on Lucene.&lt;br/&gt;
2) guidance needed from the Solr team about preferred course of action&lt;/p&gt;</comment>
                            <comment id="12787053" author="dkaelbling@blackducksoftware.com" created="Mon, 7 Dec 2009 19:12:57 +0000"  >&lt;p&gt;Could someone link the new Lucene bug mentioned above to this issue?  I couldn&apos;t find it.&lt;/p&gt;</comment>
                            <comment id="12835961" author="markh" created="Fri, 19 Feb 2010 21:29:18 +0000"  >&lt;p&gt;Double Ugh. Applying the patch for the &quot;non-default field&quot; bug doesn&apos;t work any more because the latest ComplexPhraseQueryParser source sitting in contrib now has a different package to the QueryParser base class . This means that this subclass doesn&apos;t have the required write access to the package-protected &quot;field&quot; variable. This is needed to temporarily set the context of the parser when processing the inner contents of the phrase.&lt;/p&gt;

&lt;p&gt;Fixing this would require changing the package name of ComplexPhraseQueryParser or changing the visibility of &quot;field&quot; in the QueryParser base class to &quot;protected&quot;.&lt;br/&gt;
Anyone have any strong feelings about which of these is the most acceptable?&lt;/p&gt;</comment>
                            <comment id="12900278" author="terje_eggestad" created="Thu, 19 Aug 2010 14:21:04 +0100"  >&lt;p&gt;Hi &lt;/p&gt;

&lt;p&gt;I&apos;m about begin using the ComplexPhraseQueryParser with 3.0.2 as we need wildcard with phrases and proximity &lt;/p&gt;

&lt;p&gt;Our customers have a habit of including &apos;-&apos; in phrases which seem to trigger a bug :&lt;/p&gt;

&lt;p&gt;If you add the following tests to the TestComplexPhraseQueryParser class:&lt;/p&gt;

&lt;p&gt;		checkMatches(&quot;\&quot;joe john nosuchword\&quot;&quot;, &quot;&quot;);  &lt;br/&gt;
		checkMatches(&quot;\&quot;joe-john-nosuchword\&quot;&quot;, &quot;&quot;);  &lt;br/&gt;
		checkMatches(&quot;\&quot;john-nosuchword smith\&quot;&quot;, &quot;&quot;);  &lt;/p&gt;

&lt;p&gt;AND add a rewrite() in checkMatches() just after parse :&lt;br/&gt;
 			Query q = qp.parse(qString);&lt;br/&gt;
 			IndexReader reader = searcher.getIndexReader();  // need for rewrite&lt;br/&gt;
  			q = q.rewrite(reader); &lt;/p&gt;


&lt;p&gt;The first two is OK, and is rewritten to:&lt;/p&gt;

&lt;p&gt;spanNear(&lt;span class=&quot;error&quot;&gt;&amp;#91;name:joe, name:john, name:nosuchword&amp;#93;&lt;/span&gt;, 0, true)&lt;br/&gt;
name:&quot;joe john nosuchword&quot;&lt;/p&gt;


&lt;p&gt;The third bomb out on &lt;/p&gt;

&lt;p&gt;java.lang.IllegalArgumentException: Unknown query type &quot;org.apache.lucene.search.PhraseQuery&quot; found in phrase query string &quot;john-nosuchword smith&quot;&lt;br/&gt;
	at org.apache.lucene.queryParser.ComplexPhraseQueryParser$ComplexPhraseQuery.rewrite(ComplexPhraseQueryParser.java:281)&lt;br/&gt;
	at org.apache.lucene.queryParser.TestComplexPhraseQuery.checkMatches(TestComplexPhraseQuery.java:120)&lt;br/&gt;
.&lt;br/&gt;
.&lt;br/&gt;
.&lt;/p&gt;


&lt;p&gt;I made a fix that &lt;b&gt;seem&lt;/b&gt; to fixit, but I feel on very shaky ground here.&lt;br/&gt;
I&apos;ve made so many debugging hack around that I can&apos;t make a propper patch, but I added this fix to ComplexPhraseQueryParser::rewrite()&lt;br/&gt;
just before the place the exception is thrown:&lt;/p&gt;

&lt;p&gt;       } else {&lt;br/&gt;
        	if (qc instanceof TermQuery) &lt;/p&gt;
{
        		TermQuery tq = (TermQuery) qc;
        		allSpanClauses[i] = new SpanTermQuery(tq.getTerm());

// START  FIX &quot;A-B C&quot; phrases
        	}
&lt;p&gt; else if (qc instanceof PhraseQuery) {&lt;br/&gt;
        		PhraseQuery pq = (PhraseQuery) qc;&lt;br/&gt;
        		Term[] subterms = pq.getTerms();&lt;/p&gt;

&lt;p&gt;        		SpanQuery[] clauses = new SpanQuery&lt;span class=&quot;error&quot;&gt;&amp;#91;subterms.length&amp;#93;&lt;/span&gt;;&lt;br/&gt;
        		for (int j = 0; j &amp;lt; subterms.length; j++) &lt;/p&gt;
{
        			clauses[j] = new SpanTermQuery(subterms[j]);
        		}
&lt;p&gt;        		allSpanClauses&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; = new SpanNearQuery(clauses, 0, true);&lt;br/&gt;
// END FIX&lt;br/&gt;
        	}	else &lt;/p&gt;
{

        		throw new IllegalArgumentException(&quot;Unknown query type \&quot;&quot;
        				+ qc.getClass().getName()
        				+ &quot;\&quot; found in phrase query string \&quot;&quot;
        				+ phrasedQueryStringContents + &quot;\&quot;&quot;);
        	}



</comment>
                            <comment id="13200258" author="markrmiller@gmail.com" created="Sat, 4 Feb 2012 01:39:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;changing the visibility of &quot;field&quot; in the QueryParser base class to &quot;protected&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This seems reasonable?&lt;/p&gt;</comment>
                            <comment id="13202409" author="tomasflobbe" created="Tue, 7 Feb 2012 14:10:16 +0000"  >&lt;p&gt;Hi I&apos;m working in this change to allow field queries. I noted that queries like:&lt;br/&gt;
name:&quot;de*&quot; &lt;br/&gt;
name:de* &lt;br/&gt;
fail due to the exception thrown in the &quot;rewrite&quot; method: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Query rewrite(IndexReader reader) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-comment&quot;&gt;// ArrayList spanClauses = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList();
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (contents &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; TermQuery) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; contents;
      }
      
      &lt;span class=&quot;code-comment&quot;&gt;// Build a sequence of Span clauses arranged in a SpanNear - child
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// clauses can be complex
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// Booleans e.g. nots and ors etc
&lt;/span&gt;      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numNegatives = 0;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(contents &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; BooleanQuery)) {
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unknown query type \&quot;&lt;/span&gt;&quot;
            + contents.getClass().getName()
            + &lt;span class=&quot;code-quote&quot;&gt;&quot;\&quot;&lt;/span&gt; found in phrase query string \&quot;&quot; + phrasedQueryStringContents
            + &lt;span class=&quot;code-quote&quot;&gt;&quot;\&quot;&lt;/span&gt;&quot;);
      }
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By changing it to something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(contents &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; BooleanQuery)) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; contents;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;queries like the one above work, together with all the other queries available in the unit test. Is there something I&apos;m missing with the previous change? I know the ComplexPhraseQueryParser is not intended to be used for queries like the ones I&apos;m proposing, but why does it needs to fail in those cases?&lt;/p&gt;</comment>
                            <comment id="13202523" author="tomasflobbe" created="Tue, 7 Feb 2012 16:49:45 +0000"  >&lt;p&gt;I attached a patch with the change of my previous comment plus the change that allows fielded queries.&lt;/p&gt;</comment>
                            <comment id="13203507" author="iorixxx" created="Wed, 8 Feb 2012 12:16:32 +0000"  >&lt;p&gt;Mark&apos;s and Tomas&apos; non default field patches are combined.&lt;/p&gt;</comment>
                            <comment id="13203514" author="iorixxx" created="Wed, 8 Feb 2012 12:33:01 +0000"  >&lt;p&gt;Thanks for looking into this, Mark and Tomas. Do you think this issue is the right place to introduce boolean inOrder parameter? Currently always inOrder=true is passed to SpanNearQuery&apos;s ctor.&lt;/p&gt;</comment>
                            <comment id="13203652" author="tomasflobbe" created="Wed, 8 Feb 2012 15:01:42 +0000"  >&lt;p&gt;Ahmet, I created a Jira for the &quot;inOrder&quot; in the ComplexPhraseQueryParser. See &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3758&quot; title=&quot;Allow the ComplexPhraseQueryParser to search order or un-order proximity queries.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-3758&quot;&gt;&lt;del&gt;LUCENE-3758&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13501679" author="otis" created="Wed, 21 Nov 2012 03:11:39 +0000"  >&lt;p&gt;The JIRA cleaning man is here.  I thought this was committed long ago, but I just noticed it&apos;s open and set for 4.1. Huh?&lt;br/&gt;
Last activity on this pretty popular issue was from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=markh&quot; class=&quot;user-hover&quot; rel=&quot;markh&quot;&gt;Mark Harwood&lt;/a&gt; back in 2008!&lt;/p&gt;</comment>
                            <comment id="13580828" author="dmitry_key" created="Mon, 18 Feb 2013 20:54:44 +0000"  >&lt;p&gt;Can someone give me a hand on this parser (despite the jira is so old)?&lt;/p&gt;

&lt;p&gt;We need to have the NOT logic work properly in the boolean sense, that is the following should work correctly:&lt;/p&gt;

&lt;p&gt;a AND NOT b&lt;br/&gt;
a AND NOT (b OR c)&lt;br/&gt;
a AND NOT ((b OR c) AND (d OR e))&lt;/p&gt;

&lt;p&gt;Can anybody guide me here? Is it at all possible to accomplish this with this original CPQP implementation? I would not be afraid of changing QueryParser.jj lexical specification, if the task requires it.&lt;/p&gt;</comment>
                            <comment id="13582207" author="dmitry_key" created="Wed, 20 Feb 2013 14:30:43 +0000"  >&lt;p&gt;OK, after some study, here is what we did:&lt;/p&gt;

&lt;p&gt;we treat the AND clauses as spanNearQuery objects. So, the&lt;/p&gt;

&lt;p&gt;a AND b&lt;/p&gt;

&lt;p&gt;becomes %a b%&lt;sub&gt;slop, where %%&lt;/sub&gt; operator is an unordered SpanNear query (change to QueryParser.jj was required for this).&lt;/p&gt;

&lt;p&gt;When there is a case of NOT clause with nested clauses:&lt;/p&gt;

&lt;p&gt;NOT( (a AND b) OR (c AND d) ) = NOT ( %a b%~slop OR %c d%~slop ) ,&lt;/p&gt;

&lt;p&gt;we need to handle SpanNearQueries in the addComplexPhraseClause method. In order to handle this, we just added to the if statement:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
    if (qc instanceof BooleanQuery) {&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;the following else if statement:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
else if (childQuery instanceof SpanNearQuery) &lt;/p&gt;
{
    ors.add((SpanQuery)childQuery);
}
&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;/code&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13717055" author="steve_rowe" created="Tue, 23 Jul 2013 19:44:46 +0100"  >&lt;p&gt;Bulk move 4.4 issues to 4.5 and 5.0&lt;/p&gt;</comment>
                            <comment id="13903081" author="nikhil500" created="Mon, 17 Feb 2014 09:03:57 +0000"  >&lt;p&gt;The patch posted by Ahmet Arslan on 8th Feb 2012 looks good to me. I have been using it in production for some time and did not find any issues.&lt;/p&gt;

&lt;p&gt;I will request a committer to kindly look into this and help get this included into Solr 4.7.  If any further work is required, then I will be happy to give it a shot.&lt;/p&gt;</comment>
                            <comment id="13903223" author="tallison@mitre.org" created="Mon, 17 Feb 2014 13:22:16 +0000"  >&lt;p&gt;Any interest in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-5205&quot; title=&quot;SpanQueryParser with recursion, analysis and syntax very similar to classic QueryParser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-5205&quot;&gt;LUCENE-5205&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13903242" author="iorixxx" created="Mon, 17 Feb 2014 13:50:18 +0000"  >&lt;p&gt;Hi Tim, of course. Do you think can we include TestComplexPhraseQuery.java in your work? To demonstrate it can replace ComplexPhraseQueryParser?&lt;/p&gt;</comment>
                            <comment id="13903489" author="tallison@mitre.org" created="Mon, 17 Feb 2014 20:23:42 +0000"  >&lt;p&gt;Happily.  Will add tomorrow and update patch.  Thank you!&lt;/p&gt;</comment>
                            <comment id="13904399" author="tallison@mitre.org" created="Tue, 18 Feb 2014 18:50:06 +0000"  >&lt;p&gt;Attached update with tests from TestComplexPhraseQuery to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-5205&quot; title=&quot;SpanQueryParser with recursion, analysis and syntax very similar to classic QueryParser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-5205&quot;&gt;LUCENE-5205&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13905074" author="nikhil500" created="Wed, 19 Feb 2014 08:53:43 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-5205&quot; title=&quot;SpanQueryParser with recursion, analysis and syntax very similar to classic QueryParser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-5205&quot;&gt;LUCENE-5205&lt;/a&gt; is very interesting, thanks for pointing me to it. &lt;/p&gt;

&lt;p&gt;However, we should still try to get &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1486&quot; title=&quot;Wildcards, ORs etc inside Phrase queries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1486&quot;&gt;&lt;del&gt;LUCENE-1486&lt;/del&gt;&lt;/a&gt; closed - most of the work has already been done and it may be useful in certain cases where the full power of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-5205&quot; title=&quot;SpanQueryParser with recursion, analysis and syntax very similar to classic QueryParser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-5205&quot;&gt;LUCENE-5205&lt;/a&gt; is not required.&lt;/p&gt;</comment>
                            <comment id="13905403" author="tallison@mitre.org" created="Wed, 19 Feb 2014 13:20:15 +0000"  >&lt;p&gt;Agreed. ComplexPhraseQueryParser has actually been fielded &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;/p&gt;</comment>
                            <comment id="13905417" author="iorixxx" created="Wed, 19 Feb 2014 13:31:36 +0000"  >&lt;p&gt;I agree with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nikhil500&quot; class=&quot;user-hover&quot; rel=&quot;nikhil500&quot;&gt;Nikhil Chhaochharia&lt;/a&gt;, This fix is all about accidentally forgotten thing to an already committed code. Also I am not sure why this issue is reopened. Any feeling towards a separate issue would be a better fit for this?&lt;/p&gt;</comment>
                            <comment id="13905462" author="tallison@mitre.org" created="Wed, 19 Feb 2014 14:05:25 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13917848" author="nikhil500" created="Mon, 3 Mar 2014 08:59:37 +0000"  >&lt;p&gt;It looks like there is a problem with stopwords also - a query like &quot;A for B&quot; where &apos;for&apos; is a stopword is parsed as &quot;A B&quot; and does not match documents containing &quot;A for B&quot;.&lt;/p&gt;</comment>
                            <comment id="13937169" author="erickerickson" created="Sun, 16 Mar 2014 14:01:28 +0000"  >&lt;p&gt;OK, this seems like it&apos;s completely obsolete, any objections to closing? Should we raise Nikhil Chhaochharia&apos;s comment in a new JIRA to test at least?&lt;/p&gt;</comment>
                            <comment id="13937204" author="iorixxx" created="Sun, 16 Mar 2014 16:41:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we raise Nikhil Chhaochharia&apos;s comment in a new JIRA to test at least?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-5530&quot; title=&quot; ComplexPhraseQueryParser throws ParseException for fielded queries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-5530&quot;&gt;&lt;del&gt;LUCENE-5530&lt;/del&gt;&lt;/a&gt; for fielded query support. &lt;/p&gt;</comment>
                            <comment id="13937207" author="erickerickson" created="Sun, 16 Mar 2014 16:49:47 +0000"  >&lt;p&gt;What about the stopwords bit? yet another JIRA?&lt;/p&gt;
</comment>
                            <comment id="13937228" author="iorixxx" created="Sun, 16 Mar 2014 17:30:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;What about the stopwords bit? yet another JIRA?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There is no patch/solution for that in ComplexPhraseQueryParser.  Tim says about the topic : &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The root of this problem is that SpanNearQuery has no good way to handle stopwords in a way analagous to PhraseQuery.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I suggested &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nikhil500&quot; class=&quot;user-hover&quot; rel=&quot;nikhil500&quot;&gt;Nikhil Chhaochharia&lt;/a&gt; to use a modified StopwordFilter ( I sent the filter to him offlist) that does not remove but instead reduces given stop words to an impossible token. &lt;br/&gt;
&quot;the&quot; =&amp;gt; &quot;ImpossibleToken&quot;&lt;br/&gt;
&quot;a&quot; =&amp;gt; &quot;ImpossibleToken&quot;&lt;br/&gt;
&quot;for&quot; =&amp;gt; &quot;ImpossibleToken&quot;&lt;/p&gt;

&lt;p&gt;I think we don&apos;t need a jira for this functionality but we can document this as limitation and workaround for this.&lt;/p&gt;</comment>
                            <comment id="13937235" author="iorixxx" created="Sun, 16 Mar 2014 17:46:03 +0000"  >&lt;p&gt;One thing is , &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tomasflobbe&quot; class=&quot;user-hover&quot; rel=&quot;tomasflobbe&quot;&gt;Tom&#225;s Fern&#225;ndez L&#246;bbe&lt;/a&gt; has reported one problem in his &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1486?focusedCommentId=13202409&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13202409&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;comment&lt;/a&gt; . And he has provided a solution too. &lt;br/&gt;
Its about &quot;fred*&quot; kind of queries. There is only one term inside quotes.  &lt;/p&gt;</comment>
                            <comment id="13937245" author="iorixxx" created="Sun, 16 Mar 2014 18:11:58 +0000"  >&lt;p&gt;One last thing that might come out of this jira is &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=terje_eggestad&quot; class=&quot;user-hover&quot; rel=&quot;terje_eggestad&quot;&gt;Terje Eggestad&lt;/a&gt; this &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1486?focusedCommentId=12900278&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12900278&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;comment&lt;/a&gt; and his fix. However I couldn&apos;t re-produce the problem he reported with new MockAnalyzer(random()); This problem could be analyzer specific.&lt;/p&gt;</comment>
                            <comment id="13937297" author="erickerickson" created="Sun, 16 Mar 2014 19:36:13 +0000"  >&lt;p&gt;The re-opens were from 2009. This stuff has been in Lucene for some time, and the comment &quot;Reopening so we don&apos;t forget to do this one&quot; makes me think this should have been closed a long time ago.&lt;/p&gt;

&lt;p&gt;NOTE: we&apos;re also doing more work with this in the 4.8 time frame, thus it&apos;s getting some attention now.&lt;/p&gt;</comment>
                            <comment id="13938086" author="iorixxx" created="Mon, 17 Mar 2014 17:37:25 +0000"  >&lt;p&gt;Thanks Erick Erickson for closing this beast &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13982575" author="thetaphi" created="Mon, 28 Apr 2014 00:25:47 +0100"  >&lt;p&gt;Close issue after release of 4.8.0&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12417241">LUCENE-1567</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12433389">LUCENE-1823</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12441718">SOLR-1604</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12668318">LUCENE-5205</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12441718">SOLR-1604</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12401245" name="ComplexPhraseQueryParser.java" size="12324" author="markh" created="Mon, 2 Mar 2009 15:17:06 +0000"/>
                            <attachment id="12513804" name="LUCENE-1486.patch" size="5976" author="iorixxx" created="Wed, 8 Feb 2012 12:16:32 +0000"/>
                            <attachment id="12513628" name="LUCENE-1486.patch" size="5660" author="tomasflobbe" created="Tue, 7 Feb 2012 16:49:45 +0000"/>
                            <attachment id="12415242" name="LUCENE-1486.patch" size="44172" author="markrmiller@gmail.com" created="Sat, 1 Aug 2009 17:42:57 +0100"/>
                            <attachment id="12412631" name="LUCENE-1486.patch" size="21140" author="markrmiller@gmail.com" created="Mon, 6 Jul 2009 18:03:06 +0100"/>
                            <attachment id="12412195" name="LUCENE-1486.patch" size="21124" author="markrmiller@gmail.com" created="Tue, 30 Jun 2009 20:29:43 +0100"/>
                            <attachment id="12411703" name="LUCENE-1486.patch" size="19071" author="markh" created="Wed, 24 Jun 2009 22:05:57 +0100"/>
                            <attachment id="12410682" name="LUCENE-1486.patch" size="18831" author="markrmiller@gmail.com" created="Mon, 15 Jun 2009 18:00:37 +0100"/>
                            <attachment id="12414443" name="Lucene-1486 non default field.patch" size="1532" author="markh" created="Fri, 24 Jul 2009 14:57:09 +0100"/>
                            <attachment id="12401246" name="TestComplexPhraseQuery.java" size="5234" author="markh" created="Mon, 2 Mar 2009 15:18:09 +0000"/>
                            <attachment id="12414166" name="junit_complex_phrase_qp_07_21_2009.patch" size="7747" author="adriano_crestani" created="Wed, 22 Jul 2009 01:25:25 +0100"/>
                            <attachment id="12414217" name="junit_complex_phrase_qp_07_22_2009.patch" size="1505" author="lafa" created="Wed, 22 Jul 2009 15:53:43 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 12 Dec 2008 10:45:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12265</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Lucene Fields</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxyr7j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26559</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>