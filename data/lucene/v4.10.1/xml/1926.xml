<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:08:25 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1926/LUCENE-1926.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[LUCENE-1926] Back compat break with old next() consumer API</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1926</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                    <description>&lt;p&gt;There is a bug that causes tokenstreams to return different results, depending upon whether they are consumed with the incrementToken() api or the next() api.&lt;/p&gt;

&lt;p&gt;I found this because the Solr analysis tool in the admin page uses the next() api, and i was seeing strange results.&lt;/p&gt;

&lt;p&gt;I&apos;ve created a test case to show the problem. when calling captureState(),  the current state is erased, but only when consuming with the next() api.&lt;br/&gt;
If I consume with incrementToken(), things work. &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
State tempState = captureState(); &lt;span class=&quot;code-comment&quot;&gt;// after we capture state here, things get strange.
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; right = termAtt.term(); &lt;span class=&quot;code-comment&quot;&gt;// when using old consumer API, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; value is wrong!!!!&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12436606">LUCENE-1926</key>
            <summary>Back compat break with old next() consumer API</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Fri, 25 Sep 2009 15:41:46 +0100</created>
                <updated>Fri, 25 Sep 2009 18:42:56 +0100</updated>
                            <resolved>Fri, 25 Sep 2009 16:35:31 +0100</resolved>
                                    <version>2.9</version>
                                                    <component>modules/analysis</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12759553" author="rcmuir" created="Fri, 25 Sep 2009 15:54:43 +0100"  >&lt;p&gt;i looked into this some, and it appears the problem isn&apos;t due to captureState(), but instead what is happening is my termAttribute is getting erased even before then.&lt;/p&gt;

&lt;p&gt;I suspect this might be linked to the changes in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1919&quot; title=&quot;Analysis back compat break&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1919&quot;&gt;&lt;del&gt;LUCENE-1919&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12759557" author="thetaphi" created="Fri, 25 Sep 2009 16:03:23 +0100"  >&lt;p&gt;That&apos;s exactly the case. You should also capture the state in &quot;case 1:&quot;. The attributes API does not guarantee, that the attributes are preserved between calls to incrementToken (the same like the reusable TokenAPI is not forced to always use the same reusable token). If you do not reuse tokens, this is exactly the case (The Token instance in the wrapper is replaced), so the attribute contents gets lost (empty token instance). One could fix this ba an extra token cloning, but even with the old API (next(Token) it would never have been worked. Because of this, all Tokenizer &lt;b&gt;should&lt;/b&gt; call clearAttributes() first to have a new start.&lt;/p&gt;

&lt;p&gt;I am not sure, if it worked correctly before &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1919&quot; title=&quot;Analysis back compat break&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1919&quot;&gt;&lt;del&gt;LUCENE-1919&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ADDENDUM:&lt;br/&gt;
You should never rely on attributes preserved between calls. If you plug another TokenFilter on top of your filter, this filter could change the tokens. The Tokens are currently only preserved 100% if you only use incrementToken() and your filter/Tokenizer is the only one modifying the tokens. You can never guarantee that.&lt;/p&gt;

&lt;p&gt;This issue is won&apos;t fix, as exspected behaviour. Ok with that?&lt;/p&gt;</comment>
                            <comment id="12759563" author="rcmuir" created="Fri, 25 Sep 2009 16:11:40 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The attributes API does not guarantee, that the attributes are preserved between calls to incrementToken&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Uwe, perhaps this is my understanding then. Its not obvious from the documentation that incrementToken will erase my attributes.&lt;/p&gt;

&lt;p&gt;TokenStream now extends AttributeSource, which provides&lt;br/&gt;
 access to all of the token Attributes for the TokenStream.&lt;br/&gt;
 Note that only one instance per AttributeImpl is created and reused&lt;br/&gt;
 for every token. This approach reduces object creation and allows local&lt;br/&gt;
 caching of references to the AttributeImpls.&lt;/p&gt;

&lt;p&gt;What else is &quot;local caching of references to the AttributeImpls&quot; supposed to mean?&lt;/p&gt;

&lt;p&gt;btw, my TestCase uses StandardTokenizer, which does call clearAttributes().&lt;/p&gt;</comment>
                            <comment id="12759566" author="yseeley@gmail.com" created="Fri, 25 Sep 2009 16:16:01 +0100"  >&lt;p&gt;Yes, I think calling captureState() before incrementToken() doesn&apos;t make sense (as case:2 does) since the state would seem to be undefined at that point?&lt;/p&gt;</comment>
                            <comment id="12759567" author="rcmuir" created="Fri, 25 Sep 2009 16:16:23 +0100"  >&lt;blockquote&gt;&lt;p&gt;This issue is won&apos;t fix, as exspected behaviour. Ok with that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Uwe, based upon what you said (additional filters could modify the tokens), I tend to agree with you, but its wierd it only happens with next() consumer api.&lt;br/&gt;
It does work with next(Token)&lt;/p&gt;

&lt;p&gt;I still think its also not very obvious, and wierd to see inconsistencies depending upon how things are consumed.&lt;/p&gt;

</comment>
                            <comment id="12759568" author="thetaphi" created="Fri, 25 Sep 2009 16:18:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;btw, my TestCase uses StandardTokenizer, which does call clearAttributes().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have seen this, because of that the attrs between step 0 and 1 are cleared. As you do not call incrementToken in the underlying filter in step 2, it seems to be preserved (in fact, you are the source of tokens and should call clearAttributes() for this step).&lt;/p&gt;

&lt;p&gt;The problem with preserving the attribute state between calls to incrementToken is e.g. the following even with incrementToken():&lt;/p&gt;

&lt;p&gt;Just put an ReverseTokenFilter on top of this TokenFilter. This tokenfilter reverses the term. If you only consume with incrementToken() and rely on the fact that the tokens from the last call are preserved, you fail: The Token is reversed by the reverse filter and then step 2 would then see the reversed term text and not the forward one exspected from step 1.&lt;/p&gt;

&lt;p&gt;If you want to preserve states between incrementToken calls, you have to capture the state. Maybe the Javadocs should be extended, to clearly note, that attribute contents (may) not preserved between calls to incrementToken().&lt;/p&gt;</comment>
                            <comment id="12759570" author="rcmuir" created="Fri, 25 Sep 2009 16:21:10 +0100"  >&lt;blockquote&gt;&lt;p&gt;Yes, I think calling captureState() before incrementToken() doesn&apos;t make sense (as case:2 does) since the state would seem to be undefined at that point?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is because its out of context (I had to narrow the test down).&lt;br/&gt;
The idea was that in case 2, i wanted to capture the unchanged TermAttribute from case 1 (since i felt if i didnt call incrementToken, it would not be changed)&lt;/p&gt;</comment>
                            <comment id="12759571" author="rcmuir" created="Fri, 25 Sep 2009 16:22:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;Maybe the Javadocs should be extended, to clearly note, that attribute contents (may) not preserved between calls to incrementToken().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Uwe, yes. I expect that if I added a stemmer, or reversetokenfilter, or something it would modify my termAttribute.&lt;br/&gt;
What i didnt expect is that the back compat layer would modify my termAttribute.&lt;/p&gt;</comment>
                            <comment id="12759572" author="thetaphi" created="Fri, 25 Sep 2009 16:23:13 +0100"  >&lt;p&gt;I think this info from next(Token) javadocs also applies to incrementToken():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   * Also, the producer must make no assumptions about a {@link Token} after it
   * has been returned: the caller may arbitrarily change it. If the producer
   * needs to hold onto the {@link Token} &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; subsequent calls, it must clone()
   * it before storing it. Note that a {@link TokenFilter} is considered a
   * consumer.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12759573" author="thetaphi" created="Fri, 25 Sep 2009 16:26:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;Uwe, yes. I expect that if I added a stemmer, or reversetokenfilter, or something it would modify my termAttribute. What i didnt expect is that the back compat layer would modify my termAttribute.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, but this was the same with next(Token) (see above). You could not rely on the fact that the reusableToken is preserved, it could even be changed by the consumer or whatever.&lt;/p&gt;

&lt;p&gt;You can implement you TokenFilter with next(reusableToken) and will have the same problems if you rely on the reusableToken is preserved from the last call.&lt;/p&gt;</comment>
                            <comment id="12759575" author="rcmuir" created="Fri, 25 Sep 2009 16:32:11 +0100"  >&lt;p&gt;Uwe, what you are saying is true (its really a bug in my filter and I agree you should cancel this as won&apos;t fix, any javadoc clarification might prevent someone else from doing this).&lt;/p&gt;

&lt;p&gt;One side note I worry about a bit now, is the possibility of similar bugs might exist or crop up somewhere like shingle... but the tests might pass and they appear to be working&lt;/p&gt;</comment>
                            <comment id="12759577" author="rcmuir" created="Fri, 25 Sep 2009 16:35:31 +0100"  >&lt;p&gt;this behavior really was not guaranteed as explained by Uwe... sorry to waste your time with this &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12759582" author="thetaphi" created="Fri, 25 Sep 2009 16:40:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;One side note I worry about a bit now, is the possibility of similar bugs might exist or crop up somewhere like shingle... but the tests might pass and they appear to be working&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Shingle was reviewed and changed by me, I think this one is OK. The problem you described could have been catched by backwards tests, but these are only running for core, not contrib.&lt;/p&gt;</comment>
                            <comment id="12759584" author="thetaphi" created="Fri, 25 Sep 2009 16:43:43 +0100"  >&lt;p&gt;This is an addition to javadocs (just copied from next(Token)).&lt;/p&gt;</comment>
                            <comment id="12759585" author="rcmuir" created="Fri, 25 Sep 2009 16:44:10 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Shingle was reviewed and changed by me, I think this one is OK. The problem you described could have been catched by backwards tests, but these are only running for core, not contrib.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Uwe, again I apologize, thanks for explaining it to me. I thought I had found something when i saw different results from incrementToken versus next, but clearly all I found was a bug in my code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12759586" author="thetaphi" created="Fri, 25 Sep 2009 16:45:34 +0100"  >&lt;blockquote&gt;&lt;p&gt;this behavior really was not guaranteed as explained by Uwe... sorry to waste your time with this  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You did not waste my time, it was more my health. I got a heart attack when I read &quot;Back compat break in old next()...&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12759588" author="rcmuir" created="Fri, 25 Sep 2009 16:49:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;You did not waste my time, it was more my health. I got a heart attack when I read &quot;Back compat break in old next()...&quot; &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I had to grab your attention since I couldn&apos;t figure it out &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;br/&gt;
If you want, you should change the title to &quot;Bug in Robert Muir&apos;s naive code&quot;... I deserve it for giving you heart failures.&lt;br/&gt;
The javadoc patch you uploaded might help to prevent someone from creating similar bugs in the future.&lt;/p&gt;</comment>
                            <comment id="12759589" author="markrmiller@gmail.com" created="Fri, 25 Sep 2009 16:50:28 +0100"  >&lt;blockquote&gt;&lt;p&gt;You did not waste my time, it was more my health. I got a heart attack when I read &quot;Back compat break in old next()...&quot; &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You weren&apos;t the only one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12759594" author="thetaphi" created="Fri, 25 Sep 2009 16:57:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;One side note I worry about a bit now, is the possibility of similar bugs might exist or crop up somewhere like shingle... but the tests might pass and they appear to be working&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We could check the filters again by changing assertAnalyzesTo to consume the stream three times with all three APIs &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12759599" author="rcmuir" created="Fri, 25 Sep 2009 17:01:41 +0100"  >&lt;blockquote&gt;
&lt;p&gt;We could check the filters again by changing assertAnalyzesTo to consume the stream three times with all three APIs &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right but maybe you could have implemented back compat differently, where it would appear to work with next() also.&lt;br/&gt;
Or maybe at some point next() will go away?&lt;br/&gt;
Still as you said, there&apos;s a bug because something else could modify these attributes.&lt;br/&gt;
Maybe instead, in assertTokenStreamContents, after asserting the value is correct, it could do something like &quot;zero out&quot; the values?&lt;/p&gt;

&lt;p&gt;This would probably detect bugs like this.&lt;/p&gt;</comment>
                            <comment id="12759602" author="thetaphi" created="Fri, 25 Sep 2009 17:10:00 +0100"  >&lt;p&gt;This is also a good isea, even better. It should simply call clearAttributes() before each incrementToken(). A real consumer would not do this for speed reasons, but the test.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Right but maybe you could have implemented back compat differently, where it would appear to work with next() also. Or maybe at some point next() will go away?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As you said before, somebody else could also modify the attributes, not only the backwards layer. For speed reasons: Preventing this would add an extra clone or somehow other copy of the attribute.&lt;/p&gt;

&lt;p&gt;next() and next(Token) will go away the next weeks...&lt;/p&gt;</comment>
                            <comment id="12759605" author="thetaphi" created="Fri, 25 Sep 2009 17:17:32 +0100"  >&lt;p&gt;I checked: All TokenStreams in core/contrib pass the tests with a separate clearAttributes() before each call to incrementToken().&lt;/p&gt;</comment>
                            <comment id="12759606" author="rcmuir" created="Fri, 25 Sep 2009 17:17:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;It should simply call clearAttributes() before each incrementToken(). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;my thoughts too, this causes my test to fail with incrementToken, exposing the bug.&lt;/p&gt;

&lt;p&gt;I will update your patch with this one-liner once i let ant test finish, just to make sure it doesnt break the build and there arent any similar bugs somewhere in contrib.&lt;/p&gt;

&lt;p&gt;edit: nevermind, your computer is much faster than mine.&lt;/p&gt;</comment>
                            <comment id="12759609" author="thetaphi" created="Fri, 25 Sep 2009 17:25:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;edit: nevermind, your computer is much faster than mine.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not really, I used &quot;ant test -Dtestpackage=analysis&quot;&lt;/p&gt;

&lt;p&gt;I will commit this addition to assertTokenStreamContents, soon (the javadoc fix is already committed)&lt;/p&gt;</comment>
                            <comment id="12759610" author="rcmuir" created="Fri, 25 Sep 2009 17:28:13 +0100"  >&lt;p&gt;Uwe, I think its a great idea to prevent future problems.&lt;/p&gt;

&lt;p&gt;The only thing i could add, maybe overkill, would be to actually zero out the term buffer in addition to clearAttributes() in the base test case.&lt;br/&gt;
This might seem absurd, but I could have cached .termLength(), clearAttributes() only sets the length to zero, and a few analyzer tests only test for term text...&lt;br/&gt;
In that case it might have still slipped by...&lt;/p&gt;</comment>
                            <comment id="12759613" author="thetaphi" created="Fri, 25 Sep 2009 17:32:39 +0100"  >&lt;p&gt;I do not think this is needed. clearAttributes() should be enough.&lt;/p&gt;</comment>
                            <comment id="12759647" author="thetaphi" created="Fri, 25 Sep 2009 18:42:56 +0100"  >&lt;p&gt;Committed improved test, rev 818920&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12420559" name="CaptureStateTestcase.java" size="2454" author="rcmuir" created="Fri, 25 Sep 2009 15:42:14 +0100"/>
                            <attachment id="12420562" name="LUCENE-1926.patch" size="944" author="thetaphi" created="Fri, 25 Sep 2009 16:43:43 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 25 Sep 2009 15:03:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11843</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Lucene Fields</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxyohb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26117</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>