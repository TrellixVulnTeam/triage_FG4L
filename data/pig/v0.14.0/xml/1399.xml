<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:51:53 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1399/PIG-1399.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1399] Logical Optimizer: Expression optimizor rule</title>
                <link>https://issues.apache.org/jira/browse/PIG-1399</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;We can optimize expression in several ways:&lt;/p&gt;

&lt;p&gt;1. Constant pre-calculation&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by a0 &amp;gt; 5+7;&lt;br/&gt;
=&amp;gt; B = filter A by a0 &amp;gt; 12;&lt;/p&gt;

&lt;p&gt;2. Boolean expression optimization&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by not (not(a0&amp;gt;5) or a&amp;gt;10);&lt;br/&gt;
=&amp;gt; B = filter A by a0&amp;gt;5 and a&amp;lt;=10;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12463451">PIG-1399</key>
            <summary>Logical Optimizer: Expression optimizor rule</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12459922">PIG-1319</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yanz">Yan Zhou</assignee>
                                    <reporter username="daijy">Daniel Dai</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 Apr 2010 19:05:14 +0100</created>
                <updated>Fri, 17 Dec 2010 22:44:16 +0000</updated>
                            <resolved>Wed, 1 Sep 2010 21:36:50 +0100</resolved>
                                    <version>0.7.0</version>
                                    <fixVersion>0.8.0</fixVersion>
                                    <component>impl</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12883348" author="yanz" created="Tue, 29 Jun 2010 00:26:59 +0100"  >&lt;p&gt;Other expression optimizations include:&lt;/p&gt;

&lt;p&gt;3.  Optimization of erasure of logical implicated expression in AND&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by (a0 &amp;gt; 5 and a0 &amp;gt; 7);&lt;br/&gt;
=&amp;gt; B = filter A by a0 &amp;gt; 7;&lt;/p&gt;

&lt;p&gt;4. Optimization of erasure of logical implicated expression in OR&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by ((a0 &amp;gt; 5) or (a0 &amp;gt; 6 and a1 &amp;gt; 15);&lt;br/&gt;
=&amp;gt; B = filter C by a0 &amp;gt; 5;&lt;/p&gt;

&lt;p&gt;A comprehensive example of 2, 3 and 4 optimizations is:&lt;br/&gt;
B = filter A by NOT((a0 &amp;gt; 1 and a0 &amp;gt; 0) or (a1 &amp;lt; 3 and a0 &amp;gt;5))&quot;;&lt;br/&gt;
=&amp;gt; B = filter A by a0 &amp;lt;= 1;&lt;/p&gt;</comment>
                            <comment id="12887912" author="yanz" created="Tue, 13 Jul 2010 19:24:23 +0100"  >&lt;p&gt;A couple of additional scenarios to be simplified:&lt;/p&gt;

&lt;p&gt;5.  equality&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by (a0 &amp;gt; 5 and a0 &amp;gt; 5);&lt;br/&gt;
=&amp;gt; B = filter A by a0 &amp;gt; 5;&lt;/p&gt;


&lt;p&gt;6. complementary OR&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by (a0 &amp;gt; 5 OR a0 &amp;lt;= 5);&lt;br/&gt;
=&amp;gt; the filtering is removed&lt;/p&gt;

&lt;p&gt;Note that by themselves they both look straightforward and may have little value. But used after other simplification rules, it could simplify the end results further but could be not obviously applicable at first place.&lt;/p&gt;</comment>
                            <comment id="12887923" author="yanz" created="Tue, 13 Jul 2010 19:41:06 +0100"  >&lt;p&gt;This work is not to optimize on the generic boolean logics, but rather to simplify the logic expression based upon the constant values as the logical expression&apos;s operands. The former, e.g.,  would change an boolean expression of ((A AND B) OR (A AND C)) to (A AND (B OR C)); while the latter will change, say,  (a0 &amp;gt; 5 and a0 &amp;gt; 7) to (a0 &amp;gt; 7).  It is, therefore, up to the query writer to optimize his/her boolean logic, probably through use of some other tools.&lt;/p&gt;

&lt;p&gt;The algorithm works in a series of steps in order:&lt;/p&gt;

&lt;p&gt;1) a constant expression evaluation visitor that will evaluate the constant expressions. It works by traversing the expression tree in a bottom-up manner and evaluate all subexpressions that have all constant subexpressions. All results from constant children are pushed to a stack for the parent to digest for its own evaluation. Any non-constant expression will push a null to the stack and consequently will cause all of its ancestors not to be evaluated.&lt;br/&gt;
For simplicity, only constant binary expressions and constant unary expressions and evaluated. More complex expressions are not evaluated at this moment. For UDF, this evaluation is not planned at all for fear of possible stateful consequences resulting from the original evaluations;&lt;/p&gt;

&lt;p&gt;2) A NOT conversion visitor that will traverse the expression tree in a depth-first manner with post-order handling. A status of negativity for a NOT expression is recorded in the depth-first traversal before subtree traversal and reversed after traversing the subtree. All &quot;reversible&quot; expressions is replaced by its negated counterpart for negative negativity. Currently equality ops, and its non-equality couter part, all range comparisons, logical AND and OR are reversible.&lt;br/&gt;
   Notably missing is the &quot;is null&quot; for lack of a &quot;is not null&quot; base expression;&lt;/p&gt;

&lt;p&gt;3) A DNF plan is generated, through a helper DNFPlanGenerator visitor class, whose disjunctions are either of OrExpression or a new DNFExpression with type of &quot;OR&quot;, whose conjunctions are either of AndExpression or the new DNFExpression with type of &quot;AND&quot;. &lt;br/&gt;
   The introduction of the new DNFExpression, which extends LogiclExpression, is to support multiple children (vs. the two children in a BinaryExpression) to facilitate the processing of multiple children&lt;br/&gt;
   of an &quot;OR&quot; or &quot;AND&quot; operator due to the commutative property of the two operators. The leaves of the DNF are of a new LogiclExpressionProxy type that extends the LogicalExpression.&lt;br/&gt;
   This new type is to be used as a proxy toward the original leaf expression in the original filter plan. The purpose is to track how often an original expression has been put in &lt;br/&gt;
   the DNF plan as result of the normalizing process. Consequently, a DNFSplitCounter member is added to the LogicalExpression, which is incremented once a new proxy is created&lt;br/&gt;
   on the original expression. Due to the potentially exponential growth of the DNF plan, and the nonlinear complexity to trim the DNF plan (see 4 below), the size of the DNF plan is limited to 100 nodes beyind which the simplification&lt;br/&gt;
   beyond step 2) are just skipped;&lt;/p&gt;

&lt;p&gt;4) Then the DNF plan is trimmed according to the inferrence rules between the operands of the conjunctions first, and then between the operands of the disjuction in the DNF plan.&lt;br/&gt;
   If a leaf is trimmed, the counter, DNFSpliCounter, of the source of the proxy will be decremented. Basically, the DNF plan is used as a utility to determine if an original leaf&lt;br/&gt;
   expression can be trimmed from the original filter plan or not. If all proxies of the original leaf expression have been trimmed from the DNF plan, the original leaf expression can be trimmed from the original plan then.&lt;br/&gt;
   The point is that the DNF plan is not intended to replace the original filer plan since the DNF plan in general tends to be more expensive to evaluate than the original filter plan.&lt;/p&gt;

&lt;p&gt;5) The original filter plan is traversed in a bottom-up manner so that if a leaf&apos;s DNFSpliCounter is zero, which means all of its proxies on DNF has been trimmed, the leaf will be trimmed.&lt;br/&gt;
   For nonleafs of &quot;AND&quot; or &quot;OR&quot; expressions, if one child survives, the child will be relinked to the predecessor(s). If either or both children are trimmed, the nonleaf will be trimmed&lt;br/&gt;
   too. If the whole new filter plan is empty, the filter operator will be removed from the logical plan too.&lt;/p&gt;

&lt;p&gt;Using a example of &quot;B = filter A by NOT((a0 &amp;gt; 1) or (a1 &amp;lt; 3 and a0 &amp;gt;3+2))&quot;:&lt;/p&gt;

&lt;p&gt;After 1), the filter plan becomes &quot;NOT((a0 &amp;gt; 1) or (a1 &amp;lt; 3 and a0 &amp;gt;5))&quot;;&lt;/p&gt;

&lt;p&gt;After 2), the filter plan becomes &quot;(a0 &amp;lt;= 1) AND ((a1 &amp;gt;= 3) OR (a0 &amp;lt;= 5))&quot;;&lt;/p&gt;

&lt;p&gt;After 3), the DNF plan is &quot;((a0 &amp;lt;= 1) AND (a1 &amp;gt;= 3)) OR ((a0 &amp;lt;= 1) AND (a0 &amp;lt;= 5))&quot;;&lt;/p&gt;

&lt;p&gt;After 4), the DNF plan becomes &quot;a0 &amp;lt;= 1&quot;;&lt;/p&gt;

&lt;p&gt;After 5), the filter plan becomes &quot;a0 &amp;lt;= 1&quot;.&lt;/p&gt;</comment>
                            <comment id="12888624" author="yanz" created="Thu, 15 Jul 2010 01:06:44 +0100"  >&lt;p&gt;Might not be appplicable to trunk yet as it depends upon a uncommitted patch.&lt;/p&gt;</comment>
                            <comment id="12900944" author="yanz" created="Sat, 21 Aug 2010 01:39:38 +0100"  >&lt;p&gt;rebased on the latest trunk.&lt;/p&gt;</comment>
                            <comment id="12901481" author="yanz" created="Mon, 23 Aug 2010 17:58:45 +0100"  >&lt;p&gt;Internal Hudson results:&lt;/p&gt;

&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; +1 overall.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 @author.  The patch does not contain any @author tags.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 tests included.  The patch appears to include 3 new or modified tests.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;All core tests also pass.&lt;/p&gt;</comment>
                            <comment id="12902682" author="yanz" created="Wed, 25 Aug 2010 23:36:45 +0100"  >&lt;p&gt;rebasing on the latest trunk&lt;/p&gt;</comment>
                            <comment id="12903084" author="alangates" created="Thu, 26 Aug 2010 22:36:50 +0100"  >&lt;p&gt;Comments&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Your extensive comment in the JIRA (&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1399?focusedCommentId=12887923&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12887923&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-1399?focusedCommentId=12887923&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12887923&lt;/a&gt; ) should be in the code, where it will benefit future developers.  It should be put in the class comments for LogicalExpressionSimplifier&lt;/li&gt;
	&lt;li&gt;LogicalExpressionSimplifier is 2000 lines long.  It should be broken up to a number of smaller classes.  One of the goals of the optimizer redesign was to enable the creation of small, succinct rules.  Since much code in here is shared, it may make sense to refactor this into a base class with shared code and implementation classes for each type of transform.&lt;/li&gt;
	&lt;li&gt;I do not like adding the dnfSplitCounter to LogicalExpression.  It would be better to keep this class simple rather than adding members for specific optimizations.  The new optimizer has a mechanism to allow annotating nodes in the plan.  Will this work for what you need?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12903702" author="yanz" created="Sat, 28 Aug 2010 00:15:34 +0100"  >&lt;p&gt;Addressing the review comments except for not making several optimization rules since the ordering of the application of the rules is significant.&lt;/p&gt;</comment>
                            <comment id="12903724" author="yanz" created="Sat, 28 Aug 2010 01:05:24 +0100"  >&lt;p&gt;rebased on the latest trunk.&lt;/p&gt;</comment>
                            <comment id="12904323" author="alangates" created="Mon, 30 Aug 2010 21:26:00 +0100"  >&lt;p&gt;Changes in the patch look good.  Running unit tests, test-patch, etc.&lt;/p&gt;</comment>
                            <comment id="12904356" author="alangates" created="Mon, 30 Aug 2010 22:38:40 +0100"  >
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     [exec]
     [exec] -1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 6 &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     -1 findbugs.  The patch appears to introduce 2 &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Findbugs warnings.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ll attach the results of findbugs separately.&lt;/p&gt;</comment>
                            <comment id="12904357" author="alangates" created="Mon, 30 Aug 2010 22:39:20 +0100"  >&lt;p&gt;Results of findbugs from manual run of test-patch&lt;/p&gt;</comment>
                            <comment id="12904370" author="yanz" created="Mon, 30 Aug 2010 23:12:43 +0100"  >&lt;p&gt;I use findbugs 1.3.9 and it finds the patch clean. The attached findbugs results were generated using 1.3.8, it might be the difference. Anyways, I make a minor modification that should fix the warnings by 1.3.8.&lt;/p&gt;</comment>
                            <comment id="12904808" author="alangates" created="Tue, 31 Aug 2010 23:38:05 +0100"  >&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; +1 overall.  &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 @author.  The patch does not contain any @author tags.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 tests included.  The patch appears to include 6 new or modified tests.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;/p&gt;</comment>
                            <comment id="12905206" author="alangates" created="Wed, 1 Sep 2010 21:32:21 +0100"  >&lt;p&gt;Checked into trunk.  I&apos;ll be checking it into 0.8 branch as well.&lt;/p&gt;</comment>
                            <comment id="12905208" author="alangates" created="Wed, 1 Sep 2010 21:36:50 +0100"  >&lt;p&gt;Checked into 0.8 branch.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12453467" name="PIG-1399.patch" size="140342" author="yanz" created="Mon, 30 Aug 2010 23:12:43 +0100"/>
                            <attachment id="12453322" name="PIG-1399.patch" size="140320" author="yanz" created="Sat, 28 Aug 2010 01:05:24 +0100"/>
                            <attachment id="12453319" name="PIG-1399.patch" size="139732" author="yanz" created="Sat, 28 Aug 2010 00:15:33 +0100"/>
                            <attachment id="12453084" name="PIG-1399.patch" size="130056" author="yanz" created="Wed, 25 Aug 2010 23:36:44 +0100"/>
                            <attachment id="12452833" name="PIG-1399.patch" size="127854" author="yanz" created="Mon, 23 Aug 2010 17:58:45 +0100"/>
                            <attachment id="12452689" name="PIG-1399.patch" size="127844" author="yanz" created="Sat, 21 Aug 2010 01:39:38 +0100"/>
                            <attachment id="12449565" name="PIG-1399.patch" size="113988" author="yanz" created="Thu, 15 Jul 2010 17:28:16 +0100"/>
                            <attachment id="12453465" name="newPatchFindbugsWarnings.html" size="5255" author="alangates" created="Mon, 30 Aug 2010 22:39:20 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 28 Jun 2010 23:26:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164891</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyaq0f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>96525</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>This logical simplification contains the following types of simplifications:&lt;br/&gt;
&lt;br/&gt;
1) Constant pre-calculation&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by a0 &amp;gt; 5+7;&lt;br/&gt;
&lt;br/&gt;
is simplified to&lt;br/&gt;
&lt;br/&gt;
B = filter A by a0 &amp;gt; 12;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
2) Elimination of negations&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by not (not(a0&amp;gt;5) or a&amp;gt;10);&lt;br/&gt;
&lt;br/&gt;
is simplified to&lt;br/&gt;
&lt;br/&gt;
B = filter A by a0&amp;gt;5 and a&amp;lt;=10;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
3) Elimination of logical implied expression in AND&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by (a0 &amp;gt; 5 and a0 &amp;gt; 7);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
is simplified to&lt;br/&gt;
&lt;br/&gt;
B = filter A by a0 &amp;gt; 7;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
4) Elimination of logical implied expression in OR&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by ((a0 &amp;gt; 5) or (a0 &amp;gt; 6 and a1 &amp;gt; 15);&lt;br/&gt;
&lt;br/&gt;
is simplified to&lt;br/&gt;
B = filter C by a0 &amp;gt; 5;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
5) Equivalence elimination&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by (a0 &amp;gt; 5 and a0 &amp;gt; 5);&lt;br/&gt;
&lt;br/&gt;
is simplified to&lt;br/&gt;
&lt;br/&gt;
B = filter A by a0 &amp;gt; 5;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
6) Elimination of complementary expressions in OR&lt;br/&gt;
Example:&lt;br/&gt;
B = filter A by (a0 &amp;gt; 5 OR a0 &amp;lt;= 5);&lt;br/&gt;
&lt;br/&gt;
is simplified to non-filtering&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
7) Elimination of naive TRUE expression&lt;br/&gt;
Example:&lt;br/&gt;
&lt;br/&gt;
B = filter A by 1==1;&lt;br/&gt;
&lt;br/&gt;
is simplified to non-filtering</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>