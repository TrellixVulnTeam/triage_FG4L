<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:50:36 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1387/PIG-1387.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1387] Syntactical Sugar for PIG-1385</title>
                <link>https://issues.apache.org/jira/browse/PIG-1387</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;From this conversation, extend &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1385&quot; title=&quot;UDF to create tuples and bags&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1385&quot;&gt;&lt;del&gt;PIG-1385&lt;/del&gt;&lt;/a&gt; to instead of calling UDF use built-in behavior when the (),{},[] groupings are encountered.&lt;/p&gt;


&lt;p&gt;&amp;gt; &amp;gt; What about making them part of the language using symbols?&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; instead of&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; foreach T generate Tuple($0, $1, $2), Bag($3, $4, $5), $6, $7;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; have language support&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; foreach T generate ($0, $1, $2), {$3, $4, $5}, $6, $7;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; or even:&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; foreach T generate ($0, $1, $2), {$3, $4, $5}, &lt;a href=&quot;#$7, $8#$9&quot;&gt;$6#$7, $8#$9&lt;/a&gt;, $10, $11;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; Is there reason not to do the second or third other than being more&lt;br/&gt;
&amp;gt; &amp;gt; complicated?&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; Certainly I&apos;d volunteer to put the top implementation in to the util&lt;br/&gt;
&amp;gt; &amp;gt; package and submit them for builtin&apos;s, but the latter syntactic candies&lt;br/&gt;
&amp;gt; &amp;gt; seems more natural..&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; On Tue, Apr 20, 2010 at 5:24 PM, Alan Gates &amp;lt;gates@yahoo-inc.com&amp;gt; wrote:&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt; The grouping package in piggybank is left over from back when Pig&lt;br/&gt;
&amp;gt; allowed&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt; users to define grouping functions (0.1).  Functions like these should&lt;br/&gt;
&amp;gt; go in&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt; evaluation.util.&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt; However, I&apos;d consider putting these in builtin (in main Pig) instead.&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;  These are things everyone asks for and they seem like a reasonable&lt;br/&gt;
&amp;gt; addition&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt; to the core engine.  This will be more of a burden to write (as we&apos;ll&lt;br/&gt;
&amp;gt; hold&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt; them to a higher standard) but of more use to people as well.&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt; Alan.&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt; On Apr 19, 2010, at 12:53 PM, hc busy wrote:&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;  Some times I wonder... I mean, somebody went to the trouble of making a&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt; path&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt; called&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt; org.apache.pig.piggybank.grouping&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt; (where it seems like this code belong), but didn&apos;t check in any java&lt;br/&gt;
&amp;gt; code&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt; into that package.&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt; Any comment about where to put this kind of utility classes?&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt; On Mon, Apr 19, 2010 at 12:07 PM, Andrey S &amp;lt;octo47@gmail.com&amp;gt; wrote:&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;  2010/4/19 hc busy &amp;lt;hc.busy@gmail.com&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  That&apos;s just the way it is right now, you can&apos;t make bags or tuples&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; directly... Maybe we should have some UDF&apos;s in piggybank for these:&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; toBag()&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; toTuple(); --which is kinda like exec(Tuple in)&lt;/p&gt;
{return in;}
&lt;p&gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; TupleToBag(); --some times you need it this way for some reason.&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;  Ok. I place my current code here, may be later I make a patch (if&lt;br/&gt;
&amp;gt; such&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; implementation is acceptable of course).&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.apache.pig.EvalFunc;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.apache.pig.data.BagFactory;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.apache.pig.data.DataBag;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.apache.pig.data.Tuple;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.apache.pig.data.TupleFactory;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import java.io.IOException;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; /**&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; * Convert any sequence of fields to bag with specified count of&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; fields&amp;lt;br&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; * Schema: count:int, fld1 &lt;span class=&quot;error&quot;&gt;&amp;#91;, fld2, fld3, fld4... &amp;#93;&lt;/span&gt;.&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; * Output: count=2, then &lt;/p&gt;
{ (fld1, fld2) , (fld3, fld4) ... }
&lt;p&gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; *&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; * @author astepachev&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; */&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; public class ToBag extends EvalFunc&amp;lt;DataBag&amp;gt; {&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  public BagFactory bagFactory;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  public TupleFactory tupleFactory;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  public ToBag() &lt;/p&gt;
{
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      bagFactory = BagFactory.getInstance();
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      tupleFactory = TupleFactory.getInstance();
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  }
&lt;p&gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  @Override&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  public DataBag exec(Tuple input) throws IOException {&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      if (input.isNull())&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;          return null;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      final DataBag bag = bagFactory.newDefaultBag();&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      final Integer couter = (Integer) input.get(0);&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      if (couter == null)&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;          return null;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      Tuple tuple = tupleFactory.newTuple();&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      for (int i = 0; i &amp;lt; input.size() - 1; i++) {&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;          if (i % couter == 0) &lt;/p&gt;
{
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;              tuple = tupleFactory.newTuple();
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;              bag.add(tuple);
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;          }
&lt;p&gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;          tuple.append(input.get(i + 1));&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      }&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      return bag;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  }&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; }&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.apache.pig.ExecType;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.apache.pig.PigServer;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.junit.Before;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import org.junit.Test;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import java.io.IOException;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import java.net.URISyntaxException;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import java.net.URL;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; import static org.junit.Assert.assertTrue;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; /**&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; * @author astepachev&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; */&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; public class ToBagTest {&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  PigServer pigServer;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  URL inputTxt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  @Before&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  public void init() throws IOException, URISyntaxException &lt;/p&gt;
{
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      pigServer = new PigServer(ExecType.LOCAL);
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      inputTxt =
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; this.getClass().getResource(&quot;bagTest.txt&quot;).toURI().toURL();
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  }
&lt;p&gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  @Test&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  public void testSimple() throws IOException &lt;/p&gt;
{
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      pigServer.registerQuery(&quot;a = load &apos;&quot; + inputTxt.toExternalForm()
&amp;gt; +
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; &quot;&apos; using PigStorage(&apos;,&apos;) &quot; +
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;              &quot;as (id:int, a:chararray, b:chararray, c:chararray,
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; d:chararray);&quot;);
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      pigServer.registerQuery(&quot;last = foreach a generate flatten(&quot; +
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; ToBag.class.getName() + &quot;(2, id, a, id, b, id, c));&quot;);
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      pigServer.deleteFile(&quot;target/pigtest/func1.txt&quot;);
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      pigServer.store(&quot;last&quot;, &quot;target/pigtest/func1.txt&quot;);
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;      assertTrue(pigServer.fileSize(&quot;target/pigtest/func1.txt&quot;) &amp;gt; 0);
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;  }
&lt;p&gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt; }&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;This is a candidate project for Google summer of code 2011. More information about the program can be found at &lt;a href=&quot;http://wiki.apache.org/pig/GSoc2011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/GSoc2011&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12462609">PIG-1387</key>
            <summary>Syntactical Sugar for PIG-1385</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="azaroth">Gianmarco De Francisci Morales</assignee>
                                    <reporter username="hcbusy">hc busy</reporter>
                        <labels>
                            <label>gsoc2011</label>
                    </labels>
                <created>Wed, 21 Apr 2010 06:13:40 +0100</created>
                <updated>Thu, 26 Apr 2012 21:32:44 +0100</updated>
                            <resolved>Tue, 25 Oct 2011 15:28:19 +0100</resolved>
                                    <version>0.6.0</version>
                                    <fixVersion>0.10.0</fixVersion>
                                    <component>grunt</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12860063" author="alangates" created="Fri, 23 Apr 2010 00:09:22 +0100"  >&lt;p&gt;Adding () for tuples, {} for bags, and [] for maps seems reasonable, especially given that we support that for constants.  Given that we want to do it in line with constants, the {} for bags should include the () for the tuples inside the bag.  So &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
foreach T generate ($0, $1, $2), {$3, $4, $5}, $6, $7;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;above would change to&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
foreach T generate ($0, $1, $2), {($3), ($4), ($5)}, $6, $7;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13071655" author="azaroth" created="Wed, 27 Jul 2011 12:17:05 +0100"  >&lt;p&gt;Trying to sort out ideas on how to do this... correct me if I am wrong.&lt;/p&gt;

&lt;p&gt;The result of ($0, $1, $2), &lt;/p&gt;
{($3), ($4), ($5)}
&lt;p&gt;, $6, $7; &lt;br/&gt;
should be the same of TOTUPLE($0, $1, $2), TOBAG($3, $4, $5), $6, $7;&lt;br/&gt;
and the schema would be {t&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;$0, $1, $2), b:&lt;/p&gt;
{t:($345)}
&lt;p&gt;, $6, $7}&lt;/p&gt;

&lt;p&gt;So the first way I would try is doing syntactical translation in the parser:&lt;br/&gt;
whenever I encounter {} in the generate, I translate it to a user func call to TOBAG.&lt;/p&gt;

&lt;p&gt;I assume I would get the same result with a cast, but it is more complex as I would have to translate the schema as well.&lt;/p&gt;

&lt;p&gt;An alternative would be to do it in the LogicalPlanBuilder by translating a proper AST token to a UserFuncExpression call, and insert it into the plan in the right place.&lt;br/&gt;
I see this option as more complex, and I don&apos;t see any clear advantage.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="13071919" author="thejas" created="Wed, 27 Jul 2011 20:02:55 +0100"  >&lt;p&gt;Yes, I think the translation can be done in either LogicalPlanGenerator.g or LogicalPlanBuilder. In general, I think it is better to have anything that involves more than handful of lines of Java code in LogicalPlanBuilder.java (instead of antlr file). But in this case, it should only be a few lines of java code, so it can be done in LogicalPlanGenerator.g itself.&lt;/p&gt;</comment>
                            <comment id="13079483" author="azaroth" created="Thu, 4 Aug 2011 18:25:25 +0100"  >&lt;p&gt;Very first approach to this feature in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1387&quot; title=&quot;Syntactical Sugar for PIG-1385&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1387&quot;&gt;&lt;del&gt;PIG-1387&lt;/del&gt;&lt;/a&gt;.1.patch.&lt;br/&gt;
For now, I am focusing on TOBAG, I assume other TO* functions would be similar.&lt;br/&gt;
We might have a problem for TOTUPLE because it starts with LEFT_PAREN that is also used by other rules.&lt;br/&gt;
I am not sure this is the direction we want to go.&lt;/p&gt;

&lt;p&gt;Basically what I am doing is to do the translation in the parser.&lt;br/&gt;
When I encounter a LEFT_CURLY in a GENERATE statement, I process it as if it were a function call.&lt;br/&gt;
I generate a FUNC_EVAL virtual token and process the rest of the expression as arguments to the function.&lt;/p&gt;

&lt;p&gt;I see some issues with this approach, for example one needs to be careful to change the grammar of the GENERATE statement if one ever changes the grammar of the function call, because there is an implicit dependence between them.&lt;br/&gt;
Also, I feel it might be complicated to properly parse the arguments in some extreme cases (but I have no example at hand).&lt;/p&gt;

&lt;p&gt;The pro is that it is extremely easy to perform the change, and that it is purely syntactical, which means that it reduces the chances of bugs.&lt;/p&gt;

&lt;p&gt;I would like to have the opinion of the community before going on.&lt;/p&gt;

&lt;p&gt;Some small examples:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

grunt&amp;gt; cat a.txt
1       11
2       3
3       10
4       11
5       10
6       15

grunt&amp;gt; a = load &apos;a.txt&apos; as (id,num);  b = foreach a generate TOBAG($0);
grunt&amp;gt; dump b
({(1)})
({(2)})
({(3)})
({(4)})
({(5)})
({(6)})

grunt&amp;gt; a = load &apos;a.txt&apos; as (id,num);  b = foreach a generate {$0};        
grunt&amp;gt; dump b                                                     
({(1)})
({(2)})
({(3)})
({(4)})
({(5)})
({(6)})

grunt&amp;gt; a = load &apos;a.txt&apos; as (id,num);  b = foreach a generate TOBAG($0,$1);
grunt&amp;gt; dump b                                                             
({(1),(11)})
({(2),(3)})
({(3),(10)})
({(4),(11)})
({(5),(10)})
({(6),(15)})

grunt&amp;gt; a = load &apos;a.txt&apos; as (id,num);  b = foreach a generate {$0,$1};
grunt&amp;gt; dump b                                                        
({(1),(11)})
({(2),(3)})
({(3),(10)})
({(4),(11)})
({(5),(10)})
({(6),(15)})

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;And this is the logical plan generated:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

#-----------------------------------------------
# New Logical Plan:
#-----------------------------------------------
b: (Name: LOStore Schema: #191:bag{#192:tuple(#193:bytearray)})
|
|---b: (Name: LOForEach Schema: #191:bag{#192:tuple(#193:bytearray)})
    |   |
    |   (Name: LOGenerate[&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;] Schema: #191:bag{#192:tuple(#193:bytearray)})
    |   |   |
    |   |   (Name: UserFunc(org.apache.pig.builtin.TOBAG) Type: bag Uid: 191)
    |   |   |
    |   |   |---id:(Name: Project Type: bytearray Uid: 183 Input: 0 Column: (*))
    |   |   |
    |   |   |---num:(Name: Project Type: bytearray Uid: 184 Input: 1 Column: (*))
    |   |
    |   |---(Name: LOInnerLoad[0] Schema: id#183:bytearray)
    |   |
    |   |---(Name: LOInnerLoad[1] Schema: num#184:bytearray)
    |
    |---a: (Name: LOLoad Schema: id#183:bytearray,num#184:bytearray)RequiredFields:&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13079676" author="thejas" created="Fri, 5 Aug 2011 00:22:44 +0100"  >&lt;p&gt;The approach looks fine. But I think this should be a type of expr and and not flatten_generated_item, so that it can be used anywhere, including as argument to other udfs. &lt;br/&gt;
In case of TOTUPLE, the single element case will cause ambiguity, I think that should not be considered a TOTUPLE call. ie, (20) should be considered the same as 20. &lt;/p&gt;</comment>
                            <comment id="13079986" author="azaroth" created="Fri, 5 Aug 2011 15:06:11 +0100"  >&lt;p&gt;I followed Thejas&apos; comment and implemented the translation at the expr level.&lt;br/&gt;
More precisely, as a projectable_expr, which is the closest gateway to func_eval.&lt;/p&gt;

&lt;p&gt;From my quick tests it looks like it is working.&lt;br/&gt;
I tested all three TO* functions. I also tested casts and operations inside the functions.&lt;/p&gt;

&lt;p&gt;I am not too convinced about handling the single parentheses ($0) as a special case, but it shouldn&apos;t be hard to do if we want.&lt;/p&gt;

&lt;p&gt;TODO:&lt;br/&gt;
Write tests&lt;/p&gt;</comment>
                            <comment id="13080283" author="thejas" created="Sat, 6 Aug 2011 00:07:11 +0100"  >&lt;p&gt;If we treat ($0) as a TOTUPLE case, that would break backward compatibility (eg. &apos;a + (b)&apos; ). It is also not going to be very intuitive to new users who might not be familiar with this &apos;advanced&apos; syntax. &lt;/p&gt;</comment>
                            <comment id="13102758" author="azaroth" created="Mon, 12 Sep 2011 17:04:13 +0100"  >&lt;p&gt;Back on the task.&lt;/p&gt;

&lt;p&gt;Attaching &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1387&quot; title=&quot;Syntactical Sugar for PIG-1385&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1387&quot;&gt;&lt;del&gt;PIG-1387&lt;/del&gt;&lt;/a&gt;.3.patch&lt;/p&gt;

&lt;p&gt;Now the feature should work as intended.&lt;br/&gt;
Single element tuples do not trigger a TOTUPLE call.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 a = load &apos;a.txt&apos; as (id:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;,num:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;); c = foreach a generate ($1) + 1;
grunt&amp;gt; dump c
(12)
(4)
(11)
(12)
(11)
(16)

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the tests, I was planning to write 2 equivalent scripts (sugarized/non-sugarized) and compare the logical plans.&lt;/p&gt;

&lt;p&gt;This should make them faster and test exactly what the feature should do.&lt;/p&gt;

&lt;p&gt;Any comments on this?&lt;br/&gt;
Also, where should this kind of tests go with the new test layout?&lt;/p&gt;</comment>
                            <comment id="13102790" author="alangates" created="Mon, 12 Sep 2011 17:49:38 +0100"  >&lt;p&gt;If you plan to compare logical plans, this belongs in unit tests, using junit.&lt;/p&gt;

&lt;p&gt;I would encourage you to also write end-to-end tests with the new &quot;sugared&quot; syntax, using old standard syntax as the verification script.  I&apos;m happy to help you write the tests if you want me to.&lt;/p&gt;</comment>
                            <comment id="13103693" author="azaroth" created="Tue, 13 Sep 2011 16:29:52 +0100"  >&lt;p&gt;Thanks Alan, any help with the new test infrastructure is very appreciated.&lt;/p&gt;

&lt;p&gt;Is there a specific reason to write end-to-end test for this feature?&lt;br/&gt;
From my point of view, this is a front-end issue, so if the logical plans are the same the rest doesn&apos;t matter.&lt;/p&gt;</comment>
                            <comment id="13104901" author="daijy" created="Wed, 14 Sep 2011 22:32:39 +0100"  >&lt;p&gt;You can follow existing tests in test/e2e/pig/tests/nightly.conf to get an idea how to write an end-to-end test.&lt;/p&gt;

&lt;p&gt;Yes, this patch is logical plan only. But usually an end-to-end test is encouraged for a new feature to make sure the whole process works. It happens we break a feature without even realizing it.&lt;/p&gt;</comment>
                            <comment id="13108597" author="azaroth" created="Tue, 20 Sep 2011 12:23:28 +0100"  >&lt;p&gt;I am trying to write some end-to-end tests, but I must admit it is not that easy.&lt;br/&gt;
I am having some problems with my perl installation and I cannot run the e2e suite.&lt;br/&gt;
Unfortunately I cannot change the configuration of this machine.&lt;br/&gt;
However I will get a new laptop in 2 weeks.&lt;br/&gt;
So I will put the patch on hold until I fix my setup.&lt;/p&gt;</comment>
                            <comment id="13127827" author="olgan" created="Fri, 14 Oct 2011 21:21:05 +0100"  >&lt;p&gt;Hi Gianmarco,&lt;/p&gt;

&lt;p&gt;Are you still trying to finish this for 0.10?&lt;/p&gt;

&lt;p&gt;We are planning to branch early next week and we need all features to be in before we branch. Otherwise, we could delay it till the next release.&lt;/p&gt;</comment>
                            <comment id="13127833" author="azaroth" created="Fri, 14 Oct 2011 21:26:14 +0100"  >&lt;p&gt;Hi Olga,&lt;br/&gt;
I will have my new setup on Monday.&lt;br/&gt;
I will try to finish it by Tuesday.&lt;br/&gt;
Writing the tests shouldn&apos;t be too complex.&lt;/p&gt;</comment>
                            <comment id="13127855" author="olgan" created="Fri, 14 Oct 2011 22:00:13 +0100"  >&lt;p&gt;Great! Thanks for the update!&lt;/p&gt;</comment>
                            <comment id="13129622" author="azaroth" created="Tue, 18 Oct 2011 10:45:50 +0100"  >&lt;p&gt;Attaching &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1387&quot; title=&quot;Syntactical Sugar for PIG-1385&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1387&quot;&gt;&lt;del&gt;PIG-1387&lt;/del&gt;&lt;/a&gt;.4.patch&lt;/p&gt;

&lt;p&gt;Added e2e tests in nightly.&lt;br/&gt;
Tested the 3 different TOTUPLE, TOBAG, TOMAP plus the special case TOTUPLE with single element (e.g. ($0) ).&lt;/p&gt;

&lt;p&gt;Tests run fine in local mode.&lt;br/&gt;
I would ask who reviews the patch to run them in cluster mode as I didn&apos;t have the time to set up one to test the patch on.&lt;/p&gt;</comment>
                            <comment id="13133982" author="azaroth" created="Mon, 24 Oct 2011 12:25:55 +0100"  >&lt;p&gt;Set up a cluster and tested the patch. It works fine.&lt;br/&gt;
It is ready for review.&lt;/p&gt;</comment>
                            <comment id="13134217" author="thejas" created="Mon, 24 Oct 2011 17:39:32 +0100"  >&lt;p&gt; +1 (&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1387&quot; title=&quot;Syntactical Sugar for PIG-1385&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1387&quot;&gt;&lt;del&gt;PIG-1387&lt;/del&gt;&lt;/a&gt;.4.patch)&lt;/p&gt;</comment>
                            <comment id="13135091" author="azaroth" created="Tue, 25 Oct 2011 15:28:19 +0100"  >&lt;p&gt;Patch committed to trunk!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12507899">PIG-2082</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12462607">PIG-1385</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12506212">PIG-2038</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12474396">PIG-1618</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12489370" name="PIG-1387.1.patch" size="3221" author="azaroth" created="Thu, 4 Aug 2011 18:25:25 +0100"/>
                            <attachment id="12489477" name="PIG-1387.2.patch" size="3327" author="azaroth" created="Fri, 5 Aug 2011 15:06:11 +0100"/>
                            <attachment id="12494051" name="PIG-1387.3.patch" size="3927" author="azaroth" created="Mon, 12 Sep 2011 17:04:13 +0100"/>
                            <attachment id="12499523" name="PIG-1387.4.patch" size="6827" author="azaroth" created="Tue, 18 Oct 2011 10:45:50 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Apr 2010 23:09:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>60019</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyapvb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>96502</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>