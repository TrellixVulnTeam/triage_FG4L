<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:07:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-2835/PIG-2835.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-2835] Optimizing the convertion from bytes to Integer/Long</title>
                <link>https://issues.apache.org/jira/browse/PIG-2835</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Currently Pig doesn&apos;t support lazy see/de, so as one of the best practices, we recommend users not to declare types in the schema so that Pig will guess the right types and cast them lazily. However, if Pig guesses a wrong type, especially mistakes a double field as an integer field, the overhead of casting is tremendous due to the exception handling.&lt;/p&gt;

&lt;p&gt;See Utf8StorageConverter#bytesToIntege. It first casts bytes to Integer by Integer.parseInt(), and if exception occurs, it tries to cast it to Double by Double.parseDouble() and convert it back to Integer. The problem is that the exception handling can be 10x slower than the actual casting. bytesToLong has the same problem. Below is a mini-benchmark:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;        
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i;
        Exception ex = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.nanoTime();
        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (i = 0; i &amp;lt; 100000000; i++) {
            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.parseDouble(i+ &lt;span class=&quot;code-quote&quot;&gt;&quot;.0&quot;&lt;/span&gt;);
&lt;/span&gt;                &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.parseInt(i + &lt;span class=&quot;code-quote&quot;&gt;&quot;.0&quot;&lt;/span&gt;);
&lt;/span&gt;                &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.parseInt(i + &quot;&quot;);
                &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.parseDouble(i + &quot;&quot;);
&lt;/span&gt;            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (NumberFormatException e) {
                ex = e;
            }
        }
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;time: &quot;&lt;/span&gt; + (&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.nanoTime() - start)
                / 1000000000.0);
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ex != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
            ex.printStackTrace();
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the results:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;casting&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;running time(sec)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Double.parseDouble(i+ &quot;.0&quot;);&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 17 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Integer.parseInt(i + &quot;.0&quot;);&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;b&gt;118&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Integer.parseInt(i + &quot;&quot;);&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 13 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Double.parseDouble(i + &quot;&quot;);&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 16 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;We can see Integer.parseInt(i + &quot;.0&quot;) is 10x slower than the other due to the exception handling.&lt;/p&gt;

&lt;p&gt;This issue was found when I benchmark TPC-H Query 1, for which Pig was terribly slower than Hive:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
LineItems = LOAD &apos;$input/lineitem&apos; USING PigStorage(&apos;|&apos;) AS (orderkey, partkey, suppkey, linenumber, quantity, extendedprice, discount, tax, returnflag, linestatus, shipdate, commitdate, receiptdate, shipinstruct, shipmode, comment);
SubLineItems = FILTER LineItems BY shipdate &amp;lt;= &apos;1998-09-02&apos;;

SubLine = FOREACH SubLineItems GENERATE returnflag, linestatus, quantity, extendedprice, extendedprice*(1-discount) AS disc_price, extendedprice*(1-discount)*(1+tax) AS charge, discount;

StatusGroup = GROUP SubLine BY (returnflag, linestatus);

PriceSummary = FOREACH StatusGroup GENERATE group.returnflag AS returnflag, group.linestatus AS linestatus, SUM(SubLine.quantity) AS sum_qty, SUM(SubLine.extendedprice) AS sum_base_price, SUM(SubLine.disc_price) as sum_disc_price, SUM(SubLine.charge) as sum_charge, AVG(SubLine.quantity) as avg_qty, AVG(SubLine.extendedprice) as avg_price, AVG(SubLine.discount) as avg_disc, COUNT(SubLine) as count_order;

SortedSummary = ORDER PriceSummary BY returnflag, linestatus;

STORE SortedSummary INTO &apos;$output/Q1out&apos;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After declaring three double fields as double, the performance was boosted. &lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; pig without types &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; pig with three doubles &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; hive &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 76 min &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 34 min &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 16 min &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Besides recommending users to declare actual double fields as double, we can also improve the casting to avoid this happening. Maybe the easiest way is to remove the Integer.parseInt and only use the Double.parseDouble and convert back to Integer. The mini benchmark above shows Double.parseDouble + range checking + Integer.valueOf(Double.intValue()) takes about 17 seconds. I think the small percent of extra overhead (3 seconds compared to Integer.parseInt()) is acceptable as it won&apos;t be the dominant bottleneck?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12599909">PIG-2835</key>
            <summary>Optimizing the convertion from bytes to Integer/Long</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jay23jack">Jie Li</assignee>
                                    <reporter username="jay23jack">Jie Li</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 Jul 2012 23:13:56 +0100</created>
                <updated>Fri, 22 Feb 2013 04:54:12 +0000</updated>
                            <resolved>Sun, 2 Sep 2012 23:38:12 +0100</resolved>
                                                    <fixVersion>0.11</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13421561" author="jay23jack" created="Tue, 24 Jul 2012 18:32:08 +0100"  >&lt;p&gt;Always casting bytes to double doesn&apos;t work with Long, as Long might lose accuracy when represented as Double.&lt;/p&gt;

&lt;p&gt;Attached a patch that includes a sanity check for whether the bytes are integer/long. It passes when all characters are &apos;0&apos;&lt;del&gt;&apos;9&apos; or leading &apos;&lt;/del&gt;&apos;, otherwise the check fails and we skip the conversion from bytes to integer/long and directly cast it as double. &lt;/p&gt;

&lt;p&gt;This sanity check will optimize the cases when Pig guesses the double field as int/long by eliminating the exception handling. The TPC-H Q1 shows it achieves the same performance as explicitly declaring double fields as double.&lt;/p&gt;</comment>
                            <comment id="13421563" author="jay23jack" created="Tue, 24 Jul 2012 18:33:46 +0100"  >&lt;p&gt;Oops, happened to use some markup. The sanity check passes when all characters are &apos;0&apos;~&apos;9&apos; or leading minus.&lt;/p&gt;</comment>
                            <comment id="13447044" author="dvryaboy" created="Sun, 2 Sep 2012 23:38:12 +0100"  >&lt;p&gt;+1, applied to trunk. Thanks Jie!&lt;/p&gt;</comment>
                            <comment id="13447053" author="jay23jack" created="Mon, 3 Sep 2012 00:08:13 +0100"  >&lt;p&gt;Thanks Dmitriy for committing this. We had a discussion on this and wondered if Pig can default the numeric type to integer instead of double. With double as the default type, this problem should not occur. Opened a separate jira &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2902&quot; title=&quot;Pig defaults numeric types to integer instead of double&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2902&quot;&gt;PIG-2902&lt;/a&gt; just in case we want to come back to it.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12605930">PIG-2902</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12537712" name="PIG-2835.1.patch" size="4128" author="jay23jack" created="Tue, 24 Jul 2012 18:32:08 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 2 Sep 2012 22:38:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>256443</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyb0d3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98202</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>