<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:08:43 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1188/PIG-1188.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1188] Padding nulls to the input tuple according to input schema</title>
                <link>https://issues.apache.org/jira/browse/PIG-1188</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Currently, the number of fields in the input tuple is determined by the data. When we have schema, we should generate input data according to the schema, and padding nulls if necessary. Here is one example:&lt;/p&gt;

&lt;p&gt;Pig script:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
a = load &apos;1.txt&apos; as (a0, a1);
dump a;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Input file:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
1       2
1       2       3
1
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Current result:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
(1,2)
(1,2,3)
(1)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Desired result:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
(1,2)
(1,2)
(1, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12445547">PIG-1188</key>
            <summary>Padding nulls to the input tuple according to input schema</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="daijy">Daniel Dai</assignee>
                                    <reporter username="daijy">Daniel Dai</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Jan 2010 19:32:46 +0000</created>
                <updated>Tue, 22 May 2012 03:04:03 +0100</updated>
                            <resolved>Wed, 9 Mar 2011 22:58:11 +0000</resolved>
                                    <version>0.6.0</version>
                                    <fixVersion>0.9.0</fixVersion>
                                    <component>impl</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12800342" author="alangates" created="Thu, 14 Jan 2010 20:22:15 +0000"  >&lt;p&gt;I don&apos;t think padding is a good idea.  We don&apos;t know which field in the record is missing.  We&apos;re just guessing that the last field is missing, when in fact it might be the first.  Then we&apos;ve made the situation worse by inserting invalid data in the all the fields.&lt;/p&gt;

&lt;p&gt;I think the loader should either throw the record out, or make all fields in the record null.  This guarantees that we are not further propagating the error.  Then a warning can be issued that the record was invalid (I&apos;m assuming even in the above proposal the loader would issue a warning.) &lt;/p&gt;</comment>
                            <comment id="12800348" author="daijy" created="Thu, 14 Jan 2010 20:39:42 +0000"  >&lt;p&gt;I am fine with throwing this record away and put a warning to the user. The key issue is not to introduce a tuple with less items in it. The follow-up operation depends on the consistency of the tuple size otherwise we will see strange errors which is very hard to diagnose. &lt;/p&gt;</comment>
                            <comment id="12828896" author="alangates" created="Wed, 3 Feb 2010 02:06:14 +0000"  >&lt;p&gt;After further thought I want to change my position on this.&lt;/p&gt;

&lt;p&gt;There are two cases to consider, when schema is present and when it isn&apos;t.  The problem is by the time Pig is trying to access the missing field (in the backend), it has no idea whether the schema exists or not.  So at runtime, Pig should just return a null if it gets ArrayOutOfBoundsException.&lt;/p&gt;

&lt;p&gt;How to pad missing data should be left up to the load function.  Perhaps certain load functions do know how to pad missing data, or are ok with the pad at the end scheme proposed here.  If the load function does not check, then Pig would effectively pad at the end, given the proposal above.  If the load function implementer does not what this to happen, s/he can check each tuple being read from the input to assure it matches the schema, and then decide to pad the tuple with nulls, reject the tuple, or return a tuple full of nulls.&lt;/p&gt;

&lt;p&gt;In the case of PigStorage, checking each tuple for a match against the schema is too expensive.  Ideally I would like it to, because I think that when the user gives a schema it&apos;s an error if the data doesn&apos;t match.  But I don&apos;t want to pay the performance penalty in this case.  &lt;/p&gt;</comment>
                            <comment id="12831749" author="ashutoshc" created="Tue, 9 Feb 2010 23:18:34 +0000"  >&lt;p&gt;I have a different take on this. Referring to original description of Jira, I would expect Pig&apos;s behavior should be one given in &quot;Current result&quot; and not as given in &quot;Desired result&quot;. Pig should not try to do anything behind the scenes with data which &quot;Desired result&quot; is proposing to do. In cases where columns are not consistent, there are two scenarios with or without schema. If user did supply the schema, then I would consider that user is telling to Pig that data is consistent with the schema he is providing and if thats not the case, its perfectly fine to throw exception at runtime. Tricky case is when schema is not provided and user tries to access a non-existent field. I think even in such cases its valid to throw exception at runtime, instead of returning null. First, if user is trying to access a non-existent field thats an error condition in any case. Second, it can&apos;t be assumed that user wants those non-existent field to be treated as null. If he wants it that way, he should implement LoadFunc interface which treats them that way. Third, doing further operations on these columns down the pipeline may result in non-predictable results in other operators. Fourth, returning null will obscure the bugs in Pig where Pig (instead of user himself) tries to access non-existent fields to construct new tuples at run time to do e.g. joins (see &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1131&quot; title=&quot;Pig simple join does not work when it contains empty lines&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1131&quot;&gt;&lt;del&gt;PIG-1131&lt;/del&gt;&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;In short, I am suggesting that Pig should continue to have a behavior it has today. That is it can load variable number of columns in a tuple. But, if user access a non-existent field throw the exception and let user deal with  such scenario himself by implementing his own LoadFunc interface. &lt;/p&gt;

&lt;p&gt;Thoughts ?&lt;/p&gt;</comment>
                            <comment id="12831776" author="alangates" created="Wed, 10 Feb 2010 00:25:47 +0000"  >&lt;p&gt;A few thoughts:&lt;/p&gt;

&lt;p&gt;In a job that is going to process a billion rows and run for 3 hours 1 bad row should not cause the whole job to fail.&lt;/p&gt;

&lt;p&gt;This invalid access should certainly cause a warning.  Users can look at the warnings at the end of the query and decide they do not want to keep the output because of the warnings.  But failure should not be the default case (see previous point).  Perhaps we should have a warnings = error option like compilers do so users who are very worried about the warnings can make sure they fail.  But that&apos;s a different proposal for a different JIRA.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Third, doing further operations on these columns down the pipeline may result in non-predictable results in other operators.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t follow.  Nulls in the pipeline shouldn&apos;t cause a problem.  UDFs and operators need to be able to handle null values whether they come from processing or from the data itself.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Second, it can&apos;t be assumed that user wants those non-existent field to be treated as null. If he wants it that way, he should implement LoadFunc interface which treats them that way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;One could argue that it can&apos;t be assumed the user wants his query to fail when a field is missing.  We have to assume one way or another.  Null is a better assumption than failure, since it is possible for a user who doesn&apos;t want that behavior to detect it and deal with it.  As it is now, the user has to modify his data or write a new load function to deal with padding his data.&lt;/p&gt;

&lt;p&gt;I agree with you that in the schema case, it would be ideal if not having a field was an error.  However, given the architecture this is difficult.  And stipulating that load functions test every record to assure it matches the schema is too much of a performance penalty.  But for the non-schema case I don&apos;t agree.  Pig&apos;s philsophy of &quot;Pigs eat anything&quot; doesn&apos;t mean much if Pig gags as soon as it gets a record that doesn&apos;t match it&apos;s expectation.&lt;/p&gt;

</comment>
                            <comment id="12833274" author="rding" created="Sat, 13 Feb 2010 01:08:14 +0000"  >&lt;p&gt;I suggest we don&apos;t change the current behavior of Pig regarding the non-confirming input data. Pig already handles invalid access (projection) of non-exist field and return a null as a substitute. Pig does this optimistically, not checking every tuple up front. &lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1131&quot; title=&quot;Pig simple join does not work when it contains empty lines&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1131&quot;&gt;&lt;del&gt;PIG-1131&lt;/del&gt;&lt;/a&gt;,  the runtime exception user encountered is also fixed.&lt;/p&gt;
</comment>
                            <comment id="12834362" author="rding" created="Tue, 16 Feb 2010 18:25:57 +0000"  >&lt;p&gt;Actually, Pig is already padding nulls to the input tuple according to input schema (with data types):&lt;/p&gt;

&lt;p&gt;For example, given Pig script:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
a = load &apos;1.txt&apos; as (a0:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, a1:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;);
dump a;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and input file:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
1       2
1       2       3
1
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result is&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
(1,2)
(1,2)
(1, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12835944" author="rding" created="Fri, 19 Feb 2010 20:44:59 +0000"  >&lt;p&gt;To summarize where we are:&lt;/p&gt;

&lt;p&gt;Right now Pig project operator pads null if the value to be projected doesn&apos;t exist. As a consequence, the desired result is achieved if  PigStorage is used and a schema with data types is specified, since in this case Pig inserts a project+cast operator for each field in the schema.&lt;/p&gt;

&lt;p&gt;In the case where no schema is specified in the load statement, Pig is doing a good job adhering to the Pig&apos;s philosophy and  let the program run without throwing runtime exception.&lt;/p&gt;

&lt;p&gt;Now leave the case where a schema is specified without data types. There are several options:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Pig automatically insert a project operator for each field in the schema to ensure the input data matches the schema. The trade-off for this is the performance penalty. Is it worthwhile if most user data is well-behaved?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Users can explicitly add a foreach statement after the load statement which projects all the fields in the schema. This is similar to the practice by the users to run a map job first to cleanup the data.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Pig can also delegate the padding work to the loaders. The problem is that now  the schema isn&apos;t passed to the loaders.&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12836006" author="olgan" created="Fri, 19 Feb 2010 22:29:08 +0000"  >&lt;p&gt;Looks like most common cases are already working. Unlinking from 0.7.0 release.&lt;/p&gt;</comment>
                            <comment id="13001650" author="olgan" created="Wed, 2 Mar 2011 21:11:23 +0000"  >&lt;p&gt;The remaining work for Pig 0.9 on this issue is to make sure that the same behavior is implemented for the case where schema is provided during load regardless of whether type information is provided.&lt;/p&gt;

&lt;p&gt;We want to implement the current behavior of the typed data for the untyped case.&lt;/p&gt;

&lt;p&gt;I believe the way we agreed to do this is by adding foreach regardless of whether type information is available&lt;/p&gt;</comment>
                            <comment id="13004690" author="daijy" created="Wed, 9 Mar 2011 18:15:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1188&quot; title=&quot;Padding nulls to the input tuple according to input schema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1188&quot;&gt;&lt;del&gt;PIG-1188&lt;/del&gt;&lt;/a&gt;-2.patch fix unit test failures.&lt;/p&gt;</comment>
                            <comment id="13004826" author="rding" created="Wed, 9 Mar 2011 22:10:31 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13004863" author="daijy" created="Wed, 9 Mar 2011 22:58:11 +0000"  >&lt;p&gt;Patch committed to trunk&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12442680">PIG-1131</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12552236">PIG-2661</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12472881" name="PIG-1188-1.patch" size="3010" author="daijy" created="Tue, 8 Mar 2011 00:02:34 +0000"/>
                            <attachment id="12473167" name="PIG-1188-2.patch" size="20669" author="daijy" created="Wed, 9 Mar 2011 18:15:16 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Jan 2010 20:22:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66240</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyanjz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>96127</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>If load statement specify schema, Pig will truncate/padding null to make sure the loaded data has exactly the same number of fields specified in load statement.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>