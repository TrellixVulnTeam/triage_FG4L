<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:04:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-2975/PIG-2975.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-2975] TestTypedMap.testOrderBy failing with incorrect result </title>
                <link>https://issues.apache.org/jira/browse/PIG-2975</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Looked at &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;junit.framework.AssertionFailedError
    at org.apache.pig.test.TestTypedMap.testOrderBy(TestTypedMap.java:352)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This looks like a valid test case failing with incorrect result.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;% cat test/orderby.txt
[key#1,key9#23]
[key#3,key3#2]
[key#22]

% cat test/orderby.pig
a = load &apos;test/orderby.txt&apos; as (m:[]);
b = foreach a generate m#&apos;key&apos; as b0;
dump b;
c = order b by b0;
dump c;

% java ... org.apache.pig.Main    -x local test/orderby.pig 
[dump b]
(1)
(3)
(22)

...
[dump c]
(1)
(1)
(22)
%

where did the &apos;(3)&apos; go?
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</description>
                <environment></environment>
        <key id="12611906">PIG-2975</key>
            <summary>TestTypedMap.testOrderBy failing with incorrect result </summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12611880">PIG-2972</parent>
                                    <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knoguchi">Koji Noguchi</assignee>
                                    <reporter username="knoguchi">Koji Noguchi</reporter>
                        <labels>
                    </labels>
                <created>Mon, 15 Oct 2012 21:59:43 +0100</created>
                <updated>Fri, 22 Feb 2013 04:54:06 +0000</updated>
                            <resolved>Tue, 23 Oct 2012 03:27:58 +0100</resolved>
                                    <version>0.11</version>
                                    <fixVersion>0.11</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13476447" author="knoguchi" created="Mon, 15 Oct 2012 22:03:55 +0100"  >&lt;p&gt;I haven&apos;t had time to look into detail but reverting &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2862&quot; title=&quot;Hardcode certain tuple lengths into the TUPLE BinInterSedes byte identifier&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2862&quot;&gt;&lt;del&gt;PIG-2862&lt;/del&gt;&lt;/a&gt; seems to fix the issue.&lt;br/&gt;
(Test started failing only after &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2936&quot; title=&quot;Tuple serialization bug&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2936&quot;&gt;&lt;del&gt;PIG-2936&lt;/del&gt;&lt;/a&gt; when BinInterSedes byte-identifier started to get picked up by the test.)&lt;/p&gt;</comment>
                            <comment id="13477394" author="knoguchi" created="Tue, 16 Oct 2012 23:06:02 +0100"  >&lt;p&gt;This took me much longer to understand than I first anticipated.&lt;/p&gt;

&lt;p&gt;This is not necessary a regression bug in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2862&quot; title=&quot;Hardcode certain tuple lengths into the TUPLE BinInterSedes byte identifier&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2862&quot;&gt;&lt;del&gt;PIG-2862&lt;/del&gt;&lt;/a&gt;, but &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2862&quot; title=&quot;Hardcode certain tuple lengths into the TUPLE BinInterSedes byte identifier&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2862&quot;&gt;&lt;del&gt;PIG-2862&lt;/del&gt;&lt;/a&gt; helped&lt;br/&gt;
manifest a subtle bug in pig that we always had for a long time.&lt;/p&gt;

&lt;p&gt;In short, pig has a bug of using PigBytesRawComparator for&lt;br/&gt;
NullableBytesWritable key even though its content is stored as a Tuple.&lt;/p&gt;

&lt;p&gt;To explain in detail, following is the serialized output format for&lt;br/&gt;
PigNullableWritable.java&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;|-------------|
| mNull       |  1byte
|-------------|
|             |
| mValue      |  WritableComparable __ bytes
|             |
|             |
|-------------|
| mIndex      |  1byte
|-------------|
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When comparing through PigBytesRawComparator.compare(), we skip the above mNull&lt;br/&gt;
and mIndex so we can ignore that part.&lt;/p&gt;


&lt;p&gt;Now, looking at what&apos;s stored inside mValue for&lt;br/&gt;
NullableBytesWritable (extends PigNullableWritable).&lt;br/&gt;
It holds one DataBytesArray entry inside a Tuple.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;|-------------|
| mNull       |  1byte
|-------------|  ------------------
| TINYTUPLE   |  1byte            |
|-------------|                   |
|  sz=1       |  1byte            |
|-------------|                  mValue
|             |                   |
| DataByteArr |                   |
|             |                   |
|             |                   |
|-------------| -------------------
| mIndex      |  1byte
|-------------|
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And expanding how DataByteArray is serialized for the smallest content, 1&lt;br/&gt;
byte.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;|-------------|
| mNull       |  1byte
|-------------|  ------------------
| TINYTUPLE   |  1byte            |
|-------------|                   |
|  sz=1       |  1byte            |
|-------------|                  mValue(5bytes)
|TINYBYTEARRAY|  1byte            |
|-------------|                   |
|  sz=1       |  1byte            |
|-------------|                   |
|content 1byte|  1byte            |
|-------------| -------------------
| mIndex      |  1byte
|-------------|
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As I mentioned in the beginning,&lt;br/&gt;
even though above PigNullableWritable is storing mValue as &lt;b&gt;Tuple&lt;/b&gt;, we are using&lt;br/&gt;
PigBytesRawComparator(mWrappedComp = BytesWritable.Comparator) &lt;br/&gt;
which actually &lt;b&gt;skips 4 bytes&lt;/b&gt; when comparing the two writables.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;BytesWritable.java
 37   private static final int LENGTH_BYTES = 4;
...
205     public int compare(byte[] b1, int s1, int l1,
206                        byte[] b2, int s2, int l2) {
207       return compareBytes(b1, s1+LENGTH_BYTES, l1-LENGTH_BYTES,
208                           b2, s2+LENGTH_BYTES, l2-LENGTH_BYTES);
209     }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, even though there is a mismatch between having Tuple in NullableBytesWritable&lt;br/&gt;
and comparing them as ByteArrays, coincidentally it is not skipping the actual tuple&lt;br/&gt;
content.  (For larger bytearray whose size does not fit in 1 byte(TINYBYTEARRAY), this compare method would take part of the header as content hurting the order but not the uniqueness.)&lt;/p&gt;

&lt;p&gt;Now, with this new feature of &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2862&quot; title=&quot;Hardcode certain tuple lengths into the TUPLE BinInterSedes byte identifier&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2862&quot;&gt;&lt;del&gt;PIG-2862&lt;/del&gt;&lt;/a&gt; (TUPLE BinInterSedes byte identifier),&lt;br/&gt;
this delicate balance suddenly broke, when the minimum header size became 3 from 4.&lt;br/&gt;
(TINYTUPLE + sz = 2bytes now became TUPLE_1 = 1byte)&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;|-------------|
| mNull       |  1byte
|-------------|  ------------------
| TUPLE_1     |  1byte            |
|-------------|                  mValue(4bytes)
|TINYBYTEARRAY|  1byte            |
|-------------|                   |
|  sz=1       |  1byte            |
|-------------|                   |
| tuple 1 byte|  1byte            |
|-------------| -------------------
| mIndex      |  1byte
|-------------|
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So BytesWritable.Comparator started not only skipping the header but the&lt;br/&gt;
content itself.  On the original example, byte &apos;1&apos; and &apos;3&apos; became 0 byte comparisons and was treated as equal bytes leading to the weird output.&lt;br/&gt;
I confirmed this by inserting a debug statement inside&lt;br/&gt;
BytesWritable.Comparator.compare() and seeing 0 length byte array comparisons.&lt;/p&gt;

&lt;p&gt;I believe the fix would be to store mValue as a BytesArray instead of a Tuple for NullableBytesWritable.java.&lt;/p&gt;</comment>
                            <comment id="13477399" author="knoguchi" created="Tue, 16 Oct 2012 23:10:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;(For larger bytearray whose size does not fit in 1 byte(TINYBYTEARRAY), this compare method would take part of the header as content hurting the order but not the uniqueness.)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This can be confirmed without &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2862&quot; title=&quot;Hardcode certain tuple lengths into the TUPLE BinInterSedes byte identifier&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2862&quot;&gt;&lt;del&gt;PIG-2862&lt;/del&gt;&lt;/a&gt;.  Using pig-0.10, we can see that bytearray-order is messed up.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ cat orderbig.txt
1
3
2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
2
55
222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
4
33

$ cat orderbig.pig
a = load &apos;orderbig.txt&apos; as (num:bytearray);
b = order a by num;
dump b;

$ pig -x local orderbig.pig 
...
(222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222)
(1)
(2)
(2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222)
(3)
(33)
(4)
(55)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13477436" author="knoguchi" created="Tue, 16 Oct 2012 23:55:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;I believe the fix would be to store mValue as a BytesArray instead of a Tuple for NullableBytesWritable.java.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Attaching  my idea. I&apos;m only looking at this particular problem without understanding how the overall pig works.  Let me know if this breaks anything.  &lt;/p&gt;

&lt;p&gt;Two worries I have so far.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Can I assume the param to NullableBytesWritable constructor is always DataByteArray ?&lt;/li&gt;
	&lt;li&gt;DataByteArray -&amp;gt; NullableBytesWritable -&amp;gt; DataByteArray could cause extra copying that we may not had before.  Added size checking to reduce the number of copies.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This patch does fix the TestTypedMap.testOrderBy output corruption failure we were seeing.  Also, it fixes the bytearray order bug I mentioned in the previous comment.  I&apos;ll attach another patch later with the test.&lt;/p&gt;</comment>
                            <comment id="13477468" author="cheolsoo" created="Wed, 17 Oct 2012 00:30:27 +0100"  >&lt;p&gt;Hi Koji, this is a good finding!&lt;/p&gt;

&lt;p&gt;It seems that several e2e tests including MergeJoin, MergeSpareJoin, and Order are also broken for the same reason. In my quick test, you patch seems to fixe them.&lt;/p&gt;

&lt;p&gt;Can you please confirm whether they&apos;re failing for the same reason? If so, can you please mark &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2984&quot; title=&quot;MergeJoin, MergeSparseJoin, and Order e2e test fail&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2984&quot;&gt;&lt;del&gt;PIG-2984&lt;/del&gt;&lt;/a&gt; as a duplicate of this jira?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13477547" author="cheolsoo" created="Wed, 17 Oct 2012 03:30:58 +0100"  >&lt;p&gt;Here is the full list of tests that will be fixed by this:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;unit test:&lt;/b&gt;&lt;br/&gt;
TestEvalPipeline2&lt;br/&gt;
TestEvalPipelineLocal&lt;br/&gt;
TestLimitVariable&lt;br/&gt;
TestPruneColumn&lt;br/&gt;
TestTypedMap&lt;/p&gt;

&lt;p&gt;&lt;b&gt;e2e test:&lt;/b&gt;&lt;br/&gt;
Order_1&lt;br/&gt;
Order_2&lt;br/&gt;
Order_3&lt;br/&gt;
Order_6&lt;br/&gt;
Order_7&lt;br/&gt;
Order_18&lt;br/&gt;
Split_6&lt;br/&gt;
BigData_7&lt;br/&gt;
MergeJoin_1,2,3,4,6,7,8&lt;br/&gt;
MergeSparseJoin_1,2,3,5&lt;/p&gt;
</comment>
                            <comment id="13478194" author="jcoveney" created="Wed, 17 Oct 2012 19:28:24 +0100"  >&lt;p&gt;Great work, Koji. A test specifically aimed at this would be delightful. In the meantime, I&apos;m going to poke around and make sure that it doesn&apos;t break anything (and look into the extra copying issue).&lt;/p&gt;

&lt;p&gt;Very good find.&lt;/p&gt;</comment>
                            <comment id="13478208" author="knoguchi" created="Wed, 17 Oct 2012 19:39:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;Can I assume the param to NullableBytesWritable constructor is always DataByteArray ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This was a wrong assumption.  One test was failing with&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Unable to open iterator for alias d. Backend error : Unable to recreate
exception from backed error: java.lang.ClassCastException: java.lang.Integer
cannot be cast to org.apache.pig.data.DataByteArray  at
org.apache.pig.impl.io.NullableBytesWritable.&amp;lt;init&amp;gt;(NullableBytesWritable.java:36)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ll try to come up with another patch.&lt;/p&gt;</comment>
                            <comment id="13478213" author="jcoveney" created="Wed, 17 Oct 2012 19:42:14 +0100"  >&lt;p&gt;Quick first answer to your questions:&lt;br/&gt;
1. Hrm, this is a tricky one. I think the answer is yes (and if it is yes, we should change the constructor to expect a DataByteArray). The issue is this: in Pig, you can have an unknown type (ie it has a name, but not type), but under the hood is it an int or whatever. I&apos;m wondering if there is any case when Pig would do the cast, without making this knowledge available to the work flow. I THINK the answer is no, so I would follow this course, and if it causes errors, then we&apos;ll refactor to fix that.&lt;br/&gt;
2. I am looking at the ByteWritable code here: &lt;a href=&quot;http://grepcode.com/file/repository.cloudera.com/content/repositories/releases/com.cloudera.hadoop/hadoop-core/0.20.2-737/org/apache/hadoop/io/BytesWritable.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://grepcode.com/file/repository.cloudera.com/content/repositories/releases/com.cloudera.hadoop/hadoop-core/0.20.2-737/org/apache/hadoop/io/BytesWritable.java&lt;/a&gt; it looks like it just shuffles around the pointer to the same bytes, so it should be ok.&lt;/p&gt;
</comment>
                            <comment id="13478216" author="jcoveney" created="Wed, 17 Oct 2012 19:43:06 +0100"  >&lt;p&gt;Ah, I didn&apos;t see that. That&apos;s what potentially could be the issue. Hmm hmm hmm.&lt;/p&gt;</comment>
                            <comment id="13478220" author="jcoveney" created="Wed, 17 Oct 2012 19:44:21 +0100"  >&lt;p&gt;One possibility, Koji, is that in the constructor we could special case byte arrays, and do the new code if it is and the old one if it isn&apos;t.&lt;/p&gt;

&lt;p&gt;One thing I need to look at is why the other code breaks. Why does it jump a static 4 bytes? Is anything else broken?&lt;/p&gt;</comment>
                            <comment id="13478227" author="jcoveney" created="Wed, 17 Oct 2012 19:47:23 +0100"  >&lt;p&gt;Another option, of course, is changing the raw Comparator. We could instead use PigTupleDefaultRawComparator once we unwrap a layer.&lt;/p&gt;

&lt;p&gt;The issue is that it does indeed look like you can have something that is actually an int, but is labeled as a bytearray by Pig. This is why they wrapped it as a Tuple. It&apos;d be good to add that comment as well.&lt;/p&gt;</comment>
                            <comment id="13478262" author="knoguchi" created="Wed, 17 Oct 2012 20:13:26 +0100"  >&lt;blockquote&gt;&lt;p&gt;Why does it jump a static 4 bytes?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because BytesWritable.Comparator is written for BytesWritable and BytesWritable uses the first 4 bytes for its size when being serialized.&lt;/p&gt;</comment>
                            <comment id="13478307" author="knoguchi" created="Wed, 17 Oct 2012 20:49:41 +0100"  >&lt;p&gt;(This patch is broken. Not intended for commit)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Another option, of course, is changing the raw Comparator. We could instead use PigTupleDefaultRawComparator once we unwrap a layer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Tried to shortcut by extending NullableTuple. This patch does fix the two issues but introduce an extra layer of Tuple for outputs.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ cat test/order.txt
3
222
1
222222222222...222 (repeat more than 256 time)
53
$ cat test/order.pig
a = load &apos;test/order.txt&apos; as (a1:bytearray);
b = order a by a1;
dump b;

$ pig -x local test/order.pig 
((1))
((2))
((222))
((222222222222...222))
((3))
((4))
((53))
((99))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I want getValueAsPigType to return Tuple for sorting comparisons but actual value within Tuple for others... Still thinking. &lt;/p&gt;</comment>
                            <comment id="13478417" author="jcoveney" created="Wed, 17 Oct 2012 22:40:37 +0100"  >&lt;p&gt;I took a stab at fixing this myself. As I suspected, you can use BinSedesTuple.BinInterSedesTupleRawComparator and it works fine. TestTypedMap passes, though I need to check with other cases.&lt;/p&gt;</comment>
                            <comment id="13478611" author="knoguchi" created="Thu, 18 Oct 2012 03:44:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;you can use BinSedesTuple.BinInterSedesTupleRawComparator and it works fine. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah. That&apos;s how we can work around the problem. Thanks Jonathan! &lt;/p&gt;

&lt;p&gt;Now, stepping back a bit.  Isn&apos;t it the case that original dev intentionally used BytesWritable.Comparator for performance purposes knowingly sacrificing the sort order? Instantiating an object for every compare is known to be slow.  I lack the overall picture of how often this NullableBytesWritable sorting is used but assuming this is the case.&lt;/p&gt;

&lt;p&gt;We are talking about two different issues here.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Result incorrect (when order-by used).  &lt;span class=&quot;error&quot;&gt;&amp;#91;0.11 and trunk&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;Sort order of bytearray sometimes incorrect. &lt;span class=&quot;error&quot;&gt;&amp;#91;in all of recent branches including 0.8,0.9 etc&amp;#93;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It would be nice if we can solve both without sacrificing the performance.  However, given that 0.11 is already rolled and any complicate change can lead to new unexpected bugs, can we revert &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2862&quot; title=&quot;Hardcode certain tuple lengths into the TUPLE BinInterSedes byte identifier&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2862&quot;&gt;&lt;del&gt;PIG-2862&lt;/del&gt;&lt;/a&gt; for 0.11 so that we can keep the previous behavior?&lt;/p&gt;</comment>
                            <comment id="13479402" author="knoguchi" created="Thu, 18 Oct 2012 22:45:55 +0100"  >&lt;blockquote&gt;&lt;p&gt;Result incorrect (when order-by used). &lt;span class=&quot;error&quot;&gt;&amp;#91;0.11 and trunk&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Reading the code, I was able to come up with incorrect result case in 0.10. &lt;br/&gt;
It&apos;s probably rare since the type has to be unknown. Any Datatype that has less than 2 bytes of header size in BinInterSedes.java can hit this issue.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$ pig -version
USING: /grid/0/gs/pig/current
Apache Pig version 0.10.1.0.1206081058 (r1348169) 

$ cat pig-2975-mixed.pig
a = load &apos;pig-2975-mixed1.txt&apos; as (a0:chararray, a1:chararray);
b = load &apos;pig-2975-mixed2.txt&apos; as (b0:int);
y = union a,b;
z = order y by $0;
dump z;
$ cat pig-2975-mixed1.txt
a       b
b       c
d       e
$ cat pig-2975-mixed2.txt
0
1
0
1
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13479404" author="knoguchi" created="Thu, 18 Oct 2012 22:46:56 +0100"  >&lt;p&gt;Silly me. Result of above script was &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;(0)
(0)
(0)
(0)
(a,b)
(b,c)
(d,e)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13479421" author="jcoveney" created="Thu, 18 Oct 2012 23:14:14 +0100"  >&lt;p&gt;Koji,&lt;/p&gt;

&lt;p&gt;I don&apos;t think we need to sacrifice performance if we use BinInterSedes.BinInterSedesRawComparator. It traverses the bytes, it doesn&apos;t deserialize or make any objects (and I think I found an improvement we can make).&lt;/p&gt;

&lt;p&gt;As far as sort order, I think it&apos;s meant to be somewhat odd on purporse.&lt;/p&gt;</comment>
                            <comment id="13479523" author="jcoveney" created="Fri, 19 Oct 2012 01:12:42 +0100"  >&lt;p&gt;FWIW I think my patch fixes this, and I don&apos;t think it has any downsides. It just uses the normal RawComparator.&lt;/p&gt;</comment>
                            <comment id="13480103" author="knoguchi" created="Fri, 19 Oct 2012 17:16:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t think we need to sacrifice performance if we use BinInterSedes.BinInterSedesRawComparator.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I tried sorting uncompressed texts with and without your patch and compared the map time of one of the sort phase job. (1mapper 1 reducer)&lt;/p&gt;

&lt;p&gt;Without the patch&lt;br/&gt;
1st 6mins, 24sec&lt;br/&gt;
2nd 6mins, 21sec&lt;/p&gt;

&lt;p&gt;With the patch&lt;br/&gt;
1st 12mins, 41sec&lt;br/&gt;
2nd 12mins, 40sec&lt;/p&gt;

&lt;p&gt;So there is a performance hit. &lt;/p&gt;

&lt;p&gt;If you look at BinInterSedes.BinInterSedesRawComparator, it&apos;ll eventually comes down to &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; 759         private int compareBinInterSedesDatum(ByteBuffer bb1, ByteBuffer bb2, boolean[] asc) throws IOException {
 857             case BinInterSedes.TINYBYTEARRAY:
 858             case BinInterSedes.SMALLBYTEARRAY:
 859             case BinInterSedes.BYTEARRAY: {
 860                 type1 = DataType.BYTEARRAY;
 861                 type2 = getGeneralizedDataType(dt2);
 862                 if (type1 == type2) {
 863                     int basz1 = readSize(bb1, dt1);
 864                     int basz2 = readSize(bb2, dt2);
 865                     byte[] ba1 = new byte[basz1];
 866                     byte[] ba2 = new byte[basz2];
 867                     bb1.get(ba1);
 868                     bb2.get(ba2);
 869                     rc = DataByteArray.compare(ba1, ba2);
 870                 }
 871                 break;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Probably taking out this extra copies for bytearray comparisons would improve the time.  Trying.   &lt;/p&gt;

&lt;p&gt;(Separately, I&apos;m trying out having a union-in-c like approach for DataByteArray and Tuple.)&lt;/p&gt;</comment>
                            <comment id="13480146" author="jcoveney" created="Fri, 19 Oct 2012 18:18:07 +0100"  >&lt;p&gt;Oof, thanks for benchmarking. I am going to roll up my sleeves and do this right. Shouldn&apos;t be too hard, tbh.&lt;/p&gt;

&lt;p&gt;That said, I will also try making that part of the comparator faster.&lt;/p&gt;</comment>
                            <comment id="13480153" author="knoguchi" created="Fri, 19 Oct 2012 18:27:34 +0100"  >&lt;blockquote&gt;&lt;p&gt;I am going to roll up my sleeves and do this right.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Jonathan, I&apos;m using these opportunities to learn pig.  I&apos;d appreciate if you could lead me to the right direction although I fully understand that it&apos;ll be much faster if you fix it yourself.&lt;/p&gt;</comment>
                            <comment id="13480190" author="jcoveney" created="Fri, 19 Oct 2012 19:03:16 +0100"  >&lt;p&gt;Koji,&lt;/p&gt;

&lt;p&gt;That is super reasonable. I hate bugs like this, so let&apos;s kill it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;m responsible for trying to usher in a new pig-0.11 release, both internally and externally, which is why I&apos;m so gung ho about it.&lt;/p&gt;

&lt;p&gt;Here is what I would say:&lt;/p&gt;

&lt;p&gt;0. It&apos;d be nice to have some tests focused on just this.&lt;/p&gt;

&lt;p&gt;1. I was thinking that since compareBinInterSedesDatum has a handle on the ByteBuffer, instead of reading in the full byte[], we could just do the comparison via calls to .get(). ByteBuffered is buffered so I think that in the general case, this will be a win (but I could be wrong &amp;#8211; it&apos;d be quick to implement and see). I put this before #2 because if we can bring the times in, it&apos;d be nice to leverage the same code path.&lt;/p&gt;

&lt;p&gt;2. We could just make a custom WritableComparator for this case. It would not be hard at all. We know the byte layout of how NullableBytesWritable is implemented, so we can just leverage that directly (right now it is going to be TUPLE_1 / &lt;/p&gt;
{TINYBYTEARRAY, SMALLBYTEARRAY, BYTEARRAY}
&lt;p&gt; / SIZE/ and so on. Hadoop&apos;s BytesWritable is actually a key resource, we just need to tailor it to pig. It can just be switch based, and if it is an object other than a bytearray, we can default to another comparator. If you want it to be fast in all cases, you could copy the switch that BinInterSedesRawComparator uses, and go from there. I put this after #1 though because it seems lame to pull out all that logic, since in BignInterSedesRawComparator we are in fact making the decision to wrap it in a ByteBuffer, so if that is introducing a severe speed penalty, we need to be aware of that.&lt;/p&gt;


&lt;p&gt;And then go from there. Seem reasonable?&lt;/p&gt;</comment>
                            <comment id="13480192" author="jcoveney" created="Fri, 19 Oct 2012 19:03:59 +0100"  >&lt;p&gt;Also: I&apos;ve been loving the contribution from new people, so I&apos;m definitely down to help you fix this instead of doing it myself. Sorry about that. Correctness bugs are just bad bad bad.&lt;/p&gt;</comment>
                            <comment id="13480213" author="knoguchi" created="Fri, 19 Oct 2012 19:21:21 +0100"  >&lt;p&gt;Thanks Jonathan!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;1.  we could just do the comparison via calls to .get(). ByteBuffered is buffered so I think that in the general case, this will be a win &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Attaching a patch that &lt;br/&gt;
took rid of the extra byte[] copy and calling WritableComparator.compareBytes directly.&lt;/p&gt;

&lt;p&gt;This took down the map run time to &lt;br/&gt;
10mins, 12sec (first try) &lt;br/&gt;
10mins, 18sec(second).   But still far from the 6minutes 20 secs.&lt;/p&gt;</comment>
                            <comment id="13480231" author="jcoveney" created="Fri, 19 Oct 2012 19:40:47 +0100"  >&lt;p&gt;Hmm, ok, well, that&apos;s a good change to keep in in general.&lt;/p&gt;

&lt;p&gt;I think that an ok short term solution is to special case DataByteArray&apos;s with a custom WritableComparator that, in the case of a BYTEARRAY/TINYBYTEARRAY/SMALLBYTEARRAY will just use WritableComparator&apos;s compareBytes a la BytesWritable, else it fails over to BinInterSedesRawComparator.&lt;/p&gt;

&lt;p&gt;Let&apos;s make some tests and fix this. Correctness trumps performance, though let&apos;s make sure that this failover approach is performant (I see no reason it shouldn&apos;t be).&lt;/p&gt;

&lt;p&gt;But then step 2 is to make a separate ticket about optimizing BinInterSedesRawComparator. Anyone working on Pig can get a key for yourkit, so you can ping me for that. The pro-style approach IMHO is to use Google Caliper to build some micro-benchmarks (caliper is good about warming up the JVM), while also using the bigger benchmark you&apos;ve been using in this thread. Then you can use YourKit while isolating the difference in speeds and isolate where the difference is coming in, and what method calls are taking the most time.&lt;/p&gt;</comment>
                            <comment id="13480244" author="knoguchi" created="Fri, 19 Oct 2012 19:47:10 +0100"  >&lt;blockquote&gt;&lt;p&gt;2. We could just make a custom WritableComparator for this case&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My impression is that using the BytesWritable compare directly would be the fastest.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;(right now it is going to be TUPLE_1 / {TINYBYTEARRAY, SMALLBYTEARRAY, BYTEARRAY} / SIZE/ and so on. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If the header size is different, I would need a switch somewhere. So thought of this lame approach.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;/*
 * This class tries to optimize for the most common input, DataByteArray
 * In order to preserve the alphabetical ordering for DataByteArray,
 * we skip the first 4 bytes when comparing.
 * For non-DataByteArray, empty 4bytes is added so that content is not
 * skipped by the above offset.  Order for non-DataByteArray would look
 * random since it includes all the headers for comparisons.
 *
 * Bytes comparison is done by pair (isByteArray, mValue) to avoid any
 * potential collision among DataByteArray and non-DataByteArray.
 * //Serialization structure
 * struct {
 *   byte mNull;
 *   int size; (empty for non-DataByteArray)
 *   byte isByteArray;
 *   union {
 *    byte [size];      //for DataType.BYTEARRAY
 *    Tuple.serialized  //for all others
 *   } mValue;
 *   byte mIndex;
 * }
 *
 */
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This sacrifices the space for performance.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;For DataType.BYTEARRAY, it adds 2 more bytes for small record (&amp;lt;256).&lt;br/&gt;
size(4bytes) + 1byte(isByteArray) = 5bytes&lt;br/&gt;
Before, it was TUPLE_1(1byte) + TINYBYTEARRAY(1byte) + size(1byte) = 3bytes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;For non-BYTEARRAY, 5 bytes. empty 4 bytes + 1byte boolean. This is in addition to whatever Tuple adds when serialized.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13480247" author="azaroth" created="Fri, 19 Oct 2012 19:50:23 +0100"  >&lt;p&gt;Hi,&lt;br/&gt;
We use ByteBuffer in the comparator for convenience.&lt;/p&gt;

&lt;p&gt;However, I don&apos;t think we should really compare the 6 minutes of the incorrect version with the 10 minutes of the correct version too much.&lt;br/&gt;
IMHO correctness is more important than performance.&lt;br/&gt;
The slowness is due to the fact that we need to unnest the ByteArray from the Tuple and that we are using a Tuple to store any kind of data.&lt;/p&gt;

&lt;p&gt;That said, BinInterSedes.BinInterSedesRawComparator is meant for performance, so if there is a way to make it faster it&apos;s more than welcome.&lt;br/&gt;
My guess is that it won&apos;t be easy to recover the original speed.&lt;br/&gt;
I would suggest to profile the code with some micro benchmark to see where the time is spent.&lt;/p&gt;</comment>
                            <comment id="13480266" author="jcoveney" created="Fri, 19 Oct 2012 20:03:31 +0100"  >&lt;p&gt;I agree with everything Gianmarco said.&lt;/p&gt;

&lt;p&gt;As far as the switch approach, I don&apos;t think it is lame. It&apos;s a byproduct of the way that Pig handle&apos;s types and serializes them.&lt;/p&gt;

&lt;p&gt;If you look at BytesWritable.Comparator, literally all it does is call compareBytes. There&apos;s no reason we can&apos;t do that. You can do a switch based on the second byte in the bytearray, and then call compareBytes with the right offset.&lt;/p&gt;

&lt;p&gt;I&apos;ll take a look at your patch after lunch.&lt;/p&gt;</comment>
                            <comment id="13480296" author="knoguchi" created="Fri, 19 Oct 2012 20:33:24 +0100"  >&lt;p&gt;Forgot to mention one more alternative.  Take out the 4 bytes offset and just compare everything including the meta/header. This would work but it&apos;ll mess up the byte order completely.  Until now, at least bytearray less than 256 bytes has been alphabetically ordered.&lt;/p&gt;

&lt;p&gt;Also, tested my last patch and it gave about 7 minutes 30 seconds. I was expecting closer to the trunk but something is slowing it down a bit.&lt;/p&gt;

&lt;p&gt;So, here&apos;s my understanding.&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;patch                   &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;correctness&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;byte order&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;speed&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;space&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;current                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; X          &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; OX        &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;BinInterSedesRawComparator&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O          &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O         &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; X    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;union approach            &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O          &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O         &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; OX   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; X    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;no 4 bytes offset compare &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O          &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; X         &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O    &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="13480301" author="knoguchi" created="Fri, 19 Oct 2012 20:40:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;As far as the switch approach, I don&apos;t think it is lame.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Just to clarify, my comment&lt;br/&gt;
&quot;So thought of this lame approach.&quot; was pointing to my union-patch which is overly complicated and wasted space.  &lt;/p&gt;</comment>
                            <comment id="13480309" author="azaroth" created="Fri, 19 Oct 2012 20:44:48 +0100"  >&lt;p&gt;Personally I don&apos;t care about byte order, it has no definite semantic already.&lt;br/&gt;
However, by including the 4 bytes in the comparison I am afraid we are exposing ourselves to further bugs when the serialization format changes.&lt;/p&gt;</comment>
                            <comment id="13480340" author="knoguchi" created="Fri, 19 Oct 2012 21:09:56 +0100"  >&lt;blockquote&gt;&lt;p&gt;by including the 4 bytes in the comparison I am afraid we are exposing ourselves to further bugs when the serialization format changes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Assuming you&apos;re referring to my last &quot;Take out the 4 bytes offset&quot; alternative. &lt;br/&gt;
That&apos;s comparing from very first byte:TUPLE_1 so that we don&apos;t need to worry about how the Tuple (and other dataset) is serialized within.&lt;/p&gt;</comment>
                            <comment id="13480372" author="knoguchi" created="Fri, 19 Oct 2012 21:46:35 +0100"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;patch                   &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;correctness&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;byte order&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;speed&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;space&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;no 4 bytes offset compare &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O          &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; X         &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; O    &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Attaching a version that compare from the top.&lt;br/&gt;
Byte order would now look like &lt;/p&gt;

&lt;p&gt;(2222222222...222222222222222) (repeat 256 times)&lt;br/&gt;
(1)&lt;br/&gt;
(2)&lt;br/&gt;
(12)&lt;br/&gt;
(22)&lt;br/&gt;
(32)&lt;br/&gt;
(222)&lt;br/&gt;
(555)&lt;/p&gt;</comment>
                            <comment id="13480373" author="azaroth" created="Fri, 19 Oct 2012 21:47:03 +0100"  >&lt;p&gt;Yes, I was referring to the last alternative.&lt;/p&gt;

&lt;p&gt;If the serialization format changes (say we redefine the codes for TINYTUPLE) then we end up with a new order for tuples.&lt;br/&gt;
As I said ByteArray sorting does not have a definite semantic, but I feel that it would be good to keep it stable across releases, if possible.&lt;/p&gt;</comment>
                            <comment id="13480374" author="jcoveney" created="Fri, 19 Oct 2012 21:51:26 +0100"  >&lt;p&gt;Gianmarco,&lt;/p&gt;

&lt;p&gt;That&apos;s what I&apos;m currently pondering as well. Is there any reason why DataByteArray sorting needs to be stable across releases? I believe the docs say that there are no guarantees, which means it is subject to change at any time. If people want defined semantics in this respect, they can just cast it to the appropriate data type., no?&lt;/p&gt;</comment>
                            <comment id="13480378" author="jcoveney" created="Fri, 19 Oct 2012 21:55:01 +0100"  >&lt;p&gt;As a side note, Koji, if you make a new jira specifically about improve BinInterSedesRawComparator&apos;s handling of DataByteArray&apos;s I will review and commit it. And if you want to learn Pig, you could make another JIRA about improving the performance in general. IMHO BinInterSedes (and that whole code path that touches it) could probably be significantly improved.&lt;/p&gt;

&lt;p&gt;W.r.t. to this issue, I think we should either directly compare the bytes (currently leaning towards this), or we can just have a special lightweight comparator that special cases DataByteArrays, and delegates to BinInterSedesRawComparator otherwise. We wouldn&apos;t need the complexity of the union approach, and we should get the correctness, speed, and stable bytearray sort order.&lt;/p&gt;

&lt;p&gt;That said, IF we decide to preserve byte array sort order, I think we should make a decision now about whether or not we want to define that semantic. If not, then just directly comparing the bytes should be a-ok, since all that is important for bytearrays currently is that a global ordering exists, not what that global ordering is.&lt;/p&gt;</comment>
                            <comment id="13480381" author="azaroth" created="Fri, 19 Oct 2012 21:58:37 +0100"  >&lt;p&gt;Personally I would go with BinInterSedesRawComparator and try to see where it spends time to make it faster. From a software engineering standpoint, that class is the one responsible for raw comparisons of tuples.&lt;br/&gt;
Once you factor improvements in that class, all the other places that use it get the improvements for free.&lt;br/&gt;
Even if we go for a special case, I would special-case inside BinInterSedesRawComparator rather than outside it.&lt;br/&gt;
The fewer the places that make assumptions about the serialization format, the easier we can change it.&lt;/p&gt;</comment>
                            <comment id="13480382" author="knoguchi" created="Fri, 19 Oct 2012 21:58:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;but I feel that it would be good to keep it stable across releases, if possible.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah, that makes sense.  But isn&apos;t this part of the code only hit when the schema is &apos;unknown&apos; or is a defined &apos;bytearray&apos;? &lt;br/&gt;
If so, can we say that ordering of &apos;unknown&apos; type is unknown and could change from version to version? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m still missing the bigger picture of how often NullableBytesWritable is called with non-ByteArray data.  My assumption was that this is rare and I optimized for ByteArray in my union patch.&lt;/p&gt;</comment>
                            <comment id="13480393" author="azaroth" created="Fri, 19 Oct 2012 22:08:59 +0100"  >&lt;p&gt;Indeed, my idea to keep the order stable is only a &quot;nice to have&quot;.&lt;br/&gt;
For sure there is no strict requirement to keep it, so I am OK with foregoing it and directly comparing the whole bytes.&lt;/p&gt;

&lt;p&gt;Koji, that&apos;s a good question. I guess that it could happen if we lose the schema during the execution of a plan, e.g. because of a UDF.&lt;/p&gt;</comment>
                            <comment id="13480413" author="knoguchi" created="Fri, 19 Oct 2012 22:36:56 +0100"  >&lt;blockquote&gt;
&lt;p&gt;pig-2975-trunk_v04-purerawcompare.txt&lt;br/&gt;
2222222222...222222222222222) (repeat 256 times)&lt;br/&gt;
(1)&lt;br/&gt;
(2)&lt;br/&gt;
(12)&lt;br/&gt;
(22)&lt;br/&gt;
(32)&lt;br/&gt;
(222)&lt;br/&gt;
(555)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;One thing I worry about this new sort order is, we might get a worse compression ratio for users&apos; output. (Similar record ordered far away.)&lt;/p&gt;</comment>
                            <comment id="13480442" author="knoguchi" created="Fri, 19 Oct 2012 23:09:19 +0100"  >&lt;blockquote&gt;&lt;p&gt;One thing I worry about this new sort order is, we might get a worse compression ratio for users&apos; output. (Similar record ordered far away.)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To clarify, pig-2975-trunk_v04-purerawcompare.txt doesn&apos;t work well with the reverse domain name. &lt;br/&gt;
(com.yahoo.news)&lt;br/&gt;
(org.apache.wiki)&lt;br/&gt;
(com.yahoo.sports)&lt;/p&gt;

&lt;p&gt;Of course user can specify &apos;chararray&apos; to achieve that but I&apos;m afraid some users are using the default bytearray type.&lt;/p&gt;</comment>
                            <comment id="13480455" author="jcoveney" created="Fri, 19 Oct 2012 23:24:30 +0100"  >&lt;p&gt;This is one benefit (and in some senses, the drawback) of using BinInterSedesRawComparator. Because of how Tuples are serialized, it in fact is using the &quot;proper&quot; raw comparator (and thus, providing the proper sort order) even though the user did not specify a Schema.&lt;/p&gt;

&lt;p&gt;I found Gianmarco&apos;s argument towards trying to make BinInterSedesRawComparator fairly persuasive, though that code has a different goal.&lt;/p&gt;

&lt;p&gt;I guess this comes down to how nice we want to be to people given that they do not specify a Schema. We can take a performance hit and try and figure things out for them, or we can make it blazing fast but with arbitrary guarantees.&lt;/p&gt;

&lt;p&gt;Given that the way to free yourself from those arbitrary guarantees is &quot;add a schema,&quot; you would then lose the speed benefits anyway. This, to me, is an argument for using BinInterSedesTupleRawComparator, in the sense that if this is the &quot;preferred&quot; path, we should use it and, as Gianmarco said, spend time optimizing it (since it is a pretty important code path for a lot more code than just this case). UNLESS we want to promote using DataByteArray&apos;s explicitly because we can do a much faster sort (I do not think this is what we should advocate, though if something is legitimately a DataByteArray there is no reason not to try and optimize that path so it&apos;s very fast...it should be, eh?).&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;p&gt;Thanks for hashing this out, guys.&lt;/p&gt;</comment>
                            <comment id="13481392" author="knoguchi" created="Mon, 22 Oct 2012 15:19:27 +0100"  >&lt;blockquote&gt;&lt;p&gt;or we can just have a special lightweight comparator that special cases DataByteArrays, and delegates to BinInterSedesRawComparator otherwise.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This one was faster than I expected.&lt;br/&gt;
414 seconds average vs the simple raw compare(including the header) of 398 seconds.&lt;br/&gt;
(Much faster than my bulky union approach of 436 seconds.)&lt;/p&gt;

&lt;p&gt;I also tried moving this special case comparator to inside BinInterSedesRawComparator.compare, but that jumped the runtime back to over 600 seconds.&lt;/p&gt;

&lt;p&gt;It&apos;s just one extra hop(method) + one extra checking(Tuple_1) but somehow jvm couldn&apos;t handle it well.&lt;/p&gt;

&lt;p&gt;Adding test cases now.&lt;/p&gt;</comment>
                            <comment id="13481548" author="jcoveney" created="Mon, 22 Oct 2012 18:51:37 +0100"  >&lt;p&gt;Koji,&lt;/p&gt;

&lt;p&gt;I am digging this!&lt;/p&gt;

&lt;p&gt;A couple stylistic points:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;l1 is a really hard to read. Please use fuller names (even len1 and len2)&lt;/li&gt;
	&lt;li&gt;IMHO, spaces make = and + etc more readable (ie databytearraycompare=false)&lt;/li&gt;
	&lt;li&gt;on that front, use camelCase for multi-word lines&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Last point: I would love to have a unit test that tests this specifically. if you could do that, this would be truly pro-style. Otherwise it looks great&lt;/p&gt;</comment>
                            <comment id="13481584" author="knoguchi" created="Mon, 22 Oct 2012 19:27:14 +0100"  >&lt;p&gt;Attaching patch with Jonathan&apos;s suggested changes (except the first one).&lt;/p&gt;

&lt;p&gt;Thanks Jonathan for all your help and being patient with me!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;l1 is a really hard to read. Please use fuller names (even len1 and len2)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agree. But this is coming from the original code. l1,s1,l2,s2 seem to be used everywhere for compare() method unfortunately.  Leaving them for now.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;IMHO, spaces make = and + etc more readable (ie databytearraycompare=false)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Added.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;on that front, use camelCase for multi-word lines&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Changed.&lt;/p&gt;

&lt;p&gt;Also added couple of test cases for incorrect results and one for Alphabetical sorting of bytearrays across Tiny/Small/Regular size boundaries. &lt;/p&gt;</comment>
                            <comment id="13481628" author="jcoveney" created="Mon, 22 Oct 2012 19:54:47 +0100"  >&lt;p&gt;Koji,&lt;/p&gt;

&lt;p&gt;It&apos;s been a pleasure &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Ok, I&apos;m king nitpick, but my last nitpick is to statically import assertEquals() (and any other junit methods) instead of calling Assert.whatever. Why? I&apos;m slowly but surely trying to promote a consistent style in all of the unit tests.&lt;/p&gt;

&lt;p&gt;As far as the annoying l1 etc variable, I&apos;ll let it slide &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; You&apos;re right that it&apos;s a common pattern, but I think it&apos;s a bad one. That said: this isn&apos;t the place to fix that.&lt;/p&gt;

&lt;p&gt;Also, your tests are great, though a few more comments could be helpful. &quot;compareTwoObjects&quot; is a bit misleading, for example. I know not all of the tests have great comments (I&apos;m probably guilty of this myself), but a line or two per would go a long way. Be the commit you want to see in the world and all that jazz!&lt;/p&gt;

&lt;p&gt;In the meantime, I&apos;m going to make sure the tests run, and make sure that the unit tests fail on trunk (ie that it is isolating the issue).&lt;/p&gt;

&lt;p&gt;Thanks for being patient with ME, Koji&lt;br/&gt;
Jon&lt;/p&gt;</comment>
                            <comment id="13481736" author="knoguchi" created="Mon, 22 Oct 2012 21:03:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;statically import assertEquals()&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;done.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;compareTwoObjects&quot; is a bit misleading,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Renamed to compareTwoObjectsAsNullableBytesWritables.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;a few more comments could be helpful.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Added.&lt;/p&gt;

&lt;p&gt;Also, added one more test case testLongByteArrays to make sure I&apos;m setting the offset/length right.&lt;/p&gt;

&lt;p&gt;One test I don&apos;t have an answer on.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;118   @Test119   public void testDifferentType() throws Exception {
120      assertTrue(&quot;Integer 9999 and Long 9999 considered equal&quot;,
121         compareTwoObjectsAsNullableBytesWritables(new Integer(9999), new Long(9999)) != 0 );
122 }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;when comparing Integer(9999) and Long(9999) as unknown type, should they be considered same ? or different? &lt;/p&gt;

&lt;p&gt;Inside BinInterSedesTupleRawComparator, it&apos;s the latter.  Before, it was former (since the bug was skipping the datatype header).&lt;/p&gt;</comment>
                            <comment id="13481748" author="jcoveney" created="Mon, 22 Oct 2012 21:21:08 +0100"  >&lt;p&gt;Would it have been the same before? A serialized long would have been 8 bytes and a serialized Integer would have been 4 bytes... I guess it depends what order it is serialized in.&lt;/p&gt;

&lt;p&gt;I would just go with what BinInterSedesTupleRawComparator does, and we can note the minor backwards incompatibility (though it doesn&apos;t actually violate anything people should be relying on, it might be nice to explain what is going on in the release notes, just to clarify the semantics).&lt;/p&gt;</comment>
                            <comment id="13481761" author="knoguchi" created="Mon, 22 Oct 2012 21:39:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;Would it have been the same before?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. My test fails on trunk and passes with the patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A serialized long would have been 8 bytes and a serialized Integer would have been 4 bytes..&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Actually, Tuple serializes Long by &lt;/p&gt;

&lt;p&gt;BinInterSedes.java&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; 498             } else if (Integer.MIN_VALUE &amp;lt;= lng &amp;amp;&amp;amp; lng &amp;lt;= Integer.MAX_VALUE) {
 499                 out.writeByte(LONG_ININT);
 500                 out.writeInt((int)lng);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;I would just go with what BinInterSedesTupleRawComparator does, and we can note the minor backwards incompatibility&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13481770" author="azaroth" created="Mon, 22 Oct 2012 21:47:40 +0100"  >&lt;p&gt;Guys, great job in moving this forward!&lt;br/&gt;
I am sold an all the improvements in the patch.&lt;br/&gt;
+1&lt;/p&gt;</comment>
                            <comment id="13481790" author="jcoveney" created="Mon, 22 Oct 2012 22:00:31 +0100"  >&lt;p&gt;I&apos;m going to give it one last look-over and make sure that test-commit passes, otherwise I&apos;ll commit it shortly.&lt;/p&gt;</comment>
                            <comment id="13482057" author="jcoveney" created="Tue, 23 Oct 2012 03:27:49 +0100"  >&lt;p&gt;Thanks for the great job, Koji. It&apos;s in!&lt;/p&gt;</comment>
                            <comment id="13482063" author="knoguchi" created="Tue, 23 Oct 2012 03:34:54 +0100"  >&lt;p&gt;Thanks Jonathan, Gianmarco and Cheolsoo!  &lt;br/&gt;
(and sorry for my loooong detours &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="13482064" author="jcoveney" created="Tue, 23 Oct 2012 03:37:50 +0100"  >&lt;p&gt;&apos;twas a delight. On to the next one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13482072" author="cheolsoo" created="Tue, 23 Oct 2012 03:50:44 +0100"  >&lt;p&gt;Thank you Koji!&lt;/p&gt;

&lt;p&gt;Now I am running all the tests with your fix and going to close jiras as soon as I verify that they are fixed.&lt;/p&gt;</comment>
                            <comment id="13482077" author="knoguchi" created="Tue, 23 Oct 2012 04:17:07 +0100"  >&lt;blockquote&gt;&lt;p&gt;Now I am running all the tests with your fix and going to close jiras as soon as I verify that they are fixed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Shoot.  My test run for this patch finished and I see some new tests failing.  Opened Pig-2999.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12612000">PIG-2984</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12612144">PIG-2987</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12613385">PIG-3003</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12550029" name="PIG-2975-0_jco-v2.patch" size="4216" author="knoguchi" created="Fri, 19 Oct 2012 19:21:21 +0100"/>
                            <attachment id="12549582" name="PIG-2975-0_jco.patch" size="3282" author="jcoveney" created="Wed, 17 Oct 2012 22:40:37 +0100"/>
                            <attachment id="12549404" name="pig-2975-trunk_v01.txt" size="1765" author="knoguchi" created="Tue, 16 Oct 2012 23:55:05 +0100"/>
                            <attachment id="12549563" name="pig-2975-trunk_v02-broken.txt" size="1779" author="knoguchi" created="Wed, 17 Oct 2012 20:49:41 +0100"/>
                            <attachment id="12550039" name="pig-2975-trunk_v03-unionapproach.txt" size="4156" author="knoguchi" created="Fri, 19 Oct 2012 19:47:10 +0100"/>
                            <attachment id="12550078" name="pig-2975-trunk_v04-purerawcompare.txt" size="1442" author="knoguchi" created="Fri, 19 Oct 2012 21:46:35 +0100"/>
                            <attachment id="12550289" name="pig-2975-trunk_v05-BinInterSedesRawComparatorAndlightweight-withouttest.txt" size="7571" author="knoguchi" created="Mon, 22 Oct 2012 15:19:27 +0100"/>
                            <attachment id="12550321" name="pig-2975-trunk_v05-BinInterSedesRawComparatorAndlightweight-withtest.txt" size="14271" author="knoguchi" created="Mon, 22 Oct 2012 19:27:14 +0100"/>
                            <attachment id="12550342" name="pig-2975-trunk_v05-BinInterSedesRawComparatorAndlightweight-withtest2.txt" size="16601" author="knoguchi" created="Mon, 22 Oct 2012 21:03:09 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 16 Oct 2012 23:30:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>248822</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy3urb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>56307</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>