<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:05:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-953/PIG-953.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-953] Enable merge join in pig to work with loaders and store functions which can internally index sorted data </title>
                <link>https://issues.apache.org/jira/browse/PIG-953</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Currently merge join implementation in pig includes construction of an index on sorted data and use of that index to seek into the &quot;right input&quot; to efficiently perform the join operation. Some loaders (notably the zebra loader) internally implement an index on sorted data and can perform this seek efficiently using their index. So the use of the index needs to be abstracted in such a way that when the loader supports indexing, pig uses it (indirectly through the loader) and does not construct an index. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12435351">PIG-953</key>
            <summary>Enable merge join in pig to work with loaders and store functions which can internally index sorted data </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pkamath">Pradeep Kamath</assignee>
                                    <reporter username="pkamath">Pradeep Kamath</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Sep 2009 19:47:05 +0100</created>
                <updated>Wed, 24 Mar 2010 22:15:55 +0000</updated>
                            <resolved>Thu, 29 Oct 2009 17:29:07 +0000</resolved>
                                    <version>0.3.0</version>
                                    <fixVersion>0.6.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12753767" author="pkamath" created="Thu, 10 Sep 2009 19:55:28 +0100"  >&lt;p&gt;Attached patch has the changes in pig to support interacting with Loaders which can construct the index internally. The main change is to hide the index access behind and interface. So a new interface called IndexableLoadFunc which extends LoadFunc has been introduced with the following two methods:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
     * This method is called by the pig runtime to indicate
     * to the LoadFunc to position its underlying input stream
     * near the keys supplied as the argument. Specifically:
     * 1) &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the keys are present in the input stream, the loadfunc
     * implementation should position its read position to 
     * a record where the key(s) is/are the biggest key(s) less than
     * the key(s) supplied in the argument OR to the record with the
     * first occurrence of the keys(s) supplied.
     * 2) &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the key(s) are absent in the input stream, the implementation
     * should position its read position to a record where the key(s)
     * is/are the biggest key(s) less than the key(s) supplied OR to the
     * first record where the key(s) is/are the smallest key(s) greater
     * than the keys(s) supplied. 
     * The description above holds &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; descending order data in 
     * a similar manner with &lt;span class=&quot;code-quote&quot;&gt;&quot;biggest&quot;&lt;/span&gt; and &lt;span class=&quot;code-quote&quot;&gt;&quot;less than&quot;&lt;/span&gt; replaced with
     * &lt;span class=&quot;code-quote&quot;&gt;&quot;smallest&quot;&lt;/span&gt; and &lt;span class=&quot;code-quote&quot;&gt;&quot;greater than&quot;&lt;/span&gt; and vice versa.
     *  
     * @param keys Tuple with join keys (which are a prefix of the sort
     * keys of the input data). For example &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the data is sorted on
     * columns in position 2,4,5 any of the following Tuples are
     * valid as an argument value:
     * (fieldAt(2))
     * (fieldAt(2), fieldAt(4))
     * (fieldAt(2), fieldAt(4), fieldAt(5))
     * 
     * The following are some invalid cases:
     * (fieldAt(4))
     * (fieldAt(2), fieldAt(5))
     * (fieldAt(4), fieldAt(5))
     * 
     * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException When the loadFunc is unable to position
     * to the required point in its input stream
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void seekNear(Tuple keys) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
    
    
    /**
     * A method called by the pig runtime to give an opportunity
     * &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; implementations to perform cleanup actions like closing
     * the underlying input stream. This is necessary since &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;
     * performing a join the pig run time may determine than no further
     * join is possible with remaining records and may indicate to the
     * IndexableLoader to cleanup by calling &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; method.
     * 
     * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the loadfunc is unable to perform
     * its close actions.
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void close() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea is that the POMergeJoin will use seekNear to indicate to the loader to position itself to the correct point in the right input. To keep the POMergeJoin implementation simple, for the default case (where the loader (for example PigStorage) does not implement IndexableLoadFunc), a DefaultIndexableLoader which encapsulates the real loader and provides the implementation for IndexableLoadFunc&apos;s methods will be used. In this case, an index will be created as it is done currently and DefaultIndexableLoader will use that index to implement IndexableLoadFunc&apos;s methods.&lt;/p&gt;

&lt;p&gt;A SortInfo class containing names of sort columns and ascending/descending information is also introduce and will be available through StoreConfig. This will be useful for ZebraStore to determine whether the data it is writing out is sorted and to create an index appropriately.&lt;/p&gt;</comment>
                            <comment id="12753801" author="dvryaboy" created="Thu, 10 Sep 2009 21:27:54 +0100"  >&lt;p&gt;Pradeep,&lt;/p&gt;

&lt;p&gt;First, I think this is very important to have, not just for Merge but for other things that might benefit from knowing sort orders, as well. &lt;/p&gt;

&lt;p&gt;A few minor nits from a cursory glance at the code. I didn&apos;t check the actual logic very carefully yet &amp;#8211; it looks like the large diff blocks in MergeSort et al are mostly moves of code blocks, not significant code changes, correct?&lt;/p&gt;

&lt;p&gt;On to the comments:&lt;/p&gt;

&lt;p&gt;seekNear seems ambiguous, as &quot;near&quot; is a generic concept that does not necessarily imply &quot;before or to, but not after&quot; &amp;#8211; which is what this method is required to do. How about &quot;seekBefore()&quot;?&lt;/p&gt;

&lt;p&gt;Why does getAscColumns and getSortColumns make a copy of the list?  Seems like we can save some memory and cpu here.&lt;/p&gt;

&lt;p&gt;For that matter, why not use a map of (String)colName-&amp;gt; (Boolean)ascending instead of 2 lists? One structure, plus O(1) lookup.&lt;/p&gt;

&lt;p&gt;Not sure about the use of super() in the constructor of a class that doesn&apos;t extend anything but Object. Is there some magic that requires it?&lt;/p&gt;

&lt;p&gt;In Log2PhysTranslator, why hardcode the Limit operator? There are other operators that don&apos;t change sort order, such as filter. Perhaps add a method to Logical Operators that indicates if they alter sort order of their inputs?&lt;/p&gt;


&lt;p&gt;in Utils&lt;/p&gt;

&lt;p&gt;checkNullEquals is better written as&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (obj1 == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || obj2 == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; obj1 == obj2;
} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;  {
	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; checkEquality ? obj1.equals(obj2) : &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even with this rewrite, this seems like an odd function. It being as odd as it is leads to it not being used safely when you set checkEquality to false (just a few lines later)-- if obj1 is null and obj2 is not, the func returns true, you try to call a method on obj1, and get an NPE.&lt;/p&gt;

&lt;p&gt;Probably better not to roll all this into one amorphous function and simply write&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Util.bothNull(obj1, obj2) || (Util.notNull(obj1, obj2) &amp;amp;&amp;amp; obj1.equals(obj2));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(the implementations of bothNull and notNull are obvious &amp;#8211; just conjunction and disjunction of obj == null)&lt;/p&gt;

&lt;p&gt;In StoreConfig&lt;br/&gt;
This comment has a typo (and instead of &quot;an&quot;): &lt;br/&gt;
&quot;* 1) the store does not follow and order by&quot;&lt;/p&gt;
</comment>
                            <comment id="12753816" author="pkamath" created="Thu, 10 Sep 2009 22:10:31 +0100"  >&lt;p&gt;Response to previous comment:&lt;/p&gt;

&lt;p&gt;Dmitriy:  seekNear seems ambiguous, as &quot;near&quot; is a generic concept that does not necessarily imply &quot;before or to, but not after&quot; - which is what this method is required to do. How about &quot;seekBefore()&quot;?&lt;br/&gt;
Pradeep: I had initially thought of naming this method seekBefore(). However for the case where the key we are using to seek not being present in the right input, the loader can either position at the biggest value before the key OR the smallest value after the key (zebra loader for example can only do the latter). The name &quot;seekBefore&quot; suggests that implementations should always seek before the key in question - hence I chose seekNear.&lt;/p&gt;

&lt;p&gt;Dmitriy: it looks like the large diff blocks in MergeSort et al are mostly moves of code blocks, not significant code changes, correct?&lt;br/&gt;
Pradeep: I am assuming you meant POMergeJoin - yes - its mostly code move to DefaultIndexableLoader&lt;/p&gt;


&lt;p&gt;Dmitriy: Why does getAscColumns and getSortColumns make a copy of the list? Seems like we can save some memory and cpu here.&lt;br/&gt;
Pradeep: Findbugs complains about passing internal members as is in getters since the caller can then modifiy these internal members - hence the copy. This should not be a performance/memory issue since these copies are 1) on small structures 2) in front end at compile time and not at runtime.&lt;/p&gt;

&lt;p&gt;Dmitriry: For that matter, why not use a map of (String)colName-&amp;gt; (Boolean)ascending instead of 2 lists? One structure, plus O(1) lookup.&lt;br/&gt;
Pradeep: This suggestion is reasonable - I picked the current implementation since its inline with how these things are represented today in LOSort.  Unless the user of SortInfo does lookup using sort column names, we won&apos;t get O(1). I designed this keeping zebra&apos;s use case (which is the only use case at this point) and the zebra store function would basically needs to know the sort keys in order and which of them are asc/dsc. For this they would iterate over our datastructure and require that the ordering of the keys match the primary/secondary order of the sort keys - hence a list lends itself better for that. I debated using a List&amp;lt;Pair&amp;lt;String,Boolean&amp;gt;&amp;gt; but thought I can avoid Pair since its a pig implementation class (if tomorrow zebra wants to expose the same SortInfo to its users).&lt;/p&gt;

&lt;p&gt;Dmitriy: Not sure about the use of super() in the constructor of a class that doesn&apos;t extend anything but Object. Is there some magic that requires it?&lt;br/&gt;
Pradeep: This was unintended - all thanks to eclipse &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; - will remove it a next iteration of this patch&lt;/p&gt;

&lt;p&gt;Dmitriy: In Log2PhysTranslator, why hardcode the Limit operator? There are other operators that don&apos;t change sort order, such as filter. Perhaps add a method to Logical Operators that indicates if they alter sort order of their inputs?&lt;br/&gt;
Pradeep: Pig only guarantees order with limit following order - for any other relational operator following order there are no guarantees. Today it is true that filter or a column pruning foreach would also preserve order but this can change if needed in the future. There explicit code to ensure order-limit combination works by preserving order - there is no such explicit check for other operators (keeping it open for change in the future)&lt;/p&gt;

&lt;p&gt;Dmitriy: Even with this rewrite, this seems like an odd function. It being as odd as it is leads to it not being used safely when you set checkEquality to false (just a few lines later)-- if obj1 is null and obj2 is not, the func returns true, you try to call a method on obj1, and get an NPE.&lt;br/&gt;
Pradeep: The rewrite is more terse and is another option as against the explicit if-else I have - more a coding style issue than correctness. The idea of having this function was to serve as a helper for use in Classes which need to implement equals().  It is cumbersone that every new class&apos;s equals has to do the equivalent of what you suggest:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Util.bothNull(obj1, obj2) || (Util.notNull(obj1, obj2) &amp;amp;&amp;amp; obj1.equals(obj2));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one method can be used either to only check that both objects are not null OR to do that and additionally check equality. Not sure I understand the oddity - am I missing something?&lt;/p&gt;

&lt;p&gt;Dmitriy: This comment has a typo (and instead of &quot;an&quot;): &lt;br/&gt;
Pradeep: Will fix in next iteration&lt;/p&gt;


</comment>
                            <comment id="12753823" author="dvryaboy" created="Thu, 10 Sep 2009 22:18:29 +0100"  >&lt;p&gt;Pradeep &amp;#8211; I would argue that my rewrite is not more terse, but less verbose &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;br/&gt;
I just don&apos;t see how&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is ever better or more readable than&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As far as oddness, I would argue that since the person who wrote the function introduced a possible NPE a few lines lower, someone else can hardly be expected to use it properly &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  See my comment about checkEquality being false.  The function as written misses a corner case.&lt;/p&gt;</comment>
                            <comment id="12753827" author="pkamath" created="Thu, 10 Sep 2009 22:32:14 +0100"  >&lt;p&gt;I see the first part as a coding style preference - I have done both styles in code myself - don&apos;t think it is a major issue with readability with current implementation&lt;/p&gt;

&lt;p&gt;Can you explain the NPE? If either object is null, the code would return with false unless both are null. If checkEquality is false, the caller should know that only null equality has been checked thus far and if true was returned then the two objects are null and hence equal. My main intent was to have this helper function be used from other Class&apos;s equals() implementation so that this mundane check for null need not be repeated in every equals implementation. Maybe I am not understanding your use case better - an example might help.&lt;/p&gt;</comment>
                            <comment id="12753828" author="dvryaboy" created="Thu, 10 Sep 2009 22:33:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;Pradeep: Pig only guarantees order with limit following order - for any other relational operator following order there are no guarantees. Today it is true that filter or a column pruning foreach would also preserve order but this can change if needed in the future. There explicit code to ensure order-limit combination works by preserving order - there is no such explicit check for other operators (keeping it open for change in the future)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That actually tells me that an orderPreserving property on a LogicalOperator is a really good idea.&lt;br/&gt;
That way we can set it to true on all operators that are at the moment order-preserving (limit, filter, column-prining foreach), and not commit to forever maintaining that contract. If filter starts changing order, the patch will simply have to include a change to set orderPreserving to false in POFilter, and everything will work automagically.&lt;/p&gt;</comment>
                            <comment id="12753833" author="dvryaboy" created="Thu, 10 Sep 2009 22:39:04 +0100"  >&lt;p&gt;I got my trues and falses reversed on the NPE thing. You are right, the function works as intended.&lt;br/&gt;
I still think it&apos;s too verbose, but agree that it&apos;s a style issue &amp;#8211; I guess if the commiters like it, it&apos;s fine &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12753843" author="alangates" created="Thu, 10 Sep 2009 22:56:11 +0100"  >&lt;p&gt;-1 to adding an orderPreserving flag on operators.  We have no intention of ever promising that any relational operator beyond Order and Limit preserve order.  The fact that some happen to now (like filter) is a side effect of the current implementation, not a feature.  If we add a flag, it becomes a feature that we will be expected to maintain.&lt;/p&gt;</comment>
                            <comment id="12753850" author="olgan" created="Thu, 10 Sep 2009 23:05:38 +0100"  >&lt;p&gt;+1 on what Alan said&lt;/p&gt;</comment>
                            <comment id="12754671" author="ashutoshc" created="Sun, 13 Sep 2009 08:45:00 +0100"  >&lt;p&gt;1. &lt;span class=&quot;error&quot;&gt;&amp;#91;Pradeep&amp;#93;&lt;/span&gt; zebra store function would basically needs to know the sort keys in order and which of them are asc/dsc. For this they would iterate over our data structure and require that the ordering of the keys match the primary/secondary order of the sort keys&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Ashutosh&amp;#93;&lt;/span&gt; What about LinkedHashMap? It provides all the properties we are seeking here, one data structure, O(1) lookup and guaranteed iteration order. &lt;/p&gt;

&lt;p&gt;2. In Utils.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; checkNullAndClass(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; obj1, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; obj2) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; checkNullEquals(obj1, obj2, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;) &amp;amp;&amp;amp; obj1.getClass() == obj2.getClass();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will result in NPE when both obj1 and obj2 are null. &lt;/p&gt;

&lt;p&gt;A minor detail:  Suppose obj1 is declared of type ArrayList&amp;lt;Integer&amp;gt; and obj2 is declared of type ArrayList&amp;lt;String&amp;gt;, obj1.getClass() == obj2.getClass() will return true thanks to type erasure by java compiler at compile time. Not sure if thats OK or not for the check here. &lt;/p&gt;

&lt;p&gt;3. In StoreConfig.java One of the scenarios in which SortInfo is returned as null is&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
* 3) the store follows an &lt;span class=&quot;code-quote&quot;&gt;&quot;order by&quot;&lt;/span&gt; but the schema
* of &lt;span class=&quot;code-quote&quot;&gt;&quot;order by&quot;&lt;/span&gt; does not have column name(s) &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the sort
* column(s)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I understand that reason for this additional constraint is because SortInfo maintains list of column names. But even if schema contains only type information and not the column names, that still is a sufficient information to build indexes. Information about on which column data is sorted on can be recorded using column positions isn&apos;t it? Does zebra requires columns to be named? If it doesn&apos;t then SortInfo could be changed in such a way that it can provide column position instead of names to loader, if columns arent named.&lt;/p&gt;

&lt;p&gt;In POMergeJoin.java&lt;br/&gt;
4.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        currentFileName = lFile.getFileName();
+        loader = (LoadFunc)PigContext.instantiateFuncFromSpec(lFile.getFuncSpec());
+        is = FileLocalizer.open(currentFileName, offset, pc);
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (currentFileName.endsWith(&lt;span class=&quot;code-quote&quot;&gt;&quot;.bz&quot;&lt;/span&gt;) || currentFileName.endsWith(&lt;span class=&quot;code-quote&quot;&gt;&quot;.bz2&quot;&lt;/span&gt;)) {
+            is = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CBZip2InputStream((SeekableInputStream)is, 9);
+        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (currentFileName.endsWith(&lt;span class=&quot;code-quote&quot;&gt;&quot;.gz&quot;&lt;/span&gt;)) {
+            is = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GZIPInputStream(is);
+        }
+
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Isnt this blocked on &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-930&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-930&lt;/a&gt; ?&lt;/p&gt;

&lt;p&gt;5.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;code-comment&quot;&gt;// We don&apos;t deal with ERR/NULL. just pass them down
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; res;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; should be changed to                       &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;: 
    throwProcessingException(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;because if status is Error, execution should be stopped and exception should be thrown as early as possible instead of continue doing work which will be wasted. If status is Null NPE will occur while doing join.&lt;/p&gt;

&lt;p&gt;6.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
InputStream is = FileLocalizer.open(rightInputFileName, pc);
rightLoader.bindTo(rightInputFileName, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BufferedPositionedInputStream(is), 0, &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;.MAX_VALUE);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I dont see any use of this code. I think its not required and can be removed.&lt;/p&gt;

&lt;p&gt;Infact, there is no need of following function too:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    /**
     * @param rightInputFileName the rightInputFileName to set
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setRightInputFileName(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; rightInputFileName) {
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.rightInputFileName = rightInputFileName;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;file name of right side is obtained from index which is contained in index file. Index file is directly passed as a constructor argument of indexableLoadFunc, so there is no need of passing rightinputfilename from MRCompiler to POMergeJoin.&lt;br/&gt;
And if this reasoning is correct then DefaultIndexableLoader.bindTo() should throw an IOException, because contract on DefaultIndexableLoader is that it is initialized with all the info it needs in constructor and then seekNear is called on it to seek to correct location. bindTo() shouldn&apos;t be used for this loader. &lt;br/&gt;
Also, seekNear() doesn&apos;t sound right. How about seekToClosest() ? 	&lt;/p&gt;

&lt;p&gt;7. I think introducing order preserving flag on logical operator is a good idea. &lt;br/&gt;
First its self documenting as the information is contained within operator and not checked by doing instanceof else where in code. &lt;br/&gt;
Second its a useful information which if present can help make optimizer smart decisions. As an example, optimizer can rewrite a symmetric hash join to merge-sort join if all the logical operators in query DAG from join inputs to the root has these flags set to true. Without this flag, doing such optimizations will be hard.&lt;/p&gt;</comment>
                            <comment id="12754811" author="ashutoshc" created="Mon, 14 Sep 2009 03:34:14 +0100"  >&lt;p&gt;And couple more:&lt;br/&gt;
8.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Findbugs complains about passing internal members as is in getters since the caller can then modifiy these internal members - hence the copy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;&amp;gt; getAscColumns() {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Utils.getCopy(ascColumns);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead if we use following, we will achieve the same thing and then neither findbugs will complain, nor their is need for our own copy method.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;&amp;gt; getAscColumns() {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;&amp;gt;(ascColumns);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;9. In POMergeJoin.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-comment&quot;&gt;// we should never get here!
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Result(POStatus.STATUS_ERR, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;could be changed to&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-comment&quot;&gt;// we should never get here!
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ExecException(errMsg,2176);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;because if we ever get there, it will result in NPE later on otherwise.&lt;/p&gt;</comment>
                            <comment id="12758866" author="pkamath" created="Wed, 23 Sep 2009 21:32:58 +0100"  >&lt;p&gt;Attached new patch against latest trunk:&lt;/p&gt;

&lt;p&gt;Addressing the previous two comments:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Ashutosh&amp;#93;&lt;/span&gt; What about LinkedHashMap? It provides all the properties we are seeking here, one data structure, O(1) lookup and guaranteed iteration order.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;LinkedHashMap is also a good choice - I think this internal structure at this point does not need to&lt;br/&gt;
be optimized for lookup - hence leaving it as is&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;will result in NPE when both obj1 and obj2 are null.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Fixed the NPE in Utils.checkNullAndClass - good catch!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A minor detail: Suppose obj1 is declared of type ArrayList&amp;lt;Integer&amp;gt; and obj2 is declared of type ArrayList&amp;lt;String&amp;gt;, obj1.getClass() == obj2.getClass() will return true thanks to type erasure by java compiler at compile time. Not sure if thats OK or not for the check here. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You are right - however there is no way to work around type erasure - this is the best we can do.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does zebra requires columns to be named? If it doesn&apos;t then SortInfo could be changed in such a way that it can provide column position instead of names to loader, if columns arent named.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Zebra needs column names and cannot work with positions&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Isnt this blocked on &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-930&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-930&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;bz2 handling needs to be fixed but this code will be needed when it is fixed. This does not make things any&lt;br/&gt;
worse since bz2 is currently already broken&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;because if status is Error, execution should be stopped and exception should be thrown as early as possible instead of continue doing work which will be wasted. If status is Null NPE will occur while doing join.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Fixed to throw exception&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;there is no need of passing rightinputfilename from MRCompiler to POMergeJoin&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We do need these calls to tell Zebra the filename - you are right that pig&apos;s DefaultIndexableLoader&lt;br/&gt;
doesn&apos;t need these - but the code has to work with Zebra also.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, seekNear() doesn&apos;t sound right. How about seekToClosest() ? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I know seekNear() is vague and intentionally so - the hope is that users will read the javadoc comments&lt;br/&gt;
to know how to implement it - seekToClosest would be equally vague in my opinion &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think introducing order preserving flag on logical operator is a good idea. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think the order preserving flag idea should be addressed in a different jira as it&lt;br/&gt;
is orthogonal to this jira&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Instead if we use following, we will achieve the same thing and then neither findbugs will complain, nor their is need for our own copy method.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Fixed - removed Utils.getCopy&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In POMergeJoin.java&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// we should never get here!
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Result(POStatus.STATUS_ERR, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);

could be changed to

&lt;span class=&quot;code-comment&quot;&gt;// we should never get here!
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ExecException(errMsg,2176);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;p&gt;because if we ever get there, it will result in NPE later on otherwise.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The method has to return a Result. I think this will just be passed down the pipeline as an error&lt;br/&gt;
and should not result in an NPE going by the code in getNext():&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Result rightInp = getNextRightInp();
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(rightInp.returnStatus != POStatus.STATUS_OK){
                    prevRightInp = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
                    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; rightInp;
                }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Per a previous review comment, also changed Utils.checkNullEquals() to the following:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; checkNullEquals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; obj1, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; obj2, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; checkEquality) {                                                                                                                                               
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(obj1 == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || obj2 == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {                                                                                                                                                                                                 
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; obj1 == obj2;                                                                                                                                                                                                           
        }                                                                                                                                                                                                                                  
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(checkEquality) {                                                                                                                                                                                                                
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(!obj1.equals(obj2)) {                                                                                                                                                                                                       
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;                                                                                                                                                                                                              
            }                                                                                                                                                                                                                              
        }                                                                                                                                                                                                                                  
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;                                                                                                                                                                                                                       
    }    
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12760116" author="ashutoshc" created="Sun, 27 Sep 2009 23:15:44 +0100"  >&lt;p&gt;Changes look good. Couple of points:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think this internal structure at this point does not need to be optimized for lookup&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, its less about optimization and more about maintainability. First the relationship between two parallel arrays is implicit. So, if someone is reading that code he needs to &quot;understand&quot; that relationship of his own. If there is only one structure relationship would be explicit. Second, there is quite a bit of  code around it, which IMO will be simplified if a single data structure is instead used. That said, either approach works just as fine so I will leave it upto you. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Zebra needs column names and cannot work with positions&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is then the limitation of Zebra which it should overcome someone point in time. There might be a good reason for it, but I fail to see what extra information names of column provides where type and position of columns should be sufficient. This also implies an additional requirement on user. If data is stored using ZebraStorage and if later is loaded back, then user has to provide the same names for columns that he gave while storing it. No such constraint exists for any other load-store like PigStorage.&lt;/p&gt;</comment>
                            <comment id="12760423" author="pkamath" created="Mon, 28 Sep 2009 23:47:19 +0100"  >&lt;p&gt;Here is a proposal for dealing with Sort Column information in SortInfo. Rather than giving Arraylist of column names and separate array list of asc/desc flags, it would be good to have a unified structure containing both pieces of information per sort column. Also there are use cases for providing column names (zebra) and for them being optional and providing column positions instead which some other loader /optimizer might find useful. The type of the column might also be useful if available. Hence, the proposal is to have a SortColumn class with the following attributes : column name, column position (zero based index), column type, asc/desc flag. Then in SortInfo there would be a List&amp;lt;SortColumn&amp;gt; which would be available through a getter. This should address both the concerns above. Callers will need to explicity check for null column names and UNKNOWN column type since these two scenarios may occur if schema is not available for pig runtime to provide the information.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12760657" author="dvryaboy" created="Tue, 29 Sep 2009 18:43:40 +0100"  >&lt;p&gt;Pradeep,&lt;br/&gt;
Have you looked at Alan&apos;s Load/Store redesign proposal? It has a structure very similar to the one you are describing, used to describe the schema of the loaded resource.&lt;br/&gt;
I think it makes sense to use that structure throughout, not just at Load time; it could effectively replace SortColumn/SortInfo.&lt;/p&gt;
</comment>
                            <comment id="12760710" author="pkamath" created="Tue, 29 Sep 2009 22:12:43 +0100"  >&lt;p&gt;Dmitriy,&lt;br/&gt;
  I looked at the ResourceSchema proposed in &lt;a href=&quot;http://wiki.apache.org/pig/LoadStoreRedesignProposal&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/LoadStoreRedesignProposal&lt;/a&gt; and also spoke with Alan to understand the intent more. The eventual goal is for the setSchema() call in StoreFunc to give the ResourceSchema to the store implementation. The ResourceSchema will contain both pig schema information and sort column information. So Zebra or any other storage function which needs to know about sort columns will get the information from the ResourceSchema passed in setSchema().&lt;/p&gt;

&lt;p&gt;However, today there is a way pig runtime conveys the pig schema to store functions (through StoreConfig). We need a separate way to give sort information since pig schema does not have the ability to give it. Since after the rewrite of load/store interfaces this problem will be solved through setSchema(), the solution which we will come up with now in this jira will anyway need to be re-written. So it is cleaner to only keep sort column information in SortColInfo and have an array of SortColInfo in SortInfo. If instead we use ResourceSchema then StoreConfig will have a pig Schema and a Resource Schema which would also be confusing to callers. &lt;/p&gt;

&lt;p&gt;In short, since this piece code of code will need a re-write later, it is better not to make it generic now and just address immediate needs and the re-write should remove multiple representations of schema/sort information.&lt;/p&gt;</comment>
                            <comment id="12760785" author="dvryaboy" created="Wed, 30 Sep 2009 01:18:25 +0100"  >&lt;p&gt;Pradeep,&lt;/p&gt;

&lt;p&gt;I think that the current PigSchema can extend or contain a ResourceSchema (probably the latter as Alan indicated that PigSchema does too many other things to be considered equivalent to a ResourceSchema).  &lt;/p&gt;

&lt;p&gt;Agreed that this rework is not required to get this patch in; I&apos;m ok with the patch as it stands as long as we remember to go back and fix the duplicated functionality later when the Load/Store redesign is implemented.&lt;/p&gt;</comment>
                            <comment id="12760837" author="ashutoshc" created="Wed, 30 Sep 2009 06:13:03 +0100"  >&lt;p&gt;If we are going to re-write that part later then I guess it may not be worth spending more time perfecting the design here (using SortColInfo instead of parallel arraylists)... patch as it is can be committed because we are going to update that part of the code in any case .. &lt;/p&gt;</comment>
                            <comment id="12761760" author="pkamath" created="Fri, 2 Oct 2009 23:30:19 +0100"  >&lt;p&gt;Attached patch which has the SortColInfo implementation to convey sort column information in SortInfo. This patch also address &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-981&quot; title=&quot;Merge join should restrict join key expressions to simple projects&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-981&quot;&gt;&lt;del&gt;PIG-981&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12763218" author="ashutoshc" created="Wed, 7 Oct 2009 20:45:28 +0100"  >&lt;p&gt;Changes look good. One comment I have:&lt;/p&gt;

&lt;p&gt;1) In SortInfo.java#equals&lt;br/&gt;
We have two lists and we want to check for their equality. I quickly looked up jdk sources and it seems that ArrayList doesn&apos;t override equals, so doing equals check on lists would result in reference equality test which would be incorrect. Correct way to do this would be to first check the sizes of two lists, if they are equal iterate through both lists and check equality of items at the same index in two list.  &lt;/p&gt;

&lt;p&gt;Few nits:&lt;br/&gt;
1) TestMergeJoin contains a System.err.println which we can get rid of.&lt;br/&gt;
2) There are few unused imports in patch.&lt;br/&gt;
3) SortInfo.java#getSortColInfoList may result in Findbugs warning because of similar reason we discussed earlier in this jira. &lt;/p&gt;</comment>
                            <comment id="12763256" author="ashutoshc" created="Wed, 7 Oct 2009 21:42:10 +0100"  >&lt;p&gt;..aah.. I should have had dug more in jdk sources. AbstractList , which ArrayList extends does override equals and provides correct behavior. So, my comment is a non-issue. With nits taken care of +1 for the patch.&lt;/p&gt;</comment>
                            <comment id="12763318" author="pkamath" created="Thu, 8 Oct 2009 01:31:18 +0100"  >&lt;p&gt;Thanks for the review Ashutosh - updated patch which addresses the concerns.&lt;/p&gt;</comment>
                            <comment id="12766361" author="pkamath" created="Fri, 16 Oct 2009 02:04:00 +0100"  >&lt;p&gt;Zebra needs a global commit method to be able to build an index on the sorted zebra file. Attaching a new patch which introduces a CommittableStoreFunc interfce with a commit() method which extends StoreFunc. Zebra store function will extend this interface and pig will call the commit() method on the CommittableStoreFunc at the completion of the job. While this is not ideal and we could add commit() into StoreFunc itself, it would break existing store functions. Also very soon, if changes in &lt;a href=&quot;http://wiki.apache.org/pig/LoadStoreRedesignProposal&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/LoadStoreRedesignProposal&lt;/a&gt; are implemented, this would change anyway - so this new interface is being introduced so that till we move to the new interface changes recommended in the wiki we don&apos;t break existing store functions.&lt;/p&gt;</comment>
                            <comment id="12766622" author="dvryaboy" created="Fri, 16 Oct 2009 18:38:25 +0100"  >&lt;p&gt;Pradeep, it seems like PigOutputCommiter should extend OutputCommitter rather than FileOutputCommitter. &lt;br/&gt;
Also &amp;#8211; add this requirement to the StoreFunc redesign proposal?&lt;/p&gt;
</comment>
                            <comment id="12766642" author="pkamath" created="Fri, 16 Oct 2009 19:31:06 +0100"  >&lt;p&gt;Dmitriy - by default when the application does not set an OutputCommitter, hadoop uses FileOutputCommitter. So currently (in trunk code) since pig does not set an OuptuCommitter, hadoop would be using FileOutputCommitter. Hence I derived from FileOutputCommitter so that the current cleanup continues to happen and we do the extra commit needed by Zebra.&lt;/p&gt;

&lt;p&gt;The new load-store redesign already has an allFinished() method in storeFunc which is the same as this commit except it does not have the Configuration - I have modified it to have the Configuration parameter.&lt;/p&gt;

&lt;p&gt;It turns out zebra needs the job configuration in order to open the right side file during merge join. Hence I am introducing an initialize(Configuration conf) method into the IndexableLoadFunc interface in the attached patch so that the pig runtime can call it allowing zebra to store this configuration for use in opening the right side file later.&lt;/p&gt;</comment>
                            <comment id="12766656" author="pkamath" created="Fri, 16 Oct 2009 19:49:03 +0100"  >&lt;p&gt;I missed allowing an IOException to be thrown in commit() in CommittableStoreFunc and initialize() in IndexableLoadFunc in my previous patch - attaching new version with just that change.&lt;/p&gt;</comment>
                            <comment id="12770749" author="pkamath" created="Wed, 28 Oct 2009 01:50:16 +0000"  >&lt;p&gt;Fixed commit() code in PigOutputCommitter in multi store case to correctly set up the StoreConfig and StoreFunc in the Conf before calling commit() on the storefunc.&lt;/p&gt;</comment>
                            <comment id="12771136" author="hadoopqa" created="Wed, 28 Oct 2009 21:59:40 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12423385/PIG-953-8.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12423385/PIG-953-8.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 830664.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 202 javac compiler warnings (more than the trunk&apos;s current 197 warnings).&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 5 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 320 release audit warnings (more than the trunk&apos;s current 313 warnings).&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/123/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/123/testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/123/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/123/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/123/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/123/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/123/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/123/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12771188" author="olgan" created="Wed, 28 Oct 2009 23:17:23 +0000"  >&lt;p&gt;+1 on the patch assuming that the all the failures and warning from test-patch are addressed.&lt;/p&gt;</comment>
                            <comment id="12771297" author="pkamath" created="Thu, 29 Oct 2009 05:22:35 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;New patch addresses all javadoc, unit test and findbugs issues.&lt;/li&gt;
	&lt;li&gt;The release audit warnings are unrelated issues relating to html files and not code related.&lt;/li&gt;
	&lt;li&gt;I tried supressing deprecated related javac warning in code but looks like there is an existing javac &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6594914&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;bug&lt;/a&gt; - so there is no way I am aware of to supress this in code and we may need to live with these warnings till we move to the new hadoop api&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12771491" author="pkamath" created="Thu, 29 Oct 2009 17:29:07 +0000"  >&lt;p&gt;I ran the test-patch process and junit tests on my local machine since the hudson queue was backed up. Here are results - I have explained the reason for the javac warnings and release audit warnings in my previous comment. &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;test-patch results
====================
....
    [exec] -1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 6 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     -1 javac.  The applied patch generated 200 javac compiler warnings (more than the trunk&apos;s current 197 warnings).
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     -1 release audit.  The applied patch generated 298 release audit warnings (more than the trunk&apos;s current 291 warnings).
     [exec]
    
core unit test results
======================
...
    [junit] Running org.apache.pig.test.TestUnion
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 44.03 sec

test-contrib:

BUILD SUCCESSFUL
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Patch committed to trunk&lt;/p&gt;</comment>
                            <comment id="12834114" author="dvryaboy" created="Tue, 16 Feb 2010 07:41:50 +0000"  >&lt;p&gt;The attached diff was applied to svn but not posted to the jira. Combine it with patch-9 to get the full patch.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12436784">PIG-981</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12420401" name="PIG-953-2.patch" size="73548" author="pkamath" created="Wed, 23 Sep 2009 21:32:58 +0100"/>
                            <attachment id="12421165" name="PIG-953-3.patch" size="88332" author="pkamath" created="Fri, 2 Oct 2009 23:30:19 +0100"/>
                            <attachment id="12421594" name="PIG-953-4.patch" size="88575" author="pkamath" created="Thu, 8 Oct 2009 01:31:18 +0100"/>
                            <attachment id="12422311" name="PIG-953-5.patch" size="97048" author="pkamath" created="Fri, 16 Oct 2009 02:04:00 +0100"/>
                            <attachment id="12422382" name="PIG-953-6.patch" size="97679" author="pkamath" created="Fri, 16 Oct 2009 19:31:06 +0100"/>
                            <attachment id="12422390" name="PIG-953-7.patch" size="97804" author="pkamath" created="Fri, 16 Oct 2009 19:49:03 +0100"/>
                            <attachment id="12423385" name="PIG-953-8.patch" size="99927" author="pkamath" created="Wed, 28 Oct 2009 02:11:30 +0000"/>
                            <attachment id="12423540" name="PIG-953-9.patch" size="102204" author="pkamath" created="Thu, 29 Oct 2009 05:22:34 +0000"/>
                            <attachment id="12419208" name="PIG-953.patch" size="73631" author="pkamath" created="Thu, 10 Sep 2009 19:55:28 +0100"/>
                            <attachment id="12435951" name="PIG-953_missing_files.diff" size="38088" author="dvryaboy" created="Tue, 16 Feb 2010 07:41:50 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 10 Sep 2009 20:27:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164492</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyakun:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>95689</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>