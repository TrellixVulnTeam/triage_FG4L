<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:03:09 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-965/PIG-965.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-965] PERFORMANCE: optimize common case in matches (PORegex)</title>
                <link>https://issues.apache.org/jira/browse/PIG-965</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Some frequently seen use cases of &apos;matches&apos; comparison operator have follow properties -&lt;br/&gt;
1. The rhs is a constant string . eg &quot;c1 matches &apos;abc%&apos; &quot;&lt;br/&gt;
2. Regexes such that look for matching prefix , suffix etc are very common. eg - &quot;abc%&apos;, &quot;%abc&quot;, &apos;%abc%&apos; &lt;/p&gt;

&lt;p&gt;To optimize for these common cases , PORegex.java can be changed to -&lt;br/&gt;
1. Compile the pattern (rhs of matches) re-use it if the pattern string has not changed. &lt;br/&gt;
2. Use string comparisons for simple common regexes (in 2 above).&lt;/p&gt;

&lt;p&gt;The implementation of Hive like clause uses similar optimizations.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12435981">PIG-965</key>
            <summary>PERFORMANCE: optimize common case in matches (PORegex)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ankit.modi">Ankit Modi</assignee>
                                    <reporter username="thejas">Thejas M Nair</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Sep 2009 19:09:54 +0100</created>
                <updated>Fri, 17 Dec 2010 22:43:15 +0000</updated>
                            <resolved>Fri, 13 Aug 2010 21:40:04 +0100</resolved>
                                                    <fixVersion>0.8.0</fixVersion>
                                    <component>impl</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12756673" author="thejas" created="Thu, 17 Sep 2009 19:18:37 +0100"  >&lt;p&gt;Hive like clause implementation is here - &lt;a href=&quot;http://svn.apache.org/viewvc/hadoop/hive/trunk/ql/src/java/org/apache/hadoop&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/hadoop/hive/trunk/ql/src/java/org/apache/hadoop&lt;/a&gt;&lt;br/&gt;
/hive/ql/udf/UDFLike.java?revision=802066&amp;amp;view=markup&lt;/p&gt;

&lt;p&gt;I ran simple tests with a simple java program to see the impact of these optimizations. Optimization 1 reduces runtime to 1/2, optimization 2 reduces runtime to 1/4 . &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; matches =0;
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; tot = 0;
        &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; prefix = &lt;span class=&quot;code-quote&quot;&gt;&quot;123&quot;&lt;/span&gt;;
        Pattern p =  Pattern.compile(&lt;span class=&quot;code-quote&quot;&gt;&quot;123.*&quot;&lt;/span&gt;);
        &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;((str = in.readLine()) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ){



            &lt;span class=&quot;code-comment&quot;&gt;//without proposed optimizations
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;//test setups 1 and 2 took 9secs, 126 secs respectively
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(str.matches(&lt;span class=&quot;code-quote&quot;&gt;&quot;123.*&quot;&lt;/span&gt;))
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                matches++;
&lt;/span&gt;


            &lt;span class=&quot;code-comment&quot;&gt;// with optimization 1
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            test sestups 1, 2 took  4, 57 secs respectively
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;((p.matcher(str).matches()))
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                matches++;
&lt;/span&gt;            

            &lt;span class=&quot;code-comment&quot;&gt;// with optimization 1
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            test sestups 1, 2 took  2.5, 25 secs respectively
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;//takes 2.5, 25 secs
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len = prefix.length();
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; matched = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;len; i++){
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(prefix.charAt(i) != str.charAt(i)){
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                    matched = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                    &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                }
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            }
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(matched)
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                matches++;
&lt;/span&gt;
            tot++;
        }
       }
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;matches &quot;&lt;/span&gt; + matches + &lt;span class=&quot;code-quote&quot;&gt;&quot; tot &quot;&lt;/span&gt; + tot);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12757242" author="thejas" created="Fri, 18 Sep 2009 17:30:11 +0100"  >&lt;p&gt;The &apos;common&apos; use case to which these optimization apply usually has a constant string specifying the pattern. It makes sense to use this optimization only (specifically optimization 2) in such cases, so that the worst case is not worse off.&lt;/p&gt;

&lt;p&gt;Another thing to check is if there are alternative faster regex implementations .&lt;/p&gt;</comment>
                            <comment id="12766985" author="thejas" created="Sun, 18 Oct 2009 00:55:54 +0100"  >&lt;p&gt;I found another regex library that is supposed to be faster than java.util.regex . - dk.brics.automaton.RegExp (BSD license, used in apache nutch).  It does not support all features of java regex, but it is a candidate that can be used for purposes of this patch (common simpler regexes).&lt;/p&gt;

&lt;p&gt;It is faster than java regex, but much slower than &apos;optimization2&apos; (see numbers in code comments below)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; prefix = &lt;span class=&quot;code-quote&quot;&gt;&quot;123&quot;&lt;/span&gt;;
        Pattern p =  Pattern.compile(&lt;span class=&quot;code-quote&quot;&gt;&quot;123.*&quot;&lt;/span&gt;);
        RegExp r = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RegExp(&lt;span class=&quot;code-quote&quot;&gt;&quot;123.*&quot;&lt;/span&gt;);
        Automaton a = r.toAutomaton();

        &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;((str = in.readLine()) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ){
            
          &lt;span class=&quot;code-comment&quot;&gt;// optimization 1 - takes 30 secs
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;((p.matcher(str).matches()))
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                matches++;
&lt;/span&gt;            

            &lt;span class=&quot;code-comment&quot;&gt;//optimization 2 - takes 15 secs
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len = prefix.length();
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; matched = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;len; i++){
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(prefix.charAt(i) != str.charAt(i)){
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                    matched = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                    &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                }
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            }
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(matched)
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                matches++;
&lt;/span&gt;
            &lt;span class=&quot;code-comment&quot;&gt;// dk.brics.automaton - takes 25 secs
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(a.run(str))
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//                matches++;
&lt;/span&gt;
            tot++;
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12784596" author="ankit.modi" created="Wed, 2 Dec 2009 02:48:00 +0000"  >&lt;p&gt;I implemented a patch with optimization 1 and 2 mentioned above and another patch with optimization 1,2 and dk.brics.automaton.&lt;/p&gt;

&lt;p&gt;dk.brics.automaton does not support all features of java.util.regex hence the second patch considers that and switches to java.util.regex if the regex can only be handled by java.util.regex.&lt;/p&gt;

&lt;p&gt;Here are the numbers&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Regex&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;	svn_trunk	&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Optimization 1 and 2&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;	dk.brics.automaton&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; comments &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; .&amp;#42;ABCD.&amp;#42;	 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 92.74 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 50.92	&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 49.32 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Here only optimization 2 is used &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; .&amp;#42;&lt;span class=&quot;error&quot;&gt;&amp;#91;A-F&amp;#93;&lt;/span&gt;
{2,3}
&lt;p&gt;.&amp;#42;	&lt;/p&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;152.3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	133.48&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	105.93 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; dk.brics.automaton is used &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; A.B.C.D &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 54.492 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 44.46 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 44.66 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; dk.brics.automaton is used &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;   .&amp;#42;(&lt;span class=&quot;error&quot;&gt;&amp;#91;A-F&amp;#93;&lt;/span&gt;
{4}
&lt;p&gt;)\w&amp;#42;\1.&amp;#42; &lt;/p&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 129.29 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 112.89 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 109.43 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; java.util.regex used in all cases &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;   .&amp;#42;[A-F]{4}\w&amp;#42;&lt;span class=&quot;error&quot;&gt;&amp;#91;N-Z&amp;#93;&lt;/span&gt;{3}.&amp;#42; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 129.63 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 108.11 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 54.42 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; dk.brics.automaton used &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;These results were obtained using Local Mode on 1 Billion lines of data of following format&lt;br/&gt;
f1:Chararray(100) of random chars from &lt;span class=&quot;error&quot;&gt;&amp;#91;A-Z&amp;#93;&lt;/span&gt;&lt;br/&gt;
f2:int random integer&lt;/p&gt;

&lt;p&gt;dk.brics.automaton provides good performance in case of complex regex. &lt;/p&gt;</comment>
                            <comment id="12784849" author="thejas" created="Wed, 2 Dec 2009 14:34:13 +0000"  >&lt;p&gt;In the above performance numbers, I assume optimization 2 (custom string comparison) is used only for the regex &quot;.&lt;b&gt;ABCD.&lt;/b&gt;&quot; , while optimization 1 (re-using compiled pattern) is used with dk.brics.automaton as well. Can you please confirm ?&lt;/p&gt;

&lt;p&gt;From the performance numbers, it looks like we don&apos;t need to do optimization 2. We can just use dk.brics.automaton for the common regexes as well and keep the pig code simpler.&lt;/p&gt;
</comment>
                            <comment id="12784854" author="thejas" created="Wed, 2 Dec 2009 14:45:44 +0000"  >&lt;p&gt;Never mind the question above, I notice that you have mentioned that the second patch has &quot;optimization 1,2 and dk.brics.automaton&quot;.&lt;/p&gt;
</comment>
                            <comment id="12787350" author="ankit.modi" created="Tue, 8 Dec 2009 07:02:53 +0000"  >&lt;p&gt;These are patches for two implementations &lt;/p&gt;

&lt;p&gt;One (poregex.patch) is an implementation applying optimization mentioned above in the JIRA.&lt;br/&gt;
Second (poregex2.patch) implementation applies optimization 1 and uses dk.brics.automaton for running simple regular expressions. Otherwise it reverts back to java.util.regex.&lt;/p&gt;

&lt;p&gt;In 1 the decision to use optimization two or use java.util.regex is decided by getSimpleString method&lt;/p&gt;

&lt;p&gt;In 2 the decision to use dk.brics.automaton is done by determineBestRegexMethod. ( changes to build.xml is this patch are temporary )&lt;/p&gt;

&lt;p&gt;Both patches use RegexInit as an implementation which makes a decision ( calling the above mentioned  decision functions ) and then sets the implementation to one decided by the decision function.&lt;/p&gt;

&lt;p&gt;In second patch, the decision function was created looking at the support of operators in dk.brics.automaton and its grammar. I tried out the classes supported and not supported in dk.brics.automaton and decided upon it.&lt;/p&gt;

&lt;p&gt;I could not find any specific page mentioning the difference between regex language java.util.regex and dk.brics.automaton.&lt;/p&gt;</comment>
                            <comment id="12788685" author="ankit.modi" created="Thu, 10 Dec 2009 11:40:49 +0000"  >&lt;p&gt;Attaching one more file of patch. This one has all the changes, except changes to build.xml. Still trying to find a maven repo for dk.brics.automaton.&lt;/p&gt;</comment>
                            <comment id="12789203" author="ankit.modi" created="Fri, 11 Dec 2009 10:07:51 +0000"  >&lt;p&gt;New patch with removed comments and added automaton.jar from &lt;a href=&quot;http://www.brics.dk/~amoeller/automaton/automaton.jar&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.brics.dk/~amoeller/automaton/automaton.jar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It fails findBugs due to missing symbols. I ran the findBugs after adding the jar to the build and it did not complain about any findBugs in the modified and added files.&lt;/p&gt;</comment>
                            <comment id="12789281" author="ankit.modi" created="Fri, 11 Dec 2009 12:37:26 +0000"  >&lt;p&gt;One small change to JarManager.java is missing. Will add a new patch with it.&lt;/p&gt;</comment>
                            <comment id="12789380" author="hadoopqa" created="Fri, 11 Dec 2009 16:41:37 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12427730/automaton.jar&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12427730/automaton.jar&lt;/a&gt;&lt;br/&gt;
  against trunk revision 889346.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no tests are needed for this patch.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/117/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/117/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12789668" author="thejas" created="Sat, 12 Dec 2009 03:37:14 +0000"  >&lt;p&gt;Review comments: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The regex will always be on the rhs. So we don&apos;t need the code/classes which tries to determine which side has the regular expression based on which side has constant.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;in determineBestRegexMethod,  need to add &quot;(?&quot; to the list of regex strings not supported in dk.bricks (in javaRegexOnly) . It has special meanings in java regex, which is not honored by dk.brics .&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;in determineBestRegexMethod,  We are dealing with cases like &quot;\d&quot; (choose java regex), &quot;&lt;br class=&quot;atl-forced-newline&quot; /&gt;d&quot; (choose dk.brics), but not dealing with &quot;\\\d&quot; (which should be choose java regex). ie we need to go back until we find a non &apos;\&apos; char.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;in RegexInit.compile(..), the following message is more appropriate at debug level, not at info . At info level, it might also confuse the user.&lt;br/&gt;
+                log.info(&quot;Got an IllegalArgumentException for Pattern: &quot; + pattern );&lt;br/&gt;
+                log.info(e.getMessage());&lt;br/&gt;
+                log.info(&quot;Switching to java.util.regex&quot; );&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The following comment in PORegex.java seems to be out of place .&lt;br/&gt;
 // This is a BinaryComparisonOperator hence there can only be two inputs&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12790083" author="ankit.modi" created="Mon, 14 Dec 2009 10:36:21 +0000"  >&lt;p&gt;I have included changes suggested by Thejas.&lt;/p&gt;</comment>
                            <comment id="12790104" author="hadoopqa" created="Mon, 14 Dec 2009 11:23:52 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12427913/poregex2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12427913/poregex2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 889870.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/121/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/121/testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/121/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/121/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12790492" author="thejas" created="Tue, 15 Dec 2009 00:43:03 +0000"  >&lt;p&gt;Reviewed the latest patch.&lt;br/&gt;
Comments :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;RegexInit.java, in determineBestRegexMethod Line 85 - 120&lt;br/&gt;
There are while loops where we are testing only for preceding &apos;\&apos;&lt;br/&gt;
The handling of preceding escapes could be done in a separate function, since the logic is used at multiple places&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;RegexInit.java lines 61,147&lt;br/&gt;
// This is the case when an old number of escapes         &lt;br/&gt;
I believe you meant &quot;odd&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;RegexImpl.java - following comments are not relevant anymore&lt;br/&gt;
+// LHSXXXX means LHS is constantExpression and RHS varies with each Tuple&lt;br/&gt;
+// RHSXXXX means RHS is constantExpression and LHS varies with each Tuple&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;NonConstantRegex , line 34-35
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
|| rhs.length() != oldString.length()
|| rhs.compareTo(oldString) != 0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;could be simplified as -&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
|| !rhs.equals(oldString)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Did you chose the former because it might be faster ? That can be the case in this situation, because equals has a additional check of - &quot;instanceOf String&quot; .  So I think the existing code is fine. A comment there might be useful.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Can you also publish your numbers for the comparison of dk.brics.automaton.RunAutomaton and optimization 2 (Use string comparisons for simple common regexes ) in the jira ?&lt;/p&gt;
</comment>
                            <comment id="12790545" author="ankit.modi" created="Tue, 15 Dec 2009 03:37:06 +0000"  >&lt;ul&gt;
	&lt;li&gt;NonConstantRegex - I did not think of equals. But I added a length check before as it could find out change in length faster and to best of my knowledge its a getMethod. And yes as you mentioned equals will check for same object and instanceOf which is not useful in our case.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The numbers published above are using dk.brics.automaton.RunAutomaton. Do you want me to publish numbers for more set of regexs ?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll create a patch for rest of the comments.&lt;/p&gt;</comment>
                            <comment id="12790928" author="thejas" created="Tue, 15 Dec 2009 20:07:39 +0000"  >&lt;p&gt;The new patch does not address the following comment -&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;RegexInit.java, in determineBestRegexMethod Line 85 - 120&lt;br/&gt;
There are while loops where we are testing only for preceding &apos;\&apos;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For example -&lt;br/&gt;
$&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( index != 0 ) {
                &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;( pattern.charAt(index -1 ) == &apos;\\&apos; ) {
                    index = pattern.indexOf(&apos;[&apos;);
                }

$&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Should be -&lt;/p&gt;

&lt;p&gt;$&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( index != 0 ) {
                &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;( isCharEscaped(pattern,index) ) {
                    index = pattern.indexOf(&apos;[&apos;);
                }
$&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are 3 such while loops between lines 68-96 (in new patch) that needs to be fixed.&lt;/p&gt;


&lt;ul&gt;
	&lt;li&gt;The indentation in RegexInit.isCharEscaped needs to be fixed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Everything else looks good.&lt;/p&gt;</comment>
                            <comment id="12791096" author="ankit.modi" created="Wed, 16 Dec 2009 00:47:26 +0000"  >&lt;p&gt;Here are numbers comparing comparing optimization 1&amp;amp;2 against optimization 1 &amp;amp; dk.brics&lt;/p&gt;

&lt;p&gt;dk.brics.Runautomaton is as fast as optimization 2 and also provides similar speeds in a set of additional expressions.&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Query &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; svn_trunk &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; std_dev &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Optimization 1 &amp;amp; 2 &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; std_dev &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Optimization 1 &amp;amp; brics.RunAutomaton &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; std_dev &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; .&amp;#42;ABCD.&amp;#42; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  33.87 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  0.71 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 18.77 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0.71 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 18.94 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0.02 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; .&amp;#42;ABCD &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 30.06 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 2.91 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 18.44 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0.05 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 18.94 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0.03 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ABCD.&amp;#42; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  21.93 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 2.91 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 18.35 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0.1 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 18.85 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0.04 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Values are averaged over 3 runs.&lt;/p&gt;</comment>
                            <comment id="12791225" author="hadoopqa" created="Wed, 16 Dec 2009 06:16:56 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12428066/poregex2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12428066/poregex2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 890596.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/127/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/127/testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/127/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/127/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12791443" author="ankit.modi" created="Wed, 16 Dec 2009 16:38:46 +0000"  >&lt;p&gt;Rewrote some logic in case 1 and 3 of determineBestRegex. Also found a bug in case1 so updated that.&lt;/p&gt;

&lt;p&gt;Added Thejas&apos;s recommendation.&lt;/p&gt;

&lt;p&gt;Also added a few unit test patterns.&lt;/p&gt;</comment>
                            <comment id="12791481" author="hadoopqa" created="Wed, 16 Dec 2009 17:51:19 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12428184/poregex2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12428184/poregex2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 890596.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/130/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/130/testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/130/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/130/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12791561" author="thejas" created="Wed, 16 Dec 2009 20:04:14 +0000"  >&lt;p&gt;+1 . new patch looks good &lt;br/&gt;
Hudson findbugs and core-tests will fail because it does not include the attached jar while compiling.&lt;/p&gt;</comment>
                            <comment id="12791668" author="olgan" created="Wed, 16 Dec 2009 23:14:38 +0000"  >&lt;p&gt;Thanks, Thejas. I will run test-commit tests manually and commit if it passes.&lt;/p&gt;</comment>
                            <comment id="12791683" author="olgan" created="Wed, 16 Dec 2009 23:51:06 +0000"  >&lt;p&gt;patch committed. Thanks Ankit for contributing and Thejas for reviewing!&lt;/p&gt;</comment>
                            <comment id="12834586" author="ankit.modi" created="Wed, 17 Feb 2010 01:12:44 +0000"  >&lt;p&gt;I couldn&apos;t see the poregex2.patch patch applied in the code.&lt;/p&gt;

&lt;p&gt;automaton.jar is present in the trunk, but the files modified/added by above patch are not modified/added.&lt;/p&gt;</comment>
                            <comment id="12897384" author="thejas" created="Wed, 11 Aug 2010 19:52:05 +0100"  >&lt;p&gt;Ankit is right, the patch is not present in trunk. I will apply it to trunk.&lt;/p&gt;</comment>
                            <comment id="12898412" author="thejas" created="Fri, 13 Aug 2010 21:40:04 +0100"  >&lt;p&gt;Committed to trunk.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12493454">PIG-1770</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12427730" name="automaton.jar" size="171596" author="ankit.modi" created="Fri, 11 Dec 2009 15:11:25 +0000"/>
                            <attachment id="12428211" name="poregex2.patch" size="33694" author="ankit.modi" created="Wed, 16 Dec 2009 19:36:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 2 Dec 2009 02:48:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164504</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyakyn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>95707</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>