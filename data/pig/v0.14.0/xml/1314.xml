<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:02:21 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1314/PIG-1314.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1314] Add DateTime Support to Pig</title>
                <link>https://issues.apache.org/jira/browse/PIG-1314</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Hadoop/Pig are primarily used to parse log data, and most logs have a timestamp component.  Therefore Pig should support dates as a primitive.&lt;/p&gt;

&lt;p&gt;Can someone familiar with adding types to pig comment on how hard this is?  We&apos;re looking at doing this, rather than use UDFs.  Is this a patch that would be accepted?&lt;/p&gt;

&lt;p&gt;This is a candidate project for Google summer of code 2012. More information about the program can be found at &lt;a href=&quot;https://cwiki.apache.org/confluence/display/PIG/GSoc2012&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/PIG/GSoc2012&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12459893">PIG-1314</key>
            <summary>Add DateTime Support to Pig</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="zjshen">Zhijie Shen</assignee>
                                    <reporter username="russell.jurney">Russell Jurney</reporter>
                        <labels>
                            <label>gsoc2012</label>
                    </labels>
                <created>Mon, 22 Mar 2010 18:27:28 +0000</created>
                <updated>Fri, 22 Feb 2013 04:53:50 +0000</updated>
                            <resolved>Tue, 16 Oct 2012 00:20:28 +0100</resolved>
                                    <version>0.7.0</version>
                                    <fixVersion>0.11</fixVersion>
                                    <component>data</component>
                        <due></due>
                            <votes>6</votes>
                                    <watches>16</watches>
                                    <timeoriginalestimate seconds="2419200">672h</timeoriginalestimate>
                            <timeestimate seconds="2419200">672h</timeestimate>
                                                    <aggregatetimeoriginalestimate seconds="2419200">672h</aggregatetimeoriginalestimate>
                                        <aggregatetimeremainingestimate seconds="2419200">672h</aggregatetimeremainingestimate>
                                                <comments>
                            <comment id="12848285" author="alangates" created="Mon, 22 Mar 2010 19:02:09 +0000"  >&lt;p&gt;Major +1.  Adding DateTime as a Pig primitive is definitely a good idea.  It&apos;s on our list of things to do (&lt;a href=&quot;http://wiki.apache.org/pig/PigJournal&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/PigJournal&lt;/a&gt;).  A brief overview of the work to be done:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Add support in parser, both for declaring an input to be of type datetime and datetime constants&lt;/li&gt;
	&lt;li&gt;Add support in TypeChecker for datetime types, including any allowed type promotions (ie implicit casts)&lt;/li&gt;
	&lt;li&gt;Change LoadCaster interface to include bytesToDateTime method, add method to default implementation&lt;/li&gt;
	&lt;li&gt;Determerine which builtin UDFs that we want for datetime and get agreement from community.  Implement these UDFs.&lt;/li&gt;
	&lt;li&gt;Implement any allowed cast operators for datetime (probably just string &amp;lt;-&amp;gt; datetime).&lt;/li&gt;
	&lt;li&gt;Implement datetime class represents datetime in memory.  This needs to implement WritableComparable so that it can be serialized and compared in Hadoop&lt;/li&gt;
	&lt;li&gt;Implement raw comparator for the type so it can be used as a key in groups bys and joins.&lt;/li&gt;
	&lt;li&gt;Change physical operators and builtin UDFs to handle processing of datetime types.&lt;/li&gt;
	&lt;li&gt;Change data conversion and type discovery routines in DataType&lt;/li&gt;
	&lt;li&gt;And, of course, add prolific tests&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The other question is backward compatibility.  I can think of only two backward incompatible changes&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Addition of bytesToDateTime in the LoadCaster interface.  Given that this will only require a change if people recompile their implementation, and AFAIK there are no implementations of LoadCaster before our default implementation, I think this is ok.&lt;/li&gt;
	&lt;li&gt;Changes to Pig Latin to specify a field as of type date, plus however we denote datetime strings.  We need to make these as unobtrusive as possible, but again I think it will be ok, though we&apos;ll need to get community buy in on it.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Would such a patch be accepted?  If it&apos;s of good quality deals with backward compatibility concerns, certainly.  In time for 0.8, I don&apos;t know.  We try to do a release every three months, with a feature cut off about a month before release (give or take).  Branching and feature cutoff for 0.7 is today, so branching and features cut off for 0.8 will probably be in June.  &lt;/p&gt;

&lt;p&gt;If you want to pursue this, the first step should be a brief design that says how you&apos;ll go about doing it.  It should cover things like which date format will you use (SQL, something else)?  Which date function do you think should be built in?  How to you plan to store this type in memory?  Are there existing datetime libraries you can leverage or incorporate to avoid rebuilding the wheel?  It&apos;s easiest to write up the design on Pig&apos;s wiki and then link to it on this bug.  This will give users and developers a chance to review your thoughts and give feedback.&lt;/p&gt;</comment>
                            <comment id="12848356" author="rjurney" created="Mon, 22 Mar 2010 21:31:01 +0000"  >&lt;p&gt;Thanks, Alan.  That is quite helpful.  Let me look into it and see about feasibility.  &lt;/p&gt;

&lt;p&gt;What about durations as well?  &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601#Durations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/ISO_8601#Durations&lt;/a&gt; ISO8601 durations would be very handy in enabling use of pig operators on datetimes via +/-, etc.  This might be something to do later, though.&lt;/p&gt;</comment>
                            <comment id="12848422" author="alangates" created="Mon, 22 Mar 2010 22:59:01 +0000"  >&lt;p&gt;I think durations would be useful, and others have mentioned to me that they&apos;d like to have them.  As you note, this might be a good phase 2 addition, as getting datetime in alone will be a fair chunk of work.&lt;/p&gt;</comment>
                            <comment id="12848617" author="rjurney" created="Tue, 23 Mar 2010 08:34:46 +0000"  >&lt;p&gt;The UDFs in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1310&quot; title=&quot;ISO Date UDFs: Conversion, Trucation and Date Math&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1310&quot;&gt;&lt;del&gt;PIG-1310&lt;/del&gt;&lt;/a&gt; are a segway to full datetime support.  They can be used until datetimes are supported in Pig.&lt;/p&gt;</comment>
                            <comment id="12848618" author="rjurney" created="Tue, 23 Mar 2010 08:36:58 +0000"  >&lt;p&gt;I would not say this blocks &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1310&quot; title=&quot;ISO Date UDFs: Conversion, Trucation and Date Math&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1310&quot;&gt;&lt;del&gt;PIG-1310&lt;/del&gt;&lt;/a&gt; at all - the UDFs there simply treat ISO dates as strings, which works reasonably well.  They should also handle Long unix times, and will in a next patch.  In any case, this isn&apos;t a blocker to that ticket, for which a patch was just submitted.&lt;/p&gt;</comment>
                            <comment id="12848903" author="rjurney" created="Tue, 23 Mar 2010 20:45:19 +0000"  >&lt;p&gt;Changing from blocks to related.&lt;/p&gt;</comment>
                            <comment id="12873234" author="russell.jurney" created="Sat, 29 May 2010 05:20:22 +0100"  >&lt;p&gt;As a first pass, I am going to add Boolean, which should be easier than DateTime, but will inform this implementation.  See &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1429&quot; title=&quot;Add Boolean Data Type to Pig&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1429&quot;&gt;&lt;del&gt;PIG-1429&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12873382" author="russell.jurney" created="Sun, 30 May 2010 06:57:03 +0100"  >&lt;p&gt;Ok, thinking about really doing this soon, after Boolean.  I&apos;d like to add two new primitives to Pig - DateTime and Duration.  &lt;/p&gt;

&lt;p&gt;I&apos;d do this on the wiki, but I don&apos;t have edit access.  Can someone please grant the ability to make a new page to user RussellJurney on the Pig wiki?&lt;/p&gt;

&lt;p&gt;Design Notes:&lt;/p&gt;

&lt;p&gt;1) I&apos;d like to use Jodatime for this, as I did in the DateTime UDFs.  It is possible to use the Java date libs, but it would be painful to do so.  Jodatime also performs better than Java&apos;s native date classes.  It is Apache 2.0 licensed and is already pulled in via ivy in the DateTime UDFs - see &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1310&quot; title=&quot;ISO Date UDFs: Conversion, Trucation and Date Math&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1310&quot;&gt;&lt;del&gt;PIG-1310&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Date Format for text/dumps: ISO8601.  Looks like: &lt;span class=&quot;error&quot;&gt;&amp;#91;YYYY&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;MM&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;DD&amp;#93;&lt;/span&gt;T&lt;span class=&quot;error&quot;&gt;&amp;#91;hh&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;mm&amp;#93;&lt;/span&gt;Z  It is a human readable, sortable/comparable, international standard.  See &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601#Dates&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/ISO_8601#Dates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.5) In memory type: org.joda.time.DateTime.  See &lt;a href=&quot;http://joda-time.sourceforge.net/apidocs/org/joda/time/DateTime.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://joda-time.sourceforge.net/apidocs/org/joda/time/DateTime.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The internal format of jodatime is a Long epoch/Unix/POSIX time.  See &lt;a href=&quot;http://joda-time.sourceforge.net/faq.html#internalstorage&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://joda-time.sourceforge.net/faq.html#internalstorage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Duration Format for text/dumps: ISO8601.  Looks like: P&lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;Y&lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;M&lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;DT&lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;H&lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;M&lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;S  It is a human readable, sortable/comparable, international standard.  See &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601#Durations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/ISO_8601#Durations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.5) In-memory format: org.joda.time.Duration.  See &lt;a href=&quot;http://joda-time.sourceforge.net/apidocs/org/joda/time/Duration.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://joda-time.sourceforge.net/apidocs/org/joda/time/Duration.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) All date functions in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1310&quot; title=&quot;ISO Date UDFs: Conversion, Trucation and Date Math&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1310&quot;&gt;&lt;del&gt;PIG-1310&lt;/del&gt;&lt;/a&gt; should be included, except those replaced by the use of operators on datetimes and durations.  Adding/subtracting datetimes should result in a duration.  Durations can be added/subtracted/divided/multiplied/negated.  &lt;/p&gt;

&lt;p&gt;Date/Duration truncation, date differences, date parsing/conversion should be included.  Conversion from int/long POSIX, SQL and datemonth should be included.  Conversion from any string with a DateFormat string should be included.&lt;/p&gt;

&lt;p&gt;5) Casting to and from Integer and Long should be supported, as a Unix/POSIX time.  Casting to/from chararray in ISO8601 format should be supported.&lt;/p&gt;

&lt;p&gt;Comments?  Suggestions?&lt;/p&gt;</comment>
                            <comment id="12873664" author="russell.jurney" created="Mon, 31 May 2010 15:04:47 +0100"  >&lt;p&gt;Hmmm not sure if I should use durations or periods, or both.  See &lt;a href=&quot;http://joda-time.sourceforge.net/apidocs/org/joda/time/Period.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://joda-time.sourceforge.net/apidocs/org/joda/time/Period.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12884558" author="russell.jurney" created="Fri, 2 Jul 2010 07:18:46 +0100"  >&lt;p&gt;Been thinking about this... I don&apos;t think we should add a full datetime type at this time.  See comments in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1314&quot; title=&quot;Add DateTime Support to Pig&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1314&quot;&gt;&lt;del&gt;PIG-1314&lt;/del&gt;&lt;/a&gt; on alternative approach using builtins.&lt;/p&gt;</comment>
                            <comment id="12884562" author="russell.jurney" created="Fri, 2 Jul 2010 07:21:01 +0100"  >&lt;p&gt;I suck at JIRA. See proposal in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1430&quot; title=&quot;ISODateTime -&amp;gt; DateTime: DateTime UDFs Should Also Support int/second Unix Times in All Operations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1430&quot;&gt;PIG-1430&lt;/a&gt;.&lt;/p&gt;
</comment>
                            <comment id="12892464" author="olgan" created="Mon, 26 Jul 2010 22:06:43 +0100"  >&lt;p&gt;Russell, are you still planning to finish this for Pig 0.8.0 release?&lt;/p&gt;</comment>
                            <comment id="12904690" author="olgan" created="Tue, 31 Aug 2010 18:44:06 +0100"  >&lt;p&gt;Unlinking from 0.8 since we are branching today&lt;/p&gt;</comment>
                            <comment id="13027250" author="jeromatron" created="Sat, 30 Apr 2011 01:24:04 +0100"  >&lt;p&gt;I think this would be nice also when outputting from pig scripts using DBStorage to an RDBMS - to be able to serialize properly to the db&apos;s timestamp or date type (without extra UDF work).&lt;/p&gt;</comment>
                            <comment id="13100380" author="zjshen" created="Thu, 8 Sep 2011 16:12:15 +0100"  >&lt;p&gt;I&apos;ve solved the related issue &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1429&quot; title=&quot;Add Boolean Data Type to Pig&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1429&quot;&gt;&lt;del&gt;PIG-1429&lt;/del&gt;&lt;/a&gt;. If nobody is currently working on this issue, I volunteer to investigate into it.&lt;/p&gt;</comment>
                            <comment id="13100761" author="daijy" created="Thu, 8 Sep 2011 23:39:33 +0100"  >&lt;p&gt;That will be great. Here is a specification I wrote: &lt;a href=&quot;https://cwiki.apache.org/confluence/display/PIG/DateTime+type+specification&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/PIG/DateTime+type+specification&lt;/a&gt;. Take a look and we can discuss.&lt;/p&gt;</comment>
                            <comment id="13232004" author="zjshen" created="Sat, 17 Mar 2012 16:35:45 +0000"  >&lt;p&gt;GSoC is back! I&apos;d like to apply it with this issue. The proposal draft will come in following days&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13232026" author="daijy" created="Sat, 17 Mar 2012 17:40:17 +0000"  >&lt;p&gt;Looking forward to your proposal!&lt;/p&gt;</comment>
                            <comment id="13237884" author="zjshen" created="Sun, 25 Mar 2012 15:43:27 +0100"  >&lt;p&gt;Hi folks,&lt;/p&gt;

&lt;p&gt;Below is my proposal draft. Any comments are welcome&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;==&lt;/p&gt;

&lt;p&gt;Proposal Title: Adding the Datetime Type as a Primitive for Pig&lt;/p&gt;


&lt;p&gt;Student Name: Zhijie Shen &lt;br/&gt;
Student E-mail: zjshen14@gmail.com &lt;/p&gt;

&lt;p&gt;Organization/Project: Apache Software Foundation - Pig &lt;br/&gt;
Assigned Mentor: Daniel Dai /Russell Jurney&lt;/p&gt;


&lt;p&gt;Proposal Abstract: &lt;/p&gt;

&lt;p&gt;Apache Pig is a platform for analyzing large data sets based on Hadoop. Currently Pig does not support the primitive datetime type &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, which is a desired feature to be implemented. In this proposal, I explain my plan to implement the primitive datetime type, including the details of my solution and schedule. Additionally, I briefly introduce my background and the motivation of applying GSoC&apos;12. &lt;/p&gt;

&lt;p&gt;Detailed Description: &lt;/p&gt;

&lt;p&gt;1. Understanding of the Project&lt;/p&gt;

&lt;p&gt;1.1 What is Apache Pig?&lt;/p&gt;

&lt;p&gt;Apache Pig is a platform for analyzing large data sets. Notably, at Yahoo! 40% of all Hadoop jobs are run with Pig &lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;. Pig has is own dataflow language, named Pig Latin, which encapsulates map/reduce jobs step-by-step, and offers the relational primitives such as LOAD, FOREACH, GROUP, FILTER and JOIN. Pig provides many built-in functions, but also  allow users to define their user-defined functions (UDFs) to achieve particular purposes. There are more benefits: Pig can operates on the plain files directly without any schema information; it has a flexible, nested data model, which is more compatible with that of major programming languages; it provides a debugging environment.&lt;/p&gt;

&lt;p&gt;1.2 Why primitive datetime type is required?&lt;/p&gt;

&lt;p&gt;Datetime is a conventional data type in many of database management systems as well as programming languages. Within the Hadoop ecosystem, Hive, which is an analog of Pig, also supports the primitive datetime type (timestamp actually). In contrast, Pig does not fully support this type. Currently, users can only use the string type for the datetime data, and rely on the UDF which takes datetime strings. However, Pig is supposed to primarily parse log data, and most log data has attributes in the datetime type. &lt;/p&gt;

&lt;p&gt;Consequently, it is desired for Pig to support the datetime type as a primitive. By doing so, we can expect the following benefits: a more compact serialized format, working with conventional operators (+/-/==/!=/&amp;lt;/&amp;gt;), a dedicated faster comparator, being sortable, fewer times of runtime conversion from string, and relieving users&lt;br/&gt;
 from deciding the input datetime string format.&lt;/p&gt;


&lt;p&gt;2. Roadmap of Implementing the New Feature&lt;/p&gt;

&lt;p&gt;2.1 To Do List&lt;/p&gt;

&lt;p&gt;2.1.1  Adding Support in Antlr Parser&lt;/p&gt;

&lt;p&gt;Pig Latin supports the assign data type explicitly, such that the &#8220;datetime&#8221; keyword and some constants, such as &#8220;now()&#8221; and &#8220;today()&#8221; can be recognized. The related syntax needs to be added into 5 antlr scripts: AliasMasker.g, AstPrinter.g, AstValidator.g, LogicalPlanGenerator.g, QueryParser.g.&lt;/p&gt;

&lt;p&gt;2.1.2 Adding Datetime as a Primitive&lt;/p&gt;

&lt;p&gt;The dateime type should be added into the DataType class, and the basic conversion between it and other data types need to be defined. Previously, the internal data structure relies on Joda datetime data type, which is more powerful than java.util.DateTime, but much easier than java.util.Calendar. Hence it is wise to keep this convention.&lt;br/&gt;
 Moreover, be careful that implicit type cast from/to the datetime type is not allowed.&lt;/p&gt;

&lt;p&gt;I also need to change the LoadCaster and StoreCaster interfaces to include bytesToDateTime/toBytes(DateTime) method, and add details to the classes that implemented these two interfaces. In addition, I need override +/-/==/!=/&amp;lt;/&amp;gt; operators for the datetime type, mapping the to some bulitin EvalFuncs. The TypeCheckingExpVisitor class needs to be modified as well to support the datetime type vailidation. One important issue is that according to my previous experience, the data type related code in Pig is widely spread, such that I need to be careful all the related parts are touched.&lt;/p&gt;

&lt;p&gt;2.1.3 Refactoring of the Datetime Related UDFs&lt;/p&gt;

&lt;p&gt;Thanks Russell Jurney for having implemented a number of useful datetime related UDFs, which can be utilized for the primitive datetime type as well. Part of the UDF Classes located in the &#8220;org.apache.pig.piggybank.evaluation.datetime&#8221; package  under the &#8220;contrib&#8221; folder need to be move to the &#8220;org.apache.pig.builtin&#8221; package under the &#8220;src&#8221; folder. Below are the related UDFs:&lt;/p&gt;

&lt;p&gt;int DiffDate(DateTime d1, DateTime d2)&lt;br/&gt;
int YearsBetween(DateTime d1, DateTime d2)&lt;br/&gt;
int MonthsBetween(DateTime d1, DateTime d2)&lt;br/&gt;
int DaysBetween(DateTime d1, DateTime d2)&lt;br/&gt;
int HoursBetween(DateTime d1, DateTime d2)&lt;br/&gt;
int MinutesBetween(DateTime d1, DateTime d2)&lt;br/&gt;
int SecondsBetween(DateTime d1, DateTime d2)&lt;br/&gt;
int GetYear(DateTime d1)&lt;br/&gt;
int GetMonth(DateTime d1)&lt;br/&gt;
int GetDate(DateTime d1)&lt;br/&gt;
int GetHour(DateTime d1)&lt;br/&gt;
int GetMinute(DateTime d1)&lt;br/&gt;
int GetSecond(DateTime d1)&lt;br/&gt;
DateTime DateAdd(DateTime d1)&lt;br/&gt;
String ToString(DateTime d, String format)&lt;br/&gt;
 (Probably rename it DateTimeFormat)&lt;/p&gt;

&lt;p&gt;The remaining UDFs can be eliminated, while their logics can be used in the primitive type conversion part, which has been introduced in the previous section. Below are the UDFs of this kind:&lt;/p&gt;

&lt;p&gt;DateTime ToDate(String s)&lt;br/&gt;
DateTime ToDate(String s, String format)&lt;br/&gt;
DateTime ToDate(String s, String format, String timezone)&lt;br/&gt;
DateTime toDate(long t)&lt;br/&gt;
String ToString(DateTime d)&lt;br/&gt;
long ToUnixTime(DateTime d)&lt;/p&gt;

&lt;p&gt;Probably the following additional UDFs are also required, I need to discuss these with the community:&lt;/p&gt;

&lt;p&gt;DateTime Now()&lt;br/&gt;
DateTime Today()&lt;br/&gt;
bool IsDateTime(String s)&lt;/p&gt;

&lt;p&gt;2.1.4 Test Cases&lt;/p&gt;

&lt;p&gt;A large number of test cases are required to test the parser, the datatime operations and conversion, and loading from / storing into the secondary storage.&lt;/p&gt;

&lt;p&gt;2.1.5 Documentation&lt;/p&gt;

&lt;p&gt;A user manual is required to describe how to use datetime primitive, such as the input format, the supported built-in functions.&lt;/p&gt;

&lt;p&gt;2.2 Project Schedule &lt;/p&gt;

&lt;p&gt;During the summer, I will have not much workload except writing my Ph.D. thesis. Hence it is possible for me to spend around 40 hours per week on this project. The concrete schedule are summarized as follows: &lt;/p&gt;

&lt;p&gt;Present - May 20 (before official start of summer of code): Reading the related code in detail, and keeping touch with the community to clarify some issues, such as the necessary built-in UDFs and the rules of data conversion.&lt;/p&gt;

&lt;p&gt;May 21 - Jun 3 (two weeks):  Adding the datetime into the primitive type list, and completing the functionality of  parsing the datetime keyword and constraints, such that the string representing a datetime can be recognized from Pig Lating scripts.&lt;/p&gt;

&lt;p&gt;Jun 4 - Jun 24 (thee weeks): Implementing type conversion (from/to string) and loading/storing cast functionality. After this step, data of the datetime type can be correctly reading from/storing into the secondary storage.&lt;/p&gt;

&lt;p&gt;Jun 25 - Jul 8 (two weeks until mid-term evaluation): Completing the remaining part of the type conversion (e.g., between the datatime type and the long type),  dealing with some issues that have not been foreseen yet, and preparing for the mid-term evaluation.&lt;/p&gt;

&lt;p&gt;Jul 9 - Jul 29 (three weeks): Refactoring the datetime related UDFs, adding new required UDFs, and overloading the primitive operators, such that all the defined operations on datetime values are supported after this step.&lt;/p&gt;

&lt;p&gt;Jul 30 - Aug 5 (one week):  Writing the test cases to systematically verify the code, debugging the possible bugs. After this step, the coding part is nearly done.&lt;/p&gt;

&lt;p&gt;Aug 6 - Aug 12 (one week until final evaluation ): Documenting the user manual to show how to work with the datetime type, and preparing for the final evaluation.&lt;/p&gt;

&lt;p&gt;Additional Information: &lt;/p&gt;

&lt;p&gt;I am a Ph.D. student from National University of Singapore. My research topics are large scale multimedia systems, geo-referenced video systems and P2P video streaming. In addition to research, I love programming and have long-term experience in several languages, including Java.  Moreover, I am quite interested in distributed systems and big data, and have acquired solid background knowledge.  I used to take the course - &quot;Parallel and Distributed Databases&quot;, drafted a survey of the cloud storage systems (including Pig) &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; and obtained the A+ score. &lt;/p&gt;

&lt;p&gt;Notably, I am a open source advocate, and have contributed to it to some extent. Last year, I  have participated into GSoC with a Pig project. I successfully implemented the nested cross feature &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;. And I overfulfiled my proposed task by contributing one more patch of adding the primitive boolean type &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;, which is somewhat similar to the task proposed for this year&apos;s GsoC. Therefore, I am quite familiar with this task and confident of completing it on time. Last but not least, I enjoy the long term participation into the Pig community, and am willing to keep contributing to it.&lt;/p&gt;


&lt;p&gt;Reference:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1314W&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-1314W&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1916&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-1916&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1429&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-1429&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://www.comp.nus.edu.sg/~z-shen/survey.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.comp.nus.edu.sg/~z-shen/survey.pdf&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://wiki.apache.org/pig/OldFrontPage&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/OldFrontPage&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13237885" author="zjshen" created="Sun, 25 Mar 2012 15:44:15 +0100"  >&lt;p&gt;By the way, who would like to mentor this issue?&lt;/p&gt;</comment>
                            <comment id="13238037" author="russell.jurney" created="Mon, 26 Mar 2012 02:28:44 +0100"  >&lt;p&gt;I am happy to help regarding questions about the DateTime UDFs, but do not remember the internals of my attempt to add Boolean in preparation for DateTime.  I suggest the comitter who got Boolean working would be a good candidate?&lt;/p&gt;</comment>
                            <comment id="13238044" author="zjshen" created="Mon, 26 Mar 2012 02:41:56 +0100"  >&lt;p&gt;Coincidentally, I&apos;m that person making Boolean working&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Daniel helped me a lot to work out that issue, if he&apos;d like to mentor this one, it will also be awesome.&lt;/p&gt;</comment>
                            <comment id="13238187" author="daijy" created="Mon, 26 Mar 2012 09:04:28 +0100"  >&lt;p&gt;I would like to mentor this.&lt;/p&gt;</comment>
                            <comment id="13244979" author="zjshen" created="Tue, 3 Apr 2012 06:09:46 +0100"  >&lt;p&gt;I&apos;ve pasted the proposal to the official website: &lt;a href=&quot;http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/zjshen/21002&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/zjshen/21002&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any comments are welcome, such that I can improve the proposal in the remaining days.&lt;/p&gt;</comment>
                            <comment id="13244980" author="prkommireddi" created="Tue, 3 Apr 2012 06:17:52 +0100"  >&lt;p&gt;Thanks Zhijie. Can you please make it public?&lt;/p&gt;</comment>
                            <comment id="13244985" author="zjshen" created="Tue, 3 Apr 2012 06:26:36 +0100"  >&lt;p&gt;Ah, I forgot doing it. Public now&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13284047" author="zjshen" created="Sat, 26 May 2012 20:20:08 +0100"  >&lt;p&gt;As suggested by Thejas, I&apos;ve done performance comparison between JODA and builtin datetime-related objects. For each function, I repeated 100,000 times of computation, and calculated the time respectively. Please refer to the attachment for the code details. Bellow is the summary of the results (unit is millisecond):&lt;/p&gt;

&lt;p&gt;ISOToSecond: JODA-958 Builtin-1326&lt;br/&gt;
ISOToMinute: JODA-532 Builtin-850&lt;br/&gt;
ISOToHour: JODA-414 Builtin-680&lt;br/&gt;
ISOToDay: JODA-475 Builtin-685&lt;br/&gt;
ISOToMonth: JODA-463 Builtin-692&lt;br/&gt;
ISOToYear: JODA-462 Builtin-715&lt;br/&gt;
ISOSecondsBetween: JODA-961 Builtin-968&lt;br/&gt;
ISOMinutesBetween: JODA-734 Builtin-565&lt;br/&gt;
ISOHoursBetween: JODA-596 Builtin-656&lt;br/&gt;
ISODaysBetween: JODA-592 Builtin-555&lt;br/&gt;
ISOMonthsBetween: JODA-586 Builtin-968&lt;br/&gt;
ISOYearsBetween: JODA-654 Builtin-952&lt;br/&gt;
ISOToUnix: JODA-678 Builtin-6965&lt;br/&gt;
UnixToISO: JODA-225 Builtin-206&lt;br/&gt;
Custom Format 1 &lt;span class=&quot;error&quot;&gt;&amp;#91;yyyy.MM.dd G &amp;#39;at&amp;#39; HH:mm:ss.SSS Z&amp;#93;&lt;/span&gt;: JODA-596 Builtin-6914&lt;br/&gt;
Custom Format 2 &lt;span class=&quot;error&quot;&gt;&amp;#91;yyyyy.MMMMM.dd GGG hh:mm aaa&amp;#93;&lt;/span&gt;: JODA-534 Builtin-425&lt;/p&gt;

&lt;p&gt;Two major conclusions are as follows:&lt;br/&gt;
1. The datetime operations with the help of JODA generally performs as good as those with the builtin data structure (according to my implementation), except the operation of parsing a time string.&lt;br/&gt;
2. It is found that based on my implementation, the builtin data structure needs one more order of magnitude of time to parse a time string when the format has a timezone component (i.e., &quot;Z&quot;).&lt;/p&gt;

&lt;p&gt;To sum up, my suggestion is that since JODA provides no worse performance and more trustworthy correctness, I vote for going on with JODA when implementing the datetime primitive type.&lt;/p&gt;</comment>
                            <comment id="13284059" author="russell.jurney" created="Sat, 26 May 2012 21:44:57 +0100"  >&lt;p&gt;I concur about JODA. So far as I know you can&apos;t even parse ISO times with java builtins without using javax.xml.bind.DatatypeConverter, and it is ugly and slow.&lt;/p&gt;</comment>
                            <comment id="13284392" author="zjshen" created="Mon, 28 May 2012 13:58:04 +0100"  >&lt;p&gt;One quick issue: we need to give a name to the new type. We are supposed to use &quot;DATETIME&quot;, correct? Or &quot;DATE&quot;, &quot;TIMESTAMP&quot;?&lt;/p&gt;</comment>
                            <comment id="13284575" author="thejas" created="Tue, 29 May 2012 00:31:42 +0100"  >&lt;blockquote&gt;&lt;p&gt;One quick issue: we need to give a name to the new type. We are supposed to use &quot;DATETIME&quot;, correct? Or &quot;DATE&quot;, &quot;TIMESTAMP&quot;?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&quot;datetime&quot; makes sense when it has both date and time (hrs,mins,secs) parts to it. The problem with using (unix) timestamp, is that the date range is limited to 78 years. Using jodatime, we will be able to support much larger date range than timestamp.&lt;/p&gt;
</comment>
                            <comment id="13284592" author="russell.jurney" created="Tue, 29 May 2012 01:34:33 +0100"  >&lt;p&gt;&quot;DATETIME&quot; makes sense, but &quot;TIMESTAMP&quot; is a good (simple) alias for DATETIME(NOW).  &quot;DATE&quot; is a good alias for a date-truncated DATETIME.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if you would want to implement these in Pig... as there is clearly less utility than in a database, where for instance a TIMESTAMP can be updated whenever a field is written or updated. Maybe &quot;DATE&quot; and not &quot;TIMESTAMP,&quot; but only as an afterthought?&lt;/p&gt;</comment>
                            <comment id="13284603" author="thejas" created="Tue, 29 May 2012 03:22:49 +0100"  >&lt;p&gt;CURRENT_TIME() might be a more intuitive alias for DATETIME(NOW). I think we can consider adding support for DATE and CURRENT_TIMESTAMP() as a next step after adding  DATETIME. We can focus on DATETIME in this jira.&lt;/p&gt;

&lt;p&gt;I also had a look at timestamp datatype that was added to hive, to see if it will be interoperable (through hcatalog). The only difference is that hive timestamp type supports storing up to nano second precision, while jodatime supports only up to millisecond. Nanoseconds are not likely to be used in most cases, so loosing that precision when converting hive timestamp to pig datetime should be OK in most cases. The range of years supported in both cases is also approximately the same.&lt;/p&gt;


</comment>
                            <comment id="13286617" author="zjshen" created="Thu, 31 May 2012 15:39:19 +0100"  >&lt;p&gt;When adding the DateTime type for Pig, we need to take care of the I/O with AVRO, which still doesn&apos;t support the Date/Time type.&lt;/p&gt;</comment>
                            <comment id="13288203" author="zjshen" created="Sun, 3 Jun 2012 17:56:13 +0100"  >&lt;p&gt;One more issue needs to be clarified:&lt;/p&gt;

&lt;p&gt;In the AugmentBaseDataVisitor class, there&apos;re two functions: Object GetSmallerValue(Object v) and Object GetLargerValue(Object v). where if v is a numeric value, v is added or reduced by one while if v is a byte array, it is added or reduced by one byte. Then, how do we do if v is a datetime? I vote for returning null, and am looking forward to the community&apos;s opinions.&lt;/p&gt;

&lt;p&gt;By the way, how about if v is a boolean, which seems not to be handled?&lt;/p&gt;</comment>
                            <comment id="13288680" author="thejas" created="Mon, 4 Jun 2012 18:02:55 +0100"  >&lt;blockquote&gt;&lt;p&gt;When adding the DateTime type for Pig, we need to take care of the I/O with AVRO, which still doesn&apos;t support the Date/Time type.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;StoreFuncs that write in avro format will need to throw an exception if the schema being stored contains a datetime type. That will force the users to serialize datetime as some other type. As long as we are not breaking existing pig queries don&apos;t use datetime type, we should be fine. Avro is just one of the many formats.&lt;/p&gt;

&lt;p&gt;Regarding AugmentBaseDataVisitor, that is used for example generation. (see &lt;a href=&quot;http://infolab.stanford.edu/~olston/publications/sigmod09.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;sigmod paper on illustrate feature &lt;/a&gt; for details) . For example, if there is no value in col1 in sample that satisfies &quot;col1 &amp;gt; 0&quot;, a value of col1 &amp;gt; 0 is generated. This will be useful for datetime type as well. &lt;br/&gt;
To have a more realistic value generated (similar to values in input), I think we should increment/decrement the smallest field that is non zero. For example if the millisecond and second fields are 0, but hour field is non zero, increment that. If all time parts are 0, but day of month is not, increment that.&lt;br/&gt;
In case of boolean, as we don&apos;t support &amp;gt; or &amp;lt; operations, these functions do not make sense. &lt;/p&gt;

&lt;p&gt;Thanks for bringing this up. I had forgot about this use case. We should add a few unit tests for example generation that involve datetime.&lt;/p&gt;

</comment>
                            <comment id="13291924" author="zjshen" created="Fri, 8 Jun 2012 20:26:38 +0100"  >&lt;p&gt;I&apos;ve modified the codes in the src package related to the primitive DateTime (see the attached file). As the code related to data type is widely spread in the project, I still need to go through it more times to figure the potential missing parts.&lt;/p&gt;

&lt;p&gt;Up till now, there&apos;s some more issues that need to be discussed:&lt;/p&gt;

&lt;p&gt;1. Pig can also import into and export from HBase storage, which also doesn&apos;t have the primitive DataTime. Throw exception in this case as well, correct?&lt;/p&gt;

&lt;p&gt;2.For the type casting between DateTime and other types of data, how about following the rules below:&lt;br/&gt;
a. Allow: DateTime &amp;lt;-- Numeric value (being converted to Long first)&lt;br/&gt;
b. Allow: DateTime &amp;lt;-- String&lt;br/&gt;
c. Not allow: DateTime &amp;lt;-- Boolean&lt;br/&gt;
d. Only explicit casting allowed&lt;/p&gt;

&lt;p&gt;3. DateTime is serialized as a Long value (Unix timestamp) when it is necessary.&lt;/p&gt;</comment>
                            <comment id="13291961" author="russell.jurney" created="Fri, 8 Jun 2012 21:21:03 +0100"  >&lt;p&gt;Avro might store DateTimes as an ISO string?&lt;/p&gt;</comment>
                            <comment id="13292834" author="zjshen" created="Mon, 11 Jun 2012 16:25:08 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Avro might store DateTimes as an ISO string?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s possible, but there seems to be one problem. If we store a datetime as an iso string, how do we determine whether a string is just a string or a datetime when it is loaded?&lt;/p&gt;

&lt;p&gt;One more issue is that it&apos; good to keep all the IO targets that does not support datetime handle the IO process uniformly. Hence if we conclude the design for Avro, we should keep to it for the others.&lt;/p&gt;</comment>
                            <comment id="13396842" author="zjshen" created="Tue, 19 Jun 2012 16:04:23 +0100"  >&lt;p&gt;I&apos;ve updated the patch with the following changes:&lt;/p&gt;

&lt;p&gt;1. Editing some codes related to IO.&lt;br/&gt;
2. Implemented most of the UDF in lised &lt;a href=&quot;https://cwiki.apache.org/confluence/display/PIG/DateTime+type+specification&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/PIG/DateTime+type+specification&lt;/a&gt;, excluding DateAdd, whose functionality is not the clear to me.&lt;br/&gt;
3. Correcting some error when merging the my modifications with the latest version in the repository.&lt;/p&gt;

&lt;p&gt;There&apos;s following issues to be discussed:&lt;br/&gt;
1. the output datatype of DiffDate(DateTime d1, DateTime d2) should use long instead of int, because the diff may be too large for int range to conver.&lt;br/&gt;
2. what does DateTime DateAdd(DateTime d1) mean? Adding datetime based on the current time?&lt;br/&gt;
3. we allow explicit cast between datetime and string, correct? Similarly, do we allow  explicit cast between datetime and long/int (representing unix timestamp)?&lt;/p&gt;</comment>
                            <comment id="13400299" author="thejas" created="Mon, 25 Jun 2012 07:19:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;1. Pig can also import into and export from HBase storage, which also doesn&apos;t have the primitive DataTime. Throw exception in this case as well, correct?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. The exception should be thrown from HBaseStorage.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;if we conclude the design for Avro, we should keep to it for the others.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Please note that pig does not have a way of know if the format will support datetime. The behavior will be controlled by the storage func implementation. But for the ones that are part of pig codebase, I think we should throw an exception. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;3. DateTime is serialized as a Long value (Unix timestamp) when it is necessary.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;JodaTime supports milliseconds as well. Will we be able to convert all values within limits of JodaTime date into a long ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the output datatype of DiffDate(DateTime d1, DateTime d2) should use long instead of int, because the diff may be too large for int range to conver.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Makes sense, we should use a type that is appropriate for range.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;what does DateTime DateAdd(DateTime d1) mean? Adding datetime based on the current time?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not sure. Daniel, do you know ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;we allow explicit cast between datetime and string, correct? Similarly, do we allow explicit cast between datetime and long/int (representing unix timestamp)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, we should support explicit cast between these types. Though conversion to int might not be successful for all datetime values. &lt;/p&gt;
</comment>
                            <comment id="13400705" author="thejas" created="Mon, 25 Jun 2012 18:37:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;what does DateTime DateAdd(DateTime d1) mean? Adding datetime based on the current time?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Discussed this with Daniel. I think it makes sense to replace this with different functions -&lt;br/&gt;
// add number of days specified in days param to the DateTime date. &lt;br/&gt;
// The days param can be positive or negative&lt;br/&gt;
AddYears(DateTime date, int days);&lt;/p&gt;

&lt;p&gt;Similarly we should have AddMonths, AddDays, AddHours ..&lt;/p&gt;
</comment>
                            <comment id="13401081" author="russell.jurney" created="Tue, 26 Jun 2012 01:58:10 +0100"  >&lt;p&gt;A couple comments:&lt;/p&gt;

&lt;p&gt;1) Don&apos;t persist DateTimes as ints/longs unless you also persist a timezone offset with it somehow (is this possible?). Persisting timezones is one of the key benefits of a DateTime type in my opinion. At Hadoop scale you are often dealing with events from different sites/locations. DateTime needs timezone, or we can just use long/unix time.&lt;br/&gt;
2) Consider using jodatime/ISO8601 durations for date math, as a separate type. i.e.  If this extends scope too far, save it for later.  &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601#Durations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/ISO_8601#Durations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although it may be inefficient, I would encourage an ISO8601 string representation during serialization.&lt;/p&gt;</comment>
                            <comment id="13401107" author="thejas" created="Tue, 26 Jun 2012 02:59:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;1) Don&apos;t persist DateTimes as ints/longs unless you also persist a timezone offset with it somehow (is this possible?).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I forgot about timezone. We need to serialize the timezone information as well, while supporting the same range of dates as JodaTime . With int/long this will not be possible. (Zhijie can you confirm ?)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;2) Consider using jodatime/ISO8601 durations for date math, as a separate type. i.e. If this extends scope too far, save it for later. &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601#Durations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/ISO_8601#Durations&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 . This is much cleaner. Lets use replace the Add* functions with just AddDuration . For example AddDuration(d1, &quot;P3Y&quot;), would return d1 + 3 years. &lt;/p&gt;</comment>
                            <comment id="13401155" author="zjshen" created="Tue, 26 Jun 2012 05:11:30 +0100"  >&lt;p&gt;Dear Thejas and Russell,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Don&apos;t persist DateTimes as ints/longs unless you also persist a timezone offset with it somehow (is this possible?).&lt;br/&gt;
I forgot about timezone. We need to serialize the timezone information as well, while supporting the same range of dates as JodaTime . With int/long this will not be possible. (Zhijie can you confirm ?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As far as I know, either Java builtin Date or Joda DateTime uses millisecond-shift (stored in a long integer variable) from the midnight UTC, which is not exactly the Unix time. Importantly, the millisecond-shift has nothing to do with the time zone. For example, both&lt;/p&gt;

&lt;p&gt;new DateTime(9223372017043199999L, DateTimeZone.UTC).getMillis();&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;new DateTime(9223372017043199999L, DateTimeZone.forID(&quot;Asia/Singapore&quot;).getMillis();&lt;/p&gt;

&lt;p&gt;will return the same value, that is, 9223372017043199999L. The time zone only determines only determines the ISO time string, such that the two DateTime objects will output different ISO time strings when toString() is called. Hence I think the long variable which represents the millisecond-shift is good for internal serialization. When we need to convert the DateTime object to Unix time string, we may use the default time zone of the Pig environment (I&apos;m still working on this. Please let me know how you think the Pig-wide time zone should be set.) or the user-defined time zone (We probably need one more UDF String ToString(DateTime d, String format, String timezone)).&lt;/p&gt;

&lt;p&gt;AS to Pig DateTime, internal Joda DateTime objects is either created with the long variable of millisecond-shift or with ISO time string. Initialization with a long variable (from Long.MIN_VALUE to Long.MAX_VALUE) has no range problem when getMillis() is called, obtaining the result ranged from Long.MIN_VALUE to Long.MAX_VALUE as well. Initialization with a ISO time string, the JODA DateTime object only accepts the year in the range &lt;span class=&quot;error&quot;&gt;&amp;#91;-292275054,292278993&amp;#93;&lt;/span&gt;, such that the corresponding millisecond-shift is also within &lt;span class=&quot;error&quot;&gt;&amp;#91;Long.MIN_VALUE, Long.MAX_VALUE&amp;#93;&lt;/span&gt;. In summary, the range will be fine when Long is used for serialization.&lt;/p&gt;

&lt;p&gt;Please correct me if I&apos;m wrong. Thanks a lot!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2) Consider using jodatime/ISO8601 durations for date math, as a separate type. i.e. If this extends scope too far, save it for later. &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601#Durations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/ISO_8601#Durations&lt;/a&gt;&lt;br/&gt;
+1 . This is much cleaner. Lets use replace the Add* functions with just AddDuration . For example AddDuration(d1, &quot;P3Y&quot;), would return d1 + 3 years.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1. In this way, it is more flexible for users to define the amount of time to add/subtract. Since the ISO duration is non-negative (Please correct me if I&apos;m wrong), we need to SubstractDuration as well.&lt;/p&gt;</comment>
                            <comment id="13401162" author="russell.jurney" created="Tue, 26 Jun 2012 05:31:07 +0100"  >&lt;p&gt;Whatever the format is, I think we should serialize/persist DateTimes in a way that the timezone stays with the datetime. &lt;/p&gt;</comment>
                            <comment id="13401613" author="thejas" created="Tue, 26 Jun 2012 20:03:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;As far as I know, either Java builtin Date or Joda DateTime uses millisecond-shift (stored in a long integer variable) from the midnight UTC, which is not exactly the Unix time. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, as you noted, the difference is unix timestamp can store upto +/- 292 Billion years, while Joda DateTime supports only +/- 292 Milllion years. Which should be sufficient for most practical purposes! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The time zone determines only determines the ISO time string,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It also affects the field values, (getDayOfWeek(), getHourOfDay() etc. In your data, you can have dates belonging to different timezones, and users might want to retain that information. &lt;br/&gt;
An example of use case where timezone also needs to be stored - if you want to do analysis of how many people come to a global website during their morning hours, you want to .getHourOfDay() to return the hour as per local timezone. &lt;/p&gt;

&lt;p&gt;We need an efficient way to serialize timezone along with the long. Can you propose something ? (Maybe, just make it efficient for 256 most &apos;popular&apos; timezones and store it a byte. And not have the byte for UTC. For other timezones,  add a timezone string ?) &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When we need to convert the DateTime object to Unix time string, we may use the default time zone of the Pig environment &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If the date field has the timezone value in it, we don&apos;t have to rely on default time zone to convert to unix time stamp. (assuming that is what you meant by &apos;unix time &lt;b&gt;string&lt;/b&gt;&apos; )&lt;br/&gt;
But udfs like DateTime ToDate(String s) where timezone might not be specified, we need a default timezone. I think we should use the default timezone on the pig client machine. Using the default time zone on each task tracker node can lead to a nightmare in debugging if one of the nodes happens to have a different timezone. We should allow the user to set a default timezone using a pig property. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We probably need one more UDF String ToString(DateTime d, String format, String timezone)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Having timezone argument in this call is necessary only if user wants to print the time for a different timezone. This is useful, but not mandatory. &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Since the ISO duration is non-negative (Please correct me if I&apos;m wrong), we need to SubstractDuration as well.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, you are right. I could not find any references to negative values in ISO duration. Lets add SubstractDuration&lt;/p&gt;

&lt;p&gt;Trivia from wikipedia: 64 bit unix timestamp, in the negative direction, goes back more than twenty times the age of the universe &lt;/p&gt;</comment>
                            <comment id="13401676" author="russell.jurney" created="Tue, 26 Jun 2012 21:48:24 +0100"  >&lt;p&gt;Jodatime seems to solve these problems. Serializing from a string without a timezone, it does things in a reasonable manner.  Serializing things from a string with a timezone, it does things in a reasonable manner.&lt;/p&gt;

&lt;p&gt;Are we discussing a user-facing API, or an internal storage mechanism?  I&apos;m not clear on which.  Regarding the interface, presenting integers to a user as an interface seems wrong to me.  Excluding certain timezones in the name of efficiency also seems wrong to me.  The point of a datetime type is to add timezones, otherwise we can simply use longs.&lt;/p&gt;

&lt;p&gt;As an internal storage mechanism, I&apos;m un-opinionated, so long as all timezones are retained at all times.&lt;/p&gt;</comment>
                            <comment id="13401786" author="thejas" created="Wed, 27 Jun 2012 00:18:32 +0100"  >&lt;blockquote&gt;&lt;p&gt;Are we discussing a user-facing API, or an internal storage mechanism? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Some questions were about interface, some about internal storage.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Regarding the interface, presenting integers to a user as an interface seems wrong to me. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Converting dates to integer is something user can optionally do, this is not expected to be a common use case. String representation of date literals will also be supported. Most operations will be on date type itself, without converting it to int/string.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Excluding certain timezones in the name of efficiency also seems wrong to me.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;All timezones supported by JodaTime will be supported. I was only proposing that we encode the timezone info efficiently, at least for most likely used ones. I think converting the string timezone (location name) to UTC offset in minutes, is one possibility. &lt;/p&gt;
</comment>
                            <comment id="13401884" author="zjshen" created="Wed, 27 Jun 2012 03:11:24 +0100"  >&lt;p&gt;Hi Thejas and Russell,&lt;/p&gt;

&lt;p&gt;I&apos;ll do serialization for timezone as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think converting the string timezone (location name) to UTC offset in minutes, is one possibility.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In my opinion, this kind of compression is lossy. Several time zones may share the same UTC offset, such that when the reverse operation is to do, it will be unknown which timezone the UTC offset should be converted to.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We need an efficient way to serialize timezone along with the long. Can you propose something ? (Maybe, just make it efficient for 256 most &apos;popular&apos; timezones and store it a byte. And not have the byte for UTC. For other timezones, add a timezone string ?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The time zone class in either builtin and joda has the function &quot;getAvailableIDs&quot;, which returns all the available time zone strings. On my machine, I got 616 from the builtin time zone while 558 from the joda one. Probably we can have a one-to-one mapping between the time zone strings and the integer ids in short variables. However the &quot;available&quot; in the function &quot;getAvailableIDs&quot; sounds tricky. I&apos;m not sure whether &quot;getAvailableIDs&quot; returns the same time zone list on all machines or is machine-dependent.&lt;/p&gt;</comment>
                            <comment id="13401937" author="thejas" created="Wed, 27 Jun 2012 04:32:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;Several time zones may share the same UTC offset, such that when the reverse operation is to do, it will be unknown which timezone the UTC offset should be converted to.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, it will be lossy, but the part that is important for date calculations is preserved. The ISO spec only has offset for timezone. I don&apos;t think we have to allow datetime field to be used for storing location information. Does JodaTime preserve the location string ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m not sure whether &quot;getAvailableIDs&quot; returns the same time zone list on all machines or is machine-dependent.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It depends on the release/jar (&lt;a href=&quot;http://joda-time.sourceforge.net/tz_update.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://joda-time.sourceforge.net/tz_update.html&lt;/a&gt;). As pig will be shipping this jar to the nodes, it is ok to assume that it will be the same across all nodes for a query. So it is safe to rely on the id for intermediate serialization. &lt;br/&gt;
But won&apos;t jodatime support a timezone outside this list, If the user specifies a date using the UTC offset format ?&lt;/p&gt;


</comment>
                            <comment id="13402061" author="zjshen" created="Wed, 27 Jun 2012 09:45:53 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Yes, it will be lossy, but the part that is important for date calculations is preserved. The ISO spec only has offset for timezone. I don&apos;t think we have to allow datetime field to be used for storing location information. Does JodaTime preserve the location string ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I think so. If I get an DateTimeZone object by DateTimeZone.forID(&quot;asia/singapore&quot;), the returned DateTimeZone object doesn&apos;t change to &quot;+08:00&quot;, but keeps &quot;asia/singapore&quot;. We&apos;d better preserve it because when users want to output the time in their customized format that has &quot;z&quot; in the pattern string, the exact timezone can be outputed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But won&apos;t jodatime support a timezone outside this list, If the user specifies a date using the UTC offset format ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, DateTimeZone.forID() also allows UTC offset string as input, such as &quot;+08:00&quot;, though it is not in the list. However, the offset can be value in the range &lt;span class=&quot;error&quot;&gt;&amp;#91;-23:59:59.999, +23:59:59.999&amp;#93;&lt;/span&gt;, and the minimal granularity can be the millisecond&lt;/p&gt;

&lt;p&gt;Then, we are expected to have a combined lookup table that maps canonical timezone ids and UTC offset to their concise representation. Do you have any suggestion here? Or we temporally set aside the performance issue right now, and move forward to make timezone serialization work by simply serializing the timezone id string.&lt;/p&gt;</comment>
                            <comment id="13402467" author="thejas" created="Wed, 27 Jun 2012 19:54:10 +0100"  >&lt;blockquote&gt;&lt;p&gt;Or we temporally set aside the performance issue right now, and move forward to make timezone serialization work by simply serializing the timezone id string.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We can add features later, but dropping features later won&apos;t be good. In my opinion, the support for long timezone name is not going to be needed by most people. I think we can support it only for creating a DateTime field, but say that pig will not preserve the long name. Pig will only retain hours+minute offset (no seconds and milliseconds!). The hour+min offset form is portable and more likely to be supported by other serialization formats. &lt;/p&gt;</comment>
                            <comment id="13402517" author="russell.jurney" created="Wed, 27 Jun 2012 21:02:27 +0100"  >&lt;p&gt;This sounds good to me.&lt;/p&gt;</comment>
                            <comment id="13403114" author="zjshen" created="Thu, 28 Jun 2012 15:08:21 +0100"  >&lt;p&gt;Hi Thejas, I&apos;ll take your suggestions. Thanks!&lt;/p&gt;</comment>
                            <comment id="13405724" author="zjshen" created="Tue, 3 Jul 2012 10:42:02 +0100"  >&lt;p&gt;There&apos;s some issues with loading/storing pig data. When store a DateTime object with &quot;Utf8StorageConverter&quot; without using UDFs to convert it to some string, should we serialize it as a millis+timezone composite, or output an UTC-style datetime string (e.g., 2012-07-03T08:14:19.962+01:00))? The latter operation behaves the same as uses &quot;String ToString(DateTime d)&quot; before storing the string? Personally, I like the latter choice, because the data is directly readable from the stored files.&lt;/p&gt;

&lt;p&gt;On the other hand, if a datetime object is stored in the file as a datetime string, when we load it again as a datetime object, should we use the default timezone or use the one specified in the timezone string (e.g., +01:00 in the last example)? I again prefer the second choice. When we use Pig, it is possible to do a bunch of store/load to achieve some goal. The timezone information need to be preserved. For example, let&apos;s assume +08:00 is the default timezone. A datatime object whose individual timezone is -04:00 is stored as a string, which will have -04:00 as suffix. When the string is loaded as a datetime object for further process, we&apos;d better keep to the previously used timezone, -04:00, instead of the default one.&lt;/p&gt;

&lt;p&gt;How do you think about this? Thanks!&lt;/p&gt;</comment>
                            <comment id="13405971" author="thejas" created="Tue, 3 Jul 2012 19:29:38 +0100"  >&lt;p&gt;PigStorage is meant to be a human readable format. So that is another reason to store the timestamp in the ISO string as you suggested. &lt;br/&gt;
Yes, If the timezone is specified in the string, pig should use that value. But the timezone part and time part of the datetime string should be optional. Does jodatime support that ?&lt;/p&gt;</comment>
                            <comment id="13406238" author="zjshen" created="Wed, 4 Jul 2012 02:57:55 +0100"  >&lt;blockquote&gt;
&lt;p&gt;But the timezone part and time part of the datetime string should be optional. Does jodatime support that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, these two parts are not mandatory. The default time value is &quot;00:00:00.000&quot; while the default timezone offset is &quot;+00:00&quot;. When the datetime object is outputed an ISO-format string, the default parts will be filled up (e.g., 2012-07-03T00:00:00.000Z).&lt;/p&gt;</comment>
                            <comment id="13409636" author="zjshen" created="Mon, 9 Jul 2012 17:58:46 +0100"  >&lt;p&gt;Here&apos;s the newest patch of this issue, which contains the following changes since the last one:&lt;/p&gt;

&lt;p&gt;1. Including the timezone when serializing datetime objects.&lt;/p&gt;

&lt;p&gt;2. Implementing the additional UDFs that we have discussed.&lt;/p&gt;

&lt;p&gt;3. Updating my previous modifications to solve some conflicts with the &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt; patch.&lt;/p&gt;

&lt;p&gt;4. Adding &quot;timezone&quot; configuration for Pig.&lt;/p&gt;

&lt;p&gt;Util now, the patch can basically make the primitive datetime type work.&lt;/p&gt;

&lt;p&gt;However, I&apos;ve not do the thorough test yet. Therefore, my next step (in the second half of GSOC) will focus on coding the test cases, fixing bugs, etc.&lt;/p&gt;</comment>
                            <comment id="13412452" author="thejas" created="Thu, 12 Jul 2012 03:02:35 +0100"  >&lt;p&gt;Zhijie,&lt;br/&gt;
I have added comments on your latest patch in  &lt;a href=&quot;https://reviews.apache.org/r/5414/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/5414/&lt;/a&gt;.&lt;br/&gt;
Yes, lets focus on test cases now, so that we can get an initial version committed. &lt;/p&gt;</comment>
                            <comment id="13413472" author="zjshen" created="Fri, 13 Jul 2012 05:03:32 +0100"  >&lt;p&gt;Hi Thejas,&lt;/p&gt;

&lt;p&gt;Thanks for your review. I&apos;ll check out your comments.&lt;/p&gt;</comment>
                            <comment id="13424740" author="zjshen" created="Mon, 30 Jul 2012 09:10:22 +0100"  >&lt;p&gt;Hi Thejas,&lt;/p&gt;

&lt;p&gt;Here&apos;s my latest patch. Compared to the last one, there are the following modifications:&lt;/p&gt;

&lt;p&gt;1. I&apos;ve modified the code according to many of review comments.&lt;/p&gt;

&lt;p&gt;2. I&apos;ve added many test cases, but some are still missing. I&apos;ll add more in the following days.&lt;/p&gt;

&lt;p&gt;3. I&apos;ve fixed some bugs while running the newly added test cases.&lt;/p&gt;

&lt;p&gt;There&apos;s still some issues related to timezone I need to discuss with you:&lt;/p&gt;

&lt;p&gt;1. You&apos;ve mentioned that we need to propagate the timezone from the client to backend, where the udfs get executed. How the timezone should be propagated to the backend, which I assume the machine that runs the code? Previously I made the timezone setting in pig.properties, which will be loaded when PigServer runs, such that the default timezone will be set. Consequently, if a datetime object is created without specifying the timezone, the default one will be used. However, do you mean some other way?&lt;/p&gt;

&lt;p&gt;2. According to our previous discussion, ToDate() can take different type of timezone input, either location or UTC offset. However, two timezones of the two different types may be treated not equal even when the offset is same. For example, new DateTime(0L, DateTimeZone.forID(&quot;asia/singapore&quot;)) and new DateTime(0L, DateTimeZone.forID(&quot;+08:00&quot;)) are not equal. As we previously chose the UTC offset to be the basic timezone representation, I convert the location-based timezone to the utc-offset one and only use utc-offset style internally. Therefore, the aforementioned two equal datetime objects will not be mis-treated.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Zhijie&lt;/p&gt;</comment>
                            <comment id="13428458" author="thejas" created="Sat, 4 Aug 2012 00:21:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;1. You&apos;ve mentioned that we need to propagate the timezone from the client to backend, where the udfs get executed. How the timezone should be propagated to the backend, which I assume the machine that runs the code? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Previously I made the timezone setting in pig.properties, which will be loaded when PigServer runs, such that the default timezone will be set. Consequently, if a datetime object is created without specifying the timezone, the default one will be used. However, do you mean some other way?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It is possible that some of the task nodes  might be misconfigured and have different default time zone. In such cases, the results won&apos;t be what you want and it will be very difficult to debug. So the default timezone on the client should be used in the nodes as well. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I convert the location-based timezone to the utc-offset one and only use utc-offset style internally. Therefore, the aforementioned two equal datetime objects will not be mis-treated.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sounds good.&lt;/p&gt;</comment>
                            <comment id="13432933" author="zjshen" created="Mon, 13 Aug 2012 06:48:45 +0100"  >&lt;p&gt;Hi Thejas,&lt;/p&gt;

&lt;p&gt;I attached my newest patch (the same as that in my previous email sent to you). Compared the last version, there&apos;s following improvement:&lt;/p&gt;

&lt;p&gt;1. More test cases have been added, such that the test cases are nearly completed.&lt;/p&gt;

&lt;p&gt;2. Fix some bugs according to the test cases, including the builtin functions (e.g., argToFuncMapping).&lt;/p&gt;

&lt;p&gt;3. I add some more builtin functions: MilliSecondsBetween, GetMilliSecond, ToMillSeconds, since the granularity of pig DateTime is set to millsecond.&lt;/p&gt;

&lt;p&gt;I&apos;ve also some comments:&lt;/p&gt;

&lt;p&gt;1. DiffDate behaves similar to DaysBetween, except that the former function return opposite values if two arguments change their order.&lt;/p&gt;

&lt;p&gt;2. According to your last response, I&apos;m not clear how the default timezone of client can be sent to the server with the code. In my opinion, the default timezone should be specified on the server side by configuration, which should be taken care of by administrators. How do you think about this.&lt;/p&gt;

&lt;p&gt;I think this patch is close to commit. Please check it out. Thanks!&lt;/p&gt;</comment>
                            <comment id="13434733" author="thejas" created="Wed, 15 Aug 2012 02:42:50 +0100"  >&lt;blockquote&gt;&lt;p&gt;2. According to your last response, I&apos;m not clear how the default timezone of client can be sent to the server with the code. In my opinion, the default timezone should be specified on the server side by configuration, which should be taken care of by administrators. How do you think about this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I believe you should be able to set the default timezone property in PigContext constructor, and also let user override the default. In backend, you can access the value using something like - PigMapReduce.sJobConfInternal.get().get(&quot;pig.datetime.default.tz&quot;).&lt;/p&gt;</comment>
                            <comment id="13434760" author="russell.jurney" created="Wed, 15 Aug 2012 03:24:56 +0100"  >&lt;p&gt;I agree with Thejas. The user will want to control the timezone of NOW() without having to reconfigure the hadoop cluster/contact the hadoop administrator. Setting this on the client is consistent with Pig as a client-side technology.&lt;/p&gt;</comment>
                            <comment id="13434787" author="zjshen" created="Wed, 15 Aug 2012 04:39:19 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I believe you should be able to set the default timezone property in PigContext constructor, and also let user override the default. In backend, you can access the value using something like - PigMapReduce.sJobConfInternal.get().get(&quot;pig.datetime.default.tz&quot;).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thank you, Thejas! Let me investigate this issue.&lt;/p&gt;</comment>
                            <comment id="13435847" author="zjshen" created="Thu, 16 Aug 2012 09:48:26 +0100"  >&lt;p&gt;Hi Thejas,&lt;/p&gt;

&lt;p&gt;I attached my latest patch. In this version, I fixed the default timezone issue. Pig can obtain the timezone string from PigContext, which can be loaded from either the default property files or some user supplied sources. Instead of calling PigMapReduce.sJobConfInternal.get().get(&quot;pig.datetime.default.tz&quot;) every time when no user-supplied timezone is specified for DateTime construction, I configure the default timezone of joda when PigGenericMapBase and PigGenericMapReduce are at the setup() stage. Therefore, when no timezone is specified for DateTime construction, the created DateTime object will automatically use the default timezone. I think by doing this,  users do not need to touch too much detail (calling  PigMapReduce.sJobConfInternal) when writing their UDFs that are related to DateTime, and avoid the ambiguity that PigMapReduce.sJobConfInternal.get().get(&quot;pig.datetime.default.tz&quot;) and DateTimeZone.getDefault().getID() may sometimes be different.&lt;/p&gt;</comment>
                            <comment id="13436477" author="russell.jurney" created="Fri, 17 Aug 2012 01:34:23 +0100"  >&lt;p&gt;I have one suggestion - add getWeeks and weeksBetween, if it isn&apos;t inconvenient. I think Jodatime can do this. It is useful when dealing in weeks.&lt;/p&gt;</comment>
                            <comment id="13436528" author="zjshen" created="Fri, 17 Aug 2012 03:48:08 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I have one suggestion - add getWeeks and weeksBetween, if it isn&apos;t inconvenient. I think Jodatime can do this. It is useful when dealing in weeks.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, week field should be useful. In addition to it, I think it&apos;s better to add getWeekYear as well, because using weeks of year alone may cause ambiguity sometimes. For example, both &quot;2008-12-31&quot; and &quot;2009-01-01&quot; are week 1 of weekyear 2009, though the two dates are in two different years.&lt;/p&gt;

&lt;p&gt;In addition, do you think it is better to rename some time UDFs as follows?&lt;/p&gt;

&lt;p&gt;getMonth -&amp;gt; getMonthOfYear&lt;br/&gt;
getDay -&amp;gt; getDayOfMonth (do we need getDayOfWeek and getDayOfYear as well?)&lt;br/&gt;
getHour -&amp;gt; getHourOfDay&lt;br/&gt;
getMinute -&amp;gt; getMinuteOfHour&lt;br/&gt;
getSecond -&amp;gt; getSecondOfMinute&lt;br/&gt;
getMilliSecond -&amp;gt; getMilliOfSecond&lt;/p&gt;

&lt;p&gt;The changes will make UDFs&apos; names longer but clearer.&lt;/p&gt;</comment>
                            <comment id="13436587" author="zjshen" created="Fri, 17 Aug 2012 08:01:26 +0100"  >&lt;p&gt;Hi Thejas,&lt;/p&gt;

&lt;p&gt;I&apos;ve updated the patch again. I&apos;ll be sorry if it disturbs your review of the code. In the latest version, I added three more datetime related UDFs and related test cases according to Russell&apos;s suggestion:&lt;/p&gt;

&lt;p&gt;1. WeeksBetween&lt;br/&gt;
2. GetWeek&lt;br/&gt;
3. GetWeekYear&lt;/p&gt;

&lt;p&gt;In addition, I modify the code of XXXXBetween UDFs. Previously, all the UDFs in this category leverages joda to compute the interval. While joda can only return the integer interval, the actual interval is likely to be so big that it has to be stored in a long variable. Therefore, for the datetime fields of fixed length:&lt;/p&gt;

&lt;p&gt;1. MilliSecondsBetween&lt;br/&gt;
2. SecondsBetween&lt;br/&gt;
3. MinutesBetween&lt;br/&gt;
4. HoursBetween&lt;br/&gt;
5. DaysBetween&lt;br/&gt;
6. WeeksBetween&lt;/p&gt;

&lt;p&gt;I adopted my our computation methods. On the other side, fot the datetime fields of flexible length:&lt;/p&gt;

&lt;p&gt;1. MonthsBetween&lt;br/&gt;
2. YearsBetween&lt;/p&gt;

&lt;p&gt;I keep to the joda methods. We may improve this later.&lt;/p&gt;

&lt;p&gt;At last, I remove the DiffDate UDF, because it is the same as DaysBetween.&lt;/p&gt;</comment>
                            <comment id="13440851" author="thejas" created="Fri, 24 Aug 2012 02:21:54 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1314&quot; title=&quot;Add DateTime Support to Pig&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1314&quot;&gt;&lt;del&gt;PIG-1314&lt;/del&gt;&lt;/a&gt;-7.patch committed to trunk! Thanks Zhijie.&lt;/p&gt;

&lt;p&gt;We need to update the documentation regarding this change. Can you please upload a new patch for that ? To see generated docs, run - ant -Dforrest.home=&amp;lt;Forrest installation dir&amp;gt; docs. The files to be edited are under - trunk/src/docs/src/documentation/ .&lt;/p&gt;

&lt;p&gt;We should also add a few end to end test cases for datetime. See &lt;a href=&quot;https://cwiki.apache.org/confluence/display/PIG/HowToTest#HowToTest-EndtoendTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/PIG/HowToTest#HowToTest-EndtoendTesting&lt;/a&gt; . We should have a few queries that do some of the basic operations on date time, and queries that have order-by , group and join on date fields. &lt;br/&gt;
These can be submitted as multiple patches.  &lt;/p&gt;</comment>
                            <comment id="13440858" author="thejas" created="Fri, 24 Aug 2012 02:27:57 +0100"  >&lt;p&gt;We also need to have some test cases that set the timezone property. This might not be easy to do in the e2e framework, so unit test cases are better candidate for this. Please let me know if you need any help.&lt;/p&gt;</comment>
                            <comment id="13440860" author="zjshen" created="Fri, 24 Aug 2012 02:29:19 +0100"  >&lt;p&gt;Hi Thejas, let me do that.&lt;/p&gt;</comment>
                            <comment id="13443614" author="julienledem" created="Tue, 28 Aug 2012 23:51:22 +0100"  >&lt;p&gt;Hi Thejas,&lt;br/&gt;
this commit added JobControlCompiler.java.orig which I suspect is not what you intended.&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/JobControlCompiler.java.orig?view=log&amp;amp;pathrev=1376800&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/JobControlCompiler.java.orig?view=log&amp;amp;pathrev=1376800&lt;/a&gt;&lt;br/&gt;
Could you double check?&lt;br/&gt;
Thanks, Julien&lt;/p&gt;</comment>
                            <comment id="13443630" author="thejas" created="Wed, 29 Aug 2012 00:06:29 +0100"  >&lt;p&gt;Yes, that was not intentional. Deleted JobControlCompiler.java.orig in svn.&lt;/p&gt;</comment>
                            <comment id="13476519" author="dvryaboy" created="Mon, 15 Oct 2012 23:18:24 +0100"  >&lt;p&gt;A chunk of this is committed, and it&apos;s not clear what&apos;s left to do. Can we close this and create a new ticket for the remaining work?&lt;/p&gt;</comment>
                            <comment id="13476562" author="thejas" created="Tue, 16 Oct 2012 00:20:29 +0100"  >&lt;p&gt;As Dmitriy suggested, closing this jira and opened new ones for remaining work - &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2980&quot; title=&quot;documentation for DateTime datatype&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2980&quot;&gt;&lt;del&gt;PIG-2980&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2981&quot; title=&quot;add e2e tests for DateTime  data type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2981&quot;&gt;PIG-2981&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2982&quot; title=&quot;add unit tests for DateTime type that test setting timezone&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2982&quot;&gt;&lt;del&gt;PIG-2982&lt;/del&gt;&lt;/a&gt; .&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12459712">PIG-1310</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12465690">PIG-1429</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12611930">PIG-2980</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12496081">AVRO-739</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12459949">HIVE-1269</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12611931">PIG-2981</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12611932">PIG-2982</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12612900">PIG-2996</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12459712">PIG-1310</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12465690">PIG-1429</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12531432" name="PIG-1314-1.patch" size="117820" author="zjshen" created="Fri, 8 Jun 2012 20:26:38 +0100"/>
                            <attachment id="12532561" name="PIG-1314-2.patch" size="151908" author="zjshen" created="Tue, 19 Jun 2012 16:04:23 +0100"/>
                            <attachment id="12535695" name="PIG-1314-3.patch" size="153430" author="zjshen" created="Mon, 9 Jul 2012 17:58:46 +0100"/>
                            <attachment id="12538316" name="PIG-1314-4.patch" size="230961" author="zjshen" created="Mon, 30 Jul 2012 09:10:21 +0100"/>
                            <attachment id="12540610" name="PIG-1314-5.patch" size="292371" author="zjshen" created="Mon, 13 Aug 2012 06:48:45 +0100"/>
                            <attachment id="12541201" name="PIG-1314-6.patch" size="294813" author="zjshen" created="Thu, 16 Aug 2012 09:48:26 +0100"/>
                            <attachment id="12541333" name="PIG-1314-7.patch" size="303187" author="zjshen" created="Fri, 17 Aug 2012 08:01:26 +0100"/>
                            <attachment id="12529881" name="joda_vs_builtin.zip" size="3823" author="zjshen" created="Sat, 26 May 2012 20:20:08 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12605169">PIG-2893</subtask>
                            <subtask id="12605296">PIG-2895</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 22 Mar 2010 19:02:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35766</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy3v4n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>56367</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>pig date datetime time support primitive type</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>