<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:09:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1926/PIG-1926.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1926] Sample/Limit should take scalar</title>
                <link>https://issues.apache.org/jira/browse/PIG-1926</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Currently, Limit, Sample only takes a constant. It would be better we can use a scalar in the place of constant. Eg:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
a = load &apos;a.txt&apos;;
b = group a all;
c = foreach b generate COUNT(a) as sum;
d = order a by $0;
e = limit d c.sum/100;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a candidate project for Google summer of code 2011. More information about the program can be found at &lt;a href=&quot;http://wiki.apache.org/pig/GSoc2011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/GSoc2011&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12501972">PIG-1926</key>
            <summary>Sample/Limit should take scalar</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="azaroth">Gianmarco De Francisci Morales</assignee>
                                    <reporter username="daijy">Daniel Dai</reporter>
                        <labels>
                            <label>gsoc2011</label>
                    </labels>
                <created>Mon, 21 Mar 2011 19:26:44 +0000</created>
                <updated>Thu, 26 Apr 2012 21:32:58 +0100</updated>
                            <resolved>Thu, 7 Jul 2011 01:30:15 +0100</resolved>
                                                    <fixVersion>0.10.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13009714" author="azaroth" created="Tue, 22 Mar 2011 16:53:02 +0000"  >&lt;p&gt;This looks quite useful.&lt;br/&gt;
If Ciemiewicz is already working on Reservoir sampling, I think I will apply for this one.&lt;br/&gt;
I assume there will probably be some integration point between the two projects.&lt;/p&gt;</comment>
                            <comment id="13012424" author="azaroth" created="Tue, 29 Mar 2011 11:59:34 +0100"  >&lt;p&gt;Hi, I have drafted my proposal for this project.&lt;br/&gt;
I assumed Daniel would be the mentor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://socghop.appspot.com/gsoc/proposal/review/google/gsoc2011/azaroth/1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://socghop.appspot.com/gsoc/proposal/review/google/gsoc2011/azaroth/1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any comment is highly appreciated.&lt;/p&gt;</comment>
                            <comment id="13038167" author="azaroth" created="Mon, 23 May 2011 20:50:51 +0100"  >&lt;p&gt;First implementation of the feature.&lt;br/&gt;
Focusing on LIMIT for now.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Modified the grammar to &lt;b&gt;also&lt;/b&gt; allow an expression in LIMIT.&lt;br/&gt;
    Retained old behavior and code-path for constant expressions.&lt;br/&gt;
    The rule is split into 2 fragments to solve problems with ANTLR&apos;s syntactic predicates and local variables. (see The Definitive ANTLR Reference, 14.7 Issues with Actions and Syntactic Predicates, p.353)&lt;/li&gt;
	&lt;li&gt;Modified LOLimit to keep also an expression plan.&lt;br/&gt;
    Constant expressions have priority over expression plans. (even though both should never be set at the same time).&lt;/li&gt;
	&lt;li&gt;Modified LogicalPlanBuilder to allow creation of LOLimit in 2 steps.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The expression evaluation does not work yet because I need to modify POLimit accordingly, but it compiles, the changes do not disrupt the old behaviour and no runtime exception is thrown when using the new one.&lt;/p&gt;

&lt;p&gt;Next steps:&lt;br/&gt;
Modify POLimit to evaluate the expression.&lt;br/&gt;
Evaluate which changes are required in LogToPhyTranslationVisitor to correctly create POLimit.&lt;br/&gt;
Evaluate which changes are required in TypeCheckingRelVisitor to ensure type safety.&lt;br/&gt;
Evaluate which changes are required in MRCompiler to retain correct POLimit compilation&lt;br/&gt;
  (LimitOptimizer breaks the current modifications).&lt;/p&gt;

&lt;p&gt;There are some whitespace/format changes in the current patch due to automatic formatting.&lt;br/&gt;
Should I try to remove them?&lt;/p&gt;</comment>
                            <comment id="13040858" author="azaroth" created="Sun, 29 May 2011 20:11:20 +0100"  >&lt;p&gt;First working version for LIMIT.&lt;br/&gt;
POLimit correctly evaluates the limit at runtime.&lt;br/&gt;
AllExpressionVisitor visits LOLimit, discovers the scalar expression and correctly sets the plan.&lt;br/&gt;
Visitors do the visit only if the plan has been set, so the normal code path is not disrupted.&lt;/p&gt;


&lt;p&gt;Is there a consistent formatting template for Pig in order to make the patch more readable? (half of the modified lines are from the code formatter).&lt;/p&gt;

&lt;p&gt;Next steps:&lt;br/&gt;
Evaluate the interaction with optimizers.&lt;br/&gt;
Translate the script used for testing into a unit test for the feature.&lt;/p&gt;</comment>
                            <comment id="13041115" author="azaroth" created="Mon, 30 May 2011 13:42:42 +0100"  >&lt;p&gt;Modified TypeCheckingRelVisitor in order to correctly cast expression in LOLimit.&lt;br/&gt;
Now the visitor takes into account that LOLimit has an expression.&lt;br/&gt;
The return type of the expression must be Integer or Long.&lt;/p&gt;</comment>
                            <comment id="13042115" author="azaroth" created="Wed, 1 Jun 2011 12:27:10 +0100"  >&lt;p&gt;Addressed TestLogToPhyCompiler failure.&lt;br/&gt;
    TestLogToPhyCompiler.testLimit():&lt;br/&gt;
      Modified grammar file LogicalPlanGenerator.g to preserve previous AST structure.&lt;br/&gt;
      The previous modification disrupted tests that directly interacted with ASTs.&lt;br/&gt;
      The new grammar just adds expr() as a side option to the original limit_clause() rule.&lt;/p&gt;

&lt;p&gt;Addressed TestGrunt failure.&lt;br/&gt;
    Modified TypeCheckingRelVisitor in order to correctly cast expression in LOLimit.&lt;br/&gt;
    Visit the expression plan only if present.&lt;/p&gt;


&lt;p&gt;Disabled optimizer for variable LIMIT case.&lt;/p&gt;


&lt;p&gt;Added simple test for variable LIMIT.&lt;/p&gt;


&lt;p&gt;Attempt to fix things in MR layer:&lt;br/&gt;
    Added a limitPlan to MapReduceOper (not sure it&apos;s useful).&lt;br/&gt;
    Adapted the check on the existence of a limit in MROper&lt;br/&gt;
    Copy also the plan when creating a new POLimit in MRCompiler.&lt;/p&gt;


&lt;p&gt;TODO:&lt;br/&gt;
Test whether it works in non-local mode (how should I do that without a cluster?)&lt;br/&gt;
Evaluate what else to change in MR layer.&lt;/p&gt;</comment>
                            <comment id="13042205" author="thejas" created="Wed, 1 Jun 2011 15:46:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;Is there a consistent formatting template for Pig in order to make the patch more readable? (half of the modified lines are from the code formatter).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Officially, pig is supposed to follow the Oracle/Sun coding conventions - &lt;a href=&quot;http://wiki.apache.org/pig/HowToContribute&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/HowToContribute&lt;/a&gt;. But in that large list, only things like use of 4 tabs for indentation and limiting length of a line to around 80 chars is what is almost always followed. &lt;br/&gt;
Can you please try to disable auto-formatting and format only the sections of code that you are changing (cmd-i in eclipse on mac)? Otherwise, it is difficult to distinguish between a real change and formatting change.&lt;/p&gt;</comment>
                            <comment id="13042366" author="azaroth" created="Wed, 1 Jun 2011 20:04:56 +0100"  >&lt;p&gt;I tried to clean up the patch in order to make it more readable.&lt;br/&gt;
Please let me know if it is OK.&lt;/p&gt;</comment>
                            <comment id="13043181" author="thejas" created="Fri, 3 Jun 2011 03:29:12 +0100"  >&lt;p&gt;The new patch without the formatting changes is good, it is more readable. I am reviewing it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Test whether it works in non-local mode (how should I do that without a cluster?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;MiniCluster is used to test non-local mode. You can look at the test in - &lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/test/org/apache/pig/test/TestLimitAdjuster.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/pig/trunk/test/org/apache/pig/test/TestLimitAdjuster.java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13043444" author="azaroth" created="Fri, 3 Jun 2011 17:21:02 +0100"  >&lt;p&gt;Ported TestLimitVariable to use MiniCluster.&lt;br/&gt;
The test works also in MR mode.&lt;/p&gt;</comment>
                            <comment id="13044164" author="thejas" created="Sat, 4 Jun 2011 02:46:30 +0100"  >&lt;p&gt;Comments on the most recent patch -&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The expression in limit should be allowed to refer to columns only in scalar context, ie pig should give a proper error message when such a statement is created. A  Right now it allows the statement &quot;lim = limit l $0;&quot;, and that results in NPE . You can create a validation Visitor to check this, that gets called from PigServer.Graph.compile(lp).&lt;/li&gt;
	&lt;li&gt;If the expression in limit evaluates to bytearray, it can be implicitly cast to a long. This can be done in the typechecker.&lt;/li&gt;
	&lt;li&gt;The test files are missing. Maybe you forgot to include test dir in diff?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I still need to review the MRCompiler changes. &lt;/p&gt;

&lt;p&gt;Can you use a different file name for each patch (eg &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.5.patch), and also refer to that file name in your comments? That way it is easier to identify the downloaded patch files and associate them with the comments. &lt;/p&gt;</comment>
                            <comment id="13044183" author="thejas" created="Sat, 4 Jun 2011 04:36:06 +0100"  >&lt;p&gt;The following visitors also should visit the expression in limit -  DotLOPrinter,LogicalPlanPrinter,SchemaResetter,UidResetter.&lt;br/&gt;
MRCompiler changes look good, some additional changes would be required (for sort with limit) there once optimizations in LimitOptimizer are enabled.&lt;/p&gt;</comment>
                            <comment id="13044830" author="azaroth" created="Mon, 6 Jun 2011 14:07:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;The expression in limit should be allowed to refer to columns only in scalar context, ie pig should give a proper error message when such a statement is created. A Right now it allows the statement &quot;lim = limit l $0;&quot;, and that results in NPE . You can create a validation Visitor to check this, that gets called from PigServer.Graph.compile(lp).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks for pointing this out. I hadn&apos;t thought about this.&lt;br/&gt;
I suppose I should check that there is a scalar expression in the expression plan.&lt;br/&gt;
But this would disallow using UDFs, wouldn&apos;t it?&lt;br/&gt;
Is there another way to check the context of an expression?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If the expression in limit evaluates to bytearray, it can be implicitly cast to a long. This can be done in the typechecker.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Isn&apos;t this dangerous? We would arbitrarily cast the first 8 bytes of the array to long.&lt;br/&gt;
What if the byte array is larger/smaller than this?&lt;br/&gt;
What would be the use case for such a feature?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The test files are missing. Maybe you forgot to include test dir in diff?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes I forgot to add the file to svn. I re.added it in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.7.patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The following visitors also should visit the expression in limit - DotLOPrinter,LogicalPlanPrinter,SchemaResetter,UidResetter.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Addedd in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.7.patch&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;MRCompiler changes look good, some additional changes would be required (for sort with limit) there once optimizations in LimitOptimizer are enabled.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sort with limit is used only in MRCompiler, right?&lt;/p&gt;</comment>
                            <comment id="13045044" author="thejas" created="Mon, 6 Jun 2011 20:32:54 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I suppose I should check that there is a scalar expression in the expression plan.&lt;br/&gt;
But this would disallow using UDFs, wouldn&apos;t it?&lt;br/&gt;
Is there another way to check the context of an expression?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The columns will map to a ProjectExpression. If the visitor finds a ProjectExpression, it can throw an error.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Isn&apos;t this dangerous? We would arbitrarily cast the first 8 bytes of the array to long.&lt;br/&gt;
What if the byte array is larger/smaller than this?&lt;br/&gt;
What would be the use case for such a feature?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In pig the types are optional, and the default type is bytearray. bytearray is cast to other types based on the context in Typechecker. For example, see - &lt;a href=&quot;http://pig.apache.org/docs/r0.8.0/piglatin_ref2.html#Arithmetic+Operators&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://pig.apache.org/docs/r0.8.0/piglatin_ref2.html#Arithmetic+Operators&lt;/a&gt; &lt;br/&gt;
If the bytearray cannot be cast to long, you will get an error in Result.returnStatus . &lt;/p&gt;

&lt;p&gt;for example - &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
a = load &apos;x&apos; as (id, num);
fil = filter a by id == &apos;123&apos;; -- assuming &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; returns one row
b = load &apos;y&apos;;
lim = limit b fil.num ; -- fil.num should be &lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt; to &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In POLimit.getNext(Tuple t), while computing the value of the limit expression, the value of Result.returnStatus needs to be checked. If it is not STATUS_OK, it should give an error. The assert will give an error only if the assertions are explicitly enabled at runtime, so the assert should be replaced by a code that always throws an exception if the condition is not satisfied.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sort with limit is used only in MRCompiler, right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Are you asking if the changes for use of limit expression in sort are required only in MRCompiler ? Yes, thats the only place where change should be needed, apart from LimitOptimizer.&lt;/p&gt;
</comment>
                            <comment id="13046620" author="azaroth" created="Thu, 9 Jun 2011 16:37:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;The expression in limit should be allowed to refer to columns only in scalar context, ie pig should give a proper error message when such a statement is created. A Right now it allows the statement &quot;lim = limit l $0;&quot;, and that results in NPE . You can create a validation Visitor to check this, that gets called from PigServer.Graph.compile(lp).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.8.patch&lt;/p&gt;

&lt;p&gt;Added LimitVariableValidator visitor to validate variable limit expression.&lt;br/&gt;
      &amp;#8211; If a ProjectExpression is found (intead of a ScalarExpression) it throws a FrontendException&lt;br/&gt;
      &amp;#8211; Modified PigServer to call the visitor&lt;br/&gt;
      &amp;#8211; Added a test for this case in TestLimitVariable&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;If the expression in limit evaluates to bytearray, it can be implicitly cast to a long. This can be done in the typechecker.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.8.patch&lt;/p&gt;

&lt;p&gt;   &amp;#8211; Added implicit cast from bytearray to long in TypeCheckingRelVisitor&lt;br/&gt;
   &amp;#8211; Added test for it in TestLimitVariable&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;In POLimit.getNext(Tuple t), while computing the value of the limit expression, the value of Result.returnStatus needs to be checked. If it is not STATUS_OK, it should give an error. The assert will give an error only if the assertions are explicitly enabled at runtime, so the assert should be replaced by a code that always throws an exception if the condition is not satisfied.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.8.patch&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Added runtime check of expression result in POLimit&lt;/p&gt;

&lt;p&gt;TODO:&lt;br/&gt;
Exception refinement. Right now I throw mostly RuntimeExceptions.&lt;/p&gt;

&lt;p&gt;Discuss which modifications to MRCompiler are still needed.&lt;/p&gt;

&lt;p&gt;In my opinion optimizations at this stage are not mandatory, we can postpone them for later. As stated in the project, the important thing is that optimizers continue working for the constant case and do not break for the variable case.&lt;/p&gt;

&lt;p&gt;If you agree I would start working on SAMPLE.&lt;/p&gt;</comment>
                            <comment id="13047811" author="thejas" created="Sat, 11 Jun 2011 01:55:55 +0100"  >&lt;p&gt;I agree that limit optimizations can be supported for this new feature at a later time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.8.patch looks good. In testLimitVariableException1, can you also check for the error message in exception using Util.checkMessageInException ? &lt;br/&gt;
Can you also add two additional test cases ? -&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;test that checks for the error message when the limit expression evaluates to wrong expression type&lt;/li&gt;
	&lt;li&gt;test with limit in a nested foreach statement&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13049729" author="azaroth" created="Wed, 15 Jun 2011 12:35:30 +0100"  >&lt;p&gt;Added support and test for nested limit variable in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.9.patch.&lt;/p&gt;</comment>
                            <comment id="13053706" author="azaroth" created="Thu, 23 Jun 2011 09:25:16 +0100"  >&lt;p&gt;Attaching &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.10.patch:&lt;br/&gt;
Implemented support and tests for Sample.&lt;br/&gt;
Fixed a problem with syntactic predicates in Limit, now it does not break on inline_op.&lt;/p&gt;

&lt;p&gt;All tests pass on my machine.&lt;br/&gt;
We can call this a release candidate.&lt;br/&gt;
I think it is ready for review.&lt;/p&gt;</comment>
                            <comment id="13054764" author="thejas" created="Sat, 25 Jun 2011 01:02:06 +0100"  >&lt;p&gt;There is a conflict in LogicalPlanBuilder.java, when the patch is applied to latest trunk. LimitVariableValidator.java is missing from the patch. Can you please update your svn tree and regenerate the patch ? &lt;/p&gt;</comment>
                            <comment id="13055453" author="azaroth" created="Mon, 27 Jun 2011 11:30:56 +0100"  >&lt;p&gt;Attaching &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.11.patch&lt;/p&gt;

&lt;p&gt;Rebased my work on latest trunk to solve the conflict.&lt;br/&gt;
Refined exception handling for LimitVariableValidator.&lt;br/&gt;
Added a test for exception thrown by TypeCheckingRelVisitor in TestLimitVariable (which I had forgot).&lt;/p&gt;</comment>
                            <comment id="13058984" author="thejas" created="Sat, 2 Jul 2011 06:40:50 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.11.patch - Sample also needs a check similar to that for Limit in LimitVariableValidator, to give error for statements such as - &quot;f = sample l $0;&quot;&lt;br/&gt;
LimitVariableValidator could be replaced by new class that does the check for both limit and sample operations. Can you also add a negative test case for this? Everything else looks good. &lt;/p&gt;</comment>
                            <comment id="13059456" author="azaroth" created="Mon, 4 Jul 2011 15:27:37 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.12.patch addresses Thejas&apos; comments:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Rebased my work on current trunk.&lt;/li&gt;
	&lt;li&gt;Renamed LimitVariableValidator to ScalarVariableValidator.&lt;br/&gt;
    The new validator checks for out-of-context references to scalar variables both in Limit and Sample. To make it work for Sample, I modified LOFilter to keep track of whether the operator is the result of a Sample command (otherwise I would disallow projections in Filter).&lt;/li&gt;
	&lt;li&gt;Added a test for the exception in TestSample&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13060954" author="thejas" created="Thu, 7 Jul 2011 01:29:48 +0100"  >&lt;p&gt;+1 for &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.12.patch. Two new files were missing apache license header files, I have added that (&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1926&quot; title=&quot;Sample/Limit should take scalar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1926&quot;&gt;&lt;del&gt;PIG-1926&lt;/del&gt;&lt;/a&gt;.12.1.patch) and committed it to trunk.&lt;/p&gt;

&lt;p&gt;Gianmarco, thanks for the contribution!&lt;/p&gt;</comment>
                            <comment id="13061260" author="azaroth" created="Thu, 7 Jul 2011 13:44:48 +0100"  >&lt;p&gt;Thank you!&lt;br/&gt;
It was a pleasure.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12513798">PIG-2156</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12483558" name="PIG-1926.10.patch" size="45942" author="azaroth" created="Thu, 23 Jun 2011 09:25:15 +0100"/>
                            <attachment id="12483925" name="PIG-1926.11.patch" size="52282" author="azaroth" created="Mon, 27 Jun 2011 11:30:56 +0100"/>
                            <attachment id="12485512" name="PIG-1926.12.1.patch" size="57666" author="thejas" created="Thu, 7 Jul 2011 01:29:48 +0100"/>
                            <attachment id="12485150" name="PIG-1926.12.patch" size="56018" author="azaroth" created="Mon, 4 Jul 2011 15:27:37 +0100"/>
                            <attachment id="12481564" name="PIG-1926.7.patch" size="34520" author="azaroth" created="Mon, 6 Jun 2011 14:07:16 +0100"/>
                            <attachment id="12481946" name="PIG-1926.8.patch" size="42209" author="azaroth" created="Thu, 9 Jun 2011 16:37:03 +0100"/>
                            <attachment id="12482652" name="PIG-1926.9.patch" size="48246" author="azaroth" created="Wed, 15 Jun 2011 12:35:30 +0100"/>
                            <attachment id="12481366" name="PIG-1926.patch" size="27033" author="azaroth" created="Fri, 3 Jun 2011 17:21:02 +0100"/>
                            <attachment id="12481128" name="PIG-1926.patch" size="26950" author="azaroth" created="Wed, 1 Jun 2011 20:04:56 +0100"/>
                            <attachment id="12481065" name="PIG-1926.patch" size="88512" author="azaroth" created="Wed, 1 Jun 2011 12:27:10 +0100"/>
                            <attachment id="12480842" name="PIG-1926.patch" size="77975" author="azaroth" created="Mon, 30 May 2011 13:42:42 +0100"/>
                            <attachment id="12480794" name="PIG-1926.patch" size="75628" author="azaroth" created="Sun, 29 May 2011 20:11:20 +0100"/>
                            <attachment id="12480148" name="PIG-1926.patch" size="28263" author="azaroth" created="Mon, 23 May 2011 20:50:51 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 22 Mar 2011 16:53:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>68113</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyauj3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97257</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Limit  and Sample now accept a variable (scalar) as argument. &lt;br/&gt;
&lt;br/&gt;
For example, the new Limit command allows the following syntax to get the top 1% of a sorted file:&lt;br/&gt;
[ a = LOAD &amp;#39;a.txt&amp;#39;; b = GROUP a all; c = FOREACH b GENERATE COUNT(a) AS sum; d = ORDER a BY $0; e = LIMIT d c.sum/100; ]&lt;br/&gt;
&lt;br/&gt;
Only scalar variables may be used in the expression in limit or sample, columns in the input relation for the operation cannot be used in the expression. A statement like [ e = LIMIT d $0; ] is invalid.&lt;br/&gt;
The new Sample command allows for the same syntax.&lt;br/&gt;
&lt;br/&gt;
Using a variable instead of a constant in Limit automatically disables most of the optimizations (only push-before-foreach is performed). More work is needed to enable optimizations for limit-after-sort, limit duplication before cross/union and limit merging.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>