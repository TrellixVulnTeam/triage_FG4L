<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:10:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-2672/PIG-2672.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-2672] Optimize the use of DistributedCache</title>
                <link>https://issues.apache.org/jira/browse/PIG-2672</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Pig currently copies jar files to a temporary location in hdfs and then adds them to DistributedCache for each job launched. This is inefficient in terms of &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Space - The jars are distributed to task trackers for every job taking up lot of local temporary space in tasktrackers.&lt;/li&gt;
	&lt;li&gt;Performance - The jar distribution impacts the job launch time.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12553182">PIG-2672</key>
            <summary>Optimize the use of DistributedCache</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="aniket486">Aniket Mokashi</assignee>
                                    <reporter username="rohini">Rohini Palaniswamy</reporter>
                        <labels>
                    </labels>
                <created>Fri, 27 Apr 2012 19:04:01 +0100</created>
                <updated>Tue, 3 Feb 2015 03:02:06 +0000</updated>
                            <resolved>Mon, 3 Feb 2014 21:59:28 +0000</resolved>
                                                    <fixVersion>0.13.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13263866" author="rohini" created="Fri, 27 Apr 2012 19:23:07 +0100"  >&lt;p&gt;Proposed Solution:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;For each user create a .pig directory. For eg: /user/rohini/.pig. Copy the pig libraries to /user/rohini/.pig/piglib/pig-&lt;span class=&quot;error&quot;&gt;&amp;#91;version&amp;#93;&lt;/span&gt;/ and then add them to distributed cache. If the jars are already present in hdfs, just add them to distributed cache.&lt;/li&gt;
	&lt;li&gt;Copy the user libraries to /user/rohini/.pig/userlib/jarname-&lt;span class=&quot;error&quot;&gt;&amp;#91;checksum|filesize&amp;#93;&lt;/span&gt;.jar and then add them to distributed cache.If the jar with same checksum is already present in hdfs, just add it to distributed cache.&lt;/li&gt;
	&lt;li&gt;This will allow shipping of jars/udfs only once to the cluster and prevent multiple copies in different locations in tasktracker.&lt;/li&gt;
	&lt;li&gt;Reasoning for copying the jar with the checksum or filesize included in the name is to avoid job failures due to overwriting of jars. For eg: if there is user jar, that is copied as part of one pig job. If the user runs another pig job with a modified version of the same jar while the old job is running, there will be a conflict. The cleanup job checks if the files in distributed cache have same timestamp as the original hdfs file and fail the job if that is not the case. So even if the old job&apos;s map/reduce task completed successfully it will fail in cleanup.&lt;/li&gt;
	&lt;li&gt;This solution can be a configuration. If turned off, it can revert to the old behaviour.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   We have used this approach for our dataloading application which runs close to &amp;gt;50K jobs everyday that shipped around 5 jars and this improved job launch performance quite a bit. With more number of jars in pig it should show more improvement in the performance. Currently pig takes a relatively long time to launch a job.  &lt;/p&gt;</comment>
                            <comment id="13263874" author="daijy" created="Fri, 27 Apr 2012 19:32:14 +0100"  >&lt;p&gt;Yes, this is inline with our observation in &lt;a href=&quot;https://issues.apache.org/jira/browse/HCATALOG-385&quot; title=&quot;Some e2e tests create large number of distributed cache entries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HCATALOG-385&quot;&gt;HCATALOG-385&lt;/a&gt;. Ship a new jar to hdfs will create a new entry in distributed cache, reuse them will not. &lt;/p&gt;

&lt;p&gt;More over, we see issues when there are too many jars in distributed cache (hadoop also unjar them), we run out of the inode.&lt;/p&gt;

&lt;p&gt;+1 for this change.&lt;/p&gt;</comment>
                            <comment id="13263946" author="rohini" created="Fri, 27 Apr 2012 21:36:25 +0100"  >&lt;p&gt;Yes. Pig also currently does DistributedCache.addFileToClassPath(or tmpfiles in jobconf). It should be DistributedCache.addArchiveToClassPath (or tmpjars in jobconf) instead. &lt;/p&gt;

&lt;p&gt;I have not seen unjar happening when you do DistributedCache.addArchiveToClassPath. &lt;/p&gt;</comment>
                            <comment id="13263952" author="daijy" created="Fri, 27 Apr 2012 21:47:27 +0100"  >&lt;p&gt;Which version of hadoop are you using? I also notice in some version of hadoop (eg, 0.23), it does not unjar, which sprawl some other issues such as &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2486&quot; title=&quot;python register command does not work in hadoop 0.23 when file path starts with &amp;quot;./&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2486&quot;&gt;&lt;del&gt;PIG-2486&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13263974" author="dvryaboy" created="Fri, 27 Apr 2012 22:17:50 +0100"  >&lt;p&gt;This would be a great addition.&lt;br/&gt;
Couple of proposed refinements to the design:&lt;/p&gt;

&lt;p&gt;1) same behavior should happen on the local client, for cases when users register jars from HDFS (no need to copy if a jar with same name+cksum is cached locally)&lt;br/&gt;
2) the directory should be .pig/jarcache/ or similar&lt;br/&gt;
3) we should be very explicit about documenting this behavior, and provide management tools for this cache, so people don&apos;t get surprised as this cache grows progressively bigger in size&lt;br/&gt;
4) it could be helpful to have a configurable cluster-level cache, instead or in addition to user-level cache, for cases when many users are using the same jar. There may be security concerns with that.&lt;/p&gt;</comment>
                            <comment id="13264004" author="daijy" created="Fri, 27 Apr 2012 22:49:24 +0100"  >&lt;p&gt;Sounds reasonable. Yes, for security reason, we can start with user level cache.&lt;/p&gt;</comment>
                            <comment id="13264035" author="daijy" created="Fri, 27 Apr 2012 23:18:59 +0100"  >&lt;p&gt;Also it sounds like a more general issue to Hadoop. I feel it is better Hadoop could solve this problem, which would benefit HCat, Hive, etc. We shall open a ticket in Hadoop.&lt;/p&gt;</comment>
                            <comment id="13264096" author="dvryaboy" created="Sat, 28 Apr 2012 00:23:59 +0100"  >&lt;p&gt;Can we do both? I can roll pig versions much faster than I can roll Hadoop versions (no restart required, fewer moving parts...)&lt;/p&gt;</comment>
                            <comment id="13264146" author="rohini" created="Sat, 28 Apr 2012 01:17:55 +0100"  >&lt;p&gt;Have used all versions of hadoop from 0.20, 0.20S to 23. Have never seen it unjarred till now. Verified by checking the cache directory of production task trackers of both 0.20.205 and 0.23. They are not unjarred and we are certainly using &quot;tmpjars&quot;. &lt;/p&gt;

&lt;p&gt; But looking at the code in TrackerDistributedCacheManager, I am wondering why it did not unjar. The code definitely seems to be unjarring. Confused and need to dig deeper. &lt;/p&gt;</comment>
                            <comment id="13264147" author="daijy" created="Sat, 28 Apr 2012 01:18:04 +0100"  >&lt;p&gt;Yes, even Hadoop agree to fix, it&apos;s a long time away. We can fix in Pig, and I will definitely port it to HCat, and maybe Hive.&lt;/p&gt;</comment>
                            <comment id="13670915" author="aniket486" created="Thu, 30 May 2013 23:48:44 +0100"  >&lt;p&gt;For unjar behavior, I think, hadoop does not unjar if it has &lt;a href=&quot;https://issues.apache.org/jira/browse/MAPREDUCE-967&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAPREDUCE-967&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13773507" author="aniket486" created="Fri, 20 Sep 2013 23:20:51 +0100"  >&lt;p&gt;I have attached a patch that that adds 2 configuration parameters- cluster.cache.location and user.cache.location.&lt;/p&gt;

&lt;p&gt;Jars are copied to &amp;lt;cache.location&amp;gt;/a/b/c/checksum-jarname.jar where a, b, c are first 3 characters of the checksum. When a new jar is registered, checksum is calculated and we check whether a jar with same name/checksum exists in the cache. If yes, copy to hdfs is avoided.&lt;/p&gt;

&lt;p&gt;Permissions to write to cache is managed by HDFS permissions. Also, its not possible to overwrite a jar using this mechanism. If jar changes, its checksum will also change and it will be a new jar in the cache. Removal of old jars is manual step- admins/users can list jars under the cache location and remove the ones that are very old. Alternatively, you can delete all the jars in the cache or change jar cache location and cache will be repopulated by running jobs.&lt;/p&gt;

&lt;p&gt;If this approach looks reasonable, I can add few more tests. Comments welcome!&lt;/p&gt;</comment>
                            <comment id="13773513" author="aniket486" created="Fri, 20 Sep 2013 23:23:16 +0100"  >&lt;p&gt;Note: &lt;a href=&quot;https://issues.apache.org/jira/browse/YARN-1492&quot; title=&quot;truly shared cache for jars (jobjar/libjar)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;YARN-1492&quot;&gt;HADOOP-9639&lt;/a&gt; has improved mechanism for this. However, this is still somewhat useful for users that are on old versions of hadoop.&lt;/p&gt;</comment>
                            <comment id="13773560" author="rohini" created="Fri, 20 Sep 2013 23:51:13 +0100"  >&lt;p&gt;I can take a look at this one. Can you put this up in review board please?&lt;/p&gt;</comment>
                            <comment id="13773636" author="dvryaboy" created="Sat, 21 Sep 2013 01:42:30 +0100"  >&lt;p&gt;Aniket, can we prefix the properties with &quot;pig.&quot;? That way we won&apos;t conflict with potential properties from Hadoop, and it&apos;s a little easier to analyze stuff when looking at the jobconf.&lt;/p&gt;</comment>
                            <comment id="13773662" author="aniket486" created="Sat, 21 Sep 2013 02:22:08 +0100"  >&lt;p&gt;RB: &lt;a href=&quot;https://reviews.apache.org/r/14274/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/14274/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13773663" author="aniket486" created="Sat, 21 Sep 2013 02:22:42 +0100"  >&lt;p&gt;Thanks Dmitriy! I will make those changes.&lt;/p&gt;</comment>
                            <comment id="13773665" author="aniket486" created="Sat, 21 Sep 2013 02:27:57 +0100"  >&lt;p&gt;Oh, actually I just noticed, the config names are - pig.shared.cluster.cache.location, pig.shared.user.cache.location.&lt;/p&gt;</comment>
                            <comment id="13773742" author="knoguchi" created="Sat, 21 Sep 2013 07:38:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;Note: &lt;a href=&quot;https://issues.apache.org/jira/browse/YARN-1492&quot; title=&quot;truly shared cache for jars (jobjar/libjar)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;YARN-1492&quot;&gt;HADOOP-9639&lt;/a&gt; has improved mechanism for this. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I haven&apos;t read the patch but I thought &lt;a href=&quot;https://issues.apache.org/jira/browse/YARN-1492&quot; title=&quot;truly shared cache for jars (jobjar/libjar)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;YARN-1492&quot;&gt;HADOOP-9639&lt;/a&gt; introduces a security hole unless NodeManager does the SHA-1 level checksumming.&lt;/p&gt;</comment>
                            <comment id="13774093" author="rohini" created="Sun, 22 Sep 2013 22:26:38 +0100"  >&lt;p&gt;Not able to access the review board. Is it just me or review board is down?&lt;/p&gt;</comment>
                            <comment id="13774109" author="cheolsoo" created="Sun, 22 Sep 2013 23:43:48 +0100"  >&lt;p&gt;It seems down to me as well.&lt;/p&gt;</comment>
                            <comment id="13776038" author="cheolsoo" created="Tue, 24 Sep 2013 07:34:21 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;, I made some minor comments in the RB. Mostly coding style-related. I haven&apos;t tested the patch on real cluster, but can I assume you did? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rohini&quot; class=&quot;user-hover&quot; rel=&quot;rohini&quot;&gt;Rohini Palaniswamy&lt;/a&gt;, please take another look. You&apos;re more familiar with hdfs than I am.&lt;/p&gt;</comment>
                            <comment id="13776429" author="cheolsoo" created="Tue, 24 Sep 2013 17:10:38 +0100"  >&lt;p&gt;Forgot to mention. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;, can you please document this? Perhaps in the &lt;a href=&quot;http://pig.apache.org/docs/r0.11.0/perf.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;performance and efficiency page&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13776452" author="knoguchi" created="Tue, 24 Sep 2013 17:30:08 +0100"  >&lt;p&gt;On the secure hadoop environment, this patch would basically create a hole and allow any users having write access to PIG_SHARED_CLUSTER_CACHE_LOCATION to  become other users (who are sharing this cache location).&lt;/p&gt;

&lt;p&gt;For now, can we instead limit the patch to /user/&amp;lt;username&amp;gt;/.pig or .staging add have extra check on permission 700 ?&lt;/p&gt;

&lt;p&gt;I understand that you can make PIG_SHARED_CLUSTER_CACHE_LOCATION only writable by admin but I&apos;m afraid this patch would make it too easy to misconfigure.&lt;/p&gt;</comment>
                            <comment id="13776910" author="aniket486" created="Wed, 25 Sep 2013 00:24:01 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cheolsoo&quot; class=&quot;user-hover&quot; rel=&quot;cheolsoo&quot;&gt;Cheolsoo Park&lt;/a&gt;, thanks for your comments. I will work on the patch to make it more production ready. I have tried it on a simple job, but not in production yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knoguchi&quot; class=&quot;user-hover&quot; rel=&quot;knoguchi&quot;&gt;Koji Noguchi&lt;/a&gt;, I do not understand your concern here. Currently jars get copied to /tmp/temp-&amp;lt;random&amp;gt;/ which can be written by all users. I do not see how jar cache is less secure than the current approach. In fact, any misconfiguration is still protected by SHA (hard to collide).&lt;/p&gt;

&lt;p&gt;I do not see any benefit of restricting to use /user/&amp;lt;username&amp;gt;/.pig as its not mandatory to have that directory secure for users (Am I right?). If you look closely, cluster cache and user cache have exactly similar behavior. The only reason we have two is for easy configuration and better dedup of jars across the cluster.&lt;/p&gt;</comment>
                            <comment id="13776988" author="rohini" created="Wed, 25 Sep 2013 01:24:58 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Currently jars get copied to /tmp/temp-&amp;lt;random&amp;gt;/ which can be written by all users&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;   No. They do not. They go into /user/&amp;lt;username&amp;gt;/.staging which is readable and writable only by that user. Even if it were to go to /tmp/temp- (where the intermediate files now go), we have the dfs.umaskmode set to 077 so only the user has rwx and no one else has.&lt;/p&gt;

&lt;p&gt;      It is good to have shared cluster location, but if someone accidentally deletes that directory then all user jobs already launched will fail. It would be good if you can add the check to see if the cachedir is writable before trying to create it there. People with a multi-tenant environment like us can then chose to place frequently used jars in the shared cluster location but protect it with 755 so that others don&apos;t write into it.&lt;/p&gt;</comment>
                            <comment id="13777001" author="rohini" created="Wed, 25 Sep 2013 01:36:30 +0100"  >&lt;p&gt;I guess you don&apos;t have to check for permissions as you are anyways returning null on a IOException. &lt;/p&gt;</comment>
                            <comment id="13777040" author="knoguchi" created="Wed, 25 Sep 2013 02:23:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;In fact, any misconfiguration is still protected by SHA (hard to collide).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;SHA is meaningless here unless verified by the trusted entity. (NodeManager or TaskTracker in &lt;a href=&quot;https://issues.apache.org/jira/browse/YARN-1492&quot; title=&quot;truly shared cache for jars (jobjar/libjar)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;YARN-1492&quot;&gt;HADOOP-9639&lt;/a&gt;).&lt;br/&gt;
Say abc.jar was installed locally. UserEvil can figure out what the shared hdfs path is since he has access to the local file.&lt;br/&gt;
Then UserEvil can upload any kind of jar with that filename as long as he is the first user to upload.&lt;/p&gt;

&lt;p&gt;Now, any users trying to use this local abc.jar would be unknowingly executing the random jar uploaded by this UserEvil.&lt;/p&gt;</comment>
                            <comment id="13779085" author="aniket486" created="Thu, 26 Sep 2013 19:49:27 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rohini&quot; class=&quot;user-hover&quot; rel=&quot;rohini&quot;&gt;Rohini Palaniswamy&lt;/a&gt;, from the current code, we have-&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; 
Path dst = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Path(FileLocalizer.getTemporaryPath(pigContext).toUri().getPath(), suffix); 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hence, files are (by default) copied to /tmp/temp-&amp;lt;random&amp;gt;/. I do not see a way to configure it to a relative path, but I might be wrong.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;UserEvil can figure out what the shared hdfs path is since he has access to the local file.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is true even today where UserEvil can look into jobconf to find the location of jars and replace whatever jars if wanted. Even if they are protected like Rohini explained earlier, still the protection is coming from HDFS and not pig.&lt;/p&gt;

&lt;p&gt;I&apos;m deliberately avoiding in permission checks in this code path. In terms of security, I feel that this is no worse than what we have right now.&lt;/p&gt;

&lt;p&gt;Next steps-&lt;br/&gt;
1. Address code review comments from RB and submit a fresh patch.&lt;br/&gt;
2. Run this for several jobs in practice and ensure there are no bad/side effects.&lt;br/&gt;
3. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cheolsoo&quot; class=&quot;user-hover&quot; rel=&quot;cheolsoo&quot;&gt;Cheolsoo Park&lt;/a&gt;, can you please help me with e2e for this?&lt;br/&gt;
4. Open a documentation jira and explain how this works in pig docs.&lt;/p&gt;

&lt;p&gt;Anything else I missed?&lt;/p&gt;</comment>
                            <comment id="13779099" author="cheolsoo" created="Thu, 26 Sep 2013 20:01:32 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;, are you asking me to run the e2e tests with your new patch? Yes.&lt;/p&gt;</comment>
                            <comment id="13779175" author="rohini" created="Thu, 26 Sep 2013 21:19:41 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;&lt;br/&gt;
   It is a issue that we need to fix. We need to set 700 on FileLocalizer.relativeRoot when we create it. &lt;/p&gt;

&lt;p&gt;If you look at &lt;a href=&quot;http://svn.apache.org/viewvc/hadoop/common/branches/branch-1.0/src/mapred/org/apache/hadoop/mapreduce/JobSubmissionFiles.java?revision=1206848&amp;amp;view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/hadoop/common/branches/branch-1.0/src/mapred/org/apache/hadoop/mapreduce/JobSubmissionFiles.java?revision=1206848&amp;amp;view=markup&lt;/a&gt; getStagingDir() method they check and throw error if staging dir where jars are created is not 700 and owned by that user. We need to add that check also for the user cache location else it is a security hole.  &lt;/p&gt;
</comment>
                            <comment id="13779236" author="jlowe" created="Thu, 26 Sep 2013 22:06:23 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m deliberately avoiding in permission checks in this code path. In terms of security, I feel that this is no worse than what we have right now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A shared cache where anyone can write is indeed worse.  Today jars are being uploaded to HDFS into a private staging directory where no other normal user can interfere.  If the staging directory were to become publicly writeable then it becomes trivial to compromise all users trying to run the same pig jar using a scheme like &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knoguchi&quot; class=&quot;user-hover&quot; rel=&quot;knoguchi&quot;&gt;Koji Noguchi&lt;/a&gt; pointed out.  I don&apos;t see how one can accomplish the same level of havoc today.  Even if there&apos;s a window in the local filesystem where one can hijack a jar, that requires access to the same node where the user is launching the job.  In the publicly-writeable shared cache scheme, one only needs access to HDFS from any node and clients on all nodes using the shared cache can be compromised.&lt;/p&gt;

&lt;p&gt;Besides malicious users, the shared cache can also be accidentally made ineffective by clients.  For example, a user with a restrictive umask (e.g.: 077) uploads a jar to the shared cache, and all the directories and files were created such that others can&apos;t read them.  Now because the permissions are incorrect any other user can&apos;t share the file and any other user&apos;s file that happens to have the same initial digit(s) in its hash can&apos;t be uploaded to the shared cache.  And then there&apos;s the client that deletes files in-use by other clients, breaking their jobs.&lt;/p&gt;

&lt;p&gt;In short, shared public caches that are publicly writeable are going to be problematic, especially in secure setups.  As such I think there should at least be some documentation describing the risks of enabling it and how it could be used in a read-only manner for sharing securely, i.e.: shared cache is publicly readable but only writeable by admins who manually maintain the entries in the shared cache.&lt;/p&gt;</comment>
                            <comment id="13779239" author="aniket486" created="Thu, 26 Sep 2013 22:10:29 +0100"  >&lt;blockquote&gt;&lt;p&gt;Today jars are being uploaded to HDFS into a private staging directory where no other normal user can interfere&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where in pig do we mark this private? can you point me to the line number? If its outside of pig, we can do the same even now.&lt;/p&gt;</comment>
                            <comment id="13779244" author="aniket486" created="Thu, 26 Sep 2013 22:12:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;We need to set 700 on FileLocalizer.relativeRoot when we create it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If its 700, others cannot read the cache. User can only share jar with himself.&lt;/p&gt;</comment>
                            <comment id="13779247" author="rohini" created="Thu, 26 Sep 2013 22:14:58 +0100"  >&lt;blockquote&gt;&lt;p&gt;can you point me to the line number? If its outside of pig, we can do the same even now.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;   job.jar, job.xml, etc are copied to /user/&amp;lt;username&amp;gt;/.staging by JobClient. Refer to my previous comment for the source code reference in hadoop.&lt;/p&gt;</comment>
                            <comment id="13779254" author="rohini" created="Thu, 26 Sep 2013 22:16:15 +0100"  >&lt;p&gt;FileLocalizer.relativeRoot is not the cache location. It is the directory created for each pig script run to store temporary data. We need to set 700 on it. &lt;/p&gt;</comment>
                            <comment id="13779259" author="aniket486" created="Thu, 26 Sep 2013 22:17:50 +0100"  >&lt;p&gt;Currently, jars are copied to Path dst = new Path(FileLocalizer.getTemporaryPath(pigContext).toUri().getPath(), suffix);.&lt;/p&gt;</comment>
                            <comment id="13779264" author="aniket486" created="Thu, 26 Sep 2013 22:22:10 +0100"  >&lt;p&gt;I think we are confusing job.jar with shipped jars.&lt;/p&gt;</comment>
                            <comment id="13779273" author="rohini" created="Thu, 26 Sep 2013 22:29:25 +0100"  >&lt;p&gt;To clarify:&lt;br/&gt;
  1) In 0.10 all jars (including pig and registered jars) were packaged into job.jar which was copied into /user/&amp;lt;username&amp;gt;/.staging by JobClient. In 0.11, registered extra jars are copied to FileLocalizer.getTemporaryPath(pigContext) which is a directory under FileLocalizer.relativeRoot. But still job.jar is copied into /user/&amp;lt;username&amp;gt;/.staging by JobClient. To address the FileLocalizer.getTemporaryPath security we need to set 700 on FileLocalizer.relativeRoot. This is an existing security problem in 0.11.  With your patch you copy to a shared or user cache location and if both are not configured you still fall back to FileLocalizer.getTemporaryPath, so it needs to be addressed.&lt;br/&gt;
  2) Second thing is writing to a user cache location which is introduced in this patch. Before writing to it we need to check if it is 700 and owned by that user similar to the check done by JobClient for /user/&amp;lt;username&amp;gt;/.staging.&lt;/p&gt;</comment>
                            <comment id="13779279" author="aniket486" created="Thu, 26 Sep 2013 22:40:38 +0100"  >&lt;p&gt;Thanks everyone for the comments!&lt;/p&gt;

&lt;p&gt;We might need little more refactoring before we change permissions on temporary path. Currently FileLocalizer.getTemporaryPath(pigContext); is getting used for several things. (+for intermediate data, I think). Let me open a jira to track that.&lt;/p&gt;

&lt;p&gt;I will try with your approach (shared user cache) and submit a new patch soon.&lt;/p&gt;</comment>
                            <comment id="13779290" author="rohini" created="Thu, 26 Sep 2013 22:51:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;We might need little more refactoring before we change permissions on temporary path. Currently FileLocalizer.getTemporaryPath(pigContext); is getting used for several things. (+for intermediate data, I think)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;  Yes. All intermediate data go into that. Setting 700 should not cause problems but ElementDescriptor does not have methods for chmod and that would require refactoring and that is what you probably meant. So a separate jira sounds good. &lt;/p&gt;</comment>
                            <comment id="13791978" author="aniket486" created="Thu, 10 Oct 2013 21:59:23 +0100"  >&lt;p&gt;Opened: &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-3511&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-3511&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13877136" author="aniket486" created="Tue, 21 Jan 2014 03:03:53 +0000"  >&lt;p&gt;Another attempt-&lt;br/&gt;
Using stagingDir = JobSubmissionFiles.getStagingDir(jobClient, conf); to copy the shared files. Obviously, this is not the perfect solution to this problem and &lt;a href=&quot;https://issues.apache.org/jira/browse/YARN-1492&quot; title=&quot;truly shared cache for jars (jobjar/libjar)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;YARN-1492&quot;&gt;YARN-1492&lt;/a&gt; will present a better fix for this.&lt;/p&gt;</comment>
                            <comment id="13877337" author="aniket486" created="Tue, 21 Jan 2014 08:47:19 +0000"  >&lt;p&gt;I realized this fix won&apos;t work with Hadoop 2 (at least easily). Let me try to do some shims to fix it.&lt;/p&gt;

&lt;p&gt;Meantime, please comment on the approach.&lt;/p&gt;</comment>
                            <comment id="13879461" author="aniket486" created="Thu, 23 Jan 2014 05:43:35 +0000"  >&lt;p&gt;Another proposal: We create /tmp/$user.name/jarcache with 700 and use it as a user level jarcache. Also, every time a jar is used from jar case we do fs.setTimes(jarpath, now, now) to update atime, mtime of the jar (to avoid cleanups).&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rohini&quot; class=&quot;user-hover&quot; rel=&quot;rohini&quot;&gt;Rohini Palaniswamy&lt;/a&gt; thoughts?&lt;/p&gt;</comment>
                            <comment id="13879468" author="rohini" created="Thu, 23 Jan 2014 05:51:49 +0000"  >&lt;p&gt;&amp;gt; JobSubmissionFiles.getStagingDir(jobClient, conf);  or We create /tmp/$user.name/jarcache &lt;br/&gt;
     I think we should create /user/$user.name/.pig/filecache (Not calling jarcache as we can have files used in streaming as well) and set the permissions of filecache to 700. That way it is more cleaner (as long-term user data is in user directory) and also don&apos;t have to rely on hadoop api&apos;s to get .staging dir location.  Please do not modify the mtime of the jar. If a distributed cache jar mtime is modified when a job completes, hadoop fails the job.&lt;/p&gt;</comment>
                            <comment id="13879473" author="aniket486" created="Thu, 23 Jan 2014 06:02:46 +0000"  >&lt;p&gt;Hadoop uses following code to get stagingDir&lt;/p&gt;
{format}&lt;br/&gt;
Path stagingRootDir =&lt;br/&gt;
      new Path(conf.get(&quot;mapreduce.jobtracker.staging.root.dir&quot;,&lt;br/&gt;
            &quot;/tmp/hadoop/mapred/staging&quot;));{format}
&lt;p&gt;which indicates that /user/$user.name may not be available (configured). I can use staging dir as stagingRootDir + user + &quot;/.pig&quot;. Would that work?&lt;/p&gt;</comment>
                            <comment id="13879989" author="knoguchi" created="Thu, 23 Jan 2014 15:31:54 +0000"  >&lt;p&gt;Thanks Aniket!  I like the non-share approach.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;(to avoid cleanups).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Had a discussion with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jlowe&quot; class=&quot;user-hover&quot; rel=&quot;jlowe&quot;&gt;Jason Lowe&lt;/a&gt; about this before. In our cluster, longest job a user can run on our cluster is 1 week. (due to delegation token limit we set).  With this assumption, we can create a cache under .Trash as below.&lt;/p&gt;

&lt;p&gt;&amp;lt;noformat&amp;gt;&lt;br/&gt;
$ echo /user/$USER/.Trash/$(date -d &apos;next monday + 1week&apos; +&apos;%y%m%d&apos;000000)&lt;br/&gt;
/user/knoguchi/.Trash/140203000000   (this is in 0.23/2.* format.  0.20 uses slightly different format)&lt;br/&gt;
&amp;lt;noformat&amp;gt;&lt;/p&gt;

&lt;p&gt;This way, files are reused for 1 week and then thrown away later automatically by a Trash cleanup.&lt;br/&gt;
We threw away the idea for various reasons, but just wanted to share here.&lt;/p&gt;</comment>
                            <comment id="13880051" author="rohini" created="Thu, 23 Jan 2014 16:33:22 +0000"  >&lt;p&gt;stagingRootDir + user + &quot;/.pig&quot; is good. But if stagingRootDir starts with fs.getHomeDirectory(), can you make it stagingRootDir + &quot;/.pig&quot;. This will avoid creating /user/&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;/.pig. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This way, files are reused for 1 week and then thrown away later automatically by a Trash cleanup.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;   The cache will be reused by other pig jobs during and after the week and we will not be modifying the time of the files. So we can&apos;t put that under .Trash as it will be cleaned up.&lt;/p&gt;</comment>
                            <comment id="13880071" author="knoguchi" created="Thu, 23 Jan 2014 16:54:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;The cache will be reused by other pig jobs during and after the week and we will not be modifying the time of the files. So we can&apos;t put that under .Trash as it will be cleaned up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe I didn&apos;t explain it well enough.&lt;br/&gt;
Tasks will always use the cache that is scheduled for deletion next next Monday.  &lt;br/&gt;
Given that the longest job (on our cluster) is 1 week, there won&apos;t be any jobs using that cache when it&apos;s expunged.&lt;/p&gt;</comment>
                            <comment id="13880084" author="dvryaboy" created="Thu, 23 Jan 2014 17:05:39 +0000"  >&lt;p&gt;Seems like there is a lot of effort being spent here reinventing what is already designed for the general use case in the yarn ticket Aniket linked. Lets not let best be enemy of the good, and just get something in that will be decent for most cases, and if people don&apos;t like it, they can turn it off. This is an intermediate solution until that yarn patch goes in, at which point all of this becomes moot. &lt;/p&gt;</comment>
                            <comment id="13883478" author="dvryaboy" created="Mon, 27 Jan 2014 22:53:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knoguchi&quot; class=&quot;user-hover&quot; rel=&quot;knoguchi&quot;&gt;Koji Noguchi&lt;/a&gt; in the spirit of keeping things moving &amp;#8211; can we commit this? You can feel free to turn the behavior off on your cluster if you are worried about the 1 week boundary. If that&apos;s the case, feel free to open another ticket to follow up, or to make sure that &lt;a href=&quot;https://issues.apache.org/jira/browse/YARN-1492&quot; title=&quot;truly shared cache for jars (jobjar/libjar)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;YARN-1492&quot;&gt;YARN-1492&lt;/a&gt; fixes your issue.&lt;/p&gt;</comment>
                            <comment id="13883485" author="rohini" created="Mon, 27 Jan 2014 22:59:30 +0000"  >&lt;p&gt;To me, keeping user home directory instead of .Trash is ok. I can discuss with Koji offline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=aniket486&quot; class=&quot;user-hover&quot; rel=&quot;aniket486&quot;&gt;Aniket Mokashi&lt;/a&gt;,&lt;br/&gt;
    I did not see that there was an updated patch uploaded till now. I was waiting for a new patch from you in review board. If you could update the review board with the recent patch, will take a quick look and do +1. Hard to review plain patch as the patch is big.&lt;/p&gt;</comment>
                            <comment id="13883490" author="knoguchi" created="Mon, 27 Jan 2014 23:03:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;Koji Noguchi in the spirit of keeping things moving &#8211; can we commit this? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure sure.  I&apos;m fine as long as we don&apos;t share the jar with multiple users.  I didn&apos;t mean to block Aniket&apos;s latest patch.  Sorry about that.&lt;/p&gt;

&lt;p&gt;As for committing, I didn&apos;t look at the code in details so I&apos;m assuming you or someone will give +1 on the patch.  Thanks again for listening to my concerns.&lt;/p&gt;</comment>
                            <comment id="13883494" author="aniket486" created="Mon, 27 Jan 2014 23:08:48 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rohini&quot; class=&quot;user-hover&quot; rel=&quot;rohini&quot;&gt;Rohini Palaniswamy&lt;/a&gt;, I should do it today or tomorrow.&lt;/p&gt;</comment>
                            <comment id="13889958" author="rohini" created="Mon, 3 Feb 2014 21:46:40 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13889969" author="aniket486" created="Mon, 3 Feb 2014 21:59:09 +0000"  >&lt;p&gt;Committed to trunk. Thanks everyone for your inputs and thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rohini&quot; class=&quot;user-hover&quot; rel=&quot;rohini&quot;&gt;Rohini Palaniswamy&lt;/a&gt; for the review.&lt;/p&gt;</comment>
                            <comment id="13907447" author="brocknoland" created="Thu, 20 Feb 2014 20:18:41 +0000"  >&lt;p&gt;FYI in in &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-860&quot; title=&quot;Persistent distributed cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-860&quot;&gt;HIVE-860&lt;/a&gt; a reviewer asked me if the following code (copied from this patch) closed the stream:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;String checksum = DigestUtils.shaHex(url.openStream());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Doesn&apos;t look like it does according to the common-codec source. Therefore I think pig has a file descriptor leak.&lt;/p&gt;</comment>
                            <comment id="13907473" author="aniket486" created="Thu, 20 Feb 2014 20:46:33 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=brocknoland&quot; class=&quot;user-hover&quot; rel=&quot;brocknoland&quot;&gt;Brock Noland&lt;/a&gt;! Looks like it existed even before this @&lt;a href=&quot;https://github.com/apache/pig/blob/branch-0.12/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/JobControlCompiler.java#L1524&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/pig/blob/branch-0.12/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/JobControlCompiler.java#L1524&lt;/a&gt;. Let me open another jira to fix it.&lt;/p&gt;</comment>
                            <comment id="14003760" author="aniket486" created="Tue, 20 May 2014 19:14:01 +0100"  >&lt;p&gt;Opened &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-3954&quot; title=&quot;Document use of user level jar cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-3954&quot;&gt;&lt;del&gt;PIG-3954&lt;/del&gt;&lt;/a&gt; to document this and &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-3955&quot; title=&quot;Remove url.openStream() file descriptor leak from JCC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-3955&quot;&gt;&lt;del&gt;PIG-3955&lt;/del&gt;&lt;/a&gt; to fix the file descriptor issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12652263">YARN-1492</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12771919">PIG-4407</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12436898">HIVE-860</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12626742" name="PIG-2672-10.patch" size="12201" author="aniket486" created="Mon, 3 Feb 2014 21:43:41 +0000"/>
                            <attachment id="12624061" name="PIG-2672-5.patch" size="44155" author="aniket486" created="Tue, 21 Jan 2014 03:03:53 +0000"/>
                            <attachment id="12626239" name="PIG-2672-7.patch" size="11373" author="aniket486" created="Fri, 31 Jan 2014 01:24:11 +0000"/>
                            <attachment id="12604324" name="PIG-2672.patch" size="23184" author="aniket486" created="Fri, 20 Sep 2013 23:12:33 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 27 Apr 2012 18:32:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>237250</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyayp3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97932</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>