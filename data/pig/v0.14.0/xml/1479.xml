<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:00:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1479/PIG-1479.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1479] Embed Pig in scripting languages</title>
                <link>https://issues.apache.org/jira/browse/PIG-1479</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;It should be possible to embed Pig calls in a scripting language and let functions defined in the same script available as UDFs.&lt;br/&gt;
This is a spin off of &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-928&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-928&lt;/a&gt; which lets users define UDFs in scripting languages.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12468380">PIG-1479</key>
            <summary>Embed Pig in scripting languages</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rding">Richard Ding</assignee>
                                    <reporter username="julienledem">Julien Le Dem</reporter>
                        <labels>
                    </labels>
                <created>Thu, 1 Jul 2010 21:30:01 +0100</created>
                <updated>Thu, 4 Aug 2011 01:34:45 +0100</updated>
                            <resolved>Fri, 7 Jan 2011 22:18:01 +0000</resolved>
                                                    <fixVersion>0.9.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12884411" author="julienledem" created="Thu, 1 Jul 2010 21:36:00 +0100"  >&lt;p&gt;See: &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-928&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-928&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run the example (assuming javac, jar and java are in your PATH):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;tar xzvf pig-greek.tgz&lt;/li&gt;
	&lt;li&gt;add pig-0.6.0-core.jar to the lib folder&lt;/li&gt;
	&lt;li&gt;./makejar.sh&lt;/li&gt;
	&lt;li&gt;./runme.sh&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This contains a generic base class and a Python implementation. &lt;/p&gt;

&lt;p&gt;To implement other scripting languages, extend org.apache.pig.greek.ScriptEngine&lt;/p&gt;</comment>
                            <comment id="12908207" author="rding" created="Fri, 10 Sep 2010 23:05:33 +0100"  >&lt;p&gt;Thanks Julien. I rebased the patch with the latest trunk and added an option (-greek) in the Main class.&lt;/p&gt;

&lt;p&gt;Now one can run a &quot;PIG-Greek&quot; script with following command:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
java -cp pig.jar:&amp;lt;jython jar&amp;gt;:&amp;lt;hadoop config dir&amp;gt; org.apache.pig.Main -g &amp;lt;pig-greek script&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or in local mode: &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
java -cp pig.jar:&amp;lt;jython jar&amp;gt; org.apache.pig.Main -x local -g &amp;lt;pig-greek script&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12909345" author="julienledem" created="Tue, 14 Sep 2010 18:22:55 +0100"  >&lt;p&gt;Thanks Richard!&lt;/p&gt;</comment>
                            <comment id="12909507" author="rding" created="Wed, 15 Sep 2010 00:03:10 +0100"  >&lt;p&gt;In the previous patch, the executeScript method on ScriptPigServer returns a list of ExecJobs (one for each store statement in the script). Unfortunately, the order of ExecJobs in the list is indeterminate.  &lt;/p&gt;

&lt;p&gt;This patch fixes this problem by making the executeScript method return a PigStats object. One then can retrieves the output result by the alias corresponding to store statement.&lt;/p&gt;

&lt;p&gt;Here is a example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
P = pig.executeScript(&quot;&quot;&quot;
        A = load &apos;${input}&apos;;
        ... ...
        store G into &apos;${output}&apos;; &quot;&quot;&quot;)

output = P.result(&lt;span class=&quot;code-quote&quot;&gt;&quot;G&quot;&lt;/span&gt;)  # an OutputStats object
iter = output.iterator()
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; iter.hasNext():
        # &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; something
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;:
        # &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; something &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; </comment>
                            <comment id="12909510" author="rding" created="Wed, 15 Sep 2010 00:10:17 +0100"  >&lt;p&gt;Attach the updated test program from Julien.&lt;/p&gt;

&lt;p&gt;To run the example:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;tar -xvf pig-greek-test.tar&lt;/li&gt;
	&lt;li&gt;java -cp pig.jar:&amp;lt;jython jar&amp;gt; org.apache.pig.Main -x local -g script/tc.py&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12909898" author="julienledem" created="Wed, 15 Sep 2010 22:35:46 +0100"  >&lt;p&gt;The -g parameter on the command line should take two parameters, the scripting implementation instance name and the script itself.&lt;br/&gt;
That way we can have several scripting implementations.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java -cp pig.jar:&amp;lt;jython jar&amp;gt; org.apache.pig.Main -x local -g jython script/tc.py
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; GREEK: {       
            ScriptEngine scriptEngine = ScriptEngine.getInstance(instanceName);
            scriptEngine.run(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PigServer(pigContext), file);
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ReturnCode.SUCCESS;
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12909901" author="julienledem" created="Wed, 15 Sep 2010 22:41:58 +0100"  >&lt;p&gt;The end of loop condition in the script can just test for to_join_n emptiness. It was testing both because it did not know which one was to_join_n.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (not P.result(&lt;span class=&quot;code-quote&quot;&gt;&quot;to_join_n&quot;&lt;/span&gt;).iterator().hasNext()):
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12910691" author="rding" created="Fri, 17 Sep 2010 18:52:10 +0100"  >&lt;p&gt;Attach the test script modified based on Julien&apos;s comment. As for commend line option -g, it can  also use one parameter (script file name) and  let Pig determine the script engine by the file extension.&lt;/p&gt;
</comment>
                            <comment id="12913859" author="julienledem" created="Thu, 23 Sep 2010 01:05:53 +0100"  >&lt;p&gt;Using the file extension requires a registration mechanism (or hard coded list) so if it is supported it would be nice to be able to provide the class name of the scripting implementation as well.&lt;br/&gt;
I would like to use my own implementation of the scripting engine (let&apos;s say javascript) by specifying the class name in the command line.&lt;br/&gt;
similar to the mecanism for UDFs inclusion:&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/pig/UDFsUsingScriptingLanguages&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/UDFsUsingScriptingLanguages&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Register &apos;test.py&apos; using org.apache.pig.scripting.jython.JythonScriptEngine as myfuncs;&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="12928400" author="rding" created="Thu, 4 Nov 2010 22:13:35 +0000"  >&lt;p&gt;Alan has posted a proposal that includes embedding Pig in scripting language on Pig wiki: &lt;a href=&quot;http://wiki.apache.org/pig/TuringCompletePig&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/TuringCompletePig&lt;/a&gt;. The proposal is based on the implementation here via a JDBC like compile, bind, run model. &lt;/p&gt;</comment>
                            <comment id="12931593" author="rding" created="Sat, 13 Nov 2010 00:27:44 +0000"  >&lt;p&gt;Attaching the initial patch that aims to implement the embedding part of the above proposal. &lt;/p&gt;

&lt;p&gt;Notes about the patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Pig executes the top-level Jython statements in the script, no need to write a main() function.&lt;/li&gt;
	&lt;li&gt;You can invoke a Jython script from the command line the same way as you invoke a standard Pig script as long as the first line of the script is &lt;b&gt;#! /usr/bin/python&lt;/b&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
java -cp jython.jar:pig.jar myscript.py
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;ul&gt;
	&lt;li&gt;The run method on ScriptEngine returns a Map&amp;lt;String, PigStats&amp;gt;,  with one entry for each runtime Pig pipeline. For named pipeline, the map key is the given pipeline name.&lt;/li&gt;
	&lt;li&gt;The proposed API is implemented in two classes: &lt;em&gt;ScriptPigServer&lt;/em&gt; and &lt;em&gt;PigPipeline&lt;/em&gt;.&lt;/li&gt;
	&lt;li&gt;The &lt;em&gt;compile&lt;/em&gt; method now is a no-op, will be implemented later.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12934342" author="julienledem" created="Sun, 21 Nov 2010 20:08:14 +0000"  >&lt;p&gt;Hi Richard,&lt;br/&gt;
Some comments about &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1479&quot; title=&quot;Embed Pig in scripting languages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1479&quot;&gt;&lt;del&gt;PIG-1479&lt;/del&gt;&lt;/a&gt;_3.patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The ScriptEngine implementations that can be used are still hardwired. As a user I would want to add a parameter to the command line to use my own (adding it to the classpath and providing the class name). For example I&apos;m working on a javascript implementation for Pig-Greek. Currently I have no way of using it without modifying Pig&apos;s code.&lt;/li&gt;
	&lt;li&gt;I like to not have to define a main() function for the top level code, however using regular expressions to separate functions from the main code seems at high risk of not working in many cases (in JythonScriptEngine.getFunctions(InputStream)). It would be better to trust an actual Python parser or to leave it as is: requiring a main() function.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12966262" author="rding" created="Thu, 2 Dec 2010 20:20:03 +0000"  >&lt;p&gt;Thanks Julien.&lt;/p&gt;

&lt;p&gt;As for the second comment, there is a third option, namely separating frontend (control flow code) from backend (scripting UDFs) by putting them in different files, and requires control flow writer to explicitly register UDFs in his/her script.  For example, in control flow file script.py:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
pig.registerUDF(&lt;span class=&quot;code-quote&quot;&gt;&quot;myudfs.py&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;mynamespace&quot;&lt;/span&gt;)

# control flow and PIG pipelines that use UDFs defined in myudfs.py
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;The advantage of this is that only UDF files are shipped to the backend while control flow file (and its dependencies) remains in front end. Obviously, the disadvantage is that you can&apos;t put everything in one file.&lt;/p&gt;</comment>
                            <comment id="12966755" author="rding" created="Sat, 4 Dec 2010 00:26:30 +0000"  >&lt;p&gt;Attaching patch that addresses above comments:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;One can use --embedded option to specify his/her favorite script engine classname or keyword. For example&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
java -cp pig.jar:jython.jar org.apache.pig.Main --embedded jython myscript.py
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;ul&gt;
	&lt;li&gt;Implemented the proposed approach of separating frontend control flow script from backend UDF in scripting language. One needs to explicitly register UDF in Pig Latin or embedded Pig.&lt;/li&gt;
	&lt;li&gt;Both compile() and bind() methods return objects. So one can write code in jython script like this:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
results = pig.compile(&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;Pig Latin&amp;gt;&quot;&lt;/span&gt;).bind({param:value, ...}).run()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;One can also run embedded scripts using PigRunner.&lt;/li&gt;
&lt;/ul&gt;




</comment>
                            <comment id="12969435" author="alangates" created="Wed, 8 Dec 2010 19:22:45 +0000"  >&lt;p&gt;Comments and questions:&lt;/p&gt;

&lt;p&gt;This patch makes changes to the public interface PigProgressNotificationListener.  It&apos;s ok, since it&apos;s marked evolving.  Do we know how many people are using this and what we&apos;ll need to do to mitigate the changes for them?&lt;/p&gt;

&lt;p&gt;PigPipeline needs better javadoc comments at the class level.  The current javadocs confuse it with the defined Pig class.&lt;/p&gt;

&lt;p&gt;Rather than the Pig class detailed in the design doc this patch has ScriptPigServer, which has a slightly different interface.  Does this represent a change to the design or is there a yet to be built Pig class?&lt;/p&gt;

&lt;p&gt;Do we need two classes BoundPipeline and MultiBoundPipeline?  Could we instead have just BoundPipeline, and then for each run method there would be:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;PigStats&amp;gt; run()
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; PigStats runSingle() {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (multijob) &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; ...
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; run().get(0);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run is a valid call whether this is a single or multi-job situation, which means users don&apos;t have to write their code differently in situations where they are using both single and multi-job binds.  In simple cases where users know they only have one thing bound they can use the simpler runSingle call.  Calling runSingle when multiple things are bound would be an error.&lt;/p&gt;

&lt;p&gt;We need to mark the availability and stability of the ScriptEngine interface.  I suspect it is Public Evolving.&lt;/p&gt;
</comment>
                            <comment id="12969571" author="rding" created="Thu, 9 Dec 2010 00:18:21 +0000"  >&lt;p&gt;Thanks Alan,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This patch makes changes to the public interface PigProgressNotificationListener. It&apos;s ok, since it&apos;s marked evolving. Do we know how many people are using this and what we&apos;ll need to do to mitigate the changes for them?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This interface is available only in Pig 0.8 which is just ready to release. So not many people are using it. On the other hand it&apos;s too late to get into 0.8. The reason for the change is that the embedded script could contain multiple Pig scripts and Pig runtime needs to tell users from which script they get the notification.   &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;PigPipeline needs better javadoc comments at the class level. The current javadocs confuse it with the defined Pig class.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Will do.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Rather than the Pig class detailed in the design doc this patch has ScriptPigServer, which has a slightly different interface. Does this represent a change to the design or is there a yet to be built Pig class?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The patch breaks the Pig class interface into several class: ScriptPigServer to register or define in global scope, to compile a Pig Latin script into a PigPipeline object. PigPipeline binds a set of variables and generates a BoundPigline object which then runs the bound pipeline. Embedded script writers will have access to a ScriptPigServer object called &quot;pig&quot; in the script. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do we need two classes BoundPipeline and MultiBoundPipeline? Could we instead have just BoundPipeline, and then for each run method there would be: ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I went back and forth between these two approaches. I&apos;m fine with a single BoundPipeline class with two different run/runSingle method. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We need to mark the availability and stability of the ScriptEngine interface. I suspect it is Public Evolving.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Will do.&lt;/p&gt;</comment>
                            <comment id="12970090" author="julienledem" created="Fri, 10 Dec 2010 06:49:17 +0000"  >&lt;p&gt;Hi Richard,&lt;br/&gt;
Thank you for the updated patch.&lt;br/&gt;
Follow my comments, all related to usability:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Pig script invocation&lt;br/&gt;
The main invocation mechanism is as follows:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
results = pig.compile(&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;Pig Latin&amp;gt;&quot;&lt;/span&gt;).bind({param:value, ...}).run()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I was proposing to also bind variables automatically to local variables in the current scope.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
results = pig.compile(&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;Pig Latin&amp;gt;&quot;&lt;/span&gt;).bindToLocal().run()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or more simply&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
results = pig.run(&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;Pig Latin&amp;gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(as implemented in the original submission)&lt;br/&gt;
I understand that all languages may not allow that, but all scripting languages I can think of allow it. Only compiled languages strip variable names. This could be optional for the implementation.&lt;br/&gt;
If the bind() step is usefull in some situations and is more generic, it is not the most frequent use case.&lt;br/&gt;
Implicit binding to local variables is an important feature. As the Pig script is embedded in a particular context, in most use cases the parameters will have the same name than the local variables used to populate them.&lt;br/&gt;
The goal is to embed Pig, making the integration seemless. Most cases won&apos;t need the indirection to have different parameter names from local variables, making it a burden for the developper.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Ability to have the main program and the UDFs in the same script&lt;br/&gt;
This was the main reason I started this work. The goal was to have everything in one script. The fact that the UDFs are run on the slaves should not force the user to put them in a separate file. The main goal is to have the entire algorithm in the same place without arbitrary separations like this one.&lt;br/&gt;
When putting in the balance having a main() function vs not being able to have UDFs in the same file I will definitly choose to have a main() function.&lt;br/&gt;
Just embedding Pig without having UDFs in the same file is not very different from running the Pig command line from a script.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12970920" author="julienledem" created="Mon, 13 Dec 2010 17:49:26 +0000"  >&lt;p&gt;another possibility would to have scripts writtent in the following way:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
def udf1()
   ...

def udf2()
   ...

def main()
   ...

&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;code-quote&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    main()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;See: &lt;a href=&quot;http://docs.python.org/library/__main__.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.python.org/library/__main__.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12971120" author="rding" created="Tue, 14 Dec 2010 01:45:39 +0000"  >&lt;p&gt;Thanks Julien.  How about the following proposal?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Pig script invocation: &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Pig will use the bind() method to implicitly bind variables to local variables in the current scope. It&apos;ll do an implicit mapping of variables in the host language to parameters in Pig Latin:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
results = pig.compile(&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;Pig Latin&amp;gt;&quot;&lt;/span&gt;).bind().run()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;Ability to have the control flow program and the UDFs in the same script: &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree that it&apos;s good to have everything in one script. Since I can&apos;t think of a way to only execute functions in python, I&apos;ll go back to use a simple parser to separate functions and control flow program so that UDFs can be registered before the control flow program runs.&lt;/p&gt;

&lt;p&gt;A related issue is the python IMPORT statements. Users will be responsible to ship the imported modules to the backend servers. Pig won&apos;t automatically resolve the module paths and ship the files to the backend.&lt;/p&gt;</comment>
                            <comment id="12971306" author="alangates" created="Tue, 14 Dec 2010 16:43:20 +0000"  >&lt;p&gt;+1 to using a fuzzy parser.  I agree that being able to have the Python UDFs in the same file is important, and in user reviews others have voiced the same opinion.  But forcing Python users to have a main function is going to seem very unnatural to them.  So I think the fuzzy parsing is the best compromise.&lt;/p&gt;</comment>
                            <comment id="12974763" author="rding" created="Thu, 23 Dec 2010 22:00:44 +0000"  >&lt;p&gt;Based on the feedback, the new patch contains the following changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Support the main program and the UDFs in the same script. However, when mixing jython functions with top level control flow code, the script must use the idiomatic &quot;conditional script&quot; stanza:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
def udf1()
   ...

def udf2()
   ...

&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; __name__ == &apos;__main__&apos;:
    # control flow code
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
	&lt;li&gt;Support explicit registering scripting UDFs:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Pig.registerUDF(&lt;span class=&quot;code-quote&quot;&gt;&quot;udfs.py&quot;&lt;/span&gt;, &quot;&quot;)

# control flow code
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;ul&gt;
	&lt;li&gt;Confirm Pig scripting API to the specification: &lt;a href=&quot;http://wiki.apache.org/pig/TuringCompletePig&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/TuringCompletePig&lt;/a&gt;. The main change is that the scripts now need explicitly import the Pig class:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
from org.apache.pig.scripting &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; Pig
... ...
results = Pig.compile(&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;Pig Latin&amp;gt;&quot;&lt;/span&gt;).bind().run()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; </comment>
                            <comment id="12978503" author="alangates" created="Thu, 6 Jan 2011 20:56:34 +0000"  >&lt;p&gt;Latest patch looks good.  I just have one question.  Why do we need the synchronous implementation of PigProgressNotificationListener (SyncProgressNotificationAdaptor)?  In what case do we expect Pig to be notifying in parallel?  I am assuming that we want to allow user scripts to be multi-threaded, but do we expect multiple threads to use the same PigProgressNotificationListener?&lt;/p&gt;


</comment>
                            <comment id="12978531" author="rding" created="Thu, 6 Jan 2011 22:08:32 +0000"  >
&lt;p&gt;It is for parallel execution of a pipeline. User registers listener through PigRunner API:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; PigStats run(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args, PigProgressNotificationListener listener) ;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It&apos;s expected that the same listener is used by all the threads (each executes an instance of the pipeline) in parallel. &lt;/p&gt;
</comment>
                            <comment id="12978560" author="julienledem" created="Thu, 6 Jan 2011 23:06:15 +0000"  >&lt;p&gt;I have reviewed the patch.&lt;br/&gt;
The latest changes look good to me.&lt;br/&gt;
Thanks Richard!&lt;/p&gt;</comment>
                            <comment id="12978988" author="rding" created="Fri, 7 Jan 2011 22:12:11 +0000"  >
&lt;p&gt;Minor changes to fix a couple of findbugs warnings. Rerun the test-patch:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     [exec] -1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 6 &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Findbugs warnings.
     [exec] 
     [exec]     -1 release audit.  The applied patch generated 477 release audit warnings (more than the trunk&apos;s current 467 warnings).
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;Release audit warnings are all html related.&lt;/p&gt;

&lt;p&gt;Unit tests passed.&lt;/p&gt;</comment>
                            <comment id="12978992" author="rding" created="Fri, 7 Jan 2011 22:18:01 +0000"  >&lt;p&gt;The latest patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1479&quot; title=&quot;Embed Pig in scripting languages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1479&quot;&gt;&lt;del&gt;PIG-1479&lt;/del&gt;&lt;/a&gt;_6) committed to trunk.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12495087">PIG-1794</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12454344" name="PIG-1479.patch" size="16127" author="rding" created="Fri, 10 Sep 2010 23:05:33 +0100"/>
                            <attachment id="12454610" name="PIG-1479_2.patch" size="24006" author="rding" created="Wed, 15 Sep 2010 00:03:10 +0100"/>
                            <attachment id="12459502" name="PIG-1479_3.patch" size="59056" author="rding" created="Sat, 13 Nov 2010 00:27:44 +0000"/>
                            <attachment id="12465295" name="PIG-1479_4.patch" size="148301" author="rding" created="Sat, 4 Dec 2010 00:26:30 +0000"/>
                            <attachment id="12466920" name="PIG-1479_5.patch" size="154100" author="rding" created="Thu, 23 Dec 2010 22:00:44 +0000"/>
                            <attachment id="12467767" name="PIG-1479_6.patch" size="156164" author="rding" created="Fri, 7 Jan 2011 22:12:11 +0000"/>
                            <attachment id="12454879" name="pig-greek-test.tar" size="10240" author="rding" created="Fri, 17 Sep 2010 18:52:10 +0100"/>
                            <attachment id="12454611" name="pig-greek-test.tar" size="10240" author="rding" created="Wed, 15 Sep 2010 00:10:17 +0100"/>
                            <attachment id="12448519" name="pig-greek.tgz" size="5898041" author="julienledem" created="Thu, 1 Jul 2010 21:35:58 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 10 Sep 2010 22:05:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66277</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyaqvz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>96667</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>