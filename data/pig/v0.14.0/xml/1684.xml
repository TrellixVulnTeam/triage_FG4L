<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:02:02 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1684/PIG-1684.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1684] Inconsistent usage of store func.</title>
                <link>https://issues.apache.org/jira/browse/PIG-1684</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>

&lt;p&gt;Pig seems to be using multiple instances of StoreFuncInterface in the reducer inconsistently.&lt;br/&gt;
Some hadoop api calls are made to one instance and others made to other : which makes state management very inconsistent and is requiring hacks on our part to deal with it.&lt;/p&gt;


&lt;p&gt;The call snippet below should hopefully indicate the issue.&lt;br/&gt;
The format is :&lt;/p&gt;

&lt;p&gt;Instance.toString()   method_call.&lt;/p&gt;


&lt;p&gt;com.yahoo.psox.fish.pig.IndexJoinStore@1be4777 getOutputFormat()&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1be4777 getOutputCommitter&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1be4777 setupTask&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1be4777 init&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1429cb2 getOutputFormat()&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1429cb2 getRecordWriter&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1429cb2 init&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1429cb2 putNext()&lt;br/&gt;
... &lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1be4777 needsTaskCommit&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1be4777 commitTask&lt;br/&gt;
com.yahoo.psox.fish.pig.IndexJoinStore@1be4777 finish()&lt;/p&gt;



&lt;p&gt;As is obvious, two instances are used for different purposes - one to get the record writer and do the actual write, and another to call the OutputCommitter and its methods.&lt;br/&gt;
Since they are from different instances (StoreFuncInterface), the output committer is unable to gracefully commit and cleanup.&lt;/p&gt;


&lt;p&gt;I am not attaching the StoreFunc, but any user defined StoreFunc will exhibit this behavior.&lt;/p&gt;</description>
                <environment>
&lt;p&gt;A custom StoreFuncInterface used to store data at the reducer.&lt;br/&gt;
(Output of a group )&lt;/p&gt;
</environment>
        <key id="12477552">PIG-1684</key>
            <summary>Inconsistent usage of store func.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thejas">Thejas M Nair</assignee>
                                    <reporter username="mridulm@yahoo-inc.com">Mridul Muralidharan</reporter>
                        <labels>
                    </labels>
                <created>Sun, 17 Oct 2010 02:58:24 +0100</created>
                <updated>Fri, 17 Dec 2010 22:46:40 +0000</updated>
                            <resolved>Fri, 29 Oct 2010 04:02:50 +0100</resolved>
                                    <version>0.7.0</version>
                                    <fixVersion>0.8.0</fixVersion>
                                    <component>impl</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12921815" author="ashutoshc" created="Sun, 17 Oct 2010 10:49:05 +0100"  >&lt;p&gt; I fixed  this multiple instantiations problem for loadfuncs in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1363&quot; title=&quot;Unnecessary loadFunc instantiations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1363&quot;&gt;&lt;del&gt;PIG-1363&lt;/del&gt;&lt;/a&gt;.  It needs to be fixed for storefuncs as well. I see no reason why same instance of storeFunc cant be shared across PigOutputCommitter and PigOutputFormat. Ideal solution will be to instantiate both loadfunc and storefunc exactly once on client side (during logical planning) and then ship it to the backend where this same instance is continued to be used. But that will require these interfaces to implement Serializable which will break backward compatibility. But atleast we need to make sure that they are instantiated exactly twice once in frontend and once in backend. As evident here, storefunc is getting instantiated multiple times in backend. &lt;/p&gt;

&lt;p&gt;Mridul, &lt;br/&gt;
It will be great if you can provide a strip down version of your storeFunc, that will make it easier to write a unit test for it.&lt;/p&gt;</comment>
                            <comment id="12921870" author="ashutoshc" created="Sun, 17 Oct 2010 18:11:21 +0100"  >&lt;p&gt;Actually what I said above is not entirely correct. OutputCommitter runs as a separate task at the end of job. This separate task can run on any node of cluster so there needs to be a separate instantiation of storefunc in output committer then from outputformat. As mandated by mapreduce framework Pig (and thus user&apos;s storefunc) should not maintain state between  format and committer. Mridul, if I understand your use case correctly that is what you are trying to do. I dont see any straight forward workaround if thats the usecase. It will help if you can briefly explain what state you are wanting to maintain between different storefunc functions. &lt;/p&gt;</comment>
                            <comment id="12921908" author="mridulm@yahoo-inc.com" created="Sun, 17 Oct 2010 23:07:43 +0100"  >&lt;p&gt;I am not sure if I understand the comments properly. To elaborate, the usecase is fairly straightforward use of the interfaces.&lt;/p&gt;


&lt;p&gt;Our store func does task specific initializations (like create &quot;$OUTPUT/_temporary/attempt_id&quot; directory, etc). creates side files based on the data to be stored (task specific) , etc.&lt;br/&gt;
The output committer flushes the various streams, ensures graceful close of resources, reconciles the final output, moves the appropriate files/directories. etc - once the task is done, or cleans up if there is an abort.&lt;/p&gt;


&lt;p&gt;This information is, as is obvious, task specific for a store func : and tightly coupled to the instance of store func used (since only the store func has visibility to this data).&lt;/p&gt;


&lt;p&gt;Please note that, in the bug description above, different instances of the Store func&apos;s are getting called on the SAME task - not across tasks or at frontend/backend.&lt;/p&gt;


&lt;p&gt;We are ok with pig serializing/deserializing the objects, managing its split lifecycle, etc - but at a given task, if it used a single instance of StoreFunc for all invocations consistently : to get Output format, to get record reader, to initialize, to write tuples and to commit : it would be consistent with the way we would expect the invocations (IIRC, hadoop does it this way, but I will need to recheck if there are concerns there).&lt;/p&gt;

&lt;p&gt;Hopefully this clarifies things, please let me know in case there are issues with the way we are making use of the interfaces/our expectation of the behavior.&lt;/p&gt;</comment>
                            <comment id="12924046" author="thejas" created="Fri, 22 Oct 2010 22:51:53 +0100"  >&lt;p&gt;In patch, POStore creates only one instance of StoreFunc. PigOutputFormat, PigOutputCommitter classes create only one instance of POStore for each store.&lt;/p&gt;
</comment>
                            <comment id="12925054" author="thejas" created="Tue, 26 Oct 2010 18:24:18 +0100"  >&lt;p&gt;Patch passes unit tests and test-patch .&lt;/p&gt;</comment>
                            <comment id="12925967" author="daijy" created="Thu, 28 Oct 2010 23:05:12 +0100"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12926154" author="thejas" created="Fri, 29 Oct 2010 04:02:50 +0100"  >&lt;p&gt;Patch committed to 0.8 branch and trunk.&lt;/p&gt;</comment>
                            <comment id="12927200" author="thejas" created="Mon, 1 Nov 2010 22:48:24 +0000"  >&lt;p&gt;The original patch introduced javadoc warnings. (I thought I had run test-patch successfully)&lt;br/&gt;
 javadoc.patch fixes it.&lt;/p&gt;</comment>
                            <comment id="12927207" author="daijy" created="Mon, 1 Nov 2010 22:53:44 +0000"  >&lt;p&gt;+1 for javadoc changes.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12457876" name="PIG-1684.1.patch" size="18487" author="thejas" created="Fri, 22 Oct 2010 22:51:53 +0100"/>
                            <attachment id="12458589" name="javadoc.patch" size="634" author="thejas" created="Mon, 1 Nov 2010 22:48:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 17 Oct 2010 09:49:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>165130</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyat27:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97019</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>