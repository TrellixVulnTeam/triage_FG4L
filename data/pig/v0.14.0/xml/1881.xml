<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:06:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1881/PIG-1881.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1881] Need a special interface for Penny (Inspector Gadget)</title>
                <link>https://issues.apache.org/jira/browse/PIG-1881</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;The proposed Penny tool needs access to Pig&apos;s new logical plan in order to inject code into the the dataflow.  Once it has modified the plan it needs to then be able to hand back that modified plan and have Pig execute it.&lt;/p&gt;

&lt;p&gt;As we don&apos;t want to open this functionality up to general users, the proposal is to do this by subclasses PigServer with a new class that is marked as LimitedPrivate for Penny only.  This class will provide calls to parse a Pig Latin script and return a logical plan, and one to take a logical plan and execute it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12500325">PIG-1881</key>
            <summary>Need a special interface for Penny (Inspector Gadget)</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="laukik">Laukik Chitnis</assignee>
                                    <reporter username="alangates">Alan Gates</reporter>
                        <labels>
                    </labels>
                <created>Thu, 3 Mar 2011 17:34:33 +0000</created>
                <updated>Thu, 2 May 2013 03:29:38 +0100</updated>
                            <resolved>Wed, 13 Apr 2011 01:10:20 +0100</resolved>
                                    <version>0.9.0</version>
                                    <fixVersion>0.9.0</fixVersion>
                                    <component>impl</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13002092" author="alangates" created="Thu, 3 Mar 2011 17:36:25 +0000"  >&lt;p&gt;This patch provides the requested interface.  It has gone out of sync with trunk (it&apos;s about a month old now) and needs to be resynced.&lt;/p&gt;</comment>
                            <comment id="13002405" author="ashutoshc" created="Fri, 4 Mar 2011 02:19:34 +0000"  >&lt;p&gt;I think instead of subclass approach, hook style interface might be better suited in this case. That way, user can register his hook (via config param) which Pig will dynamically instantiate and then invoke. This gets more power in hand of users as they are not limited by interface of PigServertools and also Pig needs to make no promises as hooks are owned by user and registered in runtime such that any modification in Pig&apos;s behavior is governed by their hook, not by Pig itself.&lt;/p&gt;</comment>
                            <comment id="13002503" author="sms" created="Fri, 4 Mar 2011 08:26:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;As we don&apos;t want to open this functionality up to general users, the proposal is to do this by subclasses PigServer with a new class that is marked as LimitedPrivate for Penny only. This class will provide calls to parse a Pig Latin script and return a logical plan, and one to take a logical plan and execute it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Any specific reason for not opening this up? Just trying to understand why the Penny use case is special.&lt;/p&gt;</comment>
                            <comment id="13003449" author="alangates" created="Mon, 7 Mar 2011 17:19:19 +0000"  >&lt;p&gt;The reason for not opening this up is that it exposes the logical plan as an interface.  That is not something we want to make any guarantees about from release to release.  The same response applies to a hooks interface.  The goal here is not to open up PigServer for users to extend.  It is to make a one time extension necessary for a tool that will be maintained by the Pig team.&lt;/p&gt;</comment>
                            <comment id="13003547" author="sms" created="Mon, 7 Mar 2011 19:58:46 +0000"  >&lt;p&gt;The one time argument is a little bit difficult to understand. Can we instead open up the interface and mark it as evolving. It will help us lay the groundwork for allowing plug-in optimizers at different stages - logical, map-reduce, etc (assuming if we have such plans)&lt;/p&gt;</comment>
                            <comment id="13004075" author="alangates" created="Tue, 8 Mar 2011 17:24:09 +0000"  >&lt;p&gt;I don&apos;t want this to be a public interface at all, evolving or otherwise.  That&apos;s why it&apos;s marked limited private.  The reason for the one off interface is that this is a tool we think we should adopt and maintain.&lt;/p&gt;</comment>
                            <comment id="13011112" author="laukik" created="Fri, 25 Mar 2011 06:32:20 +0000"  >&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13012586" author="alangates" created="Tue, 29 Mar 2011 18:59:23 +0100"  >&lt;p&gt;It looks like you brought back the PigServer.getCloneGraph and PigServer.Graph.duplicate methods after they were removed.  Is that correct?  I&apos;m fine with that but I&apos;d like to know who removed them and why to make sure we aren&apos;t breaking something.&lt;/p&gt;

&lt;p&gt;Other than that question, patch looks good.&lt;/p&gt;</comment>
                            <comment id="13012612" author="laukik" created="Tue, 29 Mar 2011 19:46:44 +0100"  >&lt;p&gt;Yes, that is correct. None of the two methods change the state of the original DAG though, so I think it should be safe. Originally, it was using the clone() method in Graph, but since we were using an unconventional method for cloning, I opted for a new duplicate() method rather than overriding clone(). I assumed that the old methods were removed since they were no longer used, but I would like to know as well if there was some other reason.&lt;/p&gt;</comment>
                            <comment id="13013722" author="xuefuz" created="Thu, 31 Mar 2011 00:04:31 +0100"  >&lt;p&gt;I had a look at the patch. It appeared to me that there can be a simpler approach. &lt;/p&gt;

&lt;p&gt;If the proper usage of ToolPigServer is as documented, I think we only need provide two APIs: one takes a query and returns a LogicalPlan instance, and another one takes a LogicalPlan instance and run it. Having said that, I don&apos;t think we need getPlans() method in ToolPigServer. Also, we wouldn&apos;t need cloning a logical plan in PigServer. And we need none of the methods that were reintroduced to PigServer. &lt;/p&gt;

&lt;p&gt;Plus, I don&apos;t understand why we need PigPlans class. It doesn&apos;t seem to do anything or hide anything.&lt;/p&gt;

&lt;p&gt;I think it&apos;s even better to use containment instead of inheritance. We can have a class which contains a PigServer instance, which only exposes the two API&apos;s mentioned above. This way, you can control what the user can perform on your class instance. Otherwise, who knows what&apos;s going to happen if I call ToolPigServer.registerNoRun(), and then ToolPigServer.registerQuery(), and then ToolPigServer.getPlan().&lt;/p&gt;

&lt;p&gt;If it turns out user needs functionality of PigServer, they don&apos;t need to get it from ToolPigServer. He/she can just instantiate a PigServer instance. But for ToolPigServer, the only thing allowed should be just two above mentioned API.&lt;/p&gt;

&lt;p&gt;With above discussion, in my opinion, there is no need for the cloning method. BTW, the original clone method had issue with line numbers.&lt;/p&gt;</comment>
                            <comment id="13013780" author="mridulm@yahoo-inc.com" created="Thu, 31 Mar 2011 02:33:59 +0100"  >&lt;p&gt;I have not looked at the patch in detail, but what I remember from work on ibis was that :&lt;/p&gt;

&lt;p&gt;a) Handling properties and property files was not clearly understood via the api (probably &apos;cos I did not have access to the code).&lt;br/&gt;
b) Handling modules, etc was not properly handled.&lt;br/&gt;
c) Ditto for parameter substitutions, etc.&lt;/p&gt;

&lt;p&gt;We ended up duplicating a lot of code from pig&apos;s Main just to get those working because of the &apos;unconventional&apos; way in which these are implemented currently.&lt;/p&gt;</comment>
                            <comment id="13019127" author="alangates" created="Wed, 13 Apr 2011 01:10:20 +0100"  >&lt;p&gt;Patch 4 checked in.  Thank you Laukik.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12503193">PIG-1959</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12476137" name="PIG-1881-4.patch" size="23526" author="laukik" created="Tue, 12 Apr 2011 18:29:29 +0100"/>
                            <attachment id="12472571" name="toolsserver.patch" size="22088" author="alangates" created="Thu, 3 Mar 2011 17:36:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Mar 2011 02:19:34 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66128</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyauaf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97218</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>