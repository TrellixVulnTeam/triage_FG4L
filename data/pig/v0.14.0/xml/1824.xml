<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:55:57 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1824/PIG-1824.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1824] Support import modules in Jython UDF</title>
                <link>https://issues.apache.org/jira/browse/PIG-1824</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Currently, Jython UDF script doesn&apos;t support Jython import statement as in the following example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
#!/usr/bin/python

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; re
@outputSchema(&lt;span class=&quot;code-quote&quot;&gt;&quot;word:chararray&quot;&lt;/span&gt;)
def resplit(content, regex, index):
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; re.compile(regex).split(content)[index]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can Pig automatically locate the Jython module file and ship it to the backend? Or should we add a ship clause to let user explicitly specify the module to ship? &lt;/p&gt;</description>
                <environment></environment>
        <key id="12496758">PIG-1824</key>
            <summary>Support import modules in Jython UDF</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="woody.anderson@gmail.com">Woody Anderson</assignee>
                                    <reporter username="rding">Richard Ding</reporter>
                        <labels>
                    </labels>
                <created>Wed, 26 Jan 2011 02:22:34 +0000</created>
                <updated>Mon, 6 May 2013 18:59:15 +0100</updated>
                            <resolved>Fri, 20 May 2011 21:04:50 +0100</resolved>
                                    <version>0.8.0</version>
                    <version>0.9.0</version>
                                    <fixVersion>0.10.0</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="12987105" author="ashutoshc" created="Wed, 26 Jan 2011 17:40:08 +0000"  >&lt;p&gt;Unless, there is a java api provided by jython interpreter which lists all the dependencies of a jython script, trying to figure out all the module dependencies yourself will be close to writing a linker, isn&apos;t it? I think it will be easier to let user specify and ship his modules in the meanwhile.  &lt;/p&gt;</comment>
                            <comment id="12987143" author="alangates" created="Wed, 26 Jan 2011 18:28:23 +0000"  >&lt;p&gt;+1 to Ashutosh&apos;s comment.  Also, this won&apos;t port well as we add UDFs in new languages.&lt;/p&gt;</comment>
                            <comment id="13000982" author="ciemo" created="Tue, 1 Mar 2011 17:47:04 +0000"  >&lt;p&gt;I don&apos;t think it is appropriate to just leave this up to the end user to figure this stuff out.&lt;/p&gt;

&lt;p&gt;Especially when the errors won&apos;t be discovered until the user attempts to run the code on the grid&lt;br/&gt;
then must decipher the errors&lt;br/&gt;
then must track down the individual dependency files&lt;br/&gt;
then must try to figure out how to ship the necessary files&lt;br/&gt;
then must try to track down why it still doesn&apos;t work because the import files contained dependencies on imported files&lt;br/&gt;
then must track down the subsequent dependencies&lt;br/&gt;
then ...&lt;/p&gt;

&lt;p&gt;If jython itself does not provide hooks to enumerate all dependencies after parsing, would it be possible to build a tool which recurses the imports and then provides information to the end user on how to package all the dependencies for ship (or better just does it).&lt;/p&gt;

&lt;p&gt;Couldn&apos;t this be a requirement for all language bindings to provide a method or script for enumerating all dependent files, even if the interpreter implementation in Java doesn&apos;t provide this functionality natively?&lt;/p&gt;</comment>
                            <comment id="13012608" author="woody.anderson@gmail.com" created="Tue, 29 Mar 2011 19:39:16 +0100"  >&lt;p&gt;this code originally written cannot work:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; re
@outputSchema(&lt;span class=&quot;code-quote&quot;&gt;&quot;y:bag{t:tuple(word:chararray)}&quot;&lt;/span&gt;)
def strsplittobag(content,regex):
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; re.compile(regex).split(content
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the reason is that split returns a list of strings, not a list of tuples, and jythonfunction casting will fail. i&apos;ve created a ticket for these kinds of &apos;obvious&apos; type coercions: &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1942&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-1942&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and, as such, i am going to change the code for this ticket to something that will work when &apos;import re&apos; works.&lt;/p&gt;</comment>
                            <comment id="13013816" author="woody.anderson@gmail.com" created="Thu, 31 Mar 2011 04:14:44 +0100"  >&lt;p&gt;This patch was developed against 0.8 trunk, i&apos;ve tested in local mode and on the deployed grid.&lt;/p&gt;

&lt;p&gt;I deprecated PigContext.scriptFiles because it&apos;s odd to have two ways to add script files to the jar, and i wanted to have the patch work with 0.8 and any code that might be written against the public member variable &apos;scriptFiles&apos;. That code will work with this patch, it&apos;ll just produce a deprecation warning.&lt;/p&gt;

&lt;p&gt;The name/file pair is needed to register files into the job jar with an appropriate relative path to allow jython to resolve it in the jar.&lt;/p&gt;</comment>
                            <comment id="13013817" author="woody.anderson@gmail.com" created="Thu, 31 Mar 2011 04:15:54 +0100"  >&lt;p&gt;here&apos;s the patch file.&lt;/p&gt;</comment>
                            <comment id="13014086" author="woody.anderson@gmail.com" created="Thu, 31 Mar 2011 18:31:47 +0100"  >&lt;p&gt;The following may not be immediately self evident to all developers:&lt;/p&gt;

&lt;p&gt;import statements that execute from within runtime function calls will not work (unless the dependency has already been satisfied statically), eg:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
def resplit(content, regex, index):
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; re
 &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; re.compile(regex).split(content)[index]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will not work b/c the import is not attempted until after the job has been defined, built, and deployed.&lt;br/&gt;
This import practice is frowned upon and is used very rarely. If you happen to be doing it (i&apos;ll assume you have a good reason), then you probably know how to fix it. If you&apos;re using someone else&apos;s code that is written like this, you can satisfy the dependency by explicitly importing the module up front, this will cause it to be added to the jar, and subsequent uses will succeed.&lt;/p&gt;</comment>
                            <comment id="13014261" author="woody.anderson@gmail.com" created="Thu, 31 Mar 2011 23:52:25 +0100"  >&lt;p&gt;This altered patch removes the explicit &apos;import re&apos; test, as it relies on having a jython 2.5.0 install on disk and configured as visible to the runtime.&lt;/p&gt;

&lt;p&gt;test nested accomplishes the test of the mechanism in use by &apos;import re&apos;, so removing the explicit test is simply more portable.&lt;/p&gt;</comment>
                            <comment id="13016475" author="alangates" created="Wed, 6 Apr 2011 19:22:09 +0100"  >&lt;p&gt;A couple of questions:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Based on my analysis the static init block that this patch adds to JythonScriptingEngine will only get invoked once we know we have Jython in the mix.  Is that correct?  We don&apos;t want to be invoking this when Python UDFs or a Python control flow.&lt;/li&gt;
	&lt;li&gt;Right now the code to do this is part of the init of the JythonScriptingEngine.  Should we make this a separate method in ScriptEngine so that other languages can also add this kind of functionality?  I would not make it abstract, since some languages may not be able to do this.  But it seems like it makes for a cleaner interface.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13017549" author="woody.anderson@gmail.com" created="Fri, 8 Apr 2011 18:18:38 +0100"  >&lt;p&gt;1. i could re-work the initialization into the static block of the inner class &quot;Interpreter&quot;, it simply needs to be done before the interpreter is allocated. I&apos;m not sure what you mean by not wanting a cache dir when using python udfs or control flow? can you clarify?&lt;br/&gt;
2. separate the logic out of init into what? I think it should, in general, be the contract of any script environment to handle resource inclusion (if possible). Are you imagining some scenario where init(file,..) would not actually parse/internalize the code inside init()? I don&apos;t much care where the code is parsed and added to a ScriptEngine, but when it is, it should handle all other evaluated resources that are necessary to succeed. In the current API, a user provided script file is given to init(), so that&apos;s where it must do this. There is really no other place to evaluate resource inclusions, and i think i might not be understanding your suggestion. As for other ScriptEngines that may not be able to support this concept, are you suggesting a &quot;supportsFeature()&quot; method that we use to test various SE&apos;s to determine if they can support this (or other) features? I&apos;m not sure what we&apos;d do with this knowledge.&lt;/p&gt;</comment>
                            <comment id="13017762" author="alangates" created="Sat, 9 Apr 2011 00:53:06 +0100"  >&lt;p&gt;On the issue of the static block, I dislike static initialization blocks because you&apos;re never sure when they are going to be called.  Someone adding &quot;import o.a.p.s.j.JythonScriptingEngine&quot; somewhere in the code will result in changing when this is executed, including possibly when it does not need to be executed.  Just moving it into the Interpreter class as a static block won&apos;t change that I don&apos;t think.  It can&apos;t be in Interpreter&apos;s constructor?&lt;/p&gt;

&lt;p&gt;On the second point, what I meant was, should there be a separate method ScriptEngine.includeResources()?  This would make clear to developers of future scripting engines that this is something they need to do.  The contract would then be that before Pig called ScriptingEngine.registerFunction it would call includeResources().  I agree with you that, when possible, all scripting engine implementations should include their resources.  I was not suggesting a supportsFeature() method.  For situations where it cannot be supported includeResources would be a NOP.&lt;/p&gt;
</comment>
                            <comment id="13017789" author="woody.anderson@gmail.com" created="Sat, 9 Apr 2011 02:01:04 +0100"  >&lt;p&gt;ok. i understand your thoughts on static, and mostly i have them too, but the PythonInterpreter is a static member of the Interperter class, and the code i wrote must run BEFORE that interpreter is constructed.&lt;/p&gt;

&lt;p&gt;Interpeter is a private inner class, so it cannot be caused to load before normal use patterns. So, moving the static block into the static block for Interpreter addresses your concerns.&lt;/p&gt;

&lt;p&gt;import will not cause the static block to be executed btw, it&apos;s the first executed reference to the class. However, i take the point that some code could have been:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; = JythonScriptEngine.class;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or something like that to cause the class to be loaded. Still, as i said: Interpreter static block addresses this, and the ctor is out b/c of the static nature of Interpreter.interpreter.&lt;/p&gt;

&lt;p&gt;on second point:&lt;br/&gt;
i dont&apos; see the point of a includeResources() method, if it can be done, it can be done in init(), if not it won&apos;t be done. Why add a new method?&lt;/p&gt;</comment>
                            <comment id="13018483" author="woody.anderson@gmail.com" created="Mon, 11 Apr 2011 19:24:20 +0100"  >&lt;p&gt;static block moved to Interpreter&lt;/p&gt;</comment>
                            <comment id="13024960" author="julienledem" created="Mon, 25 Apr 2011 22:02:11 +0100"  >&lt;p&gt;Hi Woody,&lt;br/&gt;
This is a great feature. &lt;br/&gt;
I agree with the static block comments, but I don&apos;t see how you could do it differently without a major refactoring of the existing code.&lt;br/&gt;
Here are comments/questions about some details of the implementation.&lt;/p&gt;

&lt;p&gt;in JythonScriptEngine.Interpreter static block:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If &lt;em&gt;PYTHON_CACHEDIR&lt;/em&gt; is provided, we will delete it on exit. Shouldn&apos;t we delete it only if it has been created by Pig? it is dangerous to delete something that we have not created. The user could shoot himself in the foot by providing something he cares about as the &lt;em&gt;PYTHON_CACHEDIR&lt;/em&gt;.&lt;/li&gt;
	&lt;li&gt;Also, if we can&apos;t write to the provided &lt;em&gt;PYTHON_CACHEDIR&lt;/em&gt; we create another one. Can the user pre-populate the cache dir? If yes we should throw an exception here.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;in JythonScriptEngine.Interpreter.init():&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Something should fail if &lt;em&gt;is&lt;/em&gt; is null.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
InputStream is = getScriptAsStream(path);
 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (is != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13025007" author="woody.anderson@gmail.com" created="Tue, 26 Apr 2011 00:30:12 +0100"  >&lt;p&gt;agree:&lt;/p&gt;

&lt;p&gt;inre: PYTHON_CACHEDIR: the code behaves as you wish, in that it only deletes the dir if it (pig) created it.&lt;br/&gt;
sorry for not being being clear in comments about that, but if you read the code you&apos;ll see it.&lt;/p&gt;

&lt;p&gt;if we can&apos;t write, i (pig) was creating an alternate directory. It may be possible to pre-populate this, and i understand (and had) the desire to have an error instead of a new directory, but I was initially experiencing this error:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
*sys-&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt;-mgr*: can&apos;t create &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; cache dir, &apos;/grid/0/Releases/pig-0.8.0..1103222002-20110401-000/share/pig-0.8.0..1103222002/lib/cachedir/packages&apos;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is why i added the &apos;is writable&apos; check, but after reviewing (per your comment), it seems that cachedir is not set on the grid (at least at the point when the static block runs). If left as null, it seems to default to some grid location that is not writable (and thus doesn&apos;t work), but if i set it to a writable tmp first, it works.&lt;br/&gt;
so.. i can safely agree that an error if the dir isn&apos;t writable is both desirable and works.&lt;/p&gt;

&lt;p&gt;as for the getScriptAsStream():&lt;br/&gt;
i followed the existing code convention on that one, though i didn&apos;t like it either.&lt;br/&gt;
again, if you read down a bit you&apos;ll see that the impl of getScriptAsStream() is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
..
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (is == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(
                    &lt;span class=&quot;code-quote&quot;&gt;&quot;Could not initialize interpreter (from file system or classpath) with &quot;&lt;/span&gt; + scriptPath);
        }      
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; is;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so, the null check is superfluous but does quiet the &quot;not null check&quot; warnings.&lt;br/&gt;
i didn&apos;t add an additional throw statement in this case b/c essentially, my code wouldn&apos;t add any &lt;em&gt;new&lt;/em&gt; errors that the existing code didn&apos;t already exhibit if somehow the impl of getScriptAsStream changed and could return null.&lt;/p&gt;

&lt;p&gt;anyway, ill upload a new patch to address the writable issue, if you think it&apos;s a big deal we can add an &apos;else throw&apos; statement around getScriptAsStream&lt;/p&gt;</comment>
                            <comment id="13028362" author="julienledem" created="Tue, 3 May 2011 19:31:57 +0100"  >&lt;p&gt;Hi Woody,&lt;br/&gt;
I had misread the code about automatic deletion. You&apos;re right it deletes only if it was created by Pig.&lt;/p&gt;

&lt;p&gt;I understand the superfluous null check and the warning being somewhat incorrect. &lt;br/&gt;
To me there should be either no null check in that case or throw some exception if null. This is about debug-ability of the code. If someone changes the behavior of getScriptAsStream() there should be an exception in your code at that point. Not somewhere else. It also helps with understanding the code so that the reader does not wonder why it does nothing when the stream is null (because it&apos;s never null. But then why do we check ? etc)&lt;/p&gt;

&lt;p&gt;otherwise it looks good. Thanks!&lt;/p&gt;</comment>
                            <comment id="13028366" author="woody.anderson@gmail.com" created="Tue, 3 May 2011 19:53:06 +0100"  >&lt;p&gt;understood.&lt;br/&gt;
adding that null check/throw etc. is just a change that is unrelated to this bug. I can bundle it up as all the related lines of code are being changed by this bug anyway, but that&apos;s why i didn&apos;t do it originally.&lt;/p&gt;

&lt;p&gt;I&apos;ll add a throw similar to current impl of getScriptAsStream&lt;/p&gt;</comment>
                            <comment id="13030058" author="olgan" created="Fri, 6 May 2011 18:53:28 +0100"  >&lt;p&gt;Given that we would like to release 0.9 pretty soon, lets delay this one till the follow up release&lt;/p&gt;</comment>
                            <comment id="13030115" author="woody.anderson@gmail.com" created="Fri, 6 May 2011 21:18:07 +0100"  >&lt;p&gt;patch includes throw new IllegalStateException if the stream is null.&lt;/p&gt;</comment>
                            <comment id="13030116" author="woody.anderson@gmail.com" created="Fri, 6 May 2011 21:20:02 +0100"  >&lt;p&gt;i&apos;m not sure what&apos;s really left to keep this out of the next release, given we&apos;ve been going back an forth over issues that don&apos;t even affect functionality.&lt;br/&gt;
but, there are other jython related bugs in the pipe for 0.10 anyway, so perhaps having them all in the same release is a good idea for a feature grouping perspective.&lt;/p&gt;</comment>
                            <comment id="13030597" author="julienledem" created="Mon, 9 May 2011 05:07:16 +0100"  >&lt;p&gt;+1 for inclusion for me.&lt;br/&gt;
Thanks for including the comments Woody.&lt;/p&gt;</comment>
                            <comment id="13031274" author="alangates" created="Tue, 10 May 2011 18:49:43 +0100"  >&lt;p&gt;I&apos;ll start running the tests and such.  I also want to add some end to end tests.&lt;/p&gt;</comment>
                            <comment id="13032594" author="alangates" created="Thu, 12 May 2011 20:10:40 +0100"  >&lt;p&gt;Woody, &lt;/p&gt;

&lt;p&gt;This patch now conflicts with the changes that were checked in as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2056&quot; title=&quot;Jython error messages should show script name&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2056&quot;&gt;&lt;del&gt;PIG-2056&lt;/del&gt;&lt;/a&gt;.  I don&apos;t understand how to resolve the conflicts.  You could upload a new patch or just tell me how to do the resolution so I can continue testing.&lt;/p&gt;</comment>
                            <comment id="13034415" author="woody.anderson@gmail.com" created="Tue, 17 May 2011 00:08:20 +0100"  >&lt;p&gt;patch for trunk&lt;/p&gt;</comment>
                            <comment id="13034890" author="alangates" created="Tue, 17 May 2011 18:10:01 +0100"  >&lt;p&gt;I ran the unit tests and saw issues with most of the python oriented tests.  I&apos;ll attach the logs from the failing tests.&lt;/p&gt;</comment>
                            <comment id="13034932" author="woody.anderson@gmail.com" created="Tue, 17 May 2011 19:11:53 +0100"  >&lt;p&gt;hmm.. i ran each of those tests via:&lt;/p&gt;

&lt;p&gt;ant -noclasspath test -Dtestcase=org.apache.pig.test.TestScriptUDF&lt;br/&gt;
etc. and they all passed.&lt;/p&gt;

&lt;p&gt;is your environment clean?&lt;br/&gt;
% printenv | grep YTHON&lt;br/&gt;
(should be empty)&lt;/p&gt;

&lt;p&gt;is there anything else i should be doing to try to mirror your test framework (while not having to run all tests for the 18 hours that that requires)?&lt;/p&gt;</comment>
                            <comment id="13035179" author="woody.anderson@gmail.com" created="Wed, 18 May 2011 03:46:17 +0100"  >&lt;p&gt;ok. my bad!&lt;/p&gt;

&lt;p&gt;testcase=full.package.path doesn&apos;t even run the test, so tho i claimed that the tests were passing, it was in fact simply that junit could run.&lt;/p&gt;


&lt;p&gt;Here&apos;s a new patch:&lt;br/&gt;
there was an extra line that i mistakenly didn&apos;t delete when creating the re-trunked code.&lt;/p&gt;

&lt;p&gt;this patch will pass the tests&lt;/p&gt;</comment>
                            <comment id="13035542" author="rding" created="Wed, 18 May 2011 19:18:42 +0100"  >&lt;p&gt;The new patch fixed the unit test errors reported earlier. I have one (different) failed test in TestGrunt, not sure if it&apos;s related to the patch. &lt;/p&gt;</comment>
                            <comment id="13036496" author="woody.anderson@gmail.com" created="Thu, 19 May 2011 22:33:37 +0100"  >&lt;p&gt;cool. can we get this into trunk so i don&apos;t have to keep fixing the patches?&lt;/p&gt;</comment>
                            <comment id="13036514" author="olgan" created="Thu, 19 May 2011 22:48:54 +0100"  >&lt;p&gt;I believe that Richard is running some additional tests. Once he is done, he is planning to commit the patch&lt;/p&gt;</comment>
                            <comment id="13037039" author="rding" created="Fri, 20 May 2011 20:52:02 +0100"  >&lt;p&gt;Patch passed e2e python tests.&lt;/p&gt;</comment>
                            <comment id="13037043" author="olgan" created="Fri, 20 May 2011 20:57:45 +0100"  >&lt;p&gt;Lets get it committed! Thanks, Woody for contributing!&lt;/p&gt;</comment>
                            <comment id="13037051" author="rding" created="Fri, 20 May 2011 21:04:50 +0100"  >&lt;p&gt;patch committed to trunk. Thanks Woody!&lt;/p&gt;</comment>
                            <comment id="13565541" author="russell.jurney" created="Tue, 29 Jan 2013 17:21:25 +0000"  >&lt;p&gt;This does not actually work for me, in either Pig 0.10 or Pig 0.10.1. I can&apos;t include the &apos;re&apos; module via &apos;import re&apos;, or I get this error:&lt;/p&gt;

&lt;p&gt;Caused by: Traceback (most recent call last):&lt;br/&gt;
  File &quot;udfs.py&quot;, line 20, in &amp;lt;module&amp;gt;&lt;br/&gt;
    import re&lt;br/&gt;
ImportError: No module named re&lt;/p&gt;</comment>
                            <comment id="13648793" author="martin.gerlach" created="Fri, 3 May 2013 21:48:46 +0100"  >&lt;p&gt;Doesn&apos;t work for me, either (with codecs module). Pig version is 0.10.0-cdh4.1.2&lt;/p&gt;</comment>
                            <comment id="13649920" author="rohini" created="Mon, 6 May 2013 18:56:25 +0100"  >&lt;p&gt;You need to have jython/Lib directory in the classpath. We bundle it with our deployment. Else need to have jython-standalone.jar instead of jython.jar as in Pig 0.11. &lt;/p&gt;</comment>
                            <comment id="13649924" author="rohini" created="Mon, 6 May 2013 18:59:15 +0100"  >&lt;p&gt;to use a jython install, the Lib dir must be in the jython search path&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;via env variable JYTHON_HOME=jy_home or JYTHON_PATH=jy_home/Lib:... or&lt;/li&gt;
	&lt;li&gt;jython-standalone.jar should be in the classpath&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12552296">PIG-2665</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12535551">PIG-2433</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12475052" name="1824.patch" size="24372" author="woody.anderson@gmail.com" created="Thu, 31 Mar 2011 04:15:54 +0100"/>
                            <attachment id="12479541" name="1824_final.patch" size="30473" author="woody.anderson@gmail.com" created="Wed, 18 May 2011 03:46:17 +0100"/>
                            <attachment id="12475164" name="1824a.patch" size="23371" author="woody.anderson@gmail.com" created="Thu, 31 Mar 2011 23:52:25 +0100"/>
                            <attachment id="12476028" name="1824b.patch" size="28533" author="woody.anderson@gmail.com" created="Mon, 11 Apr 2011 19:24:20 +0100"/>
                            <attachment id="12477342" name="1824c.patch" size="28656" author="woody.anderson@gmail.com" created="Tue, 26 Apr 2011 00:32:34 +0100"/>
                            <attachment id="12478466" name="1824d.patch" size="28783" author="woody.anderson@gmail.com" created="Fri, 6 May 2011 21:18:07 +0100"/>
                            <attachment id="12479401" name="1824x.patch" size="30526" author="woody.anderson@gmail.com" created="Tue, 17 May 2011 00:08:20 +0100"/>
                            <attachment id="12479480" name="TEST-org.apache.pig.test.TestGrunt.txt" size="1146587" author="alangates" created="Tue, 17 May 2011 18:13:41 +0100"/>
                            <attachment id="12479481" name="TEST-org.apache.pig.test.TestScriptLanguage.txt" size="919041" author="alangates" created="Tue, 17 May 2011 18:13:41 +0100"/>
                            <attachment id="12479482" name="TEST-org.apache.pig.test.TestScriptUDF.txt" size="196397" author="alangates" created="Tue, 17 May 2011 18:13:41 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 26 Jan 2011 17:40:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>165207</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyatyf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97164</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>module import state is determined before and after user code is executed. The resolved modules are inspected and added to the pigContext, then they are added to the job jar.&lt;br/&gt;
&lt;br/&gt;
this patch addresses the following import modes:&lt;br/&gt;
- import re, which will (if configured) find re on the filesystem in the jython install root&lt;br/&gt;
- import foo (which can import bar), this works now provided bar is resolvable JYTHON_HOME, JYTHONPATH, curdir, etc.&lt;br/&gt;
- from pkg import *, which works when the cachedir is writable&lt;br/&gt;
- import non.jvm.class, which works when the cachedir is writable&lt;br/&gt;
- the directly imported module may use schema decorators, but recursively imported modules cannot until &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1943&quot; title=&quot;jython functions can use the @outputSchema decorator, but only if in the out script that is imported, we should add a builting module pigdecorators.py so that developers can import and use them in lib scripts&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1943&quot;&gt;PIG-1943&lt;/a&gt; is addressed&lt;br/&gt;
</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>jython, import</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>