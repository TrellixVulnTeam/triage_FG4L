<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:48:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-2443/PIG-2443.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-2443] [Piggybank] Add UDFs to check if a String is an Integer And if a String is Numeric</title>
                <link>https://issues.apache.org/jira/browse/PIG-2443</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;UDF that could be used to check if a String is numeric (or an Integer). Several tools such as Splunk, AbInitio have this UDF built-in and companies making an effort to move to Hadoop/Pig could use this.&lt;/p&gt;

&lt;p&gt;Use Case:&lt;br/&gt;
In raw logs there are certain filters/conditions applied based on whether a particular field/value is numeric or not. For eg, SPLIT A INTO CATEGORY1 IF IsInt($0), CATEGORY2 IF !IsInt($0);&lt;/p&gt;</description>
                <environment></environment>
        <key id="12535981">PIG-2443</key>
            <summary>[Piggybank] Add UDFs to check if a String is an Integer And if a String is Numeric</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="prkommireddi">Prashant Kommireddi</assignee>
                                    <reporter username="prkommireddi">Prashant Kommireddi</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Dec 2011 09:58:35 +0000</created>
                <updated>Fri, 22 Feb 2013 04:53:52 +0000</updated>
                            <resolved>Tue, 3 Jan 2012 04:51:03 +0000</resolved>
                                                    <fixVersion>0.11</fixVersion>
                                    <component>piggybank</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13173988" author="prkommireddi" created="Wed, 21 Dec 2011 10:07:27 +0000"  >&lt;p&gt;Proposal to implement 2 UDFs&lt;/p&gt;

&lt;p&gt;1. IsInt&lt;br/&gt;
2. IsNumeric&lt;/p&gt;

&lt;p&gt;IsInt is used to check whether the String input is an Integer. Note this function checks for Integer range 2,147,483,648 to 2,147,483,647.&lt;/p&gt;

&lt;p&gt;Use IsNumeric instead if you would like to check if a String is numeric. Also IsNumeric performs better as its a regex match compared to IsInt which makes a call to Integer.parseInt(String input)&lt;/p&gt;

&lt;p&gt;IsInt checks whether making a call to Integer.parseInt results in a NumberFormatException and returns the boolean accordingly.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class IsInt &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; EvalFunc&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;&amp;gt; {
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt; exec(Tuple input) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (input == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || input.size() == 0) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; str = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)input.get(0);
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (str == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || str.length() == 0) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
            &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.parseInt(str);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (NumberFormatException nfe) {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ClassCastException e) {
            warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unable to &lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt; input &quot;&lt;/span&gt;+input.get(0)+&lt;span class=&quot;code-quote&quot;&gt;&quot; of class &quot;&lt;/span&gt;+
                    input.get(0).getClass()+&lt;span class=&quot;code-quote&quot;&gt;&quot; to &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;, PigWarning.UDF_WARNING_1);
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
        }

        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IsNumeric makes a Regex match against the Input to check whether all characters are numeric digits.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class IsNumeric &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; EvalFunc&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;&amp;gt; {

	@Override
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt; exec(Tuple input) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
		&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (input == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || input.size() == 0)
			&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
		&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
			&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; str = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;) input.get(0);
			&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (str == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || str.length() == 0)
				&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;

			&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (str.startsWith(&lt;span class=&quot;code-quote&quot;&gt;&quot;-&quot;&lt;/span&gt;))
				str = str.substring(1);

			&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; str.matches(&lt;span class=&quot;code-quote&quot;&gt;&quot;\\d*&quot;&lt;/span&gt;);

		} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ClassCastException e) {
			warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unable to &lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt; input &quot;&lt;/span&gt; + input.get(0) + &lt;span class=&quot;code-quote&quot;&gt;&quot; of class &quot;&lt;/span&gt;
					+ input.get(0).getClass() + &lt;span class=&quot;code-quote&quot;&gt;&quot; to &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&quot;&lt;/span&gt;,
					PigWarning.UDF_WARNING_1);
			&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
		}
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have added Test cases for both UDFs as well.&lt;/p&gt;</comment>
                            <comment id="13174281" author="jcoveney" created="Wed, 21 Dec 2011 18:31:37 +0000"  >&lt;p&gt;What about floats and doubles? Are we assuming they are not numeric?&lt;/p&gt;</comment>
                            <comment id="13174299" author="prkommireddi" created="Wed, 21 Dec 2011 18:48:11 +0000"  >&lt;p&gt;Good point. We could have functions IsFloat/IsDouble/IsLong overriding IsInt. And IsNumeric can be a single UDF that handles all the cases, since we do not have a notion of range checks on this UDF?&lt;/p&gt;</comment>
                            <comment id="13174343" author="jcoveney" created="Wed, 21 Dec 2011 19:34:23 +0000"  >&lt;p&gt;Yeah, that&apos;s what I&apos;d do. I wouldn&apos;t obsess over speed yet, I&apos;d just implement it and see how fast it is, and then if it&apos;s prohibitively slow go from there.&lt;/p&gt;

&lt;p&gt;The more annoying issue is that since we&apos;re essentially converting it over, there&apos;s going to be two casts when there only needs to be one.&lt;/p&gt;

&lt;p&gt;You&apos;ll have IsInt() in the split, and then in the resultant field, you&apos;ll have to cast the int one over to an int. It&apos;d be nice if it could take advantage of what is going on and post split, the true values will have the proper schema :int, and the ones that aren&apos;t will still be :chararray.&lt;/p&gt;</comment>
                            <comment id="13174375" author="prkommireddi" created="Wed, 21 Dec 2011 20:04:38 +0000"  >&lt;p&gt;1. IsNumeric is not necessarily implemented for speed, rather it&apos;s for a different requirement. That is, for cases when user does not care if value is an Int/Long/Float/Double and simply would like to check if it is numeric. (Though this inherently gives you better performance)&lt;/p&gt;

&lt;p&gt;2. I had originally thought of isInt or IsNumeric to be a UDF to determine if data is int/numeric but not to actually make the cast. &lt;br/&gt;
I am curious as to how the UDF could produce variable output schema. &lt;/p&gt;</comment>
                            <comment id="13174378" author="jcoveney" created="Wed, 21 Dec 2011 20:10:17 +0000"  >&lt;p&gt;Oh, I totally know what you mean, I&apos;m just saying it would be cool... and given that you&apos;re doing, say, Integer.parseInt() and then just throwing away the result, it seems silly that someone would do the split, and then recast the int fields in the relation created by the data for which IsInt is true.&lt;/p&gt;

&lt;p&gt;There is currently no way for UDF to produce variable output schema (nor should there, be, really). This would be something specific to this use of split.&lt;/p&gt;</comment>
                            <comment id="13174409" author="prkommireddi" created="Wed, 21 Dec 2011 21:02:34 +0000"  >&lt;p&gt;I agree with you on that, it would be nice to have the UDF return the integer value in case input is an Integer, and a default otherwise. May be we can visit that at a later time.&lt;/p&gt;

&lt;p&gt;As per your feedback, here is what I am going to do. Let me know your thoughts on this&lt;/p&gt;

&lt;p&gt;1. IsNumeric works for floating points&lt;br/&gt;
2. Override IsInt for Long, Double, Float&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class IsNumeric &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; EvalFunc&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;&amp;gt; {

    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt; exec(Tuple input) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (input == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || input.size() == 0) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; str = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)input.get(0);
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (str == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || str.length() == 0) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;

            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (str.startsWith(&lt;span class=&quot;code-quote&quot;&gt;&quot;-&quot;&lt;/span&gt;)) str = str.substring(1);

            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; str.matches(&lt;span class=&quot;code-quote&quot;&gt;&quot;\\d+(\\.\\d+)?&quot;&lt;/span&gt;);

        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ClassCastException e) {
            warn(e.getMessage(), PigWarning.UDF_WARNING_1);
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13174410" author="jcoveney" created="Wed, 21 Dec 2011 21:07:20 +0000"  >&lt;p&gt;That sounds fine. In the case of numeric, I think we need to think about when you want it to return true.&lt;/p&gt;

&lt;p&gt;1. Should it only return true for valid Int, Long, Double, or Float values? Your example would return true for 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111, though this is way too large to be any of the above!&lt;br/&gt;
2. A Java double can take the form 2.22e308, or whathave you. You said that a regex is faster than a Double, but how much faster. You can build in all the rules, but eventually you&apos;re just reimplementing the logic of parseDouble.&lt;/p&gt;</comment>
                            <comment id="13174502" author="prkommireddi" created="Wed, 21 Dec 2011 23:39:24 +0000"  >&lt;p&gt;1. IsNumeric does not check for Long/Double range at all. Its simply a check to verify whether a String contains ONLY digits or not. The reason to implement this is to give users the ability to make a check for numeric&quot;ness&quot;, and not necessarily to cast it back to a data type.&lt;/p&gt;

&lt;p&gt;Example: At my previous company we stored item listings as a Numeric value. These Item Listing IDs could go well beyond the range of Long/Double. If I try to check for numeric&quot;ness&quot; based on a certain data type (long, double) it would fail. &lt;br/&gt;
The reason I implemented this is currently I use it to only SPLIT based on numeric&quot;ness&quot; in the log files. Once I have determined the SPLIT I do not cast it to a particular data type. And the field on which I call isNumeric can be arbitrary in length.&lt;/p&gt;

&lt;p&gt;2. Good point again, I do not expect a huge gain but Regex match will in most cases be slightly faster than parseDouble. Just to reiterate, the primary goal of implementing IsNumeric is not performance.&lt;/p&gt;

&lt;p&gt;I think isNumeric is a nice to have UDF. But if it sounds like it would confuse users more than its worth, we could just stick to isInt/IsLong etc. &lt;/p&gt;</comment>
                            <comment id="13174508" author="jcoveney" created="Wed, 21 Dec 2011 23:53:59 +0000"  >&lt;p&gt;I don&apos;t think it&apos;s too confusing, I would just explicitly state the purpose of the UDF. It is a fair one, and is something that I&apos;ve done manually before, so I think it makes sense to ask. Just document the purpose, and more importantly, what it doesn&apos;t do.&lt;/p&gt;</comment>
                            <comment id="13176285" author="prkommireddi" created="Tue, 27 Dec 2011 19:41:34 +0000"  >&lt;p&gt;Added IsFloat, isDouble, IsLong. Also added test cases for the same.&lt;/p&gt;

&lt;p&gt;Added documentation for IsNumeric&lt;/p&gt;</comment>
                            <comment id="13178515" author="daijy" created="Mon, 2 Jan 2012 19:06:47 +0000"  >&lt;p&gt;Hi, Prashant,&lt;br/&gt;
Thanks for the patch. Please add Apache License Header to every new file you add. Also can you add javadoc to every UDF you add (you can provide a link if it is a repetition)&lt;/p&gt;</comment>
                            <comment id="13178587" author="prkommireddi" created="Tue, 3 Jan 2012 01:05:04 +0000"  >&lt;p&gt;Adding Apache License and Javadoc comments&lt;/p&gt;</comment>
                            <comment id="13178623" author="daijy" created="Tue, 3 Jan 2012 04:51:03 +0000"  >&lt;p&gt;See two piggybank test failure: TestDBStorage and TestMultiStorageCompression. But these certainly not related to this patch. I will trace them in a separate ticket. &lt;/p&gt;

&lt;p&gt;test-patch:&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; -1 overall.  &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 @author.  The patch does not contain any @author tags.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 tests included.  The patch appears to include 15 new or modified tests.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     -1 release audit.  The applied patch generated 508 release audit warnings (more than the trunk&apos;s current 501 warnings).&lt;/p&gt;

&lt;p&gt;Every new file contains proper header, ignore release audit warning.&lt;/p&gt;

&lt;p&gt;Patch committed to trunk.&lt;/p&gt;

&lt;p&gt;Thanks Prashant for contributing!&lt;/p&gt;</comment>
                            <comment id="13178912" author="prkommireddi" created="Tue, 3 Jan 2012 18:52:38 +0000"  >&lt;p&gt;Daniel, thanks for the commit!&lt;br/&gt;
And Jonathan, thanks for your input.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12509160" name="PIG-2443.2.patch" size="26406" author="prkommireddi" created="Tue, 3 Jan 2012 01:05:03 +0000"/>
                            <attachment id="12508700" name="PIG-2443.patch" size="17190" author="prkommireddi" created="Tue, 27 Dec 2011 19:41:34 +0000"/>
                            <attachment id="12508220" name="isIntNumeric.patch" size="6302" author="prkommireddi" created="Wed, 21 Dec 2011 10:02:06 +0000"/>
                            <attachment id="12508219" name="isIntNumeric.patch" size="5134" author="prkommireddi" created="Wed, 21 Dec 2011 10:00:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 21 Dec 2011 18:31:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>221664</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12310041" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Patch Info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10042"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyax8v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97697</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Piggybank, IsInt, IsNumeric</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>