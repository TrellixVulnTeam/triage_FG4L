<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:11:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1292/PIG-1292.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1292] Interface Refinements</title>
                <link>https://issues.apache.org/jira/browse/PIG-1292</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;A loader can&apos;t implement both OrderedLoadFunc and IndexableLoadFunc, as both are abstract classes instead of being interfaces.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12458857">PIG-1292</key>
            <summary>Interface Refinements</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ashutoshc">Ashutosh Chauhan</assignee>
                                    <reporter username="ashutoshc">Ashutosh Chauhan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 11 Mar 2010 21:57:46 +0000</created>
                <updated>Fri, 14 May 2010 07:47:25 +0100</updated>
                            <resolved>Tue, 16 Mar 2010 17:13:14 +0000</resolved>
                                    <version>0.7.0</version>
                                    <fixVersion>0.7.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12844247" author="ashutoshc" created="Thu, 11 Mar 2010 21:58:57 +0000"  >&lt;p&gt;Currently LoadFunc is an abstract class. OrderedLoadFunc is another abstract class which extends LoadFunc and adds the method which tells Pig in what order to read the splits. Similarly, there is IndexableLoadFunc which also extends LoadFunc and adds the functionality that loader can arbitrarily seek near to specified keys. Its not hard to imagine that there may exist a loader which can do both. Currently there can&apos;t be such a loader since both of these are abstract classes. Proposal is to change them to interfaces. &lt;/p&gt;

&lt;p&gt;Further, a loader may also provide a guarantee that all instances of a key appear together in one split. A similar loader is required for map-side groups &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-984&quot; title=&quot;PERFORMANCE: Implement a map-side group operator to speed up processing of ordered data &quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-984&quot;&gt;&lt;del&gt;PIG-984&lt;/del&gt;&lt;/a&gt; . Currently, its assumed that underlying loader is providing data in a way its expected. We should formalize this assumption by introducing new interface and checking if loader is implementing it.&lt;/p&gt;</comment>
                            <comment id="12844248" author="ashutoshc" created="Thu, 11 Mar 2010 22:04:10 +0000"  >&lt;p&gt;A preview patch with suggested changes.&lt;/p&gt;</comment>
                            <comment id="12844282" author="xuefuz" created="Thu, 11 Mar 2010 23:54:12 +0000"  >&lt;p&gt;A few comments from my personal perspective:&lt;/p&gt;

&lt;p&gt;1. WritableComparable&amp;lt;?&amp;gt; getSplitComparable(PigSplit split) should not pass PigSplit instace. Instead, it should only pass the actual split wrapped in PigSplit. On interface level, the type should be just InputSplit.&lt;/p&gt;

&lt;p&gt;2. In CollectableLoadFunc interface, void should be the return type. If a LoadFunc implementation implements the interface, it means it&apos;s capable to support what is asking for. There is no point to implement an interface and later to say it&apos;s not capably to do what the interface is asking.&lt;/p&gt;

&lt;p&gt;3. ensureAllKeyInstancesInSameSplit() method might need a better name. However, comparing to another two issues, this is minor.&lt;/p&gt;</comment>
                            <comment id="12844301" author="ashutoshc" created="Fri, 12 Mar 2010 00:46:10 +0000"  >&lt;p&gt;Thanks for review, Xuefu.&lt;/p&gt;

&lt;p&gt;1. Thats a valid point. Where possible we want loadfunc implementers to deal with Hadoop concepts and not with Pig concepts.&lt;/p&gt;

&lt;p&gt;2. So, lets assume there is a loader which is capable of  implementing this interface but only if underlying data is sorted (information which is available to loader only at run-time). Now this loader will implement this interface, indicating to Pig it is capable of doing it. But just because it is capable of doing it, doesn&apos;t necessarily imply it will do it (possibly because of performance reasons). Then, when Pig calls the method of interface, it is communicating to loader that it wants data in particular fashion, no matter what. Inside this method, loader may come to know about some metadata (like data is not sorted, possibly by reading its schema or contacting some metadata repo) and decides that it cant honor the contract because of information which is available to it only at run time. Then, loader may return false for the method. Pig may then choose to rewrite the query and still carry-on the execution. Because of these scenarios, I think having a boolean return value is useful. what do you think?&lt;/p&gt;

&lt;p&gt;3. Can&apos;t come up with better name. Feel free to suggest &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12844604" author="xuefuz" created="Fri, 12 Mar 2010 18:35:19 +0000"  >&lt;p&gt;If the response to #2 is the assumption, then don&apos;t create a new interface with a single method in it. Put this method in any existing interfaces, say, as an abstract method in LoadFunc itself. If a loader is absolutely incapable, then return false always. Otherwise, if the loader&apos;s answer varies case-by-case, then return true/false selectively in the implementation. &lt;/p&gt;

&lt;p&gt;In general, I think an API should be simple and clear. I can image that other developers may have the same difficulty understanding what&apos;s this interface about.&lt;/p&gt;

&lt;p&gt;FYI, Zebra TableLoader now extends one parent class, and implements FIVE interfaces. With this trend, it may grow even more. To me, this seems excessive.&lt;/p&gt;</comment>
                            <comment id="12844611" author="dvryaboy" created="Fri, 12 Mar 2010 18:55:20 +0000"  >&lt;p&gt;Agreed with Xuefu&apos;s comment regarding the interfaces. This really seems like something we can just have the abstract func default to false.&lt;/p&gt;

&lt;p&gt;Method name suggestion: how about hasKeyToSplitAffinity() &lt;/p&gt;</comment>
                            <comment id="12844632" author="ashutoshc" created="Fri, 12 Mar 2010 19:31:09 +0000"  >&lt;p&gt;One reason for not putting it in LoadFunc is to keep loadfunc simple and not have such highly specific methods in there. We want to move such specialized capabilities away from LoadFunc into their own interfaces. This is also the reason &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-966&quot; title=&quot;Proposed rework for LoadFunc, StoreFunc, and Slice/r interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-966&quot;&gt;&lt;del&gt;PIG-966&lt;/del&gt;&lt;/a&gt; decided to split LoadFunc into separate interfaces like LoadPushDown, LoadCaster, LoadMetaData etc. and not put all of them in LoadFunc. This frees loadfunc implementers from not thinking about them, if they don&apos;t want to. And if one wants to have such specific capability in his loader, he has to think about it anyway whether its in loadfunc or in its own interface. &lt;/p&gt;

&lt;p&gt;That said, I agree having boolean return value for the method seems to be confusing, so I agree method return value should be void.&lt;/p&gt;</comment>
                            <comment id="12844640" author="dvryaboy" created="Fri, 12 Mar 2010 19:48:48 +0000"  >&lt;p&gt;.. but we have an abstract class that can provide default implementations so that implementers don&apos;t have to think about this.&lt;/p&gt;

&lt;p&gt;Most of the interfaces introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-966&quot; title=&quot;Proposed rework for LoadFunc, StoreFunc, and Slice/r interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-966&quot;&gt;&lt;del&gt;PIG-966&lt;/del&gt;&lt;/a&gt; have significant chunks of functionality associated with them. This is just a single method about a particular property of the incoming data.&lt;br/&gt;
I can see why you&apos;d be against putting it into LoadFunc, though, as it&apos;s very specific. What about ResourceSchema or LoadMetaData?&lt;/p&gt;</comment>
                            <comment id="12844669" author="ashutoshc" created="Fri, 12 Mar 2010 20:41:04 +0000"  >&lt;p&gt;Didn&apos;t get about LoadMetaData, ResourceSchema. LoadMetaData is one of those interfaces which loaders can choose to implement. ResourceSchema is independent class of its own.&lt;/p&gt;

&lt;p&gt;New patch incorporating suggested changes in the above comments. This patch also adds checks in the MRCompiler to enforce loader to implement new CollectableLoader interface if there is a map-side grouping ( &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-984&quot; title=&quot;PERFORMANCE: Implement a map-side group operator to speed up processing of ordered data &quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-984&quot;&gt;&lt;del&gt;PIG-984&lt;/del&gt;&lt;/a&gt; ) in the script.&lt;/p&gt;</comment>
                            <comment id="12844671" author="ashutoshc" created="Fri, 12 Mar 2010 20:42:22 +0000"  >&lt;p&gt;Hudson is fickle recently. Hopefully, this patch gets lucky and is tested correctly.&lt;/p&gt;</comment>
                            <comment id="12844724" author="xuefuz" created="Fri, 12 Mar 2010 22:32:11 +0000"  >&lt;p&gt;Looking at the OrderedLoadFunc interface, public WritableComparable&amp;lt;?&amp;gt; getSplitComparable(InputSplit split, int splitIdx), I am not sure why split index suddenly comes into the picture. Though it was in earlier discussion between Pig and Zebra, we agree that this is very implementation specific, which shouldn&apos;t dictate API design. Thus, I don&apos;t think that split index should be in the signature even if it helps Zebra implementation. If an implementation needs the split index, it can always store the index in the split it generates. That&apos;s what exactly Zebra plan to do.&lt;/p&gt;</comment>
                            <comment id="12845336" author="hadoopqa" created="Mon, 15 Mar 2010 14:47:59 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12438638/pig-1292.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12438638/pig-1292.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 923043.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 531 release audit warnings (more than the trunk&apos;s current 530 warnings).&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/237/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/237/testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/237/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/237/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/237/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/237/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/237/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/237/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12845717" author="pkamath" created="Tue, 16 Mar 2010 05:37:03 +0000"  >&lt;p&gt;As Xuefu mentioned, we can get rid of the splitIdx argument in public WritableComparable&amp;lt;?&amp;gt; getSplitComparable(InputSplit split, int splitIdx).&lt;/p&gt;

&lt;p&gt;Otherwise the changes look good, +1 for commit with the above change.&lt;/p&gt;</comment>
                            <comment id="12846004" author="ashutoshc" created="Tue, 16 Mar 2010 17:13:14 +0000"  >&lt;p&gt;Patch checked-in with changes suggested in previous comment. Core test failure reported by hudson was transient. It passed on my machine.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12438638" name="pig-1292.patch" size="20629" author="ashutoshc" created="Fri, 12 Mar 2010 20:41:04 +0000"/>
                            <attachment id="12438546" name="pig-interfaces.patch" size="10700" author="ashutoshc" created="Thu, 11 Mar 2010 22:04:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 11 Mar 2010 23:54:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164795</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyaorr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>96324</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>