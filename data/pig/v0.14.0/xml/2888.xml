<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:55:21 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-2888/PIG-2888.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-2888] Improve performance of POPartialAgg</title>
                <link>https://issues.apache.org/jira/browse/PIG-2888</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;During performance testing, we found that POPartialAgg can cause performance degradation for Pig jobs when the Algebraic UDFs it&apos;s being applied to aren&apos;t well suited to the operator&apos;s assumptions. Changing the implementation to a more flexible hash-based model can provide significant performance improvements.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12604523">PIG-2888</key>
            <summary>Improve performance of POPartialAgg</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dvryaboy">Dmitriy V. Ryaboy</assignee>
                                    <reporter username="dvryaboy">Dmitriy V. Ryaboy</reporter>
                        <labels>
                    </labels>
                <created>Wed, 22 Aug 2012 23:04:56 +0100</created>
                <updated>Fri, 22 Feb 2013 04:53:47 +0000</updated>
                            <resolved>Sun, 2 Sep 2012 23:49:47 +0100</resolved>
                                                    <fixVersion>0.11</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13439904" author="dvryaboy" created="Wed, 22 Aug 2012 23:11:27 +0100"  >&lt;p&gt;The current implementation makes a two key assumptions that are frequently violated in real-life datasets and scripts:&lt;/p&gt;

&lt;p&gt;1) The intermediate UDF is cheap to invoke&lt;br/&gt;
2) Records come in mostly-grouped order (records with the same key tend to follow each other).&lt;/p&gt;

&lt;p&gt;When condition 2 is not satisfied, POPartialAgg winds up calling the intermediate UDF on all accumulated values so far for a given key, plus a new tuple, for every single tuple it sees. This causes a significant performance degradation.&lt;/p&gt;

&lt;p&gt;Instead, we propose accumulating tuples across the board until a memory threshold is reached. Once this threshold is reached, all keys and tuples are fed into the intermediate UDF and the results put into a second-level map (presumably, having been significantly shrunk by the intermediate UDF).  This repeats until the second-level map hits its threshold, at which point &lt;b&gt;it&lt;/b&gt; is summarized and its values replaced with the aggregated ones. If after such a reduction the memory occupied by the hashmap is still near the threshold, the results are returned to the regular MR pipeline.&lt;/p&gt;</comment>
                            <comment id="13439907" author="dvryaboy" created="Wed, 22 Aug 2012 23:18:12 +0100"  >&lt;p&gt;The attached patch is an initial pass at this implementation. Reading it as a diff may be hard &amp;#8211; about 70% of the code in POPartialAgg changed &amp;#8211; I recommend applying it to a git branch and looking at the class directly.&lt;/p&gt;

&lt;p&gt;I have not implemented memory-based triggering yet, for now just relying on hardcoded limits on number of tuples in the caches.&lt;/p&gt;

&lt;p&gt;I have also not implemented the functionality to automatically turn off hash-based aggregation.&lt;/p&gt;

&lt;p&gt;Tests (except the memory setting related tests) pass.&lt;/p&gt;

&lt;p&gt;Test runs on synthetic data both in local mode and on a cluster produced correct data.&lt;/p&gt;

&lt;p&gt;Cluster runs indicate significant improvement in overall speed of execution when using this approach.&lt;/p&gt;</comment>
                            <comment id="13442219" author="dvryaboy" created="Mon, 27 Aug 2012 00:09:13 +0100"  >&lt;p&gt;Attaching a second version. It&apos;s ready for review.&lt;/p&gt;

&lt;p&gt;This takes care of memory estimation (and actually looks at number of operators, doesn&apos;t just hardcode a magic &quot;3&quot;), and turns off if reduction is insufficient.&lt;/p&gt;

&lt;p&gt;Would love to get a 3-rd party verification of the speed improvements. Maybe someone who has recent PigMix results can rerun with this patch?&lt;/p&gt;

&lt;p&gt;One of the test cases (TestPOPartialAgg.testPartialMultiInput1HashMemEmpty) still fails, because it assumes that even if no memory is allocated to internal cached bags, consecutive keys still get aggregated. That&apos;s an assumption that&apos;s pretty specific to the old implementation. Does anyone think that feature is critical? If not, I would like to remove the test.&lt;/p&gt;</comment>
                            <comment id="13442279" author="dvryaboy" created="Mon, 27 Aug 2012 06:30:42 +0100"  >&lt;p&gt;Minor logging and spill perf improvements (reusing the iterator, forcing an agg if any list gets too big, being slightly more clever about hashmap sizing).&lt;/p&gt;</comment>
                            <comment id="13442613" author="dvryaboy" created="Mon, 27 Aug 2012 19:52:04 +0100"  >&lt;p&gt;none of the PigMix queries hit the particular bad behavior this is meant to address. I&apos;ve verified that the speed is on par with the previous implementation for those &quot;good&quot; use cases.&lt;/p&gt;

&lt;p&gt;Here is a script for which Pig with this patch finishes in 57 seconds, while without the patch, it takes 13 mins 48 secs:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
rmf tmp/delme
l = load &apos;data.txt&apos;;
x = foreach l generate $0 as l, (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) (RANDOM() * 10000) as num; 
g = foreach (group x by num % 100) { d = distinct x.num; generate SUM(d); }
store g into &apos;tmp/delme&apos;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Data file contains about 7 million rows, 1 letter each. &lt;br/&gt;
This is an intentionally skewed example, but we&apos;ve encountered similar problems with real data, particularly when grouping by high-cardinality columns like user_id and subsequently performing algebraic operations on nested distincts.&lt;/p&gt;</comment>
                            <comment id="13442933" author="dvryaboy" created="Tue, 28 Aug 2012 04:41:11 +0100"  >&lt;p&gt;Significant improvements to transitions from raw to processed map. Better mem utilization estimation. Better logging.&lt;/p&gt;

&lt;p&gt;While profiling, also noticed an inordinate amount of time being spent in Distinct$Initial&apos;s bag registration, fixed that.&lt;/p&gt;

&lt;p&gt;The task that I cited as taking 57 seconds with this patch earlier? It now takes 30 seconds. Also saw 40% speed improvement vs older version of this patch on a production job.&lt;/p&gt;

&lt;p&gt;Please review &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                            <comment id="13442974" author="julienledem" created="Tue, 28 Aug 2012 06:48:57 +0100"  >&lt;p&gt;Awesome. Stop now or it will start to be negative soon.&lt;br/&gt;
Comments:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;There&apos;s a &quot;pig.exec.nocombiner&quot; that was not replaced by a constant.&lt;/li&gt;
	&lt;li&gt;It would be nice to have a consistent way of getting booleans (and floats) from the conf. Something like:
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;PigConfiguration.getBoolean(Properties p, key) {
  return &quot;true&quot;.equals(p.getProperty(key, &quot;false&quot;));
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;some of the class description was still applicable
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;/**
 * Do partial aggregation in map plan. It uses a hash-map to aggregate. 
 * ...
 */
 public class POPartialAgg extends PhysicalOperator {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;what is the reason for this particular value?
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; private static final int MAX_LIST_SIZE = 1 &amp;lt;&amp;lt; 13 - 1;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;It looks like this could be a HashSet as the value never gets used (but there&apos;s no WeakHashSet so I gues I got my answer). It could be as well WeakHashMap&amp;lt;POPartialAgg, ?&amp;gt;. Don&apos;t you want a visitor to just list them all once and set the count? That way you would not have to worry about keeping a reference on them.
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;private static final WeakHashMap&amp;lt;POPartialAgg, Byte&amp;gt; ALL_POPARTS = new WeakHashMap&amp;lt;POPartialAgg, Byte&amp;gt;();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;+0.5 so that it is never 0 ? Math.min(1, ...) is more readable.
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; firstTierThreshold = (int) (0.5 + totalTuples * (1f - (1f / sizeReduction)));
 secondTierThreshold = (int) (0.5 + totalTuples *  (1f / sizeReduction));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;LOG.info() should be wrapped in if (LOG.isInfoEnabled()) 
{ ... }
&lt;p&gt; for perf&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;in aggregateSecondLevel() can&apos;t the processedInputMap be reused?&lt;/li&gt;
	&lt;li&gt;in getMinOutputReductionFromProp(), if minReduction &amp;lt;= 0 it should throw an exception.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="13443793" author="dvryaboy" created="Wed, 29 Aug 2012 05:30:31 +0100"  >&lt;blockquote&gt;&lt;p&gt;There&apos;s a &quot;pig.exec.nocombiner&quot; that was not replaced by a constant.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fixed.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It would be nice to have a consistent way of getting booleans (and floats) from the conf&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Feels like scope creep.. maybe in another ticket? I don&apos;t want to get into how to design that around Properties, Configurations, and PigConfigurations.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;some of the class description was still applicable&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Added better docs.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;what is the reason for this particular value?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Bad math &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Fixed the math and added an explanation of how I got there.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Don&apos;t you want a visitor to just list them all once and set the count? That way you would not have to worry about keeping a reference on them.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I could do that, but this feels much cleaner &amp;#8211; no visitors, no serialization, no changes to the MRCompiler/JCCompiler, very self-contained, and works at runtime instead of having to be preset by the planner.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;+0.5 so that it is never 0 ? Math.min(1, ...) is more readable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, +0.5 so that it&apos;s a round() instead of floor()&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;LOG.info() should be wrapped in if (LOG.isInfoEnabled()) { ... } for perf&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Done for places where it matters (functions invoked more than once and messages where args are not constants)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;in aggregateSecondLevel() can&apos;t the processedInputMap be reused?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No &amp;#8211; aggregate() adds to the list of tuples in the target map, we want to overwrite in this case.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;in getMinOutputReductionFromProp(), if minReduction &amp;lt;= 0 it should throw an exception.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Added a log message instead. &lt;/p&gt;</comment>
                            <comment id="13444279" author="julienledem" created="Wed, 29 Aug 2012 19:14:25 +0100"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13444330" author="dvryaboy" created="Wed, 29 Aug 2012 20:06:46 +0100"  >&lt;p&gt;Same, but with the offending test removed.&lt;/p&gt;</comment>
                            <comment id="13444677" author="dvryaboy" created="Thu, 30 Aug 2012 06:10:02 +0100"  >&lt;p&gt;Attaching final patch, committing under Julien&apos;s +1.&lt;/p&gt;

&lt;p&gt;Three changes added:&lt;br/&gt;
1) Missed a test class earlier which needed the static string moved to PigConfiguration. Done now.&lt;/p&gt;

&lt;p&gt;2) a slight change to build.xml to ensure junit3 comes before junit4 in the test classpath. Otherwise the build occasionally failed to compile, depending on environment.&lt;/p&gt;

&lt;p&gt;3) An unrelated fix to TestPOCast, which was failing and this preventing me from passing test-commit.&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12543034" name="PIG-2888.final.patch" size="99760" author="dvryaboy" created="Thu, 30 Aug 2012 06:10:02 +0100"/>
                            <attachment id="12542044" name="partialagg_patch_1.patch" size="29906" author="dvryaboy" created="Wed, 22 Aug 2012 23:18:12 +0100"/>
                            <attachment id="12542563" name="partialagg_patch_2.patch" size="39483" author="dvryaboy" created="Mon, 27 Aug 2012 00:09:13 +0100"/>
                            <attachment id="12542577" name="partialagg_patch_3.patch" size="40665" author="dvryaboy" created="Mon, 27 Aug 2012 06:30:42 +0100"/>
                            <attachment id="12542719" name="partialagg_patch_4.patch" size="42729" author="dvryaboy" created="Tue, 28 Aug 2012 04:41:11 +0100"/>
                            <attachment id="12542890" name="partialagg_patch_5.patch" size="44268" author="dvryaboy" created="Wed, 29 Aug 2012 05:30:55 +0100"/>
                            <attachment id="12542966" name="partialagg_patch_6.patch" size="45009" author="dvryaboy" created="Wed, 29 Aug 2012 20:06:46 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 28 Aug 2012 05:48:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>256478</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyb0w7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98288</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>