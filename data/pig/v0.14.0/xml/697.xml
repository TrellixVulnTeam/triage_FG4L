<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:06:19 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-697/PIG-697.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-697] Proposed improvements to pig&apos;s optimizer</title>
                <link>https://issues.apache.org/jira/browse/PIG-697</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;I propose the following changes to pig optimizer, plan, and operator functionality to support more robust optimization:&lt;/p&gt;

&lt;p&gt;1) Remove the required array from Rule.  This will change rules so that they only match exact patterns instead of allowing missing elements in the pattern.&lt;br/&gt;
This has the downside that if a given rule applies to two patterns (say Load-&amp;gt;Filter-&amp;gt;Group, Load-&amp;gt;Group) you have to write two rules.  But it has the upside that&lt;br/&gt;
the resulting rules know exactly what they are getting.  The original intent of this was to reduce the number of rules that needed to be written.  But the&lt;br/&gt;
resulting rules have do a lot of work to understand the operators they are working with.  With exact matches only, each rule will know exactly the operators it&lt;br/&gt;
is working on and can apply the logic of shifting the operators around.  All four of the existing rules set all entries of required to true, so removing this&lt;br/&gt;
will have no effect on them.&lt;/p&gt;

&lt;p&gt;2) Change PlanOptimizer.optimize to iterate over the rules until there are no conversions or a certain number of iterations has been reached.  Currently the&lt;br/&gt;
function is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void optimize() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; OptimizerException {
        RuleMatcher matcher = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuleMatcher();
        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Rule rule : mRules) {
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (matcher.match(rule)) {
                &lt;span class=&quot;code-comment&quot;&gt;// It matches the pattern.  Now check &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the transformer
&lt;/span&gt;                &lt;span class=&quot;code-comment&quot;&gt;// approves as well.
&lt;/span&gt;                List&amp;lt;List&amp;lt;O&amp;gt;&amp;gt; matches = matcher.getAllMatches();
                &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (List&amp;lt;O&amp;gt; match:matches)
                {
	                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rule.transformer.check(match)) {
	                    &lt;span class=&quot;code-comment&quot;&gt;// The transformer approves.
&lt;/span&gt;	                    rule.transformer.transform(match);
	                }
                }
            }
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would change to be:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void optimize() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; OptimizerException {
        RuleMatcher matcher = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuleMatcher();
        &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; sawMatch;
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; iterators = 0;
        &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; {
            sawMatch = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Rule rule : mRules) {
                List&amp;lt;List&amp;lt;O&amp;gt;&amp;gt; matches = matcher.getAllMatches();
                &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (List&amp;lt;O&amp;gt; match:matches) {
                    &lt;span class=&quot;code-comment&quot;&gt;// It matches the pattern.  Now check &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the transformer
&lt;/span&gt;                    &lt;span class=&quot;code-comment&quot;&gt;// approves as well.
&lt;/span&gt;                    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rule.transformer.check(match)) {
                        &lt;span class=&quot;code-comment&quot;&gt;// The transformer approves.
&lt;/span&gt;                        sawMatch = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
                        rule.transformer.transform(match);
                    }
                }
            }
            &lt;span class=&quot;code-comment&quot;&gt;// Not sure &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; 1000 is the right number of iterations, maybe it
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// should be configurable so that large scripts don&apos;t stop too 
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// early.
&lt;/span&gt;        } &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (sawMatch &amp;amp;&amp;amp; numIterations++ &amp;lt; 1000);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason for limiting the number of iterations is to avoid infinite loops.  The reason for iterating over the rules is so that each rule can be applied multiple&lt;br/&gt;
times as necessary.  This allows us to write simple rules, mostly swaps between neighboring operators, without worrying that we get the plan right in one pass.&lt;br/&gt;
For example, we might have a plan that looks like:  Load-&amp;gt;Join-&amp;gt;Filter-&amp;gt;Foreach, and we want to optimize it to Load-&amp;gt;Foreach-&amp;gt;Filter-&amp;gt;Join.  With two simple&lt;br/&gt;
rules (swap filter and join and swap foreach and filter), applied iteratively, we can get from the initial to final plan, without needing to understanding the&lt;br/&gt;
big picture of the entire plan.&lt;/p&gt;

&lt;p&gt;3) Add three calls to OperatorPlan:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;/**
 * Swap two operators in a plan.  Both of the operators must have single
 * inputs and single outputs.
 * @param first &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;
 * @param second &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;
 * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; PlanException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; either &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; is not single input and output.
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void swap(E first, E second) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; PlanException {
    ...
}

/**
 * Push one &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; in front of another.  This function is &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; use when
 * the first &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; has multiple inputs.  The caller can specify
 * which input of the first &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; the second &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; should be pushed to.
 * @param first &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;, assumed to have multiple inputs.
 * @param second &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;, will be pushed in front of first
 * @param inputNum, indicates which input of the first &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; the second
 * &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; will be pushed onto.  Numbered from 0.
 * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; PlanException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; inputNum does not exist &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; first &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void pushBefore(E first, E second, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; inputNum) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; PlanException {
    ...
}

/**
 * Push one &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; after another.  This function is &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; use when the second
 * &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; has multiple outputs.  The caller can specify which output of the
 * second &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; the first &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; should be pushed to.
 * @param first &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;, will be pushed after the second &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;
 * @param second &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;, assumed to have multiple outputs
 * @param outputNum indicates which output of the second &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; the first 
 * &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; will be pushed onto.  Numbered from 0.
 * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; PlanException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; outputNum does not exist &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; second &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void pushAfter(E first, E second, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; outputNum) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; PlanException {
    ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The rules in the optimizer can use these three functions, along with the existing insertBetween(), replace(), and removeAndReconnect() calls to operate on the&lt;br/&gt;
plan.&lt;/p&gt;

&lt;p&gt;4) Add a new call to Operator:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;/**
 * Make any necessary changes to a node based on a change of position in the
 * plan.  This allows operators to rewire their projections, etc. when they
 * are relocated in a plan.
 * @param oldPred Operator that was previously the predecessor.
 * @param newPred Operator thwas will now be the predecessor.
 * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; PlanException
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void rewire(Operator oldPred, Operator newPred) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; PlanException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method will be called by the swap, pushBefore, pushAfter, insertBetween, replace, and removeAndReconnect in OperatorPlan whenever an operator is moved&lt;br/&gt;
around so that the operator has a chance to make any necessary changes.  &lt;/p&gt;

&lt;p&gt;5) Add new calls to LogicalOperator and PhysicalOperator&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;/**
 * A struct detailing how a projection is altered by an &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;.
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ProjectionMap {
    /**
     * Quick way &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; an &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; to note that its input and output are the
     * same.
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; noChange;

    /**
     * Map of field changes, with keys being the output fields of the 
     * &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; and values being the input fields.  Fields are numbered from
     * 0.  So &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a foreach &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; derived from
     * &apos;B = foreach A generate $0, $2, $3, udf($1)&apos; 
     * would produce a mapping of 0-&amp;gt;0, 1-&amp;gt;2, 2-&amp;gt;3
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; mappedFields;

    /**
     * List of fields removed from the input.  This includes fields that were
     * transformed, and thus are no longer the same fields.  Using the
     * example foreach given under mappedFields, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; list would contain &apos;1&apos;.
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; removedFields;

    /**
     * List of fields in the output of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; that were created by &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;
     * &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;.  Using the example foreach given under mappedFields, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; list
     * would contain &apos;3&apos;.
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; addedFields;
}

/**
 * Produce a map describing how &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; modifies its projection.
 * @returns ProjectionMap &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; indicates it does not know how the projection
 * changes, &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; example a join of two inputs where one input does not have
 * a schema.
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; ProjectionMap getProjectionMap();

/**
 * Get a list of fields that &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; requires.  This is not necessarily
 * equivalent to the list of fields the &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; projects.  For example,
 * a filter will project anything passed to it, but requires only the fields
 * explicitly referenced in its filter expression.
 * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; list of fields, numbered from 0.
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; getRequiredFields();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These calls will be called by optimizer rules to determine whether or not a swap can be done (for example, you can&apos;t swap two operators if the second one uses a&lt;br/&gt;
field added by the first), and once the swap is done they will be used by rewire to understand how to map projections in the operators.&lt;/p&gt;

&lt;p&gt;6)  It&apos;s not clear that the RuleMatcher, in its current form, will work with rules that are not linear.  That is, it matches rules that look like:&lt;br/&gt;
Operators &lt;/p&gt;
{Foreach, Filter}
&lt;p&gt;Edges &lt;/p&gt;
{0-&amp;gt;1}

&lt;p&gt;But I don&apos;t know if it will match rules that look like:&lt;br/&gt;
Operators &lt;/p&gt;
{Scan, Scan, Join}
&lt;p&gt;Edges &lt;/p&gt;
{0-&amp;gt;2, 1-&amp;gt;2}

&lt;p&gt;For the optimizer to be able to determine join types and operations with splits, it will have to be able to do that.&lt;/p&gt;

&lt;p&gt;Examples of types of rules that is optimizer could support:&lt;/p&gt;

&lt;p&gt;1) Pushing filters in front of joins.&lt;br/&gt;
2) Pushing foreachs with flattens (which thus greathly expand the data) down the tree past filters, joins, etc.&lt;br/&gt;
3) Pushing type casting used for schemas in loads down to the point where the field is actually used.&lt;br/&gt;
4) Deciding when to do fragment/replicate join or sort/merge join instead of the standard hash join.&lt;br/&gt;
5) The current optimizations:  pushing limit up the tree, making implicit splits explicit, merge load and stream where possible, using the combiner.&lt;br/&gt;
6) Merge filters or foreachs where possible&lt;/p&gt;

&lt;p&gt;In particular the combiner optimizer hopefully can be completely rewritten to use the optimizer framework to make decisions about how to rework physical plans&lt;br/&gt;
to push work into the combiner.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12416048">PIG-697</key>
            <summary>Proposed improvements to pig&apos;s optimizer</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sms">Santhosh Srinivasan</assignee>
                                    <reporter username="alangates">Alan Gates</reporter>
                        <labels>
                    </labels>
                <created>Wed, 4 Mar 2009 01:07:20 +0000</created>
                <updated>Thu, 25 Mar 2010 00:12:45 +0000</updated>
                            <resolved>Fri, 7 Aug 2009 18:20:00 +0100</resolved>
                                                    <fixVersion>0.4.0</fixVersion>
                                    <component>impl</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12693961" author="sms" created="Tue, 31 Mar 2009 01:50:35 +0100"  >&lt;p&gt;Problem: Find a sub-graph within a directed acyclic graph (DAG) aka pattern matching&lt;br/&gt;
==============================================================&lt;/p&gt;

&lt;p&gt;For optimization, a common process is to find patterns in a graph and rewire the graph to have an optimized version of the pattern. The problem of finding a sub-graph within a graph is the well known problem, sub-graph isomorphism, a NP complete problem. Within the context of PIG, the problem is recast as finding a sub DAG within a DAG.&lt;/p&gt;

&lt;p&gt;The problem is divided into multiple sub-problems of representing the pattern (sub DAG) and finding the pattern within the DAG.&lt;/p&gt;

&lt;p&gt;Representing the pattern.&lt;br/&gt;
-------------------------------------&lt;/p&gt;

&lt;p&gt;The objective is to use the same optimizer framework to implement rule specification across the board, i.e., logical plans, physical plans and map reduce plans. In order to facilitate this, a new plan called RulePlan will be designed. The RulePlan will subclass the OperatorPlan and will be typed on RuleNode.&lt;/p&gt;

&lt;p&gt;A RuleNode will extend the Operator class and will be annoated with the following member variables:&lt;/p&gt;

&lt;p&gt;   1. mNodeClass: A private member variable that is of type Class to denote the class of the node. E.g.: mNodeClass could be LOFilter, LOLoad, POFilter, etc.&lt;br/&gt;
   2. mNodeType: An enum that idenitifes a node to be a simple node, a multi node or a common node. A brief descriptions of the three kinds of nodes follow.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Simple node: A normal rule node in the rule plan&lt;/li&gt;
	&lt;li&gt;Multi node: A node that appears more than once in the rule plan&lt;/li&gt;
	&lt;li&gt;Common node: A node that is common to more than one path, i.e., has multiple incoming edges or multiple outgoing edges.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finding the pattern.&lt;br/&gt;
----------------------------&lt;/p&gt;

&lt;p&gt;The existing RuleMatcher class uses dependency order or depth first order to traverse the graph. This ensures that a given node is not seen more than once. Currently, the RuleMatcher relies on the list of nodes (provided as input) and picks the first node in the list as the root of the pattern. With the rule plan approach, the algorithm will be modified to look for all the roots of the RulePlan.&lt;/p&gt;

&lt;p&gt;For each node in the matched path, the number of edges per node should match the number of edges for the corresponding node in the RulePlan. In addition, instead of looking for one edge from each node, the RuleMatcher will look for all edges from a given node in the RulePlan. The implication of this change, is that each RulePlan should be self contained, i.e., there cannot be any dangling edges out of the roots and into the intermediate and leaf nodes in the RulePlan.&lt;/p&gt;

&lt;p&gt;When a set of matches is found, the following algorithm will compute the matches:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; there is a common node then
	&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all matches m
		&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all remaining matches r
			&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(common_nodes(m) == common_nodes(r)) then
				put list of roots of each match into final_match list
			end &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;
		end &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;
	end &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;
	all matches have been found
end &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12697146" author="ciemo" created="Wed, 8 Apr 2009 19:42:59 +0100"  >&lt;p&gt;Some thoughts on optimization problems and patterns from SQL and coding Pig and my desire for a higher level version of Pig than we have today.&lt;/p&gt;

&lt;p&gt;I know this may come off as &quot;distraction&quot; but hopefully you&apos;ll have some time to hear me out.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;after a conversation with Santhosh about the SQL to Pig translation work&lt;/li&gt;
	&lt;li&gt;multiple issues I have countered with nested foreach statements including redundant function execution&lt;/li&gt;
	&lt;li&gt;nested FOREACH statement &quot;assignment&quot; computation bugs&lt;/li&gt;
	&lt;li&gt;hand coding chains of foreach statements so I can get the Algebraic combiner to kick&lt;/li&gt;
	&lt;li&gt;hand coding chains of foreach statements and grouping statements rather than using a single statement&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think I might have stumbled on a potentially improved model for Pig to Pig execution plan generation:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            High Level Pig to Low Level Pig translation
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think this would potentially benefit the SQL to Pig efforts and provide for programmer coding efficiency in Pig as well.&lt;/p&gt;

&lt;p&gt;This will be a bit protracted, but I hope you have some time to consider it.&lt;/p&gt;

&lt;p&gt;Take the following SQL idiom that the SQL to Pig translator will need to support:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            select
                        EXP(AVG(LN(time+0.1))) as geomean_time
            from
                        events
            where
                        time is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; and
                        time &amp;gt;= 0;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &quot;high level pig&quot;, I have wanted to code this as&quot;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            A = load &apos;events&apos; using PigStorage() as ( time: &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; );
            B = filter A by time is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; and time &amp;gt;= 0;
            C = group B all;
            D = foreach C generate EXP(AVG(LN(B.time+0.1))) as geomean_time;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In fact, this would seem to provide a nice translation path from SQL to &quot;low level pig&quot; via &quot;high level pig&quot;.&lt;/p&gt;

&lt;p&gt;Unfortunately, this won&apos;t work.  We developers must write Pig scripts at a lower level and break all of this apart into various steps.&lt;/p&gt;

&lt;p&gt;An additional issue is that, because of some, um, workarounds, in the execution plan optimizations, the combiner won&apos;t kick in if we don&apos;t do further steps.&lt;/p&gt;

&lt;p&gt;So the most &quot;performant&quot; version of the desired pig script is the following really &quot;low level pig&quot; where D is broken into 3 steps, merging one with B and the remaining 2 steps as separate D steps:&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            A = load &apos;events&apos; using PigStorage() as ( time: &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; );
            B = filter A by time is not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; and time &amp;gt;= 0;
            B = foreach A generate LOG(time+0.1) as log_time;
            C = group B all;
            D = foreach C generate group, AVG(B.log_time) as mean_log_time;
                                    -- note that group alias is required &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Algebraic combiner to kick in
            D = foreach D generate EXP(mean_log_time) as geomean_time;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we can figure out how to translate SQL into this last &quot;low-level&quot; set of statements, why couldn&apos;t we or shouldn&apos;t we have &quot;high level pig&quot; as well and permit more efficient code writing and optimization?&lt;/p&gt;


&lt;p&gt;Next example&lt;/p&gt;

&lt;p&gt;I do a bunch of nested intermediate computations in a nested FOREACH statement:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
C = foreach C {
        curr_mean_log_timetonextevent = curr_sum_log_timetonextevent / (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;)count;
        curr_meansq_log_timetonextevent = curr_sumsq_log_timetonextevent / (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;)count;
        curr_var_log_timetonextevent = curr_meansq_log_timetonextevent - 
                        (curr_mean_log_timetonextevent * curr_mean_log_timetonextevent);
        curr_sterr_log_timetonextevent = math.SQRT(curr_var_log_timetonextevent / (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;)count);
 

        curr_geomean_timetonextevent = math.EXP(curr_mean_log_timetonextevent);
        curr_geosterr_timetonextevent = math.EXP(curr_sterr_log_timetonextevent);
        curr_mean_timetonextevent = curr_sum_log_timetonextevent / (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;)count;
        curr_meansq_timetonextevent = curr_sumsq_log_timetonextevent / (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;)count;
        curr_var_timetonextevent = curr_meansq_timetonextevent - 
                        (curr_mean_timetonextevent * curr_mean_timetonextevent);

        curr_sterr_timetonextevent = math.SQRT(curr_var_timetonextevent / count);

        generate
            ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code for nested statements in Pig has been particularly problematic and buggy including problems such as:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;redundant execution of functions such as SUM, AVG&lt;/li&gt;
	&lt;li&gt;nested function problems&lt;/li&gt;
	&lt;li&gt;mathematical operator problems (illustrated in this bug)&lt;/li&gt;
	&lt;li&gt;no type propagation&lt;/li&gt;
	&lt;li&gt;the need to use AS clauses to name nested alias assignments projected in the GENERATE clauses&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What if instead of trying to do all of these operations in some specialized execution code, what if this was treated as &quot;high level&quot; pig that translated all of these intermediate statements into two or more &quot;low level&quot; foreach expansions.&lt;/p&gt;

&lt;p&gt;This isn&apos;t as wild as it seems because 9 times out of 10, the &quot;workaround&quot; that I have had to do is exactly that: I had to stop using nested foreach and instead break the code into two separate foreach statements chained together.&lt;/p&gt;

&lt;p&gt;In other words I went from the above nested foreach statement that generated errors and didn&apos;t work to two hand coded foreach statements (or more) that did:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
C = foreach C generate
            *,
            curr_sum_log_timetonextevent / (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;)count as curr_mean_log_timetonextevent,
            curr_sumsq_log_timetonextevent / (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;)count as curr_meansq_log_timetonextevent;

C = foreach C generate=
            *,
            curr_meansq_log_timetonextevent - 
                        (curr_mean_log_timetonextevent * curr_mean_log_timetonextevent)
                                                                                    as curr_var_log_timetonextevent;

C = foreach C generate
            *,
            math.SQRT(curr_var_log_timetonextevent / (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;)count) as curr_sterr_log_timetonextevent;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was the only way I could avoid the redundant computations and get the code actually work. Well, actually if I added casts at appropriate places, it also worked, but what a pain.&lt;/p&gt;

&lt;p&gt;This would also have the advantage that alias names used in the nested &quot;assignments&quot; would actually propagate without an &quot;as&quot; clause in the subsequent generate statement.&lt;/p&gt;

&lt;p&gt;I know this is a &quot;brain fart&quot; but it does have a time honored tradition in languages like C, C++, Lisp of using the language to &quot;bootstrap&quot; the language by translating from more &quot;high level&quot; idioms to less feature rich &quot;low level&quot; idioms.&lt;/p&gt;

&lt;p&gt;It just seemed like a plausible way of speeding up both development of a SQL to Pig translator as well as allowing a more rapid transition of Pig to higher level idioms while correcting whole swaths of execution bugs and performance optimization issues as well.&lt;/p&gt;

</comment>
                            <comment id="12697698" author="sms" created="Fri, 10 Apr 2009 01:48:57 +0100"  >&lt;p&gt;Attached patch has changed the design and implementation of the sub-graph pattern matching. Now, a subgraph pattern can be specified instead of a list of nodes and some edges. The existing rule specification was changed to use the new framework. Additional test cases have been added to validate and verify the new framework.&lt;/p&gt;

&lt;p&gt;In addition,  PlanPrinter a generic plan printing class has been added. In the future, existing plan printers for the various types of plans (Logical, Physical, MR, RulePlan) should be changed to extend the PlanPrinter and override required methods.&lt;/p&gt;

&lt;p&gt;All unit test cases pass.&lt;/p&gt;</comment>
                            <comment id="12697883" author="sms" created="Fri, 10 Apr 2009 18:53:01 +0100"  >&lt;p&gt;Attaching a new patch that fixes a javadoc warning.&lt;/p&gt;</comment>
                            <comment id="12698481" author="alangates" created="Mon, 13 Apr 2009 19:34:12 +0100"  >&lt;p&gt;Patch looks good.  A few comments on comments.&lt;/p&gt;

&lt;p&gt;It looks like some of the comments in the code haven&apos;t been updated to reflect the changes.  They still talk about expressing rules as a list of nodes and edges, about only matching linear subsections of the graph, etc.  &lt;/p&gt;

&lt;p&gt;Also, and more importantly, since the optimizer is someone complicated now I think it would be good to put a large comment in the package header for org.apache.pig.impl.plan.optimizer.  This comment should contain a basic outline of the optimizer design, including stuff like how graph of OperatorRule and RulePlan are used to match plans, the primitives used in graph transformations, etc.&lt;/p&gt;

&lt;p&gt;I don&apos;t think either of these are big enough issues to prevent committing this patch.  They can both be included in the next patch.&lt;/p&gt;</comment>
                            <comment id="12699109" author="sms" created="Wed, 15 Apr 2009 08:58:17 +0100"  >&lt;p&gt;Patch has been committed.&lt;/p&gt;</comment>
                            <comment id="12699284" author="sms" created="Wed, 15 Apr 2009 18:14:51 +0100"  >&lt;p&gt;Part2 of the Phase 1 patch. This patch adds the graph operators swap, pushBefore and pushAfter. In addition unit test cases have been added to cover the use of these new operators.&lt;/p&gt;

&lt;p&gt;All unit tests pass.&lt;/p&gt;</comment>
                            <comment id="12700958" author="alangates" created="Mon, 20 Apr 2009 22:47:05 +0100"  >&lt;p&gt;+1 on Part2 of Phase 1 patch.&lt;/p&gt;</comment>
                            <comment id="12700979" author="sms" created="Tue, 21 Apr 2009 00:05:03 +0100"  >&lt;p&gt;Committed Part2 patch of Phase 1.&lt;/p&gt;</comment>
                            <comment id="12709494" author="sms" created="Thu, 14 May 2009 18:54:21 +0100"  >&lt;p&gt;Phase 2 of the optimizer introduces projection maps for the relational operators.&lt;/p&gt;</comment>
                            <comment id="12709511" author="hadoopqa" created="Thu, 14 May 2009 19:21:42 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12408150/OptimizerPhase2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12408150/OptimizerPhase2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 774582.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/40/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/40/testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/40/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/40/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12709517" author="sms" created="Thu, 14 May 2009 19:35:31 +0100"  >&lt;p&gt;Attaching a new patch for Optimizer Phase 2. The previous patch did not include a newly added file.&lt;/p&gt;</comment>
                            <comment id="12710180" author="hadoopqa" created="Sun, 17 May 2009 08:19:33 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12408159/OptimizerPhase2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12408159/OptimizerPhase2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 775340.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/45/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/45/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/45/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/45/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/45/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/45/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12710409" author="sms" created="Mon, 18 May 2009 18:17:49 +0100"  >&lt;p&gt;Re-submitting the patch as the test cases as reported by HadoopQA pass on the developer&apos;s box.&lt;/p&gt;</comment>
                            <comment id="12710469" author="hadoopqa" created="Mon, 18 May 2009 20:59:42 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12408159/OptimizerPhase2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12408159/OptimizerPhase2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 775340.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/46/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/46/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/46/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/46/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/46/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/46/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12710473" author="alangates" created="Mon, 18 May 2009 21:14:13 +0100"  >&lt;p&gt;+1 for OptimizerPhase2.patch&lt;/p&gt;</comment>
                            <comment id="12710552" author="sms" created="Tue, 19 May 2009 01:12:29 +0100"  >&lt;p&gt;OptimizerPhase2 committed.&lt;/p&gt;</comment>
                            <comment id="12710953" author="sms" created="Wed, 20 May 2009 01:32:04 +0100"  >&lt;p&gt;Part 1 of the Phase3 patch. It implements the requiredFields feature in all the relational operators. New unit tests have been added.&lt;/p&gt;</comment>
                            <comment id="12710974" author="hadoopqa" created="Wed, 20 May 2009 03:14:09 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12408536/OptimizerPhase3_parrt1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12408536/OptimizerPhase3_parrt1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 776106.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/49/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/49/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/49/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/49/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/49/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/49/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12711202" author="sms" created="Wed, 20 May 2009 16:59:43 +0100"  >&lt;p&gt;Attaching new patch that fixes the findbugs warning.&lt;/p&gt;</comment>
                            <comment id="12711414" author="sms" created="Thu, 21 May 2009 00:25:13 +0100"  >&lt;p&gt;New patch that adds projection map and required fields to operators that were left out in the previous patch (limit, split, split output and streaming).&lt;/p&gt;</comment>
                            <comment id="12711480" author="hadoopqa" created="Thu, 21 May 2009 06:59:46 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12408636/OptimizerPhase3_parrt1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12408636/OptimizerPhase3_parrt1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 776106.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/51/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/51/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/51/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/51/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/51/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/51/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12711861" author="alangates" created="Fri, 22 May 2009 00:30:58 +0100"  >&lt;p&gt;Comments on OptimizerPhase3_parrt1.patch&lt;/p&gt;

&lt;p&gt;Why does LOSplit say it requires no fields?  If the split has filter conditions then it seems like it would need those fields.&lt;/p&gt;

&lt;p&gt;Shouldn&apos;t LOStream require all fields rather than none?  It seems like users will have written their scripts assuming that their stream executable gets all of the fields coming out of the previous operator.&lt;/p&gt;
</comment>
                            <comment id="12711863" author="sms" created="Fri, 22 May 2009 00:41:51 +0100"  >&lt;p&gt;LOSplit is a no-op operator. LOSplitOutput is modeled after filter.&lt;/p&gt;

&lt;p&gt;Fair comment about LOStream.  I will make this change and resubmit the patch.&lt;/p&gt;</comment>
                            <comment id="12711865" author="sms" created="Fri, 22 May 2009 00:46:11 +0100"  >&lt;p&gt;Attaching patch incorporating the review comments.&lt;/p&gt;</comment>
                            <comment id="12711912" author="hadoopqa" created="Fri, 22 May 2009 02:25:11 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12408756/OptimizerPhase3_parrt1-1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12408756/OptimizerPhase3_parrt1-1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 776106.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/53/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/53/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/53/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/53/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/53/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/53/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12712153" author="alangates" created="Fri, 22 May 2009 17:36:09 +0100"  >&lt;p&gt;+1 for latest rev of part 3.&lt;/p&gt;</comment>
                            <comment id="12712260" author="sms" created="Fri, 22 May 2009 22:01:00 +0100"  >&lt;p&gt;Patch OptimizerPhase3_part-1.patch has been committed.&lt;/p&gt;</comment>
                            <comment id="12712409" author="hudson" created="Sat, 23 May 2009 12:40:36 +0100"  >&lt;p&gt;Integrated in Pig-trunk #451 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-trunk/451/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-trunk/451/&lt;/a&gt;)&lt;br/&gt;
    : Proposed improvements to pig&apos;s optimizer&lt;/p&gt;</comment>
                            <comment id="12715143" author="sms" created="Mon, 1 Jun 2009 17:28:15 +0100"  >&lt;p&gt;The graph operation pushAfter was added as a complementary operation to pushBefore. Currently, on the logical side, there are no concrete use cases for pushAfter. The only operator that truly supports multiple outputs is split. Our current model for split is to have an no-op split operator that has multiple successors, split outputs, each of which is the equivalent of a filter. The split output has inner plans which could have projection operators that hold references to the split&apos;s predecessor. &lt;/p&gt;

&lt;p&gt;When an operator is pushed after split, the operator will be placed between the split and split output. As a result, when rewire on split is called, the call is dispatched to the split output. The references in the split output after the rewire will now point to split&apos;s predecessor instead of pointing to the operator that was pushed after.&lt;/p&gt;

&lt;p&gt;The intention of the pushAfter in the case of a split is to push it after the split output. However, the generic pushAfter operation does not distinguish between split and split output. A possible way out is to override this method in the logical plan and duplicate most of the code in the OperatorPlan and add new code to handle split.&lt;/p&gt;

&lt;p&gt;As of now, the pushAfter will not be used in the logical layer.&lt;/p&gt;</comment>
                            <comment id="12720260" author="sms" created="Tue, 16 Jun 2009 18:48:03 +0100"  >&lt;p&gt;Attached patch includes the following:&lt;/p&gt;

&lt;p&gt;1. Implementation of rewire with a modified API&lt;br/&gt;
2. Changes to projection map to facilitate the use of rewire&lt;br/&gt;
3. Turns of the store/load optimization in multi-query execution&lt;br/&gt;
4. Unit tests for rewire and modifications to existing unit tests&lt;/p&gt;</comment>
                            <comment id="12720326" author="hadoopqa" created="Tue, 16 Jun 2009 21:14:50 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12410837/OptimizerPhase3_part2_1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12410837/OptimizerPhase3_part2_1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 784333.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 18 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 259 javac compiler warnings (more than the trunk&apos;s current 224 warnings).&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/86/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/86/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/86/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/86/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/86/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/86/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12720377" author="sms" created="Tue, 16 Jun 2009 23:10:44 +0100"  >&lt;p&gt;Attached patch fixes the findbug warning, and cleans up the sources by removing commented out code. The additional 35 compiler warning messages are related to type inference. At this point these messages are harmless.&lt;/p&gt;</comment>
                            <comment id="12720465" author="hadoopqa" created="Wed, 17 Jun 2009 02:51:44 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12410859/OptimizerPhase3_part2_2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12410859/OptimizerPhase3_part2_2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 785450.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 18 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 259 javac compiler warnings (more than the trunk&apos;s current 224 warnings).&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/89/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/89/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/89/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/89/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/89/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/89/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12720757" author="sms" created="Wed, 17 Jun 2009 17:54:10 +0100"  >&lt;p&gt;Fixed the new findbugs warning.&lt;/p&gt;</comment>
                            <comment id="12720851" author="hadoopqa" created="Wed, 17 Jun 2009 20:33:39 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12410960/OptimizerPhase3_part2_3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12410960/OptimizerPhase3_part2_3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 785450.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 18 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 259 javac compiler warnings (more than the trunk&apos;s current 224 warnings).&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/90/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/90/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/90/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/90/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/90/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/90/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12721968" author="alangates" created="Fri, 19 Jun 2009 21:00:16 +0100"  >&lt;p&gt;Why is it that some Logical operators (LOCross, LOStream) don&apos;t have rewire implemented?&lt;/p&gt;

&lt;p&gt;Near the end of ProjectFixerUpper.vist(POProject), you have a TODO about the walking.  We should figure out whether that is necessary or not, as doing visiting by the visit function and by the walker can result in double visiting.&lt;/p&gt;

&lt;p&gt;Is there a need to add a clear concept to LogicalTransformer in order to clear state between calls to check, since each transformer will potentially be called multiple times now?&lt;/p&gt;</comment>
                            <comment id="12721975" author="sms" created="Fri, 19 Jun 2009 21:11:26 +0100"  >&lt;p&gt;1. Some operators do not have any internal state that requires rewiring. Examples of such operators include LOStream, LOCross, etc.&lt;/p&gt;

&lt;p&gt;2. I think that the additional walking should be removed. I added a TODO as I was not sure why it was added in the first place.&lt;/p&gt;

&lt;p&gt;3. Yes, it will be added as part of the next patch.&lt;/p&gt;</comment>
                            <comment id="12721977" author="alangates" created="Fri, 19 Jun 2009 21:15:00 +0100"  >&lt;p&gt;+1, looks good.&lt;/p&gt;</comment>
                            <comment id="12722075" author="sms" created="Fri, 19 Jun 2009 23:43:18 +0100"  >&lt;p&gt;OptimizerPhase3_part2_3.patch has been committed.&lt;/p&gt;</comment>
                            <comment id="12722177" author="hudson" created="Sat, 20 Jun 2009 12:41:32 +0100"  >&lt;p&gt;Integrated in Pig-trunk #480 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-trunk/480/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-trunk/480/&lt;/a&gt;)&lt;br/&gt;
    : Proposed improvements to pig&apos;s optimizer (sms)&lt;/p&gt;</comment>
                            <comment id="12723453" author="sms" created="Wed, 24 Jun 2009 06:50:43 +0100"  >&lt;p&gt;Attached patch, implements the optimization rule for pushing filters up.&lt;/p&gt;</comment>
                            <comment id="12723939" author="hadoopqa" created="Thu, 25 Jun 2009 09:15:04 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12411605/OptimizerPhase4_part1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12411605/OptimizerPhase4_part1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 788174.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/100/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/100/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/100/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/100/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/100/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/100/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12724629" author="sms" created="Fri, 26 Jun 2009 18:39:18 +0100"  >&lt;p&gt;Fixed the findbugs issue. This problem was prevalent in other parts of existing code. Fixed that too. Attaching new patch with these changes.&lt;/p&gt;</comment>
                            <comment id="12724699" author="hadoopqa" created="Fri, 26 Jun 2009 21:37:50 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12411941/OptimizerPhase4_part1-1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12411941/OptimizerPhase4_part1-1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 788174.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 2 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/103/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/103/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/103/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/103/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/103/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/103/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12724704" author="sms" created="Fri, 26 Jun 2009 21:47:15 +0100"  >&lt;p&gt;The find bug warnings are harmless, there are explicit checks for null to print null as opposed to the contents of the object.&lt;/p&gt;</comment>
                            <comment id="12724731" author="alangates" created="Fri, 26 Jun 2009 22:52:01 +0100"  >&lt;p&gt;+1 on the phase 4 part 1 patch.&lt;/p&gt;</comment>
                            <comment id="12725261" author="sms" created="Mon, 29 Jun 2009 18:24:55 +0100"  >&lt;p&gt;Phase 4 part 1 patch has been committed.&lt;/p&gt;</comment>
                            <comment id="12725601" author="hudson" created="Tue, 30 Jun 2009 13:43:56 +0100"  >&lt;p&gt;Integrated in Pig-trunk #490 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-trunk/490/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-trunk/490/&lt;/a&gt;)&lt;br/&gt;
    : Proposed improvements to pig&apos;s optimizer (sms)&lt;/p&gt;</comment>
                            <comment id="12726153" author="sms" created="Wed, 1 Jul 2009 18:51:42 +0100"  >&lt;p&gt;Attached patch introduces a new rule to push foreach with flatten down the tree, i.e., delay for each with faltten execution to reduce the number of records. A caveat here: This rule optimizes only one foreach with flatten input per cross/fragment replicate join. A new rule is required for binary, ternary, etc foreach with flatten input per cross/fragment replicate join. The cause for this limitation is the local view of the optimizer as opposed to a global view.&lt;/p&gt;
</comment>
                            <comment id="12726528" author="alangates" created="Thu, 2 Jul 2009 17:16:54 +0100"  >&lt;p&gt;A couple of questions and a comment on patch4-part2&lt;/p&gt;

&lt;p&gt;I don&apos;t understand what the following code does:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; foreachAddedFields = foreachProjectionMap.getAddedFields();
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(foreachAddedFields != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; foreachAddedFieldsSet = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;(foreachAddedFields);
                flattenedColumnSet.removeAll(foreachAddedFieldsSet);
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why are you removing added fields from the flattened set?  Won&apos;t all flattened fields appear as added in the projection map?&lt;/p&gt;

&lt;p&gt;I think it would be very helpful to insert some comments on why this rule only applies if the successor is an Order, Cross, or Join.  &lt;/p&gt;

&lt;p&gt;Why was the code dealing with flattening a bag with an unknown schema removed from LOForeach?&lt;/p&gt;</comment>
                            <comment id="12726566" author="sms" created="Thu, 2 Jul 2009 18:27:52 +0100"  >&lt;p&gt;1. Removing added fields from the flattened set.&lt;/p&gt;

&lt;p&gt;The flattened set is the set of all flattened columns. It can contain mapped and added fields. In order to remove the added fields from this set, the removeAll method is used.&lt;/p&gt;

&lt;p&gt;2. Comments on why the rule applies only to Order, Cross and Join&lt;/p&gt;

&lt;p&gt;Will add these comments.&lt;/p&gt;

&lt;p&gt;3. Removing code in LOForEach for flattening a bag with unknown schema&lt;/p&gt;

&lt;p&gt;The code that I removed was redundant and also had a bug. The check for a field getting mapped was neglected in one case. After I added the check, the code for the if and the else was identical. I removed the redundant code and made it simpler.&lt;/p&gt;</comment>
                            <comment id="12726581" author="hadoopqa" created="Thu, 2 Jul 2009 18:56:30 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12412291/OptimizerPhase4_part2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12412291/OptimizerPhase4_part2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 790635.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 250 javac compiler warnings (more than the trunk&apos;s current 248 warnings).&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 2 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/107/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/107/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/107/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/107/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/107/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/107/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12726601" author="sms" created="Thu, 2 Jul 2009 19:27:45 +0100"  >&lt;p&gt;-1 javac. The applied patch generated 250 javac compiler warnings (more than the trunk&apos;s current 248 warnings).&lt;/p&gt;

&lt;p&gt;The additional 2 compiler warning messages are related to type inference. At this point these messages are harmless. &lt;/p&gt;

&lt;p&gt;-1 javac. The applied patch generated 250 javac compiler warnings (more than the trunk&apos;s current 248 warnings).&lt;/p&gt;

&lt;p&gt;Dodgy warning:&lt;br/&gt;
The find bug warnings are harmless, there is an  explicit check for null to print null as opposed to the contents of the object.  &lt;/p&gt;

&lt;p&gt;Correctness warning:&lt;br/&gt;
There are checks in place to ensure that the variable can never be null.&lt;/p&gt;</comment>
                            <comment id="12726684" author="sms" created="Thu, 2 Jul 2009 22:14:45 +0100"  >&lt;p&gt;Phase 4 part 2 patch has been committed&lt;/p&gt;</comment>
                            <comment id="12727222" author="hudson" created="Sat, 4 Jul 2009 12:44:16 +0100"  >&lt;p&gt;Integrated in Pig-trunk #494 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-trunk/494/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-trunk/494/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="12737634" author="sms" created="Fri, 31 Jul 2009 19:18:23 +0100"  >&lt;p&gt;Attached patch removes references to LOFRJoin and replaces it with LOJoin. All the optimization rules and test cases now use LOJoin.&lt;/p&gt;</comment>
                            <comment id="12740363" author="daijy" created="Fri, 7 Aug 2009 03:13:33 +0100"  >&lt;p&gt;Two comments for Optimizer_Phase5.patch:&lt;br/&gt;
1. We can remove LOFRJoin.java, it is no longer in use&lt;br/&gt;
2. Remove comment &quot;// For skewed join, add a local rearrange operator to the plan&quot; in LogToPhyTranslationVisitor.java, both skewed join and regular join will do that, this comment is misleading.&lt;/p&gt;

&lt;p&gt;Other part of the patch is good. &lt;/p&gt;</comment>
                            <comment id="12740365" author="daijy" created="Fri, 7 Aug 2009 03:19:17 +0100"  >&lt;p&gt;Phase5 patch committed. Thanks Santhosh!&lt;/p&gt;</comment>
                            <comment id="12740523" author="hudson" created="Fri, 7 Aug 2009 13:12:08 +0100"  >&lt;p&gt;Integrated in Pig-trunk #515 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-trunk/515/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-trunk/515/&lt;/a&gt;)&lt;br/&gt;
    : Proposed improvements to pig&apos;s optimizer, Phase5&lt;/p&gt;</comment>
                            <comment id="12740637" author="sms" created="Fri, 7 Aug 2009 18:20:00 +0100"  >&lt;p&gt;All optimizer related patches have been committed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12433089">PIG-922</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12405171" name="OptimizerPhase1.patch" size="129168" author="sms" created="Fri, 10 Apr 2009 18:53:01 +0100"/>
                            <attachment id="12405547" name="OptimizerPhase1_part2.patch" size="72984" author="sms" created="Wed, 15 Apr 2009 18:14:51 +0100"/>
                            <attachment id="12408159" name="OptimizerPhase2.patch" size="108182" author="sms" created="Thu, 14 May 2009 19:35:31 +0100"/>
                            <attachment id="12408756" name="OptimizerPhase3_parrt1-1.patch" size="203571" author="sms" created="Fri, 22 May 2009 00:46:11 +0100"/>
                            <attachment id="12408636" name="OptimizerPhase3_parrt1.patch" size="203571" author="sms" created="Thu, 21 May 2009 00:25:13 +0100"/>
                            <attachment id="12410960" name="OptimizerPhase3_part2_3.patch" size="172533" author="sms" created="Wed, 17 Jun 2009 17:54:10 +0100"/>
                            <attachment id="12411941" name="OptimizerPhase4_part1-1.patch" size="142348" author="sms" created="Fri, 26 Jun 2009 18:39:18 +0100"/>
                            <attachment id="12412291" name="OptimizerPhase4_part2.patch" size="74184" author="sms" created="Wed, 1 Jul 2009 18:51:42 +0100"/>
                            <attachment id="12415138" name="Optimizer_Phase5.patch" size="79498" author="sms" created="Fri, 31 Jul 2009 19:18:23 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 31 Mar 2009 00:50:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164271</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyahun:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>95203</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>