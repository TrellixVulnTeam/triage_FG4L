<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:57:57 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-2600/PIG-2600.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-2600] Better Map support</title>
                <link>https://issues.apache.org/jira/browse/PIG-2600</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;It would be nice if Pig played better with Maps. To that end, I&apos;d like to add a lot of utility around Maps.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;TOBAG should take a Map and output 
{(key, value)}&lt;/li&gt;
	&lt;li&gt;TOMAP should take a Bag in that same form and make a map.&lt;/li&gt;
	&lt;li&gt;KEYSET should return the set of keys.&lt;/li&gt;
	&lt;li&gt;VALUESET should return the set of values.&lt;/li&gt;
	&lt;li&gt;VALUELIST should return the List of values (no deduping).&lt;/li&gt;
	&lt;li&gt;INVERSEMAP would return a Map of values =&amp;gt; the set of keys that refer to that Key&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This would all be pretty easy. A more substantial piece of work would be to make Pig support non-String keys (this is especially an issue since UDFs and whatnot probably assume that they are all Integers). Not sure if it is worth it.&lt;/p&gt;

&lt;p&gt;I&apos;d love to hear other things that would be useful for people!&lt;/p&gt;</description>
                <environment></environment>
        <key id="12546723">PIG-2600</key>
            <summary>Better Map support</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="prkommireddi">Prashant Kommireddi</assignee>
                                    <reporter username="jcoveney">Jonathan Coveney</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Mar 2012 05:39:56 +0000</created>
                <updated>Fri, 22 Feb 2013 04:54:07 +0000</updated>
                            <resolved>Mon, 21 May 2012 20:11:31 +0100</resolved>
                                                    <fixVersion>0.11</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13230918" author="prkommireddi" created="Fri, 16 Mar 2012 06:03:42 +0000"  >&lt;p&gt;Jon, for these UDFs, we could name 1 and 2 MAPTOBAG and BAGTOMAP respectively, since TOBAG, TOMAP exist already. In fact, all UDFs here (except INVERSEMAP) could be prefixed with MAP to avoid confusion.&lt;/p&gt;</comment>
                            <comment id="13230928" author="jcoveney" created="Fri, 16 Mar 2012 06:25:10 +0000"  >&lt;p&gt;Hmm, I think there is a compelling argument to do so, but at the same time: do we want a bunch of type specific conversion functions where one function can logically apply to multiple? I mean, TOBAG can work on Tuples as well as Maps...theoretically, the Pig type system coupled with the function should make it unambiguous which one is getting applied, and it&apos;d be nice not to have more UDFs than we need.&lt;/p&gt;</comment>
                            <comment id="13230934" author="prkommireddi" created="Fri, 16 Mar 2012 06:42:06 +0000"  >&lt;p&gt;You are right, we could simply override existing UDFs and not create type-specific ones. &lt;/p&gt;</comment>
                            <comment id="13230936" author="prkommireddi" created="Fri, 16 Mar 2012 06:43:50 +0000"  >&lt;p&gt;Overload is what I meant, long day!&lt;/p&gt;</comment>
                            <comment id="13231282" author="billgraham" created="Fri, 16 Mar 2012 15:14:43 +0000"  >&lt;p&gt;+1 for overloading. People often try to use these with Maps or Bags, realize they can&apos;t and then write a MapToBag UDF.&lt;/p&gt;

&lt;p&gt;Do you think INVERSEMAP is something that people need often? I question the general usefulness of that one.&lt;/p&gt;</comment>
                            <comment id="13231358" author="russell.jurney" created="Fri, 16 Mar 2012 16:39:59 +0000"  >&lt;p&gt;The other thing we need is to parametize maps with columns.&lt;/p&gt;</comment>
                            <comment id="13231360" author="prkommireddi" created="Fri, 16 Mar 2012 16:40:07 +0000"  >&lt;p&gt;INVERSEMAP is a nice to have functionality, not necessarily uber-useful. This could be similar to &lt;a href=&quot;http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/collect/BiMap.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/collect/BiMap.html&lt;/a&gt; except the fact that it does not require the restriction that values are unique. Rather we could think of a strategy to determine which value-&amp;gt;key pairs the function returns&lt;/p&gt;

&lt;p&gt;1. First occurring pair, key pair -&amp;gt; (v1, k1) from (k1,v1)(k2,v1)&lt;br/&gt;
2. Last occurring pair -&amp;gt; (v1, k2) from (k1,v1)(k2,v1)&lt;br/&gt;
3. All keys corresponding to value -&amp;gt; (v1, (k1,k2))&lt;/p&gt;

&lt;p&gt;Input could be tuple of maps or bag of maps.&lt;/p&gt;

&lt;p&gt;INVERSEMAP has been useful in a few situations to me, for eg to get field-&amp;gt;index map from index-&amp;gt;field. I see it being useful in few cases with click-through analysis as well. &lt;/p&gt;

&lt;p&gt;Again, not a super required use-case but good to have.&lt;/p&gt;</comment>
                            <comment id="13231365" author="jcoveney" created="Fri, 16 Mar 2012 16:43:26 +0000"  >&lt;p&gt;Russell: can you give an example of how you see that looking?&lt;/p&gt;

&lt;p&gt;As far as inversemap... most of the stuff we&apos;ve talked about thus far is pretty easy to implement. I&apos;m trying to think of if there is anything more ambitious?&lt;/p&gt;</comment>
                            <comment id="13231632" author="prkommireddi" created="Fri, 16 Mar 2012 21:09:39 +0000"  >&lt;p&gt;Taking a look at TOBAG, the existing UDF already converts a map entry to bag. Are we looking for additional functionality here?&lt;/p&gt;</comment>
                            <comment id="13231771" author="prkommireddi" created="Sat, 17 Mar 2012 00:48:48 +0000"  >&lt;p&gt;An initial patch for KEYSET, VALUESET, VALUELIST. I wanted to have more eyes look at it and comment. I have a test case for KEYSET and will be working on tests for others soon.&lt;/p&gt;</comment>
                            <comment id="13233075" author="prkommireddi" created="Tue, 20 Mar 2012 01:01:24 +0000"  >&lt;p&gt;Working on INVERSEMAP, does it make sense to allow this UDF to be used only when values are String too. Since this UDF would involve swapping keys with values, it would be required for the new keys (that were values originally) to be chararray?&lt;/p&gt;

&lt;p&gt;Also, if a value is not unique the UDF would simply return the last key for that value (as per hashmap &quot;put&quot; behavior)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
grunt&amp;gt; cat data;
[1#2,3#4,4#2]
[apache#hadoop,doug#hadoop]

grunt&amp;gt; a = load &apos;data&apos; as (M:[]);
grunt&amp;gt; b = foreach a generate INVERSEMAP($0);
grunt&amp;gt; dump b;
[4#3,2#4]
[hadoop#doug]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13233830" author="prkommireddi" created="Tue, 20 Mar 2012 21:51:55 +0000"  >&lt;p&gt;Adding a new patch with KEYSET, VALUESET, VALUELIST and INVERSEMAP. Added corresponding test cases to TestBuiltin.java. Also added documentation for all the new classes.&lt;/p&gt;</comment>
                            <comment id="13233850" author="jcoveney" created="Tue, 20 Mar 2012 21:59:54 +0000"  >&lt;p&gt;Prashant,&lt;/p&gt;

&lt;p&gt;Thanks for working on this! As far as Inversemap, I don&apos;t know if I like the semantic that if there are multiple values, you just get essentially a random Key. I think you should get a Tuple or Bag of or List whatever of Keys that correspond... the assumption is that values can appear more than once.&lt;/p&gt;

&lt;p&gt;Open to debate though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Another option on the &quot;inversmap only works on Map&amp;lt;String,String&amp;gt;&quot; front would be that, if given Map&amp;lt;String, T&amp;gt;&quot; it converts T to a string, which I think isn&apos;t a bad idea. Maybe that could be a constructor option, and the default is an error.&lt;/p&gt;</comment>
                            <comment id="13233976" author="prkommireddi" created="Wed, 21 Mar 2012 00:26:29 +0000"  >&lt;p&gt;Thanks Jon, I agree with both of your statements. The 2nd case Map&amp;lt;String, T&amp;gt; makes sense for primitive types, will upload a new patch soon.&lt;/p&gt;</comment>
                            <comment id="13234010" author="prkommireddi" created="Wed, 21 Mar 2012 01:17:18 +0000"  >&lt;p&gt;Attaching a revised patch. Here is the new functionality of INVERSEMAP, you would find the documentation in Class docs&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 grunt&amp;gt; cat 1data
 [open#1,1#2,11#2]
 [apache#2,3#4,12#24]


 grunt&amp;gt; a = load &apos;data&apos; as (M:[&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;]);
 grunt&amp;gt; b = foreach a generate INVERSEMAP($0);

 grunt&amp;gt; dump b;
 ([2#(1,11),1#(open)])
 ([2#(apache),24#(12),4#(3)])
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13234499" author="jcoveney" created="Wed, 21 Mar 2012 16:58:00 +0000"  >&lt;p&gt;Hey Prashant, thanks again for your work on this. Took a look at the patch, looks good, though I&apos;m wondering if VALUELIST and VALUESET shouldn&apos;t return bags? I guess it depends how someone plans to use it and you could convert easily from one to the other, but yeah... hmm. I think the big question is how it&apos;d be used. The awkward part about having it as a Tuple is that it&apos;d be impossible to do anything with the elements short of having a UDF to read them, whereas if it&apos;s a bag, then we know the type of the keys (whatever it is in the Map), and it seems more workable to me. This idea applies to all of the methods, really.&lt;/p&gt;</comment>
                            <comment id="13234503" author="jcoveney" created="Wed, 21 Mar 2012 17:01:40 +0000"  >&lt;p&gt;Woops, hit enter a bit early. With inversemap as well, we know the return type: Map&amp;lt;String,String&amp;gt; (nothing else is really possibly).&lt;/p&gt;

&lt;p&gt;For the tests on inversemap, probably worth testing the case of boolean values, int, etc values.&lt;/p&gt;</comment>
                            <comment id="13235048" author="prkommireddi" created="Wed, 21 Mar 2012 21:33:41 +0000"  >&lt;p&gt;I don&apos;t see a clear advantage of using Tuples over Bags in this case, I guess I can change it to be Bags. One of the use-cases could be to find Set Intersections or Unions between the value sets or lists. For example, each Map could be an array of (User, PageId) entries, and one might want to find intersections between different click-through patterns. I don&apos;t use too much of Maps in my PigLatin code to be honest so others can pitch in on how they would like this to be used.&lt;/p&gt;

&lt;p&gt;Regarding INVERSEMAP, the return type now would be Map&amp;lt;String, DataBag&amp;gt; now. We will be returning a bag of keys a value maps to?&lt;/p&gt;</comment>
                            <comment id="13248206" author="prkommireddi" created="Fri, 6 Apr 2012 10:04:50 +0100"  >&lt;p&gt;Jon, adding a new patch as per our previous discussion (changing return type to bags). I have also added test cases for various primitive types being Map values. &lt;/p&gt;</comment>
                            <comment id="13249630" author="jcoveney" created="Sun, 8 Apr 2012 23:55:31 +0100"  >&lt;p&gt;Prashant, thanks for tackling this. Maps have been a second class citizen for too long &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Some comments:&lt;/p&gt;

&lt;p&gt;General:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I personally usually do &quot;if (input == null || input.size() == 0)&quot; just so you don&apos;t get the array index error, but that&apos;s fine. Same issue as in VALUELIST comes up with that as well.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;VALUELIST/SET&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in some cases maps actually have information on the type of their keys. If this is the case, that information should be used to create the appropriate output schema.&lt;/li&gt;
	&lt;li&gt;I personally like the approach of making TupleFactory and BagFactory a static final member of classes, but that&apos;s hardly Pig dogma &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
	&lt;li&gt;In the case of a null map that is passed in, there are two options. One is to return null as you do, another is to return an empty bag... the importance is important because a null value won&apos;t get thrown out on a flatten, but a null bag will. I think I&apos;d return a null bag, but would be open either way. It&apos;s just something we have to be conscious of.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;KEYSET/LIST&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        &lt;span class=&quot;code-comment&quot;&gt;//Inner schema &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; keys would always be type chararray
&lt;/span&gt;+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Schema.FieldSchema(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, DataType.BAG)); 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should build the Schema so that it takes into account the fact that you know it will be chararrays.&lt;/p&gt;

&lt;p&gt;VALUESET&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You have an interesting comment about how you could iterate over the collection, and&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;from HashSet, here&apos;s the constructor code:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; HashSet(Collection&amp;lt;? &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; E&amp;gt; c) {
    map = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;(&lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.max((&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) (c.size()/.75f) + 1, 16));
    addAll(c);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And addAll does what you&apos;re predict. The point of this being that you can probably save in the net amount of logic by iterating over the values directly as you suggest and checking on the HashSet if it already exists. There wouldn&apos;t be much of a change compared to what&apos;s going on under the covers anyway, as it&apos;s not like they do anything special to predict the size it&apos;s going to be...you&apos;ll just be doing the resizes as you iterate over values manually instead of all at once.&lt;/p&gt;

&lt;p&gt;INVERSEMAP&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in doInverse, I don&apos;t think you really need to do the chain of isntanceofs. You&apos;re really just checking that it&apos;s not a DataBag or Tuple, right? you could do something like
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Tuple || o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DataBag))
  newKey = o.toString();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The casting is unecessary. If it is the proper type, then toString will give you what you want irrespective.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;For updating hashmaps in cases like this, I&apos;m a fan of the following to avoid having to do containsKey and then a get right afterwards
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
DataBag bag = (DataBag)inverseMap.get(newKey);
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bag==&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;code-comment&quot;&gt;//logic
&lt;/span&gt;} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
    bad.add( ... &lt;span class=&quot;code-comment&quot;&gt;//more logic)
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks again for the legwork on this.&lt;/p&gt;</comment>
                            <comment id="13267322" author="prkommireddi" created="Thu, 3 May 2012 10:13:53 +0100"  >&lt;p&gt;Jon, I made changes addressing most of your concerns. New patch uploaded.&lt;/p&gt;</comment>
                            <comment id="13268173" author="jcoveney" created="Fri, 4 May 2012 07:41:56 +0100"  >&lt;p&gt;Prashant,&lt;/p&gt;

&lt;p&gt;Thanks for your work on this! It&apos;s 99.9% of the way there. A more administrative point...you&apos;ll need to reupload it with permissions given to apache to use. What follows is fairly nitpicky.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In valuelist, you have
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+            }
+            &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;just bump that else up&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Less nitpicky:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You have many cases where you catch (Exception). Try and catch the least general exception possible. Example: In valuelist, you have
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
+            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;code-quote&quot;&gt;&quot;Error &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; generating &quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getClass().getSimpleName();
+            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(msg, e);
+        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(I&apos;m not even quite sure what exception is being thrown?)&lt;/p&gt;

&lt;p&gt;Further, instead of throwing a runtime exception, the convention (in exec) is to throw ExecException since exec throws IOException anyway. The builtin functions have many examples of this. But yeah, in general, you want to catch the most specific exception possible in the most specific portion of code possible... I don&apos;t like the convention of wrapping an entire method in a try{}catch(Exception). At least, that&apos;s how I like to do it and I&apos;m reviewing this &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; So basically: try&apos;s should be around the most specific piece of code possible, should catch the most specific exception possible, and should throw ExecException if the code are allows. Throwing a RuntimeException should be a last resort (and is really just jank around the annoying exceptions required by outputSchema).&lt;/p&gt;

&lt;p&gt;Similarly, in KEYSET you have&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt;(FrontendException e) {
+            &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; block
&lt;/span&gt;+            e.printStackTrace();
+        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which I assume was an oversight left by the IDE &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; (those things will be the death of us Java programmers...)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think we had talked a bit about how to do VALUESET... I still think you could do it in one pass, but I don&apos;t think the performance gain will be so massive that you can&apos;t do it in two passes. Your comment about frequent resizing isn&apos;t really accurate, since if you look at the HashSet constructor, it doesn&apos;t do any fancy math...it just adds all of the elements, and resizes dynamically as you add more of them. Thus, you could just add to the HashSet, and if it wasn&apos;t previously contained, add it to the Tuple, thus doing it in one pass (since that first pass, dynamic resizing and all, is going to happen anyway). Does that make sense?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks again for your work on this. It is super close.&lt;br/&gt;
Jon&lt;/p&gt;</comment>
                            <comment id="13268205" author="prkommireddi" created="Fri, 4 May 2012 09:31:49 +0100"  >&lt;p&gt;Thanks for the review Jon.&lt;/p&gt;

&lt;p&gt;1. I agree on Exception handling in most cases, and thanks for catching &quot;printStackTrace&quot; in the code, it wasn&apos;t my intention to leave it in there &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. In general wrapping specific portions of code within try-catch is a good practice, but I prefer not breaking up try blocks into multiple when most lines within the method throw the same exception, and its not a lot of code otherwise. In these UDFs, Schema.getField is used more than once and ofcourse they all throw FrontEndException. &lt;/p&gt;

&lt;p&gt;And looking at builtin UDFs for examples was really not the best idea &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Looks like some refactoring required there.&lt;/p&gt;

&lt;p&gt;2. Regarding resizing of HashSet, trying to optimize right now might be a bit premature. My comment about frequent resizing would make sense if the number of distinct elements in Map values was large. A HashSet start with an internal array of size 16, and starts expanding (creating a new array and copying elements over) once a certain threshold is met. With the current approach, HashSet implementation guesses an approximate size of array based on size of the Collection being passed to it in the constructor. &quot;it just adds all of the elements, and resizes dynamically as you add more of them&quot; - this can be a costly operation if you start with 16 elements and the number of distinct values in the map was thousands, millions... &quot;since that first pass, dynamic resizing and all, is going to happen anyway&quot; - it should make sense that the amount of resizing is not the same in the 2 cases? Either way, too early to be thinking about optimization there &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I will upload a patch soon with the changes, thanks for reviewing again.&lt;/p&gt;</comment>
                            <comment id="13270917" author="jcoveney" created="Wed, 9 May 2012 00:06:59 +0100"  >&lt;p&gt;So much refactoring is necessary in so many places...oy haha. As far as how much code to wrap...yeah, that&apos;s just style at this point. Not worth nitpicking over. I do have a couple of last comments...&lt;/p&gt;

&lt;p&gt;In VALUELIST (and a couple of other places I think)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+            &lt;span class=&quot;code-comment&quot;&gt;//Input must be of type Map. This is verified at compile time
&lt;/span&gt;+            m = (Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt;)(input.get(0));
+        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ExecException e) {
+            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the catch shouldn&apos;t be necessary anymore, since exec throws IOException and ExecException is an IOException.&lt;/p&gt;

&lt;p&gt;More of style point, but in KEYSET:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        Iterator&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; iter = keySet.iterator();
+        DataBag bag = BAG_FACTORY.newDefaultBag();
+        &lt;span class=&quot;code-comment&quot;&gt;//Add keyset elements to bag
&lt;/span&gt;+        &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(iter.hasNext()) {
+            Tuple t = TUPLE_FACTORY.newTuple(iter.next());
+            bag.add(t);
+        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;could be rewritten as&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
DataBag bag = BAG_FACTORY.newDefaultBag();
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; s : keySet) {
    Tuple t = TUPLE_FACTORY.newTuple(iter.next());
    bag.add(t);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IMHO using the for construct with iterators is a lot clearer, but it&apos;s not a big deal... if there weren&apos;t other things I wouldn&apos;t have bother mentioning it, but here it is haha.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You can have the doInverse method throw ExecException, then instead of throwing RuntimeException, throw an ExecException, which you won&apos;t have to catch since exec throws IOException. Also, the exception message is a little misleading, as the error isn&apos;t that of getting and unknown primitive (primitive implies int etc), but just a wrong type in general.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That&apos;s it though. Should be good for committing after that.&lt;/p&gt;

&lt;p&gt;Thanks for the work!&lt;/p&gt;</comment>
                            <comment id="13270931" author="prkommireddi" created="Wed, 9 May 2012 00:46:14 +0100"  >&lt;p&gt;Jon, addressed your feedback. Thanks.&lt;/p&gt;</comment>
                            <comment id="13270990" author="jcoveney" created="Wed, 9 May 2012 02:07:39 +0100"  >&lt;p&gt;Man, I feel so nitpicky, though this one isn&apos;t so nitpicky: the javadoc formatting isn&apos;t correct. As is, when I compile the javadocs, I get this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
This UDF accepts a Map as input with values of any primitive data type. UDF swaps keys with values and returns the &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; inverse Map. Note in &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; original values are non-unique, the resulting Map would contain &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; Key -&amp;gt; DataBag of values. Here the bag of values is composed of the original keys having the same value. Note: 1. UDF accepts Map with Values of primitive data type 2. UDF returns Map grunt&amp;gt; cat 1data [open#1,1#2,11#2] [apache#2,3#4,12#24] grunt&amp;gt; a = load &apos;data&apos; as (M:[&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;]); grunt&amp;gt; b = foreach a generate INVERSEMAP($0); grunt&amp;gt; dump b; ([2#{(1),(11)},apache#{(open)}]) ([hadoop#{(apache),(12)},4#{(3)}])
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;doInverse should return Map&amp;lt;String,DataBag&amp;gt;&lt;/li&gt;
	&lt;li&gt;INVERSEMAP should extend extends EvalFunc&amp;lt;Map&amp;lt;String,DataBag&amp;gt;&amp;gt;&lt;/li&gt;
	&lt;li&gt;inverseMap should be a Map&amp;lt;String,Databag&amp;gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

100             DataBag bag = (DataBag)inverseMap.get(newKey);
101             &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(bag == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
102                 DataBag dataBag = BAG_FACTORY.newDefaultBag();
103                 dataBag.add(TUPLE_FACTORY.newTuple(entry.getKey()));
104                 inverseMap.put(newKey, dataBag);
105             } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
106                 bag.add(TUPLE_FACTORY.newTuple(entry.getKey()));
107             }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can just reuse the bag reference instead of making a new dataBag&lt;/p&gt;

&lt;p&gt;That should be the last of the comments...&lt;/p&gt;</comment>
                            <comment id="13277258" author="prkommireddi" created="Thu, 17 May 2012 00:21:15 +0100"  >&lt;p&gt;Jon, here it is.&lt;/p&gt;</comment>
                            <comment id="13278398" author="jcoveney" created="Fri, 18 May 2012 00:27:24 +0100"  >&lt;p&gt;Prashant,&lt;/p&gt;

&lt;p&gt;Looks great. Literally one more comment and then I can commit: VALUESET seems to be in 2space form instead of 4space form. My guess is you forgot to change your IDE from the convention your use at work, or something like that. Fix that and then we&apos;re good to go &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Jon&lt;/p&gt;</comment>
                            <comment id="13278438" author="prkommireddi" created="Fri, 18 May 2012 01:13:13 +0100"  >&lt;p&gt;My bad, I used Hbase formatter for making edits on VALUESET. Seems like the conventions are different there. Uploading a new patch.&lt;/p&gt;</comment>
                            <comment id="13280331" author="jcoveney" created="Mon, 21 May 2012 19:17:12 +0100"  >&lt;p&gt;Prashant: it&apos;s in. Thanks for your patience! Looking forward to seeing more contribution &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13280360" author="prkommireddi" created="Mon, 21 May 2012 19:58:21 +0100"  >&lt;p&gt;Thanks Jon. Did you forget to change the resolution status?&lt;/p&gt;</comment>
                            <comment id="13481596" author="olgan" created="Mon, 22 Oct 2012 19:34:16 +0100"  >&lt;p&gt;can you please add to release notes the UDFs that were added as well as their syntax and usage examples. This is for inclusion in the documentation, thanks!&lt;/p&gt;</comment>
                            <comment id="13481630" author="jcoveney" created="Mon, 22 Oct 2012 19:55:24 +0100"  >&lt;p&gt;Prashant, do you want to take the honor? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13481676" author="prkommireddi" created="Mon, 22 Oct 2012 20:17:35 +0100"  >&lt;p&gt;Sure, I can do that. Where exactly should I be adding this?&lt;/p&gt;</comment>
                            <comment id="13481704" author="prkommireddi" created="Mon, 22 Oct 2012 20:34:03 +0100"  >&lt;p&gt;Btw, syntax and usage examples are all present in java files for each of the UDFs. Lmk if it needs to go into release notes (and where) and I can put it there.&lt;/p&gt;</comment>
                            <comment id="13481738" author="olgan" created="Mon, 22 Oct 2012 21:04:01 +0100"  >&lt;p&gt;Yes, please, put all the information into the release notes. This way it is much easier to created documentation patch.&lt;/p&gt;</comment>
                            <comment id="13482558" author="prkommireddi" created="Tue, 23 Oct 2012 19:36:43 +0100"  >&lt;p&gt;Olga, adding release notes. Let me know if you need more info.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12518760" name="PIG-2600.patch" size="7826" author="prkommireddi" created="Sat, 17 Mar 2012 00:48:48 +0000"/>
                            <attachment id="12519131" name="PIG-2600_2.patch" size="16089" author="prkommireddi" created="Tue, 20 Mar 2012 21:51:55 +0000"/>
                            <attachment id="12519163" name="PIG-2600_3.patch" size="17096" author="prkommireddi" created="Wed, 21 Mar 2012 01:17:17 +0000"/>
                            <attachment id="12521662" name="PIG-2600_4.patch" size="22117" author="prkommireddi" created="Fri, 6 Apr 2012 10:04:50 +0100"/>
                            <attachment id="12525418" name="PIG-2600_5.patch" size="23999" author="prkommireddi" created="Thu, 3 May 2012 10:13:52 +0100"/>
                            <attachment id="12525579" name="PIG-2600_6.patch" size="23903" author="prkommireddi" created="Fri, 4 May 2012 09:36:57 +0100"/>
                            <attachment id="12526071" name="PIG-2600_7.patch" size="23131" author="prkommireddi" created="Wed, 9 May 2012 00:46:14 +0100"/>
                            <attachment id="12527741" name="PIG-2600_8.patch" size="23096" author="prkommireddi" created="Thu, 17 May 2012 00:21:15 +0100"/>
                            <attachment id="12527958" name="PIG-2600_9.patch" size="22953" author="prkommireddi" created="Fri, 18 May 2012 01:13:13 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Mar 2012 06:03:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>231881</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12310041" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Patch Info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10042"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy4sm7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>61792</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Pig 0.11+ includes the following UDFs for operating with Map&lt;br/&gt;
&lt;br/&gt;
1. VALUESET&lt;br/&gt;
2. VALUELIST&lt;br/&gt;
3. KEYSET&lt;br/&gt;
4. INVERSEMAP&lt;br/&gt;
&lt;br/&gt;
VALUESET&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This UDF takes a Map and returns a Tuple containing the value set. &lt;br/&gt;
&amp;nbsp;&amp;nbsp;Note, this UDF returns only unique values. For all values, use &lt;br/&gt;
&amp;nbsp;&amp;nbsp;VALUELIST instead.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;code&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; cat data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[open#apache,1#2,11#2]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[apache#hadoop,3#4,12#hadoop]&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; a = load &amp;#39;data&amp;#39; as (M:[]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; b = foreach a generate VALUELIST($0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;({(apache),(2)})&lt;br/&gt;
&amp;nbsp;&amp;nbsp;({(4),(hadoop)})&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;/code&amp;gt;&lt;br/&gt;
&lt;br/&gt;
VALUELIST&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This UDF takes a Map and returns a Bag containing the values from map. &lt;br/&gt;
&amp;nbsp;&amp;nbsp;Note that output tuple contains all values, not just unique ones.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For obtaining unique values from map, use VALUESET instead. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;code&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; cat data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[open#apache,1#2,11#2]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[apache#hadoop,3#4,12#hadoop]&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; a = load &amp;#39;data&amp;#39; as (M:[]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; b = foreach a generate VALUELIST($0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; dump b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;({(apache),(2),(2)})&lt;br/&gt;
&amp;nbsp;&amp;nbsp;({(4),(hadoop),(hadoop)})&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;/code&amp;gt;&lt;br/&gt;
&lt;br/&gt;
KEYSET&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This UDF takes a Map and returns a Bag containing the keyset.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;code&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; cat data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[open#apache,1#2,11#2]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[apache#hadoop,3#4,12#hadoop]&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; a = load &amp;#39;data&amp;#39; as (M:[]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; b = foreach a generate KEYSET($0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; dump b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;({(open),(1),(11)})&lt;br/&gt;
&amp;nbsp;&amp;nbsp;({(3),(apache),(12)})&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;/code&amp;gt;&lt;br/&gt;
&lt;br/&gt;
INVERSEMAP&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This UDF accepts a Map as input with values of any primitive data type. &lt;br/&gt;
&amp;nbsp;&amp;nbsp;UDF swaps keys with values and returns the new inverse Map. &lt;br/&gt;
&amp;nbsp;&amp;nbsp;Note in case original values are non-unique, the resulting Map would &lt;br/&gt;
&amp;nbsp;&amp;nbsp;contain String Key -&amp;gt; DataBag of values. Here the bag of values is composed &lt;br/&gt;
&amp;nbsp;&amp;nbsp;of the original keys having the same value. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Note: 1. UDF accepts Map with Values of primitive data type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. UDF returns Map&amp;lt;String,DataBag&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;code&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; cat 1data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[open#1,1#2,11#2]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[apache#2,3#4,12#24]&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; a = load &amp;#39;data&amp;#39; as (M:[int]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; b = foreach a generate INVERSEMAP($0);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;grunt&amp;gt; dump b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;([2#{(1),(11)},apache#{(open)}])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;([hadoop#{(apache),(12)},4#{(3)}])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;/code&amp;gt;</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>udf</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>