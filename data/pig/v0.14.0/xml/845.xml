<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:58:10 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-845/PIG-845.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-845] PERFORMANCE: Merge Join</title>
                <link>https://issues.apache.org/jira/browse/PIG-845</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Thsi join would work if the data for both tables is sorted on the join key.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12427697">PIG-845</key>
            <summary>PERFORMANCE: Merge Join</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ashutoshc">Ashutosh Chauhan</assignee>
                                    <reporter username="olgan">Olga Natkovich</reporter>
                        <labels>
                    </labels>
                <created>Fri, 12 Jun 2009 01:27:19 +0100</created>
                <updated>Thu, 25 Mar 2010 00:12:46 +0000</updated>
                            <resolved>Fri, 14 Aug 2009 18:54:53 +0100</resolved>
                                                    <fixVersion>0.4.0</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12737313" author="ashutoshc" created="Thu, 30 Jul 2009 22:49:52 +0100"  >&lt;p&gt;Initial patch for review.&lt;/p&gt;</comment>
                            <comment id="12737377" author="pkamath" created="Fri, 31 Jul 2009 01:18:39 +0100"  >&lt;p&gt;Some initial comments on POMergeJoin.java:&lt;/p&gt;

&lt;p&gt;If status is not OK - it shuld just be returned (no run time&lt;br/&gt;
exception like above) - similar comments for other places in POMergeJoin where there is&lt;br/&gt;
a switch case on processInput() - once this change is made, the code in if(processingFE) also&lt;br/&gt;
will need to change accordingly&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(firstTime){
            &lt;span class=&quot;code-comment&quot;&gt;// Do initial setup.
&lt;/span&gt;            curLeftInp = processInput();
            &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt;(curLeftInp.returnStatus){
            &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; POStatus.STATUS_OK:
                &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;

            &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; POStatus.STATUS_EOP: &lt;span class=&quot;code-comment&quot;&gt;// Return because we want to fetch next left tuple.
&lt;/span&gt;                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; curLeftInp;
            &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected Status&quot;&lt;/span&gt;);
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All non RuntimeExceptions should follow error handling specification by using the correct Exception created with error code, cause, message, src constructor.&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/pig/PigErrorHandlingFunctionalSpecification#head-9f71d78d362c3307711f98ec9db3ee12b55e92f6&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/PigErrorHandlingFunctionalSpecification#head-9f71d78d362c3307711f98ec9db3ee12b55e92f6&lt;/a&gt; should be updated with new error code #&lt;/p&gt;

&lt;p&gt;detachInput() is not required in POMergeJoin - processInput takes care of it&lt;/p&gt;

&lt;p&gt;IN the code below, we could cache away the key to be used while processFE is true as processFEKey and then we need not&lt;br/&gt;
extract key for each join&lt;br/&gt;
        // Cant use the prevLeftKey, because we are reading ahead.&lt;br/&gt;
                            // Need key of current bag. Since we have just finished doing the join&lt;br/&gt;
                            // bag must contain atleast one element.&lt;br/&gt;
                            res.returnStatus = POStatus.STATUS_OK;&lt;br/&gt;
                            res.result = leftTuples.get(0);&lt;br/&gt;
                            curLeftKey = extractKeysFromTuple(res, 0);&lt;/p&gt;</comment>
                            <comment id="12741155" author="ashutoshc" created="Mon, 10 Aug 2009 01:00:39 +0100"  >&lt;p&gt;Specification: &lt;a href=&quot;http://wiki.apache.org/pig/PigMergeJoin&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/PigMergeJoin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Updated patch with following enhancements:&lt;/p&gt;

&lt;p&gt;Performance:&lt;br/&gt;
a) Got completely rid of POForEach for generating joined output tuples.&lt;br/&gt;
b) Creating output tuple of required size and then doing set instead of append.&lt;br/&gt;
c) Caching of key as suggested by Pradeep in previous comment.&lt;br/&gt;
d) Creating new arraylist for holding buffered left tuples instead of clearing it, thus avoiding resizing of array.&lt;/p&gt;

&lt;p&gt;Functionality:&lt;br/&gt;
a) Added typecasting for index keys, thus making join work when schemas are supplied.&lt;br/&gt;
b) Refactored visit(LOJoin loj) in LogToPhyTranslationVisitor to avoid duplicate code.&lt;/p&gt;

&lt;p&gt;Error Handling:&lt;br/&gt;
a) Better error handling at various places.&lt;br/&gt;
b) Added validateMergeJoin() in LogToPhyTranslationVisitor to generate exception where Merge Join cant be used.&lt;br/&gt;
c) Added more tests.&lt;/p&gt;

&lt;p&gt;Limitations:&lt;br/&gt;
Merge Join doesn&apos;t work when there are splits, streaming and order-by in predecessors or streaming is present in successors.&lt;br/&gt;
Some of these are related to an issue outlined here: &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-858&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-858&lt;/a&gt; and requires work in MRCompiler.&lt;br/&gt;
Currently we detect these conditions in validateMergeJoin() and fail at compile time.  &lt;/p&gt;</comment>
                            <comment id="12741589" author="dvryaboy" created="Mon, 10 Aug 2009 23:10:18 +0100"  >&lt;p&gt;Some Comments below.&lt;br/&gt;
It&apos;s a big patch, so a lot of comments...&lt;/p&gt;

&lt;p&gt;1. &lt;br/&gt;
EndOfAllInput flags &amp;#8211; could you add comments here about what the point of this flag is? You explain what EndOfAllInputSetter does (which is actually rather self-explanatory) but not what the meaning of the flag is and how it&apos;s used. There is a bit of an explanation in PigMapBase, but it really belongs here.&lt;/p&gt;

&lt;p&gt;2.&lt;br/&gt;
Could you explain the relationship between EndOfAllInput and (deleted) POStream?&lt;/p&gt;

&lt;p&gt;3.&lt;br/&gt;
Comments in MRCompiler alternate between referring to the left MROp as LeftMROper and curMROper. Choose one.&lt;/p&gt;

&lt;p&gt;4.&lt;br/&gt;
I am curious about the decision to throw compiler exceptions if MergeJoin requirements re number of inputs, etc, aren&apos;t satisfied. It seems like a better user experience would be to log a warning and fall back to a regular join.&lt;/p&gt;

&lt;p&gt;5.&lt;br/&gt;
Style notes for visitMergeJoin: &lt;/p&gt;

&lt;p&gt;It&apos;s a 200-line method. Any way you can break it up into smaller components? As is, it&apos;s hard to follow.&lt;/p&gt;

&lt;p&gt;The if statements should be broken up into multiple lines to agree with the style guides.&lt;/p&gt;

&lt;p&gt;Variable naming: you&apos;ve got topPrj, prj, pkg, lr, ce, nig.. one at a time they are fine, but together in a 200-line method they are undreadable. Please consider more descriptive names.&lt;/p&gt;

&lt;p&gt;6.&lt;br/&gt;
Kind of a global comment, since it applies to more than just MergeJoin:&lt;/p&gt;

&lt;p&gt;It seems to me like we need a Builder for operators to clean up some of the new, set, set, set stuff.&lt;/p&gt;

&lt;p&gt;Having the setters return this and a Plan&apos;s add() method return the plan, would let us replace this:&lt;/p&gt;

&lt;p&gt;POProject topPrj = new POProject(new OperatorKey(scope,nig.getNextNodeId(scope)));&lt;br/&gt;
topPrj.setColumn(1);&lt;br/&gt;
topPrj.setResultType(DataType.TUPLE);&lt;br/&gt;
topPrj.setOverloaded(true);&lt;br/&gt;
rightMROpr.reducePlan.add(topPrj);&lt;br/&gt;
rightMROpr.reducePlan.connect(pkg, topPrj);&lt;/p&gt;

&lt;p&gt;with this:&lt;/p&gt;

&lt;p&gt;POProject topPrj = new POProject(new OperatorKey(scope,nig.getNextNodeId(scope)))&lt;br/&gt;
	.setColumn(1).setResultType(DataType.TUPLE)&lt;br/&gt;
	.setOverloaded(true);&lt;/p&gt;

&lt;p&gt;rightMROpr.reducePlan.add(topPrj).connect(pkg, topPrj)&lt;/p&gt;


&lt;p&gt;7.&lt;br/&gt;
Is the change to List&amp;lt;List&amp;lt;Byte&amp;gt;&amp;gt; keyTypes in POFRJoin related to MergeJoin or just rolled in?&lt;/p&gt;

&lt;p&gt;8. MergeJoin&lt;/p&gt;

&lt;p&gt;break getNext() into components.&lt;/p&gt;

&lt;p&gt;I don&apos;t see you supporting Left outer joins. Plans for that? At least document the planned approach.&lt;/p&gt;

&lt;p&gt;Error codes being declared deep inside classes, and documented on the wiki, is a poor practice, imo. They should be pulled out into PigErrors (as lightweight final objects that have an error code, a name, and a description..) I thought Santhosh made progress on this already, no?&lt;/p&gt;

&lt;p&gt;Could you explain the problem with splits and streams? Why can&apos;t this work for them?&lt;/p&gt;


&lt;p&gt;9. Sampler/Indexer:&lt;br/&gt;
9a&lt;br/&gt;
Looks like you create the same number of map tasks for this as you do for a join; all a sampling map task does is read one record and emit a single tuple.  That seems wasteful; there is a lot of overhead in setting up these tiny jobs which might get stuck behind other jobs running on the cluster, etc. If the underlying file has syncpoints, a smaller number of MR tasks can be created. If we know the ratio of sample tasks to &quot;full&quot; tasks, we can figure out how many records we should emit per job ( ceil(full_tasks/sample_tasks) ).  We can approximately achieve this through seeking trough (end-offset)/num_to_emit and doing a sync() after that seek. It&apos;s approximate, but close enough for an index.&lt;/p&gt;

&lt;p&gt;9b&lt;br/&gt;
Consider renaming to something like SortedFileIndexer, since it&apos;s coneivable that this component can be reused in a context other than a Merge Join.&lt;/p&gt;

&lt;p&gt;10.&lt;br/&gt;
Would it make sense to expose this to the users via a &apos;CREATE INDEX&apos; (or similar) command?&lt;br/&gt;
That way the index could be persisted, and the user could tell you to use an existing index instead of rescanning the data.&lt;/p&gt;

&lt;p&gt;11.&lt;br/&gt;
I am not sure about the approach of pushing sampling above filters. Have you guys benchmarked this? Seems like you&apos;d wind up reading the whole file in the sample job if the filter is selective enough (and high filter selectivity would also make materialize-&amp;gt;sample go much faster).&lt;/p&gt;

&lt;p&gt;Testing: &lt;br/&gt;
12a&lt;br/&gt;
You should test for refusal to do 3-way join and other error condition (or a warning and successful failover to regular join &amp;#8211; my preference)&lt;/p&gt;

&lt;p&gt;12b&lt;br/&gt;
You should do a proper unit test for the MergeJoinIndexer (or whatever we are calling it).&lt;/p&gt;
</comment>
                            <comment id="12741621" author="pkamath" created="Tue, 11 Aug 2009 00:37:24 +0100"  >&lt;p&gt;Review comments:&lt;br/&gt;
1) In LogicalPlanTester.java, why is the following change required?&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;@@ -198,7 +198,7 @@
     private LogicalPlan buildPlan(String query, ClassLoader cldr) {
 
         LogicalPlanBuilder.classloader = LogicalPlanTester.class.getClassLoader() ;
-        PigContext pigContext = new PigContext(ExecType.LOCAL, new Properties());
+        PigContext pigContext = new PigContext(ExecType.MAPREDUCE, new Properties());
         try {
             pigContext.connect();
         } catch (ExecException e1) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Typically when PigContext is constructed in Map-reduce mode, the properties should correspond to the cluster configuration. So the above initialization seems odd because the Properties object is an empty object in the constructor call above.&lt;/p&gt;

&lt;p&gt;2) In PigMapBase.java:&lt;/p&gt;

&lt;p&gt;public static final String END_OF_INP_IN_MAP = &quot;pig.stream.in.map&quot;;&lt;/p&gt;

&lt;p&gt;can change to&lt;/p&gt;

&lt;p&gt;public static final String END_OF_INP_IN_MAP = &quot;pig.blocking.operator.in.map&quot;; and this should be put as a public static member of JobControlCompiler.&lt;/p&gt;

&lt;p&gt;In JobControlCompiler.java,&lt;/p&gt;

&lt;p&gt;jobConf.set(&quot;pig.stream.in.map&quot;, &quot;true&quot;);  should change to use the above public static String.&lt;/p&gt;


&lt;p&gt;3) Remove the following comment in QueryParser.jjt (line 302):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    * Join parser. Currently can only handle skewed joins.        
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4) In QueryParser.jjt the joinPlans passed to LOJoin constructor is not a LinkedMultiMap&lt;br/&gt;
but in LogToPhyTranslationVistior the join plans are put in a LinkedMultiMap. If order is&lt;br/&gt;
important, shouldn&apos;t QueryParser.jjt also change?&lt;/p&gt;

&lt;p&gt;5) Some comments in LogToPhyTranslationVisitor about the different lists and maps would help &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;6) In validateMergeJoin() - the code only considers direct successors and predecessors of LOJoin. It should check the entire plan and ensure that predecessors of LOJoin all the way to the LOLoad are only LOForEach and LOFilter. Strictly we should not allow LOForeach since it could change sort order or position of join keys and hence invalidate the index - but we need it&lt;br/&gt;
so that the Foreach introduced by the TypeCastInserter when there is a schema for either of the inputs remains. You should note in the documentation that only Order and join key position preserving Foreachs and Filters are allowed as predecessors to merge join and check the same in validateMergeJoin() - it is better to use a whitelist of allowed operators than a blacklist&lt;br/&gt;
of disallowed once (since then the blacklist would need to be updated anytime a new operator comes along. The exception source here is not really a bug but a user input error since merge join really doesnot support other ops.&lt;/p&gt;

&lt;p&gt;Again for the successor, all successors from mergejoin down to map leaf should be checked to ensure stream is absent (really there should be no restriction on stream being present after the join - if there is an issue currently with this, it is fine to not allow stream but eventually it would be good to not have any restriction on what follows the merge join). You can just use a visitor to check presence of stream in the plan - this should be done after complete LogToPhyTranslation is done - in visit() so that the whole plan can be looked at.&lt;/p&gt;

&lt;p&gt;7) Is MRStreamHandler.java now replaced by /org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/plans/EndOfAllInputSetter.java ?&lt;/p&gt;

&lt;p&gt;8) Some of MRCompilerExceptions do not follow the Error handling spec - errcode, errMsg, Src&lt;/p&gt;

&lt;p&gt;9) Should assert() statements in MRCompiler be replaced with Exceptions since assertions are disabled by default in Java.&lt;/p&gt;

&lt;p&gt;10) In MRCompiler.java I wonder if you should change&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
                    rightMapPlan.disconnect(rightLoader, loadSucc);
                    rightMapPlan.remove(loadSucc);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
	            rightMapPlan.trimBelow(rightLoader);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We really want to remove all operators in rightMapPlan other than the loader.&lt;/p&gt;

&lt;p&gt;11) We should note in documentation that merge join only works for data sorted in ascending order. (the MRCompiler code assumes this - we should have sort check if possible - see performance comment below)&lt;/p&gt;

&lt;p&gt;12) It would be good to add a couple of unit tests with a few operators after merge join to ensure merge join operators well with successors in the plan.&lt;/p&gt;

&lt;p&gt;13) In POMergeJoin.java, comments about foreach should be cleaned up since foreach is no longer used. For example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;//variable which denotes whether we are returning tuples from the foreach &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following code can be factored out into a function since its repeated twice:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
               &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; POStatus.STATUS_EOP:          &lt;span class=&quot;code-comment&quot;&gt;// Current file has ended. Need to open next file by reading next index entry.
&lt;/span&gt;                    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; prevFile = rightLoader.getLFile().getFileName();
                    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;){                        &lt;span class=&quot;code-comment&quot;&gt;// But next file may be same as previous one, because index may contain multiple entries &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; same file.
&lt;/span&gt;                        Tuple idxEntry = index.poll();
                        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; == idxEntry)          &lt;span class=&quot;code-comment&quot;&gt;// Index is finished too. Right stream is finished. No more tuples.
&lt;/span&gt;                            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; res;
                        &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;{
                            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(prevFile.equals((&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)idxEntry.get(idxEntry.size()-2)))
                                &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
                            &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;{
                                initRightLoader(idxEntry);
                                res = rightLoader.getNext(dummyTuple);
                                rightPipelineRoot.attachInput((Tuple)res.result);
                                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getNextRightInp();
                            }   
                        }   
                    }   

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple of things to try and check impact on performance:&lt;br/&gt;
1) Introduce checks for sortedness of inputs to merge join&lt;br/&gt;
2) Increase sample size from 1 per map to say 10 per map&lt;/p&gt;</comment>
                            <comment id="12741733" author="ashutoshc" created="Tue, 11 Aug 2009 08:26:23 +0100"  >&lt;p&gt;Hi Dmitriy,&lt;/p&gt;

&lt;p&gt;Thanks for review. Please find my comments inline.&lt;/p&gt;

&lt;p&gt;1.&lt;br/&gt;
EndOfAllInput flags - could you add comments here about what the point of this flag is? You explain what EndOfAllInputSetter does (which is actually rather self-explanatory) but not what the meaning of the flag is and how it&apos;s used. There is a bit of an explanation in PigMapBase, but it really belongs here.&lt;br/&gt;
&amp;gt;&amp;gt; EndofAllInput flag is basically a flag to indicate that on close() call of map/reduce task, run the pipeline once more. Till now it was used only by POStream, but now POMergeJoin also make use of it.&lt;/p&gt;

&lt;p&gt;2.&lt;br/&gt;
Could you explain the relationship between EndOfAllInput and (deleted) POStream?&lt;br/&gt;
&amp;gt;&amp;gt; POStream is still there, I guess you are referring to MRStreamHandler which is deleted. Its renaming of class. Now that POMergeJoin also makes use of it, its better to give it a generic name like EndOfAllInput instead of MRStreamHandler.&lt;/p&gt;

&lt;p&gt;3.&lt;br/&gt;
Comments in MRCompiler alternate between referring to the left MROp as LeftMROper and curMROper. Choose one.&lt;br/&gt;
&amp;gt;&amp;gt; Ya, will update the comments.&lt;/p&gt;

&lt;p&gt;4.&lt;br/&gt;
I am curious about the decision to throw compiler exceptions if MergeJoin requirements re number of inputs, etc, aren&apos;t satisfied. It seems like a better user experience would be to log a warning and fall back to a regular join.&lt;br/&gt;
&amp;gt;&amp;gt; Ya, a good suggestion. It would be straight forward to do it while parsing (e.g. when there are more then two inputs). Though its not straight forward to do at logical to physical plan and physical to MRJobs translation time. &lt;/p&gt;

&lt;p&gt;5.&lt;br/&gt;
Style notes for visitMergeJoin:&lt;/p&gt;

&lt;p&gt;It&apos;s a 200-line method. Any way you can break it up into smaller components? As is, it&apos;s hard to follow.&lt;br/&gt;
&amp;gt;&amp;gt; I can break it up, but that will bloat the MRCompiler class size. Better idea is to have MRCompilerHelper or some such class where all the low level helper function lives, so that MRCompiler itself is small and thus easier to read. &lt;/p&gt;

&lt;p&gt;The if statements should be broken up into multiple lines to agree with the style guides.&lt;/p&gt;

&lt;p&gt;Variable naming: you&apos;ve got topPrj, prj, pkg, lr, ce, nig.. one at a time they are fine, but together in a 200-line method they are undreadable. Please consider more descriptive names.&lt;br/&gt;
&amp;gt;&amp;gt; Will use more descriptive names in next patch.&lt;/p&gt;

&lt;p&gt;6.&lt;br/&gt;
Kind of a global comment, since it applies to more than just MergeJoin:&lt;/p&gt;

&lt;p&gt;It seems to me like we need a Builder for operators to clean up some of the new, set, set, set stuff.&lt;/p&gt;

&lt;p&gt;Having the setters return this and a Plan&apos;s add() method return the plan, would let us replace this:&lt;/p&gt;

&lt;p&gt;POProject topPrj = new POProject(new OperatorKey(scope,nig.getNextNodeId(scope)));&lt;br/&gt;
topPrj.setColumn(1);&lt;br/&gt;
topPrj.setResultType(DataType.TUPLE);&lt;br/&gt;
topPrj.setOverloaded(true);&lt;br/&gt;
rightMROpr.reducePlan.add(topPrj);&lt;br/&gt;
rightMROpr.reducePlan.connect(pkg, topPrj);&lt;/p&gt;

&lt;p&gt;with this:&lt;/p&gt;

&lt;p&gt;POProject topPrj = new POProject(new OperatorKey(scope,nig.getNextNodeId(scope)))&lt;br/&gt;
.setColumn(1).setResultType(DataType.TUPLE)&lt;br/&gt;
.setOverloaded(true);&lt;/p&gt;

&lt;p&gt;rightMROpr.reducePlan.add(topPrj).connect(pkg, topPrj)&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;I agree. At many places there are too many parameters to set. Setters should be smart and should return the object instead of being void and then this idea of chaining will help to cut down the number of lines. &lt;/p&gt;

&lt;p&gt;7.&lt;br/&gt;
Is the change to List&amp;lt;List&amp;lt;Byte&amp;gt;&amp;gt; keyTypes in POFRJoin related to MergeJoin or just rolled in?&lt;br/&gt;
POFRJoin can do without this change, but to avoid code duplication, I update the POFRJoin to use List&amp;lt;List&amp;lt;Byte&amp;gt;&amp;gt; keyTypes.&lt;/p&gt;

&lt;p&gt;8. MergeJoin&lt;/p&gt;

&lt;p&gt;break getNext() into components.&lt;br/&gt;
&amp;gt;&amp;gt; I dont want to do that because it already has lots of class members which are getting updated at various places. Making those variables live in multiple functions will make logic even more harder to follow. Also, I am not sure if java compiler can always inline the private methods.&lt;/p&gt;

&lt;p&gt;I don&apos;t see you supporting Left outer joins. Plans for that? At least document the planned approach.&lt;br/&gt;
&amp;gt;&amp;gt; Ya, outer joins are currently not supported. Its documented in specification. Will include comment in code also.&lt;/p&gt;

&lt;p&gt;Error codes being declared deep inside classes, and documented on the wiki, is a poor practice, imo. They should be pulled out into PigErrors (as lightweight final objects that have an error code, a name, and a description..) I thought Santhosh made progress on this already, no?&lt;br/&gt;
&amp;gt;&amp;gt; Not sure if I understand you completely. I am using ExecException, FrontEndException etc. Arent these are lightweight final objects you are referring to ?&lt;/p&gt;

&lt;p&gt;Could you explain the problem with splits and streams? Why can&apos;t this work for them?&lt;br/&gt;
&amp;gt;&amp;gt; Streaming after the join will be supported. There was a bug which I fixed and will be a part of next patch. Streaming before Join will not be supported because in endOfAllInput case, streaming may potentially produce multiple tuples when runPipeline() is run last time. Current implementation of POMergeJoin makes an assumption that when endofAllInput flag is set, all the input tuples are exhausted and pipeline is running with EOP status. To fix that, logic within POMergeJoin needs to be updated. &lt;br/&gt;
On the side note, I found that when there is a streaming in a pipeline (with or without merge join) counters reported are always wrong. Reading the code in ExecutableManager, I can see why that&apos;s the case, but it is certainly confusing for end-user. &lt;/p&gt;

&lt;p&gt;9. Sampler/Indexer:&lt;br/&gt;
9a&lt;br/&gt;
Looks like you create the same number of map tasks for this as you do for a join; all a sampling map task does is read one record and emit a single tuple. That seems wasteful; there is a lot of overhead in setting up these tiny jobs which might get stuck behind other jobs running on the cluster, etc. If the underlying file has syncpoints, a smaller number of MR tasks can be created. If we know the ratio of sample tasks to &quot;full&quot; tasks, we can figure out how many records we should emit per job ( ceil(full_tasks/sample_tasks) ). We can approximately achieve this through seeking trough (end-offset)/num_to_emit and doing a sync() after that seek. It&apos;s approximate, but close enough for an index.&lt;br/&gt;
&amp;gt;&amp;gt; Indexing task themselves don&apos;t take much time and finish in less then 10 seconds, while actual join may run for many hours. So, there is hardly any overhead because of that. But I agree, there is a possibility of these map tasks getting stuck in overloaded cluster. Your suggestion seems to be a good one. Will need further investigation. Current indexing technique is naive and definitely could be improved upon later. &lt;br/&gt;
9b&lt;br/&gt;
Consider renaming to something like SortedFileIndexer, since it&apos;s coneivable that this component can be reused in a context other than a Merge Join.&lt;br/&gt;
&amp;gt;&amp;gt; Naming it as MergeJoinIndexer does tie it with merge-join but also makes it explicit that who uses it and why. I think we should avoid giving generic names until there is a need.  &lt;br/&gt;
10.&lt;br/&gt;
Would it make sense to expose this to the users via a &apos;CREATE INDEX&apos; (or similar) command?&lt;br/&gt;
That way the index could be persisted, and the user could tell you to use an existing index instead of rescanning the data.&lt;br/&gt;
&amp;gt;&amp;gt; If we allow that then we also need to deal with managing and persisting the index. Once Owl is integrated, we could make use of that to do all this for Pig. Till then, we can continue creating index every time and as I said overhead of index creation is negligible as compared to run times of actual joins.&lt;/p&gt;

&lt;p&gt;11.&lt;br/&gt;
I am not sure about the approach of pushing sampling above filters. Have you guys benchmarked this? Seems like you&apos;d wind up reading the whole file in the sample job if the filter is selective enough (and high filter selectivity would also make materialize-&amp;gt;sample go much faster).&lt;br/&gt;
&amp;gt;&amp;gt; I guess you mean reading whole file in join job. That is an attractive idea and we also thought about it. In the end, we decided not to do that way because in that case your index is on different data then on the one you are reading in join job. Remember, we yank the plan on right side and run it within POMergeJoin after reading data from HDFS. And in that case, its not easy to guarantee the consistency of index with data.&lt;/p&gt;

&lt;p&gt;Testing:&lt;br/&gt;
12a&lt;br/&gt;
You should test for refusal to do 3-way join and other error condition (or a warning and successful failover to regular join - my preference)&lt;br/&gt;
&amp;gt;&amp;gt; Will include this test.&lt;/p&gt;

&lt;p&gt;12b&lt;br/&gt;
You should do a proper unit test for the MergeJoinIndexer (or whatever we are calling it).&lt;br/&gt;
&amp;gt;&amp;gt; Can do that, but this test will require firing of multiple map tasks which will further prolong the time taken to complete the unit test. TestMergeJoin already has 10 tests which take about 10 minutes to finish. Adding more time consuming tests will further increase build time. If that is okay, I can add this one more test.&lt;/p&gt;</comment>
                            <comment id="12742231" author="ashutoshc" created="Wed, 12 Aug 2009 07:06:44 +0100"  >&lt;p&gt;Hi Pradeep,&lt;/p&gt;

&lt;p&gt;Thanks for the review. Please find my comments inline.&lt;/p&gt;

&lt;p&gt;1) In LogicalPlanTester.java, why is the following change required?&lt;br/&gt;
Typically when PigContext is constructed in Map-reduce mode, the properties should correspond to the cluster configuration. So the above initialization seems odd because the Properties object is an empty object in the constructor call above.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; This is required because in local mode merge join gets rewritten as a regular join. So, if we had exec type as local, the plan which I get in MRCompiler corresponds to regular join plan against which we cant test merge join plan. Properties object has no bearing here, because LogicalPlanTester is used only for testing logical plans. Further I think all our tests should have exec type as MapReduce because we want to test the correctness in MapReduce mode.&lt;/p&gt;

&lt;p&gt;2) In PigMapBase.java:&lt;br/&gt;
public static final String END_OF_INP_IN_MAP = &quot;pig.stream.in.map&quot;;&lt;br/&gt;
can change to&lt;br/&gt;
public static final String END_OF_INP_IN_MAP = &quot;pig.blocking.operator.in.map&quot;; and this should be put as a public static member of JobControlCompiler.&lt;br/&gt;
In JobControlCompiler.java,&lt;br/&gt;
jobConf.set(&quot;pig.stream.in.map&quot;, &quot;true&quot;); should change to use the above public static String.&lt;br/&gt;
&amp;gt;&amp;gt; Will update this in new patch.&lt;/p&gt;

&lt;p&gt;3) Remove the following comment in QueryParser.jjt (line 302):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Join parser. Currently can only handle skewed joins.&lt;br/&gt;
&amp;gt;&amp;gt; Will be removed in next patch.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;4) In QueryParser.jjt the joinPlans passed to LOJoin constructor is not a LinkedMultiMap&lt;br/&gt;
but in LogToPhyTranslationVistior the join plans are put in a LinkedMultiMap. If order is&lt;br/&gt;
important, shouldn&apos;t QueryParser.jjt also change?&lt;br/&gt;
&amp;gt;&amp;gt; Good catch. Order is indeed important. Will fix this in next patch.&lt;/p&gt;

&lt;p&gt;5) Some comments in LogToPhyTranslationVisitor about the different lists and maps would help&lt;br/&gt;
&amp;gt;&amp;gt; those lists and maps were there earlier also, I didnt introduce anything new. I just moved them around &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; But I agree that section needs to be documented better. Also took me a while to get my head around it. Will include comment about purpose of each in next patch.&lt;/p&gt;

&lt;p&gt;6) In validateMergeJoin() - the code only considers direct successors and predecessors of LOJoin. It should check the entire plan and ensure that predecessors of LOJoin all the way to the LOLoad are only LOForEach and LOFilter. Strictly we should not allow LOForeach since it could change sort order or position of join keys and hence invalidate the index - but we need it&lt;br/&gt;
so that the Foreach introduced by the TypeCastInserter when there is a schema for either of the inputs remains. You should note in the documentation that only Order and join key position preserving Foreachs and Filters are allowed as predecessors to merge join and check the same in validateMergeJoin() - it is better to use a whitelist of allowed operators than a blacklist&lt;br/&gt;
of disallowed once (since then the blacklist would need to be updated anytime a new operator comes along. The exception source here is not really a bug but a user input error since merge join really doesnot support other ops.&lt;/p&gt;

&lt;p&gt;Again for the successor, all successors from mergejoin down to map leaf should be checked to ensure stream is absent (really there should be no restriction on stream being present after the join - if there is an issue currently with this, it is fine to not allow stream but eventually it would be good to not have any restriction on what follows the merge join). You can just use a visitor to check presence of stream in the plan - this should be done after complete LogToPhyTranslation is done - in visit() so that the whole plan can be looked at.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; Agreed. I fixed the bug for Streaming. Now there is no restriction for what follows Merge Join. For predecessors, I included new function which walks all the way up to make sure operators preceding merge join are the only the ones among the whitelist of LOLoad or LOForEach or LOFilter.&lt;/p&gt;

&lt;p&gt;7) Is MRStreamHandler.java now replaced by /org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/plans/EndOfAllInputSetter.java ?&lt;br/&gt;
&amp;gt;&amp;gt; Yes.&lt;/p&gt;

&lt;p&gt;8) Some of MRCompilerExceptions do not follow the Error handling spec - errcode, errMsg, Src&lt;br/&gt;
&amp;gt;&amp;gt; Will update them.&lt;/p&gt;

&lt;p&gt;9) Should assert() statements in MRCompiler be replaced with Exceptions since assertions are disabled by default in Java.&lt;br/&gt;
&amp;gt;&amp;gt; Will update them.&lt;/p&gt;

&lt;p&gt;10) In MRCompiler.java I wonder if you should change&lt;br/&gt;
rightMapPlan.disconnect(rightLoader, loadSucc);&lt;br/&gt;
                   rightMapPlan.remove(loadSucc);&lt;br/&gt;
to&lt;br/&gt;
rightMapPlan.trimBelow(rightLoader);&lt;br/&gt;
We really want to remove all operators in rightMapPlan other than the loader.&lt;br/&gt;
&amp;gt;&amp;gt; Didn&apos;t know about this function. This indeed is the one which is needed here.&lt;/p&gt;

&lt;p&gt;11) We should note in documentation that merge join only works for data sorted in ascending order. (the MRCompiler code assumes this - we should have sort check if possible - see performance comment below)&lt;br/&gt;
&amp;gt;&amp;gt; Will include in comments.&lt;/p&gt;

&lt;p&gt;12) It would be good to add a couple of unit tests with a few operators after merge join to ensure merge join operators well with successors in the plan.&lt;br/&gt;
&amp;gt;&amp;gt; there was one already with load - load -join -join-union-filter. Will include one more which introduces MR boundary after merge -join.&lt;br/&gt;
load -load -join-group-filter.&lt;/p&gt;

&lt;p&gt;13) In POMergeJoin.java, comments about foreach should be cleaned up since foreach is no longer used. &lt;br/&gt;
&amp;gt;&amp;gt; Will update it.&lt;/p&gt;

&lt;p&gt;The following code can be factored out into a function since its repeated twice:&lt;br/&gt;
&amp;gt;&amp;gt; If you see closely, its not exact repetition thus can&apos;t be factored out.&lt;/p&gt;

&lt;p&gt;A couple of things to try and check impact on performance:&lt;br/&gt;
1) Introduce checks for sortedness of inputs to merge join&lt;br/&gt;
&amp;gt;&amp;gt; I introduced these checks and benchmarked and there was no noticeable difference in CPU times, so I am including them. Now POMergeJoin checks for data sortedness and fails if it finds data isn&apos;t sorted. &lt;/p&gt;

&lt;p&gt;2) Increase sample size from 1 per map to say 10 per map&lt;br/&gt;
&amp;gt;&amp;gt; This is a classic case of dense vs sparse index trade-offs. Dense index will be beneficial when there are lots of distinct keys but takes longer to build. On the other hand if there are lots of rows corresponding to same key this wouldn&apos;t buy us much, infact may hurt as we will spend more time in index construction time. Moreover, a better index essentially may help us to cut down on the read times of right side. In my experimentation I found read times are negligible compared to actually producing joined tuples and writing them out to DFS ( in order of tens of seconds for task lasting couple of hours). So this needs to be thought bit more carefully and benchmarked. For now I am sampling one tuple per map block.&lt;/p&gt;</comment>
                            <comment id="12742245" author="alangates" created="Wed, 12 Aug 2009 08:07:49 +0100"  >&lt;p&gt;Dmitry wrote&amp;gt; Would it make sense to expose this to the users via a &apos;CREATE INDEX&apos; (or similar) command?&lt;br/&gt;
That way the index could be persisted, and the user could tell you to use an existing index instead of rescanning the data.&lt;/p&gt;

&lt;p&gt;Ashutosh wrote&amp;gt; If we allow that then we also need to deal with managing and persisting the index. Once Owl is integrated, we could make use of that to do all this for Pig. Till then, we can continue creating index every time and as I said overhead of index creation is negligible as compared to run times of actual joins.&lt;/p&gt;

&lt;p&gt;My thinking was that at some future point, Pig would automatically cache this sample the first time it creates it, so that subsequent joins on the same data set could make use of it without the sample.  I&apos;m hoping we can use Owl for that, as Ashutosh indicated.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Dmitry wrote&amp;gt; I am not sure about the approach of pushing sampling above filters. Have you guys benchmarked this? Seems like you&apos;d wind up reading the whole file in the sample job if the filter is selective enough (and high filter selectivity would also make materialize-&amp;gt;sample go much faster).&lt;/p&gt;

&lt;p&gt;You want to build your index on the pre-filtered data because your index is telling you what block to look for the data in.  The fact that the filter may have removed that record doesn&apos;t matter.  It will either be in the block indicated in the index or not present.  Also, you want to avoid filtering and then building the index because it adds another write and read of the data (you have to filter, write the data to HDFS, then read it to build the index, then read it again to do the join).&lt;/p&gt;</comment>
                            <comment id="12742538" author="ashutoshc" created="Wed, 12 Aug 2009 20:33:54 +0100"  >&lt;p&gt;Updated patch.&lt;/p&gt;</comment>
                            <comment id="12742562" author="dvryaboy" created="Wed, 12 Aug 2009 21:33:50 +0100"  >&lt;p&gt;Alan, Ashutosh &amp;#8211; maybe I am misunderstanding where null keys come from in the Indexer. I assumed this was due to the processing that happens in the plan the indexer deserializes and attaches to its POLocalRearrange.&lt;/p&gt;

&lt;p&gt;In regards to errors, I was referring to this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt;(PlanException e){
            &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; errCode = 2034;
            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;code-quote&quot;&gt;&quot;Error compiling &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; &quot;&lt;/span&gt; + joinOp.getClass().getCanonicalName();
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MRCompilerException(msg, errCode, PigException.BUG, e);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only central place for error codes seems to be the Wiki.  A class with a bunch of static+final error codes would be a better place.&lt;/p&gt;


&lt;p&gt;Ashutosh, I completely disagree with you on changing all tests to run in MR mode.  The tests are already impossible to run on a laptop (people, myself included, actually submit patches to jira just to see if tests pass).  Running in MR mode will incur significant overhead per test. Only things that actually rely on the MR bits should be tested in MR (and use mock objects if possible.. there&apos;s been some advancement on that front in Hadoop 20, I haven&apos;t looked at it yet).&lt;/p&gt;

&lt;p&gt;Would love to see a more efficient indexing MR job (which will reduce load on the JT, keep schedules less busy, and incur less overhead in task startups by requiring fewer tasks), but perhaps not before 0.4 is out the door with existing functionality.  Just to be clear, I don&apos;t think more than 1 record per block is necessary, but more than one block per task would probably be a good thing.&lt;/p&gt;

&lt;p&gt;Any thoughts on how to choose which of two relations to index? We get locality on the non-indexed relation, but not on the indexed one, which probably throws a kink in the normal way of thinking about this.&lt;/p&gt;
</comment>
                            <comment id="12742653" author="hadoopqa" created="Thu, 13 Aug 2009 00:38:26 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12416354/merge-join.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12416354/merge-join.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 803377.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 13 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 3 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 162 release audit warnings (more than the trunk&apos;s current 161 warnings).&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/160/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/160/testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/160/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/160/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/160/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/160/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/160/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/160/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12742914" author="pkamath" created="Thu, 13 Aug 2009 19:13:30 +0100"  >&lt;p&gt;A couple of comments on new patch:&lt;br/&gt;
In MRCompiler.java, earlier there was code:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(rightMROpr == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || rightMROpr.equals(curMROp))
 &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MRCompilerException(&quot;Successor of right input not ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(curMROp.equals(rightMROpr)){
 &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; errCode = 2170;...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do you also need to check rightMROpr == null here?&lt;/p&gt;

&lt;p&gt;If index is empty it could mean one of the following two things:&lt;br/&gt;
1) Data for right input only has null for join key(s)&lt;br/&gt;
2) right input is empty&lt;br/&gt;
Are there any other reasons why the index would be empty?&lt;br/&gt;
In both these cases, join output would be empty - currently the code throws an exception&lt;br/&gt;
Should this change?&lt;br/&gt;
A unit test where right side input is empty would be a good one to add.&lt;/p&gt;



</comment>
                            <comment id="12743003" author="ashutoshc" created="Thu, 13 Aug 2009 23:28:09 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(rightMROpr == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || rightMROpr.equals(curMROp))
 &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MRCompilerException(&quot;Successor of right input not ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do you also need to check rightMROpr == null here?&lt;br/&gt;
&amp;gt;&amp;gt; I removed null check because that indicates that two preceding MROperator exists but one of them is null. This is highly unlikely and MRCompiler probably would have thrown exception while compiling those preceding physical operator. But I added the check back again in any case.&lt;/p&gt;

&lt;p&gt;If index is empty it could mean one of the following two things:&lt;br/&gt;
1) Data for right input only has null for join key(s)&lt;br/&gt;
2) right input is empty&lt;br/&gt;
Are there any other reasons why the index would be empty?&lt;br/&gt;
In both these cases, join output would be empty - currently the code throws an exception&lt;br/&gt;
Should this change?&lt;br/&gt;
A unit test where right side input is empty would be a good one to add.&lt;br/&gt;
&amp;gt;&amp;gt; Exception thrown at that point is correct because if after reading index you get null object, its a bug. But there was problem dealing with empty right file nonetheless. I fixed that and added a test case for it as well.&lt;/p&gt;

&lt;p&gt;Additionally, fixed findbugs warning.&lt;br/&gt;
Release audit warning is because of gold file addition for testing. Apache header cant be added in it. So, it can be ignored.&lt;/p&gt;</comment>
                            <comment id="12743004" author="ashutoshc" created="Thu, 13 Aug 2009 23:29:46 +0100"  >&lt;p&gt;Running through hudson. Release audit warning can be ignored.&lt;/p&gt;</comment>
                            <comment id="12743045" author="hadoopqa" created="Fri, 14 Aug 2009 02:04:22 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12416501/merge-join.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12416501/merge-join.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 803377.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 13 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 162 release audit warnings (more than the trunk&apos;s current 161 warnings).&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/162/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/162/testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/162/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/162/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/162/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/162/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/162/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-minerva.apache.org/162/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12743321" author="pkamath" created="Fri, 14 Aug 2009 18:54:53 +0100"  >&lt;p&gt;Patch committed to trunk. Thanks Ashutosh for this significant contribution!&lt;/p&gt;</comment>
                            <comment id="12743685" author="hudson" created="Sat, 15 Aug 2009 13:00:53 +0100"  >&lt;p&gt;Integrated in Pig-trunk #523 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-trunk/523/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-trunk/523/&lt;/a&gt;)&lt;br/&gt;
    : PERFORMANCE: Merge Join (ashutoshc via pradeepkth) - deleting renamed file - MRStreamHandler.java&lt;br/&gt;
: PERFORMANCE: Merge Join (ashutoshc via pradeepkth)&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12416501" name="merge-join.patch" size="124170" author="ashutoshc" created="Thu, 13 Aug 2009 23:28:09 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 30 Jul 2009 21:49:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164398</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyajkv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>95483</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>