<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:00:12 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1693/PIG-1693.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1693] support project-range expression. (was: There needs to be a way in foreach to indicate &quot;and all the rest of the fields&quot; )</title>
                <link>https://issues.apache.org/jira/browse/PIG-1693</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;A common use case we see in Pig is people have many columns in their data and they only want to operate on a few of them.  Consider for example if before storing data with ten columns, the user wants to perform a cast on one column:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
...
Z = foreach Y generate (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)firstcol, secondcol, thridcol, forthcol, fifthcol, sixthcol, seventhcol, eigthcol, ninethcol, tenthcol;
store Z into &apos;output&apos;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obviously this only gets worse as the user has more columns.  Ideally the above could be transformed to something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
...
Z = foreach Y generate (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)firstcol, &lt;span class=&quot;code-quote&quot;&gt;&quot;and all the &lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;&quot;&lt;/span&gt;;
store Z into &apos;output&apos;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12478094">PIG-1693</key>
            <summary>support project-range expression. (was: There needs to be a way in foreach to indicate &quot;and all the rest of the fields&quot; )</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thejas">Thejas M Nair</assignee>
                                    <reporter username="alangates">Alan Gates</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Oct 2010 18:55:22 +0100</created>
                <updated>Thu, 9 Feb 2012 01:39:32 +0000</updated>
                            <resolved>Mon, 28 Mar 2011 14:02:17 +0100</resolved>
                                                    <fixVersion>0.9.0</fixVersion>
                                    <component>impl</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="12923953" author="alangates" created="Fri, 22 Oct 2010 19:14:41 +0100"  >&lt;p&gt;I can see a couple of ways of approaching this.  &lt;/p&gt;

&lt;p&gt;One would be something like the colon operator in Python, meaning everything in between.  As colon is not widely used for this across programming languages, I propose &apos;...&apos; instead, since that is the natural language meaning of ellipses.  If it was used before a certain field it would mean the beginning up to that field:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
B = foreach A generate ..., $10;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; would mean $0-$9&lt;/p&gt;

&lt;p&gt;If used between two fields, it would mean everything in between:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
B = foreach A generate $7, ..., $10;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;would mean $8 and $9.&lt;/p&gt;

&lt;p&gt;If used at the end of the line, it would mean everything after the last referenced field:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
B = foreach A generate $10, ...;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;would mean $11 to the end of the record.&lt;/p&gt;

&lt;p&gt;Another approach would be to define a symbol that means &quot;all fields not referenced in this list of expressions&quot;.  If, for&lt;br/&gt;
example, we chose @ to mean this, then:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
B = foreach A generate $10, @;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;would mean $0-$9, and $11 to the end.&lt;/p&gt;

&lt;p&gt;Then does $10 keep its place as the eleventh field or become the first field?&lt;/p&gt;

&lt;p&gt;I like the &apos;...&apos; option better, as it allows more control of ordering and will be easier for users to understand.&lt;/p&gt;

&lt;p&gt;Whichever one we choose we have to answer what it means if an expression contains more than one field:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
B = foreach A generate udf($3, $5), ..., udf($8, $10);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What range does &apos;...&apos; include?  I propose it includes the highest column number on the left and the lowest on the right (thus in this example, $6 and $7). &lt;/p&gt;

&lt;p&gt;In the @ case it&apos;s clear that @ would refer to $0, $1, $2, $4, $6, $7, $9, and anything past $10.  But the ordering becomes even stickier.  Where do $4 and $9 go?&lt;/p&gt;

&lt;p&gt;In cases where Pig knows the schema, the &apos;...&apos; or &apos;@&apos; operator could be resolved at compile time.  This will be more efficient.  In cases where it does not, an new physical operator would be required to handle the @ or ellipse end case &quot;$1, ...&quot; as we cannot construct a set of projections that knows exactly which columns to pass through.&lt;/p&gt;
</comment>
                            <comment id="12923962" author="milindb" created="Fri, 22 Oct 2010 19:36:17 +0100"  >&lt;p&gt;I prefer colon. (it&apos;s one keystroke, instead of three you propose), it can represent ranges vey well, and without any ambiguity.&lt;/p&gt;

&lt;p&gt;e.g. $:4, $5:6, $7:&lt;/p&gt;

&lt;p&gt;$:n = 0..n&lt;br/&gt;
$m:n = m..n&lt;br/&gt;
$n: = n..end&lt;/p&gt;</comment>
                            <comment id="12924078" author="olgan" created="Sat, 23 Oct 2010 00:18:14 +0100"  >&lt;p&gt;I like .... as well. In the foreach ambiguous foreach example, I would suggest that we require the user to provide start and end rather than making our own rules.&lt;/p&gt;</comment>
                            <comment id="12924087" author="sms" created="Sat, 23 Oct 2010 00:43:13 +0100"  >&lt;p&gt;Why don&apos;t we add a drop columns feature? Then we could do the following for the use case stated in the ticket description.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Z = foreach Y drop a, b, c;
Z1 = foreach Z generate *; 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12924095" author="milindb" created="Sat, 23 Oct 2010 01:19:44 +0100"  >&lt;p&gt;Is there a pig philosphy stated somewhere to make pig a &quot;write-only&quot; language ?&lt;/p&gt;

&lt;p&gt;Does anyone else feel that putting ... in the statements looks like you are omitting irrrelevant stuff ?&lt;/p&gt;</comment>
                            <comment id="12924114" author="milindb" created="Sat, 23 Oct 2010 04:16:39 +0100"  >&lt;p&gt;Talked to Olga and Thejas offline. Told them my reservations about &quot;...&quot;.&lt;br/&gt;
Ranges are a well-established concepts in scripting languages.&lt;br/&gt;
For example, Perl array slicing uses &quot;..&quot;, Python uses &quot;:&quot;.&lt;br/&gt;
... is used for varargs, which means any number of arguments, and does not define a range.&lt;/p&gt;

&lt;p&gt;So, &quot;..&quot; (notice, two dots, not three) can be considered.&lt;/p&gt;

&lt;p&gt;Basically, a range is specified by a beginning and an end.&lt;br/&gt;
If beginning is omitted, then 0 is assumed.&lt;br/&gt;
If end is omitted, then max_index(range) is assumed.&lt;br/&gt;
If we use &apos;:&apos;, then omitting beginning or end does not look odd as &quot;..&quot;&lt;/p&gt;

&lt;p&gt;To give you an example, if I want to specify all fields after 3, there are two choices.&lt;/p&gt;

&lt;p&gt;$4.., or $4:&lt;/p&gt;

&lt;p&gt;If I want to specify all the fields upto field 6,&lt;/p&gt;

&lt;p&gt;$..6, ot $:6&lt;/p&gt;

&lt;p&gt;If I want to specify fields between 3 and 10,&lt;/p&gt;

&lt;p&gt;$3..10 or $3:10.&lt;/p&gt;

&lt;p&gt;Please choose between .. and :.&lt;/p&gt;</comment>
                            <comment id="12924730" author="alangates" created="Mon, 25 Oct 2010 22:29:15 +0100"  >&lt;p&gt;The point that &apos;...&apos; is used for varargs and thus may be confusing is a valid one.  Perhaps &apos;..&apos; would be a better choice since it is used in both Perl and Ruby.  I still don&apos;t like &apos;:&apos;.  &lt;/p&gt;

&lt;p&gt;Whichever one we choose, syntax and semantics (as suggested by Olga and Milind) seem good.&lt;/p&gt;</comment>
                            <comment id="12924742" author="milindb" created="Mon, 25 Oct 2010 22:51:46 +0100"  >&lt;p&gt;If we go with &quot;..&quot;, then can we mandate that both the beginning and end indexes are mandatory ? That will avoid the ambiguity in your last example.&lt;/p&gt;</comment>
                            <comment id="12924750" author="alangates" created="Mon, 25 Oct 2010 23:03:46 +0100"  >&lt;p&gt;Santhosh, I don&apos;t see how drop meets the use case.  I want to cast one column and leave all the rest the same.  I don&apos;t want to drop it.&lt;/p&gt;</comment>
                            <comment id="12924757" author="sms" created="Mon, 25 Oct 2010 23:22:16 +0100"  >&lt;p&gt;Please ignore my comment. I was thinking about the use of handling &apos;n&apos; columns in a record of size &apos;m&apos; where m &amp;gt;&amp;gt; n&lt;/p&gt;</comment>
                            <comment id="12925022" author="alangates" created="Tue, 26 Oct 2010 17:27:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;If we go with &quot;..&quot;, then can we mandate that both the beginning and end indexes are mandatory ? That will avoid the ambiguity in your last example. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As you suggested above, I think we should support 3 cases:&lt;/p&gt;

&lt;p&gt;..$x &amp;#8211; $0 through $x, inclusive&lt;br/&gt;
$x.. &amp;#8211; $x through end, inclusive&lt;br/&gt;
$x..$y &amp;#8211; $x through $y, inclusive&lt;/p&gt;

&lt;p&gt;The one change I made from your syntax is keeping the &apos;$&apos; attached to the positional variables, because this should be legal by alias too.  So if one has a schema (alpha, beta, gamma, delta, epsilon)&lt;/p&gt;

&lt;p&gt;..gamma&lt;br/&gt;
gamma..&lt;br/&gt;
beta..delta&lt;/p&gt;

&lt;p&gt;would all be legal too.&lt;/p&gt;</comment>
                            <comment id="12925476" author="milindb" created="Wed, 27 Oct 2010 18:43:53 +0100"  >&lt;p&gt;+1 to Alan&apos;s last comment.&lt;/p&gt;</comment>
                            <comment id="12928900" author="scott_carey" created="Sat, 6 Nov 2010 00:31:27 +0000"  >&lt;p&gt;If this doesn&apos;t work with named aliases, its almost useless for me.  Numbered references are not maintainable, what happens when you add a column to a complex flow?   Or if you remove one?  suddenly you are adding numbers to statements or decrementing numbers all over the place.  &lt;/p&gt;

&lt;p&gt;Y has 10 named columns, with full schemas.&lt;/p&gt;

&lt;p&gt;Use case 1, operate on subset: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Z = foreach Y generate myUDF(firstcol, secondcol, thridcol) as result, forthcol, fifthcol, sixthcol, seventhcol, eigthcol, ninethcol, tenthcol;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use case 2, remove a subset:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Z = foreach Y generate firstcol, forthcol, fifthcol, sixthcol, seventhcol, eigthcol, ninethcol, tenthcol;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why not just make the * operator have a few different forms or use a new operator?&lt;/p&gt;

&lt;p&gt;Use case 1 becomes:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Z = foreach Y generate myUDF(firstcol, secondcol, thridcol) as result, *+;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;*+ would mean &quot;all columns not referenced&quot;&lt;/p&gt;

&lt;p&gt;Use case 2 becomes:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Z = foreach Y generate  *- (secondcol, thirdcol);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and *- generates all columns other than the set right after it.&lt;/p&gt;

&lt;p&gt;I&apos;m not saying these are the best operators or syntax, but syntax that did not involve number ranges and simply &apos;works&apos; for &apos;generate all that have not been referenced&apos; and &apos;generate all excluding (set of aliases)&apos; would be awesome.  I definitely don&apos;t want to be counting aliases to discover that fieldFoo is the 23rd alias and fieldBar is the 29th.&lt;/p&gt;

&lt;p&gt;There is a lot of problems with ranges combined with names.   And you still have to keep track of the count of columns which isn&apos;t fun when there are 40.  A &quot;shared&quot; alias uses names so that scripts that consume it never has to change if the alias adds columns, or if it removes columns only scripts that used that field has to change.&lt;/p&gt;</comment>
                            <comment id="12976089" author="eyang" created="Thu, 30 Dec 2010 19:28:04 +0000"  >&lt;p&gt;*+ and *- could have potential readability problems.  It is easy to confuse user with mathematical operation at first glance.  I think using &quot;..&quot; would be better choice.&lt;/p&gt;

&lt;p&gt;It should be possible to write as:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Z = foreach Y generate myUDF(firstcol, secondcol, thirdcol) as result, forthcol .. tenthcol;
Z = foreach Y generate firstcol, forthcol .. tenthcol;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another approach, It could be written as UDF style.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Z = foreach Y generate myUDF(firstcol, secondcol, thirdcol) as result, mirror(forthcol, tenthcol);
Z = foreach Y generate firstcol, mirror(forthcol, thenthcol);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13002384" author="thejas" created="Fri, 4 Mar 2011 01:17:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;If this doesn&apos;t work with named aliases, its almost useless for me. Numbered references are not maintainable,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Alan&apos;s proposal in his comment dated &apos;26/Oct/10 16:27&apos; works with named aliases as well.&lt;br/&gt;
I am planning to go work on that proposal. &lt;/p&gt;

&lt;p&gt;The use of &quot;*&quot; is supported in cogroup, order-by and join statements as well, so I am planning to keep it consistent and support this syntax in those statements as well. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;*+ would mean &quot;all columns not referenced&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In this initial implementation I am planning to support only &apos;all columns in range&apos;. If there is enough interest for &apos;all columns not referenced&apos; feature that can be added later.&lt;/p&gt;</comment>
                            <comment id="13011326" author="thejas" created="Fri, 25 Mar 2011 18:18:49 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1693&quot; title=&quot;support project-range expression. (was: There needs to be a way in foreach to indicate &amp;quot;and all the rest of the fields&amp;quot; )&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1693&quot;&gt;&lt;del&gt;PIG-1693&lt;/del&gt;&lt;/a&gt;.1.patch&lt;br/&gt;
Highlights -&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ProjectExpression in logical plan now supports project-range&lt;/li&gt;
	&lt;li&gt;ProjectStarExpander is called from LogicalPlanBuilder while building foreach,group,join or sort expression plans, to expand the project-range expression.&lt;/li&gt;
	&lt;li&gt;ProjectStarExpander expands all project-range expressions, except project-to-end (eg. $5 ..) when input schema is null. This is the only case when project-range expression is seen by logical optimizers or the physical plan.&lt;/li&gt;
	&lt;li&gt;Some of the logical optimizer rules have changed to consider project-to-end use cases.&lt;/li&gt;
	&lt;li&gt;POProject supports project-to-end expression, and project-star is a special case of project-to-end.&lt;/li&gt;
	&lt;li&gt;MRCompiler and some MR optimizer rules have changed to handle project-to-end case of POProject&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13011378" author="xuefuz" created="Fri, 25 Mar 2011 19:29:22 +0000"  >&lt;p&gt;I have reviewed the parser related changes:&lt;/p&gt;

&lt;p&gt;1. in LogicalPlanGenerator.g&lt;br/&gt;
        $expr = builder.buildRangeProjectExpr(&lt;br/&gt;
                    loc, plan, $GScope::currentOp,&lt;br/&gt;
                    $statement::inputIndex, &lt;br/&gt;
                    startExpr == null ? null : startExpr.expr, &lt;br/&gt;
                    endExpr == null ? null : endExpr.expr&lt;br/&gt;
                );&lt;/p&gt;

&lt;p&gt;  instead of  startExpr == null ? null : startExpr.expr, just use $startExpr.expr.&lt;/p&gt;

&lt;p&gt;2. LogicalPlanBuilder.java&lt;br/&gt;
        try &lt;/p&gt;
{
            plan.removeAndReconnect(startExpr);
            plan.removeAndReconnect(endExpr);
        }
&lt;p&gt; catch (FrontendException e) &lt;/p&gt;
{
            throw new ParserValidationException(intStream, loc, e);
        }
&lt;p&gt;  It is probably better to check if startExpr and endExpr are null.&lt;/p&gt;

&lt;p&gt;3. An observation. ProjectExpression class seems getting a little overloaded. We might need to consider subclass it to take care of STAR, RANGE, etc, though it doesn&apos;t have to happen now.&lt;/p&gt;
</comment>
                            <comment id="13011501" author="daijy" created="Fri, 25 Mar 2011 23:32:37 +0000"  >&lt;p&gt;+1 for the other part (non parser part) of the patch.&lt;/p&gt;</comment>
                            <comment id="13011516" author="daijy" created="Sat, 26 Mar 2011 00:30:24 +0000"  >&lt;p&gt;One minor comment, it is better to change ProjectExpression.toString to print in format &lt;span class=&quot;error&quot;&gt;&amp;#91;x..y&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;..y&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;x..&amp;#93;&lt;/span&gt; for range, which consistent with the grammar.&lt;/p&gt;</comment>
                            <comment id="13012016" author="thejas" created="Mon, 28 Mar 2011 13:04:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;3. An observation. ProjectExpression class seems getting a little overloaded. We might need to consider subclass it to take care of STAR, RANGE, etc, though it doesn&apos;t have to happen now.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will re-examine the design when I work on &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1938&quot; title=&quot;support project-range as udf argument&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1938&quot;&gt;&lt;del&gt;PIG-1938&lt;/del&gt;&lt;/a&gt;, which adds support for project-range as udf argument.&lt;/p&gt;</comment>
                            <comment id="13012019" author="thejas" created="Mon, 28 Mar 2011 13:07:44 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1693&quot; title=&quot;support project-range expression. (was: There needs to be a way in foreach to indicate &amp;quot;and all the rest of the fields&amp;quot; )&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1693&quot;&gt;&lt;del&gt;PIG-1693&lt;/del&gt;&lt;/a&gt;.2.patch - addressing review comments.&lt;br/&gt;
Unit tests pass.&lt;br/&gt;
Test-patch results - &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; -1 overall.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 @author.  The patch does not contain any @author tags.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 tests included.  The patch appears to include 15 new or modified tests.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     -1 javac.  The applied patch generated 958 javac compiler warnings (more than the trunk&apos;s current 941 warnings).&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;The additional javac warnings are from code generated by antlr.&lt;/p&gt;</comment>
                            <comment id="13012036" author="thejas" created="Mon, 28 Mar 2011 14:02:17 +0100"  >&lt;p&gt;Patch committed to trunk.&lt;/p&gt;</comment>
                            <comment id="13015546" author="mridulm@yahoo-inc.com" created="Mon, 4 Apr 2011 19:57:25 +0100"  >&lt;p&gt;This is a great feature addition.&lt;br/&gt;
Hopefully, the mess created by forcefully projecting only the fields referenced in the schema/schema(when there is no schema specified) can be allevated without needing dummy schema with 10+ fields at times (atleast, it will make it easier I hope) !&lt;/p&gt;


&lt;p&gt;Just curious about one aspect.&lt;br/&gt;
If you do something like :&lt;/p&gt;

&lt;p&gt;A = LOAD &apos;&amp;lt;path&amp;gt;&apos; USING MyLoader();&lt;br/&gt;
B = FOREACH A $0, $3..;&lt;br/&gt;
STORE B USING MyStore();&lt;/p&gt;

&lt;p&gt;Do we still need a schema to &apos;con&apos; pig into projecting all the fields ? This is particularly relevant when the number of fields is high (or might be &apos;fuzzy&apos; at times.)&lt;br/&gt;
An earlier version of pig (still ?), introduced an implicit project which forced projection of only the referenced fields (in case the schema not specified) or strictly adhere to specified schema - dropping rest of the fields from tuple.&lt;/p&gt;

&lt;p&gt;Atleast with this change, I hope, we can do something like this to alleviate the issue :&lt;/p&gt;

&lt;p&gt;A = LOAD &apos;&amp;lt;path&amp;gt;&apos; USING MyLoader();&lt;br/&gt;
B = FOREACH A $0, $3..$64;&lt;br/&gt;
STORE B USING MyStore();&lt;/p&gt;


&lt;p&gt;Thanks for clarifying.&lt;/p&gt;</comment>
                            <comment id="13015653" author="daijy" created="Mon, 4 Apr 2011 23:07:31 +0100"  >&lt;p&gt;Yes, range projection works without schema as well.&lt;/p&gt;</comment>
                            <comment id="13016145" author="mridulm@yahoo-inc.com" created="Tue, 5 Apr 2011 23:00:10 +0100"  >&lt;p&gt;I am not sure what the comment means - do you mean (in the example above) :&lt;br/&gt;
a) $3.. works for an unspecified number of columns when there is no load schema ?&lt;br/&gt;
b) or, $3..$MAX is required ? (so we should be schema aware).&lt;/p&gt;


&lt;p&gt;Or do you simply mean &apos;..&apos; works when there is no loader schema (which I assumed it would anyway) without commenting on the actual usecase I refer to above ?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Mridul&lt;/p&gt;</comment>
                            <comment id="13016158" author="thejas" created="Tue, 5 Apr 2011 23:22:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;a) $3.. works for an unspecified number of columns when there is no load schema ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, &quot;$3 ..&quot; works for  unspecified number of columns. &lt;br/&gt;
This is similar to the way project-star (&quot;*&quot;) works without input schema. Since pig does not know how many columns would be there, the expansion happens at runtime. In all other cases, the expansion of the project-range expression happens is done before query plan is generated.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;b) or, $3..$MAX is required ? (so we should be schema aware).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No, this is not required.&lt;/p&gt;</comment>
                            <comment id="13016159" author="mridulm@yahoo-inc.com" created="Tue, 5 Apr 2011 23:25:59 +0100"  >&lt;p&gt;Thanks for clarifying Thejas !&lt;br/&gt;
Not sure how this will interact with JOIN and others (which was one the rationale for forced project I guess ?), but this perfectly fits our usecases - along with a few in coke I guess.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mridul&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13016161" author="thejas" created="Tue, 5 Apr 2011 23:37:31 +0100"  >&lt;blockquote&gt;&lt;p&gt;Not sure how this will interact with JOIN and others (which was one the rationale for forced project I guess ?),&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&quot;$3..&quot; (ie project-range-to-end) without schema, will work with join, but not with group or co-group. (This limitation is documented in release notes of this jira).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12541526">PIG-2511</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12474642" name="PIG-1693.1.patch" size="182738" author="thejas" created="Fri, 25 Mar 2011 18:18:49 +0000"/>
                            <attachment id="12474769" name="PIG-1693.2.patch" size="182150" author="thejas" created="Mon, 28 Mar 2011 13:07:44 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 22 Oct 2010 18:36:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66156</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyat4v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97031</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>&lt;br/&gt;
Project-range ( &amp;#39;..&amp;#39; ) can be used to project a range of columns from input. &lt;br/&gt;
For example, the expressions - &lt;br/&gt;
.. $x  : projects columns $0 through $x, inclusive&lt;br/&gt;
&#8232;$x ..  : projects columns through end, inclusive&lt;br/&gt;
&#8232;$x .. $y : projects columns through $y, inclusive&lt;br/&gt;
If the input relation has a schema, you can also use column aliases instead of referring to columns using position. You can also combine the use of alias and column positions in a project-range expression (ie, &amp;quot;col1 .. $5&amp;quot;  is valid).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
This expression can be used in all cases where the use of &amp;#39;*&amp;#39; (project-star) is allowed, except as a udf argument. Support for that use case will be added in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1938&quot; title=&quot;support project-range as udf argument&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1938&quot;&gt;&lt;strike&gt;PIG-1938&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
It can be used in following statements -&lt;br/&gt;
- foreach &lt;br/&gt;
- join&lt;br/&gt;
- order (also when it is within a nested foreach block)&lt;br/&gt;
- group/cogroup&lt;br/&gt;
&lt;br/&gt;
Examples - &lt;br/&gt;
{code}&lt;br/&gt;
grunt&amp;gt; F = foreach IN generate (int)col0, col1 .. col3;      &lt;br/&gt;
grunt&amp;gt; describe F;                                           &lt;br/&gt;
F: {col0: int,col1: bytearray,col2: bytearray,col3: bytearray}&lt;br/&gt;
{code}&lt;br/&gt;
{code}&lt;br/&gt;
grunt&amp;gt; SORT = order IN by col2 .. col3, col0, col4 ..;&lt;br/&gt;
{code}&lt;br/&gt;
{code}&lt;br/&gt;
J = join IN1 by  $0 .. $3,  IN2 by $0 .. $3;&lt;br/&gt;
{code}&lt;br/&gt;
{code}&lt;br/&gt;
g = group l1 by  b .. c;&lt;br/&gt;
{code}&lt;br/&gt;
&lt;br/&gt;
Limitations:&lt;br/&gt;
There are some restrictions on the use of project-to-end form of project range (eg &amp;quot;x .. &amp;quot;) when input schema is null (unknown). These are also cases where the use of project-star (&amp;#39;*&amp;#39;) is restricted.&lt;br/&gt;
&lt;br/&gt;
1.  In Cogroup/Group statements, project-to-end form of project-range is only allowed if the input has a schema&lt;br/&gt;
&lt;br/&gt;
2. In order-by statement, project-to-end form of project-range is supported only as last sort column, if input schema is null.&lt;br/&gt;
example-&lt;br/&gt;
{code}&lt;br/&gt;
grunt&amp;gt; describe IN;&lt;br/&gt;
Schema for IN unknown.&lt;br/&gt;
&lt;br/&gt;
-- Following statement is supported&lt;br/&gt;
SORT = order IN by $2 .. $3, $6 ..;&lt;br/&gt;
&lt;br/&gt;
-- Following statement is NOT supported&lt;br/&gt;
SORT = order IN by $2 .. $3, $6 ..;&lt;br/&gt;
{code}&lt;br/&gt;
&lt;br/&gt;
</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>