<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:08:00 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-653/PIG-653.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-653] Make fieldsToRead work in loader</title>
                <link>https://issues.apache.org/jira/browse/PIG-653</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Currently pig does not call the fieldsToRead function in LoadFunc, thus it does not provide information to load functions on what fields are needed.  We need to implement a visitor that determines (where possible) which fields in a file will be used and relays that information to the load function.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12413677">PIG-653</key>
            <summary>Make fieldsToRead work in loader</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="pkamath">Pradeep Kamath</assignee>
                                    <reporter username="alangates">Alan Gates</reporter>
                        <labels>
                    </labels>
                <created>Sat, 31 Jan 2009 01:32:42 +0000</created>
                <updated>Fri, 4 Dec 2009 18:10:39 +0000</updated>
                            <resolved>Fri, 4 Dec 2009 18:03:48 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12671355" author="pkamath" created="Fri, 6 Feb 2009 22:11:01 +0000"  >&lt;p&gt;Interface for passing required fields information to the loader&lt;br/&gt;
Proposal&lt;br/&gt;
Two new Classes will be introduced in the API call to the loader for passing information about required fields.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class RequiredField {
        &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; alias; &lt;span class=&quot;code-comment&quot;&gt;// will hold name of the field (would be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; not supplied)
&lt;/span&gt;        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index; &lt;span class=&quot;code-comment&quot;&gt;// will hold the index (position) of the required field (would be -1 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; not supplied), index is 0 based
&lt;/span&gt;        List&amp;lt;RequiredField&amp;gt; subFields; &lt;span class=&quot;code-comment&quot;&gt;// A list of sub fields in &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; field (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; could be a list of hash keys &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; example). This would be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the entire field is required and no specific sub fields are required. In the initial implementation only one level of subfields will be populated.
&lt;/span&gt;        &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; type; &lt;span class=&quot;code-comment&quot;&gt;// Type of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; field - the value could be any current PIG DataType (as specified by the constants in DataType class. A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Type BAG_OF_MAP will be added to represent a bag of maps field).
&lt;/span&gt;
	&lt;span class=&quot;code-comment&quot;&gt;// Constructor and getters and setters follow        
&lt;/span&gt;	&lt;span class=&quot;code-comment&quot;&gt;// getters are getAlias(), getIndex(), getSubFields(), getType()
&lt;/span&gt;	&lt;span class=&quot;code-comment&quot;&gt;// setters are setAlias(), setIndex(), setSubFields(), setType()
&lt;/span&gt;    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE: Both alias and index could be set. The index has a value as perceived by Pig if all fields were sent to it from the loader.&lt;/p&gt;

&lt;p&gt;For performance it would be good if when a single key in a map is requested the loader returns a map with just that key. Likewise, when the required fields is a key in a bag of map field, the expected value from the loader would be a bag of map where the maps contain that key (preferably only that key for performance since this will reduce the data handed by the loader).&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class RequiredFieldResponse {
	&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; requiredFieldRequestHonored; &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the loader will &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; a schema containing only the List of RequiredFields in that order. &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the loader will &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; all fields in the data
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason we have a RequiredFieldResponse class encapsulating the boolean is to allow for future extensibility. For example, in the future the loader may be able to honor all top level field requests but not subfields in hashes. So it may hand back top level maps in return for sub field requests. The loader will then need to inform back to the caller which fields will be returned exactly the way they were requested and which will be sent as top level fields (even though the request was for subfields). For the first pass though it is all or none conveyed through the Boolean.&lt;/p&gt;

&lt;p&gt;The API call in LoadFunc will change from &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
void fieldsToRead(Schema schema) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
RequiredFieldResponse fieldsToRead(List&amp;lt;RequiredField&amp;gt; requiredFields, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; allFieldsRequired);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE: &lt;br/&gt;
1.	It is expected that the loader returns the required fields in exactly the same order as in the List provided in the above call.&lt;br/&gt;
3.	The boolean flag allFieldsRequired is set to true when all fields are required. The loader should first check this flag and use the List&amp;lt;RequiredField&amp;gt; ONLY if this flag is false.&lt;/p&gt;

&lt;p&gt;Use Cases&lt;br/&gt;
=========&lt;/p&gt;

&lt;p&gt;Use Cases which only use aliases&lt;br/&gt;
================================&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;1.	Required fields are columns x (int), y (long)
[
{
	alias=&amp;gt;x,
	index =&amp;gt; -1,
	subfields =&amp;gt; null,
	type =&amp;gt; DataType.INTEGER
},
{
	alias=&amp;gt;y,
	index =&amp;gt; -1,
	subfields =&amp;gt; null,
	type =&amp;gt; DataType.LONG
}
]

2.	Required fields are m1#key1 (map subcolumn), b1#key2 (subcolumn from a bag of maps),
[
{
	alias=&amp;gt;m,
	index =&amp;gt; -1,
	subfields =&amp;gt; [
{
alias =&amp;gt; key1,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
}
			       ]
	type =&amp;gt; DataType.MAP
},
{
	alias=&amp;gt;b1,
	index =&amp;gt; -1,
	subfields =&amp;gt; [
{
alias =&amp;gt; key2,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
}
			       ]
	type =&amp;gt; DataType.BAG_OF_MAP
}
]

3.	Required fields are   m2#(key3, key4)  (map subcolumns), b2#(key5, key6) (subcolumns from bag of maps)
[
{
	alias=&amp;gt;m2,
	index =&amp;gt; -1,
	subfields =&amp;gt; [
{
alias =&amp;gt; key3,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
},
{
alias =&amp;gt; key4,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
}

			       ]
	type =&amp;gt; DataType.MAP
},
{
	alias=&amp;gt;b2,
	index =&amp;gt; -1,
	subfields =&amp;gt; [
{
alias =&amp;gt; key5,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
},
{
alias =&amp;gt; key6,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
}

			       ]
	type =&amp;gt; DataType.BAG_OF_MAP
},
]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use Cases which use positional indices&lt;br/&gt;
======================================&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;1.	Required fields are columns $0 (int), $1 (long)
[
{
	alias=&amp;gt;null,
	index =&amp;gt; 0,
	subfields =&amp;gt; null,
	type =&amp;gt; DataType.INTEGER
},
{
	alias=&amp;gt;null,
	index =&amp;gt; 1,
	subfields =&amp;gt; null,
	type =&amp;gt; DataType.LONG
}
]

2.	Required fields are $0#key1 (map subcolumn), $2#key2 (subcolumn from a bag of maps),
[
{
	alias=&amp;gt;null,
	index =&amp;gt; 0,
	subfields =&amp;gt; [
{
alias =&amp;gt; key1,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
}
			       ]
	type =&amp;gt; DataType.MAP
},
{
	alias=&amp;gt;null,
	index =&amp;gt; 2,
	subfields =&amp;gt; [
{
alias =&amp;gt; key2,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
}
			       ]
	type =&amp;gt; DataType.BAG_OF_MAP
}
]

3.	Required fields are   $5#(key3, key4)  (map subcolumns), $3#(key5, key6) (subcolumns from bag of maps)
[
{
	alias=&amp;gt;null,
	index =&amp;gt; 5,
	subfields =&amp;gt; [
{
alias =&amp;gt; key3,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
},
{
alias =&amp;gt; key4,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
}

			       ]
	type =&amp;gt; DataType.MAP
},
{
	alias=&amp;gt;null,
	index =&amp;gt; 3,
	subfields =&amp;gt; [
{
alias =&amp;gt; key5,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
},
{
alias =&amp;gt; key6,
index =&amp;gt; -1,
subfields =&amp;gt; null, // only one sublevel in the initial implementation, so this has to be null!
Type =&amp;gt; DataType.BYTEARRAY
}

			       ]
	type =&amp;gt; DataType.BAG_OF_MAP
},
]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12671371" author="hong.tang" created="Fri, 6 Feb 2009 23:42:45 +0000"  >&lt;p&gt;I don&apos;t like the idea of adding BAG_OF_MAP type. It really is a composite of two existing types BAG of MAP.&lt;/p&gt;

&lt;p&gt;Here is another idea I came up, and briefly discussed with Pradeep.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Filter {
  /**
   * Return the actual type of the filter. It can then be downcast to the
   * actual Filter.
   * 
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; one of the following constants defined in DataType: TUPLE, BAG, and
   *         MAP
   */
  &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; getType();
}

class TupleFilter &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Filter {
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class TupleFilterEntry {
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; alias;
    Filter filter;
    TupleFilterEntry(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; a, Filter f) {
      alias = a;
      filter = f;
    }
  }
  
  SortedMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, TupleFilterEntry&amp;gt; entries;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; getType() { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; DataType.TUPLE; }
  
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TupleFilter() {
    entries = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TreeMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, TupleFilterEntry&amp;gt;();
  }

  /**
   * Convenience constructor &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; simple positioned based filtering.
   * @param indices
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TupleFilter(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;...indices) {
    entries = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TreeMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, TupleFilterEntry&amp;gt;();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i : indices) {
      entries.put(i, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TupleFilterEntry(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;));
    }
  }
  
  /**
   * Adding an entry into the filter. (Building the filter.)
   * 
   * @param index
   *          The field index we are interested
   * @param alias
   *          The alias name of the field, optional
   * @param filter
   *          Further filtering on the filed, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; means no more nested filter.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void add(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; alias, Filter filter) {
    entries.put(index, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TupleFilterEntry(alias, filter));
  }
  
  /**
   * Get the interested fields.
   * 
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; The indices to the interested fields, sorted in ascending order.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] getFields() {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] ret = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[entries.size()];
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; it = entries.keySet().iterator(); it.hasNext(); ++i) {
      ret[i] = it.next();
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ret;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; getAlias(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index) {
    TupleFilterEntry entry = entries.get(index);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (entry == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unrecognized field index&quot;&lt;/span&gt;);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; entry.alias;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; Filter getFilter(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index) {
    TupleFilterEntry entry = entries.get(index);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (entry == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unrecognized field index&quot;&lt;/span&gt;);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; entry.filter;
  }
}

class MapFilter &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Filter {
  Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Filter&amp;gt; entries;
  
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; MapFilter() {
    entries = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TreeMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Filter&amp;gt;();
  }
  
  /**
   * Convenience constructor &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; simple key matching filtering.
   * 
   * @param keys
   *          interested keys
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; MapFilter(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;... keys) {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;();
    add(keys);
  }
  
  /**
   * Adding keys to the interested key set without further filteriing.
   * 
   * @param keys
   *          interested keys.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void add(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;... keys) {
    add(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, keys);
  }

  /**
   * Adding keys to the interested key set with further filtering
   * 
   * @param f
   *          The filter
   * @param keys
   *          the keys
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void add(Filter f, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;... keys) {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; k : keys) {
      entries.put(k, f);
    }
  }
  
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; getType() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; DataType.MAP;
  }
  
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Filter&amp;gt; getKeyFilterMapping() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; entries;
  }
}

class BagFilter &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Filter {
  Filter filter;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; BagFilter(TupleFilter filter) {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.filter = filter;
  }

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; getType() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; DataType.BAG;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Filter getTupleFilter() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; filter;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12671976" author="pkamath" created="Mon, 9 Feb 2009 19:43:25 +0000"  >&lt;p&gt;A new proposal has been attached as a revision of the proposal in comment 1.&lt;/p&gt;

&lt;p&gt;The two main changes are:&lt;br/&gt;
1. A new class RequiredFieldList  will be used to convey the list of required fields. A separate class was chosen here (rather than using the List&amp;lt;RequiredFields&amp;gt; and boolean separately) since it gives us the flexibility to extend it easily in the future.&lt;br/&gt;
2. The new type, BAG_OF_MAP is no longer needed. So if a certain field is a bag (named &quot;bg&quot;) which contains a single column which is a map and we need just the data for only one key (say k1) from it, we can represent that by having a RequiredField object of Type BAG with alias &quot;bg&quot;. This object will have one RequiredField object in its subFields list which will be of type MAP and which will have index 0 to indicate this is the first subfield in the bag. This object inturn will have one RequiredField object in its subFields list which be of type BYTEARRAY and which will have alias &quot;k1&quot;. This illustrates how subcolumns of interest can be represented by the RequiredField class.&lt;/p&gt;</comment>
                            <comment id="12672015" author="hong.tang" created="Mon, 9 Feb 2009 21:21:05 +0000"  >&lt;p&gt;Should subFields also have the type RequiredFieldList?&lt;/p&gt;</comment>
                            <comment id="12672020" author="pkamath" created="Mon, 9 Feb 2009 21:41:34 +0000"  >&lt;p&gt;Not so sure about using RequiredFieldList for subFields - this will mean we could ask for all subFields in two ways - &lt;br/&gt;
1. By just asking for the main field (this will imply we need all sub fields)&lt;br/&gt;
2. By asking for the main field with a subField which has its allFieldsRequired flag set to true.&lt;/p&gt;

&lt;p&gt;I think it would be better to keep the subFields as only THE required subfields represented as a list. RequiredFieldList is specifically being introduced to handle top level information to be given to the loader which may not be applicable at a field level. &lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12672176" author="hong.tang" created="Tue, 10 Feb 2009 06:50:33 +0000"  >&lt;p&gt;my quibble is that the interface uses null to indicate all required for nested fields, but uses a concrete class for top level fields. any justification why possible future extensions are only applicable to top-level fields but not nested fields?&lt;/p&gt;</comment>
                            <comment id="12672368" author="pkamath" created="Tue, 10 Feb 2009 19:11:00 +0000"  >&lt;p&gt;Introduced a boolean into RequiredField to indicate if all sub fields are required. The reason I feel we cannot use RequiredFieldList internally in RequiredField to represent the subfields is that REquiredFieldList is meant to be a class for communicating about the top level required fields. In the future the extensions added to it may only make sense at the top level and hence would not fit well for the sub fields.&lt;/p&gt;

&lt;p&gt;I have attached the third version of the proposal with the above changes and have explicitly listed the getters in the classes since these will be used by loaders.&lt;/p&gt;</comment>
                            <comment id="12785826" author="gauravj" created="Fri, 4 Dec 2009 09:08:51 +0000"  >
&lt;p&gt;Zebra changes for the proposed feature&lt;/p&gt;

&lt;p&gt;Please reveiw at your earliest convenience&lt;/p&gt;</comment>
                            <comment id="12785926" author="yanz" created="Fri, 4 Dec 2009 13:42:20 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12785928" author="hadoopqa" created="Fri, 4 Dec 2009 13:43:16 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12426879/PIG-653.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12426879/PIG-653.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 887049.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 97 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 395 release audit warnings (more than the trunk&apos;s current 368 warnings).&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/89/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/89/testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/89/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/89/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/89/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/89/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/89/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/89/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12785936" author="yanz" created="Fri, 4 Dec 2009 13:57:52 +0000"  >&lt;p&gt;The 27 release audit failures are from 25 pig test scripts and 2 test data files, none of them are source files and should be ignored.&lt;/p&gt;</comment>
                            <comment id="12785937" author="yanz" created="Fri, 4 Dec 2009 13:59:04 +0000"  >&lt;p&gt;A typo in my last comment. should have been 27 audit &lt;b&gt;warnings&lt;/b&gt; not &lt;b&gt;failures&lt;/b&gt;&lt;/p&gt;</comment>
                            <comment id="12786038" author="olgan" created="Fri, 4 Dec 2009 18:03:48 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-922&quot; title=&quot;Logical optimizer: push up project&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-922&quot;&gt;&lt;del&gt;PIG-922&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12786046" author="yanz" created="Fri, 4 Dec 2009 18:10:39 +0000"  >&lt;p&gt;Zebra changes commited to both trunk and the 6.0 branch.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12433089">PIG-922</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12399845" name="PIG-653-2.comment" size="8317" author="pkamath" created="Mon, 9 Feb 2009 19:43:25 +0000"/>
                            <attachment id="12399938" name="PIG-653-3-proposal.txt" size="10618" author="pkamath" created="Tue, 10 Feb 2009 19:10:59 +0000"/>
                            <attachment id="12426879" name="PIG-653.patch" size="84770" author="gauravj" created="Fri, 4 Dec 2009 09:08:51 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 6 Feb 2009 22:11:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164239</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyahbr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>95118</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>