<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:50:30 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1782/PIG-1782.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1782] Add ability to load data by column family in HBaseStorage</title>
                <link>https://issues.apache.org/jira/browse/PIG-1782</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;It would be nice to load all columns in the column family by using short hand syntax like:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;CpuMetrics = load &apos;hbase://SystemMetrics&apos; USING org.apache.pig.backend.hadoop.hbase.HBaseStorage(&apos;cpu:&apos;,&apos;-loadKey&apos;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assuming there are columns cpu: sys.0, cpu:sys.1, cpu:user.0, cpu:user.1,  in cpu column family.&lt;/p&gt;

&lt;p&gt;CpuMetrics would contain something like:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;(rowKey, cpu:sys.0, cpu:sys.1, cpu:user.0, cpu:user.1)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment>&lt;p&gt;Java 6, Mac OS X 10.6&lt;/p&gt;</environment>
        <key id="12494292">PIG-1782</key>
            <summary>Add ability to load data by column family in HBaseStorage</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="billgraham">Bill Graham</assignee>
                                    <reporter username="eyang">Eric Yang</reporter>
                        <labels>
                    </labels>
                <created>Thu, 30 Dec 2010 04:32:26 +0000</created>
                <updated>Thu, 4 Aug 2011 01:34:45 +0100</updated>
                            <resolved>Sun, 17 Apr 2011 08:01:05 +0100</resolved>
                                                    <fixVersion>0.9.0</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="12987839" author="billgraham" created="Fri, 28 Jan 2011 00:01:26 +0000"  >&lt;p&gt;Assigning this to myself, since I&apos;ve got a working patch, but the design needs to be vetted out further with this approach.&lt;/p&gt;

&lt;p&gt;One issue is that the number of columns per family per row is not constant, so with a sparse table you&apos;d have no idea what column names go with each value of the tuple returned. Another issue is that the column name is actually dynamic descriptive data often times in HBase and there can be multiple timestamped values for a cell.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Option A:&lt;br/&gt;
Instead of returning a tuple of values the load can return a tuple of tuples. Each inner tuple is a two-tuple that contains the column descriptor and the most recent value. This data structure would be returned if a &apos;cf:&apos; style column exists in the column list, but default behavior exists with explicit column names. This is the simplest approach.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Option B:&lt;br/&gt;
Build out an even more rich (and complex) data structure that also takes into account multiple values and their timestamps. A tuple of tuple of tuple of tuples to capture the entire HBase KeyValue data structure. Something like this:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
(
 ( column name, ( (value, ts), ... ) ), ...
)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Either way, the variable length tuples returned for each row containing additional variable length tuples would probably require a number of custom UDFs to do anything useful with variable name columns and multiple timestamped values. &lt;/p&gt;

&lt;p&gt;I guess I lean towards option B so we can support more use cases down the road with this refactor. Other opinions?&lt;/p&gt;</comment>
                            <comment id="12987854" author="dvryaboy" created="Fri, 28 Jan 2011 00:33:53 +0000"  >&lt;p&gt;Return a map?&lt;/p&gt;</comment>
                            <comment id="12987862" author="eyang" created="Fri, 28 Jan 2011 00:48:14 +0000"  >&lt;p&gt;There is no control of hbase timestamp in pig.  Hence, the timestamp returned is the actual insertion time when calling pig store function.  I am not sure how useful this could be.  To be more explicit, it will look like:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;( rowKey,
  (  column_name, ( (  value, ts  ), ...  )  ), ...
)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is concise but not user friendly.&lt;/p&gt;

&lt;p&gt;I am leaning toward returning a map.&lt;/p&gt;</comment>
                            <comment id="12987962" author="dvryaboy" created="Fri, 28 Jan 2011 06:47:22 +0000"  >&lt;p&gt;To Eric&apos;s point, we should add timestamp controls straight into Storage.&lt;/p&gt;

&lt;p&gt;Returning tuples of the form ( optionalRowKey,  &lt;/p&gt;
{ col1 =&amp;gt; val1, col2 =&amp;gt; val2 }
&lt;p&gt; )  makes sense to me.&lt;/p&gt;

&lt;p&gt;I don&apos;t like the tuple of tuples option because it makes it hard to pull out specific columns in that structure, which is likely what one wants to do.&lt;/p&gt;

&lt;p&gt;We should give some thought to someone loading using HbaseStorage( &apos;cf1:,  cf2:some_col&apos; , &apos;-loadKey&apos;)&lt;/p&gt;
</comment>
                            <comment id="12987981" author="billgraham" created="Fri, 28 Jan 2011 08:22:50 +0000"  >&lt;p&gt;I was also thinking about a map, but I thought we might want to preserve the ordering of the fields specified when explicit fields are requested, as well as CFs, like Dmitriy&apos;s example. We&apos;d get the CF fields in the natural ordering that Hbase stores them in too. The more I think about it though, I don&apos;t think this is that useful and I think a map approach seems the way to go. &lt;/p&gt;

&lt;p&gt;@Eric: Yes pig doesn&apos;t have any ts control upon writes currently (and that should be improved), but that shouldn&apos;t rule out the ability to read them. I can see many use cases where some non-Pig process is populating HBase, but Pig is used for queries.&lt;/p&gt;

&lt;p&gt;@Dmitriy: I prototyped that exact use case using tuples of tuples, but ran into the downsides you point out. Also each row read has a variable length of tuples, which would seem really difficult to work with. &lt;/p&gt;

&lt;p&gt;I like this approach when reading all columns in a family:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
( rowKey, { col1 =&amp;gt; ((val1, ts), ..), col2 =&amp;gt; ((val2, ts), ..) } ) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Dymitriy&apos;s use case, having the same schema returned (alwaya a map) regardless of how the column families are specified (i.e., &apos;cf1: cf2:foo&apos; vs &apos;cf1:&apos; vs &apos;cf2:foo cf2:bar&apos;) is one option. Another is to return a map for CFs and a ((val1, ts), ..) for explicit columns. I&apos;m not sure which approach would make life easier on the script writer.&lt;/p&gt;</comment>
                            <comment id="12987991" author="dvryaboy" created="Fri, 28 Jan 2011 08:39:11 +0000"  >&lt;p&gt;Bill, I think what you are suggesting is the &quot;correct&quot; way but I&apos;d prefer not to break people&apos;s existing scripts which is what would happen if we changed what we return when a schema like &apos;cf2:foo cf2:bar&apos; is specified in your proposal...&lt;/p&gt;

&lt;p&gt;There are also usability benefits to having the flat return schema you get from HBaseStorage now &amp;#8211; it looks exactly like loading from PigStorage, so no surprises. You ask for 2 columns, and get 2 values in a tuple, it&apos;s sort of what you&apos;d expect.&lt;/p&gt;

&lt;p&gt;Perhaps we take your suggestion, put that into builtins.AdvancedHBaseStorage, deprecate the current HBaseStorage, and move the current code to builtins.SimpleHBaseStorage ?&lt;/p&gt;</comment>
                            <comment id="12988158" author="eyang" created="Fri, 28 Jan 2011 17:35:20 +0000"  >&lt;p&gt;@Bill, agree.  I filed a seperated jira for supporting timestamp.&lt;br/&gt;
@Dmitriy, Would it be possible to add a parameter to switch between the return type?&lt;/p&gt;

&lt;p&gt;Suggested flags:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;-returnMap (default)&lt;/li&gt;
	&lt;li&gt;-returnTuple&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Example for Map:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;CpuMetrics = load &apos;hbase://SystemMetrics&apos; USING org.apache.pig.backend.hadoop.hbase.HBaseStorage(&apos;cpu:&apos;,&apos;-loadKey&apos;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example for Tuple:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;CpuMetrics = load &apos;hbase://SystemMetrics&apos; USING org.apache.pig.backend.hadoop.hbase.HBaseStorage(&apos;cpu:&apos;,&apos;-loadKey -returnTuple&apos;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12988167" author="dvryaboy" created="Fri, 28 Jan 2011 18:05:21 +0000"  >&lt;p&gt;That&apos;s certainly possible, I just don&apos;t think it&apos;s a good design from a usability standpoint &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12988192" author="billgraham" created="Fri, 28 Jan 2011 19:32:00 +0000"  >&lt;p&gt;I agree. Dmitriy, I like where you&apos;re going with new classes and deprecation, but maybe we could do this with just an enhanced (and backward compatible) HBaseStorage and a new AdvancedHBaseStorage.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;HBaseStorage&lt;/li&gt;
	&lt;li&gt;if you specific discrete columns, you get a tuple of values like the current behavior&lt;/li&gt;
	&lt;li&gt;if you specify one or more CFs (or possibly a CF with a wildcard column expression) you get back a tuple of maps&lt;/li&gt;
	&lt;li&gt;If you specify a mix, you get a tuple with values and maps. For example &apos;cf2:foo c1: cf2:bar&apos; would produce ( value, 
{ col =&amp;gt; value }
&lt;p&gt;, value }&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;This is backwards compatible and seems easiest to grok from a users perspective.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;AdvancedHBaseStorage&lt;/li&gt;
	&lt;li&gt;Somehow support mulitiple timestamps with a more complex data structure&lt;/li&gt;
	&lt;li&gt;One possibility is to use the data structure I suggested in my previous comment where everything is a map&lt;/li&gt;
	&lt;li&gt;Another is to return something like the proposed HBaseStorage data structure, where each &apos;value&apos; is replaced with ( (value, ts), ... )&lt;/li&gt;
	&lt;li&gt;We could hash out the specifics of AdvancedHBaseStorage in another JIRA if we decide to go this route&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12990653" author="dvryaboy" created="Fri, 4 Feb 2011 17:59:25 +0000"  >&lt;p&gt;That seems reasonable to me.&lt;/p&gt;

&lt;p&gt;The only reason I suggest deprecating the current HBaseStorage is that it&apos;s awkwardly placed in backend.hadoop.hbase which is not where anyone really expects to find it. But I guess we can do that in a different ticket.&lt;/p&gt;</comment>
                            <comment id="12991301" author="mluggy" created="Mon, 7 Feb 2011 08:22:17 +0000"  >&lt;p&gt;+1 for including version timestamps in the response. This would help both processing multiple versions and easily parsing timestamps which are &quot;free&quot; inside HBase cells.&lt;/p&gt;</comment>
                            <comment id="12991499" author="billgraham" created="Mon, 7 Feb 2011 18:05:17 +0000"  >&lt;p&gt;@Dmitriy I think the deprecation idea has it&apos;s merits. The patch I&apos;m working on is actually against HBase 0.90.0. It basically includes the &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1680&quot; title=&quot;Pig 0.8 HBaseStorage may not against HBase 0.89&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1680&quot;&gt;&lt;del&gt;PIG-1680&lt;/del&gt;&lt;/a&gt; patch. What if we deprecated the existing HBase classes and created new ones in a new location that required HBase &amp;gt;= 0.90. That way we can clean up the package structure and put off having to shim a little longer.&lt;/p&gt;</comment>
                            <comment id="12994180" author="dvryaboy" created="Mon, 14 Feb 2011 01:19:32 +0000"  >&lt;p&gt;Bill,&lt;br/&gt;
I am not sure how we can pull in both versions of Hbase (one for the current HBaseStorage we would deprecate, and one for the new HBaseStorage), and not run into compilation nightmares. Seems like we need shims either way, no?&lt;/p&gt;</comment>
                            <comment id="12994203" author="mluggy" created="Mon, 14 Feb 2011 05:34:29 +0000"  >&lt;p&gt;Can&apos;t we just pass (extended = &apos;true&apos;) for the load function?&lt;/p&gt;</comment>
                            <comment id="12994402" author="billgraham" created="Mon, 14 Feb 2011 18:14:22 +0000"  >&lt;p&gt;Dymitriy yes of course you&apos;re right, we&apos;d still need shims. Let&apos;s see what comes back from your question to the list. Maybe we can just move forward requiring &amp;gt;= 0.89.&lt;/p&gt;

&lt;p&gt;I&apos;ve got a working patch that I should be able to add next week fyi (I&apos;m on vacation this week). &lt;/p&gt;</comment>
                            <comment id="12996877" author="billgraham" created="Sat, 19 Feb 2011 21:32:50 +0000"  >&lt;p&gt;Attached are two files, a patch and a script to apply it. A few things to note about this patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;It relies on HBase 0.89.0 or greater and it effectively replaces &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1680&quot; title=&quot;Pig 0.8 HBaseStorage may not against HBase 0.89&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1680&quot;&gt;&lt;del&gt;PIG-1680&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;I&apos;ve updated HBaseStorage for now. If we want to deprecate that class and create a new one instead, I can do that.&lt;/li&gt;
	&lt;li&gt;I added support for a &lt;tt&gt;columnPrefix&lt;/tt&gt; option to filter down columns returned. Proper column prefix functionality though requires &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3550&quot; title=&quot;FilterList reports false positives&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3550&quot;&gt;&lt;del&gt;HBASE-3550&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;I had to do some hackery in &lt;tt&gt;setStoreLocation&lt;/tt&gt; and &lt;tt&gt;getOutputFormat&lt;/tt&gt; with the conf objects to keep NPEs from being thrown from HBase (see comments in code). A review of what I&apos;m doing with the conf objects in that part of code would be good.&lt;/li&gt;
	&lt;li&gt;There are still no unit tests for this code, since it&apos;s a tricky thing to test. I have a few simple hbase and pig scripts that I&apos;ve been using that I could provide.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12997123" author="dvryaboy" created="Sun, 20 Feb 2011 10:52:25 +0000"  >&lt;p&gt;Bill and I diverged a bit since I posted a different patch to 1680, will post a merged patch soonish.&lt;/p&gt;</comment>
                            <comment id="12997124" author="mluggy" created="Sun, 20 Feb 2011 10:53:54 +0000"  >&lt;p&gt;Thanks guys, will any of these allow looking at multiple versions/retrieving timetamps of HBase cells?&lt;/p&gt;</comment>
                            <comment id="12997261" author="dvryaboy" created="Mon, 21 Feb 2011 02:41:17 +0000"  >&lt;p&gt;Michael, that will be addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1832&quot; title=&quot;Support timestamp in HBaseStorage when storing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1832&quot;&gt;PIG-1832&lt;/a&gt; after we get done with this. The scope of this ticket is creeping already, as it&apos;s getting mixed in with 1680..&lt;/p&gt;</comment>
                            <comment id="12997311" author="billgraham" created="Mon, 21 Feb 2011 08:50:46 +0000"  >&lt;p&gt;@Dmitriy, I branched your git clone and incorporated my changes for this patch. There&apos;s one bug when using projections that I&apos;ve added a unit test for that fails. see &lt;a href=&quot;https://github.com/billonahill/pig/tree/bills_pig_1680&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/billonahill/pig/tree/bills_pig_1680&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m not yet sure if this is a bug in the base &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1680&quot; title=&quot;Pig 0.8 HBaseStorage may not against HBase 0.89&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1680&quot;&gt;&lt;del&gt;PIG-1680&lt;/del&gt;&lt;/a&gt; functionality, or only when using maps per &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1782&quot; title=&quot;Add ability to load data by column family in HBaseStorage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1782&quot;&gt;&lt;del&gt;PIG-1782&lt;/del&gt;&lt;/a&gt;. I&apos;ll look into it more tomorrow.&lt;/p&gt;</comment>
                            <comment id="12999116" author="billgraham" created="Thu, 24 Feb 2011 23:20:11 +0000"  >&lt;p&gt;Attached is a second patch. This one is built to be applied on top of the PIG_1680.3.patch.&lt;/p&gt;

&lt;p&gt;From the Javadocs:&lt;/p&gt;

&lt;p&gt;An HBase implementation of LoadFunc and StoreFunc.&lt;/p&gt;

&lt;p&gt;Below is an example showing how to load data from HBase:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
raw = LOAD &apos;hbase:&lt;span class=&quot;code-comment&quot;&gt;//SampleTable&apos;
&lt;/span&gt;      USING org.apache.pig.backend.hadoop.hbase.HBaseStorage(
&apos;info:first_name info:last_name friends:* info:*&apos;, &apos;-loadKey &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; -limit 5&apos;)
       AS (id:bytearray, first_name:chararray, last_name:chararray, friends_map:map[], info_map:map[]);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This example loads data redundantly from the info column family just to illustrate usage. Note that the row key is inserted first in the result schema. To load only column names that start with a given prefix, specify the column prefix with a trailing &amp;#42;. For example passing &lt;tt&gt;friends:bob_*&lt;/tt&gt; to the constructor in the above example would cause only columns that start with &lt;em&gt;bob&lt;/em&gt;_ to be loaded.&lt;/p&gt;

&lt;p&gt;Below is an example showing how to store data into HBase:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 copy = STORE raw INTO &apos;hbase:&lt;span class=&quot;code-comment&quot;&gt;//SampleTableCopy&apos;
&lt;/span&gt;       USING org.apache.pig.backend.hadoop.hbase.HBaseStorage(
       &apos;info:first_name info:last_name friends:* info:*&apos;)
       AS (info:first_name info:last_name buddies:* info:*);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;tt&gt;STORE&lt;/tt&gt; will expect the first value in the tuple to be the row key. Scalar values need to map to an explicit column descriptor and maps need to map to a column family name. In the above examples, the &lt;tt&gt;friends&lt;/tt&gt; column family data from &lt;tt&gt;SampleTable&lt;/tt&gt; will be written to a &lt;tt&gt;buddies&lt;/tt&gt; column family in the &lt;tt&gt;SampleTableCopy&lt;/tt&gt; table.&lt;/p&gt;
</comment>
                            <comment id="12999161" author="billgraham" created="Fri, 25 Feb 2011 00:53:16 +0000"  >&lt;p&gt;Sorry for the back and forth on this one, but I&apos;ve discovered another bug when doing projections while doing additional testing of patch 3.&lt;/p&gt;</comment>
                            <comment id="12999548" author="billgraham" created="Fri, 25 Feb 2011 20:43:44 +0000"  >&lt;p&gt;Here&apos;s a new patch #3 with the projection unit tests removed. Dymitriy and I synced up off-line and decided to tackle the issue with projections in a separate JIRA. I&apos;ll open one and add the relevant unit tests.&lt;/p&gt;

&lt;p&gt;This patch also requires PIG_1680 and it&apos;s built from my pig_1782 git repos fyi:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/billonahill/pig/tree/pig_1782&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/billonahill/pig/tree/pig_1782&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13013765" author="billgraham" created="Thu, 31 Mar 2011 01:42:29 +0100"  >&lt;p&gt;Ping. Can anyone review this patch please, and possibly even commit? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;d like to get this into Pig 0.9.0 if possible. We&apos;ve been using it for a while without issue.&lt;/p&gt;</comment>
                            <comment id="13013782" author="dvryaboy" created="Thu, 31 Mar 2011 02:40:13 +0100"  >&lt;p&gt;Bill, I will definitely look at this by the end of the weekend.&lt;/p&gt;</comment>
                            <comment id="13020703" author="dvryaboy" created="Sun, 17 Apr 2011 02:24:34 +0100"  >&lt;p&gt;Attached patch should apply cleanly to the current trunk. Please review.&lt;/p&gt;</comment>
                            <comment id="13020728" author="billgraham" created="Sun, 17 Apr 2011 07:04:32 +0100"  >&lt;p&gt;Verified that patch applies cleanly to trunk, unit tests pass and a sanity test job against a cluster utilizing a map of CF name/values runs as expected.&lt;/p&gt;</comment>
                            <comment id="13020732" author="dvryaboy" created="Sun, 17 Apr 2011 08:01:05 +0100"  >&lt;p&gt;Committed to 0.9 trunk.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12497084">PIG-1832</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12471489" name="PIG-1782_1.patch" size="23347" author="billgraham" created="Sat, 19 Feb 2011 21:32:50 +0000"/>
                            <attachment id="12476543" name="PIG-1782_4.patch" size="33387" author="dvryaboy" created="Sun, 17 Apr 2011 02:24:34 +0100"/>
                            <attachment id="12471880" name="PIG_1782_2.patch" size="35602" author="billgraham" created="Thu, 24 Feb 2011 23:20:11 +0000"/>
                            <attachment id="12471968" name="PIG_1782_3.patch" size="30894" author="billgraham" created="Fri, 25 Feb 2011 20:43:44 +0000"/>
                            <attachment id="12471490" name="apply-PIG-1782-patch.sh" size="1652" author="billgraham" created="Sat, 19 Feb 2011 21:32:50 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 28 Jan 2011 00:01:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66279</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyatpb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97123</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Enhanced HBaseStorage functionality to support loading dynamically named columns by column family or by column name prefixes.&lt;br/&gt;
&lt;br/&gt;
Javadoc:&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
/**&lt;br/&gt;
&amp;nbsp;* A HBase implementation of LoadFunc and StoreFunc.&lt;br/&gt;
&amp;nbsp;* &amp;lt;P&amp;gt;&lt;br/&gt;
&amp;nbsp;* Below is an example showing how to load data from HBase:&lt;br/&gt;
&amp;nbsp;* &amp;lt;pre&amp;gt;{@code&lt;br/&gt;
&amp;nbsp;* raw = LOAD &amp;#39;&lt;a href=&quot;hbase://SampleTable&amp;#39;&quot;&gt;hbase://SampleTable&amp;amp;#39;&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;*       USING org.apache.pig.backend.hadoop.hbase.HBaseStorage(&lt;br/&gt;
&amp;nbsp;*       &amp;#39;info:first_name info:last_name friends:* info:*&amp;#39;, &amp;#39;-loadKey true -limit 5&amp;#39;)&lt;br/&gt;
&amp;nbsp;*       AS (id:bytearray, first_name:chararray, last_name:chararray, friends_map:map[], info_map:map[]);&lt;br/&gt;
&amp;nbsp;* }&amp;lt;/pre&amp;gt;&lt;br/&gt;
&amp;nbsp;* This example loads data redundantly from the info column family just to&lt;br/&gt;
&amp;nbsp;* illustrate usage. Note that the row key is inserted first in the result schema.&lt;br/&gt;
&amp;nbsp;* To load only column names that start with a given prefix, specify the column&lt;br/&gt;
&amp;nbsp;* name with a trailing &amp;#39;*&amp;#39;. For example passing &amp;lt;code&amp;gt;friends:bob_*&amp;lt;/code&amp;gt; to&lt;br/&gt;
&amp;nbsp;* the constructor in the above example would cause only columns that start with&lt;br/&gt;
&amp;nbsp;* &amp;lt;i&amp;gt;bob_&amp;lt;/i&amp;gt; to be loaded.&lt;br/&gt;
&amp;nbsp;* &amp;lt;P&amp;gt;&lt;br/&gt;
&amp;nbsp;* Below is an example showing how to store data into HBase:&lt;br/&gt;
&amp;nbsp;* &amp;lt;pre&amp;gt;{@code&lt;br/&gt;
&amp;nbsp;* copy = STORE raw INTO &amp;#39;&lt;a href=&quot;hbase://SampleTableCopy&amp;#39;&quot;&gt;hbase://SampleTableCopy&amp;amp;#39;&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;*       USING org.apache.pig.backend.hadoop.hbase.HBaseStorage(&lt;br/&gt;
&amp;nbsp;*       &amp;#39;info:first_name info:last_name friends:* info:*&amp;#39;)&lt;br/&gt;
&amp;nbsp;*       AS (info:first_name info:last_name buddies:* info:*);&lt;br/&gt;
&amp;nbsp;* }&amp;lt;/pre&amp;gt;&lt;br/&gt;
&amp;nbsp;* Note that STORE will expect the first value in the tuple to be the row key.&lt;br/&gt;
&amp;nbsp;* Scalars values need to map to an explicit column descriptor and maps need to&lt;br/&gt;
&amp;nbsp;* map to a column family name. In the above examples, the &amp;lt;code&amp;gt;friends&amp;lt;/code&amp;gt;&lt;br/&gt;
&amp;nbsp;* column family data from &amp;lt;code&amp;gt;SampleTable&amp;lt;/code&amp;gt; will be written to a&lt;br/&gt;
&amp;nbsp;* &amp;lt;code&amp;gt;buddies&amp;lt;/code&amp;gt; column family in the &amp;lt;code&amp;gt;SampleTableCopy&amp;lt;/code&amp;gt; table.&lt;br/&gt;
&amp;nbsp;* &lt;br/&gt;
&amp;nbsp;*/&lt;br/&gt;
</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>