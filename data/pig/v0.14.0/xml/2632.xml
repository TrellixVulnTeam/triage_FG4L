<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:03:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-2632/PIG-2632.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-2632] Create a SchemaTuple which generates efficient Tuples via code gen</title>
                <link>https://issues.apache.org/jira/browse/PIG-2632</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;

&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;

&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12549430">PIG-2632</key>
            <summary>Create a SchemaTuple which generates efficient Tuples via code gen</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="10">Implemented</resolution>
                                        <assignee username="jcoveney">Jonathan Coveney</assignee>
                                    <reporter username="jcoveney">Jonathan Coveney</reporter>
                        <labels>
                    </labels>
                <created>Wed, 4 Apr 2012 01:29:52 +0100</created>
                <updated>Fri, 21 Sep 2012 20:04:02 +0100</updated>
                            <resolved>Fri, 21 Sep 2012 20:04:02 +0100</resolved>
                                                    <fixVersion>0.11</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="13245926" author="jcoveney" created="Wed, 4 Apr 2012 01:31:56 +0100"  >&lt;p&gt;Oh, I should add that it currently works in both local and M/R mode &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; It generates the class code, compiles it, adds it to the job jar, and then deserializes accordingly.&lt;/p&gt;</comment>
                            <comment id="13246367" author="julienledem" created="Wed, 4 Apr 2012 16:33:17 +0100"  >&lt;p&gt;Great work Jonathan! Could you post it to reviewboard? Thanks&lt;/p&gt;</comment>
                            <comment id="13246870" author="jcoveney" created="Thu, 5 Apr 2012 01:01:41 +0100"  >&lt;p&gt;Here is an update of the patch...the big change being boolean support (it&apos;s easy to forget that that is an official data type now!).&lt;/p&gt;

&lt;p&gt;I also made it so that in an EvalFunc, if it is generatable, the Tuple you are given is a SchemaTuple&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. The potential benefit for replicated joins and whatnot is huge! Will push to reviewboard in a moment. It needs tests and comments seriously, but I&apos;ve been waiting until it settles on a general form...&lt;/p&gt;</comment>
                            <comment id="13246929" author="jiraposter@reviews.apache.org" created="Thu, 5 Apr 2012 02:32:21 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for Julien Le Dem.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;

&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;

&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;

&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/org/apache/pig/data/TypeAwareTuple.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/data/BinInterSedes.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/data/PrimitiveTuple.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/TupleFactory.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/impl/PigContext.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1309628 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Jonathan&lt;/p&gt;
</comment>
                            <comment id="13247999" author="jiraposter@reviews.apache.org" created="Fri, 6 Apr 2012 04:30:33 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/#review6722&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#review6722&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;This is an incredible piece of work! &lt;br/&gt;
See my comments bellow&lt;/p&gt;


&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14556&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14556&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    it would be nice if Pig called outputSchema() once during the init and that was saved somewhere.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14557&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14557&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    So the side effect is that the Tuple class get generated here ? This should be encapsulated in a more obvious method here.&lt;br/&gt;
    like: generateTupleForSchema(tmpS) and not necessarily create an instance of a tuple.&lt;br/&gt;
    also that would remove duplication here.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14558&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14558&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    those are the inputSchema and the outputSchema. The fields should probably called just that and have boolean flag to know if we use generated Tuples?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14559&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14559&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I would make it:&lt;br/&gt;
    TupleFactory.geInstanceForSchema().newTuple()&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/BinInterSedes.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14560&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14560&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    should SchemaTuple extend TypeAwareTuple ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/PrimitiveTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14564&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14564&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    BytesKey ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14573&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14573&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    statics on top&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14574&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14574&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    largestSetValue should already be correct. Why does largestSetValue stays at the size of the schema?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14575&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14575&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    isAppendNull()&lt;br/&gt;
    Should the append...() methods be public?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14576&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14576&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    the result would be the same, right?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14580&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14580&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    setAppend()&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14578&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14578&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;http://www.ibm.com/developerworks/java/library/j-codetoheap/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.ibm.com/developerworks/java/library/j-codetoheap/index.html&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14631&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14631&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    if it is always overridden, it should be abstract&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14579&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14579&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    getAppendType()&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14584&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14584&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    set? stream?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14583&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14583&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    getSizeNoAppend() ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14585&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14585&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    redundant with the 2 others?&lt;br/&gt;
    idClassMap.get(schemaIdMap.get(schema))&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14586&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14586&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    could be computed statically by the generated class if you make a static getSchema(schemaString).&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14587&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14587&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    setAll() ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14588&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14588&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    setAll() ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14589&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14589&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    do we need all of set(Tuple), set(List), setEqualTo(List), setEqualTo(Tuple) ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14591&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14591&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    you could add a properties file to the jar with this info. Or a generated factory that knows all the classes generated. You mainly need the mapping schema -&amp;gt; id&lt;/p&gt;

&lt;p&gt;    you could also use true. Although that would not be THE answer to THE question.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14592&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14592&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    As we have schema aware Tuples, in the future we could add get(String fieldName). We may not want to strip the aliases to reuse the class.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14593&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14593&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    looking forward to support for those &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14596&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14596&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    there&apos;s only one code path where updateMaps is true. It could be simplified a bit.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14595&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14595&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Logger&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14597&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14597&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    they should not be public&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14598&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14598&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    refactor DataByteArray to provide this?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14599&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14599&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Same comment, the String serialization should be shared with the regular Tuple.&lt;/p&gt;

&lt;p&gt;    Also we could keep the a UTF8 in the SchemaTuple to reduce memory usage and convert lazilyto String (possibly caching the result)&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14600&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14600&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same comment as before.&lt;br/&gt;
    The same logic should be use with regular tuples.&lt;br/&gt;
    The same logic should be shared across types.&lt;/p&gt;

&lt;p&gt;    It could also use a variable size int format.&lt;br/&gt;
    &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/encoding#types&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://developers.google.com/protocol-buffers/docs/encoding#types&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14601&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14601&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    is (null, null, null) the same as null ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14609&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14609&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this.set(t) ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14610&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14610&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    DefaultTuple replaces null with &quot;&quot;&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14611&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14611&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    We could have a list implementation that just wraps a tuple.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14612&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14612&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    yep, sounds like it could be generated and fall back to this if the other is a regular tuple&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14614&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14614&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    you may want to log compilation warnings/errors&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14613&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14613&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Class.forName(className) uses the classLoader of the current class.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14615&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14615&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    if it does not need to be public then yes&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14616&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14616&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same comment as before about stripped aliases&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14617&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14617&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    the parameter t is thrown away ?&lt;/p&gt;

&lt;p&gt;    they don&apos;t need to be public.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14618&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14618&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    depending on how those are used, java already does auto un-boxing. &lt;br/&gt;
    The following works so you may not need them:&lt;br/&gt;
    long unbox(Long v) &lt;/p&gt;
{
       return v;
    }

&lt;p&gt;    they don&apos;t need to be public&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14620&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14620&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same comment, the following works:&lt;br/&gt;
    Float box(float v) &lt;/p&gt;
{
      return v;
    }

&lt;p&gt;    they don&apos;t need to be public&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14622&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14622&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this file has 1500 lines &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
    I think those classes have earned their own package.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14625&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14625&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this could be a method in the parent class&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14626&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14626&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this could be a method in the parent class&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14635&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14635&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    yes, an array is an object, so reference + sizeof(array)&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14638&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14638&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    CheckIfNullString.masks&lt;br/&gt;
    maybe they should be in a Masks class then, along with the masking code generation (&quot; &amp;amp; (byte)+...) &lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14643&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14643&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    This feels weird.&lt;br/&gt;
    what about:&lt;br/&gt;
    &quot;SchemaTuple.unbox((&quot;&lt;ins&gt;getBoxedTypeName()&lt;/ins&gt;&quot;)appendGet(diff))&quot;&lt;/p&gt;

&lt;p&gt;    getBoxedTypeName() {&lt;br/&gt;
     switch (type) {&lt;br/&gt;
       case (DataType.INTEGER): return &quot;Integer&quot;;&lt;br/&gt;
    ...&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14621&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14621&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    use &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuilder.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuilder.html&lt;/a&gt; for all those string concatenations.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment14619&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment14619&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    what does isObjNotTup mean? What is this case?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Julien&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2012-04-05 01:31:00, Jonathan Coveney wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2012-04-05 01:31:00)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for Julien Le Dem.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TypeAwareTuple.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/BinInterSedes.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/PrimitiveTuple.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TupleFactory.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/impl/PigContext.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13248133" author="jiraposter@reviews.apache.org" created="Fri, 6 Apr 2012 07:44:23 +0100"  >

&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, line 133&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line133&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line133&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     it would be nice if Pig called outputSchema() once during the init and that was saved somewhere.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It calls it many times, alas. I feel like changing that is a job for another patch, but I could tackle that here. But given there is already the expectation that it will be called an arbitrary number of times, I don&apos;t think that calling it once more on the front end will be an issue?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, lines 136-145&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line136&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line136&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     So the side effect is that the Tuple class get generated here ? This should be encapsulated in a more obvious method here.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     like: generateTupleForSchema(tmpS) and not necessarily create an instance of a tuple.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     also that would remove duplication here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was trying to leverage Dmitriy&apos;s newTupleForSchema, but I think you&apos;re right.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, lines 151-152&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line151&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line151&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     those are the inputSchema and the outputSchema. The fields should probably called just that and have boolean flag to know if we use generated Tuples?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, we need to know what the tuple to generate is. I will change it save the ID that serves as the base, but as is the Schema info isn&apos;t saved and it isn&apos;t available.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, line 188&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line188&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line188&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I would make it:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     TupleFactory.geInstanceForSchema().newTuple()&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it&apos;s worth thinking about how we want to do this. Dmitriy implemented newTupleForSchema for the PrimitiveTuple work, and he suggested I use that for this... however I agree, I think there should be a &quot;SchemaTupleFactory&quot; that generates SchemaTuples of a given SchemaTuple. At the same time, that might be a lot of scaffolding for not a lot of gain: once you generate the code for a given SchemaTuple, there&apos;s not a lot of work to be done (though this could encapsulate some of the static maps that come later). One other factor is that the TupleFactory interface doesn&apos;t really lend itself very nicely to the SchemaTuple, but I do think it could be extended and be made to work. Would appreciate more of your thoughts on this.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/BinInterSedes.java, lines 601-602&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100076#file100076line601&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100076#file100076line601&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     should SchemaTuple extend TypeAwareTuple ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed, and my working version has that update.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/PrimitiveTuple.java, line 213&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100077#file100077line213&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100077#file100077line213&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     BytesKey ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;good call&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 46-48&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line46&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line46&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     statics on top&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I really need to clean up where everything goes, noted.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 70&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line70&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line70&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     largestSetValue should already be correct. Why does largestSetValue stays at the size of the schema?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess once it is at the value of the SchemaTuple (excluding appends), there&apos;s no need to update it.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 77&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line77&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line77&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     isAppendNull()&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Should the append...() methods be public?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think a lot of these methods should be protected, agreed&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 81&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line81&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line81&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     the result would be the same, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah, you&apos;re right&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 94&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line94&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line94&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     setAppend()&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah need to rename all of these. naming is what I am worst at :S&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 105&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line105&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line105&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     if it is always overridden, it should be abstract&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s overriden, but the overriden version calls super. Right now it returns 0 because I don&apos;t want to take the time to calculate it out while the class is still evolving.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 119&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line119&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line119&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     set? stream?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This originally meant &quot;Schema Tuple Element Write&quot; but yeah, it should be more descriptive.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 125&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line125&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line125&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     redundant with the 2 others?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     idClassMap.get(schemaIdMap.get(schema))&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Perhaps this is what a SchemaTupleFactory would make cleaner, but my desire is for Tuple creation to be as fast as possible. This is why there are 5 maps... my thought is that they are all static, so the extra cost of caching the extra info is worth avoiding two gets in a row to link the info together when we need to make Tuples. Am open to thoughts.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 130-142&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line130&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line130&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     could be computed statically by the generated class if you make a static getSchema(schemaString).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, my thought is that a static cache wouldn&apos;t take up much memory, and it would avoid having to recreate the Schema object every time getSchema() is called. I don&apos;t forsee it being called a ton, but possibly enough that recreating the object a bunch would be wasteful. Perhaps this is premature optimization?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 144&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line144&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line144&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     setAll() ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s not really a setAll imho. It&apos;s setting it equal to. Maybe that&apos;s what setAll means, but it seems to convey something different.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 159&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line159&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line159&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     do we need all of set(Tuple), set(List), setEqualTo(List), setEqualTo(Tuple) ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My working version adds even more. I think a lot of it should be made protected, or at least, I should be more thoughtful about what it should be. I think &quot;set&quot; is probably enough, but perhaps it should just be the void version? I guess this is where working with ruby where everything generally returns &quot;this&quot; by default, thus allowing for nice chaining of methods, is the norm.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 191&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line191&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line191&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     you could add a properties file to the jar with this info. Or a generated factory that knows all the classes generated. You mainly need the mapping schema -&amp;gt; id&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     you could also use true. Although that would not be THE answer to THE question.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the jar properties is the way to go, at least as the ultimate source of the classes that were generated. Alternately, it&apos;d be nice if there was an easy way to browse a jar for certain class files, but I couldn&apos;t find a clean one? If there was, we could just search for SchemaTuple_*.class and keep track of which files went across. Do you know if there is an easier way to search jars like that? I can dig around as well.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 209&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line209&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line209&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     As we have schema aware Tuples, in the future we could add get(String fieldName). We may not want to strip the aliases to reuse the class.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, it seems pretty silly that two Schemas that are essentially &quot;int,int,long&quot; except with different names would necessitate a different class. More importantly, however, I ran into cases where schema names were different due to the way that names were generated by different pieces of code, and so the lookup was thwarted if you were strict about names. Hmm hmm hmm. Do you think the win from get(String) is worth the potential complication? It could be convenient...&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 270-273&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line270&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line270&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Logger&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;woops, I usually mark these //remove and whack them before the patch goes out...&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 268&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line268&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line268&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     there&apos;s only one code path where updateMaps is true. It could be simplified a bit.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;agreed&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 310-321&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line310&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line310&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     refactor DataByteArray to provide this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So here is the thing about this. Currently, a ton of the useful methods in BinInterSedes (where this logic was taken from) is private. Also, they aren&apos;t static (though there&apos;s no real reason why they shouldn&apos;t be?) This snippet (and other logic like it) should probably be made into a protected static method of BinInterSedes. Thoughts? It could also make sense for classes to have a static method to serialize themselves, but I&apos;d argue that the BinInterSedes approach is probably more consistent with how pig is laid out (though I have no idea why most of the methods there are private instead of protected static).&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 325-333&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line325&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line325&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Same comment, the String serialization should be shared with the regular Tuple.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Also we could keep the a UTF8 in the SchemaTuple to reduce memory usage and convert lazilyto String (possibly caching the result)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This logic is stolen directly from BinInterSedes (see comment above). Can you flesh out what you mean about UTF8? If we change it here we should probably change it there as well (and make that the canonical protected static source of all your string serialization needs).&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 344-353&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line344&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line344&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     same comment as before.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     The same logic should be use with regular tuples.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     The same logic should be shared across types.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     It could also use a variable size int format.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/encoding#types&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://developers.google.com/protocol-buffers/docs/encoding#types&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;varints is a good idea. general question of where this logic should live still holds as well, as this logic is also directly ripped from BinInterSedes.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 452&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line452&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line452&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     is (null, null, null) the same as null ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In DefaultTuple, this is deprecated and not really used. Given that, I use this to basically mean &quot;has any information been written to this.&quot; So in your case, both would be null. The more important question is to make sure I use it consistently throughout. Honestly, the whole null thing is a pain, and I need to really comb over things to make sure I incorporated it properly.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 474&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line474&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line474&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this.set(t) ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;reference is this weird Franken-method that isn&apos;t used anywhere in the codebase. I don&apos;t know that I want to implement it when the semantics of what it should do don&apos;t seem clear at all. Open to thoughts on this though. The original intent of it doesn&apos;t make much sense for a SchemaTuple since the underlying structures are primitives, not objects.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 479&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line479&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line479&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     DefaultTuple replaces null with &quot;&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 484&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line484&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line484&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     We could have a list implementation that just wraps a tuple.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, I think this is an intriguing idea, though it might get sills, because that means you&apos;d have a list which wraps a tuple which wraps a list.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 495&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line495&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line495&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     yep, sounds like it could be generated and fall back to this if the other is a regular tuple&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My working copy almost has this finished. there are three comparison functions: compareTo(Object), compareTo(SchemaTuple), and compareToSpecific(SchemaTuple_). It will check (unless you tell it not to) if you were actually given a SchemaTuple_X (or just a schemaTuple) and do progressively faster comparisons. I also need to generate a RawComparator but I&apos;d rather clean everything else up first (especially the layout of the API and where pieces live).&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 535&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line535&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line535&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     you may want to log compilation warnings/errors&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is there a need to log it if the runtime exception is going to be thrown anyway? Because those errors get written to stderr. But I suppose I could pipe them through the Logger, if that&apos;s what you mean?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 545&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line545&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line545&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Class.forName(className) uses the classLoader of the current class.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;nice!&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 585&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line585&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line585&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     if it does not need to be public then yes&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;it depends heavily on how we end up forcing people to make these things.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 609-635&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line609&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line609&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     the parameter t is thrown away ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     they don&apos;t need to be public.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is more for conciseness in the code that generates the SchemaTuple_ code. It allows me to make a bunch of if then elses smaller. I suppose there are other ways to do it that don&apos;t involve a method call... I go back and forth on that. But the reason is so later on I can do:&lt;br/&gt;
add(&quot;        setPos_X(SchemaTuple.unbox(val, pos_X));&quot;);&lt;br/&gt;
which means that the right one will be based on the type of the field being filled (ie saving me a bunch of lines, but perhaps that should be trumped by cleanliness of the output code/API).&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 637-659&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line637&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line637&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     depending on how those are used, java already does auto un-boxing. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     The following works so you may not need them:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     long unbox(Long v) {
bq.  &amp;gt;        return v;
bq.  &amp;gt;     }&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     they don&apos;t need to be public&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good point. I hate auto-boxing/un-boxing as a language feature, but if it can be utilized to clean things up it is worth it.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 667-685&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line667&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line667&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     same comment, the following works:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Float box(float v) {
bq.  &amp;gt;       return v;
bq.  &amp;gt;     }&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     they don&apos;t need to be public&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah same as above as well. I think I can actually also leverage auto boxing/unboxing deeper in the code to remove some of the need for these functions.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 698&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line698&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line698&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this file has 1500 lines &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I think those classes have earned their own package.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, I mean, you&apos;re right... but the logic is EXTREMELY narrow, which is why I don&apos;t like the idea of splitting it out. Yeah, it makes the file larger, but it makes 0 sense outside of the context of what is going on here. Perhaps that should be rectified?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 857-860&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line857&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line857&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this could be a method in the parent class&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;do you mean in SchemaTuple, or in TypeInFunctionStringOut?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 1138&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1138&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1138&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     CheckIfNullString.masks&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     maybe they should be in a Masks class then, along with the masking code generation (&quot; &amp;amp; (byte)+...)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t know how worthwhile it is to split all of this stuff out into classes. Maybe it is. A lot of stuff is used once or twice in disparate places, and I fear that splitting it out more and more will just make people jump through 50 classes to understand what a line of code gen is doing. On the other hand, it would make fixing bugs much cleaner. What probably needs to be done is some sort of cleaner code generation framework... would appreciate more thoughts here.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 1283&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1283&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1283&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     This feels weird.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     what about:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &quot;SchemaTuple.unbox((&quot;&lt;ins&gt;getBoxedTypeName()&lt;/ins&gt;&quot;)appendGet(diff))&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     getBoxedTypeName() {&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;      switch (type) {&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;        case (DataType.INTEGER): return &quot;Integer&quot;;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I actually was able to replace it with:&lt;br/&gt;
add(&quot;    case (&quot;&lt;ins&gt;fieldNum&lt;/ins&gt;&quot;): return &quot;&lt;ins&gt;fs.type&lt;/ins&gt;&quot;;&quot;);&lt;br/&gt;
sometimes I miss the forest for the trees.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 1413&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1413&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1413&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     use &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuilder.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuilder.html&lt;/a&gt; for all those string concatenations.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeahh this is a good idea. I doubt the code gen takes up much time at all but given the gen&apos;d files are potentially large, it&apos;s probably good practice&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 1522-1524&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1522&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1522&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     what does isObjNotTup mean? What is this case?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;it was an obscure case that was obsolete. I removed it&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/#review6722&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#review6722&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2012-04-05 01:31:00, Jonathan Coveney wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2012-04-05 01:31:00)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for Julien Le Dem.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TypeAwareTuple.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/BinInterSedes.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/PrimitiveTuple.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TupleFactory.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/impl/PigContext.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13248509" author="jiraposter@reviews.apache.org" created="Fri, 6 Apr 2012 18:19:19 +0100"  >

&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, line 133&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line133&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line133&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     it would be nice if Pig called outputSchema() once during the init and that was saved somewhere.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;It calls it many times, alas. I feel like changing that is a job for another patch, but I could tackle that here. But given there is already the expectation that it will be called an arbitrary number of times, I don&apos;t think that calling it once more on the front end will be an issue?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree,let&apos;s not add to this already big patch. This should be dealt with in a separate patch.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, lines 151-152&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line151&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line151&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     those are the inputSchema and the outputSchema. The fields should probably called just that and have boolean flag to know if we use generated Tuples?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Well, we need to know what the tuple to generate is. I will change it save the ID that serves as the base, but as is the Schema info isn&apos;t saved and it isn&apos;t available.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was more commenting on the naming. Those are the input and output schema independently of code generation. &lt;/p&gt;

&lt;p&gt;Knowing if you can generate or not could be saved with a boolean. &lt;/p&gt;

&lt;p&gt;Possibly you don&apos;t even need to save the information than can generate the tuples or not. It could fall back to the DefaultTuple.&lt;/p&gt;

&lt;p&gt;(Anyway, this one is not very important)&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, line 188&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line188&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line188&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I would make it:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     TupleFactory.geInstanceForSchema().newTuple()&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I think it&apos;s worth thinking about how we want to do this. Dmitriy implemented newTupleForSchema for the PrimitiveTuple work, and he suggested I use that for this... however I agree, I think there should be a &quot;SchemaTupleFactory&quot; that generates SchemaTuples of a given SchemaTuple. At the same time, that might be a lot of scaffolding for not a lot of gain: once you generate the code for a given SchemaTuple, there&apos;s not a lot of work to be done (though this could encapsulate some of the static maps that come later). One other factor is that the TupleFactory interface doesn&apos;t really lend itself very nicely to the SchemaTuple, but I do think it could be extended and be made to work. Would appreciate more of your thoughts on this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I meant:&lt;br/&gt;
TupleFactory.geInstanceForSchema(inputSchemaForGen).newTuple()&lt;/p&gt;

&lt;p&gt;The change is relatively small, it is just moving this from one class to the other and getting rid of the Maps. PrimitiveTuple should follow the same logic.&lt;/p&gt;

&lt;p&gt;Asking for the schema in the factory initialization will simplify the code. As you say, you won&apos;t need to constantly look up the schema. Also pig is about writing a lot of tuples of the same type. &lt;/p&gt;

&lt;p&gt;The block of code (see 2 comments above) that triggers the code generation would just get the factories instead of actually generating Tuples. This is caused by the api asking for the schema in the wrong place.&lt;/p&gt;

&lt;p&gt;TupleFactory is an abstract class so it should be doable to add methods without breaking compatibility.&lt;/p&gt;

&lt;p&gt;If needed, backard compatibility can be maintained by having newTupleForSchema(inputSchemaForGen) call TupleFactory.geInstanceForSchema(inputSchemaForGen).newTuple()&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 70&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line70&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line70&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     largestSetValue should already be correct. Why does largestSetValue stays at the size of the schema?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I guess once it is at the value of the SchemaTuple (excluding appends), there&apos;s no need to update it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Correct but know you have to check this every time you update. I was thinking it would simplify the code a little if it was just the actual size of the tuple (including past the original size).&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 105&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line105&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line105&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     if it is always overridden, it should be abstract&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;It&apos;s overriden, but the overriden version calls super. Right now it returns 0 because I don&apos;t want to take the time to calculate it out while the class is still evolving.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, let&apos;s make it abstract once we get to this.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 125&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line125&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line125&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     redundant with the 2 others?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     idClassMap.get(schemaIdMap.get(schema))&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Perhaps this is what a SchemaTupleFactory would make cleaner, but my desire is for Tuple creation to be as fast as possible. This is why there are 5 maps... my thought is that they are all static, so the extra cost of caching the extra info is worth avoiding two gets in a row to link the info together when we need to make Tuples. Am open to thoughts.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like the SchemaTupleFactory approach. It would alleviate the need for this.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 130-142&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line130&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line130&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     could be computed statically by the generated class if you make a static getSchema(schemaString).&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Well, my thought is that a static cache wouldn&apos;t take up much memory, and it would avoid having to recreate the Schema object every time getSchema() is called. I don&apos;t forsee it being called a ton, but possibly enough that recreating the object a bunch would be wasteful. Perhaps this is premature optimization?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;caching is fine.&lt;br/&gt;
I meant that you could have the Schema object &quot;cached&quot; in a static field of the generated class&lt;br/&gt;
instead of a runtime generation + cache&lt;/p&gt;

&lt;p&gt;in the generated class:&lt;/p&gt;

&lt;p&gt;static schemaString = &quot;....&quot;;&lt;br/&gt;
static Schema schema = Utils.getSchemaFromString(schemaString);&lt;/p&gt;

&lt;p&gt;public Schema getSchema() &lt;/p&gt;
{
  return schema;
}


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 144&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line144&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line144&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     setAll() ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;It&apos;s not really a setAll imho. It&apos;s setting it equal to. Maybe that&apos;s what setAll means, but it seems to convey something different.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It sounds like setEqualTo() is what set() generally means. when you set something to a value then you expect it to be equal to the value. What do you think?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 159&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line159&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line159&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     do we need all of set(Tuple), set(List), setEqualTo(List), setEqualTo(Tuple) ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;My working version adds even more. I think a lot of it should be made protected, or at least, I should be more thoughtful about what it should be. I think &quot;set&quot; is probably enough, but perhaps it should just be the void version? I guess this is where working with ruby where everything generally returns &quot;this&quot; by default, thus allowing for nice chaining of methods, is the norm.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m fine with the chaining mechanism.&lt;br/&gt;
We should try to avoid having both as it makes the code harder to read. You cant set and ignore the return value;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 191&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line191&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line191&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     you could add a properties file to the jar with this info. Or a generated factory that knows all the classes generated. You mainly need the mapping schema -&amp;gt; id&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     you could also use true. Although that would not be THE answer to THE question.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I think the jar properties is the way to go, at least as the ultimate source of the classes that were generated. Alternately, it&apos;d be nice if there was an easy way to browse a jar for certain class files, but I couldn&apos;t find a clean one? If there was, we could just search for SchemaTuple_*.class and keep track of which files went across. Do you know if there is an easier way to search jars like that? I can dig around as well.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;tl;dr: As you know what classes you generate I would go for a mechanism where you provide the list of classes to load like a properties file in the jar.&lt;/p&gt;

&lt;p&gt;I don&apos;t think there is a clean way of scanning a package out of the box. Usually dependency injection containers (like Spring) have a mechanism for scanning the classpath for classes with a given annotation.&lt;br/&gt;
example:&lt;br/&gt;
&lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html&lt;/a&gt;&lt;br/&gt;
(I&apos;m not saying we should add dependencies to Pig! Just FYI)&lt;/p&gt;

&lt;p&gt;You could have a simple scanning mechanism using getResource():&lt;br/&gt;
&lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/ClassLoader.html#getResource%28java.lang.String%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/ClassLoader.html#getResource%28java.lang.String%29&lt;/a&gt;&lt;br/&gt;
this.getClass().getClassLoader().getResource(&quot;my/package/path&quot;)&lt;br/&gt;
will return a URL and you can scan yourself the location of the URL.&lt;br/&gt;
If the package is not in a jar and on the local file system, you will get a &lt;a href=&quot;file:/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/&lt;/a&gt;... url that you can easily make a File of.&lt;br/&gt;
If the package is in a jar, then you will need to use a JarFile to scan the content of the package in the jar.&lt;br/&gt;
The issue here is that the classloading mechanism is extensible: The URL could be a HTTP url or some other that do not provide a listing option. There is no way to have a fully generic scanning mechanism if you don&apos;t know the name of the classes you want.&lt;/p&gt;

&lt;p&gt;A search for &quot;enumerate classes in a package&quot; returns examples of people doing this.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 209&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line209&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line209&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     As we have schema aware Tuples, in the future we could add get(String fieldName). We may not want to strip the aliases to reuse the class.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Hmm, it seems pretty silly that two Schemas that are essentially &quot;int,int,long&quot; except with different names would necessitate a different class. More importantly, however, I ran into cases where schema names were different due to the way that names were generated by different pieces of code, and so the lookup was thwarted if you were strict about names. Hmm hmm hmm. Do you think the win from get(String) is worth the potential complication? It could be convenient...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I would need to look more into it. I would be interested in seeing the problems you see when not stripping the names.&lt;/p&gt;

&lt;p&gt;This seems changeable later if needed, so let&apos;s keep it that way for now.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 270-273&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line270&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line270&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Logger&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;woops, I usually mark these //remove and whack them before the patch goes out...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;no worries. Usually it can be useful to keep debug log statements for future modification.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 310-321&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line310&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line310&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     refactor DataByteArray to provide this?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;So here is the thing about this. Currently, a ton of the useful methods in BinInterSedes (where this logic was taken from) is private. Also, they aren&apos;t static (though there&apos;s no real reason why they shouldn&apos;t be?) This snippet (and other logic like it) should probably be made into a protected static method of BinInterSedes. Thoughts? It could also make sense for classes to have a static method to serialize themselves, but I&apos;d argue that the BinInterSedes approach is probably more consistent with how pig is laid out (though I have no idea why most of the methods there are private instead of protected static).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;private stuff can be safely moved around and refactored &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; (from a compatibility point of view)&lt;br/&gt;
Let&apos;s think of a way to have the same code used in all cases. There used to be one type of tuple so what made sense before may need to changee.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;parent class for both ?&lt;/li&gt;
	&lt;li&gt;TupleSerializer class ?&lt;/li&gt;
	&lt;li&gt;static helpers?&lt;/li&gt;
&lt;/ul&gt;



&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 325-333&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line325&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line325&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Same comment, the String serialization should be shared with the regular Tuple.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Also we could keep the a UTF8 in the SchemaTuple to reduce memory usage and convert lazilyto String (possibly caching the result)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This logic is stolen directly from BinInterSedes (see comment above). Can you flesh out what you mean about UTF8? If we change it here we should probably change it there as well (and make that the canonical protected static source of all your string serialization needs).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Following your goal of reducing memory utilization and as the serialized format is UTF8, we could keep UTF8 as the memory representation instead of String.&lt;br/&gt;
Java Strings are UTF16 which is minimum 2 bytes per characters. If the data is mostly ascii, this is wasteful. &lt;br/&gt;
To maintain backward compatibility the get(int) would lazily convert to String on demand, possibly caching the result in a second field to save processing, but this may be overkill.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 452&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line452&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line452&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     is (null, null, null) the same as null ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In DefaultTuple, this is deprecated and not really used. Given that, I use this to basically mean &quot;has any information been written to this.&quot; So in your case, both would be null. The more important question is to make sure I use it consistently throughout. Honestly, the whole null thing is a pain, and I need to really comb over things to make sure I incorporated it properly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;agreed, we should just make sure this is the same behavior as the DefaultTuple&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 474&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line474&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line474&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this.set(t) ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;reference is this weird Franken-method that isn&apos;t used anywhere in the codebase. I don&apos;t know that I want to implement it when the semantics of what it should do don&apos;t seem clear at all. Open to thoughts on this though. The original intent of it doesn&apos;t make much sense for a SchemaTuple since the underlying structures are primitives, not objects.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&quot;the underlying structures are primitives, not objects&quot;&lt;br/&gt;
for now, as Bags and Maps will come.&lt;br/&gt;
For backward compatibility, I think we should implement this as a set(). It seems this is intended as a cheap set, not sure if &quot;modifying one modifies the others&quot; behavior is expected. some UDFs could depend on this.&lt;/p&gt;

&lt;p&gt;Also let&apos;s mark reference() as deprecated right now so that we can remove it later.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 484&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line484&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line484&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     We could have a list implementation that just wraps a tuple.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Hmm, I think this is an intriguing idea, though it might get sills, because that means you&apos;d have a list which wraps a tuple which wraps a list.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;this is just for saving a list allocation. A wrapper list would use less memory.&lt;/p&gt;

&lt;p&gt;We can punt this for now.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 495&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line495&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line495&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     yep, sounds like it could be generated and fall back to this if the other is a regular tuple&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;My working copy almost has this finished. there are three comparison functions: compareTo(Object), compareTo(SchemaTuple), and compareToSpecific(SchemaTuple_). It will check (unless you tell it not to) if you were actually given a SchemaTuple_X (or just a schemaTuple) and do progressively faster comparisons. I also need to generate a RawComparator but I&apos;d rather clean everything else up first (especially the layout of the API and where pieces live).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;cool&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 535&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line535&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line535&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     you may want to log compilation warnings/errors&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Is there a need to log it if the runtime exception is going to be thrown anyway? Because those errors get written to stderr. But I suppose I could pipe them through the Logger, if that&apos;s what you mean?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok.&lt;br/&gt;
You can also get them programatically, but stderr is good too. Let&apos;s make sure we don&apos;t swamp the output of Pig with too many messages.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 609-635&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line609&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line609&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     the parameter t is thrown away ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     they don&apos;t need to be public.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is more for conciseness in the code that generates the SchemaTuple_ code. It allows me to make a bunch of if then elses smaller. I suppose there are other ways to do it that don&apos;t involve a method call... I go back and forth on that. But the reason is so later on I can do:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;add(&quot;        setPos_X(SchemaTuple.unbox(val, pos_X));&quot;);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;which means that the right one will be based on the type of the field being filled (ie saving me a bunch of lines, but perhaps that should be trumped by cleanliness of the output code/API).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah yeah, this comment is obsoleted by my other comment bellow. I should have removed it.&lt;br/&gt;
I saw how it simplifies the generation later.&lt;br/&gt;
See my proposal for this bellow.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 698&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line698&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line698&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this file has 1500 lines &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I think those classes have earned their own package.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Yeah, I mean, you&apos;re right... but the logic is EXTREMELY narrow, which is why I don&apos;t like the idea of splitting it out. Yeah, it makes the file larger, but it makes 0 sense outside of the context of what is going on here. Perhaps that should be rectified?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t feel strongly about it.&lt;br/&gt;
Maybe you want to separate the base class SchemaTuple (runtime) from the Generator ?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 857-860&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line857&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line857&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this could be a method in the parent class&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;do you mean in SchemaTuple, or in TypeInFunctionStringOut?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Where it makes sense to you.&lt;br/&gt;
based on the way you removed everything that does not need to be generated, you could factor out the error handling and just generate &quot;default: handleDefault(fieldNum)&quot;&lt;/p&gt;

&lt;p&gt;in SchemaTuple?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 1138&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1138&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1138&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     CheckIfNullString.masks&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     maybe they should be in a Masks class then, along with the masking code generation (&quot; &amp;amp; (byte)+...)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I don&apos;t know how worthwhile it is to split all of this stuff out into classes. Maybe it is. A lot of stuff is used once or twice in disparate places, and I fear that splitting it out more and more will just make people jump through 50 classes to understand what a line of code gen is doing. On the other hand, it would make fixing bugs much cleaner. What probably needs to be done is some sort of cleaner code generation framework... would appreciate more thoughts here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My goal is to have the bit management thing implemented once so that it is easier to change/improve/bugfix.&lt;br/&gt;
agreed that we should keep things simple.&lt;br/&gt;
If we have a SchemaTupleClassGenerator  that contains bit management helpers that could simplify things.&lt;br/&gt;
Separating the runtime from the generation would reduce the amount of things you have to look at at the same time.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 1283&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1283&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1283&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     This feels weird.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     what about:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &quot;SchemaTuple.unbox((&quot;&lt;ins&gt;getBoxedTypeName()&lt;/ins&gt;&quot;)appendGet(diff))&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     getBoxedTypeName() {&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;      switch (type) {&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;        case (DataType.INTEGER): return &quot;Integer&quot;;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     ...&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I actually was able to replace it with:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;add(&quot;    case (&quot;&lt;ins&gt;fieldNum&lt;/ins&gt;&quot;): return &quot;&lt;ins&gt;fs.type&lt;/ins&gt;&quot;;&quot;);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;sometimes I miss the forest for the trees.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;cool&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 1413&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1413&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1413&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     use &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuilder.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuilder.html&lt;/a&gt; for all those string concatenations.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;yeahh this is a good idea. I doubt the code gen takes up much time at all but given the gen&apos;d files are potentially large, it&apos;s probably good practice&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;a concatenation copies both strings, so concatenating large strings over and over can become slow.&lt;/p&gt;

&lt;p&gt;Note that &quot;a&quot;&lt;ins&gt;&quot;B&quot;+foo+bar&lt;/ins&gt;&quot;c&quot; gets replaced by the compiler by new StringBuilder().append(&quot;a&quot;).append(&quot;B&quot;).append(foo).append(bar).append(&quot;c&quot;).toString()&lt;br/&gt;
But you still concatenate those to other strings so will end up duplicating large strings.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 1522-1524&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1522&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1522&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     what does isObjNotTup mean? What is this case?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;it was an obscure case that was obsolete. I removed it&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ok&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Julien&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/#review6722&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#review6722&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2012-04-05 01:31:00, Jonathan Coveney wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2012-04-05 01:31:00)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for Julien Le Dem.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TypeAwareTuple.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/BinInterSedes.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/PrimitiveTuple.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TupleFactory.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/impl/PigContext.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13248510" author="jiraposter@reviews.apache.org" created="Fri, 6 Apr 2012 18:21:20 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2012-04-06 17:20:20.566618)&lt;/p&gt;


&lt;p&gt;Review request for pig and Julien Le Dem.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;

&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;

&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;

&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/org/apache/pig/data/TypeAwareTuple.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/data/BinInterSedes.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/data/PrimitiveTuple.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/TupleFactory.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/impl/PigContext.java 1309628 &lt;br/&gt;
  trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1309628 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Jonathan&lt;/p&gt;
</comment>
                            <comment id="13248654" author="jiraposter@reviews.apache.org" created="Fri, 6 Apr 2012 20:51:21 +0100"  >

&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, line 188&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line188&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100075#file100075line188&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I would make it:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     TupleFactory.geInstanceForSchema().newTuple()&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I think it&apos;s worth thinking about how we want to do this. Dmitriy implemented newTupleForSchema for the PrimitiveTuple work, and he suggested I use that for this... however I agree, I think there should be a &quot;SchemaTupleFactory&quot; that generates SchemaTuples of a given SchemaTuple. At the same time, that might be a lot of scaffolding for not a lot of gain: once you generate the code for a given SchemaTuple, there&apos;s not a lot of work to be done (though this could encapsulate some of the static maps that come later). One other factor is that the TupleFactory interface doesn&apos;t really lend itself very nicely to the SchemaTuple, but I do think it could be extended and be made to work. Would appreciate more of your thoughts on this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I meant:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;TupleFactory.geInstanceForSchema(inputSchemaForGen).newTuple()&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;The change is relatively small, it is just moving this from one class to the other and getting rid of the Maps. PrimitiveTuple should follow the same logic.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Asking for the schema in the factory initialization will simplify the code. As you say, you won&apos;t need to constantly look up the schema. Also pig is about writing a lot of tuples of the same type. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;The block of code (see 2 comments above) that triggers the code generation would just get the factories instead of actually generating Tuples. This is caused by the api asking for the schema in the wrong place.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;TupleFactory is an abstract class so it should be doable to add methods without breaking compatibility.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If needed, backard compatibility can be maintained by having newTupleForSchema(inputSchemaForGen) call TupleFactory.geInstanceForSchema(inputSchemaForGen).newTuple()&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d like your thoughts fleshing out the TupleFactory interface for a SchemaTupleFactory (which imho at this point makes the most sense &amp;#8211; TupleFactory.getInstanceForSchema(inputSchema); returns a SchemaTupleFactory which extends TupleFactory).&lt;/p&gt;

&lt;p&gt;newTuple();&lt;br/&gt;
easy&lt;/p&gt;

&lt;p&gt;newTuple(int size);&lt;br/&gt;
meaningless, throw an error?&lt;/p&gt;

&lt;p&gt;newTuple(List c);&lt;br/&gt;
uses set(List object), throws error otherwise?&lt;/p&gt;

&lt;p&gt;newTuple(Object datum);&lt;br/&gt;
meaningless?&lt;/p&gt;

&lt;p&gt;newTupleNoCopy(List list);&lt;br/&gt;
same as newTuple(list);&lt;/p&gt;

&lt;p&gt;If that sounds reasonable, I like this approach&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 70&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line70&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line70&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     largestSetValue should already be correct. Why does largestSetValue stays at the size of the schema?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I guess once it is at the value of the SchemaTuple (excluding appends), there&apos;s no need to update it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Correct but know you have to check this every time you update. I was thinking it would simplify the code a little if it was just the actual size of the tuple (including past the original size).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, I guess that depends how we define the size of the tuple. To me, the size = number of fields (independently of whether they are set) + number of append fields. The reason we need this field, then, is to keep track of whether or not we&apos;ve set one of the generated fields. We could redefine the size to be the largest non-null field, but that&apos;s going to make it slower for minimal gain. Thoughts?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 130-142&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line130&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line130&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     could be computed statically by the generated class if you make a static getSchema(schemaString).&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Well, my thought is that a static cache wouldn&apos;t take up much memory, and it would avoid having to recreate the Schema object every time getSchema() is called. I don&apos;t forsee it being called a ton, but possibly enough that recreating the object a bunch would be wasteful. Perhaps this is premature optimization?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;caching is fine.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I meant that you could have the Schema object &quot;cached&quot; in a static field of the generated class&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;instead of a runtime generation + cache&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;in the generated class:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;static schemaString = &quot;....&quot;;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;static Schema schema = Utils.getSchemaFromString(schemaString);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;public Schema getSchema() {
bq.        return schema;
bq.      }&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah, very good call&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 159&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line159&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line159&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     do we need all of set(Tuple), set(List), setEqualTo(List), setEqualTo(Tuple) ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;My working version adds even more. I think a lot of it should be made protected, or at least, I should be more thoughtful about what it should be. I think &quot;set&quot; is probably enough, but perhaps it should just be the void version? I guess this is where working with ruby where everything generally returns &quot;this&quot; by default, thus allowing for nice chaining of methods, is the norm.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I&apos;m fine with the chaining mechanism.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;We should try to avoid having both as it makes the code harder to read. You cant set and ignore the return value;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;good call&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 310-321&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line310&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line310&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     refactor DataByteArray to provide this?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;So here is the thing about this. Currently, a ton of the useful methods in BinInterSedes (where this logic was taken from) is private. Also, they aren&apos;t static (though there&apos;s no real reason why they shouldn&apos;t be?) This snippet (and other logic like it) should probably be made into a protected static method of BinInterSedes. Thoughts? It could also make sense for classes to have a static method to serialize themselves, but I&apos;d argue that the BinInterSedes approach is probably more consistent with how pig is laid out (though I have no idea why most of the methods there are private instead of protected static).&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;private stuff can be safely moved around and refactored &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; (from a compatibility point of view)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Let&apos;s think of a way to have the same code used in all cases. There used to be one type of tuple so what made sense before may need to changee.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- parent class for both ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- TupleSerializer class ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- static helpers?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;per your suggestion and dmitriy&apos;s go ahead on the list serv, I&apos;m moving a bit of the shared logic to a SedesHelper class which both BinInterSedes and SchemaTuple will use&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, lines 325-333&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line325&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line325&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Same comment, the String serialization should be shared with the regular Tuple.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Also we could keep the a UTF8 in the SchemaTuple to reduce memory usage and convert lazilyto String (possibly caching the result)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This logic is stolen directly from BinInterSedes (see comment above). Can you flesh out what you mean about UTF8? If we change it here we should probably change it there as well (and make that the canonical protected static source of all your string serialization needs).&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Following your goal of reducing memory utilization and as the serialized format is UTF8, we could keep UTF8 as the memory representation instead of String.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Java Strings are UTF16 which is minimum 2 bytes per characters. If the data is mostly ascii, this is wasteful. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;To maintain backward compatibility the get(int) would lazily convert to String on demand, possibly caching the result in a second field to save processing, but this may be overkill.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What is the latency on utf8 -&amp;gt; utf16 conversion? That&apos;s all I&apos;d be worried about but your suggestion is a good one.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 452&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line452&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line452&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     is (null, null, null) the same as null ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In DefaultTuple, this is deprecated and not really used. Given that, I use this to basically mean &quot;has any information been written to this.&quot; So in your case, both would be null. The more important question is to make sure I use it consistently throughout. Honestly, the whole null thing is a pain, and I need to really comb over things to make sure I incorporated it properly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;agreed, we should just make sure this is the same behavior as the DefaultTuple&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DefaultTuple doesn&apos;t implement isNull(). It&apos;s just a dummy null implementation. But the difference is that I have fields that can be &quot;null&quot; but aren&apos;t actually null (ie primitives), so it&apos;s a bit more useful.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 474&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line474&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line474&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this.set(t) ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;reference is this weird Franken-method that isn&apos;t used anywhere in the codebase. I don&apos;t know that I want to implement it when the semantics of what it should do don&apos;t seem clear at all. Open to thoughts on this though. The original intent of it doesn&apos;t make much sense for a SchemaTuple since the underlying structures are primitives, not objects.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&quot;the underlying structures are primitives, not objects&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;for now, as Bags and Maps will come.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;For backward compatibility, I think we should implement this as a set(). It seems this is intended as a cheap set, not sure if &quot;modifying one modifies the others&quot; behavior is expected. some UDFs could depend on this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Also let&apos;s mark reference() as deprecated right now so that we can remove it later.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt; I have no problem making this a set. The nice part about doing that is it means you can essentially get the functionality of a set without having to cast it. The downside being the weird semantics around it. Probably a net win. Agree on deprecating reference&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 698&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line698&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line698&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this file has 1500 lines &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I think those classes have earned their own package.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Yeah, I mean, you&apos;re right... but the logic is EXTREMELY narrow, which is why I don&apos;t like the idea of splitting it out. Yeah, it makes the file larger, but it makes 0 sense outside of the context of what is going on here. Perhaps that should be rectified?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I don&apos;t feel strongly about it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Maybe you want to separate the base class SchemaTuple (runtime) from the Generator ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed, very good suggestion&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-06 03:30:08, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 1138&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1138&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1/?file=100078#file100078line1138&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     CheckIfNullString.masks&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     maybe they should be in a Masks class then, along with the masking code generation (&quot; &amp;amp; (byte)+...)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I don&apos;t know how worthwhile it is to split all of this stuff out into classes. Maybe it is. A lot of stuff is used once or twice in disparate places, and I fear that splitting it out more and more will just make people jump through 50 classes to understand what a line of code gen is doing. On the other hand, it would make fixing bugs much cleaner. What probably needs to be done is some sort of cleaner code generation framework... would appreciate more thoughts here.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;My goal is to have the bit management thing implemented once so that it is easier to change/improve/bugfix.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;agreed that we should keep things simple.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If we have a SchemaTupleClassGenerator  that contains bit management helpers that could simplify things.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Separating the runtime from the generation would reduce the amount of things you have to look at at the same time.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/#review6722&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#review6722&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2012-04-06 17:20:20, Jonathan Coveney wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2012-04-06 17:20:20)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for pig and Julien Le Dem.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TypeAwareTuple.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/BinInterSedes.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/PrimitiveTuple.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TupleFactory.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/impl/PigContext.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1309628 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13248657" author="scott_carey" created="Fri, 6 Apr 2012 20:53:40 +0100"  >&lt;blockquote&gt;&lt;p&gt;varints is a good idea. general question of where this logic should live still holds as well, as this logic is also directly ripped from BinInterSedes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you go that far, it may be better to simply replace BinInterSedes with Avro, which also provides about half of the stuff in this patch for free but is missing a bunch of other things you&apos;d need.  If the schema is known, it can be mapped to an Avro schema, and then all the serialization and deserialization details would be free.  Code gen could be done with a custom velocity template (an avro extensibility feature) instead of the manual string manipulation here.  You&apos;d need to have a custom Avro DatumWriter/DatumReader that handles these schema aware tuples and also handles the pig Tuple contracts. &lt;/p&gt;

&lt;p&gt;This also seems like it requires a JDK and not just a JRE, because you are using javax.tools.JavaCompiler.  There are alternative approaches to creating classes at runtime with tools like ASM, CGLIB, or java&apos;s dynamic proxies to extend a class without generating Java strings first, but those have more of a learning curve.  See also Jackson&apos;s MrBean feature &lt;a href=&quot;http://jackson.codehaus.org/1.9.3/javadoc/org/codehaus/jackson/mrbean/BeanBuilder.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jackson.codehaus.org/1.9.3/javadoc/org/codehaus/jackson/mrbean/BeanBuilder.html&lt;/a&gt; and its source for some interesting examples.&lt;/p&gt;


&lt;p&gt;I am very interested in this but do not have time to help out in the near term.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Class.forName(className) uses the classLoader of the current class&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Be careful, this approach is dangerous and not OSGi friendly.  You may want to consider using the thread local context class loader, or passing in a ClassLoader as a parameter instead of the static binding which ClassLoader is used with a reference to a specific class.  Even Main.class &lt;em&gt;could&lt;/em&gt; have two copies in two different class loaders.  If you know for sure a single class that must be in the same ClassLoader as the classes you are instantiating, it may make sense to get that one and cache it for all your uses.&lt;/p&gt;</comment>
                            <comment id="13248910" author="jcoveney" created="Fri, 6 Apr 2012 22:58:45 +0100"  >&lt;p&gt;Scott, I&apos;m cool doing the heavy lifting to get out 1.0, and comments like this are greatly appreciated. We talked about using Avro as well...I think it&apos;s a good idea. I think it&apos;s probably a good idea for the next gen of this patch?&lt;/p&gt;

&lt;p&gt;I&apos;m more worried in the short term about your point about requiring the JDK... this has been brought up before. Do you think that would be prohibitive for people? I guess it could be an option people could set... but that seems annoying. Going the route of bytecode generation is probably where it should go, but...oy vey. I think that Avro+Bytecode would be a really awesome version 2.0.&lt;/p&gt;

&lt;p&gt;As far as the classloader issue, this sort of thing is where I am not as strong. Do you know of any good resources to read up on these sorts of issues?&lt;/p&gt;</comment>
                            <comment id="13249120" author="scott_carey" created="Sat, 7 Apr 2012 02:40:20 +0100"  >&lt;p&gt;I completely agree, for a 1.0 version, it doesn&apos;t need to be super slick.  &lt;/p&gt;

&lt;p&gt;This is a big move in the right direction for making Pig significantly more efficient, and this and Dmitry&apos;s prior work have exposed some warts that make these more difficult.  I really think the best way to move this forward is to get something out there that just works (although there will be a need to be able to turn it off).  We do want to make sure that it is as hidden as possible so that the implementation details can change going forward.&lt;/p&gt;

&lt;p&gt;I am hoping to have time to add some features to Avro that make using it for these type of use cases easier.  For example, Avro could operate directly on Pig Schemas without explicit translation if it had some rules on how to interpret them as a schema, and a framework for understanding such rules.&lt;/p&gt;

&lt;p&gt;The JRE/JDK thing is not a big deal for me at all, but is one of those things that tends to get someone somewhere complaining.  If the feature can be turned off easily, then that may be good enough.&lt;/p&gt;

&lt;p&gt;(aside)&lt;br/&gt;
If anyone has time to learn how to use ASM and dynamically generate classes for use cases like this, I&apos;m sure it would be useful to them in getting a job in the future.  Supply/demand and all that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13249324" author="julienledem" created="Sat, 7 Apr 2012 21:07:24 +0100"  >&lt;ul&gt;
	&lt;li&gt;Class loading:&lt;br/&gt;
The main issue issue I see is for long running process that execute many Pig queries. In that case Loading classes in the application ClassLoader would be a memory leak and they could possibly fill up the perm space. We don&apos;t really need the classes on the FrontEnd for the Map/Reduce execution mode, so the class definition can just be added to the job jar. If we want to use the generated tuples on the Frontend (for example for local mode) they can be generated in a location outside of the classpath (like a temporary folder). Then we can use a URLClassLoader pointing to this location. Discarding the classloader after the execution would let the garbage collector free up this memory. We can even extend ClassLoader so that bytes don&apos;t even have to be written to disk.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;ASM:&lt;br/&gt;
I looked into ASM and the corresponding eclipse plugin. It is pretty cool. You can take the class that was generated and ask the plugin to generate the ASM code that would do the same (not just the bytecode). That should make it relatively easy to move from java source generation to directly code generation.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;evolution of the generation and fail safe:&lt;br/&gt;
This should be hidden behing a factory so that it can be changed easily. Also if anything goes wrong with generation it should fall back to regular tuple. &lt;br/&gt;
The data storage format being modified is the intermediary format in between Pig jobs or for spills, so we don&apos;t need to maintain backward compatibility. Correct?&lt;br/&gt;
If we stick with javacode gen for the first version, it should be easy to check if javax.tools.JavaCompiler is present at runtime and fall back to regular tuples.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13249490" author="jiraposter@reviews.apache.org" created="Sun, 8 Apr 2012 08:20:27 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2012-04-08 07:19:58.096859)&lt;/p&gt;


&lt;p&gt;Review request for pig and Julien Le Dem.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Julien, this incorporates many of your comments, but not all. Mainly, it has the refactoring of the code. A couple existant issues:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The classloading is still janky. I&apos;m not quite sure what the best approach is&lt;/li&gt;
	&lt;li&gt;I need to figure out how to register the classes I generate in the jar manifest&lt;/li&gt;
	&lt;li&gt;because of the way the code is generated, protected fields don&apos;t quite work. The code doesn&apos;t have a package, so only public methods are available. I marked the classes it dependended on as private, but I don&apos;t know if that is enough. If it&apos;s a big issue, I guess the next thing to do is to figure out how to generate code in a specific package of my choice, and ideally, how to generate the class in memory and add to the jar.&lt;/li&gt;
	&lt;li&gt;And of course some finer points: I need to implement a raw comparator, etc&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But I&apos;d like to know if the general new structure works. Of course it&apos;s definitely a big time work in progress, but the comments really help.&lt;/p&gt;

&lt;p&gt;Lastly, I&apos;d like to know how this should interact with PrimitiveTuples. I still think there is a place for them (since SchemaTuples have to be generated on the front end but PrimitiveTuples do not), but the whole TupleFactory.newTupleForSchema thing is weird... I went with a TupleFactory.getInstanceForSchema(Schema) approach and liked it a lot more. another question is what to do when the Schema can&apos;t be generated... one option is to just return a tuple, and another is to fail out. IMHO we should fail out, and require people to ensure it&apos;s generatable, but I can see the argument otherwise. In general, for things like this, I think it&apos;s better to fail early and explicitly than to let people think they have a special Tuple when they don&apos;t. Philosophies may differ.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;

&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;

&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;

&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/bin/pig 1310666 &lt;br/&gt;
  trunk/build.xml 1310666 &lt;br/&gt;
  trunk/ivy.xml 1310666 &lt;br/&gt;
  trunk/ivy/libraries.properties 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/BinInterSedes.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/FieldIsNullException.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/PrimitiveTuple.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/SchemaTupleFactory.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/Tuple.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/TupleFactory.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/TypeAwareTuple.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/utils/SedesHelper.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/impl/PigContext.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1310666 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Jonathan&lt;/p&gt;
</comment>
                            <comment id="13249625" author="jiraposter@reviews.apache.org" created="Sun, 8 Apr 2012 23:28:16 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2012-04-08 22:26:29.313675)&lt;/p&gt;


&lt;p&gt;Review request for pig and Julien Le Dem.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Attached is a version that passes ant test-commit. Nothing too huge, mainly some fixes in the generated code and some other cleanups.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;

&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;

&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;

&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/bin/pig 1310666 &lt;br/&gt;
  trunk/build.xml 1310666 &lt;br/&gt;
  trunk/ivy.xml 1310666 &lt;br/&gt;
  trunk/ivy/libraries.properties 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/BinInterSedes.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/FieldIsNullException.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/PrimitiveTuple.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/SchemaTupleFactory.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/data/Tuple.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/TupleFactory.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/TypeAwareTuple.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/data/utils/SedesHelper.java PRE-CREATION &lt;br/&gt;
  trunk/src/org/apache/pig/impl/PigContext.java 1310666 &lt;br/&gt;
  trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1310666 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Jonathan&lt;/p&gt;
</comment>
                            <comment id="13249683" author="jiraposter@reviews.apache.org" created="Mon, 9 Apr 2012 06:35:17 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/#review6784&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#review6784&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15009&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15009&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    instead of checking here if the tuple is generatable, the factory could default to the regular TupleFactory if the generation fails. &lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15010&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15010&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    How complex is this class ? Not sure it is worth pulling the whole mahout just for this.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15011&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    append...() methods should not be null&lt;br/&gt;
    (part of your TODO list?)&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15013&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15013&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    handle the case where other == null&lt;br/&gt;
    Here you get NullPointerException&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15014&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15014&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same comment&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15015&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15015&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    If you override equals(), you should override hashCode(). 2 object that are equal must return the same hashcode&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/TupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15052&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15052&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    that&apos;s where we need a proper classloader&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15016&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15016&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    try avoiding accessing the PigContext statically. Add it as a parameter and see if it can be passed from somewhere it is actually known.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15017&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15017&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    possibly we want to rename this and/or add something else for this file.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15018&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15018&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    ?&lt;br/&gt;
    either get rid of the empty catch block or document why it is Ok.&lt;/p&gt;

&lt;p&gt;    Here I don&apos;t see why it would be Ok that we can not instantiate that class&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15019&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15019&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    &quot;org.apache.pig.generated.&quot; + classname ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15020&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15020&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    &quot;org/apache/pig/generated/&quot; + classname + &quot;.class&quot; ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15021&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15021&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    we should probably not compile in the current dir.&lt;br/&gt;
    Put it in the temp dir intead&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15022&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15022&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this could be calling a method in the parent&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15023&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15023&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this could be in the parent&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15024&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15024&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    stuff which is not calling a generated field directly should be pulled up.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15025&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15025&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same comment&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15026&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15026&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15027&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15027&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this is wasteful. Maybe DataByteArray could provide a static compare(byte[], byte[]) ?&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15028&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15028&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    duplicated code&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15029&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15029&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this can be pulled up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15030&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15030&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    the exception handling can be pulled up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15031&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15031&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    &quot;setPos_&quot; + fieldPos + &quot;((Boolean)val);&quot;&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15032&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15032&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same with a mapping for the java object for the type &lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15033&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15033&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    can be pulled up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15034&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15034&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    you can just remove the call to box, it should work&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15035&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15035&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this can be pulled up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15036&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15036&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    can be pulled up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15037&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15037&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    can be pulled up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15038&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15038&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    pull up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15039&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15039&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    pull up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15040&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15040&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    pull up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15041&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15041&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    pull up&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15042&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15042&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    pull up&lt;/p&gt;




&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15043&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15043&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Ok, temporary&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15044&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15044&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    do we need this. Let&apos;s just fall back to regular tuple when generation fails, so that we don&apos;t need to keep those in sync&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15045&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15045&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    The factory could be generated as well so that we don&apos;t need to use reflection here.&lt;br/&gt;
    Reflection is slower to create new instances.&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15046&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15046&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    The parameter type is enough to differentiate.&lt;br/&gt;
    getSchemaTupleFactory(Schema schema)&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15047&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15047&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15048&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15048&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    getTupleClass()&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15049&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15049&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    getTupleClass()&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15050&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15050&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    getTupleClass()&lt;/p&gt;



&lt;p&gt;trunk/src/org/apache/pig/data/Tuple.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/#comment15051&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#comment15051&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    typo&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Julien&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2012-04-08 22:26:29, Jonathan Coveney wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2012-04-08 22:26:29)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for pig and Julien Le Dem.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/bin/pig 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/build.xml 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/ivy.xml 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/ivy/libraries.properties 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/BinInterSedes.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/FieldIsNullException.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/PrimitiveTuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/Tuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TupleFactory.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TypeAwareTuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/utils/SedesHelper.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/impl/PigContext.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13249921" author="jiraposter@reviews.apache.org" created="Mon, 9 Apr 2012 17:27:16 +0100"  >

&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks again for taking a look Julien! I think we are close to having the structure where we want it, there are just a couple of outstanding higher level points:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;How should PigContext be referenced?&lt;/li&gt;
	&lt;li&gt;How should the intermediate compiled data be handle?&lt;/li&gt;
	&lt;li&gt;What should the semantics of getting a SchemaTupleFactory be?&lt;/li&gt;
	&lt;li&gt;Generating the SchemaTupleFactory so it can directly instantiate the given SchemaTuple&lt;/li&gt;
	&lt;li&gt;What should and shouldn&apos;t be in the generated code&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And probably some more. I responded below, and hopefully we can keep honing in on something that looks good &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, lines 135-136&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1-3/?file=100075#file100075line135&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1-3/?file=100075#file100075line135&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     instead of checking here if the tuple is generatable, the factory could default to the regular TupleFactory if the generation fails.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t know that I like that semantic though. In this case, in the client code it&apos;s clear that they know that they either are or are not getting a SchemaTupleFactory... if we default to a regular TupleFactory, then we might think we are getting a SchemaTuple (and all the speed and memory benefits) when we actually aren&apos;t. There are two cases where we would ask for a SchemaTupleFactory and it wouldn&apos;t be available: a Pig bug in our implementation, or user error. Shouldn&apos;t pig fail out intelligently instead of giving them a Factory that doesn&apos;t do what they think?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 31&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line31&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line31&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     How complex is this class ? Not sure it is worth pulling the whole mahout just for this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s very not complicated. I&apos;ll put the logic into SedesHelper.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 84&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line84&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line84&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     append...() methods should not be null&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     (part of your TODO list?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure what you mean here&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 550&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line550&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line550&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     handle the case where other == null&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Here you get NullPointerException&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;good call, will fix everywhere&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 662&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line662&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line662&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     If you override equals(), you should override hashCode(). 2 object that are equal must return the same hashcode&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;whoops, I thought I had. will do&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 64&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line64&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line64&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     try avoiding accessing the PigContext statically. Add it as a parameter and see if it can be passed from somewhere it is actually known.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In the pig code that I looked at, this seemed by far the more common idiom (not that I love it, but it&apos;s pretty hard to get the PigContext in there). I can&apos;t really find a single example of code in this sort of path that doesn&apos;t get the PigContext statically. I could rewire Pig to try and make this possible, but do you think that it is worth it/do you see any examples in the code base that I missed where PigContext isn&apos;t called statically in this sort of case? There are some examples of more purely front end things, and that&apos;s how I&apos;d pipe it in I suppose, but it seems like a big change for something that barely touches the codebase. I do think a JIRA that tackles this issue in pig is reasonable though... trying to decrease the amount of statically referenced jank. Await your thoughts.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 71&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line71&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line71&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     possibly we want to rename this and/or add something else for this file.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Question about class files: does a class file have to have the same name as the class it contains? I know this is true for .java files with the java compiler, but not sure if it is true of class files. If it is true of class files, then we can&apos;t muck with the name. If it isn&apos;t, then ok.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, lines 86-87&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line86&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line86&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     either get rid of the empty catch block or document why it is Ok.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Here I don&apos;t see why it would be Ok that we can not instantiate that class&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, the idea was that if you couldn&apos;t instantiate you&apos;d regenerate, but looking at it now you&apos;re right; it is odd that if we think we have the class, that we cannot instantiate it. I&apos;ll throw a runtime error.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 127&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line127&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line127&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &quot;org.apache.pig.generated.&quot; + classname ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Java question: if we&apos;re managing the compilation, does the compiled class have to be in org/apache/pig/generated (or whatever) in the file directory?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 138&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line138&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line138&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &quot;org/apache/pig/generated/&quot; + classname + &quot;.class&quot; ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What&apos;s the win here? Or just general cleanliness?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 140&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line140&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line140&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     we should probably not compile in the current dir.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Put it in the temp dir intead&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I will see if this is possible. Do you know if Pig has an official local temp directory? I found an hdfs temp directory flag, but couldn&apos;t find a local one.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 322&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line322&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line322&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this is wasteful. Maybe DataByteArray could provide a static compare(byte[], byte[]) ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Lol, I checked and it exists. Will use.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, lines 265-269&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line265&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     stuff which is not calling a generated field directly should be pulled up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t know that I agree with this. Then we&apos;re going to have a bunch of really random methods that have no context getting called for no real reason (I guess so that the compiler will run it&apos;s checks instead of getting an error at compile time)? Some of the logic makes more sense to do this with (the comparison of appends above, for example), but do you think the win for highly specific pieces of code like this is worth it?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, lines 392-396&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line392&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line392&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     the exception handling can be pulled up&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Same as above. Should it really be our goal to move everything humanly possible into SchemaTuple?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 518&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line518&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line518&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     same with a mapping for the java object for the type&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure what you want the code to look like here. If you want to explicitly do all the casts, it will make the generated code bigger, and would seem to contradict your suggestion to call as much from SchemaTuple as possible?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 559&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line559&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line559&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     you can just remove the call to box, it should work&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good call&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleFactory.java, line 42&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100953#file100953line42&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100953#file100953line42&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     do we need this. Let&apos;s just fall back to regular tuple when generation fails, so that we don&apos;t need to keep those in sync&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;See above.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleFactory.java, line 59&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100953#file100953line59&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100953#file100953line59&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     The factory could be generated as well so that we don&apos;t need to use reflection here.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Reflection is slower to create new instances.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I didn&apos;t realize that doing Class.newInstance was slower than direct creation. I&apos;ll generate it.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/#review6784&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#review6784&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2012-04-08 22:26:29, Jonathan Coveney wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2012-04-08 22:26:29)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for pig and Julien Le Dem.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/bin/pig 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/build.xml 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/ivy.xml 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/ivy/libraries.properties 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/BinInterSedes.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/FieldIsNullException.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/PrimitiveTuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/Tuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TupleFactory.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TypeAwareTuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/utils/SedesHelper.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/impl/PigContext.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13250139" author="jiraposter@reviews.apache.org" created="Mon, 9 Apr 2012 21:17:15 +0100"  >

&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks again for taking a look Julien! I think we are close to having the structure where we want it, there are just a couple of outstanding higher level points:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- How should PigContext be referenced?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- How should the intermediate compiled data be handle?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- What should the semantics of getting a SchemaTupleFactory be?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- Generating the SchemaTupleFactory so it can directly instantiate the given SchemaTuple&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- What should and shouldn&apos;t be in the generated code&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;And probably some more. I responded below, and hopefully we can keep honing in on something that looks good &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;How should PigContext be referenced?&lt;br/&gt;
We can leave it as is for now. It sounds like it&apos;s too big a refactor to be done in this patch&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;How should the intermediate compiled data be handle?&lt;br/&gt;
For generated java code, I would say that the classes are generated in a temp directory and we use a URLClassLoader on the Frontend to access them. On the backend the class are just added to the job jar.&lt;br/&gt;
Once we move to generated bytecode then don&apos;t need to write the bytecode to disk and can just define() classes in a custom classloader.&lt;br/&gt;
In both cases if we don&apos;t hold a reference to the classloader or the classes they will be collected once we are done using them.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What should the semantics of getting a SchemaTupleFactory be?&lt;br/&gt;
There are multiple places this could be used:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;LoadFunc and EvalFunc: possibly through a getOutputTupleFactory() added to the base classes.&lt;/li&gt;
	&lt;li&gt;Spill of bags&lt;/li&gt;
	&lt;li&gt;Pig intermediary storage.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Generating the SchemaTupleFactory so it can directly instantiate the given SchemaTuple&lt;br/&gt;
The only thing you need is a subclass with an instantiate() implementation that directly calls the constructor.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What should and shouldn&apos;t be in the generated code&lt;br/&gt;
The generated code should only have the parts that depend on &quot;field_&quot;+i and related methods and switch statements. Everything else should be in the parent. the default: cases of the switch statements can call super.set...() to handle the default case with the &quot;append&quot; tuple.&lt;br/&gt;
This will make it easier to switch to bytecode generation.&lt;/li&gt;
&lt;/ul&gt;



&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java, lines 135-136&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1-3/?file=100075#file100075line135&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1-3/?file=100075#file100075line135&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     instead of checking here if the tuple is generatable, the factory could default to the regular TupleFactory if the generation fails.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I don&apos;t know that I like that semantic though. In this case, in the client code it&apos;s clear that they know that they either are or are not getting a SchemaTupleFactory... if we default to a regular TupleFactory, then we might think we are getting a SchemaTuple (and all the speed and memory benefits) when we actually aren&apos;t. There are two cases where we would ask for a SchemaTupleFactory and it wouldn&apos;t be available: a Pig bug in our implementation, or user error. Shouldn&apos;t pig fail out intelligently instead of giving them a Factory that doesn&apos;t do what they think?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It depends how the generated factory gets used. My idea was to make sure we don&apos;t break existing scripts and to have a fallback solution in case of problems. But if you have to explicitly use the new factory then maybe it is fine.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTuple.java, line 84&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line84&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/1-3/?file=100078#file100078line84&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     append...() methods should not be null&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     (part of your TODO list?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Not sure what you mean here&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, I meant: should not be &lt;b&gt;public&lt;/b&gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 64&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line64&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line64&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     try avoiding accessing the PigContext statically. Add it as a parameter and see if it can be passed from somewhere it is actually known.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In the pig code that I looked at, this seemed by far the more common idiom (not that I love it, but it&apos;s pretty hard to get the PigContext in there). I can&apos;t really find a single example of code in this sort of path that doesn&apos;t get the PigContext statically. I could rewire Pig to try and make this possible, but do you think that it is worth it/do you see any examples in the code base that I missed where PigContext isn&apos;t called statically in this sort of case? There are some examples of more purely front end things, and that&apos;s how I&apos;d pipe it in I suppose, but it seems like a big change for something that barely touches the codebase. I do think a JIRA that tackles this issue in pig is reasonable though... trying to decrease the amount of statically referenced jank. Await your thoughts.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If it requires too much refactoring let&apos;s not do it in this patch&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 71&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line71&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line71&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     possibly we want to rename this and/or add something else for this file.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Question about class files: does a class file have to have the same name as the class it contains? I know this is true for .java files with the java compiler, but not sure if it is true of class files. If it is true of class files, then we can&apos;t muck with the name. If it isn&apos;t, then ok.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes the .class file should have the same name as the class it contains and the package name should match the path to the file.&lt;/p&gt;

&lt;p&gt;if addScriptFile() is not specific to scripts it should be renamed.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 127&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line127&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line127&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &quot;org.apache.pig.generated.&quot; + classname ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Java question: if we&apos;re managing the compilation, does the compiled class have to be in org/apache/pig/generated (or whatever) in the file directory?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, the relative path to the class from the root given to the classloader (path or jar) should match the package of the class.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 138&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line138&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line138&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &quot;org/apache/pig/generated/&quot; + classname + &quot;.class&quot; ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;What&apos;s the win here? Or just general cleanliness?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So that you have your own namespace to avoid conflicts and so that package protected members are visible.&lt;br/&gt;
Actually, this should be the same package as your base class.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 140&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line140&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line140&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     we should probably not compile in the current dir.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Put it in the temp dir intead&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I will see if this is possible. Do you know if Pig has an official local temp directory? I found an hdfs temp directory flag, but couldn&apos;t find a local one.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You can ask java to give you temporary files. You can reuse the path for a temporary directory.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, lines 265-269&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line265&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     stuff which is not calling a generated field directly should be pulled up.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I don&apos;t know that I agree with this. Then we&apos;re going to have a bunch of really random methods that have no context getting called for no real reason (I guess so that the compiler will run it&apos;s checks instead of getting an error at compile time)? Some of the logic makes more sense to do this with (the comparison of appends above, for example), but do you think the win for highly specific pieces of code like this is worth it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The idea is to make it a simple as possible for when we switch to bytecode generation. Agreed they should have meaningful names so that could be on a case by case basis. Use your best judgement &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, lines 392-396&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line392&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line392&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     the exception handling can be pulled up&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Same as above. Should it really be our goal to move everything humanly possible into SchemaTuple?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It will make bytecode generation easier. If it gets a little too extreme we can make exceptions.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2012-04-09 05:34:39, Julien Le Dem wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java, line 518&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line518&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff/3/?file=100952#file100952line518&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     same with a mapping for the java object for the type&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Coveney wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Not sure what you want the code to look like here. If you want to explicitly do all the casts, it will make the generated code bigger, and would seem to contradict your suggestion to call as much from SchemaTuple as possible?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The unbox trick will not work in bytecode generation as you will have to explicitly provide the type.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Julien&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/4651/#review6784&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/#review6784&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2012-04-08 22:26:29, Jonathan Coveney wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/4651/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2012-04-08 22:26:29)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for pig and Julien Le Dem.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This work builds on Dmitriy&apos;s PrimitiveTuple work. The idea is that, knowing the Schema on the frontend, we can code generate Tuples which can be used for fun and profit. In rudimentary tests, the memory efficiency is 2-4x better, and it&apos;s ~15% smaller serialized (heavily heavily depends on the data, though). Need to do get/set tests, but assuming that it&apos;s on par (or even faster) than Tuple, the memory gain is huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Need to clean up the code and add tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Right now, it generates a SchemaTuple for every inputSchema and outputSchema given to UDF&apos;s. The next step is to make a SchemaBag, where I think the serialization savings will be really huge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Needs tests and comments, but I want the code to settle a bit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; title=&quot;Create a SchemaTuple which generates efficient Tuples via code gen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2632&quot;&gt;&lt;del&gt;PIG-2632&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2632&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-2632&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/bin/pig 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/build.xml 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/ivy.xml 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/ivy/libraries.properties 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POUserFunc.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/BinInterSedes.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/FieldIsNullException.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/PrimitiveTuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTuple.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleClassGenerator.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/SchemaTupleFactory.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/Tuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TupleFactory.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/TypeAwareTuple.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/data/utils/SedesHelper.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/impl/PigContext.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;trunk/src/org/apache/pig/newplan/logical/expression/UserFuncExpression.java 1310666 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/4651/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/4651/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13250473" author="dvryaboy" created="Tue, 10 Apr 2012 07:15:08 +0100"  >&lt;p&gt;you know guys,&lt;br/&gt;
at this point, I am starting to think we might as well generate auxillary methods like getFieldByName(String fieldName) .. and the whole thing starts looking a lot like protocol buffers.&lt;/p&gt;

&lt;p&gt;Remind me &amp;#8211; why aren&apos;t we just using dynamic protocol buffers?&lt;/p&gt;</comment>
                            <comment id="13250477" author="dvryaboy" created="Tue, 10 Apr 2012 07:21:22 +0100"  >&lt;p&gt;Before Jon kills me: one reason we aren&apos;t doing dynamic protobufs is that they might be slower, not having structures optimized for the represented schemas. Generated protobufs might be as efficient, or more so, but need the protoc binary installed, which is clearly too heavy a requirement.&lt;/p&gt;</comment>
                            <comment id="13250479" author="jcoveney" created="Tue, 10 Apr 2012 07:33:31 +0100"  >&lt;p&gt;Haha, I won&apos;t kill anyone if we find a better approach. I&apos;ve learned a ton in the implementation, and I think that it has gotten some momentum in order to help optimize pig.&lt;/p&gt;

&lt;p&gt;I assume protoc has some whacky license that makes it unreasonable? Or is it just a jar size thing?&lt;/p&gt;</comment>
                            <comment id="13250481" author="jcoveney" created="Tue, 10 Apr 2012 08:03:43 +0100"  >&lt;p&gt;One last note: implementing getfield(String) would be trivial at this point. The only reason I haven&apos;t done so yet is because right now there is a debate about how strict we should be w.r.t. Schema -&amp;gt; SchemaTuple (ie should &quot;a:int,b:int&quot; really generate a different class than &quot;x:int,y:int&quot;? maybe!), but it would be very easy to add.&lt;/p&gt;

&lt;p&gt;But I&apos;m open to suggestions about using another route.&lt;/p&gt;</comment>
                            <comment id="13250706" author="dvryaboy" created="Tue, 10 Apr 2012 15:50:51 +0100"  >&lt;p&gt;that&apos;s a good point, actually. What would we get from &lt;b&gt;not&lt;/b&gt; making them different classes? I mean, if we were actually writing these classes and maintaining them in the codebase, the gain is obvious. But when they are generated and discarded on the fly.. why not?&lt;/p&gt;</comment>
                            <comment id="13250831" author="scott_carey" created="Tue, 10 Apr 2012 18:14:59 +0100"  >&lt;blockquote&gt;
&lt;p&gt;should &quot;a:int,b:int&quot; really generate a different class than &quot;x:int,y:int&quot;? maybe!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;They could be the same class, but both support getField(String) if the constructor took a reference to the Schema that has the field name details or a datastructure that maps fields names to indexes.  That isn&apos;t trivial though, and again its something that Avro could give you for free.   &lt;/p&gt;

&lt;p&gt;I think ironing out the kinks here before going for extra features is the way to go, we can leverage other tools for advanced features in a later version.&lt;/p&gt;


&lt;p&gt;I will review more late this week or next week.  &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.mahout.math.Varint;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am not a fan of requiring another library on my already crowded hadoop classpath that might have interesting version conflicts.  Is mahout already required by Pig? Doesn&apos;t hadoop have a variable length int already for some of its file formats?  &lt;/p&gt;</comment>
                            <comment id="13250837" author="jcoveney" created="Tue, 10 Apr 2012 18:18:17 +0100"  >&lt;p&gt;I agree 100% that it&apos;s time to iron out kinks. Just trying to figure out what those kinks are, realy.&lt;/p&gt;

&lt;p&gt;As far as Varint, I went ahead and just included the logic directly. It&apos; 8 ~3 line functions, not worth the dependency.&lt;/p&gt;</comment>
                            <comment id="13250845" author="dvryaboy" created="Tue, 10 Apr 2012 18:24:46 +0100"  >&lt;p&gt;remember to attribute the code to mahout project by adding a notice to NOTICE.txt&lt;/p&gt;

&lt;p&gt;Scott, does Avro have a java generator or is it c-based, like protobufs and thrift (Jon &amp;#8211; the reason protoc is a heavy dependency is that it&apos;s a c binary, not a jar).&lt;/p&gt;</comment>
                            <comment id="13250853" author="jcoveney" created="Tue, 10 Apr 2012 18:32:39 +0100"  >&lt;p&gt;Ah, gotcha.&lt;/p&gt;

&lt;p&gt;As far as the NOTICE.txt, I don&apos;t see any other apache products in there? Is it necessary to include Apache projects in the NOTICE? I didn&apos;t think that it is necessary. This FAQ seems to agree but I am deeply ignorant on licensing issues:&lt;br/&gt;
&lt;a href=&quot;http://www.apache.org/dev/release.html#notice-content&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/dev/release.html#notice-content&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guess the question is if Mahout took it from somewhere else?&lt;/p&gt;</comment>
                            <comment id="13250857" author="julienledem" created="Tue, 10 Apr 2012 18:36:07 +0100"  >&lt;p&gt;By design Avro defines the binary format and the schema as the reference; not the code generator.&lt;br/&gt;
There is a code generator in java.&lt;br/&gt;
Avro also supports &quot;dynamic&quot; serialization/deserialization so that you can read/write without generating the code.&lt;/p&gt;</comment>
                            <comment id="13250999" author="scott_carey" created="Tue, 10 Apr 2012 20:38:07 +0100"  >&lt;p&gt;Avro has a pure Java code generator that uses the Velocity template engine.  The bulit-in templates produce SpecificRecord objects with builder-pattern semantics.  Custom templates can be loaded from a classpath, so you can convert a schema to whatever you wish &amp;#8211; java source, yaml, c#, etc.&lt;/p&gt;

&lt;p&gt;The challenge with Pig and Avro for this use case is transforming a o.a.pig.Schema into an o.a.a.Schema.  However, there is source code that does this at: &lt;a href=&quot;https://issues.apache.org/jira/browse/AVRO-592&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/AVRO-592&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any future bytecode generation would resemble the template approach &amp;#8211; a schema would decorate a (source code template / byte code fragments) to produce an output.  Both would call pre-existing methods on a superclass that does most of the work.  Refining a template to be as small and simple as possible corresponds with refining bytecode generation to do the minimum necessary.&lt;/p&gt;
</comment>
                            <comment id="13252609" author="julienledem" created="Thu, 12 Apr 2012 18:16:22 +0100"  >&lt;p&gt;@Jonathan: regarding bit manipulation in the patch, you might want to use java.util.BitSet&lt;/p&gt;</comment>
                            <comment id="13280661" author="jcoveney" created="Tue, 22 May 2012 02:02:51 +0100"  >&lt;p&gt;Powerpoint?! What is this, Wall Street? I know, I know. But we thought it would be instructive to benchmark SchemaTuple versus the existing Tuple implementations (namely Tuple and PrimitiveTuple) to see what sort of gains are possible.&lt;/p&gt;

&lt;p&gt;If the schema type wasn&apos;t mentioned, it&apos;s a long. In general it was all done with longs (for ease), except in the case of serialization where the long/int difference made a pretty big difference.&lt;/p&gt;

&lt;p&gt;Some results:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It takes a depressingly long time to make a tuple with a given size. Well, depressing being on a pretty small order, but it&apos;s because with a new Tuple of a given size it nulls out those values. We could alleviate this, but I don&apos;t know if the code complexity/slightly increased memory footprint would be worth it.&lt;/li&gt;
	&lt;li&gt;In general, the PrimitiveTuple performance is poor (though it does have a decreased memory footprint). There are some enhancements that would make it faster, but I think that SchemaTuple will end up making it completely obsolete.&lt;/li&gt;
	&lt;li&gt;The values that were set or serialized started at 0 and went up depending on how many values google calipers gave it. This was especially important for the size on disk of serialized values: SchemaTuple uses Varint, so obviously for smaller values it&apos;s going to be more compact. However, more of note, is that Tuple storage for longs is really really large. We can optimize it (I have a patch that does, but need to test the speed implications). After SchemaTuple will probably come SchemaBag, but after that will come some changes to serialization at the suggestion of Scott Carey that could be really huge.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But basically, SchemaTuple is better than Tuples in every way (that it applies). The current patch uses it where it is possible with UDF&apos;s, but patch 1 will probably just be their existence (and perhaps using it with UDF&apos;s where the Schema is known), and then I&apos;ll incrementally add it (first candidate would be joins or anything internal to pig&#8230;the memory and speed benefits should be very beneficial).&lt;/p&gt;</comment>
                            <comment id="13281070" author="jcoveney" created="Tue, 22 May 2012 17:12:52 +0100"  >&lt;p&gt;Hmm, so I was testing my benchmarks, and the Varint/varlong CPU cost is higher than the benchmark was capturing. For large longs, the it can be even 3-4x slower (this came out of work for &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2638&quot; title=&quot;Optimize BinInterSedes treatment of longs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2638&quot;&gt;&lt;del&gt;PIG-2638&lt;/del&gt;&lt;/a&gt;, and in that case I came up with a method that should give the same benefit and be more performant, but it won&apos;t apply to this case). I may just switch to simple &quot;store the whole long&quot; and hope intermediate compression is turned on and effective, but that seems unsatisfying to me. Will ruminate on that. Perhaps this is the part where Scott says Pig should use Avro for the intermediate serialization again &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13281099" author="julienledem" created="Tue, 22 May 2012 17:52:33 +0100"  >&lt;p&gt;Hi Jonathan,&lt;br/&gt;
This is all great, I would tend to leave the varint aside in separate JIRA for now.&lt;br/&gt;
There is enough work in this one already.&lt;/p&gt;</comment>
                            <comment id="13292560" author="jcoveney" created="Sun, 10 Jun 2012 20:13:13 +0100"  >&lt;p&gt;Oh snap! An update! Indeed. The code and logic are much cleaner, and it &lt;sub&gt;works&lt;/sub&gt;. Well, mostly. In order to turn it on, you need to set the key &quot;pig.schematuple&quot; to be true. In distributed mode, it distributes generated code via the distributed cache. I have some documentation, but will work on adding more. I think it&apos;s at a point where it could use some eyes.&lt;/p&gt;

&lt;p&gt;One big issue is that you currently can&apos;t group on a SchemaTuple. This is actually a known limitation, and there are comments in Pig that UDF&apos;s have to emit a Tuple. Frustratingly, even though TupleFactory as a &quot;tupleRawComparatorClass,&quot; it only works with default Tuples, and this assumption is baked into the code. There are a couple of ways to deal with this...&lt;/p&gt;

&lt;p&gt;1) Change the default Tuple comparator so that it works with any sort of tuple.&lt;br/&gt;
2) Make it so that Tuples can return an instance of the factory that generated them, which could then be used to get the proper comparator... or something like that. The general idea being better (and by better I mean not-nonexistent) support for custom implementations of core types.&lt;/p&gt;

&lt;p&gt;I think 2 is the way to go because as things are, 1 will not be easy to do and would share a lot in common with 2. 2 is nontrivial, but will open the door to the big one I&apos;m leading up to: a bag that is schema aware. That is when the gains go from great to massive.&lt;/p&gt;

&lt;p&gt;Another next step is to get joins to work with this, but I want to deal with the above issues.&lt;/p&gt;</comment>
                            <comment id="13292565" author="dvryaboy" created="Sun, 10 Jun 2012 20:25:09 +0100"  >&lt;p&gt;RB?&lt;/p&gt;</comment>
                            <comment id="13292579" author="jcoveney" created="Sun, 10 Jun 2012 21:31:09 +0100"  >&lt;p&gt;Ok, nix the kvetching. With some relatively minor fixes I was able to get support for grouping! Also, I had forgotten to roll back changes to TestPigServer which I had made for personal testing.&lt;/p&gt;

&lt;p&gt;One day the comparator could still be much faster, but this should be at least as performant as the current implementation (probably moreso since deserialization should be faster), and you get the memory gains.&lt;/p&gt;</comment>
                            <comment id="13292580" author="jcoveney" created="Sun, 10 Jun 2012 21:31:42 +0100"  >&lt;p&gt;dmitriy: reviews.apache.org is down for me...has been all day :/&lt;/p&gt;</comment>
                            <comment id="13292590" author="jcoveney" created="Sun, 10 Jun 2012 22:43:44 +0100"  >&lt;p&gt;I added the apache headers to new files.&lt;/p&gt;</comment>
                            <comment id="13292893" author="jcoveney" created="Mon, 11 Jun 2012 18:15:36 +0100"  >&lt;p&gt;Guys, reviews.apache.org has been down for a while it looks like, and I don&apos;t know how long it will take for it to come back up, so I made a pull request against the apache pig github. Obviously it won&apos;t be committed via github, but it provides an easy to see and markdown diff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/pig/pull/3/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/pig/pull/3/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13292912" author="jcoveney" created="Mon, 11 Jun 2012 18:39:29 +0100"  >&lt;p&gt;whoops, here is a version without the whitespace changes:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/pig/pull/4&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/pig/pull/4&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13293108" author="jcoveney" created="Mon, 11 Jun 2012 22:36:36 +0100"  >&lt;p&gt;I updated the pull request with a minor change, attaching patch.&lt;/p&gt;</comment>
                            <comment id="13396998" author="scott_carey" created="Tue, 19 Jun 2012 20:21:41 +0100"  >&lt;p&gt;I can&apos;t seem to be able to view the powerpoint.  On a mac, all slides display as blank.  Importing it into google docs also shows them blank.  I was hoping to export to pdf format from there.  Can you save it as a different format?  Older powerpoint formats or pdf will probably work.&lt;/p&gt;</comment>
                            <comment id="13397034" author="jcoveney" created="Tue, 19 Jun 2012 21:12:15 +0100"  >&lt;p&gt;Scott, I attached a pdf. Note: I think the serializing times (if they&apos;re still in there) aren&apos;t representative, as I didn&apos;t use the FSDataOutputStream. I haven&apos;t bothered to redo because I know the gain is significant, and would rather focus on shipping.&lt;/p&gt;

&lt;p&gt;Would love your thoughts.&lt;/p&gt;</comment>
                            <comment id="13397076" author="scott_carey" created="Tue, 19 Jun 2012 22:23:39 +0100"  >&lt;p&gt;Thanks, I can read the pdf fine. &lt;br/&gt;
Yeah, optimizing the serialization performance and size can be done in another ticket.  Refactoring that helps separate that from other concerns would help people like myself contribute to that with minimal entanglement as well.&lt;br/&gt;
Code gen by itself is big enough for this ticket &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13397254" author="jcoveney" created="Wed, 20 Jun 2012 05:29:41 +0100"  >&lt;p&gt;see reviewboard as well&lt;/p&gt;</comment>
                            <comment id="13397255" author="jcoveney" created="Wed, 20 Jun 2012 05:30:20 +0100"  >&lt;p&gt;Scott: totally agree.&lt;/p&gt;

&lt;p&gt;In general: what do we think needs to be done before this can be committed? Would be very helpful.&lt;/p&gt;</comment>
                            <comment id="13404226" author="jcoveney" created="Fri, 29 Jun 2012 22:22:06 +0100"  >&lt;p&gt;Updated patch, and I updated reviewboard.&lt;/p&gt;</comment>
                            <comment id="13404239" author="daijy" created="Fri, 29 Jun 2012 22:43:56 +0100"  >&lt;p&gt;Does not compile. Seems you miss TupleMaker.java?&lt;/p&gt;</comment>
                            <comment id="13404257" author="jcoveney" created="Fri, 29 Jun 2012 22:55:01 +0100"  >&lt;p&gt;Argh. Good catch, Daniel. the currently git -&amp;gt; reviewboard is very frustrating, hopefully they&apos;ll respond to the INFRA patch soon! Thanks for the heads up &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13406044" author="jcoveney" created="Tue, 3 Jul 2012 21:59:27 +0100"  >&lt;p&gt;Julien +1&apos;d on reviewboard (didn&apos;t +1 here because JIRA has been down for people). Revision is: r�1356921. I will add more documentation in a separate patch. This is TURNED OFF by default so should be invisible to existing jobs.&lt;/p&gt;</comment>
                            <comment id="13408293" author="daijy" created="Fri, 6 Jul 2012 21:34:22 +0100"  >&lt;p&gt;Thinking of several possible enhancements:&lt;br/&gt;
1. Use SchemaTuple in POForEach when schema is known&lt;br/&gt;
2. Combine Dmitriy&apos;s lazy tuple implementation&lt;/p&gt;</comment>
                            <comment id="13411050" author="daijy" created="Wed, 11 Jul 2012 00:19:33 +0100"  >&lt;p&gt;Several unit tests are broken by this patch:&lt;br/&gt;
TestEmptyInputDir&lt;br/&gt;
TestFRJoin&lt;br/&gt;
TestFRJoinNullValue&lt;br/&gt;
TestMergeJoin&lt;br/&gt;
TestNumberOfReducers&lt;br/&gt;
TestPhyPatternMatch&lt;br/&gt;
TestScriptLanguage&lt;/p&gt;

&lt;p&gt;Jonathan, do you have time to take a look?&lt;/p&gt;</comment>
                            <comment id="13412470" author="jcoveney" created="Thu, 12 Jul 2012 03:44:12 +0100"  >&lt;p&gt;Daniel,&lt;/p&gt;

&lt;p&gt;1) I agree that there are a lot of great places to use this. Next on my plate is using it with LoadFuncs and Foreaches, and then ideally Bag support (which I do not think would be difficult at all, just need some time). I hadn&apos;t thought about lazy tuples &amp;#8211; need to take a look at his code.&lt;br/&gt;
2) I submitted a patch fixing the MergeJoin errors, and have time to look at the rest. Do you know if any of the others were fixed by that fix? I hate the flakiness of the full test suite, hard to know what is and isn&apos;t a false positive!&lt;/p&gt;</comment>
                            <comment id="13412475" author="rohini" created="Thu, 12 Jul 2012 04:08:16 +0100"  >&lt;p&gt;TestSchemaTuple.java is broken for Hadoop 23/2.0.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
reader.initialize(is, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TaskAttemptContext(conf, taskId)); 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should be&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
reader.initialize(is, HadoopShims.createTaskAttemptContext(conf, taskId)); 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13412571" author="daijy" created="Thu, 12 Jul 2012 08:03:02 +0100"  >&lt;p&gt;Hi, Jonathan,&lt;br/&gt;
Where is the fix for MergeJoin? I can run the tests to see how many it fixes.&lt;/p&gt;</comment>
                            <comment id="13413013" author="jcoveney" created="Thu, 12 Jul 2012 19:00:59 +0100"  >&lt;p&gt;Daniel,&lt;/p&gt;

&lt;p&gt;I thought that the tests had already run. I checked in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2806&quot; title=&quot;Fix merge join test regression&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2806&quot;&gt;&lt;del&gt;PIG-2806&lt;/del&gt;&lt;/a&gt;, but will check locally what&apos;s still broken and fix it.&lt;/p&gt;

&lt;p&gt;Rohini,&lt;/p&gt;

&lt;p&gt;Thanks. Easy fix, will update accordingly.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12553220">PIG-2673</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12549432">PIG-2633</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12521249" name="PIG-2632-0.patch" size="56566" author="jcoveney" created="Wed, 4 Apr 2012 01:31:56 +0100"/>
                            <attachment id="12521426" name="PIG-2632-1.patch" size="70474" author="jcoveney" created="Thu, 5 Apr 2012 01:01:40 +0100"/>
                            <attachment id="12534054" name="PIG-2632-10.patch" size="326324" author="jcoveney" created="Fri, 29 Jun 2012 22:55:33 +0100"/>
                            <attachment id="12534043" name="PIG-2632-10.patch" size="325936" author="jcoveney" created="Fri, 29 Jun 2012 22:22:06 +0100"/>
                            <attachment id="12521897" name="PIG-2632-3.patch" size="102772" author="jcoveney" created="Sun, 8 Apr 2012 23:18:19 +0100"/>
                            <attachment id="12531611" name="PIG-2632-4.patch" size="224706" author="jcoveney" created="Sun, 10 Jun 2012 20:16:04 +0100"/>
                            <attachment id="12531615" name="PIG-2632-5.patch" size="227549" author="jcoveney" created="Sun, 10 Jun 2012 21:31:09 +0100"/>
                            <attachment id="12531618" name="PIG-2632-6.patch" size="237128" author="jcoveney" created="Sun, 10 Jun 2012 22:43:44 +0100"/>
                            <attachment id="12531729" name="PIG-2632-7.patch" size="241310" author="jcoveney" created="Mon, 11 Jun 2012 22:36:36 +0100"/>
                            <attachment id="12532356" name="PIG-2632-8.patch" size="248232" author="jcoveney" created="Mon, 18 Jun 2012 02:39:22 +0100"/>
                            <attachment id="12532645" name="PIG-2632-9.patch" size="290460" author="jcoveney" created="Wed, 20 Jun 2012 05:35:35 +0100"/>
                            <attachment id="12532643" name="PIG-2632-9.patch" size="68374" author="jcoveney" created="Wed, 20 Jun 2012 05:29:41 +0100"/>
                            <attachment id="12532601" name="schematuple benchmarking.pdf" size="71439" author="jcoveney" created="Tue, 19 Jun 2012 21:12:15 +0100"/>
                            <attachment id="12528542" name="schematuple benchmarking.pptx" size="106255" author="jcoveney" created="Tue, 22 May 2012 02:02:51 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 4 Apr 2012 15:33:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>234421</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyaybz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97873</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>