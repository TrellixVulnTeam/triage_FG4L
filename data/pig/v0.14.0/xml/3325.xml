<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:51:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-3325/PIG-3325.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-3325] Adding a tuple to a bag is slow</title>
                <link>https://issues.apache.org/jira/browse/PIG-3325</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;The time it takes to add a tuple to a bag has increased significantly, causing some jobs to take about 50x longer compared to 0.10.1. I&apos;ve tracked this down to &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2923&quot; title=&quot;Lazily register bags with SpillableMemoryManager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2923&quot;&gt;&lt;del&gt;PIG-2923&lt;/del&gt;&lt;/a&gt;, which has made adding a tuple heavier weight (it now includes some memory estimation).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12647641">PIG-3325</key>
            <summary>Adding a tuple to a bag is slow</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dvryaboy">Dmitriy V. Ryaboy</assignee>
                                    <reporter username="mwagner">Mark Wagner</reporter>
                        <labels>
                    </labels>
                <created>Wed, 15 May 2013 01:07:01 +0100</created>
                <updated>Tue, 15 Apr 2014 21:45:00 +0100</updated>
                            <resolved>Tue, 22 Oct 2013 23:45:52 +0100</resolved>
                                    <version>0.11</version>
                    <version>0.12.0</version>
                    <version>0.11.1</version>
                    <version>0.11.2</version>
                                    <fixVersion>0.12.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13657730" author="mwagner" created="Wed, 15 May 2013 01:10:49 +0100"  >&lt;p&gt;This patch demonstrates the issue. On version 0.10.1, the average time per add(Tuple) call is 360 ns. On trunk it typically takes around 40000 ns.&lt;/p&gt;</comment>
                            <comment id="13657750" author="mwagner" created="Wed, 15 May 2013 01:39:55 +0100"  >&lt;p&gt;The core issue is that getMemorySize() is O(N) if a new element has been added since the last call. I&apos;ve made that case O(1). However, this patch only brings the call time for adding tuples to ~4500 ns (and job time is still 2x that of 0.10.1).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dvryaboy&quot; class=&quot;user-hover&quot; rel=&quot;dvryaboy&quot;&gt;Dmitriy V. Ryaboy&lt;/a&gt;, can you share some of your experience with the issue you saw for &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2923&quot; title=&quot;Lazily register bags with SpillableMemoryManager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2923&quot;&gt;&lt;del&gt;PIG-2923&lt;/del&gt;&lt;/a&gt;? I have a nice test job for this issue but I don&apos;t have any benchmark really for bag spilling performance, so I&apos;m not sure how big of an issue small bags were for spilling, or what a good tradeoff between add() speed and spill speed would be.&lt;/p&gt;</comment>
                            <comment id="13666737" author="daijy" created="Fri, 24 May 2013 23:18:48 +0100"  >&lt;p&gt;Looks good. We can further do memory calculation after N tuple instead every tuple. &lt;/p&gt;</comment>
                            <comment id="13679862" author="dvryaboy" created="Mon, 10 Jun 2013 21:22:46 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mwagner&quot; class=&quot;user-hover&quot; rel=&quot;mwagner&quot;&gt;Mark Wagner&lt;/a&gt; thanks for catching this perf regression.&lt;br/&gt;
I only had time for a cursory look today &amp;#8211; why is the existing code O(N)? Seems like it sampled up to 100 elements and no more, so it&apos;s constant (once n&amp;gt;=100). Seems to me like all that materially changed was that you added the sampling bit to add(). Unfortunately, a number of Bags override add() (see my notes in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2923&quot; title=&quot;Lazily register bags with SpillableMemoryManager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2923&quot;&gt;&lt;del&gt;PIG-2923&lt;/del&gt;&lt;/a&gt;), which makes doing this in the default add() of the abstract function unreliable.&lt;/p&gt;

&lt;p&gt;Seems to me like a better approach would be to tackle the fact that for every time that getMemorySize() is called while there are fewer than 100 elements, we iterate over the whole bag (which is what you mean by O(N)?). We can do this by jumping directly to the mLastContentsSize&apos;th element in the Bag, if we know the structure, or at least iterate to it without calling getMemorySize(), and then add to our running avg, rather than recomputing it. So, no resetting aggSampleTupleSize in your version, or avgTupleSize in mine, to 0 when sampling, just ignoring the first mLastContentsSize in the iterator.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;
</comment>
                            <comment id="13682557" author="rohini" created="Thu, 13 Jun 2013 19:49:48 +0100"  >&lt;p&gt;Dmitriy,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;at least iterate to it without calling getMemorySize(), and then add to our running avg, rather than recomputing it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;   Still does not help. It is around 5-6000 ns. However we try, I don&apos;t think it is going to come back to ~400ns unless we revert back to relying on the SpillableManager doing the memory size computation. Looking at the SpillableManager code, if GC has happened normally clearSpillables(); would take care of removing smaller bags. &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;       if (toBeFreed &amp;lt; spillFileSizeThreshold) {
                    log.debug(&quot;spilling small files - getting out of memory handler&quot;);
                    break ;
                }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;  With the default spillFileSizeThreshold at 5MB, we don&apos;t attempt spill at all of smaller objects. So going back to Mark&apos;s question, how big of an issue small bags were for spilling and do we need the markSpillableIfNecessary() at all?&lt;/p&gt;

&lt;p&gt; One thing I can see that can speed up spills is moving the getMemorySize call out of the compare in Collections.sort and having a composite Spillable that has the memory size reset in the beginning and calculated only once during the run. &lt;/p&gt;</comment>
                            <comment id="13685881" author="mwagner" created="Mon, 17 Jun 2013 20:26:51 +0100"  >&lt;p&gt;Thanks for taking a look, Dmitriy. I agree that doing work in add() is the wrong way to go. I don&apos;t think there&apos;s a way to get the time back down to 400 ns while still having lazy registration, but that may be okay if it prevents bad behavior elsewhere.&lt;/p&gt;

&lt;p&gt;I&apos;ll try out caching the memory sizes during sorting and see how things improve. That should improve performance no matter how &apos;spillables&apos; gets populated.&lt;/p&gt;</comment>
                            <comment id="13686100" author="dvryaboy" created="Mon, 17 Jun 2013 23:31:10 +0100"  >&lt;p&gt;The previous behavior (having SMM check all bags) was pretty bad, it caused significant sudden delays if the data you were loading had bags in it. We observed pretty good speed gains for those use cases once we got rid of mandatory bag registration. Also got rid of a few memory leaks while we were in there, and the linked list maintenance overhead in SMM.&lt;/p&gt;</comment>
                            <comment id="13686114" author="rohini" created="Mon, 17 Jun 2013 23:43:30 +0100"  >&lt;p&gt;Mark,&lt;br/&gt;
  I already have a patch that does initialization of memory sizes only once and removes the markSpillableIfNecessary during addTuple. Will put it up by tomorrow after running some e2e tests for bag spilling. &lt;/p&gt;

&lt;p&gt;Dmitriy,&lt;br/&gt;
  Moving the getMemorySize out of the compare method should give a significant gain for the case that you were seeing. I will post some numbers after running some tests.&lt;/p&gt;</comment>
                            <comment id="13686142" author="mwagner" created="Tue, 18 Jun 2013 00:06:20 +0100"  >&lt;p&gt;Cool. Thanks, Rohini!&lt;/p&gt;

&lt;p&gt;Dmitriy, what was your LoadFunc? I found that if the LoadFunc creates bags with an initial list of elements, then the slowness doesn&apos;t show up until later when new bags are created (during a DISTINCT in my case).&lt;/p&gt;</comment>
                            <comment id="13688911" author="dvryaboy" created="Thu, 20 Jun 2013 07:16:20 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mwagner&quot; class=&quot;user-hover&quot; rel=&quot;mwagner&quot;&gt;Mark Wagner&lt;/a&gt; I was loading complex thrift structures that had bags in them. With old code (all bags register with SMM) this led to tons of weak references that needed to be cleaned out by the SMM; new code fixed that, but apparently created this other problem (which in practice on our workloads is not significant.. but your workloads may be different). Looking forward to Rohini&apos;s patch.&lt;/p&gt;</comment>
                            <comment id="13689406" author="rohini" created="Thu, 20 Jun 2013 18:01:26 +0100"  >&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; 

if (avgTupleSize != 0 &amp;amp;&amp;amp; (mLastContentsSize == numInMem ||
                    mLastContentsSize &amp;gt; 100 &amp;amp;&amp;amp; numInMem &amp;gt; 100))
                return totalSizeFromAvgTupleSize(avgTupleSize, numInMem);

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  Actually I was wrong. Initializing memory size only once does not help that much. It only saves on the call to totalSizeFromAvgTupleSize(avgTupleSize, numInMem).  When getMemorySize() is called multiple times from the Comparator, the second time it hits mLastContentsSize == numInMem and returns totalSizeFromAvgTupleSize() directly without iterating through tuples again. &lt;/p&gt;

&lt;p&gt;Still trying to figure out a solution to optimize spilling. Wondering if splitting into two lists one for bigger sizes and one for &amp;lt; spillFileSizeThreshold after the first spill pass and sorting/iterating through them separately will help in future invocations.  &lt;/p&gt;</comment>
                            <comment id="13689465" author="dvryaboy" created="Thu, 20 Jun 2013 19:07:12 +0100"  >&lt;p&gt;What if instead of figuring out size based on the first 100 elements, we sampled first, 11th, 21st, etc until we get 100 samples? Would help with small bags (where accuracy of estimate doesn&apos;t matter as much).&lt;/p&gt;</comment>
                            <comment id="13696209" author="dvryaboy" created="Sat, 29 Jun 2013 23:34:29 +0100"  >&lt;p&gt;Ok I started looking at this, will update with a patch shortly. In the meantime &amp;#8211; my benchmark shows Mark&apos;s patch improves perf on small bags of 20-100 elements, but causes extremely poor performance for large bags.&lt;/p&gt;

&lt;p&gt;I created a benchmark that does 100 rounds of creating a bag of N elements, for values of N in &lt;span class=&quot;error&quot;&gt;&amp;#91;1,20,100,1000&amp;#93;&lt;/span&gt;. These sets of 100 rounds are run 15 times each, performance of the first 5 is thrown out to account for system warmup / jit optimizations.&lt;/p&gt;

&lt;p&gt;Results:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Num Tuples in Bag &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Trunk avg &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Patch 1 avg &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 20 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.01 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 100 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.13 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1000 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.19 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 1.20 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="13696222" author="dvryaboy" created="Sun, 30 Jun 2013 01:26:32 +0100"  >&lt;p&gt;Updating with a patch.&lt;/p&gt;

&lt;p&gt;Results:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Num Tuples in Bag &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Trunk avg &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Patch 1 avg &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Patch 2 avg &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 20 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.01 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 100 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.13 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1000 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.19 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 1.20 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.03 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;I also ran Mark&apos;s bench test in a loop 10 times (again, to account for jit effects).&lt;/p&gt;

&lt;p&gt;Results are as follows:&lt;/p&gt;

&lt;p&gt;My Patch, Mark&apos;s test&lt;br/&gt;
 7050 ns&lt;br/&gt;
 450 ns&lt;br/&gt;
 440 ns&lt;br/&gt;
 550 ns&lt;br/&gt;
 440 ns&lt;br/&gt;
 440 ns&lt;br/&gt;
 440 ns&lt;br/&gt;
 440 ns&lt;br/&gt;
 440 ns&lt;br/&gt;
 540 ns&lt;br/&gt;
 410 ns&lt;br/&gt;
 440 ns&lt;br/&gt;
 440 ns&lt;br/&gt;
 430 ns&lt;br/&gt;
 460 ns&lt;/p&gt;


&lt;p&gt; Trunk, Mark&apos;s test&lt;br/&gt;
 243240 ns&lt;br/&gt;
 156640 ns&lt;br/&gt;
 25440 ns&lt;br/&gt;
 23470 ns&lt;br/&gt;
 18930 ns&lt;br/&gt;
 20710 ns&lt;br/&gt;
 16890 ns&lt;br/&gt;
 20210 ns&lt;br/&gt;
 17630 ns&lt;br/&gt;
 17900 ns&lt;br/&gt;
 21420 ns&lt;br/&gt;
 22550 ns&lt;br/&gt;
 22900 ns&lt;br/&gt;
 19800 ns&lt;br/&gt;
 16770 ns&lt;/p&gt;

&lt;p&gt; Mark&apos;s patch, Mark&apos;s Test&lt;br/&gt;
 8480 ns&lt;br/&gt;
 2750 ns&lt;br/&gt;
 2690 ns&lt;br/&gt;
 2760 ns&lt;br/&gt;
 3270 ns&lt;br/&gt;
 3590 ns&lt;br/&gt;
 6530 ns&lt;br/&gt;
 5900 ns&lt;br/&gt;
 6340 ns&lt;br/&gt;
 5410 ns&lt;br/&gt;
 5400 ns&lt;br/&gt;
 5420 ns&lt;br/&gt;
 5670 ns&lt;br/&gt;
 5410 ns&lt;br/&gt;
 5420 ns&lt;/p&gt;</comment>
                            <comment id="13696223" author="dvryaboy" created="Sun, 30 Jun 2013 01:42:12 +0100"  >&lt;p&gt;Slight update &amp;#8211; resetting all counters on clear(), and getting rid of an unnecessarily long 10K tuple test.&lt;/p&gt;</comment>
                            <comment id="13721139" author="dvryaboy" created="Fri, 26 Jul 2013 20:54:58 +0100"  >&lt;p&gt;marking as patch available. please review.&lt;/p&gt;</comment>
                            <comment id="13722682" author="cheolsoo" created="Mon, 29 Jul 2013 18:29:36 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dvryaboy&quot; class=&quot;user-hover&quot; rel=&quot;dvryaboy&quot;&gt;Dmitriy V. Ryaboy&lt;/a&gt;, I think your sampling code is incorrect.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * Sample every 10th tuple until we reach a max of SPILL_SAMPLE_SIZE
 * to get an estimate of the tuple sizes.
 */
&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void sampleContents() {
    &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (mContents) {
        ...
        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = sampled; iter.hasNext() &amp;amp;&amp;amp; sampled &amp;lt; SPILL_SAMPLE_SIZE; i++) {
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (i % SPILL_SAMPLE_FREQUENCY == 0) {
                aggSampleTupleSize += iter.next().getMemorySize();
                sampled += 1;
            }
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The iterator doesn&apos;t get incremented every iteration, so you&apos;re sampling sequential tuples instead of every 10th. Don&apos;t you need to add an else block and increment the iterator always?&lt;/p&gt;</comment>
                            <comment id="13723065" author="dvryaboy" created="Mon, 29 Jul 2013 23:30:42 +0100"  >&lt;p&gt;Urgh, you are right of course. I can move the .next() call into the for loop... but I wonder if that will slow us down again. Will check.&lt;/p&gt;</comment>
                            <comment id="13799793" author="aniket486" created="Sat, 19 Oct 2013 06:50:26 +0100"  >&lt;p&gt;I added else clause and reran the benchmark.&lt;/p&gt;

&lt;p&gt;Results:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Num Tuples in Bag &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Trunk avg &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Patch avg &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 20 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.01 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 100 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.11 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.00 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1000 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.12 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; round: 0.02 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;testDefaultSpeed:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; trunk &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; patch &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;282760 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3950 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;30450 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;510 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13670 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;490 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;18930 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;500 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;22680 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;490 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16230 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;540 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20370 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;490 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16830 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;490 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13810 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;530 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13610 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;490 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;14010 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;660 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;15340 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;490 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13840 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;490 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;14420 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;490 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;15510 ns&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;520 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="13800157" author="aniket486" created="Sun, 20 Oct 2013 17:46:30 +0100"  >&lt;p&gt;RB: &lt;a href=&quot;https://reviews.apache.org/r/14775/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/14775/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13801516" author="aniket486" created="Tue, 22 Oct 2013 06:49:20 +0100"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dvryaboy&quot; class=&quot;user-hover&quot; rel=&quot;dvryaboy&quot;&gt;Dmitriy V. Ryaboy&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mwagner&quot; class=&quot;user-hover&quot; rel=&quot;mwagner&quot;&gt;Mark Wagner&lt;/a&gt;! I have committed this to trunk.&lt;/p&gt;</comment>
                            <comment id="13802378" author="aniket486" created="Tue, 22 Oct 2013 23:45:46 +0100"  >&lt;p&gt;Also, committed to 0.12.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12609298" name="PIG-3325-benchmark.patch" size="10014" author="aniket486" created="Sun, 20 Oct 2013 07:37:41 +0100"/>
                            <attachment id="12590190" name="PIG-3325.2.patch" size="9624" author="dvryaboy" created="Sun, 30 Jun 2013 01:26:32 +0100"/>
                            <attachment id="12590191" name="PIG-3325.3.patch" size="9780" author="dvryaboy" created="Sun, 30 Jun 2013 01:42:12 +0100"/>
                            <attachment id="12609299" name="PIG-3325.4.patch" size="4851" author="aniket486" created="Sun, 20 Oct 2013 07:43:00 +0100"/>
                            <attachment id="12583250" name="PIG-3325.demo.patch" size="1249" author="mwagner" created="Wed, 15 May 2013 01:10:49 +0100"/>
                            <attachment id="12583257" name="PIG-3325.optimize.1.patch" size="4311" author="mwagner" created="Wed, 15 May 2013 01:39:55 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 24 May 2013 22:18:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>327997</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzefnr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>328341</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>