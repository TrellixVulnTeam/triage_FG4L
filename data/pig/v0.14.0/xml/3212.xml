<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:50:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-3212/PIG-3212.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-3212] Race Conditions in POSort and (Internal)SortedBag during Proactive Spill.</title>
                <link>https://issues.apache.org/jira/browse/PIG-3212</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;The following bug exists in the latest release of Pig 0.11.0&lt;/p&gt;

&lt;p&gt;While running some large jobs involving groups and sorts like these:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

events_by_user = GROUP events BY user_id;

sorted_events_by_user = FOREACH events_by_user {
	A = ORDER events BY ts, split_idx, line_num;
	GENERATE group, A;
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I got a pretty strange behaviour: While this worked on small datasets, if I ran it on large datasets, the results were sometimes not sorted perfectly. &lt;/p&gt;

&lt;p&gt;So after a long debugging session, I tracked it down to at least one race condition:&lt;/p&gt;

&lt;p&gt;The following partial stack trace shows how a proactive spill gets triggered on an InternalSortedBag. A spill in turn triggers a sort of that InternalSortedBag.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
	at org.apache.pig.data.SortedSpillBag.proactive_spill(SortedSpillBag.java:83)
	at org.apache.pig.data.InternalSortedBag.spill(InternalSortedBag.java:455)
	at org.apache.pig.impl.util.SpillableMemoryManager.handleNotification(SpillableMemoryManager.java:243)
	at sun.management.NotificationEmitterSupport.sendNotification(NotificationEmitterSupport.java:138)
	at sun.management.MemoryImpl.createNotification(MemoryImpl.java:171)
	at sun.management.MemoryPoolImpl$PoolSensor.triggerAction(MemoryPoolImpl.java:272)
	at sun.management.Sensor.trigger(Sensor.java:120)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the same time, the same InternalSortedBag might be sorted or accessed within a POSort Operation. For example using the following Code path (line numbers might be off, I had to add debug statements to diagnose this)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
at org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.getNext(POSort.java:346)
	at org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNext(PhysicalOperator.java:492)
	at org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.processInputBag(POProject.java:582)
	at org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.getNext(PORelationToExprProject.java:107)
	at org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNext(PhysicalOperator.java:394)
	at org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.processPlan(POForEach.java:372)
	at org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.getNext(POForEach.java:297)
	at org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.processInput(PhysicalOperator.java:368)
	at org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.getNext(POSplit.java:214)
	at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce$Reduce.runPipeline(PigGenericMapReduce.java:465)
	at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce$Reduce.processOnePackageOutput(PigGenericMapReduce.java:433)
	at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce$Reduce.reduce(PigGenericMapReduce.java:413)
	at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce$Reduce.reduce(PigGenericMapReduce.java:257)
	at org.apache.hadoop.mapreduce.Reducer.run(Reducer.java:176)
	at org.apache.hadoop.mapred.ReduceTask.runNewReducer(ReduceTask.java:566)
	at org.apache.hadoop.mapred.ReduceTask.run(ReduceTask.java:408)
	at org.apache.hadoop.mapred.Child.main(Child.java:170)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The key here is: Both operations try to compare and modify elements of the SortedBag simultaneously. This leads to all kinds of problems, most notably incorrectly sorted data.&lt;/p&gt;

&lt;p&gt;POSort.SortComparator that&apos;s passed as a Comparison function to (Internal)SortedBag is not thread safe, since it works by attaching single input tuples to PhysicalOperator&apos;s - these Operators in turn are part of the POSort.sortPlans and are re-used among each thread accessing the (Internal)SortedBag.&lt;/p&gt;





</description>
                <environment></environment>
        <key id="12633618">PIG-3212</key>
            <summary>Race Conditions in POSort and (Internal)SortedBag during Proactive Spill.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kadeng">Kai Londenberg</assignee>
                                    <reporter username="kadeng">Kai Londenberg</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Feb 2013 13:54:53 +0000</created>
                <updated>Wed, 18 Sep 2013 15:45:37 +0100</updated>
                            <resolved>Thu, 28 Feb 2013 19:22:21 +0000</resolved>
                                    <version>0.11</version>
                                    <fixVersion>0.12.0</fixVersion>
                    <fixVersion>0.11.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13584300" author="jcoveney" created="Fri, 22 Feb 2013 14:19:08 +0000"  >&lt;p&gt;Good job tracking down these threading issues. They definitely need to be addressed. Keep it up!&lt;/p&gt;</comment>
                            <comment id="13586611" author="kadeng" created="Tue, 26 Feb 2013 01:54:23 +0000"  >&lt;p&gt;I have attached a patch which should fix this problem. &lt;/p&gt;

&lt;p&gt;To clarify a bit more, what caused the problems. &lt;/p&gt;

&lt;p&gt;The root cause of all problems here is that POSort.SortComparator is not thread safe - which is very hard to fix in a performant way. So I didn&apos;t do that in this fix.&lt;/p&gt;

&lt;p&gt;Another problem is that the SpillableMemoryManager may call the spill method in it&apos;s own thread at any time, and that InternalSortedBag itself is not thread safe enough itself.&lt;/p&gt;

&lt;p&gt;The approach I took in this patch is simple: First - synchronize modifications to InternalSortedBag correctly. Second - prevent all modifications (including spills), once a read iterator has been started.&lt;/p&gt;

&lt;p&gt;The last point is extremely important.  POSort may create multiple InternalSortedBags after each other, and each of these is registered with the SpillableMemoryManager. Since the WeakReferences held by the SpillableMemoryManager are not cleared immediately if all other references to the old InternalSortedBag have been removed, it&apos;s possible that the &quot;spill&quot; method gets called on an otherwise dead instance of an InternalSortedBag. That way, it would be possible that two different InternalSortedBag instances (one dead, one alive) are trying to use the same POSort.SortComparator instance at the same time.&lt;/p&gt;</comment>
                            <comment id="13586618" author="kadeng" created="Tue, 26 Feb 2013 01:58:23 +0000"  >&lt;p&gt;I would really recommend to review the code for other threading issues arising out of the SpillableMemoryManager. I would look for similar race conditions in all Spillable implementations.&lt;/p&gt;</comment>
                            <comment id="13586624" author="kadeng" created="Tue, 26 Feb 2013 02:02:12 +0000"  >&lt;p&gt;I could reliably reproduce this bug on a large job. It is neccessary to have enough data and to create some memory pressure to trigger this bug (i.e. the SpillableMemoryManager has to kick in a lot). Using that same job, I could verify that the patch really fixed the problem.&lt;/p&gt;</comment>
                            <comment id="13586657" author="dvryaboy" created="Tue, 26 Feb 2013 02:52:44 +0000"  >&lt;p&gt;Wow. Thanks for finding this. That would be my fault &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;br/&gt;
Will review as soon as I get home.&lt;/p&gt;</comment>
                            <comment id="13587361" author="dvryaboy" created="Tue, 26 Feb 2013 18:31:18 +0000"  >&lt;p&gt;Ok so I think the fix works, but it seems like this bug has been there for a long time &amp;#8211; the synchronization issue with SMM would&apos;ve been there before 0.11, as well. Is it just more visible now because SMM is faster (fewer bags to go through)? &lt;/p&gt;

&lt;p&gt;It seems unlikely that we ever get to spill an internal sorted bag, given this patch.. seems like it almost always has an iterator open.  If the concern is using the same comparator &amp;#8211; could we not solve this by initializing a new comparator for every bag?&lt;/p&gt;</comment>
                            <comment id="13588191" author="kadeng" created="Wed, 27 Feb 2013 10:10:20 +0000"  >&lt;p&gt;A new Comparator for every bag would mean you need a new deep clone of the sort plan of POSort. This means a lot of small object fodder for the garbage collector and probably increase the running time.&lt;/p&gt;

&lt;p&gt;When it comes to spilling an internal sorted bag: Do you really want such an operation to happen &lt;b&gt;while you are iterating&lt;/b&gt; over the bag contents ? If you allow that, there are not just synchronization issues. The state of the iterator (pointer to the current element) needs to adapt accordingly. &lt;/p&gt;

&lt;p&gt;And what would you gain ? The memory required for the bag won&apos;t increase while the iterator is running (since it&apos;s closed for modifications), so it can&apos;t cause out of memory exceptions itself. After the iterator is finished, the bag in it&apos;s entirety is usually fodder for the garbage collector (at least in the context of POSort, this is always the case). If you allow the SMM to call spill on the bag while the iterator is running, all you&apos;ll gain is the possibility that some memory (that&apos;s actually actively being used) gets freed a little bit earlier than it would usually be. &lt;/p&gt;

&lt;p&gt;It&apos;s better to let the SMM do it&apos;s work only while the InternalBag is being filled. That&apos;s exactly the point when it is likely that the SMM kicks in, since the memory usage is increasing. The fix allows for that.&lt;/p&gt;</comment>
                            <comment id="13588663" author="dvryaboy" created="Wed, 27 Feb 2013 19:28:39 +0000"  >&lt;p&gt;Ok I&apos;m convinced. Will run tests and commit if all is good there.&lt;/p&gt;</comment>
                            <comment id="13589827" author="dvryaboy" created="Thu, 28 Feb 2013 19:22:57 +0000"  >&lt;p&gt;Committed to 0.11.1 branch and trunk.&lt;br/&gt;
Thanks a ton Kai!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12669257">PIG-3466</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12570907" name="PIG-3212-p1.patch" size="2785" author="kadeng" created="Tue, 26 Feb 2013 01:54:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 22 Feb 2013 14:19:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>314113</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12310041" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Patch Info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10042"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzc20f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>314458</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>