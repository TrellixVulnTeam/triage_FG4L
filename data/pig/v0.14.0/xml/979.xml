<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:01:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-979/PIG-979.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-979] Acummulator Interface for UDFs</title>
                <link>https://issues.apache.org/jira/browse/PIG-979</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;Add an accumulator interface for UDFs that would allow them to take a set number of records at a time instead of the entire bag.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12436655">PIG-979</key>
            <summary>Acummulator Interface for UDFs</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yinghe">Ying He</assignee>
                                    <reporter username="alangates">Alan Gates</reporter>
                        <labels>
                    </labels>
                <created>Sat, 26 Sep 2009 00:10:26 +0100</created>
                <updated>Wed, 24 Mar 2010 22:15:56 +0000</updated>
                            <resolved>Thu, 12 Nov 2009 18:34:07 +0000</resolved>
                                    <version>0.4.0</version>
                                    <fixVersion>0.6.0</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12759804" author="alangates" created="Sat, 26 Sep 2009 00:21:22 +0100"  >&lt;p&gt;Consider a Pig script like the following:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
A = load &apos;bla&apos;;
B = group A by $0;
C = foreach B {
    D = order A by $1;
    generate CUMMULATIVE_SUM(D);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because the UDF needs to see this data in an ordered fashion, it cannot be done using Pig&apos;s Algebraic interface.  But it&lt;br/&gt;
does not need to see all the contents of the bag together.&lt;/p&gt;

&lt;p&gt;One way to address this is to add an Accumulator interface that UDFs could implement.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Accumulator&amp;lt;T&amp;gt; {

    /**
     * Pass tuples to the UDF.  The passed in bag will contain only records from one
     * key.  It may not contain all the records &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; one key.  This function will
     * be called repeatedly until all records from one key are provided
     * to the UDF.
     * @param 1 or more tuples, all sharing the same key.
     */
    void accumulate(Bag b);

    /**
     * Called when all records from a key have been passed to accumulate.
     * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the value &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the UDF &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; key.
     */
    T getValue();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In cases where all UDFs in a given foreach implement this accumulate interface, then Pig could choose to use this method to&lt;br/&gt;
push records to the UDFs.  Then it would not need to read all records from the Reduce iterator and cache them in memory or&lt;br/&gt;
on disk.&lt;/p&gt;

&lt;p&gt;Before we commit to adding this new level of complexity to the langauge, we should performance test it.  Given that we have&lt;br/&gt;
recently made a change aimed at addressing Pig&apos;s problem of dying during large non-algebraic group bys (see &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-975&quot; title=&quot;Need a databag that does not register with SpillableMemoryManager and spill data pro-actively&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-975&quot;&gt;&lt;del&gt;PIG-975&lt;/del&gt;&lt;/a&gt;), this&lt;br/&gt;
needs to perform significantly better than that to justify adding it.&lt;/p&gt;</comment>
                            <comment id="12759813" author="ciemo" created="Sat, 26 Sep 2009 00:45:03 +0100"  >&lt;p&gt;This JIRA doesn&apos;t quite get the gist of why I believe the Accumulator interface is of interest.  It isn&apos;t just about performance and avoiding retreading over the same data over and over again.&lt;/p&gt;

&lt;p&gt;It is also about providing an interface to support CUMMULATIVE_SUM, RANK, and other functions of it&apos;s ilk.&lt;/p&gt;

&lt;p&gt;A better code example for justifying this would be:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
A = load &apos;data&apos; using PigStorage() as ( query: chararray, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: count );
B = order A by count desc parallel 1;
C = foreach B generate
        query,
        count,
        CUMULATIVE_SUM(count) as cumulative_count,
        RANK(count) as rank;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These functions RANK and CUMULATIVE_SUM would have persistent state and yet would emit a value per value or tuple passed.  Bags would not be appropriate as coded.&lt;/p&gt;

&lt;p&gt;Additionally, the reason for the Accumulator inteface is to avoid multiple passes over the same data:&lt;/p&gt;

&lt;p&gt;For instance, consider the example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
A = load &apos;data&apos; using PigStorage() as ( query: chararray, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: count );
B = group A all;
C = foreach B generate
        group,
        SUM(A.count),
        AVG(A.count),
        VAR(A.count),
        STDEV(A.count),
        MIN(A.count),
        MAX(A.count),
        MEDIAN(A.count);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Repeatedly shuffling the same values just isn&apos;t an optimal way to process data.&lt;/p&gt;
</comment>
                            <comment id="12759848" author="hammer" created="Sat, 26 Sep 2009 03:09:37 +0100"  >&lt;p&gt;One could also cite the SOSP paper from MSR this year comparing the iterator to the accumulator interface, though I have a hard time concisely stating their conclusions: &lt;a href=&quot;http://sigops.org/sosp/sosp09/papers/yu-sosp09.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://sigops.org/sosp/sosp09/papers/yu-sosp09.pdf&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12760389" author="alangates" created="Mon, 28 Sep 2009 22:25:42 +0100"  >&lt;p&gt;Jeff, thanks for the paper.  I looked over it and I&apos;m not certain it directly applies.  They are measuring both the aggregation time (sort or hash) and how it is passed to the user defined aggregate (iterate or accumulate).  Being in Hadoop we already have the aggregation done.  So it&apos;s just a question of the fastest way to make the data available to the UDF.  As I said above, we want to test the performance of this and prove its worth before we add it.&lt;/p&gt;

&lt;p&gt;As a general complaint, they used a fairly old revision of Pig code in their paper, even though it appears it was published in the last few months.&lt;/p&gt;</comment>
                            <comment id="12760396" author="alangates" created="Mon, 28 Sep 2009 22:38:30 +0100"  >&lt;p&gt;Ciemo,&lt;/p&gt;

&lt;p&gt;In your comment above, you indicate you&apos;d like functions like cumulative sum to be able to emit a value each time a record is added.  But how does that work with something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
A = load &apos;bla&apos;;
B = group A by $0;
C = foreach B generate {
       D = order A by $1;
       generate CUMULATIVE_SUM(D.$2), SUM(D.$2);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SUM can&apos;t output a value until it&apos;s seen everything, but CUMULATIVE_SUM will have an output on every record.  The way Pig&apos;s data model handles this with bags.  The other possibility I can see is that Pig handles this as having an implicit flatten, so output from above would look like:&lt;/p&gt;

&lt;p&gt;1   10&lt;br/&gt;
3   10&lt;br/&gt;
6   10&lt;br/&gt;
10 10&lt;/p&gt;

&lt;p&gt;Are you proposing that we create a way to streamline output of these types of functions to STORE (or DUMP) so that the bag never need be materialized?  Or do you want a UDF type that takes a bag and produces multiple outputs along with an implicit flatten?  Or are you suggesting a change in the data model?  &lt;/p&gt;</comment>
                            <comment id="12774536" author="yinghe" created="Sat, 7 Nov 2009 02:07:58 +0000"  >&lt;p&gt;Initial patch. Not fully tested yet. It depends on patch attached with &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1038&quot; title=&quot;Optimize nested distinct/sort to use secondary key&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1038&quot;&gt;&lt;del&gt;PIG-1038&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12774815" author="hadoopqa" created="Sun, 8 Nov 2009 19:55:26 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12424249/PIG-979.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12424249/PIG-979.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 833549.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 20 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/144/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/144/testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/144/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/144/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12774859" author="daijy" created="Mon, 9 Nov 2009 05:03:13 +0000"  >&lt;p&gt;This patch depends on &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1038&quot; title=&quot;Optimize nested distinct/sort to use secondary key&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1038&quot;&gt;&lt;del&gt;PIG-1038&lt;/del&gt;&lt;/a&gt;. It is not directly patchable on its own. That&apos;s why tests are failed.&lt;/p&gt;</comment>
                            <comment id="12775054" author="yinghe" created="Mon, 9 Nov 2009 18:29:48 +0000"  >&lt;p&gt;Without patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1038&quot; title=&quot;Optimize nested distinct/sort to use secondary key&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1038&quot;&gt;&lt;del&gt;PIG-1038&lt;/del&gt;&lt;/a&gt;, this patch won&apos;t compile. So all tests  would fail.&lt;/p&gt;</comment>
                            <comment id="12775057" author="yinghe" created="Mon, 9 Nov 2009 18:30:48 +0000"  >&lt;p&gt;Without patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1038&quot; title=&quot;Optimize nested distinct/sort to use secondary key&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1038&quot;&gt;&lt;del&gt;PIG-1038&lt;/del&gt;&lt;/a&gt;, this patch won&apos;t compile. So all tests  would fail.&lt;/p&gt;</comment>
                            <comment id="12775058" author="yinghe" created="Mon, 9 Nov 2009 18:32:22 +0000"  >&lt;p&gt;Without patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1038&quot; title=&quot;Optimize nested distinct/sort to use secondary key&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1038&quot;&gt;&lt;del&gt;PIG-1038&lt;/del&gt;&lt;/a&gt;, this patch won&apos;t compile. So all tests  would fail.&lt;/p&gt;</comment>
                            <comment id="12775059" author="yinghe" created="Mon, 9 Nov 2009 18:33:54 +0000"  >&lt;p&gt;Without patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1038&quot; title=&quot;Optimize nested distinct/sort to use secondary key&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1038&quot;&gt;&lt;del&gt;PIG-1038&lt;/del&gt;&lt;/a&gt;, this patch won&apos;t compile. So all tests  would fail.&lt;/p&gt;</comment>
                            <comment id="12775158" author="alangates" created="Mon, 9 Nov 2009 21:43:53 +0000"  >&lt;p&gt;A test should be added that checks that when accumulator UDFs are mixed with non-accumulator UDFs it works properly.&lt;/p&gt;

&lt;p&gt;Why is the optimization not applied in the case that inner is set on POPackage?  It seems the accumulator interface should still work in this case.&lt;/p&gt;

&lt;p&gt;Some comments on what AccumulatorOptimizer.check() is and what it allows would be helpful.&lt;/p&gt;

&lt;p&gt;The code contains tabs in some spots instead of 4 spaces.&lt;/p&gt;

&lt;p&gt;The cases in which the accumulator interface can be used has been greatly extended by adding the support for unary and binary operators.  But this comes at a cost.  Every binary and unary comparison now has to make the accumChild call.  99% of the time this will be false.  It&apos;s not clear to me how often users will do things like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
foreach C generate accumfunc1(A) + accumfunc2(A) OR
foreach C generate (accumfunc1(A) &amp;gt; 100 ? 0 : 1)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is the only time I can see where this additional functionality is useful, since we don&apos;t currently allow these functions in filters.  It&apos;s possible that JIT along with branch prediction will remove this extra cost, since the branch will always be one way or another for a given query.  But I&apos;d like to see this tested.  It would be interesting to compare a query with heavy use of binary operators (but no accumulator UDFs) with and without this change.&lt;/p&gt;

&lt;p&gt;I don&apos;t understand why you need the new interface AccumulativeTupleBuffer and class AccumulativeBag.  Why can&apos;t the block of tuples read off of the iterator just be put in a regular bag and then passed to the UDFs?&lt;/p&gt;

&lt;p&gt;In all the sum implementations of accumulate you calculate the sum of the block of tuples twice.  It should be done once and cached.&lt;/p&gt;

&lt;p&gt;In COUNT.accumulate rather than making intermediateCount a Long and then forcing the creation of a new Long each time you add one you should instead keep it as a long and depend on boxing to convert it to Long when you return it in getValue.  Same in COUNT_STAR.accumulate&lt;/p&gt;


</comment>
                            <comment id="12775184" author="yinghe" created="Mon, 9 Nov 2009 23:19:13 +0000"  >&lt;p&gt;Alan, thanks for the feedback.&lt;/p&gt;

&lt;p&gt;1. A test case is already created to test mix of accumulator UDF with regular UDF, it is in testAccumBasic().&lt;/p&gt;

&lt;p&gt;2. The optimizer can&apos;t be applied when inner is set to POPackage, because if an inner is set, POPackage checks the bag for that input is NULL, if it is, POPackage returns NULL. This can only be done when all the tuples are retrieved and put into a bag.&lt;/p&gt;

&lt;p&gt;3 &amp;amp; 4, will fix that&lt;/p&gt;

&lt;p&gt;5. needs performance testing.&lt;/p&gt;

&lt;p&gt;6. The reducer get results from POPackage and pass it to root, which is POForEach, to process. From POForEach perspective, it gets a tuple with bags in it from POPackage. Then POForEach retrieves tuples off iterator and pass to UDFs in multiple cycles. Because only POPackage knows how to read tuples out of iterator and put in proper bags, AccumulativeTupleBuffer and AccumulativeBag are created to communicate between POPackage and POForEach. Every time POForEach calls getNextBatch() on AccumulativeTupleBuffer, it in effects calls inner class of POPackage to retrieve tuples out of iterator.&lt;/p&gt;

&lt;p&gt;POPackage can not be the one to block the reading of tuples, because it is only called once from reducer. I also thought of changing reducer to call POPackage multiple times to process each batch of data, then it becomes tricky to maintain correct states of operators, and all operators in reducer plan would have to support partial data, which is not necessary. &lt;/p&gt;</comment>
                            <comment id="12776529" author="yinghe" created="Wed, 11 Nov 2009 17:32:47 +0000"  >&lt;p&gt;patch to address Alan&apos;s comments. &lt;/p&gt;</comment>
                            <comment id="12776760" author="yinghe" created="Thu, 12 Nov 2009 00:18:42 +0000"  >&lt;p&gt;performance tests doesn&apos;t show noticeable difference between trunk and accumulator patch when calling no-accumulator udfs.&lt;/p&gt;

&lt;p&gt;the script to test performance is:&lt;/p&gt;

&lt;p&gt;register /homes/yinghe/pig_test/pigperf.jar;&lt;br/&gt;
register /homes/yinghe/pig_test/string.jar;&lt;br/&gt;
register /homes/yinghe/pig_test/piggybank.jar;&lt;/p&gt;

&lt;p&gt;A = load &apos;/user/pig/tests/data/pigmix_large/page_views&apos; using org.apache.pig.test.utils.datagen.PigPerformanceLoader() as (user, action, timespent, query_term, ip_addr, timestamp, estimated_revenue, page_info, page_links);&lt;/p&gt;

&lt;p&gt;B = foreach A generate user, org.apache.pig.piggybank.evaluation.string.STRINGCAT(user, ip_addr) as id;&lt;/p&gt;

&lt;p&gt;C = group B by id parallel 10;&lt;/p&gt;

&lt;p&gt;D = foreach C &lt;/p&gt;
{
    generate group, string.BagCount2(B)*string.ColumnLen2(B, 0);
}

&lt;p&gt;store D into &apos;test2&apos;;&lt;/p&gt;

&lt;p&gt;The input data has 100M rows, output has 57M rows, so the UDFs are called 57M times.&lt;br/&gt;
The result is&lt;/p&gt;

&lt;p&gt; with patch:  5min 14sec&lt;br/&gt;
 w/o patch:   5min 17sec&lt;/p&gt;</comment>
                            <comment id="12776793" author="alangates" created="Thu, 12 Nov 2009 02:04:55 +0000"  >&lt;p&gt;New patch looks good.  +1&lt;/p&gt;</comment>
                            <comment id="12776960" author="hadoopqa" created="Thu, 12 Nov 2009 12:02:57 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12424621/PIG-979.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12424621/PIG-979.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 835284.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 350 release audit warnings (more than the trunk&apos;s current 318 warnings).&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/151/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/151/testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/151/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/151/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/151/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/151/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/151/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/151/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12777090" author="yinghe" created="Thu, 12 Nov 2009 18:06:08 +0000"  >&lt;p&gt;the release audit warnings are all from html files.&lt;/p&gt;</comment>
                            <comment id="12777106" author="daijy" created="Thu, 12 Nov 2009 18:34:07 +0000"  >&lt;p&gt;Patch committed, thanks Ying, Alan!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12424621" name="PIG-979.patch" size="204391" author="yinghe" created="Wed, 11 Nov 2009 17:32:47 +0000"/>
                            <attachment id="12424249" name="PIG-979.patch" size="169616" author="yinghe" created="Sat, 7 Nov 2009 02:07:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 25 Sep 2009 23:45:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164516</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyal4f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>95733</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>