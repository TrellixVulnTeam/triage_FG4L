<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:07:46 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1434/PIG-1434.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1434] Allow casting relations to scalars</title>
                <link>https://issues.apache.org/jira/browse/PIG-1434</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;This jira is to implement a simplified version of the functionality described in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-801&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PIG-801&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The proposal is to allow casting relations to scalar types in foreach.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;A = load &apos;data&apos; as (x, y, z);&lt;br/&gt;
B = group A all;&lt;br/&gt;
C = foreach B generate COUNT(A);&lt;br/&gt;
.....&lt;br/&gt;
X = ....&lt;br/&gt;
Y = foreach X generate $1/(long) C;&lt;/p&gt;

&lt;p&gt;Couple of additional comments:&lt;/p&gt;

&lt;p&gt;(1) You can only cast relations including a single value or an error will be reported&lt;br/&gt;
(2) Name resolution is needed since relation X might have field named C in which case that field takes precedence.&lt;br/&gt;
(3) Y will look for C closest to it.&lt;/p&gt;

&lt;p&gt;Implementation thoughts:&lt;/p&gt;

&lt;p&gt;The idea is to store C into a file and then convert it into scalar via a UDF. I believe we already have a UDF that Ben Reed contributed for this purpose. Most of the work would be to update the logical plan to&lt;br/&gt;
(1) Store C&lt;br/&gt;
(2) convert the cast to the UDF&lt;/p&gt;</description>
                <environment></environment>
        <key id="12466139">PIG-1434</key>
            <summary>Allow casting relations to scalars</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="aniket486">Aniket Mokashi</assignee>
                                    <reporter username="olgan">Olga Natkovich</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Jun 2010 00:03:45 +0100</created>
                <updated>Fri, 17 Dec 2010 22:44:23 +0000</updated>
                            <resolved>Wed, 4 Aug 2010 23:33:07 +0100</resolved>
                                                    <fixVersion>0.8.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12881784" author="daijy" created="Wed, 23 Jun 2010 18:44:45 +0100"  >&lt;p&gt;We decide to change some implementation to solve the following problem:&lt;br/&gt;
1. To decide when to add store. Currently, we parse statement by statement, until we saw a store, we merge that branch into the integrated logical plan. If we add store too late, the merge algorithm cannot see the store and discard this branch. If we add store too early (during the parsing of Y, in the example), then later we do not store/dump Y, we get a redundant store for C&lt;br/&gt;
2. Implicit dependency between C -&amp;gt; Y. C will create a side file and Y will use it. However, this is not the normal data flow and should not be represented as a connection in logical plan&lt;/p&gt;

&lt;p&gt;Now we are exploring the following implementation:&lt;br/&gt;
1. Add LOScalar, POScalar to represent scalar expression&lt;br/&gt;
2. When parsing Y, we put LOScalar as a placeholder in the ForEach inner plan&lt;br/&gt;
3. When parsing store (Y), we know we need to merge the store branch. In the mean time, we check the branch (Y) if it contains a scalar, if so, find what the scalar refers to (C), add a store to that branch, and merge that branch to the integrated logical plan&lt;br/&gt;
4. Add a map reduce layer optimizer ScalarOptimizer. It check for map-reduce job contains POScalar, and map-reduce job POScalar contains the operator POScalar refers to, create a dependency between these two map-reduce jobs. ScalarOptimizer should run before MultiQueryOptimizer&lt;/p&gt;</comment>
                            <comment id="12882711" author="aniket486" created="Fri, 25 Jun 2010 22:04:01 +0100"  >&lt;p&gt;The proposal for scalars is as follows -&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
A = load &apos;1.txt&apos; as (a1, a2);
B = group A all;
C = foreach B generate COUNT(A);
Y = foreach A generate C;
store Y into &apos;Ystore&apos;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Based on the schema of C, we detect that Y means to use C as a scalar and internally track it as scalar. Thus, operations like C * C are also allowed. The limitation is that C should have long convertible value (when stored into the file). Also (int) C would be allowed and will succeed if the cast operation succeeds.&lt;/p&gt;

&lt;p&gt;As mentioned by Daniel earlier, there are two challenges in introducing scalars--&lt;br/&gt;
1. Addition of implicit store- We cannot do it too early (parsing), as we get redundant (implicit) store operation for rest of the commands in the script. If we do it too late, merge algorithm doesn&apos;t find the store and discards the branch that compiles and executes the store.&lt;br/&gt;
To solve this, whenever we process a store plan after the parsing stage, we detect the existence of scalars into the plan and add required branches that has those scalars into the current plan. We also attach LOStores for the scalars and merge the required plan.&lt;br/&gt;
2. Tracking of implicit dependency- Existence of scalar C needs to be converted into a implicit ReadScalar operation, but other than this it also needs to add dependency on the map-reduce job that generates this scalar value. We track this dependency by adding LOScalar, POScalar operators that carry the reference to the scalar they depend upon. When we compile the map reduce plan, we replace POScalar with POUserFunc to load the scalar value and mark the dependency between two map reduce jobs.&lt;/p&gt;

&lt;p&gt;I am attaching the patch with above mentioned changes.&lt;/p&gt;

&lt;p&gt;Few known issues-&lt;br/&gt;
To track the dependencies of scalars, we need access to map of operators from one type of plan to other, but this map is generated by visitors. The same visitors are responsible for converting LOScalar -&amp;gt;POScalar -&amp;gt; POUserFunc. So, if a visitor visits LOScalar before LO associated with scalar ( C in example) we do not find PO associated with C. &lt;/p&gt;</comment>
                            <comment id="12882713" author="aniket486" created="Fri, 25 Jun 2010 22:04:43 +0100"  >&lt;p&gt;Initial implemenation&lt;/p&gt;</comment>
                            <comment id="12882725" author="aniket486" created="Fri, 25 Jun 2010 22:39:28 +0100"  >&lt;p&gt;Submitting to hudson to check for test failures&lt;/p&gt;</comment>
                            <comment id="12882732" author="hadoopqa" created="Fri, 25 Jun 2010 22:59:29 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12448098/scalarImpl.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12448098/scalarImpl.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 958053.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/351/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h7.grid.sp2.yahoo.net/351/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12883958" author="thejas" created="Wed, 30 Jun 2010 16:58:51 +0100"  >&lt;p&gt;Should we have a special syntax when relational alias is used as a scalar ? Something like &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;C&amp;#93;&lt;/span&gt;&quot; (instead of just &quot;C&quot;) .&lt;br/&gt;
I think the special sytax is useful because -&lt;br/&gt;
1. Users might accidentally use relation-op alias in this scalar context and not figure out the problem until runtime (when the evaluation of the relation results in more than one row).&lt;br/&gt;
2. It will prevent surprises if a column with same name as alias is introduced in a new version of input data .  Assuming the load function implements LoadMetadata.getSchema() and the load statement does not specify a new schema. With current plan, if there is a new column by same name, the column gets used instead of relation-op value. This will give different results, not what the user expects.&lt;/p&gt;

</comment>
                            <comment id="12884369" author="dvryaboy" created="Thu, 1 Jul 2010 19:13:42 +0100"  >&lt;p&gt;A couple of thoughts that came out of the Pig conributor meeting:&lt;/p&gt;

&lt;p&gt;1) rather than scalar, we should make this work for single-tuple relations. That way a user can do something like this: &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
A = load &apos;data&apos; as (x, y, z);
B = group A all;
C = foreach B generate COUNT(A) as count, MAX(A.y) as max;
.....
X = ....
Y = foreach X generate $1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, $2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) Writing the intermediate relation to a file can cause hotspots. We should push this into the distributed cache. In cases when the dist. cache is turned off, we can at least increase the replication factor to some large-ish number (10, maybe, like the jobs?)&lt;/p&gt;</comment>
                            <comment id="12884498" author="aniket486" created="Fri, 2 Jul 2010 01:49:47 +0100"  >&lt;p&gt;I agree to Thejas that we should have a way for user to specify that he means to use C as scalar. This will avoid errors in pig code. &lt;br/&gt;
Thus, we have, &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach X generate $1/(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) [C].count, $2- [C],max, ([C].$1+2);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do we fail if we find C to have more than one row, or do we just ignore it? Should we try to detect, that C has one row, in frontend?&lt;/p&gt;</comment>
                            <comment id="12884501" author="thejas" created="Fri, 2 Jul 2010 02:00:38 +0100"  >&lt;blockquote&gt;&lt;p&gt;Do we fail if we find C to have more than one row, or do we just ignore it? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think we should fail in that case, rather than have a surprising/unpredictable behavior.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Should we try to detect, that C has one row, in frontend?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This will not be possible in all cases. Eg if input has only one row, or a filter is filtering out all except one row.&lt;/p&gt;</comment>
                            <comment id="12884502" author="dvryaboy" created="Fri, 2 Jul 2010 02:11:25 +0100"  >&lt;p&gt;SQL fails at runtime when executing queries that require a single row to be returned. So, oracle won&apos;t complain if you do this, for example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

SELECT foo.a, (SELECT c 
               FROM bar 
               WHERE foo.a = bar.a) 
from foo

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;unless the inner select produces more than one row. I think we should adopt the same approach &amp;#8211; assume the query is innocent until proven guilty.&lt;/p&gt;

&lt;p&gt;-D&lt;/p&gt;</comment>
                            <comment id="12884503" author="aniket486" created="Fri, 2 Jul 2010 02:14:21 +0100"  >&lt;p&gt;bq Should we try to detect, that C has one row, in frontend?&lt;br/&gt;
We can try to detect the pattern that makes something as scalar (by marking B (group by all, limit 1) as scalar and then C as scalar etc) and fail upfront otherwise...&lt;/p&gt;</comment>
                            <comment id="12884508" author="thejas" created="Fri, 2 Jul 2010 02:57:10 +0100"  >&lt;blockquote&gt;&lt;p&gt;We can try to detect the pattern that makes something as scalar (by marking B (group by all, limit 1) as scalar and then C as scalar etc) and fail upfront otherwise...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t think we should limit this feature to the query patterns where we can detect that in frontend. In some cases it will depend on the data.&lt;/p&gt;</comment>
                            <comment id="12884750" author="rding" created="Fri, 2 Jul 2010 18:33:56 +0100"  >
&lt;p&gt;How about a &quot;replicated&quot; cross?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
A = load &apos;data&apos; as (x, y, z);
B = group A all;
C = foreach B generate COUNT(A) as count, MAX(A.y) as max;
.....
X = ....
Y = cross X, C using &apos;repl&apos;;
Z = foreach Y generate X::$1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, X::$2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12884755" author="dvryaboy" created="Fri, 2 Jul 2010 18:54:49 +0100"  >&lt;p&gt;Richard,&lt;br/&gt;
In my opinion &amp;#8211; Yes in principle, but not as a replacement for this. &lt;br/&gt;
Cross is dangerous, I would rather have a constrained &quot;implicit scalar tuple&quot; that people use for the common case, and leave something like a replicated cross for power users (and then not limit it to number of rows in replicated relation).&lt;/p&gt;

&lt;p&gt;Agreed with not constraining this feature on the frontend, failing at runtime instead. &lt;/p&gt;</comment>
                            <comment id="12884759" author="rding" created="Fri, 2 Jul 2010 19:08:42 +0100"  >&lt;p&gt;I agree that we should use the right syntax. What I meant was that it can be implemented as a &apos;replicated&apos; cross which seems to solve the problems of implicit dependency and using distributed cache.&lt;/p&gt;</comment>
                            <comment id="12884791" author="thejas" created="Fri, 2 Jul 2010 20:48:27 +0100"  >&lt;p&gt;I think the replicated cross is a good alternative to this feature, though this feature is probably more friendly for a beginner pig user. But if this feature makes the pig code very complicated/hacky (the dependency order and stuff), I think it might not be a bad idea to encourage the use of replicated-join instead .&lt;/p&gt;

&lt;p&gt;As a side note, we can actually get &apos;replicated cross&apos; working using replicated join -&lt;br/&gt;
eg -&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 j = join l1 by 1, l2 by 1 using &apos;replicated&apos;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12884794" author="rding" created="Fri, 2 Jul 2010 21:03:12 +0100"  >
&lt;p&gt;So all one needs to do is internally replace the line: &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach X generate $1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, $2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Z = join X by 1, C by 1 using &apos;replicated&apos;;
Y = foreach Z generate X::$1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, X::$2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12884807" author="dvryaboy" created="Fri, 2 Jul 2010 22:12:11 +0100"  >&lt;p&gt;I think it&apos;s important in this particular case to ensure that C only contains one tuple, since multiple tuples will lead to very confusing output.&lt;br/&gt;
Maybe&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
C = LIMIT C 1;
Z = join X by 1, C by 1 using &apos;replicated&apos;;
Y = foreach Z generate X::$1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, X::$2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(this is where an optimization that notes that you don&apos;t need m/r boundary if the relation you are limiting only has one partition would come in handy).&lt;/p&gt;</comment>
                            <comment id="12886772" author="daijy" created="Fri, 9 Jul 2010 18:09:41 +0100"  >&lt;p&gt;We may also add some sanity check, instead of just doing a limit.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
C = foreach C generate CheckSingular(*);
Z = join X by 1, C by 1 using &apos;replicated&apos;;
Y = foreach Z generate X::$1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, X::$2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CheckSingular will check if C only have one record.&lt;/p&gt;</comment>
                            <comment id="12886825" author="daijy" created="Fri, 9 Jul 2010 19:51:32 +0100"  >&lt;p&gt;We also need to enforce C only have one part file to do the check (use limit to achieve it).&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
C = limit C 2;
C = foreach C generate CheckSingular(*);
Z = join X by 1, C by 1 using &apos;replicated&apos;;
Y = foreach Z generate X::$1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, X::$2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12886914" author="aniket486" created="Fri, 9 Jul 2010 23:05:47 +0100"  >&lt;p&gt;Adding this support makes pig code complicated/hacky, because we conclude any not parsed alias (AliasFieldOrSpec) as scalar and try to resolve it as scalar at runtime.&lt;/p&gt;

&lt;p&gt;To simplify, square bracketed syntax is a better idea, for example- &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach Z generate X::$1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) [C].count, X::$2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) [C].max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Otherwise, such queries (if typed by mistakes) can result into non-intuitive errors for users.&lt;/p&gt;</comment>
                            <comment id="12888051" author="alangates" created="Tue, 13 Jul 2010 23:19:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;Adding this support makes pig code complicated/hacky, because we conclude any not parsed alias (AliasFieldOrSpec) as scalar and try to resolve it as scalar at runtime.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t understand when we&apos;ll see this issue.  Could you give me examples of errors users might make that we&apos;ll miss.  I definitely don&apos;t like the brackets.&lt;/p&gt;</comment>
                            <comment id="12888073" author="aniket486" created="Tue, 13 Jul 2010 23:50:02 +0100"  >&lt;p&gt;I mean the cases where users type in some alias which are currently not possible to include inside a foreach statement and accidentally getting them treated as scalar by pig and then failing scripts at runtime (and may not fail in one-liner sample cases).&lt;br/&gt;
For example-&lt;br/&gt;
Y = foreach Z generate C.$0; where C is not a scalar. Currently, this would throw an error upfront, for erroneous usage (logical (do not know restrictions on foreach statement) or typing mistake) of C, But, after we add support of scalars, pig may conclude C to be used as a scalar and generate the plans accordingly.&lt;br/&gt;
By introducing square bracketed syntax we can make sure that user intended to use C as a scalar and it wasn&apos;t introduced by mistake.A cast would also work for this, but as we have introduced scalar projections (C.count, C.max etc), we already have cases wherein user may mean to cast fields(count, max) rather than scalars themselves.&lt;/p&gt;</comment>
                            <comment id="12888449" author="alangates" created="Wed, 14 Jul 2010 18:43:57 +0100"  >&lt;p&gt;Alright, I finally understand.  I think the potential confusion for the user and the Pig parser is caused by the proposed way to handle multi-columned input.  Rather than&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach Z generate X::$1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, X::$2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;if we instead do&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach Z generate X::$1/((tuple)C).count, X::$2 - ((tuple)C).max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then I believe it is clear for both user and parser what is happening.&lt;/p&gt;

&lt;p&gt;In each case C is being cast to a tuple and then fields read out of it.  C is not being cast to a long.  Then the feature remains basically as originally proposed.  The relation being cast must have one record and one field.  That one field can be a tuple to handle the case where the record has multiple fields.  But Pig will still reads it as a single column which is a tuple, and the user will need to cast it accordingly.&lt;/p&gt;

&lt;p&gt;This should also avoid accidental usage.  In the example above:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach Z generate X::$1/C.count, X::$2 - C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;should still be an error because the type checker should not be able to find C as a tuple anywhere in its symbol table.&lt;/p&gt;</comment>
                            <comment id="12888546" author="dvryaboy" created="Wed, 14 Jul 2010 22:25:03 +0100"  >&lt;p&gt;+1 for casting as tuple.  Though it may have to look like&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach Z generate X::$1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) ((tuple)C).count, X::$2 - (&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) ((tuple)C).max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Definitely -1 on the bracket syntax.. it seems very non-intuitive. &lt;/p&gt;</comment>
                            <comment id="12890105" author="aniket486" created="Tue, 20 Jul 2010 01:42:20 +0100"  >&lt;p&gt;LOScalar keeps track of the scalars in the logical plan along with the reference to the scalar alias.&lt;br/&gt;
During compilation, we add LOStores to respective scalars, we also merge plans as needed.&lt;br/&gt;
POScalar is later replaced by POUserFunc and appropriate dependency is added between the MROpers.&lt;br/&gt;
Tested with store, dump, explain.&lt;/p&gt;</comment>
                            <comment id="12890159" author="hadoopqa" created="Tue, 20 Jul 2010 03:56:21 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12449903/ScalarImpl1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12449903/ScalarImpl1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 965559.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    -1 contrib tests.  The patch failed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/347/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/347/testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/347/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/347/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12893939" author="hadoopqa" created="Fri, 30 Jul 2010 06:27:55 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12450872/ScalarImplFinale.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12450872/ScalarImplFinale.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 980276.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 146 javac compiler warnings (more than the trunk&apos;s current 145 warnings).&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 5 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 406 release audit warnings (more than the trunk&apos;s current 400 warnings).&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    -1 contrib tests.  The patch failed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/366/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/366/testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/366/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/366/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/366/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/366/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/366/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/366/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12894657" author="rding" created="Mon, 2 Aug 2010 20:14:01 +0100"  >&lt;p&gt;It looks really good. Additional corner cases need to be considered:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;missing field in scalar file&lt;/li&gt;
	&lt;li&gt;empty scalar file&lt;/li&gt;
	&lt;li&gt;empty input directory&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some minor issues:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In PigServer. FileLocalizer.getTemporaryPath should be changed to use non-deprecated method.&lt;/li&gt;
	&lt;li&gt;In ScalarFinder, method isScalarPresent is not used.&lt;/li&gt;
	&lt;li&gt;In MRCompiler, variable scalarPhyFinder should be local so that ScalarPhyFinder can be simplified.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Also add a test case for using scalar in multi-query would be good.&lt;/p&gt;</comment>
                            <comment id="12894771" author="aniket486" created="Tue, 3 Aug 2010 02:07:36 +0100"  >&lt;p&gt;Missing field in scalar file are handled by returning null. Empty scalar file/empty scalar directory tested.&lt;br/&gt;
ScalarPhyFinder is moved as local variable. Removed redundant comments and apis inside visitors.&lt;br/&gt;
Added a new testcase for multiquery.&lt;br/&gt;
Fixed findbugs, javac and javadoc warnings (needs findbugs exclusion since we throw an error when second line is found (not_null) in UDF).&lt;/p&gt;</comment>
                            <comment id="12894837" author="hadoopqa" created="Tue, 3 Aug 2010 08:09:28 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12451096/ScalarImplFinale1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12451096/ScalarImplFinale1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 980930.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 409 release audit warnings (more than the trunk&apos;s current 403 warnings).&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    -1 contrib tests.  The patch failed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/368/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/368/testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/368/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/368/artifact/trunk/patchprocess/releaseAuditDiffWarnings.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/368/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/368/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/368/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Pig-Patch-h8.grid.sp2.yahoo.net/368/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12895034" author="aniket486" created="Tue, 3 Aug 2010 21:52:00 +0100"  >&lt;p&gt;Removed the unused variable(findbug warning)&lt;/p&gt;</comment>
                            <comment id="12895408" author="aniket486" created="Wed, 4 Aug 2010 21:37:37 +0100"  >&lt;p&gt;Attaching rebased version of the patch...&lt;/p&gt;</comment>
                            <comment id="12895451" author="rding" created="Wed, 4 Aug 2010 23:33:07 +0100"  >&lt;p&gt;The patch is committed to trunk. Thanks Aniket for contributing this feature.&lt;/p&gt;</comment>
                            <comment id="12899042" author="aniket486" created="Mon, 16 Aug 2010 20:18:57 +0100"  >&lt;p&gt;Comments on the finalized syntax--&lt;/p&gt;

&lt;p&gt;With the above changes Pig now supports -&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach X generate $1/(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.count, $2-(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) C.max;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;1. Casts are &lt;b&gt;optional&lt;/b&gt; and the datatype of scalar depends on the schema of C (ie depending on the schema of C, we add the casts implicitly. So, typically, count is a long and max is a double). In case of undeclared(null) schema for C, default type of scalar is &lt;b&gt;chararray&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;2. Projections are mandatory. For example&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach X generate C; &lt;span class=&quot;code-comment&quot;&gt;// is an *error*&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We need to use-&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Y = foreach X generate C.$0; 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3. Check if C is a scalar or not is not performed until runtime, thus it will fail at the time of execution of UDF with ExecException(&quot;Scalar has more than one row in the output&quot;).&lt;/p&gt;</comment>
                            <comment id="12900099" author="thejas" created="Thu, 19 Aug 2010 00:16:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;1. Casts are optional and the datatype of scalar depends on the schema of C (ie depending on the schema of C, we add the casts implicitly. So, typically, count is a long and max is a double). In case of undeclared(null) schema for C, default type of scalar is chararray.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The default type everywhere else in pig is bytearray. I think we should follow that convention here as well . Any reason not to do that ? (The change can be part of a separate jira.)&lt;/p&gt;</comment>
                            <comment id="12905336" author="thejas" created="Thu, 2 Sep 2010 01:21:38 +0100"  >&lt;p&gt;Changed the release note to incorporate the change of default datatype to bytearray in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1572&quot; title=&quot;change default datatype when relations are used as scalar to bytearray&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1572&quot;&gt;&lt;del&gt;PIG-1572&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12471866">PIG-1548</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12449968" name="ScalarImpl1.patch" size="44111" author="aniket486" created="Tue, 20 Jul 2010 21:25:12 +0100"/>
                            <attachment id="12450772" name="ScalarImpl5.patch" size="58147" author="aniket486" created="Thu, 29 Jul 2010 00:33:40 +0100"/>
                            <attachment id="12450872" name="ScalarImplFinale.patch" size="59139" author="aniket486" created="Fri, 30 Jul 2010 00:14:47 +0100"/>
                            <attachment id="12451158" name="ScalarImplFinale1.patch" size="60381" author="aniket486" created="Tue, 3 Aug 2010 21:52:00 +0100"/>
                            <attachment id="12451262" name="ScalarImplFinaleRebase.patch" size="57672" author="aniket486" created="Wed, 4 Aug 2010 21:37:37 +0100"/>
                            <attachment id="12448098" name="scalarImpl.patch" size="45457" author="aniket486" created="Fri, 25 Jun 2010 22:04:43 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 23 Jun 2010 17:44:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>164923</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyaqef:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>96588</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>&lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1434&quot; title=&quot;Allow casting relations to scalars&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1434&quot;&gt;&lt;strike&gt;PIG-1434&lt;/strike&gt;&lt;/a&gt; adds functionality that allows to cast elements of a single-tuple relation into a scalar value. The primary use case for this is using values of global aggregates in the follow up computations. For instance,&lt;br/&gt;
&lt;br/&gt;
A = load &amp;#39;mydata&amp;#39; as (userid, clicks);&lt;br/&gt;
&lt;br/&gt;
B = group A all;&lt;br/&gt;
&lt;br/&gt;
C = foreach B genertate SUM(A.clicks) as total;&lt;br/&gt;
&lt;br/&gt;
D = foreach A generate userid,  clicks/(double)C.total;&lt;br/&gt;
&lt;br/&gt;
dump D;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&lt;br/&gt;
This example allows computing the % of the clicks belonging to a particular user. Note that if the SUM as not given a name, a position can be used as well (userid,  clicks/(double)C.$0); Also, note that if explicit cast is not used an implict cast would be inserted according to regular Pig rules. Also, please, note that when the schema can&amp;#39;t be inferred bytearray is used.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&lt;br/&gt;
The relation can be used in any place where an expression of the type would make sense. This includes FOREACH, FILTER, and SPLIT.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&lt;br/&gt;
A multi field tuple can also be used:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&lt;br/&gt;
A = load &amp;#39;mydata&amp;#39; as (userid, clicks);&lt;br/&gt;
&lt;br/&gt;
B = group A all;&lt;br/&gt;
&lt;br/&gt;
C = foreach B genertate SUM(A.clicks) as total, COUNT(A) as cnt;&lt;br/&gt;
&lt;br/&gt;
D = FILTER A by clicks &amp;gt; C.total/3&lt;br/&gt;
&lt;br/&gt;
E = foreach D generate userid,  clicks/(double)C.total, cnt;&lt;br/&gt;
&lt;br/&gt;
Dump E;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&lt;br/&gt;
If a relation contains more than single tuple, a runtime error is generated: &amp;quot;Scalar has more than one row in the output&amp;quot;&lt;br/&gt;
&lt;br/&gt;
</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>documentation</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>