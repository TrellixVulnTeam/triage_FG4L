<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:10:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/PIG-1631/PIG-1631.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[PIG-1631] Support to 2 level nested foreach</title>
                <link>https://issues.apache.org/jira/browse/PIG-1631</link>
                <project id="12310730" key="PIG">Pig</project>
                    <description>&lt;p&gt;What I would like to do is generate certain metrics for every listing impression in the context of a page like clicks on the page etc. So, I first group by to get clicks and impression together. Now, I would want to iterate through the mini-table (one per serve-id) and compute metrics. Since nested foreach within foreach is not supported I ended up writing a UDF that took both the bags and computed the metric. It would have been elegant to keep the logic of iterating over the records outside in the PIG script. &lt;/p&gt;

&lt;p&gt;Here is some pseudocode of how I would have liked to write it:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-- Let us say in our page context there was click on rank 2 &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; which there were 3 ads 
A1 = LOAD &apos;...&apos; AS (page_id, rank); -- clicks. 
A2 = Load &apos;...&apos; AS (page_id, rank); -- impressions

B = COGROUP A1 by (page_id), A2 by (page_id); 

-- Let us say B contains the following schema 
-- (group, {(A1...)} {(A2...)})  
-- Each record would be in B would be:
-- page_id_1, {(page_id_1, 2)} {(page_id_1, 1) (page_id_1, 2) (page_id_1, 3))}

C = FOREACH B GENERATE {
                D = FLATTEN(A1), FLATTEN(A2); -- This wont work in current pig as well. Basically, I would like a mini-table which represents an entire serve. 
                FOREACH D GENERATE
                        page_id_1,
                        A2:rank,
                        SOMEUDF(A1:rank, A2::rank);  -- This UDF returns a value (like v1, v2, v3 depending on A1::rank and A2::rank)
};
# output
# page_id, 1, v1
# page_id,  2, v2
# page_id, 3, v3

DUMP C;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;P.S: I understand that I could have alternatively, flattened the fields of B and then done a GROUP on page_id and then iterated through the records calling &apos;SOMEUDF&apos; appropriately but that would be 2 map-reduce operations AFAIK. &lt;/p&gt;

&lt;p&gt;This is a candidate project for Google summer of code 2011. More information about the program can be found at &lt;a href=&quot;http://wiki.apache.org/pig/GSoc2011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/pig/GSoc2011&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12474634">PIG-1631</key>
            <summary>Support to 2 level nested foreach</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="aniket486">Aniket Mokashi</assignee>
                                    <reporter username="viraj">Viraj Bhat</reporter>
                        <labels>
                            <label>gsoc2011</label>
                    </labels>
                <created>Mon, 20 Sep 2010 22:49:25 +0100</created>
                <updated>Thu, 26 Apr 2012 21:32:53 +0100</updated>
                            <resolved>Sun, 7 Aug 2011 08:48:49 +0100</resolved>
                                    <version>0.7.0</version>
                                    <fixVersion>0.10.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13052304" author="scott_carey" created="Tue, 21 Jun 2011 02:25:32 +0100"  >&lt;blockquote&gt;
&lt;p&gt;P.S: I understand that I could have alternatively, flattened the fields of B and then done a GROUP on page_id and then iterated through the records calling &apos;SOMEUDF&apos; appropriately but that would be 2 map-reduce operations AFAIK.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What if the optimizer knew that an identical group right after such a flatten should be optimized as one M/R pass?  (Does Pig already do this optmization?)&lt;/p&gt;

&lt;p&gt;Nesting foreach is more intuitive and much more succinct than doing extra groups however.&lt;/p&gt;</comment>
                            <comment id="13053082" author="aniket486" created="Wed, 22 Jun 2011 08:01:40 +0100"  >&lt;p&gt;Initial patch: Parser changes + foreach projections support&lt;/p&gt;</comment>
                            <comment id="13056977" author="aniket486" created="Wed, 29 Jun 2011 04:45:29 +0100"  >&lt;p&gt;With the above patch I tested following scenarios-&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
a = load &apos;1.txt&apos; as (a0:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, a1:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, a2:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;);
b = group a by a0;
c = foreach b { c1 = foreach a generate a1; generate c1; }
c = foreach b { c1 = foreach a generate 2*a1; generate c1; }
c = foreach b { c1 = foreach a generate ABS(a1); generate c1; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The only problem is SecondaryKeyOptimizer:630, where we check if the roots of POForeach are more than 1 (Error:2207). We can fix this by returning true instead of exception. Then above scenarios work fine.&lt;br/&gt;
Is that the right way? Please explain the role of this check in the SecondaryKeyOptimizer.&lt;/p&gt;</comment>
                            <comment id="13064406" author="aniket486" created="Wed, 13 Jul 2011 08:37:38 +0100"  >&lt;p&gt;patch with test cases&lt;/p&gt;</comment>
                            <comment id="13064962" author="ashutoshc" created="Thu, 14 Jul 2011 00:48:57 +0100"  >&lt;p&gt;Patch looks good. Currently only 2 level nesting is supported. You are not allowed to have a block inside nested foreach. This is fine for now. But, can you summarize whats the complexity in doing that so if we do it later we will be aware of it.&lt;/p&gt;</comment>
                            <comment id="13078646" author="aniket486" created="Wed, 3 Aug 2011 09:45:54 +0100"  >&lt;p&gt;With 2 level nested foreach, pig supports iterating over an inner bag of an alias.&lt;br/&gt;
For example,&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
c = foreach b { c1 = foreach a generate a1; generate c1; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Support of multi level nested foreach would mean, pig would be able to iterate over inner bags of bags of an alias.&lt;br/&gt;
For example, pig would be able to support something similar to-&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
f = foreach e { f1 = foreach b { e1 = a.a1; generate e1;}; generate f1; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Note: This expression has 3 level nested foreach, 2 from foreach + 1 from projection.)&lt;/p&gt;

&lt;p&gt;Although this is desirable, there are several complications with respect to current state of the code.&lt;br/&gt;
1. Current parser nodes are not designed to support multi level recursive calls. We currently use a lot of global state in order to make a decision about the parsing logic. To make it support multi-level foreach, we would need to rewrite a lot of parser code to support recursion.&lt;br/&gt;
For example, col_ref which reduces to alias_col_ref, infers inOp from $statement::inputAlias, which is assumed to be set by rel operator. But, once we add nesting, we have to consider a stack-traceback inorder to infer the next-higher inOp.&lt;br/&gt;
2. Pig currently supports 6 nested operations, which would be leaves of tree once we support multi-level nested foreach. These operations would need to revisited in order to complete the support.&lt;br/&gt;
3. We would need to add a lot of validations for negative cases. This is complicated by the fact that pig supports scalars.&lt;/p&gt;

&lt;p&gt;Earlier, my intuition was that multi-level nested foreach would be supported by pig &quot;backend&quot; similar to 2 level nested foreach, as the dependencies in the plan would take care of streaming of the bags inside inner foreachs. To justify my hypothesis, I tried to develop a patch that can support above mentioned multi-level foreach with following script (Patch attached). But, the code changes break the other related code paths.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
a = load &apos;1.txt&apos; as (a0:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, a1:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, a2:&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;);
b = group a by a0;
e = group b all;
f = foreach e { f1 = foreach b { e1 = a.a1; generate e1;}; generate f1; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thoughts? Would it be a good idea to support multi-level foreach with only foreach generate nesting?&lt;/p&gt;</comment>
                            <comment id="13079525" author="daijy" created="Thu, 4 Aug 2011 19:44:13 +0100"  >&lt;p&gt;Hi, Aniket,&lt;br/&gt;
Thanks for your explanation, it is helpful for the future. For your patch &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-1631&quot; title=&quot;Support to 2 level nested foreach&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-1631&quot;&gt;&lt;del&gt;PIG-1631&lt;/del&gt;&lt;/a&gt;_3.patch, it is outdated, can you regenerate the patch? One thing I notice is you didn&apos;t change AstPrinter.g and AliasMasker.g. If you change LogicalPlanGenerator.g, you will have to change all tree parsers.&lt;/p&gt;</comment>
                            <comment id="13079825" author="azaroth" created="Fri, 5 Aug 2011 09:30:28 +0100"  >&lt;p&gt;Hi Aniket,&lt;br/&gt;
with reference to your point 1, I think it is the same issue I raised in &lt;a href=&quot;https://issues.apache.org/jira/browse/PIG-2138&quot; title=&quot;Inline_op should use shared dynamic stack&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PIG-2138&quot;&gt;PIG-2138&lt;/a&gt;&lt;br/&gt;
I also think that it would be good to solve it for good, even though it will require quite some rework of the grammar.&lt;br/&gt;
But I think it will pay off in the long run by making the grammar cleaner and easier to modify.&lt;/p&gt;</comment>
                            <comment id="13079826" author="aniket486" created="Fri, 5 Aug 2011 09:31:45 +0100"  >&lt;p&gt;rebased the patch and included changes for AstMasker.g and AstPrinter.g&lt;/p&gt;</comment>
                            <comment id="13080103" author="daijy" created="Fri, 5 Aug 2011 18:42:46 +0100"  >&lt;p&gt;There is compilation failures in AstPrinter.g. Can you check?&lt;/p&gt;</comment>
                            <comment id="13080345" author="aniket486" created="Sat, 6 Aug 2011 05:03:31 +0100"  >&lt;p&gt;parentheses got deleted while uploading last time.. Updated the required patch..&lt;br/&gt;
Unit tests pass.. &lt;/p&gt;</comment>
                            <comment id="13080553" author="daijy" created="Sun, 7 Aug 2011 08:48:49 +0100"  >&lt;p&gt;Unit test pass. Test-patch:&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; -1 overall.  &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 @author.  The patch does not contain any @author tags.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 tests included.  The patch appears to include 6 new or modified tests.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     -1 javac.  The applied patch generated 953 javac compiler warnings (more than the trunk&apos;s current 946 warnings).&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt; &lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;     +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;The &quot;-1 javac&quot; is generated by antlr. &lt;/p&gt;

&lt;p&gt;Patch committed to trunk. Thanks Aniket!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12489173" name="MultiLevelNestedForeach1.patch" size="7221" author="aniket486" created="Wed, 3 Aug 2011 09:50:22 +0100"/>
                            <attachment id="12483412" name="NestedForeachPatch3.txt" size="6147" author="aniket486" created="Wed, 22 Jun 2011 08:02:05 +0100"/>
                            <attachment id="12486272" name="PIG-1631_3.patch" size="13779" author="aniket486" created="Wed, 13 Jul 2011 08:37:38 +0100"/>
                            <attachment id="12489562" name="PIG-1631_4.patch" size="15635" author="aniket486" created="Sat, 6 Aug 2011 05:03:31 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 21 Jun 2011 01:25:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>65711</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyasj3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>96933</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Allow two level foreach in Pig script:&lt;br/&gt;
&lt;br/&gt;
a = load &amp;#39;1.txt&amp;#39; as (a0, a1:chararray, a2:chararray);&lt;br/&gt;
b = group a by a0;&lt;br/&gt;
c = foreach b {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c0 = foreach a generate TOMAP(a1,a2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generate c0;&lt;br/&gt;
}&lt;br/&gt;
dump c;&lt;br/&gt;
&lt;br/&gt;
Here is another example which uses both nested cross and foreach:&lt;br/&gt;
a = load &amp;#39;1.txt&amp;#39; as (a0, a1, a2);&lt;br/&gt;
b = load &amp;#39;2.txt&amp;#39; as (b0, b1);&lt;br/&gt;
c = cogroup a by a0, b by b0;&lt;br/&gt;
d = foreach c {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d0 = cross a, b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d1 = foreach d0 generate a1+b1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generate d1;&lt;br/&gt;
}&lt;br/&gt;
dump d;&lt;br/&gt;
&lt;br/&gt;
ForEach nested more than 3 levels will result a grammar error:&lt;br/&gt;
ERROR 1200: &amp;lt;file 3.pig, line 6, column 20&amp;gt;  mismatched input &amp;#39;{&amp;#39; expecting GENERATE</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>