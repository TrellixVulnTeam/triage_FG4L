org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.clone()
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.equals(Object)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insert(boolean,List<Integer>,Integer,byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insertColumnChainInfo(ColumnChainInfo)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insertInReduce(boolean,List<Integer>,Integer,byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insertInReduce(POProject)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insert(int,byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insert(List<Integer>,Integer,byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.ColumnInfo(boolean,List<Integer>,Integer,byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.ColumnInfo(int,byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.ColumnInfo(List<Integer>,Integer,byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.hashCode()
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.isStar()
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.toString()
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer.findAlgebraicOps(List<PhysicalPlan>,PhysicalPlan)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getQuantileJob(POSort,MapReduceOper,FileSpec,FileSpec,int)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getQuantileJob(POSort,MapReduceOper,FileSpec,FileSpec,int,Pair<Integer,Byte>[],Integer,Byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getSamplingJob(POSort,MapReduceOper,List<PhysicalPlan>,PhysicalPlan,FileSpec,FileSpec,int,List<PhysicalPlan>,PhysicalPlan,String,String[],String)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getSortCols(List<PhysicalPlan>,PhysicalPlan)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getSortJob(POSort,MapReduceOper,FileSpec,FileSpec,int,Pair<Integer,Byte>[],Integer,Byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getSortJob(POSort,MapReduceOper,FileSpec,FileSpec,int,Pair<POProject,Byte>[],POProject,Byte)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.LastInputStreamingOptimizer.visitMROp(MapReduceOper)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitDistinct(PODistinct)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitSort(POSort)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.collectColumnChain(PhysicalPlan,ColumnChainInfo)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.getSortKeyInfo(POLocalRearrange)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.processProject(POProject)
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.setSecondaryPlan(PhysicalPlan,POLocalRearrange,SortKeyInfo)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.addColumn(ArrayList<Object>,Object,Tuple,int)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.consumeInputBag(Result)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getColumn()
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getColumns()
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNext()
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNext(Tuple)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getRangeTuple(Tuple)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getStartCol()
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.isProjectToEnd()
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.isRangeInvalid(int)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.name()
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.POProject(OperatorKey)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.POProject(OperatorKey,int,ArrayList<Integer>,Integer)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setColumn(int)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setColumns(ArrayList<Integer>,Integer)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setOverloaded(boolean)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setProjectToEnd(int)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setStar(boolean)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogToPhyTranslationVisitor.visit(LOSort)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.getLeaves()
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setPlansFromCombiner(List<PhysicalPlan>,PhysicalPlan)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setPlans(List<PhysicalPlan>,PhysicalPlan)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setSecondaryPlans(List<PhysicalPlan>,PhysicalPlan)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.getValueTuple(NullableTuple,int)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.getSortInfo()
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.illustratorMarkup(Object,Object,int)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.POSort(OperatorKey,int,List,List<PhysicalPlan>,PhysicalPlan,List<Boolean>,Boolean,POUserComparisonFunc)
org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.setSortInfo(SortInfo)
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(ProjectExpression)
org.apache.pig.newplan.logical.expression.ProjectExpression.deepCopy(LogicalExpressionPlan)
org.apache.pig.newplan.logical.expression.ProjectExpression.findColNum(String)
org.apache.pig.newplan.logical.expression.ProjectExpression.getColNum()
org.apache.pig.newplan.logical.expression.ProjectExpression.getEndCol()
org.apache.pig.newplan.logical.expression.ProjectExpression.getFieldSchema()
org.apache.pig.newplan.logical.expression.ProjectExpression.getType()
org.apache.pig.newplan.logical.expression.ProjectExpression.isProjectStar()
org.apache.pig.newplan.logical.expression.ProjectExpression.isRangeOrStarProject()
org.apache.pig.newplan.logical.expression.ProjectExpression.isRangeProject()
org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(OperatorPlan,int,int,LogicalRelationalOperator)
org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(OperatorPlan,int,LogicalRelationalOperator)
org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(OperatorPlan,int,String,LogicalRelationalOperator)
org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(ProjectExpression,OperatorPlan)
org.apache.pig.newplan.logical.expression.ProjectExpression.setColumnNumberFromAlias()
org.apache.pig.newplan.logical.expression.ProjectExpression.setEndAlias(String)
org.apache.pig.newplan.logical.expression.ProjectExpression.setEndCol(int)
org.apache.pig.newplan.logical.expression.ProjectExpression.setStartAlias(String)
org.apache.pig.newplan.logical.expression.ProjectExpression.setStartCol(int)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOForEach)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOInnerLoad)
org.apache.pig.newplan.logical.relational.LOInnerLoad.getSchema()
org.apache.pig.newplan.logical.relational.LOInnerLoad.LOInnerLoad(LogicalPlan,LOForEach,ProjectExpression)
org.apache.pig.newplan.logical.relational.LOInnerLoad.LOInnerLoad(OperatorPlan,LOForEach,int)
org.apache.pig.newplan.logical.relational.LOInnerLoad.LOInnerLoad(OperatorPlan,LOForEach,String)
org.apache.pig.newplan.logical.relational.LOSort.getOrder(List<Boolean>,Boolean,int)
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.collectUids(LogicalRelationalOperator,LogicalExpressionPlan,Set<Long>,Long)
org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.getFilterProjectionUids(LOFilter)
org.apache.pig.newplan.logical.rules.MergeForEach.MergeForEachTransformer.check(OperatorPlan)
org.apache.pig.newplan.logical.visitor.ColumnAliasConversionVisitor.getVisitor(LogicalExpressionPlan)
org.apache.pig.newplan.logical.visitor.ColumnAliasConversionVisitor.getVisitor.visit(DereferenceExpression)
org.apache.pig.newplan.logical.visitor.ProjectStarExpander.expandPlan(LogicalExpressionPlan,ProjectExpression,int)
org.apache.pig.newplan.logical.visitor.ProjectStarExpander.getProjectLonelyStar(LogicalExpressionPlan,Map<Integer,LogicalRelationalOperator>,Integer,LogicalRelationalOperator)
org.apache.pig.newplan.logical.visitor.ProjectStarExpander.getProjectStar(LogicalExpressionPlan)
org.apache.pig.newplan.logical.visitor.ProjectStarExpander.visit(LOCogroup)
org.apache.pig.parser.LogicalPlanBuilder.buildCommand(SourceLocation,String,List<String>,String,List<String>,String,List<HandleSpec>,HandleSpec,List<HandleSpec>,HandleSpec,String,Integer)
org.apache.pig.parser.LogicalPlanBuilder.buildGenerateOp(LOForEach,LOGenerate,Map<String,Operator>,String,Operator,List<LogicalExpressionPlan>,LogicalExpressionPlan,List<Boolean>,Boolean,List<LogicalSchema>,LogicalSchema)
org.apache.pig.parser.LogicalPlanBuilder.buildGenerateOp(SourceLocation,LOForEach,LOGenerate,Map<String,Operator>,String,Operator,List<LogicalExpressionPlan>,LogicalExpressionPlan,List<Boolean>,Boolean,List<LogicalSchema>,LogicalSchema)
org.apache.pig.parser.LogicalPlanBuilder.buildNestedLimitOp(LogicalPlan,String,Operator,long)
org.apache.pig.parser.LogicalPlanBuilder.buildNestedOperatorInput(SourceLocation,LogicalPlan,LOForEach,Map<String,Operator>,String,Operator,LogicalExpression)
org.apache.pig.parser.LogicalPlanBuilder.buildNestedOp(LogicalPlan,LogicalRelationalOperator,String,Operator)
org.apache.pig.parser.LogicalPlanBuilder.buildNestedProjectOp(LogicalPlan,LOForEach,Map<String,Operator>,String,Operator,String,ProjectExpression,List<LogicalExpressionPlan>,LogicalExpressionPlan)
org.apache.pig.parser.LogicalPlanBuilder.buildNestedProjectOp(SourceLocation,LogicalPlan,LOForEach,Map<String,Operator>,String,Operator,String,ProjectExpression,List<LogicalExpressionPlan>,LogicalExpressionPlan)
org.apache.pig.parser.LogicalPlanBuilder.buildNestedSortOp(LOSort,LogicalPlan,String,Operator,List<LogicalExpressionPlan>,LogicalExpressionPlan,List<Boolean>,Boolean,FuncSpec)
org.apache.pig.parser.LogicalPlanBuilder.buildProjectExpr(LogicalExpressionPlan,LogicalRelationalOperator,int,String,int)
org.apache.pig.parser.LogicalPlanBuilder.buildProjectExpr(SourceLocation,LogicalExpressionPlan,LogicalRelationalOperator,int,String,int)
org.apache.pig.parser.LogicalPlanBuilder.buildProjectExpr(SourceLocation,LogicalExpressionPlan,LogicalRelationalOperator,Map<String,LogicalExpressionPlan>,String,LogicalExpressionPlan,String,int)
org.apache.pig.parser.LogicalPlanBuilder.buildRangeProjectExpr(SourceLocation,LogicalExpressionPlan,LogicalRelationalOperator,int,LogicalExpression,LogicalExpression)
org.apache.pig.parser.LogicalPlanBuilder.buildUDF(SourceLocation,LogicalExpressionPlan,String,List<LogicalExpression>,LogicalExpression)
org.apache.pig.parser.LogicalPlanBuilder.checkRangeProjectExpr(SourceLocation,LogicalExpression)
org.apache.pig.parser.LogicalPlanBuilder.createGenerateOp(LogicalPlan)
org.apache.pig.parser.LogicalPlanBuilder.createInnerLoad(SourceLocation,LogicalPlan,LOForEach,String)
org.apache.pig.parser.LogicalPlanBuilder.processExpressionPlan(LOForEach,LogicalPlan,LogicalExpressionPlan,Map<String,Operator>,String,Operator,ArrayList<Operator>,Operator)
org.apache.pig.parser.LogicalPlanBuilder.setupInnerLoadAndProj(LOInnerLoad,ProjectExpression,LogicalPlan,ArrayList<Operator>,Operator)
org.apache.pig.parser.ParserException.ParserException(String)
org.apache.pig.parser.ParserException.ParserException(String,Throwable)
org.apache.pig.test.TestProjectRange.checkNumExpressionPlansForGroup(LogicalPlan,int)
org.apache.pig.test.TestProjectRange.checkNumExpressionPlansForJoin(LogicalPlan,int)
org.apache.pig.test.TestProjectRange.checkNumExpressionPlansForSort(LogicalPlan,int,boolean[])
org.apache.pig.test.TestProjectRange.compileAndCompareSchema(Schema,String,String)
org.apache.pig.test.TestProjectRange.compileAndCompareSchema(String,String,String)
org.apache.pig.test.TestProjectRange.createAndProcessLPlan(String)
org.apache.pig.test.TestProjectRange.generateLogicalPlan(String)
org.apache.pig.test.TestProjectRange.getCleanedGroupSchema(String)
org.apache.pig.test.TestProjectRange.oneTimeSetUp()
org.apache.pig.test.TestProjectRange.oneTimeTearDown()
org.apache.pig.test.TestProjectRange.setAliasesToNull(Schema)
org.apache.pig.test.TestProjectRange.setup()
org.apache.pig.test.TestProjectRange.tearDown()
org.apache.pig.test.TestProjectRange.testEndRangeForeachWSchema()
org.apache.pig.test.TestProjectRange.testFullRangeForeachWSchema()
org.apache.pig.test.TestProjectRange.testMixRangeForeachNOSchema()
org.apache.pig.test.TestProjectRange.testMixRangeForeachWSchema()
org.apache.pig.test.TestProjectRange.testNegativeForeachNOSchema()
org.apache.pig.test.TestProjectRange.testNegativeForeachWSchema()
org.apache.pig.test.TestProjectRange.testRangeCoGroupMixWSchema()
org.apache.pig.test.TestProjectRange.testRangeCoGroupNegNoSchema()
org.apache.pig.test.TestProjectRange.testRangeForeachWFilterNOSchema()
org.apache.pig.test.TestProjectRange.testRangeGroupMixNOSchema()
org.apache.pig.test.TestProjectRange.testRangeGroupMixWSchema()
org.apache.pig.test.TestProjectRange.testRangeGroupWSchema()
org.apache.pig.test.TestProjectRange.testRangeJoinMixNOSchema()
org.apache.pig.test.TestProjectRange.testRangeJoinMixWSchema()
org.apache.pig.test.TestProjectRange.testRangeOrderByMixNOSchema()
org.apache.pig.test.TestProjectRange.testRangeOrderByMixWSchema()
org.apache.pig.test.TestProjectRange.testRangeOrderByNestedNOSchema()
org.apache.pig.test.TestProjectRange.testRangeOrderByNestedWSchema()
org.apache.pig.test.TestProjectRange.testRangeOrderByStartNegNOSchema()
org.apache.pig.test.TestProjectRange.testRangeOrderByStartNOSchema()
org.apache.pig.test.TestProjectRange.testRangeOrderByWSchema()
org.apache.pig.test.TestProjectRange.testStartRangeForeachNOSchema()
org.apache.pig.test.TestProjectRange.testStartRangeForeachWSchema()
org.apache.pig.test.TestTypeCheckingValidatorNewLP.testCogroupStarLineageNoSchemaFail()
org.apache.pig.test.Util.checkExceptionMessage(String,String,String)
org.apache.pig.test.Util.checkQueryOutputs(Iterator<Tuple>,Tuple,List<Tuple>,Tuple)
org.apache.pig.test.Util.checkQueryOutputs(Iterator<Tuple>,Tuple,Tuple[])
org.apache.pig.test.Util.checkStrContainsSubStr(String,String)
org.apache.pig.test.Util.createFile(String[])
org.apache.pig.test.Util.getTuplesFromConstantTupleStringAsByteArray(String[])
org.apache.pig.test.Util.getTuplesFromConstantTupleStrings(String[])
org.apache.pig.test.utils.NewLogicalPlanUtil.getRelOpFromPlan(LogicalPlan,Class<?>)
org.apache.pig.test.utils.NewLogicalPlanUtil.getRelOpsFromPlan(LogicalPlan,Class<?>)
