org.apache.pig.builtin.ABS.getArgToFuncMapping()
org.apache.pig.builtin.ARITY.outputSchema(Schema)
org.apache.pig.builtin.Assert.exec(Tuple)
org.apache.pig.builtin.DIFF.computeDiff(DataBag,DataBag,DataBag)
org.apache.pig.builtin.INVERSEMAP.doInverse(Map<String,Object>,String,Object)
org.apache.pig.builtin.SUBTRACT.toSet(DataBag)
org.apache.pig.builtin.TOBAG.nullEquals(Schema,Schema)
org.apache.pig.builtin.ToDate.extractDateTime(String)
org.apache.pig.EvalFunc.allowCompileTimeCalculation()
org.apache.pig.EvalFunc.getSchemaType()
org.apache.pig.Main.printProperties()
org.apache.pig.Main.run(String,PigProgressNotificationListener)
org.apache.pig.Main.usage()
org.apache.pig.newplan.BaseOperatorPlan.moveTree(Operator,BaseOperatorPlan)
org.apache.pig.newplan.BaseOperatorPlan.pathExists(Operator,Operator)
org.apache.pig.newplan.BaseOperatorPlan.trimBelow(Operator)
org.apache.pig.newplan.logical.expression.ConstantExpression.deepCopy(LogicalExpressionPlan)
org.apache.pig.newplan.logical.expression.ConstantExpression.getFieldSchema()
org.apache.pig.newplan.logical.expression.ConstantExpression.inheritSchema(LogicalExpression)
org.apache.pig.newplan.logical.expression.UserFuncExpression.getEvalFunc()
org.apache.pig.newplan.logical.expression.UserFuncExpression.isViaDefine()
org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.buildRuleSets()
org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.LogicalPlanOptimizer(OperatorPlan,int,Set<String>,String)
org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.LogicalPlanOptimizer(OperatorPlan,int,Set<String>,String,PigContext)
org.apache.pig.newplan.logical.relational.LogicalPlan.optimize(PigContext)
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculator(String,PigContext)
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.check(OperatorPlan)
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorExpressionVisitor.ConstantCalculatorExpressionVisitor(OperatorPlan,LogicalRelationalOperator,PigContext)
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorExpressionVisitor.execute(LogicalExpression)
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorLogicalPlanVisitor.ConstantCalculatorLogicalPlanVisitor(OperatorPlan,PigContext)
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorLogicalPlanVisitor.getVisitor(LogicalExpressionPlan)
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorTransformer(List<LogicalRelationalOperator>,LogicalRelationalOperator,PigContext)
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.reportChanges()
org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.transform(OperatorPlan)
org.apache.pig.newplan.logical.rules.ConstantCalculator.getNewTransformer()
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.binaryExpressionConstPrune(LogicalExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.ConstExpEvaluator(OperatorPlan)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.noConstPrune(LogicalExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.unaryExpressionConstPrune(LogicalExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(AddExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(AndExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(BinCondExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(CastExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(ConstantExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(DereferenceExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(DivideExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(EqualExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(GreaterThanExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(IsNullExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(MapLookupExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(ModExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(MultiplyExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(NegativeExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(NotExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(OrExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(ProjectExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(RegexExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(SubtractExpression)
org.apache.pig.newplan.logical.rules.ConstExpEvaluator.visit(UserFuncExpression)
org.apache.pig.newplan.logical.rules.DNFExpression.accept(PlanVisitor)
org.apache.pig.newplan.logical.rules.DNFExpression.DNFExpression(String,OperatorPlan,DNFExpressionType)
org.apache.pig.newplan.logical.rules.DNFExpression.isEqual(Operator)
org.apache.pig.newplan.logical.rules.DNFPlan.explain(PrintStream,String,boolean)
org.apache.pig.newplan.logical.rules.DNFPlanGenerator.addChildren(LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.rules.DNFPlanGenerator.DNFPlanGenerator(OperatorPlan)
org.apache.pig.newplan.logical.rules.DNFPlanGenerator.getDNFPlan()
org.apache.pig.newplan.logical.rules.DNFPlanGenerator.mergeAndOr(LogicalExpression,LogicalExpression,LogicalExpression,boolean)
org.apache.pig.newplan.logical.rules.DNFPlanGenerator.mergeSimpleOr(LogicalExpression,LogicalExpression,LogicalExpression,boolean)
org.apache.pig.newplan.logical.rules.DNFPlanGenerator.removeDescendants(OperatorPlan,Operator)
org.apache.pig.newplan.logical.rules.DNFPlan.safeAdd(Operator)
org.apache.pig.newplan.logical.rules.FilterConstantCalculator.buildPattern()
org.apache.pig.newplan.logical.rules.FilterConstantCalculator.FilterConstantCalculator(String,PigContext)
org.apache.pig.newplan.logical.rules.ForEachConstantCalculator.ForEachConstantCalculator(String,PigContext)
org.apache.pig.newplan.logical.rules.LogicalExpressionProxy.decrSrcDNFSplitCounter()
org.apache.pig.newplan.logical.rules.LogicalExpressionProxy.LogicalExpressionProxy(OperatorPlan,LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionProxy.restoreSrc()
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifier(String)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.checkDNFLeaves(OperatorPlan)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.cleanupDNFPlan(OperatorPlan,Operator)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.decrDNFSplitCount(LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.dnfTrimmed(LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.getSplitCount(LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.handleAnd(LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.handleAndSimple(LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.handleBinary(LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.handleComparison(LogicalExpression,LogicalExpression,LogicalExpression,LogicalExpression,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.handleDNFAnd(OperatorPlan,Operator)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.handleDNFOr(OperatorPlan,Operator)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.handleNot(NotExpression,IsNullExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.incrDNFSplitCount(LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.inferRelationship(LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.LogicalExpressionSimplifierTransformer(List<LOFilter>,LOFilter)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.switchImplicationSides(byte)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.trimLogicalExpressionPlan(OperatorPlan)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.trimLogicalExpressionPlan.TrimVisitor.removeDescendants(Operator)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.trimLogicalExpressionPlan.TrimVisitor.remove(Operator)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.trimLogicalExpressionPlan.TrimVisitor.trimOneChild(Operator,Operator)
org.apache.pig.newplan.logical.rules.LogicalExpressionSimplifier.LogicalExpressionSimplifierTransformer.trimLogicalExpressionPlan.TrimVisitor.TrimVisitor(LogicalExpressionPlan)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.flip()
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.insert(Operator,Operator)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.NOTConversionVisitor(OperatorPlan)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.NotConversionWalker.depthFirst(Operator,Collection<Operator>,Operator,Set<Operator>,Operator,PlanVisitor)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.NotConversionWalker.NotConversionWalker(OperatorPlan)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.NotConversionWalker.spawnChildWalker(OperatorPlan)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.NotConversionWalker.walk(PlanVisitor)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.reset(Operator,Operator)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.visit(GreaterThanEqualExpression)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.visit(LessThanEqualExpression)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.visit(LessThanExpression)
org.apache.pig.newplan.logical.rules.NOTConversionVisitor.visit(NotEqualExpression)
org.apache.pig.test.TestConstantCalculator.assertQuerySame(String,String)
org.apache.pig.test.TestConstantCalculator.MyPlanOptimizer.MyPlanOptimizer(OperatorPlan,int)
org.apache.pig.test.TestConstantCalculator.setUp()
org.apache.pig.test.TestConstantCalculator.test()
org.apache.pig.test.TestFilterSimplification.comboRunner2(boolean,boolean,boolean)
org.apache.pig.test.TestFilterSimplification.comboRunner3(boolean,boolean,boolean,boolean,boolean,boolean,boolean)
org.apache.pig.test.TestFilterSimplification.test1()
org.apache.pig.test.TestFilterSimplification.test2()
org.apache.pig.test.TestFilterSimplification.test3()
org.apache.pig.test.TestFilterSimplification.test4()
org.apache.pig.test.TestFilterSimplification.test5()
org.apache.pig.test.TestFilterSimplification.test6()
org.apache.pig.test.TestFilterSimplification.test7()
org.apache.pig.test.TestFilterSimplification.test8()
org.apache.pig.test.TestFilterSimplification.testEqualNotEqualWithSameValue()
org.apache.pig.test.TestFilterSimplification.testNotConversionUdfArg()
org.apache.pig.test.TestFilterSimplification.testSimiplificationNonDeterministicUdf()
