org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.compile(LogicalPlan,Properties)
org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getStatistics()
org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.LimitAdjuster.fixProjectionAfterLimit(MapReduceOper,MapReduceOper)
org.apache.pig.experimental.logical.expression.AddExpression.AddExpression(OperatorPlan,byte,LogicalExpression,LogicalExpression)
org.apache.pig.experimental.logical.expression.BagDereferenceExpression.BagDereferenceExpression(OperatorPlan,byte,int,ProjectExpression)
org.apache.pig.experimental.logical.expression.BagDereferenceExpression.BagDereferenceExpression(OperatorPlan,byte,List<Integer>,Integer,ProjectExpression)
org.apache.pig.experimental.logical.expression.BagDereferenceExpression.getBagColNum()
org.apache.pig.experimental.logical.expression.BagDereferenceExpression.getBagColumns()
org.apache.pig.experimental.logical.expression.BagDereferenceExpression.getProjectExpression()
org.apache.pig.experimental.logical.expression.BagDereferenceExpression.setBagColNum(int)
org.apache.pig.experimental.logical.expression.BagDereferenceExpression.setType(byte)
org.apache.pig.experimental.logical.expression.BagDereferenceExpression.setUid(LogicalRelationalOperator)
org.apache.pig.experimental.logical.expression.BinaryExpression.BinaryExpression(String,OperatorPlan,byte,LogicalExpression,LogicalExpression)
org.apache.pig.experimental.logical.expression.BinCondExpression.BinCondExpression(OperatorPlan,byte,LogicalExpression,LogicalExpression,LogicalExpression)
org.apache.pig.experimental.logical.expression.CastExpression.CastExpression(OperatorPlan,byte,LogicalExpression)
org.apache.pig.experimental.logical.expression.ColumnExpression.ColumnExpression(String,OperatorPlan,byte)
org.apache.pig.experimental.logical.expression.ConstantExpression.ConstantExpression(OperatorPlan,byte,Object)
org.apache.pig.experimental.logical.expression.ConstantExpression.getValue()
org.apache.pig.experimental.logical.expression.DivideExpression.DivideExpression(OperatorPlan,byte,LogicalExpression,LogicalExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitAdd(AddExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitAnd(AndExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitBagDereference(BagDereferenceExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitBinCond(BinCondExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitCast(CastExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitConstant(org.apache.pig.experimental.logical.expression.ConstantExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitDivide(DivideExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitEqual(EqualExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitGreaterThanEqual(GreaterThanEqualExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitGreaterThan(GreaterThanExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitIsNull(IsNullExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitLessThanEqual(LessThanEqualExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitLessThan(LessThanExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitMapLookup(MapLookupExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitMod(ModExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitMultiply(MultiplyExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitNegative(NegativeExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitNotEqual(NotEqualExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitNot(NotExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitOr(OrExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitProject(ProjectExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitRegex(RegexExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitSubtract(SubtractExpression)
org.apache.pig.experimental.logical.expression.ExpToPhyTranslationVisitor.visitUserFunc(UserFuncExpression)
org.apache.pig.experimental.logical.expression.IsNullExpression.IsNullExpression(OperatorPlan,byte,LogicalExpression)
org.apache.pig.experimental.logical.expression.LogicalExpression.getNextUid()
org.apache.pig.experimental.logical.expression.LogicalExpression.getUid()
org.apache.pig.experimental.logical.expression.LogicalExpression.LogicalExpression(String,OperatorPlan,byte)
org.apache.pig.experimental.logical.expression.LogicalExpression.neverUseForRealSetUid(long)
org.apache.pig.experimental.logical.expression.LogicalExpression.resetNextUid()
org.apache.pig.experimental.logical.expression.LogicalExpression.setUid(long)
org.apache.pig.experimental.logical.expression.LogicalExpressionVisitor.visitConstant(ConstantExpression)
org.apache.pig.experimental.logical.expression.MapLookupExpression.MapLookupExpression(OperatorPlan,byte,String,LogicalFieldSchema)
org.apache.pig.experimental.logical.expression.ModExpression.ModExpression(OperatorPlan,byte,LogicalExpression,LogicalExpression)
org.apache.pig.experimental.logical.expression.MultiplyExpression.MultiplyExpression(OperatorPlan,byte,LogicalExpression,LogicalExpression)
org.apache.pig.experimental.logical.expression.NegativeExpression.NegativeExpression(OperatorPlan,byte,LogicalExpression)
org.apache.pig.experimental.logical.expression.NotExpression.NotExpression(OperatorPlan,byte,LogicalExpression)
org.apache.pig.experimental.logical.expression.ProjectExpression.findReferent(LogicalRelationalOperator)
org.apache.pig.experimental.logical.expression.ProjectExpression.getColNum()
org.apache.pig.experimental.logical.expression.ProjectExpression.getInputNum()
org.apache.pig.experimental.logical.expression.ProjectExpression.ProjectExpression(OperatorPlan,byte,int,int)
org.apache.pig.experimental.logical.expression.ProjectExpression.setColNum(int)
org.apache.pig.experimental.logical.expression.ProjectExpression.setInputNum(int)
org.apache.pig.experimental.logical.expression.RegexExpression.RegexExpression(OperatorPlan,byte,LogicalExpression,LogicalExpression)
org.apache.pig.experimental.logical.expression.SubtractExpression.SubtractExpression(OperatorPlan,byte,LogicalExpression,LogicalExpression)
org.apache.pig.experimental.logical.expression.UnaryExpression.UnaryExpression(String,OperatorPlan,byte,LogicalExpression)
org.apache.pig.experimental.logical.expression.UserFuncExpression.UserFuncExpression(OperatorPlan,FuncSpec,byte)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.ForeachInnerPlanVisitor.ForeachInnerPlanVisitor(org.apache.pig.experimental.logical.relational.LOForEach,LOForEach,LogicalPlan)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.getNewLogicalPlan()
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.LogicalExpPlanMigrationVistor(LogicalPlan)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOAdd)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOAnd)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOCast)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOConst)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LODivide)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOEqual)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOGreaterThan)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOGreaterThanEqual)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOIsNull)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOLesserThan)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOLesserThanEqual)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOMapLookup)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOMod)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOMultiply)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LONegative)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LONot)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LONotEqual)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOOr)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LORegexp)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.LogicalExpPlanMigrationVistor.visit(LOSubtract)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.translateConnection(LogicalOperator,org.apache.pig.experimental.plan.Operator)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.translateExpressionPlan(LogicalPlan)
org.apache.pig.experimental.logical.LogicalPlanMigrationVistor.translateSchema(Schema)
org.apache.pig.experimental.logical.optimizer.AllExpressionVisitor.visitLOCogroup(LOCogroup)
org.apache.pig.experimental.logical.optimizer.AllExpressionVisitor.visitLOFilter(LOFilter)
org.apache.pig.experimental.logical.optimizer.AllExpressionVisitor.visitLOForEach(LOForEach)
org.apache.pig.experimental.logical.optimizer.AllExpressionVisitor.visitLOGenerate(LOGenerate)
org.apache.pig.experimental.logical.optimizer.AllExpressionVisitor.visitLOInnerLoad(LOInnerLoad)
org.apache.pig.experimental.logical.optimizer.AllExpressionVisitor.visitLOJoin(LOJoin)
org.apache.pig.experimental.logical.optimizer.AllExpressionVisitor.visitLOSplitOutput(LOSplitOutput)
org.apache.pig.experimental.logical.optimizer.AllSameVisitor.AllSameVisitor(OperatorPlan,PlanWalker)
org.apache.pig.experimental.logical.optimizer.AllSameVisitor.visitLOLoad(LOLoad)
org.apache.pig.experimental.logical.optimizer.AllSameVisitor.visitLOSplit(LOSplit)
org.apache.pig.experimental.logical.optimizer.AllSameVisitor.visitLOStore(LOStore)
org.apache.pig.experimental.logical.optimizer.AllSameVisitor.visitLOUnion(LOUnion)
org.apache.pig.experimental.logical.optimizer.PlanPrinter.ExprPrinter.ExprPrinter(OperatorPlan,int)
org.apache.pig.experimental.logical.optimizer.PlanPrinter.PlanPrinter(OperatorPlan,PrintStream)
org.apache.pig.experimental.logical.optimizer.SchemaPatcher.SchemaVisitor.SchemaVisitor(OperatorPlan)
org.apache.pig.experimental.logical.optimizer.UidStamper.ExprUidStamper.ExprUidStamper(OperatorPlan)
org.apache.pig.experimental.logical.optimizer.UidStamper.stampSchema(LogicalSchema)
org.apache.pig.experimental.logical.optimizer.UidStamper.UidStamper(OperatorPlan)
org.apache.pig.experimental.logical.relational.LOCogroup.getGeneratedInputUids()
org.apache.pig.experimental.logical.relational.LOCogroup.getGroupType()
org.apache.pig.experimental.logical.relational.LOCogroup.getInner()
org.apache.pig.experimental.logical.relational.LOCogroup.LOCogroup(OperatorPlan,MultiMap<Integer,LogicalExpressionPlan>,Integer,LogicalExpressionPlan,boolean[])
org.apache.pig.experimental.logical.relational.LOCogroup.LOCogroup(OperatorPlan,MultiMap<Integer,LogicalExpressionPlan>,Integer,LogicalExpressionPlan,GROUPTYPE,boolean[],int)
org.apache.pig.experimental.logical.relational.LOFilter.getFilterPlan()
org.apache.pig.experimental.logical.relational.LOFilter.LOFilter(LogicalPlan,LogicalExpressionPlan)
org.apache.pig.experimental.logical.relational.LOForEach.getInnerPlan()
org.apache.pig.experimental.logical.relational.LOForEach.LOForEach(OperatorPlan)
org.apache.pig.experimental.logical.relational.LOForEach.resetSchema()
org.apache.pig.experimental.logical.relational.LOGenerate.getFlattenFlags()
org.apache.pig.experimental.logical.relational.LOGenerate.getOutputPlans()
org.apache.pig.experimental.logical.relational.LogicalPlan.add(List<LogicalRelationalOperator>,LogicalRelationalOperator,LogicalRelationalOperator,LogicalRelationalOperator)
org.apache.pig.experimental.logical.relational.LogicalPlan.add(LogicalRelationalOperator,int,int,LogicalRelationalOperator,int,int,LogicalRelationalOperator)
org.apache.pig.experimental.logical.relational.LogicalPlan.add(LogicalRelationalOperator,LogicalRelationalOperator,List<LogicalRelationalOperator>,LogicalRelationalOperator)
org.apache.pig.experimental.logical.relational.LogicalPlan.add(LogicalRelationalOperator,LogicalRelationalOperator,LogicalRelationalOperator)
org.apache.pig.experimental.logical.relational.LogicalPlan.checkIn(LogicalRelationalOperator)
org.apache.pig.experimental.logical.relational.LogicalPlan.checkNotIn(LogicalRelationalOperator)
org.apache.pig.experimental.logical.relational.LogicalPlan.doAdd(LogicalRelationalOperator,LogicalRelationalOperator,LogicalRelationalOperator)
org.apache.pig.experimental.logical.relational.LogicalPlan.removeLogical(LogicalRelationalOperator)
org.apache.pig.experimental.logical.relational.LogicalPlanVisitor.LogicalPlanVisitor(OperatorPlan,PlanWalker)
org.apache.pig.experimental.logical.relational.LogicalRelationalOperator.getAlias()
org.apache.pig.experimental.logical.relational.LogicalRelationalOperator.getLineNumber()
org.apache.pig.experimental.logical.relational.LogicalRelationalOperator.getRequestedParallelisam()
org.apache.pig.experimental.logical.relational.LogicalRelationalOperator.LogicalRelationalOperator(String,OperatorPlan)
org.apache.pig.experimental.logical.relational.LogicalRelationalOperator.LogicalRelationalOperator(String,OperatorPlan,int)
org.apache.pig.experimental.logical.relational.LogicalRelationalOperator.neverUseForRealSetSchema(LogicalSchema)
org.apache.pig.experimental.logical.relational.LogicalRelationalOperator.setAlias(String)
org.apache.pig.experimental.logical.relational.LogicalRelationalOperator.setRequestedParallelism(int)
org.apache.pig.experimental.logical.relational.LogicalSchema.addField(LogicalFieldSchema)
org.apache.pig.experimental.logical.relational.LogicalSchema.findField(long)
org.apache.pig.experimental.logical.relational.LogicalSchema.getField(int)
org.apache.pig.experimental.logical.relational.LogicalSchema.getFields()
org.apache.pig.experimental.logical.relational.LogicalSchema.getField(String)
org.apache.pig.experimental.logical.relational.LogicalSchema.LogicalFieldSchema.isEqual(Object)
org.apache.pig.experimental.logical.relational.LogicalSchema.LogicalFieldSchema.LogicalFieldSchema(String,LogicalSchema,byte)
org.apache.pig.experimental.logical.relational.LogicalSchema.LogicalFieldSchema.LogicalFieldSchema(String,LogicalSchema,byte,long)
org.apache.pig.experimental.logical.relational.LogicalSchema.LogicalSchema()
org.apache.pig.experimental.logical.relational.LOInnerLoad.getLOForEach()
org.apache.pig.experimental.logical.relational.LOJoin.getInnerFlags()
org.apache.pig.experimental.logical.relational.LOJoin.getJoinPlan(int)
org.apache.pig.experimental.logical.relational.LOJoin.getJoinType()
org.apache.pig.experimental.logical.relational.LOJoin.isInner(int)
org.apache.pig.experimental.logical.relational.LOJoin.LOJoin(LogicalPlan)
org.apache.pig.experimental.logical.relational.LOJoin.LOJoin(LogicalPlan,MultiMap<Integer,LogicalExpressionPlan>,Integer,LogicalExpressionPlan,JOINTYPE,boolean[])
org.apache.pig.experimental.logical.relational.LOLoad.getLoadPushDown()
org.apache.pig.experimental.logical.relational.LOLoad.LOLoad(FileSpec,LogicalSchema,LogicalPlan)
org.apache.pig.experimental.logical.relational.LOLoad.LOLoad(FuncSpec,LogicalSchema,LogicalPlan)
org.apache.pig.experimental.logical.relational.LOLoad.setScriptSchema(LogicalSchema)
org.apache.pig.experimental.logical.relational.LOSplitOutput.LOSplitOutput(LogicalPlan)
org.apache.pig.experimental.logical.relational.LOSplitOutput.LOSplitOutput(LogicalPlan,LogicalExpressionPlan)
org.apache.pig.experimental.logical.relational.LOStore.LOStore(LogicalPlan)
org.apache.pig.experimental.logical.relational.SchemaNotDefinedException.SchemaNotDefinedException(String)
org.apache.pig.experimental.logical.relational.SchemaNotDefinedException.SchemaNotDefinedException(String,Throwable)
org.apache.pig.experimental.logical.relational.SchemaNotDefinedException.SchemaNotDefinedException(Throwable)
org.apache.pig.experimental.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPruneTransformer.ColumnPruneVisitor.checkInnerLoads(LogicalRelationalOperator,Set<Integer>,Integer)
org.apache.pig.experimental.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPruneTransformer.ColumnPruneVisitor.ColumnPruneVisitor(OperatorPlan)
org.apache.pig.experimental.logical.rules.FilterAboveForeach.FilterAboveFlattenTransformer.containsComplexType(LogicalSchema,Set<Long>,Long)
org.apache.pig.experimental.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.getAllProjectableUids(LogicalSchema)
org.apache.pig.experimental.logical.rules.MapKeysPruneHelper.MapKeysPruneHelper(OperatorPlan)
org.apache.pig.experimental.plan.BaseOperatorPlan.BaseOperatorPlan()
org.apache.pig.experimental.plan.BaseOperatorPlan.getLeaves()
org.apache.pig.experimental.plan.BaseOperatorPlan.getRoots()
org.apache.pig.experimental.plan.BaseOperatorPlan.markDirty()
org.apache.pig.experimental.plan.DependencyOrderWalker.DependencyOrderWalker(OperatorPlan)
org.apache.pig.experimental.plan.DepthFirstWalker.DepthFirstWalker(OperatorPlan)
org.apache.pig.experimental.plan.Operator.annotate(String,Object)
org.apache.pig.experimental.plan.Operator.getAnnotation(String)
org.apache.pig.experimental.plan.Operator.getPlan()
org.apache.pig.experimental.plan.Operator.Operator(String,OperatorPlan)
org.apache.pig.experimental.plan.Operator.removeAnnotation(String)
org.apache.pig.experimental.plan.OperatorSubPlan.OperatorSubPlan(OperatorPlan)
org.apache.pig.experimental.plan.optimizer.PlanOptimizer.addPlanTransformListener(PlanTransformListener)
org.apache.pig.experimental.plan.optimizer.PlanOptimizer.PlanOptimizer(OperatorPlan,List<Set<Rule>>,Set<Rule>,Rule,int)
org.apache.pig.experimental.plan.optimizer.PlanTransformListener.transformed(OperatorPlan,Transformer)
org.apache.pig.experimental.plan.optimizer.Rule.getPattern()
org.apache.pig.experimental.plan.optimizer.Rule.match(Operator,Operator)
org.apache.pig.experimental.plan.optimizer.Rule.Rule(String,OperatorPlan)
org.apache.pig.experimental.plan.PlanEdge.PlanEdge()
org.apache.pig.experimental.plan.PlanEdge.PlanEdge(int)
org.apache.pig.experimental.plan.PlanEdge.put(Operator,Operator,int)
org.apache.pig.experimental.plan.PlanEdge.removeWithPosition(Operator,Operator)
org.apache.pig.experimental.plan.PlanVisitor.PlanVisitor(OperatorPlan,PlanWalker)
org.apache.pig.experimental.plan.PlanVisitor.pushWalker(PlanWalker)
org.apache.pig.experimental.plan.PlanWalker.PlanWalker(OperatorPlan)
org.apache.pig.experimental.plan.PlanWalker.setPlan(OperatorPlan)
org.apache.pig.experimental.plan.ReverseDependencyOrderWalker.ReverseDependencyOrderWalker(OperatorPlan)
org.apache.pig.experimental.plan.SubtreeDependencyOrderWalker.SubtreeDependencyOrderWalker(OperatorPlan)
org.apache.pig.Main.usage()
org.apache.pig.newplan.BaseOperatorPlan.checkPredecessors(Operator,Operator)
org.apache.pig.newplan.BaseOperatorPlan.disconnect(Operator,Operator)
org.apache.pig.newplan.BaseOperatorPlan.getOperators()
org.apache.pig.newplan.BaseOperatorPlan.getPredecessors(Operator)
org.apache.pig.newplan.BaseOperatorPlan.getSuccessors(Operator)
org.apache.pig.newplan.BaseOperatorPlan.isEqual(OperatorPlan)
org.apache.pig.newplan.BaseOperatorPlan.isEqual(OperatorPlan,OperatorPlan)
org.apache.pig.newplan.BaseOperatorPlan.remove(Operator)
org.apache.pig.newplan.DependencyOrderWalker.doAllPredecessors(Operator,Set<Operator>,Operator,Collection<Operator>,Operator)
org.apache.pig.newplan.DepthFirstMemoryWalker.DepthFirstMemoryWalker(OperatorPlan,int)
org.apache.pig.newplan.DepthFirstMemoryWalker.depthFirst(Operator,Collection<Operator>,Operator,Set<Operator>,Operator,PlanVisitor)
org.apache.pig.newplan.DepthFirstMemoryWalker.getPrefix()
org.apache.pig.newplan.DepthFirstMemoryWalker.spawnChildWalker(OperatorPlan)
org.apache.pig.newplan.DepthFirstMemoryWalker.walk(PlanVisitor)
org.apache.pig.newplan.logical.expression.AddExpression.accept(PlanVisitor)
org.apache.pig.newplan.logical.expression.AddExpression.AddExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.AllSameExpressionVisitor(OperatorPlan,PlanWalker)
org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.execute(LogicalExpression)
org.apache.pig.newplan.logical.expression.AndExpression.AndExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.BinaryExpression.BinaryExpression(String,OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.BinCondExpression.BinCondExpression(OperatorPlan,LogicalExpression,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.BinCondExpression.getCondition()
org.apache.pig.newplan.logical.expression.BinCondExpression.getLhs()
org.apache.pig.newplan.logical.expression.BinCondExpression.getRhs()
org.apache.pig.newplan.logical.expression.CastExpression.CastExpression(OperatorPlan,LogicalExpression,LogicalSchema.LogicalFieldSchema)
org.apache.pig.newplan.logical.expression.CastExpression.getFieldSchema()
org.apache.pig.newplan.logical.expression.CastExpression.getFuncSpec()
org.apache.pig.newplan.logical.expression.ColumnExpression.ColumnExpression(String,OperatorPlan)
org.apache.pig.newplan.logical.expression.ConstantExpression.ConstantExpression(OperatorPlan,Object,LogicalFieldSchema)
org.apache.pig.newplan.logical.expression.ConstantExpression.getValueSchema()
org.apache.pig.newplan.logical.expression.DereferenceExpression.DereferenceExpression(OperatorPlan,int)
org.apache.pig.newplan.logical.expression.DereferenceExpression.DereferenceExpression(OperatorPlan,List<Integer>,Integer)
org.apache.pig.newplan.logical.expression.DereferenceExpression.getReferredExpression()
org.apache.pig.newplan.logical.expression.DereferenceExpression.setBagColumns(List<Integer>,Integer)
org.apache.pig.newplan.logical.expression.DivideExpression.DivideExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.EqualExpression.EqualExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.attachBinaryComparisonOperator(BinaryExpression,BinaryComparisonOperator)
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.attachBinaryExpressionOperator(BinaryExpression,BinaryExpressionOperator)
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.ExpToPhyTranslationVisitor(OperatorPlan,LogicalRelationalOperator,PhysicalPlan,Map<Operator,PhysicalOperator>,Operator,PhysicalOperator)
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.ExpToPhyTranslationVisitor(OperatorPlan,LogicalRelationalOperator,PhysicalPlan,Map<Operator,PhysicalOperator>,Operator,PhysicalOperator,Map<PhysicalOperator,LogicalRelationalOperator>,PhysicalOperator,LogicalRelationalOperator)
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.ExpToPhyTranslationVisitor(OperatorPlan,PlanWalker,LogicalRelationalOperator,PhysicalPlan,Map<Operator,PhysicalOperator>,Operator,PhysicalOperator)
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.ExpToPhyTranslationVisitor(OperatorPlan,PlanWalker,LogicalRelationalOperator,PhysicalPlan,Map<Operator,PhysicalOperator>,Operator,PhysicalOperator,Map<PhysicalOperator,LogicalRelationalOperator>,PhysicalOperator,LogicalRelationalOperator)
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.getPhysicalPlan()
org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(org.apache.pig.newplan.logical.expression.ConstantExpression)
org.apache.pig.newplan.logical.expression.GreaterThanEqualExpression.GreaterThanEqualExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.GreaterThanExpression.GreaterThanExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.IsNullExpression.IsNullExpression(OperatorPlan,LogicalExpression)
org.apache.pig.newplan.logical.expression.LessThanEqualExpression.LessThanEqualExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.LessThanExpression.LessThanExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.LogicalExpression.LogicalExpression(String,OperatorPlan)
org.apache.pig.newplan.logical.expression.LogicalExpression.neverUseForRealSetFieldSchema(LogicalFieldSchema)
org.apache.pig.newplan.logical.expression.LogicalExpressionPlan.explain(PrintStream,String,boolean)
org.apache.pig.newplan.logical.expression.LogicalExpression.resetFieldSchema()
org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.LogicalExpressionVisitor(OperatorPlan,PlanWalker)
org.apache.pig.newplan.logical.expression.MapLookupExpression.getLookupKey()
org.apache.pig.newplan.logical.expression.MapLookupExpression.getMap()
org.apache.pig.newplan.logical.expression.MapLookupExpression.MapLookupExpression(OperatorPlan,String,LogicalFieldSchema)
org.apache.pig.newplan.logical.expression.ModExpression.ModExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.MultiplyExpression.MultiplyExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.NegativeExpression.NegativeExpression(OperatorPlan,LogicalExpression)
org.apache.pig.newplan.logical.expression.NotEqualExpression.NotEqualExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.NotExpression.NotExpression(OperatorPlan,LogicalExpression)
org.apache.pig.newplan.logical.expression.OrExpression.OrExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.ProjectExpression.findReferent()
org.apache.pig.newplan.logical.expression.ProjectExpression.getAttachedRelationalOp()
org.apache.pig.newplan.logical.expression.ProjectExpression.getType()
org.apache.pig.newplan.logical.expression.ProjectExpression.isProjectStar()
org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(OperatorPlan,int,int,LogicalRelationalOperator)
org.apache.pig.newplan.logical.expression.ProjectExpression.setAttachedRelationalOp(LogicalRelationalOperator)
org.apache.pig.newplan.logical.expression.RegexExpression.RegexExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.SubtractExpression.SubtractExpression(OperatorPlan,LogicalExpression,LogicalExpression)
org.apache.pig.newplan.logical.expression.UnaryExpression.getExpression()
org.apache.pig.newplan.logical.expression.UnaryExpression.UnaryExpression(String,OperatorPlan,LogicalExpression)
org.apache.pig.newplan.logical.expression.UserFuncExpression.deepCopy(LogicalExpressionPlan)
org.apache.pig.newplan.logical.expression.UserFuncExpression.getArguments()
org.apache.pig.newplan.logical.expression.UserFuncExpression.getImplicitReferencedOperator()
org.apache.pig.newplan.logical.expression.UserFuncExpression.setFuncSpec(FuncSpec)
org.apache.pig.newplan.logical.expression.UserFuncExpression.setImplicitReferencedOperator(Operator)
org.apache.pig.newplan.logical.expression.UserFuncExpression.toString()
org.apache.pig.newplan.logical.expression.UserFuncExpression.UserFuncExpression(OperatorPlan,FuncSpec)
org.apache.pig.newplan.logical.ForeachInnerPlanVisitor.ForeachInnerPlanVisitor(org.apache.pig.newplan.logical.relational.LOForEach,LOForEach,LogicalPlan,LogicalPlan)
org.apache.pig.newplan.logical.ForeachInnerPlanVisitor.ForeachInnerPlanVisitor(org.apache.pig.newplan.logical.relational.LOForEach,LOForEach,LogicalPlan,LogicalPlan,Map<LogicalExpression,LogicalOperator>,LogicalExpression,LogicalOperator)
org.apache.pig.newplan.logical.ForeachInnerPlanVisitor.translateInnerExpressionPlan(LogicalPlan,LogicalOperator,LogicalRelationalOperator,LogicalPlan)
org.apache.pig.newplan.logical.ForeachInnerPlanVisitor.translateInnerExpressionPlan(LogicalPlan,LogicalRelationalOperator,LogicalPlan)
org.apache.pig.newplan.logical.ForeachInnerPlanVisitor.translateInnerPlanConnection(LogicalOperator,org.apache.pig.newplan.Operator)
org.apache.pig.newplan.logical.LogicalExpPlanMigrationVistor.LogicalExpPlanMigrationVistor(LogicalPlan,LogicalOperator,LogicalRelationalOperator,LogicalPlan,Map<LogicalExpression,LogicalOperator>,LogicalExpression,LogicalOperator)
org.apache.pig.newplan.logical.LogicalExpPlanMigrationVistor.LogicalExpPlanMigrationVistor(LogicalPlan,LogicalRelationalOperator,LogicalPlan)
org.apache.pig.newplan.logical.LogicalExpPlanMigrationVistor.translateConnection(LogicalOperator,org.apache.pig.newplan.Operator)
org.apache.pig.newplan.logical.LogicalExpPlanMigrationVistor.visit(LOBinCond)
org.apache.pig.newplan.logical.LogicalExpPlanMigrationVistor.visit(LOProject)
org.apache.pig.newplan.logical.LogicalExpPlanMigrationVistor.visit(LOUserFunc)
org.apache.pig.newplan.logical.LogicalPlanMigrationVistor.finish()
org.apache.pig.newplan.logical.LogicalPlanMigrationVistor.LogicalPlanMigrationVistor(LogicalPlan)
org.apache.pig.newplan.logical.LogicalPlanMigrationVistor.translateExpressionPlan(LogicalPlan,LogicalOperator,LogicalRelationalOperator)
org.apache.pig.newplan.logical.LogicalPlanMigrationVistor.translateExpressionPlan(LogicalPlan,LogicalRelationalOperator)
org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.AllExpressionVisitor(OperatorPlan,PlanWalker)
org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.AllSameRalationalNodesVisitor(OperatorPlan,PlanWalker)
org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.execute(LogicalRelationalOperator)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.ExprPrinter(OperatorPlan,int,PrintStream)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.ExprPrinter(OperatorPlan,PrintStream)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.simplevisit(LogicalExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(AddExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(AndExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(BinCondExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(CastExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(ConstantExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(DereferenceExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(DivideExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(EqualExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(GreaterThanEqualExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(GreaterThanExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(IsNullExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(LessThanEqualExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(LessThanExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(MapLookupExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(ModExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(MultiplyExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(NegativeExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(NotEqualExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(NotExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(OrExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(ProjectExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(RegexExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(SubtractExpression)
org.apache.pig.newplan.logical.optimizer.ExprPrinter.visit(UserFuncExpression)
org.apache.pig.newplan.logical.optimizer.FieldSchemaResetter.FieldSchemaResetter(OperatorPlan)
org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.addListeners()
org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.buildRuleSets()
org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.checkAndAddRule(Set<Rule>,Rule,Rule)
org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.LogicalPlanOptimizer(OperatorPlan,int)
org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.LogicalPlanOptimizer(OperatorPlan,int,Set<String>,String)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.depthFirstLP()
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.depthFirst(Operator)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.getVisitor(LogicalExpressionPlan)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.LogicalPlanPrinter(OperatorPlan,PrintStream)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.planString(OperatorPlan)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.printLevel()
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.printNode(Operator)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.reverseDepthFirstLP()
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.reverseDepthFirst(Operator)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.shiftStringByTabs(String,int)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit()
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOCogroup)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOCross)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LODistinct)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOFilter)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOForEach)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOGenerate)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOInnerLoad)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOJoin)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOLimit)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOLoad)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOSort)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOSplit)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOSplitOutput)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOStore)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOStream)
org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit(LOUnion)
org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.ProjectionFinder.ProjectionFinder(OperatorPlan)
org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.ProjectionRewriter.ProjectionRewriter(OperatorPlan,LogicalRelationalOperator)
org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.transformed(OperatorPlan,OperatorPlan)
org.apache.pig.newplan.logical.optimizer.SchemaResetter.SchemaResetter(OperatorPlan)
org.apache.pig.newplan.logical.relational.LOCogroup.getPlanSchema(LogicalExpressionPlan)
org.apache.pig.newplan.logical.relational.LOCross.LOCross(LogicalPlan)
org.apache.pig.newplan.logical.relational.LODistinct.LODistinct(LogicalPlan)
org.apache.pig.newplan.logical.relational.LOFilter.LOFilter(LogicalPlan)
org.apache.pig.newplan.logical.relational.LOFilter.setFilterPlan(LogicalExpressionPlan)
org.apache.pig.newplan.logical.relational.LOForEach.findReacheableInnerLoadFromBoundaryProject(ProjectExpression)
org.apache.pig.newplan.logical.relational.LOForEach.setInnerPlan(LogicalPlan)
org.apache.pig.newplan.logical.relational.LOGenerate.getOutputPlanSchemas()
org.apache.pig.newplan.logical.relational.LOGenerate.getSchema()
org.apache.pig.newplan.logical.relational.LOGenerate.getUidOnlySchemas()
org.apache.pig.newplan.logical.relational.LOGenerate.getUserDefinedSchema()
org.apache.pig.newplan.logical.relational.LOGenerate.LOGenerate(OperatorPlan,List<LogicalExpressionPlan>,LogicalExpressionPlan,boolean[])
org.apache.pig.newplan.logical.relational.LOGenerate.setFlattenFlags(boolean[])
org.apache.pig.newplan.logical.relational.LOGenerate.setOutputPlanSchemas(List<LogicalSchema>,LogicalSchema)
org.apache.pig.newplan.logical.relational.LOGenerate.setUidOnlySchemas(List<LogicalSchema>,LogicalSchema)
org.apache.pig.newplan.logical.relational.LOGenerate.setUserDefinedSchema(List<LogicalSchema>,LogicalSchema)
org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.LogicalRelationalNodesVisitor(OperatorPlan,PlanWalker)
org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.checkEquality(LogicalRelationalOperator)
org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.getCustomPartitioner()
org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.setCustomPartitioner(String)
org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.setSchema(LogicalSchema)
org.apache.pig.newplan.logical.relational.LogicalSchema.isTwoLevelAccessRequired()
org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.cloneUid()
org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.compatible(LogicalFieldSchema)
org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.deepCopy()
org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.LogicalFieldSchema(LogicalFieldSchema)
org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.mergeUid(LogicalFieldSchema)
org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.stampFieldSchema()
org.apache.pig.newplan.logical.relational.LogicalSchema.merge(LogicalSchema,LogicalSchema)
org.apache.pig.newplan.logical.relational.LogicalSchema.mergeUid(LogicalSchema)
org.apache.pig.newplan.logical.relational.LogicalSchema.setTwoLevelAccessRequired(boolean)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.compileFE4Flattening(boolean[],String,int,String,List<Operator>,Operator)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.compileToLR_GR_PackTrio(LogicalRelationalOperator,String,boolean[],MultiMap<Integer,LogicalExpressionPlan>,Integer,LogicalExpressionPlan)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.compileToMergeCogrp(LogicalRelationalOperator,MultiMap<Integer,LogicalExpressionPlan>,Integer,LogicalExpressionPlan)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.LogToPhyTranslationVisitor(OperatorPlan)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.mergeJoinValidator(List<Operator>,Operator,OperatorPlan)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.setPigContext(PigContext)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.translateCollectedCogroup(LOCogroup)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.translateExpressionPlans(LogicalRelationalOperator,List<LogicalExpressionPlan>,LogicalExpressionPlan)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.translateMergeCogroup(LOCogroup)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.translateRegularCogroup(LOCogroup)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.updateWithEmptyBagCheck(PhysicalPlan,Operator)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.validateMapSideMerge(List<Operator>,Operator,OperatorPlan)
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.validateMergeCogrp(boolean[])
org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.validateMergeJoin(LOJoin)
org.apache.pig.newplan.logical.relational.LOInnerLoad.getProjection()
org.apache.pig.newplan.logical.relational.LOInnerLoad.LOInnerLoad(OperatorPlan,LOForEach,int)
org.apache.pig.newplan.logical.relational.LOInnerLoad.sourceIsBag()
org.apache.pig.newplan.logical.relational.LOJoin.getExpressionPlans()
org.apache.pig.newplan.logical.relational.LOJoin.getExpressionPlanValues()
org.apache.pig.newplan.logical.relational.LOLimit.getLimit()
org.apache.pig.newplan.logical.relational.LOLimit.LOLimit(LogicalPlan,long)
org.apache.pig.newplan.logical.relational.LOLimit.setLimit(long)
org.apache.pig.newplan.logical.relational.LOLoad.getConfiguration()
org.apache.pig.newplan.logical.relational.LOLoad.getDeterminedSchema()
org.apache.pig.newplan.logical.relational.LOLoad.getFileSpec()
org.apache.pig.newplan.logical.relational.LOLoad.getLoadFunc()
org.apache.pig.newplan.logical.relational.LOLoad.getSchemaFromMetaData()
org.apache.pig.newplan.logical.relational.LOLoad.LOLoad(FileSpec,LogicalSchema,LogicalPlan,Configuration)
org.apache.pig.newplan.logical.relational.LOLoad.setRequiredFields(List<Integer>,Integer)
org.apache.pig.newplan.logical.relational.LOSort.getAscendingCols()
org.apache.pig.newplan.logical.relational.LOSort.getSortColPlans()
org.apache.pig.newplan.logical.relational.LOSort.getUserFunc()
org.apache.pig.newplan.logical.relational.LOSort.isLimited()
org.apache.pig.newplan.logical.relational.LOSort.isStar()
org.apache.pig.newplan.logical.relational.LOSort.LOSort(OperatorPlan,List<LogicalExpressionPlan>,LogicalExpressionPlan,List<Boolean>,Boolean,FuncSpec)
org.apache.pig.newplan.logical.relational.LOSort.setAscendingCols(List<Boolean>,Boolean)
org.apache.pig.newplan.logical.relational.LOSort.setSortColPlans(List<LogicalExpressionPlan>,LogicalExpressionPlan)
org.apache.pig.newplan.logical.relational.LOSort.setStar(boolean)
org.apache.pig.newplan.logical.relational.LOSort.setUserFunc(FuncSpec)
org.apache.pig.newplan.logical.relational.LOSplit.LOSplit(OperatorPlan)
org.apache.pig.newplan.logical.relational.LOStore.getInputSpec()
org.apache.pig.newplan.logical.relational.LOStore.getOutputSpec()
org.apache.pig.newplan.logical.relational.LOStore.getSignature()
org.apache.pig.newplan.logical.relational.LOStore.getSortInfo()
org.apache.pig.newplan.logical.relational.LOStore.getStoreFunc()
org.apache.pig.newplan.logical.relational.LOStore.isEqual(Operator)
org.apache.pig.newplan.logical.relational.LOStore.isTmpStore()
org.apache.pig.newplan.logical.relational.LOStore.LOStore(LogicalPlan,FileSpec)
org.apache.pig.newplan.logical.relational.LOStore.setInputSpec(FileSpec)
org.apache.pig.newplan.logical.relational.LOStore.setSignature(String)
org.apache.pig.newplan.logical.relational.LOStore.setSortInfo(SortInfo)
org.apache.pig.newplan.logical.relational.LOStore.setTmpStore(boolean)
org.apache.pig.newplan.logical.relational.LOStream.getExecutableManager()
org.apache.pig.newplan.logical.relational.LOStream.getStreamingCommand()
org.apache.pig.newplan.logical.relational.LOStream.isCastInserted()
org.apache.pig.newplan.logical.relational.LOStream.LOStream(LogicalPlan,ExecutableManager,StreamingCommand)
org.apache.pig.newplan.logical.relational.LOStream.LOStream(LogicalPlan,ExecutableManager,StreamingCommand,LogicalSchema)
org.apache.pig.newplan.logical.relational.LOStream.setCastInserted(boolean)
org.apache.pig.newplan.logical.relational.LOUnion.getInputUids(long)
org.apache.pig.newplan.logical.relational.LOUnion.LOUnion(OperatorPlan)
org.apache.pig.newplan.logical.rules.AddForEach.AddForEach(String)
org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.addForeach(LogicalRelationalOperator)
org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.addSuccessors(Operator)
org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.check(OperatorPlan)
org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.shouldAdd(LogicalRelationalOperator)
org.apache.pig.newplan.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPrune(String)
org.apache.pig.newplan.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPruneTransformer.merge()
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.addOperator(Operator,OperatorSubPlan)
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.clearAnnotation()
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.collectUids(LogicalRelationalOperator,LogicalExpressionPlan,Set<Long>,Long)
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.ColumnDependencyVisitor(OperatorPlan)
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.getAllUids(LogicalSchema)
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.setOutputUids(LogicalRelationalOperator)
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnPruneHelper(OperatorPlan)
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.getColumns(LogicalSchema,Set<Long>,Long)
org.apache.pig.newplan.logical.rules.ColumnPruneHelper.getSubPlan()
org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.addForEachIfNecessary(LogicalRelationalOperator)
org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.addRequiredItems(LOLoad,Pair<Map<Integer,Set<String>>,Set<Integer>>,Map<Integer,Set<String>>,Integer,Set<String>,String,Set<Integer>,Integer)
org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.ColumnPruneVisitor(OperatorPlan,Map<LOLoad,Pair<Map<Integer,Set<String>>,Set<Integer>>>,LOLoad,Pair<Map<Integer,Set<String>>,Set<Integer>>,Map<Integer,Set<String>>,Integer,Set<String>,String,Set<Integer>,Integer,boolean)
org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.removeSubTree(LogicalRelationalOperator)
org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForeach(String)
org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.getFilterProjectionUids(LOFilter)
org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.hasAll(LogicalRelationalOperator,Pair<List<Long>,List<Byte>>,List<Long>,Long,List<Byte>,Byte)
org.apache.pig.newplan.logical.rules.LoadTypeCastInserter.getOperatorClassName()
org.apache.pig.newplan.logical.rules.LoadTypeCastInserter.LoadTypeCastInserter(String)
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.check()
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.FullMapCollector(OperatorPlan,Set<Long>,Long)
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.FullMapExpCollector.FullMapExpCollector(OperatorPlan,Set<Long>,Long)
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.getMapUids(LogicalSchema)
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.hasMap(LogicalSchema)
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.MapExprMarker.MapExprMarker(OperatorPlan)
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.MapMarker(OperatorPlan)
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.mergeUidKeys(Map<Long,Set<String>>,Long,Set<String>,String)
org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.reportChanges()
org.apache.pig.newplan.logical.rules.MergeFilter.MergeFilter(String)
org.apache.pig.newplan.logical.rules.MergeFilter.MergeFilterTransformer.combineFilterCond(LOFilter,LOFilter)
org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilter(String)
org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.hasAll(LogicalRelationalOperator,Set<Long>,Long)
org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.transform(OperatorPlan)
org.apache.pig.newplan.logical.rules.SplitFilter.SplitFilter(String)
org.apache.pig.newplan.logical.rules.SplitFilter.SplitFilterTransformer.fillSubPlan(OperatorPlan,OperatorPlan,Operator)
org.apache.pig.newplan.logical.rules.StreamTypeCastInserter.StreamTypeCastInserter(String)
org.apache.pig.newplan.logical.rules.TypeCastInserter.buildPattern()
org.apache.pig.newplan.logical.rules.TypeCastInserter.getNewTransformer()
org.apache.pig.newplan.logical.rules.TypeCastInserter.TypeCastInserter(String)
org.apache.pig.newplan.logical.rules.TypeCastInserter.TypeCastInserter(String,String)
org.apache.pig.newplan.logical.rules.WholePlanRule.match(OperatorPlan)
org.apache.pig.newplan.logical.rules.WholePlanRule.WholePlanRule(String)
org.apache.pig.newplan.logical.rules.WholePlanRule.WholePlanRule(String,boolean)
org.apache.pig.newplan.logical.Util.addForEachAfter(LogicalPlan,LogicalRelationalOperator,int,Set<Integer>,Integer)
org.apache.pig.newplan.logical.Util.addForEachAfter(LogicalPlan,LogicalRelationalOperator,Set<Integer>,Integer)
org.apache.pig.newplan.logical.Util.translateFieldSchema(LogicalSchema.LogicalFieldSchema)
org.apache.pig.newplan.logical.Util.translateFieldSchema(Schema.FieldSchema)
org.apache.pig.newplan.logical.Util.translateSchema(LogicalSchema)
org.apache.pig.newplan.Operator.getName()
org.apache.pig.newplan.OperatorSubPlan.add(Operator)
org.apache.pig.newplan.OperatorSubPlan.connect(Operator,int,Operator,int)
org.apache.pig.newplan.OperatorSubPlan.connect(Operator,Operator)
org.apache.pig.newplan.OperatorSubPlan.getBasePlan()
org.apache.pig.newplan.OperatorSubPlan.getSinks()
org.apache.pig.newplan.OperatorSubPlan.getSources()
org.apache.pig.newplan.OperatorSubPlan.size()
org.apache.pig.newplan.optimizer.PlanOptimizer.optimize()
org.apache.pig.newplan.optimizer.Rule.isMandatory()
org.apache.pig.newplan.optimizer.Rule.PatternMatchOperatorPlan.check(List<Operator>,Operator)
org.apache.pig.newplan.optimizer.Rule.PatternMatchOperatorPlan.check(Operator,Operator,Stack<Operator>,Operator)
org.apache.pig.newplan.optimizer.Rule.PatternMatchOperatorPlan.PatternMatchOperatorPlan(OperatorPlan)
org.apache.pig.newplan.optimizer.Rule.Rule(String)
org.apache.pig.newplan.optimizer.Rule.Rule(String,boolean)
org.apache.pig.newplan.PlanVisitor.popWalker()
org.apache.pig.newplan.ReverseDependencyOrderWalker.doAllSuccessors(Operator,Set<Operator>,Operator,Collection<Operator>,Operator)
org.apache.pig.newplan.SubtreeDependencyOrderWalker.SubtreeDependencyOrderWalker(OperatorPlan,Operator)
org.apache.pig.PigServer.compileLp(LogicalPlan,boolean)
org.apache.pig.PigServer.explain(String,String,boolean,boolean,PrintStream,PrintStream,PrintStream)
org.apache.pig.test.TestExperimentalColumnPrune.testNoPrune()
org.apache.pig.test.TestExperimentalColumnPrune.testPruneWithMapKey()
org.apache.pig.test.TestExperimentalFilterAboveForeach.MyPlanOptimizer.MyPlanOptimizer(OperatorPlan,List<Set<Rule>>,Set<Rule>,Rule,int)
org.apache.pig.test.TestExperimentalFilterAboveForeach.testMultipleFilter()
org.apache.pig.test.TestExperimentalFilterAboveForeach.testMultipleFilter2()
org.apache.pig.test.TestExperimentalFilterAboveForeach.testMultipleFilterNotPossible()
org.apache.pig.test.TestExperimentalFilterAboveForeach.testNotPossibleFilter()
org.apache.pig.test.TestExperimentalFilterAboveForeach.testSimple()
org.apache.pig.test.TestExperimentalFilterAboveForeach.testSimple2()
org.apache.pig.test.TestExperimentalFilterRule.MyPlanTransformListener.getTransformed()
org.apache.pig.test.TestExperimentalFilterRule.prep()
org.apache.pig.test.TestExperimentalFilterRule.testFilterRule()
org.apache.pig.test.TestExperimentalFilterRule.testFilterRuleWith2And()
org.apache.pig.test.TestExperimentalFilterRule.testFilterRuleWith2And2()
org.apache.pig.test.TestExperimentalFilterRule.testFilterRuleWithAnd()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.migratePlan(LogicalPlan)
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testCogroup()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testCogroup2()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testCogroup3()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testForeachPlan()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testForeachPlan2()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testJoinPlan()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testMultiStore()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithBinCond()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanWithCast()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithDivide()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanWithGreaterThan()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithisNotNull()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithisNull()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanWithLessThan()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithMod()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithMultiply()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithNegative()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithPlus()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithSubtract()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithUserFunc()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testPlanwithUserFunc2()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.testSimplePlan()
org.apache.pig.test.TestExperimentalLogToPhyTranslationVisitor.translatePlan(OperatorPlan)
org.apache.pig.test.TestExperimentalOperatorPlan.SillyOperator.equals(SillyOperator)
org.apache.pig.test.TestExperimentalOperatorPlan.SillyOperator.SillyOperator(String,SillyPlan)
org.apache.pig.test.TestExperimentalOperatorPlan.SillyVisitor.getVisitPattern()
org.apache.pig.test.TestExperimentalOperatorPlan.SillyVisitor.SillyVisitor(OperatorPlan,PlanWalker)
org.apache.pig.test.TestExperimentalOperatorPlan.SillyVisitor.visitSillyOperator(SillyOperator)
org.apache.pig.test.TestExperimentalOperatorPlan.TestLogicalVisitor.getVisitPlan()
org.apache.pig.test.TestExperimentalOperatorPlan.testPlanEdgeInsert()
org.apache.pig.test.TestExperimentalOperatorPlan.testPlanEdgeInsertFirstIndexBad()
org.apache.pig.test.TestExperimentalPruneMapKeys.printPlan(LogicalPlan)
org.apache.pig.test.TestExperimentalPruneMapKeys.printPlan(org.apache.pig.experimental.logical.relational.LogicalPlan)
org.apache.pig.test.TestExperimentalPruneMapKeys.printPlan(PhysicalPlan)
org.apache.pig.test.TestExperimentalPruneMapKeys.testSimplePlan2()
org.apache.pig.test.TestExperimentalPruneMapKeys.testSimplePlan3()
org.apache.pig.test.TestExperimentalPruneMapKeys.testSimplePlan4()
org.apache.pig.test.TestExperimentalPruneMapKeys.testSimplePlan5()
org.apache.pig.test.TestExperimentalPruneMapKeys.testSimplePlan6()
org.apache.pig.test.TestExperimentalPruneMapKeys.testSimplePlan7()
org.apache.pig.test.TestExperimentalPruneMapKeys.testSimplePlan8()
org.apache.pig.test.TestExperimentalRule.OP_Filter.OP_Filter(String,OperatorPlan)
org.apache.pig.test.TestExperimentalRule.OP_Join.OP_Join(String,OperatorPlan)
org.apache.pig.test.TestExperimentalRule.OP_Load.OP_Load(String,OperatorPlan)
org.apache.pig.test.TestExperimentalRule.OP.OP(String,OperatorPlan)
org.apache.pig.test.TestExperimentalRule.OP_Split.OP_Split(String,OperatorPlan)
org.apache.pig.test.TestExperimentalRule.OP_Store.OP_Store(String,OperatorPlan)
org.apache.pig.test.TestExperimentalRule.SillyRule.SillyRule(String,OperatorPlan)
org.apache.pig.test.TestLogicalPlanMigrationVisitor.testCoGroup()
org.apache.pig.test.TestLogicalPlanMigrationVisitor.testForeachSchema()
org.apache.pig.test.TestLogToPhyCompiler.testSortInfoMultipleStore()
org.apache.pig.test.TestMultiQueryCompiler.checkLogicalPlan(int,int,int)
org.apache.pig.test.TestMultiQueryLocal.setUp()
org.apache.pig.test.TestMultiQuery.testMultiQueryJiraPig1169()
org.apache.pig.test.TestMultiQuery.testMultiQueryJiraPig1171()
org.apache.pig.test.TestMultiQuery.testMultiQueryJiraPig1252()
org.apache.pig.test.TestNewPlanColumnPrune2.checkLogFileMessage(String[])
org.apache.pig.test.TestNewPlanColumnPrune2.emptyLogFileMessage()
org.apache.pig.test.TestNewPlanColumnPrune2.MyFilterFunc.exec(Tuple)
org.apache.pig.test.TestNewPlanColumnPrune2.PigStorageWithTrace.PigStorageWithTrace()
org.apache.pig.test.TestNewPlanColumnPrune2.PigStorageWithTrace.pushProjection(RequiredFieldList)
org.apache.pig.test.TestNewPlanColumnPrune2.tearDown()
org.apache.pig.test.TestNewPlanColumnPrune2.testBinCond1()
org.apache.pig.test.TestNewPlanColumnPrune2.testBinStorage1()
org.apache.pig.test.TestNewPlanColumnPrune2.testBinStorage2()
org.apache.pig.test.TestNewPlanColumnPrune2.testCoGroup1()
org.apache.pig.test.TestNewPlanColumnPrune2.testCoGroup2()
org.apache.pig.test.TestNewPlanColumnPrune2.testCoGroup3()
org.apache.pig.test.TestNewPlanColumnPrune2.testCoGroup4()
org.apache.pig.test.TestNewPlanColumnPrune2.testCoGroup5()
org.apache.pig.test.TestNewPlanColumnPrune2.testCoGroup6()
org.apache.pig.test.TestNewPlanColumnPrune2.testCoGroup7()
org.apache.pig.test.TestNewPlanColumnPrune2.testCogroup8()
org.apache.pig.test.TestNewPlanColumnPrune2.testCoGroup8()
org.apache.pig.test.TestNewPlanColumnPrune2.testCogroup9()
org.apache.pig.test.TestNewPlanColumnPrune2.testComplex1()
org.apache.pig.test.TestNewPlanColumnPrune2.testConstantPlan()
org.apache.pig.test.TestNewPlanColumnPrune2.testCross1()
org.apache.pig.test.TestNewPlanColumnPrune2.testCrossAtLeastOneColumnOneInput()
org.apache.pig.test.TestNewPlanColumnPrune2.testDistinct1()
org.apache.pig.test.TestNewPlanColumnPrune2.testFieldsToReadDuplicatedEntry()
org.apache.pig.test.TestNewPlanColumnPrune2.testFilter1()
org.apache.pig.test.TestNewPlanColumnPrune2.testFilter2()
org.apache.pig.test.TestNewPlanColumnPrune2.testFilter3()
org.apache.pig.test.TestNewPlanColumnPrune2.testFilter4()
org.apache.pig.test.TestNewPlanColumnPrune2.testForEach1()
org.apache.pig.test.TestNewPlanColumnPrune2.testForEach2()
org.apache.pig.test.TestNewPlanColumnPrune2.testForEachFilter()
org.apache.pig.test.TestNewPlanColumnPrune2.testForEachFlatten()
org.apache.pig.test.TestNewPlanColumnPrune2.testForeachNoSchema1()
org.apache.pig.test.TestNewPlanColumnPrune2.testForeachNoSchema2()
org.apache.pig.test.TestNewPlanColumnPrune2.testForEachUDF()
org.apache.pig.test.TestNewPlanColumnPrune2.testFRJoin1()
org.apache.pig.test.TestNewPlanColumnPrune2.testJoin1()
org.apache.pig.test.TestNewPlanColumnPrune2.testJoin2()
org.apache.pig.test.TestNewPlanColumnPrune2.testJoin3()
org.apache.pig.test.TestNewPlanColumnPrune2.testJoin4()
org.apache.pig.test.TestNewPlanColumnPrune2.testLoadForEach1()
org.apache.pig.test.TestNewPlanColumnPrune2.testLoadForEach2()
org.apache.pig.test.TestNewPlanColumnPrune2.testLoadForEach3()
org.apache.pig.test.TestNewPlanColumnPrune2.testLoadForEach4()
org.apache.pig.test.TestNewPlanColumnPrune2.testMapKey1()
org.apache.pig.test.TestNewPlanColumnPrune2.testMapKey5()
org.apache.pig.test.TestNewPlanColumnPrune2.testOrderBy1()
org.apache.pig.test.TestNewPlanColumnPrune2.testOrderBy2()
org.apache.pig.test.TestNewPlanColumnPrune2.testOrderBy3()
org.apache.pig.test.TestNewPlanColumnPrune2.testOrderbyWrongSignature()
org.apache.pig.test.TestNewPlanColumnPrune2.testOutJoin1()
org.apache.pig.test.TestNewPlanColumnPrune2.testPlainPlan()
org.apache.pig.test.TestNewPlanColumnPrune2.testProjectCastKeyLookup()
org.apache.pig.test.TestNewPlanColumnPrune2.testRelayFlattenMap()
org.apache.pig.test.TestNewPlanColumnPrune2.testSharedSchemaObject()
org.apache.pig.test.TestNewPlanColumnPrune2.testSplit1()
org.apache.pig.test.TestNewPlanColumnPrune2.testSplit2()
org.apache.pig.test.TestNewPlanColumnPrune2.testSplit3()
org.apache.pig.test.TestNewPlanColumnPrune2.testStream1()
org.apache.pig.test.TestNewPlanColumnPrune2.testUnion1()
org.apache.pig.test.TestNewPlanColumnPrune2.testUnionMixedPruning()
org.apache.pig.test.TestNewPlanColumnPrune2.testUnionMixedSchemaPruning()
org.apache.pig.test.TestNewPlanColumnPrune2.testUserDefinedSchema()
org.apache.pig.test.TestNewPlanColumnPrune.migratePlan(org.apache.pig.impl.logicalLayer.LogicalPlan)
org.apache.pig.test.TestNewPlanColumnPrune.MyPlanOptimizer.MyPlanOptimizer(OperatorPlan,int)
org.apache.pig.test.TestNewPlanColumnPrune.testAddForeach()
org.apache.pig.test.TestNewPlanColumnPrune.testPrune()
org.apache.pig.test.TestNewPlanColumnPrune.testPruneWithBag()
org.apache.pig.test.TestNewPlanListener.SillyAllExpressionVisitor.SillyAllExpressionVisitor(OperatorPlan)
org.apache.pig.test.TestNewPlanListener.SillyExpressionVisitor.SillyExpressionVisitor(OperatorPlan,StringBuffer)
org.apache.pig.test.TestNewPlanListener.SillySameVisitor.SillySameVisitor(OperatorPlan)
org.apache.pig.test.TestNewPlanListener.testAllExpressionVisitor()
org.apache.pig.test.TestNewPlanListener.testAllSameVisitor()
org.apache.pig.test.TestNewPlanListener.testProjectionPatcher()
org.apache.pig.test.TestNewPlanListener.testSchemaPatcher()
org.apache.pig.test.TestNewPlanLogicalOptimizer.testFilterPushDown()
org.apache.pig.test.TestNewPlanLogToPhyTranslationVisitor.testCogroup4()
org.apache.pig.test.TestNewPlanLogToPhyTranslationVisitor.testUserDefinedForEachSchema1()
org.apache.pig.test.TestNewPlanLogToPhyTranslationVisitor.testUserDefinedForEachSchema2()
org.apache.pig.test.TestNewPlanOperatorPlan.DummyLoad.DummyLoad(String)
org.apache.pig.test.TestNewPlanOperatorPlan.DummyLoad.DummyLoad(String,String)
org.apache.pig.test.TestNewPlanOperatorPlan.SillyPlan.SillyPlan()
org.apache.pig.test.TestNewPlanOperatorPlan.testBinaryOperatorOrder()
org.apache.pig.test.TestNewPlanOperatorPlan.testDependencyOrderWalkerGraph()
org.apache.pig.test.TestNewPlanOperatorPlan.testDependencyOrderWalkerLinear()
org.apache.pig.test.TestNewPlanOperatorPlan.testDependencyOrderWalkerTree()
org.apache.pig.test.TestNewPlanOperatorPlan.testDepthFirstWalkerGraph()
org.apache.pig.test.TestNewPlanOperatorPlan.testDepthFirstWalkerLinear()
org.apache.pig.test.TestNewPlanOperatorPlan.testDepthFirstWalkerTree()
org.apache.pig.test.TestNewPlanOperatorPlan.testDisconnectAndRemove()
org.apache.pig.test.TestNewPlanOperatorPlan.testDisconnectNegative()
org.apache.pig.test.TestNewPlanOperatorPlan.testExpressionEquality()
org.apache.pig.test.TestNewPlanOperatorPlan.testExpressionPlanVisitor()
org.apache.pig.test.TestNewPlanOperatorPlan.TestExpressionVisitor.TestExpressionVisitor(OperatorPlan)
org.apache.pig.test.TestNewPlanOperatorPlan.testFilterDifferentPredicates()
org.apache.pig.test.TestNewPlanOperatorPlan.testJoinDifferentInner()
org.apache.pig.test.TestNewPlanOperatorPlan.testJoinDifferentJoinKeys()
org.apache.pig.test.TestNewPlanOperatorPlan.testJoinDifferentJoinTypes()
org.apache.pig.test.TestNewPlanOperatorPlan.testJoinDifferentNumInputs()
org.apache.pig.test.TestNewPlanOperatorPlan.testJoinDifferentNumJoinKeys()
org.apache.pig.test.TestNewPlanOperatorPlan.testLoadEqualityDifferentFileName()
org.apache.pig.test.TestNewPlanOperatorPlan.testLoadEqualityDifferentFuncSpecCtorArgs()
org.apache.pig.test.TestNewPlanOperatorPlan.testLoadEqualityDifferentFunctionNames()
org.apache.pig.test.TestNewPlanOperatorPlan.testLoadEqualityDifferentNumFuncSpecCstorArgs()
org.apache.pig.test.TestNewPlanOperatorPlan.testLogicalPlanVisitor()
org.apache.pig.test.TestNewPlanOperatorPlan.TestLogicalVisitor.TestLogicalVisitor(OperatorPlan)
org.apache.pig.test.TestNewPlanOperatorPlan.testOperatorPlan()
org.apache.pig.test.TestNewPlanOperatorPlan.testRelationalEquality()
org.apache.pig.test.TestNewPlanOperatorPlan.testRelationalEqualityDifferentSchema()
org.apache.pig.test.TestNewPlanOperatorPlan.testRelationalEqualityNullSchemas()
org.apache.pig.test.TestNewPlanOperatorPlan.testRelationalEqualityOneNullOneNotNullSchema()
org.apache.pig.test.TestNewPlanOperatorPlan.testRelationalSameOpDifferentPreds()
org.apache.pig.test.TestNewPlanOperatorPlan.testRemoveNegative()
org.apache.pig.test.TestNewPlanOperatorPlan.testReverseDependencyOrderWalkerGraph()
org.apache.pig.test.TestNewPlanOperatorPlan.testReverseDependencyOrderWalkerLinear()
org.apache.pig.test.TestNewPlanOperatorPlan.testReverseDependencyOrderWalkerTree()
org.apache.pig.test.TestNewPlanPruneMapKeys.printPlan(org.apache.pig.newplan.logical.relational.LogicalPlan)
org.apache.pig.test.TestNewPlanRule.testMultiNode()
org.apache.pig.test.TestNewPlanRule.testSingleNodeMatch()
org.apache.pig.test.TestNewPlanRule.testTwoNodeMatch()
org.apache.pig.test.TestPigRunner.orderByTest()
org.apache.pig.test.TestPruneColumn.testInconsistentPruning()
org.apache.pig.test.TestPruneColumn.testMapKey2()
org.apache.pig.test.TestPruneColumn.testMapKey3()
org.apache.pig.test.TestPruneColumn.testMapKey4()
org.apache.pig.test.TestPruneColumn.testSplit4()
org.apache.pig.test.TestStore.testSetStoreSchema()
org.apache.pig.test.Util.createInputFile(PigContext,String,String[])
org.apache.pig.tools.pigstats.JobStats.getRecordWrittern()
org.apache.pig.tools.pigstats.PigStats.JobGraph.isConnected(Operator,Operator)
org.apache.pig.tools.pigstats.PigStats.JobGraphPrinter.JobGraphPrinter(OperatorPlan)
org.apache.pig.tools.pigstats.PigStats.JobGraphPrinter.visit(JobStats)
org.apache.pig.tools.pigstats.ScriptState.setJobParents(MapReduceOper,Configuration)
