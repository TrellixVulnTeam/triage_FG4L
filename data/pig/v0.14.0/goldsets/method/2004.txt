org.apache.pig.newplan.logical.expression.BinCondExpression.getFieldSchema()
org.apache.pig.newplan.logical.expression.CastExpression.CastExpression(OperatorPlan,LogicalExpression,LogicalSchema.LogicalFieldSchema)
org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.compatible(LogicalFieldSchema)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.addCastsToCompareBinaryExp(BinaryExpression,boolean)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.addCastsToNumericBinExpression(BinaryExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.FieldSchemaResetter.execute(LogicalExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.FieldSchemaResetter.FieldSchemaResetter(OperatorPlan)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.generateIncompatibleTypesMessage(BinaryExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.throwIncompatibleTypeError(BinaryExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.TypeCheckingExpVisitor(OperatorPlan,CompilationMessageCollector,LogicalRelationalOperator)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(MapLookupExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(ModExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(NegativeExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(ProjectExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(RegexExpression)
org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(UserFuncExpression)
org.apache.pig.test.TestTypeCheckingValidatorNewLP.testCompareNULL()
org.apache.pig.test.TestTypeCheckingValidatorNewLP.testDereferenceTypeSet()
org.apache.pig.test.TestTypeCheckingValidatorNewLP.testUDFNoInnerSchema()
