<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:47:00 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/ZOOKEEPER-368/ZOOKEEPER-368.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[ZOOKEEPER-368] Observers: core functionality </title>
                <link>https://issues.apache.org/jira/browse/ZOOKEEPER-368</link>
                <project id="12310801" key="ZOOKEEPER">ZooKeeper</project>
                    <description>&lt;p&gt;Edit (Henry Robinson/henryr) 12/11/09:&lt;/p&gt;

&lt;p&gt;This JIRA specifically concerns the implementation of non-voting peers called Observers, their documentation and their tests. &lt;/p&gt;

&lt;p&gt;Explicit goals are 1. not breaking any current ZK functionality, 2. enabling at least one deployment scenario involving Observers, 3. documentation describing how to use the feature and 4. tests validating the correct behaviour of 2. &lt;/p&gt;

&lt;p&gt;Non goals of this JIRA are 1. performance optimizations specific to Observers, 2. compatibility with every feature of ZooKeeper (in particular all leader election protocols), which are both to be addressed in future JIRAs. &lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://wiki.apache.org/hadoop/ZooKeeper/Observers&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/ZooKeeper/Observers&lt;/a&gt; for more detail of use cases, proposed design and usage.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://wiki.apache.org/hadoop/ZooKeeper/Observers/ReviewGuide&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/ZooKeeper/Observers/ReviewGuide&lt;/a&gt; for a brief commentary on the current patch. &lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;Currently, all servers of an ensemble participate actively in reaching agreement on the order of ZooKeeper transactions. That is, all followers receive proposals, acknowledge them, and receive commit messages from the leader. A leader issues commit messages once it receives acknowledgments from a quorum of followers. For cross-colo operation, it would be useful to have a third role: observer. Using Paxos terminology, observers are similar to learners. An observer does not participate actively in the agreement step of the atomic broadcast protocol. Instead, it only commits proposals that have been accepted by some quorum of followers.&lt;/p&gt;

&lt;p&gt;One simple solution to implement observers is to have the leader forwarding commit messages not only to followers but also to observers, and have observers applying transactions according to the order followers agreed upon. In the current implementation of the protocol, however, commit messages do not carry their corresponding transaction payload because all servers different from the leader are followers and followers receive such a payload first through a proposal message. Just forwarding commit messages as they currently are to an observer consequently is not sufficient. We have a couple of options:&lt;/p&gt;

&lt;p&gt;1- Include the transaction payload along in commit messages to observers;&lt;br/&gt;
2- Send proposals to observers as well.&lt;/p&gt;

&lt;p&gt;Number 2 is simpler to implement because it doesn&apos;t require changing the protocol implementation, but it increases traffic slightly. The performance impact due to such an increase might be insignificant, though.&lt;/p&gt;

&lt;p&gt;For scalability purposes, we may consider having followers also forwarding commit messages to observers. With this option, observers can connect to followers, and receive messages from followers. This choice is important to avoid increasing the load on the leader with the number of observers. &lt;/p&gt;
</description>
                <environment></environment>
        <key id="12422157">ZOOKEEPER-368</key>
            <summary>Observers: core functionality </summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="henryr">Henry Robinson</assignee>
                                    <reporter username="fpj">Flavio Junqueira</reporter>
                        <labels>
                    </labels>
                <created>Mon, 6 Apr 2009 21:58:06 +0100</created>
                <updated>Fri, 26 Mar 2010 17:24:54 +0000</updated>
                            <resolved>Wed, 18 Nov 2009 19:08:19 +0000</resolved>
                                                    <fixVersion>3.3.0</fixVersion>
                                    <component>quorum</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="12724101" author="henryr" created="Thu, 25 Jun 2009 15:16:46 +0100"  >&lt;p&gt;I&apos;m attaching a first cut at this JIRA. I&apos;d like comments on the broad approach - I&apos;m aware there are more than a few rough edges in the code that need smoothing out.&lt;/p&gt;

&lt;p&gt;I&apos;ve introduced a PeerType enum to QuorumPeers that denote the peer as either a PARTICIPANT or an OBSERVER. I&apos;ve also extended PeerState with an OBSERVING state. It is possible for PARTICIPANT nodes to be in the OBSERVING state if they have joined the ensemble but aren&apos;t part of the current view (there are a few references to views in this patch that reflect my work on the dynamic cluster membership stuff, however they&apos;re typically placeholder code). As a result, I&apos;ve update the FollowerHandler code to send the current view to a new follower during the initial handshaking.&lt;/p&gt;

&lt;p&gt;Observers hear about committed proposals through INFORM messages that the Leader sends to them. Apart from that, they operate much like Followers (and therefore share the same code) - when they connect, they sync. Eventually I envisage adding plugins to observers so that the proposals they see can be published according to whatever protocol is required. &lt;/p&gt;

&lt;p&gt;Observers don&apos;t participate in leader elections, and therefore only use the LeaderElection class which (by my reading) only deals with finding out who the current leader is. It is the only election class in this patch that correctly updates the PeerState depending on the current PeerType once a leader has been found. I haven&apos;t yet completely convinced myself that Observers don&apos;t actually actively participate in elections in this patch, so I&apos;ll be working to make sure of that. &lt;/p&gt;

&lt;p&gt;A node can be configured as an observer by having peerType=observer in its config file, otherwise it defaults to participant.&lt;/p&gt;</comment>
                            <comment id="12724549" author="fpj" created="Fri, 26 Jun 2009 14:56:00 +0100"  >&lt;p&gt;What if we do the following:&lt;/p&gt;

&lt;p&gt;1- New observer o connects to an arbitrary replica r, and identifies itself as an observer to r;&lt;br/&gt;
2- If r is LEADING or FOLLOWING, then sends to o its current leader r;&lt;br/&gt;
3- If r is LOOKING, then waits until it changes its state, and then execute step 2 if able to connect to leader.&lt;/p&gt;

&lt;p&gt;This change might be simpler than having LE take into account the existence of observers. What do you think?&lt;/p&gt;</comment>
                            <comment id="12724574" author="henryr" created="Fri, 26 Jun 2009 16:25:04 +0100"  >&lt;p&gt;That&apos;s a good suggestion, and would work. &lt;/p&gt;

&lt;p&gt;I wanted Observers to follow the same bootstrap code as Followers - and therefore have a LOOKING state and not depend on a Follower - which could be lagging and perhaps, therefore, never finding a leader - for leader resolution.&lt;/p&gt;

&lt;p&gt;LE doesn&apos;t actually need to know about Observers, the point is more to make sure that Observers don&apos;t know anything about LE. This means just making sure that Observers don&apos;t try and initiate elections or vote in them. &lt;/p&gt;

&lt;p&gt;As a more general point, I&apos;m trying to reuse a lot of code between Observers and Followers, as they are extremely similar in their behaviour. What do people think about the need to break out Observer into its own class, and probably inherit from a base Peer set of classes where the code needs to be shared? I&apos;m in two minds - it&apos;s cleaner to do, but will increase the complexity of following the code. &lt;/p&gt;
</comment>
                            <comment id="12726055" author="fpj" created="Wed, 1 Jul 2009 14:33:32 +0100"  >&lt;p&gt;Uploading a new patch that applies against current trunk and compiles.&lt;/p&gt;</comment>
                            <comment id="12726056" author="fpj" created="Wed, 1 Jul 2009 14:36:10 +0100"  >&lt;p&gt;+1 to the idea of having a Peer base class, and specializing it to Observer and Follower. &lt;/p&gt;</comment>
                            <comment id="12726058" author="henryr" created="Wed, 1 Jul 2009 14:41:15 +0100"  >&lt;p&gt;Thanks for the new patch! &lt;/p&gt;

&lt;p&gt;I&apos;ve done some work on splitting out the code already. I&apos;ll hopefully have some time to finish it this week. The patch will become quite big, but I think the resulting code will be pretty clean.&lt;/p&gt;</comment>
                            <comment id="12726119" author="phunt" created="Wed, 1 Jul 2009 16:53:26 +0100"  >&lt;p&gt;I&apos;d encourage you to use the systest test environment in addition to unit tests for this change &quot;src/java/systest&quot;. There are currently&lt;br/&gt;
(3.2) some basic tests, but for post 3.2 we are planning to integrate the testng patch that&apos;s been pending for a while, move some&lt;br/&gt;
of these tests (quorum esp) into systest, expand the systest coverage, and get systest to run as part of a nightly/continuous&lt;br/&gt;
integration harness. I think systest would work well for verifying failure conditions for observers in particular.&lt;/p&gt;
</comment>
                            <comment id="12728593" author="henryr" created="Wed, 8 Jul 2009 10:55:39 +0100"  >&lt;p&gt;(Reposting last bit of conversation from ZK-107, more appropriate to this jira)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&quot;sorry to jump in late here. rather than adding the inform, why don&apos;t we just send the PROPOSE and COMMIT to the Observer as normal, and just make the Observer not send ACKs? That way we change as little code as possible with minimum overhead. It also makes switching from Observer to Follower as easy as turning on the ACKs. I also think Observers should be able to issue proposals. One use case for observers are remote data centers that basically proxy clients that connect to ZooKeeper. This means an Observer is just a Follower that doesn&apos;t vote (ACK).&quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That&apos;s definitely one way to do it. The other side to that argument is to keep the message complexity down, especially if we can envisage use cases with lots of Observers. A connection to a remote Observer might be more likely to violate the FIFO requirement of ZK connections; having a single-message protocol makes it easier to deal with this case (not a correctness issue of Observers, just annoying if PROPOSALs arrive after COMMITs for some reason). I think that&apos;s a marginal issue though. My preference is for INFORM messages as this completely separates Observer logic from Follower logic and doesn&apos;t add much complexity to the code.&lt;/p&gt;

&lt;p&gt;The Observer also has to take care not to participate in leader elections. I think Observers also need to announce themselves as such to the Leader, to enable the case where a Follower wishes to connect as an Observer temporarily (otherwise the Leader will think the Observer to be a Follower and use it as part of a quorum). Also if the leader can distinguish between followers and observers then it can treat both differently (e.g. through batching multiple INFORMs or allowing observers to lag by prioritising follower traffic).&lt;/p&gt;

&lt;p&gt;Keeping Observers as special-case Followers would simplify the code for the observers patch (I&apos;ve got a new version nearly ready to submit, just fixing some tests). However, it would mean that Observers are harder to customise - for example, there&apos;s no persistence requirement for an Observer and so some of the RequestProcessors can be optionally removed or replaced by something that only asynchronously writes to disk. Keeping them lightweight has been a goal. My feeling was that I was introducing too many &apos;if (amObserver()) &lt;/p&gt;
{...}
&lt;p&gt;&apos; branches to an already fairly hard to follow bit of code (in particular Follower.followLeader). Breaking the functionality into two separate classes seems to have made things cleaner.&lt;/p&gt;

&lt;p&gt;Regarding Observers being able to issue proposals; I don&apos;t have a problem with that, should be reasonably easy to add. &lt;/p&gt;
</comment>
                            <comment id="12728596" author="fpj" created="Wed, 8 Jul 2009 11:02:56 +0100"  >&lt;p&gt;I prefer to have the INFORM message for a couple of reasons:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Message complexity;&lt;/li&gt;
	&lt;li&gt;It make the abstraction clear: Observers are only being informed of the outcome of agreement.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I agree that it has the disadvantage of requiring more modifications to the current code, which makes it sound a little scary, but I&apos;m willing to see how it will end if we go down this path.&lt;/p&gt;

&lt;p&gt;I also agree that observers should be able to propose request. I was considering it given, so I&apos;m glad that Ben made it explicit. &lt;/p&gt;

&lt;p&gt;I was wondering how difficult it would be to make observers (perhaps even any replica) go into read-only mode once they disconnect from the rest of the ensemble. Should it be a different jira or it is something we can consider for this patch?&lt;/p&gt;</comment>
                            <comment id="12728749" author="breed" created="Wed, 8 Jul 2009 16:32:56 +0100"  >&lt;p&gt;since henry is doing the work, i&apos;m certainly willing to see how it goes with a new message. the two disadvantages i see with this approach (of adding INFORM):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;at a high level the only difference between a follower and an observer is that its ACKs do not get counted. i think this high level difference can translate into a simple modification of the follower. (since we already have to make sure that the follower sees proposals before commits, we shouldn&apos;t run into the problem you alluded to henry.)&lt;/li&gt;
	&lt;li&gt;for the dynamic ensemble patch we want to be able to convert observers to followers easily and quickly. flipping a switch at the observer to start sending ACKs and at the leader to start acknowledging the ACKs would be an easy way to do the conversion.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;oh and there already is a jira about going into read-only mode on disconnect.&lt;/p&gt;</comment>
                            <comment id="12728751" author="breed" created="Wed, 8 Jul 2009 16:38:38 +0100"  >&lt;p&gt;hey, henry two other questions/comments for you:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;i&apos;m trying to understand the use case for a follower that connects as an observer. this would adversely affect the reliability of the system since a follower acting as an observer would count as a failed follower even though it is up. did you have a case in mind?&lt;/li&gt;
	&lt;li&gt;i think it is reasonable to turn off the sync for the observer, but we probably still want to log to disk so that we can recover quickly. otherwise we will keep doing state transfers from the leader every time we connect. right?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12728775" author="fpj" created="Wed, 8 Jul 2009 17:36:03 +0100"  >&lt;blockquote&gt;
&lt;p&gt;for the dynamic ensemble patch we want to be able to convert observers to followers easily and quickly. flipping a switch at the observer to start sending ACKs and at the leader to start acknowledging the ACKs would be an easy way to do the conversion.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We need a transition from OBSERVING to FOLLOWING on the state of QuorumPeer, and  I believe your concern is that we end up doing a state transfer when undergoing that transition. Is it right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i&apos;m trying to understand the use case for a follower that connects as an observer. this would adversely affect the reliability of the system since a follower acting as an observer would count as a failed follower even though it is up. did you have a case in mind?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why would a follower connect as an observer? I guess I&apos;m missing the point here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i think it is reasonable to turn off the sync for the observer, but we probably still want to log to disk so that we can recover quickly. otherwise we will keep doing state transfers from the leader every time we connect. right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I believe you&apos;re suggesting this because you&apos;re afraid that an observer that re-connects too often might end up overwhelming the leader. A third option would be to have the observer only keeping the database in memory and having the leader limiting the frequency of state transfers to observers. If you&apos;re concerned about the performance of an observer, then it might be an idea to consider. &lt;/p&gt;</comment>
                            <comment id="12728778" author="fpj" created="Wed, 8 Jul 2009 17:38:24 +0100"  >&lt;p&gt;The jira on read-only mode is &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-40&quot; title=&quot;Go read-only on loss of quorum&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-40&quot;&gt;ZOOKEEPER-40&lt;/a&gt;. Thanks, Ben.&lt;/p&gt;</comment>
                            <comment id="12728797" author="henryr" created="Wed, 8 Jul 2009 18:01:33 +0100"  >{i&apos;m trying to understand the use case for a follower that connects as an observer. this would adversely affect the reliability of the system since a follower acting as an observer would count as a failed follower even though it is up. did you have a case in mind?}

&lt;p&gt;Not really. I was working on the assumption that it should be the peer and not the leader which decides whether or not it wants to be an observer or a follower. Since peers are identified on the leader by their IP address, there&apos;s no way for the leader to tell the difference between a follower or an observer from the same address. &lt;/p&gt;

&lt;p&gt;I was thinking of situations where a follower might not be able to, e.g., write to disk because a partition was full and therefore wanted to indicate to the leader that it had effectively failed while still receiving updates. If the leader sees that a follower has stopped replying to pings (because they are queued behind a sync to disk), I think it currently disconnects the follower; the follower might want to reconnect as an observer to do &apos;best effort&apos; relaying of updates to clients. &lt;/p&gt;

&lt;p&gt;I admit this is quite contrived! It&apos;s ok for this not to work as I describe, although I think it will work as a side effect of the dynamic cluster stuff.&lt;/p&gt;

{i think it is reasonable to turn off the sync for the observer, but we probably still want to log to disk so that we can recover quickly. otherwise we will keep doing state transfers from the leader every time we connect. right?}

&lt;p&gt;Yep, absolutely. However as Flavio says the leader can rate limit state transfers if this seems to be happening a lot. I would expect that log to disk be turned on for most observers, but we can turn it off transparently to the leader if we just want to use an observer to, say, publish updates to an rss feed or something and don&apos;t want to throw disk at the problem. In fact, observers could even turn off syncing with the leader for certain use cases.&lt;/p&gt;

&lt;p&gt;As soon as I find a little bit of bandwidth I&apos;ll get the new patch on here for discussion. &lt;/p&gt;
</comment>
                            <comment id="12730366" author="henryr" created="Mon, 13 Jul 2009 15:48:01 +0100"  >&lt;p&gt;Here is a new patch. The headline changes are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Observers now commit proposals to disk&lt;/li&gt;
	&lt;li&gt;Observers can issue proposals&lt;/li&gt;
	&lt;li&gt;Clients can connect to observers as though they were followers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have moved around a lot of code, as follows:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Observers are now in their own class, and along with Followers are a subtype of a new class Peer.&lt;/li&gt;
	&lt;li&gt;Peer contains common code shared between observers and followers.&lt;/li&gt;
	&lt;li&gt;In particular, followLeader has been broken up into several methods so that it can be shared between observers and followers. The code has barely changed, only the partitioning. I think this helps its readability as well.&lt;/li&gt;
	&lt;li&gt;There is a new ObserverZooKeeperServer class, which along with FollowerZooKeeper class is a subtype of a new class PeerZooKeeperServer. Again, this is for code reuse purposes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All Java tests pass, and the patch applies cleanly for me against trunk. I haven&apos;t included any new tests, which are the next thing I will do. As far as I am aware, this patch is feature complete. &lt;/p&gt;
</comment>
                            <comment id="12730508" author="mahadev" created="Mon, 13 Jul 2009 21:50:36 +0100"  >&lt;p&gt;sorry to get in late here, I think I missed out on most of the discussions, I  will read through the comments before I comment on the approach, but just to clear things:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;what is the practical use of Observers? What is the real motivation besides Paxos listeners for this? Is there a valid real world scenario that we would solve or justify with this? I can see one use case being Read scalability without decreasing write throughput. anything else?&lt;/li&gt;
	&lt;li&gt;also, how does one configure a node to be an obersver?&lt;/li&gt;
	&lt;li&gt;what if someone does not use Observers, does the code behave the same way as it does now? WHat is the backwards compatibility story of this new featrue?&lt;/li&gt;
	&lt;li&gt;how do we test (probably use systests) for this new featrue?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12730522" author="henryr" created="Mon, 13 Jul 2009 22:29:41 +0100"  >&lt;p&gt;Hi Mahadev - &lt;/p&gt;

&lt;p&gt;To answer your question one by one:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I think the read-scalability issue is an important use case. Observers are also a natural way to deal with peers that try to connect but are not part of the current view, which will be important for the dynamic membership patch. I also would like to use them to publish proposals; for example they are a convenient point to integrate a larger publish-subscribe system. Watches are very useful for their intended purposes but are not ideal for listening to a stream of proposals since they are cancelled once fired.&lt;/li&gt;
	&lt;li&gt;Set peerType=observer in the configuration file to make a peer an observer. In the dynamic membership patch, a follower that tries to connect while not in the current view will become an observer until the view is changed to include it.&lt;/li&gt;
	&lt;li&gt;Yes, there have been no invasive changes in the Follower code (but some restructuring to allow code re-use). All tests currently pass for me, which while not conclusive proof, suggests that there have been no behavioural changes and none are in by design.&lt;/li&gt;
	&lt;li&gt;We must test in the same way we test the behaviour of Followers - their ability to connect, to see proposals, to withstand stress. Some important observer specific test cases will be:
	&lt;ul&gt;
		&lt;li&gt;Ensuring an observer does not vote in an election or in a proposal (by testing when an ensemble is not quorate but would be if the observer were a follower)&lt;/li&gt;
		&lt;li&gt;Making sure that an observer does not see messages it shouldn&apos;t (PROPOSALs in particular)&lt;/li&gt;
		&lt;li&gt;Ensuring that an observer does not become a leader.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12730542" author="mahadev" created="Mon, 13 Jul 2009 22:56:42 +0100"  >&lt;p&gt;hi henry, thanks for your response. For the case of backwards compatibility, I meant compatibility between 3.2 servers and this new code, 3.2 client and this new code. Would the new servers be able to work with old 3.2 servers? This is really important since quite a few of our users  using zookeeper do rolling upgrades, (upgrading one server at a time) so as to keep the service running. Also, not all the clients can be upgraded at the same time. So, any new feature should take this into account. does that seem reasonable?&lt;/p&gt;</comment>
                            <comment id="12730570" author="henryr" created="Mon, 13 Jul 2009 23:45:27 +0100"  >&lt;p&gt;Seems completely reasonable to me - it&apos;s an important property for ZK to maintain. My belief is that a new Follower connecting to a 3.2 server will work just fine, and vice versa. An observer that tries to connect to a 3.2 server will probably fail due to sending the wrong kind of info packet. This obviously needs verification, but I&apos;ve designed the patch to leave current functionality pretty much untouched.&lt;/p&gt;</comment>
                            <comment id="12730760" author="fpj" created="Tue, 14 Jul 2009 10:58:27 +0100"  >&lt;p&gt;Previous patch does not apply against trunk and does not compile after applying all changes, so I&apos;m uploading a new patch that fixes both. The fix required to make it compile is small, so it was easy to do.&lt;/p&gt;

&lt;p&gt;Henry, please make sure that it is ok.&lt;/p&gt;</comment>
                            <comment id="12730762" author="henryr" created="Tue, 14 Jul 2009 11:05:58 +0100"  >&lt;p&gt;Hi Flavio - &lt;/p&gt;

&lt;p&gt;Have you downloaded the lastest patch (78kb, dated 13th July)? For me it applies cleanly against a fresh checkout and builds with no errors. The patch you have uploaded is only 25kb so I think might be based off an earlier patch...&lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;
</comment>
                            <comment id="12730763" author="fpj" created="Tue, 14 Jul 2009 11:08:47 +0100"  >&lt;blockquote&gt;
&lt;p&gt;what is the practical use of Observers? What is the real motivation besides Paxos listeners for this? Is there a valid real world scenario that we would solve or justify with this? I can see one use case being Read scalability without decreasing write throughput. anything else?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Mahadev, given that many applications (if not most of them) of ZooKeeper have a high ratio of reads to writes, read scalability without affecting write performance is quite an important goal. Do you still think we need more motivation? &lt;/p&gt;

&lt;p&gt;You might have missed the point that correlating observers and learners was just to map to an abstraction that some people know.   &lt;/p&gt;</comment>
                            <comment id="12730771" author="fpj" created="Tue, 14 Jul 2009 11:22:23 +0100"  >&lt;p&gt;Duh! I had an old version of the patch in my disk, and I was looking at that one before. I should have realized by the file sizes. Sorry about that.&lt;/p&gt;

&lt;p&gt;I have now tried to apply the correct patch, and it still doesn&apos;t apply correctly to trunk. I&apos;m getting an error on SendAckRequestProcessor.java. I&apos;m uploading a patch that works for me.&lt;/p&gt;

&lt;p&gt;Btw, please don&apos;t forget to grant license to ASF. You didn&apos;t do it for one of your patch files. &lt;/p&gt;</comment>
                            <comment id="12730772" author="henryr" created="Tue, 14 Jul 2009 11:25:52 +0100"  >&lt;p&gt;Weird - you&apos;re applying the patch with patch -p0 &amp;lt; &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-368&quot; title=&quot;Observers: core functionality &quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-368&quot;&gt;&lt;del&gt;ZOOKEEPER-368&lt;/del&gt;&lt;/a&gt;.patch from zookeeper root dir?&lt;/p&gt;

&lt;p&gt;Anyhow, thanks for the fix! I&apos;ll make sure future patches (and certainly the one I propose for commit) are ASF granted.&lt;/p&gt;</comment>
                            <comment id="12730775" author="fpj" created="Tue, 14 Jul 2009 11:41:14 +0100"  >&lt;p&gt;Agreed, it is weird. It works from the command line, but not from Eclipse. Another Eclipse mystery.&lt;/p&gt;</comment>
                            <comment id="12731046" author="mahadev" created="Tue, 14 Jul 2009 19:49:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;Mahadev, given that many applications (if not most of them) of ZooKeeper have a high ratio of reads to writes, read scalability without affecting write performance is quite an important goal. Do you still think we need more motivation?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;my point was just that we should motivate in such a fashion that lesser mortals like me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and folks who are using zookeeper understand the motivation in a simpler fashion.&lt;/p&gt;</comment>
                            <comment id="12731051" author="phunt" created="Tue, 14 Jul 2009 20:00:36 +0100"  >&lt;p&gt;I&apos;ve only been following this a bit, but some questions around the plan wrt manageability:&lt;/p&gt;

&lt;p&gt;1) adding removing observers, observer itself needs to be configured, any changes needed to config on existing ensemble?&lt;br/&gt;
2) JMX - what&apos;s the plan? what additional properties/actions will be supported?&lt;br/&gt;
3) 4letter words - same issues as jmx&lt;br/&gt;
4) debug-ability - ensure adequate logging (log4j) on ensemble as well as on obs itself&lt;/p&gt;

&lt;p&gt;5) security - will an ensemble allow any observer to connect to it? today we have ensemble participants hardwired into the config of each of the servers right?&lt;/p&gt;

&lt;p&gt;testing and b/w compat were mentioned before, but I&apos;m interested to hear/see more on the plan for that as well (I&apos;m probably going to look at beefing up unit &amp;amp; systest next, esp around b/w compat, so would be good to have a better idea where this is headed)&lt;/p&gt;</comment>
                            <comment id="12731057" author="phunt" created="Tue, 14 Jul 2009 20:07:07 +0100"  >&lt;p&gt;btw, documentation will be needed as well.&lt;/p&gt;

&lt;p&gt;Perhaps a wiki &quot;proposal&quot; page should be created that will capture the &quot;current proposal&quot; for easy review? This JIRA can capture ongoing discussion, with agreed upon results captured in the wiki design/functional document.&lt;/p&gt;</comment>
                            <comment id="12731058" author="phunt" created="Tue, 14 Jul 2009 20:08:33 +0100"  >&lt;p&gt;&amp;gt; my point was just that we should motivate in such a fashion that lesser mortals like me  and folks who are using zookeeper understand the motivation in a simpler fashion.&lt;/p&gt;

&lt;p&gt;lesserMortal += 1&lt;/p&gt;</comment>
                            <comment id="12731073" author="breed" created="Tue, 14 Jul 2009 20:45:55 +0100"  >&lt;p&gt;to address the motivation a bit consider poorly connected data centers and cross datacenter zookeeper. we need to put zookeeper servers in the poorly connected data centers because we will want to service all the reads locally in those data centers, but we don&apos;t want to affect reliability or latency in other data centers. for example, imagine we have 5 poorly connected data centers and 3 well connected data centers. we may put two servers in each data center. that means that we have an ensemble of 16 servers, but because of the poorly connected data centers, we are more likely to lose quorum than if we made the 5 poorly connected data centers observers and just used the 3 well connected data centers to commit changes. you can view observers as proxies. &lt;/p&gt;</comment>
                            <comment id="12731090" author="henryr" created="Tue, 14 Jul 2009 21:02:45 +0100"  >&lt;p&gt;These are all great points. &lt;/p&gt;

&lt;p&gt;Addressing Patrick&apos;s points:&lt;/p&gt;

&lt;p&gt;1. No - the ensemble doesn&apos;t &apos;know&apos; about the observers (although the Leader maintains FollowerHandlers for them) so doesn&apos;t notice when they leave.&lt;br/&gt;
2. I need to look further into JMX - I don&apos;t know a lot about it. Currently Observers do pretty much the same thing as Followers.&lt;br/&gt;
3. Probably need to update &apos;stat&apos;; I&apos;ll look at the others.&lt;br/&gt;
4. I&apos;ve been trying to do this but need to do a second pass to say I&apos;m happy with it.&lt;br/&gt;
5. Yes, for the time being any observer can connect. It would be very easy to whitelist say ranges of observer IPs in the config file - in fact we probably want to do that for all peers. &lt;/p&gt;

&lt;p&gt;I&apos;ll be more formal about testing and b/w compatibility although I&apos;ll appreciate input on both. I&apos;ll try and write a few words for a wiki page - I&apos;ve already started work on the documentation but don&apos;t want to go too far before we agree on the general approach.&lt;/p&gt;
</comment>
                            <comment id="12731102" author="phunt" created="Tue, 14 Jul 2009 21:21:47 +0100"  >&lt;p&gt;btw, this looks great so far (both the ideas/solutions and open discussion), so I don&apos;t mean to scare you off. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;at the same time though, my (and Mahadev I&apos;m sure) questions are motivated as someone who not only develops this code but is&lt;br/&gt;
also responsible for supporting production deployments. Having solid answers to these questions will really&lt;br/&gt;
help in the long run. &lt;/p&gt;

&lt;p&gt;Thanks for everyone working on this, keep up the good work!&lt;/p&gt;</comment>
                            <comment id="12731333" author="fpj" created="Wed, 15 Jul 2009 09:06:22 +0100"  >&lt;p&gt;From the patch, an observer observes the leader. In the description of this jira, I had suggested that we also have observers of followers for scalability purposes. I understand that this will require some changes, like adding code to the followers to handle connections to observers, forwarding INFORM messages to the observers, syncing with observers, etc. The observer would also need to be slightly different because it wouldn&apos;t need to look for a leader.&lt;/p&gt;

&lt;p&gt;I wonder if this is something we should pursue in this patch, in another patch, or simply forget about it. I think the 3rd option is a little too drastic as I believe it is a nice feature that will enable deployments in which the number of messages the leader sends per operation does not increase with the number of observers.&lt;/p&gt;

&lt;p&gt;Comments? &lt;/p&gt;</comment>
                            <comment id="12731366" author="niemeyer" created="Wed, 15 Jul 2009 10:34:05 +0100"  >&lt;p&gt;I&apos;ve checked out the patch and have some minor questions/comments to make.  Please note that I&apos;m a &quot;mortal&quot; as per the terminology above, so I apologize for the lack of deeper understanding. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;+            for (FollowerHandler f : observingFollowers) {&lt;br/&gt;
+                if (!self.viewContains(f.sid))&lt;br/&gt;
+                    f.queuePacket(qp);&lt;/p&gt;

&lt;p&gt;I&apos;m missing the reasoning why the !self.viewContains() test is needed here.  For the untrained eye, it sounds redundant with the fact that there are separate lists for observers and followers.  Might be nice to add the reasoning as a comment in the code, for the next pair of eyes passing over it.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;+     * @param zxid&lt;br/&gt;
+     * @param proposal&lt;br/&gt;
+     */&lt;br/&gt;
+    public void inform(Proposal proposal) &lt;/p&gt;
{   

There&apos;s no zxid parameter.

[3]

I&apos;m slightly concerned about point (5) from Patrick too.  If anyone can subscribe as an Observer, it means that the ACLs for reading become very ineffective for protecting data in the ensemble (e.g. passwords, etc).  I understand that it&apos;s tricky to address this in the right way right now since there&apos;s no concept of authentication between servers, but it&apos;d be awesome if such an approach could be considered in the near future for the right way of solving this, rather than simply whitelisting by IP.  The whitelist solution might be a good short term approach, but it&apos;s also a very weak approach for securing information.


[4]

-            forwardingFollowers.remove(follower);
-        }
&lt;p&gt;+            forwardingFollowers.remove(follower);            &lt;br/&gt;
+        }        &lt;br/&gt;
(...)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Socket s = ss.accept();&lt;br/&gt;
+                        Socket s = ss.accept();          &lt;br/&gt;
(...)&lt;/li&gt;
	&lt;li&gt;self.setCurrentVote(result.vote);&lt;br/&gt;
+                    self.setCurrentVote(result.vote);                  &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;There are a few changes in the diff which are just adding trailing whitespace at the end of some lines.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The VIEWCHANGE message type isn&apos;t being sent anywhere in the patch.  Is it preparing for a forthcoming change?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;These changes look very nice overall! (again, for an untrained eye)  Thanks for working on this Henry. &lt;/p&gt;</comment>
                            <comment id="12731413" author="henryr" created="Wed, 15 Jul 2009 13:32:26 +0100"  >&lt;p&gt;I&apos;ve written a proposal document here: &lt;a href=&quot;http://wiki.apache.org/hadoop/ZooKeeper/Observers&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/ZooKeeper/Observers&lt;/a&gt; - comments, edits, additions all very welcome. &lt;/p&gt;

&lt;p&gt;Gustavo - good catches. There is some cruft in this patch from the work on dynamic membership that I&apos;ve been doing. Before this patch gets committed I shall need to remove it. In particular the VIEWCHANGE messages are completely gone. However I hope there&apos;s not too much obscuring the intent of this patch. &lt;/p&gt;

&lt;p&gt;Your points about security are very well made - I would suggest a whitelist for now (which gives the same level of security as Followers enjoy), follower by a separate JIRA to look at a better way to secure the data. I&apos;ve made some comments on the wiki page - please do chime in with suggestions as I&apos;m no kind of authority on security. &lt;/p&gt;

&lt;p&gt;Flavio - I think that would be a significant change (would have to add a lot of code from Leader into Follower, particularly because Observers can issue proposals) and one whose cost / benefits need to be worked out separately. I&apos;d prefer to get Observers in first, and then we can look at load-balancing them if necessary. How does that sound?&lt;/p&gt;


</comment>
                            <comment id="12731549" author="phunt" created="Wed, 15 Jul 2009 17:38:53 +0100"  >&lt;p&gt;I believe another option for security today would be to use stunnel with certificates. This would provide both authentication of&lt;br/&gt;
the observer and also encryption of the connection. This should work with no/limited other changes. Of course there is a performance&lt;br/&gt;
issue to think about...&lt;/p&gt;

&lt;p&gt;We have been considering moving the server over to some NIO framework like grizzly. I&apos;ve heard that&lt;br/&gt;
doing so would have the added benefit of supporting ssl/certs with no/limited changes on our behalf (ie grizzly supports&lt;br/&gt;
this natively). This would be (another) great project for someone to work on. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12731660" author="mahadev" created="Wed, 15 Jul 2009 21:27:34 +0100"  >&lt;p&gt;henry/flavio thanks for your patch. I have some higher leveel questions regarding obersvers currently connecting to leader&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;does an oberserver forward update request to the leader? How is this handled?&lt;/li&gt;
	&lt;li&gt;also, you guys mentioned that an observer should be able to connect for follower later sometime other than just the leader, do you have plans to do that? or have you thought about how you would do that and would that require any changes in the design/code changes you are submitting in this jira?&lt;/li&gt;
	&lt;li&gt;also, just a cursory look at the patch shows that their is some duplicated code between follower and observers? Is that necessary? I havent taken a deeper look at the code, so dont have suggestions to do that right now, (one way woyuld be just have a single class that takes a parameter of diabling acks and other stuff and the new classess that inherit from that follower/observer just say if thats enabled or not)&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12731662" author="mahadev" created="Wed, 15 Jul 2009 21:30:01 +0100"  >&lt;p&gt;alos the code currently doesnt compile:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 location: &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.zookeeper.server
    [javac] &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.server.ObserverBean;
    [javac]                                   ^
    [javac] /home/mahadev/workspace/zookeeper-commit-trunk/src/java/main/org/apache/zookeeper/server/quorum/Observer.java:71: cannot find symbol
    [javac] symbol  : class ObserverBean
    [javac] location: class org.apache.zookeeper.server.quorum.Observer
    [javac]         zk.registerJMX(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ObserverBean(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, zk), self.jmxLocalPeerBean);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12731674" author="henryr" created="Wed, 15 Jul 2009 21:50:37 +0100"  >&lt;p&gt;Hi Mahadev - &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;An observer sends REQUEST packets to the Leader just like a Follower would (using the same code) - is this what you meant?&lt;/li&gt;
	&lt;li&gt;See my earlier comments to Flavio - I think connecting Observers to Followers would be a significant change and therefore should wait for another JIRA. Most if not all the code would be on the Follower side, which would make me nervous about backwards compatibility.&lt;/li&gt;
	&lt;li&gt;There is a single parent class (Peer) in which common code is located. More needs to be moved from Observer and Follower into it in the final patch.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12731684" author="henryr" created="Wed, 15 Jul 2009 22:03:33 +0100"  >&lt;p&gt;Argh, try this - the ObserverBean.java file wasn&apos;t included for some reason.&lt;/p&gt;

&lt;p&gt;Flavio - I&apos;m sorry, I have probably reverted whatever you did to make it work in Eclipse, but this applies for me against a clean trunk via patch -p0 &amp;lt; &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-368&quot; title=&quot;Observers: core functionality &quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-368&quot;&gt;&lt;del&gt;ZOOKEEPER-368&lt;/del&gt;&lt;/a&gt;.patch and builds.&lt;/p&gt;</comment>
                            <comment id="12731687" author="mahadev" created="Wed, 15 Jul 2009 22:08:05 +0100"  >&lt;p&gt;thanks henry,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;See my earlier comments to Flavio - I think connecting Observers to Followers would be a significant change and therefore should wait for another JIRA. Most if not all the code would be on the Follower side, which would make me nervous about backwards compatibility.&lt;/p&gt;&lt;/blockquote&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;i just meant, that are you guys keeping that in mind in terms of some work that needs to be done right now to make that easier to do later (like: generalizing somethings for making it easy for observers to connect to followers later sometime)&lt;/li&gt;
	&lt;li&gt;also one minor nit on QuorumPeerConfig. Should QuorumPeerConfig  just throw an exception and fail if peerType is specfied and it does not match either observer or participant? If not specified it goes to default of participant!... this is just to prevent any configuration mishaps.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12731711" author="zkuser" created="Wed, 15 Jul 2009 22:56:01 +0100"  >&lt;p&gt;Henry, I see a new compile error with your new patch:&lt;/p&gt;

&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 2 source files to C:\EclipseWorkspace\ZK320\ZooKeeper320Source\build\classes&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; C:\EclipseWorkspace\ZK320\ZooKeeper320Source\src\java\main\org\apache\zookeeper\server\quorum\Observer.java:165: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : class Record&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: class org.apache.zookeeper.server.quorum.Observer&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;             Record txn2 = SerializeUtils.deserializeTxn(ia2, hdr2);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;             ^&lt;/p&gt;</comment>
                            <comment id="12731853" author="henryr" created="Thu, 16 Jul 2009 09:24:23 +0100"  >&lt;p&gt;The problem was I didn&apos;t include the updated zookeeper.jute. Sorry; I&apos;m working with git for the first time and keep making daft mistakes. &lt;/p&gt;</comment>
                            <comment id="12733410" author="breed" created="Tue, 21 Jul 2009 01:00:51 +0100"  >&lt;p&gt;henry, i was thinking the other day that an observer is very similar to a follower in a flexible quorum with 0 weight. actually the more i thought about it, the more i realized that it should be the same. a follower with 0 weight really should not send ACKs back and then it would be an observer. it turns out that there is a comment in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-29&quot; title=&quot;Flexible quorums&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-29&quot;&gt;&lt;del&gt;ZOOKEEPER-29&lt;/del&gt;&lt;/a&gt; that makes this observation as well. in that issue the differences that flavio points out are no longer relevant. i think. what do you think?&lt;/p&gt;</comment>
                            <comment id="12733411" author="fpj" created="Tue, 21 Jul 2009 01:09:52 +0100"  >&lt;p&gt;I think this is an excellent observation. The discussion on the user list also made me think about the redundancy between the two mechanisms (hierarchical quorums and observers), and I think Ben is right in that it may simplify the implementation. Also, it has a couple of extra benefits: it would exercise the flexible quorum implementation and would combine the configuration of hierarchical quorums and observers. &lt;/p&gt;</comment>
                            <comment id="12733571" author="henryr" created="Tue, 21 Jul 2009 11:16:56 +0100"  >&lt;p&gt;I agree that using a quorum of weight 0 would emulate most of the behaviour of Observers. &lt;/p&gt;

&lt;p&gt;For:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Would simplify the patch (presumably still need code to ensure that observers aren&apos;t elected as leaders)&lt;/li&gt;
	&lt;li&gt;Exercises existing code&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Against:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Adds an extra message to each proposal instance, increasing chatter across the WAN (yes they don&apos;t need to send ACKs, but they will still receive PROPOSAL and COMMIT msgs)&lt;/li&gt;
	&lt;li&gt;Perhaps less easy to customise request processor behaviour, although it&apos;s not established that we&apos;ll definitely want to do this.&lt;/li&gt;
	&lt;li&gt;Adding subscription behaviour (see mailing list discussion) would be less clean - we would need to decide if we wanted all Followers to be able to choose the znodes they receive updates from (I think this would overcomplicate the Leader which would need to determine when / if it had a quorum for each node, and under which conditions it was to revoke its own Leadership). The alternative with the proposed approach is to only allow weight-0 Followers to choose a subscription, which seems a bit hacky to me.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;My vote would probably be for continuing with the current approach (perhaps I&apos;m biased because I don&apos;t want to throw away the work already done &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;).&lt;/p&gt;

&lt;p&gt;There are actually two orthogonal issues related to the coding of this patch.&lt;/p&gt;

&lt;p&gt;1. Do we want to separate out Observers into a separate class, and retain the Peer-&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Follower|Observer&amp;#93;&lt;/span&gt; hierarchy? &lt;br/&gt;
2. How do we implement Observers - as members of a weight-0 quorum or with INFORM packets and some custom logic on the Leader side?&lt;/p&gt;

&lt;p&gt;The main complexity of this patch is due to 1. (Note how the patch size spiked by 50kb when I included the class hierarchy split). The actual logic needed to make Observers work as implemented is fairly simple: on the server side the main changes are in QuorumPeer and Leader.&lt;/p&gt;

&lt;p&gt;I would argue in favour of 1 - I think there is an increased readability with splitting the Follower code out and this gives a natural point to customise the behaviour of Followers or Observers in the future; plus if we should ever decide we want another kind of Peer the class hierarchy is already in place to make it happen more easily. Plus, as I argued above, I think only Observers should have partial subscription ability; this class gives us the right place to put it. &lt;/p&gt;

&lt;p&gt;Given 1, I would then argue for implementing Observers as currently imagined due to the small advantage of losing the extra message, plus the benefits of keeping the implementation separate on the Leader to make it easy to implement subscriptions later. The size of the implementation patch compared to the size of the restructuring patch is small.&lt;/p&gt;

&lt;p&gt;If we decide against 1, then the situation is less clear as implementing 2 with weight-0 quorums would probably lead to a smaller patch. &lt;/p&gt;</comment>
                            <comment id="12733789" author="breed" created="Tue, 21 Jul 2009 20:15:14 +0100"  >&lt;p&gt;i&apos;m very sensitive to the work already done issue! i&apos;ve totally been there.&lt;/p&gt;

&lt;p&gt;the con argument for the increased chatter is actually quite minimal since the COMMIT message is just a few bytes that gets merged into an existing TCP stream.the restriction only weight-0 followers subscribing to a portion of the tree is a bit hacky, but it eliminates the need for a bunch of new code.&lt;/p&gt;

&lt;p&gt;to be honest, there are two things that really concern me:&lt;/p&gt;

&lt;p&gt;1) the amount of new code we have to add if we don&apos;t use weight-0 followers and the the new test cases that we have to write. since observers use a different code path we have to add a lot more tests.&lt;br/&gt;
2) one use of observers is to do graceful change over for ensemble changes. changing from a weight-0 follower to a follower that is a voting participant just means that the follower will start sending ACKs when it gets the proposal that it starts voting. we can do that very fast on the fly with no interruption to the follower. if we try to convert an observer, the new follower must switch from observer to follower and sync up to the leader before it can commit the new ensemble message. this increases the interruption of the change and the likelihood of failure.&lt;/p&gt;

&lt;p&gt;btw, we could setup a phone conference if it would help. (everyone would be invited of course. we have global access numbers.)&lt;/p&gt;</comment>
                            <comment id="12733790" author="breed" created="Tue, 21 Jul 2009 20:16:59 +0100"  >&lt;p&gt;hey i&apos;m looking at the patch, can you comment on the VIEWCHANGE message? does that refer to ensemble membership change or the subscribe to a subtree that was mentioned.&lt;/p&gt;</comment>
                            <comment id="12733818" author="henryr" created="Tue, 21 Jul 2009 21:46:55 +0100"  >&lt;p&gt;&amp;gt; i&apos;m very sensitive to the work already done issue! i&apos;ve totally been there. &lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; As long as we get the right solution, it&apos;s all good.&lt;/p&gt;

&lt;p&gt;The amount of new code is an issue. I think we have to just make a judgement call. Most of the Observer code is shared between Observers and Followers, so I think that existing tests would exercise a lot of the code. I will finish up a tightened version of the patch in the next day or so that I think can be considered for commit (in terms of code quality) and post that, and I will also write something on the wiki page about precisely what has changed so that we have something concrete to discuss. The current patch is really only a proof-of-concept.&lt;/p&gt;

&lt;p&gt;For example: the VIEWCHANGE message was a hangover from the dynamic ensemble change stuff (since removed), and certainly shouldn&apos;t be in the patch. Now I&apos;ve got the hang of git branches, keeping things separate is a lot easier to do...&lt;/p&gt;

&lt;p&gt;I&apos;m up for a conference call to discuss this - I&apos;m also in SF for a week next week, so maybe we can meet in person at last and talk this over &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12733951" author="fpj" created="Wed, 22 Jul 2009 02:54:25 +0100"  >&lt;p&gt;t seems to me that determining that a server is an observer based on its weight, and switching between observer and follower during ensemble changes are separate issues. Suppose that we go with the zero-weight option. Once we read a weight zero, we know that the server is an observer and we have to execute the corresponding code. From Ben&apos;s suggestion, the difference between a follower and an observer can be as simple as an if statement that guards the block that sends acks. In Henry&apos;s patch, there are separate classes for observers and followers.&lt;/p&gt;

&lt;p&gt;It seems that we also have to make sure that during the transition from an old ensemble to a new ensemble we have a quorum available for the new ensemble, perhaps counting new members in, so it could be tricky to undergo this transition correctly if we have to switch from observer to follower. I think that what has to happen is that the update reflecting the view change has to be the first committed operation of the new ensemble. Consequently, an observer has to make sure that it has seen all updates before committing the ensemble update, and be ready to ack and commit the ensemble update once the leader of the new ensemble proposes it.&lt;/p&gt;

&lt;p&gt;Henry, could you sketch out your thoughts on how your modifications will handle ensemble changes? I wonder if it is best to try to reach agreement on this issue first before submitting a patch. &lt;/p&gt;</comment>
                            <comment id="12733990" author="breed" created="Wed, 22 Jul 2009 06:19:49 +0100"  >&lt;p&gt;it would be great to meet when you are here in SF! it turns out that flavio is also here next week. tragically, i will be leaving on vacation tuesday morning, i could meet on monday though. perhaps we could meet somewhere between here and SF for dinner?&lt;/p&gt;</comment>
                            <comment id="12737635" author="henryr" created="Fri, 31 Jul 2009 19:21:02 +0100"  >&lt;p&gt;As discussed in person earlier in the week - here&apos;s the first part of a two part patch for Observers. This patch deals with the refactor which introduces Peer as a supertype of Follower, moves a lot of shared functionality upwards into that class and renames a bunch of Follower* classes to Peer*. Also PeerZooKeeperServer is introduced along the same lines.&lt;/p&gt;

&lt;p&gt;There&apos;s no Observer code nor functionality in this patch - the benefit is that once this is out of the way, Observers are actually a small patch. That said, I had to cherrypick a lot of changes from my commit history to serialise the two changes (refactor-&amp;gt;patch); so it is possible there is a line or two of unnecessary code in here. Let me know if you find any!&lt;/p&gt;
</comment>
                            <comment id="12739074" author="henryr" created="Tue, 4 Aug 2009 19:19:38 +0100"  >&lt;p&gt;Here is both a slightly modified version of the refactor patch, and a patch containing the new code for Observers. I have included some tests now as well. The Observer implementation is simplified from previous patches. &lt;/p&gt;

&lt;p&gt;I have added new methods to QuorumPeer to get at both the entire view of the ensemble, the voting view (containing Followers) and the observing view. &lt;/p&gt;

&lt;p&gt;To use an Observer, in the ensemble config file append :observer to the description for any server you want to be an Observer. So for example write:&lt;/p&gt;

&lt;p&gt;server.3:localhost:2181:3181:observer&lt;/p&gt;

&lt;p&gt;In the Observer&apos;s own config file, add a line with the option&lt;/p&gt;

&lt;p&gt;peerType=observer&lt;/p&gt;

&lt;p&gt;I will probably in the future remove these slightly redundant specifications, but for now you will need both. &lt;/p&gt;

&lt;p&gt;You must apply the patches in order; the refactor patch first. Both patches apply cleanly for me using patch -p0 against a clean checkout of trunk as of tonight (Aug 4th).&lt;/p&gt;
</comment>
                            <comment id="12742532" author="henryr" created="Wed, 12 Aug 2009 20:24:44 +0100"  >&lt;p&gt;Anyone had a chance to try this out yet?&lt;/p&gt;</comment>
                            <comment id="12742550" author="fpj" created="Wed, 12 Aug 2009 21:06:55 +0100"  >&lt;p&gt;Henry, we have been concentrating on the jiras for the 3.2.1 release. We&apos;ll get back to observers as soon as we are done with this release. Is this ok?&lt;/p&gt;</comment>
                            <comment id="12742553" author="henryr" created="Wed, 12 Aug 2009 21:10:00 +0100"  >&lt;p&gt;Of course! That was just a keepalive message &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12755382" author="hammer" created="Tue, 15 Sep 2009 07:30:06 +0100"  >&lt;p&gt;Hey,&lt;/p&gt;

&lt;p&gt;Now that 3.2.1 has gone out, does it make sense to review this patch?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Jeff&lt;/p&gt;</comment>
                            <comment id="12755390" author="mahadev" created="Tue, 15 Sep 2009 07:48:14 +0100"  >&lt;p&gt;jeff, henry,&lt;br/&gt;
  I will probably be taking a look at it sometime this week.... &lt;/p&gt;

&lt;p&gt;thanks&lt;/p&gt;</comment>
                            <comment id="12755490" author="hammer" created="Tue, 15 Sep 2009 14:52:31 +0100"  >&lt;p&gt;Great! Thanks, Mahadev.&lt;/p&gt;</comment>
                            <comment id="12757709" author="mahadev" created="Sun, 20 Sep 2009 04:26:30 +0100"  >&lt;p&gt;henry,&lt;br/&gt;
  I tried applying the refactor patch to the trunk. It fails as it is. I did try mending the patch myself but looks like there has been a lot of refactoring, so Ill leave it up to you. Would you be able to upload a new patch for refactor and the other patch? Sorry about the delay on reviewing this code. I understand the frustration.  Hopefully we can get this done in the next few weeks.... &lt;/p&gt;

&lt;p&gt;thanks&lt;/p&gt;</comment>
                            <comment id="12763752" author="henryr" created="Fri, 9 Oct 2009 00:20:17 +0100"  >&lt;p&gt;I&apos;ve got this patch applying against trunk again. Since there are two big changes here - the refactoring of Followers into Peers, and the additional observer functionality, I&apos;ve created &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-549&quot; title=&quot;Refactor Followers and related classes into a Peer-&amp;gt;Follower hierarchy in preparation for Observers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-549&quot;&gt;&lt;del&gt;ZOOKEEPER-549&lt;/del&gt;&lt;/a&gt; for the refactor and then we can have the two discussions separately. &lt;/p&gt;</comment>
                            <comment id="12763753" author="mahadev" created="Fri, 9 Oct 2009 00:28:32 +0100"  >&lt;p&gt;great... lets work to get this in soon before the codebase changes again... &lt;/p&gt;</comment>
                            <comment id="12766785" author="henryr" created="Sat, 17 Oct 2009 01:20:00 +0100"  >&lt;p&gt;Just to update: I&apos;m putting the patch through some tests and micro-benchmarks here and hope to offer a new patch very soon. The results are so far encouraging:&lt;/p&gt;

&lt;p&gt;Created 10000 nodes in 17.1312019825 seconds, at 583.730202365 requests/second (without Observers)&lt;br/&gt;
Created 10000 nodes in 9.63481593132 seconds, at 1037.90254752 requests/second (with Observers)&lt;/p&gt;

&lt;p&gt;This is a 7-node ensemble, in the first instance it&apos;s homogeneously Followers, in the second 4 Observers and 3 Followers. As expected, performance is seriously better than the homogeneous case. &lt;/p&gt;
</comment>
                            <comment id="12766792" author="mahadev" created="Sat, 17 Oct 2009 01:29:59 +0100"  >&lt;p&gt;henry, good to see this. one important benchmark wuld be to see how much does the throughput vary with increasing number of observers. Example, we can start with an ensemble of 3, with no observers (this performance should be comparable to the code without Observers) and then add one observer at a time and see how much the throughput varies!&lt;/p&gt;</comment>
                            <comment id="12766793" author="mahadev" created="Sat, 17 Oct 2009 01:31:08 +0100"  >&lt;p&gt;just to make it more clear, you can start with an ensemble of 3 servers, then increase it to 4 (with one observer), then 5 (with 2 observers), 6 (with 3 observers) .... &lt;/p&gt;</comment>
                            <comment id="12767245" author="fpj" created="Mon, 19 Oct 2009 09:35:18 +0100"  >&lt;p&gt;Henry, are these throughput values for synchronous or asynchronous operations? Throughput sounds pretty low in any case. &lt;/p&gt;

&lt;p&gt;Also, from your description, it sounds like you&apos;re testing only with write operations (create). I would expect write throughput to be independent on the number of observers (but dependent upon the number of followers). Read throughput should increase with the number of observers.&lt;/p&gt;</comment>
                            <comment id="12767519" author="henryr" created="Mon, 19 Oct 2009 21:27:13 +0100"  >&lt;p&gt;I have had to change the Leader Election code just a little bit to support Observers, and I wanted to run the decisions past everyone.&lt;/p&gt;

&lt;p&gt;Observers don&apos;t participate in Leader Elections in the sense that they don&apos;t cast votes. However, they need to learn the results. The way I do this at the moment is to force Observers always to use LeaderElection as their election algorithm (and disable vote casting for them). So essentially they simply query the rest of the ensemble for a quorum of votes. This works well, and has the advantage of not needing to teach all LE algorithms about observers. The only change I make to the rest of the code is to always start a responder thread, no matter what the prevailing election type on the follower, so that they&apos;ll always respond to the queries from observers.&lt;/p&gt;

&lt;p&gt;The correctness of this relies on the fact that a leader must always be supported by a quorum, no matter what the protocol used to elect the leader in the first place is. So it&apos;s always correct to believe that a leader that is supported by a quorum is actually the leader.&lt;/p&gt;

&lt;p&gt;Does this sound right? Are there any gotchas about always running the responder thread?&lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;</comment>
                            <comment id="12767539" author="henryr" created="Mon, 19 Oct 2009 21:57:35 +0100"  >&lt;p&gt;Flavio - &lt;/p&gt;

&lt;p&gt;Throughput is low - but we should be looking at the relative numbers, not the absolute values (I get similar numbers running the current trunk in the same configuration). One reason throughput might be arbitrarily low is because I&apos;m running these benchmarks against a single machine, so might be hitting disk bottlenecks due to contention for the logs. &lt;/p&gt;

&lt;p&gt;These numbers were for synchronous create operations, issued from a single client. So read throughput would at best stay constant since the client can&apos;t take advantage of the parallelism offered by multiple observers. I&apos;ve also benchmarked reads and mixed workloads (the most interesting, typically). Reads, as expected, are fairly constant in throughput. Mixed workloads are better in heterogeneous clusters, again as you would expect. &lt;/p&gt;

&lt;p&gt;These are just indicative numbers to ensure that we&apos;re on the right track &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Mahadev - I ran the experiment you suggested, I&apos;ll attach the chart results below. &lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;</comment>
                            <comment id="12767752" author="fpj" created="Tue, 20 Oct 2009 09:45:12 +0100"  >&lt;p&gt;Ok, your chart shows that write throughput is roughly constant with the number of followers as you increase the number of learners of the system. That matches my expectation!&lt;/p&gt;

&lt;p&gt;In general I like your proposal for LE and observers, but I think there is an issue there. One reason for having QuorumCnxManager is that in some cases we needed all communication to be through TCP. If observers use always LeaderElection, then I believe they will be using UDP, and we will be violating the TCP constraint. I don&apos;t see a solution other than modifying one or more of the LE implementations, though. The simplest solution I can see is to modify the code to probe followers using a TCP channel.  &lt;/p&gt;</comment>
                            <comment id="12768510" author="henryr" created="Thu, 22 Oct 2009 00:13:37 +0100"  >&lt;p&gt;Ok, that&apos;s what I&apos;m doing - making a TCPResponderThread and a UDPResponderThread, and have a configuration option to choose between them (defaulting to UDP). &lt;/p&gt;
</comment>
                            <comment id="12772199" author="henryr" created="Sat, 31 Oct 2009 01:03:59 +0000"  >&lt;p&gt;New patch - now that the refactor has gone in, Hudson should be able to give this the once over.&lt;/p&gt;

&lt;p&gt;Findbugs is 0 for me, patch applies against trunk and tests pass. &lt;/p&gt;

&lt;p&gt;The only restriction with this patch is that Observers only work with the vanilla LeaderElection protocol. This is because they need a responder thread to run so that they can query votes from the ensemble, and this doesn&apos;t happen if electionAlg&amp;gt;0. I have a patch nearly done to start the responderThread for every leader election algorithm, but it&apos;s not as simple as it might seem: we need a TCP responder thread, a new port to run it on and a possible race condition with LETest sorted out first. I&apos;ve done most of this, but adding those to this patch would just overcomplicate things. An exception will be thrown if you try to start a cluster w/o electionAlg=0 (and there&apos;s a test for this). &lt;/p&gt;

&lt;p&gt;That aside, I&apos;d be grateful for comments and feedback, as I think this patch is very nearly good to go. &lt;/p&gt;</comment>
                            <comment id="12772213" author="hadoopqa" created="Sat, 31 Oct 2009 02:42:43 +0000"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12423742/ZOOKEEPER-368.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12423742/ZOOKEEPER-368.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 831486.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 13 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/42/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/42/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/42/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/42/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/42/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/42/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12775947" author="fpj" created="Tue, 10 Nov 2009 17:13:58 +0000"  >&lt;p&gt;Henry, good job so far. Please bear with me for a little longer:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Could you please update the changes to the test files? Due to a few recently committed patches they don&apos;t apply to trunk any longer;&lt;/li&gt;
	&lt;li&gt;Could you make sure to remove all unnecessary LOG statements? Some of them look like messages you used for your own debugging (they start with HNR) and others are commented out. I think I&apos;ve seen a TODO comment as well;&lt;/li&gt;
	&lt;li&gt;It sounds like this feature works with both majority and hierarchical quorums. Is it correct? Can I have observers with hierarchical quorums?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This might be a little late for this patch now, but for future patches that introduce features like this, it is probably a good idea to have a brief design document explaining changes to the protocol and to ensemble configuration.  &lt;/p&gt;</comment>
                            <comment id="12775956" author="phunt" created="Tue, 10 Nov 2009 17:44:55 +0000"  >&lt;p&gt;Henry, I don&apos;t see any docs for this in src/docs. I suggest that you start a new document (new xml file) for this feature, it should explain why/how(torun) at the very&lt;br/&gt;
least &amp;#8211; so that potential users can come up to speed.&lt;/p&gt;

&lt;p&gt;Flavio, could you also review the comments on this JIRA as part of your commit review? We should make sure that either all of the issues are addressed,&lt;br/&gt;
or at the very least new JIRAs are created (Henry could you do this?) for the pending items so that we don&apos;t lose the comments/concerns/issues that have been identified&lt;br/&gt;
previously (this is a major new/visible feature so I think it warrants the extra time/effort).&lt;/p&gt;</comment>
                            <comment id="12776004" author="henryr" created="Tue, 10 Nov 2009 18:50:52 +0000"  >&lt;p&gt;Hi Falvio / Patrick - &lt;/p&gt;

&lt;p&gt;Thanks for your comments! &lt;/p&gt;

&lt;p&gt;Design document - there&apos;s a brief writeup at &lt;a href=&quot;http://wiki.apache.org/hadoop/ZooKeeper/Observers&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/ZooKeeper/Observers&lt;/a&gt; which very broadly covers the design. I will update it when I get a moment to do so. &lt;/p&gt;

&lt;p&gt;User documentation - yes, will do, already on my to do list. There is a section in the above wiki page that will be a good start. &lt;/p&gt;

&lt;p&gt;Quorums - yes, it should work with all mechanisms. The only caveat is that it only works with the simple LeaderElection protocol, which presumes a majority quorum approach (there are lines where votes &amp;gt; quorum.size() / 2 is hardcoded rather than using the verifier - I think this is the source of at least one of the to-dos). &lt;/p&gt;

&lt;p&gt;Debug messages: ugh, sorry about that. Will update the patch to build against trunk shortly and remove those messages. &lt;/p&gt;</comment>
                            <comment id="12776233" author="henryr" created="Wed, 11 Nov 2009 01:55:16 +0000"  >&lt;p&gt;I just put up a set of notes on the patch on the wiki here: &lt;a href=&quot;http://wiki.apache.org/hadoop/ZooKeeper/Observers/ReviewGuide&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/ZooKeeper/Observers/ReviewGuide&lt;/a&gt; to help make the review a little less painful - although non-comprehensive, it should help explain most of the major code changes. &lt;/p&gt;

&lt;p&gt;An updated patch will follow very shortly. &lt;/p&gt;
</comment>
                            <comment id="12776240" author="henryr" created="Wed, 11 Nov 2009 02:09:24 +0000"  >&lt;p&gt;Updated patch - removed some erroneous debugging logs, made a slight improvement to one test. &lt;/p&gt;

&lt;p&gt;Please see review guide at &lt;a href=&quot;http://wiki.apache.org/hadoop/ZooKeeper/Observers/ReviewGuide&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/ZooKeeper/Observers/ReviewGuide&lt;/a&gt; - comments on any further tests required would be particularly welcome. &lt;/p&gt;</comment>
                            <comment id="12776482" author="fpj" created="Wed, 11 Nov 2009 15:15:36 +0000"  >&lt;p&gt;Thanks for the updated patch and the review guide, Henry. The review guide is quite handy. &lt;/p&gt;

&lt;p&gt;To me, we need the following to complete this patch:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Make it work with FLE, which is the default leader election;&lt;/li&gt;
	&lt;li&gt;Get rid of all hardcoded quorum.size() / 2 and replace it with containsQuorum();&lt;/li&gt;
	&lt;li&gt;Include a test with hierarchical quorums and observers;&lt;/li&gt;
	&lt;li&gt;Prepare a forrest document for the feature, describing what it does, how to configure ZooKeeper to use it, and perhaps one or two cases in which it would be useful to use observers.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12776524" author="breed" created="Wed, 11 Nov 2009 17:26:03 +0000"  >&lt;p&gt;nice reviewer guide! the patch looks really good. for me it&apos;s good to go once you have address the 4 things that flavio raised. (the forest doc is a pain, if you have troubles with it i&apos;ll help with the formatting if you give me the content.)&lt;/p&gt;

&lt;p&gt;for historical purposes do you have a copy of that summary that was produced of the differences in operation and motivation between zero-weight followers and observers? it&apos;s been a while and i can&apos;t remember how it was published. it would be good to put a comment about it here in this issue.&lt;/p&gt;</comment>
                            <comment id="12776566" author="henryr" created="Wed, 11 Nov 2009 18:38:36 +0000"  >&lt;p&gt;Flavio, Ben - thanks for the comments! Feels like we&apos;re getting close with this one.&lt;/p&gt;

&lt;p&gt;To Flavio&apos;s specific points:&lt;/p&gt;

&lt;p&gt;1. In order to make this work with FLE, the easiest thing is to have a ResponderThread be running all the time. However, a ResponderThread currently only runs when electionAlg=0. To make the responder thread run for all electionAlg types is easy, but this introduces a UDP dependency which some installations do not want. So we need to make ResponderThread be both UDP and TCP compliant. This is easy enough (I have written this code), but it also makes configuration yet more complicated because there is yet another port that needs specifying (there is some port re-use in the code currently that&apos;s a bit sketchy I think, and that doesn&apos;t work in all cases, we need another dedicated port). We will have to discuss whether we want to require strings of the form server.id:address:port:port:port:learnertype or if it&apos;s time to break out the per-server configuration into a more structured format. At this point, I feel like this is complicated enough, and orthogonal to Observers, to warrant its own JIRA - it would make the Observers patch too complicated. Also, this feature requires getting the race condition bug fixed. &lt;/p&gt;

&lt;p&gt;I&apos;ve created &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-578&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-578&lt;/a&gt; for this issue.&lt;/p&gt;

&lt;p&gt;So we can block the Observers patch on this feature, or we can get a reduced Observers patch in (and prevent another cycle of refactoring when trunk gets updated and the patch no longer applies). Either is good; but I&apos;m probably in favour of getting the patch in now and updating once the ResponderThread JIRA gets closed. The change to re-enable Observers for all election types is pretty trivial.&lt;/p&gt;

&lt;p&gt;2. I think this is a great idea - I&apos;d point out that the hardcoded quorum.size() / 2 usages predate the Observers patch! For example, see termPredicate(..) in AuthFastLeaderElection.java and lookForLeader in LeaderElection.java. This should therefore be a separate JIRA (I&apos;m trying to avoid having several issues fixed by this patch).&lt;/p&gt;

&lt;p&gt;I&apos;ve created &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-577&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-577&lt;/a&gt; for this issue. &lt;/p&gt;

&lt;p&gt;3. Yes, will do.&lt;/p&gt;

&lt;p&gt;4. Yep, will do.&lt;/p&gt;

&lt;p&gt;Ben - I didn&apos;t take great notes at that meeting (jetlag!), but my recollection is: we were trying to reconcile having Observers change roles and join the ensemble as voting members with the complications of doing so. Zero-weight followers are a great way to do that. However, we decided that actually that might not be a feature we wanted. At that point, the optimisations you can make with Observers, particularly for WANs such as batching and the single-message INFORM protocol, means it makes sense to logically separate out Observers in the code. We could have special-cased handling of 0-weight clients, but we felt that since this would involve a step-change in the behaviour of peers as the weight went from 0 to 0+ it would be a bit counter intuitive. &lt;/p&gt;
</comment>
                            <comment id="12776569" author="hammer" created="Wed, 11 Nov 2009 18:49:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;So we can block the Observers patch on this feature, or we can get a reduced Observers patch in (and prevent another cycle of refactoring when trunk gets updated and the patch no longer applies). Either is good; but I&apos;m probably in favour of getting the patch in now and updating once the ResponderThread JIRA gets closed. The change to re-enable Observers for all election types is pretty trivial.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with Henry. Let&apos;s get this patch in and handle the unusual case of TCP-only FLE in a separate patch for 578.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This should therefore be a separate JIRA (I&apos;m trying to avoid having several issues fixed by this patch).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Also strongly agree. Get the patch in and handle the hardcoded code removal this patch turned up in 577.&lt;/p&gt;</comment>
                            <comment id="12776654" author="mahadev" created="Wed, 11 Nov 2009 21:01:54 +0000"  >&lt;p&gt;henry,&lt;br/&gt;
thanks for the patch.&lt;br/&gt;
the patch looks good.&lt;/p&gt;

&lt;p&gt;some comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;looking at the patch it seems like it would work with servers prior to including this patch. Did you try some testing with current servers (killing one at a time and brining them up  in a round robin fashion) just to make sure it works all fine with the current servers (not including the patch)?&lt;/li&gt;
	&lt;li&gt;what happens if a server configured as follower is suddenly brought down and is made an observer and the other way around as well? Just checking to see if we have these scenarios covered because such mistakes are easy to make when setting up servers&lt;/li&gt;
	&lt;li&gt;also it would be good to have more javadocs in the code. Its good to have javadocs just be explaining whats going on in each method (though we lack that kind of documentation in the code but I do hope we can get more javadoc)&lt;/li&gt;
	&lt;li&gt;I think its fine to do FLE in another jira as long as it gets done. It would not be a useful feature if it does not run with FLE. I would have gone with making it work with FLE first and then trying to see if it works with LE or not.&lt;/li&gt;
	&lt;li&gt;removing the quorums.getsize()/2 with containsQuorum() can surely be done in another jira.&lt;/li&gt;
	&lt;li&gt;also performance benchmarking the code with this patch and without this patch so that we make sure that this patch doesnt degrade the performance in any way will be good to have&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12776690" author="fpj" created="Wed, 11 Nov 2009 22:22:13 +0000"  >&lt;ol&gt;
	&lt;li&gt;I think it is quite important to have it working with FLE because FLE is the default leader election currently. My preference is to have it fixed before we get this patch in because it is not an unusual case. I&apos;m happy to work with Henry on getting this fixed, btw;&lt;/li&gt;
	&lt;li&gt;I didn&apos;t realize that the majority checks were the ones of the leader election implementations. This is pending at least for AFLE because AFLE does not use server identifiers, and there is a jira open to fix this issue (&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-372&quot; title=&quot;Use ZooKeeper server identifier with AuthFastLeaderElection &quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-372&quot;&gt;ZOOKEEPER-372&lt;/a&gt;). Fixing this hasn&apos;t been a priority because we haven&apos;t been able to decide whether we should support all implementations of leader election or not. We have been trying to keep FLE in good shape, though. To me, it is ok to postpone these changes if the checks are only on the LE and AFLE.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12776774" author="hammer" created="Thu, 12 Nov 2009 00:57:06 +0000"  >&lt;p&gt;Flavio,&lt;/p&gt;

&lt;p&gt;This patch was submitted five months ago. Blocking its submission to trunk, which is not intended to be a stable release, so that another bug can be fixed seems imprudent. I hope you&apos;ll consider pushing the patch through and fixing the FLE issue separately. Mahadev seems to agree with this philosophy. Henry doesn&apos;t work full time on Zookeeper and we&apos;d really like to get this JIRA in so that work can be done in smaller chunks moving forward.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Jeff&lt;/p&gt;</comment>
                            <comment id="12776840" author="breed" created="Thu, 12 Nov 2009 04:54:01 +0000"  >&lt;p&gt;jeff, i agree that we shouldn&apos;t hold a patch to fix a bug somewhere else, but we also generally try to keep our trunk correct, so generally we want to see doc, test, and correct behavior before committing especially with something that touches the core. having said that i think the missing doc, functionality, and testing is confined to the observer function, so i think we should commit it and fix the rest of the observer code as separate patches to avoid having to refresh the patch.&lt;/p&gt;</comment>
                            <comment id="12777047" author="fpj" created="Thu, 12 Nov 2009 16:33:00 +0000"  >&lt;p&gt;Jeff, I surely appreciate your support. The discussion about leader election only started less than a month ago. The first post I can see about it is from Oct. 19, so we haven&apos;t been discussing or ignoring it for the past 5 months. I must also say, as the reporter of this feature, that I&apos;m very interested in having it in, but please understand that this patch touches core functionality and I&apos;d like to make sure I&apos;m comfortable with all changes. Most changes are fine for me, and my only point of contention has been on leader election. My understanding from the latest post of Henry is that he will add points 3 and 4 to this patch. If this is correct, then let&apos;s focus on the leader election issues.&lt;/p&gt;

&lt;p&gt;We have agreed to postpone changes to the hardcoded majority checks in separate jiras. In fact, there are at least two jiras open about it. The second issue is using FLE with Observers. I&apos;m under the impression that it wouldn&apos;t be so difficult to make such changes, and I think it would make this patch stronger. However, I&apos;m happy to commit it without the FLE feature implemented, and in fact I&apos;d like to work on it. If you people don&apos;t mind, I&apos;d like to be assigned to &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-578&quot; title=&quot;ResponderThread should be able to use TCP or UDP&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-578&quot;&gt;&lt;del&gt;ZOOKEEPER-578&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make sure we are on the same page, I&apos;ll review it again once Henry uploads a new patch with points 3 and 4 implemented (it must compile and pass tests, of course). Is this reasonable?&lt;/p&gt;


</comment>
                            <comment id="12777091" author="phunt" created="Thu, 12 Nov 2009 18:06:20 +0000"  >&lt;p&gt;Last night I was thinking about this, &quot;368 - why the disconnect?&quot; and I believe I have figured out the underlying issue. JIRAs are primarily problem statements and resolutions (patches for the most part). In this case the solution doesn&apos;t fit the problem statement &quot;subject: Observers&quot;. This is not observers, really it&apos;s more like &quot;phase 1 of Observers - code changes and tests, limited functionality (UDP LE only)&quot; with additional JIRAs to address subsequent to this patch going in.  I know when I reviewed this patch, and if you look at my most recent comments, this is the mindset I had - &quot;this is observers&quot;, but really that&apos;s not Henry&apos;s intent. That&apos;s fine from my perspective, iterative development is great, improve things but don&apos;t break existing functionality, but the JIRA description here (esp subject) doesn&apos;t fit and that&apos;s throwing people. Creating additional JIRAs would also make this more clear (&quot;obs phase 2 adding ...&quot;, &quot;phase 3 finalizing observers, code complete&quot; &amp;#8211; whatever). Changing the subject on this JIRA would make this more clear.&lt;/p&gt;

&lt;p&gt;Ben had a good summary of next steps so I won&apos;t go through that. Flavio and Henry seem to have a plan in place to execute. So lets wrap this up boys and girls. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Finally, I want to point out that if a patch takes 5 months or 5 years, if it&apos;s not ready to go in it&apos;s not ready, regardless of outside pressure. It&apos;s the contributor&apos;s responsibility to work with the committers to get a patch committed. It&apos;s the committers responsibility to work with the contributor, review the patch, provide useful feedback and try to get the issues resolved with limited muss/fuss.&lt;/p&gt;

&lt;p&gt;Henry, you&apos;ve been doing a great job on this (and support of ZK in general). I know both you and Flavio (and the rest of the committers) have been spending a lot of time on this - thanks all! So like I said, let&apos;s wrap this up and move on.&lt;/p&gt;

</comment>
                            <comment id="12777300" author="henryr" created="Fri, 13 Nov 2009 00:33:31 +0000"  >&lt;p&gt;Updating description as per suggestions.&lt;/p&gt;</comment>
                            <comment id="12778217" author="henryr" created="Mon, 16 Nov 2009 05:41:25 +0000"  >&lt;p&gt;This patch includes:&lt;/p&gt;

&lt;p&gt;1. Documentation update&lt;br/&gt;
2. Some new tests, including an observers version of HierarchicalQuorumTest&lt;br/&gt;
3. More javadocs, especially on a couple of public methods. &lt;/p&gt;

&lt;p&gt;Patch applies cleanly against trunk, findbugs is 0 for me, all tests pass locally. &lt;/p&gt;

&lt;p&gt;Question: if the docs get updated, the built versions do too obviously. Should the built docs be included with diffs, or will that all shake out in Hudson? &lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;</comment>
                            <comment id="12778419" author="henryr" created="Mon, 16 Nov 2009 18:00:23 +0000"  >&lt;p&gt;Docs update: added explicit mention of need to set electionAlg=0. &lt;/p&gt;</comment>
                            <comment id="12778447" author="mahadev" created="Mon, 16 Nov 2009 18:48:11 +0000"  >&lt;p&gt;henry,&lt;br/&gt;
 you dont have to upload the diff the built docs (pdf/html). THe person committing the patch will run ant docs and commit the updated docs in src/docs.&lt;/p&gt;
</comment>
                            <comment id="12778612" author="hadoopqa" created="Mon, 16 Nov 2009 22:37:34 +0000"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12425104/ZOOKEEPER-368.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12425104/ZOOKEEPER-368.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 835618.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 25 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/64/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/64/testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/64/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/64/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/64/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/64/console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12778704" author="mahadev" created="Tue, 17 Nov 2009 03:23:53 +0000"  >&lt;p&gt;henry, &lt;br/&gt;
  did you get a chance to test observers with old (meaning without hte patch) zookeeper servers? repeating my comments here:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;looking at the patch it seems like it would work with servers prior to including this patch. Did you try some testing with current servers (killing one at a time and brining them up in a round robin fashion) just to make sure it works all fine with the current servers (not including the patch)?&lt;/li&gt;
	&lt;li&gt;what happens if a server configured as follower is suddenly brought down and is made an observer and the other way around as well? Just checking to see if we have these scenarios covered because such mistakes are easy to make when setting up servers&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12778970" author="breed" created="Tue, 17 Nov 2009 16:24:58 +0000"  >&lt;p&gt;+1 this patch looks ready to commit to me. i do have a question about the configuration, but i don&apos;t have a good answer for it so i opened &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-581&quot; title=&quot;peerType in configuration file is redundant&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-581&quot;&gt;ZOOKEEPER-581&lt;/a&gt;. the behavior in this patch is not wrong, so it shouldn&apos;t block applying it.&lt;/p&gt;</comment>
                            <comment id="12779176" author="fpj" created="Tue, 17 Nov 2009 22:29:48 +0000"  >&lt;p&gt;Henry, thanks for all the changes, a few quick comments:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;You&apos;ve added a TODO to leader.java, which was a good catch. I don&apos;t want to make you generate another patch just to fix the majority check on that message, so if prefer not to do it, could you make sure there is a jira to fix it?&lt;/li&gt;
	&lt;li&gt;I didn&apos;t quite understand why you moved all that code between QuorumPeerMainTest and QuorumPeerTestBase. Would you mind just commenting quickly?&lt;/li&gt;
	&lt;li&gt;Mahadev gave some good suggestions for tests we should perform before committing. Would you mind running those tests?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12779178" author="henryr" created="Tue, 17 Nov 2009 22:36:16 +0000"  >&lt;p&gt;Thanks Ben! I agree that 581 is a genuine issue, I&apos;ll take it up over on its JIRA. &lt;/p&gt;

&lt;p&gt;Mahadev - &lt;/p&gt;

&lt;p&gt;An Observer won&apos;t be able to connect to a pre-Observer ensemble because it doesn&apos;t send FOLLOWERINFO (rather, it sends OBSERVERINFO). The effect is that it retries, and is rejected. I have just verified this. &lt;/p&gt;

&lt;p&gt;If a server is brought down and reconnects as an Observer, it will be able to connect to the ensemble without problem. The Leader does not validate the type of the Learner that connects so it happily accepts the OBSERVERINFO handshake and carries on. It is possible that, if the process was restarted very quickly and the server was originally the Leader, that there might be some confusion when the Observer refuses to issue proposals. My belief is that the old Leader would be identified as failed. &lt;/p&gt;

&lt;p&gt;This should probably be considered user error? Users must not try and start the cluster with different configurations at each node. I can think of similar &apos;bugs&apos; in the current code where different servers have different configurations and therefore acknowledge different quorum groups, meaning that there wouldn&apos;t be consensus on who is the Leader, for example. &lt;/p&gt;</comment>
                            <comment id="12779184" author="henryr" created="Tue, 17 Nov 2009 22:50:04 +0000"  >&lt;p&gt;Flavio - &lt;/p&gt;

&lt;p&gt;Thanks for your comments!&lt;/p&gt;

&lt;p&gt;1. Will do. &lt;br/&gt;
2. QuorumPeerTestBase is extended by QuorumPeerMainTest and ObserverTest; it seemed to make sense to introduce a base class rather than have ObserverTest extend QuorumPeerMainTest and then have to manually disable the tests that I didn&apos;t want to run. Also, it makes the test classes themselves shorter and easier to reason about, &lt;br/&gt;
3. See above.&lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;</comment>
                            <comment id="12779186" author="fpj" created="Tue, 17 Nov 2009 22:55:00 +0000"  >&lt;p&gt;I have just made sure that the docs compile, and after Henry&apos;s response, I don&apos;t have further comments. + 1, good job, Henry!&lt;/p&gt;

</comment>
                            <comment id="12779194" author="mahadev" created="Tue, 17 Nov 2009 23:14:53 +0000"  >&lt;p&gt;thanks henry for the comments and testing! Thanks for all the hard work and responses. I have one more question. Sorry I couldnt find the answer to that, so wanted to ask again. I know looking at the code that this shouldnt be a problem but I think it is worth running a small test for it.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the test is to have 2 servers (s1, S2) from the old code and 1 server (s3) with the new code and verify that s1/s2 or s3 are all capable of becoming the leader and everything works fine with neone of them becoming a leader. This could be done by bringing up s1, s2 and s3 at the same time and killing them one at a time and bringing the other up. SOmething like testing a rolling upgrade wherein one server is the new code and the other servers are old code. This is not testing observers but just testing (though I think it should work fine looking at the code) that the older versions will work with the new version irrespective of which of them is the leader.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12779205" author="henryr" created="Tue, 17 Nov 2009 23:40:36 +0000"  >&lt;p&gt;Mahadev - &lt;/p&gt;

&lt;p&gt;Ah, I understand now. Yes, I just ran that test. Everything works as I expected it to - both when two servers are from the old code and then when two servers are from the new. They can be swapped out for each other will no ill effects, AFAIK.  &lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;</comment>
                            <comment id="12779209" author="mahadev" created="Tue, 17 Nov 2009 23:47:12 +0000"  >&lt;p&gt;thats great .... ill commit the patch  tonight! &lt;/p&gt;</comment>
                            <comment id="12779600" author="mahadev" created="Wed, 18 Nov 2009 19:08:19 +0000"  >&lt;p&gt;I just committed this. thanks for all the hard work and persistence henry.&lt;/p&gt;</comment>
                            <comment id="12780516" author="hudson" created="Fri, 20 Nov 2009 11:02:28 +0000"  >&lt;p&gt;Integrated in ZooKeeper-trunk #545 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/545/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/545/&lt;/a&gt;)&lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12440955">ZOOKEEPER-581</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12401266">ZOOKEEPER-107</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12425104" name="ZOOKEEPER-368.patch" size="107146" author="henryr" created="Mon, 16 Nov 2009 18:00:23 +0000"/>
                            <attachment id="12425041" name="ZOOKEEPER-368.patch" size="105909" author="henryr" created="Mon, 16 Nov 2009 05:41:25 +0000"/>
                            <attachment id="12424553" name="ZOOKEEPER-368.patch" size="75861" author="henryr" created="Wed, 11 Nov 2009 02:09:24 +0000"/>
                            <attachment id="12423742" name="ZOOKEEPER-368.patch" size="76077" author="henryr" created="Sat, 31 Oct 2009 01:03:59 +0000"/>
                            <attachment id="12413660" name="ZOOKEEPER-368.patch" size="80805" author="henryr" created="Thu, 16 Jul 2009 09:24:23 +0100"/>
                            <attachment id="12413599" name="ZOOKEEPER-368.patch" size="79924" author="henryr" created="Wed, 15 Jul 2009 22:03:33 +0100"/>
                            <attachment id="12413410" name="ZOOKEEPER-368.patch" size="74179" author="fpj" created="Tue, 14 Jul 2009 11:22:23 +0100"/>
                            <attachment id="12413302" name="ZOOKEEPER-368.patch" size="79927" author="henryr" created="Mon, 13 Jul 2009 15:48:01 +0100"/>
                            <attachment id="12412273" name="ZOOKEEPER-368.patch" size="24943" author="fpj" created="Wed, 1 Jul 2009 14:33:32 +0100"/>
                            <attachment id="12411817" name="ZOOKEEPER-368.patch" size="25500" author="henryr" created="Thu, 25 Jun 2009 15:16:46 +0100"/>
                            <attachment id="12415505" name="obs-refactor.patch" size="102081" author="henryr" created="Tue, 4 Aug 2009 19:19:38 +0100"/>
                            <attachment id="12415139" name="observer-refactor.patch" size="102409" author="henryr" created="Fri, 31 Jul 2009 19:21:02 +0100"/>
                            <attachment id="12422610" name="observers sync benchmark.png" size="15250" author="henryr" created="Mon, 19 Oct 2009 21:58:09 +0100"/>
                            <attachment id="12415506" name="observers.patch" size="59539" author="henryr" created="Tue, 4 Aug 2009 19:19:38 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 25 Jun 2009 14:16:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>47868</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxzy1j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33499</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Observers functionality in zookeeper. please read docs/zookeeperObservers.pdf/.html for more information.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>