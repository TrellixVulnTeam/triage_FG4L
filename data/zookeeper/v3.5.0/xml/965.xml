<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:48:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/ZOOKEEPER-965/ZOOKEEPER-965.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[ZOOKEEPER-965] Need a multi-update command to allow multiple znodes to be updated safely</title>
                <link>https://issues.apache.org/jira/browse/ZOOKEEPER-965</link>
                <project id="12310801" key="ZOOKEEPER">ZooKeeper</project>
                    <description>&lt;p&gt;The basic idea is to have a single method called &quot;multi&quot; that will accept a list of create, delete, update or check objects each of which has a desired version or file state in the case of create.  If all of the version and existence constraints can be satisfied, then all updates will be done atomically.&lt;/p&gt;

&lt;p&gt;Two API styles have been suggested.  One has a list as above and the other style has a &quot;Transaction&quot; that allows builder-like methods to build a set of updates and a commit method to finalize the transaction.  This can trivially be reduced to the first kind of API so the list based API style should be considered the primitive and the builder style should be implemented as syntactic sugar.&lt;/p&gt;

&lt;p&gt;The total size of all the data in all updates and creates in a single transaction should be limited to 1MB.&lt;/p&gt;

&lt;p&gt;Implementation-wise this capability can be done using standard ZK internals.  The changes include:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;update to ZK clients to all the new call&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;additional wire level request&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;on the server, in the code that converts transactions to idempotent form, the code should be slightly extended to convert a list of operations to idempotent form.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;on the client, a down-rev server that rejects the multi-update should be detected gracefully and an informative exception should be thrown.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To facilitate shared development, I have established a github repository at &lt;a href=&quot;https://github.com/tdunning/zookeeper&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/zookeeper&lt;/a&gt;  and am happy to extend committer status to anyone who agrees to donate their code back to Apache.  The final patch will be attached to this bug as normal.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12494148">ZOOKEEPER-965</key>
            <summary>Need a multi-update command to allow multiple znodes to be updated safely</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tdunning">Ted Dunning</assignee>
                                    <reporter username="tdunning">Ted Dunning</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Dec 2010 00:18:46 +0000</created>
                <updated>Wed, 23 Nov 2011 19:22:26 +0000</updated>
                            <resolved>Thu, 30 Jun 2011 23:54:23 +0100</resolved>
                                    <version>3.3.3</version>
                                    <fixVersion>3.4.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                                                            <comments>
                            <comment id="12975405" author="tdunning" created="Tue, 28 Dec 2010 02:38:43 +0000"  >
&lt;p&gt;I have committed a minimal set of client side changes to the github repo mentioned in the description.&lt;/p&gt;

&lt;p&gt;This includes:&lt;/p&gt;

&lt;p&gt;jute changes to encode a few new things&lt;/p&gt;

&lt;p&gt;a Record class that encodes multiple transactions&lt;/p&gt;

&lt;p&gt;an Op class and sub-classes that encode the necessary operations&lt;/p&gt;

&lt;p&gt;a new multi() method on Zookeeper that send the request to the server (which will still fail to respond).&lt;/p&gt;

&lt;p&gt;Reviews, comments and updates are welcome!&lt;/p&gt;</comment>
                            <comment id="12975411" author="thkoch" created="Tue, 28 Dec 2010 04:18:43 +0000"  >&lt;p&gt;I think it would help if we&apos;d have the API proposed in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-911&quot; title=&quot;move operations from methods to individual classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-911&quot;&gt;ZOOKEEPER-911&lt;/a&gt;. So you would have operation objects for the user which could be added to a multi-transaction&lt;/p&gt;</comment>
                            <comment id="12975451" author="thkoch" created="Tue, 28 Dec 2010 08:57:16 +0000"  >&lt;p&gt;Continuing a short conversation from &lt;a href=&quot;https://github.com/tdunning/zookeeper/commit/1b1cbff2e38bc04b53174381b485304c87d5f743&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/zookeeper/commit/1b1cbff2e38bc04b53174381b485304c87d5f743&lt;/a&gt; here.&lt;/p&gt;

&lt;p&gt;We could introduce operation classes for all operations, including getChildren, getData and exists with &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-911&quot; title=&quot;move operations from methods to individual classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-911&quot;&gt;ZOOKEEPER-911&lt;/a&gt; and use these operation classes instead of the Op classes introduced by Ted. The MultiTransaction class would of course only accept write operations (Create, setData, Delete). This could be enforced either manually or with an interface &quot;WriteOperation&quot;.&lt;/p&gt;

&lt;p&gt;Having an interface &quot;Operation&quot; doesn&apos;t mean you couldn&apos;t have an abstract &quot;BaseOperation&quot; which could implement interface and be a base for the other operations to extend. I also don&apos;t like to have interfaces for everything. But making Operation an interface could make testing a lot easier.&lt;/p&gt;

&lt;p&gt;Regarding the naming Op vs. Operation: We have more then 640k of memory nowadays and screens show more then 80 characters in a line. So we gained the possibility to write readable code. If you talk about it, would you say &quot;Op&quot; or &quot;Operation&quot;?  So to avoid confusion it makes sense to write the class the same as you&apos;d call it when speaking. Even with modern IDEs there may be cases when one wants to search for names. &quot;Op&quot; could also be in &quot;Option&quot;, &quot;Operator&quot;, &quot;Open&quot;, .&lt;/p&gt;

&lt;p&gt;If you don&apos;t mind, I really loved reading &quot;Clean Code&quot; from Robert C. Martin. He also explains naming guidelines and it&apos;s a nice book to read.&lt;/p&gt;</comment>
                            <comment id="12975527" author="tdunning" created="Tue, 28 Dec 2010 15:27:39 +0000"  >
&lt;p&gt;I don&apos;t like the use of an interface for Op since it really does share function.  I can&apos;t see how testing would be facilitated by having an interface there.&lt;/p&gt;

&lt;p&gt;Also, Op is of long standard as an abbreviation for Operation (it appears in other Zookeeper code, in multiple dictionaries in the form of op code and in the IBM 650 manual from 1954).&lt;/p&gt;

&lt;p&gt;Regarding 911, I would really like to finish this issue off with a limited mission before taking on other JIRA&apos;s in the same patch.&lt;/p&gt;</comment>
                            <comment id="12975580" author="tdunning" created="Tue, 28 Dec 2010 18:43:50 +0000"  >&lt;p&gt;Added unit tests in the github version.&lt;/p&gt;

&lt;p&gt;Thanks to Thomas who was kind enough to provide several comments on the code.&lt;/p&gt;</comment>
                            <comment id="12975601" author="thkoch" created="Tue, 28 Dec 2010 19:22:54 +0000"  >&lt;p&gt;Please Ted, don&apos;t move that fast. I&apos;ve three outstanding issues that needs review or comments from commiters and that could influence your patch. Your current patch directly conflicts with &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-911&quot; title=&quot;move operations from methods to individual classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-911&quot;&gt;ZOOKEEPER-911&lt;/a&gt; and how I&apos;d propose to implement it. I&apos;m waiting on a comment for &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-849&quot; title=&quot;Provide Path class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-849&quot;&gt;ZOOKEEPER-849&lt;/a&gt; (on the mailing list) to continue with that. And once &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-837&quot; title=&quot;cyclic dependency ClientCnxn, ZooKeeper&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-837&quot;&gt;ZOOKEEPER-837&lt;/a&gt; would be committed I could continue with &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-911&quot; title=&quot;move operations from methods to individual classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-911&quot;&gt;ZOOKEEPER-911&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;m also working hard to clean up the mess that ZooKeeper currently still is and would ask you not to make it worse with your patch.&lt;/p&gt;

&lt;p&gt;Things are moving extremely slow here at ZooKeeper because commiters don&apos;t have time for reviews or comments. I&apos;m working since may (more then six months now) to slowly move the ZooKeeper API in a usable state.&lt;/p&gt;

&lt;p&gt;I gave a presentation about the internals of ZooKeeper in my team before christmas. People were pretty much scared at the poor code quality of such a central peace of some NoSQL systems.&lt;/p&gt;

&lt;p&gt;Could you also be so kind please and provide a use case for your request? The issue of transactions has been raised multiple times on the mailing list and one standard answer was to rather use one ZNode that&apos;d contain all necessary informations. Maybe there&apos;s an easier solution to what you intend to do?&lt;/p&gt;

&lt;p&gt;Hope I don&apos;t sound too rude. I feel a little frustrated. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12975613" author="tdunning" created="Tue, 28 Dec 2010 19:58:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Please Ted, don&apos;t move that fast.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My time is only available in tiny drips so I have to use them when I get them.  You must be the first &lt;br/&gt;
person to have accused me of moving too fast on open source projects.&lt;/p&gt;

&lt;p&gt;I think that you will have a slow time of it changing the ZK API except with an add-on library because of the all the backwards compatibility issues that will raise.  I doubt seriously that any fundamental changes will be acceptable to the community.&lt;/p&gt;

&lt;p&gt;As such, I am certainly not going to hold off on this change waiting for an API change that may not happen.&lt;/p&gt;

&lt;p&gt;As far as use cases are concerned, there have been several recently on the mailing list.  They have been compelling enough that I have changed my mind about the value of multi-update and would like to contribute to making it happen.  One excellent use-case was the graph idea where nodes have connections to and from other nodes.  It is unreasonable to keep a relatively large graph in a single node, but it is also important to have coherent updates to the graph.  Multi-update makes this trivial.&lt;/p&gt;</comment>
                            <comment id="12975702" author="henryr" created="Wed, 29 Dec 2010 03:00:42 +0000"  >&lt;p&gt;Hi Ted - &lt;/p&gt;

&lt;p&gt;I took a quick look at the github branch. Looks really good, thanks.&lt;/p&gt;

&lt;p&gt;I&apos;ve got a few comments on the code itself, but I&apos;ll save those until you post a patch. My main issue is the following: the &apos;multi&apos; API call is expressed in terms of an iterable over a polymorphic type, both of which are Java features that aren&apos;t extant in C. To aid future language bindings authors and to make the implementation really easy to verify, I&apos;d like to see an API signature that&apos;s very easily translated between languages. The iterable isn&apos;t too concerning (almost every language has &lt;b&gt;some&lt;/b&gt; notion of lists) but the polymorphic op object should map onto some simpler struct type. &lt;/p&gt;

&lt;p&gt;I know that the serialisation is independent of the signature, so we could call it whatever we liked in any language, but I&apos;d like to keep the core ZK API consistent across all bindings where possible and use wrappers in, for example, Python to provide more idiomatic interfaces. The serialisation may also change when we finally vote jute off the island, so we can&apos;t use that as the API spec. Indeed, we&apos;ll probably use Avro, where we have to write APIs in language-agnostic IDLs.&lt;/p&gt;

&lt;p&gt;So, to cut a long story short: any chance you can make the API a bit more language neutral? Then the op stuff can be a (very) thin wrapper. Shouldn&apos;t be a large change at all. &lt;/p&gt;

&lt;p&gt;You might consider chopping this up into a few JIRAs (apologies if you have and I&apos;ve missed them) - core API, Java wrapper, finishing touches (like payload size limits).&lt;/p&gt;

&lt;p&gt;Excited to see this! Let me know how I can help. &lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;


</comment>
                            <comment id="12975704" author="henryr" created="Wed, 29 Dec 2010 03:11:47 +0000"  >&lt;p&gt;Hi Thomas - &lt;/p&gt;

&lt;p&gt;I really appreciate all your hard work cleaning up ZooKeeper&apos;s internals. I understand your frustration about the speed at which some tickets are moving. You&apos;ve correctly identified that the committers have limited time, and particularly so over the holiday season. Hopefully we can pick up the pace now!&lt;/p&gt;

&lt;p&gt;However, I&apos;m uncomfortable with the idea that ongoing refactoring work could block an often asked-for feature like this - particularly a JIRA (911) where there isn&apos;t yet consensus on the approach, or indeed an available patch. Open source projects see fluctuating participation so we can&apos;t afford generally for issues to come with &apos;locks&apos; on the code they touch, otherwise we run the risk of starvation &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;So if this issue gets a patch with consensus before &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-911&quot; title=&quot;move operations from methods to individual classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-911&quot;&gt;ZOOKEEPER-911&lt;/a&gt;, I&apos;ll be very happy to commit it and then to work with you on the extra changes in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-911&quot; title=&quot;move operations from methods to individual classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-911&quot;&gt;ZOOKEEPER-911&lt;/a&gt; that this patch would cause. &lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;</comment>
                            <comment id="12975705" author="henryr" created="Wed, 29 Dec 2010 03:12:44 +0000"  >&lt;p&gt;Assigning to Ted.&lt;/p&gt;</comment>
                            <comment id="12975732" author="tdunning" created="Wed, 29 Dec 2010 07:03:20 +0000"  >&lt;p&gt;Henry, &lt;/p&gt;

&lt;p&gt;I can definitely set up some sub-tasks.&lt;/p&gt;

&lt;p&gt;Relative to the iterable and polymorphism, I don&apos;t much see the problem.  In particular, I think I set it up so that the API visible components are independent of the lower levels.&lt;/p&gt;

&lt;p&gt;In C, for instance, using a list/array/whatever of structs with a type field and a super set of all possible fields would work out just about as easily as the Java version.  The jute objects don&apos;t overlap and both Java and C api&apos;s would have to be creating and serializing the jute objects.  When jute gets the boot, I would presume that we would have something similar in terms of a separation between the API level structures and the serialization level structures.  In particular, I simply re-used most of the request structures in the multi request and only added the single check structure (and the multi for the overall header).&lt;/p&gt;

&lt;p&gt;So I really don&apos;t see the problem on the C side of things.  To be concrete, I see that the C side could have something kind of like:&lt;/p&gt;

&lt;p&gt;     result multi(op[] ops)  // assumes last op is null&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;     result multi(op[] ops, int opCount)  &lt;/p&gt;

&lt;p&gt;where &lt;/p&gt;

{verbatim}&lt;br/&gt;
typedef struct {
    int type;               // always present
    char *path;         // always present
    uint8 * data;       // only with create, setData
    ACL* acl;            // only for create
    int version;         // only for delete, setData
}{verbatim}

&lt;p&gt;Doesn&apos;t this match up well enough with the Java side of the house?  I would be loathe to lose the idiomatic Java idiom.&lt;/p&gt;


</comment>
                            <comment id="12975836" author="thkoch" created="Wed, 29 Dec 2010 17:11:19 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I uploaded a patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-911&quot; title=&quot;move operations from methods to individual classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-911&quot;&gt;ZOOKEEPER-911&lt;/a&gt;. Please have a look how you could use the provided Operation classes in ZK911.&lt;/p&gt;</comment>
                            <comment id="12975918" author="henryr" created="Wed, 29 Dec 2010 21:32:54 +0000"  >&lt;p&gt;Hi Ted - &lt;/p&gt;

&lt;p&gt;You don&apos;t have to lose the idiomatic Java - I like the API. I&apos;m just distinguishing between the API provided by the Java client and the API that the Java client calls in ZooKeeper, which should not be idiomatic. Currently that API is defined by the serialisation (and this is true for most API calls, not just multi(...)) rather than some abstract API signature which is realisable in every implementing language - I want to make sure that the serialisation is not the specification. Again, an Avro or Thrift or whatever IDL API would make these issues go away.  &lt;/p&gt;

&lt;p&gt;However, the idiomatic changes here are so slight that having thought about it overnight I&apos;m not too concerned about separating it out. It would be different if, e.g. the API was heavily object-oriented (for example a builder interface); then I would mandate that such an API should wrap a simple procedural API. It&apos;s pretty clear here what the multi(...) API means in all languages we&apos;re interested in. &lt;/p&gt;

&lt;p&gt;Thanks for listening &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Henry&lt;/p&gt;</comment>
                            <comment id="12975922" author="tdunning" created="Wed, 29 Dec 2010 21:46:54 +0000"  >&lt;blockquote&gt;
&lt;p&gt;However, the idiomatic changes here are so slight that having thought about it overnight I&apos;m not too concerned about separating it out. It would be different if, e.g. the API was heavily object-oriented (for example a builder interface); then I would mandate that such an API should wrap a simple procedural API. It&apos;s pretty clear here what the multi(...) API means in all languages we&apos;re interested in.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For what it is worth, I plan to throw in a builder API as well.  It will, however, be naught more than syntactic cover over the API you see already.&lt;/p&gt;</comment>
                            <comment id="12976612" author="vishalmlst" created="Mon, 3 Jan 2011 05:09:34 +0000"  >&lt;p&gt;Hi Ted,&lt;/p&gt;

&lt;p&gt;Will this induce any change to watches (especially when one transactions is modifying same znode multiple times)?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12976629" author="tdunning" created="Mon, 3 Jan 2011 06:37:48 +0000"  >&lt;p&gt;I would anticipate no changes to the way that watches work.  All that is happening here is that a group of transactions will all be applied or will all fail. These operations could have been done separately with the same effect insofar as watches are concerned. &lt;/p&gt;

&lt;p&gt;Remember that you may only get a single watch notification for several updates even without the multi command. &lt;/p&gt;

&lt;p&gt;Sent from my iPhone&lt;/p&gt;


</comment>
                            <comment id="13004296" author="jaredc" created="Wed, 9 Mar 2011 00:03:57 +0000"  >&lt;p&gt;Hey Ted,&lt;/p&gt;

&lt;p&gt;Has there been any progress on this issue?  We would really love to see this happen, so just pinging to see what&apos;s left....&lt;/p&gt;</comment>
                            <comment id="13004311" author="tdunning" created="Wed, 9 Mar 2011 00:42:23 +0000"  >&lt;p&gt;There has only been limited progress.&lt;/p&gt;

&lt;p&gt;I have the client and server command parsing, wire formats and some message passing defined.&lt;/p&gt;

&lt;p&gt;I have talked to Ben and Mahadev about where the final commit needs to be placed, but not done any code at all.&lt;/p&gt;

&lt;p&gt;My own extra-curricular schedule is completely under water from day job activities.  I am happy to help explain what has happened so far, but I am unable to drive further right now.&lt;/p&gt;

&lt;p&gt;I can update my git branch on request to make it easier to see what is going on relative to trunk.&lt;/p&gt;</comment>
                            <comment id="13019548" author="marshall" created="Wed, 13 Apr 2011 22:02:55 +0100"  >&lt;p&gt;Ted,&lt;/p&gt;

&lt;p&gt;I work with Jared and this is becoming an increasingly important issue for us. I have some bandwidth to work on this issue and would like to get started right away. I will of course be donating all my code back to Apache. &lt;/p&gt;

&lt;p&gt;When you have time, could you update your git branch?&lt;/p&gt;

&lt;p&gt;Many thanks!&lt;/p&gt;</comment>
                            <comment id="13019568" author="tdunning" created="Wed, 13 Apr 2011 22:39:52 +0100"  >&lt;p&gt;I would love to.&lt;/p&gt;

&lt;p&gt;I would also love to schedule a phone (skype) call among all interested parties to make sure that things can go forward as quickly as possible.&lt;/p&gt;

&lt;p&gt;Send email on the list so we can set up a good time.  I will be happy to coordinate the call and summarize back to the mailing list.&lt;/p&gt;</comment>
                            <comment id="13019571" author="tdunning" created="Wed, 13 Apr 2011 22:42:06 +0100"  >&lt;p&gt;On Wed, Apr 13, 2011 at 2:04 PM, Marshall McMullen (JIRA)&lt;/p&gt;
</comment>
                            <comment id="13019577" author="tdunning" created="Wed, 13 Apr 2011 23:08:38 +0100"  >&lt;p&gt;OK.  I have rebased to follow trunk and pushed the changes to github.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/tdunning/zookeeper/tree/zookeeper-966&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/zookeeper/tree/zookeeper-966&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13019677" author="marshall" created="Thu, 14 Apr 2011 04:18:47 +0100"  >&lt;p&gt;Ted, I totally agree, let&apos;s set up a skype call for everyone to discuss this and get it moving forward. I&apos;m available anytime during the day to talk, or I can make myself available in the evening/night if that&apos;s easier.&lt;/p&gt;</comment>
                            <comment id="13019909" author="marshall" created="Thu, 14 Apr 2011 17:57:14 +0100"  >&lt;p&gt;By the way, I&apos;m in Colorado (time zone is Mountain) in case that affects when you&apos;d like to schedule the call. I&apos;m happy to do it whenever it&apos;s convenient for you though.&lt;/p&gt;</comment>
                            <comment id="13019920" author="tdunning" created="Thu, 14 Apr 2011 18:16:38 +0100"  >&lt;p&gt;I sent out a call for the discussion on the zookeeper-dev mailing list.  &lt;/p&gt;

&lt;p&gt;The tentative call time is Friday 4/14 at 4PM PDT.&lt;/p&gt;

&lt;p&gt;Please respond to me via direct email at tdunning@apache.org so I can handle the logistics of the call.&lt;/p&gt;</comment>
                            <comment id="13019926" author="marshall" created="Thu, 14 Apr 2011 18:26:16 +0100"  >&lt;p&gt;Ted, I&apos;ve sent you an email so we can coordinate.&lt;/p&gt;

&lt;p&gt;Date/time works fine for me.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13022833" author="marshall" created="Thu, 21 Apr 2011 18:31:43 +0100"  >&lt;p&gt;I&apos;ve been having email discussions with various folks that have been super helpful in getting this implemented. I&apos;m going to try to summaries some of the key points here for posterity and other interested parties.&lt;/p&gt;

&lt;p&gt;Ted&apos;s initial version of this adds a new MultiTransactionRecord with an OpCode of &apos;multi&apos;. This contains a list of all the ops that need to get committed. The design is such that all of the ops must succeed in order for the multi op to succeed. If any one of the ops fails, then the entire multi op must fail. &lt;/p&gt;

&lt;p&gt;The basic approach I&apos;ve taken to enhance Ted&apos;s version is to look at all the processors and enhance them as needed in order to support the new multi op. Here&apos;s the flow of the processors (as documented in LeaderZooKeeperServer.java):&lt;/p&gt;

&lt;p&gt; processors: PrepRequestProcessor -&amp;gt; ProposalRequestProcessor -&amp;gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;CommitProcessor -&amp;gt; Leader.ToBeAppliedRequestProcessor -&amp;gt;&lt;/li&gt;
	&lt;li&gt;FinalRequestProcessor&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The purpose of PrepRequestProcessor (pRequest) is essentially to validate the incoming request and ensure (for example) the path we want to create doesn&apos;t already exist, or the path we want to delete does exist. So I&apos;ve enhanced PrepRequestProcessor and added a case statement for &apos;multi&apos; that essentially iterates over all the ops contained in the multi op and calls pRequest on each. If any of them fails, then it fails. Otherwise, a new MultiTxn will be created. This is *&lt;b&gt;one&lt;/b&gt;* transaction that contains all the ops in the multi op. &lt;/p&gt;</comment>
                            <comment id="13022834" author="marshall" created="Thu, 21 Apr 2011 18:33:24 +0100"  >&lt;p&gt;Another key design point we discussed in email was with regard to the order of the ops inside a multi op and the final state that should result. We discussed the notion that the order of the ops inside a multi op must be significant since there is nothing to be gained by having order be non-deterministic.  Supposing we have a multi that says:&lt;/p&gt;

&lt;p&gt;   update &quot;foo&quot; to 1&lt;br/&gt;
   update &quot;foo&quot; to 2&lt;/p&gt;

&lt;p&gt;The end result should be 2.&lt;/p&gt;</comment>
                            <comment id="13022835" author="fournc" created="Thu, 21 Apr 2011 18:34:06 +0100"  >&lt;p&gt;I am out of the office until tuesday april 26. For ServiceBase or GSDiscovery issues please contact gs-servicebase-dev. For Permit questions contact gs-permit-dev.&lt;/p&gt;</comment>
                            <comment id="13022836" author="marshall" created="Thu, 21 Apr 2011 18:34:41 +0100"  >&lt;p&gt;I&apos;ve finished the necessary work inside PrepRequestProcessor.java to deal with multi-ops. I&apos;m going to next look at SyncRequestProcessor and then  FinalRequestProcessor.&lt;/p&gt;</comment>
                            <comment id="13022837" author="marshall" created="Thu, 21 Apr 2011 18:38:33 +0100"  >&lt;p&gt;I&apos;ve realized there&apos;s a hole in my current implementation. I need to create a MultiTxn.java to exist alongside CreateTxn.java, DeleteTxn.java, etc.&lt;/p&gt;

&lt;p&gt;I wasn&apos;t sure how this gets generated, but Mahadev pointed me in the right direction. He indicated I should look at src/zookeeper.jute to create the necessary auto generated file.&lt;/p&gt;</comment>
                            <comment id="13022855" author="marshall" created="Thu, 21 Apr 2011 19:06:41 +0100"  >&lt;p&gt;So I&apos;ve added a new &apos;class&apos; entry to src/zookeeper.jute for a MultiTxn. But I can&apos;t seem to get it to build and generate the new file. I&apos;m still not sure what I want in this MutliTxn, but for now I&apos;d like to get it to build and generate the required java file so I can start using it. Is there something special I need to do other than just running &apos;ant compile&apos; to generate the files?&lt;/p&gt;</comment>
                            <comment id="13022882" author="marshall" created="Thu, 21 Apr 2011 20:33:24 +0100"  >&lt;p&gt;Never mind, figured it out == &quot;ant compile_jute&quot;&lt;/p&gt;</comment>
                            <comment id="13023462" author="marshall" created="Sat, 23 Apr 2011 00:43:43 +0100"  >&lt;p&gt;Status Update::&lt;/p&gt;

&lt;p&gt;I&apos;ve made all the changes necessary to PrepRequestProcessor, SyncRequestProcessor, FinalRequestProcessor, DataTree, as well as many, many other classes. I&apos;ve now gotten all the unit tests that Ted originally wrote to pass. I then spent all day today writing a ton of new unit tests to test strange corner cases, conflicts, and other more complex issues. These identified a few bugs in my implementation which I&apos;ve since fixed.&lt;/p&gt;

&lt;p&gt;The two remaining tasks I have on my plate that I intend to finish this weekend:&lt;br/&gt;
(1) Finish up the remaining client-side code&lt;br/&gt;
(2) Clean up all the code I&apos;ve added, document things, etc.&lt;/p&gt;

&lt;p&gt;This weekend I&apos;ll commit all my changes to Ted&apos;s multi branch.&lt;/p&gt;

&lt;p&gt;Thanks everyone for your help!!&lt;/p&gt;</comment>
                            <comment id="13023468" author="fournc" created="Sat, 23 Apr 2011 01:06:19 +0100"  >&lt;p&gt;Awesome Marshall. Please post a patch here when you feel good about it. The sooner people can start reviewing it, the faster it&apos;ll get approval to go into trunk.&lt;/p&gt;</comment>
                            <comment id="13023481" author="tdunning" created="Sat, 23 Apr 2011 02:32:46 +0100"  >&lt;blockquote&gt;
&lt;p&gt;yowza Marshall!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You are code monster.  This is really exciting.&lt;/p&gt;

&lt;p&gt;Commit at will.  Don&apos;t worry about half baked stuff.  Getting eyes on semicolons sooner is good.&lt;/p&gt;
</comment>
                            <comment id="13025157" author="marshall" created="Tue, 26 Apr 2011 11:05:42 +0100"  >&lt;p&gt;Thanks everyone for all the help and the kind words. Hopefully when I get this all committed I&apos;ve done most of it correctly &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;m going to go ahead and commit my pending changes to Ted&apos;s private git branch. It&apos;s not perfect as there are a few things I wanted to work out better but it wasn&apos;t working out as well as I&apos;d have liked. Specifically:&lt;/p&gt;

&lt;p&gt;1. No client work is done. I&apos;m not sure where to start on this, so if someone wants to point me the right direction I&apos;ll tackle that next.&lt;/p&gt;

&lt;p&gt;2. PrepRequestProcessor.java:432: I don&apos;t like how I had to serialize the individual Txns into the MultiTxn only to deserialize it in the next request processor in DataTree. I wanted to just have MultiTxn contain a list of Txns. However, the jute auto code generation stuff got in my way. I couldn&apos;t figure out how to make the MultiTxn contain a list of Txns so I made it a buffer that I serialize into/out of. It works, but I think this could be better.&lt;/p&gt;

&lt;p&gt;3. Several places where we do a switch on types of ops inside multi op, and in default it throws an IOException. That &lt;br/&gt;
doesn&apos;t seem very appropriate. Maybe instead a KeeperException.APIERROR or perhaps we need a (new) specific exception?&lt;/p&gt;

&lt;p&gt;4. There is currently no way to tell which op in a multi op failed. It&apos;s implemented so that it throws the KeeperException corresponding to the first op in the multi op that caused the multi op to pass. However, it might be more useful if there was a way to know exactly which op failed. I tried several approaches to implement this but couldn&apos;t get it working correctly. Maybe someone can offer some advice on this.&lt;/p&gt;

&lt;p&gt;I&apos;ll commit my pending changes momentarily.&lt;/p&gt;</comment>
                            <comment id="13025163" author="marshall" created="Tue, 26 Apr 2011 11:25:16 +0100"  >&lt;p&gt;Alright, got my changes pushed to Ted&apos;s multi branch. I&apos;d appreciate feedback/thoughts/suggestions/ideas from anyone who has the time to look these changes over. Thanks so much!&lt;/p&gt;</comment>
                            <comment id="13025317" author="marshall" created="Tue, 26 Apr 2011 17:47:31 +0100"  >&lt;p&gt;Finally sorted out how to properly run one unit test (e.g. MultiTransactionTest.java) from the command line and show its output:&lt;/p&gt;

&lt;p&gt;ant compile test -Dtest.category=MultiTransaction -Dtest.output=yes&lt;/p&gt;</comment>
                            <comment id="13025406" author="marshall" created="Tue, 26 Apr 2011 21:09:00 +0100"  >&lt;p&gt;Regarding my comments above, I&apos;ve made great progress on #4. I am now able to collect out the result from each op in a multi op. If there&apos;s an exception on that op, it will get caught and stored into the results array. Ultimately I still throw an exception if any of the ops fail (just like before) but the change here is that we&apos;ll be able to determine which op failed and why.&lt;/p&gt;

&lt;p&gt;After I flush out more of these details I&apos;ll get this committed. &lt;/p&gt;</comment>
                            <comment id="13025424" author="tdunning" created="Tue, 26 Apr 2011 21:45:21 +0100"  >&lt;p&gt;This is awesome Marshall!&lt;/p&gt;</comment>
                            <comment id="13025439" author="marshall" created="Tue, 26 Apr 2011 22:21:20 +0100"  >&lt;p&gt;Thanks Ted!! I&apos;m super excited about this work as well. I&apos;m working on flushing out some more details with failure detection and adding some unit tests around that. I&apos;ll commit them later today when they are finished....&lt;/p&gt;

&lt;p&gt;Next I want to tackle the client-side changes (Java and C). Any pointers on what file(s) to look into for where that&apos;s all handled would be appreciated...&lt;/p&gt;

&lt;p&gt;Thanks!!&lt;/p&gt;</comment>
                            <comment id="13025445" author="tdunning" created="Tue, 26 Apr 2011 22:26:47 +0100"  >&lt;p&gt;Marshall,&lt;/p&gt;

&lt;p&gt;Go ahead and micro-commit.  Nobody is expecting the github branch to even pass tests.  &lt;/p&gt;

&lt;p&gt;The client side (in Java) should be nearly done since that is where I started.  We should be able to start writing&lt;br/&gt;
some real unit tests that do round trip tests as soon as you are happy with the server stuff.&lt;/p&gt;</comment>
                            <comment id="13025624" author="marshall" created="Wed, 27 Apr 2011 06:49:51 +0100"  >&lt;p&gt;I&apos;ve committed my work from the last couple of days that implements a mechanism to detect which op in the multi op failed. From my commit message:&lt;/p&gt;

&lt;p&gt;Enhanced multi-op so caller can tell which op failed.&lt;/p&gt;

&lt;p&gt;This turned out to be a lot harder than it looked. The jist of&lt;br/&gt;
the problem was I was throwing an exception early in&lt;br/&gt;
PrepRequestProcessor on the first error in the multi op. That was&lt;br/&gt;
the right thing to do, but it didn&apos;t allow returning the results&lt;br/&gt;
back to the caller as the exception caused us to discard the current&lt;br/&gt;
multi-op and create a new ErrorTxn that traversed all the other&lt;br/&gt;
request handlers.&lt;/p&gt;

&lt;p&gt;Instead, this new implementation retains the multi-op all the way&lt;br/&gt;
through all the request handlers (though it becomes a MultiTxn&lt;br/&gt;
and ultimately a MultiResponse). It now allows returning back&lt;br/&gt;
to the caller the result for each individual Op.&lt;/p&gt;

&lt;p&gt;In ZooKeeper&apos;s multi function, it still ultimately behaves the&lt;br/&gt;
same as before &amp;#8211; namely the first error in the results array&lt;br/&gt;
gets detected as the fatal error that caused the multi op to fail&lt;br/&gt;
and this is what we throw as our exception.&lt;/p&gt;

&lt;p&gt;The major difference is that we first (optionally) populate a given&lt;br/&gt;
result array &lt;b&gt;before&lt;/b&gt; we throw the exception.&lt;/p&gt;

&lt;p&gt;There are some rough details here still and some things I&apos;d like to&lt;br/&gt;
fix. But it works really well and all the major bugs are flushed&lt;br/&gt;
out so I&apos;m committing....&lt;/p&gt;</comment>
                            <comment id="13025845" author="marshall" created="Wed, 27 Apr 2011 16:33:10 +0100"  >&lt;p&gt;Made a couple small bug fixes this morning: &lt;/p&gt;

&lt;p&gt;(1) Fix compile error introduced by new arg in multi_internal. &lt;br/&gt;
(2) Fix bug in error reporting on failed multi-op. &lt;/p&gt;

&lt;p&gt;Now I&apos;m looking at the C client. Hope to get this done today....&lt;/p&gt;</comment>
                            <comment id="13025865" author="mahadev" created="Wed, 27 Apr 2011 17:05:09 +0100"  >&lt;p&gt;nice work marshall. Given that 3.4 is getting delayed, if enough testing is done we can put it in 3.4.0 release as well!&lt;/p&gt;</comment>
                            <comment id="13025873" author="marshall" created="Wed, 27 Apr 2011 17:17:35 +0100"  >&lt;p&gt;Mahadev, that&apos;s wonderful news!! We would really like to get this into the 3.4.0 release as well. Do you know what the timeline is for the release of 3.4?&lt;/p&gt;</comment>
                            <comment id="13027569" author="marshall" created="Mon, 2 May 2011 08:29:28 +0100"  >&lt;p&gt;I&apos;ve committed an initial pass at the necessary work in the C client. I did some refactoring to avoid some massive code duplication as well. Notes from my checkin comments:&lt;/p&gt;


&lt;p&gt; This adds new zoo_multi and zoo_amulti interfaces to the C client to&lt;br/&gt;
    atomically commit (either synchronously or asynchronously) a set of&lt;br/&gt;
    operations. The server side guarantees transactional consistency&lt;br/&gt;
    in that &lt;b&gt;all&lt;/b&gt; the ops either fail or succeed.&lt;/p&gt;

&lt;p&gt;    Limitations of this implementation:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;asynchronous interface (zoo_amulti) doesn&apos;t work yet.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;can&apos;t get back the index of the failing op from zoo_multi though&lt;br/&gt;
      zoo_amulti is designed to support this. I have a plan for how&lt;br/&gt;
      to implement this in zoo_multi too.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Only limited testing done on C client. The one test I did write&lt;br/&gt;
      only works in multithread mode. Looks to be a limitation of the&lt;br/&gt;
      test case I modelled mine after.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Cleanup/refactoring needed:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Deal with deeply nested errors in zoo_amulti better (free any&lt;br/&gt;
      allocated memory, etc).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Don&apos;t need the existing ErrorResponse (added on java side to&lt;br/&gt;
      allow determining which op failed). On C side it was so much&lt;br/&gt;
      easier to just add a field to MultiHeader to indicate if that&lt;br/&gt;
      op failed or not. That will make the Java side a lot cleaner&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13027729" author="tdunning" created="Mon, 2 May 2011 18:17:24 +0100"  >&lt;p&gt;Patch against current trunk.  Commit messages are reworded versus github version&lt;/p&gt;</comment>
                            <comment id="13027733" author="tdunning" created="Mon, 2 May 2011 18:24:22 +0100"  >&lt;p&gt;This patch should be very close to done for the Java side (thanks to Marshall and Camille for carrying this forward).&lt;/p&gt;

&lt;p&gt;Marshall is working out some kinks on the C API.&lt;/p&gt;

&lt;p&gt;Getting some reviews from the core ZK team would be very helpful at this point.&lt;/p&gt;</comment>
                            <comment id="13027734" author="marshall" created="Mon, 2 May 2011 18:25:20 +0100"  >&lt;p&gt;Ted, thanks for creating the patch against trunk.&lt;/p&gt;

&lt;p&gt;I should note that there are a few (previously mentioned) limitations/bugs with this version. I hope to sort them out over the next day or so. However, for anyone who wants to start reviewing this now is welcome to as the remaining bugs I intend to fix shouldn&apos;t modify the basic approach.&lt;/p&gt;</comment>
                            <comment id="13027738" author="marshall" created="Mon, 2 May 2011 18:36:17 +0100"  >&lt;p&gt;Yes, I should clarify and confirm what Ted said. The Java side of this (both the client and server) should be very close to a final working version. The kinks I&apos;m working out are definitely only on the C API side.&lt;/p&gt;</comment>
                            <comment id="13028013" author="marshall" created="Tue, 3 May 2011 05:03:12 +0100"  >&lt;p&gt;If anyone&apos;s looking at this already, please disregard the C client entirely. I&apos;ve refactored it considerably after I got some sleep and took a second look at it. I realize now that I didn&apos;t understand the C client well enough when I wrote this first version. Now that I have more context, the solution was a lot simpler...&lt;/p&gt;

&lt;p&gt;Anyhow, I&apos;ll finish this up tonight and commit my changes back to Ted&apos;s git branch.&lt;/p&gt;</comment>
                            <comment id="13028018" author="mahadev" created="Tue, 3 May 2011 06:04:03 +0100"  >&lt;p&gt;marshall,&lt;br/&gt;
 Great progress.&lt;br/&gt;
 you might want to post a preliminary patch for this on the jira for others to take a look at it.&lt;/p&gt;</comment>
                            <comment id="13028051" author="tdunning" created="Tue, 3 May 2011 06:58:36 +0100"  >&lt;p&gt;Mahadev, &lt;/p&gt;

&lt;p&gt;There is a patch on this JIRA.&lt;/p&gt;</comment>
                            <comment id="13028052" author="tdunning" created="Tue, 3 May 2011 06:59:08 +0100"  >&lt;p&gt;This patch isn&apos;t final yet.&lt;/p&gt;</comment>
                            <comment id="13028054" author="hadoopqa" created="Tue, 3 May 2011 07:01:21 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12477971/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12477971/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1097865.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/236//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/236//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13028113" author="marshall" created="Tue, 3 May 2011 10:01:28 +0100"  >&lt;p&gt;Alright, made significant progress tonight rewriting my prior attempts at the C client. The new version is a lot cleaner, simpler, and safer. I still have a few things to work out, but it&apos;s working significantly better now than the prior version.&lt;/p&gt;

&lt;p&gt;We&apos;re moving offices tomorrow (I think, might be Wed..) but I&apos;ll try to get my latest changes committed as soon as I can.&lt;/p&gt;</comment>
                            <comment id="13028510" author="marshall" created="Wed, 4 May 2011 00:48:33 +0100"  >&lt;p&gt;I&apos;ve just committed a rewrite of the C API:&lt;br/&gt;
&lt;a href=&quot;https://github.com/tdunning/zookeeper/commit/dcd7ea9233314ce96c8913b8b0659a8f7d02e93b&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/zookeeper/commit/dcd7ea9233314ce96c8913b8b0659a8f7d02e93b&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From my commit message:&lt;/p&gt;

&lt;p&gt;commit dcd7ea9233314ce96c8913b8b0659a8f7d02e93b&lt;br/&gt;
Author: Marshall McMullen &amp;lt;marshall@solidfire.com&amp;gt;&lt;br/&gt;
Date:   Tue May 3 17:45:00 2011 -0600&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt; - Rewrite of the C API for multi op support.&lt;/p&gt;

&lt;p&gt;    This is a rewrite of my earlier C API support for multi op support.&lt;br/&gt;
    My earlier version didn&apos;t work correctly due to a lack of understanding&lt;br/&gt;
    of the completion mechanism and how it interacted with sync and async&lt;br/&gt;
    mechanisms. This version correctly works in both sync and async&lt;br/&gt;
    contexts.&lt;/p&gt;

&lt;p&gt;    I&apos;ve also gotten rid of the horrid variadic zoo_multi/zoo_amulti interfaces&lt;br/&gt;
    in favor of a simpler, stricter/safer, and actually more succinct and&lt;br/&gt;
    easier to use syntax. See test cases in TestClient.cc for examples.&lt;/p&gt;

&lt;p&gt;    I&apos;ve also added a couple of more tests cases to test the async&lt;br/&gt;
    interface and to test error code propagation.&lt;/p&gt;

&lt;p&gt;    Removed no-longer-necessary cruft from my last version.&lt;/p&gt;</comment>
                            <comment id="13028511" author="marshall" created="Wed, 4 May 2011 00:49:32 +0100"  >&lt;p&gt;The rewrite of the C API&apos;s multi support exposed a bug in the backend multi op implementation that I must fix. I&apos;ll hopefully have a fix for that in hand late this evening.&lt;/p&gt;</comment>
                            <comment id="13028515" author="tdunning" created="Wed, 4 May 2011 01:05:32 +0100"  >&lt;p&gt;Updated to trunk and Marshall&apos;s changes&lt;/p&gt;</comment>
                            <comment id="13028518" author="hadoopqa" created="Wed, 4 May 2011 01:11:17 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478111/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478111/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099267.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/239//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/239//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13028520" author="tdunning" created="Wed, 4 May 2011 01:19:38 +0100"  >&lt;p&gt;Hopefully this makes jenkins happier.&lt;/p&gt;</comment>
                            <comment id="13028531" author="hadoopqa" created="Wed, 4 May 2011 01:42:46 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478112/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478112/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099267.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 4 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    -1 release audit.  The applied patch generated 27 release audit warnings (more than the trunk&apos;s current 24 warnings).&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/240//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/240//testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/240//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/240//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/240//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/240//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/240//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/240//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13028553" author="tdunning" created="Wed, 4 May 2011 02:41:20 +0100"  >&lt;p&gt;Added some copyrights and cleaned up a bit of code.&lt;/p&gt;</comment>
                            <comment id="13028560" author="marshall" created="Wed, 4 May 2011 03:03:28 +0100"  >&lt;p&gt;I&apos;m aware of the current failing tests. They&apos;re a result of the bug I referred to above. Specifically, on a failed multi op, a NULL MultiTransaction entry is getting written to disk. A subsequent attempt to read that back in fails. This bug wasn&apos;t found in the java unit tests, but it is found by my new C API unit tests. It&apos;s easy to reproduce and I have a good idea where the problem is. I&apos;ll get it fixed tonight.&lt;/p&gt;</comment>
                            <comment id="13028561" author="hadoopqa" created="Wed, 4 May 2011 03:12:54 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478117/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478117/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099267.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/242//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/242//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/242//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/242//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/242//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/242//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13028579" author="marshall" created="Wed, 4 May 2011 05:09:36 +0100"  >&lt;p&gt;So maybe someone can help me narrow in on where to find the problem I&apos;m debugging. The C unit tests exposed a problem where it reads in the database snapshot from disk and finds a MultiTxn that is NULL. Here&apos;s the stacktrace:&lt;/p&gt;

&lt;p&gt;2011-05-03 21:07:11,609 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:FileSnap@83&amp;#93;&lt;/span&gt; - Reading snapshot /tmp/zkdata/version-2/snapshot.3e9&lt;br/&gt;
2011-05-03 21:07:11,728 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;main:ZooKeeperServerMain@63&amp;#93;&lt;/span&gt; - Unexpected exception, exiting abnormally&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
        at org.apache.zookeeper.server.DataTree.processTxn(DataTree.java:818)&lt;br/&gt;
        at org.apache.zookeeper.server.persistence.FileTxnSnapLog.processTransaction(FileTxnSnapLog.java:186)&lt;br/&gt;
        at org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(FileTxnSnapLog.java:145)&lt;br/&gt;
        at org.apache.zookeeper.server.ZKDatabase.loadDataBase(ZKDatabase.java:223)&lt;br/&gt;
        at org.apache.zookeeper.server.ZooKeeperServer.loadData(ZooKeeperServer.java:242)&lt;br/&gt;
        at org.apache.zookeeper.server.ZooKeeperServer.startdata(ZooKeeperServer.java:369)&lt;br/&gt;
        at org.apache.zookeeper.server.NIOServerCnxnFactory.startup(NIOServerCnxnFactory.java:122)&lt;br/&gt;
        at org.apache.zookeeper.server.ZooKeeperServerMain.runFromConfig(ZooKeeperServerMain.java:112)&lt;br/&gt;
        at org.apache.zookeeper.server.ZooKeeperServerMain.initializeAndRun(ZooKeeperServerMain.java:86)&lt;br/&gt;
        at org.apache.zookeeper.server.ZooKeeperServerMain.main(ZooKeeperServerMain.java:52)&lt;/p&gt;

&lt;p&gt;A hack workaround is DataTree.processTxn, if the MultiTxn is NULL, just skip it. But that only addresses the symptom. I&apos;d like to understand how it&apos;s getting into the snapshot that is being written to disk and NOT do so if it&apos;s an empty MultiTxn. I just don&apos;t know where all that magic happens... Anyone want to offer some guidance?&lt;/p&gt;</comment>
                            <comment id="13028580" author="marshall" created="Wed, 4 May 2011 05:16:02 +0100"  >&lt;p&gt;Additional debugging... Note that as zk server is coming up it&apos;s reading in a snapshot:&lt;/p&gt;

&lt;p&gt;2011-05-03 22:14:16,872 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:Environment@98&amp;#93;&lt;/span&gt; - Server environment:java.io.tmpdir=/tmp&lt;br/&gt;
2011-05-03 22:14:16,872 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:Environment@98&amp;#93;&lt;/span&gt; - Server environment:java.compiler=&amp;lt;NA&amp;gt;&lt;br/&gt;
2011-05-03 22:14:16,872 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:Environment@98&amp;#93;&lt;/span&gt; - Server environment:os.name=Linux&lt;br/&gt;
2011-05-03 22:14:16,873 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:Environment@98&amp;#93;&lt;/span&gt; - Server environment:os.arch=amd64&lt;br/&gt;
2011-05-03 22:14:16,873 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:Environment@98&amp;#93;&lt;/span&gt; - Server environment:os.version=2.6.37-gentoo-r4&lt;br/&gt;
2011-05-03 22:14:16,874 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:Environment@98&amp;#93;&lt;/span&gt; - Server environment:user.name=marshall&lt;br/&gt;
2011-05-03 22:14:16,874 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:Environment@98&amp;#93;&lt;/span&gt; - Server environment:user.home=/home/marshall&lt;br/&gt;
2011-05-03 22:14:16,875 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:Environment@98&amp;#93;&lt;/span&gt; - Server environment:user.dir=/home/marshall/zookeeper-multi/src/c&lt;br/&gt;
2011-05-03 22:14:16,880 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:ZooKeeperServer@713&amp;#93;&lt;/span&gt; - tickTime set to 3000&lt;br/&gt;
2011-05-03 22:14:16,881 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:ZooKeeperServer@722&amp;#93;&lt;/span&gt; - minSessionTimeout set to -1&lt;br/&gt;
2011-05-03 22:14:16,881 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:ZooKeeperServer@731&amp;#93;&lt;/span&gt; - maxSessionTimeout set to -1&lt;br/&gt;
2011-05-03 22:14:16,899 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:NIOServerCnxnFactory@94&amp;#93;&lt;/span&gt; - binding to port 0.0.0.0/0.0.0.0:22181&lt;br/&gt;
2011-05-03 22:14:16,916 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:FileSnap@83&amp;#93;&lt;/span&gt; - Reading snapshot /tmp/zkdata/version-2/snapshot.0&lt;br/&gt;
2011-05-03 22:14:16,927 &lt;span class=&quot;error&quot;&gt;&amp;#91;myid:&amp;#93;&lt;/span&gt; - INFO  &lt;span class=&quot;error&quot;&gt;&amp;#91;main:FileTxnSnapLog@186&amp;#93;&lt;/span&gt; - &amp;gt;&amp;gt; PROCESSING HDR=85490560384172033,1304482428,3,1304482430503,14 TXN=null&lt;/p&gt;

&lt;p&gt;This ends up triggering the null pointer exception b/c the TXN (which is of type MultiTxn) is NULL due to a failed multi-op. I&apos;ll try to track down better what the error handling is around a multi txn that fails and see why the Txn in the snapshot is null...&lt;/p&gt;</comment>
                            <comment id="13028582" author="mahadev" created="Wed, 4 May 2011 05:18:54 +0100"  >&lt;p&gt;interesting, are you adding the multitxn in the c test? if no, this looks like a case wherein its reading an int written out via the txn log (not sure what) but when reading it back interprets it wrong. Which line is throwing null pointer exception (am assuming your codebase is different than the one on trunk).&lt;/p&gt;</comment>
                            <comment id="13028590" author="marshall" created="Wed, 4 May 2011 05:31:45 +0100"  >&lt;p&gt;The C client is just calling the new zoo_multi API. One of the unit tests does a zoo_multi which purposefully fails (due to duplicate nodes). The error is correctly detected and propagated from server back to client. The &lt;b&gt;NEXT&lt;/b&gt; unit tests which causes the server to start up again during it&apos;s init phase reads in the database off of the disk (ZKDatabase.loadDatabase) which then ultimately ends up in DataTree.processTxn(DataTree.java:818). That line of code is new code I&apos;ve added to processTxn that essentially says:&lt;/p&gt;

&lt;p&gt;  ...&lt;br/&gt;
  case OpCode.multi:&lt;br/&gt;
      MultiTxn multiTxn = (MultiTxn) txn ;                                                                                  &lt;br/&gt;
      List&amp;lt;Txn&amp;gt; txns = multiTxn.getTxns(); // &amp;lt;---- THAT CAUSES THE NULL POINTER EXCEPTION B/C &apos;txn&apos; is null.&lt;/p&gt;

&lt;p&gt;So this bug only happens after a failed multi op. The normal multi op gets written to disk and loaded correctly. I don&apos;t understand all of how this works, but I presume we take a snapshot before we actually apply a transaction so we can roll back if it fails. So I &lt;b&gt;think&lt;/b&gt; the snapshot we&apos;re taking is putting a null txn into the snapshot ... I&apos;m not sure... Any ideas?&lt;/p&gt;</comment>
                            <comment id="13028613" author="marshall" created="Wed, 4 May 2011 06:14:22 +0100"  >&lt;p&gt;*&lt;b&gt;GAH&lt;/b&gt;* I&apos;m stupid. OK, I found the problem... &lt;b&gt;sigh&lt;/b&gt;. It had absolutely nothing to do with what I thought at all (typical).&lt;/p&gt;

&lt;p&gt;The snapshotting code serializes all the transactions to create a snapshot. While the code is written to serialize a MultiTxn properly, there was no case statement in the necessary place in SerializeUtils. So nothing was getting written out to the snapshot properly....&lt;/p&gt;

&lt;p&gt;&lt;b&gt;sigh&lt;/b&gt;.&lt;/p&gt;</comment>
                            <comment id="13028619" author="marshall" created="Wed, 4 May 2011 06:50:27 +0100"  >&lt;p&gt;Just checked in a fix. C unit tests now pass (including the three new multi-op tests). &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                            <comment id="13028622" author="tdunning" created="Wed, 4 May 2011 07:06:29 +0100"  >&lt;p&gt;Marshall,&lt;/p&gt;

&lt;p&gt;Do these C unit tests have a corresponding set of Java unit tests?&lt;/p&gt;</comment>
                            <comment id="13028625" author="marshall" created="Wed, 4 May 2011 07:11:03 +0100"  >&lt;p&gt;The Java unit tests are actually much more developed (see MultiTransactionTest.java). Now that I&apos;ve got all the plumbing in the C API working correctly, I&apos;ll work on porting the Java tests over to the C side.... &lt;/p&gt;</comment>
                            <comment id="13028626" author="mahadev" created="Wed, 4 May 2011 07:12:01 +0100"  >&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; nice catch! Good to see tests proving to be useful! &lt;/p&gt;</comment>
                            <comment id="13028628" author="tdunning" created="Wed, 4 May 2011 07:12:05 +0100"  >&lt;p&gt;Latests repairs from Marshall.&lt;/p&gt;

&lt;p&gt;This should be ready for review, but not commit.&lt;/p&gt;</comment>
                            <comment id="13028638" author="hadoopqa" created="Wed, 4 May 2011 07:43:47 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478127/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478127/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/245//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/245//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/245//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/245//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/245//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/245//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13028745" author="marshall" created="Wed, 4 May 2011 14:31:51 +0100"  >&lt;p&gt;What is this warning about:&lt;/p&gt;

&lt;p&gt;-1 findbugs. The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;</comment>
                            <comment id="13028746" author="fournc" created="Wed, 4 May 2011 14:35:56 +0100"  >&lt;p&gt;Check out the findbugs link:&lt;br/&gt;
&lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/245//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/245//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like they&apos;re upset by:&lt;br/&gt;
org.apache.zookeeper.Op$Create.getData() may expose internal representation by returning Op$Create.data &lt;br/&gt;
In class org.apache.zookeeper.Op$Create&lt;br/&gt;
In method org.apache.zookeeper.Op$Create.getData()&lt;br/&gt;
Field org.apache.zookeeper.Op$Create.data&lt;br/&gt;
At Op.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;line 99&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;org.apache.zookeeper.Op$SetData.getData() may expose internal representation by returning Op$SetData.data &lt;/p&gt;</comment>
                            <comment id="13028763" author="marshall" created="Wed, 4 May 2011 15:40:19 +0100"  >&lt;p&gt;Thanks Camille! I&apos;ve got some other things on my plate today, but I&apos;ll try to get to this later.&lt;/p&gt;</comment>
                            <comment id="13028802" author="tdunning" created="Wed, 4 May 2011 17:15:48 +0100"  >&lt;p&gt;Camille is correct.&lt;/p&gt;

&lt;p&gt;I don&apos;t think that we can get rid of these warnings because passing the buffer around here is of the essence.  The warning&lt;br/&gt;
is reasonable except for the fact that the data structure is really just a wrapper around the byte array.&lt;/p&gt;

&lt;p&gt;Mahadev, Ben,&lt;/p&gt;

&lt;p&gt;Is it OK to ultimately commit code that has these two warnings?&lt;/p&gt;</comment>
                            <comment id="13028807" author="marshall" created="Wed, 4 May 2011 17:18:03 +0100"  >&lt;p&gt;Actually I have a solution to this (I believe). Basically put a constructor inside Op.java that takes a Record and creates an Op. Then we don&apos;t have to expose the internals of the data field to the caller. I should have something in the next hour or so.&lt;/p&gt;</comment>
                            <comment id="13028809" author="marshall" created="Wed, 4 May 2011 17:22:49 +0100"  >&lt;p&gt;Or, the &apos;add&apos; method just takes a type and a request and does the right thing there. No internals exposed.&lt;/p&gt;</comment>
                            <comment id="13028814" author="marshall" created="Wed, 4 May 2011 17:36:09 +0100"  >&lt;p&gt;OK, Looks like this approach will work to get rid of this error.&lt;/p&gt;</comment>
                            <comment id="13028827" author="marshall" created="Wed, 4 May 2011 18:12:15 +0100"  >&lt;p&gt;Letting this test run completely but I&apos;ll check in a fix momentarily.&lt;/p&gt;</comment>
                            <comment id="13028843" author="tdunning" created="Wed, 4 May 2011 18:34:15 +0100"  >&lt;p&gt;There is a much simpler approach.&lt;/p&gt;

&lt;p&gt;ALL of the getters can be deleted and the toRequestRecord method can be used.  THis also kills several casts.&lt;/p&gt;

&lt;p&gt;Patch coming shortly.&lt;/p&gt;</comment>
                            <comment id="13028846" author="marshall" created="Wed, 4 May 2011 18:38:34 +0100"  >&lt;p&gt;Yeah, I was looking at using that as well. I&apos;ll let you tackle this then. Let me know if you need help...&lt;/p&gt;</comment>
                            <comment id="13028847" author="tdunning" created="Wed, 4 May 2011 18:39:25 +0100"  >&lt;p&gt;Pushed fix to github.&lt;/p&gt;

&lt;p&gt;Note that I also reworded the commit messages to include the JIRA.&lt;/p&gt;

&lt;p&gt;This will require that you force the pull.&lt;/p&gt;</comment>
                            <comment id="13028850" author="tdunning" created="Wed, 4 May 2011 18:41:54 +0100"  >&lt;p&gt;I made the tweaks.  I will post another patch and see what jenkins has to say.&lt;/p&gt;</comment>
                            <comment id="13028851" author="tdunning" created="Wed, 4 May 2011 18:42:24 +0100"  >&lt;p&gt;This should fix the niggling warnings&lt;/p&gt;</comment>
                            <comment id="13028871" author="hadoopqa" created="Wed, 4 May 2011 19:13:11 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478186/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478186/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/248//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/248//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/248//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/248//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/248//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/248//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13028875" author="tdunning" created="Wed, 4 May 2011 19:19:25 +0100"  >&lt;p&gt;This latest Hudson report appears to be a Jenkins problem rather than a real test failure.&lt;/p&gt;</comment>
                            <comment id="13030646" author="marshall" created="Mon, 9 May 2011 09:15:09 +0100"  >&lt;p&gt;I&apos;ve just checked in a change to allow setdata ops to work properly. Previously I was using a struct with a union of all the op types. This worked well on C as you can specify which field of union to initialize to using extended struct initializers. This isn&apos;t supported on C++ without special compiler flags so I decided that was a bad approach. So I opted for a much simpler solution. Put all the necessary arguments into the main op_t structure and provide some simple macros that provide simple convenience wrappers to only take the arguments appropriate for that op (and in the same order as the non-multi version). This provides very simple caller syntax with no added overhead or memory allocations.&lt;/p&gt;

&lt;p&gt;I also added an entirely new C API test suite that&apos;s a port of the tests from the Java Client side.&lt;/p&gt;

&lt;p&gt;There is still a limitation on C API setdata op in that it can&apos;t pass back Stat structure results to caller. This is causing two of my new tests to fail so that part of the tests are commented out for now.&lt;/p&gt;
</comment>
                            <comment id="13030810" author="tdunning" created="Mon, 9 May 2011 18:00:15 +0100"  >&lt;p&gt;This is a WIP patch.  Marshall says that he has a setData issue still that is giving a bit of pause.&lt;/p&gt;

&lt;p&gt;This is still a very good reference for review.&lt;/p&gt;</comment>
                            <comment id="13030821" author="hadoopqa" created="Mon, 9 May 2011 18:23:34 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478618/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478618/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/252//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/252//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/252//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/252//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/252//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/252//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13031010" author="marshall" created="Tue, 10 May 2011 05:42:22 +0100"  >&lt;p&gt;I&apos;ve just committed a change to fix the bugs with the C API and a setdata op inside a multi op. It was mostly due to bugs in the test code, but it &lt;b&gt;did&lt;/b&gt; identify a real bug inside zookeeper.c so I&apos;m glad I finally tracked it down.&lt;/p&gt;

&lt;p&gt;Everything should be pretty stable and workable now. Comments regarding the current state:&lt;/p&gt;

&lt;p&gt;(1) There are a few &quot;FIXME&quot; comments in the code I&apos;ve checked in that I&apos;d like input from anyone who reviews&lt;br/&gt;
(2) C API unit tests don&apos;t work in single-threaded mode. I believe this is due to limitations in the unit test I copied as starting point for my unit test. Would love any input on this if anyone can take a look at what I&apos;m doing wrong there.&lt;br/&gt;
(3) The Java API supports a &quot;CHECK_OP&quot; inside the multi-op but the C API does not. I will try to implement that soon.&lt;/p&gt;</comment>
                            <comment id="13031021" author="tdunning" created="Tue, 10 May 2011 06:09:53 +0100"  >&lt;p&gt;Here is Marshall&apos;s code in the form of an updated patch against trunk&lt;/p&gt;</comment>
                            <comment id="13031022" author="hadoopqa" created="Tue, 10 May 2011 06:11:20 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478667/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478667/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/253//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/253//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13031023" author="tdunning" created="Tue, 10 May 2011 06:16:14 +0100"  >&lt;p&gt;Second try getting a usable diff.&lt;/p&gt;</comment>
                            <comment id="13031029" author="hadoopqa" created="Tue, 10 May 2011 06:43:58 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478668/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478668/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/254//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/254//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/254//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/254//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/254//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/254//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13031055" author="marshall" created="Tue, 10 May 2011 07:48:12 +0100"  >&lt;p&gt;In regards to my comment above: &quot;(3) The Java API supports a &quot;CHECK_OP&quot; inside the multi-op but the C API does not. I will try to implement that soon.&quot; I&apos;ve just checked in a fix for this. And actually, the Java server and client side for CHECK_OP (CheckVersionRequest) weren&apos;t fully implemented either. I flushed out all the details and got it working correctly on both sides.&lt;/p&gt;

&lt;p&gt;The C API allows passing in an optional pointer for the Stat structure to get back the stat of the node in question. Or just pass in NULL if you only care about doing the version check itself. &lt;/p&gt;</comment>
                            <comment id="13031056" author="marshall" created="Tue, 10 May 2011 07:50:05 +0100"  >&lt;p&gt;Pending comments and feedback, I think after Ted builds a new patch against my latest commit (&lt;a href=&quot;https://github.com/tdunning/zookeeper/commit/9da6439682c1bc23ca922473951f37e02c5a73b7&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/zookeeper/commit/9da6439682c1bc23ca922473951f37e02c5a73b7&lt;/a&gt;) then I think I&apos;m done with this feature... Would love folks to start looking it over and give me some feedback.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13031229" author="marshall" created="Tue, 10 May 2011 16:15:07 +0100"  >&lt;p&gt;Just added a new commit to Ted&apos; branch to fix check op&apos;s in a non-multi context. From my commit message:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt; - Fix CHECK_OP to work in a non-multi context.&lt;/p&gt;

&lt;p&gt;    The CHECK_OP wasn&apos;t implemented to work in a non-multi context. It was added&lt;br/&gt;
    specifically for multi-op, but for completeness and consistency I felt it was&lt;br/&gt;
    better to go ahead and support it in a non-multi context.&lt;/p&gt;

&lt;p&gt;    Also added some unit test code around the multi-op version of a CHECK_OP as&lt;br/&gt;
    well as a non-multi op versio nof CHECK_OP.&lt;/p&gt;

&lt;p&gt;    Also fixed/added comments to zookeper.h regarding new APIs.&lt;/p&gt;</comment>
                            <comment id="13031405" author="tdunning" created="Tue, 10 May 2011 22:56:34 +0100"  >&lt;p&gt;Includes Marshall&apos;s latest updates.&lt;/p&gt;</comment>
                            <comment id="13031419" author="hadoopqa" created="Tue, 10 May 2011 23:24:01 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12478739/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12478739/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/257//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/257//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/257//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/257//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/257//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/257//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13032575" author="tyree731" created="Thu, 12 May 2011 19:47:32 +0100"  >&lt;p&gt;Great job all around! Some comments on the C library portion of the patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The zoo_acheck comment includes documentation on a member &apos;stat&apos; that is not an argument&lt;/li&gt;
	&lt;li&gt;The zoo_check comment has the parameter stat listed as _stat&lt;/li&gt;
	&lt;li&gt;In create_completion_entry, you commented out the else case where you set c-&amp;gt;clist to NULL. Did you mean to leave this in there?&lt;/li&gt;
	&lt;li&gt;In op_result_string_completion, you memcpy from the value onto data-&amp;gt;value based on the size of value. Is data-&amp;gt;value guaranteed to be larger than value?&lt;/li&gt;
	&lt;li&gt;You only assert result in op_result_string_completion, but none of the other op_result_* functions&lt;/li&gt;
	&lt;li&gt;Do you not need to set result-&amp;gt;err in op_result_multi_completion?&lt;/li&gt;
	&lt;li&gt;In zoo_amulti, any reason &quot;int index = 0;&quot; isn&apos;t a few lines down right before it&apos;s used?&lt;/li&gt;
	&lt;li&gt;Slick zoo_amulti code, very nicely done.&lt;/li&gt;
	&lt;li&gt;In testCreate you compare results&lt;span class=&quot;error&quot;&gt;&amp;#91;*&amp;#93;&lt;/span&gt;.err to 0, which will work, but shouldn&apos;t you compare it to ZOK? Or do I misunderstand op_result_t.&lt;/li&gt;
	&lt;li&gt;In testDelete, your comment should say &quot;// &apos;/multi2&apos; should have been deleted&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All-in-all the code looks great in the C client. Nicely done.&lt;/p&gt;</comment>
                            <comment id="13032647" author="tdunning" created="Thu, 12 May 2011 21:24:30 +0100"  >&lt;p&gt;Stephen,&lt;/p&gt;

&lt;p&gt;Nice work on the code review.  Marshall will have to comment on your points, but it is clear that you&lt;br/&gt;
read the code well and deserve a stroke for that!&lt;/p&gt;</comment>
                            <comment id="13032669" author="marshall" created="Thu, 12 May 2011 21:52:47 +0100"  >&lt;p&gt;Stephen, &lt;/p&gt;

&lt;p&gt;Thanks very much for doing a thorough code review of the C library. It is super appreciated. I think all your points are valid. Specifically, comments in-line below:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The zoo_acheck comment includes documentation on a member &apos;stat&apos; that is not an argument&lt;/li&gt;
	&lt;li&gt;The zoo_check comment has the parameter stat listed as _stat&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Copy-paste errors &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Fixed.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In create_completion_entry, you commented out the else case where you set c-&amp;gt;clist to NULL. Did you mean to leave this in there?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I had at one point had that field as a pointer instead of a struct. Instead I should probably zero out that structure to be safest. It shouldn&apos;t matter in this case, but it&apos;s better to be overly cautious I think.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In op_result_string_completion, you memcpy from the value onto data-&amp;gt;value based on the size of value. Is data-&amp;gt;value guaranteed to be larger than value?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;No, that&apos;s a very good catch. I need to take the length into account and deal with that error path accordingly as we do elsewhere. I&apos;ll check in a fix for this.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;You only assert result in op_result_string_completion, but none of the other op_result_* functions&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Nice catch. I&apos;ll add that to my fixes.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Do you not need to set result-&amp;gt;err in op_result_multi_completion?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;No, I don&apos;t think so. Unlike the other op_result_* completions, this one doesn&apos;t take a op_result_t that I fill in the return code. This purpose of this completion is to hold the list of completions for each op in the multi op. That way when we see a multi op, we can pop off the completions and call them. You may have noticed I append a COMPLETION_VOID (I called this the &quot;tail completion&quot; at the end of the multi&apos;s completion list. This is a void completion that &lt;b&gt;does&lt;/b&gt; set the return value in the completion so it propagates to the caller. Does that make sense? I&apos;ll add some comments to the completion to explain.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In zoo_amulti, any reason &quot;int index = 0;&quot; isn&apos;t a few lines down right before it&apos;s used?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Nope, probably result of moving stuff around a lot. I&apos;ll clean that up.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Slick zoo_amulti code, very nicely done.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;:-] THANKS!! I wrestled with the implementation for a long time. I&apos;m happy with how it came out.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In testCreate you compare results&lt;span class=&quot;error&quot;&gt;&amp;#91;*&amp;#93;&lt;/span&gt;.err to 0, which will work, but shouldn&apos;t you compare it to ZOK? Or do I misunderstand op_result_t.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Yes, you&apos;re right. I also should reverse those arguments to CPPUNIT_ASSERT_EQUAL as we always have the expected followed by the actual. I also found that error elsewhere in that test file that I fixed.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In testDelete, your comment should say &quot;// &apos;/multi2&apos; should have been deleted&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Yep, good catch.&lt;/p&gt;

&lt;p&gt;Again, thanks for all the valuable and appreciate feedback. I&apos;ll commit these changes shortly.&lt;/p&gt;</comment>
                            <comment id="13032676" author="marshall" created="Thu, 12 May 2011 22:02:34 +0100"  >&lt;p&gt;Ted, I pushed my latest changes to fix the things Stephen identified in his review. &lt;/p&gt;</comment>
                            <comment id="13032733" author="jiraposter@reviews.apache.org" created="Thu, 12 May 2011 23:52:47 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;br/&gt;
succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  CHANGES.txt d22f1f0 &lt;br/&gt;
  src/c/Makefile.am 65830fe &lt;br/&gt;
  src/c/configure.ac cdea898 &lt;br/&gt;
  src/c/include/proto.h 843032f &lt;br/&gt;
  src/c/include/zookeeper.h c055edb &lt;br/&gt;
  src/c/src/zookeeper.c db715b0 &lt;br/&gt;
  src/c/tests/TestMulti.cc PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;br/&gt;
  src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java 68970d2 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java 9774fb2 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;br/&gt;
  src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;br/&gt;
  src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;br/&gt;
  src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;br/&gt;
  src/zookeeper.jute 7d96f32 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;

&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Ted&lt;/p&gt;
</comment>
                            <comment id="13032736" author="tdunning" created="Thu, 12 May 2011 23:54:25 +0100"  >&lt;p&gt;Latest updates from Marshall.  This is also the same as the patch for the review request that I just posted on RB. &lt;/p&gt;</comment>
                            <comment id="13032862" author="hadoopqa" created="Fri, 13 May 2011 08:26:38 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12479027/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12479027/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1099329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/259//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/259//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13033042" author="marshall" created="Fri, 13 May 2011 14:57:34 +0100"  >&lt;p&gt;Ted, are you going to look at why this patch wouldn&apos;t apply cleanly or do you want me to investigate? Thanks!&lt;/p&gt;</comment>
                            <comment id="13033163" author="tdunning" created="Fri, 13 May 2011 19:03:46 +0100"  >&lt;p&gt;I will take a look.  It is likely the prefix issue.&lt;/p&gt;</comment>
                            <comment id="13033636" author="marshall" created="Sun, 15 May 2011 04:09:43 +0100"  >&lt;p&gt;Ted, I pushed another update to your branch.  The macro names in proto.h didn&apos;t adhere to normal zookeeper naming convention of prefixing everything (externally visible) with ZOO_. That caused conflicts when including other packages that already used &quot;CHECK_OP&quot; (which I ran into today). So I renamed them all as well as the places they were used to use the right naming convention.&lt;/p&gt;

&lt;p&gt;Note: This won&apos;t break any compatibility anywhere as we were never exposing this list of defines before the multi op code was added.&lt;/p&gt;</comment>
                            <comment id="13033654" author="tdunning" created="Sun, 15 May 2011 07:56:47 +0100"  >&lt;p&gt;Great.&lt;/p&gt;

&lt;p&gt;I will use this as an excuse to jump on the problem with the patch again.&lt;/p&gt;

&lt;p&gt;On Sat, May 14, 2011 at 8:09 PM, Marshall McMullen (JIRA)&lt;/p&gt;
</comment>
                            <comment id="13033656" author="tdunning" created="Sun, 15 May 2011 09:02:41 +0100"  >&lt;p&gt;Name changes in the C code only.&lt;/p&gt;</comment>
                            <comment id="13034452" author="marshall" created="Tue, 17 May 2011 01:33:51 +0100"  >&lt;p&gt;In line with my prior change to rename externally visible macros to have ZOO_ prefix, I&apos;ve done the same to op_t and op_result_t so they are now zoo_op_t and zoo_op_result_t. &lt;/p&gt;

&lt;p&gt;Name changes in the C code only but important to avoid namespace pollution.&lt;/p&gt;</comment>
                            <comment id="13034466" author="hadoopqa" created="Tue, 17 May 2011 02:02:26 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12479254/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12479254/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1103811.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/265//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/265//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13034589" author="breed" created="Tue, 17 May 2011 06:52:09 +0100"  >&lt;p&gt;i&apos;m reviewing the patch. you guys did a lot of great work. i have a couple of questions. i see what is happening in the code, but i want to make sure i understand the semantics:&lt;/p&gt;

&lt;p&gt;1) if i pass a list of multi ops and there is an error, does it all fail?&lt;br/&gt;
2) what is the use case for the check operation?&lt;/p&gt;
</comment>
                            <comment id="13034592" author="tdunning" created="Tue, 17 May 2011 07:01:49 +0100"  >

&lt;p&gt;Yes.&lt;/p&gt;



&lt;p&gt;Imagine a graph where each node is a znode.  If you want to update a node&lt;br/&gt;
based on the contents of its neighbors, you would first read the list of&lt;br/&gt;
neighbors from the node, then read each of the neighbors contents, and then&lt;br/&gt;
finally update the original node.  You might not want to complete the&lt;br/&gt;
update, however, if one of the neighbors had been modified in the meantime.&lt;/p&gt;

&lt;p&gt;To accomplish this, you would include check operations for each of neighbors&lt;br/&gt;
in your update as well as a version for the node being updated.&lt;/p&gt;

&lt;p&gt;This is essentially a multi-node extension of the standard&lt;br/&gt;
read-modify-write-if-correct-version idiom widely used in normal ZK work.&lt;/p&gt;</comment>
                            <comment id="13034593" author="marshall" created="Tue, 17 May 2011 07:02:22 +0100"  >&lt;p&gt;Benjamin,&lt;/p&gt;

&lt;p&gt;Thanks very much!! This was a lot of work, but also very interesting. Really glad to have been able to jump in and work on it. As to your questions:&lt;/p&gt;

&lt;p&gt;1) Yes, if there is an error in any of the ops in the multi-op, then the entire multi-op fails. On the java client, this will throw an exception corresponding to the error in the op that caused the multi-op to fail. You also optionally get an array populated with the results of each op in the multi-op in case you want to iterate over it and see which one failed. The semantics of the error codes in that result array are as follows&lt;/p&gt;

&lt;p&gt;ZOK: the op would have succeeded&lt;br/&gt;
ZRUNTIMEINCONSISTENCY: We never tried the op because it was &lt;b&gt;after&lt;/b&gt; the op that caused the multi-op to fail. I chose this error code (somewhat arbitrarily) because it would violate transactional consistency if we were to have committed an op inside a failing multi-op.&lt;br/&gt;
Anything else: The error of the failing op.&lt;/p&gt;

&lt;p&gt;2) Ted, feel free to jump in here, but I believe the idea is to not proceed with the ops that follow in a multi op if a version on some other node has changed out from under us. e.g. if you have 100 ops in a multi op, and you get to the 50th one, it&apos;s a way to do a sanity check of &quot;hey, don&apos;t go past this point if any other client changed this node&quot;... Does that make sense?&lt;/p&gt;
</comment>
                            <comment id="13034594" author="marshall" created="Tue, 17 May 2011 07:03:56 +0100"  >&lt;p&gt;Also, regarding #1 above... on the C client, we don&apos;t throw exceptions obviously. The C client returns the error of the failing op in the multi-op. The semantics are the same though as it takes an optional array to fill in with the results of all the ops in the multiop. This array can be used like in the Java client to see which op caused the multi op to fail...&lt;/p&gt;</comment>
                            <comment id="13034851" author="breed" created="Tue, 17 May 2011 17:20:55 +0100"  >&lt;p&gt;nice design. ok back to reviewing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13034940" author="fournc" created="Tue, 17 May 2011 19:22:24 +0100"  >&lt;p&gt;It would be really great if we could get &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1046&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-1046&lt;/a&gt; merged in before this patch. This feature will require a few additional changes on 1046 but given that 1046 is an outstanding bug I&apos;d like to see it fixed before we add the feature.&lt;/p&gt;</comment>
                            <comment id="13035623" author="marshall" created="Wed, 18 May 2011 20:56:03 +0100"  >&lt;p&gt;Ted, others...&lt;/p&gt;

&lt;p&gt;I&apos;ve just pushed a commit to Ted&apos;s private branch to fix a few minor error handling issues I discovered while integrating this into our own product. Details below from my commit message:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt; - Fix error code handling.                                                                                                                      &lt;/p&gt;

&lt;p&gt;Error codes were not propagating out from the server properly.                                                                                                &lt;br/&gt;
The original design dictated that if the multi op fails, then                                                                                                 &lt;br/&gt;
all the entries in the multi result would be an error result. The                                                                                             &lt;br/&gt;
error code in that error result would be used to determine which                                                                                              &lt;br/&gt;
op failed in the multi-op. Specifically, error codes in the multi result:                                                                                     &lt;/p&gt;

&lt;p&gt;0: The op would have succeeded had the entire multi op not failed                                                                                             &lt;br/&gt;
ZRUNTIMEINCONSISTENCY: The op was AFTER the failing op and was aborted                                                                                        &lt;br/&gt;
Anything else: The real error code for the op that caused the entire                                                                                          &lt;br/&gt;
multi op to fail (this is the one that is thrown as well).                                                                                                    &lt;/p&gt;

&lt;p&gt;Also, discovered another error code issue. If a op in the multi                                                                                               &lt;br/&gt;
op is after the failing op, it still ran through PrepRequestProcessor.                                                                                        &lt;br/&gt;
That was confusing (and unecessary) as we know the entire multi op                                                                                            &lt;br/&gt;
is going to fail. Modified it to abort all ops after a failing op                                                                                             &lt;br/&gt;
to avoid unecessary work and also to avoid confusion in the log files.                                                                                        &lt;/p&gt;

&lt;p&gt;Also added some unit tests to verify all above described changes. &lt;/p&gt;</comment>
                            <comment id="13035792" author="tdunning" created="Wed, 18 May 2011 23:19:26 +0100"  >&lt;p&gt;Patch will be updated shortly.  I will also update reviewboard if I hear&lt;br/&gt;
from somebody that this will not damage ongoing reviews.&lt;/p&gt;

&lt;p&gt;Also, the &quot;private branch&quot; mentioned below is available to anyone at&lt;br/&gt;
&lt;a href=&quot;https://github.com/tdunning/zookeeper&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/zookeeper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Wed, May 18, 2011 at 12:56 PM, Marshall McMullen (JIRA)&lt;/p&gt;
</comment>
                            <comment id="13035858" author="breed" created="Thu, 19 May 2011 00:44:55 +0100"  >&lt;p&gt;please update. i&apos;m still digging into how everything fits together, so i haven&apos;t really started any significant comments.&lt;/p&gt;

&lt;p&gt;i do have a general comment. we need to get a bit more documentation in both javadoc and forrest. (i&apos;m i remembering correctly that there was some doxygen?)&lt;/p&gt;</comment>
                            <comment id="13035917" author="tdunning" created="Thu, 19 May 2011 02:33:53 +0100"  >&lt;p&gt;Updated to trunk.  Includes Marshall&apos;s latest naming tweaks.&lt;/p&gt;</comment>
                            <comment id="13035919" author="tdunning" created="Thu, 19 May 2011 02:35:37 +0100"  >&lt;p&gt;Updated review board&lt;/p&gt;</comment>
                            <comment id="13035920" author="jiraposter@reviews.apache.org" created="Thu, 19 May 2011 02:36:48 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-05-19 01:35:29.152433)&lt;/p&gt;


&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Latest small changes from Marshall.&lt;br/&gt;
Updated to trunk.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;br/&gt;
succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/c/Makefile.am 65830fe &lt;br/&gt;
  src/c/include/proto.h 843032f &lt;br/&gt;
  src/c/include/zookeeper.h c055edb &lt;br/&gt;
  src/c/src/zookeeper.c db715b0 &lt;br/&gt;
  src/c/tests/TestMulti.cc PRE-CREATION &lt;br/&gt;
  src/c/tests/TestOperations.cc f9441ea &lt;br/&gt;
  src/c/tests/ZKMocks.cc a75dce6 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;br/&gt;
  src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;br/&gt;
  src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;br/&gt;
  src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;br/&gt;
  src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;br/&gt;
  src/zookeeper.jute 7d96f32 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;

&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Ted&lt;/p&gt;
</comment>
                            <comment id="13035941" author="tdunning" created="Thu, 19 May 2011 03:12:27 +0100"  >&lt;p&gt;Added some javadocs per request.&lt;/p&gt;</comment>
                            <comment id="13035945" author="jiraposter@reviews.apache.org" created="Thu, 19 May 2011 03:14:48 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-05-19 02:13:14.619335)&lt;/p&gt;


&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Added javadocs&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;br/&gt;
succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/c/Makefile.am 65830fe &lt;br/&gt;
  src/c/include/proto.h 843032f &lt;br/&gt;
  src/c/include/zookeeper.h c055edb &lt;br/&gt;
  src/c/src/zookeeper.c db715b0 &lt;br/&gt;
  src/c/tests/TestMulti.cc PRE-CREATION &lt;br/&gt;
  src/c/tests/TestOperations.cc f9441ea &lt;br/&gt;
  src/c/tests/ZKMocks.cc a75dce6 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;br/&gt;
  src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;br/&gt;
  src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;br/&gt;
  src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;br/&gt;
  src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;br/&gt;
  src/zookeeper.jute 7d96f32 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;

&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Ted&lt;/p&gt;
</comment>
                            <comment id="13036017" author="hadoopqa" created="Thu, 19 May 2011 07:25:11 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12479713/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12479713/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1103811.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/276//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/276//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/276//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/276//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/276//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/276//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13036601" author="breed" created="Fri, 20 May 2011 01:26:27 +0100"  >&lt;p&gt;i&apos;m almost done with the review. (it&apos;s a big patch!!!) there is a high level issue i&apos;d like to bring up: i don&apos;t think the check request should return anything because if the check succeeds, you already know the information that is returned. (it&apos;s what you expected.) if the check fails, you just get an error code. if check doesn&apos;t return anything, we can either drop it if it succeeds in PrepRequestProcesor or propogate an error. this simplifies the rest of the pipeline a bit because they will not have to care about the check op.&lt;/p&gt;</comment>
                            <comment id="13036605" author="marshall" created="Fri, 20 May 2011 01:30:22 +0100"  >&lt;p&gt;Benjamin,&lt;/p&gt;

&lt;p&gt;I completely agree. At my company our internal code that uses zookeeper and the new multi op support does exactly what you suggest. We didn&apos;t see any need for the return from a check op, so we ignore it completely. I think your suggestion is a good one.&lt;/p&gt;</comment>
                            <comment id="13036609" author="tdunning" created="Fri, 20 May 2011 01:42:10 +0100"  >&lt;p&gt;Well, I am not entirely sure about ignoring the check result.&lt;/p&gt;

&lt;p&gt;First, the order and count of results is very handy to make sure that you can attach results back to which operation caused the result.  I realize that there is no conditionality here but one-for-one correspondence in the results is very nice.  The idea that multi transforms ops into results is nice and simple.&lt;/p&gt;

&lt;p&gt;It is true that it is hard to imagine that the Stat structure that comes back has any new information in it.  I would be happy if the client inserts place-holder results.  My original motivation was to design check as if it were a call to an exists method.  As you point out, the client probably have done that already.  &lt;/p&gt;

&lt;p&gt;Would you be happy with the client side insertion only?  This would give all of the economies you want, but would preserve a simpler facade for the user.&lt;/p&gt;</comment>
                            <comment id="13036642" author="marshall" created="Fri, 20 May 2011 04:10:23 +0100"  >&lt;p&gt;Ted brings up a very valid point. All of the code in the server and both Java and C clients always assume the one-to-one correspondence between the number of ops submitted and the number of results. &lt;/p&gt;

&lt;p&gt;But, I&apos;m not sure it needs to be a Stat that we put into the results. It could just have a placeholder or boolean value (which would always been one on a successful multi-op). &lt;/p&gt;

&lt;p&gt;Ted, I&apos;m not sure I understand what you mean by client-side insertion only. Can you elaborate on what that would entail? Also, I&apos;d be hesitant to do anything that makes the server-side (or the C client) processing any more complex or difficult than it already is....&lt;/p&gt;</comment>
                            <comment id="13036664" author="jiraposter@reviews.apache.org" created="Fri, 20 May 2011 05:14:47 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/#review689&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#review689&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;src/c/include/zookeeper.h&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1380&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1380&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    shouldn&apos;t this be a union&lt;/p&gt;



&lt;p&gt;src/c/include/zookeeper.h&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1381&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1381&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    it isn&apos;t clear to me that we should expose check outside of a multitransaction.&lt;/p&gt;



&lt;p&gt;src/java/main/org/apache/zookeeper/Transaction.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1382&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1382&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    should we also have an asynchronous version?&lt;/p&gt;



&lt;p&gt;src/java/main/org/apache/zookeeper/ZooKeeper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1383&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1383&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    i think we also need an asynchronous version.&lt;/p&gt;



&lt;p&gt;src/java/main/org/apache/zookeeper/server/DataTree.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1384&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1384&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    if stat didn&apos;t return anything, we could skip this altogether. if we are going to return something, should we return more than the version?&lt;/p&gt;



&lt;p&gt;src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1385&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1385&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    i don&apos;t think we want to log this at all do we?&lt;/p&gt;



&lt;p&gt;src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1386&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1386&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    don&apos;t use tabs. spaces!&lt;/p&gt;



&lt;p&gt;src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1392&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1392&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    i think we are only half atomic here. if the multi txn fails half way through, it will not be applied to the database, but we will still have recorded it as pending, so we may fail later changes.&lt;/p&gt;

&lt;p&gt;    for example, if there is a create for a znode that would otherwise succeed, but fails do to a later (in the multi txn) check failing. there will be a pending change record created, so even though the create failed, later creates to that znode will result in a node exists error.&lt;/p&gt;



&lt;p&gt;src/zookeeper.jute&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1379&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1379&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    i don&apos;t think we should use TxnHeader since all we need is the type.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Benjamin&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-05-19 02:13:14, Ted Dunning wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-05-19 02:13:14)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/Makefile.am 65830fe &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/proto.h 843032f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/zookeeper.h c055edb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/src/zookeeper.c db715b0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestMulti.cc PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestOperations.cc f9441ea &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/ZKMocks.cc a75dce6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/zookeeper.jute 7d96f32 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Ted&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13036666" author="breed" created="Fri, 20 May 2011 05:19:47 +0100"  >&lt;p&gt;yeah, i was thinking along the same lines as you two: a boolean place holder would work out nicely.&lt;/p&gt;</comment>
                            <comment id="13037165" author="tdunning" created="Sat, 21 May 2011 00:54:37 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Ted, I&apos;m not sure I understand what you mean by client-side insertion only. Can you elaborate on what that would entail? Also, I&apos;d be hesitant to do anything that makes the server-side (or the C client) processing any more complex or difficult than it already is....&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What I meant was that the rules for inserting place-holder results are pretty simple.  As such, if it is preferable to not return results from the server in these spots, then a simple merge could be used to create a results list with place-holder structures.  Something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Iterator&amp;lt;Result&amp;gt; i = results.iterator();
List&amp;lt;Result&amp;gt; r = Lists.newHashList();
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (op in ops) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (op.type() == CHECK) {
    r.add(PLACE_HOLDER);
  } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
    r.add(i.next());
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I agree that complication of the client is bad, but this isn&apos;t much and if it makes the server side easier, then it isn&apos;t a big deal.  My guess is that the server side solution is very simple (as in, just quit setting the version).  Or the cost of getting the version may be low enough we really don&apos;t care.&lt;/p&gt;
</comment>
                            <comment id="13037217" author="breed" created="Sat, 21 May 2011 02:21:59 +0100"  >&lt;p&gt;i think propagating a boolean from preprequestprocessor should work well. the main thing i wanted to avoid is adding the processing logic in the datatree.&lt;/p&gt;</comment>
                            <comment id="13037225" author="jiraposter@reviews.apache.org" created="Sat, 21 May 2011 03:01:47 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/#review706&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#review706&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;src/java/main/org/apache/zookeeper/ZooKeeper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/#comment1410&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#comment1410&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    What would you say about deferring this to a separate JIRA?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ted&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-05-19 02:13:14, Ted Dunning wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-05-19 02:13:14)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/Makefile.am 65830fe &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/proto.h 843032f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/zookeeper.h c055edb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/src/zookeeper.c db715b0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestMulti.cc PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestOperations.cc f9441ea &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/ZKMocks.cc a75dce6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/zookeeper.jute 7d96f32 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Ted&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13037445" author="breed" created="Sat, 21 May 2011 21:30:25 +0100"  >&lt;p&gt;i think deferring the async version to a separate jira is reasonable since it is hard to keep the code fresh. we should open the jira before we commit the change though.&lt;/p&gt;</comment>
                            <comment id="13037452" author="tdunning" created="Sat, 21 May 2011 22:10:39 +0100"  >&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1066&quot; title=&quot;Multi should have an async version&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1066&quot;&gt;ZOOKEEPER-1066&lt;/a&gt; for the asynchronous version of multi.&lt;/p&gt;

&lt;p&gt;(I should file a JIRA for my inability to type asynchronous in less than 5 attempts as well)&lt;/p&gt;</comment>
                            <comment id="13038556" author="marshall" created="Tue, 24 May 2011 14:41:55 +0100"  >&lt;p&gt;Hey Ted, I wanted to reply to some of the comments Benjamin made on review&lt;br/&gt;
board, but I can&apos;t figure out how to do so. There&apos;s no place that I see to&lt;br/&gt;
add comments or to login to the interface... should I just post my comments&lt;br/&gt;
on Jira along with the original bug?&lt;/p&gt;

&lt;p&gt;Thanks...&lt;/p&gt;

</comment>
                            <comment id="13038642" author="phunt" created="Tue, 24 May 2011 17:00:39 +0100"  >&lt;p&gt;Hi Marshall, when you open this link &lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt; do you see a &quot;login&quot; and &quot;register&quot; links in the top right? (I do in chrome incognito window) If this is your first time on apache rb then you&apos;ll need to register.&lt;/p&gt;</comment>
                            <comment id="13038656" author="tdunning" created="Tue, 24 May 2011 17:49:50 +0100"  >&lt;p&gt;Marshall,&lt;/p&gt;

&lt;p&gt;After logging in as Patrick says, you also need to click on the number on the far left.  That will&lt;br/&gt;
pop up an overlay window that will let you type in your response.  Or riposte as the case may be.&lt;/p&gt;

&lt;p&gt;If the replies are general rather than line by line, you can also just put them here.  That can&lt;br/&gt;
even be better.&lt;/p&gt;</comment>
                            <comment id="13038944" author="jiraposter@reviews.apache.org" created="Wed, 25 May 2011 04:42:47 +0100"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/c/include/zookeeper.h, line 1119&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19416#file19416line1119&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19416#file19416line1119&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     it isn&apos;t clear to me that we should expose check outside of a multitransaction.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s a valid point. I did it for completeness, but there&apos;s really no need to have a check op outside a multi op. It would clean up the code as well if I removed it. I&apos;ll try to get that done tonight as well.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/java/main/org/apache/zookeeper/Transaction.java, line 57&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19425#file19425line57&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19425#file19425line57&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     should we also have an asynchronous version?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. Ted&apos;s created a new jira case for this.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/java/main/org/apache/zookeeper/ZooKeeper.java, line 801&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19427#file19427line801&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19427#file19427line801&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     i think we also need an asynchronous version.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. Ted&apos;s created a new jira case for this.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/java/main/org/apache/zookeeper/server/DataTree.java, line 817&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19428#file19428line817&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19428#file19428line817&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     if stat didn&apos;t return anything, we could skip this altogether. if we are going to return something, should we return more than the version?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not sure I understand... can you elaborate ?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java, line 483&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19430#file19430line483&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19430#file19430line483&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     i don&apos;t think we want to log this at all do we?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. I&apos;ll clean that up tonight.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java, line 484&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19430#file19430line484&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19430#file19430line484&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     don&apos;t use tabs. spaces!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry... at my day job we use tabs (I know) and I forgot to switch my settings around &amp;#8211; I&apos;m usually very careful about that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java, line 489&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19430#file19430line489&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19430#file19430line489&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     i think we are only half atomic here. if the multi txn fails half way through, it will not be applied to the database, but we will still have recorded it as pending, so we may fail later changes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     for example, if there is a create for a znode that would otherwise succeed, but fails do to a later (in the multi txn) check failing. there will be a pending change record created, so even though the create failed, later creates to that znode will result in a node exists error.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought not applying it to the database was sufficient, but perhaps I&apos;m wrong. I thought the pending change records would get discarded if the multi op failed. Do I need to do that explicitly somehow? What are your thoughts on how to deal with this? &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/zookeeper.jute, line 267&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19440#file19440line267&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19440#file19440line267&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     i don&apos;t think we should use TxnHeader since all we need is the type.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. I&apos;ll see about refactoring that.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2011-05-20 04:15:05, Benjamin Reed wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/c/include/zookeeper.h, line 273&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19416#file19416line273&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19416#file19416line273&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     shouldn&apos;t this be a union&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It originally was a union but I ran into some annoyances when trying to use the C API from C++ code as C++ won&apos;t let you use designated initializers unless you compile with a newer --std flag (which, when enabled, caused other zookeeper code not to compile from C++). e.g. you get warnings like:&lt;/p&gt;

&lt;p&gt;tests/TestMulti.cc:689: warning: extended initializer lists only available with -std=c+&lt;ins&gt;0x or -std=gnu&lt;/ins&gt;+0x&lt;/p&gt;

&lt;p&gt;Anyhow, I think the current implementation is a bit of a hack, and would prefer a union as well. Let me take another look at this tonight.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Marshall&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/#review689&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#review689&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-05-19 02:13:14, Ted Dunning wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-05-19 02:13:14)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/Makefile.am 65830fe &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/proto.h 843032f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/zookeeper.h c055edb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/src/zookeeper.c db715b0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestMulti.cc PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestOperations.cc f9441ea &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/ZKMocks.cc a75dce6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/zookeeper.jute 7d96f32 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Ted&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13038981" author="marshall" created="Wed, 25 May 2011 07:40:42 +0100"  >&lt;p&gt;Thanks Patrick, Ted. Don&apos;t know how I missed that the first time &apos;round... too little sleep I suppose &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. &lt;/p&gt;

&lt;p&gt;I&apos;ve commented Benjamin&apos;s review. I&apos;m also going to check in some updated changes to github to fix the things he requested fixing. &lt;/p&gt;</comment>
                            <comment id="13038986" author="jiraposter@reviews.apache.org" created="Wed, 25 May 2011 07:55:47 +0100"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-05-21 02:00:22, Ted Dunning wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/java/main/org/apache/zookeeper/ZooKeeper.java, line 801&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/739/diff/4/?file=19427#file19427line801&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff/4/?file=19427#file19427line801&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     What would you say about deferring this to a separate JIRA?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does the separate JIRA you created address both of Benjamin&apos;s async requests? I think he wanted an async multi method as well as an async commit method...?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Marshall&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/#review706&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#review706&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-05-19 02:13:14, Ted Dunning wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-05-19 02:13:14)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/Makefile.am 65830fe &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/proto.h 843032f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/zookeeper.h c055edb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/src/zookeeper.c db715b0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestMulti.cc PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestOperations.cc f9441ea &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/ZKMocks.cc a75dce6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/zookeeper.jute 7d96f32 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Ted&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13038987" author="marshall" created="Wed, 25 May 2011 07:55:53 +0100"  >&lt;p&gt;I&apos;ve just pushed a change to github with the changes requested by Benjamin in his review on review board. It addresses these core issues:&lt;/p&gt;

&lt;p&gt;(1) Tighten up C API to use a union of structs for each op type instead of one mismashed set of fields. Removed macros to init zoo_op_t and created more explicit init functions for each type of op.&lt;/p&gt;

&lt;p&gt;(2) Removed zoo_check and zoo_acheck as there&apos;s no need to expose the check operation outside the context of a multi op. It was only added for completeness but it&apos;s totally unnecessaryR and needless adds clutter.&lt;/p&gt;

&lt;p&gt;(3) Removed superfluous logging in PrepRequestProcessor indicating ops were being skipped after a failing op in a multi op. There&apos;s already logging when the op fails, and a very clear log statement indicating all subsequent ops in the multi op will be skipped.&lt;/p&gt;

&lt;p&gt;(4) Converted all tabs to spaces (in my day job we use tabs and I forgot to adjust my editor&apos;s settings)&lt;/p&gt;

&lt;p&gt;(5) Removed TxnHeader from Txn since all we really need is the type. Replaced it with one int for the type.&lt;/p&gt;</comment>
                            <comment id="13039500" author="breed" created="Thu, 26 May 2011 04:31:39 +0100"  >&lt;p&gt;excellent. wrt the pending ops in the prerequestprocessor. we have to undo them if we abort the mult-update. otherwise, the pending ops can cause future ops to incorrectly fail. (for example, if there was a pending create in a multi-update that is aborted, future creates will fail because the pending op data structure says that there is a create in process.) we have to update both the list and hashmap of pending operations. we also need to be careful since the pending operations are modified by the thread executing finalrequestprocessor.&lt;/p&gt;</comment>
                            <comment id="13040095" author="marshall" created="Fri, 27 May 2011 08:01:16 +0100"  >&lt;p&gt;I&apos;ve just checked in another change to Ted&apos;s github branch that fixes a nasty bug in the C API that we discovered while integrating the code into our code base. I think this is a critical fix to the C API that should absolutely be part of the final version we commit.&lt;/p&gt;

&lt;p&gt;From my commit message:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt; - fix inoperable multi called from watch context.&lt;/p&gt;

&lt;p&gt;    While integrating the new zoo_multi and zoo_amulti into the&lt;br/&gt;
    code at our company, we discovered a nasty bug in the C API. If&lt;br/&gt;
    a multi op is triggered from a watch callback, then it would hang&lt;br/&gt;
    indefinitely. This was due to a fundamental flaw in my earlier&lt;br/&gt;
    implementation whereby I treated all the ops in a multi op as&lt;br/&gt;
    asynchronous, with a forced synchronous tail completion that I&lt;br/&gt;
    tacked onto the end of my completion list. BUT, that tail completion&lt;br/&gt;
    ultimately never got called when called from a watch context!!&lt;/p&gt;

&lt;p&gt;    The fix was ultimately to create code in both process functions&lt;br/&gt;
    (both sync and async) for dealing with multi-ops. Each op inside&lt;br/&gt;
    the multiop is dealt with the same, so they call into a common&lt;br/&gt;
    function. This way, all the existing logic for dealing with&lt;br/&gt;
    sync/async completions now deals with multi ops instead of&lt;br/&gt;
    me trying to deal with that specially.&lt;/p&gt;

&lt;p&gt;    I&apos;ve also added a new unit test that demonstrated this bug and&lt;br/&gt;
    also now passes with my refactoring.&lt;/p&gt;</comment>
                            <comment id="13040900" author="tdunning" created="Mon, 30 May 2011 00:52:13 +0100"  >&lt;p&gt;Updated patch with Marshall&apos;s latest.&lt;/p&gt;</comment>
                            <comment id="13040901" author="jiraposter@reviews.apache.org" created="Mon, 30 May 2011 00:54:47 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-05-29 23:54:13.115005)&lt;/p&gt;


&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This should have fixes for a problem in the c api and for removing the pending changes in the data tree&lt;br/&gt;
as suggested by Ben.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;br/&gt;
succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/c/Makefile.am 65830fe &lt;br/&gt;
  src/c/include/proto.h 843032f &lt;br/&gt;
  src/c/include/zookeeper.h c055edb &lt;br/&gt;
  src/c/src/zookeeper.c db715b0 &lt;br/&gt;
  src/c/tests/TestMulti.cc PRE-CREATION &lt;br/&gt;
  src/c/tests/TestOperations.cc f9441ea &lt;br/&gt;
  src/c/tests/ZKMocks.cc a75dce6 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;br/&gt;
  src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;br/&gt;
  src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;br/&gt;
  src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;br/&gt;
  src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;br/&gt;
  src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;br/&gt;
  src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;br/&gt;
  src/zookeeper.jute 7d96f32 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;

&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Ted&lt;/p&gt;
</comment>
                            <comment id="13040904" author="hadoopqa" created="Mon, 30 May 2011 01:02:02 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12480807/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12480807/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1125581.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/296//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/296//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13041273" author="phunt" created="Mon, 30 May 2011 21:23:44 +0100"  >&lt;p&gt;patch fails to apply against latest trunk (see console output)&lt;/p&gt;</comment>
                            <comment id="13041291" author="tdunning" created="Mon, 30 May 2011 22:04:03 +0100"  >&lt;p&gt;Updated to track trunk&lt;/p&gt;</comment>
                            <comment id="13041300" author="hadoopqa" created="Mon, 30 May 2011 22:34:40 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12480874/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12480874/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1125581.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 48 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/297//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/297//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/297//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/297//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/297//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/297//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13041337" author="tdunning" created="Tue, 31 May 2011 00:58:59 +0100"  >&lt;p&gt;Rebased patch to current trunk.  Note that there were several conflicts in the merge.  The most important was in &lt;/p&gt;

&lt;p&gt;src/java/main/org/apache/zookeeper/server/DataTree.java around line 891.&lt;/p&gt;

&lt;p&gt;The conflict was versus changes introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1046&quot; title=&quot;Creating a new sequential node results in a ZNODEEXISTS error&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1046&quot;&gt;&lt;del&gt;ZOOKEEPER-1046&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Camille, if you can, could you check that my merge preserved your fix?&lt;/p&gt;
</comment>
                            <comment id="13041338" author="hadoopqa" created="Tue, 31 May 2011 01:02:27 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12480882/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12480882/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1125581.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The patch appears to cause tar ant target to fail.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/298//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/298//testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/298//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/298//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13041352" author="tdunning" created="Tue, 31 May 2011 01:52:24 +0100"  >&lt;p&gt;Cut and paste error in resolving conflict.&lt;/p&gt;</comment>
                            <comment id="13041362" author="hadoopqa" created="Tue, 31 May 2011 02:25:28 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12480886/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12480886/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1125581.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/299//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/299//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/299//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/299//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/299//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/299//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13041700" author="breed" created="Tue, 31 May 2011 18:38:38 +0100"  >&lt;p&gt;reviewing the patch now.&lt;/p&gt;</comment>
                            <comment id="13041730" author="fournc" created="Tue, 31 May 2011 19:26:41 +0100"  >&lt;p&gt;Ted, looking at just the change in DataTree, I don&apos;t see any corresponding changes in FileTxnSnapLog. Is it possible to hit the same bug we saw in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1046&quot; title=&quot;Creating a new sequential node results in a ZNODEEXISTS error&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1046&quot;&gt;&lt;del&gt;ZOOKEEPER-1046&lt;/del&gt;&lt;/a&gt; in this multi case? I haven&apos;t reasoned it through yet but my instinct says yes, which means that FileTxnSnapLog needs to be changed to do the appropriate updating of cversion inside the components of the multi txn when the NONODE/NODEEXIST error conditions occur inside the multitxn. &lt;/p&gt;

&lt;p&gt;Other than that the merge itself looks ok I think.&lt;/p&gt;</comment>
                            <comment id="13041733" author="tdunning" created="Tue, 31 May 2011 19:32:41 +0100"  >&lt;blockquote&gt;
&lt;p&gt; I don&apos;t see any corresponding changes in FileTxnSnapLog&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course, you are correct here.  The individual operations in a multi work exactly like the &lt;br/&gt;
individual operations.  Unless we somehow inherit the right behavior, your change will need&lt;br/&gt;
to be replicated.&lt;/p&gt;


&lt;p&gt;I won&apos;t get to this for a day or two.  Would it be possible for you to drop this change in on&lt;br/&gt;
the github version?&lt;/p&gt;</comment>
                            <comment id="13041734" author="fournc" created="Tue, 31 May 2011 19:36:37 +0100"  >&lt;p&gt;Not before Wed PM but I can look at it then if you need.&lt;/p&gt;</comment>
                            <comment id="13042546" author="tdunning" created="Thu, 2 Jun 2011 02:05:00 +0100"  >&lt;p&gt;Wrote up an intro to the multi command.  &lt;a href=&quot;http://tdunning.blogspot.com/2011/06/tour-of-multi-update-for-zookeeper.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://tdunning.blogspot.com/2011/06/tour-of-multi-update-for-zookeeper.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This references a simple multi sample application at github.  &lt;a href=&quot;https://github.com/tdunning/zookeeper&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/zookeeper&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13042603" author="marshall" created="Thu, 2 Jun 2011 05:43:01 +0100"  >&lt;p&gt;Ted, very nice write-up. I think it does a good job of explaining the problem and the solution. Nice job.&lt;/p&gt;</comment>
                            <comment id="13042610" author="marshall" created="Thu, 2 Jun 2011 06:09:44 +0100"  >&lt;p&gt;So I&apos;m finally getting a chance to circle back around to Benjamin&apos;s comments above about the stale ChangeRecords that get left in PrepRequestProcessor on a failed multi-op. I want to be sure I understand what needs to be done here, so Benjamin, feel free to correct me if I&apos;m off track here.... &lt;/p&gt;

&lt;p&gt;You mentioned:&lt;/p&gt;

&lt;p&gt;&amp;gt; we have to update both the list and hashmap of pending operations.&lt;/p&gt;

&lt;p&gt;If I&apos;m reading this right, this is all currently updated via addChangeRecord (in PrepRequestProcess). I think it&apos;s adding it to the list via zks.outstandingChanges.add(c) and adding to the hashmap via zks.outstandingChangesForPath.put(c.path, c). So, adding in a removeChangeRecord method here that mirrors addChangeRecord looks like a good approach. I think I can use the transaction id on the failed multi op to identify all the failed change requests that need to be removed. Luckily, all change requests associated with a multiop will have the same txn id, so that should be super helpful here.&lt;/p&gt;

&lt;p&gt;Also, you mentioned :&lt;/p&gt;

&lt;p&gt;&amp;gt; we also need to be careful since the pending operations are modified by the thread executing Finalrequestprocessor&lt;/p&gt;

&lt;p&gt;Can you elaborate on what the concern is there? If I make the removeChangeRecord synchronized like addChangeRecord is, will that be sufficient?&lt;/p&gt;
</comment>
                            <comment id="13042618" author="marshall" created="Thu, 2 Jun 2011 06:52:20 +0100"  >&lt;p&gt;OK, so I think this is actually pretty straightforward. I&apos;ve written up an initial version to remove the failed op change records. I&apos;m going to try to write a unit test that exhibits this theoretical bug and then try my fix and see if it fixes it.&lt;/p&gt;</comment>
                            <comment id="13042792" author="marshall" created="Thu, 2 Jun 2011 15:32:02 +0100"  >&lt;p&gt;I am unable to create a unit test that fails due to the &quot;half-atomic&quot; bug Benjamin cited. It looks to me like even though there are stale change records for a failed multi op, they don&apos;t seem to cause any noticeable bug. I tried to do a multi that created a node, then tried to delete the same node twice. This leaves a change record for the create. Then I tried another subsequent multi to create that same node. That multi succeeds (b/c the actual create never succeeded and never made it to the database). &lt;/p&gt;

&lt;p&gt;I don&apos;t see any way this can actually cause a problem though I DO think it should be fixed to avoid any possible problems that I just can&apos;t think of a way to test. The fix is trivial anyhow. I iterate through the change records on a failed multi op and delete any that have the failed multi op&apos;s txn id. &lt;/p&gt;

&lt;p&gt;Anyhow, I&apos;ll commit this change to Ted&apos;s multi branch later today. If anyone can think of a unit test that fails without this fix, I&apos;d love to see it.&lt;/p&gt;

&lt;p&gt;Thanks...&lt;/p&gt;</comment>
                            <comment id="13042809" author="marshall" created="Thu, 2 Jun 2011 16:01:04 +0100"  >&lt;p&gt;OK, I&apos;ve committed a change to delete the stale change records on a failed multiop. I&apos;ve got a few other changes to make today that I&apos;ll push to the multi branch later today.&lt;/p&gt;</comment>
                            <comment id="13042837" author="marshall" created="Thu, 2 Jun 2011 16:56:39 +0100"  >&lt;p&gt;I&apos;m now finishing up the other suggestion Benjamin had about using a boolean placeholder for a checkop instead of having a real Stat structure in there. This is also simpler than I was thinking so I should have this done shortly. Just testing it out now to ensure no regressions. And actually, as it turns out I don&apos;t even need a boolean at all &amp;#8211; just a placeholder. B/c if the check failed, then we put a Error txn/response in the result array on the server side not a check response. Anyhow, should have this done in the next 30 minutes.&lt;/p&gt;</comment>
                            <comment id="13042894" author="marshall" created="Thu, 2 Jun 2011 18:18:44 +0100"  >&lt;p&gt;I&apos;ve just committed another change to Ted&apos;s multi branch to remove the Stat_t from a check op and use a simple placeholder as was discussed above.&lt;/p&gt;</comment>
                            <comment id="13043128" author="jiraposter@reviews.apache.org" created="Fri, 3 Jun 2011 00:13:47 +0100"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/739/#review750&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/#review750&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;this looks really great! one thing to think about (you don&apos;t need to think about it too long, but it would be great if you could &quot;fix it&quot;): we generally only use generated jute Record instances. i think this makes it easier if we ever switch serialization libraries, but MultiResponse is not generated. i understand why, but it would be cool if we could use a generated class. this is not blocking the patch.&lt;/p&gt;

&lt;p&gt;the cleanup of pending ops was not in the uploaded diffs, but i looked at the code on git hub. i think this is almost right, but removeChangeRecord has a bug: we do the checking based on the Map not the list, so when we remove the ChangeRecord we need to check to see if there was something there before that we replaced and put it back. i think this is the last blocker that i can see.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Benjamin&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-05-29 23:54:13, Ted Dunning wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/739/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-05-29 23:54:13)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for zookeeper and Benjamin Reed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This mega-patch adds the multi-op capability to ZK.  This allows a batch of create, delete, update or version-check operations to &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;succeed or fail together.   Both C and java bindings are provided.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/Makefile.am 65830fe &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/proto.h 843032f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/include/zookeeper.h c055edb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/src/zookeeper.c db715b0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestMulti.cc PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/TestOperations.cc f9441ea &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/c/tests/ZKMocks.cc a75dce6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiResponse.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/MultiTransactionRecord.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Op.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/OpResult.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/Transaction.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooDefs.java 832976f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/ZooKeeper.java 00b4012 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/DataTree.java d16537e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java 2538cf7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java 50f208d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/Request.java a5c57e2 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/RequestProcessor.java 5c3e8ff &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/TraceFormatter.java 8ece929 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/package.html 3ec7656 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java 49affd5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java 0ad4dd6 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiResponseTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/zookeeper.jute 7d96f32 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/739/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/739/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A number of unit tests have been implemented.  Test coverage is very good.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A sample application has been written to do simple operations on a graph of nodes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Ted&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13043204" author="marshall" created="Fri, 3 Jun 2011 04:48:25 +0100"  >&lt;p&gt;Benjamin,&lt;/p&gt;

&lt;p&gt;Thanks for taking the time to look over my latest changes. I sort of get what you&apos;re suggesting, but I&apos;m not sure about the implementation. &lt;/p&gt;

&lt;p&gt;Do you have any ideas in mind on how I&apos;d &quot;check to see if there was something there before that we replaced and put it back&quot;. I was thinking I could create a map of any existing change records and if the multi op fails, I can use that map to restore things to their proper state... Does that sound like what you were thinking?&lt;/p&gt;</comment>
                            <comment id="13043214" author="marshall" created="Fri, 3 Jun 2011 06:00:26 +0100"  >&lt;p&gt;Benjamin,&lt;/p&gt;

&lt;p&gt;I&apos;ve just pushed a change to github that implements what I think will work for the bug you cited in removeChangeRecords. Essentially, I store off prior change records (if any) for all the paths in the multi-op. Then if the multi-op fails, I restore the values in both the list zks.outstandingChanges and the hashmap zks.outstandingChangesForPath. &lt;/p&gt;

&lt;p&gt;Can you please look at this latest change and see if you see any problems with this latest approach? My only question is whether the order matters in the outstandingChanges list. Because I delete the old one in a for loop, then add the old (prior) one back onto the end of the list. I could deal with the order more carefully and put it back into the same index position if that&apos;s a requirement.... &lt;/p&gt;

&lt;p&gt;Let me know what you think.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13043215" author="marshall" created="Fri, 3 Jun 2011 06:01:54 +0100"  >&lt;p&gt;There were actually two commits to fix the above bug. So if you&apos;re just browsing the commits on github, make sure you look at both.... &lt;/p&gt;</comment>
                            <comment id="13043320" author="breed" created="Fri, 3 Jun 2011 13:15:46 +0100"  >&lt;p&gt;no there may be a race condition. between the time you grab the old mapping and the time you abort, the old mapping may have been removed, so you don&apos;t want to put it back. you also don&apos;t need to re-add the prior change records to the outstandingchanges list.&lt;/p&gt;

&lt;p&gt;i think i have an efficient way of figuring out what to do:&lt;/p&gt;

&lt;p&gt;1) keep saving off the prior change records like you are doing now.&lt;/p&gt;

&lt;p&gt;if you abort, do the following synchronized with outstandingchanges&lt;br/&gt;
2) start at the end of the list and work backwards removing elements from the end of the list as long as they are the zxid you are working on. once the zxid changes you can stop. (list will help you avoid going through the whole list.)&lt;br/&gt;
3) look at the zxid of the first element of the outstandingchanges list (i&apos;ll call it firstZxid). go through your prior change records and remove any whose zxid &amp;lt; firstZxid.&lt;br/&gt;
4) apply the remaining priorchange records to the outstandingchangesForPath.&lt;/p&gt;

&lt;p&gt;does that sound reasonable? 2) is kind of a pain because have to work with indices, but it shouldn&apos;t be too bad.&lt;/p&gt;</comment>
                            <comment id="13043418" author="marshall" created="Fri, 3 Jun 2011 16:47:49 +0100"  >&lt;p&gt;Benjamin, thanks for the quick reply. I think this sounds like a very easy thing to add to what I&apos;ve done. Let me make sure I understand you though... Specifically:&lt;/p&gt;

&lt;p&gt;2) start at the end of the list and work backwards removing elements from the end of the list as long as they are the zxid you &lt;br/&gt;
are working on. once the zxid changes you can stop. (list will help you avoid going through the whole list.)&lt;/p&gt;

&lt;p&gt;When you say &quot;the zxid you are working on&quot; do you mean the zxid for the multi op? &lt;/p&gt;</comment>
                            <comment id="13043426" author="breed" created="Fri, 3 Jun 2011 16:58:04 +0100"  >&lt;p&gt;yes exactly, and that zxid will be at the end of the list since that is the zxid that you are currently working on.&lt;/p&gt;</comment>
                            <comment id="13044982" author="marshall" created="Mon, 6 Jun 2011 18:56:37 +0100"  >&lt;p&gt;Benjamin,&lt;/p&gt;

&lt;p&gt;I&apos;ve just pushed a new change to github that I &lt;b&gt;think&lt;/b&gt; does what you&apos;ve suggested to solve the race condition you identified. Please look it over and let me know what you think.&lt;/p&gt;

&lt;p&gt;I haven&apos;t had a chance to look at using jute generated Records. I may have time to look at that tonight.&lt;/p&gt;</comment>
                            <comment id="13044991" author="tdunning" created="Mon, 6 Jun 2011 19:10:59 +0100"  >&lt;p&gt;The jute-ly issue can only be corrected by cut-and-paste coding on the jute&lt;br/&gt;
definitions.  Putting the message into jute will involve replicating a union&lt;br/&gt;
of the fields in the sub-fields.  With ZK&apos;s history of wire compatibility,&lt;br/&gt;
that probably isn&apos;t a big deal.&lt;/p&gt;

&lt;p&gt;On Mon, Jun 6, 2011 at 10:56 AM, Marshall McMullen (JIRA)&lt;/p&gt;
</comment>
                            <comment id="13045252" author="marshall" created="Tue, 7 Jun 2011 04:17:02 +0100"  >&lt;p&gt;I&apos;m not sure I feel comfortable altering the jute definitions themselves. Is this something you would be willing to tackle Ted? Otherwise perhaps we could defer this refactoring into a separate Jira case?&lt;/p&gt;</comment>
                            <comment id="13045352" author="tdunning" created="Tue, 7 Jun 2011 11:23:17 +0100"  >&lt;p&gt;I would be happy to jump on this (just not right now).&lt;/p&gt;

&lt;p&gt;Deferring this is a fine thing, except that it is likely to be a wire-format&lt;br/&gt;
change.&lt;/p&gt;

</comment>
                            <comment id="13045701" author="breed" created="Wed, 8 Jun 2011 00:30:59 +0100"  >&lt;p&gt;it&apos;s not a show stopper. it works fine with jute. we can fix it if it turns out to be a problem when we move to a real serialization api.&lt;/p&gt;</comment>
                            <comment id="13045705" author="breed" created="Wed, 8 Jun 2011 00:43:02 +0100"  >&lt;p&gt;the code looks good. there is one other small thing. the case statement for multi-op is much to long. could you extract one or two sections of code into methods: grabPendingChanges() and rollbackPendingChanges() for example just to make it a bit smaller.&lt;/p&gt;

&lt;p&gt;once that is done we should be good to go. i&apos;m cancelling the patch, so that we can be clear on the patch that you want loaded. (in other words, when you have a patch that you think should go in, submit it.)&lt;/p&gt;

&lt;p&gt;thanx for all your hard work!&lt;/p&gt;</comment>
                            <comment id="13045707" author="marshall" created="Wed, 8 Jun 2011 00:47:39 +0100"  >&lt;p&gt;Yes, I will do the refactor tonight.&lt;/p&gt;

&lt;p&gt;Thanks for looking it over Benjamin!&lt;/p&gt;</comment>
                            <comment id="13045774" author="marshall" created="Wed, 8 Jun 2011 05:40:21 +0100"  >&lt;p&gt;Benjamin,&lt;/p&gt;

&lt;p&gt;I&apos;ve pushed a new set of changes to github with the multi-op error code refactored as you request. Let me know if this looks OK then we can proceed with generating a new patch....&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13045799" author="tdunning" created="Wed, 8 Jun 2011 06:54:31 +0100"  >&lt;p&gt;I just integrated changes to trunk (&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1069&quot; title=&quot;Calling shutdown() on a QuorumPeer too quickly can lead to a corrupt log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1069&quot;&gt;&lt;del&gt;ZOOKEEPER-1069&lt;/del&gt;&lt;/a&gt;) and rebased the github.  This also picked up some small changes I made to the API to get results from the exception.&lt;/p&gt;

&lt;p&gt;Marshall,  can you say if you are happy about the API change in 5ce6043f4 ?&lt;/p&gt;

&lt;p&gt;I have pushed the rebase to github so everybody will have to pull from scratch to make sure that they get the right history.&lt;/p&gt;

&lt;p&gt;I will also attach the patch for this right now.&lt;/p&gt;</comment>
                            <comment id="13045801" author="tdunning" created="Wed, 8 Jun 2011 06:55:30 +0100"  >&lt;p&gt;I think this is the final state.  Marshal should confirm.&lt;/p&gt;</comment>
                            <comment id="13045804" author="marshall" created="Wed, 8 Jun 2011 07:03:44 +0100"  >&lt;p&gt;Ted, the changes in 5ce6043f4 look great to me. Much simpler than how I originally coded it. Thanks very much for refactoring that mess!&lt;/p&gt;

&lt;p&gt;Yes, I think this is the final state unless Benjamin sees anything amiss in my most recent commit to refactor the large multi-op case statement into a couple of functions. &lt;/p&gt;

&lt;p&gt;Otherwise I think we&apos;ve finally finished this massive beast.&lt;/p&gt;</comment>
                            <comment id="13045972" author="marshall" created="Wed, 8 Jun 2011 15:22:19 +0100"  >&lt;p&gt;Ted, can you post an updated patch?&lt;/p&gt;</comment>
                            <comment id="13048756" author="marshall" created="Mon, 13 Jun 2011 22:00:28 +0100"  >&lt;p&gt;I downloaded the latest patch (08/Jun/11 05:55). It applies cleanly, but it does not compile:&lt;/p&gt;

&lt;p&gt;compile:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 132 source files to /home/marshall/sandboxes/zookeeper-multi/build/classes&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /home/marshall/sandboxes/zookeeper-multi/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java:186: unreported exception java.io.IOException; must be caught or declared to be thrown&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;             rc = dt.processTxn(hdr, txn);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                               ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /home/marshall/sandboxes/zookeeper-multi/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java:195: unreported exception java.io.IOException; must be caught or declared to be thrown&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;             rc = dt.processTxn(hdr, txn);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                               ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /home/marshall/sandboxes/zookeeper-multi/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java:198: unreported exception java.io.IOException; must be caught or declared to be thrown&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;             rc = dt.processTxn(hdr, txn);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                               ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 3 errors&lt;/p&gt;

&lt;p&gt;Can we get a new patch generated against latest trunk?&lt;/p&gt;</comment>
                            <comment id="13048760" author="marshall" created="Mon, 13 Jun 2011 22:05:28 +0100"  >&lt;p&gt;Ted, by the way I pulled the latest from your private git hub branch where this doesn&apos;t compile.&lt;/p&gt;</comment>
                            <comment id="13048794" author="marshall" created="Mon, 13 Jun 2011 22:27:36 +0100"  >&lt;p&gt;I&apos;ve pushed a new commit to github to resolve this. The bug was indeed inside the patch.&lt;/p&gt;</comment>
                            <comment id="13048909" author="breed" created="Tue, 14 Jun 2011 01:03:29 +0100"  >&lt;p&gt;one other thing. we need to add a section on multi-update to the zookeeper programmers guide. it should be pretty quick just to add a multi-update section. feel free to open another jira to cover adding the doc so that we can get the code committed asap.&lt;/p&gt;

&lt;p&gt;i&apos;d like to get this in soon.&lt;/p&gt;</comment>
                            <comment id="13049603" author="marshall" created="Wed, 15 Jun 2011 05:29:22 +0100"  >&lt;p&gt;Ted, is this something you can tackle? Also, did you look at the compilation failure I saw? I&apos;d love to get this committed.&lt;/p&gt;</comment>
                            <comment id="13049669" author="tdunning" created="Wed, 15 Jun 2011 08:55:47 +0100"  >&lt;p&gt;I can take a quick look, but I am having trouble getting reliable net access.&lt;/p&gt;

&lt;p&gt;On Wed, Jun 15, 2011 at 6:29 AM, Marshall McMullen (JIRA)&lt;/p&gt;</comment>
                            <comment id="13049670" author="tdunning" created="Wed, 15 Jun 2011 09:01:47 +0100"  >&lt;p&gt;OK.  As a first step, I rebased our changes to current trunk.&lt;/p&gt;

&lt;p&gt;This will require the usual recheckout due to non-fast-forward operations.&lt;/p&gt;

&lt;p&gt;Now to the problems you are seeing.&lt;/p&gt;
</comment>
                            <comment id="13049673" author="tdunning" created="Wed, 15 Jun 2011 09:05:47 +0100"  >&lt;p&gt;I see a clean compile on my mac.  Looks like I don&apos;t understand the problem.&lt;br/&gt;
  I can&apos;t run all the tests just now, but last time I looked they ran.&lt;/p&gt;

&lt;p&gt;BuzzBook-Pro:zookeeper&lt;span class=&quot;error&quot;&gt;&amp;#91;trunk*&amp;#93;&lt;/span&gt;$ git checkout multi&lt;br/&gt;
Switched to branch &apos;multi&apos;&lt;br/&gt;
BuzzBook-Pro:zookeeper&lt;span class=&quot;error&quot;&gt;&amp;#91;multi*&amp;#93;&lt;/span&gt;$ ant clean&lt;br/&gt;
Buildfile: /Users/tdunning/Apache/zookeeper/build.xml&lt;br/&gt;
...&lt;br/&gt;
clean:&lt;br/&gt;
BUILD SUCCESSFUL&lt;br/&gt;
Total time: 0 seconds&lt;br/&gt;
BuzzBook-Pro:zookeeper&lt;span class=&quot;error&quot;&gt;&amp;#91;multi*&amp;#93;&lt;/span&gt;$ ant compile&lt;br/&gt;
...&lt;br/&gt;
version-info:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Unknown REVISION number, using -1&lt;br/&gt;
...&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 52 source files to&lt;br/&gt;
/Users/tdunning/Apache/zookeeper/build/classes&lt;br/&gt;
...&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 134 source files to&lt;br/&gt;
/Users/tdunning/Apache/zookeeper/build/classes&lt;br/&gt;
BUILD SUCCESSFUL&lt;br/&gt;
Total time: 11 seconds&lt;br/&gt;
BuzzBook-Pro:zookeeper&lt;span class=&quot;error&quot;&gt;&amp;#91;multi*&amp;#93;&lt;/span&gt;$&lt;/p&gt;



&lt;p&gt;On Wed, Jun 15, 2011 at 10:01 AM, Ted Dunning (JIRA) &amp;lt;jira@apache.org&amp;gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=13049670#comment-13049670&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-965?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=13049670#comment-13049670&lt;/a&gt;]&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch,&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch,&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch,&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch,&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch,&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;.patch&lt;br/&gt;
a list of create, delete, update or check objects each of which has a&lt;br/&gt;
desired version or file state in the case of create.  If all of the version&lt;br/&gt;
and existence constraints can be satisfied, then all updates will be done&lt;br/&gt;
atomically.&lt;br/&gt;
other style has a &quot;Transaction&quot; that allows builder-like methods to build a&lt;br/&gt;
set of updates and a commit method to finalize the transaction.  This can&lt;br/&gt;
trivially be reduced to the first kind of API so the list based API style&lt;br/&gt;
should be considered the primitive and the builder style should be&lt;br/&gt;
implemented as syntactic sugar.&lt;br/&gt;
transaction should be limited to 1MB.&lt;br/&gt;
internals.  The changes include:&lt;br/&gt;
form, the code should be slightly extended to convert a list of operations&lt;br/&gt;
to idempotent form.&lt;br/&gt;
be detected gracefully and an informative exception should be thrown.&lt;br/&gt;
at &lt;a href=&quot;https://github.com/tdunning/zookeeper&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/zookeeper&lt;/a&gt;  and am happy to extend committer&lt;br/&gt;
status to anyone who agrees to donate their code back to Apache.  The final&lt;br/&gt;
patch will be attached to this bug as normal.&lt;/p&gt;</comment>
                            <comment id="13049797" author="marshall" created="Wed, 15 Jun 2011 15:44:32 +0100"  >&lt;p&gt;Ted, thanks for taking a look at this. Not sure if you noticed this, but I checked in a change to github to fix the compile error I was seeing. I just wanted you to look at it and see if/why the fix was necessary....&lt;/p&gt;</comment>
                            <comment id="13049953" author="tdunning" created="Wed, 15 Jun 2011 19:48:48 +0100"  >&lt;p&gt;Ahhh... no.&lt;/p&gt;

&lt;p&gt;I didn&apos;t notice that.  I will take a look.&lt;/p&gt;

&lt;p&gt;On Wed, Jun 15, 2011 at 4:45 PM, Marshall McMullen (JIRA)&lt;/p&gt;
</comment>
                            <comment id="13049955" author="tdunning" created="Wed, 15 Jun 2011 19:52:11 +0100"  >&lt;p&gt;Marshall,&lt;/p&gt;

&lt;p&gt;I just tried with and without your patch.  It compiles either way.  &lt;/p&gt;

&lt;p&gt;My feeling is that excessive throws declarations are bad juju anyway so the current state (with your change)&lt;br/&gt;
is better than the previous state (with the extra throws in processTxn).&lt;/p&gt;

&lt;p&gt;I would leave it as is.&lt;/p&gt;</comment>
                            <comment id="13049972" author="marshall" created="Wed, 15 Jun 2011 20:35:39 +0100"  >&lt;p&gt;I agree completely. Thanks for looking it over Ted. Do we need an updated patch to capture my latest change then? &lt;/p&gt;

&lt;p&gt;Also, do you want to create a new jira case for the changes Benjamin wanted in the zookeeper programmer&apos;s guide so that doesn&apos;t hold up committing this change?&lt;/p&gt;</comment>
                            <comment id="13052677" author="breed" created="Tue, 21 Jun 2011 18:22:40 +0100"  >&lt;p&gt;do you guys have a patch ready for commit? mahadev is putting together the 3.4.0 release.&lt;/p&gt;</comment>
                            <comment id="13052687" author="marshall" created="Tue, 21 Jun 2011 18:29:05 +0100"  >&lt;p&gt;Ted, can you generate a patch? If not I will generate one as I definitely one this going into 3.4.0.&lt;/p&gt;</comment>
                            <comment id="13052688" author="tdunning" created="Tue, 21 Jun 2011 18:29:47 +0100"  >&lt;p&gt;I will get it out this morning.&lt;/p&gt;

</comment>
                            <comment id="13052699" author="tdunning" created="Tue, 21 Jun 2011 18:41:15 +0100"  >&lt;p&gt;Here is the latest patch rebased to latest trunk.  It compiles cleanly and I am currently running tests.&lt;/p&gt;

&lt;p&gt;I will update github shortly.&lt;/p&gt;</comment>
                            <comment id="13052703" author="tdunning" created="Tue, 21 Jun 2011 18:45:47 +0100"  >&lt;p&gt;Pushed to github.&lt;/p&gt;

</comment>
                            <comment id="13052705" author="marshall" created="Tue, 21 Jun 2011 18:49:34 +0100"  >&lt;p&gt;The only other outstanding item here was to open a Jira case for the zookeeper programmer&apos;s guide. Can you do that too Ted?&lt;/p&gt;</comment>
                            <comment id="13052715" author="tdunning" created="Tue, 21 Jun 2011 18:55:47 +0100"  >&lt;p&gt;Done.  See &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1102&quot; title=&quot;Need update for programmer manual to cover multi operation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1102&quot;&gt;ZOOKEEPER-1102&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Tue, Jun 21, 2011 at 7:49 PM, Marshall McMullen (JIRA)&lt;/p&gt;
</comment>
                            <comment id="13052716" author="marshall" created="Tue, 21 Jun 2011 18:57:20 +0100"  >&lt;p&gt;Awesome! Thanks so much for quickly taking care of these items Ted.&lt;/p&gt;</comment>
                            <comment id="13052730" author="tdunning" created="Tue, 21 Jun 2011 19:15:47 +0100"  >&lt;p&gt;My tests completed successfully.&lt;/p&gt;

&lt;p&gt;On Tue, Jun 21, 2011 at 7:57 PM, Marshall McMullen (JIRA)&lt;/p&gt;
</comment>
                            <comment id="13058100" author="tdunning" created="Thu, 30 Jun 2011 23:00:10 +0100"  >&lt;p&gt;Final patch for committing&lt;/p&gt;</comment>
                            <comment id="13058108" author="hadoopqa" created="Thu, 30 Jun 2011 23:25:01 +0100"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12484833/ZOOKEEPER-965.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12484833/ZOOKEEPER-965.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1140017.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/363//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/363//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/363//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/363//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/363//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/363//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13058120" author="breed" created="Thu, 30 Jun 2011 23:54:23 +0100"  >&lt;p&gt;Committed revision 1141746.&lt;/p&gt;

&lt;p&gt;thanx ted and marshall! good work.&lt;/p&gt;</comment>
                            <comment id="13058474" author="hudson" created="Fri, 1 Jul 2011 11:51:03 +0100"  >&lt;p&gt;Integrated in ZooKeeper-trunk #1230 (See &lt;a href=&quot;https://builds.apache.org/job/ZooKeeper-trunk/1230/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/ZooKeeper-trunk/1230/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;. Need a multi-update command to allow multiple znodes to be updated safely&lt;/p&gt;

&lt;p&gt;breed : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1141746&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1141746&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/ZooDefs.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/LearnerTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/MultiTransactionRecord.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/package.html&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/c/tests/ZKMocks.cc&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/Transaction.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/KeeperException.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/c/Makefile.am&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/MultiResponse.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/c/src/zookeeper.c&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/DataTree.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/test/org/apache/zookeeper/MultiResponseTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/Request.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/zookeeper.jute&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/Op.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/TraceFormatter.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/test/org/apache/zookeeper/MultiTransactionRecordTest.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/c/include/proto.h&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/RequestProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/OpResult.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/c/include/zookeeper.h&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/ZooKeeper.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/test/org/apache/zookeeper/test/CnxManagerTest.java.orig&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/c/tests/TestOperations.cc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13059180" author="hudson" created="Sun, 3 Jul 2011 11:57:55 +0100"  >&lt;p&gt;Integrated in ZooKeeper-trunk #1232 (See &lt;a href=&quot;https://builds.apache.org/job/ZooKeeper-trunk/1232/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/ZooKeeper-trunk/1232/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-965&quot; title=&quot;Need a multi-update command to allow multiple znodes to be updated safely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-965&quot;&gt;&lt;del&gt;ZOOKEEPER-965&lt;/del&gt;&lt;/a&gt;. Need a multi-update command to allow multiple znodes to be updated safely&lt;br/&gt;
(missed a file)&lt;/p&gt;

&lt;p&gt;breed : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1142377&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1142377&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/trunk/src/c/tests/TestMulti.cc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12477996">ZOOKEEPER-911</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12513948">ZOOKEEPER-1124</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12484833" name="ZOOKEEPER-965.patch" size="178268" author="tdunning" created="Thu, 30 Jun 2011 23:00:10 +0100"/>
                            <attachment id="12483314" name="ZOOKEEPER-965.patch" size="178408" author="tdunning" created="Tue, 21 Jun 2011 18:41:14 +0100"/>
                            <attachment id="12481775" name="ZOOKEEPER-965.patch" size="178427" author="tdunning" created="Wed, 8 Jun 2011 06:55:30 +0100"/>
                            <attachment id="12480886" name="ZOOKEEPER-965.patch" size="176083" author="tdunning" created="Tue, 31 May 2011 01:52:24 +0100"/>
                            <attachment id="12480882" name="ZOOKEEPER-965.patch" size="176126" author="tdunning" created="Tue, 31 May 2011 00:58:59 +0100"/>
                            <attachment id="12480874" name="ZOOKEEPER-965.patch" size="258622" author="tdunning" created="Mon, 30 May 2011 22:04:03 +0100"/>
                            <attachment id="12480807" name="ZOOKEEPER-965.patch" size="176207" author="tdunning" created="Mon, 30 May 2011 00:52:13 +0100"/>
                            <attachment id="12479713" name="ZOOKEEPER-965.patch" size="180691" author="tdunning" created="Thu, 19 May 2011 03:12:27 +0100"/>
                            <attachment id="12479708" name="ZOOKEEPER-965.patch" size="171364" author="tdunning" created="Thu, 19 May 2011 02:33:53 +0100"/>
                            <attachment id="12479254" name="ZOOKEEPER-965.patch" size="173293" author="tdunning" created="Sun, 15 May 2011 09:02:41 +0100"/>
                            <attachment id="12479027" name="ZOOKEEPER-965.patch" size="169640" author="tdunning" created="Thu, 12 May 2011 23:54:25 +0100"/>
                            <attachment id="12478739" name="ZOOKEEPER-965.patch" size="166281" author="tdunning" created="Tue, 10 May 2011 22:56:34 +0100"/>
                            <attachment id="12478668" name="ZOOKEEPER-965.patch" size="154321" author="tdunning" created="Tue, 10 May 2011 06:16:14 +0100"/>
                            <attachment id="12478667" name="ZOOKEEPER-965.patch" size="157475" author="tdunning" created="Tue, 10 May 2011 06:09:53 +0100"/>
                            <attachment id="12478618" name="ZOOKEEPER-965.patch" size="154160" author="tdunning" created="Mon, 9 May 2011 18:00:15 +0100"/>
                            <attachment id="12478186" name="ZOOKEEPER-965.patch" size="136440" author="tdunning" created="Wed, 4 May 2011 18:42:24 +0100"/>
                            <attachment id="12478127" name="ZOOKEEPER-965.patch" size="137748" author="tdunning" created="Wed, 4 May 2011 07:12:05 +0100"/>
                            <attachment id="12478117" name="ZOOKEEPER-965.patch" size="136679" author="tdunning" created="Wed, 4 May 2011 02:41:20 +0100"/>
                            <attachment id="12478112" name="ZOOKEEPER-965.patch" size="130576" author="tdunning" created="Wed, 4 May 2011 01:19:38 +0100"/>
                            <attachment id="12478111" name="ZOOKEEPER-965.patch" size="130744" author="tdunning" created="Wed, 4 May 2011 01:05:32 +0100"/>
                            <attachment id="12477971" name="ZOOKEEPER-965.patch" size="153414" author="tdunning" created="Mon, 2 May 2011 18:17:24 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12494221">ZOOKEEPER-966</subtask>
                            <subtask id="12494222">ZOOKEEPER-967</subtask>
                            <subtask id="12494223">ZOOKEEPER-968</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 28 Dec 2010 04:18:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>47527</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxzx5z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33357</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>