<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:48:03 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/ZOOKEEPER-1863/ZOOKEEPER-1863.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[ZOOKEEPER-1863] Race condition in commit processor leading to out of order request completion, xid mismatch on client.</title>
                <link>https://issues.apache.org/jira/browse/ZOOKEEPER-1863</link>
                <project id="12310801" key="ZOOKEEPER">ZooKeeper</project>
                    <description>&lt;p&gt;In CommitProcessor.java processor, if we are at the primary request handler on line 167:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                while (!stopped &amp;amp;&amp;amp; !isWaitingForCommit() &amp;amp;&amp;amp;
                       !isProcessingCommit() &amp;amp;&amp;amp;
                       (request = queuedRequests.poll()) != null) {
                    if (needCommit(request)) {
                        nextPending.set(request);
                    } else {
                        sendToNextProcessor(request);
                    }
                }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A request can be handled in this block and be quickly processed and completed on another thread. If queuedRequests is empty, we then exit the block. Next, before this thread makes any more progress, we can get 2 more requests, one get_children(say), and a sync placed on queuedRequests for the processor. Then, if we are very unlucky, the sync request can complete and this object&apos;s commit() routine is called (from FollowerZookeeperServer), which places the sync request on the previously empty committedRequests queue. At that point, this thread continues.&lt;/p&gt;

&lt;p&gt;We reach line 182, which is a check on sync requests.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                if (!stopped &amp;amp;&amp;amp; !isProcessingRequest() &amp;amp;&amp;amp;
                    (request = committedRequests.poll()) != null) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are not processing any requests, because the original request has completed. We haven&apos;t dequeued either the read or the sync request in this processor. Next, the poll above will pull the sync request off the queue, and in the following block, the sync will get forwarded to the next processor.&lt;/p&gt;

&lt;p&gt;This is a problem because the read request hasn&apos;t been forwarded yet, so requests are now out of order.&lt;/p&gt;

&lt;p&gt;I&apos;ve been able to reproduce this bug reliably by injecting a Thread.sleep(5000) between the two blocks above to make the race condition far more likely, then in a client program.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        zoo_aget_children(zh, &quot;/&quot;, 0, getchildren_cb, NULL);
        //Wait long enough for queuedRequests to drain
        sleep(1);
        zoo_aget_children(zh, &quot;/&quot;, 0, getchildren_cb, &amp;amp;th_ctx[0]);
        zoo_async(zh, &quot;/&quot;, sync_cb, &amp;amp;th_ctx[0]);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When this bug is triggered, 3 things can happen:&lt;br/&gt;
1) Clients will see requests complete out of order and fail on xid mismatches.&lt;br/&gt;
2) Kazoo in particular doesn&apos;t handle this runtime exception well, and can orphan outstanding requests.&lt;br/&gt;
3) I&apos;ve seen zookeeper servers deadlock, likely because the commit cannot be completed, which can wedge the commit processor.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12689055">ZOOKEEPER-1863</key>
            <summary>Race condition in commit processor leading to out of order request completion, xid mismatch on client.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dutch">Dutch T. Meyer</assignee>
                                    <reporter username="dutch">Dutch T. Meyer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 15 Jan 2014 18:23:17 +0000</created>
                <updated>Wed, 25 Mar 2015 20:35:03 +0000</updated>
                            <resolved>Tue, 15 Jul 2014 23:40:54 +0100</resolved>
                                    <version>3.5.0</version>
                                    <fixVersion>3.5.0</fixVersion>
                                    <component>server</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13872376" author="fournc" created="Wed, 15 Jan 2014 18:26:27 +0000"  >&lt;p&gt;Good catch. Do you want to attempt a patch?&lt;/p&gt;</comment>
                            <comment id="13872397" author="dutch" created="Wed, 15 Jan 2014 18:35:50 +0000"  >&lt;p&gt;I&apos;d be happy to, but it may take me quite some time to get to it - I have many commitments right now.&lt;/p&gt;

&lt;p&gt;I think I&apos;d first look at whether that second block can be protected with a short circuit check on isWaitingForCommit().  If that&apos;s not true then I don&apos;t think we can grab a sync off the committedRequests before it has been pulled off queuedRequests, which seems to be the core problem.  We should probably think about whether there are any other orderings that would get you to a similar state though.&lt;/p&gt;</comment>
                            <comment id="13875041" author="rgs" created="Fri, 17 Jan 2014 18:11:52 +0000"  >&lt;p&gt;I couldn&apos;t repro this but we might have actually seen this in prod. I&apos;ll try some more but if you get some time would you mind running jstack on a ZK server with a wedged CommitProcessor and pasting that here? Thanks!&lt;/p&gt;</comment>
                            <comment id="13875054" author="dutch" created="Fri, 17 Jan 2014 18:25:10 +0000"  >&lt;p&gt;I will try, I&apos;m not sure how difficult it is to reproduce the wedge with the sleep-instrumented server, and I haven&apos;t tried to determine the precise ordering that gets you there.  I have seen it happen on a live server once, but couldn&apos;t get a thread dump before some automation reset the cluster.  In every case of this lockup, a client saw the xid error (which is itself quite rare) immediately before the server it was talking to wedged, so I&apos;m confident these issues are related.&lt;/p&gt;</comment>
                            <comment id="13875063" author="fournc" created="Fri, 17 Jan 2014 18:31:11 +0000"  >&lt;p&gt;I will take a look at this the week of the 26th if no one has time to look into it before that.&lt;/p&gt;</comment>
                            <comment id="13875365" author="dutch" created="Fri, 17 Jan 2014 22:56:38 +0000"  >&lt;p&gt;Here is a trace of a server following a force of this bug using an instrumented server.&lt;/p&gt;

&lt;p&gt;Requests made to this server timeout.&lt;/p&gt;</comment>
                            <comment id="13875449" author="rgs" created="Sat, 18 Jan 2014 00:52:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dutch&quot; class=&quot;user-hover&quot; rel=&quot;dutch&quot;&gt;Dutch T. Meyer&lt;/a&gt;: I can&apos;t see the SessionTracker thread. In a healthy Follower I have this thread&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&quot;SessionTracker&quot; prio=10 tid=0x00007f93fc3b2800 nid=0xb1f8 waiting on condition [0x00000000446d2000]
   java.lang.Thread.State: TIMED_WAITING (sleeping)
        at java.lang.Thread.sleep(Native Method)
        at org.apache.zookeeper.server.SessionTrackerImpl.run(SessionTrackerImpl.java:124)

   Locked ownable synchronizers:
        - None
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can you grep /var/log/zookeeper/zookeeper.log for SessionTracker?&lt;/p&gt;</comment>
                            <comment id="13875486" author="dutch" created="Sat, 18 Jan 2014 01:56:37 +0000"  >&lt;p&gt;Sorry about that.  It&apos;s because I didn&apos;t have the changes associated with local sessions incorporated in that trace.  My build is just a bit older, but I think I can repro from trunk, as the bug appears to still be there.&lt;/p&gt;

&lt;p&gt;I will update it with a fresh build from trunk, and ensure that nothing weird is blocking my ability to reproduce the error there.&lt;/p&gt;</comment>
                            <comment id="13875496" author="rgs" created="Sat, 18 Jan 2014 02:37:50 +0000"  >&lt;p&gt;You should still have a SessionTracker thread, regardless of having or not local sessions enabled. If you still have your previous logs handy, would you mind grepping for SessionTracker? I wonder if the SessionTracker thread exited... I saw this once or twice before. It&apos;s very sporadic and rare. &lt;/p&gt;</comment>
                            <comment id="13875503" author="rgs" created="Sat, 18 Jan 2014 02:51:10 +0000"  >&lt;p&gt;Oh, sorry about that you are right &#8212; there shouldn&apos;t be a SessionTracker in your case. Ignore my previous comment. Still a repro from trunk would be nice. &lt;/p&gt;</comment>
                            <comment id="13875514" author="rgs" created="Sat, 18 Jan 2014 03:03:56 +0000"  >&lt;p&gt;Also, to clarify, the stack trace you attached is for a wedged follower or just for the case in which you triggered the XIDs mismatch? Nothing looks, immediately, locked-up in that stack trace. &lt;/p&gt;</comment>
                            <comment id="13875539" author="dutch" created="Sat, 18 Jan 2014 04:16:32 +0000"  >&lt;p&gt;I think the server is wedged in that trace - all requests to the server (the follower that originally showed the xid mismatch) timeout.  Even though the commit thread does look okay, I think it probably has a commit stuck in nextPending, such that isWaitingForCommit() would return true.  Effectively the lost sync has plugged the pipeline at the commit processor.&lt;/p&gt;

&lt;p&gt;If I &quot;echo stat | nc localhost 2181&quot; I see the outstanding request count increase at each request, but never decrease.&lt;/p&gt;</comment>
                            <comment id="13881636" author="thawan" created="Sat, 25 Jan 2014 03:34:46 +0000"  >&lt;p&gt;I have seen a Commit Processor getting stuck in our prod (which run our internal branch) I spent a few days digging into the problem but couldn&apos;t locate the root cause.  &lt;/p&gt;

&lt;p&gt;The sequence of action that you put in description is very unlikely to occur in quorum mode.  First, the Follower/ObserverReuestProcessor which is in the front of the CommitProcessor put a request into queuedRequests even before sending it out to the leader.   It need at least a network round trip ( or a full quorum vote) before the same request will comeback from a leader and get put into commitRequest.  This is the assumption that even the original CommitProcessor (prior to &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1505&quot; title=&quot;Multi-thread CommitProcessor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1505&quot;&gt;&lt;del&gt;ZOOKEEPER-1505&lt;/del&gt;&lt;/a&gt;) rely on. However, a combination of bad thread scheduling and long GC pause might break this assumption.&lt;/p&gt;

&lt;p&gt;Sync request is special unlike other write request because it doesn&apos;t require quorum voting, but I still don&apos;t think it matter in this case. &lt;/p&gt;

&lt;p&gt;Again, since I saw this in prod but I am unable to repro it. I did add a background thread to detect a request stuck in nextPending for extended period of time and kill the server if it is the case.  I can post the patch if we are able unable find the root cause. &lt;/p&gt;

&lt;p&gt;You can also capture a heap dump of server to inspect which request get stuck (at nextPending) and correlated the possible event.  &lt;/p&gt;

</comment>
                            <comment id="13882403" author="fournc" created="Sun, 26 Jan 2014 19:45:25 +0000"  >&lt;p&gt;So, it seems like if this happens it must happen due to the fact that we have two paths in CommitProcessor, one on line 203, where we set the nextPending to null, and one where we never set it to null, the else case below on lines 205-210.&lt;br/&gt;
Thawan, has your background thread ever done that in prod?&lt;br/&gt;
I am curious as to why we have that case where we get a commit with no corresponding pending request waiting for it. The comment &quot; // this request came from someone else so just&lt;br/&gt;
                        // send the commit packet&quot;&lt;br/&gt;
Doesn&apos;t really make much sense to me, does anyone have an explanation? If this is the only way we think this could happen, maybe we check the queuedRequest queue at the time we get the unmatched request, and try to match it then.&lt;/p&gt;</comment>
                            <comment id="13882424" author="fournc" created="Sun, 26 Jan 2014 21:01:02 +0000"  >&lt;p&gt;OK Apologies, I (somewhat) understand why we don&apos;t care when nextPending doesn&apos;t match.&lt;/p&gt;

&lt;p&gt;So, I&apos;ve played around with reproducing this. When I change the FollowerRequestProcessor to do this:&lt;br/&gt;
  case OpCode.sync:&lt;br/&gt;
                    zks.pendingSyncs.add(request);&lt;br/&gt;
                    zks.getFollower().request(request);&lt;br/&gt;
                    zks.sync(); //this is what the leader will eventually cause us to call&lt;br/&gt;
                    break;&lt;br/&gt;
 , randomly sleep the commit processor, and run the async hammer test with some extra reads and sleeps (just trying to force a reproduction), I can get the xid out of sync exception:&lt;br/&gt;
java.io.IOException: Xid out of order. Got Xid 5 with err 0 expected Xid 1 for a packet with details: clientPath:/test- serverPath:/test- finished:false header:: 1,1  replyHeader:: 0,0,&lt;del&gt;4  request:: &apos;/test&lt;/del&gt;,,v{s{31,s&lt;/p&gt;
{&apos;world,&apos;anyone}
&lt;p&gt;}},2  response::  &lt;br/&gt;
	at org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:914)&lt;br/&gt;
	at org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:99)&lt;br/&gt;
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:362)&lt;br/&gt;
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1193)&lt;/p&gt;

&lt;p&gt;Note that this fails in the same way with the same changes in 3.4, so I don&apos;t think this is a new thing.&lt;br/&gt;
Have yet to get it to hang or any other behavior except for the xid out of order.&lt;br/&gt;
Feels like we may need to do some additional tracking of syncs inside the commit processor...&lt;/p&gt;</comment>
                            <comment id="13884435" author="thawan" created="Tue, 28 Jan 2014 19:00:57 +0000"  >&lt;p&gt;Commit processor is critical to the perf of ZK so additional synchronization must be done very carefully. I agree that correctness is definitely more important. The commit processor main&apos;s loop is the bottleneck since it is executed by a single thread. So it would be best to avoid expensive locking there. &lt;/p&gt;

&lt;p&gt;I will see log from my prod if the background thread that abort the server had done its job or not.&lt;/p&gt;</comment>
                            <comment id="13885877" author="dutch" created="Wed, 29 Jan 2014 22:01:44 +0000"  >&lt;p&gt;Here is a sketch at one approach.  I&apos;d appreciate feedback on this - I don&apos;t consider it particularly elegant, and I hope there&apos;s a better way.&lt;/p&gt;

&lt;p&gt;The idea is straightforward - we check queuedRequests prior to the dequeue of committedRequests to ensure that the head of commitedRequests has not raced.  Since I&apos;d rather not take a full traversal for every sync request, I&apos;ve further optimized this by wrapping the whole block in a check on isWaitingForCommit.  If nextPending is not NULL I don&apos;t believe the syncs can jump ordering.  So we should only pay the cost of checking if we receive a commit we weren&apos;t already waiting on, and if I&apos;m not mistake that requires that the block above exited with:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;queuedRequests.poll() == null
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the queue probably hasn&apos;t grown so deep in the interim that the traversal is particularly expensive.&lt;/p&gt;

&lt;p&gt;Still - The dependencies between the blocks of in this loop are pretty subtle and hard to understand.  If someone can safely refactor it I think that would be much preferred.  It might also be better to tag commit/sync requests such that this check for identity:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;pending.sessionId == request.sessionId &amp;amp;&amp;amp;
                        pending.cxid == request.cxid
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is a bit stronger.  If we knew in this commit processor where the request came from (i.e. was it processed by our parent FollowerRequestProcessor?) then the above test would be cleaner and this race would be easy to avoid.&lt;/p&gt;</comment>
                            <comment id="13886258" author="thawan" created="Thu, 30 Jan 2014 05:14:19 +0000"  >&lt;p&gt;Thanks for proposing a fix.  Here is my understanding of your proposed solution. (Assuming that the race is based on Camille&apos;s repro) &lt;/p&gt;

&lt;p&gt;1. It is only safe to pop &lt;tt&gt;committedRequests&lt;/tt&gt; and pass it down to next process when there is an outstanding write request (nextPending != null). Since we get to compare it with the outstanding write request. &lt;/p&gt;

&lt;p&gt;2. When nextPending == null,   a request can be in &lt;tt&gt;commitedRequests&lt;/tt&gt; only when it is already added to &lt;tt&gt;queuedRequests&lt;/tt&gt;. If there is a request in &lt;tt&gt;commitedRequests&lt;/tt&gt; it just need to check &lt;tt&gt;queuedRequests&lt;/tt&gt; again to check for potential matching request.&lt;/p&gt;

&lt;p&gt;I believe traversing over &lt;tt&gt;queuedRequests&lt;/tt&gt; is expensive and not needed. So I am thinking of doing this instead of that loop&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ( ! isWaitingForCommit() and ! queuedRequests.isEmpty()) { 
  &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
} 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea is that we abort the current attempt of trying to process the current committed request. Then repeat the loop of processing &lt;tt&gt;queuedRequests&lt;/tt&gt;. Eventually, if there is a matching request (or other write request) it will be assigned to &lt;tt&gt;nextPending&lt;/tt&gt; which allow us to process &lt;tt&gt;committedRequests&lt;/tt&gt; correctly&lt;/p&gt;

</comment>
                            <comment id="13886846" author="dutch" created="Thu, 30 Jan 2014 18:07:25 +0000"  >&lt;p&gt;Thawan - I considered that and still prefer, but I had trouble convincing myself that it is safe:&lt;/p&gt;

&lt;p&gt;The block we&apos;re trying to fix is:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                    Request pending = nextPending.get();
                    if (pending != null &amp;amp;&amp;amp;
                        pending.sessionId == request.sessionId &amp;amp;&amp;amp;
                        pending.cxid == request.cxid) {
                           ...
                    } else {
                        // this request came from someone else so just                                                   
                        // send the commit packet                                                                        
                        currentlyCommitting.set(request);
                        sendToNextProcessor(request);
                    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In that else block we would seem to be handing the case where nextPending is null but committedRequests isn&apos;t by sending the commit to the next processor.  Your solution would change that, by instead retrying the loop.  Is it possible that nothing would be placed on queuedRequests for a long time and we could starve committedRequests?&lt;/p&gt;

&lt;p&gt;I don&apos;t understand ramifications of that else clause well enough to say.  What do you think?&lt;/p&gt;</comment>
                            <comment id="13886993" author="thawan" created="Thu, 30 Jan 2014 19:55:31 +0000"  >&lt;p&gt;This is how that how the patch may looks like.  Some of the if statement can be merge but this is easier to understand for now&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
                /*
                 * Processing committedRequests: check and see &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the commit
                 * came in &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the pending request. We can only commit a
                 * request when there is no other request being processed.
                 */
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!stopped &amp;amp;&amp;amp; !isProcessingRequest() &amp;amp;&amp;amp;
                    (request = committedRequests.peak()) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                    
                    &lt;span class=&quot;code-comment&quot;&gt;// Abort the loop &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; there a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; request waiting in queuedRequests
&lt;/span&gt;                    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ( ! isWaitingForCommit() and ! queuedRequests.isEmpty()) { 
                       &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
                    }       

                    request = committedRequests.poll();

                    /*
                     * We match with nextPending so that we can move to the
                     * next request when it is committed. We also want to
                     * use nextPending because it has the cnxn member set
                     * properly.
                     */
                     .....
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Regarding your concern about this block.  There is not change to it, we still execute this one.  However, it will only get executed when queuedRequests is empty.  &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
                        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; request came from someone &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; so just                                                   
&lt;/span&gt;                        &lt;span class=&quot;code-comment&quot;&gt;// send the commit packet                                                                        
&lt;/span&gt;                        currentlyCommitting.set(request);
                        sendToNextProcessor(request);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This means that there is a potential starvation for committedRequests queue instead. Since we give a higher priority for queuedRequests  but the existing code already do that. My understanding is that ZK is supposed to be notification driven system. If there is no update (committedRequest) going through client would stop issuing read request and queuedRequests will be empty eventually and allow committed requests to go through.     &lt;/p&gt;</comment>
                            <comment id="13887050" author="dutch" created="Thu, 30 Jan 2014 21:10:38 +0000"  >&lt;p&gt;I think agree with you.  There is a limited potential for starvation, but that issue aside, this should perform better.  Either way, there should only be a performance impact in exceptional cases, but your simplification certainly makes the code easier to understand and maintain.  I&apos;d recommend using your approach.&lt;/p&gt;</comment>
                            <comment id="13888926" author="hadoopqa" created="Sun, 2 Feb 2014 14:12:33 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12625985/ZOOKEEPER-1863.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12625985/ZOOKEEPER-1863.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1561672.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1913//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1913//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13889820" author="thawan" created="Mon, 3 Feb 2014 19:46:17 +0000"  >&lt;p&gt;Yeah, we still need to think about test case (if it is possible to test) &lt;/p&gt;

&lt;p&gt;Also, I will try to allocate sometime to do perf test using my test cases that we don&apos;t see significant perf regression with this change. &lt;/p&gt;</comment>
                            <comment id="13959426" author="michim" created="Fri, 4 Apr 2014 00:31:46 +0100"  >&lt;p&gt;Any update on this?&lt;/p&gt;</comment>
                            <comment id="13994013" author="michim" created="Fri, 9 May 2014 23:48:26 +0100"  >&lt;p&gt;ping&lt;/p&gt;</comment>
                            <comment id="13996703" author="dutch" created="Tue, 13 May 2014 19:03:40 +0100"  >&lt;p&gt;Here&apos;s a patch that reflects Thawan&apos;s improvements over my original patch.  I&apos;ve had this running in production for some months now with no problems.&lt;/p&gt;

&lt;p&gt;There is no test included, as this race condition is rare enough that I don&apos;t believe it can be reliably reproduced without instrumenting the code to intentionally stall at key locations.  I have performed that test manually and verified that this patch fixes the issue.  We could add the necessary instrumentation to stall and control it with a flag that would be only useful to test, but I don&apos;t believe regressions are likely enough to justify a unit test that is so specific and complex.&lt;/p&gt;</comment>
                            <comment id="14000050" author="michim" created="Fri, 16 May 2014 18:51:21 +0100"  >&lt;p&gt;+1 I&apos;ll run zk-smoketest before checking this in to make sure there is no significant performance hit.&lt;/p&gt;</comment>
                            <comment id="14000365" author="hadoopqa" created="Fri, 16 May 2014 22:43:40 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12644667/ZOOKEEPER-1863.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12644667/ZOOKEEPER-1863.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1595273.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2099//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2099//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14046909" author="fournc" created="Sat, 28 Jun 2014 17:21:36 +0100"  >&lt;p&gt;Updating to something that should apply to trunk&lt;/p&gt;</comment>
                            <comment id="14046926" author="hadoopqa" created="Sat, 28 Jun 2014 18:11:18 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12653011/ZOOKEEPER-1863.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12653011/ZOOKEEPER-1863.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1606254.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2163//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2163//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2163//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2163//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2163//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2163//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14046927" author="fournc" created="Sat, 28 Jun 2014 18:13:26 +0100"  >&lt;p&gt;@michim any concerns with the perf impact here? Otherwise I&apos;m gonna check it in.&lt;/p&gt;</comment>
                            <comment id="14058734" author="fpj" created="Fri, 11 Jul 2014 13:59:54 +0100"  >&lt;p&gt;I was thinking that with the changes I&apos;m proposing here, we should be able to write a test case by populating committedRequests and queuedRequests accordingly. What do you think?&lt;/p&gt;</comment>
                            <comment id="14058975" author="rgs" created="Fri, 11 Jul 2014 17:41:44 +0100"  >&lt;p&gt;Thanks for the updated patch &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt;. Small readability nit, I think it reads better (and with less indentation) if you exit as early as you see an unmet condition:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    if (stopped || isProcessingRequest() || committedRequests.peek() == null) {
        return;
    }

    /*
     * ZOOKEEPER-1863: Abort the loop if there is a new request
     * waiting in queuedRequests or it is waiting for a
     * commit. 
     */
    if ( !isWaitingForCommit() &amp;amp;&amp;amp; !queuedRequests.isEmpty()) {
        return;
    }

    /* do it.... */

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14058993" author="rgs" created="Fri, 11 Jul 2014 17:50:18 +0100"  >&lt;p&gt;Oh, the comment here has some issues too:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+            /*
+             * ZOOKEEPER-1863: Abort the loop if there is a new request
+             * waiting in queuedRequests or it is waiting for a
+             * commit. 
+             */
+            if ( !isWaitingForCommit() &amp;amp;&amp;amp; !queuedRequests.isEmpty()) {
+                return;
+            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Abort the loop is not correct.. you&apos;ll keep looping from the calling method... abort processing the commit perhaps? Also, it says &quot;abort ... if it is waiting for a commit&quot;, whereas it&apos;s actually the contrary... right (!isWaitingForCommit)?&lt;/p&gt;</comment>
                            <comment id="14059100" author="hadoopqa" created="Fri, 11 Jul 2014 18:56:02 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12655221/ZOOKEEPER-1863.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12655221/ZOOKEEPER-1863.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1609730.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2186//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2186//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14059301" author="fpj" created="Fri, 11 Jul 2014 21:26:44 +0100"  >&lt;p&gt;I shouldn&apos;t have submitted the patch. I was proposing changes that allow us to write a test case by implementing a mock CommitProcessor and instantiating it independently. I haven&apos;t tried to write the test yet, but it sounds like it is doable this way. The comments are still valid, though, thanks for checking.&lt;/p&gt;</comment>
                            <comment id="14059920" author="fpj" created="Sat, 12 Jul 2014 22:07:43 +0100"  >&lt;p&gt;I have separated a part of the run loop in CommitProcessor so that I could reproduce the issue in a simple way, without using brute force to trigger the race. This patch adds the test case I mentioned before.&lt;/p&gt;</comment>
                            <comment id="14059934" author="rgs" created="Sat, 12 Jul 2014 22:50:49 +0100"  >&lt;p&gt;This indeed makes the CommitProcessor more readable (besides making it testable). Some nits though, take them or leave them as you wish:&lt;/p&gt;

&lt;p&gt;extra spaces around req:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+            this.committedRequests.add( req );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ditto:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+       processor.addToCommittedRequests( writeReq );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;debugging leftover?&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+       //processor.addToNextPending( writeReq );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14059935" author="hadoopqa" created="Sat, 12 Jul 2014 23:01:34 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12655418/ZOOKEEPER-1863.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12655418/ZOOKEEPER-1863.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1609730.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 87 new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2188//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2188//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2188//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2188//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2188//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2188//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14060049" author="fpj" created="Sun, 13 Jul 2014 09:52:38 +0100"  >&lt;p&gt;Thanks for the review, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rgs&quot; class=&quot;user-hover&quot; rel=&quot;rgs&quot;&gt;Raul Gutierrez Segales&lt;/a&gt;! I think this addresses your nits. I don&apos;t think this patch is related to the NioNettySuiteHammerTest test failure, but we will need to have a look at it separately.&lt;/p&gt;</comment>
                            <comment id="14060065" author="hadoopqa" created="Sun, 13 Jul 2014 10:59:31 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12655442/ZOOKEEPER-1863.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12655442/ZOOKEEPER-1863.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1609730.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 87 new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    -1 core tests.  The patch failed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2189//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2189//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2189//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2189//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2189//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2189//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14060071" author="fpj" created="Sun, 13 Jul 2014 11:25:13 +0100"  >&lt;p&gt;I checked the findbugs warnings, and I don&apos;t think there is anything in there due to this patch. Also, the nio hammer test seems to be crashing and I can&apos;t actually see the cause. The latest changes to jenkins seem to have made the pre-commit build unstable.&lt;/p&gt;</comment>
                            <comment id="14062571" author="rgs" created="Tue, 15 Jul 2014 21:06:47 +0100"  >&lt;p&gt;fwiw, +1. thanks for the patch &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14062589" author="fournc" created="Tue, 15 Jul 2014 21:17:34 +0100"  >&lt;p&gt;Just to clarify &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; this is just a patch so we can write a test, not a fix for the issue?&lt;/p&gt;</comment>
                            <comment id="14062637" author="fpj" created="Tue, 15 Jul 2014 21:55:53 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fournc&quot; class=&quot;user-hover&quot; rel=&quot;fournc&quot;&gt;Camille Fournier&lt;/a&gt;, it is a patch that fixes the issue. I made a modification to the original patch to be able to test it and added a test case.&lt;/p&gt;</comment>
                            <comment id="14062724" author="fournc" created="Tue, 15 Jul 2014 22:55:40 +0100"  >&lt;p&gt;Awesome. Checked this in to trunk. Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dutch&quot; class=&quot;user-hover&quot; rel=&quot;dutch&quot;&gt;Dutch T. Meyer&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rgs&quot; class=&quot;user-hover&quot; rel=&quot;rgs&quot;&gt;Raul Gutierrez Segales&lt;/a&gt; and everyone else who helped!&lt;/p&gt;</comment>
                            <comment id="14062784" author="hudson" created="Tue, 15 Jul 2014 23:37:44 +0100"  >&lt;p&gt;FAILURE: Integrated in ZooKeeper-trunk #2373 (See &lt;a href=&quot;https://builds.apache.org/job/ZooKeeper-trunk/2373/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/ZooKeeper-trunk/2373/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1863&quot; title=&quot;Race condition in commit processor leading to out of order request completion, xid mismatch on client.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1863&quot;&gt;&lt;del&gt;ZOOKEEPER-1863&lt;/del&gt;&lt;/a&gt;. Race condition in commit processor leading to out of order request completion, xid mismatch on client. (fpj and Dutch T Meyer via camille) (camille: &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1610861&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1610861&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12785275">ZOOKEEPER-2151</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12655442" name="ZOOKEEPER-1863.patch" size="11019" author="fpj" created="Sun, 13 Jul 2014 09:52:38 +0100"/>
                            <attachment id="12655418" name="ZOOKEEPER-1863.patch" size="11073" author="fpj" created="Sat, 12 Jul 2014 22:07:43 +0100"/>
                            <attachment id="12655221" name="ZOOKEEPER-1863.patch" size="5420" author="fpj" created="Fri, 11 Jul 2014 15:58:32 +0100"/>
                            <attachment id="12655207" name="ZOOKEEPER-1863.patch" size="5364" author="fpj" created="Fri, 11 Jul 2014 13:59:54 +0100"/>
                            <attachment id="12653011" name="ZOOKEEPER-1863.patch" size="1146" author="fournc" created="Sat, 28 Jun 2014 17:21:36 +0100"/>
                            <attachment id="12644667" name="ZOOKEEPER-1863.patch" size="1427" author="dutch" created="Tue, 13 May 2014 19:03:40 +0100"/>
                            <attachment id="12625985" name="ZOOKEEPER-1863.patch" size="2124" author="dutch" created="Wed, 29 Jan 2014 22:01:44 +0000"/>
                            <attachment id="12623744" name="stack.17512" size="36444" author="dutch" created="Fri, 17 Jan 2014 22:56:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 15 Jan 2014 18:26:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>368022</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzla8f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>368329</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>