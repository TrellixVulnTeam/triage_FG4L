<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:47:26 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/ZOOKEEPER-900/ZOOKEEPER-900.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[ZOOKEEPER-900] FLE implementation should be improved to use non-blocking sockets</title>
                <link>https://issues.apache.org/jira/browse/ZOOKEEPER-900</link>
                <project id="12310801" key="ZOOKEEPER">ZooKeeper</project>
                    <description>&lt;p&gt;From earlier email exchanges:&lt;br/&gt;
1. Blocking connects and accepts:&lt;/p&gt;

&lt;p&gt;a) The first problem is in manager.toSend(). This invokes connectOne(), which does a blocking connect. While testing, I changed the code so that connectOne() starts a new thread called AsyncConnct(). AsyncConnect.run() does a socketChannel.connect(). After starting AsyncConnect, connectOne starts a timer. connectOne continues with normal operations if the connection is established before the timer expires, otherwise, when the timer expires it interrupts AsyncConnect() thread and returns. In this way, I can have an upper bound on the amount of time we need to wait for connect to succeed. Of course, this was a quick fix for my testing. Ideally, we should use Selector to do non-blocking connects/accepts. I am planning to do that later once we at least have a quick fix for the problem and consensus from others for the real fix (this problem is big blocker for us). Note that it is OK to do blocking IO in SenderWorker and RecvWorker threads since they block IO to the respective peer.&lt;/p&gt;

&lt;p&gt;b) The blocking IO problem is not just restricted to connectOne(), but also in receiveConnection(). The Listener thread calls receiveConnection() for each incoming connection request. receiveConnection does blocking IO to get peer&apos;s info (s.read(msgBuffer)). Worse, it invokes connectOne() back to the peer that had sent the connection request. All of this is happening from the Listener. In short, if a peer fails after initiating a connection, the Listener thread won&apos;t be able to accept connections from other peers, because it would be stuck in read() or connetOne(). Also the code has an inherent cycle. initiateConnection() and receiveConnection() will have to be very carefully synchronized otherwise, we could run into deadlocks. This code is going to be difficult to maintain/modify.&lt;/p&gt;

&lt;p&gt;Also see: &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-822&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-822&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12477470">ZOOKEEPER-900</key>
            <summary>FLE implementation should be improved to use non-blocking sockets</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="4" iconUrl="https://issues.apache.org/jira/images/icons/statuses/reopened.png" description="This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.">Reopened</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="vishalmlst">Vishal Kher</assignee>
                                    <reporter username="vishalmlst">Vishal Kher</reporter>
                        <labels>
                    </labels>
                <created>Fri, 15 Oct 2010 15:07:41 +0100</created>
                <updated>Sat, 11 Apr 2015 23:02:23 +0100</updated>
                                                            <fixVersion>3.5.2</fixVersion>
                    <fixVersion>3.6.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                            <comments>
                            <comment id="12927518" author="vishalmlst" created="Tue, 2 Nov 2010 18:09:35 +0000"  >&lt;p&gt;Hi Flavio,&lt;/p&gt;

&lt;p&gt;I have a suggestion for changing the blocking IO code in QuorumCnxManager. It keeps the current code structure and requires a small amount of changes. I am not sure if these comments should go in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-901&quot; title=&quot;Redesign of QuorumCnxManager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-901&quot;&gt;ZOOKEEPER-901&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-901&quot; title=&quot;Redesign of QuorumCnxManager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-901&quot;&gt;ZOOKEEPER-901&lt;/a&gt; is probably addressing netty as well. Please feel free to close this JIRA if you intend to make all the changes as a part of &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-901&quot; title=&quot;Redesign of QuorumCnxManager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-901&quot;&gt;ZOOKEEPER-901&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically we jusy need to move parts of initiateConnection and receiveConnection to SenderWorker and ReceiveWorker.&lt;/p&gt;

&lt;p&gt;A. Current flow for receiving connection:&lt;br/&gt;
1. accept connection in Listener.run()&lt;br/&gt;
2. receiveConnection()&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Read remote server&apos;s ID&lt;/li&gt;
	&lt;li&gt;Take action based on my ID and remote server&apos;s ID (disconnect and reconnect if my ID is &amp;gt; remote server&apos;s ID).&lt;/li&gt;
	&lt;li&gt;kill current set of SenderWorker and ReciveWorker threads&lt;/li&gt;
	&lt;li&gt;Start a new pair&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;B Current flow for initiating connection:&lt;br/&gt;
1. In connectOne(), connect if not already connected. else return.&lt;br/&gt;
2. send my ID to the remote server&lt;br/&gt;
3. if my ID &amp;lt; remote server disconnect and return&lt;br/&gt;
4. if my ID &amp;gt; remote server&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;kill current set of SenderWorker and ReceiveWorkter threads for the remote server&lt;/li&gt;
	&lt;li&gt;Start a new pair&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Proposed changes:&lt;br/&gt;
Move the code that performs any blocking IO in SenderWorker and ReceiveWorker.&lt;/p&gt;

&lt;p&gt;A. Proposed flow for receiving connection:&lt;br/&gt;
1. accept connection in Listener.run()&lt;br/&gt;
2. receiveConnection()&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;kill current set of SenderWorker and ReciveWorker threads&lt;/li&gt;
	&lt;li&gt;Start a new pair&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Proposed changed to SenderWorker:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Read remote server&apos;s ID&lt;/li&gt;
	&lt;li&gt;Take action based on my ID and remote server&apos;s ID (disconnect and reconnect if my ID is &amp;gt; remote server&apos;s ID).&lt;/li&gt;
	&lt;li&gt;Proceed to normal operation&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;B Proposed flow for initiating connection:&lt;br/&gt;
1. in connectOne(), return if already connected&lt;br/&gt;
2. Start a new SenderWorker and ReceiveWorker pair&lt;br/&gt;
2. In SenderWorker&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;connect to remote server&lt;/li&gt;
	&lt;li&gt;write my ID&lt;/li&gt;
	&lt;li&gt;if my ID &amp;lt; remote server disconnect and return (shutdown the pair).&lt;/li&gt;
	&lt;li&gt;Proceed to normal operation&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Questions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In QuorumCnxManager, is it necessary to kill the current pair and restart a new one every time we receive a connect request?&lt;/li&gt;
	&lt;li&gt;In receiveConnection we may choose to reject an accepted connection if a thread in&lt;br/&gt;
SenderWorker is in the process of connecting. Otherwise a server with ID &amp;lt;&lt;br/&gt;
remote server may keep sending frequent connect request that will result in the&lt;br/&gt;
remote server closing connections for this peer. But I think we add a delay&lt;br/&gt;
before sending notifications, which might be good enough to prevent this&lt;br/&gt;
problem.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let me know what you think about this. I can also help with the implementation.&lt;/p&gt;

&lt;p&gt;-Vishal&lt;/p&gt;</comment>
                            <comment id="12928011" author="fpj" created="Wed, 3 Nov 2010 21:28:54 +0000"  >&lt;p&gt;Hi Vishal, I like your proposal, it seems reasonable and not difficult to implement.&lt;/p&gt;

&lt;p&gt;On your questions:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;I don&apos;t think it is necessary to kill a pair SenderWorker/RecvWorker every time, and I&apos;d certainly support changing it;&lt;/li&gt;
	&lt;li&gt;I&apos;m not sure where you&apos;re suggesting to introduce a delay. In the FLE code, a server sends a new batch of notifications if it changes its vote or if it times out waiting for a new notification. This timeout value increases over time.  I was actually thinking that we should reset the timeout value upon receiving a notification. I think this is a bug....&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Given that it is your proposal, I&apos;d be happy to let you take a stab at it and help you out if you need a hand. Does it make sense for you?&lt;/p&gt;</comment>
                            <comment id="12928590" author="vishalmlst" created="Fri, 5 Nov 2010 14:02:05 +0000"  >&lt;p&gt;Hi Flavio,&lt;/p&gt;

&lt;p&gt;Thanks for your feedback. I will do the code changes.&lt;/p&gt;

&lt;p&gt;For point 2 above, I was referring to the code that deletes the SenderWorker and ReceiveWorker pair after receiving a connect request. I was concerned that a peer might send frequent connect request before to the remote peer before the remote peer can initiate connection back. But I think the                 Notification n = recvqueue.poll(notTimeout,  TimeUnit.MILLISECONDS); in lookForLeader will prevent this scenario. Also, this won&apos;t be a concern if we decide to remove the part that kills the pair for each connect.&lt;/p&gt;

&lt;p&gt;I am also thinking of adding a sanity check that will accept connections only from peers that are not listed in the zoo.cfg file or OBSERVER_ID.&lt;br/&gt;
I have not used observes so far. Can you please explain why a node will use OBSERVER_ID instead of its sid? In particular, I am referring to the following code in QuorumCnxManager:&lt;br/&gt;
            // Read server id&lt;br/&gt;
            sid = Long.valueOf(msgBuffer.getLong());&lt;br/&gt;
            if(sid == QuorumPeer.OBSERVER_ID)&lt;/p&gt;
{
                /*
                 * Choose identifier at random. We need a value to identify
                 * the connection.
                 */
                
                sid = observerCounter--;
                LOG.info(&quot;Setting arbitrary identifier to observer: &quot; + sid);
            }</comment>
                            <comment id="12930225" author="mahadev" created="Tue, 9 Nov 2010 18:34:46 +0000"  >&lt;p&gt;This is definitely a good step in cleaning up QuorumCnxnManager!  I have updated the jira to mark it for 3.4 release. Vishal is that ok with you? Would you be able to provide a patch for the 3.4 release?&lt;/p&gt;</comment>
                            <comment id="12930272" author="vishalmlst" created="Tue, 9 Nov 2010 20:08:38 +0000"  >&lt;p&gt;Hi Mahadev,&lt;/p&gt;

&lt;p&gt;Yes, I will provide a patch (for the approach proposed above). I am working on it. I will get in touch with Flavio if I have questions.&lt;/p&gt;

&lt;p&gt;-Vishal&lt;/p&gt;
</comment>
                            <comment id="12931056" author="vishalmlst" created="Thu, 11 Nov 2010 16:01:53 +0000"  >&lt;p&gt;Hi Flavio,&lt;/p&gt;

&lt;p&gt;I have a question regarding the logic that determines which connection&lt;br/&gt;
to retain if peer 1 and peer 2 decide to communicate with each other.&lt;/p&gt;

&lt;p&gt;Suppose peer 1 connects to peer 2. It first sends its sid as a&lt;br/&gt;
challenge. Peer 2 reads the sid and determines whether to keep the&lt;br/&gt;
connection or initiate a connection back to peer 1. Both determine&lt;br/&gt;
that peer 2 should be the one initiating the connection to peer 1&lt;br/&gt;
since sid of peer2 &amp;gt; sid of peer1.  I am concerned that they both &lt;br/&gt;
may not be able to maintain any connection since the handshake is&lt;br/&gt;
one-way.&lt;/p&gt;

&lt;p&gt;In the current implementation, peer1 disconnects immediately after&lt;br/&gt;
writing the challenge to peer 2. It can happen that peer 2 may get a&lt;br/&gt;
ClosedChannelException before it reads the challenge from peer 1. As a&lt;br/&gt;
result, peer 2 will not initiate a connection to peer 1.&lt;/p&gt;

&lt;p&gt;Is this a legitimate problem? If it is, how about we ask peer 2 to&lt;br/&gt;
send back a ACK after it reads the challenge. Peer 1 will do a timed&lt;br/&gt;
read() after writing a challenge to peer 2. This will hopefully give&lt;br/&gt;
peer 2 enough time to read the challenge and take appropriate&lt;br/&gt;
action. If peer 2 is really slow, peer 1 will timeout on the read&lt;br/&gt;
operation.&lt;/p&gt;

&lt;p&gt;-Vishal&lt;/p&gt;</comment>
                            <comment id="12931353" author="fpj" created="Fri, 12 Nov 2010 08:58:55 +0000"  >&lt;p&gt;Hi Vishal, This is a good question. I&apos;m actually assuming that the behavior of TCP is such that if I send a message and then close the channel properly (calling close()), due to the reliability and order guarantees of the connection, the message will get through before the connection closes. Essentially, I&apos;m relying upon the TCP ACK to do exactly what you&apos;re proposing. However, it might be a good idea to make sure that the assumption is correct or if you know the answer already, just let me know. Overall I do agree that having an ACK is important.  &lt;/p&gt;

</comment>
                            <comment id="12931444" author="phunt" created="Fri, 12 Nov 2010 17:12:43 +0000"  >&lt;p&gt;Flavio, I&apos;d be worried that different tcp stacks might (inter)operate differently in practice vs theory.&lt;/p&gt;


&lt;p&gt;In general it&apos;s pretty tough to get this right - look at all the problems we&apos;ve been having with netcat behavior&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;amp;&amp;amp;query=netcat&amp;amp;summary=true&amp;amp;description=true&amp;amp;body=true&amp;amp;pid=12310801&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;amp;&amp;amp;query=netcat&amp;amp;summary=true&amp;amp;description=true&amp;amp;body=true&amp;amp;pid=12310801&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu recently moved from &quot;traditional&quot; to the newish bsd flavor (supports ipv6 natively) of nc and we are back to having issues after having made significant changes in 3.3 to fix this (incl a number of tests that simulated the nc behavior as closely as we could understand it).&lt;/p&gt;</comment>
                            <comment id="12931460" author="fpj" created="Fri, 12 Nov 2010 17:41:45 +0000"  >&lt;p&gt;That&apos;s a pretty strong statement. You&apos;re essentially suggesting that we shouldn&apos;t rely upon TCP to implement even its basic functionality. Also, my understanding is that Vishal is just reasoning about the code and he hasn&apos;t been able to reproduce that situation. Please correct me if I&apos;m mistaken, Vishal.&lt;/p&gt;</comment>
                            <comment id="12931466" author="phunt" created="Fri, 12 Nov 2010 17:47:16 +0000"  >&lt;p&gt;I don&apos;t know for this specific case, but the corners I&apos;ve looked at (tearing down a connection) there have been issues. Perhaps they are issues on our side, I&apos;m not certain, but I do know that we fail with this version of nc (default in ubuntu maverick) even after significant work was done to address the original problem:&lt;br/&gt;
OpenBSD netcat (Debian patchlevel 1.89-3ubuntu2)&lt;/p&gt;

&lt;p&gt;Let&apos;s assume what you say is correct &amp;#8211; we&apos;d want to test this carefully to assure ourselves.&lt;/p&gt;</comment>
                            <comment id="12931470" author="fpj" created="Fri, 12 Nov 2010 17:56:25 +0000"  >&lt;p&gt;Sure, I can investigate a little further, and Vishal let us know if you find anything.&lt;/p&gt;</comment>
                            <comment id="12931485" author="vishalmlst" created="Fri, 12 Nov 2010 18:44:07 +0000"  >&lt;p&gt;There are two enhancements that I am working on for QuorumCnxManager.&lt;/p&gt;

&lt;p&gt;1. QCM uses blocking IO for communicating with other peers. It does&lt;br/&gt;
not set a timeout for network read/write operations. SO_TIMEOUT does&lt;br/&gt;
not work with SocketChannel.&lt;/p&gt;

&lt;p&gt;2. Incoming requests are processed one at a time. As a result, if QCM is&lt;br/&gt;
processing a connection from a peer and that peer fails, then requests&lt;br/&gt;
from other peers won&apos;t be processed. Even if we add timeout to&lt;br/&gt;
read/write calls, other peers will be blocked for that amount of&lt;br/&gt;
time. I had proposed a change in my earlier post for this part (see&lt;br/&gt;
above). I am working on a fix.&lt;/p&gt;

&lt;p&gt;The attached patch addresses the first problem. Earlier, QCM used&lt;br/&gt;
SocketChannels. Now it uses DataInputStream/DataOutputStream, which&lt;br/&gt;
will blocki only until SO_TIMEOUT expires.&lt;/p&gt;

&lt;p&gt;There are also some formatting changes done automatically by my editor&lt;br/&gt;
according to Java coding standards. So some of the changes are just&lt;br/&gt;
cosmetic.&lt;/p&gt;

&lt;p&gt;I have tested this change by creating a 3 node cluster and rebooting&lt;br/&gt;
leader/follower several times. The patch also includes a simple test.&lt;/p&gt;

&lt;p&gt;Please let me know your comments.&lt;/p&gt;</comment>
                            <comment id="12931487" author="phunt" created="Fri, 12 Nov 2010 18:49:10 +0000"  >&lt;p&gt;please try to keep the reformatting changes to a minimum unless it&apos;s code directly being worked on. otw it makes it harder to review (svn -x -w diff does help, but still) and &quot;blame&quot; detail is lost.&lt;/p&gt;</comment>
                            <comment id="12931489" author="vishalmlst" created="Fri, 12 Nov 2010 19:01:07 +0000"  >&lt;p&gt;ok. how about making an exception for formatting for this patch? I would have to spend some time reapplying  the changes (which I would like to avoid &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;).&lt;/p&gt;</comment>
                            <comment id="12931497" author="phunt" created="Fri, 12 Nov 2010 19:18:19 +0000"  >&lt;p&gt;Looking at the patch. Quite a bit changed, hard to tell which is important and which not. In these situations I&apos;ve used the -w diff trick to get just the important changes, then applied that patch to virgin code, opened the file in eclipse and fixed the (relatively) smaller set of formatting issues.&lt;/p&gt;

&lt;p&gt;Also, the patch includes log4j.properties change, you don&apos;t want to include that I&apos;m thinking.&lt;/p&gt;</comment>
                            <comment id="12931502" author="vishalmlst" created="Fri, 12 Nov 2010 19:22:35 +0000"  >&lt;p&gt;Diff of log4j file was included by mistake. I will post a patch without formatting changes.&lt;/p&gt;</comment>
                            <comment id="12931522" author="vishalmlst" created="Fri, 12 Nov 2010 20:45:10 +0000"  >&lt;p&gt;Hi Flavio,&lt;/p&gt;

&lt;p&gt;Regarding your comment:&lt;br/&gt;
I was reasoning about the code. I had not tried to reproduce the problem when I posted the question. &lt;/p&gt;

&lt;p&gt;I tried a simple test and I am not able to reproduce the problem on Suse. I closed the connection after writing the server ID but before the receiving server issued a  read. The receiver was able to read the ID and on the following read it got a socket closed exception.&lt;/p&gt;

&lt;p&gt;I am not sure if all TCP implementations would behave this way.&lt;/p&gt;

&lt;p&gt;-Vishal&lt;/p&gt;</comment>
                            <comment id="12931539" author="vishalmlst" created="Fri, 12 Nov 2010 21:56:32 +0000"  >&lt;p&gt;Attaching the patch without formatting changes.&lt;/p&gt;</comment>
                            <comment id="12931554" author="phunt" created="Fri, 12 Nov 2010 22:44:19 +0000"  >&lt;p&gt;fyi, if a patch is ready for review/commit then click the &quot;submit patch&quot; link &amp;#8211; will trigger the workflow.&lt;br/&gt;
Also if you use the same patch name (ZOOKEEPER-###.patch) and re-attach with the same name jira will handle this correctly, more detail here:&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/hadoop/ZooKeeper/HowToContribute&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/ZooKeeper/HowToContribute&lt;/a&gt;&lt;br/&gt;
thanks!&lt;/p&gt;</comment>
                            <comment id="12931556" author="vishalmlst" created="Fri, 12 Nov 2010 22:49:22 +0000"  >&lt;p&gt;submitted patch &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-900&quot; title=&quot;FLE implementation should be improved to use non-blocking sockets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-900&quot;&gt;ZOOKEEPER-900&lt;/a&gt;.patch1&lt;/p&gt;</comment>
                            <comment id="12931565" author="hadoopqa" created="Fri, 12 Nov 2010 23:22:24 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12459485/ZOOKEEPER-900.patch2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12459485/ZOOKEEPER-900.patch2&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1034003.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 2 new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/26//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/26//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/26//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/26//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/26//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/26//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12932085" author="fpj" created="Mon, 15 Nov 2010 15:42:26 +0000"  >&lt;p&gt;Hi Vishal, Good job, thanks! The patch is pretty much good for me. Just a few points:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Findbugs complained about the fact that we are not checking if sock is null in line 674. It could be if the previous catch block is executed. I was actually thinking that there should be a single try block followed by two catch blocks, no?&lt;/li&gt;
	&lt;li&gt;You may also consider fixing the other two issues Findbugs is complaining about. The statement declaring msgLength should be removed. It was probably there for debugging purposes;&lt;/li&gt;
	&lt;li&gt;From the patch, it sounds like the formatting for some of the log statements got messed up. I would appreciate if you could fix those. I&apos;ve seen just a couple of them.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12932118" author="phunt" created="Mon, 15 Nov 2010 17:23:26 +0000"  >&lt;p&gt;I&apos;d appreciate if you could fix the findbugs, that would be great. See also &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-902&quot; title=&quot;Fix findbug issue in trunk &amp;quot;Malicious code vulnerability&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-902&quot;&gt;&lt;del&gt;ZOOKEEPER-902&lt;/del&gt;&lt;/a&gt; &amp;#8211; as part of the fix set the findbugs acceptable back to 0. Thanks!&lt;/p&gt;</comment>
                            <comment id="12932220" author="vishalmlst" created="Mon, 15 Nov 2010 22:07:13 +0000"  >&lt;p&gt;Hi Flavio, Pat,&lt;/p&gt;

&lt;p&gt;I will submit a new patch with suggested changes. For 902 do I just add a file ./java/test/bin/test-patch.properties with OK_FINDBUGS_WARNINGS=0 in it?&lt;/p&gt;</comment>
                            <comment id="12932228" author="fpj" created="Mon, 15 Nov 2010 22:25:07 +0000"  >&lt;p&gt;If we fix the findbugs issue here, then we should just close &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-902&quot; title=&quot;Fix findbug issue in trunk &amp;quot;Malicious code vulnerability&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-902&quot;&gt;&lt;del&gt;ZOOKEEPER-902&lt;/del&gt;&lt;/a&gt; stating that it was resolved in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-900&quot; title=&quot;FLE implementation should be improved to use non-blocking sockets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-900&quot;&gt;ZOOKEEPER-900&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12932571" author="vishalmlst" created="Tue, 16 Nov 2010 18:13:46 +0000"  >&lt;p&gt;Hi Flavio, Pat,&lt;/p&gt;

&lt;p&gt;I have attached the patch with suggested modifications. I did some more testing and also ran SimpleSysTest.&lt;/p&gt;

&lt;p&gt;Other than the changes suggested above and some cosmetic changes to error messages, I have added a delay on 1 second in Listener.run() in case we see an IOException.&lt;/p&gt;

&lt;p&gt;Let me know if you have more comments.&lt;/p&gt;

&lt;p&gt;-Vishal&lt;/p&gt;</comment>
                            <comment id="12932572" author="vishalmlst" created="Tue, 16 Nov 2010 18:14:52 +0000"  >&lt;p&gt;patch submitted.&lt;/p&gt;</comment>
                            <comment id="12932595" author="hadoopqa" created="Tue, 16 Nov 2010 18:48:55 +0000"  >&lt;p&gt;+1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12459714/ZOOKEEPER-900.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12459714/ZOOKEEPER-900.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1034003.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/32//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/32//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/32//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/32//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/32//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/32//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="12932724" author="vishalmlst" created="Wed, 17 Nov 2010 00:16:09 +0000"  >&lt;p&gt;Hi Flavio,&lt;/p&gt;

&lt;p&gt;Currently the QCM  keeps the TCP connections to other peers alive even after finishing leader election. How about we shutdown these threads after  a node decides to be a leader or a follower?The threads get created on fly.  Do you see any problem with that? &lt;/p&gt;

&lt;p&gt;Thanks.&lt;br/&gt;
-Vishal&lt;/p&gt;</comment>
                            <comment id="12932974" author="fpj" created="Wed, 17 Nov 2010 15:02:44 +0000"  >&lt;p&gt;+1, Great job, Vishal! On your question, the problem is that it is not easy to decide when a peer can close its connections because it doesn&apos;t know in which state others are and it might need to receive and respond to notifications. In any case, if have an idea for how to do it and want to discuss it further, we could create a new jira and work there, since this is a separate issue.&lt;/p&gt;</comment>
                            <comment id="12932975" author="fpj" created="Wed, 17 Nov 2010 15:03:13 +0000"  >&lt;p&gt;Committed revision 1036071.&lt;/p&gt;</comment>
                            <comment id="12932995" author="vishalmlst" created="Wed, 17 Nov 2010 15:49:45 +0000"  >&lt;p&gt;Hi Flavio,&lt;/p&gt;

&lt;p&gt;Thanks. I will take shutting down of worker threads in a separate&lt;br/&gt;
jira.&lt;/p&gt;

&lt;p&gt;I am cleaning up QCM further to incorporate the change mentioned in my&lt;br/&gt;
comment on 02/Nov/10 02:09 PM.&lt;/p&gt;

&lt;p&gt;I have a few more questions:&lt;/p&gt;

&lt;p&gt;1. I have a question about the following piece of code in QCM:&lt;/p&gt;

&lt;p&gt;       if (remoteSid == QuorumPeer.OBSERVER_ID) &lt;/p&gt;
{
            /*
             * Choose identifier at random. We need a value to identify
             * the connection.
             */
    
            remoteSid = observerCounter--;
            LOG.info(&quot;Setting arbitrary identifier to observer: &quot; + remoteSid);
        }


&lt;p&gt;Should we allow this? The problem with this code is that if a peer&lt;br/&gt;
connects twice with QuorumPeer.OBSERVER_ID, we will end up creating&lt;br/&gt;
threads for this peer twice. This could result in redundant&lt;br/&gt;
SendWorker/RecvWorker threads.&lt;/p&gt;

&lt;p&gt;I haven&apos;t used observers yet. The documentation&lt;br/&gt;
&lt;a href=&quot;http://hadoop.apache.org/zookeeper/docs/r3.3.0/zookeeperObservers.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hadoop.apache.org/zookeeper/docs/r3.3.0/zookeeperObservers.html&lt;/a&gt;&lt;br/&gt;
says that just like followers, observers should have server IDs. In&lt;br/&gt;
which case, why do we want to provide a wild-card?&lt;/p&gt;

&lt;p&gt;2. Should I add a check to reject connections from peers that are not&lt;br/&gt;
listed in the configuration file? Currently, we are not doing any&lt;br/&gt;
sanity check for server IDs. I think this might fix &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-851&quot; title=&quot;ZK lets any node to become an observer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-851&quot;&gt;ZOOKEEPER-851&lt;/a&gt;.&lt;br/&gt;
The fix is simple. However, I am not sure if anyone in community&lt;br/&gt;
is relying on this ability.&lt;/p&gt;

&lt;p&gt;-Vishal&lt;/p&gt;
</comment>
                            <comment id="12932999" author="fpj" created="Wed, 17 Nov 2010 16:00:45 +0000"  >&lt;p&gt;Ok, there might have been a confusion. I&apos;ve seen the patch available flag up and I interpreted it as ready to commit (after review, of course). If you still think there is work to be done on this jira, Vishal, please consider reopening it and creating sub-tasks. From your comments, I can extract at least 3 possible tasks. &lt;/p&gt;

&lt;p&gt;Once you create sub-tasks (or new independent jiras), I will comment on your questions. I&apos;d rather do that so that we don&apos;t mix up the discussion. Is that ok? &lt;/p&gt;</comment>
                            <comment id="12933009" author="vishalmlst" created="Wed, 17 Nov 2010 16:15:56 +0000"  >&lt;p&gt;The committed patch fixed one part of the problem (enforced timeout on network IO).&lt;/p&gt;

&lt;p&gt;Reopening for remaining subtasks.&lt;/p&gt;</comment>
                            <comment id="12933024" author="phunt" created="Wed, 17 Nov 2010 16:37:20 +0000"  >&lt;p&gt;I see some great information about how the code/algos operate being detailed in these jiras. I highly encourage you guys to document this stuff in either the code or in a separate document available on the wiki/forrest (now mvn site, whatever). It&apos;s critical&lt;br/&gt;
that we provide more details like this to our devs.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/BOOKKEEPER-693&quot; title=&quot;Review of BookKeeper Documentation (Sequence flow and failure scenarios)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BOOKKEEPER-693&quot;&gt;ZOOKEEPER-918&lt;/a&gt; as a great example of what I&apos;m talking about. (although adding more comments to the code is fine too).&lt;/p&gt;

&lt;p&gt;Basically, if you find yourself describing something in a jira that&apos;s not documented already, consider documenting it. Thanks.&lt;/p&gt;</comment>
                            <comment id="12934123" author="hudson" created="Sat, 20 Nov 2010 10:52:21 +0000"  >&lt;p&gt;Integrated in ZooKeeper-trunk #1010 (See &lt;a href=&quot;https://hudson.apache.org/hudson/job/ZooKeeper-trunk/1010/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/ZooKeeper-trunk/1010/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="13130412" author="mahadev" created="Wed, 19 Oct 2011 07:58:29 +0100"  >&lt;p&gt;Vishal, please use different jira&apos;s for subtasks. Reopening the same jira causes a lot of confusion. I am moving this out to 3.4.1 for now.&lt;/p&gt;</comment>
                            <comment id="13630271" author="abranzyck" created="Fri, 12 Apr 2013 17:29:42 +0100"  >&lt;p&gt;Avoiding locking in the connect solves also &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1678&quot; title=&quot;Server fails to join quorum when a peer is unreachable (5 ZK server setup)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1678&quot;&gt;ZOOKEEPER-1678&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13789762" author="phunt" created="Tue, 8 Oct 2013 22:59:39 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vishalmlst&quot; class=&quot;user-hover&quot; rel=&quot;vishalmlst&quot;&gt;Vishal Kher&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mahadev&quot; class=&quot;user-hover&quot; rel=&quot;mahadev&quot;&gt;Mahadev konar&lt;/a&gt; what&apos;s the status on this? Should we close in preference to another jira? (as Mahadev suggested)&lt;/p&gt;</comment>
                            <comment id="13790067" author="mahadev" created="Wed, 9 Oct 2013 07:18:16 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=phunt&quot; class=&quot;user-hover&quot; rel=&quot;phunt&quot;&gt;Patrick Hunt&lt;/a&gt; I htink we can close this one in favor of another jira.&lt;/p&gt;</comment>
                            <comment id="13821158" author="abranzyck" created="Wed, 13 Nov 2013 10:24:22 +0000"  >&lt;p&gt;I think that this should take the direction of allowing the option to use Netty also in leader election, together with making connections asynchronous. This is mentioned by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=phunt&quot; class=&quot;user-hover&quot; rel=&quot;phunt&quot;&gt;Patrick Hunt&lt;/a&gt; in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-901&quot; title=&quot;Redesign of QuorumCnxManager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-901&quot;&gt;ZOOKEEPER-901&lt;/a&gt;. &lt;br/&gt;
Should we use that one or a brand new JIRA?&lt;/p&gt;</comment>
                            <comment id="14130830" author="reedwm" created="Thu, 11 Sep 2014 23:49:17 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I&apos;m wondering if there&apos;s any progress on this JIRA. I&apos;m running into an issue similar to that of &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1678&quot; title=&quot;Server fails to join quorum when a peer is unreachable (5 ZK server setup)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1678&quot;&gt;ZOOKEEPER-1678&lt;/a&gt;, which can be solved by fixing this. If no one is working on it, I&apos;d be happy to take a stab at it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vishalmlst&quot; class=&quot;user-hover&quot; rel=&quot;vishalmlst&quot;&gt;Vishal Kher&lt;/a&gt;&apos;s patch added a timeout for connections to other peers, but it still seems appears that only one connection can be processed at a time. Additionally, in connectOne(long), a lock on the QuorumPeer is held, preventing other threads from accessing it. Both this issues seem to contribute to &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1678&quot; title=&quot;Server fails to join quorum when a peer is unreachable (5 ZK server setup)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1678&quot;&gt;ZOOKEEPER-1678&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vishalmlst&quot; class=&quot;user-hover&quot; rel=&quot;vishalmlst&quot;&gt;Vishal Kher&lt;/a&gt; suggested in an earlier comment to move the socket operations to SenderWorker and RecvWorker, which would prevent socket operations from blocking other connections.&lt;/p&gt;

&lt;p&gt;Let me know what your thoughts are. Thanks!&lt;/p&gt;</comment>
                            <comment id="14138074" author="reedwm" created="Wed, 17 Sep 2014 22:58:48 +0100"  >&lt;p&gt;I&apos;ve attached a patch that fixes the blocking issue in connectOne(). I&apos;ve moved much of the conncetion logic into SendWorker, so all the socket operations are done on a seperate thread. Some of the code in the two connectOne() methods were moved to SendWorker.conncetToServer. Additionally, receiveConnection() and initiateConnection() were moved to conncetOne. As a result, conncetOne() shouldn&apos;t wait for the connection to be established before returning.&lt;/p&gt;

&lt;p&gt;One consequence of this is that SendWorker.finish() may block for the connection to be made, if it&apos;s called before a connection is established (since both finish() and SendWorker.establishConnection() are synchronized). This is better than blocking on connectOne(), but does anyone have any ideas to fix this?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12477655">ZOOKEEPER-902</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12639720">ZOOKEEPER-1678</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12477563">ZOOKEEPER-901</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12669532" name="ZOOKEEPER-900-part2.patch" size="30896" author="reedwm" created="Wed, 17 Sep 2014 22:58:48 +0100"/>
                            <attachment id="12459714" name="ZOOKEEPER-900.patch" size="26419" author="vishalmlst" created="Tue, 16 Nov 2010 18:13:46 +0000"/>
                            <attachment id="12459475" name="ZOOKEEPER-900.patch1" size="35217" author="vishalmlst" created="Fri, 12 Nov 2010 18:44:07 +0000"/>
                            <attachment id="12459485" name="ZOOKEEPER-900.patch2" size="25662" author="vishalmlst" created="Fri, 12 Nov 2010 21:56:32 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12480223">ZOOKEEPER-932</subtask>
                            <subtask id="12480224">ZOOKEEPER-933</subtask>
                            <subtask id="12480225">ZOOKEEPER-934</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 3 Nov 2010 21:28:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>170</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxztuf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32819</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>