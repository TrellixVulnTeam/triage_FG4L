<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:42:17 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/ZOOKEEPER-1697/ZOOKEEPER-1697.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[ZOOKEEPER-1697] large snapshots can cause continuous quorum failure</title>
                <link>https://issues.apache.org/jira/browse/ZOOKEEPER-1697</link>
                <project id="12310801" key="ZOOKEEPER">ZooKeeper</project>
                    <description>&lt;p&gt;I keep seeing this on the leader:&lt;/p&gt;

&lt;p&gt;2013-04-30 01:18:39,754 INFO&lt;br/&gt;
org.apache.zookeeper.server.quorum.Leader: Shutdown called&lt;br/&gt;
java.lang.Exception: shutdown Leader! reason: Only 0 followers, need 2&lt;br/&gt;
at org.apache.zookeeper.server.quorum.Leader.shutdown(Leader.java:447)&lt;br/&gt;
at org.apache.zookeeper.server.quorum.Leader.lead(Leader.java:422)&lt;br/&gt;
at org.apache.zookeeper.server.quorum.QuorumPeer.run(QuorumPeer.java:753)&lt;/p&gt;

&lt;p&gt;The followers are downloading the snapshot when this happens, and are&lt;br/&gt;
trying to do their first ACK to the leader, the ack fails with broken&lt;br/&gt;
pipe.&lt;/p&gt;

&lt;p&gt;In this case the snapshots are large and the config has increased the&lt;br/&gt;
initLimit. syncLimit is small - 10 or so with ticktime of 2000. Note&lt;br/&gt;
this is 3.4.3 with &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1521&quot; title=&quot;LearnerHandler initLimit/syncLimit problems specifying follower socket timeout limits&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1521&quot;&gt;&lt;del&gt;ZOOKEEPER-1521&lt;/del&gt;&lt;/a&gt; applied.&lt;/p&gt;

&lt;p&gt;I originally speculated that&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1521&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/ZOOKEEPER-1521&lt;/a&gt; might be related.&lt;br/&gt;
I thought I might have broken something for this environment. That&lt;br/&gt;
doesn&apos;t look to be the case.&lt;/p&gt;

&lt;p&gt;As it looks now it seems that 1521 didn&apos;t go far enough. The leader&lt;br/&gt;
verifies that all followers have ACK&apos;d to the leader within the last&lt;br/&gt;
&quot;syncLimit&quot; time period. This runs all the time in the background on&lt;br/&gt;
the leader to identify the case where a follower drops. In this case&lt;br/&gt;
the followers take so long to load the snapshot that this check fails&lt;br/&gt;
the very first time, as a result the leader drops (not enough ack&apos;d&lt;br/&gt;
followers w/in the sync limit) and re-election happens. This repeats&lt;br/&gt;
forever. (the above error)&lt;/p&gt;

&lt;p&gt;this is the call:&lt;br/&gt;
org.apache.zookeeper.server.quorum.LearnerHandler.synced() that&apos;s at&lt;br/&gt;
odds.&lt;/p&gt;

&lt;p&gt;look at setting of tickOfLastAck in&lt;br/&gt;
org.apache.zookeeper.server.quorum.LearnerHandler.run()&lt;br/&gt;
It&apos;s not set until the follower first acks - in this case I can see&lt;br/&gt;
that the followers are not getting to the ack prior to the leader&lt;br/&gt;
shutting down due to the error log above.&lt;/p&gt;

&lt;p&gt;It seems that sync() should probably use the init limit until the&lt;br/&gt;
first ack comes in from the follower. I also see that while tickOfLastAck and leader.self.tick is shared btw two threads there is no synchronization of the shared resources.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12645566">ZOOKEEPER-1697</key>
            <summary>large snapshots can cause continuous quorum failure</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="phunt">Patrick Hunt</assignee>
                                    <reporter username="phunt">Patrick Hunt</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 May 2013 01:38:05 +0100</created>
                <updated>Thu, 13 Mar 2014 18:17:11 +0000</updated>
                            <resolved>Sat, 11 May 2013 14:35:32 +0100</resolved>
                                    <version>3.4.3</version>
                    <version>3.5.0</version>
                                    <fixVersion>3.4.6</fixVersion>
                    <fixVersion>3.5.0</fixVersion>
                                    <component>server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                <comments>
                            <comment id="13646256" author="thawan" created="Wed, 1 May 2013 02:02:28 +0100"  >&lt;p&gt;When I ran into a similar problem, I found that the main culprit is &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1324&quot; title=&quot;Remove Duplicate NEWLEADER packets from the Leader to the Follower.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1324&quot;&gt;&lt;del&gt;ZOOKEEPER-1324&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The side-effect of that bug is that it caused the initial set of followers that join the quorum before the quorum is formed to get duplicate NEWLEADER packets. Those followers will take one more additional snapshot after sending NEWLEADER&apos;s ACK back to the leader and before serving request. &lt;/p&gt;

&lt;p&gt;This caused the leader to tear down the quorum if syncLimit is low and snapshot taking time is high.&lt;/p&gt;

&lt;p&gt;You can look at the follower logs to see that they are taking 2 snapshots to confirm if this is the case.  &lt;/p&gt;</comment>
                            <comment id="13646365" author="phunt" created="Wed, 1 May 2013 05:21:16 +0100"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thawan&quot; class=&quot;user-hover&quot; rel=&quot;thawan&quot;&gt;Thawan Kooburat&lt;/a&gt; I really appreciate the feedback. I do indeed see two snapshotting messages in the follower log.&lt;/p&gt;

&lt;p&gt;Say &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1324&quot; title=&quot;Remove Duplicate NEWLEADER packets from the Leader to the Follower.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1324&quot;&gt;&lt;del&gt;ZOOKEEPER-1324&lt;/del&gt;&lt;/a&gt; is fixed, it seems to me that this Jira would still need to be addressed, no? In the case with a very large snapshot file (say twice as large) we could still run into the same issue I describe here. &quot;tear down the quorum if syncLimit is low and snapshot taking time is high&quot;. Do you agree or am I missing something?&lt;/p&gt;

&lt;p&gt;Thanks again.&lt;/p&gt;</comment>
                            <comment id="13646723" author="fpj" created="Wed, 1 May 2013 18:16:05 +0100"  >&lt;p&gt;I&apos;m also not entirely convinced that solving &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1324&quot; title=&quot;Remove Duplicate NEWLEADER packets from the Leader to the Follower.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1324&quot;&gt;&lt;del&gt;ZOOKEEPER-1324&lt;/del&gt;&lt;/a&gt; will solve this current issue. Talking about &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1324&quot; title=&quot;Remove Duplicate NEWLEADER packets from the Leader to the Follower.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1324&quot;&gt;&lt;del&gt;ZOOKEEPER-1324&lt;/del&gt;&lt;/a&gt;, I&apos;d really like to have it in soon.&lt;/p&gt;

&lt;p&gt;I had a look at trunk, and I don&apos;t understand how LearnerHandler#synced() can be the culprit here. Calls to synced() appear in two places in Leader: &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;In the second while loop of lead(), after enough followers have synchronized;&lt;/li&gt;
	&lt;li&gt;In isQuorumSynced(), which is used with the RECONFIG command. It seems unrelated to the issue described here.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I looked at trunk because this issue is also marked for 3.5.0.&lt;/p&gt;
</comment>
                            <comment id="13646820" author="phunt" created="Wed, 1 May 2013 19:56:54 +0100"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; thanks for looking. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I looked at trunk because this issue is also marked for 3.5.0.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry for the confusion. I listed the &quot;Affects Version&quot; as 3.4.3, because that&apos;s where I saw it. Marked as fix for both 3.4 and 3.5 because I wanted to make sure we considered it for both. I haven&apos;t looked to see if it effects 3.5 though. To be clear I&apos;ve been looking at 3.4 codebase. In particular 3.4.3 release codebase which is where the issue was seen.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I had a look at trunk, and I don&apos;t understand how LearnerHandler#synced() can be the culprit here. Calls to synced() appear in two places in Leader:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is this still a question for you if you look at the 3.4.3 codebase?&lt;/p&gt;

&lt;p&gt;What I see in the logs is that the leader has shut down with the log I mentioned:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;org.apache.zookeeper.server.quorum.Leader: Shutdown called
java.lang.Exception: shutdown Leader! reason: Only 0 followers, need 2
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All four of the followers were in the middle of snapshotting during this time. Once they complete that task they then attempt to &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        writePacket(ack, true);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ve verified from all four follower logs that this fails for all four in this location - acking to the leader and getting &quot;broken pipe&quot; due to the leader having already shutdown.&lt;/p&gt;

&lt;p&gt;Based on my reading of the code:&lt;/p&gt;

&lt;p&gt;1) it seems that the followers are busy snapshotting and have not yet ack&apos;d.&lt;/p&gt;

&lt;p&gt;2) Because LearnerHandler hasn&apos;t seen the ack it has not yet updated tickOfLastAck for the first time (so 0). We&apos;re in bootstrapping so we should allow for initLimit (which is configured large relative to syncLimit)&lt;/p&gt;

&lt;p&gt;3) Leader lead() method is checking the tickOfLastAck against the syncLimit via the synced() call, which has expired and therefore calls shutdown. I&apos;m suggesting that if initLimit were used instead during this call to synced (but only during the bootstrapping phase, you still want to use syncLimit otw) that the followers would eventually have been able to snapshot, send the ack, and the leader would be happy (tickOfLastAck updated appropriately). In other words we need to extend the time period of the check in synced during the bootstrapping of a learner.&lt;/p&gt;

&lt;p&gt;This make sense to you all? If not what am I missing. Thanks!&lt;/p&gt;

</comment>
                            <comment id="13646852" author="phunt" created="Wed, 1 May 2013 20:30:50 +0100"  >&lt;p&gt;I do see this on the leader just prior to the shutdown:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;INFO org.apache.zookeeper.server.quorum.Leader: Have quorum of supporters; starting up and setting last processed zxid: ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So perhaps the first newleader ack (based on Thawan&apos;s speculation we are getting 2 dup newleader pkts) does get sent by the learner to the learnerhandler, which allows the leader to make progress. However learnerhandler will wait at the top of the while loop (bottom of run method) for another packet to come before it first updates tickOfLastAck. That packet is the one that&apos;s causing the &quot;broken pipe&quot; error message on the follower. i.e. tickOfLastAck is therefore never updated.&lt;/p&gt;

&lt;p&gt;Another issue to consider is that the leader.self.tick and tickOfLastAck are both unsynchronized in these code sections...&lt;/p&gt;
</comment>
                            <comment id="13647436" author="fpj" created="Thu, 2 May 2013 11:56:00 +0100"  >&lt;p&gt;It is legitimate that we use syncLimit at the part of the Leader code because when we start that while loop, the leader has already received enough acks for the newleader proposal. After looking more into it, I think that the culprit is &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1324&quot; title=&quot;Remove Duplicate NEWLEADER packets from the Leader to the Follower.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1324&quot;&gt;&lt;del&gt;ZOOKEEPER-1324&lt;/del&gt;&lt;/a&gt; as Thawan suggested. The followers are taking to long to send an ack back because they are taking an additional snapshot.  &lt;/p&gt;</comment>
                            <comment id="13647703" author="breed" created="Thu, 2 May 2013 18:02:21 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1324&quot; title=&quot;Remove Duplicate NEWLEADER packets from the Leader to the Follower.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1324&quot;&gt;&lt;del&gt;ZOOKEEPER-1324&lt;/del&gt;&lt;/a&gt; is probably one of the issues, but i think after that gets fixed we can run into the issue that pat identified. we don&apos;t set tickOfLastAck until after we receive the first message from the follower after the leader becomes active. after the leader becomes active it will sleep for tickTime/2 and then check to see if the followers are synced, which uses tickOfLastAck. that gives followers a very small window in which to send the first message. perhaps when the leader starts. a simple fix would be to set the tickOfLastAck of all its followers to the current tickTime.&lt;/p&gt;</comment>
                            <comment id="13647851" author="fpj" created="Thu, 2 May 2013 21:05:29 +0100"  >&lt;blockquote&gt;&lt;p&gt;a simple fix would be to set the tickOfLastAck of all its followers to the current tickTime.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And to avoid a race, I think we need to reset tickOfLastAck before calling zk.startup().&lt;/p&gt;</comment>
                            <comment id="13651503" author="phunt" created="Wed, 8 May 2013 01:47:05 +0100"  >&lt;p&gt;I&apos;ve attached a patch for trunk &amp;amp; 3.4 that I think will fix the problem. &lt;/p&gt;

&lt;p&gt;All tests pass on branch34, however I&apos;m running into &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1700&quot; title=&quot;FLETest consistently failing - setLastSeenQuorumVerifier seems to be hanging&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1700&quot;&gt;&lt;del&gt;ZOOKEEPER-1700&lt;/del&gt;&lt;/a&gt; on trunk and can&apos;t get the tests to run cleanly (only FLETest.testJoin is failing on trunk, but that fails with or without this patch applied)&lt;/p&gt;

&lt;p&gt;Please take a look and let me know if this patch makes sense to you for both 3.4 and trunk.&lt;/p&gt;</comment>
                            <comment id="13651532" author="hadoopqa" created="Wed, 8 May 2013 02:25:03 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12582223/ZOOKEEPER-1697.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12582223/ZOOKEEPER-1697.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1463329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1470//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1470//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1470//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1470//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1470//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1470//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13652413" author="phunt" created="Wed, 8 May 2013 23:17:01 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1700&quot; title=&quot;FLETest consistently failing - setLastSeenQuorumVerifier seems to be hanging&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1700&quot;&gt;&lt;del&gt;ZOOKEEPER-1700&lt;/del&gt;&lt;/a&gt; turned out to be a bug in the FLETest. This patch now passes for me on both branch34 and trunk. There are no updates to existing tests as this is closing a very small timing hole. The existing tests verify this codepath and are passing. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=breed&quot; class=&quot;user-hover&quot; rel=&quot;breed&quot;&gt;Benjamin Reed&lt;/a&gt; or &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; et. al. can you take a look at the two patches? Thanks.&lt;/p&gt;</comment>
                            <comment id="13652842" author="fpj" created="Thu, 9 May 2013 10:45:47 +0100"  >&lt;p&gt;Hi Pat, It doesn&apos;t quite work, I think. Setting the tickOfLastAck where you&apos;re setting could still cause the same problem because this loop:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            /*
             * Wait until leader starts up
             */
            &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt;(leader.zk){
                &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(!leader.zk.isRunning() &amp;amp;&amp;amp; !&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.isInterrupted()){
                    leader.zk.wait(20);
                }
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;could still spin for a while, no?. It might work better to set tickOfLastAck for the learners that have ack&apos;ed at that point in Leader#tryToCommit() right before zk.startup().&lt;/p&gt;

&lt;p&gt;One smaller comment, perhaps not for this jira, is that I&apos;d rather use QuorumPeer#getTick() rather than accessing tick directly. We are doing it this way in a number of places so it might be better to use it consistently. &lt;/p&gt;</comment>
                            <comment id="13653089" author="phunt" created="Thu, 9 May 2013 20:39:02 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; that&apos;s a good point, a window still exists. (see if this comment/solution solves the problem - I&apos;d rather hold off on &quot;why not tryToCommit&quot; in case we solve this in another way)&lt;/p&gt;

&lt;p&gt;Perhaps the original approach is flawed, I tried thinking about this from a different angle and I think I came up with a patch that addresses all concerns. Take a look at the latest patch for trunk/branch34 (attached)&lt;/p&gt;

&lt;p&gt;In this case I turn things around - we define a deadline for next ack rather than tracking the last time we heard from the learner. This allows us to take into account the bootstrapping phase, and the fact that the learner is not out of bootstrapping until it reaches the point where the leader receives the response to UPTODATE message. What do you think?&lt;/p&gt;</comment>
                            <comment id="13653114" author="henryr" created="Thu, 9 May 2013 20:58:30 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=phunt&quot; class=&quot;user-hover&quot; rel=&quot;phunt&quot;&gt;Patrick Hunt&lt;/a&gt; - this seems &lt;em&gt;much&lt;/em&gt; clearer and easier to reason about.  &lt;/p&gt;</comment>
                            <comment id="13653142" author="hadoopqa" created="Thu, 9 May 2013 21:25:12 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12582498/ZOOKEEPER-1697.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12582498/ZOOKEEPER-1697.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1463329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1474//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1474//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1474//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1474//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1474//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1474//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13653229" author="fpj" created="Thu, 9 May 2013 22:20:43 +0100"  >&lt;p&gt;Hi Pat, The new approach you propose looks good to me. One advantage is that it concentrates the changes on LearnerHandler and it is easier to read the code this way. &lt;/p&gt;

&lt;p&gt;I like the approach of resetting tickOfLastAck for the second ack and on because the first ack is a bit odd, so resetting is a way of separating the timing of the first ack from the rest.&lt;/p&gt;

&lt;p&gt;In your patch, I was actually thinking that this statement:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
tickOfNextAckDeadline = leader.self.tick + leader.self.initLimit;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;might not be right because of the following argument. An instance of LearnerHandler may take up to initLimit to get to the point that the leader is running. From the point that the LearnerHandler instance crosses the start up while loop, we should grant another syncLimit ticks until next ack because the first might have arrived right before it crosses the while loop, no? If so, then perhaps the initialization of tickOfNextAckDeadline should be instead:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
tickOfNextAckDeadline = leader.self.syncLimit + leader.self.initLimit;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;Let me know what you think.&lt;/p&gt;</comment>
                            <comment id="13653263" author="phunt" created="Thu, 9 May 2013 22:43:55 +0100"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One advantage is that it concentrates the changes on LearnerHandler and it is easier to read the code this way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agree. The encapsulation and code flow is much better.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;An instance of LearnerHandler may take up to initLimit to get to the point that the leader is running.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was thinking that the initLimit is the amount of time you allow the servers to bootstrap and start serving, for me this included the initialization as well as the initial &quot;sync&quot; period. I could see going either way, but if we did make the change it seems like it would be odd - we do sock.setSoTimeout(initlimit) in some places (during bootstrapping), based on your comment we should change those as well? Why not have the operator just consider that (initi + sync) in setting the initLimit?&lt;/p&gt;</comment>
                            <comment id="13653298" author="fpj" created="Thu, 9 May 2013 23:07:41 +0100"  >&lt;blockquote&gt;&lt;p&gt;I was thinking that the initLimit is the amount of time you allow the servers to bootstrap and start serving, for me this included the initialization as well as the initial &quot;sync&quot; period.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed, if the leader is not able to get a quorum of supporters within initLimit, it drops leadership. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;we do sock.setSoTimeout(initlimit) in some places (during bootstrapping), based on your comment we should change those as well?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, I think the setting of socket timeouts is correct, I don&apos;t see a problem with it, do you?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why not have the operator just consider that (initi + sync) in setting the initLimit?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My point is not exactly that. Note that in my comment I&apos;m talking about the first time we set tickOfNextAckDeadline in your patch. In the patch, it sounds like you&apos;re giving only one tick to the next ack in the case bootstrapping and syncing takes initLimit. This is the time until the LearnerHandler instance crosses the startup while loop. I&apos;m saying that it should be syncLimit instead.  &lt;/p&gt;
</comment>
                            <comment id="13653323" author="phunt" created="Thu, 9 May 2013 23:27:02 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; I believe I understand what you are saying, my point was just &quot;what&apos;s the definition of initLimit&quot;. You&apos;ve defined it as &quot;leader is not able to get a quorum of supporters within initLimit, it drops leadership.&quot;&lt;/p&gt;

&lt;p&gt;Looking at our docs they say: &lt;a href=&quot;http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_clusterOptions&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_clusterOptions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&quot;initLimit: Amount of time, in ticks (see tickTime), to allow followers to connect and sync to a leader. Increased this value as needed, if the amount of data managed by ZooKeeper is large.&quot;&lt;/p&gt;

&lt;p&gt;afaict our official docs match what&apos;s currently in the patch.&lt;/p&gt;

&lt;p&gt;Would we not get the same thing as you are suggesting by running with a config of &lt;/p&gt;

&lt;p&gt;initLimit=15&lt;br/&gt;
syncLimit=5&lt;/p&gt;

&lt;p&gt;vs changing the patch as you suggest and running with &lt;/p&gt;

&lt;p&gt;initLimit=10&lt;br/&gt;
syncLimit=5&lt;/p&gt;

&lt;p&gt;Our docs seems to be saying you should run with the first config (and the current patch). Perhaps I&apos;m missing something though....&lt;/p&gt;</comment>
                            <comment id="13653338" author="fpj" created="Thu, 9 May 2013 23:47:31 +0100"  >&lt;p&gt;I&apos;m not sure if you&apos;re saying that my statement conflicts with the definition of initLimit in the docs. If followers are not able to sync with the leader, isn&apos;t it the case that the prospective leader will not have a quorum and will drop leadership? In any case, I was reading the code, not the docs. &lt;/p&gt;

&lt;p&gt;I don&apos;t think the two ways of configuring you&apos;re suggesting are equivalent because we use initLimit in a number of other places (Leader#lead() while waiting for a quorum of supporters, for example) and I&apos;m not saying that we should replace that initLimit with initLimit + syncLimit for cases other than ack bookkeeping. Actually, I&apos;m saying that we need syncLimit on top of initLimit for the first ack in LearnerHandler independent of how you choose the value for initLimit. This observation comes from the fact that between start up and the second ack we should allow syncLimit ticks. Say that the leader takes initLimit to form a quorum of supporters. Once the LeanerHandler starts processing messages, it has only a tick to update tickOfNextAckDeadline before the learner is considered out of sync with the patch you&apos;re proposing, right?  &lt;/p&gt;</comment>
                            <comment id="13653345" author="phunt" created="Thu, 9 May 2013 23:54:38 +0100"  >&lt;blockquote&gt;&lt;p&gt;only one tick to the next ack&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;perhaps this is the point i&apos;m missing that you&apos;re trying to make. Question: what do we consider &quot;sync&apos;d&quot; wrt bootstrapping? After the first ack, or after the UPTODATE response comes back to the leader. I was assuming the second (uptodate). Is that not correct?&lt;/p&gt;</comment>
                            <comment id="13653351" author="phunt" created="Thu, 9 May 2013 23:57:57 +0100"  >&lt;p&gt;Sorry, I was formulating my previous comment during your response and they crossed. I suspect that we are converging? (I&apos;ll wait and let you comment on my previous comment &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/p&gt;</comment>
                            <comment id="13653624" author="fpj" created="Fri, 10 May 2013 08:51:16 +0100"  >&lt;p&gt;Ah, great question. In my view, the UPTODATE message is the commit of the synchronization phase of recovery, so no ack is actually needed, but we have it for backward compatibility. In the way we are doing it currently, you&apos;re right that the first ack received in the LearnerHandler#run() while(true) loop is a response to the UPTODATE so it could be considered part of the synchronization phase. &lt;/p&gt;

&lt;p&gt;However, if we follow this interpretation, there is a discrepancy in what is implemented, I think. The leader must gather a quorum of supporters within initLimit ticks. Once it gets it, the leader starts running and believes that everyone is synced up. But, the UPTODATE message really goes out only after the leader has already started running:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            /*
             * Wait until leader starts up
             */
            &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt;(leader.zk){
                &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(!leader.zk.isRunning() &amp;amp;&amp;amp; !&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.isInterrupted()){
                    leader.zk.wait(20);
                }
            }
            &lt;span class=&quot;code-comment&quot;&gt;// Mutation packets will be queued during the serialize,
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// so we need to mark when the peer can actually start
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// using the data
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;            LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Sending UPTODATE message to &quot;&lt;/span&gt; + sid);      
            queuedPackets.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; QuorumPacket(Leader.UPTODATE, -1, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  

&lt;p&gt;From the leader perspective, it is already established when leader.zk.isRunning() is true and in my understanding we should be giving syncLimit ticks for acks once that predicate is true. Now, in practice a tick should be long enough to enable the leader to get a response for the UPTODATE message. I think what we are really discussing here is definitions, which is great. &lt;/p&gt;</comment>
                            <comment id="13654564" author="phunt" created="Fri, 10 May 2013 16:58:27 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think what we are really discussing here is definitions, which is great.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, absolutely. I don&apos;t mean to be a pain here, I&apos;m just not fully groking something. Thanks for bearing with me &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So based on my reading of your most recent comment you still feel we should allow &quot;initLimit + syncLimit&quot; during the initial phase, is that right? LMK for sure and I&apos;ll update the patch.&lt;/p&gt;</comment>
                            <comment id="13654816" author="fpj" created="Fri, 10 May 2013 21:49:25 +0100"  >&lt;p&gt;Here is my take. Setting tickOfNextAckDeadline to initLimit + syncLimit initially is conservative. At the same time, if the follower reacts fast, the learner handler will update tickOfNextAckDeadline it sooner after the sync up phase. Also, it only impacts the time for the current leader to release leadership if the follower crashes after completing the sync up phase. &lt;/p&gt;

&lt;p&gt;I think it is safer to update it, but if you don&apos;t update it, it will be a corner case, very unlikely to happen. &lt;/p&gt;

&lt;p&gt;Does it make sense?  &lt;/p&gt;</comment>
                            <comment id="13654823" author="phunt" created="Fri, 10 May 2013 21:59:12 +0100"  >&lt;p&gt;Conservative is good. See the updated patches. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fpj&quot; class=&quot;user-hover&quot; rel=&quot;fpj&quot;&gt;Flavio Junqueira&lt;/a&gt; if you +1 I&apos;ll be happy to do the commit. Thanks!&lt;/p&gt;</comment>
                            <comment id="13654871" author="hadoopqa" created="Fri, 10 May 2013 22:35:06 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12582684/ZOOKEEPER-1697.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12582684/ZOOKEEPER-1697.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1463329.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1476//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1476//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1476//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1476//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1476//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1476//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13655272" author="fpj" created="Sat, 11 May 2013 14:35:32 +0100"  >&lt;p&gt;+1, Thanks, Pat. &lt;/p&gt;

&lt;p&gt;b3.4 Committed revision 1481322.&lt;/p&gt;

&lt;p&gt;trunk Committed revision 1481325.&lt;/p&gt;</comment>
                            <comment id="13655513" author="hudson" created="Sun, 12 May 2013 12:09:13 +0100"  >&lt;p&gt;Integrated in ZooKeeper-trunk #1923 (See &lt;a href=&quot;https://builds.apache.org/job/ZooKeeper-trunk/1923/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/ZooKeeper-trunk/1923/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1697&quot; title=&quot;large snapshots can cause continuous quorum failure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1697&quot;&gt;&lt;del&gt;ZOOKEEPER-1697&lt;/del&gt;&lt;/a&gt;. large snapshots can cause continuous quorum failure&lt;br/&gt;
  (phunt via fpj) (Revision 1481325)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
fpj : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1481325&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1481325&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13933778" author="fpj" created="Thu, 13 Mar 2014 18:17:11 +0000"  >&lt;p&gt;Closing issues after releasing 3.4.6.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12534519">ZOOKEEPER-1324</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12582684" name="ZOOKEEPER-1697.patch" size="3786" author="phunt" created="Fri, 10 May 2013 21:58:28 +0100"/>
                            <attachment id="12582498" name="ZOOKEEPER-1697.patch" size="3741" author="phunt" created="Thu, 9 May 2013 20:27:47 +0100"/>
                            <attachment id="12582223" name="ZOOKEEPER-1697.patch" size="1670" author="phunt" created="Wed, 8 May 2013 01:44:42 +0100"/>
                            <attachment id="12582683" name="ZOOKEEPER-1697_branch34.patch" size="3741" author="phunt" created="Fri, 10 May 2013 21:58:18 +0100"/>
                            <attachment id="12582497" name="ZOOKEEPER-1697_branch34.patch" size="3671" author="phunt" created="Thu, 9 May 2013 20:27:37 +0100"/>
                            <attachment id="12582222" name="ZOOKEEPER-1697_branch34.patch" size="1603" author="phunt" created="Wed, 8 May 2013 01:44:31 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 1 May 2013 01:02:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>325927</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hze2vz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>326272</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>