<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:46:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/ZOOKEEPER-1505/ZOOKEEPER-1505.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[ZOOKEEPER-1505] Multi-thread CommitProcessor</title>
                <link>https://issues.apache.org/jira/browse/ZOOKEEPER-1505</link>
                <project id="12310801" key="ZOOKEEPER">ZooKeeper</project>
                    <description>&lt;p&gt;CommitProcessor has a single thread that both pulls requests off its queues and runs all downstream processors. This is noticeably inefficient for read-intensive workloads, which could be run concurrently. The trick is handling write transactions. I propose multi-threading this code according to the following two constraints&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;each session must see its requests responded to in order&lt;/li&gt;
	&lt;li&gt;all committed transactions must be handled in zxid order, across all sessions&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I believe these cover the only constraints we need to honor. In particular, I believe we can relax the following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;it does not matter if the read request in one session happens before or after the write request in another session&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With these constraints, I propose the following threads&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;1    primary queue servicing/work dispatching thread&lt;/li&gt;
	&lt;li&gt;0-N  assignable worker threads, where a given session is always assigned to the same worker thread&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By assigning sessions always to the same worker thread (using a simple sessionId mod number of worker threads), we guarantee the first constraint-- requests we push onto the thread queue are processed in order. The way we guarantee the second constraint is we only allow a single commit transaction to be in flight at a time--the queue servicing thread blocks while a commit transaction is in flight, and when the transaction completes it clears the flag.&lt;/p&gt;

&lt;p&gt;On a 32 core machine running Linux 2.6.38, achieved best performance with 32 worker threads for a 56% +/- 5% improvement in throughput (this improvement was measured on top of that for &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1504&quot; title=&quot;Multi-thread NIOServerCnxn&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1504&quot;&gt;ZOOKEEPER-1504&lt;/a&gt;, not in isolation).&lt;/p&gt;

&lt;p&gt;New classes introduced in this patch are:&lt;/p&gt;

&lt;p&gt;    WorkerService (also in &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1504&quot; title=&quot;Multi-thread NIOServerCnxn&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1504&quot;&gt;ZOOKEEPER-1504&lt;/a&gt;): ExecutorService wrapper that makes worker threads daemon threads and names then in an easily debuggable manner. Supports assignable threads (as used here) and non-assignable threads (as used by NIOServerCnxnFactory).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12597673">ZOOKEEPER-1505</key>
            <summary>Multi-thread CommitProcessor</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shrauner">Jay Shrauner</assignee>
                                    <reporter username="shrauner">Jay Shrauner</reporter>
                        <labels>
                            <label>performance</label>
                            <label>scaling</label>
                    </labels>
                <created>Fri, 6 Jul 2012 00:30:00 +0100</created>
                <updated>Sat, 22 Dec 2012 20:42:42 +0000</updated>
                            <resolved>Fri, 7 Dec 2012 23:38:48 +0000</resolved>
                                    <version>3.4.3</version>
                    <version>3.4.4</version>
                    <version>3.5.0</version>
                                    <fixVersion>3.5.0</fixVersion>
                                    <component>server</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="13408080" author="shrauner" created="Fri, 6 Jul 2012 16:45:45 +0100"  >&lt;p&gt;Currently running in our production system. Actual code we&apos;re running has some slight differences due to us developing against 3.4.3 and more extensive synchronization removals across the codebase in our branch.&lt;/p&gt;</comment>
                            <comment id="13409637" author="hadoopqa" created="Mon, 9 Jul 2012 17:59:11 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12535689/ZOOKEEPER-1505.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12535689/ZOOKEEPER-1505.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1357711.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1128//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1128//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1128//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1128//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1128//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1128//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13410458" author="shrauner" created="Tue, 10 Jul 2012 16:53:47 +0100"  >&lt;p&gt;FindBug warning is &quot;Naked notify in org.apache.zookeeper.server.quorum.CommitProcessor.wakeup()&quot;. Explanation of warning states &quot;This bug does not necessarily indicate an error, since the change to mutable object state may have taken place in a method which then called the method containing the notification.&quot; which is exactly the situation here.&lt;/p&gt;

&lt;p&gt;Testing: I haven&apos;t found the unit tests always to be the best way to find multi-threading issues (even the hammer ones, although they&apos;re helpful). Tested and debugged by running on an ensemble and driving test load, and then by running on our production system.&lt;/p&gt;</comment>
                            <comment id="13423683" author="phunt" created="Fri, 27 Jul 2012 06:25:28 +0100"  >&lt;p&gt;Jay could you put this up for review on apache&apos;s reviewboard? &lt;a href=&quot;https://reviews.apache.org/dashboard/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/dashboard/&lt;/a&gt;  Thanks!&lt;/p&gt;</comment>
                            <comment id="13426170" author="shrauner" created="Tue, 31 Jul 2012 23:09:27 +0100"  >&lt;p&gt;Posted to reviewboard&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/6260/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/6260/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13439861" author="shrauner" created="Wed, 22 Aug 2012 22:30:53 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Addressed reviewboard comments.&lt;/li&gt;
	&lt;li&gt;Added unit test.&lt;/li&gt;
	&lt;li&gt;Bugfix for issue Thawan found with watch resets on read requests in one session racing a write request affecting that watch in another session. Solution taken here is to prevent any read requests at all from running concurrently with a write request. There is room for further improvement, by parsing the request earlier in the pipeline and identifying read requests with watch resets.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13439903" author="hadoopqa" created="Wed, 22 Aug 2012 23:09:30 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12542037/ZOOKEEPER-1505.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12542037/ZOOKEEPER-1505.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1373156.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1167//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1167//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1167//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1167//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1167//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1167//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13439981" author="shrauner" created="Thu, 23 Aug 2012 01:46:59 +0100"  >&lt;p&gt;javadoc warning is spurious and unrelated:&lt;/p&gt;

&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;exec&amp;#93;&lt;/span&gt;   &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; javadoc: warning - Error fetching URL: &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/package-list&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/6/docs/api/package-list&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13475311" author="shrauner" created="Fri, 12 Oct 2012 21:12:13 +0100"  >&lt;p&gt;Address feedback from review--shutdown CommitProcessor if downstream processor throws an exception (preserves previous behavior)&lt;/p&gt;</comment>
                            <comment id="13475336" author="hadoopqa" created="Fri, 12 Oct 2012 21:42:02 +0100"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12548952/ZOOKEEPER-1505.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12548952/ZOOKEEPER-1505.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1391526.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1219//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1219//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1219//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1219//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1219//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1219//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13475444" author="shrauner" created="Sat, 13 Oct 2012 00:44:26 +0100"  >&lt;p&gt;Findbug warning (&quot;naked notify&quot;) is bogus; this is a helper routine to wakeup the main thread with the state change happening in the routines that call it.&lt;/p&gt;

&lt;p&gt;From the blurb in findbug: &quot;This bug does not necessarily indicate an error, since the change to mutable object state may have taken place in a method which then called the method containing the notification.&quot;&lt;/p&gt;</comment>
                            <comment id="13526854" author="hadoopqa" created="Fri, 7 Dec 2012 23:05:52 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12548952/ZOOKEEPER-1505.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12548952/ZOOKEEPER-1505.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision 1415847.&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed core unit tests.&lt;/p&gt;

&lt;p&gt;    +1 contrib tests.  The patch passed contrib unit tests.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1288//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1288//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1288//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1288//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1288//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1288//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13526882" author="phunt" created="Fri, 7 Dec 2012 23:35:55 +0000"  >&lt;p&gt;Added findbugs exclusion.&lt;/p&gt;</comment>
                            <comment id="13526884" author="phunt" created="Fri, 7 Dec 2012 23:38:48 +0000"  >&lt;p&gt;Committed to trunk, thanks Jay!&lt;/p&gt;</comment>
                            <comment id="13526890" author="shralex" created="Fri, 7 Dec 2012 23:51:29 +0000"  >&lt;p&gt;great work, Jay! &lt;/p&gt;

&lt;p&gt;I have a small question about this.&lt;/p&gt;

&lt;p&gt;&amp;gt; the queue servicing thread blocks while a commit transaction is in flight, and when the transaction completes it &lt;br/&gt;
&amp;gt; clears the flag.&lt;/p&gt;

&lt;p&gt;Does that mean that it is still the case that while a write of client A is in progress no read of client B can be processed just because A and B are connected to the same follower ?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Alex&lt;/p&gt;</comment>
                            <comment id="13526918" author="shrauner" created="Sat, 8 Dec 2012 00:21:12 +0000"  >&lt;p&gt;That&apos;s correct. We initially thought we could allow reads in client B to happen concurrently with writes in client A, but there are race conditions if the read in client B resets a watch that would be fired by the write in client A. Essentially the problem is that we would really prefer to categorize read-with-watch-reset requests as write requests. This would require changing where in the pipeline we parse read requests.&lt;/p&gt;</comment>
                            <comment id="13526935" author="shralex" created="Sat, 8 Dec 2012 00:47:38 +0000"  >&lt;p&gt;I think that I don&apos;t fully understand how the watch scenario you mention violates the guaranteed semantics. Could you please explain ?&lt;/p&gt;

&lt;p&gt;What&apos;s important is the serialization order of the leader (not follower). The read of B could just as well have been received by the follower before the write of client A, or even A and B could be connected to different followers. Reordering of B&apos;s read with A&apos;s write can&apos;t be allowed only if B has a prior write that the leader scheduled after the write of A - in this case the read of B must see the write of A, because the local program order of B and the leader&apos;s serialization of the writes require this. &lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Alex&lt;/p&gt;</comment>
                            <comment id="13527109" author="hudson" created="Sat, 8 Dec 2012 11:04:29 +0000"  >&lt;p&gt;Integrated in ZooKeeper-trunk #1766 (See &lt;a href=&quot;https://builds.apache.org/job/ZooKeeper-trunk/1766/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/ZooKeeper-trunk/1766/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1505&quot; title=&quot;Multi-thread CommitProcessor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1505&quot;&gt;&lt;del&gt;ZOOKEEPER-1505&lt;/del&gt;&lt;/a&gt;. Multi-thread CommitProcessor (Jay Shrauner via phunt) (Revision 1418555)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
phunt : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1418555&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1418555&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/zookeeper/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/ServerCnxnFactory.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/WorkerService.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/Leader.java&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/test/config/findbugsExcludeFile.xml&lt;/li&gt;
	&lt;li&gt;/zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/CommitProcessorTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13530222" author="shrauner" created="Wed, 12 Dec 2012 19:15:03 +0000"  >&lt;p&gt;Alex- The race condition is within FinalRequestProcessor on any node--Leader, Follower, or Observer. This has nothing to do with serialization order of the leader. Watch setting/firing is a write operation only on the local node of locally maintained state. What happens is, say client A is toggling the value of node /X from 1 to 2, and client B is reading and setting a watch on node /X. Client B will always see a consistent view; it may however not receive a watch firing so it may never know to read value 2. If client B is relying on timely watch firing to keep its data fresh, this is a problem.&lt;/p&gt;

&lt;p&gt;1. It is possible for thread C1 to process client B reading value 1 and setting the watch; thread C2 to process client A writing 2 to /X, firing the watch, writing this out to client B&apos;s network stack (the watch firing); and finally thread C1 to push the read of value 1 onto client B&apos;s network stack. Because the return value of a getData-and-setWatch call came after the watch fired, the client will possibly ignore the watch firing. So eg say client B had originally responded to a watch firing on /X. In its view, it sees /X watch fire, it sends a getData request, it sees /X watch fire again (which it ignores, because it already has a getData outstanding), and finally it gets the response to its getData request.&lt;/p&gt;

&lt;p&gt;2. It is also possible for client B to read value 1, client A to write value 2 and check for watch firing, and then for client B to reset the watch. There is no locking guarding the atomicity of client B reading /X and setting the watch on /X.&lt;/p&gt;

&lt;p&gt;It is relatively straightforward to add locking preventing case (2), but for case (1) I think we need to restrict parallelism in FinalRequestProcessor.&lt;/p&gt;

&lt;p&gt;We can improve the parallelism here, but it hit the point where I wanted to leave that for a future Jira. If we could identify which read requests set watches, and treat those as a third type, we could then allow pure read requests from client B to process simultaneously with write request from client A. Current code only fully parses getData and other read request blocks in FinalRequestProcessor, so we would need to move this up earlier, which might however have performance implications.&lt;/p&gt;</comment>
                            <comment id="13530300" author="shralex" created="Wed, 12 Dec 2012 20:35:23 +0000"  >&lt;p&gt;Hi Jay,&lt;/p&gt;

&lt;p&gt;thanks a lot for the explanation! &lt;/p&gt;

&lt;p&gt;Another alternative may be to make the thread responsible for client&apos;s operations also handle watch events for that client. For example C2 would tell C1 that there was a watch event and C1 will notify client B. Do you think this would address the problem ?&lt;/p&gt;

&lt;p&gt;BTW, the only ordering for watches I found mentioned in the programmers guide is &quot;ZooKeeper provides an ordering guarantee: a client will never see a change for which it has set a watch until it first sees the watch event.&quot; We get another ordering guarantee from the fact that the watch is fired after the data has been changed - we can probably conclude that if you invoke a read after seeing a watch event, you&apos;ll read the new data. But in scenario 1 you seem to be talking about a stronger guarantee assumed by the client. &lt;/p&gt;

&lt;p&gt;Alex&lt;/p&gt;</comment>
                            <comment id="13538654" author="thawan" created="Sat, 22 Dec 2012 02:54:11 +0000"  >&lt;p&gt;Zookeeper&apos;s client library has a strong guarantee about the ordering of watch event.  For example, Java Doc on getData() said that a watch is registered only if the call returns without exception. So the library won&apos;t register the path as an active watch on the client side until getData() response return from the server.  If the watch event arrives before getData() response, the library will ignore the watch event, causing the application to miss the watch. &lt;/p&gt;</comment>
                            <comment id="13538696" author="shralex" created="Sat, 22 Dec 2012 08:10:34 +0000"  >&lt;p&gt;Isn&apos;t this prevented if we have each client associated with a particular worker thread (like in your implementation)&lt;br/&gt;
and that thread is passed watch events by other threads ? This way this thread is the only one that communicates with its associated clients,&lt;br/&gt;
including sending watch events to those clients, so everything related to those clients is sequential.&lt;/p&gt;

&lt;p&gt;This is just a suggestion for a possible future improvement to parallelize even further.&lt;/p&gt;</comment>
                            <comment id="13538902" author="thawan" created="Sat, 22 Dec 2012 20:42:42 +0000"  >&lt;p&gt;I did a simple hack that allow 1 write AND N read to goes through at any given time and didn&apos;t see significant performance improvement in the scenario that I tested. My current idea is &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1609&quot; title=&quot;Improve ZooKeeper performance under mixed workload&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1609&quot;&gt;ZOOKEEPER-1609&lt;/a&gt;, so we can discuss in that JIRA if you have any comments on it. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12559983" name="ZOOKEEPER-1505.patch" size="49664" author="phunt" created="Fri, 7 Dec 2012 23:35:55 +0000"/>
                            <attachment id="12548952" name="ZOOKEEPER-1505.patch" size="49026" author="shrauner" created="Fri, 12 Oct 2012 21:12:13 +0100"/>
                            <attachment id="12542037" name="ZOOKEEPER-1505.patch" size="48658" author="shrauner" created="Wed, 22 Aug 2012 22:30:53 +0100"/>
                            <attachment id="12535689" name="ZOOKEEPER-1505.patch" size="31477" author="shrauner" created="Mon, 9 Jul 2012 17:25:57 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 9 Jul 2012 16:59:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>239679</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxumxj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2534</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>