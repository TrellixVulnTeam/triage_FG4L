<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:44:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-2240/OPENJPA-2240.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-2240] JVMVRFY012 when using openjpa together with hyperjaxb3</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-2240</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;We are facing a problem with class enhancing generated by hyperjaxb3.&lt;/p&gt;

&lt;p&gt;&quot;Caused by: java.lang.VerifyError: JVMVRFY012 stack shape inconsistent; class=foo/Bar, metoda=pcgetDataTimeItem()Ljava/util/Date;, pc=7&quot;&lt;/p&gt;

&lt;p&gt;The problem occurs on every usage of non JPA compatible type like XMLGregorianCalendar.&lt;br/&gt;
For those types, the hyperjaxb3 plugin creates a kind of &quot;proxy&quot; setter/getter that uses JPA capable type.&lt;/p&gt;

&lt;p&gt;Example of such proxy getter/setter:&lt;br/&gt;
&amp;lt;code&amp;gt;&lt;br/&gt;
        @Basic&lt;br/&gt;
        @Column(name = &quot;DATATIMEITEM&quot;)&lt;br/&gt;
        @Temporal(TemporalType.TIMESTAMP)&lt;br/&gt;
        public Date getDataTimeItem() &lt;/p&gt;
{
            return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDateTime.class, this.getDataTime());
        }
&lt;p&gt;&amp;lt;/code&amp;gt;&lt;/p&gt;

&lt;p&gt;then the XmlAdapterUtils.unmarshall looks like:&lt;/p&gt;

&lt;p&gt;&amp;lt;code&amp;gt;&lt;br/&gt;
	public static &amp;lt;ValueType, BoundType&amp;gt; BoundType unmarshall(&lt;br/&gt;
			Class&amp;lt;? extends XmlAdapter&amp;lt;ValueType, BoundType&amp;gt;&amp;gt; xmlAdapterClass,&lt;br/&gt;
			ValueType v) {&lt;br/&gt;
		try &lt;/p&gt;
{
			final XmlAdapter&amp;lt;ValueType, BoundType&amp;gt; xmlAdapter = getXmlAdapter(xmlAdapterClass);
			return xmlAdapter.unmarshal(v);
		}
&lt;p&gt; catch (Exception ex) &lt;/p&gt;
{
			throw new RuntimeException(ex);
		}
&lt;p&gt;	}&lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;/p&gt;

&lt;p&gt;I have found that the problem occurs only because of the type of XmlAdapterUtils.unmarshall method. The problem is that it&apos;s 1st type is a &quot;Class&quot;. Changing the 1st type from Class type to any other like Object solves the problem but it is not a solution.&lt;/p&gt;

&lt;p&gt;I think the problem is somewhere in serp project as after the enhancment process of classes containing non JPA capable XSD types, each call of that class generates the JVMVRFY012 exception- even during junit tests.&lt;/p&gt;

&lt;p&gt;Please note, that this bug is a blocker for my project.&lt;/p&gt;</description>
                <environment>IBM-JDK, SUN-JDK</environment>
        <key id="12600145">OPENJPA-2240</key>
            <summary>JVMVRFY012 when using openjpa together with hyperjaxb3</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kwsutter">Kevin Sutter</assignee>
                                    <reporter username="nannou9">Piotr Klimczak</reporter>
                        <labels>
                            <label>enhancement</label>
                            <label>hyperjaxb3</label>
                            <label>jpa</label>
                            <label>stubs</label>
                            <label>xsd</label>
                    </labels>
                <created>Wed, 25 Jul 2012 11:32:53 +0100</created>
                <updated>Wed, 10 Apr 2013 17:03:59 +0100</updated>
                            <resolved>Wed, 10 Apr 2013 17:03:52 +0100</resolved>
                                    <version>2.2.0</version>
                    <version>2.2.1</version>
                    <version>2.3.0</version>
                                    <fixVersion>2.2.2</fixVersion>
                    <fixVersion>2.3.0</fixVersion>
                                    <component>Enhance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13422470" author="kwsutter" created="Wed, 25 Jul 2012 19:11:57 +0100"  >&lt;p&gt;Hmmm...  The error you reported sounds identical to the Java 7 class format errors that were corrected via &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-2122&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/OPENJPA-2122&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-2085&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/OPENJPA-2085&lt;/a&gt;.  But, both of these were resolved before the 2.2.0 release was cut...&lt;/p&gt;

&lt;p&gt;In your Environment, you mention both the IBM and Sun JDKs.  What version of Java are you using?  I will assume Java 7 since we never experienced the VerifyError before that.  Is it possible for you to try Java 6?  I&apos;m just looking for a quick workaround for you since figuring out the necessary changes to ASM and/or Serp will take some time (if this is a new problem).&lt;/p&gt;

&lt;p&gt;You also mention that this affects OpenJPA 2.2.0.  Can you verify that this version is actually in use in your scenario.  And, have you tried to turn on Trace during the enhancement process to verify that ASM is getting invoked to &quot;clean up&quot; these StackMapTable issues?&lt;/p&gt;

&lt;p&gt;Thanks for your help in attempting to debug this problem.&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</comment>
                            <comment id="13422940" author="nannou9" created="Thu, 26 Jul 2012 08:21:01 +0100"  >&lt;p&gt;Hi Kevin,&lt;/p&gt;

&lt;p&gt;Thanks for quick reply.&lt;/p&gt;

&lt;p&gt;I am using IBM-JDK as follows:&lt;br/&gt;
java version &quot;1.6.0&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pxa6460sr10-20111208_01(SR10))&lt;br/&gt;
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr10-20111207_96808 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - 20111207_096808&lt;br/&gt;
JIT  - r9_20111107_21307ifx1&lt;br/&gt;
GC   - 20110519_AA)&lt;br/&gt;
JCL  - 20111104_02&lt;/p&gt;

&lt;p&gt;I&apos;ve been testing the problem with following OpenJPA versions: 2.2.0, 2.3.0-SNAPSHOT.&lt;br/&gt;
I have also tried with serp 1.14.2 w/o success.&lt;/p&gt;

&lt;p&gt;As i said the problem disappears after removing all Class type parameters from methods invoked from enriched entities.&lt;/p&gt;

&lt;p&gt;I will try to provide some debug info in about 2 days as i have much different &quot;todos&quot; right now.&lt;/p&gt;

&lt;p&gt;Greetings&lt;br/&gt;
Piotr Klimczak&lt;/p&gt;</comment>
                            <comment id="13422959" author="nannou9" created="Thu, 26 Jul 2012 09:23:42 +0100"  >&lt;p&gt;As i &quot;cannot sleep&quot; because of that bug, i have tried to trace is as you wish.&lt;br/&gt;
Unfortunately i have found nothing interesting:&lt;/p&gt;

&lt;p&gt;122  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Tool - Enhancer running on type &quot;class pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot;.&lt;br/&gt;
133  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - Loading metadata for &quot;class pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot; under mode &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;META&amp;#93;&lt;/span&gt;&quot;.&lt;br/&gt;
133  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - Parsing class &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot;.&lt;br/&gt;
150  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - Generating default metadata for type &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot;.&lt;br/&gt;
151  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - Using reflection for metadata generation.&lt;br/&gt;
159  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - Set persistence-capable superclass of &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot; to &quot;null&quot;.&lt;br/&gt;
159  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - Resolving metadata for &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne@1436046744&quot;.&lt;br/&gt;
160  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData -   Resolving field &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne@1436046744.dataTimeItem&quot;.&lt;br/&gt;
163  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData -   Resolving field &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne@1436046744.hjid&quot;.&lt;br/&gt;
163  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData -   Resolving field &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne@1436046744.offlineId&quot;.&lt;br/&gt;
163  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData -   Resolving field &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne@1436046744.retry&quot;.&lt;br/&gt;
164  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - Preparing mapping for &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot;.&lt;br/&gt;
164  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - Resolving mapping for &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne@1436046744&quot;.&lt;br/&gt;
164  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Enhancing type &quot;class pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot; loaded by java.net.URLClassLoader@71a371a3.&lt;br/&gt;
173  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Detected the following possible violations of the restrictions placed on property access persistent types:&lt;br/&gt;
&quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot; uses property access, but its field &quot;offlineId&quot; is accessed directly in method &quot;copyTo&quot; defined in &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot;.&lt;br/&gt;
&quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot; uses property access, but its field &quot;offlineId&quot; is accessed directly in method &quot;copyTo&quot; defined in &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot;.&lt;br/&gt;
&quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot; uses property access, but its field &quot;retry&quot; is accessed directly in method &quot;copyTo&quot; defined in &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot;.&lt;br/&gt;
&quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot; uses property access, but its field &quot;retry&quot; is accessed directly in method &quot;copyTo&quot; defined in &quot;pl.com.bgk.smx.kgapi.contract.basics.types.BasicResponseData$Offilne&quot;.&lt;/p&gt;


&lt;p&gt;The class enhance is successful. The problem occurs on every each usage of this class by an app. Even during junit test case.&lt;/p&gt;

&lt;p&gt;If you need more debug info i will do my best to provide it.&lt;/p&gt;

&lt;p&gt;Greetings,&lt;br/&gt;
Piotr&lt;/p&gt;</comment>
                            <comment id="13423115" author="kwsutter" created="Thu, 26 Jul 2012 15:42:08 +0100"  >&lt;p&gt;Thanks for the info, Piotr.  I was surprised to see that you are running Java 6.  I hadn&apos;t seen the VerifyError with Java 6, only Java 7.  In Java 7, the class verification was turned on by default.  In Java 6, this class verification was supposed to be optional.  Is there any chance that you running with class verification?  If so, can you turn it off?  Since we introduced a dependency on ASM to correct these StackMapTable errors with Java 7, is there any chance you could build/enhance with Java 7.  If that helps, then maybe we can just enable ASM for Java 6 class files as well as Java 7.  In the mean time, if I have time, I will try to reproduce the issue locally with your submitted entity definitions.  Thanks.&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</comment>
                            <comment id="13423133" author="nannou9" created="Thu, 26 Jul 2012 16:10:03 +0100"  >&lt;p&gt;No problem. Will try to reproduce the problem with IBM JDK 7 tomorrow morning.&lt;/p&gt;

&lt;p&gt;Piotr&lt;/p&gt;</comment>
                            <comment id="13423441" author="kwsutter" created="Thu, 26 Jul 2012 21:37:26 +0100"  >&lt;p&gt;I have been trying to reproduce the situation with no luck.  Granted, I don&apos;t have the hyperjaxb and the associated XML libraries.  But, from your description, it sounded like I should be able to reproduce the VerifyError with an extra helper getter method that called a utility method passing in a .class as the first parameter.  Just something to complicate the getter method just enough to screw up the StackMapTables.  But, I have had no luck.  As an example, here&apos;s what I added to a simple Entity class:&lt;/p&gt;

&lt;p&gt;    @Basic&lt;br/&gt;
    @Column(name = &quot;DATATIMEITEM&quot;)&lt;br/&gt;
    @Temporal(TemporalType.TIMESTAMP)&lt;br/&gt;
    public Date getDataTimeItem() &lt;/p&gt;
{
        //  return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDateTime.class, this.getDataTime()); 
        return unmarshall(XMLGregorianCalendar.class, this.getDateField());
    }

&lt;p&gt;    private Date unmarshall(Class&amp;lt;XMLGregorianCalendar&amp;gt; class1, Date dateField2) &lt;/p&gt;
{
        // TODO Auto-generated method stub
        return dateField2;
    }

&lt;p&gt;I tried this with Java6sr9 (my current default), Java6sr10 (your current Java), and Java7.  No luck with reproducing.  If you can help with narrowing down the scenario with a simpler testcase, or maybe provide the Entity classes and needed libraries to reproduce it, I&apos;m very interested in tracking down this problem.  Thanks.&lt;/p&gt;</comment>
                            <comment id="13423753" author="nannou9" created="Fri, 27 Jul 2012 09:50:21 +0100"  >&lt;p&gt;Hi Kevin!&lt;/p&gt;

&lt;p&gt;Thanks again for your help.&lt;/p&gt;

&lt;p&gt;According to your test It is possible you have no luck because the method with Class type parameter was a static method placed in different class/file.&lt;br/&gt;
In my situation an entity getter calls:&lt;/p&gt;

&lt;p&gt;&amp;lt;code&amp;gt;&lt;br/&gt;
            return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDateTime.class, this.getDataTime());&lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;/p&gt;

&lt;p&gt;Please also note, the the unmarshall method was generic.&lt;/p&gt;</comment>
                            <comment id="13423756" author="nannou9" created="Fri, 27 Jul 2012 10:02:14 +0100"  >&lt;p&gt;There is very same problem on Java7.&lt;/p&gt;

&lt;p&gt;Caused by: java.lang.VerifyError: JVMVRFY012 niesp&#243;jny kszta&#322;t stosu; klasa=foo/BasicResponseData$Offilne, metoda=pcgetDataTimeItem()Ljava/util/Date;, pc=7&lt;br/&gt;
        at java.lang.J9VMInternals.verifyImpl(Native Method)&lt;br/&gt;
        at java.lang.J9VMInternals.verify(J9VMInternals.java:85)&lt;br/&gt;
        at java.lang.J9VMInternals.initialize(J9VMInternals.java:162)&lt;br/&gt;
        at java.lang.Class.forNameImpl(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:139)&lt;br/&gt;
.......&lt;/p&gt;

&lt;p&gt;Tested with:&lt;br/&gt;
java version &quot;1.7.0&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pxa6470sr1-20120330_01(SR1))&lt;br/&gt;
IBM J9 VM (build 2.6, JRE 1.7.0 Linux amd64-64 20120322_106209 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - R26_Java726_SR1_20120322_1720_B106209&lt;br/&gt;
JIT  - r11_20120322_22976&lt;br/&gt;
GC   - R26_Java726_SR1_20120322_1720_B106209&lt;br/&gt;
J9CL - 20120322_106209)&lt;br/&gt;
JCL - 20120322_01 based on Oracle 7u3-b05&lt;/p&gt;
</comment>
                            <comment id="13423912" author="kwsutter" created="Fri, 27 Jul 2012 15:58:16 +0100"  >&lt;p&gt;Hi Piotr,&lt;br/&gt;
Still no luck with reproducing the problem.  I created a separate Utility class and created this static unmarshall() method.  Still works just fine.&lt;/p&gt;

&lt;p&gt;And, it wasn&apos;t good to hear that your problem still exists with the Java 7 build environment.  That means that the ASM solution we put in place for Java 7 doesn&apos;t help in your situation either.  You did re-build and re-enhance with Java 7, correct?  That&apos;s where the ASM &quot;magic&quot; occurs is with the enhancement processing.&lt;/p&gt;

&lt;p&gt;Can you provide the actual Entity classes (before and after enhancement)?  If you can also provide the utility classes that would allow us to load the classes to reproduce the problem, that would be great.  Thanks!&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</comment>
                            <comment id="13435006" author="nannou9" created="Wed, 15 Aug 2012 13:08:40 +0100"  >&lt;p&gt;A quick simple project reproducing reported bug.&lt;/p&gt;</comment>
                            <comment id="13435009" author="nannou9" created="Wed, 15 Aug 2012 13:11:40 +0100"  >&lt;p&gt;Hi Kevin,&lt;/p&gt;

&lt;p&gt;Sorry for late answer- I have just returned from holidays.&lt;br/&gt;
As you can see, I have uploaded simple maven project reproducing reported bug.&lt;/p&gt;

&lt;p&gt;The bug occurs on very simple test case that creates an instance of &quot;Page&quot; class which contains xsd:dateTime type as an XMLGregorianCalendar.&lt;/p&gt;

&lt;p&gt;I&apos;ve tested it on:&lt;/p&gt;

&lt;p&gt;java version &quot;1.6.0_31&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_31-b04)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 20.6-b01, mixed mode)&lt;/p&gt;

&lt;p&gt;The result is a little different than above. Probably because of different JDK.&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
Test set: pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.079 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
test(pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest)  Time elapsed: 0.039 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!&lt;br/&gt;
java.lang.VerifyError: (class: pl/klimczakowie/site/dev/site/domain/Page, method: pcgetLastModItem signature: ()Ljava/util/Date&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Incompatible argument to function&lt;br/&gt;
        at pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest.test(OpenJPA2240bugTest.java:34)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)&lt;br/&gt;
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)&lt;br/&gt;
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)&lt;br/&gt;
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&lt;br/&gt;
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)&lt;br/&gt;
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&lt;br/&gt;
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)&lt;br/&gt;
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)&lt;br/&gt;
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)&lt;br/&gt;
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)&lt;br/&gt;
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&lt;br/&gt;
        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)&lt;br/&gt;
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)&lt;br/&gt;
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:138)&lt;br/&gt;
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:125)&lt;br/&gt;
        at org.apache.maven.surefire.Surefire.run(Surefire.java:132)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:308)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:879)&lt;/p&gt;</comment>
                            <comment id="13435130" author="nannou9" created="Wed, 15 Aug 2012 15:07:57 +0100"  >&lt;p&gt;The result of uploaded project on IBM JDK 6:&lt;/p&gt;

&lt;p&gt;java version &quot;1.6.0&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pxa6460sr9fp2-20110625_01(SR9 FP2))&lt;br/&gt;
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr9-20110624_85526 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - 20110624_085526&lt;br/&gt;
JIT  - r9_20101028_17488ifx17&lt;br/&gt;
GC   - 20101027_AA)&lt;br/&gt;
JCL  - 20110530_01&lt;/p&gt;

&lt;p&gt;Result:&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
Test set: pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.103 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
test(pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest)  Time elapsed: 0.06 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!&lt;br/&gt;
java.lang.VerifyError: JVMVRFY012 stack shape inconsistent; class=pl/klimczakowie/site/dev/site/domain/Page, method=pcgetLastModItem()Ljava/util/Date;, pc=7&lt;br/&gt;
        at java.lang.J9VMInternals.verifyImpl(Native Method)&lt;br/&gt;
        at java.lang.J9VMInternals.verify(J9VMInternals.java:72)&lt;br/&gt;
        at java.lang.J9VMInternals.initialize(J9VMInternals.java:134)&lt;br/&gt;
        at pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest.test(OpenJPA2240bugTest.java:34)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:611)&lt;br/&gt;
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)&lt;br/&gt;
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)&lt;br/&gt;
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)&lt;br/&gt;
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&lt;br/&gt;
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)&lt;br/&gt;
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&lt;br/&gt;
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)&lt;br/&gt;
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)&lt;br/&gt;
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)&lt;br/&gt;
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)&lt;br/&gt;
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&lt;br/&gt;
        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)&lt;br/&gt;
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)&lt;br/&gt;
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:138)&lt;br/&gt;
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:125)&lt;br/&gt;
        at org.apache.maven.surefire.Surefire.run(Surefire.java:132)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:611)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:308)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:879)&lt;/p&gt;



&lt;p&gt;The result of uploaded project on IBM JDK 7:&lt;/p&gt;

&lt;p&gt;java version &quot;1.7.0&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pxa6470sr1-20120330_01(SR1))&lt;br/&gt;
IBM J9 VM (build 2.6, JRE 1.7.0 Linux amd64-64 20120322_106209 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - R26_Java726_SR1_20120322_1720_B106209&lt;br/&gt;
JIT  - r11_20120322_22976&lt;br/&gt;
GC   - R26_Java726_SR1_20120322_1720_B106209&lt;br/&gt;
J9CL - 20120322_106209)&lt;br/&gt;
JCL - 20120322_01 based on Oracle 7u3-b05&lt;/p&gt;


&lt;p&gt;Result:&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
Test set: pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.089 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
test(pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest)  Time elapsed: 0.048 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!&lt;br/&gt;
java.lang.VerifyError: JVMVRFY012 stack shape inconsistent; class=pl/klimczakowie/site/dev/site/domain/Page, method=pcgetLastModItem()Ljava/util/Date;, pc=7&lt;br/&gt;
        at java.lang.J9VMInternals.verifyImpl(Native Method)&lt;br/&gt;
        at java.lang.J9VMInternals.verify(J9VMInternals.java:85)&lt;br/&gt;
        at java.lang.J9VMInternals.initialize(J9VMInternals.java:162)&lt;br/&gt;
        at pl.klimczakowie.site.dev.site.domain.OpenJPA2240bugTest.test(OpenJPA2240bugTest.java:34)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:613)&lt;br/&gt;
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)&lt;br/&gt;
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)&lt;br/&gt;
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)&lt;br/&gt;
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&lt;br/&gt;
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)&lt;br/&gt;
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&lt;br/&gt;
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)&lt;br/&gt;
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)&lt;br/&gt;
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)&lt;br/&gt;
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)&lt;br/&gt;
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&lt;br/&gt;
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&lt;br/&gt;
        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)&lt;br/&gt;
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)&lt;br/&gt;
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:138)&lt;br/&gt;
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:125)&lt;br/&gt;
        at org.apache.maven.surefire.Surefire.run(Surefire.java:132)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:613)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:308)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:879)&lt;/p&gt;


&lt;p&gt;Each time running #mvn clean install.&lt;/p&gt;</comment>
                            <comment id="13442980" author="nannou9" created="Tue, 28 Aug 2012 07:13:15 +0100"  >&lt;p&gt;Hi Kevin!&lt;/p&gt;

&lt;p&gt;Thank you for your help!&lt;/p&gt;

&lt;p&gt;Did you succeed with bug reproduction using my example project?&lt;br/&gt;
Do you want me to provide more examples? Or maybe to simplify the example?&lt;/p&gt;

&lt;p&gt;Greetings,&lt;br/&gt;
Piotr Klimczak&lt;/p&gt;</comment>
                            <comment id="13444060" author="kwsutter" created="Wed, 29 Aug 2012 14:44:40 +0100"  >&lt;p&gt;Thank you, Piotr, for the sample.  I was out on vacation recently and just missed these updates.  I will try to reproduce with your sample and, hopefully, figure out a solution quickly...  Thanks.&lt;/p&gt;</comment>
                            <comment id="13444141" author="kwsutter" created="Wed, 29 Aug 2012 16:32:31 +0100"  >&lt;p&gt;My &quot;mvn clean install&quot; output...  Can&apos;t do some of the mvn processing...  Maybe due to an older version of maven?&lt;/p&gt;</comment>
                            <comment id="13444202" author="kwsutter" created="Wed, 29 Aug 2012 17:58:02 +0100"  >&lt;p&gt;Piotr, As you can see by the attachment, I tried your &quot;simple&quot; project and I seem to be having an issue with attempting to override the output directory...  I did some searching and it doesn&apos;t look like this was supposed to be overridable...  But, maybe that changed in some later version of maven?  Anyway, I don&apos;t have the project running yet...  I can see where this is a bit more involved than what I had hoped...  Running with jaxb generated entities and the XML types complicates the example just a bit...  Hopefully, you have some ideas on how to quickly get the project building.  Thanks.&lt;/p&gt;</comment>
                            <comment id="13444773" author="nannou9" created="Thu, 30 Aug 2012 09:01:46 +0100"  >&lt;p&gt;Fixed Spring dep. missing form jaxb2 plugin&lt;/p&gt;</comment>
                            <comment id="13444783" author="nannou9" created="Thu, 30 Aug 2012 09:16:53 +0100"  >&lt;p&gt;I am using maven 3.0.4.&lt;br/&gt;
I have reuploaded the project with one small fix- added spring-context dep. to jaxb plugin which fixes possible ClassNotFoundException during stubs generation.&lt;/p&gt;

&lt;p&gt;According to outputDirectory- yes, it is not docummented, but it works in older versions of maven and is extremely helpful (2.0.2 for example). In newer version 2.2+ there is a generatedSourcesDirectory which is doing same thing as outputDirectory in older versions.&lt;br/&gt;
So you can comment this line if you want or change it to &quot;generatedSourcesDirectory&quot; (if you are using newer compiler plugin), as it is responsible only for overriding the output directory of entities metamodel sources, to let them be easily accessible by eclipse (in target/jaxws as all other stubs).&lt;/p&gt;

&lt;p&gt;Greetings,&lt;br/&gt;
Piotr Klimczak&lt;/p&gt;</comment>
                            <comment id="13444972" author="kwsutter" created="Thu, 30 Aug 2012 15:08:18 +0100"  >&lt;p&gt;Piotr, I have now reproduced the problem.  Good news!  I did end up changing the errant outputDirectory to the generatedSourcesDirectory in the pom.xml.  I&apos;ll now take a closer look at the VerifyError.  Thanks for the sample project.&lt;/p&gt;</comment>
                            <comment id="13446369" author="kwsutter" created="Fri, 31 Aug 2012 21:58:09 +0100"  >&lt;p&gt;Piotr, I have found the problem.  It&apos;s in the Serp enhancement code.  It looks like Serp never expected a Class constant to be loaded via an ldc operation.  In the second edition of the JVM, the ldc was limited to loading int, long, float, double, and String.  Sometime later, this was expanded to allow loading of Class objects from the constant pool.  Serp was never updated to allow for this.&lt;/p&gt;

&lt;p&gt;Your Page.class required the loading of a Class constant for that first parameter to the unmarshall() method.  When we used Serp to create the pcgetLastMod() method, the code that was transferred over from the original getLastMod() method didn&apos;t transfer correctly because this loading of Class constants was not recognized properly.&lt;/p&gt;

&lt;p&gt;I have done a quick patch in my own environment and I can now load your enhanced Page.class.  I&apos;m going to try our Junit bucket to see what I am going to break with this type of change.  And, then I need to figure out how to get a fix into the Serp code.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  It&apos;s been so solid for so many years that nobody has had to update it.  As soon as I get something I am comfortable with, I&apos;ll post a patch so that you might try it out in your environment as well.&lt;/p&gt;</comment>
                            <comment id="13446732" author="kwsutter" created="Sat, 1 Sep 2012 16:10:48 +0100"  >&lt;p&gt;Piotr, I found an even easier solution (I hope)...  As I was checking into the updating of the Serp code, I noticed there was a later version of Serp (1.14.1) that stated, &quot;Fix class constant copying bug.&quot;  Sounds familiar, huh? So, I re-built a local copy of OpenJPA 2.2.0  and a local copy of Serp 1.14.1.  Tried your test project and all is working.  I also verified that all of the JUnits are also working.  The problem is that this version of Serp is not in the Maven Central repo...  And, I&apos;m not exactly sure how to get it there...  It&apos;s a SourceForge project.  If anybody has any insights on how to get it published to the maven repo, let me know.  Otherwise, I&apos;ll dig into it further this weekend.&lt;/p&gt;

&lt;p&gt;In the mean time, I&apos;ll upload a copy of the Serp 1.14.1 jar and pom in case you want to install it into your local repo and try some testing.  Thanks.&lt;/p&gt;</comment>
                            <comment id="13446733" author="kwsutter" created="Sat, 1 Sep 2012 16:12:28 +0100"  >&lt;p&gt;Serp 1.14.1 jar and pom until we figure out how to publish these to the maven repo...&lt;/p&gt;</comment>
                            <comment id="13447149" author="nannou9" created="Mon, 3 Sep 2012 08:21:18 +0100"  >&lt;p&gt;Hi Kevin!&lt;/p&gt;

&lt;p&gt;I am very happy to hear the problem is solved! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; THANKS!&lt;/p&gt;

&lt;p&gt;Now i have to wait for serp to be available in public repo. Unfortunately due to security reasons I cannot use other repos than public ones so i have to wait.&lt;br/&gt;
Do you know which version of openjpa will fix the problem (public available version) and when it will be available?&lt;/p&gt;

&lt;p&gt;Once again thanks...&lt;br/&gt;
Piotr&lt;/p&gt;</comment>
                            <comment id="13449131" author="kwsutter" created="Wed, 5 Sep 2012 22:02:33 +0100"  >&lt;p&gt;Piotr,&lt;br/&gt;
I have figured out a way to update Maven Central with the updated Serp.  I will be fixing this dependency in OpenJPA Trunk (2.3.0-SNAPSHOT).  I have pinged the owners of the service branches (2.0.x, 2.1.x, and 2.2.x) that this issue also applies to those releases.  The tricky part is the updating of a dependency in a service stream and how that dependency update may affect other unrelated processing.  Basically, it will require additional testing &amp;#8211; more than the basic JUnit bucket that I will be using before integrating the change into Trunk.&lt;/p&gt;

&lt;p&gt;If Trunk (2.3.0-SNAPSHOT) will work for you, then great, we&apos;re done.  If you require this change in a service stream (ie. 2.2.x), please indicate which one so that the appropriate changes, decisions, and testing can be done.  Thank you.&lt;/p&gt;</comment>
                            <comment id="13449639" author="kwsutter" created="Thu, 6 Sep 2012 14:25:11 +0100"  >&lt;p&gt;For future reference, I have documented how to update Serp in Maven Central as part of this JIRA:  &lt;a href=&quot;http://openjpa.apache.org/publishing-serp-to-maven-central-repository.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjpa.apache.org/publishing-serp-to-maven-central-repository.html&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12541722">OPENJPA-2122</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12543056" name="OpenJpa2240BugTestProject_v1.1.tar.gz" size="3725" author="nannou9" created="Thu, 30 Aug 2012 09:01:46 +0100"/>
                            <attachment id="12542932" name="mvn.out" size="1668" author="kwsutter" created="Wed, 29 Aug 2012 16:32:31 +0100"/>
                            <attachment id="12543430" name="serp-1.14.1.jar" size="206514" author="kwsutter" created="Sat, 1 Sep 2012 16:12:28 +0100"/>
                            <attachment id="12543431" name="serp-1.14.1.pom" size="4601" author="kwsutter" created="Sat, 1 Sep 2012 16:12:28 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 25 Jul 2012 18:11:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>240126</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxus0v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3359</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>