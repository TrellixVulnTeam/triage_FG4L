<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:30:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-554/OPENJPA-554.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-554] The GetMapValue class should have/supply an alias for ORDER-BY clauses.</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-554</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;A generated select query asks for one of it&apos;s columns returned as&lt;br/&gt;
a subselect, and then asks that the results be ordered by that subselect.&lt;br/&gt;
The DBMS is throwing a spurious error message, saying that in order to&lt;br/&gt;
do a SELECT DISTINCT/ORDER BY, the select list has to contain the&lt;br/&gt;
column to be ordered by. It&apos;s spurious because the query clearly does&lt;br/&gt;
list the identical subselect in the select list and the order-by, but the DBMS&lt;br/&gt;
is apparently not smart enough to equate those.&lt;/p&gt;

&lt;p&gt;Here is a slightly simplified example:&lt;/p&gt;

&lt;p&gt;      s.executeQuery(&quot;SELECT DISTINCT &quot;&lt;br/&gt;
              + &quot;    t0.id, &quot;&lt;br/&gt;
              + &quot;    (SELECT PMH_testPCKeyStringValue.value &quot;&lt;br/&gt;
              + &quot;     FROM PMH_testPCKeyStringValue &quot;&lt;br/&gt;
              + &quot;     WHERE PMH_testPCKeyStringValue.PERSISTENTMAPHOLDER_ID = t0.id &quot;&lt;br/&gt;
              + &quot;     AND PMH_testPCKeyStringValue.testPCKeyStringValue = 1) &quot;&lt;br/&gt;
              + &quot;FROM PMH t0 &quot;&lt;br/&gt;
              + &quot;INNER JOIN PMH_testPCKeyStringValue t1 ON t0.id = t1.PERSISTENTMAPHOLDER_ID &quot;&lt;br/&gt;
              + &quot;WHERE (&quot;&lt;br/&gt;
              + &quot;    (SELECT PMH_testPCKeyStringValue.value &quot;&lt;br/&gt;
              + &quot;     FROM PMH_testPCKeyStringValue &quot;&lt;br/&gt;
              + &quot;     WHERE PMH_testPCKeyStringValue.PERSISTENTMAPHOLDER_ID = t0.id &quot;&lt;br/&gt;
              + &quot;     AND PMH_testPCKeyStringValue.testPCKeyStringValue = 1) &quot;&lt;br/&gt;
              + &quot;     IS NOT NULL) &quot;&lt;br/&gt;
              + &quot;ORDER BY &quot;&lt;br/&gt;
              + &quot;    (SELECT PMH_testPCKeyStringValue.value &quot;&lt;br/&gt;
              + &quot;     FROM PMH_testPCKeyStringValue &quot;&lt;br/&gt;
              + &quot;     WHERE PMH_testPCKeyStringValue.PERSISTENTMAPHOLDER_ID = t0.id &quot;&lt;br/&gt;
              + &quot;     AND PMH_testPCKeyStringValue.testPCKeyStringValue = 1) &quot;&lt;br/&gt;
              + &quot;DESC&quot;);&lt;/p&gt;

&lt;p&gt;The actual SQL generated has parameter markers for the testPCKeyStringValue&lt;br/&gt;
value, and is executed with a prepared statement.&lt;/p&gt;

&lt;p&gt;  A modified query that works, which initially simply enough, involves declaring&lt;br/&gt;
a column name for the subselect, and then using that column name in the order-by:&lt;/p&gt;

&lt;p&gt;      s.executeQuery(&quot;SELECT DISTINCT &quot;&lt;br/&gt;
              + &quot;    t0.id, &quot;&lt;br/&gt;
              + &quot;    (SELECT PMH_testPCKeyStringValue.value &quot;&lt;br/&gt;
              + &quot;     FROM PMH_testPCKeyStringValue &quot;&lt;br/&gt;
              + &quot;     WHERE PMH_testPCKeyStringValue.PERSISTENTMAPHOLDER_ID = t0.id &quot;&lt;br/&gt;
              + &quot;     AND PMH_testPCKeyStringValue.testPCKeyStringValue = 1) AS MY_COL_ALIAS &quot;&lt;br/&gt;
              + &quot;FROM PMH t0 &quot;&lt;br/&gt;
              + &quot;INNER JOIN PMH_testPCKeyStringValue t1 ON t0.id = t1.PERSISTENTMAPHOLDER_ID &quot;&lt;br/&gt;
              + &quot;WHERE (&quot;&lt;br/&gt;
              + &quot;    (SELECT PMH_testPCKeyStringValue.value &quot;&lt;br/&gt;
              + &quot;     FROM PMH_testPCKeyStringValue &quot;&lt;br/&gt;
              + &quot;     WHERE PMH_testPCKeyStringValue.PERSISTENTMAPHOLDER_ID = t0.id &quot;&lt;br/&gt;
              + &quot;     AND PMH_testPCKeyStringValue.testPCKeyStringValue = 1) &quot;&lt;br/&gt;
              + &quot;     IS NOT NULL) &quot;&lt;br/&gt;
              + &quot;ORDER BY MY_COL_ALIAS &quot;&lt;br/&gt;
              + &quot;DESC&quot;);&lt;/p&gt;

&lt;p&gt;The fix, suggested by Abe White, and tested successfully by me (in this case/DBMS only) is:&lt;/p&gt;

&lt;p&gt;&quot; - When we find JDOQL of the form &quot;&amp;lt;map&amp;gt;.get(&amp;lt;value&amp;gt;)&quot;, we add the result&lt;br/&gt;
of ExpressionFactory.getMapValue(...) to the expression tree. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In the case we&apos;re concerned with the ExpressionFactory in question is&lt;br/&gt;
the org.apache.openjpa.jdbc.kernel.exps.JDBCExpressionFactory, and the&lt;br/&gt;
return value is an org.apache.openjpa.jdbc.kernel.exps.GetMapValue.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The GetMapValue class manually constructs the SQL subselect to&lt;br/&gt;
retrieve the value for the given key.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Our goal is to alias the subselect in the SELECT portion of the query,&lt;br/&gt;
to keep the subselect unaliased in the WHERE portion, and to use the&lt;br/&gt;
SELECT alias in place of the subselect in the ORDER BY portion.&lt;br/&gt;
Luckily, I believe this can be accomplished easily with a few&lt;br/&gt;
modifcations to the GetMapValue class:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add a &quot;String _alias&quot; member to GetMapValue.  This will be a unique&lt;br/&gt;
alias within the select for the subselect we&apos;ll produce.  I recommend&lt;br/&gt;
generating this value with a monotonically-increasing int in&lt;br/&gt;
JDBCExpressionFactory and passing it to the GetMapValue constructor.&lt;br/&gt;
I.e.:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;class JDBCExpressionFactory {&lt;br/&gt;
  private int _getMapValueAlias = 0;&lt;br/&gt;
  ...&lt;br/&gt;
  Value getMapValue(...) &lt;/p&gt;
{
    return new GetMapValue(..., &quot;gmv&quot; + _getMapValueAlias++);
  }
&lt;p&gt;}&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In GetMapValue.select(...), append &quot; AS &quot; + the _alias member to the&lt;br/&gt;
SQLBuffer returned by newSQLBuffer(...).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In GetMapValue.orderBy(...), just order by the _alias member, not the&lt;br/&gt;
result of newSQLBuffer(...).    &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This should work because when we construct the select (see&lt;br/&gt;
org.apache.openjpa.jdbc.exps.SelectConstructor) we automatically call&lt;br/&gt;
select(...) for any ordering value, in addition to orderBy(...).  So the&lt;br/&gt;
same GetMapValue instance will have a chance to create both its SELECT&lt;br/&gt;
SQL and its ORDER BY SQL.  &lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You might only want to use subselect aliasing at all if the&lt;br/&gt;
DBDictionary in use (accessible through ctx.store.getDBDictionary()) has&lt;br/&gt;
its requiresAliasForSubselect field set to true.  Or maybe it would be&lt;br/&gt;
best for all dictionaries.  I don&apos;t know &amp;#8211; it would require a test run&lt;br/&gt;
on all our supported databases to see what each one likes.  My hunch&lt;br/&gt;
would be to do it for all dictionaries.&quot;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment>MS SQLServer</environment>
        <key id="12392967">OPENJPA-554</key>
            <summary>The GetMapValue class should have/supply an alias for ORDER-BY clauses.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="joe weinstein">Joe Weinstein</reporter>
                        <labels>
                    </labels>
                <created>Wed, 2 Apr 2008 20:47:11 +0100</created>
                <updated>Tue, 9 Mar 2010 18:32:49 +0000</updated>
                            <resolved>Mon, 7 Apr 2008 17:27:09 +0100</resolved>
                                    <version>1.0.2</version>
                                    <fixVersion>1.0.3</fixVersion>
                                    <component>jdbc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                    <timeoriginalestimate seconds="172800">48h</timeoriginalestimate>
                            <timeestimate seconds="172800">48h</timeestimate>
                                        <comments>
                            <comment id="12584741" author="joe weinstein" created="Wed, 2 Apr 2008 20:52:24 +0100"  >&lt;p&gt;Here is the svn diff that solves my example:&lt;/p&gt;

&lt;p&gt;Index: openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java&lt;br/&gt;
(revision 633245)&lt;br/&gt;
+++ openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java&lt;br/&gt;
(working copy)&lt;br/&gt;
@@ -59,6 +59,8 @@&lt;br/&gt;
     private final ClassMapping _type;&lt;br/&gt;
     private final SelectConstructor _cons = new SelectConstructor();&lt;/p&gt;

&lt;p&gt;+    private int _getMapValueAlias = 0;&lt;br/&gt;
+&lt;br/&gt;
     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructor. Supply the type we&apos;re querying against.&lt;br/&gt;
      */&lt;br/&gt;
@@ -396,6 +398,6 @@&lt;br/&gt;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     public Value getMapValue(Value map, Value arg) &lt;/p&gt;
{
-        return new GetMapValue((Val) map, (Val) arg);
+        return new GetMapValue((Val) map, (Val) arg, &quot;gmv&quot; + _getMapValueAlias++);
     }
&lt;p&gt; }&lt;br/&gt;
Index: openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java&lt;br/&gt;
(revision 633245)&lt;br/&gt;
+++ openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java&lt;br/&gt;
(working copy)&lt;br/&gt;
@@ -47,13 +47,15 @@&lt;br/&gt;
     private final Val _key;&lt;br/&gt;
     private ClassMetaData _meta = null;&lt;br/&gt;
     private Class _cast = null;&lt;br/&gt;
+    private String _alias = null;&lt;/p&gt;

&lt;p&gt;     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructor. Provide the map and key to operate on.&lt;br/&gt;
      */&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public GetMapValue(Val map, Val key) {&lt;br/&gt;
+    public GetMapValue(Val map, Val key, String alias) 
{
         _map = map;
         _key = key;
+        _alias = alias;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     public ClassMetaData getMetaData() {&lt;br/&gt;
@@ -111,7 +113,9 @@&lt;/p&gt;

&lt;p&gt;     public void select(Select sel, ExpContext ctx, ExpState state,&lt;br/&gt;
         boolean pks) &lt;/p&gt;
{
-        sel.select(newSQLBuffer(sel, ctx, state), this);
+        SQLBuffer sqb = newSQLBuffer(sel, ctx, state);
+        sqb.append(&quot; AS &quot; + _alias );
+        sel.select(sqb, this);
     }

&lt;p&gt;     public void selectColumns(Select sel, ExpContext ctx, ExpState state,&lt;br/&gt;
@@ -127,7 +131,7 @@&lt;/p&gt;

&lt;p&gt;     public void orderBy(Select sel, ExpContext ctx, ExpState state,&lt;br/&gt;
         boolean asc) &lt;/p&gt;
{
-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);
+        sel.orderBy(_alias, asc, false);
     }

&lt;p&gt;     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {&lt;/p&gt;</comment>
                            <comment id="12586456" author="awhite" created="Mon, 7 Apr 2008 17:27:09 +0100"  >&lt;p&gt;Applied suggested fix in revision 645589.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 7 Apr 2008 16:27:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160870</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt1sv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203472</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>