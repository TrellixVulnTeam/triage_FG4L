<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:31:36 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-1612/OPENJPA-1612.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-1612] Mapping an unsupported type</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-1612</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;As discussed on the dev mailing list &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;...&lt;/p&gt;

&lt;p&gt;I found that the following mapping: &lt;/p&gt;

&lt;p&gt;@Entity&lt;br/&gt;
public class AnnoTest1 &lt;/p&gt;
{

    @ManyToOne
    Object o;
...
}

&lt;p&gt;This results in a warning message &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;, but it is allowed. This JIRA will be used to detect this condition and fail fast. &lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://openjpa.markmail.org/thread/6yphicehgclyobag&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjpa.markmail.org/thread/6yphicehgclyobag&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; 297  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;test.AnnoTest1.o&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12461176">OPENJPA-1612</key>
            <summary>Mapping an unsupported type</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Not A Problem</resolution>
                                        <assignee username="curtisr7">Rick Curtis</assignee>
                                    <reporter username="curtisr7">Rick Curtis</reporter>
                        <labels>
                    </labels>
                <created>Mon, 5 Apr 2010 22:17:19 +0100</created>
                <updated>Mon, 7 Jun 2010 15:39:40 +0100</updated>
                            <resolved>Mon, 7 Jun 2010 15:29:51 +0100</resolved>
                                    <version>1.2.2</version>
                    <version>2.0.0</version>
                    <version>2.1.0</version>
                                    <fixVersion>2.1.0</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12865897" author="curtisr7" created="Mon, 10 May 2010 20:57:31 +0100"  >&lt;p&gt;Committed revision 942871 to trunk.&lt;/p&gt;

&lt;p&gt;Added additional validation and a new test case.&lt;/p&gt;</comment>
                            <comment id="12865919" author="ppoddar@apache.org" created="Mon, 10 May 2010 21:54:46 +0100"  >&lt;p&gt;Rick,&lt;br/&gt;
  In my view, this is not a change in the right direction. &lt;/p&gt;

&lt;p&gt;OpenJPA used to have a reasonably advanced support for untyped relations. These capabilities are described in &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;&lt;br/&gt;
Now in the past, I had used these powerful features to demonstrate how generically typed structures can be modeled  &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; in OpenJPA (that blog unfortunately has been eaten by a very powerful company and one can merely find its indirect cached references by searching for &apos;Persistence of Generic Graph Pinaki Poddar&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  &lt;br/&gt;
Recently I noticed that those powerful type system is weakened (meaning those neat generic model example does not work with OpenJPA 2.0).&lt;br/&gt;
Support for generically typed domain model is a powerful construct and OpenJPA was quite capable of meeting that demand. Hence I consider OpenJPA 2.0 has regressed on that aspect. &lt;/p&gt;

&lt;p&gt;I have not investigated deeply, but my cursory look at the changes suggest that cause of the regression is more at the surface and can be corrected at ease.&lt;br/&gt;
In view of that observation, I see this current commit as a step backward. And I hope that the original committer will  consider rolling the change back.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; will provide the user sufficient choices on how to persist Object o &amp;#8211; when it is assigned to a Persistence Capable entity, or merely a Serializable at different levels of OpenJPA type support.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://openjpa.apache.org/builds/latest/docs/manual/manual.html#type&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjpa.apache.org/builds/latest/docs/manual/manual.html#type&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://www.mail-archive.com/users@openjpa.apache.org/msg01370.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.mail-archive.com/users@openjpa.apache.org/msg01370.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12866161" author="curtisr7" created="Tue, 11 May 2010 15:33:06 +0100"  >&lt;p&gt;Pinaki -&lt;/p&gt;

&lt;p&gt;I&apos;ll start off by saying that I&apos;m not dead set on this commit by any means. The intent of this commit was to improve the usability of OpenJPA, but it sounds like I may have sacrificed some functionality that we used to have.&lt;/p&gt;

&lt;p&gt;The problem I was trying to fix is as follows:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Joe user has two Entities 
{A,B}
&lt;p&gt; and A has a @OneToOne to B.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Joe messes up when he specifies &amp;lt;class&amp;gt;(s) in his p.xml file and omits B.&lt;/li&gt;
	&lt;li&gt;Prior to this commit, OpenJPA took the liberty to serialize B to save it to the DB. Perhaps there are certain use cases where this would be okay, for the sake of the test it wasn&apos;t.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Since javax.persistence.xTox annotations are defined by the spec, I don&apos;t think we have the liberty to define them in any way we like. My understanding is that these annotations are for Entity to Entity relationships. The code I added checks for this and fails fast.&lt;/p&gt;</comment>
                            <comment id="12866682" author="curtisr7" created="Wed, 12 May 2010 19:36:22 +0100"  >&lt;p&gt;Reopening to discuss the validity of my change.&lt;/p&gt;</comment>
                            <comment id="12866743" author="ppoddar@apache.org" created="Wed, 12 May 2010 22:32:49 +0100"  >&lt;p&gt;&amp;gt; Prior to this commit, OpenJPA took the liberty to serialize B to save it to the DB. &lt;/p&gt;

&lt;p&gt;OpenJPA manual clearly describes how it treats untyped relations. This feature is to support relations that are partially known at declaration time. &lt;br/&gt;
This feature leads to OpenJPA&apos;s capability to work with generic types in a graceful way. So it is not about taking liberty at random, but taking liberty to be not confined by a specification. &lt;/p&gt;


&lt;p&gt;The right question in my view is what can OpenJPA do with the following domain model that is most useful to the developer/user?&lt;/p&gt;

&lt;p&gt;// A persistent type with a relation whose exact type is unknown at declaration.&lt;br/&gt;
@Entity&lt;br/&gt;
public class A &lt;/p&gt;
{
  @OneToOne
  Object relation;
}


&lt;p&gt;@Entity&lt;br/&gt;
public class B {&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;But at runtime, the user can supply a persistent type for that relation&lt;/p&gt;

&lt;p&gt;  A a = new A();&lt;br/&gt;
  a.setRelation(new B());&lt;/p&gt;


&lt;p&gt;Given zero-commitment from the user on type of relation, this will create a serialized B is database.&lt;br/&gt;
But in the domain model, if the user had added OpenJPA extension &lt;br/&gt;
@Entity&lt;br/&gt;
public class A &lt;/p&gt;
{
  @OneToOne
  @Type(Entity.class)
  Object relation;
}

&lt;p&gt;then OpenJPA be able to save the relation as structured data  &amp;#8211; that is a powerful and useful feature. And OpenJPA &lt;b&gt;was&lt;/b&gt; capable of doing exactly that.&lt;/p&gt;

&lt;p&gt;So to me, the positive or forward approach is to say how we can make generic type support work than to say what we do not allow because a spec says so.&lt;br/&gt;
Hence, when we serialize something as a blob because we do not know any better, we should warn with a suggestion message that though we are now&lt;br/&gt;
serializing the relation but we can as well store that untyped relation if the user had clarified its type to some further. &lt;/p&gt;





</comment>
                            <comment id="12876254" author="curtisr7" created="Mon, 7 Jun 2010 15:29:51 +0100"  >&lt;p&gt;Reverted previous commit. Closing this JIRA as a non-issue.&lt;/p&gt;</comment>
                            <comment id="12876258" author="curtisr7" created="Mon, 7 Jun 2010 15:39:39 +0100"  ></comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 10 May 2010 20:54:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161871</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hz7ntr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>288830</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>