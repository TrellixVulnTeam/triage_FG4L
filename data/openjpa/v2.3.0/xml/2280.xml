<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:39:06 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-2280/OPENJPA-2280.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-2280] MappingTool ignores column precision / scale for some databases</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-2280</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;This JIRA is the same issue as reported by &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-1224&quot; title=&quot;OpenJPA MySQL BigDecimal ignoring Precision/Scale column Annotation when generating tables &quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-1224&quot;&gt;&lt;del&gt;OPENJPA-1224&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12612075">OPENJPA-2280</key>
            <summary>MappingTool ignores column precision / scale for some databases</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="4" iconUrl="https://issues.apache.org/jira/images/icons/statuses/reopened.png" description="This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.">Reopened</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="curtisr7">Rick Curtis</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Oct 2012 18:55:05 +0100</created>
                <updated>Wed, 13 Feb 2013 18:25:50 +0000</updated>
                                            <version>1.2.3</version>
                    <version>2.2.1</version>
                    <version>2.3.0</version>
                                                    <component>tooling</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13477321" author="curtisr7" created="Tue, 16 Oct 2012 21:31:31 +0100"  >&lt;p&gt;Committed revision 1398979 to trunk. This changed the numeric mapping from DOUBLE to DECIMAL for DB2 and Derby.&lt;/p&gt;</comment>
                            <comment id="13488106" author="curtisr7" created="Wed, 31 Oct 2012 19:05:48 +0000"  >&lt;p&gt;I found a number of regressions related to this change. I&apos;ll update the JIRA with details later.&lt;/p&gt;</comment>
                            <comment id="13488155" author="curtisr7" created="Wed, 31 Oct 2012 19:45:51 +0000"  >&lt;p&gt;After digging into this issue, it is getting to be much more complicated that what I initially thought. Changing DBDictionary.numericTypeName from DOUBLE to DECIMAL did have the intended effect (honoring precision, scale when creating tables), but it also had a number of unintended runtime consequences.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;First, TestTypesafeCriteria.testBigDecimalConversion was failing because we were trying to CAST an INT column (in a SQL statement) up to a BigDecimal compatible column (so we could execute a math function), but it was blowing up because the INT was larger than a DECIMAL(5,0). To get around that problem I set DBDictionary.(requiresCastForComparisons &amp;amp;&amp;amp; requiresCastForMathFunctions) to false to avoid generating the cast and the the test would pass.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Next, org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testArithmFunc3 and org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testFunctionWithTwoArgument were failing (on DB2 9.5 but not 10.1) and I didn&apos;t take the time to dive into these issues.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The net of it is that this isn&apos;t a trivial change to get right and at the current point in time, I don&apos;t have time to resolve this issue properly. I&apos;m going to back out all of my changes and put it back into the open state. Hopefully someone with some more time will be able to look at this in the near future.&lt;/p&gt;</comment>
                            <comment id="13569033" author="ppoddar@apache.org" created="Fri, 1 Feb 2013 20:17:30 +0000"  >&lt;p&gt;The discipline with BigDecimal values should be as follows&lt;/p&gt;

&lt;p&gt;1. The database column is defined with DECIMAL(p,s) where &amp;lt;p&amp;gt; is the precision and &amp;lt;s&amp;gt; is the scale as defined in the @Column metadata&lt;br/&gt;
2. Irrespective of the scale of the value is set into a BigDecimal field in the POJO x, the return value of the BigDecimal field always must be of the same scale &amp;lt;s&amp;gt;&lt;br/&gt;
3. Rule #1 and #2 is ignored if the storeLargeNumberAsString property is set in Database dictionary.&lt;/p&gt;

&lt;p&gt;Do you agree?  &lt;/p&gt;</comment>
                            <comment id="13569096" author="curtisr7" created="Fri, 1 Feb 2013 21:19:11 +0000"  >&lt;p&gt;I agree with #1 and #2, but I don&apos;t have a good feeling for #3.&lt;/p&gt;

&lt;p&gt;&amp;gt; storeLargeNumberAsString property is set in Database dictionary.&lt;br/&gt;
Is that something that users really want to do?&lt;/p&gt;</comment>
                            <comment id="13570541" author="kwsutter" created="Mon, 4 Feb 2013 19:18:04 +0000"  >&lt;p&gt;1)  In general, I agree with this.  What are the default values for precision and scale when they are not set via @Column annotation?  One value, both values, or neither value.&lt;br/&gt;
2)  I think I agree with this.  Need to clarify what you mean by &quot;same scale&quot;.  Same scale as the input value, or same scale as the field definition (metadata)?&lt;br/&gt;
3)  I think the storeLargeNumberAsString property is orthogonal to this discussion.  Granted, it&apos;s another means of storing a BigDecimal, but let&apos;s fix BigDecimal first and then worry about how this storeLargeNumberAsString property might be affected.&lt;/p&gt;

&lt;p&gt;Another pertinent question is what will the affect be to existing applications if the numericTypeName is changed from Double to Decimal for Derby and DB2?  We will have to support Double (to the extent possible) for existing applications that have their schemas defined with this data type.  Maybe some type of warning message will need to be displayed if the Double type is detected.&lt;/p&gt;

&lt;p&gt;Thanks for looking into this, Pinaki.&lt;/p&gt;</comment>
                            <comment id="13570737" author="ppoddar@apache.org" created="Mon, 4 Feb 2013 23:12:47 +0000"  >&lt;p&gt;From the responses, I gather that we agree on the primary use case i.e. &lt;/p&gt;

&lt;p&gt;Rule 1: if both precision and scale are specified in a @Column annotation, we must define a database column of appropriate type and that column must honor the precision and scale specified. If the settings are such that the specified precision and scale can not be honored, that raises a schema definition error.&lt;/p&gt;

&lt;p&gt;Rule 2: When scale is specified, the user may set any BigDecimal value in their in-memory object, but when such an instance is stored or retrieved from the database, the returned value is always the scale as mentioned in the @Column. This process may loose some accuracy (scale) i.e. for scale=2 field, the user might have set 1234.56789 but the returned value from database is always 1234.56. &lt;br/&gt;
But what if user had set a value of lower scale? Let us say s/he sets 1234. In this case will the returned value be 1234 or 1234.00 ? &lt;/p&gt;



&lt;p&gt;I think this ground rule will give us a good start to rationalize the special case behavior when not all things are explicitly stated.&lt;/p&gt;

&lt;p&gt;But before we lay down those special cases, let us clarify another DBDictionary settings namely StoreLargeNumbersAsString. The default value for this switch is false. But what if it is turned to true? &lt;br/&gt;
It is true that we define the database schema as a VARCHAR when StoreLargeNumbersAsString=true. We should maintain that.&lt;br/&gt;
But I believe, even in this case the rule #2 above must remain the same. That is if user sets a value of 1234.56789 on a @Column(scale=2) field, they value will be stored in a VARCHAR column with 1234.56789, but when accessed via that field the value will be 1234.56.&lt;/p&gt;

&lt;p&gt;Do you agree on this proposed rule (say Rule 3)?&lt;/p&gt;

&lt;p&gt;Of course, the above rules do not cover the scenarios when either precision or scale or both are unspecified in @Column. &lt;/p&gt;

&lt;p&gt;What are the default values of precision and scale? How does that impact the schema? How is that impacted by StoreLargeNumbersAsString=true. Given that StoreLargeNumbersAsString=false by default, and it is specific to OpenJPA, let us skip that for now.&lt;/p&gt;

&lt;p&gt;According to the spec, precision and scale in @Column annotation default to zero. &lt;/p&gt;

&lt;p&gt;In OpenJPA, if neither precision nor scale is specified in @Column, the database column is of type as defined by NumericTypeName. That is NUMERIC by default dictionary, DOUBLE in Derby and DB2, DECIMAL for Ingres, NUMBER for Oracle etc. Even if NumericTypeName=DECIMAL which can take the precision and scale argument, the DECIMAL field in the database will be defined without those argument as simply DECIMAL i.e. databases own discipline will control what can be stored in the column and how.&lt;br/&gt;
I have not yet analyzed/experimented with other variations of such special cases where either of them but not both are specified, or both are specified but inconsistent i.e. say precision &amp;lt; scale etc. &lt;/p&gt;</comment>
                            <comment id="13577109" author="ppoddar@apache.org" created="Tue, 12 Feb 2013 22:23:16 +0000"  >&lt;p&gt;This patch changes the following&lt;br/&gt;
1. BigDecimal values are written to and read from the databsae with the scale specified in @Column. &lt;/p&gt;

&lt;p&gt;2. logic to determine the implicit type of query expressions, especially Constant expressions. &lt;/p&gt;</comment>
                            <comment id="13577803" author="kwsutter" created="Wed, 13 Feb 2013 18:25:50 +0000"  >&lt;p&gt;Thanks for the proposed patch, Pinaki.  Here are my comments...&lt;/p&gt;

&lt;p&gt;o  scripts/test.bat seems to be &quot;extra&quot;&lt;/p&gt;

&lt;p&gt;o  Speaking of testing, don&apos;t we need some new or updated tests for these type of changes?  Specifically, we could beef up TestTypesafeCriteria to be more stringent or explicit on the expected outcomes.  In general though, we seem to be lacking in this &quot;precision/scale&quot; testing.&lt;/p&gt;

&lt;p&gt;o  In DBDictionary.  Shouldn&apos;t we use the RoundingMode values instead of inventing new int values?  More explicit and less guessing on where the values are coming from.  For example, use RoundingMode.HALF_EVEN instead of setting roundingMode to 6.&lt;/p&gt;

&lt;p&gt;o  I didn&apos;t notice any changes to AbstractDB2Dictionary to change the numericTypeName from Double to Decimal.  Shouldn&apos;t that be part of this change?  If we go this route, then we&apos;ll need documentation changes (at a minimum) for migration concerns.  Might require coding changes as well to support both types.&lt;/p&gt;

&lt;p&gt;o  The change set has many innocuous changes &amp;#8211; cosmetic changes that complicate the change set, but provide no real value.  Personally, I would only make these type of changes when I am changing code in that area.  The change set is pretty complicated as it is and these &quot;extra&quot; changes just makes it more difficult to figure out what&apos;s important.&lt;/p&gt;

&lt;p&gt;o  In the method setBigInteger, why check if val==null?  Couldn&apos;t you just pass val on through to the setBigDecimal method and let it figure out what to do when val==null?&lt;/p&gt;

&lt;p&gt;o  I&apos;m not sure I fully understand your changes to Math.java.  Why are Const values special?  &lt;/p&gt;

&lt;p&gt;o  Same comment for AbstractExpressionBuilder.  Why is the check for expected!=null needed now, but it wasn&apos;t needed in the past?  It looks like we processed the expected value in the past when both o1 and o2 were not null, but not otherwise.&lt;/p&gt;

&lt;p&gt;o  In Filters.promote(), it seems odd to do an explicit test for Number.class at the top of this method.  What&apos;s the use case for this special condition?  Especially when this method has lots of similar checks near the end of this method.  This type of conditional just seems too &quot;special case&quot; and potentially fragile.&lt;/p&gt;

&lt;p&gt;That&apos;s it.  Thanks again.&lt;br/&gt;
Kevin&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12432116">OPENJPA-1224</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12569079" name="JIRA-2280.txt" size="27572" author="ppoddar@apache.org" created="Tue, 12 Feb 2013 22:23:16 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 1 Feb 2013 20:17:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>249082</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy3z6v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>57025</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>