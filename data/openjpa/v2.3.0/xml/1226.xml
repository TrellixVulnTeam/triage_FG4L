<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:31:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-1226/OPENJPA-1226.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-1226] Can not merge entity with nested embeddable</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-1226</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;When an entity has nested embeddables, the merge operation fails with the following exception:&lt;/p&gt;

&lt;p&gt;org.apache.openjpa.persistence.ArgumentException:&lt;br/&gt;
Cannot manipulate identity of type &quot;com.ibm.wssvt.acme.annuity.common.bean.jpa.Address&quot;: it&apos;s identity type is unknown.&lt;br/&gt;
        at org.apache.openjpa.kernel.StateManagerImpl.&amp;lt;init&amp;gt;(StateManagerImpl.java:173)&lt;br/&gt;
        at org.apache.openjpa.kernel.BrokerImpl.embed(BrokerImpl.java:2770)&lt;br/&gt;
        at org.apache.openjpa.kernel.DetachedStateManager.attach(DetachedStateManager.java:106)&lt;br/&gt;
        at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:251)&lt;br/&gt;
        at org.apache.openjpa.kernel.DetachedStateManager.attach(DetachedStateManager.java:244)&lt;br/&gt;
        at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:251)&lt;br/&gt;
        at org.apache.openjpa.kernel.AttachStrategy.attachMap(AttachStrategy.java:462)&lt;br/&gt;
        at org.apache.openjpa.kernel.DetachedStateManager.attach(DetachedStateManager.java:269)&lt;br/&gt;
        at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:251)&lt;br/&gt;
        at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:104)&lt;br/&gt;
        at org.apache.openjpa.kernel.BrokerImpl.attach(BrokerImpl.java:3346)&lt;br/&gt;
        at org.apache.openjpa.kernel.DelegatingBroker.attach(DelegatingBroker.java:1176)&lt;br/&gt;
        at org.apache.openjpa.persistence.EntityManagerImpl.merge(EntityManagerImpl.java:852)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12432220">OPENJPA-1226</key>
            <summary>Can not merge entity with nested embeddable</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="faywang">Fay Wang</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Aug 2009 01:12:48 +0100</created>
                <updated>Wed, 10 Apr 2013 20:57:57 +0100</updated>
                            <resolved>Wed, 10 Apr 2013 20:57:57 +0100</resolved>
                                                    <fixVersion>1.2.3</fixVersion>
                    <fixVersion>2.0.0-M3</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12830947" author="urbanq" created="Mon, 8 Feb 2010 14:06:46 +0000"  >&lt;p&gt;In openJPA-1.2.1 version it still exist:&lt;br/&gt;
setters are omitted..&lt;/p&gt;

&lt;p&gt;@Embeddable&lt;br/&gt;
public class Address&lt;br/&gt;
{&lt;br/&gt;
    private String street;&lt;/p&gt;

&lt;p&gt;    private String homeNr;&lt;/p&gt;

&lt;p&gt;    private String placeNr;&lt;/p&gt;

&lt;p&gt;    private String city;&lt;/p&gt;

&lt;p&gt;    private String zip;&lt;/p&gt;

&lt;p&gt;    @Column(name = &quot;street&quot;)&lt;br/&gt;
    public String getStreet()&lt;/p&gt;
    {
        return street;
    }

&lt;p&gt;    @Column(name = &quot;home_nr&quot;)&lt;br/&gt;
    public String getHomeNr()&lt;/p&gt;
    {
        return homeNr;
    }

&lt;p&gt;    @Column(name = &quot;place_nr&quot;)&lt;br/&gt;
    public String getPlaceNr()&lt;/p&gt;
    {
        return placeNr;
    }

&lt;p&gt;    @Column(name = &quot;city&quot;)&lt;br/&gt;
    public String getCity()&lt;/p&gt;
    {
        return city;
    }

&lt;p&gt;    @Column(name = &quot;zip&quot;)&lt;br/&gt;
    public String getZip()&lt;/p&gt;
    {
        return zip;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;@Embeddable&lt;br/&gt;
public class Invoice&lt;br/&gt;
{&lt;br/&gt;
    private String name;&lt;br/&gt;
    private Address address = new Address();&lt;br/&gt;
    private String nip;&lt;/p&gt;

&lt;p&gt;    @Column(name = &quot;invoice_name&quot;)&lt;br/&gt;
    public String getName()&lt;/p&gt;
    {
        return name;
    }

&lt;p&gt;    @Embedded&lt;br/&gt;
    @AttributeOverrides(&lt;/p&gt;
{
      @AttributeOverride(name = &quot;street&quot;,  column = @Column(name = &quot;invoice_address_street&quot;)),
      @AttributeOverride(name = &quot;homeNr&quot;,  column = @Column(name = &quot;invoice_address_home_nr&quot;)),
      @AttributeOverride(name = &quot;placeNr&quot;, column = @Column(name = &quot;invoice_address_place_nr&quot;)),
      @AttributeOverride(name = &quot;city&quot;,    column = @Column(name = &quot;invoice_address_city&quot;)),
      @AttributeOverride(name = &quot;zip&quot;,     column = @Column(name = &quot;invoice_address_zip&quot;))
    }
&lt;p&gt;)&lt;br/&gt;
    public Address getAddress()&lt;/p&gt;
    {
        return address;
    }

&lt;p&gt;    @Column(name = &quot;invoice_nip&quot;)&lt;br/&gt;
    public String getNip()&lt;/p&gt;
    {
        return nip;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;@Embeddable&lt;br/&gt;
public class Modification&lt;br/&gt;
{&lt;br/&gt;
    private Date createdAt;&lt;br/&gt;
    private Date updatedAt;&lt;/p&gt;

&lt;p&gt;    @Temporal(TemporalType.TIMESTAMP)&lt;br/&gt;
    @Column(name = &quot;created_at&quot;)&lt;br/&gt;
    public Date getCreatedAt()&lt;/p&gt;
    {
        return createdAt;
    }

&lt;p&gt;    @Temporal(TemporalType.TIMESTAMP)&lt;br/&gt;
    @Column(name = &quot;updated_at&quot;)&lt;br/&gt;
    public Date getUpdatedAt()&lt;/p&gt;
    {
        return updatedAt;
    }

&lt;p&gt;    public static Modification currentDate()&lt;/p&gt;
    {
        Modification result = new Modification();
        Date date = new Date();
        result.setCreatedAt(date);
        result.setUpdatedAt(date);
        return result;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;@MappedSuperclass&lt;br/&gt;
public abstract class BaseID&lt;br/&gt;
{&lt;br/&gt;
    private Integer id;&lt;br/&gt;
    private Integer flag;&lt;br/&gt;
    private Modification modification;&lt;/p&gt;

&lt;p&gt;    @Id&lt;br/&gt;
    @GeneratedValue(strategy=GenerationType.IDENTITY)&lt;br/&gt;
    @Column(name = &quot;id&quot;)&lt;br/&gt;
    public Integer getId()&lt;/p&gt;
    {
        return id;
    }

&lt;p&gt;    @Column(name = &quot;flag&quot;)&lt;br/&gt;
    public Integer getFlag()&lt;/p&gt;
    {
        return flag;
    }

&lt;p&gt;    @Embedded&lt;br/&gt;
    public Modification getModification()&lt;/p&gt;
    {
        return modification;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;@Entity&lt;br/&gt;
@Table(name = &quot;offline_app_users_payment&quot;)&lt;br/&gt;
public class OfflineUserPayment extends BaseID&lt;br/&gt;
{&lt;br/&gt;
    private Date paymentDate;&lt;br/&gt;
    private Users user;&lt;br/&gt;
    private Payment payment;&lt;br/&gt;
    private Integer status;&lt;br/&gt;
    private String transaction;&lt;br/&gt;
    private Invoice invoice;&lt;/p&gt;

&lt;p&gt;    @Temporal(TemporalType.TIMESTAMP)&lt;br/&gt;
    @Column(name = &quot;payment_date&quot;)&lt;br/&gt;
    public Date getPaymentDate()&lt;/p&gt;
    {
        return paymentDate;
    }

&lt;p&gt;    @ManyToOne(fetch=FetchType.LAZY)&lt;br/&gt;
    @JoinColumn(name=&quot;user_id&quot;)&lt;br/&gt;
    public Users getUser()&lt;/p&gt;
    {
        return user;
    }

&lt;p&gt;    @ManyToOne(fetch=FetchType.LAZY)&lt;br/&gt;
    @JoinColumn(name=&quot;payment_id&quot;)&lt;br/&gt;
    public Payment getPayment()&lt;/p&gt;
    {
        return payment;
    }

&lt;p&gt;    @Column(name = &quot;status&quot;)&lt;br/&gt;
    public Integer getStatus()&lt;/p&gt;
    {
        return status;
    }

&lt;p&gt;    @Column(name = &quot;transaction_id&quot;)&lt;br/&gt;
    public String getTransaction()&lt;/p&gt;
    {
        return transaction;
    }

&lt;p&gt;    @Embedded&lt;br/&gt;
    public Invoice getInvoice()&lt;/p&gt;
    {
        return invoice;
    }
&lt;p&gt;}&lt;br/&gt;
Using merge on new object (should generate database insert):&lt;br/&gt;
OfflineUserPayment newUserPayment = new OfflineUserPayment();&lt;br/&gt;
        newUserPayment.setFlag(1);&lt;br/&gt;
        newUserPayment.setModification(Modification.currentDate());&lt;br/&gt;
        newUserPayment.setPayment(payment);&lt;br/&gt;
        newUserPayment.setPaymentDate(null);&lt;br/&gt;
        newUserPayment.setStatus(-1);&lt;br/&gt;
        newUserPayment.setUser(user);&lt;br/&gt;
            Invoice invoice = new Invoice();&lt;br/&gt;
            invoice.setName(remoteInvoice.getName());&lt;br/&gt;
            invoice.setNip(remoteInvoice.getNip());&lt;br/&gt;
            invoice.getAddress().setStreet(remoteInvoice.getStreet());&lt;br/&gt;
            invoice.getAddress().setHomeNr(remoteInvoice.getHomeNr());&lt;br/&gt;
            invoice.getAddress().setPlaceNr(remoteInvoice.getPlaceNr());&lt;br/&gt;
            invoice.getAddress().setCity(remoteInvoice.getCity());&lt;br/&gt;
            invoice.getAddress().setZip(remoteInvoice.getZip());&lt;br/&gt;
            newUserPayment.setInvoice(invoice);&lt;br/&gt;
     getEntityManager().merge(newUserPayment);&lt;/p&gt;

&lt;p&gt;///Stacktrace:&lt;br/&gt;
&amp;lt;openjpa-1.2.1-r752877:753278 nonfatal user error&amp;gt; org.apache.openjpa.persistence.ArgumentException: Cannot manipulate identity of type &quot;com.net.recepty.webservice.server.domain.Address&quot;: it&apos;s identity type is unknown.&lt;br/&gt;
	at org.apache.openjpa.kernel.StateManagerImpl.&amp;lt;init&amp;gt;(StateManagerImpl.java:162)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.embed(BrokerImpl.java:2653)&lt;br/&gt;
	at org.apache.openjpa.kernel.VersionAttachStrategy.attach(VersionAttachStrategy.java:93)&lt;br/&gt;
	at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:241)&lt;br/&gt;
	at org.apache.openjpa.kernel.AttachStrategy.attachField(AttachStrategy.java:202)&lt;br/&gt;
	at org.apache.openjpa.kernel.VersionAttachStrategy.attach(VersionAttachStrategy.java:153)&lt;br/&gt;
	at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:241)&lt;br/&gt;
	at org.apache.openjpa.kernel.AttachStrategy.attachField(AttachStrategy.java:202)&lt;br/&gt;
	at org.apache.openjpa.kernel.VersionAttachStrategy.attach(VersionAttachStrategy.java:153)&lt;br/&gt;
	at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:241)&lt;br/&gt;
	at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:101)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.attach(BrokerImpl.java:3212)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBroker.attach(DelegatingBroker.java:1158)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.merge(EntityManagerImpl.java:769)&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 8 Feb 2010 14:06:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161503</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt3nj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203772</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>