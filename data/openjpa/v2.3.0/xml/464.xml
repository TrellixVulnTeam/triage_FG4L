<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:44:59 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-464/OPENJPA-464.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-464] Performance improvement with Statement Batching support</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-464</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;The current OpenJPA implementation did not provide the SQL statement batching. All SQL statements will be executed one statement at a time to the database. Consequently, the runtime performance was decreased due to lots of database flows. JDBC Specification provides the batch capability for insert, update and delete statements through the addBatch() and executeBatch() APIs. We should be able to take advantage of this capability to support SQL statement batching in OpenJPA.&lt;/p&gt;

&lt;p&gt;According to the old version of the OpenJPA manual (i.e., Kodo), statement batching was part of the initial functions. Conscious decision by BEA that this function was not contributed back to OpenJPA. We can still use this info as the implementation base with some modifications. &lt;/p&gt;

&lt;p&gt;I have completed the work for this statement batching support and the patch has been tested by CTS against Derby and DB2, OPENJPA regression test as well as our internal FVT test bucket.  The following section describes the design and implementation info. I also attached the whole design documentation and the patch in this jira. Once the design and implementation are accepted, then I will update the OPENJPA manual to include this function. Thanks,&lt;/p&gt;

&lt;p&gt;Design and implementation:&lt;br/&gt;
&#8226;	Configuration:&lt;br/&gt;
o	Batch Limit value: &lt;br/&gt;
&#61607;	0 - Disable batch support.&lt;br/&gt;
&#61607;	-1 - Unlimited number of statements for a batch.&lt;br/&gt;
&#61607;	Any positive number - Maximum number of statements for a batch.&lt;br/&gt;
o	By default, the batch support is based on each Dictionary to define the default batch limit. Currently only DB2 and Oracle dictionaries are set the default batch limit to 100. The default batch limit for rest of the dictionaries is set to zero (disabled).&lt;br/&gt;
o	To enable the batch support, user can specify the following property in the persistence.xml file:&lt;br/&gt;
&amp;lt;property name=&quot;openjpa.jdbc.DBDictionary&quot; value=&quot;BatchLimit=25&quot;/&amp;gt;&lt;br/&gt;
or&lt;br/&gt;
&amp;lt;property name=&quot;openjpa.jdbc.DBDictionary&quot;&lt;br/&gt;
value=&quot;db2(batchLimit=25)&quot;/&amp;gt;&lt;/p&gt;


&lt;p&gt;&#8226;	Basic design is to cache all the insert/update/delete statements during the execution of the PreparedStatementManagerImpl.flushInternal() method. There is a cache structure which uses the LinkHashMap to maintain the order of the SQL statements for execution:&lt;br/&gt;
o	_cacheSql - a LinkHashMap to store the rows that associate with one PrepareStatement. Key: SQL statement string; Value: array list of rows.&lt;/p&gt;

&lt;p&gt;During the PreparedStatementManagerImpl.flush() process, it will go through the cache to prepare the SQL statement; add the statement to the batch; and execute the batch when the batch limit is reached or all the rows are processed for that statement. Validate the update count after the executeBatch() method.&lt;/p&gt;

&lt;p&gt;&#8226;	If the batch limit =0 (disabled), execute the statement as the normal process; no need to use the batching process.  Same rule applies to the statement that only has one row, execute it as the normal process. &lt;br/&gt;
&#8226;	The batch process will be disabled if the primary key generation is used the Identity strategy. When the GeneratedType=IDENTITY, we need to get the ID value right away for the in-memory entity to use. Therefore, we can&apos;t batch this kind of statement.&lt;br/&gt;
&#8226;	Batch exception process: a checkUpdateCount() is used to validate the batch process after the executeBatch(). According to the javadoc, there are three cases to consider:&lt;br/&gt;
o	Case of EXECUTE_FAILED: (-3): &lt;br/&gt;
&#61607;	This is a failure case. If the action is UPDATE or there is FailedObject, treats it as OptimisticException. Otherwise, throws the SQLException.&lt;br/&gt;
&#61607;	This is the same process as current implementation.&lt;br/&gt;
o	Case of  SUCCESS_NO_INFO: (-2): &lt;br/&gt;
&#61607;	We treat this as successful case and log the info in the log.&lt;br/&gt;
o	Case of 0: &lt;br/&gt;
&#61607;	If there is a FailedObject or the action is INSERT, then throws the SQLException. Otherwise, treats it as successful case. &lt;/p&gt;
</description>
                <environment></environment>
        <key id="12384438">OPENJPA-464</key>
            <summary>Performance improvement with Statement Batching support</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mikedd">Michael Dick</assignee>
                                    <reporter username="tckan1">Teresa Kan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Dec 2007 22:03:56 +0000</created>
                <updated>Tue, 9 Mar 2010 18:32:42 +0000</updated>
                            <resolved>Thu, 7 Feb 2008 22:53:46 +0000</resolved>
                                    <version>1.1.0</version>
                                    <fixVersion>1.1.0</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12550729" author="tckan1" created="Tue, 11 Dec 2007 22:08:34 +0000"  >&lt;p&gt;Attach the design document and the patch. Basically changes are in :PreparedStatmentManagerImpl, DBDictionary, DB2Dictionary and OracleDictionary. &lt;br/&gt;
Currenlty only DB2 and Oracle will take advantage of this support. If other databases which want to have this support, you can update the Dictionary to set batchLimit to some number. Follow the changes in the DB2 and Oracle Dictionaries.&lt;/p&gt;</comment>
                            <comment id="12551624" author="tckan1" created="Thu, 13 Dec 2007 22:13:57 +0000"  >&lt;p&gt;Attach the patch including the OPENJPA documentation changes.&lt;/p&gt;</comment>
                            <comment id="12552860" author="mikedd" created="Tue, 18 Dec 2007 19:05:12 +0000"  >&lt;p&gt;Hi Teresa,&lt;/p&gt;

&lt;p&gt;A couple quick comments on the patch: &lt;/p&gt;

&lt;p&gt;1. The implementations of   getDefaultBatchLimit() for DB2Dictionary and OracleDictionary are slightly different. Further it looks like the DB2 dictionary doesn&apos;t allow the batchLimit to be set to UNLIMITED. Is that a known issue with DB2? If so we should add that to the documentation and possibly add a message indicating that we&apos;re overriding a user setting. &lt;/p&gt;

&lt;p&gt;On the other hand if this is not intended behavior then the dictionaries should be able to share a common method in DBDictionary. Ideally the subclass dictionaries would only need to set the default batch limit to some value, rather than re-implementing a method. &lt;/p&gt;

&lt;p&gt;2. Minor whitespace issue : &lt;br/&gt;
+    }&lt;/p&gt;

&lt;p&gt;+    &lt;/p&gt;

&lt;p&gt;+&lt;/p&gt;

&lt;p&gt;+    private void processSql(String sql, RowImpl row) throws SQLException &lt;/p&gt;
{

+        ArrayList temprow;

3. Please add a comment to the empty catch block in the execute method : 
+            }
&lt;p&gt; catch (SQLException se) &lt;/p&gt;
{

+            }

&lt;p&gt;That&apos;s it for now. The only critical issue is the first one. &lt;/p&gt;</comment>
                            <comment id="12557312" author="tckan1" created="Wed, 9 Jan 2008 16:43:35 +0000"  >&lt;p&gt;I redo the fix based on Pinaki&apos;s suggestion to use the UpdateManager plugin. Instead of extending from the AbstractUpdateManager, the BatchConstraintUpdateManager extends from the ConstraintUpdateManager:&lt;/p&gt;

&lt;p&gt;public class BatchingConstraintUpdateManager&lt;br/&gt;
   extends ConstraintUpdateManager {&lt;/p&gt;

&lt;p&gt;I also made this update manager as the default batch update manager. User can still plugin their own Batch mechanism through the property of  UpdateManager:&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;openjpa.jdbc.UpdateManager&quot; &lt;br/&gt;
     value=&quot;org.apache.openjpa.jdbc.kernel.YourOperationOrderUpdateManager&quot; /&amp;gt;  &lt;/p&gt;
</comment>
                            <comment id="12559696" author="ppoddar@apache.org" created="Wed, 16 Jan 2008 22:40:08 +0000"  >&lt;p&gt;Hello Teresa,&lt;br/&gt;
  Thank you for considering to separate batching logic in a separate UpdateManager.&lt;/p&gt;

&lt;p&gt;  Comments on the patch&lt;br/&gt;
 1. Two separate methods on DBDictionary&lt;br/&gt;
    validateBatchProcess(...);&lt;br/&gt;
    validateDBSpecificBatchProcess(...)&lt;br/&gt;
    is not necessary.&lt;br/&gt;
    A single method validateBatchProcess(...) is sufficient.&lt;br/&gt;
    If specific database wants to augment or change the validation logic they should overwrite this method calling super.validateBatchProcess(...) if necessary. &lt;/p&gt;

&lt;p&gt;  2. A single &apos;batchLimit&apos; should be able to account for different sitauations. Instead I see two separate varaibles and some logic that does not appear necessary. But I have not comb through it. May be you should elaborate what is the intention of BATCH_LIMIT_NOT_SET and defaultBatchLimit.&lt;/p&gt;

&lt;p&gt;  3. As you are changing default UpdateManager, it may be worthwhile to mention in the document that alias &apos;constraint&apos; will activate ConstraintUpdateManager&lt;/p&gt;</comment>
                            <comment id="12559710" author="ppoddar@apache.org" created="Wed, 16 Jan 2008 22:47:00 +0000"  >&lt;p&gt;I read your original posting again to see your usage of batch limit. &lt;br/&gt;
Why not have a single batch limit bean-style property defined in DBDictionary?&lt;br/&gt;
Also in &lt;br/&gt;
DBDictionary.validateBatchProcess() &lt;/p&gt;
{
  if (getBatchLimit()&amp;lt;-1) return false;
  // other auto-assign logic
}

&lt;p&gt;1. You will not require to define batch limit for individual database dictionaries&lt;br/&gt;
2. the concept of batch_limit_unset is not required. Just interpret any number less that -1 as an indication of switching off batching. Interpret -1 as maximum.&lt;/p&gt;</comment>
                            <comment id="12560545" author="tckan1" created="Fri, 18 Jan 2008 21:08:59 +0000"  >&lt;p&gt;Append the patch2 based on Pinaki&apos;s suggestion:&lt;br/&gt;
1) restructure the BatchingConstraintUpdateManager to extend ConstraintUpdateManager.&lt;br/&gt;
2) Default will be 0,but can be overriden by each DB Dictionary&apos;&apos;s constructor. Currently only DB2Dictionary and OracleDictionary constructors have set the default limit to 100. The rest of the Dictionaries will be zero.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Teresa&lt;/p&gt;</comment>
                            <comment id="12563596" author="tckan1" created="Tue, 29 Jan 2008 17:59:47 +0000"  >&lt;p&gt;Provided the batching capability for the OperationOrderUpdateManager. Attach the patch for this support.&lt;/p&gt;</comment>
                            <comment id="12586997" author="yves.galante" created="Tue, 8 Apr 2008 23:59:10 +0100"  >&lt;p&gt;On your document you write : &lt;br/&gt;
&quot;Batch exception process: a checkUpdateCount() is used to validate the batch process after the executeBatch().&quot;&lt;br/&gt;
And after :&lt;br/&gt;
&quot;Case of  SUCCESS_NO_INFO: (-2): We treat this as successful case and log the info in the log&quot;&lt;/p&gt;

&lt;p&gt;Oracle drivers return -2 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;(&lt;/p&gt;

&lt;p&gt;We have 3 choices :&lt;br/&gt;
1)&lt;br/&gt;
Use bach update with Oracle only for Insert SQL command (if return -2 we can&apos;t having more than one insert all is rigth).&lt;br/&gt;
We need an others configuration parameter, one for update/delete and one for active insert batch mode.&lt;br/&gt;
2)&lt;br/&gt;
Use &quot;Oralce batching mode&quot;, with special oracle class on the drivers ojdbc5.jar, this batching class return the correct number of rows updated. But we need oracle5.jar to building your projet &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;(&lt;br/&gt;
3)&lt;br/&gt;
Execute an select for count the number of rows updated or deleted, with :&lt;br/&gt;
For update :&lt;br/&gt;
  select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; where id = XX and version = XX .&lt;br/&gt;
For delete&lt;br/&gt;
  select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; where id = XX&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12371627" name="OPENJPA-464.patch" size="26341" author="tckan1" created="Thu, 13 Dec 2007 22:13:57 +0000"/>
                            <attachment id="12373561" name="OPENJPA-464.patch2" size="31557" author="tckan1" created="Fri, 18 Jan 2008 21:08:59 +0000"/>
                            <attachment id="12374276" name="OPENJPA-464.patch3" size="5465" author="tckan1" created="Tue, 29 Jan 2008 17:59:46 +0000"/>
                            <attachment id="12371461" name="statement batch design_1211.doc" size="43008" author="tckan1" created="Tue, 11 Dec 2007 22:08:34 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 18 Dec 2007 19:05:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>42089</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyswnz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>202640</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>