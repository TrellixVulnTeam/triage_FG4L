<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:39:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-2283/OPENJPA-2283.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-2283] Upgrade to ASM 4 dependency</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-2283</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;OpenJPA currently has a dependency on ASM 3.2 for some post-enhancement processing to fix up the stack map tables (Java 7 requirement).  The latest release of ASM is 4.1, which just came out last week.  The immediate need is to move up to ASM 4.0.  We can entertain 4.1 at a later date.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12613049">OPENJPA-2283</key>
            <summary>Upgrade to ASM 4 dependency</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="struberg">Mark Struberg</assignee>
                                    <reporter username="kwsutter">Kevin Sutter</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 Oct 2012 22:14:30 +0100</created>
                <updated>Tue, 29 Oct 2013 08:21:34 +0000</updated>
                            <resolved>Tue, 29 Oct 2013 08:21:34 +0000</resolved>
                                    <version>2.3.0</version>
                                    <fixVersion>2.3.0</fixVersion>
                                    <component>Enhance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13483370" author="kwsutter" created="Wed, 24 Oct 2012 17:40:13 +0100"  >&lt;p&gt;As usual, these type of updates are not as easy as first envisioned...  The changes that were put in for OpenJPA-2171 are causing some issues.  The first one is due to the fact that ASM 4.0 changed the ClassVisitor from an Interface to an Abstract Class.  This affects the reflective signature for the ClassReader.accept method.  That issue was pretty easy to resolve.  But, now I&apos;m hitting some problems while our JUnit bucket attempts to enhance the various classes, specifically the CacheTest.java class.  I&apos;m trying to narrow this one down, but it&apos;s taking more time than I expected.  May need some assistance with this since it seems directly related to the changes introduced by OpenJPA-2171, and personally I&apos;m skeptical about those changes...&lt;/p&gt;</comment>
                            <comment id="13483629" author="kwsutter" created="Wed, 24 Oct 2012 22:51:46 +0100"  >&lt;p&gt;As mentioned above, I&apos;m having some problems with the changes submitted for making ASM optional (OpenJPA-2171)...  I&apos;m trying to upgrade OpenJPA trunk to use ASM 4.0.  I got by the &quot;easy&quot; problem when reflectively finding the accept() method &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.  But, after making that change, I am getting a strange error &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; when our enhancement process is working on CacheTest.class in our JUnit bucket.  This error doesn&apos;t happen with all of the other enhancement processing that happens before this one.  I have no idea if other classes would also fail later in the bucket since it never gets that far.&lt;/p&gt;

&lt;p&gt;If I replace AsmAdapter.java with the previous version (pre-OpenJPA-2171), then everything works just fine.  Thoughts or suggestions?  Since the move to ASM 4.0 is important, I&apos;d like to do something that&apos;s compatible with these OpenJPA-2171 changes.  But, if I can&apos;t figure something out quickly, I might have to re-open that JIRA and back out the changes to make progress on ASM 4.0.  Thanks!&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;              classReaderAccept = crClass.getMethod(&quot;accept&quot;, cwClass.getSuperclass(), int.class);&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;&lt;br/&gt;
18450  xml-persistence-unit  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Tool - Enhancer running on type &quot;class org.apache.openjpa.persistence.datacache.CacheTest&quot;.&lt;br/&gt;
java.io.IOException: java.lang.reflect.InvocationTargetException&lt;br/&gt;
        at org.apache.openjpa.enhance.AsmAdaptor.toJava7ByteArray(AsmAdaptor.java:156)&lt;br/&gt;
        at org.apache.openjpa.enhance.AsmAdaptor.writeJava7(AsmAdaptor.java:137)&lt;br/&gt;
        at org.apache.openjpa.enhance.AsmAdaptor.write(AsmAdaptor.java:107)&lt;br/&gt;
        at org.apache.openjpa.enhance.PCEnhancer.record(PCEnhancer.java:633)&lt;br/&gt;
        at org.apache.openjpa.enhance.PCEnhancer.record(PCEnhancer.java:619)&lt;br/&gt;
        at org.apache.openjpa.enhance.PCEnhancer.run(PCEnhancer.java:4899)&lt;br/&gt;
        at org.apache.openjpa.ant.PCEnhancerTask.executeOn(PCEnhancerTask.java:89)&lt;br/&gt;
        at org.apache.openjpa.lib.ant.AbstractTask.execute(AbstractTask.java:171)&lt;br/&gt;
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:613)&lt;br/&gt;
        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)&lt;br/&gt;
        at org.apache.tools.ant.Task.perform(Task.java:348)&lt;br/&gt;
        at org.apache.tools.ant.Target.execute(Target.java:357)&lt;br/&gt;
        at org.apache.tools.ant.Target.performTasks(Target.java:385)&lt;br/&gt;
        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1337)&lt;br/&gt;
        at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)&lt;br/&gt;
        at org.apache.tools.ant.Project.executeTargets(Project.java:1189)&lt;br/&gt;
        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)&lt;br/&gt;
        at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)&lt;br/&gt;
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:613)&lt;br/&gt;
        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)&lt;br/&gt;
        at org.apache.tools.ant.Task.perform(Task.java:348)&lt;br/&gt;
        at org.apache.tools.ant.Target.execute(Target.java:357)&lt;br/&gt;
        at org.apache.tools.ant.Target.performTasks(Target.java:385)&lt;br/&gt;
        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1337)&lt;br/&gt;
        at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)&lt;br/&gt;
        at org.apache.tools.ant.Project.executeTargets(Project.java:1189)&lt;br/&gt;
        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)&lt;br/&gt;
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:613)&lt;br/&gt;
        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)&lt;br/&gt;
        at org.apache.tools.ant.Task.perform(Task.java:348)&lt;br/&gt;
        at org.apache.tools.ant.Target.execute(Target.java:357)&lt;br/&gt;
        at org.apache.maven.plugin.antrun.AbstractAntMojo.executeTasks(AbstractAntMojo.java:118)&lt;br/&gt;
        at org.apache.maven.plugin.antrun.AntRunMojo.execute(AntRunMojo.java:98)&lt;br/&gt;
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)&lt;br/&gt;
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)&lt;br/&gt;
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)&lt;br/&gt;
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)&lt;br/&gt;
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)&lt;br/&gt;
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)&lt;br/&gt;
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)&lt;br/&gt;
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)&lt;br/&gt;
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)&lt;br/&gt;
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)&lt;br/&gt;
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:613)&lt;br/&gt;
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)&lt;br/&gt;
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)&lt;br/&gt;
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)&lt;br/&gt;
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)&lt;br/&gt;
Caused by: java.lang.reflect.InvocationTargetException&lt;br/&gt;
        at sun.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:613)&lt;br/&gt;
        at org.apache.openjpa.enhance.AsmAdaptor.toJava7ByteArray(AsmAdaptor.java:152)&lt;br/&gt;
        ... 63 more&lt;br/&gt;
Caused by: java.lang.ClassFormatError: JVMCFRE113 unexpected EOF; class=org/apache/openjpa/persistence/datacache/CacheTest, offset=0&lt;br/&gt;
        at java.lang.ClassLoader.defineClassImpl(Native Method)&lt;br/&gt;
        at java.lang.ClassLoader.defineClass(ClassLoader.java:286)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.defineClassFromData(AntClassLoader.java:1146)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.getClassFromStream(AntClassLoader.java:1324)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.findClassInComponents(AntClassLoader.java:1388)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.findClass(AntClassLoader.java:1341)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:1088)&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:660)&lt;br/&gt;
        at java.lang.ClassLoader.defineClassImpl(Native Method)&lt;br/&gt;
        at java.lang.ClassLoader.defineClass(ClassLoader.java:286)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.defineClassFromData(AntClassLoader.java:1146)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.getClassFromStream(AntClassLoader.java:1324)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.findClassInComponents(AntClassLoader.java:1388)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.findClass(AntClassLoader.java:1341)&lt;br/&gt;
        at org.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:1088)&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:660)&lt;br/&gt;
        at java.lang.Class.forNameImpl(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:176)&lt;br/&gt;
        at org.objectweb.asm.ClassWriter.getCommonSuperClass(Unknown Source)&lt;br/&gt;
        at org.objectweb.asm.ClassWriter.a(Unknown Source)&lt;br/&gt;
        at org.objectweb.asm.Frame.a(Unknown Source)&lt;br/&gt;
        at org.objectweb.asm.Frame.a(Unknown Source)&lt;br/&gt;
        at org.objectweb.asm.MethodWriter.visitMaxs(Unknown Source)&lt;br/&gt;
        at org.objectweb.asm.ClassReader.accept(Unknown Source)&lt;br/&gt;
        at org.objectweb.asm.ClassReader.accept(Unknown Source)&lt;br/&gt;
        ... 67 more&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;/p&gt;</comment>
                            <comment id="13786193" author="romain.manni-bucau" created="Fri, 4 Oct 2013 15:36:30 +0100"  >&lt;p&gt;Can&apos;t it be fixed with:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; {
        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; the &lt;span class=&quot;code-quote&quot;&gt;&quot;real&quot;&lt;/span&gt; asm first, then the others
&lt;/span&gt;        tryClass(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.objectweb.asm.&quot;&lt;/span&gt;);
        tryClass(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.xbean.asm4.&quot;&lt;/span&gt;);
        tryClass(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.xbean.asm.&quot;&lt;/span&gt;);
        tryClass(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.springframework.asm.&quot;&lt;/span&gt;);

        &lt;span class=&quot;code-comment&quot;&gt;// get needed stuff
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            COMPUTE_FRAMES = cwClass.getField(&lt;span class=&quot;code-quote&quot;&gt;&quot;COMPUTE_FRAMES&quot;&lt;/span&gt;).getInt(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
            classReaderAccept = crClass.getMethod(&lt;span class=&quot;code-quote&quot;&gt;&quot;accept&quot;&lt;/span&gt;, findClassVisitor(), &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;.class);
            classReaderConstructor = crClass.getConstructor(InputStream.class);
            classWriterConstructor = cwClass.getConstructor(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;.class);
            classWritertoByteArray = cwClass.getMethod(&lt;span class=&quot;code-quote&quot;&gt;&quot;toByteArray&quot;&lt;/span&gt;);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(_loc.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt;-asm-exception&quot;&lt;/span&gt;).getMessage(), e);
        }
    }

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; findClassVisitor() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; ClassNotFoundException {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; cwName = cwClass.getName();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; cwClass.getClassLoader().loadClass(cwName.substring(0, cwName.length() - &lt;span class=&quot;code-quote&quot;&gt;&quot;ClassWriter&quot;&lt;/span&gt;.length()) + &lt;span class=&quot;code-quote&quot;&gt;&quot;ClassVisitor&quot;&lt;/span&gt;);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13786215" author="struberg" created="Fri, 4 Oct 2013 16:12:59 +0100"  >&lt;p&gt; +1&lt;br/&gt;
 but we should change the lookup order as we don&apos;t know whether the &apos;native&apos; ASM stuff is &apos;good enough&apos; for us (means ASM3++).&lt;/p&gt;

&lt;p&gt;As alternative, we might also think about forcing the dependency to xbean-asm4.&lt;br/&gt;
I would actually even prefer this to the other options. once there is a non compat change in asm, the xbean team will shade to a different package again. Thus xbean-asm4 can co-exist beside any other ASM version without interference.&lt;/p&gt;</comment>
                            <comment id="13786227" author="romain.manni-bucau" created="Fri, 4 Oct 2013 16:16:21 +0100"  >&lt;p&gt;If openjpa switch to xbean-asm4 we&apos;d need to support a tomee-asm (not exiting today) since openjpa can be provided in webapps and we don&apos;t want to conflict with it (why xbean-asm was created). So ok to change the order, -1 to depend explicitely on the shade.&lt;/p&gt;</comment>
                            <comment id="13786242" author="kwsutter" created="Fri, 4 Oct 2013 16:29:08 +0100"  >&lt;p&gt;I agree with Romain &amp;#8211; no change to the asm dependency itself.&lt;/p&gt;</comment>
                            <comment id="13786245" author="romain.manni-bucau" created="Fri, 4 Oct 2013 16:30:47 +0100"  >&lt;p&gt;PS: i just tested with asm 4.1 as dependency and openjpa-persistence-jdbc tests are passing.&lt;/p&gt;</comment>
                            <comment id="13786255" author="romain.manni-bucau" created="Fri, 4 Oct 2013 16:34:27 +0100"  >&lt;p&gt;just talked with Mark on IRC about it, since openjpa depends on asm java 7 features and tomee doesn&apos;t care about xbean-asm4 in the apps we can test xbean-asm4 first and avoid issues this way. so changing my -1 in +1 (sorry for the noise)&lt;/p&gt;</comment>
                            <comment id="13786261" author="struberg" created="Fri, 4 Oct 2013 16:40:31 +0100"  >&lt;p&gt;to make this more clear: for now we let the reflection stuff as is, but we only change the lookup order to check for xbean-asm4 first, then the rest.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
tryClass(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.xbean.asm4.&quot;&lt;/span&gt;);
tryClass(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.xbean.asm.&quot;&lt;/span&gt;);
tryClass(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.objectweb.asm.&quot;&lt;/span&gt;);
tryClass(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.springframework.asm.&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The argument is that we know that xbean-asm4 is perfect, xbean-asm3 is still good enough, but org.objectweb.asm could even be ASM-2 and older. So if anyone ships his webapp with ASM-2 as dependency, we still would take xbean-asm4 if available (e.g. in Geronimo or TomEE).&lt;/p&gt;</comment>
                            <comment id="13786263" author="curtisr7" created="Fri, 4 Oct 2013 16:43:21 +0100"  >&lt;p&gt;Hey Romain &amp;#8211; &lt;/p&gt;

&lt;p&gt;Your proposed change doesn&apos;t fix my problem...my guess is that the problem is somehow related to :&lt;/p&gt;

&lt;p&gt;            // ClassWriter.getCommonSuperClass uses TCCL&lt;br/&gt;
            Thread.currentThread().setContextClassLoader(bc.getClassLoader());&lt;/p&gt;</comment>
                            <comment id="13786265" author="struberg" created="Fri, 4 Oct 2013 16:47:32 +0100"  >&lt;p&gt;Rick, are you able to provide a small test?&lt;/p&gt;</comment>
                            <comment id="13786266" author="romain.manni-bucau" created="Fri, 4 Oct 2013 16:48:03 +0100"  >&lt;p&gt;@Rick: how to reproduce it?&lt;/p&gt;</comment>
                            <comment id="13786274" author="curtisr7" created="Fri, 4 Oct 2013 16:54:08 +0100"  >&lt;p&gt;Running with java7 &amp;#8211;&lt;/p&gt;

&lt;p&gt;.../openjpa-parent&amp;gt; mvn clean install&lt;/p&gt;

&lt;p&gt;It &lt;b&gt;should&lt;/b&gt; blow up while enhancing openjpa-persistence-jdbc.&lt;/p&gt;</comment>
                            <comment id="13786280" author="kwsutter" created="Fri, 4 Oct 2013 17:06:25 +0100"  >&lt;p&gt;I still don&apos;t agree with the change in ordering.  We define our specific dependencies via the pom.  Right now, we require ASM 3.2.  We&apos;re looking to upgrade that to 4.0 or 4.1.  Our code should be treating the &quot;real&quot; ASM as our preferred choice, not some shaded version provided by another project.  A project that we have no dependencies on.&lt;/p&gt;</comment>
                            <comment id="13786326" author="struberg" created="Fri, 4 Oct 2013 17:54:47 +0100"  >&lt;p&gt;Kevin, if you take org.objectweb.asm as default, then you risk to get into deep troubles. There was a reason that there is a shaded version of asm used in OpenEJB, Geronimo, OpenWebBeans, Spring, etc. All those projects basically got to a point where they were broken sometimes because they use plain ASM.&lt;/p&gt;

&lt;p&gt;The reason is that ASM folks changed their API over time and introduced backward incompatibilities. But they didn&apos;t change the package names. &lt;br/&gt;
So whenever a custom WAR or EAR deployed in the container of your choice brings an own ASM version, then you can never be sure that it is compatible with OpenJPA! And I really don&apos;t like to render OpenJPA useless only because some customer projects bring an old ASM version as dependency.&lt;/p&gt;

&lt;p&gt;Of course, I can see your point with ASM3 as primary target, thus I&apos;d suggest to set the ordering as following:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;xbean-asm3&lt;/li&gt;
	&lt;li&gt;xbean-asm4&lt;/li&gt;
	&lt;li&gt;asm-spring&lt;/li&gt;
	&lt;li&gt;asm native&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13786475" author="kwsutter" created="Fri, 4 Oct 2013 19:37:25 +0100"  >&lt;p&gt;Mark, okay, I give...  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I just talked with Rick and he convinced me this was okay.  I have always struggled with this change since I was wondering why would we (OpenJPA) be checking for these alternate packages, when we don&apos;t have a direct dependency on them.  But, this is for application server environments like you said.  Environments where there might be multiple versions of ASM (both app server and application), and OpenJPA needs to use the &quot;right one&quot;.  In OpenJPA&apos;s premier app server (WebSphere), we can determine which ASM to use based on the classloader &quot;magic&quot;.  But, that ability is not always available in every environment.  So, I&apos;m good with this ordering change.&lt;/p&gt;

&lt;p&gt;But, since we&apos;re re-looking at this change due to the ASM 4 upgrade, should the xbean-asm4 be first in the list?  I know that differs from my earlier comment, but now that I understand why you want the xbean shaded jars first, it would seem logical to have xbean-asm4 first.&lt;/p&gt;</comment>
                            <comment id="13790603" author="struberg" created="Wed, 9 Oct 2013 17:52:37 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kwsutter&quot; class=&quot;user-hover&quot; rel=&quot;kwsutter&quot;&gt;Kevin Sutter&lt;/a&gt; oki, gonna fix the ordering to xbean-asm4, xbean-asm3, spring-asm, asm-native&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rgcurtis&quot; class=&quot;user-hover&quot; rel=&quot;rgcurtis&quot;&gt;Rick Curtis&lt;/a&gt; I think the wrong ClassLoader comes from the fact that the input class byte array comes from the BCClass instance in the PCEnhancer. So you will most probably always get the ClassLoader which loads OpenJPA itself. But this is wrong for nested ClassLoaders. We need the ClassLoader from the Class which gets enhanced at all. &lt;br/&gt;
Please note that this will most probably only have an impact if the enhancement gets done at runtime. Doing further debugging atm and try to create a unit test. &lt;/p&gt;

&lt;p&gt;Gonna fix this in 2.3.x and trunk. &lt;/p&gt;</comment>
                            <comment id="13790904" author="struberg" created="Wed, 9 Oct 2013 22:59:47 +0100"  >&lt;p&gt;This looks like a pretty heavy bug in ASM so far.&lt;/p&gt;

&lt;p&gt;ClassWriter#getCommonSuperClass always only takes the own ClassLoader. &lt;br/&gt;
I thought this has been fixed in ASM-4 but got proven wrong. &lt;/p&gt;

&lt;p&gt;The original code have had a hack by overwriting this method and providing an own ClassLoader for this operation. This is not really possible anymore with the dynamic approach as there is no fixed class we can extend. This would only be possible with ASM which is kind of a chicken-egg problem now.&lt;/p&gt;

&lt;p&gt;I suggest to code against xbean-asm4-shaded instead of ASM directly. This has the benefit that we at least know which exact version we have - without trashing other project or getting trashed by customer dependencies.&lt;/p&gt;</comment>
                            <comment id="13790916" author="jira-bot" created="Wed, 9 Oct 2013 23:10:50 +0100"  >&lt;p&gt;Commit 1530808 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=struberg&quot; class=&quot;user-hover&quot; rel=&quot;struberg&quot;&gt;Mark Struberg&lt;/a&gt; in branch &apos;openjpa/branches/2.3.x&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1530808&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1530808&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-2283&quot; title=&quot;Upgrade to ASM 4 dependency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-2283&quot;&gt;&lt;del&gt;OPENJPA-2283&lt;/del&gt;&lt;/a&gt; use xbean-asm4-shaded ASM version as the dynamic handling doesn&apos;t work out&lt;/p&gt;

&lt;p&gt;This makes sure we always have a guaranteed ASM version 4 regardless what ASM a&lt;br/&gt;
user might add to the project. This also rolls back the dynamic ASM handling of&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-2171&quot; title=&quot;asm should be optional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-2171&quot;&gt;&lt;del&gt;OPENJPA-2171&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13791683" author="kwsutter" created="Thu, 10 Oct 2013 18:04:17 +0100"  >&lt;p&gt;Mark,&lt;br/&gt;
This change puts a direct dependency on the xbean version of asm:&lt;/p&gt;

&lt;p&gt;import org.apache.xbean.asm4.ClassReader;&lt;br/&gt;
import org.apache.xbean.asm4.ClassWriter;&lt;/p&gt;

&lt;p&gt;We can&apos;t do that.  We need OpenJPA to stay independent of these type of shaded asm versions.  This type of change now requires any user of OpenJPA (including WebSphere) to also ship a version of the xbean shaded jar.  I don&apos;t agree with this change.&lt;/p&gt;</comment>
                            <comment id="13791818" author="struberg" created="Thu, 10 Oct 2013 19:35:13 +0100"  >&lt;p&gt;Tell me where the difference is between having a direct dependency to a badly maintained version of asm jars which are NOT binary compatible with each other vs having an Apache internal xbean-asm4-shaded which we maintain over at the Geronimo project?&lt;br/&gt;
There is a good reason why OpenWebBeans, OpenEJB, a few other Apache projects plus Spring, etc dropped the direct ASM dependency already...&lt;/p&gt;</comment>
                            <comment id="13792693" author="kwsutter" created="Fri, 11 Oct 2013 16:12:51 +0100"  >&lt;p&gt;Mark, It looks like there are multiple conversations going on between openjpa-2171 and this JIRA...  Sorry about that.  I just noticed the code changes come across this JIRA, so I commented here...&lt;/p&gt;

&lt;p&gt;Thinking through this a bit more, I see your point.  Whether we have a dependency on ASM or the xbean version of ASM, it really shouldn&apos;t make a difference.  And, from a WebSphere perspective, they can provide an xbean dependency as well as an ASM dependency.  So, let&apos;s do what&apos;s right for OpenJPA and move forward.  Thanks for your patience (and perseverance).&lt;/p&gt;</comment>
                            <comment id="13795591" author="jira-bot" created="Tue, 15 Oct 2013 21:29:34 +0100"  >&lt;p&gt;Commit 1532519 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=curtisr7&quot; class=&quot;user-hover&quot; rel=&quot;curtisr7&quot;&gt;Rick Curtis&lt;/a&gt; in branch &apos;openjpa/branches/2.3.x&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1532519&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1532519&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-2283&quot; title=&quot;Upgrade to ASM 4 dependency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-2283&quot;&gt;&lt;del&gt;OPENJPA-2283&lt;/del&gt;&lt;/a&gt;: Seperate test/runtime source/target levels in root pom.xml&lt;/p&gt;</comment>
                            <comment id="13795594" author="jira-bot" created="Tue, 15 Oct 2013 21:32:08 +0100"  >&lt;p&gt;Commit 1532523 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=curtisr7&quot; class=&quot;user-hover&quot; rel=&quot;curtisr7&quot;&gt;Rick Curtis&lt;/a&gt; in branch &apos;openjpa/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1532523&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1532523&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-2283&quot; title=&quot;Upgrade to ASM 4 dependency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-2283&quot;&gt;&lt;del&gt;OPENJPA-2283&lt;/del&gt;&lt;/a&gt; : Merge changes from 2.3.x to trunk.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12649565">OPENJPA-2388</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12550795">OPENJPA-2171</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12606813" name="openjpa-2283.problem.patch" size="2024" author="curtisr7" created="Fri, 4 Oct 2013 16:54:08 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Oct 2013 14:36:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>250441</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy4t3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>61869</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>