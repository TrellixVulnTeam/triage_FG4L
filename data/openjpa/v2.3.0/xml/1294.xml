<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:46:22 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-1294/OPENJPA-1294.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-1294] Nested JDBC calls fail for certain database</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-1294</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Some use cases require a new database connection to perform operation because the current connection is busy/open.&lt;br/&gt;
Typical use case is asking for size of the result set (obtained by a SELECT COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; query) while the original result set is still being open.&lt;/p&gt;

&lt;p&gt;Some databases (e.g. MySQL as per observation) do not allow the new COUNT query on the same connection because the original result set is still open.&lt;/p&gt;

&lt;p&gt;A JDBCStore.getNewConnection() is added &amp;#8211; but use it with caution, remember to close it and use it only when required.&lt;/p&gt;</description>
                <environment>MySQL</environment>
        <key id="12435480">OPENJPA-1294</key>
            <summary>Nested JDBC calls fail for certain database</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ppoddar@apache.org">Pinaki Poddar</assignee>
                                    <reporter username="ppoddar@apache.org">Pinaki Poddar</reporter>
                        <labels>
                    </labels>
                <created>Fri, 11 Sep 2009 22:59:51 +0100</created>
                <updated>Tue, 9 Mar 2010 18:31:21 +0000</updated>
                            <resolved>Thu, 12 Nov 2009 06:38:54 +0000</resolved>
                                    <version>2.0.0-M3</version>
                                    <fixVersion>2.0.0-beta</fixVersion>
                                    <component>jdbc</component>
                    <component>kernel</component>
                    <component>query</component>
                    <component>sql</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12754583" author="milosz" created="Sat, 12 Sep 2009 19:28:22 +0100"  >&lt;p&gt;Hi Pinaki. I guess the databases affected are those with DBDictionary.supportsMultipleNontransactionalResultSets = false. The name suggests that the problem should occur only while using auto-commit.&lt;/p&gt;</comment>
                            <comment id="12755523" author="milosz" created="Tue, 15 Sep 2009 16:05:21 +0100"  >&lt;p&gt;I am reopening since I am afraid that by unconditionally opening a new connection (thus a new transaction) we are unnecessarily increasing chances for deadlock and lowering transaction isolation level in a write intensive environments. See examples below, I have made them using command line SQL clients but JDBC connections usually work the same way:&lt;/p&gt;

&lt;p&gt;1. MySQL with REPEATABLE READ isolation (the default for MySQL) - lowering isolation.&lt;/p&gt;

&lt;p&gt;Without opening a new connection in SelectImpl.getCount:&lt;/p&gt;

&lt;p&gt;OPENJPA TX 1: select * from address where country=&apos;USA&apos;;&lt;br/&gt;
OK, returns 1 row.&lt;br/&gt;
OTHER TX 2: insert into address(id, country) values(60, &apos;USA&apos;);&lt;br/&gt;
OK.&lt;br/&gt;
OTHER TX 2: commit;&lt;br/&gt;
OK. (does not block in MySQL)&lt;br/&gt;
OPENJPA TX 1: select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from address where country=&apos;USA&apos;;&lt;br/&gt;
OK, returns 1 (thus consistent with result in TX 1)&lt;/p&gt;

&lt;p&gt;When opening a new connection in SelectImpl.getCount:&lt;/p&gt;

&lt;p&gt;OPENJPA TX 1: select * from address where country=&apos;USA&apos;;&lt;br/&gt;
OK, returns 1 row.&lt;br/&gt;
OTHER TX 2: insert into address(id, country) values(60, &apos;USA&apos;);&lt;br/&gt;
OK.&lt;br/&gt;
OTHER TX 2: commit;&lt;br/&gt;
OK. (does not block in MySQL)&lt;br/&gt;
OPENJPA TX 3: select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from address where country=&apos;USA&apos;;&lt;br/&gt;
OK, returns 2 (inconsistent with result in TX 1)&lt;/p&gt;


&lt;p&gt;2. DB2 with SERIALIZABLE isolation (maybe other databases as well) - possible deadlock.&lt;/p&gt;

&lt;p&gt;Without opening a new connection in SelectImpl.getCount:&lt;/p&gt;

&lt;p&gt;OPENJPA TX 1: select * from address where country=&apos;USA&apos;;&lt;br/&gt;
OK, returns 1 row.&lt;br/&gt;
OTHER TX 2: insert into address(id, country) values(60, &apos;USA&apos;);&lt;br/&gt;
Blocks until TX 1 commits.&lt;br/&gt;
OPENJPA TX 1: select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from address where country=&apos;USA&apos;;&lt;br/&gt;
OK, returns 1&lt;br/&gt;
OPENJPA TX 1: commit&lt;br/&gt;
OK&lt;br/&gt;
OTHER TX 2: commit&lt;br/&gt;
OK&lt;/p&gt;

&lt;p&gt;When opening a new connection in SelectImpl.getCount:&lt;/p&gt;

&lt;p&gt;OPENJPA TX 1: select * from address where country=&apos;USA&apos;;&lt;br/&gt;
OK, returns 1 row.&lt;br/&gt;
OTHER TX 2: insert into address(id, country) values(60, &apos;USA&apos;);&lt;br/&gt;
Blocks until TX 1 commits.&lt;br/&gt;
OPENJPA TX 3: select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from address where country=&apos;USA&apos;;&lt;br/&gt;
Blocks until TX 2 commits. Means deadlock because TX 1 and 3 are from the same OpenJPA thread.&lt;/p&gt;


&lt;p&gt;As you can see the problem boils down to the case when an external data modification occurs in between two OpenJPA transactions.&lt;/p&gt;

&lt;p&gt;What do yo think? Am I missing something?&lt;/p&gt;

&lt;p&gt;If I am correct, I suggest we try:&lt;br/&gt;
1. While in transaction, always use the same connection for SELECT COUNT. I expect databases handle that (needs some tests).&lt;/p&gt;

&lt;p&gt;2. While in autocommit, open a new connection but only for databases with DBDictionary.supportsMultipleNontransactionalResultSets = false.&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 12 Sep 2009 18:28:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161567</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt5kv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>204084</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>