<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:36:52 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-2139/OPENJPA-2139.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-2139] OpenJPA fails to recover from a broken database on startup</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-2139</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;The following scenario:&lt;/p&gt;

&lt;p&gt;1.) turn off the database&lt;br/&gt;
2.) perform a query against the database&lt;br/&gt;
3.) turn on the database&lt;br/&gt;
4.) try to re-run the query from 2.)&lt;/p&gt;

&lt;p&gt;In 4.) you will get the following Exception:&lt;/p&gt;

&lt;p&gt;openjpa-2.2.0-r422266:1244990 nonfatal user error&amp;gt; org.apache.openjpa.persistence.ArgumentException: An error occurred while parsing the query filter &quot;SELECT k FROM DbEnumKey AS k where k.type=:typ ORDER BY k.ordinal&quot;. Error message: The name &quot;DbEnumKey&quot; is not a recognized entity or identifier. Known entity names: []&lt;/p&gt;

&lt;p&gt;Basically the whole app is stale afterwards!&lt;/p&gt;

&lt;p&gt;Solution: caching the entities might only be done if a connection can be established.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12543669">OPENJPA-2139</key>
            <summary>OpenJPA fails to recover from a broken database on startup</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="struberg">Mark Struberg</assignee>
                                    <reporter username="struberg">Mark Struberg</reporter>
                        <labels>
                    </labels>
                <created>Wed, 22 Feb 2012 12:32:26 +0000</created>
                <updated>Sun, 5 Apr 2015 17:16:58 +0100</updated>
                                            <version>2.2.0</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13213572" author="struberg" created="Wed, 22 Feb 2012 12:40:42 +0000"  >&lt;p&gt;additional info: all recovers fine if the database once got successfully accessed 1 time and &lt;em&gt;then&lt;/em&gt; the db dies and will be restarted.&lt;/p&gt;</comment>
                            <comment id="13213680" author="struberg" created="Wed, 22 Feb 2012 15:05:28 +0000"  >&lt;p&gt;please review this patch!&lt;/p&gt;

&lt;p&gt;I found that I need to wait a bit (50ms) because going down to the connector would just trash them again. This is for sure not a perfect solution, if you have a better idea then please speak up!&lt;/p&gt;</comment>
                            <comment id="13213944" author="curtisr7" created="Wed, 22 Feb 2012 20:03:46 +0000"  >&lt;p&gt;Attaching a patch that fixes the root issue.&lt;/p&gt;</comment>
                            <comment id="13213960" author="curtisr7" created="Wed, 22 Feb 2012 20:12:26 +0000"  >&lt;p&gt;Background details : The runtime isn&apos;t able to determine which type of DB we&apos;re running against based off any of the connection properties so we need to make a connection to figure it out.&lt;/p&gt;

&lt;p&gt;The root problem is that when creating the first EM, in AbstractBrokerFactory we have this&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; block of code that gets a MDR instance, and the configures it as a class listener. As part of configuring the MDR, we get a reference to the DBDictionary&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;. While instantiating the dictionary, we need to connect to the DB to figure out which type to create. Instantiation of the dictionary results in an exception, which blows out of the AbstractBrokerFactory.makeReadOnly() method. Thus we never register the MDR as a register class listener, and thus the MDR never gets populated with metadata..&lt;/p&gt;

&lt;p&gt;To work around the problem, I modified the MDR so that we only will instantiate a DBDictionary when we actually use it. Mark tested this patch in his environment and it seemed to work fine.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;br/&gt;
            MetaDataRepository repos = _conf.getMetaDataRepositoryInstance();&lt;br/&gt;
            repos.setValidate(MetaDataRepository.VALIDATE_RUNTIME, true);&lt;br/&gt;
            repos.setResolve(MetaDataModes.MODE_MAPPING_INIT, true);&lt;br/&gt;
            PCRegistry.addRegisterClassListener(repos);&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; MappingRepository.endConfiguration()&lt;/p&gt;</comment>
                            <comment id="13214799" author="struberg" created="Thu, 23 Feb 2012 15:15:31 +0000"  >&lt;p&gt;I&apos;m not sure what I did different to yesterdays run, but the patch doesn&apos;t seem to solve the problem in all situations.&lt;/p&gt;

&lt;p&gt;If I start my webapp with an offline database and wait until the request dies down completely. Then I start the db and issue a 2nd request -&amp;gt; here I get the original error indicating that my aliases are empty.&lt;/p&gt;

&lt;p&gt;Rick, I fear I forgot to &apos;undeploy&apos; my own fix prior to testing your patch yesterday &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13214840" author="curtisr7" created="Thu, 23 Feb 2012 16:37:30 +0000"  >&lt;p&gt;Mark &amp;#8211; I was afraid that the patch might fail in a different area. Can you post a stack from when we try to create the first EM? I assume that we get an exception from some other method that AbstractBrokerFactory.makeReadOnly() calls.&lt;/p&gt;</comment>
                            <comment id="13216773" author="allee8285" created="Sun, 26 Feb 2012 16:01:19 +0000"  >&lt;p&gt;There is another twisted use case in the JEE environment.&lt;/p&gt;

&lt;p&gt;In the app server container, when the emf is created, it will try to create a transformer attaching to the pu. If the data source connection is still not available, OJ will throw&lt;/p&gt;

&lt;p&gt;    openjpa.Runtime: Warn: An error occurred while registering a ClassTransformer with.....&lt;/p&gt;

&lt;p&gt;and any entity loaded by this associated application classloader will NOT enhanced the entity. Eventually, this will yield the same ArgumentException.&lt;/p&gt;

&lt;p&gt;Albert Lee&lt;/p&gt;</comment>
                            <comment id="13216777" author="struberg" created="Sun, 26 Feb 2012 16:13:17 +0000"  >&lt;p&gt;That might be the case. In my scenario I&apos;m working with compile time enhancement.&lt;/p&gt;</comment>
                            <comment id="13217198" author="curtisr7" created="Mon, 27 Feb 2012 14:14:23 +0000"  >&lt;p&gt;Albert -&lt;/p&gt;

&lt;p&gt;In the case that you mentioned, do you know what/where the exception is that we encounter?&lt;/p&gt;</comment>
                            <comment id="13238926" author="jpaheath" created="Mon, 26 Mar 2012 23:41:40 +0100"  >&lt;p&gt;Hey Rick!  Let me try to answer the question you posed previously in response to Albert&apos;s comments.  If you look at PersistenceProviderImpl.createContainerEntityManagerFactory you can see we have this code:&lt;/p&gt;

&lt;p&gt;            try &lt;/p&gt;
{
                pui.addTransformer(new ClassTransformerImpl(cp, ctOpts,
                    pui.getNewTempClassLoader(), newConfigurationImpl()));
            }
&lt;p&gt; catch (Exception e) &lt;/p&gt;
{
                // fail gracefully
                transformerException = e;
            }

&lt;p&gt;Within the &apos;addTransformer&apos; call, we are doing a bunch of stuff which includes instantiating a &apos;ClassTransformerImpl&apos; (CTI).  You&apos;ll have to take a leap of faith a bit and trust me when I say that as part of instantiating the CTI, a call is eventually made to &apos;DBDictionaryFactory.newDBDictionary&apos;.  Within &apos;newDBDictionary&apos;, a connection to the DB is made.  If an exception is thrown when making the connection (e.g. DB is down), the exception flows all the way back to the try/catch in the above code block.  That means we never add a transformer......so later at runtime we&apos;d see the ArgumentException given the lack of transformer/enhancement registration.  Furthermore, as you can see in the catch block we attempt to &quot;fail gracefully&quot; which means to me in what I see in my env that there isn&apos;t much indication of the fact that we didn&apos;t register a transformer.  So the patch you added previously doesn&apos;t work in this case because it does nothing to handle the case where we go down the &apos;createContainerEntityManagerFactory&apos; path.  I&apos;m working on a patch which will &quot;eat&quot; any connection errors at the point &apos;DBDictionaryFactory.newDBDictionary&apos; is called (i.e. JDBCConfiguratoinImple.getDBDictionaryInstance)....the code will be gated by a system property of course.&lt;/p&gt;

&lt;p&gt;IMHO, it seems OpenJPA needs to take a long hard look at these DB up/down scenarios.  In what little testing has been down via this JIRA, we&apos;ve unearthed a few areas needing to be changed.  What other issues could be lurking as further testing is done?  That is, could we be opening a can of worms by fixing this limited scenario given OpenJPA doens&apos;t appear to do much/any testing in this area (one could think of a million DB up/down scenarios and timing windows)?  Anyway, I&apos;m always the pessimist.......  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Heath Thomann&lt;/p&gt;</comment>
                            <comment id="13249782" author="struberg" created="Mon, 9 Apr 2012 11:47:28 +0100"  >&lt;p&gt;I&apos;ve now committed a fix for the original issue. We now reset the _readOnly flag if we hit an Exception during initialisation. That way we will try again until the db is up again.&lt;/p&gt;

&lt;p&gt;This will &lt;em&gt;not&lt;/em&gt; yet fix the problem with dynamic enhancement! But since runtime enhancement is mostly considered problematic anyway atm, it will be good enough for most users.&lt;br/&gt;
Shouldn&apos;t we create an own Jira issue for the dynamic enhancement issue?&lt;/p&gt;</comment>
                            <comment id="13258396" author="jpaheath" created="Fri, 20 Apr 2012 18:34:33 +0100"  >&lt;p&gt;Will provide detailed comments about this patch shortly.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Heath&lt;/p&gt;</comment>
                            <comment id="13258402" author="jpaheath" created="Fri, 20 Apr 2012 18:36:56 +0100"  >&lt;p&gt;Hello Mark!  I worked with Albert and Rick on this issue and we came up with a slightly different change than yours but I think it is effectively the same idea.  Please review the patch I just uploaded, it is named &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-2139&quot; title=&quot;OpenJPA fails to recover from a broken database on startup&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-2139&quot;&gt;OPENJPA-2139&lt;/a&gt;-1.2.x.patch&apos;.  First, I used the &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-2139&quot; title=&quot;OpenJPA fails to recover from a broken database on startup&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-2139&quot;&gt;OPENJPA-2139&lt;/a&gt;.mdr.patch which Rick provided a while back.  This did not fix some of the issues Albert and I described in latter posts to this JIRA (i.e. registration of a transformer).  So our approach was to catch, and eat, the exception at the point we actually attempt to connect to the DB (as well as log a warning message)......specifically JDBCConfigurationImpl.getDBDictionaryInstance.  We took the approach that there is no need to allow a connection/SQLException to percolate up the call chain.....we figured it best to catch the exception, eat it, and warn the user of the connection issue.  In this way, and with Rick&apos;s previous patch, an attempt to connect to the DB can be made at a later time (when hopefully the DB is back up).  I noticed that you changed AbstractBrokerFactory.makeReadOnly.......this method eventually causes (indirectly) JDBCConfigurationImpl.getDBDictionaryInstance to be called....when the DB is down getDBDictionaryInstance will cause an exception to be thrown.  It appears the &apos;catch&apos; block you added to AbstractBrokerFactory.makeReadOnly will catch and re-throw this exception as well as reset some state.  With my fix, you will no longer receive an exception in some cases (i.e. for the DB connection case where we catch/eat the exception).  I would like you to try my patch in your testing environment to see if it fixes your issue.  At the very least I&apos;d like you to describe your scenario so we can understand why you made the changes you made.  Our fix has been test in a JEE environment whereas I believe you are in a JSE env, right?  I&apos;ve tested a few scenarios in my JEE server where I&apos;ve cycled the DB at various times and our fix handles these cases as we&apos;d expect.  Furthermore, our fix has been tested by an internal group (who uses our JEE server) which is performing some very rigorous DB fail over scenarios and our change fixes their issues.  So, I think our fix is necessary, but the remaining question is whether or not your fix is needed in addition to ours.  &lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Heath&lt;/p&gt;</comment>
                            <comment id="13258830" author="struberg" created="Sat, 21 Apr 2012 12:20:32 +0100"  >&lt;p&gt;Hi Heath!&lt;/p&gt;

&lt;p&gt;Txs for doing a review and provide additional work. I just came back from a conference and hope I can test your patch early next week. Just looked at your patch quickly but need to take more time to grok the details.&lt;/p&gt;

&lt;p&gt;Just to be sure that we aim into the same direction:&lt;/p&gt;

&lt;p&gt;a.) aborting the app in case a DB is not available is NOT an option. It is a standard case in big apps that the db is not always available. E.g on cluster failover (cold standby) the app needs to continue after the db is back up again.&lt;/p&gt;

&lt;p&gt;b.) there are quite a few different scenarios we need to take care&lt;br/&gt;
  1.) build-time enhancement&lt;br/&gt;
  2.) runtime enhancement&lt;br/&gt;
  3.) subclassing enhancement&lt;br/&gt;
  4.) configuration via PersistenceUnitInfo vs persistence.xml&lt;br/&gt;
   etc. Please add other testing scenarios where this could have an impact. In our app we use build-time enhancement.&lt;/p&gt;

&lt;p&gt;c.) I&apos;m not sure if connecting-for-dictionary-failed is practicable. It&apos;s imo not if you have to deal with multiple databases depending on the installation.&lt;/p&gt;

&lt;p&gt;d.) we must be careful to not introduce a chicken-egg problem &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13262675" author="jpaheath" created="Thu, 26 Apr 2012 16:37:24 +0100"  >&lt;p&gt;Hi Mark!  Just wanted to add a quick update here.  Rick reviewed my patch and yours (your committed changes to trunk that is).  He feels that your fix/commit is definitely necessary in addition to a &lt;b&gt;portion&lt;/b&gt; of the last patch I submitted.  The changes to MappingRepository in my previous patch are necessary.  However, he raised a very valid point that my eating of an exception in &apos;JDBCConfigurationImpl.getDBDictionaryInstance&apos; would allow a null DB instance to be returned where an exception used to be returned.......there are a lot of callers to JDBCConfigurationImpl.getDBDictionaryInstance throughout OpenJPA code and as such we can&apos;t be sure each caller accounts for a null DB instance to be returned.  However, when I test with your commit plus the changes to MappingRepository, it still does not allow us to register a transformer because as part of the registration, we go down the path to JDBCConfigurationImpl.getDBDictionaryInstance which yields an exception when the DB is down, thus cause the registration to not occur.  We have some ideas on a modified fix which will consist of following a similar pattern in MappingDefaultsImpl as was done in MappingRepository (i.e. delay getting a reference to DBDictionary).  I will work on a fix today and hopefully have an updated patch later today (the patch will include your changes).&lt;/p&gt;</comment>
                            <comment id="13263230" author="jpaheath" created="Fri, 27 Apr 2012 00:03:29 +0100"  >&lt;p&gt;Providing a second version of my previous patch.  We&apos;ve taken a slightly different approach in this version of the fix in that we will no longer eat an SQLException caused in &apos;JDBCConfigurationImpl.getDBDictionaryInstance&apos;.  Rather a similar pattern was followed in MappingDefaultsImpl as was done in MappingRepository (i.e. delay getting a reference to DBDictionary).&lt;/p&gt;</comment>
                            <comment id="13279739" author="struberg" created="Sun, 20 May 2012 13:55:26 +0100"  >&lt;p&gt;Hi Heath, did you apply the patch already? I&apos;m now finally back on working on this stuff again. Any updates?&lt;/p&gt;</comment>
                            <comment id="13279740" author="struberg" created="Sun, 20 May 2012 14:06:48 +0100"  >&lt;p&gt;PS: your IDE seems to add TABS! Please switch your editor to SPACES ONLY.&lt;/p&gt;

&lt;p&gt;It is generally a good idea to switch your IDE to &apos;show whitespaces&apos; for all Apache projects. Otherwise we will end up with a completely messed tabs/spaces mixture.&lt;/p&gt;</comment>
                            <comment id="13279741" author="struberg" created="Sun, 20 May 2012 14:09:49 +0100"  >&lt;p&gt;another note: &lt;br/&gt;
    public DBDictionary getDBDictionary() {&lt;br/&gt;
        if (dict == null) &lt;/p&gt;
{
            dict = ((JDBCConfiguration) conf).getDBDictionaryInstance();
        }
&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;do we need some synchronisation or DCL here? I&apos;ve not yet checked if this could happen concurrently. Anyone knows this?&lt;/p&gt;
</comment>
                            <comment id="13279744" author="struberg" created="Sun, 20 May 2012 14:18:49 +0100"  >&lt;p&gt;I tried to apply the patch manually, but it just doesn&apos;t fit. Against which branch did you do the changes? Please note that I did a quick commit removing some unused imports and fix a few JavaDocs on the MappingDefaultsImpl. But the patch also didn&apos;t apply before.&lt;/p&gt;</comment>
                            <comment id="13418197" author="struberg" created="Thu, 19 Jul 2012 11:06:11 +0100"  >&lt;p&gt;Heath, any update on this? &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12524781" name="OPENJPA-2139-1.2.x-v2.patch" size="12565" author="jpaheath" created="Fri, 27 Apr 2012 00:03:29 +0100"/>
                            <attachment id="12523524" name="OPENJPA-2139-1.2.x.patch" size="8489" author="jpaheath" created="Fri, 20 Apr 2012 18:34:32 +0100"/>
                            <attachment id="12515640" name="OPENJPA-2139.mdr.patch" size="4617" author="curtisr7" created="Wed, 22 Feb 2012 20:03:45 +0000"/>
                            <attachment id="12515594" name="OPENJPA-2139.patch" size="2984" author="struberg" created="Wed, 22 Feb 2012 15:05:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 22 Feb 2012 20:03:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>228908</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hz7pzz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>289182</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>