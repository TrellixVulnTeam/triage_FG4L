<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:43:40 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-130/OPENJPA-130.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-130] Streaming LOB support</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-130</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;BLOB and CLOB fields can only be mapped in their entirety in OpenJPA. It would be nice to support fields of type java.io.InputStream (for BLOBs) and java.io.Reader (for CLOBs).&lt;/p&gt;

&lt;p&gt;The usage pattern could look like so:&lt;/p&gt;

&lt;p&gt;@Entity&lt;br/&gt;
public class Employee {&lt;br/&gt;
    ...&lt;br/&gt;
    private InputStream photoStream;&lt;/p&gt;

&lt;p&gt;    public void setPhotoStream(InputStream in) &lt;/p&gt;
{
        photoStream = in;
    }

&lt;p&gt;    public InputStream getPhotoStream() &lt;/p&gt;
{
        return photoStream;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;So, when the user wants to provide a stream, she will set the InputStream field, and when the user wants to obtain a stream, she will use the field.&lt;/p&gt;

&lt;p&gt;The behavior of such an implementation would be a bit different than how other fields work, in that if the user set the stream and then consumed it within a single transaction, presumably no data would be written out to the database at commit time. But that is the nature of streams.&lt;/p&gt;

&lt;p&gt;(FTR, I think that I stole this idea from an email Craig Russell sent out years ago.)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12362233">OPENJPA-130</key>
            <summary>Streaming LOB support</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                                <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="plunchete">Ignacio Andreu</assignee>
                                    <reporter username="pcl">Patrick Linskey</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Feb 2007 19:26:44 +0000</created>
                <updated>Mon, 14 Jun 2010 21:35:58 +0100</updated>
                            <resolved>Mon, 12 May 2008 22:51:47 +0100</resolved>
                                                    <fixVersion>1.1.0</fixVersion>
                                    <component>datacache</component>
                    <component>jdbc</component>
                    <component>jpa</component>
                    <component>kernel</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12497601" author="pcl" created="Mon, 21 May 2007 22:59:38 +0100"  >&lt;p&gt;Ignacio Andreu will be working on this issue for the Google Summer of Code project. It would seem that JIRA only allows me to assign issues to committers, so I&apos;m assigning it to myself to keep it out of the unassigned queue.&lt;/p&gt;</comment>
                            <comment id="12513676" author="pcl" created="Wed, 18 Jul 2007 19:30:53 +0100"  >&lt;p&gt;Assigning to Ignacio, who is working on this as part of the Google Summer of Code internship program.&lt;/p&gt;</comment>
                            <comment id="12517268" author="plunchete" created="Thu, 2 Aug 2007 15:04:41 +0100"  >&lt;p&gt;Now is the time to decide what will be the best way to mark this fields. In my opinion we have two options, we can to use the @LOB annotation or to create a @Stream annotation. What do you think?&lt;/p&gt;</comment>
                            <comment id="12517328" author="clr" created="Thu, 2 Aug 2007 19:01:48 +0100"  >&lt;p&gt;I don&apos;t yet see the need to create another annotation. &lt;/p&gt;

&lt;p&gt;If you annotate an InputStream with @LOB then OpenJPA should be smart enough to figure it out.&lt;br/&gt;
@Entity&lt;br/&gt;
public class Employee &lt;/p&gt;
{
    ...
    @LOB @Column(name=&quot;PHOTO&quot;)
    private InputStream photoStream;
...
}

</comment>
                            <comment id="12517359" author="pcl" created="Thu, 2 Aug 2007 21:02:26 +0100"  >&lt;p&gt;My only concern with Craig&apos;s suggestion is compatibility if the JPA spec team decides to go a different route in a future version. If we use our own annotation, then we can maintain compatibility for it even in the face of spec changes.&lt;/p&gt;</comment>
                            <comment id="12526021" author="plunchete" created="Sun, 9 Sep 2007 20:00:19 +0100"  >&lt;p&gt;This patch was part of my Summer of Code work, all the tests work fine in MySQL, Oracle and SQL Server.&lt;/p&gt;

&lt;p&gt;Streams are mapped using @Persistent annotation.&lt;/p&gt;

&lt;p&gt;@Entity&lt;br/&gt;
public class Employee &lt;/p&gt;
{
    ...
    @Persistent
    private InputStream photoStream;
...
}</comment>
                            <comment id="12526066" author="pcl" created="Mon, 10 Sep 2007 07:16:03 +0100"  >&lt;p&gt;Great work, Ignacio! I checked in the patch (with a couple of minor whitespace tweaks).&lt;/p&gt;

&lt;p&gt;I&apos;m going to leave this issue open for right now; we need to document the new feature still, and this will help us track that work.&lt;/p&gt;</comment>
                            <comment id="12580926" author="plunchete" created="Thu, 20 Mar 2008 21:03:15 +0000"  >&lt;p&gt;This patch corrects some bugs and add new test cases.&lt;/p&gt;

&lt;p&gt;New test cases &amp;amp; fixed bugs:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testUpdateWithNull&lt;/li&gt;
	&lt;li&gt;testUpdateANullObjectWithoutNull&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Modified:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;blobBufferSize and clobBufferSize. I&apos;ve increased the buffer value.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;BTW, I&apos;m trying to add Streaming support to Derby, my approach is not finished yet, It loads the results from the database when I use the load() method but it fails when I try to load with a Query. Next week i will put here my approach.&lt;/p&gt;</comment>
                            <comment id="12580929" author="plunchete" created="Thu, 20 Mar 2008 21:13:48 +0000"  >&lt;p&gt;Sorry, my derby approach is success using the find() method&lt;/p&gt;</comment>
                            <comment id="12596192" author="plunchete" created="Mon, 12 May 2008 21:57:23 +0100"  >&lt;p&gt;This patch adds support for Streams in PostgreSQL and documentation about this issue.&lt;/p&gt;</comment>
                            <comment id="12596209" author="pcl" created="Mon, 12 May 2008 22:51:47 +0100"  >&lt;p&gt;Resolved with Ignacio&apos;s recent work. There is still an open issue regarding Postgres and database cleanup; this will be managed through a separate JIRA issue.&lt;/p&gt;</comment>
                            <comment id="12877937" author="faywang" created="Fri, 11 Jun 2010 20:43:58 +0100"  >&lt;p&gt;This is the steaming lob support for DB2.&lt;/p&gt;</comment>
                            <comment id="12878180" author="faywang" created="Sat, 12 Jun 2010 02:23:54 +0100"  >&lt;p&gt;The &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-130&quot; title=&quot;Streaming LOB support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-130&quot;&gt;&lt;del&gt;OPENJPA-130&lt;/del&gt;&lt;/a&gt;-DB2.patch provides streaming lob support for DB2. DB2 supports direct setBinary/CharacterStream call. This is unlike Oracle/Mysql, where an insert of empty stream is inserted first followed by an update of actual stream. The catch with DB2 is that for setIBinary/CharacterStream, the length is required for JDBC 3. When setBinaryStream is called, the length can be obtained by InputStream.available(). However, there is no API to get the length for Reader when setCharacterStream is called. In JDBC 4, this problem is resolved as setBinary/CharacterStream can be called without the length input parameter.  The patch attached works properly in the following conditions:&lt;br/&gt;
  (1) JDBC 3: setBinaryStream works fine, but setCharacterStream will not work as the length of available char in the reader can not be obtained. &lt;/p&gt;

&lt;p&gt;  (2) JDBC 4: setBinary/CharacterStream work fine.&lt;/p&gt;

&lt;p&gt;The test case org.apache.openjpa.jdbc.meta.strats.TestInputStreamLob and org.apache.openjpa.jdbc.meta.strats.TestReaderLob works fine when the above patch applies to the openjpa-trunk with JDBC 4.&lt;/p&gt;
</comment>
                            <comment id="12878291" author="milosz" created="Sat, 12 Jun 2010 18:40:41 +0100"  >&lt;p&gt;Hi Fay. This is an interesting addition. I have a few remarks.&lt;/p&gt;

&lt;p&gt;1. Please consider creating a new issue for this work. Then, when we create release notes for OpenJPA 2.1.0, it will be clear that the new feature is there.&lt;/p&gt;

&lt;p&gt;2. Small oversight:&lt;br/&gt;
+                    if (log.isTraceEnabled())&lt;br/&gt;
+                        log.error(ioe.toString(), ioe);&lt;/p&gt;

&lt;p&gt;Also, there are unwanted empty lines between comments and method bodies.&lt;/p&gt;

&lt;p&gt;3. Why are you doing the checks &quot;if (ob instanceof InputStream)&quot; and &quot;if (ob instanceof Reader)&quot;? If they are necessary, what other instances are possible to come as method parameters?&lt;/p&gt;

&lt;p&gt;4. It is my understanding that using InputStream.available() to determine the length is to make the best effort possible while with JDBC 3. However, because the method is used regardless of the JDBC version, I am afraid that in practice it will break the feature even for those using JDBC 4. The semantics of available() is that it will rather return the number of bytes untill the stream gets blocked instead of actual length of the stream. TestInputStreamLob works fine because it uses memory streams and available() returns the actual stream length but in a real world, users will rather use file or network streams and in such cases available() will not return the actual length but some smaller value.&lt;/p&gt;

&lt;p&gt;I would think of getting rid of using available() and limit the DB2 support to JDBC 4.&lt;/p&gt;

&lt;p&gt;Let me know if you need more clarification.&lt;/p&gt;
</comment>
                            <comment id="12878727" author="faywang" created="Mon, 14 Jun 2010 21:17:46 +0100"  >&lt;p&gt;It&apos;s not necessarily the length of the underlaying data, it&apos;s the amount of data that can be read without causing a resource to be blocked.  When using fully materialized lobs, this number is the length, but when using locators or progressive references, this number is the amount of data in the buffer. &lt;/p&gt;

&lt;p&gt;If the length is not known, it can be set to -1 in JDBC3.  (It&apos;s a JCC specific API).  Calling setCharacterStream(int, Reader) in JDBC 4 is the same as calling setCharacterStream(int, Reader, -1) in the JDBC 3 API.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12466929">OPENJPA-1699</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12378347" name="OPENJPA-130-2.patch" size="8745" author="plunchete" created="Thu, 20 Mar 2008 21:03:15 +0000"/>
                            <attachment id="12381908" name="OPENJPA-130-3.patch" size="25787" author="plunchete" created="Mon, 12 May 2008 21:57:23 +0100"/>
                            <attachment id="12447062" name="OPENJPA-130-DB2-2.patch" size="2322" author="faywang" created="Mon, 14 Jun 2010 21:17:46 +0100"/>
                            <attachment id="12446891" name="OPENJPA-130-DB2.patch" size="6724" author="faywang" created="Fri, 11 Jun 2010 20:43:58 +0100"/>
                            <attachment id="12365430" name="OPENJPA-130.patch" size="47014" author="plunchete" created="Sun, 9 Sep 2007 20:00:19 +0100"/>
                            <attachment id="12364180" name="OPENJPA-130.patch" size="36791" author="plunchete" created="Mon, 20 Aug 2007 20:19:57 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Aug 2007 14:04:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160465</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysptj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>201531</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>