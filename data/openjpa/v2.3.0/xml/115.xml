<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:45:37 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-115/OPENJPA-115.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-115] Bottleneck(s) with using OpenJPA in a Container-managed environment</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-115</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Running some benchmarks against OpenJPA using the Sun Java System (SunOne) application server. Under load, we&apos;re not able to push the cpu to 100%. The culprit seems to be the lock and synchronization processing within AbstractBrokerFactory.newBroker(..). According to sections 5.9.1 and 5.9.2 in the JPA specification, it looks like OpenJPA is attempting to do too much management of the created EntityManagers. Within a Container-managed environment, the Container takes care of the lifecycle of the EntityManagers. So, there does not seem to be a need to do the findBroker(..) invocation, nor is there a need to keep track of the created EntityManagers (_brokers) so that they can be closed when the Factory is closed. &lt;/p&gt;

&lt;p&gt;Once we have verified these changes, there may be others that are needed. But, we have to get by this bottleneck first before going to the next layer... &lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</description>
                <environment></environment>
        <key id="12361497">OPENJPA-115</key>
            <summary>Bottleneck(s) with using OpenJPA in a Container-managed environment</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kwsutter">Kevin Sutter</assignee>
                                    <reporter username="kwsutter">Kevin Sutter</reporter>
                        <labels>
                    </labels>
                <created>Mon, 29 Jan 2007 19:20:46 +0000</created>
                <updated>Tue, 31 Jul 2007 20:00:18 +0100</updated>
                            <resolved>Thu, 1 Feb 2007 22:57:42 +0000</resolved>
                                                    <fixVersion>0.9.7</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12468397" author="pcl" created="Mon, 29 Jan 2007 20:11:51 +0000"  >&lt;p&gt;From what I can tell, the locking is needed to guard the _brokers collection. (It is also guarding the _transactional collection, but findExisting is always false in the OpenJPA codebase, so that code is never used in OpenJPA.) In IMO, the guarding is overly-granular at best, and unneeded at worst.&lt;/p&gt;

&lt;p&gt;The _brokers collection provides us with a means to ensure that when we close a BrokerFactory, all open Brokers are closed along with it. Additionally, we use a weak reference map here, so we don&apos;t need to maintain the _brokers collection during Broker.close().&lt;/p&gt;

&lt;p&gt;So, we have a number of options:&lt;/p&gt;

&lt;p&gt;1. move the locking logic to be just around the code that maintains the _brokers collection&lt;/p&gt;

&lt;p&gt;2. implement a concurrent Collection class that uses weak references, and eliminate all locking&lt;/p&gt;

&lt;p&gt;3. create a configuration option (openjpa.CloseBrokersOnBrokerFactoryClose or something) that controls whether or not OpenJPA tracks open brokers. This would allow default behavior to be pro-active about cleanup, but also allow containers (which are presumably doing a good job of resource clean-up) to bypass the overhead.&lt;/p&gt;</comment>
                            <comment id="12468408" author="clr" created="Mon, 29 Jan 2007 21:04:27 +0000"  >&lt;p&gt;Kevin opined: Within a Container-managed environment, the Container takes care of the lifecycle of the EntityManagers. &lt;/p&gt;

&lt;p&gt;I believe that this applies only to injected EntityManagers, not to those created by the user explicitly via EMF.createEntityManager. So there is still some cleanup needed to guarantee proper resource deallocation when the EMF is closed.&lt;/p&gt;

&lt;p&gt;Patrick offered: implement a concurrent Collection class that uses weak references, and eliminate all locking&lt;/p&gt;

&lt;p&gt;I believe that this is an optimal solution. Concurrent Collections should have almost zero locking in most containers.&lt;/p&gt;</comment>
                            <comment id="12468429" author="pcl" created="Mon, 29 Jan 2007 22:21:45 +0000"  >&lt;p&gt;Recall that we do have a 1.4-compatible concurrent collection at org.apache.openjpa.lib.util.concurrent.ConcurrentHashSet. However, to my knowledge, that impl uses hard references.&lt;/p&gt;</comment>
                            <comment id="12468616" author="kwsutter" created="Tue, 30 Jan 2007 13:53:23 +0000"  >&lt;p&gt;Thanks, Patrick and Craig.  I did some looking in lib and found that we also have a ConcurrentReferenceHashSet.  So, I have modified _brokers accordingly and am waiting for our test results.  I have also removed the explicit lock/unlock invocations.  As Patrick pointed out, the findBroker() is never called since findExisting is always false for OpenJPA, thus the other synch block shouldn&apos;t come into play.  Hopefully, with the weak references in ConcurrentReferenceHashSet _brokers, this should help with the blocking and broker cleanup.  Our original experimentation showed that even with the weak references in ReferenceHashSet, we still bogged down during the cleanup of the _brokers collection.  But, maybe there&apos;s a problem with SunOne where they are not properly closing the EntityManagers.  I&apos;ll post back when we get the test results.&lt;/p&gt;</comment>
                            <comment id="12468709" author="pcl" created="Tue, 30 Jan 2007 17:47:43 +0000"  >&lt;p&gt;&amp;gt; Our original experimentation showed that even with the weak references &lt;br/&gt;
&amp;gt; in ReferenceHashSet, we still bogged down during the cleanup of the &lt;br/&gt;
&amp;gt; _brokers collection.&lt;/p&gt;

&lt;p&gt;But that should only be happening when the EMF is closed, right? Presumably, that corresponds to appserver shutdown / application undeploy. Is your test measuring that part of the application lifecycle?&lt;/p&gt;</comment>
                            <comment id="12469598" author="kwsutter" created="Thu, 1 Feb 2007 22:22:00 +0000"  >&lt;p&gt;I&apos;m going to go ahead with the proposed changes to remove the explicit lock/unlock invocations, and change the _brokers definition to use ConcurrentReferenceHashSet with weak references.  The problem at shutdown was with the EMF.close processing.  It is attempting to close any outstanding EM&apos;s that had not been closed.  But, as it was iterating through this list, one of the EM instances became null and caused an NPE.  Not sure if this is due to the weak references being GC&apos;d or it indicates a possible problem with the underlying Collections MapBackedSet or something else, but a simple null check gets around this problem.&lt;/p&gt;

&lt;p&gt;With these changes, the initial bottleneck with running OpenJPA in a server environment has been resolved.  We are still pursuing other performance concerns, but we&apos;ll open new JIRA reports when we get something more concrete.&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</comment>
                            <comment id="12469601" author="pcl" created="Thu, 1 Feb 2007 22:35:41 +0000"  >&lt;p&gt;The null problem is probably due to references being garbage collected &amp;#8211; this is a typical side-effect of weak reference collection types. The improved concurrency is typically worth the extra difficulty of checking for nulls, though.&lt;/p&gt;</comment>
                            <comment id="12469604" author="clr" created="Thu, 1 Feb 2007 22:46:06 +0000"  >&lt;p&gt;Yes, null checking is an expected requirement when dealing with weak references. If you can get a strong reference in a cleanup routine then it&apos;s ok to use it, because the fact that you have a strong reference will prevent garbage collection. &lt;/p&gt;

&lt;p&gt;If you get null from your weak reference, then the garbage collector has already done its job and by definition there can be nothing left for your routine to clean up.&lt;/p&gt;</comment>
                            <comment id="12469606" author="kwsutter" created="Thu, 1 Feb 2007 22:57:42 +0000"  >&lt;p&gt;Changes committed to SVN.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                            <subtask id="12362351">OPENJPA-138</subtask>
                            <subtask id="12362606">OPENJPA-141</subtask>
                            <subtask id="12363269">OPENJPA-156</subtask>
                            <subtask id="12363424">OPENJPA-160</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 29 Jan 2007 20:11:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160452</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysqvj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>201702</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>