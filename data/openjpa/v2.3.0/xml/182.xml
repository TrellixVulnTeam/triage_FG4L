<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:39:22 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-182/OPENJPA-182.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-182] db2 update lock syntax  WITH &lt;isolation&gt; USE AND KEEP UPDATE LOCKS</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-182</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;A while back we changed the syntax of update locking from FOR UPDATE OF  to  WITH RS USE AND KEEP UPDATE LOCKS.   Additional changes are required because &lt;br/&gt;
1.  if isolation=serializable is configured, then the syntax should be  WITH RR USE AND KEEP UDPATE LOCKS&lt;br/&gt;
2.  when using DB2/400 on iSeries machines, the syntax is WITH RS USE AND KEEP EXCLUSIVE LOCKS  or WITH RR USE AND KEEP EXCLUSIVE LOCKS because DB2/400 only supports read or exclusive locks. &lt;br/&gt;
3.  DB2 supports both a FETCH FIRST  ROWS and update LOCKS clauses.&lt;/p&gt;

&lt;p&gt;So we change supportsLockingWithSelectRange = true in the AbstractDB2Dictionary class and change the DB2Dictionary to append the correct LOCKS syntax depending on vendor, release and isolation level.&lt;/p&gt;</description>
                <environment>db2 database driver for zOS, AS400, Unix, Windows, Linux</environment>
        <key id="12365823">OPENJPA-182</key>
            <summary>db2 update lock syntax  WITH &lt;isolation&gt; USE AND KEEP UPDATE LOCKS</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="wisneskid">David Wisneski</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Mar 2007 18:22:26 +0100</created>
                <updated>Tue, 9 Mar 2010 18:32:32 +0000</updated>
                            <resolved>Sat, 7 Apr 2007 00:54:17 +0100</resolved>
                                                    <fixVersion>0.9.7</fixVersion>
                                    <component>jdbc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12485005" author="ritika" created="Wed, 28 Mar 2007 22:58:19 +0100"  >&lt;p&gt;here is a patch for this feature&lt;/p&gt;</comment>
                            <comment id="12485103" author="pcl" created="Thu, 29 Mar 2007 09:15:21 +0100"  >&lt;p&gt;Wow... that&apos;s a lot more DB2 locking knowledge than I&apos;ve ever seen in one place. Neat.&lt;/p&gt;

&lt;p&gt;Some comments on the patch:&lt;/p&gt;

&lt;p&gt;1. How does the openjpa.hint.updateClause hint differ from the value of the forUpdate flag passed in to the DBDictionary call? It looks like the existing OpenJPA per-transaction read / write lock level configuration could be used instead.&lt;/p&gt;

&lt;p&gt;2. Is openjpa.hint.isolationLevel really a hint, or more of a rule? Again, I have a hunch that maybe we could do something with the read / write lock levels, or maybe some other means of controlling isolation level. In any event, it seems like isolation level isn&apos;t really a hint, but rather is more of a rule.&lt;/p&gt;

&lt;p&gt;3. You introduced a number of public boolean fields for determining what type of DB2 instance is being used. Based on code inspection, it looks like you expect that it should always be possible to automatically determine the type; maybe these should be private fields instead? We only have public fields in DBDictionaries for user-configurable settings. Also, since it looks like only one of the booleans can meaningfully be true, I&apos;d rather see a single private db2ServerType field that will be set to one of several symbolic constant values. This will let you replace the if-else block with a switch block if you prefer that sort of thing, also.&lt;/p&gt;</comment>
                            <comment id="12485312" author="ritika" created="Thu, 29 Mar 2007 20:20:24 +0100"  >&lt;p&gt;1. The updateFlag is set to true when the JPA query is running in pessimistic mode.Where as with hint even when u are in optimistic mode you can get the update flags.This way user can use the standard JPA api setHint and get the lock clause.Where as in the other case they need to use OpenJPA specific api.Besides hint is per query basis.We also needed the hints for Static SQL and Named Queries.&lt;/p&gt;

&lt;p&gt;2. I do not understand what u mean by rule versus hint.Isolation level hint tells us whther to add WITH RR or WITH RS.And again this is per query basis where as the isolation hint through the persistence.xml is to broad applying to all the entities.Then again we need the hints for NamedQuery and Static SQL.&lt;/p&gt;

&lt;p&gt;3. Agreed&lt;/p&gt;</comment>
                            <comment id="12486811" author="pcl" created="Thu, 5 Apr 2007 00:49:01 +0100"  >&lt;p&gt;For the sake of discussion, I&apos;ve attached an alternate patch that uses a new JDBCFetchPlan.setIsolationLevel() instead of a hint for isolation level, and uses JDBCFetchConfiguration.getReadLockLevel() to determine whether or not to do a SELECT ... FOR UPDATE. &lt;/p&gt;

&lt;p&gt;If the read lock level is set to LockLevels.LEVEL_WRITE, then the FOR UPDATE is included; if the read lock level is set to LockLevels.LEVEL_READ, then no FOR UPDATE is used. If the read lock level is LockLevels.LEVEL_NONE, then the default behavior is used. (This is possibly not the best use of LEVEL_NONE &amp;#8211; I&apos;m not sure if LEVEL_NONE means &apos;default&apos; or something else. But for the purposes of demonstration, it seemed expedient to use it. Adding a new LEVEL_DEFAULT constant might make more sense.)&lt;/p&gt;

&lt;p&gt;Also, I directly reused the java.sql.Connection constants, which is possibly non-ideal; we might want to discuss making our own constants. Or not.&lt;/p&gt;

&lt;p&gt;So, in this model, if there were a test case for this stuff, I would have changed the test case to do:&lt;/p&gt;

&lt;p&gt;Query q = em.createQuery(...);&lt;br/&gt;
JDBCFetchPlan plan = (JDBCFetchPlan) ((OpenJPAQuery) query).getFetchPlan();&lt;br/&gt;
plan.setIsolationLevel(Connection.TRANSACTION_SERIALIZABLE);&lt;br/&gt;
plan.setReadLockMode(LockModeType.WRITE); // force a FOR UPDATE&lt;br/&gt;
List l = q.getResultList();&lt;/p&gt;

&lt;p&gt;Note also that this model allows the isolation level and read lock mode to be configured on the EM itself, for use in find() calls and relationship lookups, and as the default settings for the fetch plans of queries created from the EM.&lt;/p&gt;

&lt;p&gt;Finally, I replicated the logic in DB2Dictionary, but I noticed that sometimes the logic checked for &quot;serializable&quot; and sometimes it checked for &quot;read-uncommitted&quot;. I preserved these checks, but was this intentional? I&apos;m not all that clear about what the optimizations are, so just wanted to ensure that that wasn&apos;t a typo.&lt;/p&gt;</comment>
                            <comment id="12486812" author="clr" created="Thu, 5 Apr 2007 00:59:15 +0100"  >&lt;p&gt;A use-case for the isolation level is to support different locking semantics for different classes and possibly for different queries. To use Patrick&apos;s patch would I need to use a different fetch plan before issuing a find or a query and then set it back after that method call? Or can I specify an isolation level in the FetchConfiguration per class?&lt;/p&gt;</comment>
                            <comment id="12486819" author="pcl" created="Thu, 5 Apr 2007 01:33:29 +0100"  >&lt;p&gt;In the hint-based approach, you could set the hints on a particular query.&lt;/p&gt;

&lt;p&gt;In my approach, you could configure the FetchPlan for a particular query (get the Query&apos;s fetch plan), or for a particular entity manager (get the EM&apos;s fetch plan). To do different fetch plans for different queries, you&apos;d just set the different query fetch plans differently.&lt;/p&gt;

&lt;p&gt;Query fetch plans are a copy-on-write semantic &amp;#8211; they start off just delegating through to the EM&apos;s fetch plan, and if you make changes, then they immediately make a copy of the EM&apos;s fetch plan, and remain isolated from the EM&apos;s fetch plan from then on out.&lt;/p&gt;

&lt;p&gt;If you wanted to do different isolation levels for different find() calls or different relationship traversals, in my impl, you&apos;d need to set the EM&apos;s fetch plan, do the work, then set it back. In the hint-based impl, you would not be able to do any configuration for find() or relationship traversals.&lt;/p&gt;</comment>
                            <comment id="12486821" author="pcl" created="Thu, 5 Apr 2007 01:43:46 +0100"  >&lt;p&gt;It&apos;s probably worth noting that everything in the FetchPlan is configurable via the Query.setHint() APIs. My earlier theoretical test case would become:&lt;/p&gt;

&lt;p&gt;Query q = em.createQuery(...);&lt;br/&gt;
q.setHint(&quot;openjpa.FetchPlan.IsolationLevel&quot;, Connection.TRANSACTION_SERIALIZABLE);&lt;br/&gt;
q.setHint(&quot;openjpa.FetchPlan.ReadLockMode&quot;, LockModeType.WRITE);&lt;br/&gt;
List l = q.getResultList(); &lt;/p&gt;

&lt;p&gt;In other words, if we use the patch that I attached (or something like it), we will end up with strong typing, API alignment with similar concepts, and dynamic accessibility both in terms of Query.setHint() and @QueryHints annotations / query-hint XML.&lt;/p&gt;</comment>
                            <comment id="12486987" author="awhite" created="Thu, 5 Apr 2007 15:45:28 +0100"  >&lt;p&gt;What is setting the isolation level this way actually doing?  For anything other than DB2 right now, it looks like it doesn&apos;t do anything.  And even for DB2, it&apos;s unclear to me exactly what the isolation level hint is doing, and why the information can&apos;t be gleaned from the global setting or the connection.  It seems very misleading to me to have a setIsolationLevel API (or generic &quot;IsolationLevel&quot; hint) that doesn&apos;t actually change the connection&apos;s isolation level.&lt;/p&gt;

&lt;p&gt;If we can determine that this API is actually useful for more than DB2, and if we can name it appropriately for what it actually does, then I like Patrick&apos;s proposal of a FetchPlan API.  The fact that all FetchPlan properties can be expressed as hints should make everyone happy.  But if this is just a DB2 thing, then we should rename the hint to have a DB2-specific name and be done with it IMO.&lt;/p&gt;</comment>
                            <comment id="12486997" author="clr" created="Thu, 5 Apr 2007 16:09:07 +0100"  >&lt;p&gt;Hopefully, this will be useful for applications where there are &quot;hot&quot; tables that require pessimistic locking even though the rest of the application does better with optimistic. Take the example of an Order/OrderLine where there are lots of updates of the Order and/or associated OrderLine. If several threads get the same Order, they will ultimately conflict and waste time. If the query to retrieve the Order is marked as pessimistic (WRITE) then these threads will serialize and all of their work will complete.&lt;/p&gt;</comment>
                            <comment id="12487000" author="awhite" created="Thu, 5 Apr 2007 16:11:49 +0100"  >&lt;p&gt;&amp;gt; Hopefully, this will be useful for applications where there are &quot;hot&quot; tables that require pessimistic locking even though the rest of the application does better with optimistic.&lt;/p&gt;

&lt;p&gt;That&apos;s what our lock levels and lock APIs are for.  I&apos;m still not clear on what this is adding to the mix for most DBs.&lt;/p&gt;</comment>
                            <comment id="12487046" author="pcl" created="Thu, 5 Apr 2007 17:34:36 +0100"  >&lt;p&gt;&amp;gt; &amp;gt; Hopefully, this will be useful for applications where there are &quot;hot&quot; tables &lt;br/&gt;
&amp;gt; &amp;gt; that require pessimistic locking even though the rest of the application &lt;br/&gt;
&amp;gt; &amp;gt; does better with optimistic.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; That&apos;s what our lock levels and lock APIs are for. I&apos;m still not clear on what this is &lt;br/&gt;
&amp;gt; adding to the mix for most DBs.&lt;/p&gt;

&lt;p&gt;Not really &amp;#8211; the lock levels allow the user to configure how locking should happen, not what the isolation level should be for the locks.&lt;/p&gt;

&lt;p&gt;I don&apos;t know about what levels of support non-DB2 databases have for per-query isolation level configuration. Does anyone have any experience with this in other databases?&lt;/p&gt;

&lt;p&gt;Oh, and regardless, we should change the base DBDictionary to throw an exception if this FetchPlan setting is set but not serviceable.&lt;/p&gt;

&lt;p&gt;One thing that we should test: I&apos;m not convinced that the lock level override in the DB2Dictionary code is necessary. It&apos;s possible that the LockManager will already take into account the current JDBCFetchConfiguration&apos;s lock level settings when specifying the forUpdate setting for the toSelect() clause. Some test cases will make it easy to figure out the answer to this question.&lt;/p&gt;</comment>
                            <comment id="12487082" author="clr" created="Thu, 5 Apr 2007 20:39:48 +0100"  >&lt;p&gt;I know that Oracle allows you to add a FOR UPDATE clause to a query, and this affects the results of that query. In Sun appserver CMP we use this to set exclusive locks on rows where we want pessimistic locking behavior just for certain tables.&lt;/p&gt;</comment>
                            <comment id="12487085" author="awhite" created="Thu, 5 Apr 2007 20:44:36 +0100"  >&lt;p&gt;&amp;gt;  I know that Oracle allows you to add a FOR UPDATE clause to a query, and this affects the results of that query. In Sun appserver CMP we use this to set exclusive locks on rows where we want pessimistic locking behavior just for certain tables.&lt;/p&gt;

&lt;p&gt;Again, this is exactly what our existing lock levels and APIs do.  &lt;/p&gt;</comment>
                            <comment id="12487086" author="pcl" created="Thu, 5 Apr 2007 20:55:15 +0100"  >&lt;p&gt;&amp;gt; &amp;gt; I know that Oracle allows you to add a FOR UPDATE clause &lt;br/&gt;
&amp;gt; &amp;gt; to a query, and this affects the results of that query. In Sun &lt;br/&gt;
&amp;gt; &amp;gt; appserver CMP we use this to set exclusive locks on rows &lt;br/&gt;
&amp;gt; &amp;gt; where we want pessimistic locking behavior just for certain tables.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Again, this is exactly what our existing lock levels and APIs do.&lt;/p&gt;

&lt;p&gt;The current patches in this issue encompass two separate bits of functionality:&lt;/p&gt;

&lt;p&gt;1. an update-override setting. (In the context of my patch, I&apos;m not convinced that this is necessary, since I suspect that the code that calls toSelect() might set the forUpdate boolean based on the values in the JDBCFetchConfiguration anyways.)&lt;/p&gt;

&lt;p&gt;2. an isolation-override setting.&lt;/p&gt;

&lt;p&gt;Currently, this patch implements all of this only in the DB2Dictionary. As of right now, the first feature is something that is useful for all sorts of databases, via syntax like Oracle&apos;s SELECT ... FOR UPDATE. However, we only know how to implement the second feature for DB2, and not for any other database. In Oracle, &quot;ALTER SESSION&quot; can be used to change the isolation level of a given session, but I&apos;m not sure of the semantics of this operation. I believe that Abe&apos;s question is: Do other databases (Sybase? Derby?) also have semantics for changing the isolation level of a particular query?&lt;/p&gt;</comment>
                            <comment id="12487098" author="mikedd" created="Thu, 5 Apr 2007 21:50:21 +0100"  >&lt;p&gt;I have no practical experience with Sybase, but I did find this in their TransactSQL user&apos;s guide :&lt;/p&gt;

&lt;p&gt;&quot;Changing the isolation level for a query&lt;/p&gt;

&lt;p&gt;You can change the isolation level for a query by using the at isolation clause with the select or readtext statements. The at isolation clause supports isolation levels 0, 1, and 3. It does not support isolation level 2. The read uncommitted, read committed, and serializable options of at isolation represent isolation levels as listed below:&lt;/p&gt;

&lt;p&gt;at isolation option     Isolation level&lt;br/&gt;
read uncommited      0&lt;br/&gt;
read committed         1&lt;br/&gt;
serializable                3&lt;/p&gt;

&lt;p&gt;For example, the following two statements query the same table at isolation levels 0 and 3, respectively:&lt;/p&gt;

&lt;p&gt;select *&lt;br/&gt;
from titles&lt;br/&gt;
at isolation read uncommitted&lt;/p&gt;

&lt;p&gt;select *&lt;br/&gt;
from titles&lt;br/&gt;
at isolation serializable&quot;&lt;/p&gt;

&lt;p&gt;There&apos;s more information online here: &lt;a href=&quot;http://manuals.sybase.com/onlinebooks/group-as/asg1250e/sqlug/@Generic__BookTextView/53911;hf=0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://manuals.sybase.com/onlinebooks/group-as/asg1250e/sqlug/@Generic__BookTextView/53911;hf=0&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12487099" author="pcl" created="Thu, 5 Apr 2007 22:02:57 +0100"  >&lt;p&gt;Between Ritika&apos;s SQLServer email on the dev list and Mike&apos;s Sybase research, it sounds like this feature is supported by enough databases that I think it&apos;s useful to expose as an API, rather than just a DB2-specific hint.&lt;/p&gt;</comment>
                            <comment id="12487100" author="ritika" created="Thu, 5 Apr 2007 22:06:02 +0100"  >&lt;p&gt;Here is a jar containing the 2 entities on whcih I run my testcases.&lt;/p&gt;

&lt;p&gt;em.getTransaction().begin()&lt;br/&gt;
Query qryA = em.createQuery(&quot;select d from DeptBean2 d where d.no = 1&quot;);&lt;br/&gt;
qryA.setHint(&quot;openjpa.hint.updateClause&quot;,true);&lt;br/&gt;
qryA.setHint(&quot;openjpa.hint.isolationLevel&quot;, &quot;serializable&quot;);&lt;br/&gt;
List rsA = qryA.getResultList();&lt;/p&gt;

&lt;p&gt;The SQL Output looks like&lt;/p&gt;

&lt;p&gt;13109  dwtest  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 1094730048, conn 1593466618&amp;gt; executing prepstmnt 694036830 SELECT t0.no, t1.empid, t2.no, t2.mgr_empid, t2.cdname, t1.ceemp_ts, t1.cehireDate, t1.ceismanager, t1.cename, t1.cesalary, t0.cdname FROM deptab2 t0 LEFT OUTER JOIN emptab2 t1 ON t0.mgr_empid = t1.empid LEFT OUTER JOIN deptab2 t2 ON t1.dept_no = t2.no WHERE (CAST(t0.no AS BIGINT) = CAST(? AS BIGINT))  WITH RR USE AND KEEP UPDATE LOCKS  &lt;span class=&quot;error&quot;&gt;&amp;#91;params=(long) 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
13119  dwtest  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 1094730048, conn 1593466618&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;10 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
27420  dwtest  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 1094730048, conn 1593466618&amp;gt; executing prepstmnt 2102295886 SELECT t0.empid, t1.no, t2.empid, t2.dept_no, t2.ceemp_ts, t2.cehireDate, t2.ceismanager, t2.cename, t2.cesalary, t1.cdname, t0.ceemp_ts, t0.cehireDate, t0.ceismanager, t0.cename, t0.cesalary FROM emptab2 t0 LEFT OUTER JOIN deptab2 t1 ON t0.dept_no = t1.no LEFT OUTER JOIN emptab2 t2 ON t1.mgr_empid = t2.empid WHERE t0.dept_no = ?  WITH RR USE AND KEEP UPDATE LOCKS  &lt;span class=&quot;error&quot;&gt;&amp;#91;params=(int) 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
27430  dwtest  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 1094730048, conn 1593466618&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;10 ms&amp;#93;&lt;/span&gt; spent&lt;/p&gt;

&lt;p&gt; Query qryB = em.createQuery(&quot;select e from EmpBean2 e where e.empid = 1&quot;);&lt;br/&gt;
  qryB.setHint(&quot;openjpa.hint.updateClause&quot;,true);&lt;br/&gt;
   qryB.setHint(&quot;openjpa.hint.isolationLevel&quot;, &quot;read-uncommitted&quot;);&lt;br/&gt;
    List rsB = qryB.getResultList();&lt;/p&gt;

&lt;p&gt;The SQL Output looks like&lt;/p&gt;


&lt;p&gt;47969  dwtest  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 1094730048, conn 1593466618&amp;gt; executing prepstmnt 1530944320 SELECT t0.empid, t1.no, t2.empid, t2.dept_no, t2.ceemp_ts, t2.cehireDate, t2.ceismanager, t2.cename, t2.cesalary, t1.cdname, t0.ceemp_ts, t0.cehireDate, t0.ceismanager, t0.cename, t0.cesalary FROM emptab2 t0 LEFT OUTER JOIN deptab2 t1 ON t0.dept_no = t1.no LEFT OUTER JOIN emptab2 t2 ON t1.mgr_empid = t2.empid WHERE (CAST(t0.empid AS BIGINT) = CAST(? AS BIGINT))  WITH RS USE AND KEEP UPDATE LOCKS  &lt;span class=&quot;error&quot;&gt;&amp;#91;params=(long) 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
47969  dwtest  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 1094730048, conn 1593466618&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;0 ms&amp;#93;&lt;/span&gt; spent&lt;/p&gt;

&lt;p&gt;Query qryC = em.createQuery(&quot;select d from DeptBean2 d where d.no = 1&quot;);&lt;br/&gt;
 DeptBean2 deptC  = (DeptBean2)qryC.getSingleResult();&lt;/p&gt;

&lt;p&gt;The SQL Out put is &lt;/p&gt;

&lt;p&gt;72695  dwtest  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 1094730048, conn 1593466618&amp;gt; executing prepstmnt 742009914 SELECT t0.no, t1.empid, t2.no, t2.mgr_empid, t2.cdname, t1.ceemp_ts, t1.cehireDate, t1.ceismanager, t1.cename, t1.cesalary, t0.cdname FROM deptab2 t0 LEFT OUTER JOIN emptab2 t1 ON t0.mgr_empid = t1.empid LEFT OUTER JOIN deptab2 t2 ON t1.dept_no = t2.no WHERE (CAST(t0.no AS BIGINT) = CAST(? AS BIGINT))  FOR READ ONLY  optimize for 1 row &lt;span class=&quot;error&quot;&gt;&amp;#91;params=(long) 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
72695  dwtest  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 1094730048, conn 1593466618&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;0 ms&amp;#93;&lt;/span&gt; spent&lt;/p&gt;

&lt;p&gt;In my persistence.xml I  had the following properties&lt;/p&gt;

&lt;p&gt;  &amp;lt;property name=&quot;openjpa.LockManager&quot; value=&quot;pessimistic&quot; /&amp;gt; &lt;br/&gt;
&amp;lt;property name=&quot;openjpa.jdbc.TransactionIsolation&quot; value=&quot;read-committed&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;Essentially if  we are running against DB2 8.2 or Later then if update lock is true then for all the isolation levels other than &quot;serializable&quot;  WITH RS USE AND KEEP UPDATE LOCKS clause is appended to the query.In case of &quot;serializable&quot; isolation level &quot;WITH RR USE AND KEEP UPDATE LOCK&quot; is appended.&lt;/p&gt;

&lt;p&gt;If the updateLock is false then FOR READ ONLY clause is appended to all queries.&lt;/p&gt;

</comment>
                            <comment id="12487312" author="pcl" created="Fri, 6 Apr 2007 19:45:32 +0100"  >&lt;p&gt;Remove forUpdate from DBDictionary.toOperation()&apos;s signature; use a null check on forUpdateClause instead.&lt;/p&gt;</comment>
                            <comment id="12487363" author="pcl" created="Sat, 7 Apr 2007 00:54:17 +0100"  >&lt;p&gt;I think that, aside from documentation and DB2 test cases and impls for other data stores, we can put this issue to rest.&lt;/p&gt;</comment>
                            <comment id="12489552" author="ritika" created="Tue, 17 Apr 2007 22:43:52 +0100"  >&lt;p&gt; we just discovered that there is a problem with this fix.The problem is that the FOR READ ONLY flag is getting generated for subselects as well.&lt;/p&gt;

&lt;p&gt;Basically for DB2 if forUpdate was false we append FOR READ ONLY we need another check to see that it is not a subselect.To me it appears that in the toSelect method when SelectImpl is passed we check that the parent is null or not to figure out that it is a subselect and then pass another flag subselect to the getForUdateClause method where we say &lt;br/&gt;
    if(!forUpdate &amp;amp;&amp;amp; !subselect)&lt;br/&gt;
         forUpdateString.append(forReadOnlyClause)&lt;br/&gt;
to achieve this we would probably have to override the toSelect methods in DB2Dictionary again unless there is a better way.&lt;/p&gt;

&lt;p&gt;I am attaching a patch to specify the changes&lt;/p&gt;</comment>
                            <comment id="12489558" author="pcl" created="Tue, 17 Apr 2007 23:03:43 +0100"  >&lt;p&gt;Some comments:&lt;/p&gt;

&lt;p&gt;1. I don&apos;t think that we should be doing work on resolved issues. So, this should be re-opened, or (preferably) a new issue should be opened for this new bug.&lt;/p&gt;

&lt;p&gt;2. The patch you attached does not use OpenJPA-style formatting. We don&apos;t have a style guide spelled out as well as we probably should, but we always put spaces after commas, we indent 4 spaces on continuation lines, and we put a space between an &apos;if&apos; and the open paren.&lt;/p&gt;

&lt;p&gt;3. It&apos;s a shame to have to do all this code duplication between DBDictionary and DB2Dictionary. To what extent can we refactor DBDictionary&apos;s methods to make this concept work out better for DB2Dictionary?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12367509">OPENJPA-222</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12355717" name="JIRA182-subselect.patch" size="2611" author="ritika" created="Tue, 17 Apr 2007 22:43:52 +0100"/>
                            <attachment id="12355100" name="OPENJPA-182.patch" size="3735" author="pcl" created="Fri, 6 Apr 2007 19:45:32 +0100"/>
                            <attachment id="12354964" name="OPENJPA-182.patch" size="14726" author="pcl" created="Thu, 5 Apr 2007 00:49:00 +0100"/>
                            <attachment id="12354468" name="openJPA182.patch" size="13295" author="ritika" created="Wed, 28 Mar 2007 22:58:18 +0100"/>
                            <attachment id="12355038" name="openjpa182TestCase.jar" size="1440" author="ritika" created="Thu, 5 Apr 2007 22:06:02 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 28 Mar 2007 21:58:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160514</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt5s7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>204117</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>