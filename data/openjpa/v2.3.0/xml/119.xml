<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:45:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-119/OPENJPA-119.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-119] EntityManager.clear() should not implicitly invoke the flush operation</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-119</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;From the dev mailing list... &lt;/p&gt;

&lt;p&gt;======================================= &lt;br/&gt;
We&apos;ve noticed that when EntityManager.clear() is invoked, an implicit flush() is performed. Although the spec is cloudy in this area, I don&apos;t think this processing is correct. The javadoc is as follows for clear(): &lt;/p&gt;

&lt;p&gt;/** &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Clear the persistence context, causing all managed&lt;/li&gt;
	&lt;li&gt;entities to become detached. Changes made to entities that&lt;/li&gt;
	&lt;li&gt;have not been flushed to the database will not be&lt;/li&gt;
	&lt;li&gt;persisted.&lt;br/&gt;
*/ &lt;br/&gt;
public void clear(); &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This indicates that Entities that have not been flushed will not be persisted. Thus, I would say this implies that we should not be doing an implicit flush. If the application wanted their Entities to be flushed before the clear, then they can call the flush() method before calling clear(). We shouldn&apos;t be doing this for them because then they have no choice. &lt;/p&gt;

&lt;p&gt;The Pro EJB3 Java Persistence API book has similar wording on pages 138-139: &lt;/p&gt;

&lt;p&gt;&quot;..In many respects &lt;span class=&quot;error&quot;&gt;&amp;#91;clear&amp;#93;&lt;/span&gt; is semantically equivalent to a transaction rollback. All entity instances managed by the persistence context become detached with their state left exactly as it was when the clear() operation was invoked...&quot; &lt;/p&gt;

&lt;p&gt;Our current processing for clear() eventually gets to this code: &lt;/p&gt;

&lt;p&gt;public void detachAll(OpCallbacks call) { &lt;br/&gt;
beginOperation(true); &lt;br/&gt;
try { &lt;br/&gt;
if ((_flags &amp;amp; FLAG_FLUSH_REQUIRED) != 0) &lt;br/&gt;
flush(); &lt;br/&gt;
detachAllInternal(call); &lt;br/&gt;
} catch (OpenJPAException ke) { &lt;br/&gt;
throw ke; &lt;br/&gt;
} catch (RuntimeException re) { &lt;br/&gt;
throw new GeneralException(re); &lt;br/&gt;
} finally { &lt;br/&gt;
endOperation(); &lt;br/&gt;
} &lt;br/&gt;
} &lt;/p&gt;

&lt;p&gt;Basically, if we have dirtied the Persistence Context, then do a flush() followed by the detachAllInternal(). I don&apos;t think the clear() should be doing this flush() operation. Any disagreement? &lt;br/&gt;
======================================= &lt;/p&gt;

&lt;p&gt;There was no disagreement, thus this JIRA issue.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12361701">OPENJPA-119</key>
            <summary>EntityManager.clear() should not implicitly invoke the flush operation</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kwsutter">Kevin Sutter</assignee>
                                    <reporter username="kwsutter">Kevin Sutter</reporter>
                        <labels>
                    </labels>
                <created>Wed, 31 Jan 2007 23:58:33 +0000</created>
                <updated>Tue, 31 Jul 2007 20:01:46 +0100</updated>
                            <resolved>Fri, 2 Feb 2007 21:17:27 +0000</resolved>
                                                    <fixVersion>0.9.7</fixVersion>
                                    <component>jpa</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12469556" author="kwsutter" created="Thu, 1 Feb 2007 19:29:03 +0000"  >&lt;p&gt;Contrary to Abe&apos;s comments in the dev mailing list, this problem may easily be resolved by just removing the conditional and flush() invocation from the detachAll() method.&lt;/p&gt;

&lt;p&gt;After analyzing this further, the detachAllInternal() invocation eventually creates a DetachManager passing in &quot;true&quot; as the second parameter on the constructor.  This &quot;true&quot; parameter indicates that any flushing has already been processed, as the following javadoc indicates:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;@param full whether the entire broker cache is being detached; if&lt;/li&gt;
	&lt;li&gt;this is the case, we assume the broker has already&lt;/li&gt;
	&lt;li&gt;flushed if needed, and that we&apos;re detaching in-place&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thus, when we get to the detachInternal method on the DetachManager, the _flushed flag is already set to true and no more flushing is performed.&lt;/p&gt;

&lt;p&gt;So, by removing the flush() processing in the detachAll() method on BrokerImpl, it seems to resolve the problem.&lt;/p&gt;

&lt;p&gt;Abe had indicated that we still might need this flush processing for JDO.  But, since I don&apos;t know how JDO is using the kernel, it&apos;s kind of difficult for me to determine how to make this work for both cases &amp;#8211; since I don&apos;t know the code paths that JDO follows.  So, my take is that I will fix the problem for the JPA clear() processing.  If this causes a problem with other usages of the kernel, then somebody more familiar with that usage may need to further adjust the code.&lt;/p&gt;

&lt;p&gt;Fair?  Or, am I missing something?&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</comment>
                            <comment id="12469562" author="awhite" created="Thu, 1 Feb 2007 19:51:54 +0000"  >&lt;p&gt;&quot;But, since I don&apos;t know how JDO is using the kernel, it&apos;s kind of difficult for me to determine how to make this work for both cases&quot;&lt;/p&gt;

&lt;p&gt;JDO needs to flush when detachAll() is called.  JPA doesn&apos;t.  Rather than changing the code out from under JDO, how about adding a boolean to the method.  At least then JDO code (and theoretically any other code using the method) will fail to compile.  That will allow us (and theoretically anyone else) to see the incompatibility and update our code, rather than having our detach behavior suddenly become incorrect.  If we later discover a better way to do it, we can remove the boolean and fix the compile-time problems that will again result &amp;#8211; I&apos;d much rather be getting compile time errors that I&apos;m forced to fix than to have to debug why an obscure unit test or user case suddenly stops working at a later date.&lt;/p&gt;

&lt;p&gt;In fact given the new (and correct) clear() behavior, I think we should add an OpenJPAEntityManager.detachAll() method that retains the old behavior, because it is actually useful in some cases.  So the EntityManagerImpl would end up using Broker.detachAll with both &quot;true&quot; and &quot;false&quot; flush flags.&lt;/p&gt;</comment>
                            <comment id="12469565" author="kwsutter" created="Thu, 1 Feb 2007 20:01:14 +0000"  >&lt;p&gt;Sure, I can do the boolean parameter.  I just thought a compile failure might be more harsh.  But, I can see your point that detecting this change in behavior would be more difficult to detect.&lt;/p&gt;

&lt;p&gt;As far as adding methods to OpenJPA public interfaces...  Do we need any consensus to do this?  Would we break any existing users?  Or, isn&apos;t that a concern with this young project at this point?&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</comment>
                            <comment id="12469580" author="pcl" created="Thu, 1 Feb 2007 21:06:18 +0000"  >&lt;p&gt;Generally-speaking, adding new methods should not be a problem for users, although it may be a problem for people writing products that extend OpenJPA.&lt;/p&gt;

&lt;p&gt;In general, I think that adding new methods to the OpenJPA published interfaces is something that we should do deliberately. Whether or not that means a vote on the dev list is a good question.&lt;/p&gt;</comment>
                            <comment id="12469868" author="kwsutter" created="Fri, 2 Feb 2007 20:49:03 +0000"  >&lt;p&gt;Here&apos;s what I decided to do...  I introduced a new boolean on the detachAll(OpCallbacks, boolean) method, leaving the original detachAll(OpCallbacks) as is.  The original method now calls the new method with a value of &quot;true&quot; so that the original processing takes place.  I have changed the EM.clear path so that it now calls the new method with a value of &quot;false&quot; so that no flushing takes place.  This seemed to be the least amount of churn and still allow both types of flush/clear processing to take place.&lt;/p&gt;

&lt;p&gt;I have decided not to introduce a new detachAll method on the OpenJPAEntityManager interface at this time.  I personally like to wait for a need for modifying public interfaces, even if it&apos;s just for other products extending OpenJPA.&lt;/p&gt;

&lt;p&gt;I&apos;ll be dropping the changes shortly (after the testing checks out).  I have also added a testcase for this scenario.&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</comment>
                            <comment id="12469873" author="kwsutter" created="Fri, 2 Feb 2007 21:17:27 +0000"  >&lt;p&gt;Resolved.&lt;/p&gt;</comment>
                            <comment id="12470119" author="awhite" created="Mon, 5 Feb 2007 03:56:24 +0000"  >&lt;p&gt;I&apos;m not saying we need to add the new detachAll method, but I don&apos;t understand everyone&apos;s fear of breaking anything by adding new public methods.  It&apos;s very hard to break anything by adding a new public method.  The only thing you can possibly break is a non-dynamic proxy that implements the interface (OpenJPAEntityManager) without extending the impl (EntityManagerImpl).  Anyone layering on top of OpenJPA in that fashion has to realize that their implementation will need updating fairly often.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                            <subtask id="12395356">OPENJPA-591</subtask>
                            <subtask id="12404214">OPENJPA-722</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 1 Feb 2007 19:51:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160456</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysz3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203033</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>