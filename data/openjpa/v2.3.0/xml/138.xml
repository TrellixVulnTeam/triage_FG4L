<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:43:43 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-138/OPENJPA-138.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-138] More performance improvements for OpenJPA (lib and kernel)</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-138</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;As we continue pushing OpenJPA though its paces, we&apos;re finding a few additional tweaks that help with the performance throughput.  This Issue will be used to track this next set of improvements.  I&apos;ll document more detail as we determine the correct fixes.  Several of the changes relate to caching of objects in a hashmap instead of re-creating the objects every time we call some of these methods.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12362351">OPENJPA-138</key>
            <summary>More performance improvements for OpenJPA (lib and kernel)</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12361497">OPENJPA-115</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kwsutter">Kevin Sutter</assignee>
                                    <reporter username="kwsutter">Kevin Sutter</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Feb 2007 19:32:47 +0000</created>
                <updated>Tue, 31 Jul 2007 20:02:43 +0100</updated>
                            <resolved>Tue, 27 Feb 2007 19:33:15 +0000</resolved>
                                                    <fixVersion>0.9.7</fixVersion>
                                    <component>kernel</component>
                    <component>lib</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12471535" author="kwsutter" created="Fri, 9 Feb 2007 00:17:15 +0000"  >&lt;p&gt;To give everyone a heads up on the type of changes I plan to introduce via this Issue...  Please comment if you see a problem with any of these approaches.  Our current OpenJPA test bucket still passes, but that doesn&apos;t always mean that these are safe...&lt;/p&gt;

&lt;p&gt;o  Cache the TransactionManager in JNDIManagedRuntime&lt;br/&gt;
o  Cache the Class instances for Configurations.newInstance()&lt;br/&gt;
o  Cache the Type hashcodes for OpenJPAId.hashcode()&lt;br/&gt;
o  Cache the Type&apos;s ClassLoader instances in ObjectValue.newInstance()&lt;br/&gt;
o  Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in FetchConfigurationImpl.isAssignable&lt;br/&gt;
o  Clean up the close/IllegalStateException processing in AbstractBrokerFactory and BrokerImpl (gate with TRACE)&lt;br/&gt;
o  Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in BrokerImpl.newObjectId()&lt;br/&gt;
o  Cache the brokers being created along with appropriate cleanup and reopen processing in AbstractBrokerFactory (and BrokerImpl)&lt;/p&gt;

&lt;p&gt;The details can be found with the SVN commit.  Hopefully, this gives enough of a flavor to possibly raise any red flags...&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Kevin&lt;/p&gt;</comment>
                            <comment id="12471537" author="pcl" created="Fri, 9 Feb 2007 00:23:35 +0000"  >&lt;p&gt;&amp;gt; Cache the Class instances for Configurations.newInstance()&lt;br/&gt;
&amp;gt; Cache the Type&apos;s ClassLoader instances in ObjectValue.newInstance()&lt;br/&gt;
&amp;gt; Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in FetchConfigurationImpl.isAssignable&lt;br/&gt;
&amp;gt; Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in BrokerImpl.newObjectId()&lt;/p&gt;

&lt;p&gt;These are all a bit concerning.... whenever Class objects get involved, there&apos;s always the possibility of different thread context classloaders or entities loaded in different classloaders. We should probably be careful here.&lt;/p&gt;

&lt;p&gt;&amp;gt; Cache the brokers being created along with appropriate cleanup and reopen processing in AbstractBrokerFactory (and BrokerImpl) &lt;/p&gt;

&lt;p&gt;It sounds like what this really means is that you&apos;re planning to create a pool of Brokers. Where will this be beneficial? I&apos;m concerned about the cost of and uncertainty introduced by a pooling strategy, and the corresponding pool maintenance logic.&lt;/p&gt;</comment>
                            <comment id="12471580" author="kwsutter" created="Fri, 9 Feb 2007 04:04:54 +0000"  >&lt;p&gt;Thanks for the insights, Patrick.  Here are some new observations and assessments...&lt;/p&gt;

&lt;p&gt;&amp;gt; Cache the Class instances for Configurations.newInstance()&lt;/p&gt;

&lt;p&gt;On further review, I don&apos;t think my original idea is going to work as expected.  I was thinking about caching the Class object based on the input clsName parameter.  But, given your warning about multiple classloaders, this won&apos;t work.  I suppose I could cache the Class instance based on the both the clsName and the derivedClassLoader, but due to the processing in the derivedClassLoader method, we might not save much.&lt;/p&gt;

&lt;p&gt;&amp;gt; Cache the Type&apos;s ClassLoader instances in ObjectValue.newInstance()&lt;/p&gt;

&lt;p&gt;This one I still comfortable with.  I was looking to cache the ClassLoader from the Class parameter (type) passed in with the &quot;type&quot; instance as the key.  This is should be safe, no?  Unless you&apos;re saying that the Class instance (type) is not a suitable key.&lt;/p&gt;

&lt;p&gt;&amp;gt; Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in FetchConfigurationImpl.isAssignable&lt;br/&gt;
&amp;gt; Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in BrokerImpl.newObjectId()&lt;/p&gt;

&lt;p&gt;Here again, if I am using the &quot;from&quot; and &quot;to&quot; Class instances as keys to the hashmaps, shouldn&apos;t this caching be safe?  I&apos;m looking to keep a hashmap of &quot;from&quot; Classes that contains another hashmap of the valid &quot;to&quot; Classes that have been verified.  Here again, unless we can&apos;t count on these Class instances to be used as keys, this optimization should be okay.&lt;/p&gt;

&lt;p&gt;&amp;gt; Cache the brokers being created along with appropriate cleanup and reopen processing in AbstractBrokerFactory (and BrokerImpl)&lt;/p&gt;

&lt;p&gt;Correct, I was looking to pool the Brokers.  But, the more I look into this, I&apos;m not as confident on my proposed solution.  Let me think about this one a bit more...&lt;/p&gt;

&lt;p&gt;I&apos;m assuming that you are okay with the other ideas (since you didn&apos;t highlight any concerns).  Is that a valid assumption?&lt;br/&gt;
Specifically, the following optimizations:&lt;/p&gt;

&lt;p&gt;o Cache the TransactionManager in JNDIManagedRuntime&lt;br/&gt;
o Cache the Type hashcodes for OpenJPAId.hashcode()&lt;br/&gt;
o Clean up the close/IllegalStateException processing in AbstractBrokerFactory and BrokerImpl (gate with TRACE)&lt;/p&gt;

&lt;p&gt;Thanks for your help in working through these performance improvements!&lt;br/&gt;
Kevin&lt;/p&gt;</comment>
                            <comment id="12471599" author="pcl" created="Fri, 9 Feb 2007 06:43:54 +0000"  >&lt;p&gt;&amp;gt; This is should be safe, no? Unless you&apos;re saying that the Class instance (type) is not a suitable key. &lt;/p&gt;

&lt;p&gt;To be honest, I didn&apos;t look at the source for any of the code that you mentioned. My concerns about classes and classloaders were based solely on seeing &quot;cache&quot; and &quot;class&quot; and &quot;classloader&quot; all occurring together. I expect that some of the hotspots that you have identified can be safely cached.&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; Cache the brokers being created along with appropriate cleanup and reopen processing in&lt;br/&gt;
&amp;gt; &amp;gt; AbstractBrokerFactory (and BrokerImpl)&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Correct, I was looking to pool the Brokers. But, the more I look into this, I&apos;m not as confident on &lt;br/&gt;
&amp;gt; my proposed solution. Let me think about this one a bit more... &lt;/p&gt;

&lt;p&gt;Generally-speaking, pooling concerns me. It&apos;s tough to get it right without introducing scalability bottlenecks. I think that we should be sure to demonstrate that  there&apos;s a big performance win involved before implementing something like this.&lt;/p&gt;

&lt;p&gt;Also, theoretically, creating a new Broker should be pretty quick. There are a number of bookkeeping data structures in a Broker, but not &lt;b&gt;that&lt;/b&gt; many.&lt;/p&gt;

&lt;p&gt;&amp;gt; Cache the TransactionManager in JNDIManagedRuntime&lt;/p&gt;

&lt;p&gt;Seems safe to me, although I&apos;m neither a JNDI expert nor a JTA expert, so can&apos;t comment on any issues that might come up with security principals or other contextual data if we do cache things. &lt;/p&gt;

&lt;p&gt;I&apos;m curious, though &amp;#8211; I thought that in Websphere, there was a direct API that you could invoke to get the TM. To the extent that we can avoid using JNDI altogether for commonly-used appservers, I imagine that JNDI optimization isn&apos;t going to bring that much bang for the buck.&lt;/p&gt;

&lt;p&gt;&amp;gt; Cache the Type hashcodes for OpenJPAId.hashcode()&lt;/p&gt;

&lt;p&gt;Seems legit. An ID refers to an instance; the type of an instance doesn&apos;t change over time.&lt;/p&gt;

&lt;p&gt;&amp;gt; Clean up the close/IllegalStateException processing in AbstractBrokerFactory and &lt;br/&gt;
&amp;gt; BrokerImpl (gate with TRACE)&lt;/p&gt;

&lt;p&gt;Yeah, this should definitely help things out.&lt;/p&gt;

&lt;p&gt;Of course, with all the above issues, numbers don&apos;t lie. So, if there are significant performance improvements to be had, we should look into doing the work to make them available, whether that means additional code complexity or additional configuration options etc.&lt;/p&gt;</comment>
                            <comment id="12471744" author="awhite" created="Fri, 9 Feb 2007 16:24:23 +0000"  >&lt;p&gt;o Cache the TransactionManager in JNDIManagedRuntime &lt;br/&gt;
+1&lt;/p&gt;

&lt;p&gt;o Cache the Class instances for Configurations.newInstance() &lt;br/&gt;
-1 &lt;/p&gt;

&lt;p&gt;o Cache the Type hashcodes for OpenJPAId.hashcode() &lt;br/&gt;
Already being done as far as I can tell, unless you mean a static Class-&amp;gt;hashcode map, in which case -1.  &lt;/p&gt;

&lt;p&gt;o Cache the Type&apos;s ClassLoader instances in ObjectValue.newInstance() &lt;br/&gt;
I have a hard time believing that Class.getClassLoader() for the few things that we dynamically create more than once via ObjectValues is a significant performance problem.  &lt;/p&gt;

&lt;p&gt;o Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in FetchConfigurationImpl.isAssignable&lt;br/&gt;
Again, I have a hard time believing this is significant.  What JVM is this that methods on Class seem to be so ridiculously slow, to the point that you want to create and maintain Maps of Maps to work around it?&lt;/p&gt;

&lt;p&gt;o Clean up the close/IllegalStateException processing in AbstractBrokerFactory and BrokerImpl (gate with TRACE)&lt;br/&gt;
+1 &lt;/p&gt;

&lt;p&gt;o Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in BrokerImpl.newObjectId()&lt;br/&gt;
Same comments as for FetchConfigurationImpl.isAssignable.&lt;/p&gt;

&lt;p&gt;o Cache the brokers being created along with appropriate cleanup and reopen processing in AbstractBrokerFactory (and BrokerImpl) &lt;br/&gt;
-1&lt;/p&gt;</comment>
                            <comment id="12471761" author="kwsutter" created="Fri, 9 Feb 2007 17:05:14 +0000"  >&lt;p&gt;I was waiting for Abe to weigh in...  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; o Cache the Type hashcodes for OpenJPAId.hashcode()&lt;br/&gt;
&amp;gt; Already being done as far as I can tell, unless you mean a static Class-&amp;gt;hashcode map, in which case -1.&lt;/p&gt;

&lt;p&gt;Yes, I am using a static ConcurrentReferenceHashMap to store the hashcodes.  Why the -1 with this change?&lt;/p&gt;

&lt;p&gt;&amp;gt; o Cache the Type&apos;s ClassLoader instances in ObjectValue.newInstance()&lt;br/&gt;
&amp;gt; I have a hard time believing that Class.getClassLoader() for the few things that we dynamically create more than once &amp;gt; via ObjectValues is a significant performance problem.&lt;/p&gt;

&lt;p&gt;The caching definitely seems to have helped.  More information at end of this append.&lt;/p&gt;

&lt;p&gt;&amp;gt; o Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in FetchConfigurationImpl.isAssignable&lt;br/&gt;
&amp;gt; Again, I have a hard time believing this is significant. What JVM is this that methods on Class seem to be so &lt;br/&gt;
&amp;gt; ridiculously slow, to the point that you want to create and maintain Maps of Maps to work around it?&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Not sure if it&apos;s due to the IBM JDK or not, but the Class.isAssignableFrom method is very CPU intensive.&lt;/p&gt;

&lt;p&gt;Patrick earlier indicted that &quot;numbers don&apos;t lie&quot;.  We&apos;ve been running an internal benchmark using OpenJPA (and other JPA vendors).  Our performance numbers more than doubled just with the changes listed in this Issue (minus the Broker pooling and the Configurations.newInstance caching).  Can&apos;t give any more details at this time.  You&apos;ll have to trust me.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Kevin&lt;/p&gt;</comment>
                            <comment id="12472171" author="kwsutter" created="Mon, 12 Feb 2007 02:29:36 +0000"  >&lt;p&gt;Thanks for the input from everybody on this topic.  I&apos;ve decided on the following items to include with this Issue.  Please review the SVN commit for any possible hiccups.  I&apos;ve run the OpenJPA test buckets and, of course, we have been running our benchmarks with continued success.  But, that doesn&apos;t mean that I didn&apos;t miss something, especially with the Kodo JDO dependencies.  Thanks for your patience.&lt;/p&gt;

&lt;p&gt;o Cache the TransactionManager in JNDIManagedRuntime&lt;br/&gt;
o Cache the Type hashcodes for OpenJPAId.hashcode()&lt;br/&gt;
o Cache the Type&apos;s ClassLoader instances in ObjectValue.newInstance()&lt;br/&gt;
o Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in FetchConfigurationImpl.isAssignable&lt;br/&gt;
o Clean up the close/IllegalStateException processing in AbstractBrokerFactory and BrokerImpl (gate with TRACE)&lt;br/&gt;
o Cache the assignable &quot;from&quot; types and associated value &quot;to&quot; types in BrokerImpl.newObjectId()&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</comment>
                            <comment id="12476329" author="kwsutter" created="Tue, 27 Feb 2007 19:33:15 +0000"  >&lt;p&gt;Code changes per Issue comments are complete.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12362606">OPENJPA-141</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 9 Feb 2007 00:23:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>87504</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt0un:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203318</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>