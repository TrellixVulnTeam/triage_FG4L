<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:31:15 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-241/OPENJPA-241.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-241] Extra SQL on lazy CMR load</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-241</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;This issue is similar to openjpa-134 but occurs in a slightly different manner.&lt;/p&gt;

&lt;p&gt;I&apos;ve got two entities:&lt;/p&gt;

&lt;p&gt;Account (LAZY) (one) &amp;lt;--------&amp;gt; (many) (EAGER) Holding&lt;/p&gt;

&lt;p&gt;So when I load account nothing is loaded from holdings, but once I load the holding, I observe each holding separately making a database call to load it&apos;s eager account.  This is quite alot of overhead, and through a simple conditional check we should be able to avoid it.  Essentially if we&apos;re loading an entity from a CMR, and the multiplicity of the field from the bidirectional relationship is one, then we don&apos;t need to load the data for that entity.  We did something similar to this in openjpa-134 when everything was eager (essentially avoiding the extra left out joing back into account).  Can we avoid these separate calls?&lt;/p&gt;</description>
                <environment>all</environment>
        <key id="12369742">OPENJPA-241</key>
            <summary>Extra SQL on lazy CMR load</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="fancy">Catalina Wei</assignee>
                                    <reporter username="rob.wisniewski">Rob Wisniewski</reporter>
                        <labels>
                    </labels>
                <created>Sat, 19 May 2007 13:41:43 +0100</created>
                <updated>Thu, 24 Jul 2008 00:08:16 +0100</updated>
                            <resolved>Tue, 22 Jul 2008 19:01:31 +0100</resolved>
                                    <version>1.0.0</version>
                                    <fixVersion>1.2.0</fixVersion>
                                    <component>sql</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                                                            <comments>
                            <comment id="12615474" author="faywang" created="Tue, 22 Jul 2008 00:49:50 +0100"  >&lt;p&gt;The attached patch fixes the scenario described by Rob. The following is the test I used to reproduce the problem:&lt;/p&gt;

&lt;p&gt;@Entity&lt;br/&gt;
public class Customer &lt;/p&gt;
{
...
    @OneToMany(fetch=FetchType.LAZY, mappedBy=&quot;customer&quot;)
    private Collection&amp;lt;Order&amp;gt; orders = new ArrayList&amp;lt;Order&amp;gt;();
...
}

&lt;p&gt;@Entity&lt;br/&gt;
public class Order &lt;/p&gt;
{
	@Id 
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	 int oid;
	
	 double amount;
	 boolean delivered;
	 
	 @ManyToOne (fetch=FetchType.EAGER)
	 Customer customer;
...
}

&lt;p&gt;The test case:&lt;/p&gt;

&lt;p&gt;        String query = &quot;select c FROM Customer c&quot;;&lt;br/&gt;
        Query q = em.createQuery(query);&lt;br/&gt;
        List list = q.getResultList();&lt;br/&gt;
        for (int i = 0; i &amp;lt; list.size(); i++) {&lt;br/&gt;
            Customer c = (Customer)list.get&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;;&lt;br/&gt;
            System.out.println(&quot;Customer = &quot; + c);&lt;br/&gt;
            Collection orders = c.getOrders();&lt;br/&gt;
            for (Iterator iter=orders.iterator(); iter.hasNext()&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;
{
                Order order = (Order)iter.next();
                System.out.println(&quot;order = &quot; + order);
            }
&lt;p&gt;        }&lt;/p&gt;

&lt;p&gt;As Rob indicates, since the Orders field in the Customer entity is lazy, when the Customer is first loaded, the Orders will not be loaded. After the Orders is loaded, the extra join sql is executed to get the customer field in the Order because it is an eager field.&lt;/p&gt;

&lt;p&gt;The above test generates the following sql:&lt;/p&gt;

&lt;p&gt;(1) SELECT t0.countryCode, t0.id, t0.version, t0.city, t0.state, t0.street, t0.zip &lt;br/&gt;
     FROM PdqCustomer t0 &lt;/p&gt;

&lt;p&gt;(2) SELECT t0.name FROM PdqCustomer t0 WHERE t0.countryCode = ? AND t0.id = ? &lt;/p&gt;

&lt;p&gt;(3) SELECT t0.oid, t0.version, t0.amount, t0.delivered &lt;br/&gt;
      FROM PdqOrder t0 WHERE t0.CUSTOMER_COUNTRYCODE = ? AND t0.CUSTOMER_ID = ? &lt;/p&gt;

&lt;p&gt;(4) SELECT t1.countryCode, t1.id, t1.version, t1.city, t1.state, t1.street, t1.zip &lt;br/&gt;
       FROM PdqOrder t0 &lt;br/&gt;
       INNER JOIN PdqCustomer t1 &lt;br/&gt;
       ON t0.CUSTOMER_COUNTRYCODE = t1.countryCode AND t0.CUSTOMER_ID = t1.id &lt;br/&gt;
        WHERE t0.oid = ?  optimize for 1 row&lt;/p&gt;

&lt;p&gt;(5) SELECT t1.countryCode, t1.id, t1.version, t1.city, t1.state, t1.street, t1.zip &lt;br/&gt;
      FROM PdqOrder t0 &lt;br/&gt;
      INNER JOIN PdqCustomer t1 &lt;br/&gt;
     ON t0.CUSTOMER_COUNTRYCODE = t1.countryCode AND t0.CUSTOMER_ID = t1.id &lt;br/&gt;
      WHERE t0.oid = ?  optimize for 1 row&lt;/p&gt;

&lt;p&gt;(6) SELECT t1.countryCode, t1.id, t1.version, t1.city, t1.state, t1.street, t1.zip &lt;br/&gt;
      FROM PdqOrder t0 &lt;br/&gt;
      INNER JOIN PdqCustomer t1 &lt;br/&gt;
      ON t0.CUSTOMER_COUNTRYCODE = t1.countryCode AND t0.CUSTOMER_ID = t1.id &lt;br/&gt;
      WHERE t0.oid = ?  optimize for 1 row&lt;/p&gt;

&lt;p&gt;(7) SELECT t1.countryCode, t1.id, t1.version, t1.city, t1.state, t1.street, t1.zip &lt;br/&gt;
      FROM PdqOrder t0 &lt;br/&gt;
      INNER JOIN PdqCustomer t1 &lt;br/&gt;
      ON t0.CUSTOMER_COUNTRYCODE = t1.countryCode AND t0.CUSTOMER_ID = t1.id &lt;br/&gt;
      WHERE t0.oid = ?  optimize for 1 row&lt;/p&gt;

&lt;p&gt;The purpose of sql (4) - (7) is to retrieve the inverse relationship of Customer in the Order entity. The attached fix will detect this relationship to get rid of these sql.  &lt;/p&gt;

&lt;p&gt;Please note that this patch included the fix in JIRA-134 scenario 3. Please code review it. Any comments are mostly appreciated.&lt;/p&gt;
</comment>
                            <comment id="12615699" author="fancy" created="Tue, 22 Jul 2008 19:01:31 +0100"  >&lt;p&gt;Patch from Fay Wang has been committed in svn r678828&lt;/p&gt;</comment>
                            <comment id="12616297" author="faywang" created="Thu, 24 Jul 2008 00:08:16 +0100"  >&lt;p&gt;The attached patch addresses the following issues raised by Pinaki:&lt;/p&gt;

&lt;p&gt;1. Should all the fields including superclass fields be considered for matching? getDeclaredFieldMappings() only return the fields declared in the current class.&lt;br/&gt;
2. Can be modified from linear scan to lookup. Please see ClassMapping.getField(String fieldName) or ClassMapping.getDeclaredField(String fieldName).&lt;br/&gt;
3. Test cases?&lt;/p&gt;

&lt;p&gt;The test case will be attached to JIRA-292.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12374499">OPENJPA-292</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12386589" name="openjpa_241.patch" size="10794" author="faywang" created="Tue, 22 Jul 2008 00:49:50 +0100"/>
                            <attachment id="12386767" name="openjpa_241_1.patch" size="1444" author="faywang" created="Thu, 24 Jul 2008 00:08:15 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12406276">OPENJPA-744</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 21 Jul 2008 23:49:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160571</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysw4f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>202552</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>