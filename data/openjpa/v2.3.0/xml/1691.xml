<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:38:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-1691/OPENJPA-1691.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-1691] Oracle XMLType column failed to insert/update when xml contains more than 4000 characters</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-1691</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Oracle throws the following exception when XML content is greater than 4000 characters:&lt;br/&gt;
ORA-01461: can bind a LONG value only for insert into a LONG column&lt;/p&gt;</description>
                <environment>Oracle 10g, JDBC driver (ojdbc14.jar) 10.2.0.4.0, OpenJPA 1.2.2</environment>
        <key id="12466672">OPENJPA-1691</key>
            <summary>Oracle XMLType column failed to insert/update when xml contains more than 4000 characters</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="milosz">Milosz Tylenda</assignee>
                                    <reporter username="kailaw">Kelvin Law</reporter>
                        <labels>
                            <label>openjpa</label>
                            <label>oracle</label>
                            <label>xmltype</label>
                    </labels>
                <created>Thu, 10 Jun 2010 18:31:33 +0100</created>
                <updated>Wed, 17 Aug 2011 17:27:56 +0100</updated>
                            <resolved>Wed, 27 Jul 2011 19:39:32 +0100</resolved>
                                    <version>1.2.2</version>
                    <version>2.0.0</version>
                    <version>2.0.1</version>
                                    <fixVersion>1.2.3</fixVersion>
                    <fixVersion>1.3.0</fixVersion>
                    <fixVersion>2.0.2</fixVersion>
                    <fixVersion>2.1.0</fixVersion>
                                    <component>sql</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                                                            <comments>
                            <comment id="12878366" author="milosz" created="Sun, 13 Jun 2010 09:56:22 +0100"  >&lt;p&gt;Some work notes:&lt;/p&gt;

&lt;p&gt;Neither PreparedStatement.setCharacterStream(int, Reader, int) nor OraclePreparedStatement.setStringForClob(int, String) helps here.&lt;br/&gt;
So far I have found two methods that seem to work with data over 4000 chars:&lt;/p&gt;

&lt;p&gt;a)&lt;br/&gt;
1. Prepare a statement using XMLType constructor &quot;insert into TORDERXML values(?, ?, ?, XMLType&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, ?, ?, ?)&quot; &lt;br/&gt;
2. Set the value by using PreparedStatement.setClob(int, Reader). This requires JDBC 4 (JDK 6). Tried with 11.2.0.1 driver.&lt;/p&gt;

&lt;p&gt;b)&lt;br/&gt;
1. Prepare a statement using XMLType constructor &quot;insert into TORDERXML values(?, ?, ?, XMLType&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, ?, ?, ?)&quot; &lt;br/&gt;
2. Create a temporary CLOB, fill it with XML data (similarly to &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;) and use PreparedStatement.setClob(int, Clob) or PreparedStatement.setObject(int, Object). This requires using Oracle-specific API and the temporary CLOB should be freed after statement execution. This works with 10.2.0.4 driver but 11.2.0.1 throws a bunch of ORAs:&lt;br/&gt;
ORA-31011: XML parsing failed&lt;br/&gt;
ORA-19202: Error occurred in XML processing&lt;br/&gt;
LPX-00229: input source is empty&lt;br/&gt;
Error at line 0&lt;br/&gt;
ORA-06512: at &quot;SYS.XMLTYPE&quot;, line 254&lt;br/&gt;
ORA-06512: at line 1&lt;/p&gt;

&lt;p&gt;Neither method is a workaround for users to be applied solely in DBDictionary but requires a patch.&lt;/p&gt;

&lt;p&gt;Kelvin, which JDK are you using?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://www.oracle.com/technology/sample_code/tech/java/codesnippet/xmldb/Example_Code.html#createclob&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.oracle.com/technology/sample_code/tech/java/codesnippet/xmldb/Example_Code.html#createclob&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12878570" author="kailaw" created="Mon, 14 Jun 2010 14:23:54 +0100"  >&lt;p&gt;Hi Milosz,&lt;/p&gt;

&lt;p&gt;I am using Sun JDK 1.5.0_22&lt;/p&gt;</comment>
                            <comment id="12917398" author="milosz" created="Sun, 3 Oct 2010 22:00:52 +0100"  >&lt;p&gt;The fix requires a JDBC 4 driver. There are still issues when querying over long individual XML nodes coming from obscure limits in Oracle&apos;s extractValue() function.&lt;/p&gt;

&lt;p&gt;Note that reading XML values longer than 4000 bytes was also broken - replaced getStringVal() calls with getClobVal().&lt;/p&gt;

&lt;p&gt;As a side effect users gained a bit of control on INSERT/UPDATE statements in DBDictionary.getMarkerForInsertUpdate method. One can do things like INSERT INTO tab(id, uppercased_name) VALUES (?, UPPER&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;).&lt;/p&gt;</comment>
                            <comment id="12981341" author="mikedd" created="Thu, 13 Jan 2011 16:45:28 +0000"  >&lt;p&gt;Closing issue which has been resolved for some time. If you believe the issue is not resolved please reopen or open a new issue. &lt;/p&gt;</comment>
                            <comment id="13021678" author="mjarends" created="Tue, 19 Apr 2011 18:38:35 +0100"  >&lt;p&gt;This issue also affects the 2.0.2 builds as well. Is there a known workaround for this issue for the 2.0.2 release?&lt;/p&gt;</comment>
                            <comment id="13022076" author="milosz" created="Wed, 20 Apr 2011 12:05:05 +0100"  >&lt;p&gt;Mitchell, you can fix reading of XML values by extending the OracleDictionary and setting the getStringVal property to &quot;.getClobVal()&quot;.&lt;/p&gt;

&lt;p&gt;For insert/update, I am afraid there might be no workaround or one is not easy. First, in your extended OracleDictionary you overrride setClobString method to use the JDBC 4 variant of setClob mentioned above. Second, you provide your own UpdateManager via openjpa.jdbc.UpdateManager property and somehow make it use your own implementation of Row interface to emit &quot;XMLType&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot; in INSERT and UPDATEs.&lt;/p&gt;

&lt;p&gt;See also a thread on users list &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; and let us know if you succeed.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://openjpa.208410.n2.nabble.com/Oracle-XMLType-fetch-problems-td6208344.html#a6252836&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjpa.208410.n2.nabble.com/Oracle-XMLType-fetch-problems-td6208344.html#a6252836&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13038037" author="techhusky" created="Mon, 23 May 2011 17:47:35 +0100"  >&lt;p&gt;Re-opening to post a patch for pre-2.1.x releases.&lt;/p&gt;</comment>
                            <comment id="13038045" author="techhusky" created="Mon, 23 May 2011 17:58:55 +0100"  >&lt;p&gt;The fix for this issue in 2.1.0 involved full JDBC 4.0-level support within OpenJPA.  This is not possible on releases prior to 2.1.0 since they support Java 1.5. Thus, the same fix for this issue is not possible on pre-2.1.x releases.  Using reflection, I was able to produce a patch that works with prior releases and still compiles and works with Java 1.5.  The code reflectively calls JDBC 4.0 methods to set the XML value as a clob input reader.  JRE 1.6 and an Oracle 1.6 (ojdbc6.jar) are required.  In addition, the OracleDictionary supportsSetClob value must be set to true in order to enable the support.  If DBCP is used, at least DBCP 1.4 is required since it supports call-thru of JDBC 4.0 connection and prepared statement methods.&lt;/p&gt;</comment>
                            <comment id="13038049" author="techhusky" created="Mon, 23 May 2011 18:06:44 +0100"  >&lt;p&gt;Attached patch for 1.2.x stream&lt;/p&gt;</comment>
                            <comment id="13060819" author="techhusky" created="Wed, 6 Jul 2011 21:39:00 +0100"  >&lt;p&gt;Attached patch for 2.0.x.&lt;/p&gt;</comment>
                            <comment id="13086429" author="jpaheath" created="Wed, 17 Aug 2011 17:27:56 +0100"  >&lt;p&gt;I&apos;d like to add a few more details about the code changes made to 1.2.x and 2.0.x.  These details are in addition to the previous (and vitally important) details added by Jeremy.  In addition to his requirements, it should be noted that the code changes made in this JIRA are gated (enabled/disabled) via a system property.  The system property is named &apos;supportsSetClob&apos; and is defined on the Oracle dictionary class.  As an example, the property can be defined as follows:&lt;/p&gt;

&lt;p&gt;&amp;lt;property&#160;name=&quot;openjpa.jdbc.DBDictionary&quot;&#160;value=&quot;oracle(supportsSetClob=true)&quot;/&amp;gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/p&gt;


&lt;p&gt;Next, it should be noted that we&#160;expect the&#160;XML field(s)&#160;to&#160;be&#160;annotated&#160;with:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
@Strategy(&quot;org.apache.openjpa.jdbc.meta.strats.XMLValueHandler&quot;)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
This allows a user to indicate that OpenJPA should use JAXB classmetadata to perform the to/from database value retrieval and storage.  In addition, using this strategy indicates there is an XMLType used&#160;to&#160;store&#160;the&#160;value&#160;in&#160;the&#160;database.&#160;&#160;Instead,&#160;we&apos;ve seen customers attempt to managing their own XML string, mapped to a string field, and expect the code changes of this JIRA to apply.  While a user has an XMLType specified in the column definition, OpenJPA cannot count on this data to detect whether the column is really an XML column in the database (the&#160;table&#160;could&#160;have&#160;been&#160;created&#160;manually&#160;with&#160;separate&#160;DDL&#160;instead&#160;of&#160;using&#160;OpenJPA&apos;s&#160;mapping&#160;tool).&#160;&#160;&lt;br/&gt;
In this case, where the user is doing their own String mapping rather than using the XMLValueHandler, there are some additional settings a user may need to set/enable in order to resolve the issue addressed in this JIRA.  The necessary settings/actions are as follows:&lt;/p&gt;

&lt;p&gt;First, it may be necessary to annotate an XML field with @Lob,&#160;as&#160;follows:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
@Lob&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
@Column(name=&quot;CONTENTS_XML&quot;,&#160;columnDefinition&#160;=&quot;XMLCOLUMN&#160;XMLType&quot;)&#160;&lt;br/&gt;
private&#160;String&#160;contentsXml;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
Second, in&#160;addition&#160;to&#160;annotating the XML field with @Lob, a user may&#160;also&#160;need&#160;to&#160;set&#160;this&#160;dictionary&#160;property:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
maxEmbeddedClobSize=-1&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
Therefore,&#160;the&#160;final&#160;DBDictionary&#160;property&#160;would&#160;be:&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&amp;lt;property&#160;name=&quot;openjpa.jdbc.DBDictionary&quot;&#160;value=&quot;oracle(supportsSetClob=true,maxEmbeddedClobSize=-1)&quot;/&amp;gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
Finally,&#160;a user may need to&#160;use&#160;the&#160;native&#160;schema&#160;factory&#160;to&#160;pick&#160;up&#160;the&#160;XMLType&#160;from&#160;the&#160;database, that&#160;property&#160;is&#160;as&#160;follows:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br/&gt;
&amp;lt;property&#160;name=&quot;openjpa.jdbc.SchemaFactory&quot;&#160;value=&quot;native&quot;/&amp;gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/p&gt;

&lt;p&gt;By&#160;enabling&#160;OpenJPA&apos;s native&#160;schema&#160;factory,&#160;the&#160;database&#160;column&#160;type&#160;can be detected as XMLType.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12477551">OPENJPA-1839</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12485487" name="OPENJPA-1691.1.2.x.patch" size="11586" author="techhusky" created="Wed, 6 Jul 2011 22:12:09 +0100"/>
                            <attachment id="12485482" name="OPENJPA-1691_2.0.x.patch" size="12064" author="techhusky" created="Wed, 6 Jul 2011 21:39:00 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12467489">OPENJPA-1703</subtask>
                            <subtask id="12475658">OPENJPA-1821</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 13 Jun 2010 08:56:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2512</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt6fr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>204223</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>