<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:34:24 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-439/OPENJPA-439.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-439] Performance degradation in multi-transaction operations</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-439</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Reusing a Broker for multiple transactions / persistence contexts demonstrates a performance degradation, possibly due to explicit calls to clear sets and maps, rather than just dereferencing them.&lt;/p&gt;

&lt;p&gt;Discussion: &lt;a href=&quot;http://www.nabble.com/Performance-drop-in-AbstractHashedMap.clear%28%29-tf4769771.html#a13656730&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Performance-drop-in-AbstractHashedMap.clear%28%29-tf4769771.html#a13656730&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12382245">OPENJPA-439</key>
            <summary>Performance degradation in multi-transaction operations</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="pcl">Patrick Linskey</reporter>
                        <labels>
                    </labels>
                <created>Sat, 10 Nov 2007 00:43:44 +0000</created>
                <updated>Tue, 9 Mar 2010 18:32:41 +0000</updated>
                            <resolved>Mon, 12 Nov 2007 17:58:02 +0000</resolved>
                                    <version>0.9.0</version>
                    <version>0.9.6</version>
                    <version>0.9.7</version>
                    <version>1.0.0</version>
                    <version>1.0.1</version>
                    <version>1.0.2</version>
                    <version>1.1.0</version>
                                    <fixVersion>1.1.0</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12541484" author="pcl" created="Sat, 10 Nov 2007 01:00:37 +0000"  >&lt;p&gt;Moving most of the BrokerImpl collections to recreate instead of clear sets and maps. I left a few probably-small collections as-is.&lt;/p&gt;

&lt;p&gt;It&apos;d be great to get some numbers about the impact of this patch.&lt;/p&gt;</comment>
                            <comment id="12541643" author="christiaan" created="Sun, 11 Nov 2007 16:56:04 +0000"  >&lt;p&gt;profiler screenshots&lt;/p&gt;</comment>
                            <comment id="12541644" author="christiaan" created="Sun, 11 Nov 2007 17:00:10 +0000"  >&lt;p&gt;Attached you will find a testcase to reproduce the performance drop. Testcase should be run twice, once with generateLargeDataset set to true and once with false. The first run will generate the data, which takes about 15 minutes on my machine, the second run performs the actual test of the performance (with the generated data this can be executed 5 times). The test consists of collecting objects for deletion and next deleting them.&lt;/p&gt;

&lt;p&gt;The output for the testcase:&lt;br/&gt;
Collecting 41371 objects took: 0:0:12:799 (12799.0 ms)&lt;br/&gt;
Deleting objects took: 0:0:6:267 (6267.0 ms)&lt;br/&gt;
duration 1st run: 0:0:19:66 (19066.0 ms)&lt;br/&gt;
Collecting 41371 objects took: 0:0:22:730 (22730.0 ms)&lt;br/&gt;
Deleting objects took: 0:0:5:569 (5569.0 ms)&lt;br/&gt;
duration 2nd run: 0:0:28:299 (28299.0 ms)&lt;/p&gt;

&lt;p&gt;A couple of things I noticed:&lt;br/&gt;
1) The performance drop only occurs when a large amount of objects is involved (&amp;gt;20.000 objects). When it is small there is no performance drop. &lt;br/&gt;
2) The factor of the performance drop is proportional to the amount of objects, eg. 40.000 objects have a performance drop of 2, 50.000 objects have a performance drop of a factor 4.&lt;br/&gt;
3) The performance drop is caused in traversing the object tree, not the actual delete (which is actually faster in the second run). &lt;/p&gt;

&lt;p&gt;Attached is also the profiler data for this test case. As you can see, the performance drop is caused AbstractHashedMap.clear(). Clear() iterates over all entries and sets them to null. Question is why is iterating so much slower in the second run when the same amount of objects is involved? I can imagine that leaving the data structure for the hashmap intact and adding objects with new identies will grow data structure and thus having impact on iterating over it, even if the number of entries stay the same. But this is just my assumption.&lt;/p&gt;

&lt;p&gt;One other interesting thing to note is that after all objects have been collected and pm.deleteAll() + commit() is being called there is quite an increase in memory usage. After the collecting of the objects the memory usage is 40 mb, after committing of the deleteAll() the memory usage is 91 mb. So the memory usage is more than doubled even if all objects to delete have already been loaded into memory! This probably needs to be investigated in a separate issue. After the commit, the memory usage nicely drops back again to it&apos;s level when the transaction started. In the second run, the memory usage peaks at 105 mb, but this 15 mb increase might be related to the implementation of clear().&lt;/p&gt;

&lt;p&gt;Btw, if you could send me the patched jar file I could run the test as well. &lt;/p&gt;</comment>
                            <comment id="12541738" author="christiaan" created="Mon, 12 Nov 2007 10:55:30 +0000"  >&lt;p&gt;I did a rerun of the testcase with the provided patch (I had to some changes to the query since Kodo 4.1.4 results in an exception with this openjpa version). The results are great:&lt;/p&gt;

&lt;p&gt;Collecting 41371 objects took: 0:0:12:61 (12061.0 ms)&lt;br/&gt;
Deleting objects took: 0:0:6:356 (6356.0 ms)&lt;br/&gt;
duration 1st run: 0:0:18:417 (18417.0 ms)&lt;br/&gt;
Collecting 41371 objects took: 0:0:10:713 (10713.0 ms)&lt;br/&gt;
Deleting objects took: 0:0:5:751 (5751.0 ms)&lt;br/&gt;
duration 2nd run: 0:0:16:464 (16464.0 ms)&lt;/p&gt;

&lt;p&gt;As you can see the collecting of objects in the second run has now been reduced from 22 seconds to 10 seconds (see output in previous comment), which is even faster than the first run! The hotspots for the first and second run are now the same and the top 10 hotspots are java. methods (the first openjpa hotspot is org.apache.openjpa.jdbc.sql.SelectImpl.getTableIndex which has only 0,3% self time). I also had a look at the memory usage since as mentioned the second run had a 15 mb increase of memory compared to the first run. This 15 mb increase of memory is now solved as well, so the second run has the same memory pattern has the first run. &lt;/p&gt;

&lt;p&gt;There is still one question pending. As mentioned, once all objects to be deleted into memory (40 mb) performing pm.deleteAll() increases the memory with another 45 mb. Is this as expected or should this be investigated as well?&lt;/p&gt;</comment>
                            <comment id="12541863" author="pcl" created="Mon, 12 Nov 2007 17:57:26 +0000"  >&lt;p&gt;Great! Thanks for running the numbers.&lt;/p&gt;

&lt;p&gt;&amp;gt; There is still one question pending. As mentioned, once all objects to be&lt;br/&gt;
&amp;gt; deleted into memory (40 mb) performing pm.deleteAll() increases the&lt;br/&gt;
&amp;gt; memory with another 45 mb. Is this as expected or should this be&lt;br/&gt;
&amp;gt; investigated as well?&lt;/p&gt;

&lt;p&gt;I think it&apos;s definitely worth investigating. I&apos;m going to commit the changes to this issue and mark it as resolved, though; can you open a new issue for the potential memory leak?&lt;/p&gt;</comment>
                            <comment id="12542091" author="christiaan" created="Tue, 13 Nov 2007 10:04:50 +0000"  >&lt;p&gt;Created issue &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-441&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/OPENJPA-441&lt;/a&gt; for this&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12369329" name="OPENJPA-439-patch.jar" size="45841" author="pcl" created="Sun, 11 Nov 2007 18:08:00 +0000"/>
                            <attachment id="12369278" name="OPENJPA-439.patch" size="5423" author="pcl" created="Sat, 10 Nov 2007 01:00:31 +0000"/>
                            <attachment id="12369327" name="performance testcase results.zip" size="75868" author="christiaan" created="Sun, 11 Nov 2007 16:56:04 +0000"/>
                            <attachment id="12369326" name="testcaseperformance.zip" size="4102" author="christiaan" created="Sun, 11 Nov 2007 16:55:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 11 Nov 2007 16:56:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160761</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyswkn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>202625</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>