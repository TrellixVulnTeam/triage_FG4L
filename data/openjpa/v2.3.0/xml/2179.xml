<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:37:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-2179/OPENJPA-2179.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-2179] &apos;distinct&apos; and &apos;join&apos; combinations lead lots of unneccessary sub-queries for @Embedded and @Lob fields</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-2179</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;I have an Entity (Course) with a simple @Embedded field and a @Lob. I do not use any LAZY attribution on them!&lt;/p&gt;


&lt;p&gt;If I do a normal em.find, the entity will be loaded as a whole (all the fields, including the embedded and the lob will be fetched immediately).&lt;br/&gt;
Sidenote: the Lecturer referred in the select is defined as&lt;br/&gt;
    @OneToMany(mappedBy = &quot;course&quot;,&lt;br/&gt;
            cascade = &lt;/p&gt;
{CascadeType.PERSIST, CascadeType.REMOVE, CascadeType.MERGE}
&lt;p&gt;,&lt;br/&gt;
            orphanRemoval = true, fetch = FetchType.EAGER)&lt;br/&gt;
    @OrderColumn(name = &quot;POSITION&quot;)&lt;br/&gt;
    private List&amp;lt;Lecturer&amp;gt; lecturers;&lt;/p&gt;

&lt;p&gt;The following selects DO work&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&quot;select c from Course c join c.lecturers l &quot;&lt;/li&gt;
	&lt;li&gt;&quot;select distinct c from Course c&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The following selects create tons of subqueries! 1 separate sub-query for each @Embedded field, and also for each @Lob&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&quot;select distinct c from Course c join c.lecturers l &quot;&lt;/li&gt;
	&lt;li&gt;&quot;select distinct c from Lecturer l join l.course c&quot;&lt;/li&gt;
	&lt;li&gt;&quot;select c from Lecturer l join l.course c&quot;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;This happens ONLY if I run this stuff against Oracle. In MySQL it seems to work properly.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to create a unit test for it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12552877">OPENJPA-2179</key>
            <summary>&apos;distinct&apos; and &apos;join&apos; combinations lead lots of unneccessary sub-queries for @Embedded and @Lob fields</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="3" iconUrl="https://issues.apache.org/jira/images/icons/statuses/inprogress.png" description="This issue is being actively worked on at the moment by the assignee.">In Progress</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="struberg">Mark Struberg</assignee>
                                    <reporter username="struberg">Mark Struberg</reporter>
                        <labels>
                    </labels>
                <created>Thu, 26 Apr 2012 18:00:54 +0100</created>
                <updated>Sun, 5 Apr 2015 17:16:58 +0100</updated>
                                            <version>2.2.0</version>
                                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13264283" author="struberg" created="Sat, 28 Apr 2012 11:14:10 +0100"  >&lt;p&gt;I&apos;m close to a working unit test now. Just need to figure a way how to detect those subselects automatically via a unit test?&lt;br/&gt;
Of course, the first best thing is to have it on the console already. But that cannot be easily checked via an assert...&lt;br/&gt;
Any tips?&lt;/p&gt;</comment>
                            <comment id="13264285" author="struberg" created="Sat, 28 Apr 2012 11:18:05 +0100"  >&lt;p&gt;Btw, I preserved an old output of this phenomenon in a unit test of our app:&lt;/p&gt;

&lt;p&gt;2012-04-26 17:13:36,657 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; executing prepstmnt 1053577980 SELECT DISTINCT t1.id, t1.optlock, t1.blocked, t1.businessKey, t1.cancelled, t1.comStuOk, t1.courseNr, t1.createdAt, t1.createdBy, t1.deanAcademicAffairsOk, t1.deleted, t1.denied, t1.depStudOk, t1.ects, t1.elearningUrl, t1.firstAnnouncement, t1.formalError, t1.headOk, t1.held, t1.hours, t1.language, t1.lecturerOk, t1.LINKEDCOURSE_ID, t1.modifiedAt, t1.modifiedBy, t1.orgUntCode, t1.semesterCode, t1.titleDe, t1.titleEn, t1.tuwelUrl, t1.typeKey, t1.url, t1.veniaOk, t1.visibilityDateElearningUrl, t1.visibilityDateTuwelUrl FROM Lecturer t0, Course t1 WHERE t0.COURSE_ID = t1.id&lt;br/&gt;
2012-04-26 17:13:36,664 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;7 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2012-04-26 17:13:36,665 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQLDiag load: class myapp.core.be.i18n.entities.LocalizedLongString oid: 10060&lt;br/&gt;
2012-04-26 17:13:36,665 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; executing prepstmnt 196270141 SELECT t0.examModalitiesDe, t0.examModalitiesEn FROM Course t0 WHERE t0.id = ? &lt;span class=&quot;error&quot;&gt;&amp;#91;params=?&amp;#93;&lt;/span&gt;&lt;br/&gt;
2012-04-26 17:13:36,669 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;4 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2012-04-26 17:13:36,673 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQLDiag load: class myapp.core.be.i18n.entities.LocalizedLongString oid: 10060&lt;br/&gt;
2012-04-26 17:13:36,673 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; executing prepstmnt 802857302 SELECT t0.lectureNotesInfoDe, t0.lectureNotesInfoEn FROM Course t0 WHERE t0.id = ? &lt;span class=&quot;error&quot;&gt;&amp;#91;params=?&amp;#93;&lt;/span&gt;&lt;br/&gt;
2012-04-26 17:13:36,677 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;4 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2012-04-26 17:13:36,682 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQLDiag load: class myapp.core.be.i18n.entities.LocalizedLongString oid: 10060&lt;br/&gt;
2012-04-26 17:13:36,682 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; executing prepstmnt 1253026437 SELECT t0.objectiveDe, t0.objectiveEn FROM Course t0 WHERE t0.id = ? &lt;span class=&quot;error&quot;&gt;&amp;#91;params=?&amp;#93;&lt;/span&gt;&lt;br/&gt;
2012-04-26 17:13:36,686 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;4 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2012-04-26 17:13:36,698 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQLDiag load: class myapp.core.be.i18n.entities.LocalizedLongString oid: 10060&lt;br/&gt;
2012-04-26 17:13:36,698 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; executing prepstmnt 199943961 SELECT t0.recommendationDe, t0.recommendationEn FROM Course t0 WHERE t0.id = ? &lt;span class=&quot;error&quot;&gt;&amp;#91;params=?&amp;#93;&lt;/span&gt;&lt;br/&gt;
2012-04-26 17:13:36,702 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;4 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2012-04-26 17:13:36,728 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQLDiag load: class myapp.core.be.i18n.entities.LocalizedLongString oid: 10060&lt;br/&gt;
2012-04-26 17:13:36,728 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; executing prepstmnt 25287543 SELECT t0.remarkDe, t0.remarkEn FROM Course t0 WHERE t0.id = ? &lt;span class=&quot;error&quot;&gt;&amp;#91;params=?&amp;#93;&lt;/span&gt;&lt;br/&gt;
2012-04-26 17:13:36,732 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;4 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2012-04-26 17:13:36,738 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQLDiag load: class myapp.core.be.i18n.entities.LocalizedLongString oid: 10060&lt;br/&gt;
2012-04-26 17:13:36,738 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; executing prepstmnt 1802848163 SELECT t0.contentDe, t0.contentEn FROM Course t0 WHERE t0.id = ? &lt;span class=&quot;error&quot;&gt;&amp;#91;params=?&amp;#93;&lt;/span&gt;&lt;br/&gt;
2012-04-26 17:13:36,742 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQL &amp;lt;t 169937755, conn 1482440345&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;4 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2012-04-26 17:13:36,750 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;  DEBUG jdbc.SQLDiag load: class myapp.course.be.entities.Course oid: 10060&lt;/p&gt;

&lt;p&gt;all the LocalizedLongString are @Embedded fields directly in the Course entity. This effect doesn&apos;t happen with the MySqlDictionary.&lt;/p&gt;</comment>
                            <comment id="13264596" author="struberg" created="Sun, 29 Apr 2012 21:21:14 +0100"  >&lt;p&gt;I have a pretty hard time reproducing this in OpenJPA. &lt;/p&gt;

&lt;p&gt;Now I imported the 1:1 tables from our real project and getting the following Exception:&lt;/p&gt;

&lt;p&gt;Caused by: java.sql.SQLException: Ung?ltiger Spaltentyp: getCLOB not implemented for class oracle.jdbc.driver.T4CVarcharAccessor&lt;br/&gt;
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:112)&lt;br/&gt;
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:146)&lt;br/&gt;
	at oracle.jdbc.driver.Accessor.unimpl(Accessor.java:358)&lt;br/&gt;
	at oracle.jdbc.driver.Accessor.getCLOB(Accessor.java:1328)&lt;br/&gt;
	at oracle.jdbc.driver.OracleResultSetImpl.getCLOB(OracleResultSetImpl.java:1311)&lt;br/&gt;
	at oracle.jdbc.driver.OracleResultSetImpl.getClob(OracleResultSetImpl.java:1477)&lt;br/&gt;
	at org.apache.commons.dbcp.DelegatingResultSet.getClob(DelegatingResultSet.java:553)&lt;br/&gt;
	at org.apache.commons.dbcp.DelegatingResultSet.getClob(DelegatingResultSet.java:553)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingResultSet.getClob(DelegatingResultSet.java:592)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.getClob(DBDictionary.java:746)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.OracleDictionary.getClobString(OracleDictionary.java:659)&lt;/p&gt;


&lt;p&gt;The funny thing is that I do NOT get this error in prodution! The only difference is that we are using c3p0 as pool.&lt;/p&gt;</comment>
                            <comment id="13264598" author="struberg" created="Sun, 29 Apr 2012 21:46:17 +0100"  >&lt;p&gt;The attached patch is a first version which doesn&apos;t yet show the problem. Still trying to determine what really causes the subselects.&lt;/p&gt;

&lt;p&gt;btw, here is the commandline I use to test this in openjpa-persistence-jdbc:&lt;/p&gt;

&lt;p&gt;mvn clean test -Dtest=TestOracleDistinctJoin -Doracle.artifactid=ojdbc14 -Doracle.version=10.2.0.4.0 -Dopenjpa.oracle.url=&quot;jdbc:oracle:thin:@192.168.0.101/XE&quot; -Dopenjpa.oracle.username=username -Dopenjpa.oracle.password=password -Dopenjpa.Log=DefaultLevel=TRACE -Dtest-oracle | tee mvn.log&lt;/p&gt;</comment>
                            <comment id="13264622" author="struberg" created="Sun, 29 Apr 2012 23:12:11 +0100"  >&lt;p&gt;could this have something to do with the weirdo broken Oracle behaviour that you need to read a CLOB which has &amp;lt;4000 bytes different than one with &amp;gt;= 4000?&lt;/p&gt;

&lt;p&gt;(whoever invented this crazyness at Oracle should publicly confess to not ever touch a database core code anymore in his life).&lt;/p&gt;</comment>
                            <comment id="13264718" author="struberg" created="Mon, 30 Apr 2012 09:13:06 +0100"  >&lt;p&gt;I&apos;ve now committed a unit test which shows the problem. The new TestOracleDistinctJoin also contains a guide howto invoke this test on the commandline.&lt;/p&gt;

&lt;p&gt;The test will give the following output (amonst others), where you can clearly see that SomeEmbeddable get&apos;s fetched via a separate SQL statement, even though there is no LAZY loading set on the Embedded field:&lt;/p&gt;

&lt;p&gt;1348  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Query - Executing query: select c from Lecturer l join l.course c&lt;br/&gt;
1348  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 270142182, conn 754307120&amp;gt; executing prepstmnt 960389670 SELECT t1.ID, t1.OPTLOCK, t1.COURSENUMBER, t1.NORMALATTRIBUTE FROM SMSGW.Lecturer t0, SMSGW.Course t1 WHERE t0.COURSE_ID = t1.ID&lt;br/&gt;
1350  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 270142182, conn 754307120&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;2 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
1350  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQLDiag - load: class org.apache.openjpa.jdbc.oracle.SomeEmbeddable oid: 2551&lt;br/&gt;
1350  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 270142182, conn 754307120&amp;gt; executing prepstmnt 2034408626 SELECT t0.OBJECTIVEDE, t0.OBJECTIVEEN FROM SMSGW.Course t0 WHERE t0.ID = ? &lt;span class=&quot;error&quot;&gt;&amp;#91;params=?&amp;#93;&lt;/span&gt;&lt;br/&gt;
1351  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 270142182, conn 754307120&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;1 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
1354  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQLDiag - load: class org.apache.openjpa.jdbc.oracle.Course oid: 2551&lt;br/&gt;
1354  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQLDiag - Eager relations: &lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.openjpa.jdbc.oracle.Course.lecturers&amp;#93;&lt;/span&gt;&lt;br/&gt;
1354  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 270142182, conn 754307120&amp;gt; executing prepstmnt 698114403 SELECT t0.LOBCOLUMN, t1.COURSE_ID, t1.POSITION, t1.ID, t1.OPTLOCK, t1.NAME FROM SMSGW.Course t0, SMSGW.Lecturer t1 WHERE t0.ID = ? AND t0.ID = t1.COURSE_ID&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ORDER BY t1.COURSE_ID ASC, t1.POSITION ASC &lt;span class=&quot;error&quot;&gt;&amp;#91;params=?&amp;#93;&lt;/span&gt;&lt;br/&gt;
1355  test  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 270142182, conn 754307120&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;1 ms&amp;#93;&lt;/span&gt; spent&lt;/p&gt;</comment>
                            <comment id="13264937" author="struberg" created="Mon, 30 Apr 2012 14:46:45 +0100"  >&lt;p&gt;If I change the fields inside the @Embedded entity from @Lob to String, then all things work fine again. I&apos;m currently digging into the MaxEmbeddedClobFieldStrategy. Any hints/ideas what could be going wrong? &lt;/p&gt;</comment>
                            <comment id="13265858" author="curtisr7" created="Tue, 1 May 2012 16:21:08 +0100"  >&lt;p&gt;Sorry, I meant to reply to this earlier....&lt;/p&gt;

&lt;p&gt;&amp;gt; Just need to figure a way how to detect those subselects automatically via a unit test? &lt;br/&gt;
@See org.apache.openjpa.persistence.test.SQLListenerTestCase.&lt;/p&gt;</comment>
                            <comment id="13266087" author="allee8285" created="Tue, 1 May 2012 21:55:47 +0100"  >&lt;p&gt;I am see the following exception in TestOracleDistinctJoin.testJoinOnly, ONLY in Oracle 10g&lt;/p&gt;

&lt;p&gt;Caused by: &amp;lt;openjpa-2.3.0-SNAPSHOT-rexported fatal store error&amp;gt; org.apache.openjpa.persistence.EntityExistsException: ORA-01400: cannot insert NULL into (&quot;SCOTT&quot;.&quot;COURSE&quot;.&quot;COURSEID&quot;)&lt;br/&gt;
 &lt;/p&gt;
{prepstmnt 87607598 INSERT INTO SCOTT.Course (ID, COURSENUMBER, LOBCOLUMN, NORMALATTRIBUTE, OPTLOCK, OBJECTIVEDE, OBJECTIVEEN) VALUES (?, ?, ?, ?, ?, ?, ?)} &lt;span class=&quot;error&quot;&gt;&amp;#91;code=1400, state=23000&amp;#93;&lt;/span&gt;&lt;br/&gt;
FailedObject: org.apache.openjpa.jdbc.oracle.Course@13124d36&lt;br/&gt;
    at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4910)&lt;br/&gt;
    at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4885)&lt;br/&gt;
    at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:136)&lt;br/&gt;
    at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:78)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:143)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.batchOrExecuteRow(BatchingPreparedStatementManagerImpl.java:100)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushAndUpdate(BatchingPreparedStatementManagerImpl.java:83)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushInternal(PreparedStatementManagerImpl.java:99)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flush(PreparedStatementManagerImpl.java:87)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:550)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:106)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:59)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:103)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:76)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:735)&lt;br/&gt;
    at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:131)&lt;br/&gt;
    ... 37 more&lt;br/&gt;
Caused by: org.apache.openjpa.lib.jdbc.ReportingSQLException: ORA-01400: cannot insert NULL into (&quot;SCOTT&quot;.&quot;COURSE&quot;.&quot;COURSEID&quot;)&lt;br/&gt;
 {prepstmnt 87607598 INSERT INTO SCOTT.Course (ID, COURSENUMBER, LOBCOLUMN, NORMALATTRIBUTE, OPTLOCK, OBJECTIVEDE, OBJECTIVEEN) VALUES (?, ?, ?, ?, ?, ?, ?)}
&lt;p&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;code=1400, state=23000&amp;#93;&lt;/span&gt;&lt;br/&gt;
    at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:219)&lt;br/&gt;
    at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:195)&lt;br/&gt;
    at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.access$1000(LoggingConnectionDecorator.java:59)&lt;br/&gt;
    at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingPreparedStatement.executeUpdate(LoggingConnectionDecorator.java:1134)&lt;br/&gt;
    at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:272)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement.executeUpdate(JDBCStoreManager.java:1763)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.executeUpdate(PreparedStatementManagerImpl.java:267)&lt;br/&gt;
    at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:118)&lt;br/&gt;
    ... 48 more&lt;/p&gt;</comment>
                            <comment id="13266097" author="struberg" created="Tue, 1 May 2012 22:02:23 +0100"  >&lt;p&gt;weird, I did the tests on an Oracle 10 XE windows installation in a VM (the easiest way to do oracle tests on a mac).&lt;/p&gt;

&lt;p&gt;Actually you can remove the courseId field at all. It does not have any impact on the superfluous sub-queries. txs!&lt;/p&gt;</comment>
                            <comment id="13280073" author="struberg" created="Mon, 21 May 2012 11:33:39 +0100"  >&lt;p&gt;I digged deeper and found the reason for the sub-selects to be the DISTINCT.&lt;/p&gt;

&lt;p&gt;Of course a CLOB or BLOB field cannot be used in a distinct by most DBs. But most databases also optimize them away if they there is the primary key in the result.&lt;/p&gt;

&lt;p&gt;The corresponding code is in the HandlerFieldStrategy line 174:&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewvc/openjpa/trunk/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/openjpa/trunk/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?view=markup&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13280151" author="struberg" created="Mon, 21 May 2012 14:52:13 +0100"  >&lt;p&gt;I now went further to the last select: &quot;select c from Lecturer l join l.course c&quot;&lt;/p&gt;

&lt;p&gt;And here we also do too many subselects - and this time there is no DISTINCT as excuse &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;:&lt;/p&gt;

&lt;p&gt;What I find a bit weird is that PCPath#selectColumns() (line 876) invokes the Select chain with JDBCFetchConfiguration.EAGER_NONE and not check for the configured fetch type?&lt;/p&gt;

&lt;p&gt;Also, why does a @Lob not get a LobFieldStrategy but a HandlerFieldStrategy?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12525033" name="OPENJPA-2179-test-1.patch" size="19690" author="struberg" created="Sun, 29 Apr 2012 21:46:17 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 May 2012 15:21:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>236853</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxusef:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3420</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>