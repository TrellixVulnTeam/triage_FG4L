<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:45:02 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-462/OPENJPA-462.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-462] OptimisticException is thrown instead of OptimisticLockException</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-462</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;In my application, i wanted to catch &quot;javax.persistence.OptimisticLockException&quot; and take appropriate action. However I am seeing that instead &quot;org.apache.openjpa.util.OptimisticException&quot; is being thrown. I don&apos;t want my code to become dependent on OpenJPA and would like to see OptimisticLockException thrown.&lt;/p&gt;

&lt;p&gt;While discussing in the OpenJPA forums, Patrick suggested that I create a JIRA issue for this since its a bug.&lt;br/&gt;
You can see the discussion in the forum under title &quot;OptimisticException question&quot; few days ago.&lt;/p&gt;

&lt;p&gt;Below is the stack trace from my application.&lt;/p&gt;

&lt;p&gt;&amp;lt;Nov 30, 2007 9:50:53 AM EST&amp;gt; &amp;lt;Error&amp;gt; &amp;lt;EJB&amp;gt; &amp;lt;BEA-010026&amp;gt; &amp;lt;Exception occurred during commit of transaction Name=&lt;span class=&quot;error&quot;&gt;&amp;#91;EJB com.covergence.soa.covapi.sesscfg.SessionConfigBean.getSessionConfig(com.covergence.soa.utils.SerJavaSipMessageType)&amp;#93;&lt;/span&gt;,Xid=BEA1-00001267875BE126CEB7(64273527),Status=Rolled back. [Reason=&amp;lt;2|false|0.9.7&amp;gt; org.apache.openjpa.util.OptimisticException: Optimistic locking errors were detected when flushing to the data store.  The following objects may have been concurrently modified in another transaction: &lt;span class=&quot;error&quot;&gt;&amp;#91;com.covergence.soa.covapi.userpolicy.User-com.covergence.soa.covapi.userpolicy.User-1&amp;#93;&lt;/span&gt;],numRepliesOwedMe=0,numRepliesOwedOthers=0,seconds since begin=2,seconds left=30,SCInfo&lt;span class=&quot;error&quot;&gt;&amp;#91;ajayProduction+AdminServer&amp;#93;&lt;/span&gt;=(state=rolledback),properties=(&lt;/p&gt;
{weblogic.transaction.name=[EJB com.covergence.soa.covapi.sesscfg.SessionConfigBean.getSessionConfig(com.covergence.soa.utils.SerJavaSipMessageType)]}
&lt;p&gt;),OwnerTransactionManager=ServerTM[ServerCoordinatorDescriptor=(CoordinatorURL=AdminServer+172.30.0.202:7001+ajayProduction+t3+admin+7001+,XAResources=&lt;/p&gt;
{WLStore_ajayProduction__WLS_AdminServer}
&lt;p&gt;,NonXAResources={})],CoordinatorURL=AdminServer+172.30.0.202:7001+ajayProduction+t3+admin+7001+): weblogic.transaction.RollbackException: Optimistic locking errors were detected when flushing to the data store.  The following objects may have been concurrently modified in another transaction: &lt;span class=&quot;error&quot;&gt;&amp;#91;com.covergence.soa.covapi.userpolicy.User-com.covergence.soa.covapi.userpolicy.User-1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.TransactionImpl.throwRollbackException(TransactionImpl.java:1818)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.internalCommit(ServerTransactionImpl.java:333)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.commit(ServerTransactionImpl.java:227)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.BaseRemoteObject.postInvoke1(BaseRemoteObject.java:606)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.StatelessRemoteObject.postInvoke1(StatelessRemoteObject.java:57)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.BaseRemoteObject.postInvokeTxRetry(BaseRemoteObject.java:426)&lt;/p&gt;

&lt;p&gt;        at com.covergence.soa.covapi.sesscfg.SessionConfigBean_4w7egw_SessionConfigImpl.getSessionConfig(SessionConfigBean_4w7egw_SessionConfigImpl.java:76)&lt;/p&gt;

&lt;p&gt;        at jrockit.reflect.VirtualNativeMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.RemoteBusinessIntfProxy.invoke(RemoteBusinessIntfProxy.java:63)&lt;/p&gt;

&lt;p&gt;        at $Proxy67.getSessionConfig(Lcom.covergence.soa.utils.SerJavaSipMessageType;)Lcom.covergence.ws.callouts.SessionConfigType;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at com.covergence.soa.ws.server.CallOutsImpl.getSessionConfigType(CallOutsImpl.java:46)&lt;/p&gt;

&lt;p&gt;        at com.covergence.soa.ws.server.CallOutsImplBase.getSessionPolicy(CallOutsImplBase.java:238)&lt;/p&gt;

&lt;p&gt;        at jrockit.reflect.VirtualNativeMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.WLSInvoker.invoke(WLSInvoker.java:50)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.WLSInvoker.invoke(WLSInvoker.java:42)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.server.sei.EndpointMethodHandler.invoke(EndpointMethodHandler.java:247)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.server.sei.SEIInvokerPipe.process(SEIInvokerPipe.java:97)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.MonitoringPipe.process(MonitoringPipe.java:98)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.protocol.soap.ServerMUPipe.process(ServerMUPipe.java:62)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.server.WSEndpointImpl$1.process(WSEndpointImpl.java:139)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.transport.http.HttpAdapter$HttpToolkit.handle(HttpAdapter.java:153)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.transport.http.HttpAdapter.handle(HttpAdapter.java:235)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.transport.http.servlet.ServletAdapter.handle(ServletAdapter.java:97)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.HttpServletAdapter.post(HttpServletAdapter.java:36)&lt;/p&gt;

&lt;p&gt;.&amp;gt;&lt;/p&gt;

&lt;p&gt;javax.ejb.EJBException: nested exception is: &amp;lt;2|false|0.9.7&amp;gt; org.apache.openjpa.util.OptimisticException: Optimistic locking errors were detected when flushing&lt;/p&gt;

&lt;p&gt;to the data store.  The following objects may have been concurrently modified in another transaction: [com.covergence.soa.covapi.userpolicy.User-com.covergence.&lt;/p&gt;

&lt;p&gt;soa.covapi.userpolicy.User-1]&amp;lt;2|false|0.9.7&amp;gt; org.apache.openjpa.util.OptimisticException: Optimistic locking errors were detected when flushing to the data store.  The following objects may have been concurrently modified in another transaction: &lt;span class=&quot;error&quot;&gt;&amp;#91;com.covergence.soa.covapi.userpolicy.User-com.covergence.soa.covapi.userpolicy.User-1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2120)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:1970)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:1868)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1786)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerSCInfo.doBeforeCompletion(ServerSCInfo.java:1212)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerSCInfo.callBeforeCompletions(ServerSCInfo.java:1190)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerSCInfo.startPrePrepareAndChain(ServerSCInfo.java:118)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.localPrePrepareAndChain(ServerTransactionImpl.java:1299)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.globalPrePrepare(ServerTransactionImpl.java:2111)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.internalCommit(ServerTransactionImpl.java:260)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.commit(ServerTransactionImpl.java:227)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.BaseRemoteObject.postInvoke1(BaseRemoteObject.java:606)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.StatelessRemoteObject.postInvoke1(StatelessRemoteObject.java:57)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.BaseRemoteObject.postInvokeTxRetry(BaseRemoteObject.java:426)&lt;/p&gt;

&lt;p&gt;        at com.covergence.soa.covapi.sesscfg.SessionConfigBean_4w7egw_SessionConfigImpl.getSessionConfig(SessionConfigBean_4w7egw_SessionConfigImpl.java:76)&lt;/p&gt;

&lt;p&gt;        at jrockit.reflect.VirtualNativeMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.RemoteBusinessIntfProxy.invoke(RemoteBusinessIntfProxy.java:63)&lt;/p&gt;

&lt;p&gt;        at $Proxy67.getSessionConfig(Lcom.covergence.soa.utils.SerJavaSipMessageType;)Lcom.covergence.ws.callouts.SessionConfigType;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at com.covergence.soa.ws.server.CallOutsImpl.getSessionConfigType(CallOutsImpl.java:46)&lt;/p&gt;

&lt;p&gt;Caused by: &amp;lt;2|false|0.9.7&amp;gt; org.apache.openjpa.util.OptimisticException: An optimistic lock violation was detected when flushing object instance &quot;com.covergence.soa.covapi.userpolicy.User-com.covergence.soa.covapi.userpolicy.User-1&quot; to the data store.  This indicates that the object was concurrently modified in anothertransaction.&lt;/p&gt;

&lt;p&gt;FailedObject: com.covergence.soa.covapi.userpolicy.User-com.covergence.soa.covapi.userpolicy.User-1&lt;/p&gt;

&lt;p&gt;        at kodo.jdbc.kernel.BatchingPreparedStatementManager.checkUpdate(BatchingPreparedStatementManager.java:354)&lt;/p&gt;

&lt;p&gt;        at kodo.jdbc.kernel.BatchingPreparedStatementManager.flushInternal(BatchingPreparedStatementManager.java:208)&lt;/p&gt;

&lt;p&gt;        at kodo.jdbc.kernel.BatchingPreparedStatementManager.flush(BatchingPreparedStatementManager.java:188)&lt;/p&gt;

&lt;p&gt;        at kodo.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:90)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:86)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:69)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:511)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:127)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.datacache.DataCacheStoreManager.flush(DataCacheStoreManager.java:506)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:127)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:1970)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:1868)&lt;/p&gt;

&lt;p&gt;        at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1786)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerSCInfo.doBeforeCompletion(ServerSCInfo.java:1212)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerSCInfo.callBeforeCompletions(ServerSCInfo.java:1190)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerSCInfo.startPrePrepareAndChain(ServerSCInfo.java:118)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.localPrePrepareAndChain(ServerTransactionImpl.java:1299)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.globalPrePrepare(ServerTransactionImpl.java:2111)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.internalCommit(ServerTransactionImpl.java:260)&lt;/p&gt;

&lt;p&gt;        at weblogic.transaction.internal.ServerTransactionImpl.commit(ServerTransactionImpl.java:227)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.BaseRemoteObject.postInvoke1(BaseRemoteObject.java:606)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.StatelessRemoteObject.postInvoke1(StatelessRemoteObject.java:57)&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.BaseRemoteObject.postInvokeTxRetry(BaseRemoteObject.java:426)&lt;/p&gt;

&lt;p&gt;javax.ejb.EJBException: nested exception is: &amp;lt;2|false|0.9.7&amp;gt; org.apache.openjpa.util.OptimisticException: Optimistic locking errors were detected when flushing to the data store.  The following objects may have been concurrently modified in another transaction: &lt;span class=&quot;error&quot;&gt;&amp;#91;com.covergence.soa.covapi.userpolicy.User-com.covergence.soa.covapi.userpolicy.User-1&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;        at weblogic.ejb.container.internal.RemoteBusinessIntfProxy.invoke(RemoteBusinessIntfProxy.java:78)&lt;/p&gt;

&lt;p&gt;        at $Proxy67.getSessionConfig(Lcom.covergence.soa.utils.SerJavaSipMessageType;)Lcom.covergence.ws.callouts.SessionConfigType;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at com.covergence.soa.ws.server.CallOutsImpl.getSessionConfigType(CallOutsImpl.java:46)&lt;/p&gt;

&lt;p&gt;        at com.covergence.soa.ws.server.CallOutsImplBase.getSessionPolicy(CallOutsImplBase.java:238)&lt;/p&gt;

&lt;p&gt;        at jrockit.reflect.VirtualNativeMethodInvoker.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;I)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.WLSInvoker.invoke(WLSInvoker.java:50)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.WLSInvoker.invoke(WLSInvoker.java:42)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.server.sei.EndpointMethodHandler.invoke(EndpointMethodHandler.java:247)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.server.sei.SEIInvokerPipe.process(SEIInvokerPipe.java:97)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.MonitoringPipe.process(MonitoringPipe.java:98)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.protocol.soap.ServerMUPipe.process(ServerMUPipe.java:62)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.server.WSEndpointImpl$1.process(WSEndpointImpl.java:139)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.transport.http.HttpAdapter$HttpToolkit.handle(HttpAdapter.java:153)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.transport.http.HttpAdapter.handle(HttpAdapter.java:235)&lt;/p&gt;

&lt;p&gt;        at com.sun.xml.ws.transport.http.servlet.ServletAdapter.handle(ServletAdapter.java:97)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.HttpServletAdapter.post(HttpServletAdapter.java:36)&lt;/p&gt;

&lt;p&gt;        at weblogic.wsee.jaxws.JAXWSServlet.doPost(JAXWSServlet.java:218)&lt;/p&gt;

&lt;p&gt;        at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)&lt;/p&gt;

&lt;p&gt;        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)&lt;/p&gt;

&lt;p&gt;        at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:226)&lt;/p&gt;

&lt;p&gt;        at weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityHelper.java:124)&lt;/p&gt;

&lt;p&gt;        at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:283)&lt;/p&gt;

&lt;p&gt;        at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:175)&lt;/p&gt;

&lt;p&gt;        at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:3370)&lt;/p&gt;

&lt;p&gt;        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)&lt;/p&gt;

&lt;p&gt;        at weblogic.security.service.SecurityManager.runAs(Lweblogic.security.acl.internal.AuthenticatedSubject;Lweblogic.security.acl.internal.AuthenticatedSubject;Ljava.security.PrivilegedAction;)Ljava.lang.Object;(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at weblogic.servlet.internal.WebAppServletContext.securedExecute(WebAppServletContext.java:2117)&lt;/p&gt;

&lt;p&gt;        at weblogic.servlet.internal.WebAppServletContext.execute(WebAppServletContext.java:2023)&lt;/p&gt;
</description>
                <environment>BEA WebLogic Server 10</environment>
        <key id="12384082">OPENJPA-462</key>
            <summary>OptimisticException is thrown instead of OptimisticLockException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ppoddar@apache.org">Pinaki Poddar</assignee>
                                    <reporter username="ajay662">Ajay Aggarwal</reporter>
                        <labels>
                    </labels>
                <created>Thu, 6 Dec 2007 14:56:33 +0000</created>
                <updated>Sat, 2 Aug 2008 15:02:41 +0100</updated>
                            <resolved>Wed, 16 Jul 2008 03:37:34 +0100</resolved>
                                    <version>0.9.7</version>
                                    <fixVersion>1.2.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12549180" author="ppoddar@apache.org" created="Thu, 6 Dec 2007 20:45:39 +0000"  >&lt;p&gt;An optimistic violation often manifests as a SQLException during implicit or explicit flush/commit operation. &lt;br/&gt;
As this SQL exception bubbles up the stack of OpenJPA layers, the exception gets translated with the original exception being nested within. &lt;br/&gt;
The OpenJPA facade translates an exception to javax.persistence.OptimisticLockException for the user application &lt;b&gt;if&lt;/b&gt; the lower layer &lt;br/&gt;
(i.e. spec-agnostic OpenJPA kernel) raises or translates original SQLException to a org.apache.openjpa.util.OptimisticException.&lt;br/&gt;
If the context is not sufficient to translate the exception to  org.apache.openjpa.util.OptimisticException, it gets translated to &lt;br/&gt;
org.apache.openjpa.util.StoreException which is the generic type from all exceptions raised by the underlying datastore (which is JDBC datastore in this case).&lt;/p&gt;

&lt;p&gt;The attached patch addresses this issue by narrowing down the original SQLException to a specific subtype of  StoreException based on the SQLState carried by the original SQLException. &lt;br/&gt;
As a result, the JPA-facade layer can translate the exception to a org.apache.opejpa.persistence.OptimisticLockException which is derived from intended javax.persistence.OptimisticLockException.&lt;br/&gt;
But this exception can get nested further up the exception translation chain before it reaches the user application.&lt;/p&gt;

&lt;p&gt;So, if an application wants to detect whether the exception is caused by optimistic consistency violation, one way to do it is&lt;/p&gt;

&lt;p&gt;	boolean isExpectedException(Throwable t, Class expected) &lt;/p&gt;
{
		if (t == null) return false;
		if (expected.isAssignableFrom(t.getClass()))
				return true;
		if (t.getCause()==t) return false;
		return isExpectedException(t.getCause(), expected);
	}

&lt;p&gt;     and call it from the application code as:&lt;/p&gt;

&lt;p&gt;     try &lt;/p&gt;
{
        // do some JPA stuff;
     }
&lt;p&gt; catch (Throwable t) {&lt;br/&gt;
           if (isExpectedException(t, javax.persistence.OptimisticLockException.class) &lt;/p&gt;
{
                // do some smart thing to retry/recover
           else
             // rethrow
    }

&lt;p&gt;Notes on the patch:&lt;br/&gt;
  1. The existing DBDictionary.newStoreException() method did detect referential integrity violations by analyzing java.sql.SQLException.getSQLState(). &lt;br/&gt;
  2. This patch generalizes the same logic to other violations such as locking or duplicate key.&lt;br/&gt;
  3. The only context available to narrow down the cause is  java.sql.SQLException.getSQLState() &amp;#8211; which is ideally be same across JDBC drivers and different databases. &lt;br/&gt;
But ideals are seldom met. So a new method&lt;br/&gt;
                   public String[] DBDictionary.getKnownErrorCodes(int storeExceptionType) &lt;br/&gt;
is introduced, that can be overwritten by database-specific DBDictionary derivations.&lt;br/&gt;
  4. The patch only supplies two error codes for referential integrity and locking errors. &lt;br/&gt;
===============================================================================================&lt;br/&gt;
If someone can point me to an enumeration of these (supposedly database-neutral) error codes returned by &lt;br/&gt;
SQLException.getSQLState() that will be of great help.&lt;br/&gt;
===============================================================================================&lt;/p&gt;</comment>
                            <comment id="12549182" author="ppoddar@apache.org" created="Thu, 6 Dec 2007 20:47:57 +0000"  >&lt;p&gt;This patch narrows down StoreException by SQLException.getSQLState().&lt;br/&gt;
This narrowing down helps the upper layers to translate the exception to more specific errors for the user.&lt;/p&gt;

&lt;p&gt;See the previous comment for further details.&lt;/p&gt;</comment>
                            <comment id="12549193" author="ppoddar@apache.org" created="Thu, 6 Dec 2007 21:12:01 +0000"  >&lt;p&gt;a test case to verify exact type of exception being thrown for optimistic consistency violation.&lt;/p&gt;
</comment>
                            <comment id="12550262" author="pcl" created="Tue, 11 Dec 2007 01:29:29 +0000"  >&lt;p&gt;Based on the description, it sounds like this patch might still allow internal Exception types to make it out of the OpenJPA tier unwrapped. It would seem that we should always be re-wrapping with a facade-specific exception, even if the particular exception type is not being properly handled. Is that covered in the patches at this time?&lt;/p&gt;</comment>
                            <comment id="12550296" author="ppoddar@apache.org" created="Tue, 11 Dec 2007 03:59:51 +0000"  >&lt;p&gt;This patch only narrows down StoreException to more specific subtypes. So that the upper layers can translate/rewrap the exception in a more targeted exception for the user facacde.&lt;br/&gt;
This patch does not cover all internal exception types.  &lt;br/&gt;
The narrowing down is based on SQLState that the core SQLException carries with it. Hence only specific SQL errors can be narrowed within the available context/scope.&lt;br/&gt;
The user-visible exception translation will continue to happen through the layers above as The invocation context can only determine the correct translation. &lt;/p&gt;

&lt;p&gt;Specifically, a SQL lock time out exception is now being narrowed to a internal LockException as opposed to a generic StoreException. That helps JPA facade (PersistenceExceptions) to&lt;br/&gt;
translate it to OptimisticLockException rather than a more generic PersistenceException.    &lt;/p&gt;

&lt;p&gt;SQLExceptions are being specialized further in JDBC 4.0 and SQLExceptions.narrow() that has been introduced in this patch can be a place for more improved logic. &lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12383824">OPENJPA-458</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12371181" name="PObject.java" size="505" author="ppoddar@apache.org" created="Thu, 6 Dec 2007 21:12:01 +0000"/>
                            <attachment id="12371180" name="TestOptimisticException.java" size="2250" author="ppoddar@apache.org" created="Thu, 6 Dec 2007 21:12:01 +0000"/>
                            <attachment id="12371177" name="jira462.patch.1.txt" size="6518" author="ppoddar@apache.org" created="Thu, 6 Dec 2007 20:47:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 6 Dec 2007 20:45:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160783</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt0of:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203290</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>