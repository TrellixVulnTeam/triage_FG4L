<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:31:10 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-399/OPENJPA-399.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-399] openjpa did not handle multiple schema names with same table name</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-399</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Two entities have the same table name but with different schema, only one table is created. In addition, when two entities use the generatedType.AUTO for ID, only one OPENJPA_SEQUENCE-TABLE is created.&lt;/p&gt;

&lt;p&gt;The problem due to the SchemaGroup.findTable() which only looked for a table name from all the schemas. Once the table was found in one of the schema then it exited and assumed that the table existed. Same problem in the TableJDBCSeq.addSchema().&lt;/p&gt;</description>
                <environment>JDK1.5, OPENJPA verison 580425</environment>
        <key id="12380120">OPENJPA-399</key>
            <summary>openjpa did not handle multiple schema names with same table name</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tckan1">Teresa Kan</assignee>
                                    <reporter username="tckan1">Teresa Kan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Oct 2007 23:48:18 +0100</created>
                <updated>Tue, 9 Mar 2010 18:32:40 +0000</updated>
                            <resolved>Thu, 13 Dec 2007 15:10:08 +0000</resolved>
                                    <version>1.0.1</version>
                                    <fixVersion>1.0.1</fixVersion>
                    <fixVersion>1.1.0</fixVersion>
                                    <component>jdbc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12533899" author="tckan1" created="Thu, 11 Oct 2007 00:08:50 +0100"  >&lt;p&gt;Example of the problem:&lt;br/&gt;
@Entity(name=&quot;Dog&quot;)&lt;br/&gt;
@Table(name=&quot;DOGTAB&quot;)&lt;/p&gt;

&lt;p&gt;@IdClass(DogId.class)&lt;br/&gt;
public class Dog implements Serializable&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
	@Id&lt;br/&gt;
                     @GeneratedValue(strategy=GenerationType.AUTO)&lt;br/&gt;
	private int id2;&lt;br/&gt;
..&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;@Entity(name=&quot;Dog2&quot;)&lt;br/&gt;
@Table(name=&quot;DOGTAB&quot;)&lt;/p&gt;

&lt;p&gt;@IdClass(DogId.class)&lt;br/&gt;
public class Dog2 implements Serializable&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
	@Id&lt;br/&gt;
	@GeneratedValue(strategy=GenerationType.AUTO)&lt;br/&gt;
	private int id2;&lt;br/&gt;
..&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;Although the datasource uses different schema name, openjpa only created one table for DOG but not DOG2.&lt;/p&gt;


&lt;p&gt;The current architecture based on the following assumption: &lt;br/&gt;
Each PU has one JDBCConfiguration, each JDBCConfiguration has only one SeqValue and one TableJDBCSeq instance. These are singletons. During the JDBCConfiguration instantate phase, the TableJDBCSeq was created and setup the default schema. At this point, there was no correlation between the actual schema with the table and with the entity class. Each entity class has the SchemaGroup which contains all the schemas within this PU, but you can tell which schema is used for this entity. &lt;/p&gt;

&lt;p&gt;The ultimate solution is to change the JDBCConfiguration to know the entity and its schema info at the instantiation phase. Then makes the seqValue and TableJDBCSeq as singleton for each schema. I tried to figure out how to make it work but failed. I can&apos;t find any correlation between entity, schema and table name at the configuration instantiation phase.. ..&lt;/p&gt;

&lt;p&gt;My current solution is  based on the current architecture and fix it in the TableJDBCSeq and NativeJDBCSeq. Since the TableJDBCSeq /NativeJDBCSeq is a singleton, so I put the logic to add the seq table name for each schema for this SchemaGroup.. Then during the Insert and Update the seq table, the table name will be fully quality with the schema name, so we can insert to the correct seq table.. &lt;/p&gt;

&lt;p&gt;There are some restrictions for using multiple schemas for the same table name that we need to document:&lt;/p&gt;

&lt;p&gt;1) If multiple entities have the same table name,  then they must be qualified with the schema name either thru the annotation or xml mapping. If one of entity does not have a schema and one entity has a schema, it still fails when the application executes again.&lt;br/&gt;
2) If multiple entities have the generatedType.AUTO, SEQUENCE, TABLE for ID and using the same table name, then each entity must have the schema name.&lt;br/&gt;
3) For those entities which have its unique table name within the PU, then the schema name is not required even though the entity using the generatedType of AUTO, SEQUENCE and TABLE. &amp;#8211; this is today&apos;s implementation.&lt;/p&gt;

&lt;p&gt;For the generatedType.SEQUENCE, if multiple entities use different scehmas for the same table and the sequence generator are the same, then only one sequence  is created and is used for all the entities. However, if each entity has its own sequence generator, then each generator will have its own sequence. For example,&lt;br/&gt;
@Entity(name=&quot;Dog&quot;)&lt;br/&gt;
@Table(name=&quot;DOGTAB&quot;, schema=&quot;DB2ADMIN&quot;)&lt;/p&gt;

&lt;p&gt;@IdClass(DogId.class)&lt;br/&gt;
public class Dog implements Serializable&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
	@Id&lt;br/&gt;
	@SequenceGenerator(name=&quot;myseq&quot;,sequenceName=&quot;order_seq2&quot;)&lt;br/&gt;
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator=&quot;myseq&quot;)&lt;br/&gt;
	private int id2;&lt;br/&gt;
..&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;@Entity(name=&quot;Dog2&quot;)&lt;br/&gt;
@Table(name=&quot;DOGTAB&quot;, schema=&quot;TWC&quot;)&lt;/p&gt;

&lt;p&gt;@IdClass(DogId.class)&lt;br/&gt;
public class Dog2 implements Serializable&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;
	@Id&lt;br/&gt;
	@SequenceGenerator(name=&quot;mysequence&quot;,sequenceName=&quot;order_seq9&quot;)&lt;br/&gt;
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator=&quot;mysequence&quot;)&lt;br/&gt;
	private int id2;&lt;br/&gt;
..&lt;br/&gt;
)&lt;br/&gt;
The output will be like this:&lt;br/&gt;
executing prepstmnt 538058770 VALUES NEXTVAL FOR order_seq2&lt;br/&gt;
executing prepstmnt 1078214724 VALUES NEXTVAL FOR order_seq9&lt;/p&gt;

&lt;p&gt;the id values are :&lt;br/&gt;
after find, dog1 id2  = 425 and dog name =helloDog&lt;br/&gt;
after find, dog11 id2  = 426 and dog name =helloDog1a&lt;br/&gt;
after find, dog3 id2  = 5 and dog name =helloDog2&lt;br/&gt;
after find, dog31 id2  = 6 and dog name =helloDog2a&lt;/p&gt;


</comment>
                            <comment id="12533900" author="tckan1" created="Thu, 11 Oct 2007 00:10:09 +0100"  >&lt;p&gt;attach the patch..&lt;/p&gt;</comment>
                            <comment id="12534056" author="kwsutter" created="Thu, 11 Oct 2007 15:41:08 +0100"  >&lt;p&gt;Teresa,&lt;br/&gt;
I haven&apos;t reviewed your patch yet, but I&apos;d like to get some clarification on the problem first...&lt;/p&gt;

&lt;p&gt;&amp;gt;  Although the datasource uses different schema name, openjpa only created one table for DOG but not DOG2.&lt;/p&gt;

&lt;p&gt;It seems that your code example is dependent on another configuration somewhere.  Either a persistence.xml or orm.xml that would differentiate the schema name.  Is that correct?  Your text mentions a &quot;datasource uisng a different schema name&quot;, but I&apos;m not sure what you meant by that.  Basically, you are saying that attempting to use the same table with different schemas causes a problem because we are currently not differentiating between tables with different schemas.  Right?&lt;/p&gt;

&lt;p&gt;&amp;gt;  2) If multiple entities have the generatedType.AUTO, SEQUENCE, TABLE for ID and using the same table name, then each entity must have the schema name.&lt;/p&gt;

&lt;p&gt;Not sure I follow this.  Are you stating the use of different schemas is an absolute requirement for id generation?  Or, only if you are interested in keeping the id generations separate from each other?  I&apos;m trying to figure out what limitations exist under what conditions.&lt;/p&gt;

&lt;p&gt;And, your last example with multiple sequence generators...  Did you have to change something to allow this to work?  This sounds like normal, expected behavior.  Did you fix something in this area?&lt;/p&gt;

&lt;p&gt;Finally, as part of the patch, it sounds like you are suggesting some documentation updates.  Are you going to include the necessary documentation updates to clarify these restrictions?  Since it sounds like we are totally broke with some of these scenarios, I&apos;m okay with fixing the problem(s) with documentation updates.  But, I don&apos;t want to fix something without documenting how it&apos;s supposed to work for our customers.  Or, how we can make it work for our customers.&lt;/p&gt;

&lt;p&gt;I&apos;ll take a look at your patch next, but I wanted to get started with these questions.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Kevin&lt;/p&gt;</comment>
                            <comment id="12534167" author="tckan1" created="Thu, 11 Oct 2007 22:39:44 +0100"  >&lt;p&gt;attach 2nd patch and test case:&lt;br/&gt;
1) I removed the NativeJDBCSeq code since it worked as design.&lt;br/&gt;
2) Include the documentation changes in the OpenJPA manaual and Ref guide&lt;br/&gt;
3) inlcude the test case&lt;/p&gt;</comment>
                            <comment id="12534211" author="kwsutter" created="Fri, 12 Oct 2007 04:29:32 +0100"  >&lt;p&gt;Comments on the patches...  Overall, the concept and logic looks good.  I just have a few questions/comments about the proposed code changes.  Ping me if you have any questions on my abbreviated comments.  Thanks.&lt;/p&gt;

&lt;p&gt;o  The restriction about requiring schema names for all tables if you use schema names for at least one of the entities using the same table name...  I&apos;m okay with this restriction, but is there anyway that we could detect this condition?  That is, if we detect the use of a &quot;null&quot; schema with other existing schema names, couldn&apos;t we flag this a configuration error?&lt;/p&gt;

&lt;p&gt;o  Any updated patches should be attached to the Issue with the same name.  JIRA keeps track of the older versions automatically, so you don&apos;t have to continually add a &quot;version number&quot; to your patch files.&lt;/p&gt;

&lt;p&gt;o  The testcases should be provided as part of the patch file.  Makes it much easier to merge the new files into an existing project.  It also removes the confusion with different project names (ie. openjpa10x_2 doesn&apos;t match my project name).&lt;/p&gt;

&lt;p&gt;o  The testcases need the Apache licensing...  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Take a look, you&apos;ll understand.&lt;/p&gt;

&lt;p&gt;o  In TableJDBCSeq, the getStatus method updates are interesting.  So, the previous implementation of this method didn&apos;t act on the input parameter at all?  That&apos;s strange.  Also, the javadoc for this method indicates that the input parameter (mapping) could be null.  Is it okay for your code to use &quot;null&quot; as a key for the HashMap?&lt;/p&gt;

&lt;p&gt;o  In that same file, why not just initialize _stat to the new HashMap() (similar to the original &quot;new Status()&quot;)?  And, the original declaration was final.  If you use an initializer, couldn&apos;t we go back to the &quot;final&quot; declaration?  Maybe I&apos;m missing the reasons for your current _stat initialization.&lt;/p&gt;

&lt;p&gt;o  In the addSchema() method, there&apos;s no longer a &quot;fast path&quot; return conditional at the beginning of the method.  Isn&apos;t there any means of bypassing all of the processing if the table/schema already exists?&lt;/p&gt;

&lt;p&gt;o  I&apos;m not following your code at the end of the addSchema() method with the &quot;Index idx&quot; processing.  It looks like this index processing is a side-effect of calling addSchema().  Is that your intent?  At a minimum, this requires additional comments, but maybe it requires some re-factoring to make this clearer.&lt;/p&gt;

&lt;p&gt;o  The processing of generating the tableName is repeated in at least three areas of TableJDBCSeq.  Could a common utility method be used instead so as not to repeat the code?&lt;/p&gt;

&lt;p&gt;o  I don&apos;t understand the comments for Column.resetTableName().  Doesn&apos;t &quot;reset&quot; mean to modify an existing set, yet the comment indicates that this can only be called on columns without a table set.&lt;/p&gt;

&lt;p&gt;o  The cleanup in LocalConstraint.addColumn() looks good.&lt;/p&gt;

&lt;p&gt;o  The logic in SchemaGroup.findTable and SchemaGroup.findSequence seems to be very close.  Can any of this code be shared in a private utility method?&lt;/p&gt;

&lt;p&gt;That&apos;s it,&lt;br/&gt;
Kevin&lt;/p&gt;</comment>
                            <comment id="12534409" author="tckan1" created="Fri, 12 Oct 2007 22:17:43 +0100"  >&lt;p&gt;Kevin,&lt;br/&gt;
Thanks for the comments. I fixed the code based on your comments. However, I can&apos;t determine the configuration error because I can&apos;t tell whether the null schema is valid or not. &lt;/p&gt;

&lt;p&gt;For the question about HashMap, yes, HashMap can handle the null key . Here is the info from java doc:&lt;br/&gt;
&quot;Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key&quot;&lt;/p&gt;

&lt;p&gt;For the last question about the logic in SchemaGroup.findTable and findSequence. It is not necessary to combine them together since they have different return object. Instead of adding more checking in a common method, the current way may be ok..&lt;/p&gt;
</comment>
                            <comment id="12534411" author="tckan1" created="Fri, 12 Oct 2007 22:22:10 +0100"  >&lt;p&gt;attach final patch&lt;/p&gt;</comment>
                            <comment id="12535400" author="tckan1" created="Wed, 17 Oct 2007 05:01:59 +0100"  >&lt;p&gt;I discovered another problem in GeneratedType.Sequence. If the entity did not declare a schema name  and the table name was unique, the sequence was created successfully the first time. However, when I ran the test again, it can&apos;t find the sequence.  &lt;br/&gt;
Since the sequence name is unique within a system, therefore, we can let all sequences create in the default schema. IN this case, we can use the null schema name to search the sequences from the db. The fix will be :&lt;/p&gt;

&lt;p&gt;Index: openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java	(revision 585254)&lt;br/&gt;
+++ openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java	(working copy)&lt;br/&gt;
@@ -819,8 +819,10 @@&lt;br/&gt;
         if (_log.isTraceEnabled())&lt;br/&gt;
             _log.trace(_loc.get(&quot;gen-seqs&quot;, schemaName, sequenceName));&lt;/p&gt;

&lt;p&gt;+        // since all the sequences are generated under the default schema&lt;br/&gt;
+        // therefore, we can use the null schemaname to search&lt;br/&gt;
         Sequence[] seqs = _dict.getSequences(meta, conn.getCatalog(),&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;schemaName, sequenceName, conn);&lt;br/&gt;
+            null, sequenceName, conn);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;         SchemaGroup group = getSchemaGroup();&lt;br/&gt;
         Schema schema;&lt;br/&gt;
Index: openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java	(revision 585254)&lt;br/&gt;
+++ openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java	(working copy)&lt;br/&gt;
@@ -94,7 +94,7 @@&lt;br/&gt;
             &quot;LONG VARCHAR FOR BIT DATA&quot;, &quot;LONG VARCHAR&quot;, &quot;LONG VARGRAPHIC&quot;,&lt;br/&gt;
         }));&lt;br/&gt;
         systemSchemas = new String(&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;SYSCAT, SYSIBM, SYSSTAT, SYSIBMADM, SYSTOOLS&quot;);&lt;br/&gt;
+                &quot;SYSCAT,SYSIBM,SYSSTAT,SYSIBMADM,SYSTOOLS&quot;);&lt;br/&gt;
         maxConstraintNameLength = 18;&lt;br/&gt;
         maxIndexNameLength = 18;&lt;br/&gt;
         maxColumnNameLength = 30;&lt;br/&gt;
Index: openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java&lt;br/&gt;
===================================================================
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java	(revision 585254)&lt;br/&gt;
+++ openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java	(working copy)&lt;br/&gt;
@@ -3341,7 +3341,7 @@&lt;br/&gt;
         try {&lt;br/&gt;
             int idx = 1;&lt;br/&gt;
             if (schemaName != null)&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;stmnt.setString(idx++, schemaName);&lt;br/&gt;
+                stmnt.setString(idx++, schemaName.toUpperCase());&lt;br/&gt;
             if (sequenceName != null)&lt;br/&gt;
                 stmnt.setString(idx++, sequenceName);&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12535741" author="tckan1" created="Wed, 17 Oct 2007 21:57:57 +0100"  >&lt;p&gt;There was another problem occurred in SQLServer that the dict.getColumns() can&apos;t find the table names because openjpa alway convert the table name to upper case. The table name is case sensive on SQLServer, therefore, no tables are found. Openjpa created the tables again and failed with duplicate tables.&lt;/p&gt;

&lt;p&gt;The fix will introduce a getSchemaCase() method on DBDictionary. SQLServerDictionary overrides this method to return the SCHEMA_CASE_PERSERVE.&lt;/p&gt;

&lt;p&gt;Original code in  DBDictionary on the convertSchemaCase :&lt;br/&gt;
 protected String convertSchemaCase(String objectName) &lt;/p&gt;
{
        if (objectName == null)
            return null;

        if (SCHEMA_CASE_LOWER.equals(schemaCase))
            return objectName.toLowerCase();
        if (SCHEMA_CASE_PRESERVE.equals(schemaCase))
            return objectName;
        return objectName.toUpperCase();
    }

&lt;p&gt;Fix will be :&lt;/p&gt;

&lt;p&gt; protected String convertSchemaCase(String objectName) &lt;/p&gt;
{
        if (objectName == null)
            return null;

        String scase = getSchemaCase();
        if (SCHEMA_CASE_LOWER.equals(scase))
            return objectName.toLowerCase();
        if (SCHEMA_CASE_PRESERVE.equals(scase))
            return objectName;
        return objectName.toUpperCase();
    }</comment>
                            <comment id="12538538" author="tckan1" created="Mon, 29 Oct 2007 16:28:43 +0000"  >&lt;p&gt;We only need to create the index for the OPENJPA_SEQUENCE_TABLE for DB2/ZOS only. Therefore, move the index creation code to the DB2Dictionary.&lt;/p&gt;</comment>
                            <comment id="12551530" author="tckan1" created="Thu, 13 Dec 2007 15:10:08 +0000"  >&lt;p&gt;Problem has been resolved&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12411111">OPENJPA-842</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12367906" name="OPENJPA-399_2.patch" size="3917" author="tckan1" created="Wed, 17 Oct 2007 21:57:57 +0100"/>
                            <attachment id="12368612" name="OPENJPA-399_3.patch" size="3739" author="tckan1" created="Mon, 29 Oct 2007 17:04:02 +0000"/>
                            <attachment id="12367669" name="OPENJPA_399.patch" size="39390" author="tckan1" created="Sat, 13 Oct 2007 00:05:30 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 11 Oct 2007 14:41:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160721</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt62v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>204165</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>