<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:35:13 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-1719/OPENJPA-1719.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-1719] Prepared SQL cache ordering problem with subqueries. </title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-1719</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;I&apos;ve found what appears to be an ordering issue with subqueries and the prepared SQL cache. The attached patch shows where I think the problem lies and adds a test method that shows the problem. &lt;/p&gt;

&lt;p&gt;To summarize: When the prepared SQL cache is enabled we reorder the parameter values provided by the user. If a query contains named parameters and a subquery which also contains named parameters the placement of the subquery becomes important. &lt;/p&gt;

&lt;p&gt;The following query will work : &lt;br/&gt;
SELECT p FROM Person p WHERE p.id IN (SELECT p1.id FROM Person p1 WHERE p1.lastUpdated &amp;gt;= :date ) AND p.name = :name&lt;/p&gt;

&lt;p&gt;But this one fails with a SQLDataException.&lt;br/&gt;
SELECT p FROM Person p WHERE  p.name = :name AND p.id IN (SELECT p1.id FROM Person p1 WHERE p1.lastUpdated &amp;gt;= :date )&lt;/p&gt;

&lt;p&gt;Assuming that the query is executed something like this : &lt;br/&gt;
        Query query = em.createQuery(query);&lt;br/&gt;
        query.setParameter(&quot;name&quot;, &quot;mike&quot;);&lt;br/&gt;
        query.setParameter(&quot;date&quot;, new java.sql.Date(1005397));  &lt;/p&gt;
</description>
                <environment></environment>
        <key id="12468724">OPENJPA-1719</key>
            <summary>Prepared SQL cache ordering problem with subqueries. </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="fancy">Catalina Wei</assignee>
                                    <reporter username="mikedd">Michael Dick</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Jul 2010 16:03:37 +0100</created>
                <updated>Mon, 20 Sep 2010 16:40:00 +0100</updated>
                            <resolved>Mon, 26 Jul 2010 16:42:27 +0100</resolved>
                                    <version>2.0.0</version>
                                    <fixVersion>2.0.1</fixVersion>
                    <fixVersion>2.1.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12885962" author="mikedd" created="Wed, 7 Jul 2010 16:06:05 +0100"  >&lt;p&gt;Attaching a patch that illustrates the problem using the existing TestPreparedQueryCache testcase. &lt;/p&gt;</comment>
                            <comment id="12887224" author="fancy" created="Sun, 11 Jul 2010 21:09:09 +0100"  >&lt;p&gt;Fix checked in under trunk at revision 963139.&lt;/p&gt;</comment>
                            <comment id="12892018" author="dirichs" created="Sat, 24 Jul 2010 21:02:21 +0100"  >&lt;p&gt;The fix as committed with revision 963139 still has bugs. An IndexOutOfBoundsException&lt;br/&gt;
is thrown caused by line 174 in SQLBuffer. Sample stack trace:&lt;/p&gt;

&lt;p&gt;java.util.ArrayList.addAll(ArrayList.java:497)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SQLBuffer.append(SQLBuffer.java:174)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SQLBuffer.resolveSubselects(SQLBuffer.java:521)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SQLBuffer.getSQL(SQLBuffer.java:477)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SQLBuffer.getSQL(SQLBuffer.java:467)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SQLBuffer.prepareStatement(SQLBuffer.java:563)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SQLBuffer.prepareStatement(SQLBuffer.java:543)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SelectImpl.prepareStatement(SelectImpl.java:479)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SelectImpl.execute(SelectImpl.java:420)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.SelectImpl.execute(SelectImpl.java:391)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.LogicalUnion$UnionSelect.execute(LogicalUnion.java:427)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.LogicalUnion.execute(LogicalUnion.java:230)&lt;br/&gt;
org.apache.openjpa.jdbc.sql.LogicalUnion.execute(LogicalUnion.java:220)&lt;br/&gt;
org.apache.openjpa.jdbc.kernel.SelectResultObjectProvider.open(SelectResultObjectProvider.java:94)&lt;br/&gt;
org.apache.openjpa.kernel.QueryImpl$PackingResultObjectProvider.open(QueryImpl.java:2068)&lt;br/&gt;
org.apache.openjpa.lib.rop.EagerResultList.&amp;lt;init&amp;gt;(EagerResultList.java:34)&lt;br/&gt;
org.apache.openjpa.kernel.QueryImpl.toResult(QueryImpl.java:1246)&lt;br/&gt;
org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:1005)&lt;br/&gt;
org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:861)&lt;br/&gt;
org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:792)&lt;br/&gt;
org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)&lt;br/&gt;
org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:288)&lt;br/&gt;
org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302) &lt;br/&gt;
... &lt;span class=&quot;error&quot;&gt;&amp;#91;code outside of OpenJPA)&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The problematic line in context is (lines 169++):&lt;/p&gt;

&lt;p&gt;                 if (buf._userIndex != null) {&lt;br/&gt;
                     if (_userIndex == null) &lt;/p&gt;
{
                         _userIndex = new ArrayList();
                         _userIndex.addAll(buf._userIndex);
                     }
&lt;p&gt; else&lt;br/&gt;
                         _userIndex.addAll(paramIndex*2, buf._userIndex); // Wrong index leads to exception&lt;br/&gt;
                 }&lt;/p&gt;

&lt;p&gt;These lines could be simplified to&lt;/p&gt;

&lt;p&gt;                 if (buf._userIndex != null) &lt;/p&gt;
{
                     if (_userIndex == null)
                         _userIndex = new ArrayList();
                       _userIndex.addAll(buf._userIndex);
                 }

&lt;p&gt;because it always suffices to append the elements of buf._userIndex&lt;br/&gt;
to this._userIndex no matter what the paramIndex is. The structure&lt;br/&gt;
of _userIndex is a list where each parameter is already prepended&lt;br/&gt;
by its position in the sql buffer. Thus, the order of parameters in&lt;br/&gt;
_userIndex is unimportant.&lt;/p&gt;

&lt;p&gt;Also, the code in line 184++ seems suspicious:&lt;/p&gt;

&lt;p&gt;        if (_userIndex != null) {&lt;br/&gt;
            // fix up user parameter index&lt;br/&gt;
            for (int i = 0; i &amp;lt; _userIndex.size(); i+=2) &lt;/p&gt;
{
                _userIndex.set(i, _userParams.indexOf(_userIndex.get(i+1)));
            }
&lt;p&gt;        }&lt;/p&gt;

&lt;p&gt;Here, the indizes in _userIndex get corrected by looking into the&lt;br/&gt;
_userParams - list, which contains the correct position. Not only&lt;br/&gt;
does this implementation rely on a certain equals()-semantic when&lt;br/&gt;
using _userParams.indexOf(). As I understand it, the reason for&lt;br/&gt;
storing the user parameters in the list _userIndex with&lt;br/&gt;
(position, parameter) pairs was that there may be multiple positions&lt;br/&gt;
for the same parameter in the resulting statement. Does the&lt;br/&gt;
code above really take into account these cases? I&apos;ve not&lt;br/&gt;
tested it, but it looks suspicious. You may have a look at my&lt;br/&gt;
patch submitted with &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-1584&quot; title=&quot;PreparedQuery gives wrong result if query has subquery and parameters are used in both main select and subselect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-1584&quot;&gt;&lt;del&gt;OPENJPA-1584&lt;/del&gt;&lt;/a&gt; which takes a safer&lt;br/&gt;
approach to adjust the positions in _userIndex.&lt;/p&gt;

&lt;p&gt;On a side note, I was a bit surprised to see many&lt;br/&gt;
if-statements such as in line 131:&lt;/p&gt;

&lt;p&gt;        if (sqlIndex == _sql.length())&lt;br/&gt;
            _sql.append(buf._sql.toString());&lt;br/&gt;
        else&lt;br/&gt;
            _sql.insert(sqlIndex, buf._sql.toString());&lt;/p&gt;

&lt;p&gt;This test is useless and these lines could just&lt;br/&gt;
be replaced with&lt;/p&gt;

&lt;p&gt;            _sql.insert(sqlIndex, buf._sql.toString());&lt;/p&gt;

&lt;p&gt;A similar if-statement is on line 145:&lt;/p&gt;

&lt;p&gt;            if (paramIndex == _params.size()) &lt;/p&gt;
{
                _params.addAll(buf._params);
                [...] // code that is duplicated below
            }
&lt;p&gt; else &lt;/p&gt;
{
                _params.addAll(paramIndex, buf._params);
                [...] // mere duplication of code above
            }

&lt;p&gt;The resulting code duplication made it more&lt;br/&gt;
troublesome than necessary to review this fix.&lt;br/&gt;
(Indeed, the reported IndexOutOfBounds-exception&lt;br/&gt;
only shows up in one branch of the line 145 if-statement,&lt;br/&gt;
making it harder to replicate the bug.)&lt;/p&gt;</comment>
                            <comment id="12892032" author="fancy" created="Sat, 24 Jul 2010 22:22:20 +0100"  >&lt;p&gt;Martin Dirichs,&lt;br/&gt;
Could you provide a test case that reproduce the IndexOutOfBoundsException ?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12892128" author="fancy" created="Sun, 25 Jul 2010 18:53:44 +0100"  >&lt;p&gt;Some debugging work validates that in what order the parameters are added to _userIndex does not matter, because the positions of the parameters in _userIndex are corrected by look up the Param object  in _userParams.&lt;/p&gt;

&lt;p&gt;The current code block in SQLBuffer.java  (lines 169++):&lt;br/&gt;
(1)&lt;br/&gt;
                 if (buf._userIndex != null) {&lt;br/&gt;
                     if (_userIndex == null) &lt;/p&gt;
{
                         _userIndex = new ArrayList();
                         _userIndex.addAll(buf._userIndex);
                     }
&lt;p&gt; else&lt;br/&gt;
                         _userIndex.addAll(paramIndex*2, buf._userIndex); // Wrong index leads to exception&lt;br/&gt;
                 }&lt;/p&gt;

&lt;p&gt;Can be simplified to&lt;br/&gt;
(2)&lt;br/&gt;
                 if (buf._userIndex != null) &lt;/p&gt;
{
                     if (_userIndex == null)
                          _userIndex = new ArrayList();
                      _userIndex.addAll(buf._userIndex);
                 }
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;There should be no IndexOutOfBoundException in (1). but (2) is more simplified code.&lt;/p&gt;
</comment>
                            <comment id="12892151" author="dirichs" created="Mon, 26 Jul 2010 00:18:27 +0100"  >&lt;p&gt;You find a test case attached in file OpenJPA-trunk_OJ1719.testcase.patch.&lt;/p&gt;

&lt;p&gt;Yes, with lines 172-174 simplified the code should work correctly.&lt;/p&gt;

&lt;p&gt;Perhaps you also find value in my objections to code safety and code duplication stated above.&lt;/p&gt;</comment>
                            <comment id="12892197" author="fancy" created="Mon, 26 Jul 2010 07:48:35 +0100"  >&lt;p&gt;Martin,&lt;br/&gt;
Thank you very much for the test case, it produced the IndexOutOfBoundException.&lt;br/&gt;
I will commit the fix soon.&lt;/p&gt;</comment>
                            <comment id="12892332" author="fancy" created="Mon, 26 Jul 2010 16:42:27 +0100"  >&lt;p&gt;Fix checked in under trunk revision 979326.&lt;br/&gt;
Mike,&lt;br/&gt;
Could you please apply  the same fix  to 2.0.x branch ?&lt;br/&gt;
Thanks&lt;/p&gt;</comment>
                            <comment id="12912527" author="mikedd" created="Mon, 20 Sep 2010 16:40:00 +0100"  >&lt;p&gt;Closing issues which have been resolved for some time. If the problem persists, please reopen. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12450432" name="OpenJPA-trunk_OJ1719.testcase.patch" size="1979" author="dirichs" created="Mon, 26 Jul 2010 00:18:27 +0100"/>
                            <attachment id="12448882" name="sql-cache-subqordering.diff.txt" size="4058" author="mikedd" created="Wed, 7 Jul 2010 16:06:05 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 11 Jul 2010 20:09:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161967</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12310041" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Patch Info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10042"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt6h3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>204229</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>