<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:31:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-540/OPENJPA-540.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-540] Classloading issue with WAS, Spring, and OpenJPA</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-540</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;The WASManagedRuntime class needs to dynamically load and process a couple of WebSphere-specific classes in order to interact with the WebSphere Transaction Manager.  Currently, when these classes are loaded (ExtendedJTATransaction and SynchronizationCallback), there is some problem with the Method invocations that are invoked against the JNDI object that is looked up (java:comp/websphere/ExtendedJTATransaction).  There seems to be a mismatch between the Interface classes that are loaded to obtain the Method objects and the actual object that is returned by the JNDI lookup.  The callstack is similar to the following:&lt;/p&gt;

&lt;p&gt;Caused by: &amp;lt;openjpa-1.0.1-r420667:592145 nonfatal user error&amp;gt; org.apache.openjpa.persistence.InvalidStateException: An error occured reflecting WebSphere proprietary interfaces. Please ensure that you are running the application from within WebSphere Application Server (version 5.0.2 or newer).&lt;br/&gt;
	at org.apache.openjpa.ee.WASManagedRuntime$WASTransaction.getGlobalId(WASManagedRuntime.java:157)&lt;br/&gt;
	at org.apache.openjpa.ee.WASManagedRuntime$WASTransaction.getStatus(WASManagedRuntime.java:104)&lt;br/&gt;
	... 49 more&lt;br/&gt;
Caused by: java.lang.IllegalArgumentException&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:615)&lt;br/&gt;
	at org.apache.openjpa.ee.WASManagedRuntime$WASTransaction.getGlobalId(WASManagedRuntime.java:155)&lt;br/&gt;
	... 50 more&lt;/p&gt;

&lt;p&gt;The call to getGlobalId in WASManagedRuntime is like this:&lt;/p&gt;

&lt;p&gt;                byte[] rval = (byte[]) _getGlobalId.invoke(_extendedTransaction, null);&lt;/p&gt;

&lt;p&gt;Debugging this problem has narrowed it down to a classloading issue for this scenario of using WAS v6.1.0.13, Spring 2.5.2, and OpenJPA 1.0.x.  I&apos;ll post more on the proposed solution shortly.&lt;/p&gt;

&lt;p&gt;Kevin&lt;/p&gt;</description>
                <environment></environment>
        <key id="12391919">OPENJPA-540</key>
            <summary>Classloading issue with WAS, Spring, and OpenJPA</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kwsutter">Kevin Sutter</assignee>
                                    <reporter username="kwsutter">Kevin Sutter</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Mar 2008 21:18:25 +0000</created>
                <updated>Tue, 25 Mar 2008 13:16:53 +0000</updated>
                            <resolved>Tue, 25 Mar 2008 01:50:27 +0000</resolved>
                                    <version>1.0.0</version>
                    <version>1.0.1</version>
                    <version>1.0.2</version>
                    <version>1.0.3</version>
                    <version>1.1.0</version>
                                    <fixVersion>1.0.3</fixVersion>
                    <fixVersion>1.1.0</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12580577" author="kwsutter" created="Wed, 19 Mar 2008 21:46:20 +0000"  >&lt;p&gt;The classloading issue for this environment seems to be related to the loader returned by this invocation:&lt;/p&gt;

&lt;p&gt;            ClassLoader loader = _conf.getClassResolverInstance()&lt;br/&gt;
                  .getClassLoader(getClass(), null);&lt;/p&gt;

&lt;p&gt;The loader returned by the ClassResolverImpl (and there are no external ClassResolvers configured) is a Spring classloader:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;3/18/08 14:36:26:281 PDT&amp;#93;&lt;/span&gt; 00000013 SystemOut     O   BJK: loader=org.springframework.instrument.classloading.SimpleInstrumentableClassLoader@17e217e2&lt;/p&gt;

&lt;p&gt;I&apos;m not an expert with Spring, but it seems that this SimpleInstrumentableClassLoader uses OverridingClassLoader which calls getResourceAsStream, instruments the bytecodes, and then defines the class.&lt;/p&gt;

&lt;p&gt;Unfortunately, this returned Class along with the associated Method classes do not seem to be compatible with the eventual Reflective Method invocations (reference the IllegalArgumentException in the Issue description).&lt;/p&gt;

&lt;p&gt;All other classloaders that are available to us during this processing (this WASManagedRuntime classloader, the context classloader, and the jndi object&apos;s classloader) all seem to return a more &quot;reasonable&quot; classloader:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;3/18/08 14:36:26:281 PDT&amp;#93;&lt;/span&gt; 00000013 SystemOut     O   BJK: this loader=&lt;br/&gt;
com.ibm.ws.classloader.CompoundClassLoader@2de82de8&lt;/p&gt;

&lt;p&gt;The WebSphere compound classloader works much better and provides us with the appropriate Class and Method objects to complete this WAS, Spring, and OpenJPA scenario.&lt;/p&gt;

&lt;p&gt;I, personally, do not quite understand the logic in the ClassResolver code for obtaining or creating the appropriate classloader.  There&apos;s a comment in this Impl that says we need to do this to be compliant with section 12.5 of the spec.  The JPA spec only has 11 chapters, so this must be referring to some other spec.  JDO, maybe?  Since this part of the kernel, that very well could be.&lt;/p&gt;

&lt;p&gt;But, even a more basic question is why do we need to get the loader from this ClassResolver instance?  It seems that if we are in the WASManagedRuntime class and we have found the WAS ExtendedJTATransaction object in JNDI, then why are we concerned about this ClassResolver?  It would seem that a simple call to to getClass().getClassLoader() would suffice for the WebSphere interfaces.&lt;/p&gt;

&lt;p&gt;Since this WASManagedRuntime class is only used in the non-EJB3 environments (where the TransactionSynchronizationRegistry doesn&apos;t exist yet), making this type of change seems benign.  And, the various test scenarios that we have for WebSphere, Spring, and OpenJPA seem to work (again), it seems like a safe path.  I will post the proposed patch shortly.  Any comments or suggestions will be appreciated.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Kevin&lt;/p&gt;</comment>
                            <comment id="12580588" author="kwsutter" created="Wed, 19 Mar 2008 22:26:51 +0000"  >&lt;p&gt;The patch looks more complicated than it really is due to some formatting cleanup...  The only real change is to skip the call to the ClassResolver to get the classloader and just use getClass().getClassLoader() instead.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12378277" name="openjpa-540.patch" size="1747" author="kwsutter" created="Wed, 19 Mar 2008 22:26:51 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160857</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyszrr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203143</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>