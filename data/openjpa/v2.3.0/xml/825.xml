<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:35:02 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-825/OPENJPA-825.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-825] slices: hangs with multithreaded true</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-825</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;When I turned on openjpa.Multithreaded as a possible fix for another bug, I see that the system hangs.  Attached are going to be a log file, and jstack, showing how it system hung on the very first query. ( it did execute a few find() operations, but those are not executed via ParallelExecutor ).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12410528">OPENJPA-825</key>
            <summary>slices: hangs with multithreaded true</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ppoddar@apache.org">Pinaki Poddar</assignee>
                                    <reporter username="fern">Fernando Padilla</reporter>
                        <labels>
                    </labels>
                <created>Thu, 11 Dec 2008 23:40:42 +0000</created>
                <updated>Tue, 9 Mar 2010 17:53:50 +0000</updated>
                            <resolved>Sat, 12 Sep 2009 05:47:23 +0100</resolved>
                                    <version>2.0.0-M2</version>
                                    <fixVersion>2.0.0-M1</fixVersion>
                                    <component>slice</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12655814" author="fern" created="Thu, 11 Dec 2008 23:41:11 +0000"  >&lt;p&gt;jstack, showing where the query hangs..&lt;/p&gt;</comment>
                            <comment id="12655815" author="fern" created="Thu, 11 Dec 2008 23:41:37 +0000"  >&lt;p&gt;the log file to show how the system hung on a query...&lt;/p&gt;</comment>
                            <comment id="12656365" author="ppoddar@apache.org" created="Sun, 14 Dec 2008 04:53:04 +0000"  >&lt;p&gt;Multithreaded mode of OpenJPA kernel and parallel database operation in Slice&lt;br/&gt;
===============================================================&lt;/p&gt;

&lt;p&gt;Background&lt;br/&gt;
   a) OpenJPA allows multiple threads to execute a single instance of EntityManager. By default, OpenJPA assumes that a single thread is invoking operations on a particular instance of EntityManager. &lt;br/&gt;
   openjpa.Multithreaded configuration property can be set to true to signal multithreaded acceess. Under multithreaded mode, OpenJPA kernel classes acquire an instance-level Reentrant lock before almost any of its methods and &lt;br/&gt;
   releases the lock on the method&apos;s finally block.&lt;/p&gt;

&lt;p&gt;   b) Slice executes most of the frequent database operations (query, flush) on individual slice in separate threads.&lt;/p&gt;


&lt;p&gt;   These two threading models conflict and give rise to a classic deadlock scenario as follows:&lt;/p&gt;

&lt;p&gt;   1. Assume EntityManager instance em, a Query instance Q created by E, openjpa.Multithreaded=true, a user thread UT and three slices S1,S2,S3&lt;/p&gt;

&lt;p&gt;   2. T calls em.x() or Q.y()&lt;/p&gt;

&lt;p&gt;   3. em/Q acquires a reentrant lock L on thread UT and invokes lower-layer method which eventually invokes Slice operations&lt;/p&gt;

&lt;p&gt;   4. Slice spawns three threads ST1, ST2, ST3 and on each of these threads invoke identical operation S.z()&lt;/p&gt;

&lt;p&gt;   5. If S.z() on ST1 invokes any operation of em/Q then ST1 can not acquire L as it is acquired by em/Q in step 3 and yet to be released. The architecture of Slice makes it typical that S.z() invokes one or more method on em or Q. &lt;/p&gt;

&lt;p&gt;   6. em.x()/Q.y() can not release L till  S.z() finishes   &lt;/p&gt;

&lt;p&gt;   7. S.z() can not finish because ST1 waits for L to be released by UT&lt;/p&gt;



&lt;p&gt;Observations&lt;br/&gt;
==========&lt;br/&gt;
  a) openjpa.Multithreaded is a non-default option and single threaded operation on em is more prevalent. Note that single threaded access does not imply that em can only be invoked only on UT. It is perfectly permissible to &lt;br/&gt;
start a transaction of em on some thread UT, commit the transaction and then start another transaction on same em on a different thread UT2 under default mode of openjpa.Multithreaded=false.&lt;/p&gt;

&lt;p&gt;  b) Execution of common database operations on each slice S1, S2,... in parallel has definite performance benefit and should be the default choice. And this is at par with the default choice of openjpa.Multithreaded=false&lt;/p&gt;


&lt;p&gt;Possible solutions&lt;br/&gt;
===============&lt;br/&gt;
  1. Under openjpa.Multithreaded=true, execute database operation on all slices on the same user thread UT. Otherwise, execute database operation on each slice on separate thread&lt;br/&gt;
  2. Modify OpenJPA kernel&apos;s threading model to make it more fine-grained, read/write sensitive&lt;br/&gt;
  3. Detect deadlock and throw exception as ST1 waits on L&lt;/p&gt;

&lt;p&gt;My preferred solution is (1). &lt;/p&gt;</comment>
                            <comment id="12656666" author="fern" created="Mon, 15 Dec 2008 17:26:03 +0000"  >&lt;p&gt;I have to add that because Slices does execute the Query using multiple threads ( ST1, ST2, ST3 mentioned above ).  It is explicitly accessing the EM in a multi-threaded manner, thus breaking the whole assumptions that you can only access the EM with one thread.&lt;/p&gt;

&lt;p&gt;THUS:&lt;/p&gt;

&lt;p&gt;Slices REQUIRES openjpa.Multithreaded=true !!!!!!!!!!!!&lt;/p&gt;

&lt;p&gt;Conceptually, if you will be executing the EM with multiple threads, you have to use openjpa.Multithreaded=true.  And if you don&apos;t you will see corruption and weird behavior, which another issue (&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-820&quot; title=&quot;slices: a simple query is failing (unique, but totally sending wrong parameters to SQL)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-820&quot;&gt;&lt;del&gt;OPENJPA-820&lt;/del&gt;&lt;/a&gt;) shows exactly that Slices with openjpa.Multithread=false can have erratic behavior, with invalid results for queries.  Thus if you run Slices with openjpa.Multithreaded=false, then any query you run could be returning invalid values!&lt;/p&gt;

&lt;p&gt;I just wanted to go on record stating that this bug (&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-825&quot; title=&quot;slices: hangs with multithreaded true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-825&quot;&gt;&lt;del&gt;OPENJPA-825&lt;/del&gt;&lt;/a&gt;) is an either/or proposition, or only an issue if you run with openjpa.Multithreaded=true, because currently Slices requires openjpa.Multithreaded=true.  Thus though the easy solution is #1, that is the most un-performant of any of them, so it&apos;s a great short-term solution.  And #3 is useless because deadlocks ARE GUARANTEED to occur (&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-820&quot; title=&quot;slices: a simple query is failing (unique, but totally sending wrong parameters to SQL)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-820&quot;&gt;&lt;del&gt;OPENJPA-820&lt;/del&gt;&lt;/a&gt;), because most of the code uses a global lock, there is no way around deadlocks.  #2 is the only long-term solution...&lt;/p&gt;</comment>
                            <comment id="12657211" author="fern" created="Tue, 16 Dec 2008 23:10:55 +0000"  >&lt;p&gt;another jstack of openjpa slices hanging: within the StateManager...&lt;/p&gt;

&lt;p&gt;1) I have applied the patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-826&quot; title=&quot;moving some code outside of lock boundaries, that don&amp;#39;t need to be locked&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-826&quot;&gt;OPENJPA-826&lt;/a&gt;, that removes the first hang spot in QueryImpl.isUnique&lt;br/&gt;
    (this was the hang shown in the first stack trace I attached)&lt;/p&gt;

&lt;p&gt;2) I have disabled the current work around to this bug applied by Pinaki&lt;br/&gt;
    (the work around currently turns off ParallelExecutor when Multithreaded=true)&lt;br/&gt;
    (I have disabled the work around to test a parallel execution, to find and fix hangs)&lt;/p&gt;</comment>
                            <comment id="12677055" author="ppoddar@apache.org" created="Thu, 26 Feb 2009 16:31:16 +0000"  >&lt;p&gt;Two primary objectives or hard constraints&lt;br/&gt;
1. Slice must execute database operations in parallel. Otherwise the basic purpose of working with distributed data in an efficient manner is defeated.&lt;br/&gt;
2. OpenJPA&apos;s threading model should not be altered. Threading model is hard to retrofit and OpenJPA&apos;s current threading model is battle-tested. Any fundamental alteration is a risk not worth taking.&lt;/p&gt;

&lt;p&gt;One approach to meet the above criteria and address this difficult reported issue is to incorporate a variation on threading model for Slice module. Let each slice run on a specialized SliceThread which acts like a child of a parent &apos;user&apos; thread. The parent thread is the thread that invoked the Broker/EntityManager operation. When the control reaches to Slice for executing database operation, let Slice spawn specialized SliceThread. Let a SliceThread use its parent&apos;s lock. But do this only for Broker and not for Query (which has its own reentrant lock). &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12410312">OPENJPA-820</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12410622">OPENJPA-826</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12396253" name="hang-multithread-2.jstack" size="41467" author="fern" created="Tue, 16 Dec 2008 23:10:55 +0000"/>
                            <attachment id="12395890" name="hang-multithread.jstack" size="35430" author="fern" created="Thu, 11 Dec 2008 23:41:11 +0000"/>
                            <attachment id="12395891" name="hang-multithread.txt" size="180859" author="fern" created="Thu, 11 Dec 2008 23:41:37 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 14 Dec 2008 04:53:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161129</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysqqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>201680</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>