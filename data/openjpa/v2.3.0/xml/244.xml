<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:31:13 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-244/OPENJPA-244.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-244] Java 2 Security enablement</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-244</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Via some testing with the WebSphere Application Server, it&apos;s been discovered that we&apos;re missing some doPriv blocks through out the OpenJPA code base.  This JIRA report will be used to resolve these issues.  More specific examples will be posted later.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12370109">OPENJPA-244</key>
            <summary>Java 2 Security enablement</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="allee8285">Albert Lee</assignee>
                                    <reporter username="kwsutter">Kevin Sutter</reporter>
                        <labels>
                    </labels>
                <created>Thu, 24 May 2007 03:48:54 +0100</created>
                <updated>Tue, 15 Apr 2008 19:16:52 +0100</updated>
                            <resolved>Fri, 10 Aug 2007 14:05:33 +0100</resolved>
                                    <version>1.0.0</version>
                                    <fixVersion>1.0.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12501019" author="allee8285" created="Sun, 3 Jun 2007 16:41:39 +0100"  >&lt;p&gt;After looking into this Java 2 security issue, here is a proposal to correct the problem in openjpa.&lt;/p&gt;

&lt;p&gt;The goals of the enhancements are:&lt;/p&gt;

&lt;p&gt;1) non-intrusive changes.&lt;br/&gt;
2) easy readability and future usages&lt;br/&gt;
3) sensitive to downstream security exposure&lt;br/&gt;
4) maintanence of the additional code.&lt;/p&gt;

&lt;p&gt;Approach to the solution:&lt;br/&gt;
1) Create a static helper class J2DoPrivHelper.java in openjpa-lib\src\main\java\org\apache\openjpa\lib\util. See attachment for the content. The purpose of this class is isolate Java 2 security related code in one place for control and maintenance.&lt;br/&gt;
2) Each JDK functions that required doPrivileged encasement associated to a static method in the helper class. The name of the method is closely related to the JDK function. If it is an instance method, the first argument is the instance object. So far I have identified 24 JDK helper methods.&lt;br/&gt;
3) Where there is a usage of the security sensitive method call, it can be translated to one of the helper method.&lt;br/&gt;
    E.g.&lt;br/&gt;
    a) From&lt;br/&gt;
            return _url.openStream();&lt;br/&gt;
         To&lt;br/&gt;
            return J2DoPrivHelper.openStream(_url);&lt;br/&gt;
    b) From&lt;br/&gt;
           ClassLoader loader = cls.getClassLoader();&lt;br/&gt;
         To&lt;br/&gt;
           ClassLoader loader = J2DoPrivHelper.getClassLoader(cls);&lt;br/&gt;
    c) From&lt;br/&gt;
            loader = ClassLoader.getSystemClassLoader();&lt;br/&gt;
         To&lt;br/&gt;
            loader = J2DoPrivHelper.getSystemClassLoader();&lt;/p&gt;

&lt;p&gt;         To&lt;br/&gt;
4) These method call translations will be to the closest place where the doPriv is needed. This will eliminate the possible security &quot;leak&quot; in the down stream code. E.g. callback to unsecured code inside the doPriv encasement.&lt;br/&gt;
5) There are approximately 71 files affected, excluding test cases that use the same security sensitive methods.&lt;br/&gt;
6) Document the permissions required by Java 2 security used in openjpa.&lt;br/&gt;
    E.g.&lt;br/&gt;
      permission java.lang.RuntimePermission  &quot;getClassLoader&quot;;&lt;br/&gt;
      permission java.io.FilePermission       &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;,        &quot;read&quot;; &lt;/p&gt;

&lt;p&gt;I have a prototype of these changes and it is working in the WebSphere environment.&lt;/p&gt;

&lt;p&gt;I am open for suggestions and ideas. I continue to work on this path unless I hear there is any objection otherwise.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;br/&gt;
Albert Lee&lt;/p&gt;</comment>
                            <comment id="12501024" author="djencks" created="Sun, 3 Jun 2007 17:12:12 +0100"  >&lt;p&gt;Would it make any sense to, rather than having a class with static methods, having an interface/abstract class and a static INSTANCE?  Then some initialization (static) code could decide which implementation is appropriate for the environment: e.g. if no security manager is installed we wouldn&apos;t need the doPrivileged code?  I don&apos;t know if going through the doPrivileged code when it isn&apos;t doing anything incurs enough expense to make this worthwhile.&lt;/p&gt;</comment>
                            <comment id="12501065" author="clr" created="Mon, 4 Jun 2007 00:53:10 +0100"  >&lt;p&gt;If you choose not to have an interface and two classes selected by whether the security manager is active or not, I&apos;d suggest adding a &lt;br/&gt;
static final boolean isSecure = System.getSecurityManager() != null; &lt;/p&gt;

&lt;p&gt;and then testing it for each method, e.g. &lt;/p&gt;

&lt;p&gt;    public static final ClassLoader getClassLoader (final Class clazz)&lt;br/&gt;
    {&lt;br/&gt;
if(isSecure) {&lt;br/&gt;
        return (ClassLoader) AccessController&lt;br/&gt;
                .doPrivileged(new PrivilegedAction()&lt;br/&gt;
                {&lt;br/&gt;
                    public Object run ()&lt;/p&gt;
                    {
                        return clazz.getClassLoader();
                    }
&lt;p&gt;                });&lt;br/&gt;
} else &lt;/p&gt;
{
return clazz.getClassLoader();
}
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;If the variable isSecure is static final we need to be sure that the class is never loaded before the security manager is activated, otherwise we will get the wrong answer.&lt;/p&gt;

&lt;p&gt;As the patch is written as of June 3, each call will at minimum create a new object on the heap that needs to be garbage collected, and calling doPriv when there is no security manager is a waste.&lt;/p&gt;

&lt;p&gt;In any case, it&apos;s good to isolate the calls to this class so I&apos;m +1 on making the rest of the changes and we can worry about the implementation details when we see if there is any performance impact one way or the other.&lt;/p&gt;
</comment>
                            <comment id="12501371" author="mitesh" created="Mon, 4 Jun 2007 22:23:27 +0100"  >&lt;p&gt;Including a class like J2DoPrivHelper as part of trusted code might be dangerous from security point of view.  For example. some malicious code  that otherwise does not enough privileges can now call J2DoPrivHelper.getDeclaredFields() to get access to fields of a class. AFAIK, there is no easy way to completely factor out doPrivileged blocks without compromising secuity &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12501590" author="allee8285" created="Tue, 5 Jun 2007 16:15:04 +0100"  >&lt;p&gt;Mitesh, You bring up a very good point.&lt;/p&gt;

&lt;p&gt;I need to investigate more and see if there are alternatives other than in-lining doPrivileged in the openjpa code base.&lt;/p&gt;

&lt;p&gt;Thanks for you insight into this matter.&lt;br/&gt;
Albert Lee&lt;/p&gt;</comment>
                            <comment id="12501604" author="clr" created="Tue, 5 Jun 2007 17:05:50 +0100"  >&lt;p&gt;What is possible is to hide the nasty mechanical construction of a new instance of the anonymous inner class by a wrapper method. &lt;/p&gt;

&lt;p&gt;Perhaps Mitesh can post examples (used in CDDL-licensed TopLink Essentials) that preserve the doPrivileged method call in the correct place but delegates the construction of the instance to a wrapper. The resulting code is much more readable than the usual inline doPrivileged and avoids the security hole.&lt;/p&gt;</comment>
                            <comment id="12501617" author="allee8285" created="Tue, 5 Jun 2007 18:07:42 +0100"  >&lt;p&gt;I noticed that there are many openjpa classes have a static final caching the line.separator (or something similiar) from the system properties. This kind of general resource that required doPriv can be customized in the helper without any security exposure and still make the code readable.&lt;/p&gt;

&lt;p&gt;private static final String SEP = J2DoPrivHelper.getLineSeparator();&lt;/p&gt;

&lt;p&gt;public static final String J2DoPrivHelper.getLineSeparator()&lt;br/&gt;
{&lt;br/&gt;
        if (System.getSecurityManager() != null)&lt;br/&gt;
        {&lt;br/&gt;
            return (Properties) AccessController&lt;br/&gt;
                    .doPrivileged(new PrivilegedAction()&lt;br/&gt;
                    {&lt;br/&gt;
                        public Object run ()&lt;/p&gt;
                        {
                            return System.getProperty(&quot;line.separator&quot;);
                        }
&lt;p&gt;                    });&lt;br/&gt;
        } else&lt;/p&gt;
        {
            return System.getProperty(&quot;line.separator&quot;);
        }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;These type of functions can also be cached in the helper for performance too.&lt;/p&gt;

&lt;p&gt;Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12501621" author="clr" created="Tue, 5 Jun 2007 18:28:59 +0100"  >&lt;p&gt;What the example code does is to allow any untrusted code with access to the J2DoPrivHelper class to get the value for the line separator. &lt;/p&gt;

&lt;p&gt;While this doesn&apos;t sound like a big deal, it&apos;s still violating the security model.&lt;/p&gt;

&lt;p&gt;A solution is to code this in the trusted code:&lt;br/&gt;
private static final String SEP = (Properties) AccessController.doPrivileged(&lt;br/&gt;
    J2DoPrivHelper.getLineSeparatorAction());&lt;/p&gt;

&lt;p&gt;And then the helper class is responsible for:&lt;br/&gt;
public static PrivilegedAction getLineSeparatorAction() {&lt;br/&gt;
    return new PrivilegedAction() {&lt;br/&gt;
                       public Object run () &lt;/p&gt;
                        { 
                            return System.getProperty(&quot;line.separator&quot;); 
                        } 
&lt;p&gt;                    }); &lt;br/&gt;
}&lt;/p&gt;</comment>
                            <comment id="12501638" author="mitesh" created="Tue, 5 Jun 2007 19:02:45 +0100"  >&lt;p&gt;&amp;gt;What is possible is to hide the nasty mechanical construction of a new instance of the anonymous inner class by a wrapper method.&lt;/p&gt;

&lt;p&gt;Here is an example for invoking a method reflectively &lt;/p&gt;

&lt;p&gt;                try &lt;/p&gt;
{
                    AccessController.doPrivileged(new PrivilegedMethodInvoker(method, null, args));
                }
&lt;p&gt; catch (PrivilegedActionException exception) &lt;/p&gt;
{
                    Exception throwableException = exception.getException();
                }

&lt;p&gt;where PrivilegedMethodInvoker is as follows&lt;/p&gt;

&lt;p&gt;public class PrivilegedMethodInvoker implements PrivilegedExceptionAction {&lt;/p&gt;

&lt;p&gt;    private Method method;&lt;br/&gt;
    private Object target;&lt;br/&gt;
    private Object[] args;&lt;/p&gt;

&lt;p&gt;    public PrivilegedMethodInvoker(Method method, Object target, Object[] args)&lt;/p&gt;
{
        this.method = method;
        this.target = target;
        this.args = args;
    }

&lt;p&gt;    public Object run() throws IllegalAccessException, InvocationTargetException &lt;/p&gt;
{
        return PrivilegedAccessHelper.invokeMethod(method, target, args);
    }

&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="12502379" author="allee8285" created="Thu, 7 Jun 2007 16:15:44 +0100"  >&lt;p&gt;Having specific function(s) in J2DoPrivHelp that required doPriv is to isolate common access function without security exposure and hopefully improve performance. Since there is no user parameters allowed by the helpers, even the getLineSeparator() is public, user is only allowed to get the lineSeparator string and no other resources security leak.&lt;/p&gt;

&lt;p&gt;The wrapper method approach is to provide means to create the Privilege(Exception)Action object but the doPrivileged will still be in-lined in the openjpa code to avoid undesirable security exposure. &lt;/p&gt;

&lt;p&gt;Here is a new proposal:&lt;/p&gt;

&lt;p&gt;1) The J2DoPrivHelper defines the common security safe functions and PrivilegedAction getters (example):&lt;/p&gt;

&lt;p&gt;       public static final String getLineSeparator();&lt;br/&gt;
       public static final Object getOtherSpecificSecuritySafeResource();&lt;br/&gt;
       .......&lt;/p&gt;

&lt;p&gt;       public static final PrivilegedAction getClassLoaderAction(final ClassLoader loader);&lt;br/&gt;
       public static final PrivilegedExceptionAction getDeclaredMethodAction(final Class clazz, final String name, final Class[] parameterTypes);&lt;br/&gt;
       .......&lt;/p&gt;

&lt;p&gt;2)  J2DoPrivHelper usage:&lt;/p&gt;

&lt;p&gt;       private static final String SEP = J2DoPrivHelper.getLineSeparator(); &lt;/p&gt;

&lt;p&gt;       ClassLoader loader = (ClassLoader) AccessController.doPrivileged( J2DoPrivHelper.getClassLoaderAction( clazz ) );&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
              AccessController.doPrivileged(J2DoPrivHelper.getDeclaredMethodAction( clazz, name, args));
        }
&lt;p&gt; catch (PrivilegedActionException exception) &lt;/p&gt;
{
               NoSuchMethodException ex = (NoSuchMethodException)exception.getException();
        }
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;3) If there is any situation where testing security is enabled before the doPriv pattern is used, it will need to be in-lined in user code.&lt;/p&gt;

&lt;p&gt;Please comment and indicate if this is an acceptable solution.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;br/&gt;
Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12502397" author="pcl" created="Thu, 7 Jun 2007 17:00:28 +0100"  >&lt;p&gt;I think that an important design goal here is minimal invasiveness into the code. Java 2 security is something that many of us have never seen as an issue in practice, so ensuring that the security-friendly mechanisms are just as easy to use as the unfriendly versions is pretty important IMO.&lt;/p&gt;

&lt;p&gt;Additionally, I&apos;m concerned about the extra overhead incurred by these calls, which makes  me think that caching might be a good idea.&lt;/p&gt;

&lt;p&gt;Given that you demonstrate in point 2 above that it is legit to cache the return values of the security-wrapping calls, can we achieve better encapsulation? For example, why not just have a J2DoPrivHelper.getDeclaredMethod() call that does the right thing internally?&lt;/p&gt;</comment>
                            <comment id="12502399" author="pcl" created="Thu, 7 Jun 2007 17:01:52 +0100"  >&lt;p&gt;Additionally, from a performance standpoint, it seems like we should make the J2DoPrivHelper methods non-static, create an interface, and provide access to the instance via the OpenJPAConfiguration object. This will allow us to have an impl that doesn&apos;t do security checks at all and a separate impl that does the security checks.&lt;/p&gt;</comment>
                            <comment id="12502455" author="allee8285" created="Thu, 7 Jun 2007 19:07:58 +0100"  >&lt;p&gt;&amp;gt;&amp;gt;  I think that an important design goal here is minimal invasiveness into the code. Java 2 security is something that many of us have never seen as an issue in practice, so ensuring that the security-friendly mechanisms are just as easy to use as the unfriendly versions is pretty important IMO. &lt;/p&gt;

&lt;p&gt;I agree with you.  This is one of the goal set right from the beginning. See the first comment .&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;  Additionally, I&apos;m concerned about the extra overhead incurred by these calls, which makes me think that caching might be a good idea. &lt;/p&gt;

&lt;p&gt;We have also considered and discussed the performance aspects. There will be 2 extra calls, i.e. AccessController and PrivelegedAction.run if security is enabled.  This can not be avoid.  However the JIT may optimize/in-line the call as the runtime is stablized.  Architectually, I agree making the helper methods non-static to encapsulate the doPriv wrapper function for the security disable scenario is desirable. However this will sill incur a minimum of 1 and 3 method calls for security disable and enable scernario respectively. e.g.    helper.getDeclaredMethod()     and helper.getDeclaredMethod() -&amp;gt; AccessController -&amp;gt; run().&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; Given that you demonstrate in point 2 above that it is legit to cache the return values of the security-wrapping calls, can we achieve better encapsulation? For example, why not just have a J2DoPrivHelper.getDeclaredMethod() call that does the right thing internally?&lt;/p&gt;

&lt;p&gt;If I hear you right, the sugguestion is to have all the doPriv processing in the J2DoPrivHelper.getDeclaredMethod().   This was the original proposal and Mitesh has pointed out that this is a security leak. See previous comment.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; Additionally, from a performance standpoint, it seems like we should make the J2DoPrivHelper methods non-static, create an interface, and provide access to the instance via the OpenJPAConfiguration object. This will allow us to have an impl that doesn&apos;t do security checks at all and a separate impl that does the security checks.&lt;/p&gt;

&lt;p&gt;Sounds good. &lt;/p&gt;

&lt;p&gt;I&apos;ll draft another proposal and post it back here soon.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;br/&gt;
Albert Lee&lt;/p&gt;</comment>
                            <comment id="12502515" author="pcl" created="Thu, 7 Jun 2007 22:11:12 +0100"  >&lt;p&gt;&amp;gt; &amp;gt; Given that you demonstrate in point 2 above that it is legit to cache the&lt;br/&gt;
&amp;gt; &amp;gt; return values of the security-wrapping calls, can we achieve better &lt;br/&gt;
&amp;gt; &amp;gt; encapsulation? For example, why not just have a J2DoPrivHelper.getDeclaredMethod()&lt;br/&gt;
&amp;gt; &amp;gt; call that does the right thing internally?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; If I hear you right, the sugguestion is to have all the doPriv processing in the &lt;br/&gt;
&amp;gt; J2DoPrivHelper.getDeclaredMethod().   This was the original proposal and Mitesh&lt;br/&gt;
&amp;gt; has pointed out that this is a security leak. See previous comment.&lt;/p&gt;

&lt;p&gt;... but it looks like your most recent proposal shares this leak, since it has methods like getLineSeparator(). We should either make all of the methods secure and consider it a goal to not allow that leak, or make all of the helper methods behave the same, no?&lt;/p&gt;

&lt;p&gt;-Patrick&lt;/p&gt;</comment>
                            <comment id="12502647" author="allee8285" created="Fri, 8 Jun 2007 06:03:52 +0100"  >&lt;p&gt;The getLineSeparator() will not compromise security because this function only return specifically the line.separator String and nothing else, hence there is no side effect. This method may cache the value for performance and better code readability and maintenance.&lt;/p&gt;

&lt;p&gt;In the original proposal, application can call one of the J2DoPrivHelper public methods which may grant user resource privileges on behalf of the caller, which is not good. If there is a resource requires privilege, the AccessController.doPrivileged() must be in-line in the openjpa code base, but the &quot;new Privilege(Exception)Action&quot; can be common or factor out.  Even if the doPrivilege() is inlined, one must also be careful not to allow any public method to be accessed by the application with user specified resource that eventually grant privilege to access the resource.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; Additionally, from a performance standpoint, it seems like we should make the J2DoPrivHelper methods non-static, create an interface, and provide access to the instance via the OpenJPAConfiguration object. This will allow us to have an impl that doesn&apos;t do security checks at all and a separate impl that does the security checks.&lt;/p&gt;

&lt;p&gt;&amp;gt;Sounds good. &lt;/p&gt;

&lt;p&gt;After some thought on this topics, I just realized that use of interface will not work. The same reason as just described. The interface can only get the PrivilegedAction because the doPriv must be in-lined. E.g.&lt;/p&gt;

&lt;p&gt;The use cases are:&lt;/p&gt;

&lt;p&gt;   private static final String SEP = J2DoPrivHelper.getLineSeparator();&lt;/p&gt;

&lt;p&gt;   ClassLoader loader = (ClassLoader) (System.getSecurityManager() == null)&lt;br/&gt;
                            ? clazz.getClassLoader()&lt;br/&gt;
                            : AccessController.doPrivileged( J2DoPrivHelper.getClassLoaderAction( clazz ) );&lt;/p&gt;

&lt;p&gt;   try&lt;br/&gt;
   &lt;/p&gt;
{
       method = ( System.getSecurityManager() == null )
                   ? clazz.getDeclaredMethod(name,parameterType)
                   : (Method) AccessController.doPrivileged( J2DoPrivHelper.getDeclaredMethodAction( clazz, name, parameterType) );
   }
&lt;p&gt; catch( PrivilegedActionException pae )&lt;/p&gt;
   {
           throws (NoSuchMethodException)pae.getException()
   }


</comment>
                            <comment id="12509131" author="allee8285" created="Fri, 29 Jun 2007 16:37:23 +0100"  >&lt;p&gt;Based on the previous design/implementation discussions. attached is a fix to enable Java 2 security in openjpa implementation.&lt;/p&gt;

&lt;p&gt;Tested platforms&lt;br/&gt;
----------------&lt;br/&gt;
Basic tests runs on Win32 system and have verified on WebSphere Application Server with security both disabled/enabled.&lt;/p&gt;

&lt;p&gt;Test profile option&lt;br/&gt;
-------------------&lt;br/&gt;
A new profile &apos;enabled-security&apos; is added to openjpa pom.xml to enable running tests with security on. The default is seourity off. &lt;/p&gt;

&lt;p&gt;E.g. To run test with security on, &lt;br/&gt;
   mvn test -P enabled-security,test-derby&lt;/p&gt;

&lt;p&gt;TCK &lt;br/&gt;
&amp;#8212;&lt;br/&gt;
Tests passed and no regression.&lt;/p&gt;

&lt;p&gt;Performance&lt;br/&gt;
-----------&lt;br/&gt;
Overall no difference when security is off but showed a 8.4% degradation with security on.&lt;/p&gt;

&lt;p&gt;1) Results: base revision run before any changes were made.&lt;br/&gt;
            &amp;gt; mvn test &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Reactor Summary:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA ............................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.016s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Utilities ..................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;6.718s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Kernel ........................................ SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;3.532s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JDBC .......................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.328s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA XML Store ..................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.047s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Kernel 1.5 .................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.078s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA ........................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.078s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JDBC 1.5 ...................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.031s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA JDBC ...................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;1:10.547s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Aggregate Jar ................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;1.547s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Distribution .................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.141s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Integration Tests ............................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Examples Integration Tests .................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA TCK Integration Tests ..................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Xmlmapping 1.5 ................................ SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.015s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Persistence Examples .......................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.031s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; BUILD SUCCESSFUL&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Total time: 1 minute 23 seconds&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Finished at: Fri Jun 29 10:18:45 CDT 2007&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Final Memory: 10M/28M&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;2) Results: base revision plus patch applied, run with default security disabled.&lt;br/&gt;
            &amp;gt; mvn test &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Reactor Summary:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA ............................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Utilities ..................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;7.718s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Kernel ........................................ SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;3.625s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JDBC .......................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.407s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA XML Store ..................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.031s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Kernel 1.5 .................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.094s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA ........................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.093s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JDBC 1.5 ...................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.032s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA JDBC ...................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;1:09.453s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Aggregate Jar ................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;1.156s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Distribution .................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.125s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Integration Tests ............................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Examples Integration Tests .................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA TCK Integration Tests ..................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Xmlmapping 1.5 ................................ SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.031s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Persistence Examples .......................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.032s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; BUILD SUCCESSFUL&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Total time: 1 minute 23 seconds&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Finished at: Fri Jun 29 09:30:18 CDT 2007&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Final Memory: 10M/23M&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;3) Results: base revision plus patch applied, run with security enabled.&lt;br/&gt;
            &amp;gt; mvn test -P enable-security,test-derby&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Reactor Summary:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA ............................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.016s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Utilities ..................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;7.969s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Kernel ........................................ SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;3.234s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JDBC .......................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.438s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA XML Store ..................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.093s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Kernel 1.5 .................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.110s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA ........................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.078s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JDBC 1.5 ...................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.047s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA JDBC ...................................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;1:16.312s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Aggregate Jar ................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;2.094s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Distribution .................................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.125s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Integration Tests ............................. SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Examples Integration Tests .................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA JPA TCK Integration Tests ..................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.000s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Xmlmapping 1.5 ................................ SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.016s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; OpenJPA Persistence Examples .......................... SUCCESS &lt;span class=&quot;error&quot;&gt;&amp;#91;0.046s&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; BUILD SUCCESSFUL&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Total time: 1 minute 30 seconds&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Finished at: Fri Jun 29 09:39:55 CDT 2007&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; Final Memory: 10M/23M&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12509204" author="mprudhom" created="Fri, 29 Jun 2007 22:16:13 +0100"  >&lt;p&gt;After quick review, the patch looks good to me. Anyone else have any opinions an committing it?&lt;/p&gt;</comment>
                            <comment id="12509220" author="clr" created="Sat, 30 Jun 2007 00:24:42 +0100"  >&lt;p&gt;I&apos;m reviewing it right now. Will be done in an hour.&lt;/p&gt;</comment>
                            <comment id="12509227" author="clr" created="Sat, 30 Jun 2007 01:43:58 +0100"  >&lt;p&gt;Very nice piece of work, Albert.&lt;/p&gt;

&lt;p&gt;The original patch should be removed since it&apos;s no longer valid.&lt;/p&gt;

&lt;p&gt;Just a few comments on the patch itself.&lt;/p&gt;

&lt;p&gt;1. Typos in javadoc for almost all the methods in J2DoPrivHelper, e.g. &lt;br/&gt;
PrivilegeExceptionAction should be PrivilegedExceptionAction&lt;/p&gt;

&lt;p&gt;2. The cases where you call  this.getClass().getClassLoader()) don&apos;t need to be wrapped in a doPrivileged block. &lt;/p&gt;

&lt;p&gt;(From the javadoc of getClassLoader, If a security manager is present, and the caller&apos;s class loader is not null and the caller&apos;s class loader is not the same as or an ancestor of the class loader for the class whose class loader is requested, then this method calls the security manager&apos;s checkPermission method with a RuntimePermission(&quot;getClassLoader&quot;) permission to ensure it&apos;s ok to access the class loader for the class.)&lt;/p&gt;

&lt;p&gt;3. In openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java&lt;br/&gt;
you might have missed this case:&lt;br/&gt;
@@ -238,12 +246,18 @@&lt;br/&gt;
             if (loader == THREAD_LOADER)&lt;br/&gt;
                 loader = Thread.currentThread().getContextClassLoader();&lt;/p&gt;

&lt;p&gt;4. Several cases of try or catch with the { on the following line instead of on the same line.&lt;/p&gt;

&lt;p&gt;5. In openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java&lt;/p&gt;

&lt;p&gt;don&apos;t you need to have a doPrivileged around f.length() ? The javadoc would suggest so.&lt;/p&gt;

&lt;p&gt;6. javadoc typos in newFIleOutputStreamAction methods in J2Helper class&lt;/p&gt;

&lt;p&gt;7. I don&apos;t understand the rationale for newInstanceOfAction. I guess I don&apos;t know what a BCClass is and why its behavior is different from Class.&lt;/p&gt;</comment>
                            <comment id="12509610" author="allee8285" created="Mon, 2 Jul 2007 17:36:32 +0100"  >&lt;p&gt;Craig, Thanks for the detailed review.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 1. Typos in javadoc for almost all the methods in J2DoPrivHelper, e.g.&lt;br/&gt;
PrivilegeExceptionAction should be PrivilegedExceptionAction&lt;/p&gt;

&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 2. The cases where you call this.getClass().getClassLoader()) don&apos;t need to be wrapped in a doPrivileged block.&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; (From the javadoc of getClassLoader, If a security manager is present, and the caller&apos;s class loader is not null and the caller&apos;s class loader is not the same as or an ancestor of the class loader for the class whose class loader is requested, then this method calls the security manager&apos;s checkPermission method with a RuntimePermission(&quot;getClassLoader&quot;) permission to ensure it&apos;s ok to access the class loader for the class.)&lt;/p&gt;

&lt;p&gt;Done. There are 14 instances that can take advantage of these performance short-cut.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 3. In openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java&lt;br/&gt;
you might have missed this case:&lt;br/&gt;
&amp;gt;&amp;gt; @@ -238,12 +246,18 @@&lt;br/&gt;
             if (loader == THREAD_LOADER)&lt;br/&gt;
                 loader = Thread.currentThread().getContextClassLoader();&lt;/p&gt;

&lt;p&gt;Good eye.. Done.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 4. Several cases of try or catch with the { on the following line instead of on the same line.&lt;/p&gt;

&lt;p&gt;All fixed up&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 5. In openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java&lt;br/&gt;
&amp;gt;&amp;gt; &lt;br/&gt;
&amp;gt;&amp;gt; don&apos;t you need to have a doPrivileged around f.length() ? The javadoc would suggest so.&lt;/p&gt;

&lt;p&gt;You are correct. Somehow I don&apos;t get any security exception even without the doPriv wrapping. I have added a new lengthAction and &quot;do the right thing&quot; now.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 6. javadoc typos in newFIleOutputStreamAction methods in J2Helper class&lt;/p&gt;

&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 7. I don&apos;t understand the rationale for newInstanceOfAction. I guess I don&apos;t know what a BCClass is and why its behavior is different from Class. &lt;/p&gt;

&lt;p&gt;The BCClass is from serp and it needs getClassLoader permission to perform some privileged operations. Since we cannot instrument the doPriv wrapping in Serp, we delegated and moved up the doPriv in OpenJPA code base, hence the need for the 2 newCodeAction and isInstanceOfAction.&lt;/p&gt;

&lt;p&gt;Thank everyone&apos;s input to enable the security feature in openjpa. &lt;/p&gt;

&lt;p&gt;If there is no further comments, we&apos;ll commit this changes. This completed and concluded Jira-244.&lt;/p&gt;

&lt;p&gt;Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12509632" author="clr" created="Mon, 2 Jul 2007 18:52:15 +0100"  >&lt;p&gt;&amp;gt;&amp;gt; 3. In openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java you might have missed this case: &lt;br/&gt;
&amp;gt;&amp;gt; @@ -238,12 +246,18 @@ &lt;br/&gt;
&amp;gt;&amp;gt;             if (loader == THREAD_LOADER) &lt;br/&gt;
&amp;gt;&amp;gt;                 loader = Thread.currentThread().getContextClassLoader(); &lt;/p&gt;

&lt;p&gt;&amp;gt;Good eye.. Done. &lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 5. In openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java don&apos;t you need to have a doPrivileged around f.length() ? The javadoc would suggest so. &lt;/p&gt;

&lt;p&gt;&amp;gt; You are correct. Somehow I don&apos;t get any security exception even without the doPriv wrapping. I have added a new lengthAction and &quot;do the right thing&quot; now. &lt;/p&gt;

&lt;p&gt;My only concern now is that without the above changes, your tests ran correctly. Do you have a test bench where the caller is not privileged and the OpenJPA is privileged? One suspicious change is in the security permissions file: &lt;br/&gt;
+// ================================================================&lt;br/&gt;
+// The following permissions are needed to invoke the &apos;test&apos; target in OpenJPA maven build.&lt;br/&gt;
+grant &lt;/p&gt;
{
+  permission java.security.AllPermission;
+}
&lt;p&gt;;&lt;br/&gt;
+&lt;/p&gt;

&lt;p&gt;This would appear to grant everyone AllPermissions, which might explain why the tests all work. Can this be restricted to granting permission to just the test framework (javax.junit) and see what happens?&lt;/p&gt;
</comment>
                            <comment id="12509647" author="allee8285" created="Mon, 2 Jul 2007 20:25:59 +0100"  >&lt;p&gt;Craig,&lt;/p&gt;

&lt;p&gt;I wrote a small program to test the validity of the required permission for File.length() and it showed below that proper permission/doPriv is required for this method and it matches the javadoc description.&lt;/p&gt;

&lt;p&gt;------------------------------------------&lt;/p&gt;

&lt;p&gt;package test;&lt;br/&gt;
import java.io.File;&lt;br/&gt;
public class TestFileLength {&lt;br/&gt;
    public static void main(String[] args) &lt;/p&gt;
{
        File f = new File(&quot;C:\\a.workspace\\eclipse.workspace\\ejb3.serv1\\testSer\\src\\test\\TestFileLength.java&quot;);
        System.out.println(f.length());
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;C:\a.workspace\eclipse.workspace\ejb3.serv1\testSer\build\classes&amp;gt;type j2.security.test.policy&lt;br/&gt;
grant &lt;/p&gt;
{
     permission java.io.FilePermission       &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;,    &quot;read&quot;;
}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;C:\a.workspace\eclipse.workspace\ejb3.serv1\testSer\build\classes&amp;gt;java -cp . test.TestFileLength&lt;br/&gt;
1266&lt;/p&gt;

&lt;p&gt;C:\a.workspace\eclipse.workspace\ejb3.serv1\testSer\build\classes&amp;gt;java -cp . -Djava.security.manager test.TestFileLength&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.security.AccessControlException: Access denied (java.io.FilePermission C:\a.workspace\ec&lt;br/&gt;
lipse.workspace\ejb3.serv1\testSer\src\test\TestFileLength.java read)&lt;br/&gt;
        at java.security.AccessController.checkPermission(AccessController.java:104)&lt;br/&gt;
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:547)&lt;br/&gt;
        at java.lang.SecurityManager.checkRead(SecurityManager.java:886)&lt;br/&gt;
        at java.io.File.length(File.java:839)&lt;br/&gt;
        at test.TestFileLength.main(TestFileLength.java:38)&lt;/p&gt;

&lt;p&gt;C:\a.workspace\eclipse.workspace\ejb3.serv1\testSer\build\classes&amp;gt;java -cp . -Djava.security.manager -Djava.security.policy=j2.security.test.policy test.TestFileLength&lt;br/&gt;
1266&lt;/p&gt;

&lt;p&gt;C:\a.workspace\eclipse.workspace\ejb3.serv1\testSer\build\classes&amp;gt;&lt;br/&gt;
------------------------------------------&lt;/p&gt;

&lt;p&gt;May be the reason the tests passed before is because the first condition of the expression in XMLFileHandler is false and the f.length() is not evaluated.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (!f.exists() || f.length() == 0)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BTW, scanning for .length() in the source code one more time and I found another instance of _file.length() that needs the doPriv. I corrected the problem and a new patch is attached.&lt;/p&gt;

&lt;p&gt;Albert Lee.&lt;/p&gt;
</comment>
                            <comment id="12509685" author="clr" created="Mon, 2 Jul 2007 22:33:51 +0100"  >&lt;p&gt;Thanks for your attention to detail here. I&apos;m still concerned that the patch to the security policy file that grants all permissions to all code bases masks the issues. See my comments from earlier today 10:52 AM.&lt;/p&gt;

&lt;p&gt;Craig&lt;/p&gt;</comment>
                            <comment id="12509987" author="allee8285" created="Tue, 3 Jul 2007 20:13:26 +0100"  >&lt;p&gt;Craig,&lt;/p&gt;

&lt;p&gt;After some experimentation to narrow down the code bases and permissions required  for the test bucket, here is the refined policy:&lt;/p&gt;

&lt;p&gt;// derby code base&lt;br/&gt;
grant CodeBase &quot;file:///$&lt;/p&gt;
{user.home}/.m2/repository/org/apache/derby/derby/-&quot; {

    permission java.io.FilePermission           &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;,    &quot;read,write,delete&quot;;
    permission java.lang.RuntimePermission                          &quot;createClassLoader&quot;;
    permission java.util.PropertyPermission     &quot;derby.*&quot;,          &quot;read&quot;;
};&lt;br/&gt;
&lt;br/&gt;
// openjpa code base.&lt;br/&gt;
grant CodeBase &quot;file:///${test.basedir}/-&quot; {

    permission java.io.FilePermission           &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;,    &quot;read,write&quot;;
    permission java.io.SerializablePermission                       &quot;enableSubstitution&quot;;
    permission java.lang.RuntimePermission                          &quot;accessDeclaredMembers&quot;;
    permission java.lang.RuntimePermission                          &quot;createClassLoader&quot;;
    permission java.lang.RuntimePermission                          &quot;getClassLoader&quot;;
    permission java.lang.RuntimePermission                          &quot;setIO&quot;;
    permission java.lang.reflect.ReflectPermission                  &quot;suppressAccessChecks&quot;;
    permission java.util.PropertyPermission     &quot;*&quot;,                &quot;read,write&quot;;
};&lt;br/&gt;
&lt;br/&gt;
// depending packages code base, e.g junit, surefire etc.&lt;br/&gt;
grant CodeBase &quot;file:///${user.home}
&lt;p&gt;/.m2/repository/-&quot; &lt;/p&gt;
{

    permission java.io.FilePermission           &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;,    &quot;read,write&quot;;
    permission java.io.SerializablePermission                       &quot;enableSubstitution&quot;;
    permission java.lang.RuntimePermission                          &quot;accessDeclaredMembers&quot;;
    permission java.lang.RuntimePermission                          &quot;createClassLoader&quot;;
    permission java.lang.RuntimePermission                          &quot;getClassLoader&quot;;
    permission java.lang.RuntimePermission                          &quot;setContextClassLoader&quot;;
    permission java.lang.RuntimePermission                          &quot;setIO&quot;;
    permission java.lang.reflect.ReflectPermission                  &quot;suppressAccessChecks&quot;;
    permission java.util.PropertyPermission     &quot;*&quot;,                &quot;read,write&quot;;
}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;Attached is a new patch with this new policy.&lt;/p&gt;

&lt;p&gt;I hope this has addressed your concern.&lt;/p&gt;

&lt;p&gt;Albert Lee,&lt;/p&gt;</comment>
                            <comment id="12509990" author="clr" created="Tue, 3 Jul 2007 20:24:24 +0100"  >&lt;p&gt;Nice job. Ship it.&lt;/p&gt;

&lt;p&gt;Craig&lt;/p&gt;</comment>
                            <comment id="12510015" author="mprudhom" created="Tue, 3 Jul 2007 23:50:25 +0100"  >&lt;p&gt;I&apos;m re-opening the issue because it looks like there are at least a few secure calls that were missed. I ran a test by building a new rt.jar with a java.lang.SecurityException that extends java.lang.Exception (instead of java.lang.RuntimeException), and then compiling the openjpa classes with the new rt.jar in the bootclasspath, which does a nice job at finding all the calls to methods that might throw SecutiryException.&lt;/p&gt;

&lt;p&gt;For example, FieldMetaData.java:1477 contains the line &quot;Method[] methods = cls.getMethods()&quot;.&lt;/p&gt;

&lt;p&gt;Are these oversights, or is there some reason that these calls don&apos;t need to be wrapped in doPriv blocks?&lt;/p&gt;</comment>
                            <comment id="12510020" author="clr" created="Wed, 4 Jul 2007 00:36:45 +0100"  >&lt;p&gt;I almost commented on this earlier. I&apos;m not sure that the grant of CodeBase &quot;file:///$&lt;/p&gt;
{user.home}
&lt;p&gt;/.m2/repository/-&quot; { and grant CodeBase &quot;file:///$&lt;/p&gt;
{test.basedir}
&lt;p&gt;/-&quot; { are correct.&lt;/p&gt;

&lt;p&gt;The grants might mask the required grants in OpenJPA by &quot;catching&quot; the illegal access by the test case or the framework. &lt;/p&gt;

&lt;p&gt;Do we know why the test.basedir needs e.g. suppressAccessChecks? Do the test cases themselves use reflection?&lt;/p&gt;</comment>
                            <comment id="12510045" author="allee8285" created="Wed, 4 Jul 2007 03:29:04 +0100"  >&lt;p&gt;Marc,&lt;/p&gt;

&lt;p&gt;Finding &apos;ALL&apos; the security sensitive calls are tedious and error-prone. I probably have missed some along the way.&lt;/p&gt;

&lt;p&gt;I like your approach to get a more complete picture and catch them all.  I&apos;ll try to see if I can go through it one more time to be sure.&lt;/p&gt;

&lt;p&gt;Stay tune.&lt;br/&gt;
Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12510269" author="allee8285" created="Thu, 5 Jul 2007 04:24:39 +0100"  >&lt;p&gt;&amp;gt;&amp;gt; I&apos;m re-opening the issue because it looks like there are at least a few secure calls that were missed. I ran a test by building a new rt.jar with a java.lang.SecurityException that extends java.lang.Exception (instead of java.lang.RuntimeException), and then compiling the openjpa classes with the new rt.jar in the bootclasspath, which does a nice job at finding all the calls to methods that might throw SecutiryException.&lt;/p&gt;

&lt;p&gt;This is a reasonable technique to catch some/most of the methods.  If the calling method has a try {  } catch (Exception e)... bracket the security sensitive call, it will still compile without error.  I&apos;ll need to use some other means, in combination to this suggestion, to get a more complete picture.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; For example, FieldMetaData.java:1477 contains the line &quot;Method[] methods = cls.getMethods()&quot;.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; Are these oversights, or is there some reason that these calls don&apos;t need to be wrapped in doPriv blocks?&lt;/p&gt;

&lt;p&gt;There are a set of getter methods in Class.class, e.g. getMethod(s), getField(s), getClasses, getConstructor(s) etc.. documented to throw SecurityException. The contract for these methods are:&lt;/p&gt;

&lt;p&gt;-----------------------------&lt;br/&gt;
    SecurityException - If a security manager, s, is present and any of the following conditions is met:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;invocation of s.checkMemberAccess(this, Member.PUBLIC) denies access to the field&lt;/li&gt;
	&lt;li&gt;the caller&apos;s class loader is not the same as or an ancestor of the class loader for the current class and invocation of s.checkPackageAccess() denies access to the package of this class&lt;br/&gt;
-----------------------------&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The reason no doPriv is needed for these conditons are:&lt;br/&gt;
1) Since all these methods returns public/visible constructs, s.CheckMemberAccess(PUBLIC) will always pass with no exception.&lt;br/&gt;
2) If s.checkPackageAccess() is tested, we need to make sure the package of this class is not in java.security &apos;s &quot;package.access&quot; list. If it is, explicit permission must be specified in the policy, Typically, I only see &quot;sun.&quot; package is in this &quot;package.access&quot; list, therefore, we do not see any security violation for this condition.&lt;/p&gt;

&lt;p&gt;I&apos;m continuing to investigate and make sure no security sensitive method calls are missed. I&apos;ll leave the Jira report open for further required changes.&lt;/p&gt;

&lt;p&gt;Thanks Marc.&lt;br/&gt;
Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12510271" author="allee8285" created="Thu, 5 Jul 2007 04:42:19 +0100"  >&lt;p&gt;&amp;gt;&amp;gt; I almost commented on this earlier. I&apos;m not sure that the grant of CodeBase &quot;file:///$&lt;/p&gt;
{user.home}/.m2/repository/&lt;del&gt;&quot; { and grant CodeBase &quot;file:///${test.basedir}/&lt;/del&gt;&quot; { are correct.&lt;br/&gt;
&lt;br/&gt;
Typically a security exception stack looks something like this:&lt;br/&gt;
&lt;br/&gt;
java.security.AccessControlException: Access denied (java.util.PropertyPermission localRepository write)&lt;br/&gt;
        at java.security.AccessController.checkPermission(AccessController.java:104)&lt;br/&gt;
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:547)&lt;br/&gt;
        at java.lang.System.setProperty(System.java:385)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.setSystemProperties(SurefireBooter.java:624)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:692)&lt;br/&gt;
&lt;br/&gt;
or&lt;br/&gt;
&lt;br/&gt;
java.security.AccessControlException: Access denied (java.lang.reflect.ReflectPermission suppressAccessChecks)&lt;br/&gt;
        at java.security.AccessController.checkPermission(AccessController.java:104)&lt;br/&gt;
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:547)&lt;br/&gt;
        at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:119)&lt;br/&gt;
        at org.apache.openjpa.event.MethodLifecycleCallbacks.makeCallback(MethodLifecycleCallbacks.java:87)&lt;br/&gt;
        at org.apache.openjpa.event.LifecycleEventManager.makeCallbacks(LifecycleEventManager.java:329)&lt;br/&gt;
        at org.apache.openjpa.event.LifecycleEventManager.fireEvent(LifecycleEventManager.java:291)&lt;br/&gt;
        at org.apache.openjpa.kernel.BrokerImpl.fireLifecycleEvent(BrokerImpl.java:671)&lt;br/&gt;
        at org.apache.openjpa.kernel.BrokerImpl.persist(BrokerImpl.java:2393)&lt;br/&gt;
        at org.apache.openjpa.kernel.BrokerImpl.persist(BrokerImpl.java:2244)&lt;br/&gt;
        at org.apache.openjpa.kernel.DelegatingBroker.persist(DelegatingBroker.java:1010)&lt;br/&gt;
        at org.apache.openjpa.persistence.EntityManagerImpl.persist(EntityManagerImpl.java:541)&lt;br/&gt;
        at org.apache.openjpa.persistence.callbacks.TestExceptionsFromCallbacks.testPrePersistException(TestExceptionsFromCallbacks.java:50)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:615)&lt;br/&gt;
        at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
        at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
        at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
        at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:615)&lt;br/&gt;
        at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)&lt;br/&gt;
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)&lt;br/&gt;
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:122)&lt;br/&gt;
        at org.apache.maven.surefire.Surefire.run(Surefire.java:129)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:615)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:225)&lt;br/&gt;
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:747)&lt;br/&gt;
&lt;br/&gt;
The 3 major packages that needs security permission are org.apache.maven.surefire.&lt;b&gt;, junit.&lt;/b&gt; and org.apache.&lt;b&gt;.Test&lt;/b&gt;. The CodeBase &quot;file:///${user.home}
&lt;p&gt;/.m2/repository/-&quot; is for the first 2 package category and CodeBase &quot;file:///$&lt;/p&gt;
{test.basedir}
&lt;p&gt;/-&quot; is for the openjpa test cases. So the &apos;grant&apos;s are needed for these CodeBase. &lt;/p&gt;

&lt;p&gt;I can further narrow down the surefire and junit. However some of the openjpa tests use the same packages as the code (e.g. org.apache.openjpa.persistence.jdbc), so the grant codebase for the tests may not be specific just to the test packages.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; The grants might mask the required grants in OpenJPA by &quot;catching&quot; the illegal access by the test case or the framework.&lt;/p&gt;

&lt;p&gt;I agree, see reason before.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; Do we know why the test.basedir needs e.g. suppressAccessChecks? Do the test cases themselves use reflection?&lt;/p&gt;

&lt;p&gt;This is a oversight because AccessibleObject.setAccessible is not being bracketted with doPrive.  I&apos;ll get this fix.&lt;/p&gt;

&lt;p&gt;Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12518578" author="allee8285" created="Thu, 9 Aug 2007 00:55:33 +0100"  >&lt;p&gt;After a more comprehensive search, here is the second ( and hopefully last ) round of changes needed to enable Java 2 security.&lt;/p&gt;</comment>
                            <comment id="12518583" author="clr" created="Thu, 9 Aug 2007 01:22:07 +0100"  >&lt;p&gt;Looks good. Just a couple of comments:&lt;/p&gt;

&lt;p&gt;1. Lots of cases of white space differences. Here&apos;s an example:&lt;br/&gt;
Index: openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java	(revision 562121)&lt;br/&gt;
+++ openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java	(working copy)&lt;br/&gt;
@@ -14,7 +14,7 @@&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&lt;/li&gt;
	&lt;li&gt;KIND, either express or implied.  See the License for the&lt;/li&gt;
	&lt;li&gt;specific language governing permissions and limitations&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;* under the License.&lt;br/&gt;
+ * under the License.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have no objection to cleaning up white space (removing trailing spaces, converting tabs to spaces, etc.) but it should be a separate checkin with an innocuous &quot;Fixed white space&quot; comment.&lt;/p&gt;

&lt;p&gt;2. In file Index: openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java&lt;br/&gt;
should we define a new action for this case:&lt;br/&gt;
@@ -104,7 +105,12 @@&lt;br/&gt;
             throws IOException {&lt;br/&gt;
             super(delegate);&lt;br/&gt;
             _ctx = ctx;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;enableReplaceObject(true);&lt;br/&gt;
+            AccessController.doPrivileged(new PrivilegedAction() 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+                public Object run() {
+                    enableReplaceObject(true);
+                    return null;
+                }+            }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;);&lt;br/&gt;
         }&lt;br/&gt;
like J2DoPrivHelper.replaceObject()?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3. And the same for enableResolveObject?&lt;/p&gt;
</comment>
                            <comment id="12518820" author="allee8285" created="Thu, 9 Aug 2007 20:18:19 +0100"  >&lt;p&gt;Craig, &lt;/p&gt;

&lt;p&gt;Thanks for reviewing the patch.&lt;/p&gt;

&lt;p&gt;Regarding the Serialization changes that the enableReplaceObject PrivilegedAction is created in-line in the code and not in J2DoPrivHelper, the reasons are:&lt;/p&gt;

&lt;p&gt;1) PersistentObjectOutputStream extends ObjectOutputStream.&lt;br/&gt;
2) enabelReplaceObject is defined in ObjectOutputStream and is qualified as protected.&lt;br/&gt;
3) enabelReplaceObject is called in the PersistentObjectOutputStream constructor.&lt;br/&gt;
4) Initially, I had the following helper to get the enableReplaceObjectAction, &lt;/p&gt;

&lt;p&gt;    public static final PrivilegedAction enableReplaceObjectAction(&lt;br/&gt;
        final ObjectOutputStream oos, final boolean enable) {&lt;br/&gt;
        return new PrivilegedAction() {&lt;br/&gt;
            public Object run() &lt;/p&gt;
{
                oos.enableReplaceObject(enable);
                return null;
            }
&lt;p&gt;        };&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;but this will not compile due to:&lt;/p&gt;

&lt;p&gt;J2DoPrivHelper.java: enableReplaceObject(boolean) has protected access in java.io.ObjectOutputStream&lt;br/&gt;
                oos.enableReplaceObject(enable);&lt;br/&gt;
                   ^&lt;/p&gt;

&lt;p&gt;Hence the in-line alternative is used to perform the doPrivlege call.&lt;/p&gt;

&lt;p&gt;The same reason applies to the ObjectInputStream.enableResolveObject method call.&lt;/p&gt;

&lt;p&gt;Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12519012" author="kwsutter" created="Fri, 10 Aug 2007 14:05:33 +0100"  >&lt;p&gt;I believe Albert&apos;s patch that I just committed now resolves this Issue.  As Albert pointed out, hopefully we have found and fixed all of these java 2 security holes.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12361078" name="OPENJPA-244.patch" size="211892" author="allee8285" created="Tue, 3 Jul 2007 20:13:26 +0100"/>
                            <attachment id="12363452" name="OPENJPA.244-2.patch" size="92370" author="allee8285" created="Thu, 9 Aug 2007 00:55:33 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 3 Jun 2007 15:41:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>42029</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysw7z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>202568</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>