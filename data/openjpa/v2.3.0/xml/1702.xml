<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:34:00 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-1702/OPENJPA-1702.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-1702] UnsupportedOperationException caused in BrokerImpl during transaction commit processing.</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-1702</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;For a given scenario, which will be described in detail below, an UnsupportedOperationException occurs as follows:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - An exception occurred while ending the transaction.  This exception will be re-thrown.&lt;br/&gt;
&amp;lt;openjpa-1.2.3-SNAPSHOT-r422266:955388M nonfatal store error&amp;gt; org.apache.openjpa.util.StoreException: null&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1853)&lt;br/&gt;
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1369)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:877)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:513)&lt;br/&gt;
	at hat.tests.TestUnsupportedOp.commitTx(TestUnsupportedOp.java:44)&lt;br/&gt;
	at hat.tests.TestUnsupportedOp.test(TestUnsupportedOp.java:90)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:592)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:113)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:228)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:223)&lt;br/&gt;
	at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&lt;br/&gt;
Caused by: java.lang.UnsupportedOperationException&lt;br/&gt;
	at java.util.AbstractCollection.add(AbstractCollection.java:216)&lt;br/&gt;
	at java.util.AbstractCollection.addAll(AbstractCollection.java:318)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flushTransAdditions(BrokerImpl.java:2103)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flushAdditions(BrokerImpl.java:2086)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2000)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:1927)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1845)&lt;br/&gt;
	... 25 more&lt;/p&gt;



&lt;p&gt;Using the stack trace, and some particulars about the code path, I&apos;ve been able to recreate the UnsupportedOperationException. &#160;Let me first summarize what my test does, and then let me go into great details on how the issue occurs.&#160; My test does the following:&lt;/p&gt;

&lt;p&gt;1) My &quot;main&quot; code simply begins a tran, performs a query, and commits the tran.&lt;br/&gt;
2) I&apos;ve created a &apos;tran listener&apos; (i.e. an impl of org.apache.openjpa.event.TransactionListener) and in that &apos;listener&apos;, method &apos;beforeCommit&apos;, I dirty the entity queried/found in #1.&lt;br/&gt;
3) After my &apos;beforeCommit&apos; method returns, the UnsupportedOperationException is thrown.&lt;/p&gt;


&lt;p&gt;OK, that was the brief summary, for anyone else who cares to hear the gory details, lets dig in.....first, the exception stack shows the exception is hit here:&lt;/p&gt;


&lt;p&gt;Caused by: java.lang.UnsupportedOperationException&lt;br/&gt;
&#160; &#160;at java.util.AbstractCollection.add(AbstractCollection.java:68)&lt;br/&gt;
&#160; &#160;at java.util.AbstractCollection.addAll(AbstractCollection.java:87)&lt;br/&gt;
&#160; &#160;at&lt;br/&gt;
org.apache.openjpa.kernel.BrokerImpl.flushTransAdditions(BrokerImpl.java:2099) &lt;br/&gt;
&#160; &#160;at&lt;br/&gt;
org.apache.openjpa.kernel.BrokerImpl.flushAdditions(BrokerImpl.java:2086)&lt;br/&gt;
&#160; &#160;at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2000) &lt;/p&gt;


&lt;p&gt;So, lets look at the code around &apos;flush(BrokerImpl.java:2000)&apos;.&#160; To follow is line 2000 (the last line) and a number of lines proceeding it:&lt;/p&gt;


&lt;p&gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; if ((_transEventManager.hasFlushListeners()&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; || _transEventManager.hasEndListeners())&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &amp;amp;&amp;amp; (flush || reason == FLUSH_COMMIT)) {&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // fire events&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; mobjs = new ManagedObjectCollection(transactional);&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; if (reason == FLUSH_COMMIT&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &amp;amp;&amp;amp; _transEventManager.hasEndListeners()) {&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; fireTransactionEvent(new TransactionEvent(this, &lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; TransactionEvent.BEFORE_COMMIT, mobjs,&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; _persistedClss, _updatedClss, _deletedClss));&lt;/p&gt;

&lt;p&gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; flushAdditions(transactional, reason);&#160;&#160;&#160; &amp;lt;----- line 2000&lt;/p&gt;


&lt;p&gt;So, in order to get to this &apos;flushAdditions&apos;, you must have a &apos;listener&apos; (i.e. an impl of org.apache.openjpa.event.TransactionListener).&#160; OK, with that said, keep this &apos;listener&apos; idea in mind as we will come back to it.&lt;/p&gt;

&lt;p&gt;Continue to dig into the stack and going up two levels, we see that &apos;flushTransAdditions(BrokerImpl.java:2099)&apos; looks like this:&lt;/p&gt;

&lt;p&gt;&#160;&#160;&#160; private boolean flushTransAdditions(Collection transactional, int reason) {&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160; if (_transAdditions == null || _transAdditions.isEmpty())&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return false;&lt;/p&gt;

&lt;p&gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // keep local transactional list copy up to date&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160; transactional.addAll(_transAdditions);&#160;&#160; &amp;lt;----- line 2099&lt;/p&gt;

&lt;p&gt;There are two important things to note here:&lt;br/&gt;
1) &apos;transactional&apos; is a &apos;Collection&apos;.&lt;br/&gt;
2) the addAll will only be called depending on the state of &apos;_transAdditions&apos;.&lt;/p&gt;

&lt;p&gt;For #1, lets visit the javadoc for Collection.addAll and see why/when it throws the UnsupportedOperationException.....its states:&lt;/p&gt;

&lt;p&gt;&#160;&#160;&#160; * @throws UnsupportedOperationException if this collection does not&lt;br/&gt;
&#160;&#160;&#160;&#160; *&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; support the &amp;lt;tt&amp;gt;addAll&amp;lt;/tt&amp;gt; method.&lt;/p&gt;

&lt;p&gt;So, we know that the &apos;Collection&apos; is of a type which must not support addAll.&#160; This offers a clue and we should look to see at which points &apos;transactional&apos; could be defined as a &apos;Collection&apos; which doesn&apos;t support &apos;addAll&apos;.&#160; &apos;transactional&apos; is set in BrokerImpl at line 1946 which is here:&lt;/p&gt;

&lt;p&gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Collection transactional = getTransactionalStates();&lt;/p&gt;

&lt;p&gt;If we look at &apos;getTransactionalStates()&apos;, we can see that the method could return a Collections.EMPTY_SET (&apos;EmptySet&apos;):&lt;/p&gt;

&lt;p&gt;&#160;&#160;&#160; protected Collection getTransactionalStates() &lt;/p&gt;
{
&#160;&#160;&#160;&#160;&#160;&#160;&#160; if (!hasTransactionalObjects())
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return Collections.EMPTY_SET;
&#160;&#160;&#160;&#160;&#160;&#160;&#160; return _transCache.copy();
&#160;&#160;&#160; }

&lt;p&gt;An &apos;EmptySet.addAll&apos; eventually calls &apos;AbstractCollection.add&apos; which blatantly throws an UnsupportedOperationException (plus, and Collections.EMPTY_SET is immutable, so we should be adding to it anyway).&#160; So, we know we must have a case where &apos;transactional&apos; is an EmtpySet.&#160; One way this may occur is to only query objects as I&apos;ve done in step #1 of my test (i.e. I never dirty anything in step #1).&lt;/p&gt;

&lt;p&gt;Next, #2 offers another clue in that we need to look at the case where &apos;_transAdditions&apos; is not null and not empty.&#160; If we look in BorkerImpl at the places where &apos;_transAdditions&apos; is set, we can see things are added to it in the &apos;setDirty&apos; method.&#160; But, as we previously found, we are only querying objects, not making them dirty.&#160; So, how can we have &apos;transactional&apos; be an EmptySet, yet &apos;_transAdditions&apos; not null or empty?&#160; One way is to go back to the &apos;listener&apos; we discussed earlier and when the &apos;listener&apos; is called, have it dirty an entity.&#160; In so doing, the &apos;setDirty&apos; method will be called which will add elements to &apos;_transAdditions&apos; such that conditions are met to cause &apos;transactional.addAll&apos; to be called in &apos;flushTransAdditions&apos;.&#160; The ordering is basically like this:&lt;/p&gt;

&lt;p&gt;1) &apos;transactional&apos; is set to an EmptySet and the beginning of flush.&lt;br/&gt;
2) The &apos;listener&apos; is called later on in flush which dirties an entity.&#160; This causes &apos;_transAdditions&apos; to not be null or empty.&lt;br/&gt;
3) After the &apos;listener&apos; is called, flushTransAdditions is called where at which time &apos;addAll&apos;, and then &apos;add&apos;, is called on an EmptySet/AbstractCollection which returns the exception.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12467292">OPENJPA-1702</key>
            <summary>UnsupportedOperationException caused in BrokerImpl during transaction commit processing.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jpaheath">Heath Thomann</assignee>
                                    <reporter username="jpaheath">Heath Thomann</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Jun 2010 02:18:20 +0100</created>
                <updated>Wed, 5 Feb 2014 22:34:41 +0000</updated>
                            <resolved>Wed, 5 Feb 2014 22:34:41 +0000</resolved>
                                    <version>1.2.0</version>
                    <version>2.0.0</version>
                                    <fixVersion>2.1.0</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12880352" author="jpaheath" created="Fri, 18 Jun 2010 23:54:49 +0100"  >&lt;p&gt;I&apos;m providing a test (in a &apos;patch&apos; form), named &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-1702&quot; title=&quot;UnsupportedOperationException caused in BrokerImpl during transaction commit processing.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-1702&quot;&gt;&lt;del&gt;OPENJPA-1702&lt;/del&gt;&lt;/a&gt;-TEST.patch.txt, which will recreate the UnsupportedOperationException (UOE).  &lt;/p&gt;

&lt;p&gt;Looking at the comments within the &apos;test&apos; method, you will see that I provided a suggested change to fix the UOE.  However, as the remained of the test shows, after fixing the UOE I&apos;ve found that the updates made in &apos;beforeCommit&apos; processing are not persisted to the DB.  For now, I&apos;ll provide the test for those interested and will continue to dig into a complete fix.  &lt;br/&gt;
Also note that after fixing the UOE, if you change the test case to dirty the entity before the commit, the changes made in &apos;beforeCommit&apos; processing ARE persisted.  This may offer a clue.&lt;/p&gt;</comment>
                            <comment id="12886770" author="mikedd" created="Fri, 9 Jul 2010 18:08:20 +0100"  >&lt;p&gt;Hi Heath,&lt;/p&gt;

&lt;p&gt;Interesting issue. I found that creating a LinkedHashSet in BrokerImpl.getTransactionalStates() instead of flushTransAdditions() allows the changes to be committed (this makes the &apos;main&apos; set of dirty objects modifiable instead of the ones used for flushTransAdditions). Could you give this a try and see if it works for you? &lt;/p&gt;

</comment>
                    </comments>
                    <attachments>
                            <attachment id="12447503" name="OPENJPA-1702-TEST.patch.txt" size="5096" author="jpaheath" created="Fri, 18 Jun 2010 23:54:49 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 9 Jul 2010 17:08:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161953</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hz7oav:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>288907</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>