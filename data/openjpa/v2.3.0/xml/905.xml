<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:38:09 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-905/OPENJPA-905.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-905] org.apache.openjpa.persistence.kernel.TestProxies2</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-905</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description></description>
                <environment></environment>
        <key id="12414168">OPENJPA-905</key>
            <summary>org.apache.openjpa.persistence.kernel.TestProxies2</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12414167">OPENJPA-904</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mcconne">Tim McConnell</assignee>
                                    <reporter username="mcconne">Tim McConnell</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Feb 2009 02:00:14 +0000</created>
                <updated>Tue, 9 Mar 2010 18:31:08 +0000</updated>
                            <resolved>Thu, 12 Mar 2009 20:37:36 +0000</resolved>
                                    <version>1.2.2</version>
                    <version>1.3.0</version>
                    <version>2.0.0-M2</version>
                                    <fixVersion>2.0.0-M2</fixVersion>
                                    <component>jpa</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12670980" author="mcconne" created="Fri, 6 Feb 2009 02:00:34 +0000"  >&lt;p&gt;Running org.apache.openjpa.persistence.kernel.TestProxies2&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
62  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
140  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
140  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
140  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
156  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
187  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4062  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
63  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
141  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
141  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
141  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
157  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
204  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4110  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
47  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
141  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
172  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4078  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
47  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
141  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
172  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4094  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
47  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
281  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
281  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
281  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
297  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
328  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4250  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
47  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
141  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
172  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4110  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
47  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
140  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
172  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4047  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
47  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
140  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
172  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4062  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
47  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
141  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
172  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4078  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
0  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
46  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.5 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.genericObject&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
125  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.PCClassPC.serializableInterface&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
140  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.BlobTest.blob&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
171  TestConv  WARN   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.MetaData - OpenJPA cannot map field &quot;org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC.relSet&quot; efficiently.  It is of an unsupported type. The field value will be serialized to a BLOB by default.&lt;br/&gt;
4109  TestConv  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Enhance - Creating subclass for &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner, class org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder, class org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC&amp;#93;&lt;/span&gt;&quot;. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.&lt;br/&gt;
Tests run: 10, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 41.765 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
testChangeListOrder(org.apache.openjpa.persistence.kernel.TestProxies2)  Time elapsed: 4.125 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
junit.framework.AssertionFailedError: expected:&amp;lt;val1&amp;gt; but was:&amp;lt;val3&amp;gt;&lt;br/&gt;
	at junit.framework.Assert.fail(Assert.java:47)&lt;br/&gt;
	at junit.framework.Assert.failNotEquals(Assert.java:282)&lt;br/&gt;
	at junit.framework.Assert.assertEquals(Assert.java:64)&lt;br/&gt;
	at junit.framework.Assert.assertEquals(Assert.java:71)&lt;br/&gt;
	at org.apache.openjpa.persistence.kernel.TestProxies2.testChangeListOrder(TestProxies2.java:435)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
	at org.apache.openjpa.persistence.test.PersistenceTestCase.runBare(PersistenceTestCase.java:443)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at org.apache.openjpa.persistence.test.PersistenceTestCase.run(PersistenceTestCase.java:173)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at sun.reflect.GeneratedMethodAccessor50.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213)&lt;br/&gt;
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)&lt;br/&gt;
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)&lt;br/&gt;
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:334)&lt;br/&gt;
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:980)&lt;/p&gt;</comment>
                            <comment id="12676093" author="mcconne" created="Mon, 23 Feb 2009 22:23:36 +0000"  >&lt;p&gt;Attached patch to validate content of list without assuming certain order upon database retrieval. Tested on Derby, DB2, PostgreSQL.&lt;/p&gt;</comment>
                            <comment id="12680738" author="allee8285" created="Wed, 11 Mar 2009 03:22:52 +0000"  >&lt;p&gt;The spec docuemnt that:&lt;/p&gt;

&lt;p&gt;2.1.1 Persistent Fields and Properties&lt;br/&gt;
Collection-valued persistent fields and properties must be defined in terms of one of the following collection-&lt;br/&gt;
valued interfaces regardless of whether the entity class otherwise adheres to the JavaBeans&lt;br/&gt;
method conventions noted above and whether field or property-based access is used:&lt;br/&gt;
java.util.Collection, java.util.Set, java.util.List&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;, java.util.Map.&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; Portable applications should not expect the order of lists to be maintained across persistence contexts unless the OrderBy construct&lt;br/&gt;
is used and the modifications to the list observe the specified ordering. The order is not otherwise persistent.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; The implementation type may be used by the application to initialize fields or properties before the entity is made persistent; subsequent&lt;br/&gt;
access must be through the interface type once the entity becomes managed (or detached).&lt;/p&gt;

&lt;p&gt;So you are correct that the test is not quite correct. However the change has negated the intent of the test and become not quite meaningful.&lt;br/&gt;
I would suggest the following:&lt;/p&gt;

&lt;p&gt;1) &lt;br/&gt;
public class ProxiesPC implements Comparable {&lt;/p&gt;

&lt;p&gt;    @PersistentCollection&lt;br/&gt;
    @OrderBy   // &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;  enforce ordering of the List&amp;lt;String&amp;gt;&lt;br/&gt;
    private List&amp;lt;String&amp;gt; list = new ArrayList();&lt;/p&gt;

&lt;p&gt;2)&lt;br/&gt;
public class TestProxies2 extends BaseKernelTest {&lt;/p&gt;

&lt;p&gt;    public void testChangeListOrder() {&lt;/p&gt;

&lt;p&gt;        // re-retrieve to check ordering&lt;br/&gt;
        pm = getPM(false, false);&lt;br/&gt;
        pc = pm.find(ProxiesPC.class, _oid);&lt;/p&gt;

&lt;p&gt;        list = pc.getList();&lt;br/&gt;
        assertEquals(5, list.size());&lt;br/&gt;
        assertEquals(&quot;val1&quot;, list.get(0));&lt;br/&gt;
        assertEquals(&quot;val1&quot;, list.get(1));&lt;br/&gt;
        assertEquals(&quot;val2&quot;, list.get(2));   //  &amp;lt;&amp;lt;&amp;lt;&amp;lt; make sure it is in the expected order after remove/add&lt;br/&gt;
        assertEquals(&quot;val3&quot;, list.get(3));&lt;br/&gt;
        assertEquals(&quot;val3&quot;, list.get(4));&lt;/p&gt;

&lt;p&gt;If you think this is correct, can you please erify this patch works against the databases that had problems?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Albert Lee.&lt;/p&gt;</comment>
                            <comment id="12681145" author="mcconne" created="Thu, 12 Mar 2009 02:26:15 +0000"  >&lt;p&gt;Hi Albert, thanks for reviewing. I agree and have attached a new patch, which I&apos;ve tested on Derby, DB2, and PostgreSQL. It was only failing on PostgreSQL before but wanted to ensure it didn&apos;t break anything.....&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12402008" name="OPENJPA-905_2.patch" size="1738" author="mcconne" created="Thu, 12 Mar 2009 02:26:15 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 11 Mar 2009 03:22:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161205</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12310041" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Patch Info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10042"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hz7lvj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>288514</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>