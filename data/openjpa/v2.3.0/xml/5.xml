<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:37:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-5/OPENJPA-5.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-5] OpenJPA doesn&apos;t compile with JDBC 4</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-5</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Patrick opines:&lt;br/&gt;
OpenJPA implements Statement, ResultSet, Connection, and maybe a&lt;br/&gt;
couple other JDBC interfaces. See&lt;br/&gt;
org.apache.openjpa.lib.jdbc.Delegating*. We do this for a number of&lt;br/&gt;
reasons: to resolve database-specific bugs in a transparent fashion, to&lt;br/&gt;
provide logging, to handle reference counting, etc.&lt;/p&gt;

&lt;p&gt;The pressing issue is that we must provide implementations of all of the&lt;br/&gt;
methods in the various java.sql interfaces. The fact that we do not&lt;br/&gt;
implement the new JDBC4 methods is why OpenJPA won&apos;t currently compile&lt;br/&gt;
against JDK6. This is pretty easy to fix; take a look at&lt;br/&gt;
org.apache.openjpa.lib.jdbc.DelegatingStatement to see how we handled&lt;br/&gt;
this for JDBC3. Since we know that we never invoke the new methods, we&lt;br/&gt;
can happily throw unsupported operation exceptions for the new methods.&lt;/p&gt;

&lt;p&gt;However, these unsupported methods do provide a challenge. While Kodo&lt;br/&gt;
doesn&apos;t use any of these methods, our mechanism for implementing them is&lt;br/&gt;
limiting, in that users who obtain Connections from Kodo will not be&lt;br/&gt;
able to use the new JDBC3/JDBC4 methods in their own code. Ideally, we&lt;br/&gt;
should provide some means for people to designate to OpenJPA that it&lt;br/&gt;
should use a dynamic proxy to implement the unimplemented methods. This&lt;br/&gt;
shouldn&apos;t be the default behavior, as the dynamic proxy will add&lt;br/&gt;
overhead, but certainly could be desirable for some. I&apos;ll file an issue.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12347020">OPENJPA-5</key>
            <summary>OpenJPA doesn&apos;t compile with JDBC 4</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="clr">Craig L Russell</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Aug 2006 06:24:53 +0100</created>
                <updated>Thu, 2 May 2013 03:29:05 +0100</updated>
                            <resolved>Mon, 8 Mar 2010 16:04:27 +0000</resolved>
                                    <version>0.9.0</version>
                    <version>0.9.6</version>
                                    <fixVersion>2.0.0-M3</fixVersion>
                                    <component>build / infrastructure</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12424841" author="mprudhom" created="Tue, 1 Aug 2006 13:13:41 +0100"  >&lt;p&gt;I think that unfortunately the only code-based solution to this will be to do some pre-processing on the source code by having formatted comments that surround JDBC3 and JDBC4 methods, similar to how DBCP does it (e.g, see &lt;a href=&quot;http://svn.apache.org/repos/asf/jakarta/commons/proper/dbcp/trunk/src/java/org/apache/commons/dbcp/DelegatingResultSet.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/jakarta/commons/proper/dbcp/trunk/src/java/org/apache/commons/dbcp/DelegatingResultSet.java&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;Another solution that would be pretty easy would just be to make all the Statement/PreparedStatement/ResultSet/Connection wrappers be abstract, and then use bytecode generation to create a concrete subclass implementation at runtime. This would have the advantage that we wouldn&apos;t need stubs or pre-processing, and since Java allows you to load a comcrete class that doesn&apos;t fully implement an interface, the generated subclass wouldn&apos;t need to have any logic in it at all. If we cache the generated classes, it would probably also be quite fast (after the first time). The only code change I can think of is that all &quot;new DelegatingStatement()&quot; type statements would need to be replaced with something like JDBCClassFactory.createConcreteWrapperSubclass(Statement) methods.&lt;/p&gt;</comment>
                            <comment id="12424912" author="pcl" created="Tue, 1 Aug 2006 17:15:29 +0100"  >&lt;p&gt;I think that merely adding the new methods should be sufficient for OpenJPA to compile against JDBC 4. I think that your solution describes the steps needed to make the new delegate methods actually work. That&apos;s issue &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-6&quot; title=&quot;OpenJPA doesn&amp;#39;t meaningfully implement JDBC3, JDBC4 methods in its delegates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-6&quot;&gt;&lt;del&gt;OPENJPA-6&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12425038" author="mprudhom" created="Tue, 1 Aug 2006 23:09:47 +0100"  >&lt;p&gt;The problem is that we can&apos;t add methods like &lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNClob(int,%20java.sql.NClob&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNClob(int,%20java.sql.NClob&lt;/a&gt;) , since NClob is a new interface in Java 1.6. So unless we make some sort of jar of stubs, or do code pre-processing, the only solution AFAIK is to use bytecode generation.&lt;/p&gt;

&lt;p&gt;Note that my solution could also make the methods actually work, but it would be a bit more difficult to implement. This is just something that would get it to compile under Java 1.6.&lt;/p&gt;</comment>
                            <comment id="12425050" author="pcl" created="Tue, 1 Aug 2006 23:52:02 +0100"  >&lt;p&gt;So it turns out that a dynamic-proxy-based approach is not as trivial as it could be, since we often create anonymous inner classes that extend various of the org.apache.openjpa.lib.jdbc.Delegating* classes.&lt;/p&gt;

&lt;p&gt;Craig alleges that Sun has made the JDBC4 jars available somewhere. It sounds like we either need to find their home in a maven repo, convince Sun to put them in a maven repo, or add the jar to a lib directory in openjpa.&lt;/p&gt;

&lt;p&gt;Does anyone know what JVM bytecode version the JDBC4 jars are compiled to? Ideally, it&apos;d be nice if they were compiled to the 1.3 VM level (47?).&lt;/p&gt;</comment>
                            <comment id="12425054" author="pcl" created="Wed, 2 Aug 2006 00:05:32 +0100"  >&lt;p&gt;I forgot to write up the other option that I see:&lt;/p&gt;

&lt;p&gt;We could replace the anonymous inner classes that extend Delegating* with anonymous inner classes that implement the corresponding JDBC interface, and then create some sort of interceptor-style interface that those classes are hydrated with. Imagine that a driver throws a bogus FooException from time to time when Connection.createStatement() is invoked. This could be fixed like so:&lt;/p&gt;

&lt;p&gt;Connection rawConnection = ...;&lt;/p&gt;

&lt;p&gt;Connection wrappedConnection = DelegateFactory.newConnection(&lt;br/&gt;
    new ConnectionInterceptor(rawConnection) {&lt;br/&gt;
        public Statement createStatement() throws SQLException {&lt;br/&gt;
            try &lt;/p&gt;
{
                return super.createStatement();
            }
&lt;p&gt;  catch (FooException fe) &lt;/p&gt;
{
                throw new SQLException(fe);
            }
&lt;p&gt;        }&lt;br/&gt;
    });&lt;/p&gt;

&lt;p&gt;This is similar to our current approach, except that ConnectionInterceptor need not actually implement Connection, so we could just provide those methods that we actually use, and the DelegateFactory could in turn create a dynamic proxy that uses the ConnectionInterceptor.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12425073" author="mprudhom" created="Wed, 2 Aug 2006 01:44:27 +0100"  >&lt;p&gt;The dynamic proxy option is different from the bytecode generation option: the former requires that we algorithnmically create implementations of all the methods to do what our current DelegatingStatement/ResultSet/etc implementations do. With bytecode generation, all we would need to do is change &quot;public class DelegatingStatement&quot; to &quot;public abstract class DelegatingStatement&quot;, and then just change any constructor to instead call the factory method to create new instances. This can work for inner classes as well, but probably not anonymous inner classes (which I don&apos;t think we use for the JDBC wrappers anyway).&lt;/p&gt;

&lt;p&gt;The interceptor approach also sounds like it would work, although it would be a lot more effort to implement.&lt;/p&gt;

&lt;p&gt;Having a separate JDBC4 jar might also work, although I&apos;d be surprised if it was compiled with a bytecode version that can be understood by the Java 1.3 compiler. We might also have licensing issues with committing it to the Apache repository.&lt;/p&gt;</comment>
                            <comment id="12467529" author="kwsutter" created="Thu, 25 Jan 2007 20:32:33 +0000"  >&lt;p&gt;To follow on to one of Marc&apos;s earlier comments...  These updates to support the new JDBC 4 interfaces brings up another question.  What about the support for the new data types introduced by JDBC 4 (NCHAR, NVARCHAR, LONGNVARCHAR, NCLOB)?  Or, some of the new functionality provided by JDBC 4 (SQLException extensions, event listeners, etc).  &lt;/p&gt;

&lt;p&gt;There is a lot of overlap between &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-4&quot; title=&quot;build fails on Java 6&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-4&quot;&gt;&lt;del&gt;OPENJPA-4&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-5&quot; title=&quot;OpenJPA doesn&amp;#39;t compile with JDBC 4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-5&quot;&gt;&lt;del&gt;OPENJPA-5&lt;/del&gt;&lt;/a&gt;.  Are these new JDBC 4 features another new JIRA issue?  Maybe we have two main goals &amp;#8211; 1)  Is just to get us buildable and runnable in a JDK 6 (JDBC 4) environment, and 2) exploit the new functions provided by JDK 6 (JDBC 4).  Is (1) for &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-4&quot; title=&quot;build fails on Java 6&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-4&quot;&gt;&lt;del&gt;OPENJPA-4&lt;/del&gt;&lt;/a&gt; and (2) for &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-5&quot; title=&quot;OpenJPA doesn&amp;#39;t compile with JDBC 4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-5&quot;&gt;&lt;del&gt;OPENJPA-5&lt;/del&gt;&lt;/a&gt;?  The discussions seem be blurring the lines and I&apos;m just trying to get a handle on how much we&apos;re going to bite off with each JIRA Issue.  Thanks.&lt;/p&gt;</comment>
                            <comment id="12467623" author="mprudhom" created="Thu, 25 Jan 2007 20:42:48 +0000"  >&lt;p&gt;I feel that this issue is merely to make it possible for OpenJPA to be compilable against Java 6/JDBC 4.&lt;/p&gt;

&lt;p&gt;My personal opinion is that if we see new features in JDBC 4 that we want to take advantage of, a separate issue should be filed (with this issue as a dependency).&lt;/p&gt;</comment>
                            <comment id="12467626" author="kwsutter" created="Thu, 25 Jan 2007 20:49:14 +0000"  >&lt;p&gt;Oops...  We have so many of these JDBC 4 type Issues that I screwed up with my earlier comment.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I should have been referencing this Issue (&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-5&quot; title=&quot;OpenJPA doesn&amp;#39;t compile with JDBC 4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-5&quot;&gt;&lt;del&gt;OPENJPA-5&lt;/del&gt;&lt;/a&gt;) as the &quot;make it buildable&quot; Issue.  And, the &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-6&quot; title=&quot;OpenJPA doesn&amp;#39;t meaningfully implement JDBC3, JDBC4 methods in its delegates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-6&quot;&gt;&lt;del&gt;OPENJPA-6&lt;/del&gt;&lt;/a&gt; should be the &quot;exploitable&quot; Issue.  But, maybe Marc is right.  &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-6&quot; title=&quot;OpenJPA doesn&amp;#39;t meaningfully implement JDBC3, JDBC4 methods in its delegates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-6&quot;&gt;&lt;del&gt;OPENJPA-6&lt;/del&gt;&lt;/a&gt; could be used to make the Connection objects returned by OpenJPA more JDBC like.  And, then create a totally separate Issue for exploiting new JDBC 4 features.  I&apos;ll do that.&lt;/p&gt;</comment>
                            <comment id="12488557" author="mprudhom" created="Fri, 13 Apr 2007 03:29:20 +0100"  >&lt;p&gt;The attached patch solves this problem by making all the JDBC implementations abstract, and handles construction them using a new ConcreteClassGenerator class, which will synamically create a concrete subclass and return it. I&apos;ve been able to build and run all the tests under JDK 1.6 (which includes JDBC 4) after applying this patch.&lt;/p&gt;

&lt;p&gt;The instance construction is somewhat cumbersome, and loses some compiler validation, but as far as I can tell this is the only way to resolve the problem without having separate builds for JDK 1.5 and JDK 1.6.&lt;/p&gt;</comment>
                            <comment id="12489145" author="pcl" created="Mon, 16 Apr 2007 16:42:58 +0100"  >&lt;p&gt;We do similar work for mutable type proxies. Is there an opportunity to unify the two different mechanisms in some way? Also, we pre-build some mutable type proxy classes during our compilation to reduce initialization time; should we look at doing a similar thing here? Without significant build changes, we should at least be able to pre-build the JDK1.5 classes.&lt;/p&gt;</comment>
                            <comment id="12688306" author="ppoddar@apache.org" created="Mon, 23 Mar 2009 15:47:53 +0000"  >&lt;p&gt;The time for this change has come.&lt;/p&gt;

&lt;p&gt;JPA 2.0 requires quite a lot of compile-time annotation processing to support newly added meta-model related features (source code generation etc.). Two issues in this regard make JDK version dependecy a critical factor. &lt;br/&gt;
1. The spec requires generated meta-model classes to import javax.annotation.GeneratedValue. This is a JDK6 annotation. Does the spec implicitly saying that JPA2.0 applications require JDK6?&lt;br/&gt;
2. Annotation processing has gone through some core changes from JDK5 to JDK6. In JDK5 it is supported by a tool apt &amp;#8211; and a com.sun.* class library in tools.jar. While in JDK6 it is more closely bundled with javax.annotation package. Moreover, the lifecycle/API in apt vs. javax.annotation are not the same. It is possible to build two different implementations and switch based on available JDK version &amp;#8211; but is it worth the effort?&lt;/p&gt;

&lt;p&gt;Given that this important issue has been dormant for 2 years &amp;#8211; it is time to revive this thread.&lt;/p&gt;

&lt;p&gt;I have integrated Marc&apos;s patch (with few minor changes) and found that working locally with Slice test cases because a) Slice is not covered in Marc&apos;s patch and b) they heavily exercise construction of the JDBC counterparts of OpenJPA (which are the main focus of Marc&apos;s solution and dynamically generated in his approach). I will post the changes shortly. &lt;/p&gt;</comment>
                            <comment id="12688308" author="ppoddar@apache.org" created="Mon, 23 Mar 2009 15:56:34 +0000"  >&lt;p&gt;Patch to compile OpenJPA with JDK6. Makes implementations of JDBC artifacts abstract. Dynamically generates the concrete type. &lt;/p&gt;</comment>
                            <comment id="12688333" author="drwoods" created="Mon, 23 Mar 2009 17:17:31 +0000"  >&lt;p&gt;For #2, the @Generated annotation was implemented by Geronimo as part of the JEE5 spec in geronimo-annotation_1.0_spec-1.1.1&lt;/p&gt;</comment>
                            <comment id="12688354" author="mikedd" created="Mon, 23 Mar 2009 18:00:14 +0000"  >&lt;p&gt;Hi Pinaki. Looks like the new patch is missing ConcreteClassGenerator. Should we apply Marc&apos;s patch and then yours to give it a test drive? &lt;/p&gt;</comment>
                            <comment id="12688372" author="ppoddar@apache.org" created="Mon, 23 Mar 2009 18:46:28 +0000"  >&lt;p&gt;The previous &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-5&quot; title=&quot;OpenJPA doesn&amp;#39;t compile with JDBC 4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-5&quot;&gt;&lt;del&gt;OPENJPA-5&lt;/del&gt;&lt;/a&gt;.2.patch missed the new files.&lt;/p&gt;

&lt;p&gt;I faced some access protection issue with Marc&apos;s patch directly and surely the Slice was not covered.&lt;/p&gt;</comment>
                            <comment id="12689150" author="mikedd" created="Wed, 25 Mar 2009 16:25:30 +0000"  >&lt;p&gt;Full disclosure : I&apos;ve only built with the patch, I have not run any tests.&lt;/p&gt;

&lt;p&gt;Setting the compiler level to 1.6 in the root pom means that we won&apos;t compile with java 1.5 which was one of the main goals of Marc&apos;s patch. We&apos;ll need to set this back to 1.5 (which does at least compile) if we want to support using both versions. &lt;/p&gt;

&lt;p&gt;I don&apos;t think support for compiling with 1.5 is important anymore. From Sun&apos;s website JDK 5.0 will reach end of life October 30th 2009 which isn&apos;t really that far away. Introducing a lot of extra code (ConcreteClassGenerator) just adds extra complications with (IMHO) very little benefit. &lt;/p&gt;

&lt;p&gt;Just adding the required interfaces makes more sense to me.&lt;/p&gt;</comment>
                            <comment id="12715294" author="allee8285" created="Mon, 1 Jun 2009 23:52:09 +0100"  >&lt;p&gt;With Java security enabled, the following exception occurred:&lt;/p&gt;

&lt;p&gt;**Exception: Caught unexpected Exception during test execution.&lt;br/&gt;
    org.apache.openjpa.persistence.PersistenceException:There were errors initializing your configuration: java.lang.ExceptionInInitializerError&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.ConfiguringConnectionDecorator.(ConfiguringConnectionDecorator.java:49)&lt;br/&gt;
	at java.lang.J9VMInternals.initializeImpl(Native Method)&lt;br/&gt;
	at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)&lt;br/&gt;
	at org.apache.openjpa.jdbc.schema.DataSourceFactory.installDBDictionary(DataSourceFactory.java:211)&lt;br/&gt;
	at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:714)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:599)&lt;br/&gt;
	at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:288)&lt;br/&gt;
	at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1549)&lt;br/&gt;
	at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:700)&lt;br/&gt;
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:198)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:160)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:212)&lt;br/&gt;
	at com.ibm.ws.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:42)&lt;br/&gt;
	at com.ibm.ws.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:27)&lt;br/&gt;
	at suite.jpafvt.common.testvehicle.JPAFVTGenericBMTTestEJB.executeTestCase(JPAFVTGenericBMTTestEJB.java:85)&lt;br/&gt;
	at suite.r80.base.jpaspec.annoxml.ordercolumn.test.jee.ejb.EJSLocal0SLOrderColumnTestSLEJB_52ec6ee4.executeTestCase(EJSLocal0SLOrderColumnTestSLEJB_52ec6ee4.java)&lt;br/&gt;
	at suite.jpafvt.common.testvehicle.JPAFVTGenericEJBVehicleServlet.executeTestCase(JPAFVTGenericEJBVehicleServlet.java:58)&lt;br/&gt;
	at suite.jpafvt.common.testvehicle.AbstractJPATestServletVehicle.doPost(AbstractJPATestServletVehicle.java:102)&lt;br/&gt;
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:738)&lt;br/&gt;
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:831)&lt;br/&gt;
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1530)&lt;br/&gt;
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:829)&lt;br/&gt;
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:458)&lt;br/&gt;
	at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:175)&lt;br/&gt;
	at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3742)&lt;br/&gt;
	at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:276)&lt;br/&gt;
	at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:929)&lt;br/&gt;
	at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1580)&lt;br/&gt;
	at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:177)&lt;br/&gt;
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:455)&lt;br/&gt;
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:384)&lt;br/&gt;
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:288)&lt;br/&gt;
	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214)&lt;br/&gt;
	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113)&lt;br/&gt;
	at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165)&lt;br/&gt;
	at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)&lt;br/&gt;
	at com.ibm.io.async.AsyncChannelFuture$1.run(AsyncChannelFuture.java:205)&lt;br/&gt;
	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1550)&lt;br/&gt;
Caused by: java.security.AccessControlException: Access denied (java.lang.RuntimePermission getClassLoader)&lt;br/&gt;
	at java.security.AccessController.checkPermission(AccessController.java:108)&lt;br/&gt;
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)&lt;br/&gt;
	at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:211)&lt;br/&gt;
	at java.lang.Thread.getContextClassLoader(Thread.java:456)&lt;br/&gt;
	at serp.bytecode.Project.loadClass(Project.java:95)&lt;br/&gt;
	at serp.bytecode.Project.loadClass(Project.java:67)&lt;br/&gt;
	at org.apache.openjpa.lib.util.ConcreteClassGenerator.makeConcrete(ConcreteClassGenerator.java:61)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.ConfiguringConnectionDecorator.(ConfiguringConnectionDecorator.java:46)&lt;br/&gt;
	... 40 more&lt;/p&gt;

&lt;p&gt;and &lt;/p&gt;

&lt;p&gt;Caused by: java.security.AccessControlException: Access denied (java.lang.RuntimePermission createClassLoader)&lt;br/&gt;
	at java.security.AccessController.checkPermission(AccessController.java:108)&lt;br/&gt;
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)&lt;br/&gt;
	at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:211)&lt;br/&gt;
	at java.lang.SecurityManager.checkCreateClassLoader(SecurityManager.java:594)&lt;br/&gt;
	at java.lang.ClassLoader.(ClassLoader.java:143)&lt;br/&gt;
	at serp.bytecode.BCClassLoader.(BCClassLoader.java:25)&lt;br/&gt;
	at org.apache.openjpa.lib.util.ConcreteClassGenerator.makeConcrete(ConcreteClassGenerator.java:54)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.ConfiguringConnectionDecorator.(ConfiguringConnectionDecorator.java:46)&lt;br/&gt;
	... 40 more&lt;/p&gt;

&lt;p&gt;Need DoPrivilege() around the &quot;new BCClassLoader&quot; and &quot;project.loadClass()&quot;;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10020">
                    <name>Cloners</name>
                                                                <inwardlinks description="is cloned by">
                                        <issuelink>
            <issuekey id="12347021">OPENJPA-6</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12347017">OPENJPA-4</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12434718">OPENJPA-1285</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12421684">OPENJPA-1012</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12361292">OPENJPA-114</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12355476" name="OPENJPA-5.patch" size="71361" author="mprudhom" created="Fri, 13 Apr 2007 03:29:20 +0100"/>
                            <attachment id="12403441" name="openjpa-5.patch.2.txt" size="83184" author="ppoddar@apache.org" created="Mon, 23 Mar 2009 15:56:34 +0000"/>
                            <attachment id="12403450" name="openjpa-5.patch.3.txt" size="101578" author="ppoddar@apache.org" created="Mon, 23 Mar 2009 18:46:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Aug 2006 12:13:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160344</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt4gf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203902</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>