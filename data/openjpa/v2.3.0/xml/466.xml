<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:37:53 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-466/OPENJPA-466.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-466] Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-466</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Here&apos;s how I annotate the ID:&lt;br/&gt;
    @Id&lt;br/&gt;
    @SequenceGenerator(name = &quot;FooSeq&quot;, sequenceName = &quot;seq_foo&quot;, allocationSize = 20)&lt;br/&gt;
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;FooSeq&quot;)&lt;br/&gt;
    private Long id;&lt;/p&gt;

&lt;p&gt;Here&apos;s how I create the (Oracle) sequence:&lt;br/&gt;
CREATE SEQUENCE seq_foo START WITH 1 INCREMENT BY 1;&lt;/p&gt;

&lt;p&gt;I get a primary key unique constraint violated in a multithreaded app i.e. it doesn&apos;t happen in single-threaded!&lt;/p&gt;

&lt;p&gt;You can simply reproduce this error by either create blocking queue or blocking thread pool say size 5 to insert 10000+ object.&lt;/p&gt;</description>
                <environment>OpenJPA 1.0.0 (also tried 1.0.1 and 1.1.0-SNAPSHOT)&lt;br/&gt;
Oracle XE 10g (JDBC driver 10.2.0.3.0)&lt;br/&gt;
Windows XP Pro</environment>
        <key id="12384540">OPENJPA-466</key>
            <summary>Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="milosz">Milosz Tylenda</assignee>
                                    <reporter username="frankca">Frank Le</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 Dec 2007 02:40:28 +0000</created>
                <updated>Tue, 9 Mar 2010 18:31:00 +0000</updated>
                            <resolved>Sat, 31 Oct 2009 21:13:01 +0000</resolved>
                                    <version>1.0.0</version>
                    <version>1.0.1</version>
                    <version>1.1.0</version>
                    <version>1.2.0</version>
                                    <fixVersion>1.0.4</fixVersion>
                    <fixVersion>1.2.2</fixVersion>
                    <fixVersion>1.3.0</fixVersion>
                    <fixVersion>2.0.0-M3</fixVersion>
                                        <due></due>
                            <votes>5</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12572281" author="gmarkham" created="Mon, 25 Feb 2008 22:33:00 +0000"  >&lt;p&gt;I&apos;ve seen the same behavior using postgresql 8.2/8.3 and sequences and openjpa 1.0.1 and 1.0.2.&lt;/p&gt;</comment>
                            <comment id="12669924" author="jpullen" created="Tue, 3 Feb 2009 11:15:58 +0000"  >&lt;p&gt;is this issue resolved ? its pretty old and I am experiencing a similar error with version 1.2.0 and the priority is Blocker ?&lt;/p&gt;</comment>
                            <comment id="12670605" author="mcconne" created="Thu, 5 Feb 2009 02:20:47 +0000"  >&lt;p&gt;Hi Joe, I&apos;m trying to replicate the failure so that I can fix this problem. However, I&apos;m still unable to reproduce it. Are you only seeing it fail in a multi-threaded application ?? And if so, are both threads connected to the same database and/or using the same sequence ?? Thanks for any additional information. &lt;/p&gt;</comment>
                            <comment id="12671815" author="jpullen" created="Mon, 9 Feb 2009 11:42:50 +0000"  >&lt;p&gt;Hi Tim,&lt;/p&gt;

&lt;p&gt;Definately get the issue in a WebLogic multithreaded enviroment with 11g (RAC). The version of  OpenJPA used is 1.2.0.&lt;br/&gt;
The issues comes with more load (25-100 TPS). The application has about 25 entities all using seqs on the primary key.&lt;br/&gt;
The error is always on the flush. The seq cache is set to 100.&lt;/p&gt;

&lt;p&gt;The test cases are not mutilthreaded in our app, but maybe I try to get a working, or is that non working &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; test.&lt;br/&gt;
Do you have ideas where the problem lies ?&lt;/p&gt;</comment>
                            <comment id="12672404" author="mcconne" created="Tue, 10 Feb 2009 21:22:04 +0000"  >&lt;p&gt;Hi Joe, I think I&apos;m finally able to replicate this error !! I haven&apos;t run it yet on Oracle, but I&apos;m consistently able to get this failure using postgresql. Does this look similar to the error you&apos;re getting in Oracle ?? &lt;/p&gt;

&lt;p&gt;Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:742775 nonfatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: ERROR: duplicate key value violates unique constraint &quot;entity_employee_pkey&quot; &lt;/p&gt;
{prepstmnt 17832855 INSERT INTO ENTITY_EMPLOYEE (id, firstName, lastName, salary) VALUES (?, ?, ?, ?) [params=(int) 273350, (String) First_name_1628, (String) Last_name_1628, (float) 1628.0]}
&lt;p&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;code=0, state=23505&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="12672482" author="ppoddar@apache.org" created="Wed, 11 Feb 2009 02:25:47 +0000"  >&lt;p&gt;Is openjpa.Multithreaded configuration property is set to &apos;true&apos;? &lt;/p&gt;</comment>
                            <comment id="12672505" author="mcconne" created="Wed, 11 Feb 2009 04:39:03 +0000"  >&lt;p&gt;Hi Pinaki, in my postgresql testcase I&apos;m setting the openjpa.Multithreaded property in the setup() mehtod as below. Does this look correct ??&lt;/p&gt;

&lt;p&gt;    public void setUp() &lt;/p&gt;
{
        setUp(EntityPerson.class, 
                EntityEmployee.class, 
        	CLEAR_TABLES, &quot;openjpa.Multithreaded&quot;, &quot;true&quot;);
    }
</comment>
                            <comment id="12672606" author="joepullen" created="Wed, 11 Feb 2009 11:45:16 +0000"  >&lt;p&gt;Hi Tim,&lt;/p&gt;

&lt;p&gt;Looks similar to mine from oracle.&lt;/p&gt;

&lt;p&gt;]]&amp;gt;&amp;lt;/stack&amp;gt;&amp;lt;cause&amp;gt;&amp;lt;stack&amp;gt;&amp;lt;![CDATA[      &amp;lt;openjpa-1.2.0-r422266:683325 nonfatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: ORA-00001: unique constraint (P&lt;br/&gt;
OR.DSTA_PK) violated&lt;br/&gt;
 &lt;/p&gt;
{prepstmnt 97 INSERT INTO DIA_STATUSES (DSTA_ID, APPLICATION_ID, COMPONENT_NAME, STATUS_LEVEL, REFERENCE_ID, SOFTWARE_VERSION, TIME_STAMP, VERSION, DATE_CREATED, CREATED_BY, DAT
E_MODIFIED, MODIFIED_BY, PPPC_ID, PPRC_ID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) [params=(long) 230503, (String) JTX, (String) input, (short) 1, (null) null, (String)
 19-60-08, (Timestamp) 2009-02-10 17:15:05.49, (int) 1, (Timestamp) 2009-02-10 17:15:05.493, (String) weblogic, (Timestamp) 2009-02-10 17:15:05.493, (String) weblogic, (null) nul
l, (null) null]}
&lt;p&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;code=1, state=23000&amp;#93;&lt;/span&gt;&lt;br/&gt;
        at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4238)&lt;br/&gt;
        at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4203)&lt;br/&gt;
        at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:102)&lt;br/&gt;
        at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:72)&lt;br/&gt;
        at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:131)&lt;br/&gt;
        at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushInternal(PreparedStatementManagerImpl.java:89)&lt;br/&gt;
        at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flush(PreparedStatementManagerImpl.java:72)&lt;br/&gt;
        at org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager.flushPrimaryRow(OperationOrderUpdateManager.java:203)&lt;br/&gt;
        at org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager.flush(OperationOrderUpdateManager.java:89)&lt;br/&gt;
        at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:89)&lt;br/&gt;
        at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:72)&lt;br/&gt;
        at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:655)&lt;/p&gt;
</comment>
                            <comment id="12672608" author="joepullen" created="Wed, 11 Feb 2009 11:45:59 +0000"  >&lt;p&gt;tried with the openjpa.Multithreaded  as true for oracle and didnt help&lt;/p&gt;</comment>
                            <comment id="12672842" author="mcconne" created="Thu, 12 Feb 2009 00:51:35 +0000"  >&lt;p&gt;Hi again Joe, I can now replicate the problem on both postgresql and oracle databases. Here is the error I get on oracle. Now, I will determine the cause for each. Thanks for your help.....&lt;/p&gt;

&lt;p&gt;Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743437M nonfatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: ORA-00001: unique constraint (SYSTEM.SYS_C004001) violated&lt;br/&gt;
 &lt;/p&gt;
{prepstmnt 30673895 INSERT INTO ENTITY_PERSON (id, firstName, lastName) VALUES (?, ?, ?) [params=(int) 15662, (String) First_name_1011, (String) Last_name_1011]}
&lt;p&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;code=1, state=23000&amp;#93;&lt;/span&gt;&lt;br/&gt;
FailedObject: org.apache.openjpa.persistence.hightps.sequence.EntityPerson@114c8b6&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4244)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4209)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:102)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:127)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.batchOrExecuteRow(BatchingPreparedStatementManagerImpl.java:100)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushAndUpdate(BatchingPreparedStatementManagerImpl.java:84)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushInternal(PreparedStatementManagerImpl.java:93)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flush(PreparedStatementManagerImpl.java:81)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:549)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:106)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:59)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:89)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:630)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:130)&lt;br/&gt;
	... 15 more&lt;/p&gt;</comment>
                            <comment id="12673900" author="mcconne" created="Mon, 16 Feb 2009 15:17:53 +0000"  >&lt;p&gt;Failure for DB2 below. This was to demonstrate that it is not just a Oracle and PostgreSQL problem. There seems to be a thread-safe problem in OpenJPA for all databases that support native Sequences.&lt;/p&gt;

&lt;p&gt;testMultiThreadedLoad(org.apache.openjpa.persistence.hightps.sequence.TestSequence)  Time elapsed: 178.797 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!&lt;br/&gt;
org.apache.openjpa.persistence.hightps.sequence.TestSequence$ThreadingException: The 3 embedded errors occured in the execution of 8 iterations of 6 threads: &lt;span class=&quot;error&quot;&gt;&amp;#91;reflection invocation: (testMultiThreadedLoad)&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.mttest(TestSequence.java:466)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.mttest(TestSequence.java:360)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.mttest(TestSequence.java:310)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.mttest(TestSequence.java:304)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.testMultiThreadedLoad(TestSequence.java:255)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
	at org.apache.openjpa.persistence.test.PersistenceTestCase.runBare(PersistenceTestCase.java:443)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at org.apache.openjpa.persistence.test.PersistenceTestCase.run(PersistenceTestCase.java:173)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213)&lt;br/&gt;
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)&lt;br/&gt;
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)&lt;br/&gt;
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:334)&lt;br/&gt;
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:980)&lt;br/&gt;
Nested Throwable #1: org.apache.openjpa.persistence.hightps.sequence.TestSequence$ThreadingException: thread=Thread[reflection invocation: (testMultiThreadedLoad) &lt;span class=&quot;error&quot;&gt;&amp;#91;5 of 6&amp;#93;&lt;/span&gt;,5,main];threadNum=5;maxThreads=6;iteration=1;maxIterations=8&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$2.run(TestSequence.java:429)&lt;br/&gt;
Nested Throwable #1: java.lang.reflect.InvocationTargetException&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$1.run(TestSequence.java:363)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$2.run(TestSequence.java:422)&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M fatal store error&amp;gt; org.apache.openjpa.persistence.RollbackException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:530)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.createManyPersonsInSeparateTransactions(TestSequence.java:134)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.testMultiThreadedLoad(TestSequence.java:261)&lt;br/&gt;
	... 6 more&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M fatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2264)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2111)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2009)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1927)&lt;br/&gt;
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1451)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:895)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:519)&lt;br/&gt;
	... 8 more&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M nonfatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by &quot;1&quot; constrains table &quot;DB2ADMIN.ENTITY_PERSON&quot; from having duplicate rows for those columns.&lt;br/&gt;
FailedObject: prepstmnt 30057146 INSERT INTO ENTITY_PERSON (id, firstName, lastName) VALUES (?, ?, ?) &lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4244)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4209)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DB2Dictionary.newStoreException(DB2Dictionary.java:507)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:102)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushBatch(BatchingPreparedStatementManagerImpl.java:193)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:63)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:89)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:630)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:130)&lt;br/&gt;
	... 15 more&lt;br/&gt;
Caused by: com.ibm.db2.jcc.b.SQLException: One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by &quot;1&quot; constrains table &quot;DB2ADMIN.ENTITY_PERSON&quot; from having duplicate rows for those columns.&lt;br/&gt;
	at com.ibm.db2.jcc.b.ce.d(ce.java:975)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bd.k(bd.java:312)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bd.a(bd.java:61)&lt;br/&gt;
	at com.ibm.db2.jcc.a.r.a(r.java:64)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bq.c(bq.java:217)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.C(cf.java:1109)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.a(cf.java:1505)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.executeUpdate(cf.java:322)&lt;br/&gt;
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:269)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingPreparedStatement.executeUpdate(LoggingConnectionDecorator.java:981)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:269)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement.executeUpdate(JDBCStoreManager.java:1501)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.executeUpdate(PreparedStatementManagerImpl.java:249)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushSingleRow(BatchingPreparedStatementManagerImpl.java:215)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushBatch(BatchingPreparedStatementManagerImpl.java:154)&lt;br/&gt;
	... 20 more&lt;br/&gt;
Nested Throwable #2: org.apache.openjpa.persistence.hightps.sequence.TestSequence$ThreadingException: thread=Thread[reflection invocation: (testMultiThreadedLoad) &lt;span class=&quot;error&quot;&gt;&amp;#91;2 of 6&amp;#93;&lt;/span&gt;,5,main];threadNum=2;maxThreads=6;iteration=1;maxIterations=8&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$2.run(TestSequence.java:429)&lt;br/&gt;
Nested Throwable #1: java.lang.reflect.InvocationTargetException&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$1.run(TestSequence.java:363)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$2.run(TestSequence.java:422)&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M fatal store error&amp;gt; org.apache.openjpa.persistence.RollbackException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:530)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.createManyPersonsAndEmployeesInSeparateTransactions(TestSequence.java:179)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.testMultiThreadedLoad(TestSequence.java:267)&lt;br/&gt;
	... 6 more&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M fatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2264)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2111)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2009)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1927)&lt;br/&gt;
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1451)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:895)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:519)&lt;br/&gt;
	... 8 more&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M nonfatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: The current transaction has been rolled back because of a deadlock or timeout.  Reason code &quot;2&quot;.&lt;br/&gt;
FailedObject: prepstmnt 5148820 INSERT INTO ENTITY_EMPLOYEE (id, firstName, lastName, salary) VALUES (?, ?, ?, ?) &lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4244)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4209)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DB2Dictionary.newStoreException(DB2Dictionary.java:507)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:102)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushBatch(BatchingPreparedStatementManagerImpl.java:193)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:63)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:89)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:630)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:130)&lt;br/&gt;
	... 15 more&lt;br/&gt;
Caused by: com.ibm.db2.jcc.b.SQLException: The current transaction has been rolled back because of a deadlock or timeout.  Reason code &quot;2&quot;.&lt;br/&gt;
	at com.ibm.db2.jcc.b.ce.e(ce.java:1093)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bd.s(bd.java:678)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bd.k(bd.java:335)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bd.a(bd.java:61)&lt;br/&gt;
	at com.ibm.db2.jcc.a.r.a(r.java:64)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bq.c(bq.java:217)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.C(cf.java:1109)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.a(cf.java:1505)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.executeUpdate(cf.java:322)&lt;br/&gt;
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:269)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingPreparedStatement.executeUpdate(LoggingConnectionDecorator.java:981)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:269)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement.executeUpdate(JDBCStoreManager.java:1501)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.executeUpdate(PreparedStatementManagerImpl.java:249)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushSingleRow(BatchingPreparedStatementManagerImpl.java:215)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushBatch(BatchingPreparedStatementManagerImpl.java:154)&lt;br/&gt;
	... 20 more&lt;br/&gt;
Nested Throwable #3: org.apache.openjpa.persistence.hightps.sequence.TestSequence$ThreadingException: thread=Thread[reflection invocation: (testMultiThreadedLoad) &lt;span class=&quot;error&quot;&gt;&amp;#91;4 of 6&amp;#93;&lt;/span&gt;,5,main];threadNum=4;maxThreads=6;iteration=1;maxIterations=8&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$2.run(TestSequence.java:429)&lt;br/&gt;
Nested Throwable #1: java.lang.reflect.InvocationTargetException&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$1.run(TestSequence.java:363)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence$2.run(TestSequence.java:422)&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M fatal store error&amp;gt; org.apache.openjpa.persistence.RollbackException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:530)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.createManyPersonsAndEmployeesInSeparateTransactions(TestSequence.java:179)&lt;br/&gt;
	at org.apache.openjpa.persistence.hightps.sequence.TestSequence.testMultiThreadedLoad(TestSequence.java:267)&lt;br/&gt;
	... 6 more&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M fatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2264)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2111)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2009)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1927)&lt;br/&gt;
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1451)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:895)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:519)&lt;br/&gt;
	... 8 more&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:743836M nonfatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: The current transaction has been rolled back because of a deadlock or timeout.  Reason code &quot;2&quot;.&lt;br/&gt;
FailedObject: prepstmnt 6639365 INSERT INTO ENTITY_EMPLOYEE (id, firstName, lastName, salary) VALUES (?, ?, ?, ?) &lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4244)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4209)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DB2Dictionary.newStoreException(DB2Dictionary.java:507)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:102)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushBatch(BatchingPreparedStatementManagerImpl.java:193)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:63)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:89)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:630)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:130)&lt;br/&gt;
	... 15 more&lt;br/&gt;
Caused by: com.ibm.db2.jcc.b.SQLException: The current transaction has been rolled back because of a deadlock or timeout.  Reason code &quot;2&quot;.&lt;br/&gt;
	at com.ibm.db2.jcc.b.ce.e(ce.java:1093)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bd.s(bd.java:678)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bd.k(bd.java:335)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bd.a(bd.java:61)&lt;br/&gt;
	at com.ibm.db2.jcc.a.r.a(r.java:64)&lt;br/&gt;
	at com.ibm.db2.jcc.a.bq.c(bq.java:217)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.C(cf.java:1109)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.a(cf.java:1505)&lt;br/&gt;
	at com.ibm.db2.jcc.b.cf.executeUpdate(cf.java:322)&lt;br/&gt;
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:269)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingPreparedStatement.executeUpdate(LoggingConnectionDecorator.java:981)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:269)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement.executeUpdate(JDBCStoreManager.java:1501)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.executeUpdate(PreparedStatementManagerImpl.java:249)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushSingleRow(BatchingPreparedStatementManagerImpl.java:215)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushBatch(BatchingPreparedStatementManagerImpl.java:154)&lt;br/&gt;
	... 20 more&lt;/p&gt;</comment>
                            <comment id="12674088" author="mcconne" created="Tue, 17 Feb 2009 02:40:48 +0000"  >&lt;p&gt;The attached patch provides a testcase to demonstrate the failure on both PostgreSQL and Oracle, and likewise provides a fix for both PostgreSQL and Oracle. I would suggest that it be applied to both Trunk and the 1.2.x branch. Thanks&lt;/p&gt;</comment>
                            <comment id="12676381" author="joepullen" created="Tue, 24 Feb 2009 19:43:47 +0000"  >&lt;p&gt;Hi Tim, thanks for the patch I can guarantee to anyone who is using OpenJPA with a larger configuration (4 solaris machines with 24 core each) and oracle sequences that this patch is a MUST.&lt;br/&gt;
After testing with the patch our problems with duplicate pk from sequences have disappeared. Also the patch doesnt seem to have a major impact on performance.&lt;/p&gt;</comment>
                            <comment id="12677039" author="mcconne" created="Thu, 26 Feb 2009 15:27:03 +0000"  >&lt;p&gt;HI Joe, that&apos;s wonderful new !! Thanks much for verifying that it does it fact work for your configuration.....&lt;/p&gt;</comment>
                            <comment id="12677634" author="mcconne" created="Sat, 28 Feb 2009 03:04:25 +0000"  >&lt;p&gt;Closing since we now have verification that it fixes the problem.&lt;/p&gt;</comment>
                            <comment id="12693863" author="milosz" created="Mon, 30 Mar 2009 18:49:59 +0100"  >&lt;p&gt;Although the patch applied (synchronization on PreparedStatement within NativeJDBCSeq.getSequence) does a good job on reducing the likelihood of crash, I am afraid we are still not free from multi-threading issue. On my one-core laptop I am not able to reproduce this issue (even when I remove the patch) but I find the problem still exists in the AbstractJDBCSeq.next method. I am able to reproduce the exception when I insert Thread.yield():&lt;/p&gt;

&lt;p&gt;    public Object next(StoreContext ctx, ClassMetaData meta) {&lt;br/&gt;
        JDBCStore store = getStore(ctx);&lt;br/&gt;
        try &lt;/p&gt;
{
            current = nextInternal(store, (ClassMapping) meta);
            Thread.yield();
            return current;
        }
&lt;p&gt; catch (OpenJPAException ke) &lt;/p&gt;
{
            throw ke;
        } catch (SQLException se) {
            throw SQLExceptions.getStore(se, store.getDBDictionary());
        } catch (Exception e) {
            throw new StoreException(e);
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
This yield() simulates context switching in an real application. The context switch will actually seldom occur here but is possible to my knowledge. Also, I am able to reproduce the exception by adding some Thread.sleep calls instead of yield() but this is harder to reproduce.&lt;br/&gt;
&lt;br/&gt;
My suggestion is to remove the synchronization from NativeJDBCSeq.getSequence and modify AbstractJDBCSeq.next to something like the following:&lt;br/&gt;
&lt;br/&gt;
    public Object next(StoreContext ctx, ClassMetaData meta) {&lt;br/&gt;
        JDBCStore store = getStore(ctx);&lt;br/&gt;
        try {
                Object currentLocal = nextInternal(store, (ClassMapping) meta);
                current = currentLocal;
                return currentLocal;
        } catch (OpenJPAException ke) {
            throw ke;
        }
&lt;p&gt; catch (SQLException se) &lt;/p&gt;
{
            throw SQLExceptions.getStore(se, store.getDBDictionary());
        }
&lt;p&gt; catch (Exception e) &lt;/p&gt;
{
            throw new StoreException(e);
        }
&lt;p&gt;    }&lt;/p&gt;</comment>
                            <comment id="12703025" author="milosz" created="Mon, 27 Apr 2009 09:21:33 +0100"  >&lt;p&gt;The attached patch implements my suggestion. I think this is a better solution than we currently have because:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the multi-threading problem will be completely avoided to my knowledge&lt;/li&gt;
	&lt;li&gt;by removing synchronization from PreparedStatement execution we gain a bit of scalability.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am going to commit it unless somebody has objection.&lt;/p&gt;</comment>
                            <comment id="12708537" author="milosz" created="Tue, 12 May 2009 19:04:07 +0100"  >&lt;p&gt;I have applied the patch to trunk and 1.3.x branch.&lt;/p&gt;</comment>
                            <comment id="12709197" author="mcconne" created="Wed, 13 May 2009 23:56:34 +0100"  >&lt;p&gt;Hi Milosz, It&apos;s a little unclear to me how these changes will prevent duplicate sequence values. And actually, I can easily create duplicates with these changes in trunk using the postgreSQL database (by altering the number of entities created in the TestSequence testcase). See the error/exception messages below and look for &quot;duplicate key value violates unique constraint&quot;, which is indicative of duplicate sequences getting created. This appears to be a regression as these exceptions were eliminated using the previous patch.....&lt;/p&gt;

&lt;p&gt;-------------------------------------------------------&lt;br/&gt;
 T E S T S&lt;br/&gt;
-------------------------------------------------------&lt;br/&gt;
Running org.apache.openjpa.persistence.sequence.TestSequence&lt;br/&gt;
359  test  INFO   &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.JDBC - Using dictionary class &quot;org.apache.openjpa.jdbc.sql.PostgresDictionary&quot; (PostgreSQL 8.3.6 ,PostgreSQL Native Driver PostgreSQL 8.3 JDBC3 with SSL (build 603)).&lt;br/&gt;
1406  test  INFO   [reflection invocation: (testMultiThreadedNativeSequences) &lt;span class=&quot;error&quot;&gt;&amp;#91;6 of 6&amp;#93;&lt;/span&gt;] openjpa.Runtime - Starting OpenJPA 2.0.0-SNAPSHOT&lt;br/&gt;
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 361.859 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
testMultiThreadedNativeSequences(org.apache.openjpa.persistence.sequence.TestSequence)  Time elapsed: 361.765 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!&lt;br/&gt;
org.apache.openjpa.persistence.sequence.TestSequence$ThreadingException: The 1 embedded errors occured in the execution of 8 iterations of 6 threads: &lt;span class=&quot;error&quot;&gt;&amp;#91;reflection invocation: (testMultiThreadedNativeSequences)&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence.mttest(TestSequence.java:440)&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence.mttest(TestSequence.java:334)&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence.mttest(TestSequence.java:281)&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence.mttest(TestSequence.java:275)&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence.testMultiThreadedNativeSequences(TestSequence.java:66)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
	at org.apache.openjpa.persistence.test.PersistenceTestCase.runBare(PersistenceTestCase.java:465)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at org.apache.openjpa.persistence.test.PersistenceTestCase.run(PersistenceTestCase.java:181)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213)&lt;br/&gt;
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)&lt;br/&gt;
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)&lt;br/&gt;
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)&lt;br/&gt;
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)&lt;br/&gt;
Nested Throwable #1: org.apache.openjpa.persistence.sequence.TestSequence$ThreadingException: thread=Thread[reflection invocation: (testMultiThreadedNativeSequences) &lt;span class=&quot;error&quot;&gt;&amp;#91;1 of 6&amp;#93;&lt;/span&gt;,5,main];threadNum=1;maxThreads=6;iteration=2;maxIterations=8&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence$2.run(TestSequence.java:405)&lt;br/&gt;
Nested Throwable #1: java.lang.reflect.InvocationTargetException&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence$1.run(TestSequence.java:337)&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence$2.run(TestSequence.java:398)&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:774393M fatal store error&amp;gt; org.apache.openjpa.persistence.RollbackException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:559)&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence.createManyPersonsAndEmployeesInSeparateTransactions(TestSequence.java:191)&lt;br/&gt;
	at org.apache.openjpa.persistence.sequence.TestSequence.testMultiThreadedNativeSequences(TestSequence.java:78)&lt;br/&gt;
	... 6 more&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:774393M fatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2266)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2113)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2011)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1929)&lt;br/&gt;
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1453)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:895)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:548)&lt;br/&gt;
	... 8 more&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:774393M fatal general error&amp;gt; org.apache.openjpa.persistence.PersistenceException: ERROR: duplicate key value violates unique constraint &quot;entity_employee_pkey&quot; &lt;/p&gt;
{prepstmnt 24724157 INSERT INTO ENTITY_EMPLOYEE (id, firstName, lastName, salary) VALUES (?, ?, ?, ?) [params=(int) 256631, (String) 4_First_name_6912, (String) 4_Last_name_6912, (float) 6912.0]} &lt;span class=&quot;error&quot;&gt;&amp;#91;code=0, state=23505&amp;#93;&lt;/span&gt;&lt;br/&gt;
FailedObject: org.apache.openjpa.persistence.sequence.EntityEmployee@ff5a2b&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4383)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4342)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:102)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:72)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:141)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushAndUpdate(BatchingPreparedStatementManagerImpl.java:80)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushInternal(PreparedStatementManagerImpl.java:97)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flush(PreparedStatementManagerImpl.java:85)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:550)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:106)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:59)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:103)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:76)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:672)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:130)&lt;br/&gt;
	... 15 more&lt;br/&gt;
Caused by: org.apache.openjpa.lib.jdbc.ReportingSQLException: ERROR: duplicate key value violates unique constraint &quot;entity_employee_pkey&quot; {prepstmnt 24724157 INSERT INTO ENTITY_EMPLOYEE (id, firstName, lastName, salary) VALUES (?, ?, ?, ?) [params=(int) 256631, (String) 4_First_name_6912, (String) 4_Last_name_6912, (float) 6912.0]}
&lt;p&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;code=0, state=23505&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:236)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.access$700(LoggingConnectionDecorator.java:69)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingPreparedStatement.executeUpdate(LoggingConnectionDecorator.java:1080)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:286)&lt;br/&gt;
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:286)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement.executeUpdate(JDBCStoreManager.java:1579)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.executeUpdate(PreparedStatementManagerImpl.java:246)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:116)&lt;br/&gt;
	... 25 more&lt;/p&gt;


&lt;p&gt;Results :&lt;/p&gt;

&lt;p&gt;Tests in error: &lt;br/&gt;
  testMultiThreadedNativeSequences(org.apache.openjpa.persistence.sequence.TestSequence)&lt;/p&gt;

&lt;p&gt;Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; BUILD FAILURE&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; ------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; There are test failures.&lt;/p&gt;</comment>
                            <comment id="12709419" author="kwsutter" created="Thu, 14 May 2009 15:48:22 +0100"  >&lt;p&gt;Based on Tim&apos;s comments and test case failures, it doesn&apos;t look like this JIRA is completely resolved yet.  Milosz, please work with Tim to come to a common resolution.  Thanks.&lt;/p&gt;</comment>
                            <comment id="12709525" author="milosz" created="Thu, 14 May 2009 19:47:08 +0100"  >&lt;p&gt;Hi Tim, do you run the testcase on a multi-core CPU? What exactly is your change to the testcase?&lt;/p&gt;

&lt;p&gt;I am looking into this and will let know about my findings next week. If I can&apos;t help, I will roll my patch back or merge the both patches.&lt;/p&gt;

</comment>
                            <comment id="12709875" author="mcconne" created="Fri, 15 May 2009 16:22:47 +0100"  >&lt;p&gt;Hi Milosz, what I did was change the number of Entities, and number of threads to try to emulate Joe&apos;s environment. Try these settings at these lines below. Also, make sure you&apos;re using a database that supports native sequences (i.e., nextSequenceQuery in the dictionary &amp;#8211; Derby for example, does not).&lt;/p&gt;

&lt;p&gt;00042    private static final int NUMBER_ENTITIES = 30000;&lt;br/&gt;
00264    int iterations = 10;&lt;br/&gt;
00265    int threads = 12;&lt;/p&gt;</comment>
                            <comment id="12711689" author="milosz" created="Thu, 21 May 2009 17:58:25 +0100"  >&lt;p&gt;Hi Tim, is it possible that you make the following tests?&lt;/p&gt;

&lt;p&gt;1. Apply the volatile.patch, compile and run the test and see whether it changes anything.&lt;br/&gt;
2. If the above did not help, revert volatile.patch and try to reproduce the error on DB2 or Oracle, so we are sure it is not PostgreSQL fault.&lt;/p&gt;

</comment>
                            <comment id="12722759" author="milosz" created="Mon, 22 Jun 2009 19:52:16 +0100"  >&lt;p&gt;Maybe some volounteer could try reproducing this and if reproduced, try with volatile.patch. If not, I will restore the synchronization around PreparedStatement since I am not able to reproduce the issue with my system (Pentium M).&lt;/p&gt;</comment>
                            <comment id="12728844" author="mcconne" created="Wed, 8 Jul 2009 19:37:22 +0100"  >&lt;p&gt;Hi Milosz, I&apos;ll apply your volatile patch later today and let you know what  happens. Note though that the failure can I can reproduce the problem on DB2, Oracle, and PostgreSQL &amp;#8211; it&apos;s certainly not isolated to PostgreSQL. Talk later....&lt;/p&gt;</comment>
                            <comment id="12730114" author="mcconne" created="Sun, 12 Jul 2009 17:05:10 +0100"  >&lt;p&gt;Hi Milosz, here is what I&apos;ve done over the past couple days. I have two machines &amp;#8211; Windows XP, Windows 2003 &amp;#8211; each with MySQL (8.3 on one machine, 8.4 on the other machine), DB2 (8.2 and 9.5), and Oracle (10g on both) installed on them. To reproduce the original problem I use 25000 entities, 6 iterations, and 8 threads in the TestSequence test program. With these settings I can easily reproduce the failure on both machines on all three databases. Here are the results of the various patches attached to this JIRA. Note that I raised the number entities to 40000 to stress each patch (but still used 6 iterations and 8 threads):&lt;/p&gt;

&lt;p&gt;1. Patch &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-466&quot; title=&quot;Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-466&quot;&gt;&lt;del&gt;OPENJPA-466&lt;/del&gt;&lt;/a&gt; (attached by you with the change to AbstractJDBCSeq.java): Failures on all three databases on both machines. Note that the failures manifest themselves differently on each database. For example the failures on PostgreSQL show up as &lt;/p&gt;

&lt;p&gt;ERROR: duplicate key value violates unique constraint &lt;/p&gt;

&lt;p&gt;on Oracle as: ORA-00001: unique constraint (SYSTEM.SYS_C008294) violated&lt;/p&gt;

&lt;p&gt;and finally on DB2 as:  org.apache.openjpa.persistence.EntityExistsException: DB2 SQL error: SQLCODE: -803, SQLSTATE: 23505&lt;/p&gt;

&lt;p&gt;2. Patch volite.patch only (i.e., no other patches used): Failures on all three databases on both machines&lt;/p&gt;

&lt;p&gt;3. Patch &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-466&quot; title=&quot;Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-466&quot;&gt;&lt;del&gt;OPENJPA-466&lt;/del&gt;&lt;/a&gt;-SYNCHRONIZED.patch only (which is a modified version of my original patch but is what was originally committed to trunk): Success on all three databases on both machines.&lt;/p&gt;

&lt;p&gt;So here are my recommendations:&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-466&quot; title=&quot;Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-466&quot;&gt;&lt;del&gt;OPENJPA-466&lt;/del&gt;&lt;/a&gt;-SYNCHRONIZED patch works in all scenarios that I&apos;ve tested it in. More importantly, it fixed the original problem reported by the user, and has no adverse impact on performance. Please note as well that that user environment was an extremely large, high-volume, multi-threaded, multi-core installation. Not meaning to be overly brusque &amp;#8211; but it simply works in every scenario that it&apos;s been used it. Until or unless someone (other than me as I don&apos;t intend to spend any more time on this JIRA) can provide a scenario where it does not work it should be committed to trunk and retrofitted to all previous versions of OpenJPA, and any previously-committed patches should be reverted. Thanks much&lt;/p&gt;
</comment>
                            <comment id="12730321" author="drwoods" created="Mon, 13 Jul 2009 13:45:59 +0100"  >&lt;p&gt;Tim, not sure why you marked this as Resolved when your latest patch hasn&apos;t been committed yet.....&lt;/p&gt;</comment>
                            <comment id="12730370" author="mikedd" created="Mon, 13 Jul 2009 15:58:44 +0100"  >&lt;p&gt;I think we&apos;re up to date in trunk and 1.3.x now. Milosz, Frank  or Tim, if there are additional changes that need to be made please re-open the issue.&lt;/p&gt;

&lt;p&gt;Thanks for the patches and the time you spend debugging this problem Tim. &lt;/p&gt;</comment>
                            <comment id="12734743" author="milosz" created="Thu, 23 Jul 2009 20:25:26 +0100"  >&lt;p&gt;The volatile.patch was meant to be applied to what was on the trunk without any reverts so it is not a surprise that &quot;2. Patch volite.patch only (i.e., no other patches used): Failures on all three databases on both machines&quot;.&lt;/p&gt;

&lt;p&gt;I agree with applying the latest patch and resolving this. This is better that what we had before and it seems there is not enough interest in testing the patches.&lt;/p&gt;

&lt;p&gt;I do state however we just hid a multi-threading bug that can bite us later.&lt;/p&gt;</comment>
                            <comment id="12747077" author="bjreed" created="Mon, 24 Aug 2009 22:08:48 +0100"  >&lt;p&gt;Attached 2 patches to port necessary code back to 1.0.x and 1.2.x.&lt;/p&gt;</comment>
                            <comment id="12750419" author="drwoods" created="Wed, 2 Sep 2009 13:37:47 +0100"  >&lt;p&gt;add missing Fix versions of 1..0.4 and 1.2.2&lt;/p&gt;</comment>
                            <comment id="12759885" author="joepullen" created="Sat, 26 Sep 2009 12:55:05 +0100"  >&lt;p&gt;Today came back to this issue get the patch and was surprised that after the first fix there was more discussion. Just wanted to say from my view the original patch from Tim did the job perfectly.&lt;/p&gt;

&lt;p&gt;As Tim stated I can tell you that the original patch was def needed and helped solve a major issue with an application running on 4 T2000 Solaris machines (each with 64 cores, yes 256 cores !). This J2EE app has processed 10 millions of business transactions with throughput in peak of 100,000s business transactions (equals to 250,000 JTA and over a million SQL statements) per hour without a SINGLE duplicate primary key error related to sequences.&lt;/p&gt;</comment>
                            <comment id="12767388" author="ppoddar@apache.org" created="Mon, 19 Oct 2009 18:12:02 +0100"  >&lt;p&gt;The issue of sequence value creation under multithreaded environment is still relevant. &lt;br/&gt;
I ran a very simple tests that do the following &lt;br/&gt;
1. A entity with @GeneratedValue primary key&lt;br/&gt;
2. 4 threads that persist() entities in separate persistence contexts&lt;/p&gt;

&lt;p&gt;The test breaks with OPENJPA_SEQUENCE_TABLE being populated with duplicate key &amp;#8211; looks like a concurrency issue.&lt;/p&gt;</comment>
                            <comment id="12767389" author="ppoddar@apache.org" created="Mon, 19 Oct 2009 18:12:48 +0100"  >&lt;p&gt;The test was run onm MYSQL 5.3.&lt;/p&gt;</comment>
                            <comment id="12767390" author="ppoddar@apache.org" created="Mon, 19 Oct 2009 18:15:24 +0100"  >&lt;p&gt;A test and a entity to demonstrate the concurrency issue in sequence value generation.&lt;/p&gt;</comment>
                            <comment id="12770149" author="milosz" created="Mon, 26 Oct 2009 19:18:22 +0000"  >&lt;p&gt;I confirm the issue although I had to modify the test to call em.persist in a loop and be a bit patient.&lt;/p&gt;

&lt;p&gt;We are probably failing during OPENJPA_SEQUENCE_TABLE initialization, not during generating numbers from it.&lt;/p&gt;</comment>
                            <comment id="12772287" author="milosz" created="Sat, 31 Oct 2009 21:13:01 +0000"  >&lt;p&gt;I will create a new issue for the sequence table problem as it is loosely coupled with the original issue. I guess the sequence table failure is the known problem where multiple threads access an uninitailized emf, it has been reported on the users mailing list.&lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12439611">OPENJPA-1372</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12422577" name="GeneratedIdObject.java" size="513" author="ppoddar@apache.org" created="Mon, 19 Oct 2009 18:15:24 +0100"/>
                            <attachment id="12417527" name="OPENJPA-466-1.0.x.patch" size="30589" author="bjreed" created="Mon, 24 Aug 2009 22:08:48 +0100"/>
                            <attachment id="12417528" name="OPENJPA-466-1.2.x.patch" size="30591" author="bjreed" created="Mon, 24 Aug 2009 22:08:48 +0100"/>
                            <attachment id="12413238" name="OPENJPA-466-SYNCRONIZED.patch" size="694" author="mcconne" created="Sun, 12 Jul 2009 16:14:55 +0100"/>
                            <attachment id="12406496" name="OPENJPA-466.patch" size="1524" author="milosz" created="Mon, 27 Apr 2009 09:21:33 +0100"/>
                            <attachment id="12400305" name="OPENJPA-466.patch" size="29757" author="mcconne" created="Tue, 17 Feb 2009 02:40:48 +0000"/>
                            <attachment id="12422576" name="TestSequenceGenerationOnMT.java" size="1982" author="ppoddar@apache.org" created="Mon, 19 Oct 2009 18:15:24 +0100"/>
                            <attachment id="12408717" name="volatile.patch" size="570" author="milosz" created="Thu, 21 May 2009 17:58:25 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 25 Feb 2008 22:33:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>41868</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12310041" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Patch Info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10042"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysq53:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>201583</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>