<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:33:31 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-151/OPENJPA-151.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-151] Added field in enhanced vesrion of a class is not serialized. Hence the change in detached+serialized instances is not registered under certain conditions.  </title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-151</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Enhancement adds a transient byte member field pcFlags to the class. This field is originally used to optimize field access/mutation i.e. to short-circuit mediation via StateManager under certain conditions (e.g. when the field is part of the default fetch group). The field is transient, perhaps, to maintain serialization compatibility. However, later changes such as DetachedStateManager and improved attach strategies have made the usage of these flag redundant. &lt;/p&gt;

&lt;p&gt;This issue is a proposal to remove this field from the enhanced classes. The proposed change is initiated by the following observation:&lt;br/&gt;
1. class A has one-to-one relation to class B&lt;br/&gt;
2. an instance a of A is related to b1 of B. b2 is another instance of B.&lt;br/&gt;
3. a, b1, b2 are detached, serialized, transported over the wire, desrialized in a remote process as a*, b1* and b2*.&lt;br/&gt;
4. in the remote process a* is associated with b2*&lt;br/&gt;
5. a* is merged to the original process.&lt;/p&gt;

&lt;p&gt;The change is not persisted when OpenJPA kernel is used with a JDO facade. It works with JPA facade. &lt;br/&gt;
The initial analysis shows that the reason can be attributed to pcFlags and the optimization in enhanced classes based on to its value. Because pcFlags is not &lt;br/&gt;
serialized, in a* instance pcFlags has a value of 0. Hence, the mutation of a*&apos;s relation to b2* from b1* is not mediated via the StateManager (yes, the detached version was carrying its own StateManager). While merging the instance a* back, it was adjudged clean while actually it was dirty. In JPA facade, the enhancement process did not add the extra optimization for setter and so the cloned owner instance was righly marked dirty.  &lt;/p&gt;

&lt;p&gt;Please note that if this proposal is accepted by the community, it will require reenhancement of existing domain classes. The change will impact the internal StateManager and PersistenceCapable API (essentally removal of certain methods than any other behavioural change). &lt;/p&gt;



</description>
                <environment></environment>
        <key id="12362950">OPENJPA-151</key>
            <summary>Added field in enhanced vesrion of a class is not serialized. Hence the change in detached+serialized instances is not registered under certain conditions.  </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ppoddar@apache.org">Pinaki Poddar</assignee>
                                    <reporter username="ppoddar@apache.org">Pinaki Poddar</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Feb 2007 19:25:38 +0000</created>
                <updated>Tue, 9 Mar 2010 18:32:31 +0000</updated>
                            <resolved>Tue, 27 Feb 2007 19:17:38 +0000</resolved>
                                                    <fixVersion>0.9.7</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12475084" author="ppoddar@apache.org" created="Thu, 22 Feb 2007 17:08:30 +0000"  >&lt;p&gt;Prposed changes to remove pcFlags from enhanced classes&lt;/p&gt;

&lt;p&gt;i. remove pcFlags related interface method from PersistenceCapable and StateManager&lt;br/&gt;
ii. remove pcFlags related code generation from PCEnhancer&lt;/p&gt;


</comment>
                            <comment id="12475087" author="pcl" created="Thu, 22 Feb 2007 17:15:03 +0000"  >&lt;p&gt;&amp;gt; Please note that if this proposal is accepted by the community, it will require reenhancement &lt;br/&gt;
&amp;gt; of existing domain classes. The change will impact the internal StateManager and &lt;br/&gt;
&amp;gt; PersistenceCapable API (essentally removal of certain methods than any other behavioural &lt;br/&gt;
&amp;gt; change).&lt;/p&gt;

&lt;p&gt;Why will this require re-enhancement? The previously-enhanced classes will just have some extra methods that are no longer part of the interface.&lt;/p&gt;

&lt;p&gt;Classes enhanced with the new version will not work with older OpenJPA versions, though.&lt;/p&gt;</comment>
                            <comment id="12475093" author="awhite" created="Thu, 22 Feb 2007 17:26:12 +0000"  >&lt;p&gt;&amp;gt; Why will this require re-enhancement?&lt;/p&gt;

&lt;p&gt;We&apos;ll no longer be setting pcFlags values &amp;#8211; the callbacks won&apos;t even exist to do so.  Instances of classes that aren&apos;t re-enhanced will therefore never get their pcFlags set to LOAD_REQUIRED as needed to ensure their StateManagers are able to intercept all field access.&lt;/p&gt;</comment>
                            <comment id="12475097" author="awhite" created="Thu, 22 Feb 2007 17:31:11 +0000"  >&lt;p&gt;+1 on the patch from me.  Fixes a problem and gets rid of unneeded code baggage at the same time.  The re-enhancement isn&apos;t much of an issue to me &amp;#8211; we&apos;ve required re-enhancement for various upgrades in the past and it&apos;s never been an issue with users, surprisingly enough.  &lt;/p&gt;</comment>
                            <comment id="12475099" author="ppoddar@apache.org" created="Thu, 22 Feb 2007 17:40:32 +0000"  >&lt;p&gt;&amp;gt; Why will this require re-enhancement?&lt;br/&gt;
======================================================&lt;br/&gt;
Previous enhancement:&lt;br/&gt;
private static final void pcSetdepartment(Employee employee, Department department1) {&lt;br/&gt;
        if(employee.pcFlags == 0) &lt;/p&gt;
{
            employee.department = department1;
            return;
        }&lt;br/&gt;
        if(employee.pcStateManager == null) {
            employee.department = department1;
            return;
        }
&lt;p&gt; else &lt;/p&gt;
{
            employee.pcStateManager.settingObjectField(employee, pcInheritedFieldCount + 0, employee.department, department1, 0);
            return;
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
================================================&lt;br/&gt;
Enhanced version once pcFlags is removed:&lt;br/&gt;
&lt;br/&gt;
    private static final void pcSetdepartment(Employee employee, Department department1) {&lt;br/&gt;
        if(employee.pcStateManager == null) {
            employee.department = department1;
            return;
        } else {
            employee.pcStateManager.settingObjectField(employee, pcInheritedFieldCount + 0, employee.department, department1, 0);
            return;
        }
&lt;p&gt;    }&lt;br/&gt;
==================================================&lt;/p&gt;


&lt;p&gt;If the previous enhanced version is used, the behaviour of serialized domain class will remain unchanged even with new OpenJPA runtime (i.e. PC/SM interfaces without calling back on pcReplaceFlags()).&lt;/p&gt;

&lt;p&gt;But all this optimization to short-circuit StateManager mediation is only happening with JDO facade that too when the accessed field in not in default fetch group. &lt;/p&gt;</comment>
                            <comment id="12475100" author="pcl" created="Thu, 22 Feb 2007 17:44:37 +0000"  >&lt;p&gt;Maybe we should do something explicit to make sure that classes enhanced with the old enhancer can&apos;t load anymore. It sounds like currently, classes will just silently start to behave differently.&lt;/p&gt;</comment>
                            <comment id="12475144" author="ppoddar@apache.org" created="Thu, 22 Feb 2007 19:58:14 +0000"  >&lt;p&gt;One way is to add some extra checks on isPersistenceCapable() for the deprecated pcFlags() method and warn if the enhanced version is &quot;old&quot;. Or is that too arbitrary?  &lt;/p&gt;</comment>
                            <comment id="12475155" author="pcl" created="Thu, 22 Feb 2007 20:23:12 +0000"  >&lt;p&gt;Another would be to add a new getEnhancementContractVersion() method to the PersistenceCapable interface. This would cause immediate breakage of the old classes, since they don&apos;t have that method, and allow us to detect other subtle behavior changes in the future by checking that the version is compatible.&lt;/p&gt;</comment>
                            <comment id="12475179" author="ppoddar@apache.org" created="Thu, 22 Feb 2007 22:10:10 +0000"  >&lt;p&gt;Added a public int getEnhancementContractVersion() to all enhanced classes. &lt;br/&gt;
Please review these baby steps into bytecode manipulation.&lt;/p&gt;

&lt;p&gt;The diff also contains removal of pcFlags related changes.&lt;br/&gt;
It does not include the change in PersistenceCapable interface.&lt;/p&gt;


&lt;p&gt;1. Should the method be static?&lt;br/&gt;
2. The ENHANCER_VERSION is public static final in PCEnhncer. So the user can:&lt;/p&gt;

&lt;p&gt;     PersistenceCapable pc = ...&lt;br/&gt;
    if (pc.getEnhancementContractVersion() &amp;lt; PCEnhancer.ENHANCER_VERSION)&lt;br/&gt;
          // warn or throw exception       &lt;/p&gt;

&lt;p&gt;3. What is a good central location to add the above check? &lt;/p&gt;</comment>
                            <comment id="12475181" author="pcl" created="Thu, 22 Feb 2007 22:20:59 +0000"  >&lt;p&gt;&amp;gt; 1. Should the method be static? &lt;/p&gt;

&lt;p&gt;No; it should be part of the interface.&lt;/p&gt;

&lt;p&gt;The code looks good to me. Please make sure to run it through the Kodo test suites before committing, though &amp;#8211; sadly, we don&apos;t have as much enhancement coverage in the OpenJPA test suites as we should.&lt;/p&gt;</comment>
                            <comment id="12475190" author="clr" created="Thu, 22 Feb 2007 22:54:54 +0000"  >&lt;p&gt;I&apos;d avoid the method name getEnhancementContractVersion because this might be used by the class developer. I&apos;d suggest PRE+GetEnhancementContractVersion instead to avoid name conflicts.&lt;/p&gt;</comment>
                            <comment id="12476314" author="ppoddar@apache.org" created="Tue, 27 Feb 2007 19:17:38 +0000"  >&lt;p&gt;Fixed with SVN revision 511998: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=511998&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=511998&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12351841" name="PCEnhancer.AddVersion.Diff.txt" size="6142" author="ppoddar@apache.org" created="Thu, 22 Feb 2007 22:10:10 +0000"/>
                            <attachment id="12351825" name="diff.txt" size="10237" author="ppoddar@apache.org" created="Thu, 22 Feb 2007 17:08:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Feb 2007 17:15:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160484</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysyzz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203018</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>