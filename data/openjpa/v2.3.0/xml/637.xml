<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:36:38 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-637/OPENJPA-637.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-637] Significant performance degradation when data cache is enabled</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-637</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Performance testing is showing a severe data cache performance degradation when moving from 1.0.x OpenJPA code to 1.2.0 level code.  Profiling showed the problem to be in the new random eviction scheme which runs when the cache reaches its maximum number of entries.  This code was changed significantly when OpenJPA moved to Java 5 java.util.concurrent.ConcurrentHashMap and away from the OpenJPA implementation of ConcurrentHashMap.  A macro-benchmark showed a 20% performance degradation from base 1.2.0 code when the cache reaches its maximum size; prompting eviction in order to add new cache entries.&lt;/p&gt;

&lt;p&gt;I&apos;ve found that the new random eviction code appears to be improved in the very recent 666903 commit, but data cache performance remains considerably slower than the 1.0.x implementation.  Profiles with the 666903 changes show test threads to be waiting on the reentrant write lock in the CacheMap wrapper (which now wrappers a max size capable, null handling, subclass of java.util.concurrent.ConcurrentHashMap).  Investigation is underway to determine whether the write lock is necessary (ie. can java.util.conncurrentConcurrentHashMap manage the cache without the need for external locking) and/or if changes could be made which would result in a significant reduction in contention for the lock.  Any thoughts/ideas on that would be extremely helpful.&lt;/p&gt;

&lt;p&gt;Performance tests run with the 1.2.0 code base, using the OpenJPA version of ConcurrentHashMap (instead of the Java 5 java.util.concurrent.ConcurrentHashMap-based implementation) have shown that  performance of the data cache is significantly better when the legacy OpenJPA implementation is used.  Based on the results, it appears that OpenJPA should be using the the legacy ConcurrentHashMap instead of the Java 5-based implementation &amp;#8211; or the new Java 5-based implementation needs to be improved considerably in order to perform as well as 1.0.x.&lt;/p&gt;

&lt;p&gt;I am opening this as a 1.2.0 issue, although it very likely affects 1.1.x as well.  Testing has not been performed on 1.1.x to confirm the problem exists on that release.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12398364">OPENJPA-637</key>
            <summary>Significant performance degradation when data cache is enabled</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="techhusky">Jeremy Bauer</assignee>
                                    <reporter username="techhusky">Jeremy Bauer</reporter>
                        <labels>
                    </labels>
                <created>Mon, 16 Jun 2008 21:25:06 +0100</created>
                <updated>Tue, 9 Mar 2010 18:32:53 +0000</updated>
                            <resolved>Mon, 30 Jun 2008 19:37:11 +0100</resolved>
                                    <version>1.2.0</version>
                                    <fixVersion>1.2.0</fixVersion>
                                    <component>datacache</component>
                    <component>lib</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12605654" author="techhusky" created="Tue, 17 Jun 2008 17:50:24 +0100"  >&lt;p&gt;Attaching a patch for 1.2.0 which adds-back and utilizes the OpenJPA ConcurrentHashMap implementation.  Based on benchmark results and additional testing with the Java 5-based implementation, use of the OpenJPA implementation appears to be the best course of action.  Comments, please.&lt;/p&gt;</comment>
                            <comment id="12605813" author="pcl" created="Wed, 18 Jun 2008 03:27:25 +0100"  >&lt;p&gt;How many cores / CPUs were being used in the benchmark runs?&lt;/p&gt;</comment>
                            <comment id="12605973" author="techhusky" created="Wed, 18 Jun 2008 15:48:00 +0100"  >&lt;p&gt;The benchmark system is a hyper-threaded 4-way 3.8GHz Xeon.  The benchmark is exercised with 50 concurrent users.&lt;/p&gt;</comment>
                            <comment id="12606018" author="pcl" created="Wed, 18 Jun 2008 18:45:57 +0100"  >&lt;p&gt;What were the comparative results with an appropriately-sized cache for the data set? (i.e., without cache eviction)&lt;/p&gt;</comment>
                            <comment id="12606078" author="techhusky" created="Wed, 18 Jun 2008 21:27:31 +0100"  >&lt;p&gt;Several attempts were made to tune the max size of the data cache with base 1.2.0 code. Performance started to degrade at a certain point by further increasing the max cache size . The benchmark showed better results with a max size of 5000 than it did for 10000+. (Default (1000) and 15000 were also tested, 5000 appeared to be optimal for this workload.) The database tables used in the benchmark fluctuate around 35000 rows, which roughly equate to entities.&lt;/p&gt;

&lt;p&gt;Out of curiousity, instead of using CacheMap as the cache store in ConcurrentDataCache, java.util.concurrent.ConcurrentHashMap was used directly in its place (soft ref, write locking, and pinning support were removed for simplification). This also eliminated the max size and null handling aspects of the cache. Benchmark performance with this configuration was very similar to measurements taken with the data cache disabled. Database (on a separate server) utilization was down considerably, which was good &amp;amp; expected, but the benchmark was not showing a performance improvement. In contrast, 1.2.0 using the 1.0.x code showed a ~20% improvement when the data cache (max cache size 5000) was enabled.&lt;/p&gt;</comment>
                            <comment id="12606140" author="pcl" created="Thu, 19 Jun 2008 00:21:38 +0100"  >&lt;p&gt;Interesting. Thanks for the additional detail. We&apos;ll look into it on our end &amp;#8211; the initial change was the result of benchmark analysis. Hopefully we can work out what the difference is. At a minimum, we should re-introduce the old cache so that the better implementation for a given work load can be easily selected via configuration.&lt;/p&gt;</comment>
                            <comment id="12606527" author="techhusky" created="Thu, 19 Jun 2008 20:41:02 +0100"  >&lt;p&gt;Thanks, Patrick.  I think providing caching options (and doc explaining the behavioral differences) is a good approach.  I&apos;ll be disconnected for a few days, so I&apos;ll catch up with you when I return.&lt;/p&gt;</comment>
                            <comment id="12607358" author="techhusky" created="Mon, 23 Jun 2008 20:36:34 +0100"  >&lt;p&gt;I&apos;ve attached a standalone test for running some tests using various cache implementations and configurations.  It behaves similarly to the benchmark that exposed this problem.  The test allows  configuration of number of threads, max data size, max cache size, whether external locking is enabled, and the cache implementation type.&lt;/p&gt;

&lt;p&gt;This test is showing similar results as to what I&apos;ve previously posted; a write lock causing contention when the cache becomes full.  When the external write lock (a reentrant lock over and above internal cache locking) is enabled and the data size is ~5000 entries larger than the max cache size performance drops significantly.  The external lock simulates the reentrant lock used by DataCacheStoreManager to ensure the cache does not get updated with an old version of data.&lt;/p&gt;

&lt;p&gt;This test should provide a better idea of what I&apos;m seeing.  Aside, there is an option to run directly with java.util.concurrent.ConcurrentHashMap and it performs very well - although there is no null masking or maximum size on the cache.  &lt;/p&gt;

&lt;p&gt;To get a list of options:  java -cp CacheImplTest.jar;commons-collections-3.2.jar cachetest.Main&lt;/p&gt;

&lt;p&gt;Patrick - What behavior/environment does your benchmark test?  Is it possible that your cache size is very near the size of your data so you are not hitting the problem?&lt;/p&gt;</comment>
                            <comment id="12608170" author="techhusky" created="Wed, 25 Jun 2008 20:57:03 +0100"  >&lt;p&gt;Since Patrick agrees that we should do something to alleviate this performance concern, I would like to at least get us back on par with our previous releases. To that end, I would like to ask to have the patch I submitted to be integrated. I created a sub-task (&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-643&quot; title=&quot;Add cache store implementation option to data cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-643&quot;&gt;OPENJPA-643&lt;/a&gt;) so that we don&apos;t lose track of providing a more flexible, configurable option. But, until we get  that ironed out, I really don&apos;t want to hold up the rest of our performance analysis.&lt;/p&gt;</comment>
                            <comment id="12609329" author="techhusky" created="Mon, 30 Jun 2008 19:37:11 +0100"  >&lt;p&gt;With the OpenJPA ConcurrentHashMap cache implementation back in place, benchmark results with data cache enabled are back in-line with the 1.0.x release.  Future work regarding a data cache implementation configuration option will be handled through &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-643&quot; title=&quot;Add cache store implementation option to data cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-643&quot;&gt;OPENJPA-643&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12384524" name="CacheImplTest.jar" size="81390" author="techhusky" created="Mon, 23 Jun 2008 20:36:34 +0100"/>
                            <attachment id="12384142" name="OPENJPA-637.patch" size="34219" author="techhusky" created="Tue, 17 Jun 2008 17:50:24 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12399021">OPENJPA-643</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 18 Jun 2008 02:27:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160951</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyszmf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203119</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>