<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:41:45 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-1253/OPENJPA-1253.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-1253] JoinColumn annotation not allowed in conjunction with *ToMany annotation</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-1253</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;I receive the following exception if I have an Entity with a One(Many)ToMany relationship with another Entity. &lt;/p&gt;

&lt;p&gt;&amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:805588 fatal user error&amp;gt; org.apache.openjpa.persistence.ArgumentException: You have supplied columns for &quot;....Entity&quot;, but this mapping cannot have columns in this context.&lt;/p&gt;

&lt;p&gt;To recreate the failure, add a @JoinColumn annotation to one of the *ToMany relationships in org.apache.openjpa.persistence.jdbc.annotations.AnnoTest1. &lt;br/&gt;
example:&lt;br/&gt;
    @MapKey(name = &quot;basic&quot;)&lt;br/&gt;
    @OneToMany(mappedBy = &quot;oneManyOwner&quot;)&lt;br/&gt;
    @JoinColumn(name = &quot;asdf&quot;)&lt;br/&gt;
    protected Map&amp;lt;String, AnnoTest2&amp;gt; inverseOwnerMapKey = new HashMap();&lt;/p&gt;

&lt;p&gt;Then run:&lt;br/&gt;
trunk\openjpa-parent\openjpa-persistence-jdbc&amp;gt;mvn test -Dtest=org.apache.openjpa.persistence.jdbc.annotations.TestOneToMany&lt;/p&gt;</description>
                <environment></environment>
        <key id="12433473">OPENJPA-1253</key>
            <summary>JoinColumn annotation not allowed in conjunction with *ToMany annotation</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="faywang">Fay Wang</assignee>
                                    <reporter username="curtisr7">Rick Curtis</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Aug 2009 16:18:05 +0100</created>
                <updated>Tue, 11 Oct 2011 11:49:21 +0100</updated>
                            <resolved>Mon, 28 Sep 2009 17:22:11 +0100</resolved>
                                    <version>2.0.0-M1</version>
                    <version>2.0.0-M2</version>
                    <version>2.0.0-M3</version>
                                    <fixVersion>2.0.0-M3</fixVersion>
                                    <component>jdbc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12755596" author="faywang" created="Tue, 15 Sep 2009 18:31:06 +0100"  >&lt;p&gt;According to JPA 2.0 spec (Section 11.1.21), &lt;/p&gt;

&lt;p&gt;The table in which the JoinColumn annotion is found depends upon the context. &lt;br/&gt;
(1) If the join is for a OneToOne or ManyToOne mapping using a foreign key mapping strategy, the foreign key column is in the table of the source entity or embeddable. &lt;/p&gt;

&lt;p&gt;(2) If the join is for a unidirectional OneToMany mapping using a foreign key mapping strategy, the foreign key is in the table of the target entity. &lt;/p&gt;

&lt;p&gt;(3) If the join is for a ManyToMany mapping or for a one-to-one or bidirectional &lt;br/&gt;
ManyToOne/OneToMany mapping using a join table, the foreign key is in a join table. &lt;/p&gt;

&lt;p&gt;(4) If the join is for an element collection, the foreign key is in a collection table.&lt;/p&gt;

&lt;p&gt;In comparison to the JPA 1.0 spec (Section 9.1.6):&lt;br/&gt;
The table in which it is found depends upon the context. &lt;br/&gt;
(1) If the join is for a OneToOne or Many-ToOne mapping, the foreign key column is in the table of the source entity. &lt;/p&gt;

&lt;p&gt;(2) If the join is for a ManyToMany, the foreign key is in a join table.&lt;/p&gt;

&lt;p&gt;The JoinColumn annotation in v2.0 apparently becomes more flexible as it is allowed to  appear for a OneToMany mapping. &lt;/p&gt;</comment>
                            <comment id="12756626" author="faywang" created="Thu, 17 Sep 2009 18:11:05 +0100"  >&lt;p&gt;JPA 2.0 supports non-default mapping (sec 2.9): &lt;/p&gt;

&lt;p&gt;&quot;In addition, this specification also requires support for the following alternative mapping strategies: the mapping of unidirectional one-to-many relationships by means of foreign key mappings; the mapping of unidirectional and bidirectional one-to-one relationships, bidirectional many-to-one/one-to-many relationships, and unidirectional many-to-one relationships by means of join table mappings. The JoinColumn and JoinTable annotations or corresponding XML elements must be used to specify such non-default mappings. See sections 11.1.21 and 11.1.23.&quot;&lt;/p&gt;

&lt;p&gt;For *toMany relation, the non-default and default mappings, according to the spec, are:&lt;/p&gt;

&lt;p&gt;(1) uni-/OneToMany/foreign key strategy &lt;br/&gt;
(2) uni-/OneToMany/join table strategy (default)&lt;br/&gt;
(3) bi-/OneToMany/foreign key strategy (default)&lt;br/&gt;
(4) bi-/OneToMany/join table strategy &lt;br/&gt;
(5) uni-/ManyToMany/join table strategy (default)&lt;br/&gt;
(6) bi-/ManyToMany/join table strategy (default)&lt;/p&gt;

&lt;p&gt;For (1), the spec provides the following example (Sec 11.1.36):&lt;br/&gt;
Example 3: Unidirectional One-to-Many association using a foreign key mapping&lt;br/&gt;
In Customer class:&lt;br/&gt;
@OneToMany(orphanRemoval=true)&lt;br/&gt;
@JoinColumn(name=&quot;CUST_ID&quot;) // join column is in table for Order&lt;br/&gt;
public Set&amp;lt;Order&amp;gt; getOrders() &lt;/p&gt;
{return orders;}&lt;br/&gt;
&lt;br/&gt;
For (4), Bi-directional One-to-Many association using the join table mapping&lt;br/&gt;
In Customer class:&lt;br/&gt;
@OneToMany(mappedBy=&quot;customer&quot;)&lt;br/&gt;
    @JoinTable(&lt;br/&gt;
        name=&quot;Customer_Orders&quot;,&lt;br/&gt;
        joinColumns=&lt;br/&gt;
          @JoinColumn(name=&quot;Order_ID&quot;, referencedColumnName=&quot;ID&quot;),&lt;br/&gt;
         inverseJoinColumns=&lt;br/&gt;
          @JoinColumn(name=&quot;Cust_ID&quot;, referencedColumnName=&quot;ID&quot;)&lt;br/&gt;
    )&lt;br/&gt;
&lt;br/&gt;
public Set&amp;lt;Order&amp;gt; getOrders() {return orders;}

&lt;p&gt;Note that in this scenario, @JoinTable is required. Simply applying @JoinColumn without @JoinTable will result in an exception thrown by openjpa.&lt;/p&gt;

&lt;p&gt;Similarly for ManyToMany mapping, @JoinTable is required as shown by the example in the spec (11.1.25). Simply applying @JoinColumn will fail with an exception:&lt;br/&gt;
@ManyToMany&lt;br/&gt;
@JoinTable(&lt;br/&gt;
    name=&quot;CUST_PHONE&quot;,&lt;br/&gt;
    joinColumns=&lt;br/&gt;
       @JoinColumn(name=&quot;CUST_ID&quot;, referencedColumnName=&quot;ID&quot;),&lt;br/&gt;
    inverseJoinColumns= &lt;br/&gt;
       @JoinColumn(name=&quot;PHONE_ID&quot;, referencedColumnName=&quot;ID&quot;)&lt;br/&gt;
)&lt;br/&gt;
public Set&amp;lt;PhoneNumber&amp;gt; getPhones() &lt;/p&gt;
{ return phones; }

&lt;p&gt;The failing example provided in this JIRA is not valid:&lt;br/&gt;
    @MapKey(name = &quot;basic&quot;)&lt;br/&gt;
    @OneToMany(mappedBy = &quot;oneManyOwner&quot;)&lt;br/&gt;
    @JoinColumn(name = &quot;asdf&quot;)&lt;br/&gt;
    protected Map&amp;lt;String, AnnoTest2&amp;gt; inverseOwnerMapKey = new HashMap();&lt;/p&gt;

&lt;p&gt;This is a bi-directional OneToMany assocation. If the default foreign key strategy is intended, no JoinColumn annotation should be applied. If the non-default join table strategy is intened, the JoinTable annotation should be applied.&lt;/p&gt;</comment>
                            <comment id="12757486" author="faywang" created="Fri, 18 Sep 2009 23:21:35 +0100"  >&lt;p&gt;Create/Update/Delete/Find for the non-default OneToMany mapping is in r-816795. The findBy operation of the owner side (which has ManyToOne relation) for bi-/OneToMany/foreignKey mapping still fails.&lt;/p&gt;</comment>
                            <comment id="12757672" author="fs5" created="Sat, 19 Sep 2009 17:13:48 +0100"  >&lt;p&gt;&amp;gt; Create/Update/Delete/Find for the non-default OneToMany&lt;/p&gt;

&lt;p&gt;Please also consider this use case:&lt;/p&gt;

&lt;p&gt;Model: Person --&amp;gt; * Address (unidirectional, one-to-many, join-column)&lt;br/&gt;
public class Person &lt;/p&gt;
{
	@OneToMany(cascade = CascadeType.ALL)
	@JoinColumn(name = &quot;PERSON_ID&quot;)
	private List&amp;lt;Address&amp;gt; addresses = new ...
}

&lt;p&gt;Use-case:&lt;br/&gt;
Person p1 = em.find(Person.class, new Long(1));&lt;br/&gt;
Address a = p1.getAddresses.remove(0);&lt;br/&gt;
Person p2 = new Person();&lt;br/&gt;
p2.getAddresses().add(a);&lt;br/&gt;
em.persist(p2)&lt;/p&gt;


&lt;p&gt;Currently it throws:&lt;/p&gt;

&lt;p&gt;2234  default  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 13101223, conn 12437939&amp;gt; executing prepstmnt 32053837 SELECT TEST.PERSON_SEQ.NEXTVAL FROM DUAL&lt;br/&gt;
2235  default  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 13101223, conn 12437939&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;0 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2341  default  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 13101223, conn 19396509&amp;gt; executing prepstmnt 620055 UPDATE TEST.Address SET PERSON_ID = ? WHERE id = ? &lt;span class=&quot;error&quot;&gt;&amp;#91;params=(null) null, (long) 2&amp;#93;&lt;/span&gt;&lt;br/&gt;
2342  default  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.jdbc.SQL - &amp;lt;t 13101223, conn 19396509&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;1 ms&amp;#93;&lt;/span&gt; spent&lt;br/&gt;
2342  default  TRACE  &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; openjpa.Runtime - An exception occurred while ending the transaction.  This exception will be re-thrown.&lt;br/&gt;
&amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:816795 fatal store error&amp;gt; org.apache.openjpa.util.StoreException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2249)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2096)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:1994)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1912)&lt;br/&gt;
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)&lt;br/&gt;
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1436)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:895)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:557)&lt;br/&gt;
	at oopex.openjpa2.jpa2.relationships.OneToManyUnidirectionalJoinColumnMain.shuffle(OneToManyUnidirectionalJoinColumnMain.java:157)&lt;br/&gt;
	at oopex.openjpa2.jpa2.relationships.OneToManyUnidirectionalJoinColumnMain.main(OneToManyUnidirectionalJoinColumnMain.java:59)&lt;br/&gt;
Caused by: &amp;lt;openjpa-2.0.0-SNAPSHOT-r422266:816795 fatal user error&amp;gt; org.apache.openjpa.util.InvalidStateException: Attempt to set column &quot;Address.PERSON_ID&quot; to two different values: (null)&quot;null&quot;, (class java.lang.Long)&quot;2&quot; This can occur when you fail to set both sides of a two-sided relation between objects, or when you map different fields to the same column, but you do not keep the values of these fields in synch.&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.PrimaryRow.setObject(PrimaryRow.java:344)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.RowImpl.flushJoinValues(RowImpl.java:289)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.RowImpl.flushForeignKey(RowImpl.java:222)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.RowImpl.setForeignKey(RowImpl.java:197)&lt;br/&gt;
	at org.apache.openjpa.jdbc.sql.PrimaryRow.setForeignKey(PrimaryRow.java:172)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.strats.RelationToManyInverseKeyFieldStrategy.updateInverse(RelationToManyInverseKeyFieldStrategy.java:334)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.strats.RelationToManyInverseKeyFieldStrategy.insert(RelationToManyInverseKeyFieldStrategy.java:204)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.strats.RelationToManyInverseKeyFieldStrategy.insert(RelationToManyInverseKeyFieldStrategy.java:190)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.FieldMapping.insert(FieldMapping.java:608)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.insert(AbstractUpdateManager.java:230)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.populateRowManager(AbstractUpdateManager.java:162)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:95)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:76)&lt;br/&gt;
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:677)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:130)&lt;br/&gt;
	... 9 more&lt;/p&gt;


&lt;p&gt;Persisting the p2-object before transferring the address-object or issuing a em.flush() before transferring the address-object will not bring up the error.&lt;/p&gt;</comment>
                            <comment id="12757943" author="faywang" created="Mon, 21 Sep 2009 17:25:23 +0100"  >&lt;p&gt;Frank, Thank you for your comment. Your example shows a uni-directional one-to-many using foreign key strategy. I will take a look at this problem. &lt;/p&gt;</comment>
                            <comment id="12758016" author="faywang" created="Mon, 21 Sep 2009 21:24:33 +0100"  >&lt;p&gt;The fix for the exception reported by Frank is checked into openjpa-trunk r-817399.&lt;/p&gt;</comment>
                            <comment id="12833089" author="daringazz" created="Fri, 12 Feb 2010 17:52:00 +0000"  >&lt;p&gt;Is there an equivalent fix for version 1.2.1? i have encountered the same issue there.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;public class BaseLog&lt;/p&gt;
{
        @OneToMany(fetch=EAGER)
	@JoinColumn(name=&quot;PROVIDER_ID&quot;, referencedColumnName=&quot;CODIGOMICO&quot;)
	private Set&amp;lt;RufteEnte&amp;gt; rufteEnte;
....
}

&lt;p&gt;public class RufteEnte implements Serializable &lt;/p&gt;
{
	private static final long serialVersionUID = 1L;

	@Id
	private long id;

	private String codigomico;
...
}

&lt;p&gt;java.lang.AssertionError: Exception:&amp;lt;openjpa-1.2.1-r752877:753278 fatal user error&amp;gt; org.apache.openjpa.persistence.ArgumentException: You have supplied columns for &quot;org.venture.jpa.BaseLog.rufteEnte&quot;, but this mapping cannot have columns in this context.&lt;br/&gt;
	at org.junit.Assert.fail(Assert.java:91)&lt;br/&gt;
	at org.venture.jpa.TestBaseLogDAO.testGetBaseLog(TestBaseLogDAO.java:17)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)&lt;br/&gt;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)&lt;br/&gt;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)&lt;br/&gt;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)&lt;br/&gt;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&lt;br/&gt;
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&lt;br/&gt;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73)&lt;br/&gt;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46)&lt;br/&gt;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)&lt;br/&gt;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)&lt;br/&gt;
	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)&lt;br/&gt;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&lt;br/&gt;
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&lt;br/&gt;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:220)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&lt;/p&gt;
</comment>
                            <comment id="12866592" author="kwakeroni" created="Wed, 12 May 2010 16:08:18 +0100"  >&lt;p&gt;Jimmy,&lt;/p&gt;

&lt;p&gt;I believe there is no fix for versions 1.* because the JPA 1.0 standard does not seem to support JoinColumn on a OneToMany. (See Fay Wang&apos;s initial comment).&lt;/p&gt;

&lt;p&gt;I also have this problem because I have moved from another JPA implementation that does support this, but that is against the standard.&lt;/p&gt;</comment>
                            <comment id="13021490" author="deryaaltuntas" created="Tue, 19 Apr 2011 09:48:18 +0100"  >&lt;p&gt;I am using open JPA 2.1.0 .I am receiving same error&lt;br/&gt;
 &amp;lt;openjpa-2.1.0-r422266:1071316 fatal user error&amp;gt; org.apache.openjpa.persistence.ArgumentException: You have supplied columns for &quot;com.siemens.EntityBean.DBAccessManager.Role.authorizations&quot;, but this mapping cannot have columns in this context.&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.MappingInfo.assertNoSchemaComponents(MappingInfo.java:382)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.strats.RelationToManyInverseKeyFieldStrategy.map(RelationToManyInverseKeyFieldStrategy.java:120)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.strats.RelationCollectionInverseKeyFieldStrategy.map(RelationCollectionInverseKeyFieldStrategy.java:95)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.FieldMapping.setStrategy(FieldMapping.java:146)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.RuntimeStrategyInstaller.installStrategy(RuntimeStrategyInstaller.java:82)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolveMapping(FieldMapping.java:496)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:461)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.ClassMapping.resolveMapping(ClassMapping.java:854)&lt;br/&gt;
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1801)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:822)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.resolveMapping(MetaDataRepository.java:777)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:657)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:411)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:384)&lt;br/&gt;
	at org.apache.openjpa.enhance.PCEnhancer.&amp;lt;init&amp;gt;(PCEnhancer.java:283)&lt;br/&gt;
	at org.apache.openjpa.enhance.PCEnhancer.&amp;lt;init&amp;gt;(PCEnhancer.java:254)&lt;br/&gt;
	at org.apache.openjpa.enhance.PCEnhancer.&amp;lt;init&amp;gt;(PCEnhancer.java:222)&lt;br/&gt;
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)&lt;br/&gt;
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:315)&lt;br/&gt;
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)&lt;br/&gt;
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)&lt;br/&gt;
	at org.jboss.jpa.deployment.ManagedEntityManagerFactory.getNonTxEntityManager(ManagedEntityManagerFactory.java:72)&lt;br/&gt;
	at org.jboss.jpa.deployment.ManagedEntityManagerFactory.getTransactionScopedEntityManager(ManagedEntityManagerFactory.java:171)&lt;br/&gt;
	at org.jboss.jpa.deployment.PersistenceUnitDeployment.getTransactionScopedEntityManager(PersistenceUnitDeployment.java:178)&lt;br/&gt;
	at org.jboss.jpa.impl.tx.TransactionScopedEntityManager.getEntityManager(TransactionScopedEntityManager.java:262)&lt;br/&gt;
	at org.jboss.jpa.impl.tx.TransactionScopedEntityManager.find(TransactionScopedEntityManager.java:191)&lt;br/&gt;
	at com.siemens.EntityBean.DBAccessManager.UserService.find(UserService.java:22)&lt;br/&gt;
	at com.siemens.SessionBean.FileManager.FileManagerBean.printUsers(FileManagerBean.java:86)&lt;br/&gt;
	at com.siemens.SessionBean.FileManager.FileManagerBean.copyFile(FileManagerBean.java:43)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;/p&gt;</comment>
                            <comment id="13021491" author="deryaaltuntas" created="Tue, 19 Apr 2011 09:48:20 +0100"  >&lt;p&gt;I am using open JPA 2.1.0 .I am receiving same error&lt;br/&gt;
 &amp;lt;openjpa-2.1.0-r422266:1071316 fatal user error&amp;gt; org.apache.openjpa.persistence.ArgumentException: You have supplied columns for &quot;com.siemens.EntityBean.DBAccessManager.Role.authorizations&quot;, but this mapping cannot have columns in this context.&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.MappingInfo.assertNoSchemaComponents(MappingInfo.java:382)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.strats.RelationToManyInverseKeyFieldStrategy.map(RelationToManyInverseKeyFieldStrategy.java:120)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.strats.RelationCollectionInverseKeyFieldStrategy.map(RelationCollectionInverseKeyFieldStrategy.java:95)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.FieldMapping.setStrategy(FieldMapping.java:146)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.RuntimeStrategyInstaller.installStrategy(RuntimeStrategyInstaller.java:82)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolveMapping(FieldMapping.java:496)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:461)&lt;br/&gt;
	at org.apache.openjpa.jdbc.meta.ClassMapping.resolveMapping(ClassMapping.java:854)&lt;br/&gt;
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1801)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:822)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.resolveMapping(MetaDataRepository.java:777)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:657)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:411)&lt;br/&gt;
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:384)&lt;br/&gt;
	at org.apache.openjpa.enhance.PCEnhancer.&amp;lt;init&amp;gt;(PCEnhancer.java:283)&lt;br/&gt;
	at org.apache.openjpa.enhance.PCEnhancer.&amp;lt;init&amp;gt;(PCEnhancer.java:254)&lt;br/&gt;
	at org.apache.openjpa.enhance.PCEnhancer.&amp;lt;init&amp;gt;(PCEnhancer.java:222)&lt;br/&gt;
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)&lt;br/&gt;
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:315)&lt;br/&gt;
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)&lt;br/&gt;
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)&lt;br/&gt;
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)&lt;br/&gt;
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)&lt;br/&gt;
	at org.jboss.jpa.deployment.ManagedEntityManagerFactory.getNonTxEntityManager(ManagedEntityManagerFactory.java:72)&lt;br/&gt;
	at org.jboss.jpa.deployment.ManagedEntityManagerFactory.getTransactionScopedEntityManager(ManagedEntityManagerFactory.java:171)&lt;br/&gt;
	at org.jboss.jpa.deployment.PersistenceUnitDeployment.getTransactionScopedEntityManager(PersistenceUnitDeployment.java:178)&lt;br/&gt;
	at org.jboss.jpa.impl.tx.TransactionScopedEntityManager.getEntityManager(TransactionScopedEntityManager.java:262)&lt;br/&gt;
	at org.jboss.jpa.impl.tx.TransactionScopedEntityManager.find(TransactionScopedEntityManager.java:191)&lt;br/&gt;
	at com.siemens.EntityBean.DBAccessManager.UserService.find(UserService.java:22)&lt;br/&gt;
	at com.siemens.SessionBean.FileManager.FileManagerBean.printUsers(FileManagerBean.java:86)&lt;br/&gt;
	at com.siemens.SessionBean.FileManager.FileManagerBean.copyFile(FileManagerBean.java:43)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;/p&gt;</comment>
                            <comment id="13091087" author="mikedd" created="Thu, 25 Aug 2011 17:00:04 +0100"  >&lt;p&gt;Sorry this is a late reply. &lt;/p&gt;

&lt;p&gt;I ran across this problem too. Check the version for the xsd in your persistence.xml file. If it&apos;s set to 1.0 I got an error similar to the one you posted. If you change the version to 2.0 you should get past the problem. &lt;/p&gt;</comment>
                            <comment id="13102243" author="koenr" created="Sun, 11 Sep 2011 08:22:13 +0100"  >&lt;p&gt;Checked the version in persistence.xml, and in orm.xml, both are 2.0, yet specyfing a join-column tag in a OneToMany relationship still throws the above error in OpenJPA 2.1.1 (r422266).&lt;/p&gt;</comment>
                            <comment id="13124924" author="andras" created="Tue, 11 Oct 2011 11:49:21 +0100"  >&lt;p&gt;for anyone who is google-ing this, i got the same exception despite being on the 2.0 spec, the problem was the entity referred in the relationship was not listed in persistence.xml..&lt;/p&gt;

&lt;p&gt;&amp;lt;class&amp;gt;package.RelatedEntity&amp;lt;/class&amp;gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12460919">OPENJPA-1607</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 15 Sep 2009 17:31:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>59107</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt6if:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>204235</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>