<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:37:05 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-913/OPENJPA-913.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-913] A deadlock issue happens when DirtyListener is used</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-913</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;A deadlock issue happens when OpenJPA entity manager is&lt;br/&gt;
concurrently called and DirtyListener is used and &lt;br/&gt;
DirtyListener.beforeDirty calls an entity manager related &lt;br/&gt;
operation. To call OpenJPA entity manager concurrently, &lt;br/&gt;
we need to define openjpa.MulthThreaded option as true.&lt;/p&gt;

&lt;p&gt;Following is test scenario.&lt;/p&gt;

&lt;p&gt;1. Thread A calls entityMangaer.refresh() repeatedly.&lt;br/&gt;
   In refresh() method, entityManager acquires BrokerImpl&lt;br/&gt;
   lock. And then, entityManager acquires LifecycleEventManager&lt;br/&gt;
   lock to call lifecycle callback.&lt;br/&gt;
2. Thread B calls persistedObject.getAItems() (getting&lt;br/&gt;
   collection items).&lt;br/&gt;
3. In enhanced getItems() method, entityManager tries&lt;br/&gt;
   to mark it as &quot;dirty&quot;. Before marking, callback listener&lt;br/&gt;
   DirtyListener.beforeDirty is called. In this point,&lt;br/&gt;
   LifecycleEventManager lock is acquired without acquiring&lt;br/&gt;
   BrokerImpl lock.&lt;br/&gt;
4. In the testcase, beforeDirty calls persistedObject.getAItems().&lt;br/&gt;
   And then, entity manager tries to acquire BrokerImpl lock.&lt;br/&gt;
   But, sometimes BrokerImpl lock is already acquired by Thread B.&lt;br/&gt;
   So, a deadlock issue happens. deadlock stack is as follows.&lt;/p&gt;

&lt;p&gt;====&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; &quot;Thread-1&quot; prio=1 tid=0x09e98b28 nid=0x7fcc waiting on condition &lt;span class=&quot;error&quot;&gt;&amp;#91;0xb15f3000..0xb15f4130&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at sun.misc.Unsafe.park(Native Method)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at java.util.concurrent.locks.LockSupport.park(LockSupport.java:118)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:716)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:746)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1076)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:184)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:256)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.BrokerImpl.lock(BrokerImpl.java:4168)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.BrokerImpl.beginOperation(BrokerImpl.java:1770)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.BrokerImpl.isActive(BrokerImpl.java:1742)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.StateManagerImpl.beforeRead(StateManagerImpl.java:964)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.StateManagerImpl.accessingField(StateManagerImpl.java:1501)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at model.A.getAItems(A.java)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at model.ADirtyListener.beforeDirty(ADirtyListener.java:24)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.event.LifecycleEventManager.fireEvent(LifecycleEventManager.java:423)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.event.LifecycleEventManager.fireEvent(LifecycleEventManager.java:289)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     - locked &amp;lt;0x51b4e4b0&amp;gt; (a org.apache.openjpa.event.LifecycleEventManager)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.BrokerImpl.fireLifecycleEvent(BrokerImpl.java:693)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.StateManagerImpl.fireLifecycleEvent(StateManagerImpl.java:364)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.StateManagerImpl.dirty(StateManagerImpl.java:1596)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.StateManagerImpl.dirty(StateManagerImpl.java:1539)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.util.Proxies.dirty(Proxies.java:66)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.util.ProxyCollections.beforeAdd(ProxyCollections.java:57)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.util.java$util$HashSet$proxy.add(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at business.Test$2.run(Test.java:80)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at java.lang.Thread.run(Thread.java:595)&lt;/p&gt;

&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; &quot;Thread-0&quot; prio=1 tid=0x09e9d010 nid=0x7fcb waiting for monitor entry &lt;span class=&quot;error&quot;&gt;&amp;#91;0xb1674000..0xb1674db0&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.event.LifecycleEventManager.fireEvent(LifecycleEventManager.java:272)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     - waiting to lock &amp;lt;0x51b4e4b0&amp;gt; (a org.apache.openjpa.event.LifecycleEventManager)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.BrokerImpl.fireLifecycleEvent(BrokerImpl.java:693)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.StateManagerImpl.fireLifecycleEvent(StateManagerImpl.java:364)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.StateManagerImpl.clearFields(StateManagerImpl.java:2647)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.StateManagerImpl.beforeRefresh(StateManagerImpl.java:1239)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.BrokerImpl.refreshInternal(BrokerImpl.java:2835)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.BrokerImpl.refresh(BrokerImpl.java:2781)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.kernel.DelegatingBroker.refresh(DelegatingBroker.java:1078)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at org.apache.openjpa.persistence.EntityManagerImpl.refresh(EntityManagerImpl.java:694)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at business.Test$1.run(Test.java:64)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;     at java.lang.Thread.run(Thread.java:595)&lt;br/&gt;
====&lt;/p&gt;

&lt;p&gt;Intially the problem is reproduced on OpenJPA 1.x. But,&lt;br/&gt;
I verified the problem could be reproduced with latest &lt;br/&gt;
OpenJPA head.&lt;/p&gt;</description>
                <environment>Linux x86</environment>
        <key id="12414352">OPENJPA-913</key>
            <summary>A deadlock issue happens when DirtyListener is used</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="hiroki.tateno">Hiroki Tateno</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 Feb 2009 06:51:26 +0000</created>
                <updated>Tue, 9 Mar 2010 18:31:09 +0000</updated>
                            <resolved>Mon, 16 Mar 2009 09:37:21 +0000</resolved>
                                    <version>1.2.0</version>
                                    <fixVersion>1.1.1</fixVersion>
                    <fixVersion>2.0.0-M2</fixVersion>
                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12671745" author="hiroki.tateno" created="Mon, 9 Feb 2009 06:53:46 +0000"  >&lt;p&gt;I uploaded a simple testcase testcase.zip.&lt;/p&gt;

&lt;p&gt;====&lt;br/&gt;
step by step test procedure)&lt;br/&gt;
1. update database configuration in persistence.xml&lt;br/&gt;
2. run &quot;ant test&quot;&lt;br/&gt;
====&lt;/p&gt;</comment>
                            <comment id="12671748" author="hiroki.tateno" created="Mon, 9 Feb 2009 06:57:23 +0000"  >&lt;p&gt;Also, I attached possible fix of the issue.&lt;br/&gt;
The root cause of the issue is sometimes BrokerImpl.fireLifecycleEvent&lt;br/&gt;
is called without BrokerImpl lock. So, I added lock()/unlock() to &lt;br/&gt;
BrokerImpl.fireLifecycleEvent. It may be overkill fix. If it&apos;s overkill,&lt;br/&gt;
it&apos;s better that adding broker.lock()/broker.unlock() to around&lt;br/&gt;
calling fireLifecycleEvent() in StateManagerImpl.dirty().&lt;/p&gt;</comment>
                            <comment id="12682256" author="hiroki.tateno" created="Mon, 16 Mar 2009 09:37:21 +0000"  >&lt;p&gt;Abe&apos;s change resolved the issue.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12399796" name="proposed-fix.patch" size="918" author="hiroki.tateno" created="Mon, 9 Feb 2009 06:57:23 +0000"/>
                            <attachment id="12399795" name="testcase.zip" size="5514048" author="hiroki.tateno" created="Mon, 9 Feb 2009 06:53:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161212</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyszxb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203168</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>