<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:40:28 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-317/OPENJPA-317.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-317] API formalization pre-1.0</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-317</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;This issue tracks the effort to formalize and optimize our API prior to the 1.0 release.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12376156">OPENJPA-317</key>
            <summary>API formalization pre-1.0</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="pcl">Patrick Linskey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Aug 2007 14:48:46 +0100</created>
                <updated>Tue, 9 Mar 2010 18:32:37 +0000</updated>
                            <resolved>Tue, 21 Aug 2007 05:54:46 +0100</resolved>
                                    <version>0.9.0</version>
                    <version>0.9.6</version>
                    <version>0.9.7</version>
                                    <fixVersion>1.0.0</fixVersion>
                                    <component>jpa</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12520255" author="pcl" created="Thu, 16 Aug 2007 15:00:14 +0100"  >&lt;p&gt;Patch notes:&lt;/p&gt;

&lt;p&gt;Changed OpenJPA published API pre-1.0. Reduced the scope of the dependencies in OpenJPAEntityManager and the other published interfaces; converted JDK1.4-style symbolic constant usage to new enums; changed some method names for clarity and consistency; removed old javax.resource dependencies; updated @published and @nojavadoc tags. The published interfaces should now only reference other published interfaces in method signatures, and it should be possible to build javadoc for just the published interfaces.&lt;/p&gt;

&lt;p&gt;Removed getDelegate() calls from the published interfaces, as they expose internals. They are still available on the impl classes themselves, or the SPI ifaces when available.&lt;/p&gt;

&lt;p&gt;To do: &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;covariant types in JDBCFetchPlan interface&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;maybe move tx methods to new OpenJPATransaction interface that does not extend EntityTransaction? (can&apos;t keep in subtype of EntityTx because getTx() fails in a JTA context)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;review API emails again&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;BrokerFactoryListener changes, other event changes?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We will need to grow these published interfaces to provide access to some things in the internal interfaces. However, these interfaces will remain stable moving forward within the constraints of the OpenJPA deprecation policies.&lt;/p&gt;</comment>
                            <comment id="12520407" author="clr" created="Fri, 17 Aug 2007 00:19:53 +0100"  >&lt;p&gt;I like the separation proposed here. Just a few comments.&lt;/p&gt;

&lt;p&gt;1. In FetchPlanImpl, you have:&lt;br/&gt;
+    public boolean isEnlistInQueryResultCache() {&lt;br/&gt;
+        return _fetch.getEnlistInQueryCache();&lt;br/&gt;
Why shouldn&apos;t both methods have the same signature?&lt;/p&gt;

&lt;p&gt;2. Since OpenJPAEntityManagerSPI extends OpenJPAEntityManager, any class that implements OpenJPAEntityManagerSPI doesn&apos;t also need to implement OpenJPAEntityManager.&lt;/p&gt;

&lt;p&gt;3. OpenJPAEntityManagerFactory used to extend Closeable. It might be useful for it to continue to extend Closeable, as the only method in Closeable is close().&lt;/p&gt;

&lt;p&gt;4. I think that these methods should be considered to be part of OpenJPAEntityManagerFactory and not SPI, since they don&apos;t depend on internal state or internal classes:&lt;br/&gt;
+    public void addLifecycleListener(Object listener, Class... classes);&lt;br/&gt;
+    public void removeLifecycleListener (Object listener);&lt;/p&gt;</comment>
                            <comment id="12520592" author="kwsutter" created="Fri, 17 Aug 2007 16:43:48 +0100"  >&lt;p&gt;Patrick,&lt;br/&gt;
Thank you for doing this re-factoring.  Attempting to make a clean distinction between API&apos;s, SPI&apos;s and internal interfaces and classes will be well-received by all.&lt;/p&gt;

&lt;p&gt;Besides the comments that Craig already posted, I have a couple of other observations.&lt;/p&gt;

&lt;p&gt;1.  Maybe this was already discussed on another thread and I missed it, but the naming convention for the SPI interfaces is a bit different from what I am used to.  Instead of appending SPI to the interface name, I&apos;m more used to putting .spi. in the package name.  Something like this:&lt;/p&gt;

&lt;p&gt;import org.apache.openjpa.persistence.spi.OpenJPAEntityManager&lt;/p&gt;

&lt;p&gt;There are pros and cons to both approaches.  The biggest con to this .spi. approach is when you are using both the API and SPI in the same code block.  One of the references would have to be fully qualified in order to differentiate.  The pro to this .spi. approach is that it looks cleaner when dealing with the SPI&apos;s.&lt;/p&gt;

&lt;p&gt;I&apos;m flexible either way.  I just thought I would bring this up so that we would at least consider it.&lt;/p&gt;

&lt;p&gt;2.  I saw several cases of casting like this:&lt;/p&gt;

&lt;p&gt;OpenJPAEntityManagerSPI kem = (OpenJPAEntityManagerSPI) cast(em);&lt;/p&gt;

&lt;p&gt;(First of all, should we rename this variables to &quot;oem&quot; or &quot;em&quot; to get rid of the indirect reference to kodo?  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  )&lt;/p&gt;

&lt;p&gt;The real issue is the actual casting.  We are calling a method to cast, but then we&apos;re casting the result again?  I understand the issue, but it looks kind of clumsy.  Instead, should we introduce a cast() method on the OpenJPAEntityManagerSPI class?  Or, should there be a castSPI() method on the public API?  That doesn&apos;t sound quite right, does it?  Actually, I have often wondered what these cast() methods were really used for.  In most cases, the cast() method is doing the same thing as a normal Java cast, so why do we need these methods?  Except in the case of em.getDelegate() calls, but is this buying us that much?&lt;/p&gt;

&lt;p&gt;Just a general issue about whether these cast() methods are really necessary?  And, if they are deemed necessary, then what classes should provide them?&lt;/p&gt;

&lt;p&gt;That&apos;s it.  Thanks!&lt;br/&gt;
Kevin&lt;/p&gt;</comment>
                            <comment id="12521020" author="pcl" created="Mon, 20 Aug 2007 07:42:36 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-317&quot; title=&quot;API formalization pre-1.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-317&quot;&gt;&lt;del&gt;OPENJPA-317&lt;/del&gt;&lt;/a&gt;. Changed OpenJPA published API pre-1.0. Reduced the scope of the dependencies in OpenJPAEntityManager and the other published interfaces; converted JDK1.4-style symbolic constant usage to new enums; changed some method names for clarity and consistency; removed old javax.resource dependencies; updated @published and @nojavadoc tags. The published interfaces should now only reference other published interfaces in method signatures, and it should be possible to build javadoc for just the published interfaces.&lt;/p&gt;

&lt;p&gt;Removed getDelegate() calls from the published interfaces, as they expose internals. They are still available on the impl classes themselves, or the SPI ifaces when available.&lt;/p&gt;

&lt;p&gt;Added covariant return types to JDBCFetchPlan.&lt;/p&gt;

&lt;p&gt;Changed BrokerFactoryListener interface to not encode event types in the listener signature.&lt;/p&gt;

&lt;p&gt;Moved some methods from OpenJPAPersistence to JPAFacadeHelper.&lt;/p&gt;

&lt;p&gt;to-do: maybe move tx stuff to new OpenJPATransaction interface that does not extend EntityTransaction? (can&apos;t keep in subtype of EntityTx because getTx() fails in a JTA context), other event changes?&lt;/p&gt;

&lt;p&gt;We will need to grow these published interfaces to provide access to some things in the internal interfaces. However, these interfaces will remain stable moving forward within the constraints of the OpenJPA deprecation policies.&lt;/p&gt;</comment>
                            <comment id="12521021" author="pcl" created="Mon, 20 Aug 2007 07:43:47 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-317&quot; title=&quot;API formalization pre-1.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-317&quot;&gt;&lt;del&gt;OPENJPA-317&lt;/del&gt;&lt;/a&gt;. Changed OpenJPA published API pre-1.0. Reduced the scope of the dependencies in OpenJPAEntityManager and the other published interfaces; converted JDK1.4-style symbolic constant usage to new enums; changed some method names for clarity and consistency; removed old javax.resource dependencies; updated @published and @nojavadoc tags. The published interfaces should now only reference other published interfaces in method signatures, and it should be possible to build javadoc for just the published interfaces.&lt;/p&gt;

&lt;p&gt;Removed getDelegate() calls from the published interfaces, as they expose internals. They are still available on the impl classes themselves, or the SPI ifaces when available.&lt;/p&gt;

&lt;p&gt;Added covariant return types to JDBCFetchPlan.&lt;/p&gt;

&lt;p&gt;Changed BrokerFactoryListener interface to not encode event types in the listener signature.&lt;/p&gt;

&lt;p&gt;Moved some methods from OpenJPAPersistence to JPAFacadeHelper.&lt;/p&gt;

&lt;p&gt;to-do: maybe move tx stuff to new OpenJPATransaction interface that does not extend EntityTransaction? (can&apos;t keep in subtype of EntityTx because getTx() fails in a JTA context), other event changes?&lt;/p&gt;

&lt;p&gt;We will need to grow these published interfaces to provide access to some things in the internal interfaces. However, these interfaces will remain stable moving forward within the constraints of the OpenJPA deprecation policies.&lt;/p&gt;</comment>
                            <comment id="12521129" author="pcl" created="Mon, 20 Aug 2007 17:10:17 +0100"  >&lt;p&gt;&amp;gt; 1. In FetchPlanImpl, you have:&lt;br/&gt;
&amp;gt; +    public boolean isEnlistInQueryResultCache() {&lt;br/&gt;
&amp;gt; +        return _fetch.getEnlistInQueryCache();&lt;br/&gt;
&amp;gt; Why shouldn&apos;t both methods have the same signature?&lt;/p&gt;

&lt;p&gt;I&apos;ve been focused on the published API, not the internals. _fetch is a kernel FetchConfiguration, not a FetchPlan. We use isFoo() in the published API, but evidently just have a get method in the kernel call.&lt;/p&gt;

&lt;p&gt;&amp;gt; 2. Since OpenJPAEntityManagerSPI extends OpenJPAEntityManager, any class that implements OpenJPAEntityManagerSPI doesn&apos;t also need to implement OpenJPAEntityManager.&lt;/p&gt;

&lt;p&gt;Good point; that must have gotten lost in the refactoring.&lt;/p&gt;

&lt;p&gt;&amp;gt; 3. OpenJPAEntityManagerFactory used to extend Closeable. It might be useful for it to continue to extend Closeable, as the only method in Closeable is close().&lt;/p&gt;

&lt;p&gt;close() is already in EMF from an API standpoint. We do &apos;instanceof Closeable&apos; checks internally for various reasons; there is nothing about an OpenJPAEntityManagerFactory that necessarily requires closeability. So, it seemed appropriate to reduce the interface footprint and just make the impl class implement Closeable.&lt;/p&gt;

&lt;p&gt;&amp;gt; 4. I think that these methods should be considered to be part of OpenJPAEntityManagerFactory and not SPI, since they don&apos;t depend on internal state or internal classes:&lt;br/&gt;
&amp;gt; +    public void addLifecycleListener(Object listener, Class... classes);&lt;br/&gt;
&amp;gt; +    public void removeLifecycleListener (Object listener);&lt;/p&gt;

&lt;p&gt;I&apos;ve independently come to the same conclusion and made that change in the more recent patch.&lt;/p&gt;</comment>
                            <comment id="12521320" author="pcl" created="Tue, 21 Aug 2007 05:54:18 +0100"  >&lt;p&gt;&amp;gt; 1. Maybe this was already discussed on another thread and&lt;br/&gt;
&amp;gt; I missed it, but the naming convention for the SPI interfaces&lt;br/&gt;
&amp;gt; is a bit different from what I am used to. Instead of appending&lt;br/&gt;
&amp;gt; SPI to the interface name, I&apos;m more used to putting .spi. in the&lt;br/&gt;
&amp;gt; package name. Something like this: &lt;/p&gt;

&lt;p&gt;It was not discussed at all, and I basically ignored the issue altogether. I decided to just focus on the API; now that we&apos;ve got that nailed down, we can do whatever we want with the rest. Since the SPI classes are not part of the published API set, we should feel free to totally change everything to do with them as we see fit.&lt;/p&gt;

&lt;p&gt;Similar logic applies to the casting issue that you raised. I think that we could definitely do some cleanup there, but I didn&apos;t see a lot of need pre-1.0.&lt;/p&gt;

&lt;p&gt;Note that I did make OpenJPAEntityManagerFactorySPI have a covariant return type for createEM(), so if you&apos;ve casted once, you&apos;re in good shape from there onwards. I tried to use covariant types wherever possible in this way.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12380546">OPENJPA-404</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12364124" name="OPENJPA-317.patch" size="201002" author="pcl" created="Mon, 20 Aug 2007 07:43:47 +0100"/>
                            <attachment id="12363939" name="OPENJPA-317.patch" size="141971" author="pcl" created="Thu, 16 Aug 2007 15:00:10 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 Aug 2007 23:19:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160642</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyt1fr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203413</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>