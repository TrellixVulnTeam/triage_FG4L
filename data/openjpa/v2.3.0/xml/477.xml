<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:46:26 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-477/OPENJPA-477.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-477] making StoreManager more flexible and extensible.</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-477</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;The OpenJPA StoreManager needs some modifications to make it more flexible and extensible.  For example, some private methods and attributes need to made either public or protected.  The attached patch identifies the areas that have been identified thus far.  Please let me know if there are any concerns.  Many thanks in advance.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12385628">OPENJPA-477</key>
            <summary>making StoreManager more flexible and extensible.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dtlee">Daniel Lee</reporter>
                        <labels>
                    </labels>
                <created>Sat, 5 Jan 2008 00:48:48 +0000</created>
                <updated>Tue, 9 Mar 2010 18:35:38 +0000</updated>
                            <resolved>Fri, 9 May 2008 15:35:06 +0100</resolved>
                                    <version>1.0.2</version>
                                                    <component>kernel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12556144" author="dtlee" created="Sat, 5 Jan 2008 00:55:35 +0000"  >&lt;p&gt;This patch is base on OpenJPA 1.1 vrevision 608157.&lt;/p&gt;</comment>
                            <comment id="12556266" author="ppoddar@apache.org" created="Sat, 5 Jan 2008 19:29:29 +0000"  >&lt;p&gt;Agree that StoreManager should relax its field/method access for easier extensibility as well as to reuse rich implementations of JDBCStoreManager. However, this relaxation should be taken place in a more on-demand basis driven by use cases. This observation is based on my recent experience in extending JDBCStoreManager &lt;br/&gt;
       a) to transact on distributed databases as opposed to a single database &lt;br/&gt;
and b) adapt for XA-complaint data sources. &lt;br/&gt;
Both extensions required access relaxations of one private field and one method signatures. But the changes were localized, driven by specific use cases. Hence, I recommend that we change fields/methods from private to protected as and when a particular use case demands it rather than doing it across the board as this patch seems to suggest. &lt;/p&gt;</comment>
                            <comment id="12556955" author="dtlee" created="Tue, 8 Jan 2008 17:52:23 +0000"  >&lt;p&gt;In fact, the patch is part of a recent practice for providing a proprietary extension to use an interface other than JDBC.  The patch can apply to other interface easily but wasn&apos;t trying to relax StoreManager in general.  Thanks.&lt;/p&gt;</comment>
                            <comment id="12556965" author="ppoddar@apache.org" created="Tue, 8 Jan 2008 18:09:30 +0000"  >&lt;p&gt;&quot;a recent practice for providing a proprietary extension to use an interface other than JDBC&quot; - elaboration on this extension will help everyone to appreciate the reasons for this patch better &amp;#8211; especially when the changes required by this extension is not only confined at StoreManager but permeates to almost every tier of OpenJPA (StateManager, Broker, Configuration...). &lt;/p&gt;
</comment>
                            <comment id="12557448" author="pcl" created="Wed, 9 Jan 2008 21:46:31 +0000"  >&lt;p&gt;Some more comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A number of the changes make private fields more-visible. At least some of these fields have accessors already; is there some reason why the accessors are not sufficient? More importantly, when making private fields more visible, it&apos;s important to do a careful analysis of what the impact of external mutation to those fields would be.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is there any reason why you&apos;ve changed some strings in DB2Dictionary to be static final?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12559841" author="dtlee" created="Thu, 17 Jan 2008 07:23:38 +0000"  >&lt;p&gt;A new patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-477&quot; title=&quot;making StoreManager more flexible and extensible.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-477&quot;&gt;&lt;del&gt;OPENJPA-477&lt;/del&gt;&lt;/a&gt;-trunk612523.patch) is attached.  The change of this patch is much simpler and the scope of it is much smaller than the previous one.  Instead of making existing private methods protected, it extends only the portion that&apos;s required for the extensibility to JDBCStoreManager to interface with IBM SQLJ, etc with DB2.&lt;/p&gt;</comment>
                            <comment id="12561111" author="ppoddar@apache.org" created="Mon, 21 Jan 2008 20:08:12 +0000"  >&lt;p&gt;1. Some changes are making a private instance variables protected. A better pattern will be to retain the variables as private and add corresponding getter. That way the base class can exert more control in the getter (for example, providing an unmodifiable copy in some cases) especially when changing the the instance variable below the hood can have adverse impact on the base class. &lt;/p&gt;

&lt;p&gt;2. Some changes are redundant. For example, in JDBCStoreManager&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private void connect(boolean ref) {&lt;br/&gt;
+    protected void connect(boolean ref) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  This class already provides for such extension. See the following the same class&lt;br/&gt;
    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Connect to the database. This method is separated out so that it&lt;/li&gt;
	&lt;li&gt;can be overridden.&lt;br/&gt;
     */&lt;br/&gt;
    protected RefCountConnection connectInternal() throws SQLException 
{
        return new RefCountConnection(_ds.getConnection());
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;or this one in TableJDBCSeq &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private transient JDBCConfiguration _conf = null;&lt;br/&gt;
+    protected transient JDBCConfiguration _conf = null;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  when this class already has &lt;br/&gt;
    public JDBCConfiguration getConfiguration() &lt;/p&gt;
{
        return _conf;
    }


</comment>
                            <comment id="12561520" author="fancy" created="Tue, 22 Jan 2008 23:31:43 +0000"  >&lt;p&gt;A revised patch &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-477&quot; title=&quot;making StoreManager more flexible and extensible.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-477&quot;&gt;&lt;del&gt;OPENJPA-477&lt;/del&gt;&lt;/a&gt;.613332.patch is attached.&lt;br/&gt;
We would like to commit this patch to  trunk.&lt;/p&gt;

&lt;p&gt;Please provide your comments.&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="12564141" author="pcl" created="Wed, 30 Jan 2008 19:33:53 +0000"  >&lt;p&gt;I still do not understand why BrokerImpl needed changes; could you explain the changes there in more detail? I&apos;m concerned that if the BrokerImpl needs extension to detect whether or not an instance is a member of the current working set, then other things could get out of sync as well.&lt;/p&gt;</comment>
                            <comment id="12564142" author="pcl" created="Wed, 30 Jan 2008 19:34:46 +0000"  >&lt;p&gt;As far as I can tell, this improvement is not in scope for the 1.0.2 branch; removing 1.0.2 from the target release list.&lt;/p&gt;</comment>
                            <comment id="12564448" author="fancy" created="Thu, 31 Jan 2008 18:32:00 +0000"  >&lt;p&gt;Hi, Patrick,&lt;br/&gt;
1. answer to your question on the changes we made to BrokerImpl:&lt;/p&gt;

&lt;p&gt;It&apos;s not that BrokerImpl needs an extension to detect whether these instances are members of the working set.  Rather, it&apos;s the BrokerImpl extension that needs the ability to override this detection.  This is a fine distinction.  Our BrokerImpl extension is only used while performing some pre-generation of sql statements.  It is not used during the actual openjpa runtime.  We wanted to use the same general mechanism for pre-generating sql as we do during runtime.  To accomplish this, we needed to extend BrokerImpl and provide some unique processing for the object ids.  We were trying to isolate the amount of code that had to be overridden to accomplish this task.  By introducing these two new protected methods (checkForDuplicateId and assignObjectId), we could limit the amount of code that needed to be overridden.  We are open to other suggestions.&lt;/p&gt;

&lt;p&gt;2. thank you for removing 1.0.2 from the target release list.&lt;/p&gt;

&lt;p&gt;Catalina&lt;/p&gt;</comment>
                            <comment id="12564456" author="pcl" created="Thu, 31 Jan 2008 18:53:36 +0000"  >&lt;p&gt;That makes sense. Not having access to the code in question, I don&apos;t have much input about alternate approaches.&lt;/p&gt;

&lt;p&gt;It was more the runtime behavior that I was interested in anyways.&lt;/p&gt;

&lt;p&gt;Regarding the project as a whole: what are your plans for it, source-code-wise? It sounds like a lot of the work that you&apos;re doing could be reused for some of the SQL caching and manual-SQL-specification issues that have been bouncing around over the last months. I&apos;d love to figure out some way to take advantage of the work you guys are doing to achieve some of these alternate goals.&lt;/p&gt;</comment>
                            <comment id="12583655" author="xavihendrix" created="Mon, 31 Mar 2008 13:21:07 +0100"  >&lt;p&gt;What about making org.openjpa.kernel.exp expressions public? It could be convenient for developer&apos;s ExpressionFactories or ExpressionVisitors to identify the expressions being processed, or subclassing them.&lt;/p&gt;

&lt;p&gt;Xavi&lt;/p&gt;</comment>
                            <comment id="12592687" author="pcl" created="Sun, 27 Apr 2008 23:39:40 +0100"  >&lt;p&gt;&amp;gt; What about making org.openjpa.kernel.exp expressions public? It could be convenient for&lt;br/&gt;
&amp;gt; developer&apos;s ExpressionFactories or ExpressionVisitors to identify the expressions being&lt;br/&gt;
&amp;gt; processed, or subclassing them. &lt;/p&gt;

&lt;p&gt;The challenges with making them public are:&lt;/p&gt;

&lt;p&gt;1. currently, they do actual real work &amp;#8211; i.e., they dig into the object model to perform in-memory query parsing. This work is probably not desirable in most implementations. Overriding the appropriate methods might do the trick, but is dangerous; extenders would need to take care to override everything necessary.&lt;/p&gt;

&lt;p&gt;2. making them extensible would potentially make it that much more painful if we changed anything there. Basically, that would make those classes into part of the implicit SPI in OpenJPA.&lt;/p&gt;

&lt;p&gt;3. making them public would potentially encourage developing an inefficient query processing engine, in which OpenJPA generated the AST and then the back-end walked that AST. By encouraging back-end developers to put together their own implementations of the interfaces, I expect that it&apos;s more likely that the implementations will eliminate one graph traversal more regularly. Of course, providing an invisible hand to encourage &quot;good design&quot; is not really our business, so this is a secondary concern.&lt;/p&gt;

&lt;p&gt;I think it would be useful to move all those classes into a new &apos;inmem&apos; package to get them out of the way and reduce clutter in that package, though.&lt;/p&gt;</comment>
                            <comment id="12592688" author="pcl" created="Sun, 27 Apr 2008 23:39:56 +0100"  >&lt;p&gt;Can this issue be marked as resolved?&lt;/p&gt;</comment>
                            <comment id="12595461" author="faywang" created="Fri, 9 May 2008 05:01:32 +0100"  >&lt;p&gt;The attached patch is to make BatchingPreparedStatementManagerImpl more flexible and extensible.&lt;/p&gt;</comment>
                            <comment id="12595615" author="mikedd" created="Fri, 9 May 2008 15:35:06 +0100"  >&lt;p&gt;Marking as resolved per Patrick&apos;s comments on April 27th. Fay&apos;s patch for BatchingPreparedStatement can be evaluated under issue &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-589&quot; title=&quot;Can not retrieve M-to-M data when DataCache is on&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-589&quot;&gt;&lt;del&gt;OPENJPA-589&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12373365" name="OPENJPA-477-trunk612523.patch" size="44338" author="dtlee" created="Thu, 17 Jan 2008 07:23:38 +0000"/>
                            <attachment id="12373791" name="OPENJPA-477.613332.patch" size="45403" author="fancy" created="Tue, 22 Jan 2008 23:31:43 +0000"/>
                            <attachment id="12381733" name="openjpa.patch" size="10190" author="faywang" created="Fri, 9 May 2008 05:01:31 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12395716">OPENJPA-598</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 5 Jan 2008 19:29:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160795</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysz7b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>203051</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>