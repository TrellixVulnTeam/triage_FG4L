<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:41:31 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/OPENJPA-1410/OPENJPA-1410.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[OPENJPA-1410] Class linkage exception when creating an EMF with OpenJPA M3</title>
                <link>https://issues.apache.org/jira/browse/OPENJPA-1410</link>
                <project id="12310351" key="OPENJPA">OpenJPA</project>
                    <description>&lt;p&gt;Posted by Seth Jackson on the user forum&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;It appears something was modified in OpenJPA 2.0 M3 from M2 that causes a&lt;br/&gt;
LinkageError.&lt;/p&gt;

&lt;p&gt;In my current environment, I&apos;ve tested both Glassfish and Tomcat using M2&lt;br/&gt;
and M3. M2 runs without problems, but M3 throws a linkage error as follows:&lt;/p&gt;

&lt;p&gt;Caused by: java.lang.LinkageError: loader constraint violation: loader&lt;br/&gt;
(instance of sun/misc/Launcher$AppClassLoader) previously initiated loading&lt;br/&gt;
for a different type with name&lt;br/&gt;
&quot;org/apache/openjpa/conf/OpenJPAConfiguration&quot;&lt;br/&gt;
       at java.lang.ClassLoader.defineClass1(Native Method)&lt;br/&gt;
       at java.lang.ClassLoader.defineClass(ClassLoader.java:621)&lt;br/&gt;
       at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)&lt;br/&gt;
       at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)&lt;br/&gt;
       at java.net.URLClassLoader.access$000(URLClassLoader.java:56)&lt;br/&gt;
       at java.net.URLClassLoader$1.run(URLClassLoader.java:195)&lt;br/&gt;
       at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
       at java.net.URLClassLoader.findClass(URLClassLoader.java:188)&lt;br/&gt;
       at java.lang.ClassLoader.loadClass(ClassLoader.java:307)&lt;br/&gt;
       at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)&lt;br/&gt;
       at java.lang.ClassLoader.loadClass(ClassLoader.java:252)&lt;br/&gt;
       at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)&lt;br/&gt;
       at&lt;br/&gt;
org.apache.openjpa.persistence.validation.ValidationUtils.setupValidation(ValidationUtils.java:53)&lt;br/&gt;
       at&lt;br/&gt;
org.apache.openjpa.persistence.PersistenceProviderImpl.loadValidator(PersistenceProviderImpl.java:290)&lt;br/&gt;
       at&lt;br/&gt;
org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:97)&lt;br/&gt;
       at&lt;br/&gt;
org.apache.openjpa.persistence.OpenJPAPersistence.createEntityManagerFactory(OpenJPAPersistence.java:128)&lt;br/&gt;
       at&lt;br/&gt;
org.apache.openjpa.persistence.OpenJPAPersistence.createEntityManagerFactory(OpenJPAPersistence.java:111)&lt;br/&gt;
       at test_test.user.UserAction.execute(UserAction.java:39)&lt;/p&gt;


&lt;p&gt;I&apos;ve already confirmed that the OpenJPA classes in question do NOT exist in&lt;br/&gt;
any other JARs in the path.&lt;/p&gt;

&lt;p&gt;ValidationUtils.setupValidation(ValidationUtils.java:53) calls the&lt;br/&gt;
OpenJPAConfiguration.getConfigurationLog(). The object being referenced is&lt;br/&gt;
JDBCConfigurationImpl, which in other classes retrieves the log reference&lt;br/&gt;
perfectly fine, before it gets to the offending line.&lt;/p&gt;

&lt;p&gt;Seth&apos;s follow up&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;After further review, using Glassfish 2.1.1 I received this error message in&lt;br/&gt;
the server log:&lt;/p&gt;

&lt;p&gt;Caused by: java.lang.LinkageError: loader constraint violation: when&lt;br/&gt;
resolving method&lt;br/&gt;
&quot;org.apache.openjpa.persistence.validation.ValidationUtils.setupValidation(Lorg/apache/openjpa/conf/OpenJPAConfiguration;)Z&quot;&lt;br/&gt;
the class loader (instance of org/apache/catalina/loader/WebappClassLoader)&lt;br/&gt;
of the current class,&lt;br/&gt;
org/apache/openjpa/persistence/PersistenceProviderImpl, and the class loader&lt;br/&gt;
(instance of sun/misc/Launcher$AppClassLoader) for resolved class,&lt;br/&gt;
org/apache/openjpa/persistence/validation/ValidationUtils, have different&lt;br/&gt;
Class objects for the type org/apache/openjpa/conf/OpenJPAConfiguration used&lt;br/&gt;
in the signature&lt;/p&gt;

&lt;p&gt;So it appears to be the WebappClassLoader and the AppClassLoader are both&lt;br/&gt;
loading the OpenJPAConfiguration from the same JAR file, causing the error&lt;br/&gt;
when the class is trying to be resolved in this particular method.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://n2.nabble.com/Struts-2x-OpenJPA-2-0-M3-Tomcat-or-Glassfish-tp4087312p4087312.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://n2.nabble.com/Struts-2x-OpenJPA-2-0-M3-Tomcat-or-Glassfish-tp4087312p4087312.html&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://n2.nabble.com/Struts-2x-OpenJPA-2-0-M3-Tomcat-or-Glassfish-tp4087312p4093228.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://n2.nabble.com/Struts-2x-OpenJPA-2-0-M3-Tomcat-or-Glassfish-tp4087312p4093228.html&lt;/a&gt;&lt;/p&gt;</description>
                <environment>Tomcat and Glassfish, OpenJPA M3</environment>
        <key id="12442243">OPENJPA-1410</key>
            <summary>Class linkage exception when creating an EMF with OpenJPA M3</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="techhusky">Jeremy Bauer</assignee>
                                    <reporter username="techhusky">Jeremy Bauer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 2 Dec 2009 18:13:44 +0000</created>
                <updated>Tue, 12 Apr 2011 08:40:14 +0100</updated>
                            <resolved>Mon, 22 Mar 2010 12:41:53 +0000</resolved>
                                    <version>2.0.0-M3</version>
                    <version>2.0.0-beta</version>
                    <version>2.0.0-beta2</version>
                                    <fixVersion>2.0.0-beta3</fixVersion>
                                    <component>validation</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12785441" author="ppoddar@apache.org" created="Thu, 3 Dec 2009 18:45:44 +0000"  >&lt;p&gt;Hi Jeremy,&lt;br/&gt;
  You write in Nabble post&lt;br/&gt;
  &quot;The code in PersistenceProviderImpl that sets up validation looks like it might be suspect to classloading issues. &quot;&lt;/p&gt;

&lt;p&gt;  Here is the code in PersistenceProviderImpl.createEntityManagerFactory()  &lt;br/&gt;
             // TODO - Can this be moved back to BrokerImpl.initialize()?&lt;br/&gt;
            // Create appropriate LifecycleEventManager&lt;br/&gt;
            loadValidator(_log, conf);&lt;/p&gt;

&lt;p&gt;Can you please describe why at the first place, we went to this unusual path for initializing/loading Validation-aware lifecycle manager plugin? This may help understanding possible resolution as per initialization of any other plugins.&lt;/p&gt;</comment>
                            <comment id="12791377" author="hellonico" created="Wed, 16 Dec 2009 14:19:49 +0000"  >&lt;p&gt;As a note I can only reproduce this on Windows, OSX and Linux are working fine. &lt;/p&gt;</comment>
                            <comment id="12791380" author="seth.jackson" created="Wed, 16 Dec 2009 14:24:39 +0000"  >&lt;p&gt;I will confirm that I was encountering this on Windows XP and was not running on any other platform. Thanks.&lt;/p&gt;</comment>
                            <comment id="12796218" author="struberg" created="Mon, 4 Jan 2010 15:45:08 +0000"  >&lt;p&gt;this also happens to me on Linux (Fedora 11 x86_64) if running on tomcat-6 (tried 6.0.18 and 6.0.20) but &lt;em&gt;not&lt;/em&gt; on jetty-6!&lt;/p&gt;

&lt;p&gt;I&apos;m using the openjpa-all-2.0.0-M3 package dependency.&lt;/p&gt;

&lt;p&gt;Caused by: java.lang.LinkageError: loader constraint violation: loader (instance of sun/misc/Launcher$AppClassLoader) previously initiated loading for a different type with name &quot;org/apache/openjpa/conf/OpenJPAConfiguration&quot;&lt;br/&gt;
	at java.lang.ClassLoader.defineClass1(Native Method)&lt;br/&gt;
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)&lt;br/&gt;
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)&lt;br/&gt;
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)&lt;br/&gt;
	at java.net.URLClassLoader.access$000(URLClassLoader.java:56)&lt;br/&gt;
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:303)&lt;br/&gt;
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)&lt;br/&gt;
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:316)&lt;br/&gt;
	at org.apache.openjpa.persistence.validation.ValidationUtils.setupValidation(ValidationUtils.java:53)&lt;br/&gt;
	at org.apache.openjpa.persistence.PersistenceProviderImpl.loadValidator(PersistenceProviderImpl.java:290)&lt;br/&gt;
	at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:97)&lt;br/&gt;
	at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:151)&lt;br/&gt;
	at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:59)&lt;br/&gt;
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:159)&lt;br/&gt;
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:71)&lt;br/&gt;
	at org.apache.webbeans.resource.spi.se.ResourceServiceImpl.getPersistenceUnit(ResourceServiceImpl.java:111)&lt;br/&gt;
	at org.apache.webbeans.resource.spi.se.ResourceServiceImpl.getPersistenceContext(ResourceServiceImpl.java:125)&lt;br/&gt;
	at org.apache.webbeans.resource.spi.se.ResourceServiceImpl.getResource(ResourceServiceImpl.java:59)&lt;br/&gt;
	at org.apache.webbeans.resource.OpenWebBeansResourcePlugin.injectResources(OpenWebBeansResourcePlugin.java:61)&lt;/p&gt;</comment>
                            <comment id="12834588" author="hellonico" created="Wed, 17 Feb 2010 01:23:18 +0000"  >&lt;p&gt;So I removed validation since it is optional, and tried to move on.&lt;br/&gt;
But stumbled against a very similar Linkage error.&lt;/p&gt;

&lt;p&gt;Caused by: java.lang.LinkageError: loader constraint violation: loader (instance of sun/misc/Launcher$AppClassLoader) &lt;br/&gt;
previously initiated loading for a different type with name &quot;org/apache/openjpa/kernel/BrokerFactory&quot;&lt;br/&gt;
        at java.lang.ClassLoader.defineClass1(Native Method)&lt;br/&gt;
        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)&lt;br/&gt;
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)&lt;br/&gt;
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)&lt;br/&gt;
        at java.net.URLClassLoader.access$000(URLClassLoader.java:56)&lt;br/&gt;
        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)&lt;br/&gt;
        at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)&lt;br/&gt;
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:276)&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:251)&lt;br/&gt;
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)&lt;br/&gt;
        at org.apache.openjpa.persistence.JPAFacadeHelper.toEntityManagerFactory(JPAFacadeHelper.java:70)&lt;br/&gt;
        at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:111)&lt;br/&gt;
        at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:153)&lt;br/&gt;
        at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:64)&lt;br/&gt;
        at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:150)&lt;/p&gt;</comment>
                            <comment id="12834672" author="hellonico" created="Wed, 17 Feb 2010 07:28:45 +0000"  >&lt;p&gt;For those of use that do not need an agent and a validator, commenting out those two lines in PersistenceProviderImpl:&lt;br/&gt;
            //loadAgent(factory);&lt;br/&gt;
            //loadValidator(factory);&lt;/p&gt;

&lt;p&gt;fixes the bad behavior. &lt;br/&gt;
It looks like the factory is loaded in some different classloader and then clashes only when calling a method on it. &lt;/p&gt;

&lt;p&gt;Making a working jar file available using only the svn rev and the fix above, to people who needs it:&lt;br/&gt;
&lt;a href=&quot;http://www.intalio.org/public/maven2/org/apache/openjpa/openjpa-all/2.0.0-svn-910423/openjpa-all-2.0.0-svn-910423.jar&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.intalio.org/public/maven2/org/apache/openjpa/openjpa-all/2.0.0-svn-910423/openjpa-all-2.0.0-svn-910423.jar&lt;/a&gt;&lt;/p&gt;

</comment>
                            <comment id="12836147" author="crispyoz" created="Sat, 20 Feb 2010 10:25:20 +0000"  >&lt;p&gt;I tried this new Jar by Nicolas but I get the same issue, I have no other JPA API in my path and I went so far as to reboot my machine. I was using OpenJPA 1.2.1  and now trying to switch to 2.0.0Beta.&lt;/p&gt;

&lt;p&gt;Using Win7. Here is my stack trace.&lt;/p&gt;

&lt;p&gt;20/02/2010 9:19:26 PM org.apache.catalina.core.StandardContext listenerStart&lt;br/&gt;
SEVERE: Exception sending context initialized event to listener instance of class com.trm.app.listeners.StartupServletListener&lt;br/&gt;
java.lang.LinkageError: loader constraint violation: loader (instance of sun/misc/Launcher$AppClassLoader) previously initiated loading for a different type with name &quot;org/apache/openjpa/conf/OpenJPAConfiguration&quot;&lt;br/&gt;
	at java.lang.ClassLoader.defineClass1(Native Method)&lt;br/&gt;
	at java.lang.ClassLoader.defineClass(ClassLoader.java:621)&lt;br/&gt;
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)&lt;br/&gt;
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)&lt;br/&gt;
	at java.net.URLClassLoader.access$000(URLClassLoader.java:56)&lt;br/&gt;
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)&lt;br/&gt;
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)&lt;br/&gt;
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)&lt;br/&gt;
	at org.apache.openjpa.persistence.validation.ValidationUtils.setupValidation(ValidationUtils.java:53)&lt;br/&gt;
	at org.apache.openjpa.persistence.PersistenceProviderImpl.loadValidator(PersistenceProviderImpl.java:316)&lt;br/&gt;
	at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:100)&lt;br/&gt;
	at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:151)&lt;br/&gt;
	at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:62)&lt;br/&gt;
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:150)&lt;br/&gt;
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:70)&lt;/p&gt;
</comment>
                            <comment id="12843214" author="josetex@gmail.com" created="Tue, 9 Mar 2010 18:18:29 +0000"  >&lt;p&gt;Hi. I also tried the jar getting the same problem. Christophe, eventually,&lt;br/&gt;
did you make it work?&lt;/p&gt;</comment>
                            <comment id="12843302" author="techhusky" created="Tue, 9 Mar 2010 21:27:27 +0000"  >&lt;p&gt;I was able to reproduce this problem on Tomcat 6.0.20, but not Glassfish 3.    I don&apos;t know if OpenJPA 2.0 can be made to work with Glassfish 2.x since that level of server is Java EE 5 and OpenJPA 2.0 is uses the JPA 2.0 API, which is Java EE 6 technology.  Glassfish provides its own JPA 1.0 persistence library and it may collide with the JPA 2.0 persistence library required for OpenJPA 2.0.  The exception doesn&apos;t point to that type of issue though.  And the app looks to be application managed so the 2.0 library may be overriding the 1.0 library without ill effects to the container.&lt;/p&gt;

&lt;p&gt;Tomcat 6 also includes JPA 1.0 persistence API classes, but only a small subset.  That could causing the same type of API collision issue on that platform.  But, again, the failure doesn&apos;t indicate this to be the problem.  I&apos;ll continue to debug the issue further and provide a fix, if possible.&lt;/p&gt;</comment>
                            <comment id="12843326" author="drwoods" created="Tue, 9 Mar 2010 22:17:07 +0000"  >&lt;p&gt;In Catalina -&lt;br/&gt;
src/main/java/org/apache/catalina/core/DefaultInstanceManager.processAnnotations()&lt;br/&gt;
...&lt;br/&gt;
                } else if (field.isAnnotationPresent(PersistenceContext.class)) &lt;/p&gt;
{
                    PersistenceContext annotation =
                        field.getAnnotation(PersistenceContext.class);
                    lookupFieldResource(context, instance, field, annotation.name());
                }
&lt;p&gt; else if (field.isAnnotationPresent(PersistenceUnit.class)) &lt;/p&gt;
{
                    PersistenceUnit annotation =
                        field.getAnnotation(PersistenceUnit.class);
                    lookupFieldResource(context, instance, field, annotation.name());
                }
&lt;p&gt;...&lt;/p&gt;</comment>
                            <comment id="12843590" author="techhusky" created="Wed, 10 Mar 2010 15:19:48 +0000"  >&lt;p&gt;Thanks, Donald.  ..nothing there that should cause breakage.  Another concern is that Catalina includes lib/annotations-api.jar.  That jar contains a few javax.persistence classes:&lt;/p&gt;

&lt;p&gt;javax/persistence/PersistenceContext.class&lt;br/&gt;
javax/persistence/PersistenceContextType.class&lt;br/&gt;
javax/persistence/PersistenceContexts.class&lt;br/&gt;
javax/persistence/PersistenceProperty.class&lt;br/&gt;
javax/persistence/PersistenceUnit.class&lt;br/&gt;
javax/persistence/PersistenceUnits.class&lt;/p&gt;

&lt;p&gt;Depending on the classloader configuration, adding the JPA 2.0 spec API to the application may foul up the environment.  I&apos;m guessing not though, since the server should break even when a complete JPA 1.0 API is added to the classpath.  TBD...&lt;/p&gt;</comment>
                            <comment id="12843609" author="jbb" created="Wed, 10 Mar 2010 16:13:13 +0000"  >&lt;p&gt;I can still reproduce it using 2.0.0 beta 2 on Linux. On MacOSX it is OK.&lt;br/&gt;
Using Tomcat 6.0.24 under Linux Ubuntu, JDK 1.6.0_18&lt;/p&gt;

&lt;p&gt;If I remove annotations-api.jar from tomcat/lib, nothing works, it explode before the servlet init().&lt;/p&gt;</comment>
                            <comment id="12844454" author="jbb" created="Fri, 12 Mar 2010 10:53:37 +0000"  >&lt;p&gt;Found a workaround :&lt;/p&gt;

&lt;p&gt;0. rename  tomcat/lib/annotations-api.jar to  tomcat/lib/annotations-api.jar.original&lt;br/&gt;
1. repackage the tomcat/lib/annotations-api.jar file by removing javax/persistence folder&lt;br/&gt;
    (use to rebuild jar file : jar cvfm annotations-api.jar META-INF/MANIFEST.MF -C annotation-api .)&lt;br/&gt;
2. Add the following files to the tomcat/lib :&lt;br/&gt;
    geronimo-jpa_2.0_spec-1.0.jar&lt;br/&gt;
    geronimo-jta_1.1_spec-1.1.1.jar&lt;/p&gt;

&lt;p&gt;This will force JVM classloader to use JPA 2.0 files&lt;/p&gt;</comment>
                            <comment id="12844499" author="jbb" created="Fri, 12 Mar 2010 13:50:52 +0000"  >&lt;p&gt;I&apos;m sorry, this was not a workaround : the error is still there ... &lt;/p&gt;</comment>
                            <comment id="12844525" author="jbb" created="Fri, 12 Mar 2010 14:46:53 +0000"  >&lt;p&gt;I tested with Tomcat via our IDE but also directly with Tomcat, deloying by hand to ensure the IDE classpath will not interfere.&lt;br/&gt;
It is confirmed : it doesn&apos;t work.&lt;/p&gt;</comment>
                            <comment id="12844687" author="techhusky" created="Fri, 12 Mar 2010 21:21:01 +0000"  >&lt;p&gt;I found that this problem is not related to loading bean validation.  Instead, it is a problem with the OpenJPA enhancer.  When running with Sun JDK, OpenJPA&apos;s dynamic enhancer kicks in by default.  This is flubbing up the classloader.  A simple workaround is to do the enhancement at build time and add this property to your persistence.xml to shut off the dynamic enhancer:&lt;/p&gt;

&lt;p&gt;      &amp;lt;property name=&quot;openjpa.DynamicEnhancementAgent&quot; value=&quot;false&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;I also tried OpenJPA&apos;s runtime enhancer (now turned off by default in OpenJPA 2.0) and hit the same problem. So it looks to be a general classloader-related problem when using OpenJPA&apos;s runtime enhancer running under Catalina (Tomcat &amp;amp; Glassfish).  I have dug into the problem yet, though.&lt;/p&gt;

&lt;p&gt;FYI - To simplify usage of OpenJPA 2.0 you can simply include openjpa-all-2.0.0-beta2.jar in the WEB-APP/lib directory of your application.  That jar contains all the dependencies necessary to use OpenJPA 2.0.&lt;/p&gt;

&lt;p&gt;I have not tried to configure Tomcat to use the agent-based enhancer.  I&apos;ll give that a try and post the result.  I suspect that I&apos;ll see the same problem though.  Please let me know if the workaround above gets you around the exception.&lt;/p&gt;</comment>
                            <comment id="12844709" author="techhusky" created="Fri, 12 Mar 2010 22:00:28 +0000"  >&lt;p&gt;Oddly, I&apos;m also seeing the &quot;fallback&quot; runtime enhancer start up.  That is causing the same types of classloading type exceptions as the dynamic enhancer.  I could swear that it was disabled in 2.0.    You may also need to add this property as well to disable that enhancer:&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;openjpa.RuntimeUnenhancedClasses&quot; value=&quot;unsupported&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;With both of these enhancers disabled, you&apos;ll get a reasonable exception/error message if your classes were not build time enhanced.  Something to the tune of...  &lt;/p&gt;

&lt;p&gt;org.apache.openjpa.persistence.ArgumentException: This configuration disallows runtime optimization, but the following listed types were not enhanced at build time or at class load time with a javaagent: &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;class my.Class&amp;#93;&lt;/span&gt;&quot;. &lt;/p&gt;</comment>
                            <comment id="12846089" author="techhusky" created="Tue, 16 Mar 2010 19:34:55 +0000"  >&lt;p&gt;This can of worms is still open...  getting closer though.  I do not see the same classloading failures when running Tomcat with the agent-based enhancer.  However, the entity classes in my web app are not being enhanced by the enhancer.  If I flip on the runtime enhancer with this configuration via:&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;openjpa.RuntimeUnenhancedClasses&quot; value=&quot;supported&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;the subclassing runtime enhancer now works.  (go figure)&lt;/p&gt;

&lt;p&gt;Similar to the agent-based enhancer, the dynamic enhancer gets loaded by the system classloader.  This is problematic under a normal Tomcat config since the OpenJPA library has already been loaded by the web app classloader or the common classloader (if OpenJPA is provided as a common/shared lib).  After the dynamic agent loads OpenJPA into the system classloader, class redefinition/linkage exceptions arise.&lt;/p&gt;</comment>
                            <comment id="12846563" author="techhusky" created="Wed, 17 Mar 2010 20:16:58 +0000"  >&lt;p&gt;I committed a change under rev 924395 that disables the dynamic enhancer if the OpenJPA instrumentation factory is not loaded by the system classloader.  In a multi-tier classloader environment (Tomcat, JEE app server, etc.)  the OpenJPA jar was being loaded by the container classloader and then loaded a second time into the system classloader (as an agent).  This lead to linkage issues since OpenJPA classes were loaded from multiple loaders and there ended up being a mix of classes in the execution path.  &lt;/p&gt;

&lt;p&gt;After correcting this issue, the subclassing enhancer is working again (but that has its own set of deficiencies and is not recommended) - but agent-based enhancement (-javaagent:...) is not.  This is not a result of my change, there is some other issue.  I plan on looking into that next.&lt;/p&gt;

&lt;p&gt;As of rev 924395 the openjpa.DynamicEnhancementAgent=false property should no longer be required, but build time enhancement of entities may still be necessary.&lt;/p&gt;</comment>
                            <comment id="12847081" author="techhusky" created="Thu, 18 Mar 2010 19:37:41 +0000"  >&lt;p&gt;Experimentation and a quick search for similar issues is showing that use of the OpenJPA&apos;s agent enhancer with Tomcat never worked?!? The agent gets tied to the base class loader and enhances classes available to that loader at startup. Each app has their own lazily instantiated class loader. Enhancement has already taken place by the time those loaders get instantiated. This looked like a regression, but it it is actually a separate and much larger issue than the one raised in this JIRA. I will not pursue that issue at this time.&lt;/p&gt;

&lt;p&gt;Please verify that you no longer see the original problem/exception with latest 2.0 build. If you were relying on runtime enhancement you will need to re-enable it by specifying:&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;openjpa.RuntimeUnenhancedClasses&quot; value=&quot;supported&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;A more recommended solution is to enhance your entities and build time.&lt;/p&gt;</comment>
                            <comment id="12847420" author="jbb" created="Fri, 19 Mar 2010 16:24:18 +0000"  >&lt;p&gt;I confirm the problem is solved by adding that 2 properties.&lt;br/&gt;
By the way, we were enhancing at build-time.&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;openjpa.DynamicEnhancementAgent&quot; value=&quot;false&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;property name=&quot;openjpa.RuntimeUnenhancedClasses&quot; value=&quot;unsupported&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;I still don&apos;t understand how it worked on Mac plateform and not on Linux...&lt;/p&gt;</comment>
                            <comment id="12848105" author="drwoods" created="Mon, 22 Mar 2010 12:41:53 +0000"  >&lt;p&gt;Jean-Baptiste BRIAUD confirmed the patch works and allows built time enhanced entities to work on Tomcat, since the agent enhancer is not being incorrectly loaded.&lt;/p&gt;

&lt;p&gt;Opened &lt;a href=&quot;https://issues.apache.org/jira/browse/OPENJPA-1590&quot; title=&quot;Agent enhancer doesn&amp;#39;t work with Tomcat&quot; class=&quot;issue-link&quot; data-issue-key=&quot;OPENJPA-1590&quot;&gt;&lt;del&gt;OPENJPA-1590&lt;/del&gt;&lt;/a&gt; to track the remaining issue of the agent enhancer not working with Tomcat.&lt;/p&gt;</comment>
                            <comment id="12848766" author="seth.jackson" created="Tue, 23 Mar 2010 15:50:34 +0000"  >&lt;p&gt;Using the latest available OpenJPA 2.0.0 Beta 2, Tomcat 6, Java 1.5, and Windows XP:&lt;/p&gt;

&lt;p&gt;Persistence.XML:&lt;br/&gt;
&amp;lt;property name=&quot;openjpa.RuntimeUnenhancedClasses&quot; value=&quot;supported&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;Using ANT to run PCEnhancerTask at build time:&lt;/p&gt;

&lt;p&gt;&amp;lt;taskdef name=&quot;openjac&quot; classname=&quot;org.apache.openjpa.ant.PCEnhancerTask&quot;&amp;gt;&lt;br/&gt;
&amp;lt;classpath refid=&quot;classpath&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/taskdef&amp;gt;&lt;br/&gt;
&amp;lt;openjac&amp;gt;&lt;br/&gt;
&amp;lt;classpath refid=&quot;classpath&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;config propertiesfile=&quot;./src/META-INF/persistence.xml&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/openjac&amp;gt;&lt;/p&gt;

&lt;p&gt;Upon building, I receiving the message: &quot;No targets given. Running on all classes in your persistence classes list...&quot;&lt;/p&gt;

&lt;p&gt;Confirmed all entities are in the persistence XML.&lt;/p&gt;

&lt;p&gt;Deploy WAR to Tomcat. Started Tomcat and navigated to web page. Clicked button that attempted to retrieve an entity from the database and the following exception occurred:&lt;/p&gt;

&lt;p&gt;c:\tomcat\temp\org.apache.openjpa.enhance.InstrumentationFactory3419745326061675422.jar was created and it may not get cleaned up properly.&lt;br/&gt;
java.lang.ClassNotFoundException: org.apache.openjpa.enhance.InstrumentationFactory&lt;br/&gt;
at java.net .URLClassLoader$1.run(URLClassLoader.java:200)&lt;br/&gt;
at java.security.AccessController.doPrivileged(Natuve Method)&lt;br/&gt;
at java.net.URLClassLoader.findClass(URLClassLoader.java:188)&lt;br/&gt;
at java.lang.ClassLoader.loadClass(ClassLoader.java:303)&lt;br/&gt;
at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)&lt;br/&gt;
...&lt;b&gt;SNIP&lt;/b&gt;&lt;br/&gt;
at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:348)&lt;/p&gt;


&lt;p&gt;After this, all OpenJPA queries immediately throw QueryTimeoutException, even though I have javax.persistence.query.timeout set to 0 in the persistence.XML.&lt;/p&gt;

&lt;p&gt;Still unable to use OpenJPA 2.0 on Tomcat.&lt;/p&gt;


&lt;p&gt;I apologize ahead of time, I had to hand type this out as the error in on a separate PC.&lt;/p&gt;</comment>
                            <comment id="12848799" author="techhusky" created="Tue, 23 Mar 2010 16:58:58 +0000"  >&lt;p&gt;The code change was checked into trunk after beta2 was released.  For beta2, with compile-time enhanced entities, you&apos;ll need to add these properties to your persistence.xml:&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;openjpa.DynamicEnhancementAgent&quot; value=&quot;false&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;property name=&quot;openjpa.RuntimeUnenhancedClasses&quot; value=&quot;unsupported&quot;/&amp;gt;&lt;/p&gt;
</comment>
                            <comment id="12848812" author="seth.jackson" created="Tue, 23 Mar 2010 17:23:07 +0000"  >&lt;p&gt;Confirmed. Modified persistence XML properties and my previous error is gone. Thank you and good work!&lt;/p&gt;</comment>
                            <comment id="12848880" author="techhusky" created="Tue, 23 Mar 2010 19:48:54 +0000"  >&lt;p&gt;That is great news.  Thanks for verifying!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12459850">OPENJPA-1590</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12398823">OPENJPA-640</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12503837">OPENJPA-1976</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 3 Dec 2009 18:45:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>161677</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hysr6n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>201752</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>