org.apache.openjpa.eclipse.Activator.Activator()
org.apache.openjpa.eclipse.Activator.getDefault()
org.apache.openjpa.eclipse.Activator.getDisplay()
org.apache.openjpa.eclipse.Activator.getImageDescriptor(String)
org.apache.openjpa.eclipse.Activator.getLabelProvider()
org.apache.openjpa.eclipse.Activator.getShell()
org.apache.openjpa.eclipse.Activator.isUsingOpenJPA(IProject)
org.apache.openjpa.eclipse.Activator.log(String)
org.apache.openjpa.eclipse.Activator.log(Throwable)
org.apache.openjpa.eclipse.Activator.start(BundleContext)
org.apache.openjpa.eclipse.Activator.stop(BundleContext)
org.apache.openjpa.eclipse.EnhancerBuilderTest.copyTestClassToPackage(IPackageFragment,String)
org.apache.openjpa.eclipse.EnhancerBuilderTest.setUp()
org.apache.openjpa.eclipse.EnhancerBuilderTest.tearDown()
org.apache.openjpa.eclipse.EnhancerBuilderTest.testNoop()
org.apache.openjpa.eclipse.EnhancerBuilderTest.todotestBuilder()
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.addMarkerAndThrowNewCoreException(IFile,String,Throwable)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.addMarker(IFile,String,int,int)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.build(int,Map,IProgressMonitor)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.checkCancel(IProgressMonitor)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.deleteMarkers(IFile)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.elementChanged(ElementChangedEvent)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.enhance(IResource,PCEnhancerHelper,BuilderOptions)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.fullBuild(IProgressMonitor,BuilderOptions)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.getEnhancer(IProject)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.incrementalBuild(IResourceDelta,IProgressMonitor,BuilderOptions)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.isClasspath(IResourceDelta)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.isFullLoggingEnabled(Map<String,String>,String,String)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.logAndThrowNewCoreException(String,Throwable)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.MyFullBuildResourceVisitor.getResourcesPotentiallyNeedingEnhancement()
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.MyFullBuildResourceVisitor.MyFullBuildResourceVisitor(IProgressMonitor,BuilderOptions)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.MyFullBuildResourceVisitor.visit(IResource)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.MyIncrementalBuildResourceDeltaVisitor.MyIncrementalBuildResourceDeltaVisitor(IProgressMonitor,PCEnhancerHelper,BuilderOptions)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.MyIncrementalBuildResourceDeltaVisitor.visit(IResourceDelta)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.needsEnhancement(IResource,BuilderOptions)
org.apache.openjpa.eclipse.OpenJPAEnhancerBuilder.OpenJPAEnhancerBuilder()
org.apache.openjpa.eclipse.OpenJPANature.configure()
org.apache.openjpa.eclipse.OpenJPANature.deconfigure()
org.apache.openjpa.eclipse.OpenJPANature.getProject()
org.apache.openjpa.eclipse.OpenJPANature.setProject(IProject)
org.apache.openjpa.eclipse.PluginLibrary.copyJar(JarInputStream,JarOutputStream)
org.apache.openjpa.eclipse.PluginLibrary.findMissingLibrary(IProject)
org.apache.openjpa.eclipse.PluginLibrary.getDescription()
org.apache.openjpa.eclipse.PluginLibrary.getLibraryClasspaths(IProject,List<String>,String,boolean)
org.apache.openjpa.eclipse.PluginLibrary.getRuntimeLibraries(Bundle)
org.apache.openjpa.eclipse.PluginLibrary.JarCopier.JarCopier(InputStream,File)
org.apache.openjpa.eclipse.PluginLibrary.JarCopier.JarCopier(InputStream,File,boolean,int)
org.apache.openjpa.eclipse.PluginLibrary.JarCopier.run(IProgressMonitor)
org.apache.openjpa.eclipse.PluginLibrary.matchesPattern(String,List<String>,String)
org.apache.openjpa.eclipse.PluginProperty.qname(String)
org.apache.openjpa.eclipse.TestEntity.getName()
org.apache.openjpa.eclipse.ToggleNatureAction.addClasspath(IProject,IClasspathEntry[])
org.apache.openjpa.eclipse.ToggleNatureAction.addNature(IProject,String)
org.apache.openjpa.eclipse.ToggleNatureAction.contains(IClasspathEntry[],IClasspathEntry)
org.apache.openjpa.eclipse.ToggleNatureAction.fireLabelEvent(IProject)
org.apache.openjpa.eclipse.ToggleNatureAction.fireLabelEvent.run()
org.apache.openjpa.eclipse.ToggleNatureAction.getNatureIndex(IProject,String)
org.apache.openjpa.eclipse.ToggleNatureAction.removeClasspath(IProject)
org.apache.openjpa.eclipse.ToggleNatureAction.removeNature(IProject,int)
org.apache.openjpa.eclipse.ToggleNatureAction.run(IAction)
org.apache.openjpa.eclipse.ToggleNatureAction.selectionChanged(IAction,ISelection)
org.apache.openjpa.eclipse.ToggleNatureAction.setActivePart(IAction,IWorkbenchPart)
org.apache.openjpa.eclipse.ToggleNatureAction.toggleNature(IProject)
org.apache.openjpa.eclipse.ui.AbstractDialog.AbstractDialog(Shell,IProject,String,String,String)
org.apache.openjpa.eclipse.ui.AbstractDialog.createButtonsForButtonBar(Composite)
org.apache.openjpa.eclipse.ui.AbstractDialog.createContents(Composite)
org.apache.openjpa.eclipse.ui.AbstractDialog.createDialogArea(Composite)
org.apache.openjpa.eclipse.ui.AddNatureDialog.AddNatureDialog(Shell,IProject,String,String,String,List<String>,String)
org.apache.openjpa.eclipse.ui.AddNatureDialog.BooleanPropertyRegister.BooleanPropertyRegister(Button,QualifiedName)
org.apache.openjpa.eclipse.ui.AddNatureDialog.BooleanPropertyRegister.widgetDefaultSelected(SelectionEvent)
org.apache.openjpa.eclipse.ui.AddNatureDialog.BooleanPropertyRegister.widgetSelected(SelectionEvent)
org.apache.openjpa.eclipse.ui.AddNatureDialog.createCheckBox(Composite,String)
org.apache.openjpa.eclipse.ui.AddNatureDialog.createCheckBox(Composite,String,QualifiedName)
org.apache.openjpa.eclipse.ui.AddNatureDialog.getAddLibrary()
org.apache.openjpa.eclipse.ui.ProjectDecorator.decorate(Object,IDecoration)
org.apache.openjpa.eclipse.ui.ProjectDecorator.dispose()
org.apache.openjpa.eclipse.ui.ProjectDecorator.fireLabelProviderChanged(LabelProviderChangedEvent)
org.apache.openjpa.eclipse.ui.ProjectDecorator.isLabelProperty(Object,String)
org.apache.openjpa.eclipse.ui.ProjectDecorator.labelProviderChanged(LabelProviderChangedEvent)
org.apache.openjpa.eclipse.ui.ProjectDecorator.ProjectDecorator()
org.apache.openjpa.eclipse.ui.RemoveNatureDialog.RemoveNatureDialog(Shell,IProject,String,String,String)
org.apache.openjpa.eclipse.util.ClassLoaderFromIProjectHelper.createClassLoader(IProject)
org.apache.openjpa.eclipse.util.ClassLoaderFromIProjectHelper.findClass(String,IProject)
org.apache.openjpa.eclipse.util.ClasspathHelperTest.testCreateClassLoader()
org.apache.openjpa.eclipse.util.EclipseLogFactory.getLog.isEnabled(short)
org.apache.openjpa.eclipse.util.EclipseLogFactory.getLog.log(short,String,Throwable)
org.apache.openjpa.eclipse.util.EclipseLogFactory.getLog(String)
org.apache.openjpa.eclipse.util.LogUtil.logError(String,Throwable)
org.apache.openjpa.eclipse.util.LogUtil.logError(Throwable)
org.apache.openjpa.eclipse.util.LogUtil.logInfo(String)
org.apache.openjpa.eclipse.util.LogUtil.logInfo(String,Throwable)
org.apache.openjpa.eclipse.util.LogUtil.log(int,String)
org.apache.openjpa.eclipse.util.LogUtil.log(int,String,Throwable)
org.apache.openjpa.eclipse.util.LogUtil.logOK(String)
org.apache.openjpa.eclipse.util.LogUtil.LogUtil()
org.apache.openjpa.eclipse.util.LogUtil.logWarn(String,Throwable)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.AntPatternComparator.AntPatternComparator(String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.AntPatternComparator.compare(String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.combine(String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.doMatch(String,String,boolean,Map<String,String>,String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.extractPathWithinPattern(String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.extractUriTemplateVariables(String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.getPatternComparator(String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.isPattern(String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.matchStart(String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.matchStrings(String,String,Map<String,String>,String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.match(String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathMatcher.setPathSeparator(String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathStringMatcher.AntPathStringMatcher(String,String,Map<String,String>,String,String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathStringMatcher.createPattern(String)
org.apache.openjpa.eclipse.util.pathmatch.AntPathStringMatcher.matchStrings()
org.apache.openjpa.eclipse.util.pathmatch.AntPathStringMatcher.quote(String,int,int)
org.apache.openjpa.eclipse.util.pathmatch.Assert.doesNotContain(String,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.doesNotContain(String,String,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.hasLength(String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.hasLength(String,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.hasText(String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.hasText(String,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.isAssignable(Class,Class)
org.apache.openjpa.eclipse.util.pathmatch.Assert.isAssignable(Class,Class,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.isInstanceOf(Class,Object)
org.apache.openjpa.eclipse.util.pathmatch.Assert.isInstanceOf(Class,Object,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.isNull(Object)
org.apache.openjpa.eclipse.util.pathmatch.Assert.isNull(Object,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.isTrue(boolean)
org.apache.openjpa.eclipse.util.pathmatch.Assert.isTrue(boolean,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.noNullElements(Object[])
org.apache.openjpa.eclipse.util.pathmatch.Assert.noNullElements(Object[],String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.notEmpty(Collection)
org.apache.openjpa.eclipse.util.pathmatch.Assert.notEmpty(Collection,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.notEmpty(Map)
org.apache.openjpa.eclipse.util.pathmatch.Assert.notEmpty(Map,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.notEmpty(Object[])
org.apache.openjpa.eclipse.util.pathmatch.Assert.notEmpty(Object[],String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.notNull(Object)
org.apache.openjpa.eclipse.util.pathmatch.Assert.notNull(Object,String)
org.apache.openjpa.eclipse.util.pathmatch.Assert.state(boolean)
org.apache.openjpa.eclipse.util.pathmatch.Assert.state(boolean,String)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.arrayToList(Object)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.containsAny(Collection,Collection)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.contains(Enumeration,Object)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.containsInstance(Collection,Object)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.contains(Iterator,Object)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.EnumerationIterator.EnumerationIterator(Enumeration<E>,E)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.EnumerationIterator.hasNext()
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.EnumerationIterator.next()
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.EnumerationIterator.remove()
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.findFirstMatch(Collection,Collection)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.findValueOfType(Collection,Class[])
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.findValueOfType(Collection,Class<T>,T)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.$GenericMethodDeclaration$()
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.hasUniqueObject(Collection)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.isEmpty(Collection)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.isEmpty(Map)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.mergeArrayIntoCollection(Object,Collection)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.mergePropertiesIntoMap(Properties,Map)
org.apache.openjpa.eclipse.util.pathmatch.CollectionUtils.toIterator(Enumeration<E>,E)
org.apache.openjpa.eclipse.util.PathMatcherUtil.match(String)
org.apache.openjpa.eclipse.util.PathMatcherUtil.PathMatcherUtil(Map)
org.apache.openjpa.eclipse.util.PathMatcherUtilTest.testPathMatcherUtil()
org.apache.openjpa.eclipse.util.PathMatcherUtilTest.testPathMatcherUtilWithNull()
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.addObjectToArray(Object[],Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.containsElement(Object[],Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.getDisplayString(Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.getIdentityHexString(Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.hashCode(boolean)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.hashCode(double)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.hashCode(float)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.hashCode(long)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.identityToString(Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.isArray(Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.isCheckedException(Throwable)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.isCompatibleWithThrowsClause(Throwable,Class[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.isEmpty(Object[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeClassName(Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeEquals(Object,Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(boolean[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(byte[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(char[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(double[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(float[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(int[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(long[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(Object[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeHashCode(short[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(boolean[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(byte[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(char[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(double[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(float[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(int[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(long[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(Object)
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(Object[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.nullSafeToString(short[])
org.apache.openjpa.eclipse.util.pathmatch.ObjectUtils.toObjectArray(Object)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.addStringToArray(String[],String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.applyRelativePath(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.arrayToCommaDelimitedString(Object[])
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.arrayToDelimitedString(Object[],String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.capitalize(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.changeFirstCharacterCase(String,boolean)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.cleanPath(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.collectionToCommaDelimitedString(Collection)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.collectionToDelimitedString(Collection,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.collectionToDelimitedString(Collection,String,String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.commaDelimitedListToSet(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.commaDelimitedListToStringArray(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.concatenateStringArrays(String[],String[])
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.containsWhitespace(CharSequence)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.containsWhitespace(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.countOccurrencesOf(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.deleteAny(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.delete(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.delimitedListToStringArray(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.delimitedListToStringArray(String,String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.endsWithIgnoreCase(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.getFilenameExtension(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.getFilename(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.hasLength(CharSequence)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.hasText(CharSequence)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.mergeStringArrays(String[],String[])
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.parseLocaleString(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.pathEquals(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.quoteIfString(Object)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.quote(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.removeDuplicateStrings(String[])
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.replace(String,String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.sortStringArray(String[])
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.splitArrayElementsIntoProperties(String[],String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.splitArrayElementsIntoProperties(String[],String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.split(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.startsWithIgnoreCase(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.stripFilenameExtension(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.substringMatch(CharSequence,int,CharSequence)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.tokenizeToStringArray(String,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.tokenizeToStringArray(String,String,boolean,boolean)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.toLanguageTag(Locale)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.toStringArray(Collection<String>,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.toStringArray(Enumeration<String>,String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.trimAllWhitespace(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.trimArrayElements(String[])
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.trimLeadingCharacter(String,char)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.trimLeadingWhitespace(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.trimTrailingCharacter(String,char)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.trimTrailingWhitespace(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.trimWhitespace(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.uncapitalize(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.unqualify(String)
org.apache.openjpa.eclipse.util.pathmatch.StringUtils.unqualify(String,char)
org.apache.openjpa.eclipse.util.PCEnhancerHelperClassLoadingWrapper.FunkyClassLoader.FunkyClassLoader(ClassLoader,ClassLoader)
org.apache.openjpa.eclipse.util.PCEnhancerHelperClassLoadingWrapper.FunkyClassLoader.loadClass(String)
org.apache.openjpa.eclipse.util.PCEnhancerHelperClassLoadingWrapper.PCEnhancerHelperClassLoadingWrapper(ClassLoader)
org.apache.openjpa.eclipse.util.PCEnhancerHelper.enhance(File)
org.apache.openjpa.eclipse.util.PCEnhancerHelperImpl.needsEnhance(BCClass)
org.apache.openjpa.eclipse.util.PCEnhancerHelperImpl.PCEnhancerHelperImpl(ClassLoader)
org.apache.openjpa.eclipse.util.PCEnhancerHelperTest.checkEnhance(PCEnhancerHelper,String)
org.apache.openjpa.eclipse.util.PCEnhancerHelperTest.testEnhancingAClassThatIsNotAnEntity()
org.apache.openjpa.eclipse.util.PCEnhancerHelperTest.todotestEnhanceFile()
test.NotToEnhance.main(String[])
test.test.SomeEntityTest.testEnhancement()
