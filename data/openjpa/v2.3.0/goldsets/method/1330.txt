org.apache.openjpa.jdbc.meta.FieldMapping.getBi1ToMElemFK()
org.apache.openjpa.jdbc.meta.FieldMapping.getBi1ToMJoinFK()
org.apache.openjpa.jdbc.meta.FieldMapping.getBi_1ToM_JTField()
org.apache.openjpa.jdbc.meta.FieldMapping.getBi_MTo1_JTField()
org.apache.openjpa.jdbc.meta.FieldMappingInfo.getJoinForeignKey(FieldMapping,Table,boolean)
org.apache.openjpa.jdbc.meta.FieldMapping.isBi1To1JT()
org.apache.openjpa.jdbc.meta.FieldMapping.isBidirectionalJoinTableMappingNonOwner()
org.apache.openjpa.jdbc.meta.FieldMapping.isBiMTo1JT()
org.apache.openjpa.jdbc.meta.FieldMapping.isNonDefaultMappingUsingJoinTableStrategy()
org.apache.openjpa.jdbc.meta.FieldMapping.isUni1To1JT()
org.apache.openjpa.jdbc.meta.FieldMapping.isUni1ToMFK()
org.apache.openjpa.jdbc.meta.FieldMapping.isUniMTo1JT()
org.apache.openjpa.jdbc.meta.FieldMapping.setBi1MJoinTableInfo()
org.apache.openjpa.jdbc.meta.MappingRepository.getBi_1ToM_JoinTableField(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.getBi_MTo1_JoinTableField(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.hasJoinColumn(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.hasJoinTable(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.isBi1To1JT(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.isBidirectional(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.isBiMTo1JT(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.isNonDefaultMappingAllowed()
org.apache.openjpa.jdbc.meta.MappingRepository.isUni1To1JT(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.isUni1ToMFK(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.isUniMTo1JT(FieldMapping)
org.apache.openjpa.jdbc.meta.MappingRepository.useInverseKeyMapping(FieldMapping)
org.apache.openjpa.jdbc.meta.strats.AbstractFieldStrategy.getBiOneToManyInfo()
org.apache.openjpa.jdbc.meta.strats.AbstractFieldStrategy.getFieldIndexBi1ToMJT()
org.apache.openjpa.jdbc.meta.strats.AbstractFieldStrategy.hasJoinColumn()
org.apache.openjpa.jdbc.meta.strats.AbstractFieldStrategy.hasJoinTable()
org.apache.openjpa.jdbc.meta.strats.AbstractFieldStrategy.isBi1ToMJT()
org.apache.openjpa.jdbc.meta.strats.AbstractFieldStrategy.isNonDefaultMapping()
org.apache.openjpa.jdbc.meta.strats.AbstractFieldStrategy.where(OpenJPAStateManager,JDBCStore,RowManager,Object)
org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy.delete(OpenJPAStateManager,JDBCStore,RowManager)
org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy.getResults(OpenJPAStateManager,JDBCStore,JDBCFetchConfiguration,int,Joins[],boolean)
org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy.getResults.select(Select,int)
org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy.insert(OpenJPAStateManager,JDBCStore,RowManager,Map)
org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy.update(OpenJPAStateManager,JDBCStore,RowManager)
org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.insert(OpenJPAStateManager,JDBCStore,RowManager)
org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.loadEagerJoin(OpenJPAStateManager,JDBCStore,JDBCFetchConfiguration,Result)
org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.load(OpenJPAStateManager,JDBCStore,JDBCFetchConfiguration)
org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.load(OpenJPAStateManager,JDBCStore,JDBCFetchConfiguration,Result)
org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.map(boolean)
org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.selectEagerJoin(Select,OpenJPAStateManager,JDBCStore,JDBCFetchConfiguration,int)
org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.selectEagerParallel(Select,ClassMapping,JDBCStore,JDBCFetchConfiguration,int)
org.apache.openjpa.jdbc.meta.strats.RelationRelationMapTableFieldStrategy.insert(OpenJPAStateManager,RowManager,Map,JDBCStore)
org.apache.openjpa.persistence.compat.Bi_1To1_JT.equals(Object)
org.apache.openjpa.persistence.compat.Bi_1To1_JT.getEntityC()
org.apache.openjpa.persistence.compat.Bi_1To1_JT.getId()
org.apache.openjpa.persistence.compat.Bi_1To1_JT.getName()
org.apache.openjpa.persistence.compat.Bi_1To1_JT.hashCode()
org.apache.openjpa.persistence.compat.Bi_1To1_JT.setEntityC(EntityC_B11JT)
org.apache.openjpa.persistence.compat.Bi_1To1_JT.setName(String)
org.apache.openjpa.persistence.compat.EntityC_B11JT.getBi11jt()
org.apache.openjpa.persistence.compat.EntityC_B11JT.setBi11jt(Bi_1To1_JT)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudBi11JT(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudBi1MFK(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudBi1MJT(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudBi1MMapJT(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudBi1MMapRelKeyJT(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudUni11JT(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudUni1MFK(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudUni1MJT(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudUni1MMapFK(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudUni1MMapRelKeyFK(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.crudUniM1JT(EntityManager)
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.testOneToManyMapRelation()
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.testOneToManyRelation()
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.testOneToOneUsingJoinTable()
org.apache.openjpa.persistence.compat.TestSpecCompatibilityOptions.testUniManyToOneUsingJoinTable()
org.apache.openjpa.persistence.compat.Uni_1To1_JT.setEntityC(EntityC_U11JT)
org.apache.openjpa.persistence.compat.Uni_MTo1_JT.setEntityC(EntityC)
org.apache.openjpa.persistence.jdbc.AnnotationPersistenceMappingParser.parseJoinTable(FieldMapping,JoinTable)
