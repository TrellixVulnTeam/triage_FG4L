org.apache.openjpa.jdbc.meta.MappingInfo.canMerge(List,Column[],boolean,boolean)
org.apache.openjpa.jdbc.meta.MappingInfo.createColumns(MetaDataContext,String,Column[],Table,boolean)
org.apache.openjpa.jdbc.meta.MappingInfo.getColumns()
org.apache.openjpa.jdbc.meta.MappingInfo.getColumns(String)
org.apache.openjpa.jdbc.meta.MappingRepository.instantiateVersionStrategy(String,Version)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.checkVersion(OpenJPAStateManager,JDBCStore,boolean)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.compare(Object,Object)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.compare(Object[],Object[])
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.compareVersion(Object,Object)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.delete(OpenJPAStateManager,JDBCStore,RowManager)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.getColumnValue(Object,int)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.getJavaType(int)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.insert(OpenJPAStateManager,JDBCStore,RowManager)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.isSecondaryColumn(Column,OpenJPAStateManager)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.load(OpenJPAStateManager,JDBCStore,Result)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.map(boolean)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.populateFromResult(Result)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.sign(int)
org.apache.openjpa.jdbc.meta.strats.ColumnVersionStrategy.update(OpenJPAStateManager,JDBCStore,RowManager)
org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy.getAlias()
org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy.getInitialValues()
org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy.initialize()
org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy.nextValue(Object,int)
org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy.setInitialValues(Number[])
org.apache.openjpa.jdbc.meta.strats.NumberVersionStrategy.getJavaType()
org.apache.openjpa.jdbc.meta.strats.NumberVersionStrategy.nextVersion(Object)
org.apache.openjpa.jdbc.meta.VersionMappingInfo.getColumns(Version,Column[],boolean)
org.apache.openjpa.jdbc.meta.VersionMappingInfo.getMultiTableColumns(Version,Column[],boolean)
org.apache.openjpa.jdbc.meta.VersionMappingInfo.getSingleTable(Version,Column[])
org.apache.openjpa.jdbc.meta.VersionMappingInfo.spansMultipleTables(Column[])
org.apache.openjpa.jdbc.meta.VersionMappingInfo.syncWith(Version)
org.apache.openjpa.persistence.jdbc.AnnotationPersistenceMappingParser.newColumn(VersionColumn)
org.apache.openjpa.persistence.jdbc.annotations.MultiColumnSecondaryVersionPC.getId()
org.apache.openjpa.persistence.jdbc.annotations.MultiColumnSecondaryVersionPC.getName()
org.apache.openjpa.persistence.jdbc.annotations.MultiColumnSecondaryVersionPC.getS1()
org.apache.openjpa.persistence.jdbc.annotations.MultiColumnSecondaryVersionPC.getS2()
org.apache.openjpa.persistence.jdbc.annotations.MultiColumnSecondaryVersionPC.setName(String)
org.apache.openjpa.persistence.jdbc.annotations.MultiColumnSecondaryVersionPC.setS1(String)
org.apache.openjpa.persistence.jdbc.annotations.MultiColumnSecondaryVersionPC.setS2(String)
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.assertStrategy(Class)
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.assertVersionEquals(Object,Object)
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.setUp()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testConcurrentOptimisticReadSucceeds()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testConcurrentOptimisticReadSucceedsForMultiTable()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testConcurrentOptimisticReadSucceedsForSingleTable()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testConcurrentOptimisticUpdateFails()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testConcurrentOptimisticUpdateFailsForMultiTable()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testConcurrentOptimisticUpdateFailsForSingleTable()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testVersionOnPersistAndUpdate()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testVersionOnPersistAndUpdateForMultiTable()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testVersionOnPersistAndUpdateForSingleTable()
org.apache.openjpa.persistence.jdbc.annotations.TestMultiColumnVersion.testVersionStrategyIsSet()
org.apache.openjpa.persistence.jdbc.PersistenceMappingDefaults.getStrategy(Version,boolean)
org.apache.openjpa.persistence.jdbc.VersionColumn.precision()
org.apache.openjpa.persistence.jdbc.VersionColumn.scale()
org.apache.openjpa.persistence.jdbc.VersionColumn.table()
