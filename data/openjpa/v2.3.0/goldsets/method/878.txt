org.apache.openjpa.conf.TestQueryHints.testJPAHintSetsFetchPlan()
org.apache.openjpa.conf.TestQueryHints.testParts()
org.apache.openjpa.conf.TestQueryHints.testSupportedKeyBooleanValueConversion()
org.apache.openjpa.jdbc.kernel.FinderQueryImpl.execute(OpenJPAStateManager,StoreManager,FetchConfiguration)
org.apache.openjpa.jdbc.kernel.JDBCStoreQuery.executeBulkOperation(ClassMetaData[],boolean,ExpressionFactory[],QueryExpressions[],Object[],Map)
org.apache.openjpa.jdbc.kernel.NativeJDBCSeq.getSequence(Connection)
org.apache.openjpa.jdbc.kernel.PessimisticLockManager.executeQuery(Connection,PreparedStatement,SQLBuffer)
org.apache.openjpa.jdbc.kernel.PessimisticLockManager.lockRow(OpenJPAStateManager,int,int)
org.apache.openjpa.jdbc.kernel.PessimisticLockManager.setTimeout(PreparedStatement,int)
org.apache.openjpa.jdbc.kernel.PreparedSQLStoreQuery.PreparedSQLExecutor.executeQuery(StoreQuery,Object[],Range)
org.apache.openjpa.jdbc.kernel.SQLStoreQuery.SQLExecutor.executeUpdate(StoreQuery,Object[])
org.apache.openjpa.jdbc.kernel.TableJDBCSeq.getSequence(ClassMapping,Connection)
org.apache.openjpa.jdbc.kernel.TableJDBCSeq.insertSequence(ClassMapping,Connection)
org.apache.openjpa.jdbc.kernel.TableJDBCSeq.setSequence(ClassMapping,Status,int,boolean,Connection)
org.apache.openjpa.jdbc.meta.strats.ClassNameDiscriminatorStrategy.loadSubclasses(JDBCStore)
org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedLobFieldStrategy.customUpdate(OpenJPAStateManager,JDBCStore)
org.apache.openjpa.jdbc.schema.TableSchemaFactory.readSchemaColumn()
org.apache.openjpa.jdbc.schema.TableSchemaFactory.refreshTable()
org.apache.openjpa.jdbc.schema.TableSchemaFactory.writeSchemaColumn(String)
org.apache.openjpa.jdbc.sql.DB2Dictionary.matchErrorState(int,Set<String>,String,SQLException)
org.apache.openjpa.jdbc.sql.DBDictionary.addErrorCode(int,String)
org.apache.openjpa.jdbc.sql.DBDictionary.getGeneratedKey(Column,Connection)
org.apache.openjpa.jdbc.sql.DBDictionary.getSequences(DatabaseMetaData,String,String,String,Connection)
org.apache.openjpa.jdbc.sql.DBDictionary.narrow(String,SQLException)
org.apache.openjpa.jdbc.sql.DBDictionary.setQueryTimeout(PreparedStatement,int)
org.apache.openjpa.jdbc.sql.DBDictionary.setTimeouts(PreparedStatement,JDBCConfiguration,boolean)
org.apache.openjpa.jdbc.sql.DBDictionary.setTimeouts(PreparedStatement,JDBCFetchConfiguration,boolean)
org.apache.openjpa.jdbc.sql.DBDictionary.updateBlob(Select,JDBCStore,InputStream)
org.apache.openjpa.jdbc.sql.DBDictionary.updateClob(Select,JDBCStore,Reader)
org.apache.openjpa.jdbc.sql.OracleDictionary.getImportedKeys(DatabaseMetaData,String,String,String,Connection)
org.apache.openjpa.jdbc.sql.OracleDictionary.getIndexInfo(DatabaseMetaData,String,String,String,boolean,boolean,Connection)
org.apache.openjpa.jdbc.sql.OracleDictionary.getPrimaryKeys(DatabaseMetaData,String,String,String,Connection)
org.apache.openjpa.jdbc.sql.PostgresDictionary.deleteStream(JDBCStore,Select)
org.apache.openjpa.jdbc.sql.PostgresDictionary.updatePostgresBlob(Row,Column,JDBCStore,Object,Select)
org.apache.openjpa.jdbc.sql.SelectImpl.execute(StoreContext,JDBCStore,JDBCFetchConfiguration,int)
org.apache.openjpa.jdbc.sql.SelectImpl.getCount(JDBCStore)
org.apache.openjpa.jdbc.sql.SelectImpl.prepareStatement(Connection,String)
org.apache.openjpa.jdbc.sql.SelectImpl.setTimeout(PreparedStatement,boolean,JDBCFetchConfiguration)
org.apache.openjpa.jdbc.sql.SQLExceptions.getStoreSQLException(OpenJPAConfiguration,SQLException,DBDictionary,int)
org.apache.openjpa.kernel.FetchConfigurationImpl.setContext(StoreContext)
org.apache.openjpa.persistence.conf.TestOpenJPAConfiguration.testSetObjects()
org.apache.openjpa.persistence.jdbc.JDBCFetchPlan.setMaxFetchDepth(int)
org.apache.openjpa.persistence.jdbc.JDBCFetchPlan.setQueryTimeout(int)
org.apache.openjpa.persistence.jdbc.JDBCFetchPlan.setReadLockMode(LockModeType)
org.apache.openjpa.persistence.jdbc.JDBCFetchPlan.setWriteLockMode(LockModeType)
org.apache.openjpa.persistence.PersistenceExceptions.translateStoreException(OpenJPAException)
org.apache.openjpa.persistence.query.common.apps.QTimeout.getId()
org.apache.openjpa.persistence.query.common.apps.QTimeout.getStringField()
org.apache.openjpa.persistence.query.common.apps.QTimeout.QTimeout()
org.apache.openjpa.persistence.query.common.apps.QTimeout.QTimeout(int,String)
org.apache.openjpa.persistence.query.common.apps.QTimeout.setStringField(String)
org.apache.openjpa.persistence.query.TestQueryTimeout.checkException(String,Exception)
org.apache.openjpa.persistence.query.TestQueryTimeout.delay(int,int)
org.apache.openjpa.persistence.query.TestQueryTimeout.exec(boolean,int,String)
org.apache.openjpa.persistence.query.TestQueryTimeout.getLog()
org.apache.openjpa.persistence.query.TestQueryTimeout.main(String[])
org.apache.openjpa.persistence.query.TestQueryTimeout.matchesExpectedException(Class<?>,Exception)
org.apache.openjpa.persistence.query.TestQueryTimeout.setUp()
org.apache.openjpa.persistence.query.TestQueryTimeout.testQueryTimeout1a()
org.apache.openjpa.persistence.query.TestQueryTimeout.testQueryTimeout1c()
org.apache.openjpa.persistence.query.TestQueryTimeout.testQueryTimeout2a()
org.apache.openjpa.persistence.query.TestQueryTimeout.testQueryTimeout2b()
org.apache.openjpa.persistence.query.TestQueryTimeout.testQueryTimeout3a()
org.apache.openjpa.persistence.query.TestQueryTimeout.testQueryTimeout3b()
org.apache.openjpa.persistence.query.TestQueryTimeout.testQueryTimeout4()
org.apache.openjpa.persistence.QueryTimeoutException.getType()
org.apache.openjpa.persistence.QueryTimeoutException.isFatal()
org.apache.openjpa.util.QueryException.getSubtype()
org.apache.openjpa.util.QueryException.getTimeout()
org.apache.openjpa.util.QueryException.QueryException(Object)
org.apache.openjpa.util.QueryException.QueryException(Object,int)
org.apache.openjpa.util.QueryException.readObject(ObjectInputStream)
org.apache.openjpa.util.QueryException.setTimeout(int)
org.apache.openjpa.util.QueryException.toString()
org.apache.openjpa.util.QueryException.writeObject(ObjectOutputStream)
org.apache.openjpa.util.StoreException.StoreException(String)
