<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:35:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-31/TIKA-31.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-31] protected Parser.parse(InputStream stream, Iterable&lt;Content&gt; contents)</title>
                <link>https://issues.apache.org/jira/browse/TIKA-31</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;In order to push towards a stateless Parser interface, I&apos;d like to propose implementing the current Parser.getContents() method (as it exists after &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-26&quot; title=&quot;Use Map&amp;lt;String, Content&amp;gt; instead of List&amp;lt;Content&amp;gt;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-26&quot;&gt;&lt;del&gt;TIKA-26&lt;/del&gt;&lt;/a&gt;) in terms of a stateless abstract method with the following signature:&lt;/p&gt;

&lt;p&gt;    protected abstract String parse(InputStream stream, Iterable&amp;lt;Content&amp;gt; contents) throws IOException, TikaException;&lt;/p&gt;

&lt;p&gt;This method would return the fulltext content of the given stream as the String return value and place any extra metadata into the given set of Content instances. With this information the current Parser.getContents() method could populate a fulltext (and summary) Content entry and any regexp Content entries universally for any Parser classes. Also, we could centralize state handling and exception processing to a single class.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12379041">TIKA-31</key>
            <summary>protected Parser.parse(InputStream stream, Iterable&lt;Content&gt; contents)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jukkaz">Jukka Zitting</assignee>
                                    <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 25 Sep 2007 15:01:46 +0100</created>
                <updated>Fri, 22 May 2009 23:10:33 +0100</updated>
                            <resolved>Tue, 25 Sep 2007 21:37:21 +0100</resolved>
                                                                    <component>general</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12530114" author="jukkaz" created="Tue, 25 Sep 2007 15:08:11 +0100"  >&lt;p&gt;Proposed patch.&lt;/p&gt;</comment>
                            <comment id="12530149" author="kbennett" created="Tue, 25 Sep 2007 17:19:45 +0100"  >&lt;p&gt;Jukka -&lt;/p&gt;

&lt;p&gt;I see you also removed the swallowed exceptions.  Thanks!&lt;/p&gt;

&lt;p&gt;I have some comments and questions.  Some may not be related to your patch, but the original code.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In the new parse method:&lt;/p&gt;

&lt;p&gt;protected String parse(InputStream stream, Iterable&amp;lt;Content&amp;gt; contents)&lt;/p&gt;

&lt;p&gt;This means that contents needs to be populated with the metadata keys before being passed to parse(), right?  Is that the intention?  Wouldn&apos;t we want the parser to be responsible to know what metadata should go into contents and put it there itself?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Currently, even with the changes, the parser is stateful.  I&apos;m aware you said that this was a step &lt;b&gt;on the way to&lt;/b&gt; making it stateless.  However, the current code has a serious bug that I think we should fix, even if it&apos;s a minimal fix (such as my second suggestion below).&lt;/p&gt;

&lt;p&gt;Parser.java has an input stream nonstatic member named &apos;is&apos;.  This is set via setInputStream().  The parser can then be called on to return various kinds of content via getStrContent(), getContents(), and getContent().  It is possible to call setInputStream() to give it a different stream to parse.  However, any of the parse methods will reuse the parsed content of the previous stream, because the boolean &apos;parsed&apos; will not have been reset to false.&lt;/p&gt;

&lt;p&gt;Possible alternatives:&lt;/p&gt;

&lt;p&gt;1) pass the input stream in only in the parse method, remove the input stream member variable, and return a document content object that contains the results (the full string content, the contents map).&lt;/p&gt;

&lt;p&gt;2) have setInputStream() reset parsed to false&lt;/p&gt;

&lt;p&gt;3) pass the InputStream into the object in its constructor, and make it immutable.  This will guarantee that each parser will be used for only one document, which is safe, but not very economical in cases where constructing a parser is nontrivial.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In XMLParser, Intellij Idea is reporting that:&lt;/p&gt;

&lt;p&gt;} else if (obj instanceof CDATA) {&lt;/p&gt;

&lt;p&gt;will never be evaluated to true (since CDATA extends Text, which comes before it in the list of conditions).&lt;/p&gt;

&lt;p&gt;This occurs in the methods:&lt;/p&gt;

&lt;p&gt;extractContent()&lt;br/&gt;
concatOccurance()&lt;/p&gt;

&lt;p&gt;(BTW, &quot;occurance&quot; is a misspelling; it should be &quot;occurrence&quot;.)&lt;/p&gt;

&lt;p&gt;I can enter a Jira issue and submit a patch if you like.&lt;/p&gt;

&lt;hr /&gt;


&lt;p&gt;Minor stuff:&lt;/p&gt;

&lt;p&gt;In MSExcelParser, &quot;a Excel document&quot; should be &quot;an Excel document&quot;.&lt;br/&gt;
In RTFParser, &quot;a Excel document&quot; should be &quot;an RTF document&quot;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Keith&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12530265" author="jukkaz" created="Tue, 25 Sep 2007 21:30:31 +0100"  >&lt;p&gt;Keith:&lt;br/&gt;
&amp;gt; I have some comments and questions.&lt;/p&gt;

&lt;p&gt;Cool, thanks for the review!&lt;/p&gt;

&lt;p&gt;&amp;gt; In the new parse method:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; protected String parse(InputStream stream, Iterable&amp;lt;Content&amp;gt; contents)&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; This means that contents needs to be populated with the metadata keys before&lt;br/&gt;
&amp;gt; being passed to parse(), right?  Is that the intention?  Wouldn&apos;t we want the&lt;br/&gt;
&amp;gt; parser to be responsible to know what metadata should go into contents&lt;br/&gt;
&amp;gt; and put it there itself?&lt;/p&gt;

&lt;p&gt;Exactly. The current solution is based on the Lius code where the metadata keys are specified in the configuration file instead of the parser class. While this approach does make the parser classes more configurable, I do agree that it would probably make more sense to just hardcode the classes to always extract all available metadata. After all, as you mentioned, the parser class probably knows best what metadata it can extract and what metadata is available in the current document.&lt;/p&gt;

&lt;p&gt;&amp;gt; Currently, even with the changes, the parser is stateful.  I&apos;m aware you said that&lt;br/&gt;
&amp;gt; this was a step &lt;b&gt;on the way to&lt;/b&gt; making it stateless.  However, the current code&lt;br/&gt;
&amp;gt; has a serious bug that I think we should fix, even if it&apos;s a minimal fix (such as&lt;br/&gt;
&amp;gt; my second suggestion below).&lt;/p&gt;

&lt;p&gt;Agreed. For this issue, like &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-26&quot; title=&quot;Use Map&amp;lt;String, Content&amp;gt; instead of List&amp;lt;Content&amp;gt;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-26&quot;&gt;&lt;del&gt;TIKA-26&lt;/del&gt;&lt;/a&gt;, I wanted to avoid too big changes in one step to keep the patches and changes somewhat intelligible, so I explicitly didn&apos;t want to remove all the statefullnes in one step.&lt;/p&gt;

&lt;p&gt;&amp;gt; Parser.java has an input stream nonstatic member named &apos;is&apos;.  This is set via&lt;br/&gt;
&amp;gt; setInputStream().  The parser can then be called on to return various kinds of&lt;br/&gt;
&amp;gt; content via getStrContent(), getContents(), and getContent().  It is possible to&lt;br/&gt;
&amp;gt; parse methods will reuse the parsed content of the previous stream, because&lt;br/&gt;
&amp;gt; the boolean &apos;parsed&apos; will not have been reset to false.&lt;/p&gt;

&lt;p&gt;Agreed, I think this is a problem with the current design. I&apos;d like to get rid of the &quot;is&quot; member variable as well as all the getStrContent(), getContents() and getContent() methods in favor of a parse() method that takes the input stream and produces both the full text content and any metadata as results. Effectively I&apos;d make the proposed parse() method public (and change the contents variable to an extensible metadata object as discussed above). In effect I agree with your alternative 1.&lt;/p&gt;

&lt;p&gt;&amp;gt; In XMLParser, Intellij Idea is reporting that:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; } else if (obj instanceof CDATA) {&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; will never be evaluated to true (since CDATA extends Text, which comes before it&lt;br/&gt;
&amp;gt; in the list of conditions).&lt;br/&gt;
&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; I can enter a Jira issue and submit a patch if you like.&lt;/p&gt;

&lt;p&gt;Yep, this is an issue with the existing code (I tried to avoid changing . Please file a new issue (and patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; for fixing that.&lt;/p&gt;

&lt;p&gt;&amp;gt; Minor stuff:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; In MSExcelParser, &quot;a Excel document&quot; should be &quot;an Excel document&quot;.&lt;br/&gt;
&amp;gt; In RTFParser, &quot;a Excel document&quot; should be &quot;an RTF document&quot;.&lt;/p&gt;

&lt;p&gt;Ah, thanks! I&apos;ll fix those before committing the changes.&lt;/p&gt;</comment>
                            <comment id="12530266" author="jukkaz" created="Tue, 25 Sep 2007 21:37:21 +0100"  >&lt;p&gt;Committed in revision 579372.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12366532" name="TIKA-31.patch" size="39242" author="jukkaz" created="Tue, 25 Sep 2007 15:08:11 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Sep 2007 16:19:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4831</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxx6an:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>17339</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>