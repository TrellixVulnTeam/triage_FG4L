<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:36:38 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-679/TIKA-679.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-679] Proposal for PRT Parser</title>
                <link>https://issues.apache.org/jira/browse/TIKA-679</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;It would be nice if Tika had support for prt CAD files.&lt;br/&gt;
A preliminary prt text extractor has been created.&lt;br/&gt;
Any assistance further developing this code is appreciated.&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;PRTParser.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.tika.parser.prt;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedInputStream;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedReader;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStreamReader;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.Reader;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.UnsupportedEncodingException;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.nio.charset.Charset;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Collections;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Set;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.util.IOUtils;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.tika.exception.TikaException;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.tika.metadata.Metadata;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.tika.mime.MediaType;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.tika.parser.ParseContext;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.tika.parser.Parser;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.tika.sax.XHTMLContentHandler;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.xml.sax.ContentHandler;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.xml.sax.SAXException;

/**
 * Description: PRT (CAD Drawing) parser. This is a very basic parser.   
 * Searches &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; specific &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; prefix, and outputs text from note entities.
 * Does not support special characters.
 */
 

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class PRTParser &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Parser {

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Set&amp;lt;MediaType&amp;gt; SUPPORTED_TYPES = Collections.singleton(MediaType.application(&lt;span class=&quot;code-quote&quot;&gt;&quot;prt&quot;&lt;/span&gt;));
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; PRT_MIME_TYPE = &lt;span class=&quot;code-quote&quot;&gt;&quot;application/prt&quot;&lt;/span&gt;;
        	
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Set&amp;lt;MediaType&amp;gt; getSupportedTypes(ParseContext context) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; SUPPORTED_TYPES;
        }
		
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void parse(
		InputStream stream, ContentHandler handler,
		Metadata metadata, ParseContext context)
		&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException, SAXException, TikaException {
		XHTMLContentHandler xhtml = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; XHTMLContentHandler(handler, metadata);
		
		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] prefix = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] {227, 63};  				&lt;span class=&quot;code-comment&quot;&gt;//Looking &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a prefix set of bytes {E3, 3F} 
&lt;/span&gt;		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; pos = 0;										&lt;span class=&quot;code-comment&quot;&gt;//position inside the prefix
&lt;/span&gt;		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; read;
		&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;( (read = stream.read()) &amp;gt; -1) {					&lt;span class=&quot;code-comment&quot;&gt;// stream.read() moves to the next &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;, and returns an integer value of the &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;.  a value of -1 signals the EOF
&lt;/span&gt;			&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(read == prefix[pos]) {								&lt;span class=&quot;code-comment&quot;&gt;// is the last &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; read the same as the first &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; in the prefix?
&lt;/span&gt;				pos++;													
					&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(pos == prefix.length) {								&lt;span class=&quot;code-comment&quot;&gt;//Are we at the last position of the prefix?
&lt;/span&gt;						stream.skip(11);										&lt;span class=&quot;code-comment&quot;&gt;// skip the 11 bytes of the prefix which can vary.
&lt;/span&gt;						&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; lengthbyte = stream.read();							&lt;span class=&quot;code-comment&quot;&gt;// Set the next &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; equal to the length of text in the user input field, see PRT schema
&lt;/span&gt;						stream.skip(1);											
						&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] text = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[lengthbyte];						&lt;span class=&quot;code-comment&quot;&gt;// a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array called text is created.  It should contain an array of integer values of the user inputted text.
&lt;/span&gt;						IOUtils.readFully(stream, text);						
						&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; str = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;(text, 0, text.length, &lt;span class=&quot;code-quote&quot;&gt;&quot;Cp437&quot;&lt;/span&gt;);	&lt;span class=&quot;code-comment&quot;&gt;// Cp437 turn it into a string, but does not remove &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; termination, assumes it&apos;s found to be MS-DOS Encoding
&lt;/span&gt;						str = str.replace(&lt;span class=&quot;code-quote&quot;&gt;&quot;\u03C6&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;\u00D8&quot;&lt;/span&gt;);					&lt;span class=&quot;code-comment&quot;&gt;// Note: Substitute CP437&apos;s lowercase &lt;span class=&quot;code-quote&quot;&gt;&quot;phi&quot;&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Nordic &lt;span class=&quot;code-quote&quot;&gt;&quot;O with slash&quot;&lt;/span&gt; to represent diameter symbol. 
&lt;/span&gt;						metadata.add(&lt;span class=&quot;code-quote&quot;&gt;&quot;Content&quot;&lt;/span&gt;,str);
						xhtml.startElement(&lt;span class=&quot;code-quote&quot;&gt;&quot;p&quot;&lt;/span&gt;);	
						xhtml.characters(str);
						xhtml.endElement(&lt;span class=&quot;code-quote&quot;&gt;&quot;p&quot;&lt;/span&gt;);
						pos = 0; 							
					}
			} 
			&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
				&lt;span class=&quot;code-comment&quot;&gt;//Did not find the prefix. Reset the position counter.
&lt;/span&gt;				pos = 0;
			}
		}
	&lt;span class=&quot;code-comment&quot;&gt;//Reached the end of file
&lt;/span&gt;	&lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;Finished searching the file&quot;&lt;/span&gt;);	
&lt;/span&gt;	}


		
	/**
    * @deprecated This method will be removed in Apache Tika 1.0.
    */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void parse(
                   InputStream stream, ContentHandler handler, Metadata metadata)
                   &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException, SAXException, TikaException {
                parse(stream, handler, metadata, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ParseContext());
    }
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;   






</description>
                <environment></environment>
        <key id="12511259">TIKA-679</key>
            <summary>Proposal for PRT Parser</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="runamok81">Troy Witthoeft</reporter>
                        <labels>
                            <label>CAD</label>
                            <label>Mime</label>
                            <label>Parser</label>
                            <label>Prt</label>
                            <label>Tika</label>
                    </labels>
                <created>Wed, 22 Jun 2011 17:44:16 +0100</created>
                <updated>Tue, 8 Nov 2011 18:17:57 +0000</updated>
                            <resolved>Tue, 8 Nov 2011 18:17:57 +0000</resolved>
                                                                    <component>mime</component>
                    <component>parser</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                    <timeoriginalestimate seconds="2419200">672h</timeoriginalestimate>
                            <timeestimate seconds="2419200">672h</timeestimate>
                                        <comments>
                            <comment id="13058065" author="runamok81" created="Thu, 30 Jun 2011 21:43:40 +0100"  >&lt;p&gt;Currently, the vague prefix allows this parser to get every instance of text, but it also picks up some garbage text.&lt;br/&gt;
Additionally, it cannot recognize special characters &lt;span class=&quot;error&quot;&gt;&amp;#91;&#177;,&#176;,&#216;&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The biggest difficulty in this code is selecting the correct prefix to search for.&lt;br/&gt;
The prefix DOES have a pattern.  For instance, note the byte in the green position always represent the length of the text + 1.&lt;/p&gt;

&lt;p&gt;PREFIX ROUGH GUIDE&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;3#&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;font color=&quot;blue&quot;&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;E3&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;3F&amp;#93;&lt;/span&gt;&lt;/font&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0#&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0#&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0#&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0#&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0#&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1F&amp;#93;&lt;/span&gt;&lt;font color=&quot;green&quot;&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;LN&amp;#93;&lt;/span&gt;&lt;/font&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;font color=&quot;red&quot;&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;USERINPUT TEXT&amp;#93;&lt;/span&gt;&lt;/font&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;xx&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;EXAMPLE&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;33&amp;#93;&lt;/span&gt;&lt;font color=&quot;blue&quot;&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;E3&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;3F&amp;#93;&lt;/span&gt;&lt;/font&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;02&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;01&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1F&amp;#93;&lt;/span&gt;&lt;font color=&quot;green&quot;&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;05&amp;#93;&lt;/span&gt;&lt;/font&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;font color=&quot;red&quot;&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;54&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;49&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4B&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;41&amp;#93;&lt;/span&gt;&lt;/font&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0B&amp;#93;&lt;/span&gt; .... &lt;font color=&quot;red&quot;&gt;TIKA&lt;/font&gt;&lt;/p&gt;


&lt;p&gt;Once we narrow down text detection, we can move on to extracting the date, and file description.&lt;/p&gt;

&lt;p&gt;NOTE: Magic Mime type on this file &amp;lt;match value=&quot;0M3C&quot; type=&quot;string&quot; offset=&quot;8&quot; /&amp;gt;&lt;/p&gt;</comment>
                            <comment id="13059601" author="gagravarr" created="Mon, 4 Jul 2011 21:23:36 +0100"  >&lt;p&gt;I&apos;ve added the detector part in r1142795, thanks for the file and the match line&lt;/p&gt;

&lt;p&gt;For the special characters you mention, which text entry in the file contains them? And where?&lt;/p&gt;

&lt;p&gt;I&apos;ll start taking a look at the parser shortly&lt;/p&gt;</comment>
                            <comment id="13059623" author="gagravarr" created="Mon, 4 Jul 2011 22:45:59 +0100"  >&lt;p&gt;I&apos;ve committed a first stab at a PRT parser in r1142817, inspired by your work. It&apos;s able to get most view names, and all the text&lt;/p&gt;

&lt;p&gt;My hunch is that the file is record based, with e0/e2/e3/f0 3f/bf being the type marker. This then seems to be followed by the size / 8 mostly zero bytes then size / 8 mostly zero bytes + another type + size. I can&apos;t guess enough to figure it out though, so I&apos;ve gone for a largely brute-force pattern matching approach instead&lt;/p&gt;

&lt;p&gt;Can you try with all your files, and report back if the matching rules are too strict / not strict enough?&lt;/p&gt;</comment>
                            <comment id="13059639" author="runamok81" created="Tue, 5 Jul 2011 00:48:39 +0100"  >&lt;p&gt;I&apos;ve narrowed the encoding down to CP437.&lt;br/&gt;
CP437 correctly identifies many of the engineering symbols, such as &lt;span class=&quot;error&quot;&gt;&amp;#91;&#177;&amp;#93;&lt;/span&gt; &quot;plus minus,&quot; &lt;span class=&quot;error&quot;&gt;&amp;#91;&#186;&amp;#93;&lt;/span&gt; degree,&quot; but fails on &quot;diameter&quot;&lt;br/&gt;
PRT files actually store the diameter symbol as three characters, with the second one always being &lt;span class=&quot;error&quot;&gt;&amp;#91;&#966;&amp;#93;&lt;/span&gt; &quot;lowercase phi&quot;&lt;br/&gt;
While not identical, the Nordic &lt;span class=&quot;error&quot;&gt;&amp;#91;&#216;&amp;#93;&lt;/span&gt; &quot;O with slash&quot; is often accepted as the diameter symbol. &lt;/p&gt;

&lt;p&gt;You may find a more elegant solution looking at &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_page_437&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Code_page_437&lt;/a&gt;&lt;br/&gt;
I&apos;ve simply been substituting.&lt;/p&gt;


&lt;p&gt;String str = new String(text, 0, text.length, &quot;Cp437&quot;);&lt;br/&gt;
str = str.replace(&quot;\u03C6&quot;,&quot;\u00D8&quot;);&lt;/p&gt;

&lt;p&gt;I&apos;ve attached a patch to (r1143194)&lt;/p&gt;</comment>
                            <comment id="13059640" author="runamok81" created="Tue, 5 Jul 2011 00:57:49 +0100"  >&lt;p&gt;Nick,&lt;/p&gt;

&lt;p&gt;The new PRTParser.java works very well! &lt;br/&gt;
I&apos;m having a hard time find example prt files from my collection of various industries to stump the parser, so I had to go outside my collection.&lt;br/&gt;
I did find one file that fails.  I found it through a Google search of &quot;filetype:prt 0M3C&quot;&lt;br/&gt;
&lt;a href=&quot;http://www.blackfeathermedia.com/etcher/Appendix_A_-_Technical_Drawings/EscherSketcher_Rev05.prt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.blackfeathermedia.com/etcher/Appendix_A_-_Technical_Drawings/EscherSketcher_Rev05.prt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think the next step is setting the metadata for the file description.&lt;br/&gt;
The file description is user-editable.  It&apos;s a maximum of 500 characters stored in the bytes that immediately follow the creation date.  &lt;/p&gt;


</comment>
                            <comment id="13061381" author="runamok81" created="Thu, 7 Jul 2011 16:11:09 +0100"  >&lt;p&gt;Added support for correct encoding, special character recognition, and description metadata.  Please see patch file.&lt;/p&gt;
</comment>
                            <comment id="13061961" author="gagravarr" created="Fri, 8 Jul 2011 14:57:10 +0100"  >&lt;p&gt;Thanks, updated patch committed in r1144314 with a few tweaks&lt;/p&gt;

&lt;p&gt;The blackfeather file does parse, it&apos;s just that it&apos;s so large that the default text handler size gets it. It does include quite a few bits of junk though, so it&apos;s possible the current matching rules are too lax. If you have time, please do look at some of the &quot;junk&quot; text we return from it and see what header bytes come first!&lt;/p&gt;</comment>
                            <comment id="13064134" author="runamok81" created="Tue, 12 Jul 2011 21:58:59 +0100"  >&lt;p&gt;The blackfeather extracted garbage text is a result of lax byte matching&lt;br/&gt;
rules on handleViewName.&lt;br/&gt;
Adjusting the code to byte match on E3 3F plus your last5 is33 check&lt;br/&gt;
produces perfect output.&lt;br/&gt;
We may need to discuss which information inside a PRT file is needed.&lt;/p&gt;

&lt;p&gt;Certain drawings, like the blackfeather example, are a parent drawing&lt;br/&gt;
composed of smaller child drawings.&lt;br/&gt;
These child drawings include note entities that are absorbed but not&lt;br/&gt;
displayed in the parent.  These &quot;remnant&quot; note entities are not accessible,&lt;br/&gt;
and they are not editable.&lt;br/&gt;
You will notice that PRTParser extracts the child note entities.  The&lt;br/&gt;
blackfeather example produces multiple dates.  While the only visible date&lt;br/&gt;
to CAD engineer would be 4/16/02.&lt;/p&gt;

&lt;p&gt;Commercial extractors do not behave this way.  They simply treat the&lt;br/&gt;
drawings like an OCR&apos;d document, and only extract the visible text.  I&apos;m&lt;br/&gt;
confident there is byte pattern to distinguish the two.&lt;br/&gt;
I cannot think of a feasible use for ViewNames or hidden child note&lt;br/&gt;
entities.  However, It seems wasteful to remove that functionality, since we&lt;br/&gt;
currently have created a way to extract them.&lt;br/&gt;
Should we breakout viewnames and childnote text entries as separate&lt;br/&gt;
metadata?&lt;/p&gt;

&lt;p&gt;Any input is appreciated.&lt;/p&gt;













</comment>
                            <comment id="13064170" author="gagravarr" created="Tue, 12 Jul 2011 22:51:19 +0100"  >&lt;p&gt;&amp;gt; The blackfeather extracted garbage text is a result of lax byte matching rules on handleViewName.&lt;br/&gt;
&amp;gt; Adjusting the code to byte match on E3 3F plus your last5 is33 check produces perfect output.&lt;/p&gt;

&lt;p&gt;Quite a few of the view names in your sample files had 5*00 before them, rather than 5*33. Which rule is the blackfeather one incorrectly triggering? And what bit in the text types comment have we got wrong?&lt;/p&gt;

&lt;p&gt;For the view names vs text, maybe we should put different classes on them or something like that?&lt;/p&gt;

&lt;p&gt;In terms of the hidden text, I suspect we&apos;ll need to understand the file format better first! The initial trick would probably be to look at your sample files, and see if we can figure out the rules for getting from the start of the file to the first view entry. Do we always need to skip a fixed distance? Can we start somewhere and read some IDs then some length, skip and find the next IDs then length etc? Is there something that tells us if the text will be &quot;f0 3b 8*00 sz sz text&quot; or &quot;f0 3b sz sz text&quot;? In your first sample file, why do most of the views have zeros before their f0 3f/bf but the Isometric one has data until it&apos;s.&lt;/p&gt;

&lt;p&gt;Once we can answer at least some of those, we&apos;ll be more along the way of cracking the format&apos;s structure!&lt;/p&gt;</comment>
                            <comment id="13065559" author="runamok81" created="Thu, 14 Jul 2011 22:50:34 +0100"  >
&lt;p&gt;&amp;gt;Quite a few of the view names in your sample files had 5*00 before them, rather than 5*33. Which rule is the blackfeather one incorrectly triggering? And what bit in the text types comment have we got wrong?  For the view names vs text, maybe we should put different classes on them or something like that?&lt;/p&gt;

&lt;p&gt;I&apos;m not suggesting any changes to the byte rules on view detection (yet). But, I just don&apos;t see the payoff in detecting view names. It&apos;s tough to pin down the prefixes on the last views. I think simply detecting note text, date, description, is sufficient.&lt;/p&gt;

&lt;p&gt;&amp;gt;I suspect we&apos;ll need to understand the file format better first!&lt;/p&gt;

&lt;p&gt;I&apos;ve compared my collection of files using www.fairdell.com&lt;br/&gt;
The first 8,000 bytes of PRT files are fairly static.  &lt;br/&gt;
Bytes don&apos;t vary dramatically.  Specifically, the first 8 views are evenly spaced, and always in the same location, in every PRT file.  &lt;/p&gt;

&lt;p&gt;&amp;gt;see if we can figure out the rules for getting from the start of the file to the first view entry.&lt;/p&gt;

&lt;p&gt;For instance, you will always find the text for the first view, &quot;Top View,&quot; is always at 7031st Byte or 0x01b77.  &lt;/p&gt;

&lt;p&gt;&amp;gt; Once we can answer at least some of those, we&apos;ll be more along the way of cracking the format&apos;s structure!&lt;/p&gt;

&lt;p&gt;The Top View is followed by Front, Back, Bottom, Right, Left, Isometric, and Axonometric Views which are always in the same location.&lt;br/&gt;
No need for byte pattern matching, we know exactly where they are.&lt;br/&gt;
Next, as we approach the 8Kb mark, System view may be present multiple times, or not at all.  That is were it starts to get dicey.&lt;br/&gt;
For instance, ultra complex blackfeather has 240 system views with different prefixes!&lt;br/&gt;
But we can determine where the System View section ends because it is always suffixed by what I call the &quot;ascending byte matrix marker&quot;&lt;br/&gt;
It always starts with the same few bytes..&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;FF FF 10 00 00 00 11 .. .. .. 12 .. .. .. .. 13 ..&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;.. .. 14 .. .. .. 15 .. .. .. 16 .. .. .. .. 17 ..&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;.. .. 18 .. .. .. 19 .. .. .. 1A .. .. .. 1B .. &amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Immediately Following the &quot;ascending byte matrix&quot; &lt;br/&gt;
is a section dedicated to whichever CAD programs have touched the file.&lt;br/&gt;
You should always find the CADKEY identifier &quot;CK_TTFTABLE&quot;&lt;/p&gt;

&lt;p&gt;Does this help?&lt;/p&gt;
</comment>
                            <comment id="13069745" author="runamok81" created="Fri, 22 Jul 2011 22:05:48 +0100"  >&lt;p&gt;The attached patches strip view name parsing, and the associated testing.&lt;/p&gt;

&lt;p&gt;This makes the parser output more stable.&lt;/p&gt;

</comment>
                    </comments>
                    <attachments>
                            <attachment id="12487482" name="PRTParser.patch" size="1902" author="runamok81" created="Fri, 22 Jul 2011 22:05:48 +0100"/>
                            <attachment id="12485609" name="PRTParser.patch" size="1126" author="runamok81" created="Thu, 7 Jul 2011 16:11:09 +0100"/>
                            <attachment id="12485326" name="PRTParser.patch" size="658" author="runamok81" created="Tue, 5 Jul 2011 21:37:37 +0100"/>
                            <attachment id="12487481" name="PRTParserTest.patch" size="856" author="runamok81" created="Fri, 22 Jul 2011 22:05:48 +0100"/>
                            <attachment id="12483459" name="TikaTest.prt" size="10246" author="runamok81" created="Wed, 22 Jun 2011 17:46:21 +0100"/>
                            <attachment id="12485307" name="TikaTest2.prt" size="41664" author="runamok81" created="Tue, 5 Jul 2011 19:31:33 +0100"/>
                            <attachment id="12485309" name="TikaTest2.prt.txt" size="1015" author="runamok81" created="Tue, 5 Jul 2011 19:40:34 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 4 Jul 2011 20:23:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3863</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxx2b3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16693</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>