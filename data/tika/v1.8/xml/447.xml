<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:28:45 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-447/TIKA-447.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-447] Container aware mimetype detection</title>
                <link>https://issues.apache.org/jira/browse/TIKA-447</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;As discussed on the dev list, Tika should ideally have a configurable way to process container based formats (eg zip files and ole2 files) when trying to detect the correct mime type for a document.&lt;/p&gt;

&lt;p&gt;This needs to be configurable, because some people won&apos;t want Tika to have to do all the work of parsing the whole file when they&apos;re not interested in knowing exactly what&apos;s in it&lt;/p&gt;

&lt;p&gt;Once we have gone to the trouble of opening and parsing the container file, we should try to keep the open container around to speed up parsing of the contents&lt;/p&gt;</description>
                <environment></environment>
        <key id="12468165">TIKA-447</key>
            <summary>Container aware mimetype detection</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="gagravarr">Nick Burch</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Jun 2010 16:34:14 +0100</created>
                <updated>Thu, 20 Oct 2011 13:34:20 +0100</updated>
                            <resolved>Sun, 21 Aug 2011 15:13:47 +0100</resolved>
                                    <version>0.7</version>
                                    <fixVersion>0.10</fixVersion>
                                    <component>mime</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12883585" author="gagravarr" created="Tue, 29 Jun 2010 16:35:14 +0100"  >&lt;p&gt;Patch which implements limited ole2 and odf detection by parsing the containers. May not be the best way to do it however...&lt;/p&gt;</comment>
                            <comment id="12893182" author="gagravarr" created="Wed, 28 Jul 2010 14:56:57 +0100"  >&lt;p&gt;As no-one has objected, I&apos;ve committed this initial code in r980058.&lt;/p&gt;

&lt;p&gt;With this commit, OLE2 based detection should be complete, and some Zip based detection is there, but some still remains to be added.&lt;/p&gt;</comment>
                            <comment id="12893260" author="chrismattmann" created="Wed, 28 Jul 2010 18:16:27 +0100"  >&lt;p&gt;Nick, awesome!&lt;/p&gt;</comment>
                            <comment id="12893610" author="gagravarr" created="Thu, 29 Jul 2010 14:23:47 +0100"  >&lt;p&gt;I&apos;ve added support for OOXML files (detection + container re-use), as well as Jar files&lt;/p&gt;

&lt;p&gt;I believe the only zip based container format we can&apos;t currently detect with this is iWork. I&apos;ve figured out how to tell it&apos;s an iWork document, but not how to tell which iWork document subtype it is.&lt;/p&gt;

&lt;p&gt;I think the only bit left for now is to document it. We don&apos;t currently have a Detection section in the documentation. Shall I create a new one, put in the basics from one of the apachecon Tika talks, then add a section on container aware detection?&lt;/p&gt;</comment>
                            <comment id="12893620" author="chrismattmann" created="Thu, 29 Jul 2010 15:04:52 +0100"  >&lt;p&gt;Nick, awesome job! Comments below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think the only bit left for now is to document it. We don&apos;t currently have a Detection section in the documentation. Shall I create a new one, put in the basics from one of the apachecon Tika talks, then add a section on container aware detection? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep, I would do this. I would just add some APT documentation and create a section called &quot;Detection&quot;, with some useful information on there. You could also then from that APT page, link to the page on the Wiki where the discussion on container Metadata occurred too:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/tika/MetadataDiscussion&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/tika/MetadataDiscussion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;
</comment>
                            <comment id="12894486" author="jukkaz" created="Mon, 2 Aug 2010 09:17:20 +0100"  >&lt;p&gt;It would be great if the AutoDetectParser could automatically leverage such detectors that use external parser libraries. The AutoDetectParser can&apos;t directly link to such parsers due to dependency issues, but we could use the service provider mechanism just like we do with Parser classes to automatically load all the Detectors available in the classpath. To do this effectively, I&apos;d also add a Detector.getSupportedTypes() method like below so that more complex and potentially more expensive (need to read the entire document) detectors like POIFSContainerDetector could only be called if a more generic detector first determines that the input document matches the supported base type.&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Returns the set of base media types supported by this detector&lt;/li&gt;
	&lt;li&gt;when used with the given parse context. The base media type can&lt;/li&gt;
	&lt;li&gt;be &amp;lt;code&amp;gt;application/octet-stream&amp;lt;/code&amp;gt; for generic detectors&lt;/li&gt;
	&lt;li&gt;or a more specific type like &amp;lt;code&amp;gt;text/plain&amp;lt;/code&amp;gt; or&lt;/li&gt;
	&lt;li&gt;&amp;lt;code&amp;gt;application/zip&amp;lt;/code&amp;gt; for detectors that can only&lt;/li&gt;
	&lt;li&gt;distinguish between subtypes of that base type.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@since Apache Tika 0.8&lt;/li&gt;
	&lt;li&gt;@param context parse context&lt;/li&gt;
	&lt;li&gt;@return immutable set of media types&lt;br/&gt;
     */&lt;br/&gt;
    Set&amp;lt;MediaType&amp;gt; getSupportedTypes(ParseContext context);&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12894494" author="gagravarr" created="Mon, 2 Aug 2010 09:45:16 +0100"  >&lt;p&gt;At the moment, the ContainerAwareDetector checks the first 8 bytes of the file. If they match the OLE2 header signature, it hands it off to POIFS. If the first 4 bytes match the zip header signature, it does zip checking. If neither of them match, it falls back to the default detector&lt;/p&gt;

&lt;p&gt;To me, this seems simpler!&lt;/p&gt;</comment>
                            <comment id="12894501" author="alexott" created="Mon, 2 Aug 2010 09:53:09 +0100"  >&lt;p&gt;2Nick: does this will allow to implement support for self-extracted archives? Because, if we&apos;ll implement this as separate checker, then we&apos;ll need to implement archive extraction/detection inside this checker - this could lead to code duplication.&lt;/p&gt;</comment>
                            <comment id="12894502" author="jukkaz" created="Mon, 2 Aug 2010 09:55:17 +0100"  >&lt;p&gt;Hmm, I guess you&apos;re right, perhaps we won&apos;t need such multi-level detector functionality. The alternative is to simply load all available Detectors, run them on the input document and finally select the most specific of the returned media types.&lt;/p&gt;</comment>
                            <comment id="12894507" author="alexott" created="Mon, 2 Aug 2010 10:33:57 +0100"  >&lt;p&gt;It&apos;s better to have some flag, that will say &quot;Stop, if this rule matched&quot;, because applying of all rules, could lead to weak performance&lt;br/&gt;
It&apos;s better to have something like, for example for zips&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rule for jar: zip-type == X1&lt;/li&gt;
	&lt;li&gt;rule for odf: zip-type == X2&lt;br/&gt;
.....&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;zip-type will calculated once on first invocation, and then re-used.  And all rules (for jar, odf, etc.) have no flag &quot;Stop here&quot;, while there will rule for ordinary zip&apos;s, that will have this flag, and we&apos;ll stop after checking of all subtypes.&lt;br/&gt;
The same is could be implemented for OLE2 and other container formats, like OGG, etc.&lt;/p&gt;</comment>
                            <comment id="12894509" author="gagravarr" created="Mon, 2 Aug 2010 10:42:57 +0100"  >&lt;p&gt;Jukka - that might end up being more work though? Also, short of refactoring the current mime types to split out all the different bits, I&apos;m not sure we will have that many new detectors ever?&lt;/p&gt;</comment>
                            <comment id="12894510" author="gagravarr" created="Mon, 2 Aug 2010 10:44:58 +0100"  >&lt;p&gt;Alex - have a look at the code, I think it already does what you&apos;re asking of it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;For OLE2, when we detect the ole2 signature, we load the file into POIFS. We then ask the detector what it is based on this&lt;/p&gt;

&lt;p&gt;For Zip, we look at each entry in the zip file in turn. If it&apos;s one we recognise the name of, and that tells us all we need, we return. Otherwise, we open up that entry, and grab the mime type from that, and return.&lt;/p&gt;</comment>
                            <comment id="12894511" author="alexott" created="Mon, 2 Aug 2010 10:53:56 +0100"  >&lt;p&gt;Ah, sorry Nick - I hadn&apos;t looked into code yet. I thought, that we stuck in container if it matches to some signature.&lt;/p&gt;</comment>
                            <comment id="12894518" author="jukkaz" created="Mon, 2 Aug 2010 11:33:30 +0100"  >&lt;p&gt;It&apos;s a bit more work, yes. What I&apos;m trying to achieve here is for someone who just uses &quot;new Tika().detect(...)&quot; to be able to benefit from these extra detectors when they&apos;re available in the classpath.&lt;/p&gt;</comment>
                            <comment id="12894520" author="gagravarr" created="Mon, 2 Aug 2010 11:41:28 +0100"  >&lt;p&gt;Using the container aware detector will give a more accurate answer generally, but at the cost of more memory use, and longer processing time. (Oh, and plus the need for various parser dependencies)&lt;/p&gt;

&lt;p&gt;There was some reluctance on-list about making this the default, due to the memory and processing impact of opening the container, which we&apos;ll need to take notice of. &lt;/p&gt;

&lt;p&gt;There&apos;s also the issue of making sure the detectors run in the right order, which may matter for some but not for others. Alas I don&apos;t have a good answer for the way to handle all these different needs...&lt;/p&gt;</comment>
                            <comment id="12894540" author="jukkaz" created="Mon, 2 Aug 2010 13:29:32 +0100"  >&lt;p&gt;BTW, the current new Detector implementations are a bit troublesome as they break the contract that the detect() method must not close() the given stream and should use mark() and reset() where necessary to avoid changing the state of the stream. The rationale behind this contract is that you should be able to call parse() on the same stream instance after detecting its type.&lt;/p&gt;

&lt;p&gt;The attached patch fixes this issue by using the TikaInputStream.getFile() method to access the underlying file (when available or spooled) when detecting these kinds of complex container formats. If the given stream is not a TikaInputStream, then just the generic application/zip or application/x-tika-msoffice type is returned.&lt;/p&gt;</comment>
                            <comment id="12895192" author="jukkaz" created="Wed, 4 Aug 2010 10:31:16 +0100"  >&lt;p&gt;I committed my patch in revision  982175.&lt;/p&gt;

&lt;p&gt;&amp;gt; memory and processing impact of opening the container&lt;/p&gt;

&lt;p&gt;I think this acceptable as the extra cost is only associated with specific media types, and we can use the open container feature you added to TikaInputStream to allow later parsing stages to avoid duplicating these costs. Also, since this functionality is now only triggered when the detector is passed a TikaInputStream, a performance-conscious user can easily prevent the extra processing. We might also want to add some extra flag for this if needed.&lt;/p&gt;

&lt;p&gt;&amp;gt; detectors run in the right order&lt;/p&gt;

&lt;p&gt;This was a part of my thinking behind the proposed getSupportedTypes() method. With that we could choose to only run these kinds of more complex detectors when simpler detectors have first identified the basic container format.&lt;/p&gt;</comment>
                            <comment id="12898281" author="gagravarr" created="Fri, 13 Aug 2010 16:38:54 +0100"  >&lt;p&gt;I&apos;ve added some Detector documentation in r985242, please everyone dive in with bits I have missed!&lt;/p&gt;</comment>
                            <comment id="12967036" author="jukkaz" created="Sun, 5 Dec 2010 22:32:29 +0000"  >&lt;p&gt;I refactored the code a bit in revision 1042476 to make it easier to compose with other kinds of detectors. Most notably I removed the ContainerDetector interface and made the POIFSContainerDetector and ZipContainerDetector classes directly implement the Detector interface.&lt;/p&gt;</comment>
                            <comment id="12967055" author="jukkaz" created="Mon, 6 Dec 2010 00:48:01 +0000"  >&lt;p&gt;In revision 1042497 I added an auto-loading mechanism for detectors so that tools like the Tika facade or the AutoDetectParser class can automatically pick up all detector implementations in the current classpath. This way also the container-aware detectors can be used with minimal changes to client code.&lt;/p&gt;

&lt;p&gt;To prevent excessive performance overhead, both the Zip and POIFS detectors will first check for the relevant magic byte header and will only do the more expensive format check if the byte header matches and if the given stream is a TikaInputStream instance.&lt;/p&gt;

&lt;p&gt;In revision 1042498 I added a new --detect option to the CLI for easier testing of the auto-detect functionality. Also, since the container-aware detectors are now automatically loaded and used, there&apos;s no longer any need for the explicit --container-aware-detector option and I&apos;ve turned it into a no-op.&lt;/p&gt;</comment>
                            <comment id="13036931" author="jukkaz" created="Fri, 20 May 2011 17:57:15 +0100"  >&lt;p&gt;I think we are pretty much done with this issue already.&lt;/p&gt;

&lt;p&gt;Before closing this, I&apos;d like to move the new classes from within o.a.t.detect to appropriate o.a.t.parser subpackages in tika-parsers. That way the detection logic is closer to the related parser classes and we don&apos;t have to worry about split-package warnings from OSGi. &lt;/p&gt;</comment>
                            <comment id="13088370" author="jukkaz" created="Sun, 21 Aug 2011 15:13:47 +0100"  >&lt;p&gt;As suggested above, I moved the detector classes from o.a.t.detect to o.a.t.parser subpackages in revision 1159985.&lt;/p&gt;

&lt;p&gt;That should complete the last remaining open issue with this feature, so resolving as fixed.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12451036" name="TIKA-447-TikaInputStream.patch" size="5765" author="jukkaz" created="Mon, 2 Aug 2010 13:29:32 +0100"/>
                            <attachment id="12448319" name="TikaContainerDetection.patch" size="16023" author="gagravarr" created="Tue, 29 Jun 2010 16:35:14 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 28 Jul 2010 17:16:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4414</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxx3qf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16924</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>