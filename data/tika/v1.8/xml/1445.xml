<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:36:28 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-1445/TIKA-1445.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-1445] Figure out how to add Image metadata extraction to Tesseract parser</title>
                <link>https://issues.apache.org/jira/browse/TIKA-1445</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;Now that Tesseract is the default image parser in Tika for many image types, consider how to add back in the metadata extraction capabilities by the other Image parsers.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12747589">TIKA-1445</key>
            <summary>Figure out how to add Image metadata extraction to Tesseract parser</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="chrismattmann">Chris A. Mattmann</assignee>
                                    <reporter username="chrismattmann">Chris A. Mattmann</reporter>
                        <labels>
                    </labels>
                <created>Sun, 12 Oct 2014 17:19:50 +0100</created>
                <updated>Sun, 22 Feb 2015 20:39:52 +0000</updated>
                            <resolved>Thu, 8 Jan 2015 17:56:25 +0000</resolved>
                                                    <fixVersion>1.7</fixVersion>
                                    <component>parser</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="14168711" author="chrismattmann" created="Sun, 12 Oct 2014 17:37:48 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;thinking about this, this may not be the right solution since each parser may consume the InputStream when generating metadata - may need to think about this more, but here&apos;s where I left off.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14169090" author="thaichat04" created="Mon, 13 Oct 2014 09:57:23 +0100"  >&lt;p&gt;Interesting question !&lt;br/&gt;
For me, parser&apos;s selection and parsers priority decision should be done on runtime by configuration, not inside a parser.&lt;br/&gt;
Image&apos;s parser is an interesting case of concurrent parsers (Tesseract vs classical Image Parsers). We have double problem here:&lt;br/&gt;
1. When many parsers can work with same mime type, which one is selected ?&lt;br/&gt;
2. When we have many parsers, can we apply many parsers and merge results (metadata &amp;amp; handler) .&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;For case 1, if we use a override config of parsers on runtime, we can declare many parsers with matching mimetype and the later one in list will be selected. We may extend CLI/WebService to inject this kind of configuration.&lt;/li&gt;
	&lt;li&gt;For case 2, we don&apos;t have a solution for now. We may extend CompositeParser to accept a mode &apos;many&apos; parsers and call matching parsers in chain. The merging result is an other problem.we can accept a same metadata name is override by an other parser. The perfect solution is (again) using nested structure on our metadata which enable store each parser&apos;s result.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14183873" author="tpalsulich" created="Sat, 25 Oct 2014 03:36:47 +0100"  >&lt;p&gt;I&apos;ve been trying my hand at this some time now. An idea I had was to create a temporary file from the input InputStream, then create new input streams from that file to run each Parser on.&lt;/p&gt;

&lt;p&gt;But, before this OCR Parser, we only ran one Parser on the image, anyway. So, what if there was a way to get the &quot;second best&quot; default parser for the image? An option is to hard code the exact working Parsers. But, in my opinion, we should load them dynamically. So, that would require getting a &lt;tt&gt;List&amp;lt;Parser&amp;gt;&lt;/tt&gt;, instead of just the &quot;best&quot; Parser for a given MediaType (&lt;tt&gt;CompositeParser.getParsers(ParseContext)&lt;/tt&gt;). &lt;/p&gt;

&lt;p&gt;If we only chose the second best Parser, we wouldn&apos;t have to merge the Metadata results, since the OCRParser doesn&apos;t add Metadata. But, it might call the ContentHandler.&lt;/p&gt;</comment>
                            <comment id="14183945" author="chrismattmann" created="Sat, 25 Oct 2014 05:49:36 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;push to 1.8&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14184670" author="tpalsulich" created="Sun, 26 Oct 2014 21:28:19 +0000"  >&lt;p&gt;Here is an updated patch with the above idea. I created a new public method in CompositeParser and DefaultParser &amp;#8211; &lt;tt&gt;getAllParsersFor(ParseContext, MediaType&lt;/tt&gt; &amp;#8211; which returns a list of all Parsers that support the given type. This list is then searched from TesseractOCRParser for a second Parser for the image being parsed.&lt;/p&gt;

&lt;p&gt;I created a dummy BodyContentHandler to drop all content from the second Parser.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="14185574" author="tallison@mitre.org" created="Mon, 27 Oct 2014 18:34:58 +0000"  >&lt;p&gt;I played with this a bit with a png test file.&lt;/p&gt;

&lt;p&gt;The problem there is that besides the TesseractOCRParser, the GDALParser and the ImageParser both process png files.  So, there&apos;s no way to guarantee that the &quot;other&quot; parser actually parses Metadata.&lt;/p&gt;

&lt;p&gt;One hack would be to hardcode checking the ImageParser or the JpegParser only to see if there is a match.&lt;/p&gt;

&lt;p&gt;A better option would be something along the lines of what we do with the service loading pattern with AutoDetectReader.&lt;/p&gt;

&lt;p&gt;The user could specify ImageMetadataParsers in a service listing, and we would try each one in turn to see if there is a match on type.&lt;/p&gt;</comment>
                            <comment id="14185630" author="tallison@mitre.org" created="Mon, 27 Oct 2014 19:04:41 +0000"  >&lt;p&gt;Something along these lines?&lt;/p&gt;

&lt;p&gt;Doh!  Send in a DefaultHandler instead of BodyContentHandler to the &quot;otherParser&quot;&lt;/p&gt;</comment>
                            <comment id="14185644" author="tpalsulich" created="Mon, 27 Oct 2014 19:18:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;Doh! Send in a DefaultHandler instead of BodyContentHandler to the &quot;otherParser&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I made the same mistake.&lt;/p&gt;

&lt;p&gt;I think our ideas are very similar. But, I offloaded the dynamic loading to &lt;tt&gt;DefaultParser.getAllParsersFor&lt;/tt&gt;, since it already has service loading. But, my logic for getting the underlying DefaultParser from the AutoDetectParser is somewhat hacky. +1 to the expanded tests and always parsing with the otherParser, though!&lt;/p&gt;</comment>
                            <comment id="14185657" author="tallison@mitre.org" created="Mon, 27 Oct 2014 19:24:52 +0000"  >&lt;p&gt;Agreed. The user needs to limit the parsers considered for metadata parsing, though.  As mentioned in the post above, both GDAL and Image parsers handle &quot;png&quot;.  We can&apos;t search all parsers that handle &quot;png&quot; and pick the first or last.&lt;/p&gt;</comment>
                            <comment id="14186200" author="tallison@mitre.org" created="Tue, 28 Oct 2014 01:39:54 +0000"  >&lt;p&gt;This is more invasive than I&apos;d like, and it does not solve all problems, and there are some important printlns still in there.&lt;/p&gt;

&lt;p&gt;I&apos;m sure this was part of the plan in the integration, but it seems a bit on the side of dark magic that the Tesseract parser is selected for image files by the AutoDetectParser only because the full class name sorts after oat.image.ImageParser, etc.  I&apos;d prefer the solution recommended above (if we thoroughly document it), where we pick the last (or first?) in the list, but that isn&apos;t currently happening, I don&apos;t think.&lt;/p&gt;

&lt;p&gt;Am I understanding this correctly?  Do we want to take away some of the magic?&lt;/p&gt;

&lt;p&gt;I added an AbstractTerminalImageMetadataParser so that we could gather together all classes used to parse just the metadata of images.  This allows the OCRParsers to go through all the parsers and pick out only those that are not composite but do parse image metadata.  Perhaps we should remove these parsers that implement this from the AutoDetectParser??? Still a bit dark...&lt;/p&gt;

&lt;p&gt;I think our tests should not add the TesseractOCRParser to the ParseContext as a parser.  It would be far better to pass in AutoDetectParser so that the TesseractOCRParser operates on all embedded images, no matter the depth.&lt;/p&gt;

&lt;p&gt;This patch is not a solution, only some thoughts.&lt;/p&gt;</comment>
                            <comment id="14186696" author="tallison@mitre.org" created="Tue, 28 Oct 2014 11:07:10 +0000"  >&lt;p&gt;On further thought...I won&apos;t have time to sketch this out until tonight or tomorrow...&lt;/p&gt;

&lt;p&gt;It might make sense to get rid of the AbstractTerminalMetadataParser class, and have AbstractOCRParser load the image metadata parsers from a services file; we could then remove the image metadata parsers from the Parser services list.  For those without Tesseract installed, the TesseractOCRParser would be a pass-through to the old behavior (no copying of streams, just classic metadata parsing); for those with it installed, TesseractOCRParser would copy the stream and do a double pass, once for the metadata and once for the OCR (as in Tyler&apos;s patch).&lt;/p&gt;

&lt;p&gt;This solution would get us out of the reliance on reverse alphabetic sort order of parser class names to pick the oat.parser.ocr.TesseractOCRParser as &quot;best&quot; parser for .gif, .jpeg, etc.  Of course, we&apos;re still relying on that order to pick TesseractOCRParser over GDAL for .png files...&lt;/p&gt;</comment>
                            <comment id="14188440" author="tallison@mitre.org" created="Wed, 29 Oct 2014 15:18:39 +0000"  >&lt;p&gt;This version subclasses Parser to create an ImageMetaParser class, which our current image metadata parsers then extend.&lt;/p&gt;

&lt;p&gt;This adds a DefaultImageMetadataparser that is a copy and paste of DefaultParser...can&apos;t override static loader unfortunately!&lt;/p&gt;

&lt;p&gt;We now specify regular parsers in the Parser services file and ImageMetadataParsers in a separate services file.&lt;/p&gt;

&lt;p&gt;I don&apos;t like that this creates a new &quot;class&quot; of parsers, but I can&apos;t think of another way of guaranteeing that the OCRParser will find an image metadata parser correctly.&lt;/p&gt;</comment>
                            <comment id="14211277" author="tpalsulich" created="Thu, 13 Nov 2014 20:50:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@apache.org&quot;&gt;Tim Allison&lt;/a&gt;, what was the system before the Tesseract Parser? Were we just getting lucky that metadata was extracted?&lt;/p&gt;</comment>
                            <comment id="14212246" author="tallison@mitre.org" created="Fri, 14 Nov 2014 13:38:20 +0000"  >&lt;p&gt;The AutoDetectParser was doing its regular lookup for which parser supported x file type.  No luck in that.&lt;/p&gt;

&lt;p&gt;Now, there is unfortunately something approaching luck in how we&apos;re handling the case where multiple parsers support a given file type.  Our current algorithm, if I understand it correctly is to sort parsers in reverse alphabetical order by their package+class name (with a special case of &quot;prefer&quot; non-o.a.t parsers) and then pick the first parser that claims that it will parse the given file type.  &lt;/p&gt;

&lt;p&gt;From the DefaultParser:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        List&amp;lt;Parser&amp;gt; parsers =
                loader.loadStaticServiceProviders(Parser.class);
        Collections.sort(parsers, new Comparator&amp;lt;Parser&amp;gt;() {
            public int compare(Parser p1, Parser p2) {
                String n1 = p1.getClass().getName();
                String n2 = p2.getClass().getName();
                boolean t1 = n1.startsWith(&quot;org.apache.tika.&quot;);
                boolean t2 = n2.startsWith(&quot;org.apache.tika.&quot;);
                if (t1 == t2) {
                    return n1.compareTo(n2);
                } else if (t1) {
                    return -1;
                } else {
                    return 1;
                }
            }
        });
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and from CompositeParser:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;public Map&amp;lt;MediaType, Parser&amp;gt; getParsers(ParseContext context) {
        Map&amp;lt;MediaType, Parser&amp;gt; map = new HashMap&amp;lt;MediaType, Parser&amp;gt;();
        for (Parser parser : parsers) {
            for (MediaType type : parser.getSupportedTypes(context)) {
                map.put(registry.normalize(type), parser);
            }
        }
        return map;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &quot;luck&quot; so far is that, for example, the org.apache.tika.parser.gdal.GDALParser parser (which supports jpeg and gif) happens to sort after the org.apache.tika.parser.jpeg.JPegParser, the org.apache.tika.parser.image.ImageParser and the other o.a.t.p.image.* parsers.  If you run the GDALParser on &quot;/test-documents/testJPEG_EXIF.jpg&quot;, you get no metadata. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Depending on what the community thinks, we may want to open a separate issue and change DefaultParser&apos;s method of selecting a parser so that it:&lt;/p&gt;

&lt;p&gt;1) selects non-o.a.t. parsers first&lt;br/&gt;
2) respects the order of parsers in the services files&lt;/p&gt;

&lt;p&gt;This wouldn&apos;t change the behavior, but it would allow users to select parser preference by a means other than relying on reverse alphabetical order.&lt;/p&gt;</comment>
                            <comment id="14212258" author="tallison@mitre.org" created="Fri, 14 Nov 2014 13:50:36 +0000"  >&lt;p&gt;This is what we&apos;re currently doing in CompositeParser#getParsers(ParseContext context) &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;clobbering: o.a.t.p.gdal.GDALParser@677556a0 with o.a.t.p.hdf.HDFParser@488a5770 for application/x-hdf
clobbering: o.a.t.p.gdal.GDALParser@677556a0 with o.a.t.p.image.ImageParser@72729f44 for image/x-ms-bmp
clobbering: o.a.t.p.gdal.GDALParser@677556a0 with o.a.t.p.image.ImageParser@72729f44 for image/png
clobbering: o.a.t.p.gdal.GDALParser@677556a0 with o.a.t.p.image.ImageParser@72729f44 for image/gif
clobbering: o.a.t.p.image.ImageParser@72729f44 with o.a.t.p.image.ImageParser@72729f44 for image/x-ms-bmp
clobbering: o.a.t.p.gdal.GDALParser@677556a0 with o.a.t.p.jpeg.JpegParser@4336640f for image/jpeg
clobbering: o.a.t.p.microsoft.TNEFParser@27e33742 with o.a.t.p.microsoft.TNEFParser@27e33742 for application/vnd.ms-tnef
clobbering: o.a.t.p.gdal.GDALParser@677556a0 with o.a.t.p.netcdf.NetCDFParser@3640e283 for application/x-netcdf
clobbering: o.a.t.p.image.ImageParser@72729f44 with o.a.t.p.ocr.TesseractOCRParser@5dd72248 for image/x-ms-bmp
clobbering: o.a.t.p.jpeg.JpegParser@4336640f with o.a.t.p.ocr.TesseractOCRParser@5dd72248 for image/jpeg
clobbering: o.a.t.p.image.ImageParser@72729f44 with o.a.t.p.ocr.TesseractOCRParser@5dd72248 for image/png
clobbering: o.a.t.p.image.TiffParser@570bd519 with o.a.t.p.ocr.TesseractOCRParser@5dd72248 for image/tiff
clobbering: o.a.t.p.image.ImageParser@72729f44 with o.a.t.p.ocr.TesseractOCRParser@5dd72248 for image/gif
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.image-template
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.spreadsheet-template
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.chart-template
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.formula
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.text-web
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.text
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.formula-template
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.spreadsheet
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.text-master
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.text-template
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.graphics
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.graphics-template
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.presentation
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.image
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.presentation-template
clobbering: o.a.t.p.odf.OpenDocumentParser@49d388f4 with o.a.t.p.odf.OpenDocumentParser@49d388f4 for application/vnd.oasis.opendocument.chart
clobbering: o.a.t.p.pkg.CompressorParser@5ec47109 with o.a.t.p.pkg.CompressorParser@5ec47109 for application/gzip

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14213858" author="chrismattmann" created="Sun, 16 Nov 2014 05:53:26 +0000"  >&lt;p&gt;Tim, I wonder if it&apos;s possible to clone the original InputStream provided and to simply reset it to its original state after each Parser is run so that they can simply augment rather than replace what&apos;s there. I honestly think we should run all sets of matching Parsers for a given or detected MediaType. Thoughts?&lt;/p&gt;</comment>
                            <comment id="14214668" author="tallison@mitre.org" created="Mon, 17 Nov 2014 14:02:28 +0000"  >&lt;p&gt;This might muddy results, initially, but users could choose to turn off/not load parsers that they didn&apos;t want.  It would be a significant change over what we&apos;re currently doing.&lt;/p&gt;

&lt;p&gt;How will we handle:&lt;br/&gt;
1) Two parsers both &quot;set&quot; a value in the Metadata object?  Will the second overwrite the value of the first?&lt;br/&gt;
2) Content:  How will we know when a document ends?  AutoDetectParser would wrap the handler in an EndDocumentShieldingContentHandler and then call endDocument when done?&lt;br/&gt;
3) Will the user be able to parse the output from the handler to figure out which parser is responsible for which content?  Let&apos;s say a user wants to pull the electronic text out of a PDF &lt;em&gt;and&lt;/em&gt; render the page as an image and then run it through OCR, would we have something like &amp;lt;div parser=&quot;o.a.t.p.PDFParser&quot;&amp;gt; or similar?&lt;/p&gt;

&lt;p&gt;If we go this route, we&apos;d want to make sure we don&apos;t have literally duplicate parsers (as we do now).&lt;/p&gt;

&lt;p&gt;This sounds more complicated than having parent parsers know which children they control and how to control them, but, it might make sense.&lt;/p&gt;

&lt;p&gt;Aside from OCR, what other use cases do we have where we might want multiple parsers operating on the same doc type?&lt;/p&gt;</comment>
                            <comment id="14215170" author="lfcnassif" created="Mon, 17 Nov 2014 21:03:53 +0000"  >&lt;p&gt;+1 to respect the order of parsers in the service file, instead of sorting the full class names.&lt;/p&gt;

&lt;p&gt;1) Creating a service loading of ImageMetadataParsers, afaik, can have the same problem of different parsers trying to set the same metadata values. Metadata values are multivalued, so can we simply add the values produced by different parsers?&lt;/p&gt;

&lt;p&gt;2) Yes, I think CompositeParser should append the content produced by different supported parsers. If the user do not want all the parsers, he should customize the parser service loading file.  &lt;/p&gt;

&lt;p&gt;3) It is a good idea to identify which parser produced each content with a &amp;lt;div&amp;gt; tag.&lt;/p&gt;</comment>
                            <comment id="14215292" author="gagravarr" created="Mon, 17 Nov 2014 22:15:09 +0000"  >&lt;p&gt;&amp;gt; +1 to respect the order of parsers in the service file, instead of sorting the full class names.&lt;/p&gt;

&lt;p&gt;The problem is that you can have multiple service files on your classpath. How do we respect the order of parsers in that case, when the order we get the service files in can be random due to the JVM&apos;s behaviour? &lt;/p&gt;

&lt;p&gt;(It was this non-determinicity of service files that led us to initially add explicit sorting of parsers, so we&apos;d have consistent behaviour between multiple runs)&lt;/p&gt;</comment>
                            <comment id="14215303" author="chrismattmann" created="Mon, 17 Nov 2014 22:25:38 +0000"  >&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@apache.org&quot;&gt;Tim Allison&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Here are my replies (also I moved this convo to the dev list since I think it&apos;s super important!):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;#1 We will use a default policy of &#8220;append&#8221; which allows the Metadata
object to append values to the same key, rather than replace them.
We could also couple this with X-Parsed-By, which is an ordered
list of what Parser parsed what so that we can reconstruct what
Parser contributed what field. If it&#8217;s multi-valued, we can also
add fields for Offsets, etc.  An alternative here would also be to
prefix metadata keys in this CompositeParser by the X-Parsed-By
parser name, to avoid conflicts. Users would be able to switch the
policy from &#8220;append&#8221; to &#8220;overwrite&#8221; in which this isn&#8217;t a problem,
and we simply allow the last parser to input into a conflicting key
to be the one that takes precedence. One option with overwrite would
be to allow in this policy for providing a precedence order of
Parsers (e.g., the current service list could be a precedence order).

That said, how sure are we that this is a *real* problem? Some
parsers parse the same MediaType but contribute vastly different
and non overlapping keys to the metadata object?

#2 I like your suggestion - or the alternative as I suggested would
be to reset the stream to the beginning after each parser, or
alternatively keep a clone of the original stream as a copy, and
then clone it for each called Parser attempt?

#3 I like your idea about wrapping content provided by handlers
with the parser attribute. Very neat, let&#8217;s try that!

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14216351" author="tallison@mitre.org" created="Tue, 18 Nov 2014 15:59:32 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;, thank you for explaining the original design decision.  I knew there must be a good reason.  My idea was to create one list of non-o.a.t parsers and one list of o.a.t parsers and then prioritize the non-o.a.t. in a joint list, but within each list, the parsers would be in the order they were when loaded.  Is it common for people to have more than the out-of-the-box o.a.t.p.Parser services file and then maybe one user-defined one?&lt;/p&gt;</comment>
                            <comment id="14216365" author="tallison@mitre.org" created="Tue, 18 Nov 2014 16:16:39 +0000"  >&lt;p&gt;Copied from dev discussion to record points on this issue.  Will not duplicate in future.  Sorry!&lt;/p&gt;

&lt;p&gt;On issue 1: The proposal is that we&apos;d send in a fresh Metadata object to each parser and then combine that information into a new Metadata object either via add or set.  If we go this route, we&apos;ll lose the restrictions that Properties may have originally held (e.g. one value as in TikaCoreProperties.TITLE).&lt;/p&gt;

&lt;p&gt;On Issue 2:&lt;br/&gt;
I think we&apos;re talking about different things.  Yes, we&apos;ll definitely need to reset or spool the stream depending on its length.  My concern was more with the handlers.  If the first parser calls endDocument() and we don&apos;t shield that, then if someone uses the BodyContentHandler, then they might not see contents from the second/third parser because the initial parser &quot;ended&quot; the document.  I need to test this concern, but I think that this was the root of &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1124&quot; title=&quot;Nested documents not extracted if a PDF file is in the chain&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1124&quot;&gt;&lt;del&gt;TIKA-1124&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14216444" author="gagravarr" created="Tue, 18 Nov 2014 17:12:35 +0000"  >&lt;p&gt;I think it&apos;s fairly common for people to have 4-5 parser services files, and whatever we do needs to accept that as a &quot;normal&quot; use case. Pretty much anyone depending on tika-parsers is going to have at least 2.&lt;/p&gt;

&lt;p&gt;Think of the case of&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;&quot;tika-parsers.jar:META-INF/services/org.apache.tika.parser.Parser&quot;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
org.apache.tika.parser.gdal.GDALParser
org.apache.tika.parser.html.HtmlParser
org.apache.tika.parser.image.ImageParser
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;&quot;my-tika-extension.jar:META-INF/services/org.apache.tika.parser.Parser&quot;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
com.example.tika.ocr.customocrparser
org.apache.tika.parser.image.ImageParser
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under your plan, given that the JVM could return the two service files to you in any order, how do you decide which of GDALParser or ImageParser goes second after the OCR one? In one parser file, Image comes first, in the other it&apos;s second. Which wins? How do we make it deterministic, and not just based on which jar the JVM spots first?&lt;/p&gt;</comment>
                            <comment id="14216451" author="chrismattmann" created="Tue, 18 Nov 2014 17:16:57 +0000"  >&lt;p&gt;Hey Guys, to be honest, the way I see that we solve the ServiceLoading problem is somehow to move away from it. Relying on the JVM to implicitly decide which parser to load based on ClassLoading is not scalable IMO. At worst, even capturing an ordered preference file that isn&apos;t ServiceLoading is 1000x better IMO than relying on the JVM and the classpath. We need somehow to bring this logic into Tika (still thinking about how and will try to prototype something). &lt;/p&gt;

&lt;p&gt;Further, as for the use case of 4-5 service files being common - I guess I&apos;m the outlier, b/c I&apos;ve never ever created or used more than the default one?&lt;/p&gt;</comment>
                            <comment id="14216466" author="gagravarr" created="Tue, 18 Nov 2014 17:31:23 +0000"  >&lt;p&gt;Anyone using tika-parser OOTB has two parsers services files - built-in and vorbis. Anyone adding a third party parser under a non-ASLv2 license off the wiki will get a third. Anyone adding their own custom parsers following the instructions on the website will get a few more. &lt;/p&gt;

&lt;p&gt;My hunch is that most users won&apos;t care at all about what order the parsers are asked &quot;hey, can you handle this file type&quot; in. My second hunch is that users who do care will typically only care about it for a handful of formats, eg &quot;for jpeg try ocr then image, everything else default is fine&quot;. &lt;/p&gt;

&lt;p&gt;We also need to support those users who currently say &quot;I don&apos;t care what you find on the classpath, I only ever want you to use these 5 parsers and in this explicit order I&apos;m passing you now&quot;&lt;/p&gt;

&lt;p&gt;I can describe the problem, but I&apos;m not sure on the right solution at this point...&lt;/p&gt;</comment>
                            <comment id="14216960" author="chrismattmann" created="Tue, 18 Nov 2014 22:44:03 +0000"  >&lt;p&gt;Hi Nick:&lt;/p&gt;

&lt;p&gt;I think we need to be careful to define &quot;users&quot;. In my case, &quot;users&quot; aren&apos;t developers (who I think you are talking about when discussing adding new parsers above). My users simply want metadata and parsing that currently are partitioned amongst multiple Parsers in Tika, for the same MIME/MediaType. I could make one &quot;super&quot; Parser that combines them together; use the services trick per class to declare priority parsers, or delegates, or whatever. I think a much more modular and thus more easily maintainable way would be to provide a mechanism in which we allow multiple Parsers to be called for the same MediaType and to fill the Metadata object and Content stream.&lt;/p&gt;

&lt;p&gt;That said, I don&apos;t have a solution yet, but I am trying to think of one. Glad to have the conversation with you guys here. It&apos;s a tough problem.&lt;/p&gt;</comment>
                            <comment id="14217100" author="lewismc" created="Wed, 19 Nov 2014 00:12:20 +0000"  >&lt;p&gt;We can run many extractors against one MediaType with Any23. In this case we produce triples output. In the case of Tika, if we were to start with a scenario where we were &lt;b&gt;just&lt;/b&gt; populating the Metadata container then I think it would be an excellent start.&lt;br/&gt;
I&apos;m going to investigate how we currently chain the extractors together in Any23 tonight and will make best efforts report it here. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=p_ansell&quot; class=&quot;user-hover&quot; rel=&quot;p_ansell&quot;&gt;Peter Ansell&lt;/a&gt; can maybe help out here as well as he has been influential in refactoring Any23 extractor behavior in the past.  &lt;/p&gt;</comment>
                            <comment id="14217407" author="lewismc" created="Wed, 19 Nov 2014 04:38:14 +0000"  >&lt;p&gt;OK so in Any23, if we were to take the following example where we are focusing on a &lt;b&gt;single document extraction&lt;/b&gt; e.g. (0) then it can be said that for any given document, when we run (1) the extraction we:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;from all registered extractors, filter the extractors by MimeType (2)&lt;/li&gt;
	&lt;li&gt;from all matching extractors for the given MimeType, create the extractor (3)&lt;/li&gt;
	&lt;li&gt;loop through the matching extractors and actually run (4) each extractor on the local document source as an InputStream (5) for instance.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We also have an Extraction Content and Extraction Reporting layers within Any23 which may be of use to Tika. To be honest I find the reports and context objects extremely useful for obtaining metrics from extraction... maybe we could do the same for Tika?&lt;/p&gt;

&lt;p&gt;There are some improvements which can be made to SingleDocumentExtraction within Any23 however that conversation is not relevant here. Hopefully the high level overview of the chaining extraction algorithm within Any23 is of some value to this conversation.&lt;/p&gt;

&lt;p&gt;(0) &lt;a href=&quot;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java&lt;/a&gt;&lt;br/&gt;
(1) &lt;a href=&quot;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L205&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L205&lt;/a&gt;&lt;br/&gt;
(2) &lt;a href=&quot;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L223&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L223&lt;/a&gt;&lt;br/&gt;
(3) &lt;a href=&quot;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L252&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L252&lt;/a&gt;&lt;br/&gt;
(4) &lt;a href=&quot;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L440&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L440&lt;/a&gt;&lt;br/&gt;
(5) &lt;a href=&quot;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L465&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/SingleDocumentExtraction.java#L465&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14217409" author="lewismc" created="Wed, 19 Nov 2014 04:40:43 +0000"  >&lt;p&gt;One final thing to mention is that &lt;b&gt;every&lt;/b&gt; Extractor within Any23 is accompanied by an ExtractorFactory e.g.&lt;br/&gt;
&lt;a href=&quot;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/csv/CSVExtractor.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/csv/CSVExtractor.java&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/csv/CSVExtractorFactory.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/csv/CSVExtractorFactory.java&lt;/a&gt;&lt;br/&gt;
This is where &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=p_ansell&quot; class=&quot;user-hover&quot; rel=&quot;p_ansell&quot;&gt;Peter Ansell&lt;/a&gt; performed some magic within his work in refactoring some code in Any23.&lt;/p&gt;</comment>
                            <comment id="14217685" author="davemeikle" created="Wed, 19 Nov 2014 10:21:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hey Guys, to be honest, the way I see that we solve the ServiceLoading problem is somehow to move away from it. Relying on the JVM to implicitly decide which parser to load based on ClassLoading is not scalable IMO. At worst, even capturing an ordered preference file that isn&apos;t ServiceLoading is 1000x better IMO than relying on the JVM and the classpath. We need somehow to bring this logic into Tika (still thinking about how and will try to prototype something).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 - I think this is example of something we will probably hit more and more as we further extend Tika, i.e. wanting multiple parsers to have an interest in and then parse content of the same mime type, and moving away from using the re-ordering approach seems like the only way to go here.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ServiceLoading&lt;/em&gt; per se is not a problem, indeed this is a nice way to make it simple for external providers to be added, but I think we need to think about Parsers in a pipeline and allow users to customise the parsers that participate in the pipeline through positive exclusions via config.&lt;/p&gt;

&lt;p&gt;The above is a big change and I think if we went with something like this would need to be a 2.X of Tika. &lt;/p&gt;

&lt;p&gt;I suspect the problem with clashing Metadata entries is not really there, as most parsers look for different keys, or in cases where they process commons ones (e.g. title, size, description, etc) they should hopefully be getting the same value anyway.  IMO I think we could send the same Metadata object through the &apos;pipeline&apos;, adding any unique new value in for a key.&lt;/p&gt;

&lt;p&gt;Will join the party and try to flesh out thoughts on a branch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;3) It is a good idea to identify which parser produced each content with a &amp;lt;div&amp;gt; tag.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 - this will be really helpful.&lt;/p&gt;</comment>
                            <comment id="14217965" author="tallison@mitre.org" created="Wed, 19 Nov 2014 14:38:53 +0000"  >&lt;p&gt;How about using the order of parsers as specified in TikaConfig?  That should accommodate 6 class files in different jars, no?&lt;/p&gt;

&lt;p&gt;Via TikaConfig, we could also specify the which subclass of a default composite parser to use.  I now see at least three use cases:&lt;br/&gt;
1) Tika classic: pick the first parser that applies and hope that it is the one you meant, ignore the others. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
2) The use case we&apos;ve been discussing, where each parser is additive.&lt;br/&gt;
3) A BackOffOnExceptionParser (&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1483&quot; title=&quot;Create a Latin1 charset raw string parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1483&quot;&gt;&lt;del&gt;TIKA-1483&lt;/del&gt;&lt;/a&gt; got me thinking about this)&lt;/p&gt;

&lt;p&gt;Wait, for Tika 2.0, couldn&apos;t we do all the class loading from TikaConfig?  We could also get rid of our one-off parser config hacks (like Solr):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    &amp;lt;parser class=&quot;org.apache.tika.parser.audio.AudioParser&quot;&amp;gt;
      &amp;lt;params&amp;gt;
        &amp;lt;int name=&quot;someparam1&quot;&amp;gt;2&amp;lt;/int&amp;gt;
        &amp;lt;str name=&quot;someOtherParam2&quot;&amp;gt;something or other&amp;lt;/str&amp;gt;
      &amp;lt;/params&amp;gt;
      &amp;lt;mime&amp;gt;audio/basic&amp;lt;/mime&amp;gt;
      &amp;lt;mime&amp;gt;audio/x-aiff&amp;lt;/mime&amp;gt;
      &amp;lt;mime&amp;gt;audio/x-wav&amp;lt;/mime&amp;gt;
    &amp;lt;/parser&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could specify a ChainingParser on the fly via config:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    &amp;lt;parser class=&quot;org.apache.tika.parser.ChainingParser&quot; name=&quot;MyOCRAndMetadataParser&quot;&amp;gt;
      &amp;lt;childparser&amp;gt;org.apache.tika.parser.jpeg.JPegParser&amp;lt;/childparser&amp;gt;
      &amp;lt;childparser&amp;gt;...&amp;lt;/childparser&amp;gt;
      &amp;lt;childparser&amp;gt;...&amp;lt;/childparser&amp;gt;
      &amp;lt;childparser&amp;gt;org.apache.tika.parser.ocr.TesseractOCR&amp;lt;/childparser&amp;gt;

      &amp;lt;mime&amp;gt;image/bmp&amp;lt;/mime&amp;gt;
      &amp;lt;mime&amp;gt;image/gif&amp;lt;/mime&amp;gt;
      &amp;lt;mime&amp;gt;image/png&amp;lt;/mime&amp;gt;
      &amp;lt;mime&amp;gt;image/vnd.wap.wbmp&amp;lt;/mime&amp;gt;
      &amp;lt;mime&amp;gt;image/x-icon&amp;lt;/mime&amp;gt;
      &amp;lt;mime&amp;gt;image/x-ms-bmp&amp;lt;/mime&amp;gt;
      &amp;lt;mime&amp;gt;image/x-xcf&amp;lt;/mime&amp;gt;

    &amp;lt;/parser&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14222510" author="gagravarr" created="Sun, 23 Nov 2014 21:35:08 +0000"  >&lt;p&gt;I quite like Tim&apos;s idea. We can have things like &lt;tt&gt;TikaConfig.getDefaultConfig()&lt;/tt&gt;, &lt;tt&gt;TikaConfig.getMaxiumMetadataConfig()&lt;/tt&gt;, &lt;tt&gt;TikaConfig.getTryEachInTurnConfig()&lt;/tt&gt; etc. People with specific needs can either pass those in as options to a TikaConfig constructor, or they can provide a tika config xml file that lists their preferences, perhaps with an expanded syntax like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;parser class=&lt;span class=&quot;code-quote&quot;&gt;&quot;composite&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;childparser&amp;gt;org.apache.tika.parser.jpeg.JPegParser&amp;lt;/childparser&amp;gt;
  &amp;lt;childparser&amp;gt;...&amp;lt;/childparser&amp;gt;
  &amp;lt;childparser&amp;gt;...&amp;lt;/childparser&amp;gt;
  &amp;lt;childparser&amp;gt;org.apache.tika.parser.ocr.TesseractOCR&amp;lt;/childparser&amp;gt;
&amp;lt;/parser&amp;gt;
&amp;lt;parser class=&lt;span class=&quot;code-quote&quot;&gt;&quot;tryinturn&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;childparser&amp;gt;org.apache.tika.text&amp;lt;/childparser&amp;gt;
  &amp;lt;childparser&amp;gt;org.apache.tika.text.findtextstrings&amp;lt;/childparser&amp;gt;
&amp;lt;/parser&amp;gt;
&amp;lt;parser class=&lt;span class=&quot;code-quote&quot;&gt;&quot;defaultparser&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;exclude&amp;gt;org.apache.tika.netcdf&amp;lt;/exclude&amp;gt;
&amp;lt;/parser&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above slightly pseudocode example would try to merge all the image parsers output in turn, would for plain text try the normal parser then fall back to the talked-about &quot;bit like strings&quot; if that failed, and would use the default parser for everything else but excluding the netcdf parser&lt;/p&gt;</comment>
                            <comment id="14222512" author="chrismattmann" created="Sun, 23 Nov 2014 21:49:32 +0000"  >&lt;p&gt;Yep I like the idea too. Time to figure out how to implement and get some cycles to do so &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14252952" author="gagravarr" created="Fri, 19 Dec 2014 05:10:26 +0000"  >&lt;p&gt;For 1.7, how about we just have the Tesseract Parser call out to the &quot;normal&quot; image parser (as appropriate), so that you always get both ocr and metadata? (Hopefully very quick to do)&lt;/p&gt;

&lt;p&gt;Then for 1.8, we can implement the config as described above, without that blocking the 1.7 release&lt;/p&gt;</comment>
                            <comment id="14252956" author="tpalsulich" created="Fri, 19 Dec 2014 05:13:21 +0000"  >&lt;p&gt;+1, Nick. That sounds good to me. I&apos;ll implement it in the next couple days, if no one else does first.&lt;/p&gt;</comment>
                            <comment id="14252973" author="gagravarr" created="Fri, 19 Dec 2014 05:28:55 +0000"  >&lt;p&gt;In r1646624 I&apos;ve added what I think should do the trick for now. I don&apos;t have Tesseract installed to check though, could someone who does verify + update unit tests?&lt;/p&gt;</comment>
                            <comment id="14252985" author="hudson" created="Fri, 19 Dec 2014 05:41:40 +0000"  >&lt;p&gt;UNSTABLE: Integrated in tika-trunk-jdk1.7 #371 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/371/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/371/&lt;/a&gt;)&lt;br/&gt;
Temporary workaround for &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; for Tika 1.7 - always pass the image to the regular parser to get the metadata set. Will be replaced in 1.8 with composite parsers + user selected config with strategy (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1646624&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1646624&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14253009" author="hudson" created="Fri, 19 Dec 2014 05:59:41 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.6 #355 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.6/355/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.6/355/&lt;/a&gt;)&lt;br/&gt;
Temporary workaround for &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; for Tika 1.7 - always pass the image to the regular parser to get the metadata set. Will be replaced in 1.8 with composite parsers + user selected config with strategy (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1646624&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1646624&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14253057" author="hudson" created="Fri, 19 Dec 2014 06:42:29 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #372 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/372/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/372/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; - Allow you to exclude certain mimetypes from a parser that would otherwise handle them, in your Tika Config xml (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1646626&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1646626&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/parser/CompositeParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/parser/ParserDecorator.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/test/resources/org/apache/tika/config/&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt;-default-except.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14253076" author="hudson" created="Fri, 19 Dec 2014 07:00:15 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.6 #356 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.6/356/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.6/356/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; - Allow you to exclude certain mimetypes from a parser that would otherwise handle them, in your Tika Config xml (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1646626&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1646626&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/parser/CompositeParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/parser/ParserDecorator.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/test/resources/org/apache/tika/config/&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt;-default-except.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14267101" author="tallison@mitre.org" created="Wed, 7 Jan 2015 01:06:01 +0000"  >&lt;p&gt;I&apos;m sorry that I haven&apos;t had a chance to kick the tires on the fix for this issue.  This may be a case of user error, perhaps I have to twiddle with the parser config file?&lt;/p&gt;

&lt;p&gt;I found that the current fix (with default configuration) is not pulling metadata from embedded image files in tika-trunk or tika-1.7-rc2.&lt;/p&gt;

&lt;p&gt;Test doc from govdocs1 attached.&lt;/p&gt;

&lt;p&gt;We should be extracting these values (at least) in the embedded tiff:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&quot;Data Precision&quot;:&quot;8 bits&quot;,&quot;Image Height&quot;:&quot;169 pixels&quot;,&quot;Image Width&quot;:&quot;752 pixels&quot;,&quot;Number of Components&quot;:&quot;3&quot;,&quot;Resolution Units&quot;:&quot;inch&quot;,&quot;X Resolution&quot;:&quot;300 dots&quot;,&quot;Y Resolution&quot;:&quot;300 dots&quot;,&quot;resourceName&quot;:&quot;image1.jpg&quot;,&quot;tiff:BitsPerSample&quot;:&quot;8&quot;,&quot;tiff:ImageLength&quot;:&quot;169&quot;,&quot;tiff:ImageWidth&quot;:&quot;752&quot;,&quot;tika.mime.file&quot;:&quot;image1.jpg&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="14267161" author="tallison@mitre.org" created="Wed, 7 Jan 2015 01:42:54 +0000"  >&lt;p&gt;Looking into this a bit more...we aren&apos;t even getting metadata out of regular images, for example, our testJPEG.jpg from tika-parser&apos;s test-documents yields no useful metadata with trunk, it looks like this isn&apos;t even being touched by the TesseractOCRParser:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Content-Length: 7686
Content-Type: image/jpeg
X-Parsed-By: org.apache.tika.parser.DefaultParser
resourceName: testJPEG.jpg
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, my apologies if I need to make modifications to our config...&lt;/p&gt;</comment>
                            <comment id="14267204" author="tallison@mitre.org" created="Wed, 7 Jan 2015 02:43:48 +0000"  >&lt;p&gt;There were two problems:&lt;/p&gt;

&lt;p&gt;1) This aborted before parsing the metadata if there is no Tesseract installed&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;if (!ExternalParser.check(checkCmd))
 return;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) The call to getSupportedTypes in the _TMP_X_PARSERs always returned false because of a conflict of class types.&lt;/p&gt;

&lt;p&gt;If this modification looks ok, I&apos;ll add a few more test cases and commit it.&lt;/p&gt;

&lt;p&gt;Side note:  In working on this I realized that both the ImageParser and the JpegParser support jpegs. On some files, one parser returns more info than the other and vice versa...another case of competing parsers! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14267553" author="gagravarr" created="Wed, 7 Jan 2015 11:51:01 +0000"  >&lt;p&gt;I wonder if it wouldn&apos;t be better to do the &quot;is tessaract there&quot; check in the `getSupportedTypes` method? That way, if tessaract can&apos;t be found, then the main composite parser (eg AutoDetectParser, if being used) would just skip over the Tessarct one, and fall back to the Jpeg or Image one as appropriate&lt;/p&gt;

&lt;p&gt;We could then do an additional check at parse time, in case of a direct call to the parser.&lt;/p&gt;

&lt;p&gt;I&apos;ll have a go at working that up shortly&lt;/p&gt;

&lt;p&gt;Oh, and the fallback parser you&apos;ve come up with looks much neater than mine &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14267584" author="gagravarr" created="Wed, 7 Jan 2015 12:41:53 +0000"  >&lt;p&gt;As of r1650051, I think we&apos;re correctly handling the case of tesseract not being installed falling back to the normal parsers, and calling the normal image parsers after tesseract is done. I&apos;ve got a couple of unit tests that seem to show that&lt;/p&gt;

&lt;p&gt;Any chance you could add a unit test based on your govdocs word file, and check that it&apos;s working correctly for embedded images as well?&lt;/p&gt;</comment>
                            <comment id="14267586" author="hudson" created="Wed, 7 Jan 2015 12:43:12 +0000"  >&lt;p&gt;UNSTABLE: Integrated in tika-trunk-jdk1.7 #411 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/411/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/411/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; Unit test to check a JPEG via Tesseract gets both OCR text and normal JPEG metadata (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650050&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650050&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/resources/test-documents/testOCR.jpg&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; Unit test to show that when an invalid tesseract config is given, and tesseract cannot be found, TesseractOCRParser will return no types and will not be selected by DefaultParser (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650046&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650046&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;br/&gt;
Cleaner workaround parser call from Tim Allison from &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650045&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650045&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; If Tesseract isn&apos;t available, don&apos;t offer any supported mime types, so the parser avoids being picked by DefaultParser or similar (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650044&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650044&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14267597" author="hudson" created="Wed, 7 Jan 2015 13:00:59 +0000"  >&lt;p&gt;UNSTABLE: Integrated in tika-trunk-jdk1.6 #396 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.6/396/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.6/396/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; Use assertContains, and fix a problem with the ForkParser integration tests (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650051&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650051&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; Unit test to check a JPEG via Tesseract gets both OCR text and normal JPEG metadata (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650050&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650050&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/resources/test-documents/testOCR.jpg&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; Unit test to show that when an invalid tesseract config is given, and tesseract cannot be found, TesseractOCRParser will return no types and will not be selected by DefaultParser (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650046&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650046&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;br/&gt;
Cleaner workaround parser call from Tim Allison from &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650045&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650045&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; If Tesseract isn&apos;t available, don&apos;t offer any supported mime types, so the parser avoids being picked by DefaultParser or similar (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650044&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650044&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14267618" author="tallison@mitre.org" created="Wed, 7 Jan 2015 13:23:13 +0000"  >&lt;p&gt;Yes, that&apos;s a great idea.  I was disturbed by the current plan of making a system call for every image file if Tesseract is not installed; I was thinking of a static check, but your solution is far cleaner.&lt;/p&gt;

&lt;p&gt;The patch I submitted last night caused the integrated ForkParser tests to fail: class loading issues.  So, I now have a slightly more manual hack class that borrows from CompositeParser.&lt;/p&gt;

&lt;p&gt;Instead of the govdocs1 doc, I&apos;ll add tests based on our current test docs in the next 8 hours or so.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tpalsulich&quot; class=&quot;user-hover&quot; rel=&quot;tpalsulich&quot;&gt;Tyler Palsulich&lt;/a&gt;, after I add those tests, would you mind testing with Tesseract installed?  I don&apos;t have it installed, and IIRC, I don&apos;t think Nick does either...&lt;/p&gt;</comment>
                            <comment id="14267626" author="hudson" created="Wed, 7 Jan 2015 13:44:13 +0000"  >&lt;p&gt;UNSTABLE: Integrated in tika-trunk-jdk1.7 #412 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/412/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/412/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; Use assertContains, and fix a problem with the ForkParser integration tests (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650051&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650051&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14267643" author="gagravarr" created="Wed, 7 Jan 2015 13:53:10 +0000"  >&lt;p&gt;Ah, true, I hadn&apos;t thought so much about the system call each time. I guess the only thing we need to cache is tesseract path -&amp;gt; yes/no - you could pass in different config objects with different paths. Maybe we do a quick bit of caching based on that, and use that to avoid the extra calls?&lt;/p&gt;

&lt;p&gt;Oh, and I do have tesseract installed now, I installed it to help &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14267688" author="hudson" created="Wed, 7 Jan 2015 14:43:12 +0000"  >&lt;p&gt;UNSTABLE: Integrated in tika-trunk-jdk1.7 #413 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/413/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/413/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; Cache if Tesseract is present at a given path or not (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650067&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650067&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14267714" author="hudson" created="Wed, 7 Jan 2015 15:03:06 +0000"  >&lt;p&gt;UNSTABLE: Integrated in tika-trunk-jdk1.6 #397 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.6/397/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.6/397/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt; Cache if Tesseract is present at a given path or not (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650067&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650067&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14267724" author="tallison@mitre.org" created="Wed, 7 Jan 2015 15:14:39 +0000"  >&lt;p&gt;Not to repeat Jenkins, well, apologies for repeating Jenkins...I&apos;m getting a failure with the ForkParser tests now in BundleIT: can&apos;t find ExternalParser class.&lt;/p&gt;

&lt;p&gt;Once trunk is back to stable, I&apos;ll add in the extra tests.&lt;/p&gt;</comment>
                            <comment id="14267756" author="gagravarr" created="Wed, 7 Jan 2015 15:32:46 +0000"  >&lt;p&gt;I&apos;ve no idea why the fork parser is failing when run under osgi. It looks like it isn&apos;t send the parser related classes from tika-core over (eg external parser)&lt;/p&gt;

&lt;p&gt;I&apos;ve put in a hacky workaround in r1650083, and raised a new issue for it - &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1507&quot; title=&quot;Under OSGi, ForkParser failes to send core parser classes like ExternalParser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1507&quot;&gt;TIKA-1507&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14267766" author="tallison@mitre.org" created="Wed, 7 Jan 2015 15:39:04 +0000"  >&lt;p&gt;Y, and why did the tests work before and how does it work without tika-core?!?  I don&apos;t see how recent changes are now causing this failure, either. Argh...&lt;/p&gt;</comment>
                            <comment id="14267773" author="gagravarr" created="Wed, 7 Jan 2015 15:43:23 +0000"  >&lt;p&gt;The only other parser that uses ExternalParser is gdal, and I&apos;m guessing that that doesn&apos;t get touched by the OSGi fork test...&lt;/p&gt;</comment>
                            <comment id="14267786" author="lfcnassif" created="Wed, 7 Jan 2015 15:52:15 +0000"  >&lt;p&gt;It is not related directly to this issue, but I think the user should be able at least to disable the ocr parsing even if tesseract is installed, in the config object. It is a very slow task and the user could choose to not run it over all images.&lt;/p&gt;</comment>
                            <comment id="14267792" author="gagravarr" created="Wed, 7 Jan 2015 15:55:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lfcnassif&quot; class=&quot;user-hover&quot; rel=&quot;lfcnassif&quot;&gt;Luis Filipe Nassif&lt;/a&gt; Longer term we&apos;ll have different config objects that let you pick what you want - see &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445?focusedCommentId=14222510&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14222510&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;this comment&lt;/a&gt; for one possible plan&lt;/p&gt;

&lt;p&gt;Short term, just pass in an ocr config to the parser context with an invalid path on it, as one of the unit tests does&lt;/p&gt;</comment>
                            <comment id="14267840" author="tallison@mitre.org" created="Wed, 7 Jan 2015 16:36:37 +0000"  >&lt;p&gt;Fixed the tika-server test failure with r1650111.&lt;/p&gt;

&lt;p&gt;Going to add mods to TesseractOCRParserTest&lt;/p&gt;</comment>
                            <comment id="14267854" author="tallison@mitre.org" created="Wed, 7 Jan 2015 16:49:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;, see if you have success with r1650117.  I don&apos;t have Tesseract installed, so it&apos;ll be good to see if the tests pass with it installed.&lt;/p&gt;</comment>
                            <comment id="14267871" author="hudson" created="Wed, 7 Jan 2015 17:04:51 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.6 #399 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.6/399/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.6/399/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt;: add tests to TesseractOCRParserTest to ensure metadata is extracted (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650117&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650117&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt;: need to fix TikaMimeTypesTest in tika-server to accomodate two options for parser (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650111&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650111&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-server/src/test/java/org/apache/tika/server/TikaMimeTypesTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14267879" author="tpalsulich" created="Wed, 7 Jan 2015 17:10:41 +0000"  >&lt;p&gt;All tests pass with and without Tesseract installed on my computer (Java 1.7, Ubuntu 14.04, Tesseract 3.03).&lt;/p&gt;</comment>
                            <comment id="14267892" author="tallison@mitre.org" created="Wed, 7 Jan 2015 17:18:02 +0000"  >&lt;p&gt;Thank you!  Do you mind doing a quick code review of TesseractOCRParserTest?  I made a number of mods...&lt;/p&gt;</comment>
                            <comment id="14267934" author="hudson" created="Wed, 7 Jan 2015 17:44:11 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #415 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/415/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/415/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt;: add tests to TesseractOCRParserTest to ensure metadata is extracted (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650117&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650117&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt;: need to fix TikaMimeTypesTest in tika-server to accomodate two options for parser (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650111&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650111&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-server/src/test/java/org/apache/tika/server/TikaMimeTypesTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14268003" author="hudson" created="Wed, 7 Jan 2015 18:43:20 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #416 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/416/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/416/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt;. Split TesseractOCRParser#offersNoTypesIfNotFound in two. Small import and comment changes. (tpalsulich: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650133&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650133&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14268006" author="tpalsulich" created="Wed, 7 Jan 2015 18:44:52 +0000"  >&lt;p&gt;Done. I made some small changes and split one of the tests in two. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@apache.org&quot;&gt;Tim Allison&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;, or anyone else, any more changes/features needed for this issue/1.7? It looks like we grab normal metadata regardless of whether or not Tesseract is installed.&lt;/p&gt;</comment>
                            <comment id="14268021" author="hudson" created="Wed, 7 Jan 2015 19:04:00 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.6 #401 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.6/401/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.6/401/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1445&quot; title=&quot;Figure out how to add Image metadata extraction to Tesseract parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1445&quot;&gt;&lt;del&gt;TIKA-1445&lt;/del&gt;&lt;/a&gt;. Split TesseractOCRParser#offersNoTypesIfNotFound in two. Small import and comment changes. (tpalsulich: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650133&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1650133&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14269454" author="tallison@mitre.org" created="Thu, 8 Jan 2015 15:42:57 +0000"  >&lt;p&gt;I&apos;ll have time to rerun trunk against govdocs1 and compare with 1.6 by tomorrow (January 9) 10am EST.  If the community is willing to wait a day, let&apos;s hold off.  Another day might also allow others to identify small issues (similar to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=davemeikle&quot; class=&quot;user-hover&quot; rel=&quot;davemeikle&quot;&gt;Dave Meikle&lt;/a&gt;&apos;s recent find).&lt;/p&gt;</comment>
                            <comment id="14269523" author="tpalsulich" created="Thu, 8 Jan 2015 16:39:49 +0000"  >&lt;p&gt;Works for me!&lt;/p&gt;</comment>
                            <comment id="14269759" author="tallison@mitre.org" created="Thu, 8 Jan 2015 17:56:25 +0000"  >&lt;p&gt;I think we can call this resolved for now?&lt;/p&gt;

&lt;p&gt;Many, many thanks to the collaboration on this one, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tpalsulich&quot; class=&quot;user-hover&quot; rel=&quot;tpalsulich&quot;&gt;Tyler Palsulich&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=chrismattmann&quot; class=&quot;user-hover&quot; rel=&quot;chrismattmann&quot;&gt;Chris A. Mattmann&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;!&lt;/p&gt;</comment>
                            <comment id="14269765" author="gagravarr" created="Thu, 8 Jan 2015 17:58:15 +0000"  >&lt;p&gt;If we&apos;re going to close this for 1.7, then we need to pull out the &quot;composite parser with strategy of what available parsers / parser combinations to use&quot; as a new task for 1.8&lt;/p&gt;

&lt;p&gt;Then we need to come up with some better names for the strategies &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14269768" author="tallison@mitre.org" created="Thu, 8 Jan 2015 17:59:53 +0000"  >&lt;p&gt;Completely agree! Opening new issues now.&lt;/p&gt;</comment>
                            <comment id="14269800" author="tpalsulich" created="Thu, 8 Jan 2015 18:18:28 +0000"  >&lt;p&gt;Thanks guys! &lt;span class=&quot;error&quot;&gt;&amp;#91;~tallison&amp;#93;&lt;/span&gt;, let me know once you finish running against govdocs  and I&apos;ll roll a new RC.&lt;/p&gt;</comment>
                            <comment id="14271201" author="tallison@mitre.org" created="Fri, 9 Jan 2015 15:41:02 +0000"  >&lt;p&gt;No major problems found via quick and dirty govdocs1 eval.  &lt;/p&gt;

&lt;p&gt;Let&apos;s roll!&lt;/p&gt;


&lt;p&gt;Better:&lt;br/&gt;
Fewer pdf exceptions, better pdf text extraction (thank you, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tilman&quot; class=&quot;user-hover&quot; rel=&quot;tilman&quot;&gt;Tilman Hausherr&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;&quot;fixed exceptions&quot;: 2426 xls, 895 ppt, 158 pdf, 17 pps and 5 doc &lt;/p&gt;

&lt;p&gt;Note: &quot;fixed exceptions&quot; for xls are driven entirely by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;&apos;s addition of parsing for xls .4.  Thank you, Nick!!!&lt;/p&gt;

&lt;p&gt;More attachments for 27 pdf and 1 doc&lt;/p&gt;

&lt;p&gt;More metadata values for all comparable file pairs (no exceptions, = number of attachments)&lt;/p&gt;

&lt;p&gt;Areas for investigation:&lt;br/&gt;
&quot;new exceptions&quot; 27 xls&lt;br/&gt;
173 exceptions for newly added parsing of vnd.ms.excel.sheet.3&lt;br/&gt;
Fewer attachments for 19 ppt, 6 doc and 1 rtf&lt;br/&gt;
Permanent hangs/oom. These numbers differ by run because of multi-threading, but we went from 4 to 3.&lt;/p&gt;


&lt;p&gt;I&apos;ll follow up with investigation of these issues and open appropriate tickets next week.&lt;/p&gt;</comment>
                            <comment id="14271266" author="tallison@mitre.org" created="Fri, 9 Jan 2015 15:48:17 +0000"  >&lt;p&gt;Might have been neater, but you figured out how to get it to actually work with MimeTypesRegistry etc in integrated ForkParser tests! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I really like the caching strategy to prevent the use of the parser if Tesseract isn&apos;t installed.  Thank you!&lt;/p&gt;</comment>
                            <comment id="14271599" author="gagravarr" created="Fri, 9 Jan 2015 17:53:47 +0000"  >&lt;p&gt;Please open a ticket for the excel 3 issue, and if you can, share a small file that shows it. The Excel 3 support was written from reading the OpenOffice provided spec document, and a bit of guessing, in the absence of any test files...&lt;/p&gt;</comment>
                            <comment id="14272570" author="chrismattmann" created="Sat, 10 Jan 2015 16:19:19 +0000"  >&lt;p&gt;yeesh, caught up on all this great work. Awesome job guys.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12765816">TIKA-1508</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12765818">TIKA-1509</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12742999">TIKA-1422</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12776682">SOLR-7139</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12690460" name="000003.doc" size="55808" author="tallison@mitre.org" created="Wed, 7 Jan 2015 01:06:01 +0000"/>
                            <attachment id="12674421" name="TIKA-1445.Mattmann.101214.patch.txt" size="1282" author="chrismattmann" created="Sun, 12 Oct 2014 17:37:48 +0100"/>
                            <attachment id="12677207" name="TIKA-1445.Palsulich.102614.patch" size="5429" author="tpalsulich" created="Sun, 26 Oct 2014 21:28:19 +0000"/>
                            <attachment id="12690482" name="TIKA-1445_20150106_tallison.patch" size="3735" author="tallison@mitre.org" created="Wed, 7 Jan 2015 02:43:48 +0000"/>
                            <attachment id="12677369" name="TIKA-1445_tallison_20141027.patch.txt" size="12864" author="tallison@mitre.org" created="Mon, 27 Oct 2014 19:04:41 +0000"/>
                            <attachment id="12677489" name="TIKA-1445_tallison_v2_20141027.patch" size="27051" author="tallison@mitre.org" created="Tue, 28 Oct 2014 01:39:54 +0000"/>
                            <attachment id="12677895" name="TIKA-1445_tallison_v3_20141027.patch" size="22125" author="tallison@mitre.org" created="Wed, 29 Oct 2014 15:18:39 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 13 Oct 2014 08:57:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzuy4f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>