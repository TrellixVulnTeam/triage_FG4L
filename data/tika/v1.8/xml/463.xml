<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:35:20 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-463/TIKA-463.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-463] HtmlParser doesn&apos;t extract links from img, map, object, frame, iframe, area, link</title>
                <link>https://issues.apache.org/jira/browse/TIKA-463</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;All of the listed HTML elements can have URLs as attributes, and thus we&apos;d want to extract those links, if possible.&lt;/p&gt;

&lt;p&gt;For elements that aren&apos;t valid as XHTML 1.0, there might be some challenges in the right way to handle this.&lt;/p&gt;

&lt;p&gt;But if XHTML 1.0 means the union of &quot;transitional and frameset&quot; variants, then all of the above are valid, and thus should be emitted by the parser,&lt;/p&gt;</description>
                <environment></environment>
        <key id="12469102">TIKA-463</key>
            <summary>HtmlParser doesn&apos;t extract links from img, map, object, frame, iframe, area, link</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kkrugler">Ken Krugler</assignee>
                                    <reporter username="kkrugler">Ken Krugler</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 Jul 2010 21:15:44 +0100</created>
                <updated>Thu, 2 May 2013 03:29:30 +0100</updated>
                            <resolved>Tue, 17 Aug 2010 16:06:15 +0100</resolved>
                                                    <fixVersion>0.8</fixVersion>
                                    <component>parser</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12887515" author="kkrugler" created="Mon, 12 Jul 2010 21:47:25 +0100"  >&lt;p&gt;After looking at this a bit more, it seems like the main issue is whether the default behavior should be to return all valid XHTML 1.0 strict elements, or only those that can have text inside.&lt;/p&gt;

&lt;p&gt;The latter behavior is what&apos;s currently implemented.&lt;/p&gt;

&lt;p&gt;I can see arguments both ways. Returning (for example) an &amp;lt;img&amp;gt; element would remove some unpleasant surprises from users of Tika (like Nutch) that assume they&apos;re getting back all of the &quot;important&quot; HTML elements, but it would mean extra elements being generated that have no text, for the typical Tika user who only cares about text.&lt;/p&gt;

&lt;p&gt;I&apos;m leaning towards (a) creating a LinksHtmlMapper that handles all of the potentially link containing elements, and (b) modifying the HtmlMapper interface to support proper resolution of relative URLs. This would move code from HtmlHandler.startElement (what currently handles the &quot;a&quot; element) into HtmlMapper. Not sure if I can also then change HtmlMapper into an abstract base class that supports relative link handling, and has a constructor that takes in enough context to provide for this.&lt;/p&gt;

&lt;p&gt;I&apos;m going to wait a bit for comments.&lt;/p&gt;</comment>
                            <comment id="12887523" author="kkrugler" created="Mon, 12 Jul 2010 21:57:01 +0100"  >&lt;p&gt;The other issue I&apos;ve run into with HtmlMapper is that it seems impossible currently to have it do the right thing for remapping URLs, even if I create my own custom implementation of that interface.&lt;/p&gt;

&lt;p&gt;The problem is that you specify the mapper via ParseContext(HtmlMapper.class, my-custom-code.class). So this means my-custom-code gets instantiated via a no-args constructor, and it doesn&apos;t have access to the metadata, so it doesn&apos;t know the base URL to use for normalizing URLs.&lt;/p&gt;

&lt;p&gt;If I could, I&apos;d change HtmlParser to be an abstract class, and have a constructor that takes Metadata and ParseContext arguments. And give it a &quot;resolveUrl()&quot; method that the mapSafeAttribute() method could use, versus baking that into HtmlHandler.&lt;/p&gt;</comment>
                            <comment id="12887716" author="jnioche" created="Tue, 13 Jul 2010 12:25:14 +0100"  >&lt;p&gt;creating a LinksHtmlMapper : +1, that would be a nice intermediate between the default mapper and the identity mapper &lt;/p&gt;

&lt;p&gt;handling of links in mapper : mapSafeAttribute() returns a normalised representation of the attribute names that are allowed but does not affect the value of the attributes. Maybe we should change the method so that it returns BOTH the normalised name (or null of the attribute must be skipped) and the corresponding normalised value (e.g. the resolved URL) given a name/value couple. The mapper implementation could then manage the resolution of the URLs internally. This would also be useful for normalising the names and values of elements in the header such as http-equiv.&lt;/p&gt;

&lt;p&gt;HtmlParser as an abstract class : what about following Jukka&apos;s suggestion for Handlers in &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-458&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/TIKA-458&lt;/a&gt; and have a Factory?&lt;/p&gt;

&lt;p&gt;As for frames, it raises another issue (see &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-457&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/TIKA-457&lt;/a&gt;) which is that anything outside &amp;lt;body&amp;gt; and &amp;lt;head&amp;gt; is currently discarded by the HTMLMapper. This is why I considered doing &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-458&quot; title=&quot;Specify HTMLHandler via Context&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-458&quot;&gt;&lt;del&gt;TIKA-458&lt;/del&gt;&lt;/a&gt; but maybe we could make the HTMLHandler more generic and delegate the decisions to the Mappers e.g. by adding a method isBody(). &lt;/p&gt;

&lt;p&gt;The body level is currently used to : &lt;br/&gt;
a) distinguish the elements in the header&lt;br/&gt;
b) determine where characters should be added to the text of the document&lt;/p&gt;

&lt;p&gt;Do we really need (a)? Are elements such as LINK, BASE or META found anywhere outside the HEAD? Should mapSafeElement() take into account the path of an element as well e.g. to allow a &amp;lt;link&amp;gt; only if it has &amp;lt;head&amp;gt; for parent?&lt;/p&gt;

</comment>
                            <comment id="12889783" author="jnioche" created="Mon, 19 Jul 2010 09:14:27 +0100"  >&lt;p&gt;Patch which implements some of the ideas described in this issue. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HTMLMapper is an abstract class with a constructor HtmlMapper(Metadata metadata, ParseContext context)&lt;/li&gt;
	&lt;li&gt;all extensions of HtmlMapper can access the metadata and context&lt;/li&gt;
	&lt;li&gt;HTMLMapper implements the method resolve(String url)&lt;/li&gt;
	&lt;li&gt;Created a LinksHtmlMapper which extends DefaultHtmlMapper&lt;/li&gt;
	&lt;li&gt;HtmlHandler.bodyLevel is used to restrict the propagation of characters() but not the elements&lt;/li&gt;
	&lt;li&gt;HtmlHandler has a variable inHead to separate the treatment of elements in the header from the rest (don&apos;t know if this is really needed but that&apos;s how it is done now)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Note that : &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HTMLMapper.resolve() is currently called from the HtmlHandler&lt;/li&gt;
	&lt;li&gt;the signatures of the mapper methods have not been changed&lt;/li&gt;
	&lt;li&gt;custom processing of some elements (A, BASE, LINK, ...) is still done in the HtmlHandler and not in the mapper&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This patch passes the tests. &lt;/p&gt;
</comment>
                            <comment id="12890001" author="kkrugler" created="Mon, 19 Jul 2010 21:20:39 +0100"  >&lt;p&gt;Hi Julien,&lt;/p&gt;

&lt;p&gt;Thanks for the patch! I&apos;m on vacation, but will review it when I&apos;m back.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Ken&lt;/p&gt;</comment>
                            <comment id="12890158" author="chrismattmann" created="Tue, 20 Jul 2010 03:50:05 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;classify the component&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12892845" author="kkrugler" created="Tue, 27 Jul 2010 17:44:04 +0100"  >&lt;p&gt;Logging some notes I made on different attributes used for URLs, based on element name:&lt;/p&gt;

&lt;p&gt;attribute - elements&lt;/p&gt;

&lt;p&gt;href - base, link, a, area&lt;br/&gt;
src - script, img, input&lt;br/&gt;
cite - blockquote, q, ins, del&lt;br/&gt;
data - object&lt;br/&gt;
longdesc - img&lt;br/&gt;
usemap - img, input&lt;/p&gt;</comment>
                            <comment id="12892958" author="jnioche" created="Tue, 27 Jul 2010 23:12:09 +0100"  >&lt;p&gt;Am very tempted to push things one step further and delegate the startElement() and endElement() to the mappers so that users can do whatever they fancy in their custom mapper implementations. In that case we&apos;d probably not need mapSafeElement and mapSafeAttribute any longer. The patch above gives the mappers access to the metadata.&lt;/p&gt;

&lt;p&gt;For example, &amp;lt;a&amp;gt; have a special treatment in the HTMLHandler and we currently can&apos;t get the rel attribute in from &amp;lt;a href=&quot;http://www.nutch.org&quot; rel=&quot;nofollow&quot;&amp;gt;, which for a crawler is quite an embarrassment. Instead, by delegating the logic to the mappers we get total control on what can be done while at the same time remain able to keep the existing behaviour by default. &lt;/p&gt;

&lt;p&gt;Any reason not to delegate start/endElement to the mappers? It would be good to get some feedback on this, as I really need to improve the  handling of HTML for Nutch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12892996" author="kkrugler" created="Wed, 28 Jul 2010 01:09:21 +0100"  >&lt;p&gt;I like the idea of being able to encapsulate all special processing into one easily extensible class.&lt;/p&gt;

&lt;p&gt;I&apos;m trying to come to grips with what things should be done in HtmlParser vs. HtmlHandler vs. HtmlMapper.&lt;/p&gt;

&lt;p&gt;Since most of what we&apos;re talking about is moving code from HtmlHandler to HtmlMapper, I agree that trying to provide as much control as possible to HtmlMapper (which can be overridden) makes sense. But when I look at what would be left in HtmlHandler, it&apos;s not clear to me that we&apos;d even need that class anymore. But I&apos;d need to spend more time thinking about things like why HtmlHandler is subclassing TextContentHandler vs. DefaultHandler.&lt;/p&gt;

&lt;p&gt;In summary, it feels like we&apos;re heading down a path where HtmlHandler is the extension point (there is no HtmlMapper), and it should have some methods (beyond the std ContentHandler methods) that can be overridden to adjust behavior. Otherwise it would be this very thin shim, without much value, that just adds complexity to the calling chain.&lt;/p&gt;
</comment>
                            <comment id="12897998" author="kkrugler" created="Fri, 13 Aug 2010 00:16:31 +0100"  >&lt;p&gt;Simple patch that does a few things...&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Clean up mapping of tag names &amp;amp; attributes&lt;/li&gt;
	&lt;li&gt;Support for &amp;lt;img&amp;gt; element&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12898021" author="kkrugler" created="Fri, 13 Aug 2010 01:28:15 +0100"  >&lt;p&gt;I committed a change (985052) that will emit &amp;lt;img&amp;gt; elements with resolved src=&amp;lt;url&amp;gt; attributes. This gets me past a roadblock, so I&apos;m going to hold off a bit on any additional changes. I&apos;d like to do something more along the lines of what Julien is proposing, but it feels like too big of a bite for me right now.&lt;/p&gt;</comment>
                            <comment id="12898321" author="kkrugler" created="Fri, 13 Aug 2010 18:11:59 +0100"  >&lt;p&gt;Added support for &amp;lt;frame&amp;gt; elements in SVN 985288, which is the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-457&quot; title=&quot;HTMLParser gets an early &amp;lt;/body&amp;gt; event&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-457&quot;&gt;&lt;del&gt;TIKA-457&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12899019" author="kkrugler" created="Mon, 16 Aug 2010 19:32:19 +0100"  >&lt;p&gt;Fixed a problem with passing through null values from Metadata entries as &amp;lt;meta&amp;gt; elements, as this causes some SAX processing code to throw a NPE.&lt;/p&gt;

&lt;p&gt;Also improved the test for broken HTML with a &amp;lt;frameset&amp;gt; element inside of a &amp;lt;body&amp;gt; element.&lt;/p&gt;</comment>
                            <comment id="12899431" author="kkrugler" created="Tue, 17 Aug 2010 16:06:15 +0100"  >&lt;p&gt;SVN 986348. With this commit, i&apos;m going to resolve this issue. It&apos;s not perfect yet, but feels close enough for now. Issues I ran into and comments in general:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The &amp;lt;applet&amp;gt; element isn&apos;t supported, and can contain URLs&lt;/li&gt;
	&lt;li&gt;The &amp;lt;object&amp;gt; element has a codebase=&quot;xxx&quot; attribute that defines the base URL for the &quot;classid&quot; URL, but that isn&apos;t getting special handling.&lt;/li&gt;
	&lt;li&gt;The &amp;lt;object&amp;gt; element has a urllist=&quot;url, url&quot; attribute that can contain one or more space-separated URLs, but I&apos;m ignoring it.&lt;/li&gt;
	&lt;li&gt;The DefaultHtmlMapper doesn&apos;t pass through all valid XHTML 1.0 elements or their attributes, but that&apos;s a topic for another issue.&lt;/li&gt;
	&lt;li&gt;No checks are done for required attributes, or restrictions on values of attributes. For example, the &amp;lt;img&amp;gt; element must have an alt=&quot;xxx&quot; attribute.&lt;/li&gt;
	&lt;li&gt;TagSoup adds some of the required attributes, so you can now get output that has attributes (with default values) that didn&apos;t exist in the source HTML.&lt;/li&gt;
	&lt;li&gt;The HtmlParserTest code should be using XPath expressions to validate output, versus string patterns.&lt;/li&gt;
	&lt;li&gt;It would be good to use a validating parser (for XHTML 1.0) to double-check the output from all tests.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12899465" author="jnioche" created="Tue, 17 Aug 2010 17:52:40 +0100"  >&lt;p&gt;Look good. I must be missing something obvious but I can&apos;t work out where an element like META is sent to the XHTML output. Wasn&apos;t the case before as far as I can remember and this can&apos;t be in HtmlHandler as it imposes the constraints I described earlier i.e. it used to simply put the info in the metadata. Ken, would you mind giving me a hint?&lt;/p&gt;</comment>
                            <comment id="12899528" author="kkrugler" created="Tue, 17 Aug 2010 20:04:48 +0100"  >&lt;p&gt;Hi Julien,&lt;/p&gt;

&lt;p&gt;As per Jukka&apos;s suggestion, the XHTMLContentHandler puts everything it finds in metadata into the &amp;lt;head&amp;gt; block as &amp;lt;meta&amp;gt; elements. This way it also helps out non-HTML parsers.&lt;/p&gt;

&lt;p&gt;One issue this causes, though, is that it exposes an existing issue with how HtmlHandler treats the http-equiv meta tag. This gets mapped to a &amp;lt;meta name=&quot;Content-Type&quot; xxx&amp;gt; element, but you can also have an existing &amp;lt;meta name=&quot;content-type&quot; xxx&amp;gt; element. Makes me think we should treat metadata keys as case-insensitive, to avoid this issue. And/or remap &quot;well-known&quot; keys to their correct capitalization.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Ken&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12468725">TIKA-457</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12468821">TIKA-460</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12451969" name="TIKA-463-1.patch" size="7818" author="kkrugler" created="Fri, 13 Aug 2010 00:16:31 +0100"/>
                            <attachment id="12452195" name="TIKA-463-2.patch" size="9686" author="kkrugler" created="Mon, 16 Aug 2010 19:32:19 +0100"/>
                            <attachment id="12452285" name="TIKA-463-3.patch" size="13066" author="kkrugler" created="Tue, 17 Aug 2010 15:59:05 +0100"/>
                            <attachment id="12449812" name="TIKA-463.patch" size="21602" author="jnioche" created="Mon, 19 Jul 2010 09:14:27 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 13 Jul 2010 11:25:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4398</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxx3mv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16908</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>