<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:38:35 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-153/TIKA-153.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-153] Allow passing of files or memory buffers to parsers</title>
                <link>https://issues.apache.org/jira/browse/TIKA-153</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;Some of our parsers need to be able to go back and forth within a source document, so need either a file or (for smaller documents) an in-memory buffer that contains the full document. Currently we use temporary files for such cases, which in some cases means doing an extra copy of a file before it gets parsed. We should come up with some way for clients to pass in a file or a memory buffer if one is available.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12401296">TIKA-153</key>
            <summary>Allow passing of files or memory buffers to parsers</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jukkaz">Jukka Zitting</assignee>
                                    <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Wed, 30 Jul 2008 09:45:02 +0100</created>
                <updated>Thu, 20 Oct 2011 13:34:16 +0100</updated>
                            <resolved>Fri, 20 May 2011 23:58:31 +0100</resolved>
                                                    <fixVersion>0.10</fixVersion>
                                    <component>parser</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12663527" author="babak" created="Tue, 13 Jan 2009 23:05:01 +0000"  >&lt;p&gt;I suggest java.nio.FileChannel be used as the random access abstraction. This would allow implementations such as Skwish [ &lt;a href=&quot;http://skwish.sourceforge.net/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://skwish.sourceforge.net/&lt;/a&gt; ] be used as the source of a document.&lt;/p&gt;

&lt;p&gt;Ignoring certain of its niche capabilities (such as its map method), FileChannel, it turns out, allows one to slice and dice, construct filters (facades) in the same way java uses FilterInputStream and FilterOutputStream. As this idea is fleshed out a bit in skwish &lt;span class=&quot;error&quot;&gt;&amp;#91;see http://skwish.sourceforge.net/doc/com/faunos/util/io/package-summary.html &amp;#93;&lt;/span&gt;, thought I&apos;d share..&lt;/p&gt;

&lt;p&gt;-Babak&lt;/p&gt;</comment>
                            <comment id="12856653" author="jukkaz" created="Tue, 13 Apr 2010 23:13:53 +0100"  >&lt;p&gt;I have an idea on how to implement this...&lt;/p&gt;

&lt;p&gt;The current Tika APIs are already pretty good, and I&apos;d hate to complicate the clean Parser interface with extra methods for different kinds of inputs. Instead I&apos;m thinking of adding a TikaInputStream utility class that extends InputStream with methods that allow accessing the input document as a File.&lt;/p&gt;

&lt;p&gt;The TikaInputStream class would have at least the following construtors:&lt;/p&gt;

&lt;p&gt;    public TikaInputStream(InputStream stream) &lt;/p&gt;
{ ... }&lt;br/&gt;
    public TikaInputStream(File file) { ... }

&lt;p&gt;And would in addition to the standard InputStream methods provide at least the following:&lt;/p&gt;

&lt;p&gt;    public File getFile &lt;/p&gt;
{ ... }

&lt;p&gt;If the TikaInputStream instance was created from a normal InputStream, then the getFile() method would automatically copy the stream into a temporary file that&apos;ll get removed when the stream is closed.&lt;/p&gt;

&lt;p&gt;The Tika facade would always pass TikaInputStreams to the underlying parsers and we&apos;d recommend downstream projects to use this class also when directly accessing the Parser API, but doing so would not be necessary. Instead the TikaInputStream class would have a static method like the following that our parsers could access the extra functionality:&lt;/p&gt;

&lt;p&gt;    public static TikaInputStream getTikaInputStream(InputStream stream) {&lt;br/&gt;
        if (stream instanceof TikaInputStream) &lt;/p&gt;
{
            return (TikaInputStream) stream;
        }
&lt;p&gt; else &lt;/p&gt;
{
            return new TikaInputStream(stream);
        }
&lt;p&gt;    }&lt;/p&gt;</comment>
                            <comment id="12856660" author="chrismattmann" created="Tue, 13 Apr 2010 23:26:23 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The current Tika APIs are already pretty good, and I&apos;d hate to complicate the clean Parser interface with extra methods for different kinds of inputs. Instead I&apos;m thinking of adding a TikaInputStream utility class that extends InputStream with methods that allow accessing the input document as a File.&lt;/p&gt;

&lt;p&gt;The TikaInputStream class would have at least the following construtors:&lt;/p&gt;

&lt;p&gt;    public TikaInputStream(InputStream stream) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: { ... }&lt;/span&gt; &lt;p&gt;&lt;br/&gt;
    public TikaInputStream(File file) &lt;/p&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;+100!! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I could have used this for &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-400&quot; title=&quot;netCDF Tika Parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-400&quot;&gt;&lt;del&gt;TIKA-400&lt;/del&gt;&lt;/a&gt; since NetCDF expects (and only provides means) to deal with input as a File. This happens a lot where streaming doesn&apos;t make a lot of sense in data-intensive files with huge memory footprint...&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="13037140" author="jukkaz" created="Fri, 20 May 2011 23:58:31 +0100"  >&lt;p&gt;The TikaInputStream class is now in place and being used by many parsers. Resolving as fixed.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 13 Jan 2009 23:05:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4708</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxx5jj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>17217</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>