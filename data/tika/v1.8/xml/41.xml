<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:38:52 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-41/TIKA-41.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-41] Resource files occur twice in jar file.</title>
                <link>https://issues.apache.org/jira/browse/TIKA-41</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;The Tika and Mime config files occur in two places in the jar file.  This is because they are not stored in our src/test/resources directory tree in the same place that they need to be in the target/classes directory tree, and there is a copy directive in the POM file that copies the files to different directory.&lt;/p&gt;

&lt;p&gt;For example, tika-config.xml is in src/main/resources, but needs to go to target/class/org/apache/tika.  Maven automatically copies the files in src/main/resources to the same location in target/classes, so tika-config.xml is copied to target/classes.  Then, the copy directive in the POM file copies the file to target/classes/org/apache/tika.  So the file is copied twice.&lt;/p&gt;

&lt;p&gt;I recommend the following to fix this:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Move tika-config.xml to src/main/resources/org/apache/tika.&lt;/li&gt;
	&lt;li&gt;Move tika-mimetypes.xml to src/main/resources/org/apache/tika/mime.&lt;/li&gt;
	&lt;li&gt;Remove the copy directives for the above two from the POM file.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12379517">TIKA-41</key>
            <summary>Resource files occur twice in jar file.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jukkaz">Jukka Zitting</assignee>
                                    <reporter username="kbennett">Keith R. Bennett</reporter>
                        <labels>
                    </labels>
                <created>Tue, 2 Oct 2007 21:30:53 +0100</created>
                <updated>Fri, 22 May 2009 23:06:07 +0100</updated>
                            <resolved>Tue, 9 Oct 2007 00:23:28 +0100</resolved>
                                    <version>0.1-incubating</version>
                                    <fixVersion>0.1-incubating</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12531907" author="chrismattmann" created="Tue, 2 Oct 2007 21:38:52 +0100"  >&lt;p&gt;Hi Keith,&lt;/p&gt;

&lt;p&gt; I&apos;d like to get away from having to dictate where files go based on their runtime necessity &amp;#8211; I think we can do better than that, and have a cleaner separation of build-time source tree versus runtime jar file needs.&lt;/p&gt;

&lt;p&gt; Let&apos;s investigate whether or not there&apos;s a way in Maven to prevent it from copying src/main/resources to target/classes, or, alternatively, investigate a way to do a move rather than a copy of target/classes/tika-config.xml and target/classes/mime/tika-mimetypes.xml to target/classes/org/apache/tika and target/classes/org/apache/tika/mime, respectively.&lt;/p&gt;

&lt;p&gt;-1 for placing the files in their runtime directory required places.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
  Chris&lt;/p&gt;</comment>
                            <comment id="12532178" author="kbennett" created="Wed, 3 Oct 2007 18:59:33 +0100"  >&lt;p&gt;Chris -&lt;/p&gt;

&lt;p&gt;I understand what you&apos;re saying.  I think it&apos;s a question of balancing interests.&lt;/p&gt;

&lt;p&gt;On the one hand, we would like to put the files where they would go logically, according to the way we think of them.&lt;/p&gt;

&lt;p&gt;On the other hand, we assess the value of doing things the Maven way; convention over configuration.  One of the strengths of Maven is that you can look at any Maven project and, assuming the conventions are not overridden (as in our case), you can know where to find files (e.g. src/main/java), and where they will go in the jar file.  By putting the files in the directories where Maven can deal with them automatically, we reduce the amount of intervention on our part (special cases in the POM file), reduce the amount of learning required by new readers, and reduce the risk that somewhere along the way, an automated process that assumes Maven directory structures is thwarted.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Keith&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12532214" author="chrismattmann" created="Wed, 3 Oct 2007 20:37:53 +0100"  >&lt;p&gt;I&apos;m not sure I agree with your point Keith: just because Maven made &quot;guesses&quot; as to sensible defaults as to where to place resource files within a jar, that does not mean that&apos;s the quote-unquote standard place for things to go and deviation from that ruins the benefits that we receive from using maven. I&apos;ve seen numerous cases such as this &amp;#8211; in fact it&apos;s why frameworks like Maven are extensible in the first place. They recognize that they aren&apos;t the Oracle and don&apos;t know where everything should go across the board to meet people&apos;s needs. That&apos;s why we can change it.&lt;/p&gt;

&lt;p&gt;I think the benefit of keeping the files within CM within their logically correct place outweights the convenience of not having to understand the small customization of the POM file to get it to put the files where we want them. In addition, the separation of concerns between CM source tree layout and build layout is something that needs to be maintained. It allows both things to evolve independently over time, which is a great benefit.&lt;/p&gt;

&lt;p&gt;So, I&apos;m -1 for placing things in org/apache/tika, etc. within the src CM layout and for figuring out a way to add a command or two to the pom.xml file to place the files where we want them, and only 1x.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
  Chris&lt;/p&gt;</comment>
                            <comment id="12532607" author="jukkaz" created="Fri, 5 Oct 2007 10:17:19 +0100"  >&lt;p&gt;I don&apos;t think this is a Maven issue at all.&lt;/p&gt;

&lt;p&gt;The files need to be in org/apache/tika within the jar file, and I don&apos;t see why we should have them in some other place within src. To me the cleanest and simplest solution is to have a direct one-to-one mapping between the src tree and the resulting jar file entries. Otherwise you need to dig into the build script to find out where and how the files are being copied or moved around.&lt;/p&gt;</comment>
                            <comment id="12532676" author="chrismattmann" created="Fri, 5 Oct 2007 15:27:18 +0100"  >&lt;p&gt;&amp;gt; To me the cleanest and simplest solution is to have a direct one-to-one mapping between the src tree and the resulting jar file entries&lt;/p&gt;

&lt;p&gt;I am on the complete opposite end of the spectrum with this. If there should always be a 1-to-1 mapping between build and src, then why have jar files in the first place? Why not just compile class files directly into the directories that contain their source code and deliver that as the build time package?&lt;/p&gt;

&lt;p&gt;The reason to have decoupling between src and build structures is for independent evolution. It&apos;s to apply a filter on the things that exist in the source area, and the things that get delivered as part of the build. As an example of this, what if I wanted to drop an MS Word document containing some diagrams/figures for Tika in src/main/resources, because logically, to me, that&apos;s the place where that file should live in src (and subsequently CM). Now, when I go to build Tika, should this MS Word file be placed in the delivered jar file? IMO, the answer is no.&lt;/p&gt;

&lt;p&gt;Here we have a somewhat different, but also simliar issue, of config files that need to end up in some build-time location as a run-time dependency within the Tika jar file. Why do we have to mandate within the src tree in CM that this file (which  in some ways is just as much of a resource as that MS Word Tika document) be placed in its build-time location which is namespace delimited, and 3 levels deeper within the already deep enough directory hierarchy?&lt;/p&gt;

&lt;p&gt;So, anyways, I agree with one of your points, Jukka. The proposed method of placing those config files within org/apache/tika is definitely the simplest solution: I&apos;m just not sure it&apos;s the cleanest.&lt;/p&gt;</comment>
                            <comment id="12532692" author="jukkaz" created="Fri, 5 Oct 2007 16:47:25 +0100"  >&lt;p&gt;In any case you need some place where you define which resource ends up where in the final jar artifact. And I admit that there&apos;s little difference in whether that information is defined in a build script or encoded in the directory hierarchy. However, all other things equal, I think we should go with the conventions as codified by Maven, as that&apos;s what the average new user/developer will expect.&lt;/p&gt;

&lt;p&gt;If you have a document that shouldn&apos;t go into the jar artifact, then by the Maven conventions you&apos;d place it in src/test/resources (if it&apos;s needed for testing), src/site/resources (if it should go to the web site), or src/main/javadoc (if it should be a par t of the javadocs). I don&apos;t see why we should reinvent the wheel by maintaining our own build rules for such resources.&lt;/p&gt;

&lt;p&gt;&amp;gt; So, anyways, I agree with one of your points, Jukka. The proposed method of placing those config files within org/apache/tika&lt;br/&gt;
&amp;gt; is definitely the simplest solution: I&apos;m just not sure it&apos;s the cleanest.&lt;/p&gt;

&lt;p&gt;Fair enough. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t feel too strongly on using the Maven conventions, so I won&apos;t mind if we do have the resources somewhere else. However, we should in any case fix the issue of having the resources duplicated in the jar artifact.&lt;/p&gt;</comment>
                            <comment id="12532694" author="jukkaz" created="Fri, 5 Oct 2007 16:53:18 +0100"  >&lt;p&gt;BTW, it&apos;s not only new users/developers who benefit from us using the standard conventions, it&apos;s also IDEs like Eclipse or Idea that&apos;ll have an easier time figuring out the project layout.&lt;/p&gt;</comment>
                            <comment id="12532802" author="chrismattmann" created="Sat, 6 Oct 2007 01:09:48 +0100"  >&lt;p&gt;&amp;gt;If you have a document that shouldn&apos;t go into the jar artifact, then by the Maven conventions you&apos;d place it in src/test/resources (if it&apos;s needed for testing), src/site/resources (if it should go to the web site), or src/main/javadoc (if it should be a par t of the javadocs). I don&apos;t see why we should reinvent the wheel by maintaining our own build rules for such resources. &lt;/p&gt;

&lt;p&gt;What about resources that don&apos;t fit into any of these buckets? What about design docs that aren&apos;t meant to be published on the website, but should be CM&apos;ed for tracking purposes? Figures? Diagrams? Things such as this that aren&apos;t necessarily for the website, for the unit tests, or for the source code to be delivered? Where do these go?&lt;/p&gt;

&lt;p&gt;Of course, I&apos;m being fecicious here, as the files we&apos;re debating are XML config files that &lt;b&gt;are&lt;/b&gt; definitely part of the build. My only concern is mandating that the build time representation of the tika library (currently a jar file) look 100% the same as the source tree takes us down a slippery slope. I&apos;ll admit that Tika is in its currently nascent stages and its current deliverable is most likely going to be a jar file. However, how do we want to handle things like dependencies? Or packaging up scripts to go along with Tika? I&apos;m not sure it makes sense to put &lt;b&gt;everything&lt;/b&gt; in a jar file, right? &lt;/p&gt;

&lt;p&gt;Finally with respect to your point about IDEs, I&apos;m not sure I agree that putting someting in:&lt;/p&gt;

&lt;p&gt;src/main/resources/org/apache/tika/tika-config.xml&lt;br/&gt;
src/main/resources/org/apache/tika/mime/tika-mimetypes.xml&lt;/p&gt;

&lt;p&gt;is easier to figure out/understand than:&lt;/p&gt;

&lt;p&gt;src/main/resources/tika-config.xml&lt;br/&gt;
src/main/resources/mime/tika-mimetypes.xml&lt;/p&gt;

&lt;p&gt;which, to me, have a much cleaner structurer, and aren&apos;t nested 3 levels deeper?&lt;/p&gt;

&lt;p&gt;I may just not be seeing the point here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, so maybe you&apos;ll have to englighten me.&lt;/p&gt;</comment>
                            <comment id="12532876" author="kbennett" created="Sat, 6 Oct 2007 15:21:10 +0100"  >&lt;p&gt;Chris -&lt;/p&gt;

&lt;p&gt;&amp;gt; ...mandating that the build time representation of the tika library &lt;br/&gt;
&amp;gt; (currently a jar file) look 100% the same as the source tree &lt;br/&gt;
&amp;gt; takes us down a slippery slope...&lt;/p&gt;

&lt;p&gt;This mandate only applies to the src directory tree; if there are files we want to associate with the project for CM purposes, but we do not need or want to be under Maven&apos;s control, then maybe we can create another directory for that?  So under tika, we&apos;d have the Maven style directories (src, target (when built), etc.), and then other directories as we need them?:&lt;/p&gt;

&lt;p&gt;tika&lt;br/&gt;
&amp;#8212; src&lt;br/&gt;
&amp;#8212; foo&lt;/p&gt;

&lt;p&gt;I don&apos;t think there&apos;s anything in Maven that would touch anything in a directory unknown to it, is there?  When it does a clean, it only removes the target directory tree to my knowledge.&lt;/p&gt;

&lt;p&gt;Regarding Jukka&apos;s point about IDE&apos;s, I think he was referring to the IDE itself, not the IDE user.  That is, the IDE can infer from the files&apos; placements in the directory tree what they are and what needs to be done with them, as opposed to it having to figure out a directive in a POM file.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Keith&lt;/p&gt;</comment>
                            <comment id="12533001" author="jukkaz" created="Sun, 7 Oct 2007 21:23:33 +0100"  >&lt;p&gt;Attached a patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-41&quot; title=&quot;Resource files occur twice in jar file.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-41&quot;&gt;&lt;del&gt;TIKA-41&lt;/del&gt;&lt;/a&gt;.patch) that uses declarative Maven configuration instead of &amp;lt;copy/&amp;gt; directives to place the resources in the correct location. I guess this should satisfy all the requirements expressed here.&lt;/p&gt;</comment>
                            <comment id="12533226" author="jukkaz" created="Tue, 9 Oct 2007 00:23:28 +0100"  >&lt;p&gt;Committed the proposed patch in revision 582999.&lt;/p&gt;</comment>
                            <comment id="12534949" author="kbennett" created="Mon, 15 Oct 2007 20:43:33 +0100"  >&lt;p&gt;Guys -&lt;/p&gt;

&lt;p&gt;I just spent a lot of time trying to figure out why I was getting a MalformedURLException when running TestParsers within Intellij Idea.  The reason was that although Idea knows to copy resources to the target directory a la Maven, we had thwarted it by putting tika-config.xml in a different directory and using a copy directive to put it in the right place.&lt;/p&gt;

&lt;p&gt;I guess I hadn&apos;t experienced this before because I had done a mvn compile/test/install before going into my IDE.&lt;/p&gt;

&lt;p&gt;This is exactly the kind of thing I was referring to when I suggested that we follow the Maven convention in this case.  I don&apos;t want to be a pain, but the fact that I actually experienced a problem due to this approach is IMHO significant.&lt;/p&gt;</comment>
                            <comment id="12534975" author="chrismattmann" created="Mon, 15 Oct 2007 22:06:29 +0100"  >&lt;p&gt;I don&apos;t think we have a requirement that folks who use Tika must be using IntelliJ, no? I&apos;m also fairly confident that it&apos;s probably a preference change in IntelliJ that would solve this problem. Additionally, why is IntelliJ copying resources to the target directory? That&apos;s a maven duty, right, seeing as though it&apos;s the build facility we&apos;ve adopted with Tika?&lt;/p&gt;</comment>
                            <comment id="12535255" author="twgoetz" created="Tue, 16 Oct 2007 15:30:18 +0100"  >&lt;p&gt;There&apos;s a similar issue in Eclipse (I think it has the same root cause).  After doing mvn eclipse:eclipse, I end up with an invalid .classpath file in Tika that gives me this error: Cannot nest output folder &apos;tika/target/classes/org/apache/tika&apos; inside output folder &apos;tika/target/classes&apos;.  I can manually fix the classpath, but then, just like for Keith, the test cases don&apos;t go through.  I have not investigated further.&lt;/p&gt;

&lt;p&gt;I would like to throw in my support for a build environment that supports both maven and the popular IDEs.  We do this in UIMA, and it does cause us some headaches now and then, but for us seamless Eclipse support was non-negotiable.  I understand your reluctance to make compromises for the support of IDEs, but many developers do use them.  The easier it is to set up the development env. in your favorite IDE, the more likely you are to get more contributors.  If it&apos;s just a question of maintaining a parallel directory structure in the resources and the target directories, I would consider this a small sacrifice.  Then again, opinions may vary &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;And just to be clear, when working in Eclipse (just for example), I don&apos;t build with maven.  I do a svn extract from inside eclipse, then I go to the command line and do mvn clean install; mvn eclipse:eclipse.  After that, I expect to be all set to work in Eclipse (unless I create new dependencies of course).&lt;/p&gt;

&lt;p&gt;Just something to consider...&lt;/p&gt;</comment>
                            <comment id="12535262" author="chrismattmann" created="Tue, 16 Oct 2007 15:59:03 +0100"  >&lt;p&gt;Hi Thilo:&lt;/p&gt;

&lt;p&gt;While I understand both yours and Keith&apos;s concerns, what&apos;s nagging me is that I too use eclipse to work on code, both on Tika and Nutch. However,when the time to build comes along, I pull out my trusty command line and go from there. I&apos;ve never had much luck with integrating IDEs and build tools. Never got Mevenide to work properly (really buggy in my environment), and despite the fact that it works most of the time, even have some trouble with ant projects within eclipse.&lt;/p&gt;

&lt;p&gt;I&apos;ve found it&apos;s far easier, and doesn&apos;t cause one side or the other to sacrifice anything really (besides the &quot;feeling&quot; of building within an IDE) if you use an IDE to edit/code (and take advantage of all the language features, and auto-compilation, etc.). Then when the time comes to make a delivery, or build, or test the software, pull up that trusty command line and build the project using the command line version of the tool which developers outside an IDE environment can also use. It&apos;s also important to recognize that if both IDE developers and vi/command line guys use the command line, they will have more reproduceable results. I think it may be harder say, to track down build problems when you&apos;re using the integrated build environment (that wraps an external build tool like Maven or Ant). I have had trouble in the past, where it&apos;s actually been a problem with the Eclipse/Maven plugin (rather than a problem with the actual POM file), and I&apos;ve spent way too many hours tracking this down.&lt;/p&gt;

&lt;p&gt;I&apos;m not trying to prevent people from using the software or contributing, but to me (as I stated before in a comment on this post), I think we&apos;re on a slippery slope here. While I agree that in the short term, and in isolation, this is a small concession to make, that helps out folks who are in the IDE for everything world. I don&apos;t want to shut them out. However, I also think it&apos;s a bad idea for Tika as a project to make code-level/build-level concessions simply to support technology choices that users make. To me, that&apos;s letting technology dictate the (implementation) architecture, which in my experience as a software architect, never leads to a good thing.&lt;/p&gt;

&lt;p&gt;My 2 cents,&lt;br/&gt;
  Chris&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12367222" name="TIKA-41.patch" size="1079" author="jukkaz" created="Sun, 7 Oct 2007 21:23:32 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 2 Oct 2007 20:38:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4821</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxx68f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>17329</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>