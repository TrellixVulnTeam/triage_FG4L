<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:35:39 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-1511/TIKA-1511.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-1511] Create a parser for SQLite3</title>
                <link>https://issues.apache.org/jira/browse/TIKA-1511</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;I think it would be very useful, as sqlite is used as data storage by a wide range of applications. Opening the ticket to track it. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12766729">TIKA-1511</key>
            <summary>Create a parser for SQLite3</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="lfcnassif">Luis Filipe Nassif</reporter>
                        <labels>
                    </labels>
                <created>Sun, 11 Jan 2015 21:29:26 +0000</created>
                <updated>Mon, 20 Apr 2015 12:46:51 +0100</updated>
                            <resolved>Mon, 20 Apr 2015 12:25:34 +0100</resolved>
                                    <version>1.6</version>
                                    <fixVersion>1.8</fixVersion>
                                    <component>parser</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="14273869" author="tallison@mitre.org" created="Mon, 12 Jan 2015 18:06:42 +0000"  >&lt;p&gt;See any licensing problems with bundling sqlite dependency?  It isn&apos;t Apache v2, but what we&apos;d bundle isn&apos;t licensed at all (&lt;a href=&quot;https://www.sqlite.org/copyright.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;link&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I don&apos;t see a problem, but wanted to check to see if anyone has any issues. &lt;/p&gt;

&lt;p&gt;Thank you for opening this issue!&lt;/p&gt;</comment>
                            <comment id="14273905" author="lfcnassif" created="Mon, 12 Jan 2015 18:32:41 +0000"  >&lt;p&gt;I don&apos;t see any problems too. I think &quot;public domain&quot; is more liberal than apache v2, because the authors abdicated their copyright.&lt;/p&gt;

&lt;p&gt;But sqlite needs native libs. Could it be a poblem?&lt;/p&gt;</comment>
                            <comment id="14274135" author="tallison@mitre.org" created="Mon, 12 Jan 2015 20:38:57 +0000"  >&lt;p&gt;Agreed on the license.&lt;/p&gt;

&lt;p&gt;I&apos;m able to create and write to a sqlite db with just the jar from maven:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.xerial&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;sqlite-jdbc&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.8.7&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t think I have native libs kicking around my system somewhere, or do I? &lt;/p&gt;

&lt;p&gt;This will add another 4 MB to tika-app/tika-server, but I think that it is worth it...&lt;/p&gt;</comment>
                            <comment id="14274159" author="gagravarr" created="Mon, 12 Jan 2015 20:54:14 +0000"  >&lt;p&gt;Just to be sure, since SQLite doesn&apos;t show up in the &lt;a href=&quot;http://www.apache.org/legal/resolved.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Apache Legal FAQ list&lt;/a&gt;, it&apos;d probably be worth raising a legal jira (link from [the legal page|http://www.apache.org/legal/resolved.html) just to get confirmation that it&apos;s fine to use + clarify what (if any) notice entry is needed for it&lt;/p&gt;</comment>
                            <comment id="14274612" author="lfcnassif" created="Tue, 13 Jan 2015 02:23:43 +0000"  >&lt;p&gt;Yes, there are native libs for windows, mac and linux packed into xerial sqlite-jdbc-3.8.7.jar, but there are other wrappers if that is a problem. The license for xerial-jdbc is Apache v2.&lt;/p&gt;</comment>
                            <comment id="14275112" author="tallison@mitre.org" created="Tue, 13 Jan 2015 12:04:33 +0000"  >&lt;p&gt;Thank you for looking into that.  I like the bundling of native libs so that users shouldn&apos;t have to worry.  Do you see any potential problems from a technical standpoint with xerial&apos;s wrapper/jar?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;, &lt;a href=&quot;http://bitbucket.org/xerial/sqlite-jdbc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;this&lt;/a&gt; looks good to me.  Do you still recommend checking with Legal?&lt;/p&gt;</comment>
                            <comment id="14275182" author="grossws" created="Tue, 13 Jan 2015 13:31:00 +0000"  >&lt;p&gt;JNI can potentially give some issues in webapp container/appserver and environments with security manager turned on. I think it should be at least mentioned in docs if we use native libs in Tika and documented how to exclude them.&lt;/p&gt;</comment>
                            <comment id="14275217" author="tallison@mitre.org" created="Tue, 13 Jan 2015 13:58:17 +0000"  >&lt;p&gt;Thank you, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=grossws&quot; class=&quot;user-hover&quot; rel=&quot;grossws&quot;&gt;Konstantin Gribov&lt;/a&gt;!  &lt;/p&gt;

&lt;p&gt;Two questions:&lt;/p&gt;

&lt;p&gt;1) On how to exclude the native libs...is it ok to require that people re-bundle, that is just get rid of the dependency in the pom and build from scratch? Is there a cleaner method?&lt;/p&gt;

&lt;p&gt;2) Would it be better to require users who want SQLLite3 parsing to add xerial to their classpath?    We&apos;ll probably need to do this for formats that don&apos;t have Apache friendly drivers (afaik: .mdb, .dbf , others?)&lt;/p&gt;</comment>
                            <comment id="14275286" author="grossws" created="Tue, 13 Jan 2015 14:48:34 +0000"  >&lt;p&gt;Usual way is to exclude maven dependency and add check some &lt;tt&gt;xerial&lt;/tt&gt; class presence before using it in appropriate Tika parser (i. e. call &lt;tt&gt;Class.forName(&quot;org.sqlite.JDBC&quot;)&lt;/tt&gt; and catch &lt;tt&gt;ClassNotFoundException&lt;/tt&gt;). I don&apos;t know how consistently &lt;tt&gt;tika-parsers&lt;/tt&gt; uses this approach.&lt;/p&gt;

&lt;p&gt;Native libs are usually stored in same jar (build for all supported platforms), so excluding &lt;tt&gt;sqlite-jdbc.jar&lt;/tt&gt; prevents loading sqlite native library from it.&lt;/p&gt;

&lt;p&gt;E.g. if I don&apos;t need, say, netcdf parsers when invoking tika I can add such snippet to my &lt;tt&gt;pom.xml&lt;/tt&gt;:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tika&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tika-parsers&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.6&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;edu.ucar&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;netcdf&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, tika library user don&apos;t need to rebuild tika-parsers, store it somewhere and can use prebuild tika release from maven central.&lt;/p&gt;

&lt;p&gt;Same pattern can be used with other libs, splitting them into two buckets:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;with Apache-compatible license, which can be included in &lt;tt&gt;tika-parsers.jar&lt;/tt&gt; artifact,&lt;/li&gt;
	&lt;li&gt;with license which prevents packaging it with Tika and documentation info about such parsers/detectors availability if user add them to classpath.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Such approach is generic and not related to libs with jni. E.g. it allows someone to use proprietary or copyleft (GNU GPL/LGPL) library if it&apos;s allowed from legal side. I&apos;m not a lawyer, so I don&apos;t know will compile-time dependency on some library with Apache-incompatible license infringe someones copyright or not.&lt;/p&gt;

&lt;p&gt;Disclaimer: I&apos;m not a lawyer. My thoughts above aren&apos;t legal advice. I think, legal advice from ASF should be formally received before including ever optional dependencies on some Apache License incompatible thrid-party libs.&lt;/p&gt;</comment>
                            <comment id="14275361" author="tallison@mitre.org" created="Tue, 13 Jan 2015 15:18:39 +0000"  >&lt;p&gt;Completely agree with this...that was the plan, esp for those that are explicitly not Apache.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; (i. e. call Class.forName(&quot;org.sqlite.JDBC&quot;) and catch ClassNotFoundException)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;On ucar, got it, I&apos;ll follow that model (the &amp;lt;excludes&amp;gt; statements in app, server and bundle poms) for SQLite if we get a negative decision from LEGAL and for any other db drivers/native code that are explicitly not Apache.&lt;/p&gt;

&lt;p&gt;Thank you, again!&lt;/p&gt;</comment>
                            <comment id="14275485" author="lfcnassif" created="Tue, 13 Jan 2015 16:26:20 +0000"  >&lt;p&gt;Another library option is &lt;a href=&quot;https://code.google.com/p/sqlite4java/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://code.google.com/p/sqlite4java/&lt;/a&gt; It is not a jdbc driver, but also depends on native libs.&lt;/p&gt;

&lt;p&gt;Maybe a jdbc driver like xerial would be better because we can be database independent and reuse code to other formats (dbf, mdb...)?&lt;/p&gt;</comment>
                            <comment id="14275508" author="gagravarr" created="Tue, 13 Jan 2015 16:39:10 +0000"  >&lt;p&gt;If we&apos;re going to do a general jdbc option, maybe we&apos;d be better off having an optional module that just wraps Apache ManifoldCF? ManifoldCF provides connectors / extractors for JDBC amongst others&lt;/p&gt;</comment>
                            <comment id="14275534" author="tallison@mitre.org" created="Tue, 13 Jan 2015 16:57:12 +0000"  >&lt;p&gt;Looks like we&apos;re cleared via &lt;a href=&quot;https://issues.apache.org/jira/browse/LEGAL-215&quot; title=&quot;Including xerial&amp;#39;s sqlite-jdbc jar in Apache distro?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LEGAL-215&quot;&gt;&lt;del&gt;LEGAL-215&lt;/del&gt;&lt;/a&gt; for xerial or anything else that wraps sqlite.  We can add some language about the underlying sqlite non-license and we should be good to go.&lt;/p&gt;

&lt;p&gt;I think my preference for now would be to have an abstract base class (with at least these abstract methods: getConnection(), getTableNames(), addMetadata(Connection connection, Metadata metadata), close(Connection connection)) that we can extend for each db parser. The abstract class would implement the &quot;select * from eachtable&quot;.  This plan would only work for jdbc-compliant-ish dependencies that can return a Connection. It appears that this plan would work for xerial but not for sqlite4java...that said, I&apos;m not above writing a separate parser for db-specific calls as with sqlite4java&apos;s SQLiteConnection. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I defer to the community on whether to go this route, the ManifoldCF route or another.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=grossws&quot; class=&quot;user-hover&quot; rel=&quot;grossws&quot;&gt;Konstantin Gribov&lt;/a&gt; recommended, we can build the parsers and then do a check for whether or not the drivers are available.  The user would be responsible for adding any non Apache licensable jars to their classpath.&lt;/p&gt;</comment>
                            <comment id="14275605" author="lfcnassif" created="Tue, 13 Jan 2015 17:53:57 +0000"  >&lt;p&gt;I think the jdbc based AbstractClass is a great route!&lt;/p&gt;</comment>
                            <comment id="14275703" author="grossws" created="Tue, 13 Jan 2015 18:53:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lfcnassif&quot; class=&quot;user-hover&quot; rel=&quot;lfcnassif&quot;&gt;Luis Filipe Nassif&lt;/a&gt;, +1. IMHO, ManifoldCF connectors are quite heavy dependency. &lt;tt&gt;tika-app.jar&lt;/tt&gt; is about 30MiB now.&lt;/p&gt;</comment>
                            <comment id="14276892" author="tallison@mitre.org" created="Wed, 14 Jan 2015 13:10:18 +0000"  >&lt;p&gt;Ok, off we go with xerial, with a note about licensing, packaged in tika-app.jar and tika-server.jar with directions on how to exclude it...unless there are any objections.&lt;/p&gt;

&lt;p&gt;Next up, these apply generally to the abstract or (perhaps base?) JDBCParser:&lt;/p&gt;

&lt;p&gt;1) Should we treat each table within a db as a separate file, like the PST parser handles each email within the PST file?  Or should we just append all tables with appropriate &amp;lt;div&amp;gt; markings as we do with Excel parsing?&lt;/p&gt;

&lt;p&gt;2) Should we handle BLOBs as we currently handle attachments, that is parse each BLOB with an EmbeddedDocumentParser?&lt;/p&gt;</comment>
                            <comment id="14277044" author="lfcnassif" created="Wed, 14 Jan 2015 15:21:44 +0000"  >&lt;p&gt;1) I vote to handle each table as a separate/embedded item with EmbeddedDocumentExtractor. If the user do not set a EmbeddedDocumentExtractor into ParseContext, the parser should fallback to ParsingEmbeddedDocumentExtractor that will simply append all tables with &amp;lt;div&amp;gt;. So the parser will be more flexible.&lt;br/&gt;
2) I think the same can be applied here.&lt;/p&gt;</comment>
                            <comment id="14277080" author="grossws" created="Wed, 14 Jan 2015 15:38:38 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40mitre.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@mitre.org&quot;&gt;Tim Allison&lt;/a&gt;, working with tables as separate files looks good. Maybe, also migrate excel parsing to same behavior. Having consistent behavior is good from less surprise principle point.&lt;/p&gt;

&lt;p&gt;Treating BLOBs as embedded document gives library user ability to configure it&apos;s detection, parsing and extration via &lt;tt&gt;ParserContext&lt;/tt&gt;, AFAIK. E. g. Tika user can just detect MIME-type (and, maybe, metadata) when parsing database table.&lt;/p&gt;

&lt;p&gt;But this lead to one issue, user may want different behavior for different levels of embedded document, e.g. parse first level (table) and only extract metadata for second (blob in some field). For me it&apos;ll be a real case in some projects. In such case user may want to pass some &lt;tt&gt;ParserContext&lt;/tt&gt; or factory for it to &lt;tt&gt;EmbeddedDocumentExtractor&lt;/tt&gt;. So, such improvement can be done after.&lt;/p&gt;</comment>
                            <comment id="14279748" author="tallison@mitre.org" created="Fri, 16 Jan 2015 02:54:53 +0000"  >&lt;p&gt;Sounds good, y, I think the user will have to handcraft depth handling for now.&lt;/p&gt;

&lt;p&gt;Question for the community...&lt;/p&gt;

&lt;p&gt;To call the EmbeddedDocumentExtractor for each table, I can&apos;t just pass it an InputStream &amp;#8211; there is no InputStream, just a Connection and a table name against which to run the &quot;select * from tablename&quot;.&lt;/p&gt;

&lt;p&gt;One solution would be to create a special mime-type, &quot;tika-internal/jdbc-table&quot;, and then a JDBCTableParser that supports that mime-type, but pulls a ConnectionTableNamePair (or something?) from the ParseContext.&lt;/p&gt;

&lt;p&gt;Other ideas?&lt;/p&gt;</comment>
                            <comment id="14280345" author="tallison@mitre.org" created="Fri, 16 Jan 2015 15:06:02 +0000"  >&lt;p&gt;First draft of patch attached.  Need to build out tests, obviously, and I&apos;ll fix spelling of SQLLite in the class names! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;For the design, I created a public parser that called a new *DBParser class for each call to parse (like many other parsers) to avoid thread safety issues. &lt;/p&gt;

&lt;p&gt;The *DBParser, in turn, calls the EmbeddedDocumentExtractor for each table, and it specifies via special mime-type, which *TableParser will be called. &lt;/p&gt;

&lt;p&gt;The *TableParser ignores the empty InputStream, and grabs the StatementTablePair from the ParseContext to parse each table.&lt;/p&gt;

&lt;p&gt;Also, as part of the design, the EmbeddedDocumentExtractor is called for each BLOB and each CLOB.&lt;/p&gt;

&lt;p&gt;The jdbc wrapper around sqlite is not able to read CLOBs (apparently?), although I could write them without exception (doesn&apos;t mean they were actually written), and it does some other stuff that is not standard JDBC, but that is all handled in SQLiteTableParser, a subclass of AbstractTableParser.&lt;/p&gt;

&lt;p&gt;Any and all feedback is welcomed.  This is still drafty.&lt;/p&gt;</comment>
                            <comment id="14280433" author="tallison@mitre.org" created="Fri, 16 Jan 2015 15:52:06 +0000"  >&lt;p&gt;Hmmmm... This will fail if someone sends in a custom EmbeddedDocumentExtractor because there is no way to pass the StatementTablePair to that interface via ParseContext. &lt;/p&gt;

&lt;p&gt;Some options:&lt;br/&gt;
1) We could go back to treating the db as one big doc, as we do with xls, but I think I&apos;d prefer to treat each table as a separate doc.&lt;/p&gt;

&lt;p&gt;2) We could get rid of the StatementTablePair hack, extract the text from each table into a String and then pass that into EmbeddedDocumentExtractor as the InputStream.  The drawback to this is that we&apos;d ignore the handler and lose potential &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; markup....&lt;/p&gt;

&lt;p&gt; Any ideas on this?&lt;/p&gt;</comment>
                            <comment id="14280553" author="lfcnassif" created="Fri, 16 Jan 2015 17:45:05 +0000"  >&lt;p&gt;I think it will fail if someone sends in a custom EmbeddedDocExtractor (EDE) because it will probably try to read from the empty ByteArrayInputStream to get the table. The StatementTablePair wil be there but could not be searched for into parseContext.&lt;/p&gt;

&lt;p&gt;1) I prefer to handle each table as an embedded doc too, if it is possible. If not, lets go back.&lt;/p&gt;

&lt;p&gt;2) Is it possible to generate a HTML representation of the tables and pass it into EDE? By default could it be handled by HtmlParser? Does HtmlParser currently extract embedded docs, like images? Can we insert the BLOBs into that HTML so that the HtmlParser will extract those BLOBs?&lt;/p&gt;

&lt;p&gt;If this approach is possible, we can use pipedWriter and pipedReader to not hold the entire HTML/Tables in memory, possibly huge ones.&lt;/p&gt;</comment>
                            <comment id="14280826" author="tallison@mitre.org" created="Fri, 16 Jan 2015 21:08:42 +0000"  >&lt;p&gt;This creates a PseudoInputStream that wraps a ResultSet instead of sending the ResultSet through via ParseContext.  This does a better job with the xhtml handling, i.e. it mimics PDFParser.&lt;/p&gt;

&lt;p&gt;What do people think of PseudoInputStream?  It required some tweaks in AutoDetectParser and CompositeParser...this gives me great pause.&lt;/p&gt;</comment>
                            <comment id="14280829" author="tallison@mitre.org" created="Fri, 16 Jan 2015 21:11:39 +0000"  >&lt;p&gt;Y, the HTML representation is generated by wrapping the handler in an XHTMLHandler as other parsers do, and in v2 of the patch, this actually works.  No need to get HtmlParser involved.&lt;/p&gt;

&lt;p&gt;If you want plain text, use a BodyContentHandler.&lt;/p&gt;

&lt;p&gt;I may be missing your point on HtmlParser and PipedReader/Writer.&lt;/p&gt;

&lt;p&gt;I added two tests that just print out the output from standard AutoDetectParser and from a RecursiveParserWrapper that wraps AutoDetect...let me know what you think.&lt;/p&gt;</comment>
                            <comment id="14281086" author="lfcnassif" created="Sat, 17 Jan 2015 01:07:48 +0000"  >&lt;p&gt;If the inputStream (pseudoInputStream) received by EmbeddedDocExtractor can not be read, I think using EDE is not useful. How will this approach work with TikaCli --extract option? My original idea was to support an use case to extract each table to one file...&lt;/p&gt;

&lt;p&gt;Now I think this extraction of tables to files can be done handling the db as one big doc and using a ContentHandlerDecorator that will split the xhtml output at table boundaries. Each xhtml segment can be converted to a byte[] (if small) and then to a ByteArrayInputStream that can be handled by an EmbeddedDocExtractor, if setted into parseContext. If not setted, the ContentHandlerDecorator do not need to split the xhtml output and can fallback to default behavior. Then A custom EDE can extract tables to files if desired.&lt;/p&gt;

&lt;p&gt;So now I think the big doc approah is not bad. What do you think?&lt;/p&gt;</comment>
                            <comment id="14283883" author="tallison@mitre.org" created="Tue, 20 Jan 2015 14:46:29 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lfcnassif&quot; class=&quot;user-hover&quot; rel=&quot;lfcnassif&quot;&gt;Luis Filipe Nassif&lt;/a&gt;, Based on your point about  the tika-app&apos;s -z option and its FileEmbeddedDocumentExtractor that just copies bytes from the InputStream to a file, I propose the following.  I have a strong preference to treat each table as an embedded file, but if it isn&apos;t possible, it isn&apos;t possible.&lt;/p&gt;

&lt;p&gt;So, the proposal for making use of classes that implement EmbeddedDocumentExtractor for each table:&lt;/p&gt;

&lt;p&gt;A) If the EmbeddedDocumentExtractor is a parsing EmbeddedDocumentExtractor, the correct parser will be called, and it will grab a JDBC object from the a wrapper/modification of TikaInputStream...it will not actually read the InputStream at all.  The output will go into whatever handler is passed in.&lt;/p&gt;

&lt;p&gt;B) If a client reads the bytes from the input stream, they&apos;ll get a UTF-8 encoded CSV InputStream, without BLOBs and CLOBs...the EmbeddedDocumentExtractor will be called for each individual BLOB and CLOB.&lt;/p&gt;

&lt;p&gt;C) If a client uses the basic pattern of adding a Parser to the ParseContext, they&apos;ll get one big file with markup for the different &amp;lt;div&amp;gt;.  &lt;/p&gt;

&lt;p&gt;D) If a client uses the RecursiveParserWrapper (not recommended for large dbs!), there will be one metadata object for each table, and one metadata object for each BLOB and CLOB...in short, potentially a large number of embedded documents.&lt;/p&gt;

&lt;p&gt;I&apos;ll mock up this plan and attach a patch if this sounds reasonable.&lt;/p&gt;

&lt;p&gt;If this does work out, we might consider refactoring the PSTParser to treat individual emails in a similar way.&lt;/p&gt;</comment>
                            <comment id="14283988" author="lfcnassif" created="Tue, 20 Jan 2015 16:40:22 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@apache.org&quot;&gt;Tim Allison&lt;/a&gt;. First, you&apos;re doing a great job, thank you. I only want to help with some ideas, because I will not have time in near future to help with the patch.&lt;/p&gt;

&lt;p&gt;A) I think it will work, as the patch works now. But I think an inputStream that can not be read is a bit strange.&lt;br/&gt;
B) Could it be better to send a xHTML inputStream with markup to client instead of simple UTF-8 encoded CSV?&lt;br/&gt;
C) I agree, but it will work only if he adds the correct parser (eg TableParser or CompositeParser) to ParseContext, right?&lt;br/&gt;
D) I agree, that would be great.&lt;/p&gt;</comment>
                            <comment id="14285568" author="tallison@mitre.org" created="Wed, 21 Jan 2015 12:35:05 +0000"  >&lt;blockquote&gt;
&lt;p&gt;A) I think it will work, as the patch works now. But I think an inputStream that can not be read is a bit strange.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed.  The new proposal is to make the InputStream readable, but the regular use case of an AutoDetectParser sent in via ParseContext won&apos;t bother to read the InputStream, rather, it will &quot;read&quot; the table object and use the user-supplied ContentHandler.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;B) Could it be better to send a xHTML inputStream with markup to client instead of simple UTF-8 encoded CSV?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We could, but there are other ways of getting that...RecursiveParserWrapper or custom recursive embedded parser handler or even just sending in the plain AutoDetectParser as the EmbeddedDocumentExtractor/Parser in ParseContext.  The idea behind this is to support a ParserContainerExtractor that would normally pull just the bytes from embedded documents...because there are no bytes for a table object (i.e. it never exists as an actual standalone file), I propose a csv proxy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C) I agree, but it will work only if he adds the correct parser (eg TableParser or CompositeParser) to ParseContext, right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The user will have to add an AutoDetectParser to the ParseContext, and we will need to add org.apache.tika.parser.jdbc.SQLite3Parser&lt;br/&gt;
org.apache.tika.parser.jdbc.JDBCTableParser&lt;br/&gt;
to the parser services file. &lt;/p&gt;

&lt;p&gt;I have a draft of this proposal working.  The current downside is that if the client resets and rereads the InputStream, the blobs/clobs are processed twice via the EmbeddedDocumentExtractor.  &lt;/p&gt;

&lt;p&gt;Any problems with the above?  Recommendations for an alternate design?&lt;/p&gt;</comment>
                            <comment id="14285592" author="tallison@mitre.org" created="Wed, 21 Jan 2015 12:58:46 +0000"  >&lt;p&gt;Slightly modified test document.  Updated patch.&lt;/p&gt;</comment>
                            <comment id="14285621" author="lfcnassif" created="Wed, 21 Jan 2015 13:26:41 +0000"  >&lt;p&gt;No problems, the design looks good!&lt;/p&gt;</comment>
                            <comment id="14289249" author="tallison@mitre.org" created="Fri, 23 Jan 2015 13:43:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;, in response to your request on &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1528&quot; title=&quot;Add an OverrideDetector that overrides other detectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1528&quot;&gt;&lt;del&gt;TIKA-1528&lt;/del&gt;&lt;/a&gt;, I&apos;ve just pushed the latest version of the SQLite3 wrapper to: &lt;a href=&quot;https://github.com/tballison/tika/tree/TIKA-1511&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I like the results of the parser as it stands, but it is far more complex than I&apos;d like.  Any and all review would be very welcomed.  Thank you!&lt;/p&gt;</comment>
                            <comment id="14289863" author="lfcnassif" created="Fri, 23 Jan 2015 20:02:26 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@apache.org&quot;&gt;Tim Allison&lt;/a&gt;, is it possible to improve JDBCResultSetInputStream to take a ContentHandlerDecorator from ParseContext and, if not found, fallback to ToCSVHandler, so clients can override the default csv format of the created inputStream?&lt;/p&gt;</comment>
                            <comment id="14290303" author="tallison@mitre.org" created="Sat, 24 Jan 2015 01:03:08 +0000"  >&lt;p&gt;I&apos;m not sure I understand the need for that.  Won&apos;t you be able to send in whatever handler you want via the regular call to parse and by attaching a ParsingEmbeddedDocumentExtractor?  What, exactly, do you want to have when Tika has finished processing the Sqlite file?&lt;/p&gt;</comment>
                            <comment id="14291148" author="lfcnassif" created="Sun, 25 Jan 2015 15:35:40 +0000"  >&lt;p&gt;My specific use case is to produce a single xHtml file for each table that can be displayed to user.&lt;/p&gt;</comment>
                            <comment id="14291829" author="tallison@mitre.org" created="Mon, 26 Jan 2015 13:52:03 +0000"  >&lt;p&gt;The RecursiveParserWrapper should allow that, no?  With the caveat that it caches all output in memory...  You should be able to parse the output from the standard recursive XHTML output as well.  Right?&lt;/p&gt;

&lt;p&gt;If you have a chance (and if you haven&apos;t done so already), fork branch 1511 from my github site and take a look at the output of the test cases...throw in some print statements and see if that&apos;ll work.  For testRecursiveParserWrapper(), change BasicContentHandlerFactory.HANDLER_TYPE.BODY to BasicContentHandlerFactory.HANDLER_TYPE.XML.&lt;/p&gt;</comment>
                            <comment id="14294402" author="lfcnassif" created="Tue, 27 Jan 2015 23:22:26 +0000"  >&lt;p&gt;Hum... RecursiveParserWrapper is very cool! I did not have a chance to look at it before, thank you. Currently I am doing something similar with a custom EmbeddedDocumentExtractor. For sure RecursiveParserWrapper can help with that use case!&lt;/p&gt;</comment>
                            <comment id="14295165" author="tallison@mitre.org" created="Wed, 28 Jan 2015 14:15:35 +0000"  >&lt;p&gt;Ok, great.  We just added the RecursiveParserWrapper in 1.7, many thanks to Jukka and Nick.  I still have to add an example in our examples module.  Let me know if there are any surprises with it. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;If &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt; has a chance to do a sanity check on the proposed parser on branch &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1511&quot; title=&quot;Create a parser for SQLite3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1511&quot;&gt;&lt;del&gt;TIKA-1511&lt;/del&gt;&lt;/a&gt; of my &lt;a href=&quot;https://github.com/tballison/tika/tree/TIKA-1511&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;github&lt;/a&gt; site, I&apos;ll commit in the next few days.  I&apos;m also happy to put the patch on review board if that would be easier.&lt;/p&gt;</comment>
                            <comment id="14298416" author="gagravarr" created="Fri, 30 Jan 2015 09:43:33 +0000"  >&lt;p&gt;Few minor things on Tim&apos;s github branch for this - I&apos;m seeing some wildcard imports being added, and some assertContains being replaced with assertTrue(str.contains) - the latter doesn&apos;t give as helpful an exception for the assert failing. Does the branch need updating, or are there spurious changes that&apos;ve come in?&lt;/p&gt;

&lt;p&gt;I&apos;ve had a quick look at the diff to the branch, but not a full one. My initial impression is that there was more logic than I&apos;d expected in JDBCResultSetInputStream and JDBCRowReader, but necessarily a problematic amount. I&apos;m still not entirely sure of the idea that depending on how you access the embedded stream, you get different behaviour. If you have a Word document embedded in a PDF, the embedded stream doesn&apos;t say &quot;I&apos;ll give you Word if you ask one way, Plain Text if you ask another&quot;, it just says &quot;here&apos;s the content type, you&apos;ll need to find a suitable parser or fail trying&quot;&lt;/p&gt;

&lt;p&gt;For the specific use case of &quot;something that iterates through a file, dumping out all embedded resources without parsing them&quot;, if we do support it for these JDBC tables (I&apos;m tempted to say for that use case we don&apos;t return anything for the table), we could just have a special case wrapper which parses to HTML as normal and returns that, rather than messing around with &quot;maybe html via jdbc, maybe magically csv&quot;&lt;/p&gt;

&lt;p&gt;Also, it&apos;d be good if we could have implementations for 2 different jdbc-based formats if we can. That should help us verify we&apos;ve got the split between abstract jdbc and sqlite parts correct!&lt;/p&gt;</comment>
                            <comment id="14298670" author="tallison@mitre.org" created="Fri, 30 Jan 2015 14:18:00 +0000"  >&lt;p&gt;Thank you, Nick, for reviewing this!  I&apos;ll fix the wildcards...not sure how those crept in and the assertContains...&lt;/p&gt;

&lt;p&gt;I&apos;m not happy with the added complexity of the JDBCInputStream.&lt;/p&gt;

&lt;p&gt;Bottom line: should we get rid of that option and back off to a zero-byte InputStream and grabbing the table object from the OpenContainer?  That would simplify quite a bit, including detection... And, it would make this parser behave like the PST parser...I think.  If we really want to add it later, we can, but simpler is better...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lfcnassif&quot; class=&quot;user-hover&quot; rel=&quot;lfcnassif&quot;&gt;Luis Filipe Nassif&lt;/a&gt;, would you be ok with that proposal?&lt;/p&gt;

&lt;p&gt;As for another jdbc-based format, I completely agree.  Can you recommend another single-file db format?  Access comes to mind, but I can&apos;t find a pure Java parser that has jdbc: Jackcess (LGPL) has its own api and doesn&apos;t support jdbc.  I looked briefly at derby, hsqldb, mysql, and they all seem to rely on a directory of files...I very well could have missed a single file option for those, though...&lt;/p&gt;

&lt;p&gt;Maybe h2 (MPL and EPL &lt;a href=&quot;http://www.h2database.com/html/license.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;licenses&lt;/a&gt;)?&lt;/p&gt;

</comment>
                            <comment id="14298702" author="tallison@mitre.org" created="Fri, 30 Jan 2015 14:45:59 +0000"  >&lt;p&gt;h2 appears to be MPL &lt;em&gt;or&lt;/em&gt; EPL.  According to &lt;a href=&quot;http://www.apache.org/legal/resolved.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;apache legal faq&lt;/a&gt;, MPL 2.0 is good as long as we include the license info and the disclaimer.&lt;/p&gt;

&lt;p&gt;So, h2 should work, no?  Other candidates?&lt;/p&gt;</comment>
                            <comment id="14298791" author="lfcnassif" created="Fri, 30 Jan 2015 16:04:26 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@apache.org&quot;&gt;Tim Allison&lt;/a&gt;, I am ok to remove the virtual csv/html inputStream (there is no embedded table stream as you pointed before), but I think it is strange an inputStream that can not be read. Maybe back off to the big doc approach... What are the advantages of handling each table like an embedded doc?&lt;/p&gt;</comment>
                            <comment id="14299000" author="tallison@mitre.org" created="Fri, 30 Jan 2015 18:20:43 +0000"  >&lt;p&gt;From a search perspective, the search experience is typically better with smaller documents than with enormous docs.&lt;/p&gt;

&lt;p&gt;As for the oddity, y, I agree, but we do it in AbstractPOIFSExtractor.&lt;/p&gt;</comment>
                            <comment id="14299171" author="lfcnassif" created="Fri, 30 Jan 2015 20:13:26 +0000"  >&lt;p&gt;For search could we split the big xhtml output with a contentHandlerDecorator?&lt;/p&gt;</comment>
                            <comment id="14299175" author="tallison@mitre.org" created="Fri, 30 Jan 2015 20:18:28 +0000"  >&lt;p&gt;We could...I&apos;m more inclined to go with the RecursiveParserWrapper, but parsing should work.&lt;/p&gt;</comment>
                            <comment id="14318232" author="tallison@mitre.org" created="Thu, 12 Feb 2015 14:24:05 +0000"  >&lt;p&gt;Bottom line: it will be simpler to treat the full db with all tables as one big file.  We can still treat clobs and blobs as embedded documents.&lt;/p&gt;

&lt;p&gt;Details:&lt;br/&gt;
When I tried to cut out the &lt;tt&gt;JDBCInputStream&lt;/tt&gt; and just send in a zero byte &lt;tt&gt;InputStream&lt;/tt&gt;, regular parsing worked properly.&lt;/p&gt;

&lt;p&gt;However, if a user tries to use a &lt;tt&gt;ParserContainerExtractor&lt;/tt&gt;, that fails to reach the BLOBs because of this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
                MediaType type = detector.detect(tis, metadata);

                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (extractor == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                    &lt;span class=&quot;code-comment&quot;&gt;// Let the handler process the embedded resource 
&lt;/span&gt;                    handler.handle(filename, type, tis);
                } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;code-comment&quot;&gt;// Use a temporary file to process the stream twice
&lt;/span&gt;                    File file = tis.getFile();

                    &lt;span class=&quot;code-comment&quot;&gt;// Let the handler process the embedded resource
&lt;/span&gt;                    InputStream input = TikaInputStream.get(file);
                    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                        handler.handle(filename, type, input);
                    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
                        input.close();
                    }

                    &lt;span class=&quot;code-comment&quot;&gt;// Recurse
&lt;/span&gt;                    extractor.extract(tis, extractor, handler);
                }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the extractor is called below the &lt;tt&gt;//Recurse&lt;/tt&gt; comment, it only sees the zero-byte &lt;tt&gt;TikaInputStream&lt;/tt&gt;. It does not see the &lt;tt&gt;type&lt;/tt&gt; or the &lt;tt&gt;metadata&lt;/tt&gt;.  So, in the case of &lt;tt&gt;AutoDetectParser&lt;/tt&gt;, it only sees a zero byte &lt;tt&gt;InputStream&lt;/tt&gt; and therefore detects it as &lt;tt&gt;application/octet-stream&lt;/tt&gt;.  In short, there is no current way to pass the detected type through to the extractor.  We could, of course, add a parameter for &lt;tt&gt;type&lt;/tt&gt; or &lt;tt&gt;metadata&lt;/tt&gt; to the ParserContainerExtractor&apos;s &lt;tt&gt;extract&lt;/tt&gt; signature...&lt;/p&gt;</comment>
                            <comment id="14319450" author="tallison@mitre.org" created="Fri, 13 Feb 2015 02:09:35 +0000"  >&lt;p&gt;r1659449&lt;/p&gt;

&lt;p&gt;For now, I chose to set xerial&apos;s sqlite-jdbc to &quot;provided&quot; in the pom for two reasons: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=grossws&quot; class=&quot;user-hover&quot; rel=&quot;grossws&quot;&gt;Konstantin Gribov&lt;/a&gt; pointed out that there will be some issues for users running native libs in a web server unless they carefully configure/arrange their jars.&lt;/li&gt;
	&lt;li&gt;As of 3.8.7, sqlite-jdbc is not cleaning up its copying of jars to the temp folder.  Each time Tika is run and parses a Sqlite file, another jar is added to the user&apos;s temp folder.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I don&apos;t feel strongly about the choice to set this as &quot;provided&quot;.  If we&apos;d rather bundle the jar with tika-app and tika-server, let me know.&lt;/p&gt;</comment>
                            <comment id="14319457" author="hudson" created="Fri, 13 Feb 2015 02:17:03 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #487 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/487/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/487/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1511&quot; title=&quot;Create a parser for SQLite3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1511&quot;&gt;&lt;del&gt;TIKA-1511&lt;/del&gt;&lt;/a&gt; add parser for sqlite3 (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1659449&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1659449&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-bundle/pom.xml&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/pom.xml&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/appended-resources/META-INF/LICENSE&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/resources/test-documents/testSqlite3b.db&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14320022" author="grossws" created="Fri, 13 Feb 2015 12:40:03 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40mitre.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@mitre.org&quot;&gt;Tim Allison&lt;/a&gt;, you can also make it &lt;tt&gt;&amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&lt;/tt&gt; instead of &lt;tt&gt;provided&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Also, I can&apos;t find parser itself (&lt;tt&gt;org.apache.tika.parser.jdbc.SQLite3Parser&lt;/tt&gt;) in trunk rev 1659449.&lt;/p&gt;</comment>
                            <comment id="14320042" author="tallison@mitre.org" created="Fri, 13 Feb 2015 12:55:04 +0000"  >&lt;p&gt;Mea culpa.  Give r1659547 a try.&lt;/p&gt;

&lt;p&gt;What would be the benefit of optional vs supplied?&lt;/p&gt;</comment>
                            <comment id="14320059" author="grossws" created="Fri, 13 Feb 2015 13:21:22 +0000"  >&lt;p&gt;With v3 patch forbiddenapis found that &lt;tt&gt;SQLite3RowReader&lt;/tt&gt; use &lt;tt&gt;SimpleDateFormat&lt;/tt&gt; without explicit &lt;tt&gt;locale&lt;/tt&gt; set. I hope, it&apos;s enough to use &lt;tt&gt;Locale.getDefault()&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Also, fixed &lt;tt&gt;TestSQLLiteParser&lt;/tt&gt;: it tried to load absent test resourse, seems that it was renamed to &lt;tt&gt;testSqlite3b.db&lt;/tt&gt;. Tests successfully pass with it.&lt;/p&gt;

&lt;p&gt;Do we also need &lt;tt&gt;testSQLITE3.db&lt;/tt&gt; in &lt;tt&gt;tika-parsers&lt;/tt&gt;? I can&apos;t find any test that use this file.&lt;/p&gt;</comment>
                            <comment id="14320063" author="tallison@mitre.org" created="Fri, 13 Feb 2015 13:24:08 +0000"  >&lt;p&gt;Will fix now.  No idea how my tests passed with those errors...Thank you.&lt;/p&gt;</comment>
                            <comment id="14320073" author="tallison@mitre.org" created="Fri, 13 Feb 2015 13:40:42 +0000"  >&lt;p&gt;Oh, wait, those were errors in v3 of my patch attached here.  &lt;/p&gt;

&lt;p&gt;I made several changes from v3 before committing.  You shouldn&apos;t see the misspelled testSQLLite3b.db in trunk, and I fixed the date format before committing.  Let me know if you see these in trunk.  I don&apos;t.&lt;/p&gt;

&lt;p&gt;On testSQLITE3.db, that was added for a mime test.  I&apos;m looking into r1647473 and its history now to see where that test was/is.  On the theory of &quot;do no harm&quot;, I chose not to remove that or replace it.&lt;/p&gt;
</comment>
                            <comment id="14320088" author="tallison@mitre.org" created="Fri, 13 Feb 2015 13:52:41 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;, I can&apos;t find a mime test that uses testSQLITE3.db in various revs of &lt;tt&gt;TestMimeTypes.java&lt;/tt&gt; for &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1502&quot; title=&quot;Mime magic for database file formats&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1502&quot;&gt;&lt;del&gt;TIKA-1502&lt;/del&gt;&lt;/a&gt;.  Did you add one at some point?  If not, should we remove that file and add a mime test for the sqlite test file that I added for the parser?&lt;/p&gt;</comment>
                            <comment id="14320103" author="grossws" created="Fri, 13 Feb 2015 14:00:47 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tallison%40mitre.org&quot; class=&quot;user-hover&quot; rel=&quot;tallison@mitre.org&quot;&gt;Tim Allison&lt;/a&gt;, r1659547 work fine. Tests for sqlite3 pass. Thanks)&lt;/p&gt;</comment>
                            <comment id="14320107" author="tallison@mitre.org" created="Fri, 13 Feb 2015 14:03:44 +0000"  >&lt;p&gt;Great.  Thank you.  Let me know if we should make any changes in the format of the output or if there are any surprises.&lt;/p&gt;</comment>
                            <comment id="14320183" author="grossws" created="Fri, 13 Feb 2015 14:41:09 +0000"  >&lt;p&gt;I don&apos;t see a lot of &lt;tt&gt;/tmp/sqlite-*.so&lt;/tt&gt; files, only one while db is open. After closing connections/db it is removed automagically.&lt;/p&gt;</comment>
                            <comment id="14320194" author="tallison@mitre.org" created="Fri, 13 Feb 2015 14:51:53 +0000"  >&lt;p&gt;Very cool.  Thank you for checking on that.  Looks like the issue is only a Windows issue:I get e.g. &lt;tt&gt;sqlite-3.8.7-2ee1c7aa-2ec8-47ad-bf74-073acc79a850-sqlitejdbc.dll&lt;/tt&gt; each time I run Tika and it hits a sqlite3 file, and they are not deleted.&lt;/p&gt;

&lt;p&gt;If we&apos;d prefer to include xerial&apos;s jar with our bundle to make integration easier (for those not in webapp environments &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ), I&apos;m happy to make the change.&lt;/p&gt;</comment>
                            <comment id="14320307" author="hudson" created="Fri, 13 Feb 2015 15:37:34 +0000"  >&lt;p&gt;UNSTABLE: Integrated in tika-trunk-jdk1.7 #489 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/489/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/489/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1511&quot; title=&quot;Create a parser for SQLite3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1511&quot;&gt;&lt;del&gt;TIKA-1511&lt;/del&gt;&lt;/a&gt;, third time is the charm...many apologies (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1659547&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1659547&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/metadata/Database.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1511&quot; title=&quot;Create a parser for SQLite3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1511&quot;&gt;&lt;del&gt;TIKA-1511&lt;/del&gt;&lt;/a&gt;, with new files added...doh (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1659545&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1659545&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/jdbc&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/jdbc/AbstractDBParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/jdbc/JDBCTableReader.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/jdbc/SQLite3DBParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/jdbc/SQLite3Parser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/java/org/apache/tika/parser/jdbc/SQLite3TableReader.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/jdbc&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/parser/jdbc/SQLite3ParserTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14320351" author="tallison@mitre.org" created="Fri, 13 Feb 2015 16:19:16 +0000"  >&lt;p&gt;Not resolved according to Jenkins...&lt;/p&gt;</comment>
                            <comment id="14320354" author="tallison@mitre.org" created="Fri, 13 Feb 2015 16:25:21 +0000"  >&lt;p&gt;Would anyone be able to offer help on this one?&lt;/p&gt;

&lt;p&gt;Are permissions issues preventing xerial&apos;s wrapper from writing the .so files to Jenkins&apos; temp folder?&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Error Message

org.sqlite.core.NativeDB._open(Ljava/lang/String;I)V
Stacktrace

java.lang.UnsatisfiedLinkError: org.sqlite.core.NativeDB._open(Ljava/lang/String;I)V
	at org.sqlite.core.NativeDB._open(Native Method)
	at org.sqlite.core.DB.open(DB.java:161)
	at org.sqlite.core.CoreConnection.open(CoreConnection.java:145)
	at org.sqlite.core.CoreConnection.&amp;lt;init&amp;gt;(CoreConnection.java:66)
	at org.sqlite.jdbc3.JDBC3Connection.&amp;lt;init&amp;gt;(JDBC3Connection.java:21)
	at org.sqlite.jdbc4.JDBC4Connection.&amp;lt;init&amp;gt;(JDBC4Connection.java:23)
	at org.sqlite.SQLiteConnection.&amp;lt;init&amp;gt;(SQLiteConnection.java:45)
	at org.sqlite.JDBC.createConnection(JDBC.java:114)
	at org.sqlite.SQLiteConfig.createConnection(SQLiteConfig.java:101)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14320360" author="tallison@mitre.org" created="Fri, 13 Feb 2015 16:34:26 +0000"  >&lt;p&gt;Perhaps revert to 3.8.6 according to &lt;a href=&quot;https://bitbucket.org/xerial/sqlite-jdbc/issue/152/387-version-linux-issue&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;this&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="14320371" author="tallison@mitre.org" created="Fri, 13 Feb 2015 16:42:17 +0000"  >&lt;p&gt;reverted to 3.8.6 in r1659598.&lt;/p&gt;

&lt;p&gt;If anyone has an ubuntu machine and wants to try reverting until we have success, that would be better than me trying through Hudson.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Let&apos;s see if 3.8.6 is the charm.&lt;/p&gt;</comment>
                            <comment id="14320617" author="hudson" created="Fri, 13 Feb 2015 19:28:24 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #490 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/490/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/490/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1511&quot; title=&quot;Create a parser for SQLite3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1511&quot;&gt;&lt;del&gt;TIKA-1511&lt;/del&gt;&lt;/a&gt; try to revert to earlier version of sqlite-jdbc to avoid unsatisfiedlikeerror on ubuntu (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1659598&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1659598&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/pom.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14320678" author="tallison@mitre.org" created="Fri, 13 Feb 2015 20:06:48 +0000"  >&lt;p&gt;Reverting to an earlier version of sqlite-jdbc worked, but I find it unsettling.  Do we want to include this parser as part of the standard distro or should we offer it as a third party parser?  The licenses are good, but dependencies on native libs give me some concern...especially after that experience.&lt;/p&gt;</comment>
                            <comment id="14320797" author="lfcnassif" created="Fri, 13 Feb 2015 21:36:12 +0000"  >&lt;p&gt;As There are native libs only for Windows, Linux and MacOs X, maybe adding a check for them into getSupportedTypes could make the parser more robust? &lt;/p&gt;</comment>
                            <comment id="14385773" author="tallison@mitre.org" created="Sun, 29 Mar 2015 14:42:28 +0100"  >&lt;p&gt;Any objections to including xerial with app and server rather than &quot;provided&quot;? We can include instructions for excluding for os not supported or webapps with security/native lib restrictions.&lt;/p&gt;</comment>
                            <comment id="14385782" author="tallison@mitre.org" created="Sun, 29 Mar 2015 15:14:47 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thetaphi&quot; class=&quot;user-hover&quot; rel=&quot;thetaphi&quot;&gt;Uwe Schindler&lt;/a&gt;, will there be any problems for Solr if we remove &quot;provided&quot; for xerial in parsers&apos; pom?&lt;/p&gt;</comment>
                            <comment id="14385802" author="grossws" created="Sun, 29 Mar 2015 16:03:58 +0100"  >&lt;p&gt;+1 for including xerial in tika-app and tika-server.&lt;/p&gt;

&lt;p&gt;If you want to include it in tika-parsers as non-provided/optional dep, we should have explicit note about presence of native libs in tika-parsers.&lt;br/&gt;
Than it&apos;ll be ok.&lt;/p&gt;

&lt;p&gt;As I know, Solr 5.0+ is not classic webapp (as were before) but standalone app and shouldn&apos;t have such classloading issues, since it&apos;s parts aren&apos;t redeployed while solr is running.&lt;/p&gt;</comment>
                            <comment id="14385803" author="thetaphi" created="Sun, 29 Mar 2015 16:05:11 +0100"  >&lt;p&gt;Solr uses ANT + IVY to build. We don&apos;t use transitive dependencies at all! So whenever updating TIKA, the person who does this prints the dependency tree and then fills all required information into the ivy.xml file and our ivy-versions.properties file &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; In general, we carefully decide, which dependencies are really needed. Because TIKA automatically disables parser which do not load, we have already removed various files (like netcdf parser - &amp;gt; LGPL) or the ASM parser (we dont support &quot;indexing&quot; Java Class files by default).&lt;/p&gt;

&lt;p&gt;For the current one: We dont want to have native libraries anywhere (we don&apos;t even ship our own native libs for WindowsDirectory). Users need to do this themselves start msvcc/gcc. So we would not ship wth SQLite support by default.&lt;/p&gt;

&lt;p&gt;In general it would be good to have some easier plugin mechanism to allow Solr to pick only some parsers they ship by default and those the user can download (e.g. by a script). So it would be good to have multiple parser-JARS. So maybe put all &quot;crazy&quot; parsers that fork processes or call native libs into a separate TIKA parser bundle. The default one should only have pure-java stuff with as few dependencies as possible...&lt;/p&gt;</comment>
                            <comment id="14385836" author="grossws" created="Sun, 29 Mar 2015 17:04:39 +0100"  >&lt;p&gt;Idea of better tika-parsers module separation was dicussed some time ago, it&apos;s also mentioned in Tika 2.0 roadmap (&lt;a href=&quot;https://wiki.apache.org/tika/Tika2_0RoadMap&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://wiki.apache.org/tika/Tika2_0RoadMap&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In such case, user would get appropriate &lt;tt&gt;tika-parsers-&amp;#42;&lt;/tt&gt; modules with their deps (e. g., via &lt;tt&gt;mvn dependency:copy&lt;/tt&gt; or something similar) and Solr can depend only on &lt;tt&gt;tika-core&lt;/tt&gt; and minimal &lt;tt&gt;tika-parsers-&amp;#42;&lt;/tt&gt;. Or with dependency only on &lt;tt&gt;tika-core&lt;/tt&gt; but it will lead to statndard questions like &quot;why it doesn&apos;t work&quot; as with &lt;tt&gt;slf4j&lt;/tt&gt; in solr4.&lt;/p&gt;</comment>
                            <comment id="14386562" author="tallison@mitre.org" created="Mon, 30 Mar 2015 12:11:18 +0100"  >&lt;p&gt;Thank you, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thetaphi&quot; class=&quot;user-hover&quot; rel=&quot;thetaphi&quot;&gt;Uwe Schindler&lt;/a&gt;.  I was aware of about half of that, but I&apos;m very grateful to have the full story from an expert and to know that I won&apos;t break Solr.  &lt;/p&gt;

&lt;p&gt;I agree about the benefits of segregating parsers.  As Konstantin pointed out, we&apos;re trying to head in that direction.&lt;/p&gt;

&lt;p&gt;Thank you, again!&lt;/p&gt;</comment>
                            <comment id="14386618" author="tallison@mitre.org" created="Mon, 30 Mar 2015 13:21:17 +0100"  >&lt;p&gt;r1670069.  Removed &quot;provided&quot; in parsers&apos; pom.  Happy to revisit this if there are surprises.&lt;/p&gt;</comment>
                            <comment id="14386648" author="hudson" created="Mon, 30 Mar 2015 13:47:30 +0100"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #583 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/583/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/583/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1511&quot; title=&quot;Create a parser for SQLite3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1511&quot;&gt;&lt;del&gt;TIKA-1511&lt;/del&gt;&lt;/a&gt; include xerial and native libs; some cleanup of README in preparation for 1.8 release (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1670069&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1670069&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/pom.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14387865" author="hudson" created="Tue, 31 Mar 2015 03:47:06 +0100"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #589 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/589/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/589/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1511&quot; title=&quot;Create a parser for SQLite3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1511&quot;&gt;&lt;del&gt;TIKA-1511&lt;/del&gt;&lt;/a&gt;: add public domain license notice for Sqlite to main License.txt (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1670239&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1670239&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/LICENSE.txt&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14501544" author="tallison@mitre.org" created="Sat, 18 Apr 2015 20:26:03 +0100"  >&lt;p&gt;Unless there are objections...after some conversations at ApacheCon, I think it will be better to move xerial to &quot;provided&quot;. I&apos;d rather risk someone not getting sqlite content than having all of Tika fail if the proper precautions/workarounds aren&apos;t taken care of.&lt;/p&gt;</comment>
                            <comment id="14502658" author="tallison@mitre.org" created="Mon, 20 Apr 2015 12:25:34 +0100"  >&lt;p&gt;moved dependencies to &quot;provided&quot; in r1674800.&lt;/p&gt;</comment>
                            <comment id="14502684" author="hudson" created="Mon, 20 Apr 2015 12:46:51 +0100"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #634 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/634/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/634/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1511&quot; title=&quot;Create a parser for SQLite3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1511&quot;&gt;&lt;del&gt;TIKA-1511&lt;/del&gt;&lt;/a&gt;, move xerial dependency to &apos;provided&apos; (tallison: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1674800&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1674800&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-app/src/main/appended-resources/META-INF/LICENSE&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/pom.xml&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/main/appended-resources/META-INF/LICENSE&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12769393">TIKA-1527</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12769397">TIKA-1528</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12767142">LEGAL-215</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12692780" name="TIKA-1511v1.patch" size="43253" author="tallison@mitre.org" created="Fri, 16 Jan 2015 15:06:02 +0000"/>
                            <attachment id="12692836" name="TIKA-1511v2.patch" size="57029" author="tallison@mitre.org" created="Fri, 16 Jan 2015 21:08:42 +0000"/>
                            <attachment id="12693577" name="TIKA-1511v3.patch" size="74601" author="tallison@mitre.org" created="Wed, 21 Jan 2015 12:58:46 +0000"/>
                            <attachment id="12698719" name="TIKA-1511v3bis.patch" size="70958" author="grossws" created="Fri, 13 Feb 2015 13:22:04 +0000"/>
                            <attachment id="12693576" name="testSQLLite3b.db" size="27648" author="tallison@mitre.org" created="Wed, 21 Jan 2015 12:58:46 +0000"/>
                            <attachment id="12692779" name="testSQLLite3b.db" size="21504" author="tallison@mitre.org" created="Fri, 16 Jan 2015 15:06:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 12 Jan 2015 18:06:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzy47z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>