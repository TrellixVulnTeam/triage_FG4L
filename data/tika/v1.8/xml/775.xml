<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:37:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-775/TIKA-775.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-775] Embed Capabilities</title>
                <link>https://issues.apache.org/jira/browse/TIKA-775</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;This patch defines and implements the concept of embedding tika metadata into a file stream, the reverse of extraction.&lt;/p&gt;

&lt;p&gt;In the tika-core project an interface defining an Embedder and a generic sed ExternalEmbedder implementation meant to be extended or configured are added.  These classes are essentially a reverse flow of the existing Parser and ExternalParser classes.&lt;/p&gt;

&lt;p&gt;In the tika-parsers project an ExternalEmbedderTest unit test is added which uses the default ExternalEmbedder (calls sed) to embed a value placed in Metadata.DESCRIPTION then verify the operation by parsing the resulting stream.&lt;/p&gt;</description>
                <environment>&lt;p&gt;The default ExternalEmbedder requires that sed be installed.&lt;/p&gt;</environment>
        <key id="12530671">TIKA-775</key>
            <summary>Embed Capabilities</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rgauss">Ray Gauss II</assignee>
                                    <reporter username="rgauss">Ray Gauss II</reporter>
                        <labels>
                            <label>embed</label>
                            <label>patch</label>
                    </labels>
                <created>Tue, 8 Nov 2011 02:31:51 +0000</created>
                <updated>Thu, 2 May 2013 03:29:51 +0100</updated>
                            <resolved>Fri, 18 Jan 2013 22:29:13 +0000</resolved>
                                    <version>1.0</version>
                                    <fixVersion>1.3</fixVersion>
                                    <component>general</component>
                    <component>metadata</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13147339" author="jukkaz" created="Wed, 9 Nov 2011 22:34:53 +0000"  >&lt;p&gt;I&apos;d like to have a concrete use case for introducing a new concept like this. What exact need are you addressing? Also, are there other existing tools that could be used instead of coming up with a new API. This seems like a pretty significant new feature, so it would be best if we did it right from the beginning.&lt;/p&gt;

&lt;p&gt;Design-wise it would be better for the embed() method to write it&apos;s results to an OutputStream given as an argument (just like the Parser interface takes a ContentHandler argument). Returning an InputStream brings up all sorts of issues about timing, error reporting, etc.&lt;/p&gt;</comment>
                            <comment id="13148016" author="rgauss" created="Thu, 10 Nov 2011 21:17:02 +0000"  >&lt;p&gt;I think there are many use cases for embedding metadata in addition to extracting, but for us specifically: we&apos;re using extensions to Alfresco to enable users to modify or enter new metadata via its web interface which then triggers an Alfresco metadata embedder which will use these tika additions to do the work of actually writing the metadata to the file.&lt;/p&gt;

&lt;p&gt;We currently focus on images and embedding IPTC and XMP metadata but I&apos;d envision people would have similar needs embedding things like ID3 in audio, MPEG-7 for video, etc. in all sorts of clients and apps.&lt;/p&gt;

&lt;p&gt;I&apos;m sure there are other existing tools but Tika is, quite frankly, pretty sweet, and these &apos;write&apos; capabilities seem like a perfect fit for tika&apos;s existing &apos;read&apos; features, and the metadata tags and concepts are already present and well organized.&lt;/p&gt;

&lt;p&gt;I agree that great care should be taken in implementing this and I&apos;ve tried to structure things so that they follow precedence set on the parsing side but I&apos;m pretty new to the project.&lt;/p&gt;

&lt;p&gt;I&apos;ll have a look at refactoring for OutputStream as an argument.&lt;/p&gt;

&lt;p&gt;Thanks for taking a look!&lt;/p&gt;</comment>
                            <comment id="13224418" author="chrismattmann" created="Wed, 7 Mar 2012 15:25:59 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;push out to 1.2&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13404823" author="chrismattmann" created="Sun, 1 Jul 2012 22:00:09 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;push to 1.3&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13404824" author="chrismattmann" created="Sun, 1 Jul 2012 22:00:09 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;push to 1.3&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13483437" author="rgauss" created="Wed, 24 Oct 2012 19:06:10 +0100"  >&lt;p&gt;Attached is a newer patch which:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Adds an Embedder interface, similar to Parser, which defines getSupportedEmbedTypes and an embed method&lt;/li&gt;
	&lt;li&gt;Adds a base ExternalEmbedder implementation of the Embedder interface, similar to ExternalParser, which can call a command line executable, the default being sed, to perform embedding&lt;/li&gt;
	&lt;li&gt;Adds a base ExternalEmbedderTest which &apos;embeds&apos; lines in a text file then uses a TXTParser to verify the expected embedded metadata exists&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The embed methods have been refactored to take an output stream argument for writing to as suggested in the past here.&lt;/p&gt;

&lt;p&gt;Unless anyone sees an issue with the concepts or approach I&apos;ll commit in a few days.&lt;/p&gt;</comment>
                            <comment id="13485665" author="jehrlich" created="Sun, 28 Oct 2012 17:01:27 +0000"  >&lt;p&gt;Hi Ray,&lt;/p&gt;

&lt;p&gt;I think it would be great if Tika could also write Metadata back to files and it would be great to start on this rather sooner than later.&lt;br/&gt;
But I have a couple of comments regarding your proposed implementation:&lt;/p&gt;

&lt;p&gt;1) Right now the Parsers do both content and metadata extraction. The proposed embedder does only Metadata embedding, which is fine because updating of content would be out of scope for Tika.&lt;br/&gt;
But if we introduce separate APIs to embed just metadata I think it would make sense to also introduce APIs to only extract metadata. Actually at Adobe we had stop using Tika to retrieve Metadata from specific file formats because it always parses the whole content which is simply too heavy an operation to scale in a larger system.&lt;br/&gt;
So I planned to get started on a new API and adjustments to parsers to just retrieve Metadata from files, but did not have time for this, yet. I guess it would make sense to synchronize these two new APIs, right?&lt;br/&gt;
Being able to just parse Metadata from files is actually also very important for the embedding of it, which I will explain further down.&lt;/p&gt;

&lt;p&gt;2) Your documentation does not really specify in detail the behavior of the metadata update that should happen.&lt;br/&gt;
Does it always update all metadata in the file, i.e. does it delete properties that are not in the Metadata object? Or does it only update those properties that are provided in the Metadata object? How do I delete properties then? Do I make the property empty? But empty properties are in most metadata containers a valid property value and should not delete the property.&lt;br/&gt;
Where does the embedding take place? A lot of file formats have several metadata containers with similar properties. Does the embed method update all of them? Or just the ones, the parsers were looking at? What happens in case of inconsistencies? Do you read/write from specific fields or do you reconcile all of them together?&lt;br/&gt;
What happens for properties where the file format specific fields have a fixed length or different encodings? Do you just write as much as possible and the rest is simply ignored? &lt;/p&gt;

&lt;p&gt;For all such questions, you have to think about whether it makes sense to provide the client with the ability to either configure the embedder or provide a callback API for the client to decide if specific scenarios arise or if the embedder should always just do a best guess for the client.&lt;/p&gt;

&lt;p&gt;In any such case, it is usually for the client important to get the original metadata from the file, before writing it back, so that no properties are wrongly deleted or changed. But even more so it is important for the Embedder as it would in most cases have to read the metadata anyway, in order to know how to update the file properly. It usually has to check if an in-place update of metadata can happen or if the whole file has to be restructured because the metadata chunks have grown too large to fit where they were before.&lt;br/&gt;
That&apos;s why I think it would be important to have a get-only-metadata API and Parser capabilities available, before starting writing it back.&lt;/p&gt;

&lt;p&gt;3) This also leads me to the topic of error recovery and safe updating of files. I think the documentation should be more clear about what the Embedder will do in case of an error and what is expected by the client. &lt;br/&gt;
There are all sorts of reasons the embedding could fail. If that happens, the original file usually ends up being corrupt and lost for the user. So it usually makes sense (for samller files) to do a safe update, which means writing the update in a new file and then swap it with the original one, after the update was successful.&lt;br/&gt;
But what about scenarios where a partial update is possible? You often have files where just specific metadata sections are corrupt because some tool did not read the spec and wrote it wrongly. But the rest of the file is still ok, so other parts could still be updated. Do you want to provide a callback API for the client to be able to react to error scenarios and decide what he wants to do? The embedder could do a best guess action, but that is usually quite dangerous for the user&apos;s files.&lt;/p&gt;

&lt;p&gt;4) I take it that the expectation is that all parsers could also potentially implement the Embedder interface, so that both reading and writing is in one hand? Otherwise you probably end up with all sorts of inconsistencies between the two implementations regarding what metadata fields are read from where and what should be updated when, etc.&lt;/p&gt;

&lt;p&gt;5) Why do you pass in an InputStream? That would mean the Embedder has to open up an own OutputStream to be able to write. That would imply that Tika knows how to properly create OutputStreams in the client&apos;s environment. Wouldn&apos;t it be better to leave the client in control here? And why do you want to return the InputStream?&lt;/p&gt;

&lt;p&gt;6) I also agree with Jukka&apos;s comments that for such an important new feature we should spend some more thoughts on this. I think your proposal works ok for the external embedder scenario but I am not so sure for other scenarios.&lt;/p&gt;

&lt;p&gt;Sorry that I did not speak up earlier. This issue has been around for quite a while.&lt;br/&gt;
Regards&lt;br/&gt;
J&#246;rg&lt;/p&gt;</comment>
                            <comment id="13485749" author="rgauss" created="Sun, 28 Oct 2012 23:48:44 +0000"  >
&lt;p&gt;Hi J&#246;rg,&lt;/p&gt;

&lt;p&gt;Note that the embed.diff file attached to the issue is more current and replaces the previous patch.txt files.  I&apos;ve also changed just a few things since posting embed.diff, primarily around error handling.  I&apos;ll post another diff soon with Javadoc additions mentioned below.&lt;/p&gt;

&lt;p&gt;1) I&apos;m not sure exactly what you mean here.  The Parser interface only guarantees a parse method and supported types.  It says nothing about requiring the entire content to be extracted by the implementation.  The parser interface also makes no specification about how the given input stream must be read or processed, so each implementation can do that however it sees fit.  Similarly the Embedder.embed method says nothing about requiring or preventing content from being updated, so if a particular embedder implementation wants to update the content itself I suppose there&apos;s no reason it couldn&apos;t.&lt;/p&gt;

&lt;p&gt;2) This is intentionally somewhat vague (but perhaps too much so) as each embedder may implement this slightly differently, though we should have a suggested approach, and in general I think that approach should favor preserving the source file&apos;s metadata unless explicitly specified. I will add some of this to the Javadoc but for your specific questions I think the answers would be:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Q: Does it always update all metadata in the file, i.e. does it delete properties that are not in the Metadata object?&lt;/li&gt;
	&lt;li&gt;A: Embedder implementations should only attempt to update metadata fields present in the given Metadata object&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Q: How are empty properties set?&lt;/li&gt;
	&lt;li&gt;A: Embedder implementations should set properties as empty when the corresponding field in the Metadata object is an empty string, i.e. &quot;&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Q: How do I delete properties?&lt;/li&gt;
	&lt;li&gt;A: Embedder implementations should nullify or delete properties corresponding to fields with a null value in the given Metadata object.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Q: Where does the embedding take place?&lt;/li&gt;
	&lt;li&gt;A: That&apos;s up to the embedder implementation and particular file format.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Q: Does the embed method update properties in all metadata containers?&lt;/li&gt;
	&lt;li&gt;A: Embedder implementations should set the property corresponding to a particular field in the given Metadata object in all metadata containers whenever possible and appropriate for the file format at the time.  If a particular metadata container falls out of use and/or is superseded by another (such as IIC vs XMP for IPTC) it is up to the implementation to decide if and when to cease embedding in the alternate container.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Q: What happens for properties where the file format specific fields have a fixed length or different encodings?&lt;/li&gt;
	&lt;li&gt;A: Embedder implementations should attempt to embed as much of the metadata as accurately as possible.  An implementation may choose a strict approach and throw an exception if a value to be embedded exceeds the length allowed or may choose to truncate the value.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For that last one we could consider adding a second embed method to Embedder which also accepts a boolean isStrict parameter which would allow a single implementation to operate in a mode where it would throw exceptions on bad data vs. doing something like truncating.  Implementations could always implement that themselves so I&apos;m not sure we need it in the interface.&lt;/p&gt;

&lt;p&gt;3 and 5) The client is in control of the output stream as the client is responsible for creating it and passing it to the embed method.  The Embedder needs the given input stream to read the source data and writes the final data with metadata embedded to the given output stream.  As such, consumers of the embed method are dictating what that output stream is, which will probably be a temp file in most cases, and the client can refrain from an writing to the actual source file in the case of receiving an exception.  See the ExternalEmbedderTest for an example of creating a temp file output stream for the embedder to write to.&lt;/p&gt;

&lt;p&gt;4) Yes, parser implementations could choose to implement the Embedder interface as well.  That was the reason for naming getSupportedEmbedTypes differently than Parser&apos;s existing getSupportedTypes method.&lt;/p&gt;


&lt;p&gt;If the above doesn&apos;t answer your concerns I&apos;m more than happy to flesh things out further.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Ray&lt;/p&gt;</comment>
                            <comment id="13485981" author="rgauss" created="Mon, 29 Oct 2012 12:07:25 +0000"  >&lt;p&gt;Newer patch with slightly different error handling, better embed test values, and additional Javadoc discussed in the JIRA issue.&lt;/p&gt;</comment>
                            <comment id="13486351" author="jehrlich" created="Mon, 29 Oct 2012 21:03:06 +0000"  >&lt;p&gt;Hi Ray,&lt;/p&gt;

&lt;p&gt;thanks for the additional explanations and the new patch. I had indeed been looking at the wrong one before.&lt;br/&gt;
At the moment I don&apos;t have any additional comments or concerns.&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
J&#246;rg&lt;/p&gt;</comment>
                            <comment id="13486551" author="rgauss" created="Tue, 30 Oct 2012 00:32:27 +0000"  >&lt;p&gt;I&apos;ll commit tomorrow unless there are objections then.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Ray&lt;/p&gt;</comment>
                            <comment id="13487413" author="rgauss" created="Wed, 31 Oct 2012 00:41:42 +0000"  >&lt;p&gt;Committed in r1403941.&lt;/p&gt;</comment>
                            <comment id="13500305" author="jukkaz" created="Mon, 19 Nov 2012 15:25:09 +0000"  >&lt;p&gt;There&apos;s a few problems with the implementation.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The ExternalEmbedderTest fails in a plain Windows environment since it can&apos;t find &lt;tt&gt;sed&lt;/tt&gt;. I added a workaround in revision 1411238 that simply disables the test on Windows.&lt;/li&gt;
	&lt;li&gt;It would be better if ExternalEmbeddedTest was located in &lt;tt&gt;tika-core&lt;/tt&gt; along with the ExternalEmbedder class itself. The use of TXTParser in the test case seems unnecessary.&lt;/li&gt;
	&lt;li&gt;More generally the test case is quite complicated. Is it being reused elsewhere, or can we simplify it? I&apos;d just drop all the extra logging, error handling and flag variables.&lt;/li&gt;
	&lt;li&gt;The ExternalEmbedder class also seems quite complicated, though I notice much of it comes from ExternalParser. Can we for example refactor the common bits to a shared base class?&lt;/li&gt;
	&lt;li&gt;See the ExternalParser class for how you can (and should) use the TemporaryResources class to avoid all the complex cleanup logic. Used properly, the &lt;tt&gt;dispose()&lt;/tt&gt; method takes care of all that.&lt;/li&gt;
	&lt;li&gt;It&apos;s usually a bad idea to capture InterruptedException and just ignore it. Throwing the exception (possibly wrapped into a TikaException) is probably a better approach.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13500351" author="rgauss" created="Mon, 19 Nov 2012 16:36:54 +0000"  >
&lt;blockquote&gt;
&lt;ul&gt;
	&lt;li&gt;The ExternalEmbedderTest fails in a plain Windows environment since it can&apos;t find &lt;tt&gt;sed&lt;/tt&gt;. I added a workaround in revision 1411238 that simply disables the test on Windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Great, thanks.&lt;/p&gt;


&lt;blockquote&gt;
&lt;ul&gt;
	&lt;li&gt;It would be better if ExternalEmbeddedTest was located in &lt;tt&gt;tika-core&lt;/tt&gt; along with the ExternalEmbedder class itself. The use of TXTParser in the test case seems unnecessary.&lt;/li&gt;
	&lt;li&gt;More generally the test case is quite complicated. Is it being reused elsewhere, or can we simplify it? I&apos;d just drop all the extra logging, error handling and flag variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;tt&gt;ExternalEmbedderTest&lt;/tt&gt; is indeed meant to be extended, an example can be found in the &lt;tt&gt;tika-exiftool&lt;/tt&gt; project &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The use of &lt;tt&gt;TXTParser&lt;/tt&gt; in the test without that context does seem like overkill, but in general I think we&apos;ll want to encourage tests that verify through a relevant parser that the metadata was embedded properly.&lt;/p&gt;

&lt;p&gt;The test certainly could be simplified, I kept it on the verbose side since it&apos;s introducing a new concept.&lt;/p&gt;


&lt;blockquote&gt;
&lt;ul&gt;
	&lt;li&gt;The ExternalEmbedder class also seems quite complicated, though I notice much of it comes from ExternalParser. Can we for example refactor the common bits to a shared base class?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Embedders aren&apos;t required to be parsers and vice versa, and since &lt;tt&gt;ExternalParser&lt;/tt&gt; extends &lt;tt&gt;AbstractParser&lt;/tt&gt; we can&apos;t have a common base class.  Some methods could probably be made static and moved into utils classes though.&lt;/p&gt;


&lt;blockquote&gt;
&lt;ul&gt;
	&lt;li&gt;See the ExternalParser class for how you can (and should) use the TemporaryResources class to avoid all the complex cleanup logic. Used properly, the &lt;tt&gt;dispose()&lt;/tt&gt; method takes care of all that.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, I followed the precedence there, but the timing of access and cleanup across the permutations of various streams for &lt;tt&gt;outputFromStdOut&lt;/tt&gt; true or false, input file, output file, stdErr, etc. was a bit trickier than what the ExternalParser has to handle.  I&apos;m sure this could be optimized further though.&lt;/p&gt;


&lt;blockquote&gt;
&lt;ul&gt;
	&lt;li&gt;It&apos;s usually a bad idea to capture InterruptedException and just ignore it. Throwing the exception (possibly wrapped into a TikaException) is probably a better approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, copied and pasted from ExternalParser and did not give it proper diligence, my mistake.  I&apos;ll refactor that and the ExternalParser to wrap in a TikaException which is my approach in most cases.&lt;/p&gt;


&lt;p&gt;I&apos;m on holiday for a few weeks soon and not sure I&apos;ll be able to make the changes I mentioned before then, but I&apos;ll try.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://github.com/Alfresco/tika-exiftool/blob/master/src/test/java/org/apache/tika/embedder/exiftool/ExiftoolExternalEmbedderTest.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/Alfresco/tika-exiftool/blob/master/src/test/java/org/apache/tika/embedder/exiftool/ExiftoolExternalEmbedderTest.java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13531938" author="rgauss" created="Fri, 14 Dec 2012 02:56:23 +0000"  >&lt;p&gt;According to a few posts on the subject including one on developerWorks &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; it looks like it&apos;s more appropriate to reassert the thread&apos;s interrupt status with:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
...
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException ignore) {
    &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.currentThread().interrupt();
}
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;rather than refactoring &lt;tt&gt;ExternalParser&lt;/tt&gt; and &lt;tt&gt;ExternalEmbedder&lt;/tt&gt; to re-throw it or wrap in a &lt;tt&gt;TikaException&lt;/tt&gt;.&lt;/p&gt;


&lt;p&gt;I too would prefer &lt;tt&gt;ExternalEmbedderTest&lt;/tt&gt; to be in core, but I do feel that we want to confirm the embedding with a known working parser.  Would anyone have issue with moving &lt;tt&gt;TXTParser&lt;/tt&gt; and its test into core? There don&apos;t seem to be any issues with dependencies when trying it.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13532033" author="gagravarr" created="Fri, 14 Dec 2012 04:17:05 +0000"  >&lt;p&gt;Could you maybe add a simple dummy parser for testing with?&lt;/p&gt;

&lt;p&gt;Another option is to have the test in the parsers package, even though the main code is in core. We have quite a few examples of that, eg some of the mime magic stuff is tested in parsers because that&apos;s where the test files live&lt;/p&gt;</comment>
                            <comment id="13532205" author="jukkaz" created="Fri, 14 Dec 2012 10:01:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;{{ catch (InterruptedException ignore) { Thread.currentThread().interrupt(); } }}&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Resetting the interrupt status of the thread is a good idea when we can&apos;t just re-throw the InterruptedException, but IMHO we should in that case &lt;b&gt;also&lt;/b&gt; throw a TikaException to indicate that the requested operation couldn&apos;t be completed normally:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
...
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
    &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.currentThread().interrupt();
    &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TikaException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Interrupted&quot;&lt;/span&gt;, e);
}
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the &lt;tt&gt;Process.waitFor()&lt;/tt&gt; call is interrupted we can&apos;t just blindly assume that the process completed normally. Explicitly throwing an exception is a better approach in such cases.&lt;/p&gt;</comment>
                            <comment id="13532489" author="rgauss" created="Fri, 14 Dec 2012 17:42:02 +0000"  >&lt;p&gt;@Jukka, I&apos;m new to &lt;tt&gt;InterruptedException&lt;/tt&gt; but from what I&apos;ve read it seems like it&apos;s thrown  when a request to stop the thread has been received, not necessarily when something went wrong.  So if I understand it correctly, throwing a &lt;tt&gt;TikaException&lt;/tt&gt; would result in the possibility of a behavior where some code asks Tika to stop and Tika blows up with an exception rather than throwing an expected &lt;tt&gt;InterruptedException&lt;/tt&gt; or setting the Thread&apos;s interrupt status.&lt;/p&gt;

&lt;p&gt;@Nick, TXTParser seems pretty simple already, I&apos;d hate to duplicate work.  The code is currently spread out just as you suggest, with &lt;tt&gt;ExternalEmbedder&lt;/tt&gt; in core and &lt;tt&gt;ExternalEmbedderTest&lt;/tt&gt; in parsers.&lt;/p&gt;</comment>
                            <comment id="13556290" author="chrismattmann" created="Thu, 17 Jan 2013 15:30:00 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;push out to 1.4&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13556307" author="chrismattmann" created="Thu, 17 Jan 2013 15:30:03 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;push out to 1.4&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13556401" author="rgauss" created="Thu, 17 Jan 2013 17:43:50 +0000"  >&lt;p&gt;This code is already on trunk.&lt;/p&gt;

&lt;p&gt;Can we re-resolve for 1.3 and open new, &apos;smaller&apos; issues for 1.4 if there are still specific concerns?&lt;/p&gt;</comment>
                            <comment id="13556415" author="chrismattmann" created="Thu, 17 Jan 2013 17:55:43 +0000"  >&lt;p&gt;+1 Ray! I just moved anything that wasn&apos;t resolved to 1.4 to make the release process go cleaner &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;Let&apos;s close this one, resolve for 1.3 (go for it!) and then open smaller, focused issues for 1.4 +1&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12628298">TIKA-1059</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12530673">TIKA-776</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12550659" name="embed.diff" size="33871" author="rgauss" created="Wed, 24 Oct 2012 19:06:10 +0100"/>
                            <attachment id="12551182" name="embed_20121029.diff" size="36781" author="rgauss" created="Mon, 29 Oct 2012 12:07:25 +0000"/>
                            <attachment id="12502867" name="tika-core-embed-patch.txt" size="19586" author="rgauss" created="Tue, 8 Nov 2011 02:32:28 +0000"/>
                            <attachment id="12502868" name="tika-parsers-embed-patch.txt" size="7703" author="rgauss" created="Tue, 8 Nov 2011 02:32:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 9 Nov 2011 22:34:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>216409</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxx1pr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16597</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>