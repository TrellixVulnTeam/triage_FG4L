<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:28:16 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-593/TIKA-593.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-593] Tika network server</title>
                <link>https://issues.apache.org/jira/browse/TIKA-593</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;It would be cool to be able to run Tika as a network service that accepts a binary document as input and produces the extracted content (as XHTML, text, or just metadata) as output. A bit like &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-169&quot; title=&quot;Tika Web Service Servlet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-169&quot;&gt;&lt;del&gt;TIKA-169&lt;/del&gt;&lt;/a&gt;, but without the dependency to a servlet container.&lt;/p&gt;

&lt;p&gt;I&apos;d like to be able to set up and run such a server like this:&lt;/p&gt;

&lt;p&gt;    $ java -jar tika-app.jar --port 1234&lt;/p&gt;

&lt;p&gt;We should also add a NetworkParser class that acts as a local client for such a service. This way a lightweight client could use the full set of Tika parsing functionality even with just the tika-core jar within its classpath.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12497372">TIKA-593</key>
            <summary>Tika network server</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="chrismattmann">Chris A. Mattmann</assignee>
                                    <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Feb 2011 18:39:12 +0000</created>
                <updated>Wed, 3 Oct 2012 22:56:25 +0100</updated>
                            <resolved>Wed, 4 Apr 2012 11:00:06 +0100</resolved>
                                    <version>0.10</version>
                                    <fixVersion>1.2</fixVersion>
                                    <component>general</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="12991838" author="maxim.valyanskiy" created="Tue, 8 Feb 2011 08:50:36 +0000"  >&lt;p&gt;I made HTTP-server with Jersey (JAX-RS) and embedded Glassfish (or Grizzly?) for text, metadata and binary attachment extraction.  I has very simple REST-style interface&lt;/p&gt;

&lt;p&gt;I think we can contribute it to Tika project. Also I can try to replace Glassfish and Jersey with Tomcat and Apache Wink if it is required.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="12991997" author="chrismattmann" created="Tue, 8 Feb 2011 15:05:29 +0000"  >&lt;p&gt;My 2c on this:&lt;/p&gt;

&lt;p&gt;+1 to using JAX RS&lt;/p&gt;

&lt;p&gt;RE: the actual implementation, I used Apache CXF for OODT and it&apos;s basically a jar drop in (or MVN pom.xml update) single dependency. Wink is still Incubating right?&lt;/p&gt;</comment>
                            <comment id="12992540" author="maxim.valyanskiy" created="Wed, 9 Feb 2011 15:52:07 +0000"  >&lt;p&gt;I uploaded my implementation on GitHub for preview: &lt;a href=&quot;https://github.com/maxcom/tikaserver-ex&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/maxcom/tikaserver-ex&lt;/a&gt; (please look at README file for build instructions and usage examples). Please comment it.&lt;/p&gt;</comment>
                            <comment id="12992837" author="otis" created="Thu, 10 Feb 2011 02:33:24 +0000"  >&lt;p&gt;Out of curiosity, why not just have a simple webapp (war) that uses Tika that reads the InputStream and spits back the data in whatever format is needed/specified?  Sure, it requires a servlet container, but is that really a big deal?  Just asking because it seems a tiny bit simpler than using Netty or Mina or HttpComponents or embedded Jetty or Grizzly.&lt;/p&gt;</comment>
                            <comment id="12998786" author="maxim.valyanskiy" created="Thu, 24 Feb 2011 09:46:56 +0000"  >&lt;p&gt;Added my implementation in revision 1074088&lt;/p&gt;</comment>
                            <comment id="13004716" author="jukkaz" created="Wed, 9 Mar 2011 18:43:09 +0000"  >&lt;p&gt;Reopening until we figure out what to do with the references to the dev.java.net repositories.&lt;br/&gt;
Earlier we had problems with such references to non-standard Maven repositories and I&lt;br/&gt;
wouldn&apos;t like to have this issue block another release.&lt;/p&gt;

&lt;p&gt;In revision 1079922 I removed the tika-server component from the default build, which&lt;br/&gt;
should allow us to release Tika even with the dev.java.net dependencies in place (we just&lt;br/&gt;
can&apos;t deploy tika-server to Maven central then).&lt;/p&gt;

&lt;p&gt;There were also some test failures due apparently to some dependency version mismatch.&lt;br/&gt;
See &lt;a href=&quot;https://builds.apache.org/hudson/job/Tika-trunk/483/org.apache.tika$tika-server/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/Tika-trunk/483/org.apache.tika$tika-server/&lt;/a&gt; for details.&lt;/p&gt;</comment>
                            <comment id="13076146" author="maxim.valyanskiy" created="Tue, 2 Aug 2011 12:48:35 +0100"  >&lt;p&gt;I updated tika-server component. I replaced Grizzly web server with Jetty (that is available from maven central repository). I&apos;m going to try to replace Jersey with Wink later&lt;/p&gt;</comment>
                            <comment id="13114316" author="chrismattmann" created="Sun, 25 Sep 2011 19:51:10 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;pushing to 1.0. assign to me. I&apos;d like to shepherd this through with CXF. I&apos;ll make time in the next week.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13135430" author="chrismattmann" created="Tue, 25 Oct 2011 22:10:49 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;push out to 1.1: prep for 1.0.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13148186" author="chrismattmann" created="Fri, 11 Nov 2011 01:20:31 +0000"  >&lt;p&gt;Here I go, I am going to try and integrate Apache CXF and swap out Jersey here. Wish me luck!&lt;/p&gt;</comment>
                            <comment id="13148202" author="chrismattmann" created="Fri, 11 Nov 2011 01:42:20 +0000"  >&lt;p&gt;With the latest version (1.1-trunk) of Tika, I tried building tika-server and got this unit test failure:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.tika.server.TikaResourceTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.374 sec
Running org.apache.tika.server.UnpackerResourceTest
Tests run: 6, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.617 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
Running org.apache.tika.server.MetadataResourceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.346 sec

Results :

Tests in error: 
  testExeDOCX(org.apache.tika.server.UnpackerResourceTest)

Tests run: 11, Failures: 0, Errors: 1, Skipped: 0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are the surefire-reports:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;[chipotle:~/src/tika/trunk] mattmann% more tika-server/target/surefire-reports/org.apache.tika.server.UnpackerResourceTest.txt 
-------------------------------------------------------------------------------
Test set: org.apache.tika.server.UnpackerResourceTest
-------------------------------------------------------------------------------
Tests run: 6, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.613 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
testExeDOCX(org.apache.tika.server.UnpackerResourceTest)  Time elapsed: 1.418 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.sun.jersey.api.client.UniformInterfaceException: PUT http://localhost:9998/unpacker returned a response status of 204 No Content
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:528)
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:506)
        at com.sun.jersey.api.client.WebResource.handle(WebResource.java:674)
        at com.sun.jersey.api.client.WebResource.put(WebResource.java:221)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;m looking into it. &lt;/p&gt;</comment>
                            <comment id="13148214" author="ingorenner" created="Fri, 11 Nov 2011 02:07:22 +0000"  >&lt;p&gt;Got it running after fixing Eclipse&apos;s complaints in pom.xml and updating the mvn dependencies&lt;/p&gt;</comment>
                            <comment id="13148244" author="chrismattmann" created="Fri, 11 Nov 2011 03:54:24 +0000"  >&lt;p&gt;Ingo, I applied your patch to my local copy, but am still seeing test failures:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;INFO: Stopping the Grizzly Web Container...
Tests run: 6, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 9.341 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!

Results :

Tests in error: 
  testExeDOCX(org.apache.tika.server.UnpackerResourceTest): PUT http://localhost:9998/unpacker returned a response status of 204 No Content

Tests run: 11, Failures: 0, Errors: 1, Skipped: 0

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13224419" author="chrismattmann" created="Wed, 7 Mar 2012 15:25:59 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;push out to 1.2&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13235560" author="maxim.valyanskiy" created="Thu, 22 Mar 2012 13:09:40 +0000"  >&lt;p&gt;I found that Jersey dependencies are on Maven Central now (&lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/jersey_moving_forward_contributions_maven&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://blogs.oracle.com/theaquarium/entry/jersey_moving_forward_contributions_maven&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I&apos;m going to synchronize tika-server with our production code and enable it in default build after tika 1.1 release if there is no objections&lt;/p&gt;</comment>
                            <comment id="13236439" author="maxim.valyanskiy" created="Fri, 23 Mar 2012 07:58:35 +0000"  >&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  testExeDOCX(org.apache.tika.server.UnpackerResourceTest): PUT http://localhost:9998/unpacker returned a response status of 204 No Content
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I could not reproduce this problem on current trunk version&lt;/p&gt;</comment>
                            <comment id="13238082" author="chrismattmann" created="Mon, 26 Mar 2012 04:40:16 +0100"  >&lt;p&gt;Hey Max, I don&apos;t have objections to moving forward re-enabling the module. How about we use CXF like I suggested though? I will try a commit to the POM shortly that will add in the CXF JaxRS dependencies. Let&apos;s try that.&lt;/p&gt;</comment>
                            <comment id="13238084" author="chrismattmann" created="Mon, 26 Mar 2012 04:47:29 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
   &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;cxf-rt-frontend-jaxrs&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.1&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Max, see above. That will take care of the transitive dependencies for JAX-RS, including the API, etc.&lt;br/&gt;
I&apos;m not sure of a replacement for the test portions of the Jersey code. If you are +1 with the above, I&apos;d like&lt;br/&gt;
to commit it to the tika-server/pom.xml file.&lt;/p&gt;</comment>
                            <comment id="13238268" author="maxim.valyanskiy" created="Mon, 26 Mar 2012 12:03:05 +0100"  >&lt;p&gt;Chris, that is not enough just to change dependency. There is TikaServerCli class that configures Jetty + Jersey combo, it depends jersey classes&lt;/p&gt;</comment>
                            <comment id="13239200" author="chrismattmann" created="Tue, 27 Mar 2012 06:46:28 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Max FYI my current progress. I&apos;m trying to get the unit tests rewritten but they are failing right now. Check out MetadataResource to see. The cool part is that we reduce a bunch of the Maven dependencies with CXF and we are eating our own dog food. I will go to the CXF lists tomorrow with my question about the failing unit tests.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13239225" author="chrismattmann" created="Tue, 27 Mar 2012 07:20:26 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ok tests passing, mostly. Will finish tomorrow morning!&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13239562" author="chrismattmann" created="Tue, 27 Mar 2012 16:36:06 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a lot closer. Unpacker tests are failing. Max, how did Jersey deal with the Map&amp;lt;String,byte[]&amp;gt; that you are returning in UnpackerResource? I don&apos;t see any @Providers in Jersey that natively know how to deal with this data structure, nor do I see any @Provider classes that you have written to take care of it. How was Jersey dealing with this?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13239686" author="maxim.valyanskiy" created="Tue, 27 Mar 2012 18:39:25 +0100"  >&lt;p&gt;Chris, there is two providers in my code that process this Map&apos;s. It is ZipWriter and TarWriter:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/tika/blob/trunk/tika-server/src/main/java/org/apache/tika/server/ZipWriter.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/tika/blob/trunk/tika-server/src/main/java/org/apache/tika/server/ZipWriter.java&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/apache/tika/blob/trunk/tika-server/src/main/java/org/apache/tika/server/TarWriter.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/tika/blob/trunk/tika-server/src/main/java/org/apache/tika/server/TarWriter.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think now that it was not good idea to use Map class directly, it is better to introduce more specific interface&lt;/p&gt;</comment>
                            <comment id="13239782" author="chrismattmann" created="Tue, 27 Mar 2012 19:19:22 +0100"  >&lt;p&gt;Thanks, Max, see latest patch. I&apos;m close now:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.tika.server.MetadataResourceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.281 sec
Running org.apache.tika.server.TikaResourceTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.167 sec
Running org.apache.tika.server.UnpackerResourceTest
Tests run: 10, Failures: 1, Errors: 2, Skipped: 0, Time elapsed: 2.012 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!

Results :

Failed tests:   test415(org.apache.tika.server.UnpackerResourceTest): expected:&amp;lt;415&amp;gt; but was:&amp;lt;406&amp;gt;

Tests in error: 
  testTarDocPicture(org.apache.tika.server.UnpackerResourceTest): Invalid byte 0 at offset 0 in &apos;{NUL}{NUL}{NUL}{NUL}{NUL}{NUL}{NUL}&apos; len=8
  testText(org.apache.tika.server.UnpackerResourceTest): Stream closed

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2 failures, 1 error, and the rest pass. Any ideas?&lt;/p&gt;</comment>
                            <comment id="13239789" author="chrismattmann" created="Tue, 27 Mar 2012 19:25:29 +0100"  >&lt;p&gt;Hey Max, in r1305940, I committed the latest patch with those 3 tests disabled in UnpackagerResource for now. We can fix them and wrap this up and until I do so, I&apos;ll leave the issue open. Help is welcomed! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13240178" author="chrismattmann" created="Wed, 28 Mar 2012 06:13:33 +0100"  >&lt;p&gt;OK, I give up for now. I disabled the 415 test that isn&apos;t passing. After researching this for hours, and working with Paul Ramirez (thanks for the help Paul), we basically found the following things to be true:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Jersey automatically sets Accept to something like &lt;b&gt;/&lt;/b&gt; which IMHO is more sensible than CXF which sets it to an XML accept type (which causes the resource to not even find the path in test415)&lt;/li&gt;
	&lt;li&gt;For whatever reason, if you set accept to &quot;xxx/xxx&quot; instead of checks up front like it seems Jersey did, CXF will let the call get all the way to the UnpackerResource#unpack method and then cause the Tika AutoDetectParser to fail. Jersey seemed to have caught this. I have no clue why. We mucked around with different accept and type calls and got it to send 200 OK back and parse fine (e.g., if you set the accept to &lt;b&gt;/&lt;/b&gt; and type to APPLICATION_MSWORD &amp;#8211; but that defeats the purpose of the test. If you send in xxx/xxx, it seems like the JAX RS service should send back a 415.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I need some massive help from anyone that knows CXF to figure this out. I have to step away from this for now. For now all tests pass, they are cleaned up using CXF client (with HttpClient removed), and I disabled test415. Any help to get 415 working with CXF is welcomed. Even if we have to modify UnpackerResource to do the check. I know that Sergey is watching this one (from CXF ville so would love some help here!)&lt;/p&gt;</comment>
                            <comment id="13240398" author="sergey_beryozkin" created="Wed, 28 Mar 2012 14:29:13 +0100"  >&lt;p&gt;Hi, here is the thread on the CXF list to do with handling 415:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cxf.547215.n5.nabble.com/TIKA-593-odd-behavior-related-to-CXF-JAX-RS-services-and-415-Http-response-codes-tt5600131.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://cxf.547215.n5.nabble.com/TIKA-593-odd-behavior-related-to-CXF-JAX-RS-services-and-415-Http-response-codes-tt5600131.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Re Accept: I think that the client code needs to have an idea about the format of the data it expects back thus CXF WebClient will try to set some specific default. FYI, proxy-based clients will analyze @Produces/@Consumes. Also the idea of the client having to know what it expects back is finding its way into JAX-RS 2.0 client api too.&lt;/p&gt;

&lt;p&gt;Update: WebClient (trunk/2.5.3-SNAPSHOT) will only default Accept to application/xml if a specific custom class is expected to be populated on return, if Response is expected back then no action is taken&lt;/p&gt;</comment>
                            <comment id="13241230" author="maxim.valyanskiy" created="Thu, 29 Mar 2012 14:46:08 +0100"  >&lt;p&gt;I do not completely understand your discussion about 415, but the test failed because TikaExceptionMapper was not added to providers list (by the way, maybe CXF supports classpath scanning like Jersey?).&lt;/p&gt;</comment>
                            <comment id="13241244" author="maxim.valyanskiy" created="Thu, 29 Mar 2012 14:52:53 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The cool part is that we reduce a bunch of the Maven dependencies with CXF and we are eating our own dog food.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;CXF implementation looks much heavier than Jersey, look at &quot;mvn dependency:tree&quot;&lt;/p&gt;</comment>
                            <comment id="13241249" author="sergey_beryozkin" created="Thu, 29 Mar 2012 15:02:11 +0100"  >&lt;p&gt;&amp;gt; CXF implementation looks much heavier than Jersey, look at &quot;mvn dependency:tree&quot;&lt;/p&gt;

&lt;p&gt;I guess I&apos;d be happy to discuss this issue elsewhere, but since you brought it up, here is the 2.6.0-SNAPSHOT one:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; org.apache.cxf:cxf-rt-frontend-jaxrs:jar:2.6.0-SNAPSHOT&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.aries.blueprint:org.apache.aries.blueprint.core:jar:0.3.1:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.apache.aries.blueprint:org.apache.aries.blueprint.api:jar:0.3.1:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.apache.aries:org.apache.aries.util:jar:0.3:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.slf4j:slf4j-api:jar:1.6.2:provided (version managed from 1.5.11)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.apache.aries.testsupport:org.apache.aries.testsupport.unit:jar:0.3:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  &amp;#45; org.apache.aries.proxy:org.apache.aries.proxy.api:jar:0.3:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.osgi:org.osgi.core:jar:4.2.0:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- junit:junit:jar:4.8.2:test&lt;br/&gt;
*************&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.cxf:cxf-api:jar:2.6.0-SNAPSHOT:compile&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.codehaus.woodstox:woodstox-core-asl:jar:4.1.2:runtime&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  |  &amp;#45; org.codehaus.woodstox:stax2-api:jar:3.1.1:runtime&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.apache.ws.xmlschema:xmlschema-core:jar:2.0.1:compile&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.apache.geronimo.specs:geronimo-javamail_1.4_spec:jar:1.7.1:compile&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  &amp;#45; wsdl4j:wsdl4j:jar:1.6.2:compile&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.cxf:cxf-rt-core:jar:2.6.0-SNAPSHOT:compile&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  &amp;#45; com.sun.xml.bind:jaxb-impl:jar:2.1.13:compile&lt;br/&gt;
**************&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.springframework:spring-core:jar:3.0.7.RELEASE:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.springframework:spring-asm:jar:3.0.7.RELEASE:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  &amp;#45; commons-logging:commons-logging:jar:1.1.1:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.springframework:spring-context:jar:3.0.7.RELEASE:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.springframework:spring-aop:jar:3.0.7.RELEASE:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  |  &amp;#45; aopalliance:aopalliance:jar:1.0:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.springframework:spring-beans:jar:3.0.7.RELEASE:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  &amp;#45; org.springframework:spring-expression:jar:3.0.7.RELEASE:provided&lt;br/&gt;
*****************&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- javax.ws.rs:jsr311-api:jar:1.1.1:compile&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.cxf:cxf-rt-bindings-xml:jar:2.6.0-SNAPSHOT:compile&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.cxf:cxf-rt-transports-http:jar:2.6.0-SNAPSHOT:compile&lt;br/&gt;
******************&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.geronimo.specs:geronimo-servlet_3.0_spec:jar:1.0:provided&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.cxf:cxf-rt-transports-local:jar:2.6.0-SNAPSHOT:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.cxf:cxf-rt-databinding-jaxb:jar:2.6.0-SNAPSHOT:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  &amp;#45; com.sun.xml.bind:jaxb-xjc:jar:2.1.13:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.apache.cxf:cxf-rt-transports-http-jetty:jar:2.6.0-SNAPSHOT:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- org.eclipse.jetty:jetty-server:jar:7.5.4.v20111024:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  |  +- org.eclipse.jetty:jetty-continuation:jar:7.5.4.v20111024:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  |  &amp;#45; org.eclipse.jetty:jetty-http:jar:7.5.4.v20111024:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  |     &amp;#45; org.eclipse.jetty:jetty-io:jar:7.5.4.v20111024:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  |        &amp;#45; org.eclipse.jetty:jetty-util:jar:7.5.4.v20111024:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  &amp;#45; org.eclipse.jetty:jetty-security:jar:7.5.4.v20111024:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.slf4j:slf4j-jdk14:jar:1.6.2:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; +- org.easymock:easymock:jar:3.1:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  +- cglib:cglib-nodep:jar:2.2.2:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; |  &amp;#45; org.objenesis:objenesis:jar:1.2:test&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;INFO&amp;#93;&lt;/span&gt; &amp;#45; org.apache.cxf:cxf-rt-databinding-aegis:jar:2.6.0-SNAPSHOT:test&lt;/p&gt;

&lt;p&gt;Note the strong dependencies surrounded by &apos;************&apos;, this is all we have.&lt;br/&gt;
FYI the wsdl4j dependency is most likely can be excluded - few people have confirmed it&lt;/p&gt;

&lt;p&gt;I agree it is more monolitic in the 2.5.x. We are doing a major split starting from 2.6&lt;/p&gt;</comment>
                            <comment id="13241255" author="sergey_beryozkin" created="Thu, 29 Mar 2012 15:13:10 +0100"  >&lt;p&gt;&amp;gt; I do not completely understand your discussion about 415, but the test failed because TikaExceptionMapper was not added to providers list.&lt;/p&gt;

&lt;p&gt;What do you not understand ?&lt;br/&gt;
FYI I do not understand how having TikaExceptionMapper registered can result in 415 being returned, I&apos;m looking at it and seeing no traces of 415, can you clarify please ?&lt;/p&gt;

&lt;p&gt;&amp;gt; (by the way, maybe CXF supports classpath scanning like Jersey?)&lt;/p&gt;

&lt;p&gt;No it does not yet. It was a very specific decision - IMHO the random class scanning is impractical in many cases and causes more troubles than it&apos;s worth and if of little use when the custom providers have to be configured in the per-endpoint specific way as in case with most interesting applications. However I do accept that for simple mappers it can make sense, though I&apos;m not sure what is simpler, restricting the packages to scan or just go and register required providers &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, I prefer the latter, but please see#&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-4199&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-4199&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In CXF 2.6.0 FIQL search extensions got moved to the new module, so it is time to optionally support it&lt;/p&gt;

</comment>
                            <comment id="13241259" author="chrismattmann" created="Thu, 29 Mar 2012 15:23:09 +0100"  >&lt;p&gt;Hey Max:&lt;/p&gt;

&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;    The cool part is that we reduce a bunch of the Maven dependencies with CXF and we are eating our own dog food.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CXF implementation looks much heavier than Jersey, look at &quot;mvn dependency:tree&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess here I was talking more about simply only having to rely on &lt;b&gt;one&lt;/b&gt; Maven dependency tag in the tika-server pom.xml for cxf-rt-frontend-jars, rather than jersey server + core, and the other dependencies we used to have. If you look at the pom.xml, the deps are now reduced. That&apos;s what I was thinking (maybe a side effect?)&lt;/p&gt;</comment>
                            <comment id="13241266" author="maxim.valyanskiy" created="Thu, 29 Mar 2012 15:29:56 +0100"  >&lt;p&gt;&amp;gt; FYI I do not understand how having TikaExceptionMapper registered can result in 415 being returned, I&apos;m looking at it and seeing no traces of 415, can you clarify please ?&lt;/p&gt;

&lt;p&gt;I&apos;ll try to explain. Tika server&apos;s resources can handle any input mime-type. When we no not specify mime type in our PUT request (or specify something generic like &apos;application/octet-stream&apos;), Tika uses its own mime-type detector to detect its type and choose parser.&lt;/p&gt;

&lt;p&gt;When we specify mime-type it skips detection stage and choose parser that handles specified document type.&lt;/p&gt;

&lt;p&gt;When we can&apos;t handle specified mime-type, when we can&apos;t detect it, or when we do not have parser for that type, we throw WebApplicationException(Response.Status.UNSUPPORTED_MEDIA_TYPE) - 415 code.&lt;/p&gt;

&lt;p&gt;Tika parser framework wraps that exception into TikaException.&lt;/p&gt;

&lt;p&gt;TikaExceptionMapper unwraps it:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    if (e.getCause() !=null &amp;amp;&amp;amp; e.getCause() instanceof WebApplicationException) {
      return ((WebApplicationException) e.getCause()).getResponse();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That exception mapper was lost after transition from Jersey to CXF, so we had 500-error instead of 415.&lt;/p&gt;

&lt;p&gt;PS: maybe we can speak Russian on jabber?&lt;/p&gt;</comment>
                            <comment id="13241272" author="chrismattmann" created="Thu, 29 Mar 2012 15:38:41 +0100"  >&lt;blockquote&gt;&lt;p&gt;but the test failed because TikaExceptionMapper was not added to providers list&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Max, you&apos;re totally right! In r1306883, I committed some cleanup, removing the FIXME and uncommenting @Test, and all tests pass. I&apos;m going to mark this issue as resolved now! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;We can track further progress and updates in other issues. Thanks for the help here!&lt;/p&gt;</comment>
                            <comment id="13241273" author="maxim.valyanskiy" created="Thu, 29 Mar 2012 15:38:56 +0100"  >&lt;p&gt;I we have another problem with Tika server. We combine all dependency jar&apos;s into one big jar that can be run via &apos;java -jar tika-server.jar&apos;. It includes Tika with all parsers, web-server and etc.&lt;/p&gt;

&lt;p&gt;When I try to run it a have following exception:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;SEVERE: Can&apos;t start
org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:190)
	at org.apache.tika.server.TikaServerCli.main(TikaServerCli.java:92)
Caused by: org.apache.cxf.BusException: No DestinationFactory was found for the namespace http://cxf.apache.org/transports/http.
	at org.apache.cxf.transport.DestinationFactoryManagerImpl.getDestinationFactory(DestinationFactoryManagerImpl.java:126)
	at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:88)
	at org.apache.cxf.endpoint.ServerImpl.&amp;lt;init&amp;gt;(ServerImpl.java:72)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:151)
	... 1 more

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think that something is wrong in bundle-plugin configuration&lt;/p&gt;</comment>
                            <comment id="13241274" author="chrismattmann" created="Thu, 29 Mar 2012 15:40:56 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for the intent of this issue, I think that the functionality is complete. We can open up new issues to track further improvements and bugs. Thanks Max, Sergey, Ingo, and others who have contributed, and to Jukka for the original idea and spec!&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13241277" author="chrismattmann" created="Thu, 29 Mar 2012 15:41:58 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;crap, just saw Max&apos;s comment. I&apos;m going to let this sit for a while and make sure Max and I can fully run this, before closing the issue. We&apos;re close though!&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13241316" author="sergey_beryozkin" created="Thu, 29 Mar 2012 16:34:57 +0100"  >&lt;p&gt;Max,&lt;/p&gt;

&lt;p&gt;&amp;gt; ... That exception mapper was lost after transition from Jersey to CXF, so we had 500-error instead of 415.&lt;/p&gt;

&lt;p&gt;Right. The good thing we know the cause and as I indicated we will get to the optional class scanning support in CXF.&lt;/p&gt;

&lt;p&gt;The funny side to it is that we spent a lot of time with Chris thinking how Jersey magically turns away &quot;xxx/xxx&quot; with 415, we thought initially Jersey blocked it even before dispatching, but as it happens it was also passing it through &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Update: Max, sure, we can talk on Jabber, please share your id with me on #cxf or post here&lt;/p&gt;</comment>
                            <comment id="13241323" author="chrismattmann" created="Thu, 29 Mar 2012 16:49:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;The funny side to it is that we spent a lot of time with Chris thinking how Jersey magically turns away &quot;xxx/xxx&quot; with 415, we thought initially Jersey blocked it even before dispatching, but as it happens it was also passing it through &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I know! I got down the wrong rabbit hole, thanks for the help, both of you heh...&lt;/p&gt;</comment>
                            <comment id="13241331" author="sergey_beryozkin" created="Thu, 29 Mar 2012 16:58:51 +0100"  >&lt;p&gt;&amp;gt; I think that something is wrong in bundle-plugin configuration&lt;/p&gt;

&lt;p&gt;The packaged jar contains duplicate entries for different packages in /org/apache/cxf/, and probably for others. May be you should use the Maven Shade plugin, here is the example from CXF:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/repos/asf/cxf/trunk/osgi/bundle/all/pom.xml&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/cxf/trunk/osgi/bundle/all/pom.xml&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13246145" author="maxim.valyanskiy" created="Wed, 4 Apr 2012 11:00:06 +0100"  >&lt;p&gt;added shade plugin, now jar can run&lt;/p&gt;</comment>
                            <comment id="13246379" author="chrismattmann" created="Wed, 4 Apr 2012 16:45:57 +0100"  >&lt;p&gt;I updated the documentation here: &lt;a href=&quot;http://wiki.apache.org/tika/TikaJAXRS&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/tika/TikaJAXRS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks Max!&lt;/p&gt;</comment>
                            <comment id="13246592" author="sergey_beryozkin" created="Wed, 4 Apr 2012 19:57:21 +0100"  >&lt;p&gt;Max, Chris, thanks !&lt;/p&gt;</comment>
                            <comment id="13246615" author="markus17" created="Wed, 4 Apr 2012 20:21:18 +0100"  >&lt;p&gt;Great work! &lt;/p&gt;</comment>
                            <comment id="13246630" author="chrismattmann" created="Wed, 4 Apr 2012 20:29:37 +0100"  >&lt;p&gt;Thanks, guys!&lt;/p&gt;</comment>
                            <comment id="13247089" author="maxim.valyanskiy" created="Thu, 5 Apr 2012 09:27:00 +0100"  >&lt;p&gt;I updated documentation in wiki&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12520069" name="TIKA-593.Mattmann.032612.patch.2.txt" size="19641" author="chrismattmann" created="Tue, 27 Mar 2012 07:20:25 +0100"/>
                            <attachment id="12520066" name="TIKA-593.Mattmann.032612.patch.txt" size="13514" author="chrismattmann" created="Tue, 27 Mar 2012 06:46:26 +0100"/>
                            <attachment id="12520170" name="TIKA-593.Mattmann.032712.patch.2.txt" size="39167" author="chrismattmann" created="Tue, 27 Mar 2012 19:20:51 +0100"/>
                            <attachment id="12520131" name="TIKA-593.Mattmann.032712.patch.txt" size="38400" author="chrismattmann" created="Tue, 27 Mar 2012 16:36:06 +0100"/>
                            <attachment id="12503325" name="TIKA-593_pom.diff" size="1476" author="ingorenner" created="Fri, 11 Nov 2011 02:07:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 8 Feb 2011 08:50:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3447</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxuz0v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4497</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>