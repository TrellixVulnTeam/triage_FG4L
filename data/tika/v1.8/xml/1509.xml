<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:32:21 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/TIKA-1509/TIKA-1509.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[TIKA-1509] Create configurable strategies for composite parsers</title>
                <link>https://issues.apache.org/jira/browse/TIKA-1509</link>
                <project id="12310631" key="TIKA">Tika</project>
                    <description>&lt;p&gt;Several parsers can handle the same mime type, and we are currently ordering which parser is chosen (roughly) by the alphabetic order of the parser class name.&lt;/p&gt;

&lt;p&gt;Let&apos;s allow users to configure strategies for picking parsers.&lt;/p&gt;

&lt;p&gt;See and contribute to full discussion here: &lt;a href=&quot;http://wiki.apache.org/tika/CompositeParserDiscussion&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/tika/CompositeParserDiscussion&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12765818">TIKA-1509</key>
            <summary>Create configurable strategies for composite parsers</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="tallison@mitre.org">Tim Allison</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Jan 2015 18:11:00 +0000</created>
                <updated>Sun, 1 Mar 2015 22:20:12 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="14271786" author="tallison@mitre.org" created="Fri, 9 Jan 2015 19:56:19 +0000"  >&lt;p&gt;First two questions:&lt;/p&gt;

&lt;p&gt;1) This will probably require some big changes and will break compatibility. When we complete this work, will that be Tika 2.0, whether or not we&apos;ve released 1.8 or 1.9 at the time?  Or do we just want to raise all sorts of flags and release it as the next 1.x?&lt;/p&gt;

&lt;p&gt;2) How do we want to work on this?  Some options:&lt;br/&gt;
      a) Create a separate &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1509&quot; title=&quot;Create configurable strategies for composite parsers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1509&quot;&gt;TIKA-1509&lt;/a&gt; branch and merge to trunk when we&apos;re ready for the major changes.  This would require occasional merging from trunk to keep &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1509&quot; title=&quot;Create configurable strategies for composite parsers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1509&quot;&gt;TIKA-1509&lt;/a&gt; fresh (not too bad).&lt;br/&gt;
      b) Create a working 1.8 branch and do &quot;breakable development for the next generation&quot; on trunk (as happens on Lucene/Solr).  This would require developers to make mods to 1.8 and trunk (I think?).&lt;/p&gt;</comment>
                            <comment id="14276105" author="gagravarr" created="Tue, 13 Jan 2015 22:39:57 +0000"  >&lt;p&gt;First up is probably some sort of composite / decorator that handles the different strategies. Then it&apos;s probably something to allow a Tika Config XML file to include or exclude parsers for a mime type, as well as request these. (Coding wise, these aren&apos;t too bad, but I&apos;m struggling to come up with good names that don&apos;t clash with names of what we already have...)&lt;/p&gt;

&lt;p&gt;When those parts are in place, users can opt into that behaviour. We can then test it out, and get feedback!&lt;/p&gt;

&lt;p&gt;Once we have that, we can then plan some breaking changes for 2.0 where we alter defaults, allow for preferences / fancier ordering, make it easier to control what you get etc&lt;/p&gt;

&lt;p&gt;Let&apos;s try to keep things compatible for as long as possible &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14276833" author="tallison@mitre.org" created="Wed, 14 Jan 2015 12:04:29 +0000"  >&lt;p&gt;Y, I agree on compatibility.  How about we add a &quot;tika_2_0_dev&quot; attribute towards the top of the Tika Config XML file.  If that =&quot;true&quot;, then the new behavior will be executed.&lt;/p&gt;

&lt;p&gt;How about adding the different strategies into CompositeParser and allow the user to select the strategy via an enum?  This could be passed through AutoDetectParser, and the default/unspecified would be COMPOSITE_STRATEGY.CLASSIC or similar.  &lt;/p&gt;

&lt;p&gt;It sounds like the recommended path ahead, then, is to add small patches to trunk as we go and let the users opt in to the new behavior.  So, we won&apos;t create a &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1509&quot; title=&quot;Create configurable strategies for composite parsers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1509&quot;&gt;TIKA-1509&lt;/a&gt; branch, and we won&apos;t branch a 1_8 and develop on trunk &lt;em&gt;and&lt;/em&gt; 1_8.  Once we numerically approach 2.0, we can make any breaking changes that are necessary.&lt;/p&gt;</comment>
                            <comment id="14276936" author="gagravarr" created="Wed, 14 Jan 2015 14:18:55 +0000"  >&lt;p&gt;Passing a strategy to CompositeParser, then having that select the parser(s) and wrap with decorators as needed could work&lt;/p&gt;

&lt;p&gt;One addition thing to consider is that CompositeParser will walk its way up the type hierarchy until it finds a parser for the type. If someone has two parsers for Microsoft Excel .xls, and one parser for x-tika-msoffice (the ole2 container that .xls sits in), should they be able to say that all parsers for parent types also be tried? Or would it just be &quot;go up the type hierarchy until you find at least one parser, then run all parsers at that level based on the strategy&quot;?&lt;/p&gt;</comment>
                            <comment id="14312369" author="gagravarr" created="Mon, 9 Feb 2015 15:47:43 +0000"  >&lt;p&gt;Two things now spring to mind as possible problems, both about the ContentHandler&lt;/p&gt;

&lt;p&gt;If we&apos;re going for the &quot;try until one works&quot; approach, and a parser gets partway then exceptions out, resetting the Metadata shouldn&apos;t be too tricky, if desired. However, what happens if the parser has output some text to the ContentHandler? Should we try somehow to reset the ContentHandler then restart?&lt;/p&gt;

&lt;p&gt;If we&apos;re going for the &quot;try all of them for maximum fidelity&quot; approach, then having parsers append keys and values to the Metadata object is probably fine. However, what happens Content Handler wise when one parser has finished, then the second wants to add some more information to the &lt;tt&gt;&amp;lt;head&amp;gt;&lt;/tt&gt; block? Appending more text to the body should be fine, provided we wrap the &quot;end document&quot; call to prevent it going through after the same parser, but what about things for the header? Buffer the whole thing? Prevent later parsers getting at the header? Treat all parsers like we would embedded, and put their header and body into a special set of tags in the body? &lt;/p&gt;

&lt;p&gt;Buffering and merging would potentially mean lots of memory used, and might not be that simple to do. Putting each parser in their own divs in the body means that you&apos;ll get quite different html from the single parser and composite parser cases. Only allowing the first parser to output the header seems like it won&apos;t work for many uses cases. Saying &quot;only the first parser can output content&quot; will probably fail for even more usecases&lt;/p&gt;</comment>
                            <comment id="14312374" author="tallison@mitre.org" created="Mon, 9 Feb 2015 15:56:58 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gagravarr&quot; class=&quot;user-hover&quot; rel=&quot;gagravarr&quot;&gt;Nick Burch&lt;/a&gt;, y, I&apos;ve been thinking about the first issue.  I wonder if we&apos;ll have to come up with a new subclass of handler that has a reset() method?  This will be easy for those that cache to memory/write to a ByteArrayOutputStream, but for those writing to other types of OutputStream, the answer is not as straightforward...&lt;/p&gt;

&lt;p&gt;Your second point is also important, not sure on the answer.&lt;/p&gt;</comment>
                            <comment id="14312414" author="gagravarr" created="Mon, 9 Feb 2015 16:26:43 +0000"  >&lt;p&gt;I&apos;ve had a go at the parser for the &quot;fallback along list on failure&quot; in r1658449, along with a unit test to show how it might work. &lt;/p&gt;

&lt;p&gt;Lots of questions in there that we need to resolve, before we can do the other strategies, before we can provide config to trigger them!&lt;/p&gt;

&lt;p&gt;Hopefully seeing some code will help with these questions, and the content handler ones above...&lt;/p&gt;</comment>
                            <comment id="14312441" author="hudson" created="Mon, 9 Feb 2015 16:43:29 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #480 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/480/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/480/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1509&quot; title=&quot;Create configurable strategies for composite parsers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1509&quot;&gt;TIKA-1509&lt;/a&gt; Provide a possible &quot;parser with fallback&quot; implementation, with lots of questions! (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1658449&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1658449&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/parser/ParserDecorator.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/test/java/org/apache/tika/parser/DummyParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/test/java/org/apache/tika/parser/ParserDecoratorTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14312860" author="chrismattmann" created="Mon, 9 Feb 2015 20:53:11 +0000"  >&lt;p&gt;Great work as a start Nick, and good discussion Tim. Some comments from me:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One addition thing to consider is that CompositeParser will walk its way up the type hierarchy until it finds a parser for the type. If someone has two parsers for Microsoft Excel .xls, and one parser for x-tika-msoffice (the ole2 container that .xls sits in), should they be able to say that all parsers for parent types also be tried? Or would it just be &quot;go up the type hierarchy until you find at least one parser, then run all parsers at that level based on the strategy&quot;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we need to know which Parsers are container-aware parsers, which could help us here. But if we had a reset method, there is no reason even if there is a container, that we shouldn&apos;t be able to call it along with any other MIME matching parsers.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we&apos;re going for the &quot;try until one works&quot; approach, and a parser gets partway then exceptions out, resetting the Metadata shouldn&apos;t be too tricky, if desired. However, what happens if the parser has output some text to the ContentHandler? Should we try somehow to reset the ContentHandler then restart?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What about simply creating a BufferedContentHandler that wraps all incoming ContentHandlers and has the ability to reset()? Similar to Tim&apos;s approach. This would then decorate the incoming handler and take care of the streaming ones. Maybe some code here would help.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we&apos;re going for the &quot;try all of them for maximum fidelity&quot; approach, then having parsers append keys and values to the Metadata object is probably fine. However, what happens Content Handler wise when one parser has finished, then the second wants to add some more information to the &amp;lt;head&amp;gt; block? Appending more text to the body should be fine, provided we wrap the &quot;end document&quot; call to prevent it going through after the same parser, but what about things for the header? Buffer the whole thing? Prevent later parsers getting at the header? Treat all parsers like we would embedded, and put their header and body into a special set of tags in the body?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good question. Maybe create intermediate outputs, and then merge them together when we&apos;re done? Need to think about this.&lt;/p&gt;</comment>
                            <comment id="14338344" author="lfcnassif" created="Thu, 26 Feb 2015 12:49:54 +0000"  >&lt;p&gt;I was thinking about the need to buffer or to spool large inputStreams to a temp file to make possible the parsing by a second or a third parser. Maybe we can create an InputStreamSource interface and set it into TikaInputStream, so we could call tikaInputStream.getInputStreamSource().getInputStream() before each additional pasing, so CompositeParser do not need to create temp files for types with two or more parsers? Users could implement the InputStreamSource.getInputStream() method and set the InputStreamSource into TikaInputStream. If it does not exist, we can fallback to the temp file approach.&lt;/p&gt;</comment>
                            <comment id="14338538" author="tallison@mitre.org" created="Thu, 26 Feb 2015 15:20:36 +0000"  >&lt;p&gt;To confirm I understand, is the goal/use case of this recommendation: there is an actual file behind the InputStream or the user knows that the InputStream is short enough to be buffered and there is no need to create temp files?  In other words, this proposal offers an efficiency versus completely new behavior?&lt;/p&gt;

&lt;p&gt;I was thinking the more challenging part was how to reset the handlers in the cases where we wouldn&apos;t want agglomeration of results.  In the fallback case in Nick&apos;s code, what happens if someone creates a ContentHandler that writes to an OutputStream, and the first parser writes something to the OutputStream before failing.  Would we want to create a TikaOutputStream that writes the output to a temp file.  Or, to get started, we could require that the ParserDecorator only take a &lt;tt&gt;ResettableContentHandler&lt;/tt&gt;?  Or, we require that the user send in a ContentHandlerFactory that will create a new ContentHandler for each attempt at parsing, argh, but it would also have to be called to flush/close its generated ContentHandlers on exception, which is effectively &lt;tt&gt;reset()&lt;/tt&gt;?&lt;/p&gt;</comment>
                            <comment id="14338778" author="lfcnassif" created="Thu, 26 Feb 2015 17:49:49 +0000"  >&lt;p&gt;No, the idea is to address a different problem. The goal is only efficiently reusing large streams without buffering all those large streams into heap and without spooling them to disk, for streams that do not are backed by an existing file. For example, when reading streams from sockets. I am reading streams from disk images...&lt;/p&gt;</comment>
                            <comment id="14339180" author="tallison@mitre.org" created="Thu, 26 Feb 2015 21:19:06 +0000"  >&lt;p&gt;I think we agree; I did raise a second and unrelated issue, but your point is about efficiently allowing a reset() on the InputStream.  &lt;/p&gt;</comment>
                            <comment id="14340662" author="tpalsulich" created="Fri, 27 Feb 2015 19:25:37 +0000"  >&lt;p&gt;Just to reiterate the above and be clear about the issues we&apos;re running into with this, here is a list. Please correct/update if I&apos;m misunderstanding or leaving something out.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Multiple Parsers may support any given file. So, users should be able to provide a strategy of which Parser is used or how Parser results are merged.&lt;/li&gt;
	&lt;li&gt;The default behavior when multiple Parsers support a file will be:
	&lt;ol&gt;
		&lt;li&gt;Pick an initial Parser with &lt;em&gt;some strategy&lt;/em&gt;. If it fails, keep trying additional Parsers.&lt;/li&gt;
		&lt;li&gt;Run all Parsers and merge results.&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;If you&apos;re trying multiple Parsers, how do you/should you merge the Metadata?&lt;/li&gt;
	&lt;li&gt;If you&apos;re trying multiple Parsers, how do you/should you merge ContentHandler? A ContentHandler is fed information from the Parser while consuming the input stream. Possible answers:
	&lt;ol&gt;
		&lt;li&gt;Make ContentHandlers have a reset() functionality &amp;#8211; drop all previously passed content.&lt;/li&gt;
		&lt;li&gt;Make users pass in a ContentHandlerFactory, so the Parsers can create a new ContentHandler when they start Parsing. This is essentially a reset in the form of creating a new ContentHandler.&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;How do you reset the given InputStream when starting a new parse?&lt;/li&gt;
	&lt;li&gt;How do container aware Parsers factor into this?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="14341555" author="hudson" created="Sat, 28 Feb 2015 14:44:45 +0000"  >&lt;p&gt;SUCCESS: Integrated in tika-trunk-jdk1.7 #514 (See &lt;a href=&quot;https://builds.apache.org/job/tika-trunk-jdk1.7/514/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/tika-trunk-jdk1.7/514/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1558&quot; title=&quot;Create a Parser Blacklist&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1558&quot;&gt;&lt;del&gt;TIKA-1558&lt;/del&gt;&lt;/a&gt; Support excluding (blacklisting) parsers from config, so you can use DefaultParser for all except certain parsers. Also supports child parsers of a composite parser from config, towards &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-1509&quot; title=&quot;Create configurable strategies for composite parsers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;TIKA-1509&quot;&gt;TIKA-1509&lt;/a&gt; (nick: &lt;a href=&quot;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1662940&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/tika/trunk/?view=rev&amp;amp;rev=1662940&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/parser/CompositeParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-core/src/main/java/org/apache/tika/parser/DefaultParser.java&lt;/li&gt;
	&lt;li&gt;/tika/trunk/tika-parsers/src/test/java/org/apache/tika/config/TikaParserConfigTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14341683" author="chrismattmann" created="Sat, 28 Feb 2015 17:40:25 +0000"  >&lt;p&gt;Fantastic, Tyler, great summary.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12509080">TIKA-669</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12436695">TIKA-288</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12747589">TIKA-1445</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 13 Jan 2015 22:39:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzxys7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>