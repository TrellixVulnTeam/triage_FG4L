<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:19:35 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-183/SOLR-183.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-183] add getRequiredParameter() to SolrParams</title>
                <link>https://issues.apache.org/jira/browse/SOLR-183</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;I find myself including this with every patch, so i&apos;ll just separate it out.  This simply adds a utilty function to SolrParams that throws a 400 if the parameter is missing:&lt;/p&gt;

&lt;p&gt;/** returns the value of the param, or throws a 400 exception if missing */&lt;br/&gt;
  public String getRequiredParameter(String param) throws SolrException {&lt;br/&gt;
    String val = get(param);&lt;br/&gt;
    if( val == null ) &lt;/p&gt;
{
      throw new SolrException( 400, &quot;Missing parameter: &quot;+param );
    }
&lt;p&gt;    return val;&lt;br/&gt;
  }&lt;/p&gt;</description>
                <environment></environment>
        <key id="12364195">SOLR-183</key>
            <summary>add getRequiredParameter() to SolrParams</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ryantxu">Ryan McKinley</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Mar 2007 03:22:54 +0000</created>
                <updated>Fri, 10 May 2013 11:39:51 +0100</updated>
                            <resolved>Sat, 24 Mar 2007 21:12:33 +0000</resolved>
                                                    <fixVersion>1.2</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12478508" author="hossman" created="Tue, 6 Mar 2007 18:37:01 +0000"  >&lt;p&gt;Ryan: this patch is nice and simple ... but it has me wondering if it might be more generally usefull to have this in a SolrParams decorator that applied it at the outermost level to all of the methods which don&apos;t take in a default? ...&lt;/p&gt;

&lt;p&gt;  SolrParams myParams = ...  &lt;br/&gt;
  myParams = new RequiredSolrParams(myParams, &quot;sort&quot;, &quot;q&quot;, &quot;qf&quot;, &quot;f.foo.facet.limit&quot;);&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;  public class RequiredSolrParams extends SolrParams {&lt;br/&gt;
    ...&lt;br/&gt;
    SolrParams nested;&lt;br/&gt;
    Set&amp;lt;String&amp;gt; required;&lt;br/&gt;
    ...&lt;br/&gt;
    public String get(String param) &lt;/p&gt;
{
      String val = nester.get(param);
      if (null == val) throw new SolrException( 400, &quot;Missing parameter: &quot;+param );
      return val; 
    }
&lt;p&gt;    ...&lt;br/&gt;
    public String get(String param, String def) &lt;/p&gt;
{
       return nested.get(param, def); // bypass exception throwing when default
    }
&lt;p&gt;    ...&lt;br/&gt;
  }&lt;/p&gt;


&lt;p&gt;?&lt;/p&gt;</comment>
                            <comment id="12478517" author="ryantxu" created="Tue, 6 Mar 2007 18:53:08 +0000"  >&lt;p&gt;I&apos;ve been using it as a check just before you use the variable:&lt;/p&gt;

&lt;p&gt;String key = params.getRequiredParam( &apos;key&apos; );&lt;/p&gt;

&lt;p&gt;This is nice and simple, the advantage to your suggestion is that you could use it to check non-string values:&lt;/p&gt;

&lt;p&gt;SolrParams required = new RequiredSolrParams( params, &quot;size&quot;, &quot;debug&quot; ); &lt;br/&gt;
int size = required.getInt( &quot;size&quot; );&lt;br/&gt;
boolean debug = required.getBool( &quot;debug&quot; );&lt;br/&gt;
String other = required.get( &quot;somethingelse&quot;, &quot;defaultValue&quot; );&lt;/p&gt;


&lt;p&gt;I guess simple things might not be as simple as they seem!&lt;/p&gt;</comment>
                            <comment id="12478523" author="hossman" created="Tue, 6 Mar 2007 19:09:21 +0000"  >&lt;p&gt;yeha ... the one thing about an approach like this that i&apos;m not sure how i feel about yet is that it pushes the list of things that should be required away from where they are actually used (at the moment of construction)&lt;/p&gt;

&lt;p&gt;another approach that might cleaner would be to eliminate the explicit list of required fields, and say that if you use the decorator &lt;b&gt;every&lt;/b&gt; param is required unless a default is specified, and then each time you ask for a param&apos;s value, you can use the orriginal params instance if it&apos;s not required, or the decorated params if it is...&lt;/p&gt;

&lt;p&gt;   SolrParams myParams = ...;&lt;br/&gt;
   SolrParams required = new RequiredSolrParams(myParams);&lt;br/&gt;
   ...&lt;br/&gt;
   Integer foo = myParams.getInt(&quot;yak&quot;); ... not required, may be null&lt;br/&gt;
   ...&lt;br/&gt;
   Integer bar = required.getInt(&quot;yak&quot;); ... required in this use, exception if missing&lt;/p&gt;


&lt;p&gt;...&lt;/p&gt;</comment>
                            <comment id="12478525" author="ryantxu" created="Tue, 6 Mar 2007 19:14:34 +0000"  >&lt;p&gt;yes, this is better.&lt;/p&gt;

&lt;p&gt;but what should happen with &lt;br/&gt;
 Integer bar = required.getInt( &quot;yak&quot;, 100 );&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;treat it as required.getInt() that will throw 400 if missing?&lt;/li&gt;
	&lt;li&gt;equivolent to myParams.getInt( &quot;yak&quot;, 100 );?&lt;/li&gt;
	&lt;li&gt;unsuported operation? no.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12478548" author="hossman" created="Tue, 6 Mar 2007 20:00:46 +0000"  >&lt;p&gt;i see no reason why it shouldn&apos;t be &quot;equivolent to myParams.getInt( &quot;yak&quot;, 100 );&quot; ... here&apos;s the interesting case...&lt;/p&gt;

&lt;p&gt;  Integer bar = required.getInt( &quot;yak&quot;, null ); &lt;/p&gt;

&lt;p&gt;...in that case, i think there should be an exception unless &quot;yak&quot; exists.&lt;/p&gt;

&lt;p&gt;the contract would be sumarized as &quot;no method will ever return null, under any circumstances&quot;&lt;/p&gt;</comment>
                            <comment id="12478552" author="ryantxu" created="Tue, 6 Mar 2007 20:07:19 +0000"  >&lt;p&gt;I&apos;m getting into it now...  the easiest is to throw a 400 exception for everyting.  the SolrParams abstract class calls get( &apos;&apos; ) for each of the getX( name, devault ) - so, we would have to overwrite all the getX functions rather then just the one.  If we do that, we may as well catch the &apos;parse exception&apos; from Integer.parseInt() and send a 400 rather then a 500 w/ stack trace.  &lt;/p&gt;

&lt;p&gt;That is cleaner from user standpoint, so it must be the better option.&lt;/p&gt;



</comment>
                            <comment id="12478556" author="yseeley@gmail.com" created="Tue, 6 Mar 2007 20:13:34 +0000"  >&lt;p&gt;I like anything that can avoid yet another hash lookup in the common cases.&lt;br/&gt;
I think either the original getRequired() or the separate  &quot;SolrParams required&quot; could fit the bill.&lt;/p&gt;

&lt;p&gt;The latter is more powerful since it applies to all get methods, but it&apos;s also more awkward as you need to construct it wherever you need to get a required param.&lt;/p&gt;</comment>
                            <comment id="12478600" author="ryantxu" created="Tue, 6 Mar 2007 21:59:40 +0000"  >&lt;p&gt;This adds a RequiredSolrParams class that wraps most of the getXXX() functions and makes sure the value exists and is valid.&lt;/p&gt;

&lt;p&gt;the case Hoss mentioned:&lt;br/&gt;
 Integer bar = required.getInt( &quot;yak&quot;, null ); &lt;/p&gt;

&lt;p&gt;isn&apos;t possible since getInt() takes an &apos;int&apos; not an Integer as the default&lt;/p&gt;

&lt;p&gt;I put the class in &quot;org.apache.solr.util&quot; rather then &quot;org.apache.solr.request&quot; - I&apos;m really hoping with &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-135&quot; title=&quot;Restructure / Refactor codebase for shared libraries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-135&quot;&gt;&lt;del&gt;SOLR-135&lt;/del&gt;&lt;/a&gt; most of the general non-lucene based helper classes can be in &quot;util&quot;&lt;/p&gt;

&lt;p&gt;You&apos;ll notice some of the code style is a little non-standard - that helps my dyslexic head keep stuff straight (at least sometimes).&lt;/p&gt;

&lt;p&gt;Yonik - there are no extra hash lookups with this.&lt;/p&gt;
</comment>
                            <comment id="12478895" author="skeptikos" created="Wed, 7 Mar 2007 21:08:03 +0000"  >&lt;p&gt;Er, sorry to be contrary, but to me it seems a bit excessive to go through so many hoops to support  the getXXX(param, default) methods, which contradicts the very nature of the class, which is to require parameters.&lt;/p&gt;

&lt;p&gt;If one wanted to stick with Hoss&apos; preference for a decorator, and kept the getXXX(param, default) method signatures defined in SolrParams, one could argue that it would make sense to make those methods simply return SolrExceptions, on the assumption that requires.getInt(param, 0) must be a programmer error.  That is of course automatically achieved if only get and getParams are overridden, as was proposed earlier.  It&apos;s not so terrible to maintain parallel params and requires references to the same underlying param list.&lt;/p&gt;

&lt;p&gt;But if one is going to bother adding real implementations for every method signature in SolrParams, then why not simply dispense with the decorator and add getRequiredXXX(param) methods with default implementations directly to SolrParams, e.g.&lt;br/&gt;
    getRequiredParam(String param)&lt;br/&gt;
    getRequiredParams(String param)&lt;br/&gt;
    getRequiredBool(String param)&lt;br/&gt;
    getRequiredFieldBool(String field, String param)&lt;br/&gt;
    ... etc.&lt;/p&gt;

&lt;p&gt;That seems simpler, straightforward, and unambiguous.&lt;/p&gt;</comment>
                            <comment id="12478905" author="ryantxu" created="Wed, 7 Mar 2007 21:27:03 +0000"  >&lt;p&gt;I agree it is a bit excessive...  the thing that convinced me the hoops are ok is getting a 400 exception rather then a 500 exception for:&lt;/p&gt;

&lt;p&gt; int val = required.getInt( &quot;hello&quot; );&lt;/p&gt;

&lt;p&gt;The hoops are ugly, but the result is that anything from the RequiredParams will be valid - and throw a 400 exception if not.  In my view, that is a different enough &quot;contract&quot; to warrant a special class rather then adding more functions to SolrParams.&lt;/p&gt;

&lt;p&gt;All that said, simply adding getRequiredParam() to SolrParams is simple, clean and solves most cases I&apos;m worried about.&lt;/p&gt;</comment>
                            <comment id="12478930" author="skeptikos" created="Wed, 7 Mar 2007 22:20:27 +0000"  >&lt;p&gt;Modest proposal: If one is going to come up with a programmer-facing mechanism for required parameters (using any of the abovementioned schemes), why not also make it configuration-facing as well.  That is, in solrparams.xml:&lt;/p&gt;

&lt;p&gt;  &amp;lt;requestHandler name=&quot;blah&quot; class=&quot;solr.DisMaxRequestHandler&quot;&amp;gt;&lt;br/&gt;
     &amp;lt;lst name=&quot;defaults&quot;&amp;gt;&lt;br/&gt;
       &amp;lt;str name=&quot;version&quot;&amp;gt;2.1&amp;lt;/str&amp;gt;&lt;br/&gt;
       &amp;lt;int name=&quot;rows&quot;&amp;gt;0&amp;lt;/int&amp;gt;&lt;br/&gt;
       ...&lt;br/&gt;
    &amp;lt;/lst&amp;gt;&lt;br/&gt;
    &amp;lt;lst name=&quot;requires&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;q&quot;&amp;gt;A query must be specified using the q parameter&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;version&quot;&amp;gt;This handler depends on version being explicitly set&amp;lt;/str&amp;gt;&lt;br/&gt;
    &amp;lt;/lst&amp;gt;&lt;br/&gt;
    ...&lt;br/&gt;
  &amp;lt;/requestHandler&amp;gt; &lt;/p&gt;

&lt;p&gt;RequestHandlerBase would add to the definition and initialization of defaults, extends, and invariants, a fourth SolrParams called requires.  Then when the init is building the (invariants --&amp;gt; ((request --&amp;gt; defaults) + appends))) chain with DefaultSolrParams and AppendedSolrParams (delegated to method SolrPluginUtils.setDefaults), it could interpose a new class RequiredSolrParams which acts like DefaultSolrParams except it accepts the &apos;requires&apos; SolrParams defined in the handler config, which in my proposal defines a param name/message pair.  If a param not found in the target SolrParams is defined in  &apos;requires&apos;, the exception is thrown.  Otherwise the RequiredSolrParams behaves similarly to DefaultSolrParams (which it extends) by delegating the request up the chain, or if no chain is defined returning null.&lt;/p&gt;

&lt;p&gt;Depending on what the programmer wants, the RequiredSolrParams could be chained with just the request params:&lt;br/&gt;
    (invariants -&amp;gt; ((requires -&amp;gt; request) -&amp;gt; defaults) + appends)&lt;br/&gt;
or could be chained with the entire chain as it exists:&lt;br/&gt;
    requires --&amp;gt; (invariants --&amp;gt; ((request --&amp;gt; defaults) + appends)))&lt;/p&gt;

&lt;p&gt;I&apos;ve attached an illustrative implementation.  I must apologize, while it compiles I have not yet tested it, I am under deadline and have spent too much time on this today already; I&apos;ll try to do so over the weekend, along with the RequestHandlerBase/SolrPluginUtils implementation.  It accepts a requires SolrParams as described above, with the values interpreted as a Formatter string.  It also has an &quot;always required&quot; mode with a method signature which accepts a fixed message format string.  It also has a convenience method (temporarily commented out because of method signature clash) which shows how you can provide custom messages for some parameters but have a stock default message for others.&lt;/p&gt;

&lt;p&gt;I believe this object should be compatible with what Ryan posted, e.g. you could add implementations for getXXX(param, default) which override the &quot;throw the exception&quot; behavior it now has.&lt;/p&gt;

&lt;p&gt;Anyway, I am open to feedback.  Useful? Excessive? Broken? Stupid?&lt;/p&gt;</comment>
                            <comment id="12478934" author="ryantxu" created="Wed, 7 Mar 2007 22:36:32 +0000"  >&lt;p&gt;It seems bad to have the requited params be user configurable.  The real use case is that the RequestHandler developer wants to ask for a parameter and know that the error checking is taken care of.  &lt;/p&gt;

&lt;p&gt;If the required params are configured externally, you run the risk of them getting out of sync with the handler code - not to mention that it really isn&apos;t something that should be configured.  If misconfigured you get a null pointer exception rather then 400...  defeating the purpose altogether.&lt;/p&gt;</comment>
                            <comment id="12478980" author="skeptikos" created="Thu, 8 Mar 2007 00:02:30 +0000"  >&lt;p&gt;By the way, I think your logic to catch type conversion errors and return 400 with a specific error rather than let the request dispatcher return a generic 500, is very useful, but should be implemented directly in SolrParams and then get inherited by RequiredSolrParams, ServletSolrParams, etc. &lt;/p&gt;

&lt;p&gt;The concern of &quot;supplied or not&quot; is different from the concern of &quot;well-formed or not&quot;, and params.getInt( param-returning-&quot;notint&quot; ) is an error, and should ALWAYS return a specific and informative exception (code and message) as you have done, regardless of the underlying SolrParams implementation.  Ditto for params.getInt( param-returning-&quot;notint&quot;, 999 ).&lt;/p&gt;</comment>
                            <comment id="12479175" author="skeptikos" created="Thu, 8 Mar 2007 00:38:26 +0000"  >&lt;p&gt;I was unfortunately not very clear, and confounded 2 things, an enhanced programmer-facing API, based on yours, for request-handler developers, and secondly an API supported by RequestHandlerBase for request handler configurators. &lt;/p&gt;

&lt;p&gt;From the programmer perspective, my contribution is simply to allow specification of either a global error format, and/or a parameter-specific definition of which parameters are required and how missing required parameters should be reported.  It has no negative impact on the use case you desire, and the modified code should pass all the exists/doesn&apos;t exist tests in your RequiredSolrParamTest.java; if you slapped in your method signatures that return 400 SolrExceptions on bad type conversion, either into my RequiredSolrParams or SolrParams as I suggested above, it should pass all the tests, and if not, I will make it so.&lt;/p&gt;

&lt;p&gt;For example,&lt;br/&gt;
    Map&amp;lt;String,String&amp;gt; rmap = new HashMap&amp;lt;String, String&amp;gt;();&lt;br/&gt;
    rmap.put( &quot;q&quot; , &quot;A query must be specified using the q parameter&quot;   );&lt;br/&gt;
    rmap.put( &quot;version&quot;     , &quot;This handler depends on version being explicitly set&quot; );&lt;br/&gt;
    SolrParams required = new RequiredSolrParams( params, new MapSolrParams( rmap ) );&lt;/p&gt;

&lt;p&gt;This is similar to the suggestion in Hoss&apos; first comment on this issue.&lt;/p&gt;

&lt;p&gt;The other use-case is for the RequestHandler configurator.  There are a lot more of those than RequestHandler programmers.  My model is that they are defining request handling service APIs by defining &amp;lt;requestHandler&amp;gt;s in solrconfig.  Those APIs can be used by other web programmers in the organization, who will make mistakes in calling the API, as we all do.  RequestHandlerBase gives RequestHandler configurators three options for controlling the API, the invariants defaults and appends.  I am simply proposing a 4th option to define which parameters are required, and the error message that should be returned in the case it is missing.  It&apos;s not a comprehensive parameter validation mechanism, but such would be beyond the scope of SOLR.  However as someone who is actively creating RequestHandler APIs for other programmers in my organization, using custom code when necessary but avoiding it whenever possible, I think it might be useful.&lt;/p&gt;

&lt;p&gt;And in no way does this second use-case by itself allow RH configurators to override the first use-case requirements set up by RH programmers, unless the RH programmers make explicit provision to do so.  For example, by chaining a DefaultSolrParams with params derived from a &amp;lt;requestHandler&amp;gt; requires list in front of a default MapSolrParams like the above, the RH programmer allows the RH configurator to add new requirements, and externally change the error strings for programmer-supplied requirements, but not to remove programmer-supplied requirements.&lt;/p&gt;

&lt;p&gt;Anyway, hopefully I&apos;ve better communicated the idea this time.&lt;/p&gt;</comment>
                            <comment id="12482215" author="ryantxu" created="Mon, 19 Mar 2007 20:53:23 +0000"  >&lt;p&gt;This update changes some things in response to JJ&apos;s comments.&lt;/p&gt;

&lt;p&gt;I agree the &quot;well-formed or not&quot; check should be directly in SolrParams - there is no reason to throw a 500 exception for rather then a 400 for bad input.&lt;/p&gt;

&lt;p&gt;That leaves the one open question:&lt;br/&gt;
Should getRequiredXXX() go directly in SolrParams or be implemented as a decorator?&lt;/p&gt;

&lt;p&gt;This patch puts it directly in SolrParams (I don&apos;t care either way, I just want something so that I don&apos;t rewrite it for every custom handler).  It also adds a test case for SolrParams.&lt;/p&gt;


&lt;p&gt;JJ, can we move the RequiredSolrParams.java to a different issue?  It seems like a reasonable proposal but it does help the reason i opened this issue: a standard/quick way for the RequestHandler author to make sure parameters are specified.  &lt;/p&gt;
</comment>
                            <comment id="12482455" author="skeptikos" created="Tue, 20 Mar 2007 17:30:13 +0000"  >&lt;p&gt;I totally agree with Ryan that the question I raised about the value of specifying required params in solrconfig.xml RH definitions should be separated from this simpler programmer-API case.  I will speak no more of that on &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-183&quot; title=&quot;add getRequiredParameter() to SolrParams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-183&quot;&gt;&lt;del&gt;SOLR-183&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ryan, after looking at your patch #4 I&apos;ve had a change of heart about the getRequiredXXX approach.  To do it properly would require reduplication of every method signature, e.g. getFieldInt() and so forth, and wouldn&apos;t make any use of the bottleneck imposed by get/getParams.  Hoss&apos; decorator approach coupled with your improved error handling automagically makes everything work with a trivial subclass.&lt;/p&gt;

&lt;p&gt;This time I implemented and tested everything (attachment #5).  RequiredSolrParams is kept as a freestanding class which can be externally instantiated, but is also returned by a SolrParams.required() convenience method so we could stash a reference if desired, e.g.&lt;br/&gt;
    params.required().getInt(&quot;xxx&quot;)&lt;br/&gt;
    params.required().getBoolean(&quot;yyy&quot;)&lt;br/&gt;
(but the wasted cycles and amount of garbage created from allocating  a new one is pretty trivial, so perhaps it&apos;s best not to add a slot to SolrParams)&lt;/p&gt;

&lt;p&gt;In the bottleneck approach the inline-default methods e.g. getBool(&quot;xxx&quot;, true) will fail when called on requires - but I think that is not such a bad thing.  Could be fixed if so desired with a _get().&lt;/p&gt;

&lt;p&gt;One open question is getFieldParam:  Should the semantics of required.getFieldParam(&quot;facet.limit&quot;, &quot;abc&quot;) be to fail if the parameter is not supplied for the field (e.g. f.abc.facet.limit), or not supplied for either the field or as a general default (e.g. facet.limit)?  In the former case we don&apos;t need to override getFieldParam.  I can&apos;t think of a reason that one would want to require explicit field values and disallow general values, but perhaps someone else could, and a &apos;field strictness&quot; flag should be supplied in the RequiredSolrParams constructor.  For the moment I made it non-strict, but put in a public value allowing that to be controlled.&lt;/p&gt;

&lt;p&gt;I changed the order of operations in SolrParamTest so it starts at the simplest cases (present and non-required and inline defaults), then malformed values, then required values. I added the fall-through case for getFieldXXX.  I also started some tests of  DefaultSolrParams, to be extended to to AppendedSolrParams (getParams needs testing as well).&lt;/p&gt;</comment>
                            <comment id="12482467" author="ryantxu" created="Tue, 20 Mar 2007 18:34:08 +0000"  >&lt;p&gt;Looks good.  thanks.  I agree it is cleaner as a decorator.  As a decorator, I think getInt( &apos;xxx&apos;, defaultVal ) shoould work, not throw an exception.&lt;/p&gt;

&lt;p&gt;I don&apos;t follow the strict/not strict logic to getFieldParam...  If you don&apos;t want strict checking, use the normal SolrParams, if you do, use RequiredSolrParams&lt;/p&gt;

&lt;p&gt;This update changes things so the basic contract with RequiredSolrParams is that you get back a valid non-null value (unless you pass it in as a default)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;functions with default values call the wrapped params directly&lt;/li&gt;
	&lt;li&gt;replaced tabs with 2 spaces&lt;/li&gt;
	&lt;li&gt;removed the &apos;strict&apos; field logic&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12482686" author="skeptikos" created="Wed, 21 Mar 2007 09:06:52 +0000"  >&lt;p&gt;Thanks for clarifying the semantics and the implementation, Ryan.&lt;/p&gt;

&lt;p&gt;It&apos;s fine by me to remove the &quot;strictField&quot; logic from getFieldParam; as I said, I wasn&apos;t sure there would be any cases where a developer considered defining a non-field-limited value (facet.limit) an insufficient means to fulfill definition of a field-specific value (f.xxx.facet.limit).  Should such a case ever arise, they could subclass RequiredSolrParams to override getFieldParam and accomplish that themself.&lt;/p&gt;</comment>
                            <comment id="12483885" author="yseeley@gmail.com" created="Sat, 24 Mar 2007 21:12:33 +0000"  >&lt;p&gt;Thanks, I just committed this.&lt;/p&gt;</comment>
                            <comment id="12589313" author="hossman" created="Wed, 16 Apr 2008 00:44:45 +0100"  >&lt;p&gt;This bug was modified as part of a bulk update using the criteria...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Marked (&quot;Resolved&quot; or &quot;Closed&quot;) and &quot;Fixed&quot;&lt;/li&gt;
	&lt;li&gt;Had no &quot;Fix Version&quot; versions&lt;/li&gt;
	&lt;li&gt;Was listed in the CHANGES.txt for 1.2&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The Fix Version for all 39 issues found was set to 1.2, email notification&lt;br/&gt;
was suppressed to prevent excessive email.&lt;/p&gt;

&lt;p&gt;For a list of all the issues modified, search jira comments for this&lt;br/&gt;
(hopefully) unique string: 20080415hossman2&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12362978">SOLR-162</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12362978">SOLR-162</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12352869" name="RequiredSolrParams.java" size="4683" author="skeptikos" created="Wed, 7 Mar 2007 22:23:28 +0000"/>
                            <attachment id="12353762" name="SOLR-183-required-param.patch" size="17627" author="ryantxu" created="Tue, 20 Mar 2007 18:34:08 +0000"/>
                            <attachment id="12353760" name="SOLR-183-required-param.patch" size="16580" author="skeptikos" created="Tue, 20 Mar 2007 17:30:59 +0000"/>
                            <attachment id="12353682" name="SOLR-183-required-param.patch" size="13166" author="ryantxu" created="Mon, 19 Mar 2007 20:53:23 +0000"/>
                            <attachment id="12352791" name="SOLR-183-required-param.patch" size="10926" author="ryantxu" created="Tue, 6 Mar 2007 21:59:40 +0000"/>
                            <attachment id="12352700" name="SOLR-183-required-param.patch" size="965" author="ryantxu" created="Tue, 6 Mar 2007 03:25:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 Mar 2007 18:37:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7403</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxsvz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20999</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>