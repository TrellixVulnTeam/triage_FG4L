<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:17:33 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-1475/SOLR-1475.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-1475] Java-based replication doesn&apos;t properly reserve its commit point during backups</title>
                <link>https://issues.apache.org/jira/browse/SOLR-1475</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;The issue title reflects Mark Miller&apos;s initial diagnosis of the problem.&lt;/p&gt;

&lt;p&gt;Here are my symptoms:&lt;/p&gt;

&lt;p&gt;This is regarding the backup feature of replication, as opposed to replication. Backups seem to work fine on toy indexes. When trying backups out on a copy of my production index (300GB-ish), though, I&apos;m getting FileNotFoundExceptions. These cancel the backup, and delete the snapshot.yyyymmdd* directory. It seems reproducible, in that every time I try to make a backup of my large index it will fail the same way.&lt;/p&gt;

&lt;p&gt;This is Solr r815830. I&apos;m not sure if this is something that would potentially be addressed by &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1458&quot; title=&quot;Java Replication error: NullPointerException SEVERE: SnapPull failed on 2009-09-22 nightly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1458&quot;&gt;&lt;del&gt;SOLR-1458&lt;/del&gt;&lt;/a&gt;? (That patch is from after r815830.)&lt;/p&gt;

&lt;p&gt;For now I&apos;m not using any event-based backup triggers; instead I&apos;m manually hitting&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://master_host:port/solr/replication?command=backup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://master_host:port/solr/replication?command=backup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This successfully sets off a snapshot, as seen in a thread dump.  However, after a while the snapshot fails. I&apos;ll paste in a couple of stack traces below.&lt;/p&gt;

&lt;p&gt;I haven&apos;t seen any other evidence that my index is corrupt; in particular, searching the index and Java-based replication seem to be working fine, and the Lucene CheckIndex tool did not report any problems with the index.&lt;/p&gt;

&lt;p&gt;********************&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Sep 28, 2009 9:32:18 AM org.apache.solr.handler.SnapShooter createSnapshot
SEVERE: Exception &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; creating snapshot
java.io.FileNotFoundException: Source
&apos;E:\tomcat\solrstuff\solr\filingcore\data\index\_y0w.fnm&apos; does not
exist
       at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:637)
       at org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:587)
       at org.apache.solr.handler.SnapShooter.createSnapshot(SnapShooter.java:83)
       at org.apache.solr.handler.SnapShooter$1.run(SnapShooter.java:61)

Sep 28, 2009 10:39:43 AM org.apache.solr.handler.SnapShooter createSnapshot
SEVERE: Exception &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; creating snapshot
java.io.FileNotFoundException: Source
&apos;E:\tomcat\solrstuff\solr\filingcore\data\index\segments_by&apos; does not
exist
       at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:637)
       at org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:587)
       at org.apache.solr.handler.SnapShooter.createSnapshot(SnapShooter.java:83)
       at org.apache.solr.handler.SnapShooter$1.run(SnapShooter.java:61)


Sep 28, 2009 11:52:08 AM org.apache.solr.handler.SnapShooter createSnapshot
SEVERE: Exception &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; creating snapshot
java.io.FileNotFoundException: Source
&apos;E:\tomcat\solrstuff\solr\filingcore\data\index\_yby.nrm&apos; does not
exist
       at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:637)
       at org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:587)
       at org.apache.solr.handler.SnapShooter.createSnapshot(SnapShooter.java:83)
       at org.apache.solr.handler.SnapShooter$1.run(SnapShooter.java:61)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12436853">SOLR-1475</key>
            <summary>Java-based replication doesn&apos;t properly reserve its commit point during backups</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                    <reporter username="ryguasu">Chris Harris</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Sep 2009 21:20:49 +0100</created>
                <updated>Tue, 10 Nov 2009 15:52:17 +0000</updated>
                            <resolved>Fri, 9 Oct 2009 22:52:52 +0100</resolved>
                                    <version>1.4</version>
                                    <fixVersion>1.4</fixVersion>
                                    <component>replication (java)</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12760736" author="markrmiller@gmail.com" created="Tue, 29 Sep 2009 23:01:32 +0100"  >&lt;p&gt;So I don&apos;t really know the java replication code at all, but here is a patch I was playing with.&lt;/p&gt;

&lt;p&gt;Its uncommitable.&lt;/p&gt;

&lt;p&gt;It has a test that was only useful for me to check that things were broke and that were fixed, but it doesn&apos;t fail in either case.&lt;br/&gt;
It has a tiny bit of test code to cause a pause between copying files so i could make it take long enough without using a huge index.&lt;/p&gt;

&lt;p&gt;its written by someone that doesn&apos;t know the java replication code at all.&lt;/p&gt;

&lt;p&gt;but i think its generally how the fix should/would work and may be useful to someone else.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;edit&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Oh yeah: there is also some unpolished ugliness even with the code thats not throw away test code.&lt;/p&gt;</comment>
                            <comment id="12760747" author="yseeley@gmail.com" created="Tue, 29 Sep 2009 23:23:21 +0100"  >&lt;p&gt;Here are the various ways I&apos;ve thought of doing it:&lt;br/&gt;
1. write your own copy that interleaves short term reservations&lt;br/&gt;
2. asynchronously (in a separate thread) make short term reservations while a different thread is actually doing copyFiles()&lt;br/&gt;
3. do a super-long reservation before invoking copyFiles() and then set it back to a short reservation after done (the problem being that if someone else made a super long reservation, it would be lost).&lt;/p&gt;

&lt;p&gt;On a quick peek, it looks like you opted for #1&lt;/p&gt;

&lt;p&gt;One thought on efficiency is to try and use FileChannel.transferTo() to potentially skip the user-space copy altogether.  We&apos;d probably want to use relatively large block sizes too - 4 to 8MB perhaps?&lt;/p&gt;</comment>
                            <comment id="12760755" author="markrmiller@gmail.com" created="Tue, 29 Sep 2009 23:40:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;On a quick peek, it looks like you opted for #1&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah - originally, I was thinking about how it should be done, but when I saw that it was done somewhat this way for transferring to slaves, I just went with it. Since its local though, perhaps another method is better.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One thought on efficiency is to try and use FileChannel.transferTo() to potentially skip the user-space copy altogether&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Considered that too - a few years ago I measured it as much faster - but I also thought I remembered that stream based copying was faster on large files with Windows. So I just went safe and went with the method it was currently using in this patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We&apos;d probably want to use relatively large block sizes too - 4 to 8MB perhaps?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed - I picked 4 times the buffer size out of a hat. Really should be based on whats reasonable to transfer within about 10 seconds with a good margin of safety. 4-8 sounds pretty good to me.&lt;/p&gt;</comment>
                            <comment id="12761641" author="markrmiller@gmail.com" created="Fri, 2 Oct 2009 17:51:42 +0100"  >&lt;p&gt;Here is a version that is &lt;b&gt;much&lt;/b&gt; closer to commitable.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;edit&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Couple issues with the test though - &lt;/p&gt;

&lt;p&gt;1. in the test, ive still got the teardown commented out - needs to be put back.&lt;/p&gt;

&lt;p&gt;2. The wait loop just waits for the snapshot dir to show up - not necessarily the full copy to be done - just happens to finish fast enough on my machine anyway&lt;/p&gt;

&lt;p&gt;3. Test doesnt test that the reserve works right - I couldn&apos;t find a good clean way to do that without the pause stuff I introduced in the last patch. Tested it works right with that though. This test just tests that the backup is made and is a searchable index with all of the docs.&lt;/p&gt;</comment>
                            <comment id="12761976" author="markrmiller@gmail.com" created="Sun, 4 Oct 2009 00:39:20 +0100"  >&lt;p&gt;New patch coming soon -&lt;/p&gt;

&lt;p&gt;cleans up some of what I mention and fixes what appears to be a little bug - you can&apos;t get stats about the backup details unless tempSnapPuller != null - so if you don&apos;t do a fetch first, and just ask for a backup, that means you can&apos;t get the details on your backup&apos;s success and whatnot. So I have moved that out of the if block that prevents it.&lt;/p&gt;</comment>
                            <comment id="12762028" author="markrmiller@gmail.com" created="Sun, 4 Oct 2009 16:33:40 +0100"  >&lt;p&gt;Okay, I think this patch is looking pretty good.&lt;/p&gt;</comment>
                            <comment id="12762031" author="markrmiller@gmail.com" created="Sun, 4 Oct 2009 17:28:53 +0100"  >&lt;p&gt;Wasnt sure how to add Changes for this - was going to incorporate into the orig issue with: additional bug fixes by ... since replication hasn&apos;t been released and I&apos;ve been pro Changes reading correctly from release to release ...&lt;/p&gt;

&lt;p&gt;But since others have already added new entries for fixes with replication anyway, Ill just add it as  a new bug fix entry.&lt;/p&gt;</comment>
                            <comment id="12762412" author="markrmiller@gmail.com" created="Mon, 5 Oct 2009 23:13:13 +0100"  >&lt;p&gt;I&apos;ll give a bit for someone to review if they want - but should prob commit this soon.&lt;/p&gt;</comment>
                            <comment id="12762513" author="noble.paul" created="Tue, 6 Oct 2009 06:19:13 +0100"  >&lt;p&gt;hi Mark .  guess we can use the reserve/release methods in the latest patch of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1458&quot; title=&quot;Java Replication error: NullPointerException SEVERE: SnapPull failed on 2009-09-22 nightly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1458&quot;&gt;&lt;del&gt;SOLR-1458&lt;/del&gt;&lt;/a&gt; for this too&lt;/p&gt;</comment>
                            <comment id="12762640" author="markrmiller@gmail.com" created="Tue, 6 Oct 2009 15:25:31 +0100"  >&lt;p&gt;Makes sense to me. Should be a more efficient copy as we can do a Channel transfer of the whole file rather than in chunks.&lt;/p&gt;

&lt;p&gt;Thought about adding that to begin with, but wasn&apos;t up to speed on all of this, and thought perhaps the reservations were sticky - so that if something went wrong, when Solr booted back up, it would see the reservation was over and still remove the commit point, whereas, if you reserved it forever, maybe it wouldn&apos;t. Obviously not the case though.&lt;/p&gt;</comment>
                            <comment id="12763483" author="markrmiller@gmail.com" created="Thu, 8 Oct 2009 14:01:53 +0100"  >&lt;p&gt;Hmm - while Channel transfer is generally a win to equal with smaller files (ie &amp;lt; a gig) if you use a good sized buffer (about 32MB looking like the sweet spot), streams is looking &lt;b&gt;much&lt;/b&gt; better on multi gig files. I think the best method is likely one that chooses one or the other based on the file size.&lt;/p&gt;</comment>
                            <comment id="12763503" author="yseeley@gmail.com" created="Thu, 8 Oct 2009 15:27:53 +0100"  >&lt;blockquote&gt;&lt;p&gt;streams is looking much better on multi gig files&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Grrr... sun messed this up too?&lt;br/&gt;
Related: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1121&quot; title=&quot;Use nio.transferTo when copying large blocks of bytes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1121&quot;&gt;&lt;del&gt;LUCENE-1121&lt;/del&gt;&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HADOOP-3164&quot; title=&quot;Use FileChannel.transferTo() when data is read from DataNode.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HADOOP-3164&quot;&gt;&lt;del&gt;HADOOP-3164&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see a CPU consumption difference when using transferTo?&lt;/p&gt;</comment>
                            <comment id="12763518" author="markrmiller@gmail.com" created="Thu, 8 Oct 2009 16:17:22 +0100"  >&lt;p&gt;transfer does use less cpu -&lt;/p&gt;

&lt;p&gt;it appears to work like this:&lt;/p&gt;

&lt;p&gt;if you just load up the JVM and transfer the 2 gig test file I am using, transfer is actually a bit faster to roughly similar. Generally a bit faster.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;but&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;if you do a bunch of stream copying first - and then use transfer - its a &lt;b&gt;dog&lt;/b&gt; - the more copying first, the worse it appears to be.&lt;/p&gt;

&lt;p&gt;But stream copying does not appear to degrade like that ...&lt;/p&gt;

&lt;p&gt;I&apos;m using a 1 gig heap for these tests.&lt;/p&gt;</comment>
                            <comment id="12763523" author="markrmiller@gmail.com" created="Thu, 8 Oct 2009 16:28:24 +0100"  >&lt;p&gt;I see the issue - I read somewhere that you don&apos;t want/need to chunk the transfer - but you certainly do. That mostly takes care of it. It still appears a bit slower after a lot of IO, but not really enough to matter and probably worth the lower cpu.&lt;/p&gt;

&lt;p&gt;The windows server results are still scary though - perhaps we should only use transfer on when detecting non windows?&lt;/p&gt;</comment>
                            <comment id="12763525" author="yseeley@gmail.com" created="Thu, 8 Oct 2009 16:34:14 +0100"  >&lt;p&gt;interesting... I guess we should be safe and just use the old stream copying for now.&lt;/p&gt;

&lt;p&gt;Just out of curiosity though:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;if you do a bunch of stream copying first - and then use transfer&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;transferTo to a different file, not the same one, right?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;- its a dog - the more copying first, the worse it appears to be.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;hmmm, so transferTo causes the write buffers to be flushed or something?&lt;/p&gt;</comment>
                            <comment id="12763528" author="markrmiller@gmail.com" created="Thu, 8 Oct 2009 16:38:02 +0100"  >&lt;blockquote&gt;&lt;p&gt;transferTo to a different file, not the same one, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes - different files first with the stream, then Channel on the 2 gig large file - but it turned out to be because I was transfering the whole thing in one go (some bad advice I read). Chunking by 10 MB removes the issue.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;hmmm, so transferTo causes the write buffers to be flushed or something?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Certainly does something you don&apos;t want to do &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Takes a while for my system to recover after that as well. But like I said, chunking appears to solve.&lt;/p&gt;</comment>
                            <comment id="12763541" author="yseeley@gmail.com" created="Thu, 8 Oct 2009 17:00:49 +0100"  >&lt;p&gt;Hmmm, maybe it&apos;s trying to set up a DMA for the complete thing or something, and the unflushed write buffers are in the way (and hence need to be flushed).&lt;/p&gt;</comment>
                            <comment id="12763571" author="markrmiller@gmail.com" created="Thu, 8 Oct 2009 18:15:06 +0100"  >&lt;p&gt;Grrr - NM - at first blush it appears that chunking kills the cpu win - makes sense - before it uses cpu at the start, then stops using - I guess now there are lots of starts. Not seeing a win at all anymore.&lt;/p&gt;</comment>
                            <comment id="12763999" author="markrmiller@gmail.com" created="Fri, 9 Oct 2009 13:54:48 +0100"  >&lt;p&gt;Back to streams copying since I can&apos;t seem to win with NIO (thats a familiar story).&lt;/p&gt;

&lt;p&gt;I know Noble wanted to switch this to using set/release commit point, but since that patch is not committed yet, its not in here.&lt;/p&gt;

&lt;p&gt;I&apos;m vaca today and mon, and I&apos;m not sure how much I&apos;ll be coding (headed up to Burlington VT later today), so if someone wants to take this over, that would be great.&lt;/p&gt;

&lt;p&gt;Other than the possible switch to the different reserve method, I think it just needs a good review.&lt;/p&gt;</comment>
                            <comment id="12764021" author="yseeley@gmail.com" created="Fri, 9 Oct 2009 14:42:02 +0100"  >&lt;p&gt;I&apos;ll take it - have a good vacation!&lt;/p&gt;</comment>
                            <comment id="12764195" author="yseeley@gmail.com" created="Fri, 9 Oct 2009 21:53:12 +0100"  >&lt;p&gt;OK, here&apos;s my update to Mark&apos;s patch... pretty much just using saveCommitPoint instead of doing short duration reserves.  I plan on committing shortly.&lt;/p&gt;</comment>
                            <comment id="12764219" author="yseeley@gmail.com" created="Fri, 9 Oct 2009 22:52:52 +0100"  >&lt;p&gt;committed.&lt;/p&gt;</comment>
                            <comment id="12775896" author="gsingers" created="Tue, 10 Nov 2009 15:52:17 +0000"  >&lt;p&gt;Bulk close for Solr 1.4&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12436479">SOLR-1458</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12421771" name="SOLR-1475.patch" size="13948" author="yseeley@gmail.com" created="Fri, 9 Oct 2009 21:53:12 +0100"/>
                            <attachment id="12421735" name="SOLR-1475.patch" size="12614" author="markrmiller@gmail.com" created="Fri, 9 Oct 2009 13:54:48 +0100"/>
                            <attachment id="12421229" name="SOLR-1475.patch" size="12521" author="markrmiller@gmail.com" created="Sun, 4 Oct 2009 16:33:40 +0100"/>
                            <attachment id="12421123" name="SOLR-1475.patch" size="10773" author="markrmiller@gmail.com" created="Fri, 2 Oct 2009 17:51:41 +0100"/>
                            <attachment id="12420839" name="SOLR-1475.patch" size="9699" author="markrmiller@gmail.com" created="Tue, 29 Sep 2009 23:01:32 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Sep 2009 22:01:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6182</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxl1j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19728</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>