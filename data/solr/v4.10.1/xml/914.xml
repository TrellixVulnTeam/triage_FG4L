<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:25:06 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-914/SOLR-914.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-914] Presence of finalize() in the codebase </title>
                <link>https://issues.apache.org/jira/browse/SOLR-914</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;There seems to be a number of classes - that implement finalize() method.  Given that it is perfectly ok for a Java VM to not to call it - may be - there has to some other way  &lt;/p&gt;
{ try .. finally - when they are created to destroy them }
&lt;p&gt; to destroy them and the presence of finalize() method , ( depending on implementation ) might not serve what we want and in some cases can end up delaying the gc process, depending on the algorithms. &lt;/p&gt;

&lt;p&gt;$ find . -name *.java | xargs grep finalize&lt;br/&gt;
./contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.java:  protected void finalize() {&lt;br/&gt;
./src/java/org/apache/solr/update/SolrIndexWriter.java:  protected void finalize() {&lt;br/&gt;
./src/java/org/apache/solr/core/CoreContainer.java:  protected void finalize() {&lt;br/&gt;
./src/java/org/apache/solr/core/SolrCore.java:  protected void finalize() {&lt;br/&gt;
./src/common/org/apache/solr/common/util/ConcurrentLRUCache.java:  protected void finalize() throws Throwable {&lt;/p&gt;

&lt;p&gt;May be we need to revisit these occurences from a design perspective to see if they are necessary / if there is an alternate way of managing guaranteed destruction of resources. &lt;/p&gt;</description>
                <environment>&lt;p&gt;Tomcat 6, JRE 6&lt;/p&gt;</environment>
        <key id="12410659">SOLR-914</key>
            <summary>Presence of finalize() in the codebase </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hossman">Hoss Man</assignee>
                                    <reporter username="kaykay.unique">Karthik K</reporter>
                        <labels>
                    </labels>
                <created>Sun, 14 Dec 2008 17:37:44 +0000</created>
                <updated>Tue, 10 Nov 2009 15:51:53 +0000</updated>
                            <resolved>Wed, 26 Aug 2009 05:21:12 +0100</resolved>
                                    <version>1.3</version>
                                    <fixVersion>1.4</fixVersion>
                                    <component>clients - java</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                    <timeoriginalestimate seconds="1728000">480h</timeoriginalestimate>
                            <timeestimate seconds="1728000">480h</timeestimate>
                                        <comments>
                            <comment id="12656421" author="noble.paul" created="Sun, 14 Dec 2008 17:49:03 +0000"  >&lt;p&gt;The fact that there are only 5 instances of these tells that it may not be an put inadvertently.&lt;/p&gt;

&lt;p&gt;two of them are my own creation. The code does not rely on these methods . But the consumers of these classes may forget to call the close/destroy methods explicitly . In such cases finalize() is just a fallback option&lt;/p&gt;</comment>
                            <comment id="12656424" author="kaykay.unique" created="Sun, 14 Dec 2008 18:04:04 +0000"  >&lt;p&gt;Precisely. I believe - we should get away with the same since in our case  - when we try to shutdown and restart SolrCore - we are noticing instances where the gc thread postpones collecting the objects until finalize() is invoked. &lt;/p&gt;

&lt;p&gt;Given that finalize() is spec-d such that there is no guarantee of being called  (and worse, if the implementation does decide , it does not collect the object until the method is invoked ).  &lt;/p&gt;

&lt;p&gt;So - inserting a no-guarantee fallback option seems to doing more harm than good here. &lt;/p&gt;</comment>
                            <comment id="12656879" author="noble.paul" created="Tue, 16 Dec 2008 04:26:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;we are noticing instances where the gc thread postpones collecting the objects until finalize() is invoked. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is true but GC thread only has to wait for the time duration of the finalize() method call. So which class exactly is the culprit here in your case?&lt;/p&gt;</comment>
                            <comment id="12657023" author="kaykay.unique" created="Tue, 16 Dec 2008 15:36:58 +0000"  >&lt;p&gt;Primarily SolrCore and SolrIndexWriter ( specifically for my use-case ). &lt;/p&gt;

&lt;p&gt;Also - just noticed that - CoreContainer.finalize() ( calls shutdown() ) - has a synchronized block.  While it is not a bottleneck for me , per se, (since I believe all through the life of the web-app , an instance of CoreContainer is alive and reachable , correct me if I am wrong here ). I believe we might need to revisit this if we were to extend this / provide orthogonal integration with other apps. &lt;/p&gt;

</comment>
                            <comment id="12657067" author="kaykay.unique" created="Tue, 16 Dec 2008 17:22:10 +0000"  >&lt;p&gt;Separately - it might be worth to wrap around the code with a try .. finally &lt;/p&gt;
{ super.finalize(); }
&lt;p&gt; for all the custom finalizers for better code correctness. &lt;/p&gt;

&lt;p&gt;JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-924&quot; title=&quot;Solr: Making finalizers call super.finalize() wrapped in try..finally block &quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-924&quot;&gt;&lt;del&gt;SOLR-924&lt;/del&gt;&lt;/a&gt; logged for the same. Patch submitted for the new jira as well. &lt;/p&gt;</comment>
                            <comment id="12657181" author="kaykay.unique" created="Tue, 16 Dec 2008 22:00:21 +0000"  >&lt;p&gt;try { &lt;/p&gt;

&lt;p&gt;} finally &lt;/p&gt;
{ 
  super.finalize();
}
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;implemented for all existing finalizer code.&lt;/p&gt;</comment>
                            <comment id="12660668" author="lancenorskog" created="Mon, 5 Jan 2009 05:41:18 +0000"  >&lt;p&gt;A note: it is a good practice to use finalize() methods to check that a resource has already been released. It should log an error if the resource has not been released. Finalize() methods are all parked on one queue and that queue can back up. This can eventually cause the app to lock up. This is why it is not good to do I/O actions (like close a database connection) inside the finalize method.&lt;/p&gt;

&lt;p&gt;If the method only checks an internal marker, that will not cause a backup.&lt;/p&gt;</comment>
                            <comment id="12663540" author="kaykay.unique" created="Tue, 13 Jan 2009 23:35:49 +0000"  >&lt;p&gt;SolrIndexWriter#finalize() seems to delegate the same to IndexWriter.close() which is quite expensive. &lt;/p&gt;

&lt;p&gt;ConcurrentLRUCache#finalize() seems to close a thread (by means of notify() ) . I am not sure if those methods are good enough candidates to be present in finalize() since they seem to do more than logging at this point. &lt;/p&gt;</comment>
                            <comment id="12666058" author="hossman" created="Thu, 22 Jan 2009 05:46:36 +0000"  >&lt;p&gt;IndexWriter.close() is very cheap &lt;b&gt;if&lt;/b&gt; the IndexWriter is already closed ... if it&apos;s not already closed, then doing so in the finalize() method is our last resort. (but I would think a patch to IndexWriter to make it explicitly implement an &quot;isClosed() method would certainly be nice to help keep the code clean and make it possible to log a warning).&lt;/p&gt;

&lt;p&gt;Ditto for ConcurrentLRUCache ... finalize calls destroy which sets the stop flag and notifies the thread ... calling destroy() again shouldn&apos;t be that expensive if the client has already called it (which FastLRUCache does) &amp;#8211; but changing the code to record when destroy() has been called, and log a warning in finalize if it hasn&apos;t been called yet (then calling it) seems like a good idea.&lt;/p&gt;

</comment>
                            <comment id="12711610" author="markrmiller@gmail.com" created="Thu, 21 May 2009 14:00:27 +0100"  >&lt;p&gt;I agree with Kay Kay and Lance here - I don&apos;t think we should be doing any closing/shutdown with finalize. Logging a warning seems like the right way to go to me. This is the type of thing that hides problems, and it just doesn&apos;t do it cleanly.&lt;/p&gt;</comment>
                            <comment id="12712576" author="noble.paul" created="Sun, 24 May 2009 18:21:24 +0100"  >&lt;p&gt;what do we plan to do with this? &lt;/p&gt;</comment>
                            <comment id="12725930" author="noble.paul" created="Wed, 1 Jul 2009 06:27:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;Logging a warning seems like the right way to go to me&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;so do you mean , logging a warning and do not do cleanup. or log a warning and do the cleanup ?&lt;/p&gt;

&lt;p&gt;I would prefer the latter because the system will continue to work &lt;/p&gt;</comment>
                            <comment id="12729593" author="noble.paul" created="Fri, 10 Jul 2009 11:21:20 +0100"  >&lt;p&gt;all the finalize () methods check once if the object is already closed. if not log a warning and close&lt;/p&gt;</comment>
                            <comment id="12729769" author="kaykay.unique" created="Fri, 10 Jul 2009 19:49:54 +0100"  >&lt;p&gt;What I meant is (and others who had commented on the jira seem to concur) - logging a warning is ok. &lt;/p&gt;

&lt;p&gt;Code to release resources should be avoided as a finalize is no equivalent to a C++ dtor. &lt;/p&gt;

&lt;p&gt;This patch does not seem to address the issue. &lt;/p&gt;
</comment>
                            <comment id="12730273" author="noble.paul" created="Mon, 13 Jul 2009 11:01:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;Code to release resources should be avoided as a finalize is no equivalent to a C++ dtor.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes. But if the user has forgotten to do so  It is not a good idea to punish him by blowing up. A warning should be enough. &lt;/p&gt;</comment>
                            <comment id="12742740" author="noble.paul" created="Thu, 13 Aug 2009 07:37:14 +0100"  >&lt;p&gt;There seems to be no consensus on the fix. Unassigning myself&lt;/p&gt;</comment>
                            <comment id="12743562" author="hossman" created="Sat, 15 Aug 2009 08:36:56 +0100"  >&lt;p&gt;I don&apos;t understand objections to the idea that finalize should close if (and only it) the resource hasn&apos;t already been closed ... people shouldn&apos;t relying on it, but having code that aids in the prevention of resource leaks doesn&apos;t seem like abad thing to me.&lt;/p&gt;

&lt;p&gt;the only things i would change about this patch...&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;make the logging done by the finalizer methods more serious (error or maybe even fatal) and make them convey &lt;b&gt;why&lt;/b&gt; it&apos;s an error (&quot;...was not closed prior to finalizing&quot;)&lt;/li&gt;
	&lt;li&gt;SolrIndexWriter.finalize() still calls super.close() (only this.close() should ever call super.close())&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12743773" author="lancenorskog" created="Sat, 15 Aug 2009 22:14:33 +0100"  >&lt;p&gt;Yes, Solr should keep working. But somewhere in the logs (that a few people read) it should note that the resource should have been closed before the finalize. So, yes, the patch is right in that it does the shutdown codes inside try{} blocks that ignore errors.&lt;/p&gt;

&lt;p&gt;+1 on on the current patch and the policy it implements.&lt;/p&gt;</comment>
                            <comment id="12745606" author="hossman" created="Thu, 20 Aug 2009 21:02:53 +0100"  >&lt;p&gt;revised patch with the improvements i mentioned earlier, also fixes a cut/paste mistake in one of the log messages.&lt;/p&gt;</comment>
                            <comment id="12745790" author="noble.paul" created="Fri, 21 Aug 2009 05:57:30 +0100"  >&lt;p&gt;I guess this should be enough.&lt;/p&gt;</comment>
                            <comment id="12747762" author="hossman" created="Wed, 26 Aug 2009 05:21:12 +0100"  >&lt;p&gt;Committed revision 807872.&lt;/p&gt;


&lt;p&gt;FYI: this patch surfaced some bugs in TestFastLRUCache where the cache wasn&apos;t being closed properly.&lt;/p&gt;</comment>
                            <comment id="12775607" author="gsingers" created="Tue, 10 Nov 2009 15:51:53 +0000"  >&lt;p&gt;Bulk close for Solr 1.4&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12410846">SOLR-924</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12410846">SOLR-924</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12417166" name="SOLR-914.patch" size="4496" author="hossman" created="Thu, 20 Aug 2009 21:02:53 +0100"/>
                            <attachment id="12413099" name="SOLR-914.patch" size="4308" author="noble.paul" created="Fri, 10 Jul 2009 11:21:20 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 14 Dec 2008 17:49:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6719</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxofj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20277</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>