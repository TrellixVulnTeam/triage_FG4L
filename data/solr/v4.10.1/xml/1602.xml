<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:23:32 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-1602/SOLR-1602.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-1602] Refactor SOLR package structure to include o.a.solr.response and move QueryResponseWriters in there</title>
                <link>https://issues.apache.org/jira/browse/SOLR-1602</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;Currently all o.a.solr.request.QueryResponseWriter implementations are curiously located in the o.a.solr.request package. Not only is this package getting big (30+ classes), a lot of them are misplaced. There should be a first-class o.a.solr.response package, and the response related classes should be given a home there. Patch forthcoming.&lt;/p&gt;</description>
                <environment>&lt;p&gt;independent of environment (code structure)&lt;/p&gt;</environment>
        <key id="12441702">SOLR-1602</key>
            <summary>Refactor SOLR package structure to include o.a.solr.response and move QueryResponseWriters in there</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ryantxu">Ryan McKinley</assignee>
                                    <reporter username="chrismattmann">Chris A. Mattmann</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Nov 2009 19:17:11 +0000</created>
                <updated>Wed, 30 Mar 2011 16:45:44 +0100</updated>
                            <resolved>Thu, 3 Jun 2010 01:57:16 +0100</resolved>
                                    <version>1.2</version>
                    <version>1.3</version>
                    <version>1.4</version>
                                    <fixVersion>3.1</fixVersion>
                    <fixVersion>4.0-ALPHA</fixVersion>
                                    <component>Response Writers</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12782647" author="chrismattmann" created="Wed, 25 Nov 2009 22:03:20 +0000"  >&lt;ul&gt;
	&lt;li&gt;moves all writers from o.a.solr.request into o.a.solr.response&lt;/li&gt;
	&lt;li&gt;moves SolrQueryResponse into o.a.solr.response&lt;/li&gt;
	&lt;li&gt;updates unit tests and rest of code to have correct references&lt;/li&gt;
	&lt;li&gt;updates embedded solr code inside webapp to have correct references&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12782648" author="chrismattmann" created="Wed, 25 Nov 2009 22:04:46 +0000"  >&lt;p&gt;This patch also:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;creates an o.a.solr.response test package, and moves response writer related (and response related) tests into that package&lt;/li&gt;
	&lt;li&gt;updates the solrconfig.xml file to ref the proper package structure&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12782761" author="chrismattmann" created="Thu, 26 Nov 2009 06:08:26 +0000"  >&lt;ul&gt;
	&lt;li&gt;newest patch includes updates to all contrib classes that ensure they work with the new package structure&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12795016" author="pjaol" created="Tue, 29 Dec 2009 06:10:42 +0000"  >&lt;p&gt;total +1&lt;/p&gt;

&lt;p&gt;Makes it a pain to have to use find to code, and response seems like the right place for the writers. &lt;/p&gt;


</comment>
                            <comment id="12795341" author="ryantxu" created="Wed, 30 Dec 2009 16:18:55 +0000"  >&lt;p&gt;Sounds fine... except for the back compatibility issues &amp;#8211; especially for people upgrading with the same solrconfig.xml&lt;/p&gt;

&lt;p&gt;When we moved all the handlers to a new package o.a.solr.handler, it left a bunch of deprecated calsses in o.a.solr.request:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Deprecated 
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class StandardRequestHandler &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; org.apache.solr.handler.StandardRequestHandler {
 &lt;span class=&quot;code-comment&quot;&gt;// Don&apos;t use &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; class
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, if we make a &apos;response&apos; package, seems SolrQueryResponse.java should go there.&lt;/p&gt;</comment>
                            <comment id="12795346" author="chrismattmann" created="Wed, 30 Dec 2009 16:33:30 +0000"  >&lt;p&gt;Hi Ryan:&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sounds fine... except for the back compatibility issues - especially for people upgrading with the same solrconfig.xml &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are 8 response writers defined by default in solrconfig.xml. That doesn&apos;t seem too unwieldy a job for find/replace as far as configuration upgrades for someone moving from SOLR x.y to SOLR 1.5.&lt;/p&gt;

&lt;p&gt;As for code, yes, unfortunately users will have to recompile their response writers and update a few package names/imports per response writer which they&apos;d probably want/have to do anyways on an upgrade regardless. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When we moved all the handlers to a new package o.a.solr.handler, it left a bunch of deprecated calsses in o.a.solr.request.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You could certainly do this, and I&apos;ve done it before in other projects. The tradeoff is, what type of message from the Java compiler do you want to notify you as a consumer of the SOLR java classes:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;A deprecation (that could easily get swallowed if someone compiles with deprecation notifications off)&lt;/li&gt;
	&lt;li&gt;A compiler error, forcing the user to perform the small amount of legwork to update package refs&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I&apos;m a fan of number 2, and I&apos;d venture to guess the work wouldn&apos;t be too bad in this case since most of the ReponseWriters aren&apos;t friendly to user extension or sub-classing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, if we make a &apos;response&apos; package, seems SolrQueryResponse.java should go there.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed, the patch I attached should move it there.&lt;/p&gt;</comment>
                            <comment id="12795352" author="ryantxu" created="Wed, 30 Dec 2009 16:59:10 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; I&apos;m a fan of number 2, and I&apos;d venture to guess the work wouldn&apos;t be too bad in this case since most of the ReponseWriters aren&apos;t friendly to user extension or sub-classing.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;but since this is a breaking change &amp;#8211; that would need explicitly called out in CHANGES.txt, we should get pretty wide consensus before moving forward...&lt;/p&gt;</comment>
                            <comment id="12795355" author="chrismattmann" created="Wed, 30 Dec 2009 17:08:39 +0000"  >&lt;p&gt;Hi Ryan:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;but since this is a breaking change - that would need explicitly called out in CHANGES.txt, we should get pretty wide consensus before moving forward...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, I&apos;ll call a vote.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12795371" author="noble.paul" created="Wed, 30 Dec 2009 18:13:15 +0000"  >&lt;p&gt;the patch does not apply. iis it not updated to trunk?&lt;/p&gt;</comment>
                            <comment id="12795373" author="chrismattmann" created="Wed, 30 Dec 2009 18:16:56 +0000"  >&lt;p&gt;Hi Noble,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the patch does not apply. iis it not updated to trunk? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure, what message you getting? I&apos;ll take a look. I posted it originally in November so it&apos;s entirely possible it&apos;s out of date.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12795428" author="ryantxu" created="Wed, 30 Dec 2009 20:17:02 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; the patch does not apply. iis it not updated to trunk?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;I&apos;ve never had good luck with patches for moving files.  Even if it applies correctly, if you commit the patch, the svn history does not show that the file was moved.  (unless this has been fixed in the last year since i looked)&lt;/p&gt;

&lt;p&gt;For refactoring like this, whoever commits this will probably need to make the changes directly.&lt;/p&gt;</comment>
                            <comment id="12795431" author="chrismattmann" created="Wed, 30 Dec 2009 20:23:19 +0000"  >&lt;p&gt;Hey Ryan,&lt;/p&gt;

&lt;p&gt;You are exactly right. When I created the patch in Eclipse, it negated to do the add +++ part of the patch b/c it saw the files as getting moved. Note that&apos;s why the patch doesn&apos;t apply &amp;#8211; it tries to make changes to the response writer class packages based on the path org/apache/solr/response/&amp;lt;WriterName&amp;gt;.java, which doesn&apos;t exist yet.&lt;/p&gt;

&lt;p&gt;To apply this patch:&lt;/p&gt;

&lt;p&gt;1. first move the response writers into a new folder (response). Also copy SolrQueryResponse there.&lt;br/&gt;
2. apply the patch&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12795727" author="hossman" created="Fri, 1 Jan 2010 03:08:33 +0000"  >
&lt;p&gt;I&apos;ve got no strong opinions about moving the code (it would probably be easier to understand if we changed it, but so many people use IDEs these days that i odn&apos;t know if it matters) but if we do change it i&apos;d prefer to go the deprecation route just out of consistency with how we&apos;ve dealt with the RequestHandlers and other utilities classes in the past &amp;#8211; it&apos;s relatively trivial to do, so there&apos;s very little down side &amp;#8211; and while it&apos;s true someone w/ deprecation warnings turned off probably won&apos;t notice &amp;#8211; that&apos;s kind of the point behind doing deprecations, you get them if you want, you ignore them if you don&apos;t &amp;#8211; but things don&apos;t break.&lt;/p&gt;

&lt;p&gt;additionally: the config file issue should not be downplayed.  yes it would be a trivial search/replace, but that&apos;s precisely the reason why it would aggravate users: because it would be such a trivial change w/o any obvious benefit to the users.&lt;/p&gt;

&lt;p&gt;(novice developers tend to be much more forgiving of eccentricities in the code base then novice  users are of upgrade incompatibilities)&lt;/p&gt;

</comment>
                            <comment id="12795776" author="chrismattmann" created="Fri, 1 Jan 2010 17:32:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;ve got no strong opinions about moving the code (it would probably be easier to understand if we changed it, but so many people use IDEs these days that i odn&apos;t know if it matters) but if we do change it i&apos;d prefer to go the deprecation route just out of consistency with how we&apos;ve dealt with the RequestHandlers and other utilities classes in the past - it&apos;s relatively trivial to do, so there&apos;s very little down side - and while it&apos;s true someone w/ deprecation warnings turned off probably won&apos;t notice - that&apos;s kind of the point behind doing deprecations, you get them if you want, you ignore them if you don&apos;t - but things don&apos;t break.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks for the comments Hoss. As for deprecations I&apos;m totally for them, when the intention is to limit the impact on classes and code that has infected a code base and the sheer impact of changing all of the package imports etc. is so burndensome that you want to give someone some time to do it, while still moving forward with the refactoring. I don&apos;t think that&apos;s the case here. ResponseWriters aren&apos;t extensible as we&apos;ve went back and forth all the time about. I doubt many people have extended them. As far as writing their own, the code is likely in their own package structure. So, I think in this case, despite being different than what you guys have done before (which is a con), the pro is the change is so minute and likely of little impact, we want the compiler to throw an error or 2, so the user can fix those one or 2 and be set for all future releases.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;additionally: the config file issue should not be downplayed. yes it would be a trivial search/replace, but that&apos;s precisely the reason why it would aggravate users: because it would be such a trivial change w/o any obvious benefit to the users.&lt;/p&gt;

&lt;p&gt;(novice developers tend to be much more forgiving of eccentricities in the code base then novice users are of upgrade incompatibilities)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m just not seeing this. I&apos;m a user of plenty of software and a developer of the same. If someone told me I&apos;d have to do a find/replace on a config file to take advantage of a new version of software, and that find replace would have the impact of 7 or 8 lines which I probably haven&apos;t touched in the config file anyways I really wouldn&apos;t care (in other words the benefits far outweigh the negatives). Though this is a generalization, I&apos;d say on average, customers for software I&apos;ve developed over the last 10 years really haven&apos;t either.&lt;/p&gt;

&lt;p&gt;If it makes you feel better I could strip out and upload a small patch that only changes the sorlconfig.xml file part of this issue, and then in CHANGES.txt we could reference this issue and tell the users, OK here&apos;s a quick way to upgrade an existing deployment:&lt;/p&gt;

&lt;p&gt;patch -p0 &amp;lt; curl &quot;https://issues.apache.org/jira/secure/attachment/12426188/SOLR-1602.configonly.patch.txt&quot;&lt;/p&gt;

&lt;p&gt;or something like that?&lt;/p&gt;

&lt;p&gt;Oh, also I opened up a vote thread for this. If you get a chance could you vote on it? Thanks a lot Hoss.&lt;/p&gt;</comment>
                            <comment id="12795806" author="ehatcher" created="Sat, 2 Jan 2010 00:50:31 +0000"  >&lt;p&gt;Chris - I&apos;m with Hoss on this one.  -1 to simply moving without keeping the old classes and deprecating them.  &lt;/p&gt;

&lt;p&gt;Your rationalization only makes sense for developers that are compiling things... consider the case where someone has enabled the Velocity response writer (since it isn&apos;t yet enabled by default) and then it gets moved.  Their upgrade is going to break for no good reason.&lt;/p&gt;

&lt;p&gt;We must maintain the current classes and deprecate them in order to move them.&lt;/p&gt;</comment>
                            <comment id="12795831" author="chrismattmann" created="Sat, 2 Jan 2010 06:16:47 +0000"  >&lt;p&gt;Hi Erik,&lt;/p&gt;

&lt;p&gt;Thanks for your feedback. My comments below:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Your rationalization only makes sense for developers that are compiling things... consider the case where someone has enabled the Velocity response writer (since it isn&apos;t yet enabled by default) and then it gets moved. Their upgrade is going to break for no good reason.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m sorry but I guess I feel it&apos;s more important to be strict and informative, rather than loose and accommodating on these types of changes. Let&apos;s elucidate a real scenario.&lt;/p&gt;

&lt;p&gt;1. I&apos;m a SOLR 1.4 user. &lt;br/&gt;
2. I&apos;m using the Velocity Response Writer, which means, I&apos;ve gone to the trouble of making a small edit to my solrconfig.xml configuration, and added a queryResponseWriter by enabling it with a few lines of XML in my configuration. &lt;br/&gt;
3. I decide I&apos;m going to use SOLR 1.5. &lt;br/&gt;
    (corollary) &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1602&quot; title=&quot;Refactor SOLR package structure to include o.a.solr.response and move QueryResponseWriters in there&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1602&quot;&gt;&lt;del&gt;SOLR-1602&lt;/del&gt;&lt;/a&gt; goes in as I&apos;ve proposed, with no deprecations&lt;br/&gt;
4. I upgrade to SOLR 1.5.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;user A is the type that doesn&apos;t bother reading CHANGES.txt. Ideally this isn&apos;t the user you want to design for, but you as a development team are willing to accommodate these types of users, even though it&apos;s &lt;em&gt;highly&lt;/em&gt; encouraged that they read CHANGES.txt on any upgrades or when they download the software.&lt;/li&gt;
	&lt;li&gt;user B is the type that believes it makes sense to read CHANGES.txt first. (clap clap)&lt;/li&gt;
	&lt;li&gt;let&apos;s take the example of user A: in this case, the guy goes to run a query and ask for a response with wt=veolcity and some selected template. The query breaks, with a SOLR error, with an informative message to the likes of: response writer o.a.solr.request.VelocityResponseWriter doesn&apos;t exist. I&apos;m annoyed, but I say, hmm why would this not work anymore. Let me take a look to see what response writers are present on the classpath with a jar tvf (if I&apos;m not savvy enough to do this then we&apos;ve got a whole other problem on our hands). Even if this approach doesn&apos;t pan out, I&apos;d argue user A is still savvy enough at that point to, &lt;em&gt;read_the_instruction_manual&lt;/em&gt;. In doing so, he finds the answer to his question. It&apos;s reactive rather than proactive, but we still arrive at a solution with a small amount of acceptable effort. (BTW in this case, user A is annoyed for what he believes to be &quot;no good reason&quot;, but I can tell you from experience in government, research/academia and industry, this happens all the time. As developers, and good designers there is a good reason &lt;span class=&quot;error&quot;&gt;&amp;#91;better organization for a small user A annoyance cost&amp;#93;&lt;/span&gt;).&lt;/li&gt;
	&lt;li&gt;let&apos;s take the example of user B. It&apos;s a trivial subcase of user A&apos;s scenario, to the point where the user reads CHANGES.txt, notes the information in there, and proactively updates a few lines of XML in his configuration file&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, anyways, I hope I&apos;ve made my point and I don&apos;t really ever seem to get a lot of support on these types of issues, regardless. As a software architect and someone that teaches a graduate course in this stuff, I can tell you putting things titled ResponseWriter in a request package is not the way to go, regardless if SOLR has made 20 releases so far or 1 (software architecture recovery, static analysis, and a host of other issues are affected by this. Imagine in 10 years a company has a SOLR deployment long after SOLR ++ or some-other-search-service +++ 2.0 has come out. Someone has to come in and recover the architecture of a SOLR system so that they can understand how the changes they&apos;d like to make to evolve the system will impact the so-called &quot;load bearing walls&quot;. These types of issues, if caught early on, help reduce this effort and ultimately reduce cost.)&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;

</comment>
                            <comment id="12795834" author="chrismattmann" created="Sat, 2 Jan 2010 06:36:44 +0000"  >&lt;p&gt;Furthermore, to add one small corollary to my last point: the reason I&apos;m pushing so strongly for no deprecations is that I&apos;d like to kill 2 birds with one stone: address those such as user A or B above (only configuration updates), as well as addressing those users who are compiling and building a SOLR upgrade too.&lt;/p&gt;

&lt;p&gt;Anyhoo, Happy New Years, everyone! I&apos;ll be back around tomorrow.&lt;/p&gt;</comment>
                            <comment id="12795854" author="ehatcher" created="Sat, 2 Jan 2010 11:12:18 +0000"  >&lt;p&gt;Chris - you sure do go to an extreme of lots of typing to try to make your case when you&apos;ve got two committers (and likely a user community consensus) saying deprecation is required.   It&apos;s easy enough, and really makes a big difference to the &lt;em&gt;sysadmin&lt;/em&gt; that&apos;ll be the one to deploy a new version of Solr. &lt;/p&gt;

&lt;p&gt;Consider the &lt;b&gt;dramatic&lt;/b&gt; changes that go on with the Lucene index format itself, and it remains backwards compatible for a version or more.  What if we told users they had to reindex everything?  And you&apos;re proposing we make life more difficult for end users for an internal package move?!    You&apos;re not killing two birds with one stone, you&apos;re killing user A&apos;s valuable time.&lt;/p&gt;

&lt;p&gt;I&apos;ll even add that for this to be commit-ready that a log message should be made in the deprecated classes to alert the user of the move. &lt;/p&gt;</comment>
                            <comment id="12795871" author="chrismattmann" created="Sat, 2 Jan 2010 17:18:35 +0000"  >&lt;p&gt;Hi Erik,&lt;/p&gt;

&lt;p&gt;I&apos;m sorry that you feel that way. I had one committer (Ryan) who voted on the related thread I posted on this ( &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-solr-dev/200912.mbox/%3CC760CB08.8B0A%25Chris.A.Mattmann@jpl.nasa.gov%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-solr-dev/200912.mbox/%3CC760CB08.8B0A%25Chris.A.Mattmann@jpl.nasa.gov%3E&lt;/a&gt; ) and agreed with the issue as I&apos;ve proposed even (with no deprecations). In terms of speaking for your user community that&apos;s a pretty lofty statement assuming that the view of 2 committers is that of your user community. This hasn&apos;t been my Apache experience, nor my experience developing software in general. BTW, besides being a developer, I&apos;m also one of SOLR&apos;s &lt;em&gt;users&lt;/em&gt; as well (as I&apos;m sure you are too), so we&apos;re really wearing two hats here. I may be a different type of user than the one you&apos;re targeting, but I&apos;m a user nonetheless and that should speak for something.&lt;/p&gt;

&lt;p&gt;As for the Lucene index example, in terms of going to extreme, that&apos;s an extreme example, right? We&apos;re not talking about a data file format here. We&apos;re talking about a package move of classes that are really in the wrong package, of which there are about &amp;lt; 10 of those classes in use right now (and by in use, we&apos;re really talking about configuration because there&apos;s not that many people that are compiling against them I would venture to guess, and if they are, I stand firm it&apos;s better to be verbose in those situations). That&apos;s a big difference in terms of indexes that can grow big, and that need to be long lived and maintained than a solrconfig.xml file.&lt;/p&gt;

&lt;p&gt;As far as a log message in the deprecated classes, that&apos;s an interesting case. I&apos;m assuming that this would catch users of SOLR that upgraded to 1.5 but that didn&apos;t upgrade their solrconfig.xml, right (assuming that class deprecations go in)? The only problem I see with that is that Joe user isn&apos;t always savvy enough to go into a log file and if he is, then he&apos;s likely already savvy enough to have read CHANGES.txt, right? In other words, why wait until runtime to catch something that could have been caught apriori?&lt;/p&gt;

&lt;p&gt;Like I said above, we could provide a script along with this patch (attached to this issue) that users are required to run to upgrade their solrconfig.xml files when upgrading to 1.5. This is pretty much what a lot of other Apache projects, e.g., Hadoop, HBase do, in the form of telling users that they need to run DFS upgrade on any Hadoop upgrade as a matter of principle, see: &lt;a href=&quot;http://hadoop.apache.org/common/docs/r0.17.2/hdfs_user_guide.html#Upgrade+and+Rollback&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hadoop.apache.org/common/docs/r0.17.2/hdfs_user_guide.html#Upgrade+and+Rollback&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;


</comment>
                            <comment id="12795875" author="noble.paul" created="Sat, 2 Jan 2010 17:46:28 +0000"  >&lt;p&gt;hi &lt;br/&gt;
I believe this issue is blown out of proportions. &lt;br/&gt;
Chris, let us accept that your opinions differ here. you think properly organized code is important and slight inconvenience to users is OK. &lt;/p&gt;

&lt;p&gt;I side with Erik here.  Users generally copy their existing config files and just expect it to run between point releases. We can make exceptions, but I don&apos;t think this deserves it.&lt;/p&gt;</comment>
                            <comment id="12795883" author="chrismattmann" created="Sat, 2 Jan 2010 18:21:23 +0000"  >&lt;p&gt;Hi Noble,&lt;/p&gt;

&lt;p&gt;I&apos;m not sure anything has been blown out of proportions &amp;#8211; this is a discussion related to an issue and a great example of the open source world and communication. As far as my opinion differing, I&apos;m fine with accepting it differs from yours, Erik&apos;s and Hoss&apos;s, but that it doesn&apos;t seem to from Ryan&apos;s. &lt;/p&gt;

&lt;p&gt;In terms of copying files between releases, how much more arduous would it be to do a copy &lt;em&gt;and&lt;/em&gt; execute a upgrade_solr_cofig 1 line bash script I could attach to this issue to upgrade the SOLR config file?&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12795891" author="noble.paul" created="Sat, 2 Jan 2010 18:36:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;how much more arduous would it be to do a copy and execute a upgrade_solr_cofig 1 line bash script I could attach to this issue to upgrade the SOLR config file?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;my question is .WHY? to change a few files from one package to another? The user may not even care if the entire all classes are put into one  package . &lt;/p&gt;</comment>
                            <comment id="12795893" author="chrismattmann" created="Sat, 2 Jan 2010 18:40:31 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the SOLR config upgrade script I mentioned.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12795896" author="chrismattmann" created="Sat, 2 Jan 2010 18:47:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;my question is .WHY? to change a few files from one package to another? The user may not even care if the entire all classes are put into one package .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My question is since when are code-level and architecture-level design decisions for a software system directly dictated by the end users of your application? At NASA, I don&apos;t consult end users of the software I develop regarding the organization of the software&apos;s code structure. End-user concerns are mostly with functional properties (performability, scalability, etc...) with a few NFP&apos;s sprinkled in (extensibility, ease of use, configurability, etc.), and not design decisions. While it is true that these concerns have a great impact on the software system&apos;s architecture, the notion of code-level organization is a bit orthogonal. However, that doesn&apos;t mean that design decisions (or improvements) shouldn&apos;t be made. Modern distributed software has many stakeholders, including end-users, software developers, architects, managers, etc. This is clearly addressing a concern of a few of those stakeholders (architects, developers &lt;span class=&quot;error&quot;&gt;&amp;#91;you could argue either end of this&amp;#93;&lt;/span&gt;, managers &lt;span class=&quot;error&quot;&gt;&amp;#91;who may market the software and where clean organization is something they&amp;#39;d like to add as a selling point&amp;#93;&lt;/span&gt;, but end-users are not really one of them in this case I&apos;ll agree).&lt;/p&gt;

&lt;p&gt;Ultimately because of this, the goal is to reap the benefits of good design and code organization within acceptable bounds to the user. That&apos;s really the discussion point at hand. I believe acceptable bounds to be: &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Remove the classes from the package structure right now to deal with this move swiftly and reduce confusion (i.e., why are there 2 copies of the same class, in different packages?) Admittedly, this is an architect/developer/manager issue more so than an end-user one.&lt;/li&gt;
	&lt;li&gt;Provide a simple, 1 line upgrade script that end-users can upgrade their solrconfig.xml file with. That way when and if they employ the approach you mentioned Noble (i.e., copying their old configuration), there is minute additional effort to upgrade the config.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I&apos;ve done the deprecation route on one of my projects at NASA 7-8 years ago in a highly similar situation. In fact, it was way more extreme. We moved most of our core Java classes (100s of them) from a top-level package to another top-level package. In doing so, we kept replicas of the Java classes in the old package structure using the extends structure with deprecations as shown by Ryan above. We saw 0 measurable benefit of doing this, and we had 100s-1000s of end users of the software across many NASA centers and external organizations. And to me, it was just an organizational mess that caused confusion among new developers we hired to evolve the code. So, I just don&apos;t see the benefit. From a code management point of view it added extra work to the developer/architect/manager stakeholders more than anything else.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12795902" author="noble.paul" created="Sat, 2 Jan 2010 19:30:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;when are code-level and architecture-level design decisions for a software system directly dictated by the end users of your application? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If I am going to add a new  feature, I would not.&lt;/p&gt;

&lt;p&gt;We really don&apos;t know the impact. But , we are just being careful. &lt;/p&gt;</comment>
                            <comment id="12795907" author="pjaol" created="Sat, 2 Jan 2010 20:01:49 +0000"  >&lt;p&gt;I&apos;ve been writing plugin&apos;s for solr for a couple of years, and I have seen several situations when we broke backwards compatibility, and configuration for absolutely no reasonable reason except for refactoring for the sake of refactoring.&lt;/p&gt;

&lt;p&gt;One that springs to mind is updateRequestProcessor going to updateRequestProcessorChain.&lt;br/&gt;
Along with many more that over the years have caused me and anyone else who consumes solr to realize that upgrades&lt;br/&gt;
cost time and money.&lt;/p&gt;

&lt;p&gt;Why should this be different? &lt;br/&gt;
This at least, cleans things up, the deprecations strategy used in the past have caused more headache than anything,&lt;br/&gt;
we deprecate, leave a class in place, sometimes even empty out the class so does nothing.... &lt;br/&gt;
and force folks to use &apos;find&apos; and &apos;grep&apos; as a way to get solr working. &lt;br/&gt;
Look at &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-489&quot; title=&quot;Added @deprecation Javadoc comments&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-489&quot;&gt;&lt;del&gt;SOLR-489&lt;/del&gt;&lt;/a&gt;, as a prime example, that it&apos;s just not been a good practice in the past. &lt;br/&gt;
To me that&apos;s not a helpful way to refactor. &lt;/p&gt;</comment>
                            <comment id="12795920" author="uboness" created="Sat, 2 Jan 2010 21:10:02 +0000"  >&lt;p&gt;I think it is very important to understand all sides here. &lt;/p&gt;

&lt;p&gt;I fully and totally support Chris&apos;s attempts to clean up the code base which rightfully involves moving classes from one package to another. I think in some cases such cleanups need to come at the cost of user comfort as eventually they, as users, also gain from it as the system as a whole becomes more robust, extensible and maintainable. The good thing is that besides the deprecation issue I believe there is a consensus about the required changes. So thumbs up Chris!!!&lt;/p&gt;

&lt;p&gt;To deprecate or not to deprecate, that is the question. In a widely used library/framework/system with a large (or fast growing) install/user base such as the Solr community, the common practice is &lt;b&gt;not&lt;/b&gt; to just break BWC without giving the users some grace period in which they can adjust their deployments to the new changes. Sometimes, it&apos;s absolutely necessary (such in the cases of bug fixes) but when it&apos;s not, in general it can create the opposite effect than you want with the community - instead having the community appreciate your improvements and see Solr as an &quot;improving with time&quot; product, they turn and see Solr as an inconsistent and sometime even unreliable product. So from my experience with delivering goods for the users, especially in the open source world (and I do have quite a bit of experience in that respect with the Spring Framework) you always need to strive to 100% BWC in theory and ~95% BWC in practice (never less than 90% though). If you stick to that, I believe changes will be widely accepted as improvements rather than harassments. &lt;/p&gt;

&lt;p&gt;But there&apos;s a catch here!!!! In order to stick to these numbers, you have to adhere to two important conditions:&lt;/p&gt;

&lt;p&gt;1. You need to have a rather solid architecture and code base to start with. If you don&apos;t, then naturally in the beginning you can expect many more extreme/major changes which lead to quite a few BWC breaks (it will gradually be reduced as the architecture/codebase improves). Whether Solr answers this condition is open for debate... there are a lot of solid parts in Solr and quite a few parts where a complete rewrite is appropriate.&lt;/p&gt;

&lt;p&gt;2. You need to have a steady and short release cycles. This is one thing that Solr lacks... big time. In a 1 year release cycle, deprecating code means that for the next year (in some cases two years), the code base will be messy with deprecated classes all over the place. In that respect, I can definitely understand Chris&apos;s objection for deprecation as the cleanup tasks that he&apos;s implementing may end up creating more mess (at least for a long while) than you had before the cleanup all together. I believe that moving to shorter release cycles (including bug-fix releases) will greatly help promoting deprecation in general.&lt;/p&gt;

&lt;p&gt;(NOTE: just a small note about the first condition. One thing to take into account is that &lt;b&gt;every&lt;/b&gt; piece of software reaches a point in time where it needs to be completely re-written or at least go through a &lt;b&gt;major&lt;/b&gt; refactoring/re-architecturing phase. This can be caused by many factors, let it be new technologies that are introduced, or simply limitations of the architecture that were not foreseen. It&apos;s very important to understand and admit to this fact - even from the user point of view it&apos;s acceptable. What is not acceptable, if it happens too many times and too frequent) &lt;/p&gt;

&lt;p&gt;Bottom line, it&apos;s always a conflict between the user point of view and the developer point of view. And there needs to be a balance and understanding of both sides. Each side needs to understand and give in to some extend to create this balance. But to make it happen, the culture, environment and well defined policies need to be in place. Arguing endlessly who&apos;s right here will never bring to a good outcome, simply because both sides are right and wrong at the same time, if you treat it as a black or white issue you&apos;ll end up loosing something - either the user trust or a better software. How about creating a proper release plan for the upcoming year, say a release every two months? Chris, if you have such a release schedule, will you feel more comfortable with deprecation?&lt;/p&gt;</comment>
                            <comment id="12795932" author="pjaol" created="Sat, 2 Jan 2010 23:55:26 +0000"  >&lt;p&gt;1) I agree that Solr needs shorter release cycles, and let me add to that, a firm road map, that is more community driven.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Tasks are tackled by trying to solve the hardest parts, rather than iterative development.&lt;/li&gt;
	&lt;li&gt;Users don&apos;t see benefits, just patches, most of which won&apos;t apply after a few weeks or months.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2) Solr is still young&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;it&apos;s only been around 4 years.&lt;/li&gt;
	&lt;li&gt;It can afford changes, this one is minor, it&apos;s config driven, solrconfig (e.g. where only experts dare) rather than schema-
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;queryResponseWriter name=&lt;span class=&quot;code-quote&quot;&gt;&quot;xml&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.response.XMLResponseWriter&quot;&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
 &amp;lt;queryResponseWriter name=&lt;span class=&quot;code-quote&quot;&gt;&quot;json&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.response.JSONResponseWriter&quot;&lt;/span&gt;/&amp;gt;
 &amp;lt;queryResponseWriter name=&lt;span class=&quot;code-quote&quot;&gt;&quot;python&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.response.PythonResponseWriter&quot;&lt;/span&gt;/&amp;gt;
 &amp;lt;queryResponseWriter name=&lt;span class=&quot;code-quote&quot;&gt;&quot;ruby&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.response.RubyResponseWriter&quot;&lt;/span&gt;/&amp;gt;
 &amp;lt;queryResponseWriter name=&lt;span class=&quot;code-quote&quot;&gt;&quot;php&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.response.PHPResponseWriter&quot;&lt;/span&gt;/&amp;gt;
 &amp;lt;queryResponseWriter name=&lt;span class=&quot;code-quote&quot;&gt;&quot;phps&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.response.PHPSerializedResponseWriter&quot;&lt;/span&gt;/&amp;gt;
 &amp;lt;queryResponseWriter name=&lt;span class=&quot;code-quote&quot;&gt;&quot;xslt&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.response.XSLTResponseWriter&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;3) We still don&apos;t identify who consumers of Solr are&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The end user, where search quality, and performance makes a difference&lt;/li&gt;
	&lt;li&gt;The implementer, who downloads, installs, updates solr&lt;/li&gt;
	&lt;li&gt;The experts, who customize solr&lt;/li&gt;
	&lt;li&gt;The extender, who develop using Solr as a framework (embedded, and as a webapp)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This change affects the last 2, experts, and extenders, and in a positive way.&lt;br/&gt;
The last two classes of users are continuously being affected by development, just think of&lt;br/&gt;
packages being moved around in solr/common, solr/java, solr/solrj etc..&lt;/p&gt;

&lt;p&gt;One compromise would be to have releases as sprints, say a minor release every quarter, and major every 1 to 2 years?&lt;br/&gt;
Where you can deprecate something with the resolution of eliminating it before 2 minor releases. (6 months)&lt;/p&gt;</comment>
                            <comment id="12796080" author="hossman" created="Mon, 4 Jan 2010 04:58:38 +0000"  >&lt;p&gt;Uh ... ok.&lt;/p&gt;

&lt;p&gt;First off: Broad discussions beyond the scope of this particular Jira issue really don&apos;t feel appropriate in the comments &amp;#8211; discussions about Solr&apos;s release cycles, general architecture, roadmaps, targeted user base,  etc. should be on the mailing list where they are more visible.&lt;/p&gt;

&lt;p&gt;Second: In trying to catch up with all of the new comments in this issue since the last time i looked at it, i find myself with very little substantive comments to add beyond what i already said. i started trying to address some individual points people have made, but that just felt tedious, so i&apos;ll just make a few comments in general.  Hopefully I&apos;ll say the same thing in a different way that will make more sense...&lt;/p&gt;

&lt;p&gt;There are very few instances in Solr&apos;s history where we have ever (knowningly) broken backwards compatibility at the &quot;user level&quot; ( config files, request params, etc...) &amp;#8211; in all of those cases, we tried to provide a simple method for users who depended on the legacy behavior to restore it with a simple configure change which was advertised in the upgrade instructions.  In every one of those situations (that i can remember) we &lt;b&gt;still&lt;/b&gt; had a few users who got confused/frustrated at the change in behavior.  I don&apos;t really have the energy/inclination to go find documentation on all of those situations, but here&apos;s two examples that are fresh in my mind because they just happened last month when people tried to upgrade to 1.4 and didn&apos;t notice the change regarding the legacy &quot;;&quot; sort syntax...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://old.nabble.com/Upgrade-from-1.2-to-1.4-to26829388.html#a26829388&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://old.nabble.com/Upgrade-from-1.2-to-1.4-to26829388.html#a26829388&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://phatness.com/2009/11/sorting-by-date-with-solr/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://phatness.com/2009/11/sorting-by-date-with-solr/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m not suggesting that we should always strive for 100% back compat in the configs and the request params and that people should expect identical configs to always work in every Solr release for hte next 74 years &amp;#8211; but so far, the only times we&apos;ve (knowingly) broken existing configs it was when the goal was to either improve the default behavior, or add additional functionality.  I&apos;ve got no problem telling 40% of our existing users &quot;you need to add foo=bar to your config to have it keep working&quot; if it means that the other 60% and every other new users gets something good out of deal....&lt;/p&gt;

&lt;p&gt;....but i see no good reason to break things for a large percentage of our user base when there is no value add to them in return ... having a (subjectively) cleaner code base is not a justification for making an upgrade break unless users edit their configs, or run a script.  &lt;/p&gt;

&lt;p&gt;If breaking things was the only way to fix some major bug, or add some cool feature, or saved us 100 man hours of development then i would be completley on board telling people &quot;sorry, please change this one line.&quot; but when keeping things working takes such little effort, it would be completley irresponsible to fuck our users over like that &amp;#8211; trivial shit like needing to make a nusance edit to a config file for no apparent reason is what drives users away and leaves a bad enough taste in their mouth that they actively trash talk a product/project as being &quot;unstable&quot;&lt;/p&gt;

&lt;p&gt;I honestly can&apos;t fathom how having ~10 less files in one directory is worth the amount of discussion we&apos;ve already had on this &amp;#8211; let alone the headaches of all the people this would screw over on upgrading.  It&apos;s just such a fucking no brainer to me.&lt;/p&gt;</comment>
                            <comment id="12796102" author="chrismattmann" created="Mon, 4 Jan 2010 07:12:54 +0000"  >&lt;p&gt;Hi Hoss:&lt;/p&gt;

&lt;p&gt;Comments below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;in all of those cases, we tried to provide a simple method for users who depended on the legacy behavior to restore it with a simple configure change which was advertised in the upgrade instructions. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is precisely what I suggested doing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In every one of those situations (that i can remember) we still had a few users who got confused/frustrated at the change in behavior.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The change I&apos;m proposing doesn&apos;t change behavior. It changes configuration. The two are different.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&apos;m not suggesting that we should always strive for 100% back compat in the configs and the request params and that people should expect identical configs to always work in every Solr release for hte next 74 years - but so far, the only times we&apos;ve (knowingly) broken existing configs it was when the goal was to either improve the default behavior, or add additional functionality. I&apos;ve got no problem telling 40% of our existing users &quot;you need to add foo=bar to your config to have it keep working&quot; if it means that the other 60% and every other new users gets something good out of deal....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&quot;good&quot; is a qualitative term. I consider strong system design and organization something that SOLR should be good at. All of the other qualities or observable aspects of the system (performance, efficiency, scalability, etc.) are also important things &amp;#8211; however, not to this issue.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;....but i see no good reason to break things for a large percentage of our user base when there is no value add to them in return ... having a (subjectively) cleaner code base is not a justification for making an upgrade break unless users edit their configs, or run a script.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is value added in better system structure, architecture and code organization. There are plenty of books written about the benefits of this and I won&apos;t bother to go into detail. Further, &quot;upgrade break&quot; is sort of a loaded phrase. It&apos;s not a break. It&apos;s an upgrade. Break would imply something out of the norm, and I don&apos;t see any formal SOLR upgrade process that the approach proposed in this issue deviates from. You suggested yourself that the types of &quot;upgrade&quot; notations that this issue proposes in are advertised in CHANGES.txt. This issue is no different.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If breaking things was the only way to fix some major bug, or add some cool feature, or saved us 100 man hours of development then i would be completley on board telling people &quot;sorry, please change this one line.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are many phases to the software engineering lifecycle. Development is just one of them. This issue addresses time/cost savings in understandability of SOLR&apos;s code base. For the quantitative value, I&apos;ll omit guessing as to the general savings and just point to you to some reading on what &lt;b&gt;bad&lt;/b&gt; code organization and system structure can cause in terms of cost when others try and understand your code &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; but when keeping things working takes such little effort, it would be completley irresponsible to ___ our users over like that - trivial ___ like needing to make a nusance edit to a config file for no apparent reason is what drives users away and leaves a bad enough taste in their mouth that they actively trash talk a product/project as being &quot;unstable&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m both a software developer and a user of SOLR, and the consistent resistance to any proposed refactoring is quite troubling. As Uri noted above, software requires refactoring, SOLR is no different. And as I noted from a code organization standpoint, placing classes named response in a package named request is &lt;em&gt;not&lt;/em&gt; subjectively anything &amp;#8211; it&apos;s poor design and it needs to be addressed. As for &quot;no apparent reason&quot; as I mentioned to Noble, end-users of a system don&apos;t dictate its code-level organization/design. &lt;/p&gt;

&lt;p&gt;I&apos;m also of the opinion that there are many stakeholders of any distributed software system, SOLR being no different. Patrick iterated them above, as did I and as did Uri. There aren&apos;t just &quot;users&quot; of SOLR &amp;#8211; there are end-users, system administrators, core developers, plugin writers, architects, managers, etc.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://portal.acm.org/citation.cfm?id=592025&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://portal.acm.org/citation.cfm?id=592025&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://portal.acm.org/citation.cfm?id=302691&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://portal.acm.org/citation.cfm?id=302691&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://portal.acm.org/citation.cfm?id=50089&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://portal.acm.org/citation.cfm?id=50089&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12796108" author="shalinmangar" created="Mon, 4 Jan 2010 07:52:33 +0000"  >&lt;blockquote&gt;
&lt;p&gt;One that springs to mind is updateRequestProcessor going to updateRequestProcessorChain.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Patrick, I think that change was made in trunk before update processors were ever released.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&apos;m both a software developer and a user of SOLR, and the consistent resistance to any proposed refactoring is quite troubling.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The resistance is not towards refactoring. We are arguing about compatibility, not refactoring.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And as I noted from a code organization standpoint, placing classes named response in a package named request is not subjectively anything - it&apos;s poor design and it needs to be addressed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I bet 99% of the users do not care about a wrongly named package when everything works. But they care when things stop working. Code organization is secondary to usability. Let us not cause discomfort to our users for such a trivial issue.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As for &quot;no apparent reason&quot; as I mentioned to Noble, end-users of a system don&apos;t dictate its code-level organization/design.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;End users do not dictate code level organization but they do have an influence when compatibility is involved. In this case, it is an inconvenience for many of them which can be avoided easily, so why not?&lt;/p&gt;

&lt;p&gt;I agree with Hoss. This is too much discussion over too small an issue. I think things are quite clear. Hoss, Erik, Noble and I all feel that breaking compatibility is not worth it. So lets do what needs to be done and get on with more important things.&lt;/p&gt;</comment>
                            <comment id="12796185" author="chrismattmann" created="Mon, 4 Jan 2010 14:21:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;I bet 99% of the users do not care about a wrongly named package when everything works. But they care when things stop working. Code organization is secondary to usability. Let us not cause discomfort to our users for such a trivial issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I wouldn&apos;t be so quick to bet what 99% of your &quot;users&quot; think without some solid evidence to back that up. And no, code organization is not second to usability to all parties &amp;#8211; it depends on what hat you&apos;re using. To you it may be, but not to everyone.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;End users do not dictate code level organization but they do have an influence when compatibility is involved. In this case, it is an inconvenience for many of them which can be avoided easily, so why not?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because satisfying end-users is only looking at one of the stakeholders of the system and ignoring the others.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I agree with Hoss. This is too much discussion over too small an issue. I think things are quite clear. Hoss, Erik, Noble and I all feel that breaking compatibility is not worth it. So lets do what needs to be done and get on with more important things.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The issue is far from clear as far as I&apos;m concerned and I&apos;m the one who reported the issue. The comments on this issue from others are evidence of that. The issue will be satisfied when there is clear consensus from the parties involved.&lt;/p&gt;</comment>
                            <comment id="12796285" author="ryantxu" created="Mon, 4 Jan 2010 18:45:35 +0000"  >&lt;p&gt;In an effort to get some resolution here...&lt;/p&gt;

&lt;p&gt;There are only three options:&lt;br/&gt;
A. Leave it as is&lt;br/&gt;
B. Refactor &lt;b&gt;with&lt;/b&gt; deprecations&lt;br/&gt;
-&lt;del&gt;C. Refactor without deprecations&lt;/del&gt;-&lt;/p&gt;

&lt;p&gt;C is out, so A and B are the only options worth discussing.&lt;/p&gt;

&lt;p&gt;The advantage of B is that the package:&lt;br/&gt;
 o.a.s.response would be clean and organized&lt;br/&gt;
(but o.a.s.request would still have a bunch of deprecated files)&lt;/p&gt;

&lt;p&gt;The arguments for A amount to: &quot;things are fine as they are&quot;, or &quot;the confusion of changing is not worth whatever slight gain we would get&quot;&lt;/p&gt;

&lt;p&gt;The strong resistance is to &apos;C&apos;, I suspect wider ambivalence towards &apos;B&apos;&lt;/p&gt;

</comment>
                            <comment id="12796291" author="ab" created="Mon, 4 Jan 2010 19:07:53 +0000"  >&lt;p&gt;I&apos;m in favor of B. This worked well in Hadoop (mapred -&amp;gt; mapreduce) where the list of deprecations was massive and API changes were not straightforward at all - still it was done to promote a better design and allow new functionality. Whole deprecated hierarchies live there for at least two major releases, and surely they were visible to thousands of Hadoop devs. The downside was occasional confusion, and of course the porting effort required to use the new API, but the upside was an excellent back-compat to keep serious users happy, and a clear message to all to get prepared for the switch.&lt;/p&gt;

&lt;p&gt;So IMHO having a bunch of deprecated classes for a while is not a big deal, if it gives us freedom to pursue a better design.&lt;/p&gt;</comment>
                            <comment id="12797123" author="chrismattmann" created="Wed, 6 Jan 2010 14:48:34 +0000"  >&lt;p&gt;Hi All:&lt;/p&gt;

&lt;p&gt;In the interest of moving forward on this, I&apos;ll go with option B, as I think I&apos;ve made my point (as have others) and this is something important to get wrapped up IMO. I&apos;d like to have an understanding though that in the next release of SOLR (1.6?) the deprecated classes can go away. Or, as Uri and Patrick pointed out, if the release cycle picks up then at worst 1.7.&lt;/p&gt;

&lt;p&gt;Thanks to everyone for their thoughtful comments. I am going to throw up a new patch that:&lt;/p&gt;

&lt;p&gt;1. replaces the content of all o.a.s.request.&amp;#42;ResponseWriters with the extends notation that Ryan mentioned above. In addition, I&apos;ll throw in a log message (to satisfy Erik&apos;s concern) in the constructor of each of the deprecated classes stating that these classes are going away very soon, so please change references to o.a.s.response.&amp;#42;&lt;/p&gt;

&lt;p&gt;2. adds the old o.a.s.request.&amp;#42;ResponseWriters to o.a.s.response.&amp;#42;ResponseWriters&lt;br/&gt;
3. merges with my existing patch which updates references everywhere else including solrconfig.xml.&lt;/p&gt;

&lt;p&gt;I think that should satisfy everyone. I&apos;ll throw up a patch hopefully by the end of the week.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12797227" author="ryantxu" created="Wed, 6 Jan 2010 18:32:49 +0000"  >&lt;p&gt;Hey Chris-&lt;/p&gt;

&lt;p&gt;Don&apos;t worry about putting up a patch... the real work is just svn move and that does not work well with patches.&lt;/p&gt;

&lt;p&gt;Lets wait a few days and see if there are no objections, I will do the refactoring (and replacing) on the repos that would get committed.&lt;/p&gt;

&lt;p&gt;ryan&lt;/p&gt;</comment>
                            <comment id="12797244" author="chrismattmann" created="Wed, 6 Jan 2010 18:54:25 +0000"  >&lt;p&gt;Hey Ryan:&lt;/p&gt;

&lt;p&gt;+1 on the SVN move to handle the package creation/class movement/deprecation classes. However, you&apos;ll still want to apply the existing patch I threw up (step 3 above on my prior comment) that updates the refs everywhere in the code/contrib and config to use the new pkg name.&lt;/p&gt;

&lt;p&gt;+1 on waiting the few days, thanks for your help and for offering to commit the solution.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12797497" author="noble.paul" created="Thu, 7 Jan 2010 04:02:30 +0000"  >&lt;p&gt;instead of using the FQN of classes we should use the solr.&amp;lt;SimpleClassname&amp;gt; notation in solrconfig.xml. That would have enabled us moving packages easily&lt;/p&gt;</comment>
                            <comment id="12797524" author="ehatcher" created="Thu, 7 Jan 2010 05:34:27 +0000"  >&lt;p&gt;Noble - thanks for mentioning the solr.* trick.   I thought of this the other day.  It&apos;s kinda already done, no?&lt;/p&gt;

&lt;p&gt;from SolrResourceLoader&lt;br/&gt;
  static final String[] packages = &lt;/p&gt;
{&quot;&quot;,&quot;analysis.&quot;,&quot;schema.&quot;,&quot;handler.&quot;,&quot;search.&quot;,&quot;update.&quot;,&quot;core.&quot;,&quot;request.&quot;,&quot;update.processor.&quot;,&quot;util.&quot;, &quot;spelling.&quot;, &quot;handler.component.&quot;, &quot;handler.dataimport.&quot;}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;So, with the response package registered in there, all would be fine.  I still think the right thing to do with this one is simply to deprecate and sweep it up after a version released or so.  Can&apos;t hurt really.  &lt;/p&gt;

&lt;p&gt;This actually gets to some package design considerations.  While it has been frustrating for some Lucene hackers to hit the wall on final/private classes in the core, it gave Lucene a lot of flexibility to refactor relentlessly without worrying about deprecating and leaving a mess.  But if things are public actual API meant to be extended, deprecation is the kindest, most appropriate way forward.   &lt;/p&gt;</comment>
                            <comment id="12797529" author="noble.paul" created="Thu, 7 Jan 2010 05:54:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;I thought of this the other day. It&apos;s kinda already done, no?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;but in the solrconfig.xml all the responsewriters are specified with FQN . Going forward, we can avoid using FQN &lt;/p&gt;</comment>
                            <comment id="12797536" author="ehatcher" created="Thu, 7 Jan 2010 06:31:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;but in the solrconfig.xml all the responsewriters are specified with FQN . Going forward, we can avoid using FQN &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;well, technically, in the solrconfig.xml that we distribute to the world, the one kitchen sink example solrconfig.xml, they&apos;re all commented out and pre-registered.  so it&apos;s just an &quot;example&quot;.&lt;/p&gt;
</comment>
                            <comment id="12797542" author="hossman" created="Thu, 7 Jan 2010 07:19:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;instead of using the FQN of classes we should use the solr.&amp;lt;SimpleClassname&amp;gt; notation in solrconfig.xml. That would have enabled us moving packages easily&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve been biting my tounge on that aspect of things.  Once upon a time, in the early days of incubation, the example config didn&apos;t contain any FQNs, but there were some vocal people arguing that it was missleading to suggest that a &quot;class&quot; named &quot;solr.Foo&quot; existed (the implication being that it would confuse users who understood java and expected that to be a real class/package name.&lt;/p&gt;

&lt;p&gt;I&apos;m more then happy to switch back to using &quot;solr.Foo&quot; everywhere in the example configs, but there have also been some threads out there in the past pointing out that using FQNs can speed up core initialization (when people are dynamicly creating lots of cores) so we shouldn&apos;t/can&apos;t ever assume that people are &lt;b&gt;only&lt;/b&gt; using solr.Foo even if that&apos;s all we start using in the examples.&lt;/p&gt;

&lt;p&gt;And lastly...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;well, technically, in the solrconfig.xml that we distribute to the world, the one kitchen sink example solrconfig.xml, they&apos;re all commented out and pre-registered. so it&apos;s just an &quot;example&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;... &lt;em&gt;most&lt;/em&gt; of them are commented out, not all.&lt;/p&gt;

&lt;p&gt;Besides which: even if it&apos;s just an &quot;example&quot; it would be pretty shitty to break that example in the very next release.&lt;/p&gt;
</comment>
                            <comment id="12797572" author="noble.paul" created="Thu, 7 Jan 2010 09:45:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;but there have also been some threads out there in the past pointing out that using FQNs can speed up core initialization &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is resolved &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-921&quot; title=&quot;SolrResourceLoader must cache short name vs fully qualified name&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-921&quot;&gt;&lt;del&gt;SOLR-921&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12797677" author="ryantxu" created="Thu, 7 Jan 2010 16:36:02 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; .Besides which: even if it&apos;s just an &quot;example&quot; it would be pretty shitty to break that example in the very next release.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Agreed &amp;#8211; we will make sure old FQNs work (until the next major release), but moving forward, we should remove FQN from schema.xml so this is less of an issue in the future.&lt;/p&gt;
</comment>
                            <comment id="12797678" author="ryantxu" created="Thu, 7 Jan 2010 16:38:54 +0000"  >&lt;p&gt;Nobel, this issue is assigned to you?  Do you want to take care of it?  If not I can...&lt;/p&gt;

&lt;p&gt;Patches won&apos;t work well since it will be a few steps in svn to make sure the history is maintained:&lt;br/&gt;
1. svn move the files to a new location, update references etc&lt;br/&gt;
2. commit&lt;br/&gt;
3. add stub files in the location where the old files were&lt;br/&gt;
4. commit&lt;/p&gt;</comment>
                            <comment id="12799059" author="ryantxu" created="Tue, 12 Jan 2010 03:47:18 +0000"  >&lt;p&gt;I made a few changes to /trunk, but we are still missing:&lt;br/&gt;
1. error messages&lt;br/&gt;
2. CHANGES.txt &lt;br/&gt;
3. FQN seems to be the only thing that worked easily.  Need to look into it more to see what we can do with SolrResourceLoader&lt;/p&gt;

&lt;p&gt;Now that the main changes are in, attaching patces is useful &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12799177" author="noble.paul" created="Tue, 12 Jan 2010 12:29:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;FQN seems to be the only thing that worked easily.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;you missed the period after the package name . I just committed&lt;/p&gt;</comment>
                            <comment id="12799626" author="chrismattmann" created="Wed, 13 Jan 2010 06:55:25 +0000"  >&lt;p&gt;Hi Ryan:&lt;/p&gt;

&lt;p&gt;Thanks so much for moving on this!&lt;/p&gt;

&lt;p&gt;Patch forthcoming that addresses:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1. error messages&lt;br/&gt;
2. CHANGES.txt &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think you handled 3, right?&lt;/p&gt;

&lt;p&gt;Thanks, again and I&apos;ll try and throw up the patch for 1/2 tomorrow morning pacific time.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12829044" author="ehatcher" created="Wed, 3 Feb 2010 12:06:09 +0000"  >&lt;p&gt;I&apos;ve encountered an issue with this refactoring, with some local toy request handlers I had laying around:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;//..
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.solr.request.SolrQueryResponse;


&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class HighlightingHandler &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; RequestHandlerBase {
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception....

&lt;span class=&quot;code-comment&quot;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This class no longer compiled.  Nor if I had a binary version of this and upgraded Solr would it have run.&lt;/p&gt;

&lt;p&gt;I&apos;m just sayin.&lt;/p&gt;

&lt;p&gt;No big deal for me, as I&apos;m refactoring my code.  I guess it&apos;s the price you have to pay for change.  But deprecating simply wasn&apos;t good enough to keep things that were working working.&lt;/p&gt;</comment>
                            <comment id="12829087" author="chrismattmann" created="Wed, 3 Feb 2010 14:26:21 +0000"  >&lt;p&gt;Hey Erik:&lt;/p&gt;

&lt;p&gt;You just forgot to press the easy button! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/tongue.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bit.ly/zog3s&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bit.ly/zog3s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12843913" author="chrismattmann" created="Thu, 11 Mar 2010 05:21:47 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;so I finally found that bit of time I was looking for to wrap this up. Ryan, this should take care of 1 and 2 that we were waiting on to close this out. My +1 to wrap it up.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12861539" author="hossman" created="Tue, 27 Apr 2010 22:09:41 +0100"  >&lt;p&gt;Erik: can you elaborate on what compilation error you got?  is the problem just that we don&apos;t have a deprecated version of RequestHandlerBase in o.a.s.request?&lt;/p&gt;

&lt;p&gt;Chris: your &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1602&quot; title=&quot;Refactor SOLR package structure to include o.a.solr.response and move QueryResponseWriters in there&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1602&quot;&gt;&lt;del&gt;SOLR-1602&lt;/del&gt;&lt;/a&gt;.Mattmann.wrapup.031010.patch.txt patch has some weird stuff in it &amp;#8211; in particular a whole lot of previously deprecated &quot;*Params&quot; classes now log messages saying that they are deprecated and to use the version in &quot;org.apache.solr.response&quot; but that&apos;s not where the valid versions of those classes are located.&lt;/p&gt;</comment>
                            <comment id="12861564" author="chrismattmann" created="Tue, 27 Apr 2010 22:47:14 +0100"  >&lt;p&gt;Hoss: Ugh, think I just lost track of what classes I was throwing the message into. I&apos;ll take it out of the Params classes and only deal with those classes that are part of this patch.&lt;/p&gt;

&lt;p&gt;New patch forthcoming.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12865532" author="chrismattmann" created="Sun, 9 May 2010 04:51:49 +0100"  >&lt;p&gt;Hey Hoss:&lt;/p&gt;

&lt;p&gt;I went ahead and got some time for an updated patch. I think it should address your concerns.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12872592" author="hossman" created="Thu, 27 May 2010 23:08:27 +0100"  >&lt;p&gt;Bulk updating 240 Solr issues to set the Fix Version to &quot;next&quot; per the process outlined in this email...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selection criteria was &quot;Unresolved&quot; with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.&lt;/p&gt;

&lt;p&gt;A unique token for finding these 240 issues in the future: hossversioncleanup20100527&lt;/p&gt;</comment>
                            <comment id="12874893" author="hossman" created="Thu, 3 Jun 2010 01:57:16 +0100"  >&lt;p&gt;Thanks Chris, that looks good.&lt;/p&gt;

&lt;p&gt;Trunk...&lt;br/&gt;
Committed revision 950835.&lt;/p&gt;

&lt;p&gt;branch 3x...&lt;br/&gt;
Committed revision 950838.&lt;/p&gt;</comment>
                            <comment id="13013158" author="gsingers" created="Wed, 30 Mar 2011 16:45:44 +0100"  >&lt;p&gt;Bulk close for 3.1.0 release&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12426149" name="SOLR-1602.Mattmann.112509.patch.txt" size="230059" author="chrismattmann" created="Wed, 25 Nov 2009 22:03:20 +0000"/>
                            <attachment id="12426188" name="SOLR-1602.Mattmann.112509_02.patch.txt" size="234731" author="chrismattmann" created="Thu, 26 Nov 2009 06:08:26 +0000"/>
                            <attachment id="12444048" name="SOLR-1602.Mattmann.final.050810.patch.txt" size="10397" author="chrismattmann" created="Sun, 9 May 2010 04:52:16 +0100"/>
                            <attachment id="12438480" name="SOLR-1602.Mattmann.wrapup.031010.patch.txt" size="16292" author="chrismattmann" created="Thu, 11 Mar 2010 05:21:47 +0000"/>
                            <attachment id="12429280" name="upgrade_solr_config" size="1332" author="chrismattmann" created="Sat, 2 Jan 2010 18:40:31 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Dec 2009 06:10:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6068</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxk9z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19604</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>