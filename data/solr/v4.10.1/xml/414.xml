<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:21:25 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-414/SOLR-414.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-414] Coherent plugin initialization strategy</title>
                <link>https://issues.apache.org/jira/browse/SOLR-414</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;We currently load many plugins with a Map or NamedList &amp;#8211; since &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-215&quot; title=&quot;Multiple Solr Cores - remove static singleton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-215&quot;&gt;&lt;del&gt;SOLR-215&lt;/del&gt;&lt;/a&gt;, the current core is not available through SolrCore.getSolrCore() and may need to be used for initialization.&lt;/p&gt;

&lt;p&gt;Ideally, we could change the init() methods from:&lt;/p&gt;
&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt;void init( final Map&amp;lt;String,String&amp;gt; args );&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt;void init( final SolrCore core, final Map&amp;lt;String,String&amp;gt; args );&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without breaking existing APIs, this change is difficult (some ugly options exist).  This patch offers a solution to keep existing 1.2 APIs, and allow access to the SolrConfig and SolrCore though ThreadLocal.  This should be removed in a future release.&lt;/p&gt;

&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt;  DeprecatedPluginUtils.getCurrentCore();&lt;br/&gt;
  DeprecatedPluginUtils.getCurrentConfig();&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;This patch removes the SolrConfig.Initalizable that was introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-215&quot; title=&quot;Multiple Solr Cores - remove static singleton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-215&quot;&gt;&lt;del&gt;SOLR-215&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For background, see:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Initializing---break-init%28%29-API-compatibility--tf4808463.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Initializing---break-init%28%29-API-compatibility--tf4808463.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See also: &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-260&quot; title=&quot;reusable PluginLoader -- helper class to load plugins&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-260&quot;&gt;&lt;del&gt;SOLR-260&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-215&quot; title=&quot;Multiple Solr Cores - remove static singleton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-215&quot;&gt;&lt;del&gt;SOLR-215&lt;/del&gt;&lt;/a&gt;,  &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-399&quot; title=&quot;SolrConfig.Initializable: allow configurable class instances to depend on the SolrCore instance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-399&quot;&gt;&lt;del&gt;SOLR-399&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12382756">SOLR-414</key>
            <summary>Coherent plugin initialization strategy</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ryantxu">Ryan McKinley</assignee>
                                    <reporter username="ryantxu">Ryan McKinley</reporter>
                        <labels>
                    </labels>
                <created>Sun, 18 Nov 2007 19:57:13 +0000</created>
                <updated>Wed, 29 May 2013 19:47:51 +0100</updated>
                            <resolved>Thu, 6 Dec 2007 23:20:45 +0000</resolved>
                                    <version>1.3</version>
                                    <fixVersion>1.3</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12543399" author="ryantxu" created="Sun, 18 Nov 2007 20:00:03 +0000"  >&lt;p&gt;This patch maintains 1.2 API compatibility and gives access to core/config via ThreadLocal.&lt;/p&gt;</comment>
                            <comment id="12543400" author="ryantxu" created="Sun, 18 Nov 2007 20:01:02 +0000"  >&lt;p&gt;sorry, last patch was missing new files&lt;/p&gt;</comment>
                            <comment id="12543516" author="henrib" created="Mon, 19 Nov 2007 10:41:09 +0000"  >&lt;p&gt;org.apache.solr.util.plugin.DeprecatedPluginUtils seems to be missing from patch.&lt;/p&gt;</comment>
                            <comment id="12543558" author="ryantxu" created="Mon, 19 Nov 2007 13:33:17 +0000"  >&lt;p&gt;sorry - I uploaded the wrong one&lt;/p&gt;</comment>
                            <comment id="12544101" author="ryantxu" created="Tue, 20 Nov 2007 22:36:24 +0000"  >&lt;p&gt;Updated patch to reflect ideas discussed in:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Initializing---break-init%28%29-API-compatibility--tf4808463.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Initializing---break-init%28%29-API-compatibility--tf4808463.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This sticks with 1.2 init APIs and abandons the previous ThreadLocal approach.  Instead, this&lt;/p&gt;

&lt;p&gt;1. Adds two interfaces: ResourceLoaderAware, SolrCoreAware&lt;br/&gt;
2. The ResourceLoader keeps track of  &quot;Aware&quot; instances until it is told to &quot;Inform&quot; them&lt;/p&gt;
</comment>
                            <comment id="12544592" author="hossman" created="Wed, 21 Nov 2007 20:51:49 +0000"  >&lt;p&gt;it hadn&apos;t occurred to be that ResourceLoader could be a super class of Config ... i was assuming it would just be an object SolrConfig (or the SolrCore) held on to, and we&apos;d deprecate those methods in Config.  is there an advantage i&apos;m not thinking of to having it be superclass?&lt;/p&gt;

&lt;p&gt;In theory &quot;ResourceLoader&quot; can be a very constrained interface for the plugins themselves that has no Solr dependencies...&lt;/p&gt;

&lt;p&gt;   public interface ResourceLoader &lt;/p&gt;
{
      /* a way to instantiate objects using an appropriate classloader */
      public Object newInstance(String classname, String... subpackages);
      /* a way to open config files, may check multiple directories in a set order */
      public InputStream openResource(String name); 
      // ... getLines probably makes sense too.
   }

&lt;p&gt;...and Solr has a concrete SolrResourceLoader class that knows about the instanceDir, config dir, default packages for plugins, etc.... &lt;/p&gt;
</comment>
                            <comment id="12544600" author="ryantxu" created="Wed, 21 Nov 2007 21:18:28 +0000"  >&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; it hadn&apos;t occurred to be that ResourceLoader could be a super class of Config ... i was assuming it would just be an object SolrConfig (or the SolrCore) held on to, and we&apos;d deprecate those methods in Config.  is there an advantage i&apos;m not thinking of to having it be superclass?&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;The only reason it is a super class is for easy API compatibility. Perhaps a better way is to have an independent ResourceLoader and add @deprecated getters to Config.java:&lt;/p&gt;

&lt;p&gt;@Deprecated&lt;br/&gt;
public String getConfigDir()&lt;/p&gt;
{
  return loader.getConfigDir()
}


&lt;p&gt;&amp;gt; In theory &quot;ResourceLoader&quot; can be a very constrained interface for the plugins themselves that has no Solr dependencies...&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I like that.  I&apos;ll put the &apos;ResourceLoader&apos; class in o.a.s.util &lt;/p&gt;</comment>
                            <comment id="12544617" author="ryantxu" created="Wed, 21 Nov 2007 22:27:13 +0000"  >&lt;p&gt;Here is an updated patch that:&lt;/p&gt;

&lt;p&gt;1. Makes ResourceLoader an independent interface and extracts SolrResourceLoader from Config (leaving depricated methods)&lt;/p&gt;

&lt;p&gt;2. Adds valid class checking for &quot;aware&quot; registration.  This is a simple check made to limit the scope of who can implement SolrCoreAware/ResourceLoaderAware if we want, we could easily remove this constraint:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    awareCompatibility.put( 
      SolrCoreAware.class, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;[] {
        SolrRequestHandler.class,
        QueryResponseWriter.class,
        SearchComponent.class
      }
    );

    awareCompatibility.put( 
      ResourceLoaderAware.class, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;[] {
        TokenFilterFactory.class,
        TokenizerFactory.class,
        FieldType.class
      }
    );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If things look good to you all, I will clean up some javadocs and the &apos;plugin&apos; wiki page and commit.&lt;/p&gt;</comment>
                            <comment id="12544834" author="henrib" created="Thu, 22 Nov 2007 15:35:07 +0000"  >&lt;p&gt;Looks good to me; got a solr-350 + 409 patch (414 pre-integrated) ready to upload as soon as this gets committed.&lt;/p&gt;</comment>
                            <comment id="12546526" author="koji" created="Thu, 29 Nov 2007 01:58:42 +0000"  >&lt;p&gt;Ryan,&lt;/p&gt;

&lt;p&gt;On &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-319&quot; title=&quot;changes SynonymFilterFactory to &amp;quot;Analyze&amp;quot; synonyms file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-319&quot;&gt;&lt;del&gt;SOLR-319&lt;/del&gt;&lt;/a&gt;, I&apos;d like SynonymFilterFactory to implement SolrCoreAware so that it can use &quot;fieldType&quot; instead of &quot;tokenFactory&quot;  to analyze synonyms.txt as Hoss suggested on that ticket. But due to above constraint, I got the following exception:&lt;/p&gt;

&lt;p&gt;FATAL: org.apache.solr.common.SolrException: Invalid &apos;Aware&apos; object: org.apache.solr.analysis.SynonymFilterFactory@1e328e0 &amp;#8211; org.apache.solr.util.plugin.SolrCoreAware must be an instance of: &lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.solr.request.SolrRequestHandler&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.solr.request.QueryResponseWriter&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.solr.handler.component.SearchComponent&amp;#93;&lt;/span&gt; &lt;br/&gt;
	at org.apache.solr.core.SolrResourceLoader.assertAwareCompatibility(SolrResourceLoader.java:341)&lt;br/&gt;
	at org.apache.solr.core.SolrResourceLoader.newInstance(SolrResourceLoader.java:227)&lt;br/&gt;
	at org.apache.solr.util.plugin.AbstractPluginLoader.create(AbstractPluginLoader.java:83)&lt;br/&gt;
	at org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:140)&lt;br/&gt;
	at org.apache.solr.schema.IndexSchema.readAnalyzer(IndexSchema.java:652)&lt;br/&gt;
	at org.apache.solr.schema.IndexSchema.access$000(IndexSchema.java:57)&lt;br/&gt;
	at org.apache.solr.schema.IndexSchema$1.create(IndexSchema.java:338)&lt;br/&gt;
	at org.apache.solr.schema.IndexSchema$1.create(IndexSchema.java:356)&lt;br/&gt;
	at org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:140)&lt;br/&gt;
	at org.apache.solr.schema.IndexSchema.readSchema(IndexSchema.java:365)&lt;br/&gt;
	at org.apache.solr.schema.IndexSchema.&amp;lt;init&amp;gt;(IndexSchema.java:73)&lt;br/&gt;
	at org.apache.solr.core.SolrCore.&amp;lt;init&amp;gt;(SolrCore.java:286)&lt;br/&gt;
	at org.apache.solr.core.SolrCore.getSolrCore(SolrCore.java:254)&lt;br/&gt;
	at org.apache.solr.servlet.SolrDispatchFilter.init(SolrDispatchFilter.java:68)&lt;br/&gt;
	at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:221)&lt;br/&gt;
	at org.apache.catalina.core.ApplicationFilterConfig.setFilterDef(ApplicationFilterConfig.java:302)&lt;br/&gt;
	at org.apache.catalina.core.ApplicationFilterConfig.&amp;lt;init&amp;gt;(ApplicationFilterConfig.java:78)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:3635)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4222)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:760)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:740)&lt;br/&gt;
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:544)&lt;br/&gt;
	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626)&lt;br/&gt;
	at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553)&lt;br/&gt;
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488)&lt;br/&gt;
	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138)&lt;br/&gt;
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)&lt;br/&gt;
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:120)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1022)&lt;br/&gt;
	at org.apache.catalina.core.StandardHost.start(StandardHost.java:736)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014)&lt;br/&gt;
	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)&lt;br/&gt;
	at org.apache.catalina.core.StandardService.start(StandardService.java:448)&lt;br/&gt;
	at org.apache.catalina.core.StandardServer.start(StandardServer.java:700)&lt;br/&gt;
	at org.apache.catalina.startup.Catalina.start(Catalina.java:552)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295)&lt;br/&gt;
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)&lt;/p&gt;

&lt;p&gt;Can the constraint be revised?&lt;/p&gt;</comment>
                            <comment id="12546772" author="ryantxu" created="Thu, 29 Nov 2007 15:51:49 +0000"  >&lt;p&gt;I am ok with relaxing the constraints. &lt;/p&gt;

&lt;p&gt;As implemented, we could change the contract to say &quot;anything instantiated through the SolrResourceLoader that implements SolrCoreAware/ResourceLoaderAware will be informed&quot; &amp;#8211; Alternatively we could add  TokenFilterFactory.class and TokenizerFactory.class to the list of valid components.&lt;/p&gt;

&lt;p&gt;Hoss do you have thoughts on this?&lt;/p&gt;</comment>
                            <comment id="12548304" author="henrib" created="Tue, 4 Dec 2007 17:06:32 +0000"  >&lt;p&gt;Seems to me that relaxing by class will end up being very user-unfriendly if it is not easy to add a class to the list of &quot;really&quot; aware classes (would even seem counter-effective).&lt;br/&gt;
There are 2 approaches, one is to be explicit, the other is to relax the whole constraint and let the interface trigger the behavior.&lt;br/&gt;
On the explicit side, one solution could be an attribute in the schema (or alternatively a static block to register the class).&lt;br/&gt;
On the implicit side, relaxing by &quot;interface&quot; (versus per concrete instance) is almost a full-loop on the subject with the twist that we succeeded preserving the init signatures.&lt;br/&gt;
We might then want to reintroduce the solr-399 dependency graph feature since we are (back to) using Solr core objects before the core is fully initialized.&lt;br/&gt;
Thoughts ?&lt;/p&gt;</comment>
                            <comment id="12548311" author="ryantxu" created="Tue, 4 Dec 2007 17:17:51 +0000"  >&lt;p&gt;I lean towards the simple contract: &quot;if the SolrResourceLoader create the object, implementations of ResourceLoaderAware/SolrCoreAware will be informed about the ResourceLoader/SolrCore&quot;&lt;/p&gt;

&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt; since we are (back to) using Solr core objects before the core is fully initialized.&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;not true.  inform( SolrCore ) is the last thing that happens in the init process.&lt;/p&gt;</comment>
                            <comment id="12548338" author="henrib" created="Tue, 4 Dec 2007 18:32:40 +0000"  >&lt;p&gt;Simple contract is good.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; since we are (back to) using Solr core objects before the core is fully initialized.&lt;br/&gt;
&amp;gt; not true. inform( SolrCore ) is the last thing that happens in the init process.&lt;/p&gt;

&lt;p&gt;You are right; and this removes the cyclic and out-of-order dependency potential problems.&lt;br/&gt;
Taking the example of using a field type in a token filter, the filter is (might be) made aware of the core before the field type but this is a non-issue since we are not actually using either of them before they are both informed.&lt;/p&gt;</comment>
                            <comment id="12548501" author="hossman" created="Wed, 5 Dec 2007 01:50:56 +0000"  >&lt;p&gt;sorry i&apos;m rejoining the party so late (i&apos;ve been sick)&lt;/p&gt;

&lt;p&gt;just to clarify: one of the reasons analysis factories weren&apos;t on the SolrCoreAwareable list was to keep schema related things isolated from the core (it helps reduce complex dependencies, and leaves us more options for refactoring things later)&lt;/p&gt;

&lt;p&gt;In the case of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-319&quot; title=&quot;changes SynonymFilterFactory to &amp;quot;Analyze&amp;quot; synonyms file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-319&quot;&gt;&lt;del&gt;SOLR-319&lt;/del&gt;&lt;/a&gt; there&apos;s really no reason why the entire SolrCore is needed right? &amp;#8211; just the IndexSchema.  perhaps there should be an IndexSchemaAware interface?&lt;/p&gt;

&lt;p&gt;FWIW: rereading my earlier comments in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-319&quot; title=&quot;changes SynonymFilterFactory to &amp;quot;Analyze&amp;quot; synonyms file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-319&quot;&gt;&lt;del&gt;SOLR-319&lt;/del&gt;&lt;/a&gt;, i think the best thing to do (for now at least) is to go with the simplest approach that achieves the goal: do what was done in the orriginal path, and just refer to the tokenizer factory class directly (which can be instantiated using the ResourceLoader) instead of refering to a fieldType name like i suggested.  &lt;/p&gt;

&lt;p&gt;...I&apos;ll put that last part in that issues as well.&lt;/p&gt;

&lt;p&gt;(NOTE: comment edited to fix issue number because i&apos;m an idiot)&lt;/p&gt;</comment>
                            <comment id="12548659" author="henrib" created="Wed, 5 Dec 2007 13:10:41 +0000"  >&lt;p&gt;Hoss,&lt;br/&gt;
Are you suggesting dropping SolrCoreAware and replace it with IndexSchemaAware ?&lt;br/&gt;
I&apos;m under the impression that SolrCoreAware is not needed (and might not even be desirable) with ResourceLoaderAware &amp;amp; IndexSchemaAware available.&lt;/p&gt;

&lt;p&gt;May I kindly suggest that if you &lt;del&gt;Hoss &amp;amp; Ryan&lt;/del&gt; feel we can&apos;t close the topic yet, we at least commit it with an in-flux state?&lt;/p&gt;</comment>
                            <comment id="12548925" author="ryantxu" created="Thu, 6 Dec 2007 05:37:36 +0000"  >&lt;p&gt;Koji, are you able to get what you need working with hoss&apos; suggestion?&lt;/p&gt;

&lt;p&gt;If so, I am tempted to sit on this for a while and see how it feels as we try new things.  I am not against removing the artificial constraint, but I agree with the idea that keeping it gives us more wiggle room in the future.&lt;/p&gt;

&lt;p&gt;I suppose we could do an IndexSchemaAware interface, but I am not sure how much that gains.  I think the nice thing about the SolrCoreAware interface is that the class declares what its dependencies are.  This makes it possible for most analyzers/fields/tokenizers/etc to have no dependencies, a few to need ResourceLoader and a couple to need SolrCore/IndexSchema.  In my opinion, since the class defines its dependencies, it is not a problem to give it access to SolrCore.  Obviously it would not work outside solr, but the classes that don&apos;t depend on core could.&lt;/p&gt;

&lt;p&gt;But, unless there is a real need, we can always relax the constraint in the future.&lt;/p&gt;
</comment>
                            <comment id="12548929" author="koji" created="Thu, 6 Dec 2007 06:17:09 +0000"  >&lt;p&gt;Ryan,&lt;br/&gt;
I&apos;m happy with hoss&apos; last comment regarding &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-319&quot; title=&quot;changes SynonymFilterFactory to &amp;quot;Analyze&amp;quot; synonyms file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-319&quot;&gt;&lt;del&gt;SOLR-319&lt;/del&gt;&lt;/a&gt;. So I don&apos;t need to implement SolrCoreAware (and IndexSchemaAware) any more in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-319&quot; title=&quot;changes SynonymFilterFactory to &amp;quot;Analyze&amp;quot; synonyms file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-319&quot;&gt;&lt;del&gt;SOLR-319&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
Thank you for your consideration.&lt;/p&gt;</comment>
                            <comment id="12549232" author="ryantxu" created="Thu, 6 Dec 2007 23:20:44 +0000"  >&lt;p&gt;I added some docs to the wiki and will resolve this issue.  If we need to relax the constraints later, lets do that in a new issue&lt;/p&gt;</comment>
                            <comment id="12549653" author="hossman" created="Sat, 8 Dec 2007 05:40:06 +0000"  >&lt;p&gt;Henri: this comment concerns me...&lt;/p&gt;

&lt;p&gt;&amp;gt; May I kindly suggest that if you &lt;del&gt;Hoss &amp;amp; Ryan&lt;/del&gt; feel we can&apos;t close the&lt;br/&gt;
&amp;gt; topic yet, we at least commit it with an in-flux state?&lt;/p&gt;

&lt;p&gt;...as far as i can tell Ryan already commited all of the SolrCoreAware and ResourceLoader stuff back on Nov24 ... is there more to this issue that you feel is missing and still needs committed?&lt;/p&gt;


&lt;p&gt;And just to clarify one thing...&lt;/p&gt;

&lt;p&gt;&amp;gt; Hoss,   &lt;br/&gt;
&amp;gt; Are you suggesting dropping SolrCoreAware and replace it with IndexSchemaAware ?&lt;/p&gt;

&lt;p&gt;No, SolrCoreAware should serve a valuable purpose for plugins that historicaly might have accessed one of the singletons from an init() method &amp;#8211; i was just suggesting that an IndexSchemaAware API might (someday) be handy analysis type plugins that want an equally tight &quot;call back&quot; coupling with the IndexSchema when it&apos;s initialized.&lt;/p&gt;</comment>
                            <comment id="13669561" author="bmargulies" created="Wed, 29 May 2013 19:47:51 +0100"  >&lt;p&gt;I don&apos;t need access to the core: I just need to establish a CloseHook(). But I don&apos;t see how to do that based on Hoss Man&apos;s suggestion.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12364045">SOLR-180</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12397812">SOLR-594</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12381243">SOLR-399</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12370021" name="SOLR-414-Initialization.patch" size="88054" author="ryantxu" created="Wed, 21 Nov 2007 22:27:13 +0000"/>
                            <attachment id="12369930" name="SOLR-414-Initialization.patch" size="64370" author="ryantxu" created="Tue, 20 Nov 2007 22:36:23 +0000"/>
                            <attachment id="12369783" name="SOLR-414-Initialization.patch" size="65217" author="ryantxu" created="Mon, 19 Nov 2007 13:33:16 +0000"/>
                            <attachment id="12369753" name="SOLR-414-Initialization.patch" size="52934" author="ryantxu" created="Sun, 18 Nov 2007 20:01:02 +0000"/>
                            <attachment id="12369752" name="SOLR-414-Initialization.patch" size="52934" author="ryantxu" created="Sun, 18 Nov 2007 20:00:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Nov 2007 10:41:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7184</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxrhb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20771</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>