<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:24:26 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-264/SOLR-264.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-264] Support &apos;random&apos; sort order</title>
                <link>https://issues.apache.org/jira/browse/SOLR-264</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;Support querying for random documents:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=sku&amp;amp;sort=random%20desc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=sku&amp;amp;sort=random%20desc&lt;/a&gt;&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12371836">SOLR-264</key>
            <summary>Support &apos;random&apos; sort order</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ryantxu">Ryan McKinley</reporter>
                        <labels>
                    </labels>
                <created>Mon, 18 Jun 2007 07:45:28 +0100</created>
                <updated>Fri, 10 May 2013 11:40:16 +0100</updated>
                            <resolved>Fri, 13 Jul 2007 01:01:18 +0100</resolved>
                                                    <fixVersion>1.3</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12505706" author="ryantxu" created="Mon, 18 Jun 2007 08:05:08 +0100"  >&lt;p&gt;Implements a &apos;ScoreDocComparator&apos; that returns a random number.&lt;/p&gt;

&lt;p&gt;I don&apos;t know if this is a fair distribution, but the results look ok.&lt;/p&gt;

&lt;p&gt;This is the meat:&lt;/p&gt;

&lt;p&gt;static final ScoreDocComparator RANDOM = new ScoreDocComparator() {&lt;br/&gt;
    final Random rand = new Random();&lt;/p&gt;

&lt;p&gt;    public int compare (ScoreDoc i, ScoreDoc j) &lt;/p&gt;
{
      return sortValue(i).compareTo( sortValue(j) );
    }
&lt;p&gt;    public Comparable sortValue (ScoreDoc i) &lt;/p&gt;
{
      return new Float(rand.nextFloat());
    }
&lt;p&gt;    public int sortType() &lt;/p&gt;
{
      return SortField.CUSTOM;
    }
&lt;p&gt;  };&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;- - - -&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One thing that is wierd is that it seems to need a valid field name.  Solr sets up sorting with a field cache, so I just pick any field name (by default the unique key) and use that.  Any reason this is a bad idea?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;- - -&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Old discussion on this topic:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/random-order-tf3198916.html#a8881481&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/random-order-tf3198916.html#a8881481&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12505860" author="yseeley@gmail.com" created="Mon, 18 Jun 2007 17:17:22 +0100"  >&lt;p&gt;Rather than mess with query parsing to hack in support for a &quot;random&quot; key word, a more elegant way would be to create a RandomFieldType specifically for sorting, then hook it in via the schema in the normal manner.&lt;/p&gt;

&lt;p&gt;Since this is such a unique requirement (probably not broadly applicable), one might want to make this as a custom component in a QueryComponent chain that we discussed recently.&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/search-components-%28plugins%29-tf3898040.html#a11050274&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/search-components-%28plugins%29-tf3898040.html#a11050274&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12505880" author="ryantxu" created="Mon, 18 Jun 2007 17:52:09 +0100"  >&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; Rather than mess with query parsing to hack in support for a &quot;random&quot; key word, a more elegant way would be to create a RandomFieldType specifically for sorting, then hook it in via the schema in the normal manner.&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;That sounds good &amp;#8211; then you don&apos;t run the risk of namespace overlap.  The special keyword &apos;score&apos; already makes me a bit nervous.  It seems like you could make a field named score, but could not sort by it and could not refer to it (except as *)&lt;/p&gt;


&lt;p&gt;&amp;gt; Since this is such a unique requirement (probably not broadly applicable)&lt;/p&gt;

&lt;p&gt;Is it so unique?  In &apos;full text search&apos; sure, but if the domain is &apos;database&apos; it seems pretty fundamental.  I can&apos;t be the only person who wants to do:&lt;/p&gt;

&lt;p&gt; SELECT * FROM features ORDER BY rand();&lt;/p&gt;

&lt;p&gt; fq=feature:true&amp;amp;sort=random&lt;/p&gt;</comment>
                            <comment id="12505895" author="ryantxu" created="Mon, 18 Jun 2007 18:27:52 +0100"  >&lt;p&gt;Random sorting implemented as a FieldType.&lt;/p&gt;

&lt;p&gt;to enable random sorting, you need to add something like:&lt;/p&gt;

&lt;p&gt;  &amp;lt;fieldType name=&quot;random&quot; class=&quot;solr.RandomSortField&quot; /&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;random&quot; type=&quot;random&quot; indexed=&quot;true&quot; stored=&quot;false&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;to schema.xml&lt;/p&gt;</comment>
                            <comment id="12505901" author="yseeley@gmail.com" created="Mon, 18 Jun 2007 18:51:17 +0100"  >&lt;p&gt;nextFloat() generates a random int and then does a floating point divide (one of the slowest operations around).&lt;br/&gt;
Instead, use &lt;br/&gt;
  return rand.nextBoolean() ? -1 : 1;&lt;br/&gt;
Or a branch-free version:&lt;br/&gt;
  return rand.nextInt() &amp;gt;&amp;gt;&amp;gt; 31;&lt;/p&gt;</comment>
                            <comment id="12506033" author="ryantxu" created="Tue, 19 Jun 2007 05:27:31 +0100"  >&lt;p&gt;using:&lt;br/&gt;
  rand.nextBoolean() ? -1 : 1;&lt;/p&gt;

&lt;p&gt;the fancy pants &amp;gt;&amp;gt;&amp;gt; returns a distribution 0,1  &amp;#8211; to get a reasonable random sort, it needs to be 1 or -1&lt;/p&gt;</comment>
                            <comment id="12506054" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 06:52:39 +0100"  >&lt;p&gt;&amp;gt; the fancy pants &amp;gt;&amp;gt;&amp;gt; returns a distribution 0,1 &amp;#8211; to get a reasonable random sort, it needs to be 1 or -1&lt;/p&gt;

&lt;p&gt;Hmmm, so &lt;br/&gt;
  (rand.nextInt() &amp;amp; 0x2) - 1&lt;/p&gt;</comment>
                            <comment id="12506267" author="hossman" created="Tue, 19 Jun 2007 20:09:47 +0100"  >&lt;p&gt;Uhh, guys ... this code violates the contract of Comparator (which is admittedly not an explicit part of the of ScoreDocComparator contract, but it is implied) because:&lt;/p&gt;

&lt;p&gt;  1) the method isn&apos;t stable ... compare(x,y) is not garunteed to have the same sign as a subsequent compare(x,y)  &lt;br/&gt;
  2) it doesn&apos;t guarantee that the sign of compare(x,y) is the negation of the sign of compare(y,x) &lt;br/&gt;
  3) it doesn&apos;t guarantee a transitive property ... if ((compare(x, y)&amp;gt;0) &amp;amp;&amp;amp; (compare(y, z)&amp;gt;0))  then: compare(x, z)&amp;gt;0.&lt;/p&gt;
</comment>
                            <comment id="12506273" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 20:37:31 +0100"  >&lt;p&gt;Yeah, I briefly thought of that... but decided it might be OK (won&apos;t cause an infinite loop) since sorting is done via a priority queue.&lt;/p&gt;

&lt;p&gt;But thinking on this further, it still has a lot of problems besides a single query:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;caching... oops, there goes your randomness&lt;/li&gt;
	&lt;li&gt;code that needs to query more than once (first pass gets &quot;n&quot; docs, then requests more)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12506274" author="ryantxu" created="Tue, 19 Jun 2007 20:37:56 +0100"  >&lt;p&gt;Dooh.  I was worried about this at first, but it did not seem to matter.  Perhaps my dataset isn&apos;t big enough to get itself stuck in a keep sorting loop...  &lt;/p&gt;

&lt;p&gt;Do you see any holes in:  &lt;/p&gt;

&lt;p&gt;private static class RandomScoreDocComparator implements ScoreDocComparator {&lt;br/&gt;
    final long start = System.currentTimeMillis();&lt;/p&gt;

&lt;p&gt;    public int compare (ScoreDoc i, ScoreDoc j) &lt;/p&gt;
{
      int vI = new Random(start+i.doc).nextInt();
      int vJ = new Random(start+j.doc).nextInt();
      return vI - vJ;
    }
&lt;p&gt;    public Comparable sortValue (ScoreDoc i) &lt;/p&gt;
{
      return new Integer(new Random(start+i.doc).nextInt());
    }
&lt;p&gt;    public int sortType() &lt;/p&gt;
{
      return SortField.CUSTOM;
    }
&lt;p&gt;  };&lt;/p&gt;</comment>
                            <comment id="12506280" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 20:57:57 +0100"  >&lt;p&gt;Hold up a minute... I have a better way... gotta run to a meeting thoughj&lt;/p&gt;</comment>
                            <comment id="12506284" author="hossman" created="Tue, 19 Jun 2007 21:19:49 +0100"  >&lt;p&gt;the only clean way to do this that i know of i to build aFieldCache-esque rray of size maxDoc, put a random number of each doc into that array, and then use that array to get the sortValue ... document order is randomized, but consistent for all uses of the same array (if you leverage the FieldCache custom type, that means its&apos; consistent per IndexReader)&lt;/p&gt;

&lt;p&gt;this was brought up recently on java-user, after i suggested an alternative approach of just promoting N randomly selected docs to the front of the results (where N is greater then your expected pagination...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/Several-questions-about-scoring-sorting-%2B-random-sorting-in-an-image-related-application-tf3928435.html#a11141191&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Several-questions-about-scoring-sorting-%2B-random-sorting-in-an-image-related-application-tf3928435.html#a11141191&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12506309" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 23:00:17 +0100"  >&lt;p&gt;I just attached a draft approach (completely untested, uncommented, etc)&lt;/p&gt;

&lt;p&gt;The approach would be to use a dynamic field random_* and then pass the seed for the random function in the field name.  So q=foo&amp;amp;sort=rand_165623&lt;/p&gt;

&lt;p&gt;The docids are hashed, including the seed, to get random (but repeatable) values.&lt;br/&gt;
This should satisfy repeatability, cacheability, and sanity (can repeat a sequence if desired).&lt;br/&gt;
Since the SortComparatorSource isn&apos;t a singleton in this case, I implemented hashCode + equals for the queryCache.&lt;/p&gt;</comment>
                            <comment id="12506315" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 23:12:23 +0100"  >&lt;p&gt;Of course this could also implement a ValueSource if someone really wanted to throw randomness into scoring...&lt;/p&gt;</comment>
                            <comment id="12506316" author="hossman" created="Tue, 19 Jun 2007 23:16:26 +0100"  >&lt;p&gt;wow.&lt;/p&gt;

&lt;p&gt;why is it whenever i read a patch from yonik that starts with a bunch of bitshift operators, i start to worry that in 7 days a weird girl is going to climb out of a well and then i&apos;m going to die?&lt;/p&gt;

&lt;p&gt;that&apos;s some freaky shit ... but i can&apos;t see anything wrong with the approach.  (assuming the hash function does what it says it does)&lt;/p&gt;

&lt;p&gt;in general, any approach that uses a fixed seed per SortComparatorSource should work, and getting the seed from the &quot;filed name&quot; seems like a slick way to do it ... we wouldn&apos;t even have to require that the field name match any sort of pattern (ie: end with _ and a number) we could just hash on the field name.&lt;/p&gt;

&lt;p&gt;people could even choose to use a regular field (instead of a dynamic field) and accept that they&apos;d get a fixed ordering per commit/&amp;gt; if we also used the IndexReader version in computing the seed.&lt;/p&gt;</comment>
                            <comment id="12506319" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 23:37:15 +0100"  >&lt;p&gt;Just for the fun of it, added prototype (read: completely untested) ValueSource.&lt;/p&gt;</comment>
                            <comment id="12506321" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 23:43:23 +0100"  >&lt;p&gt;&amp;gt; we wouldn&apos;t even have to require that the field name match any sort of pattern (ie: end with _ and a number) we could just hash on the field name. &lt;/p&gt;

&lt;p&gt;Excellent point.  I had considered adding the hash of the prefix to the field value... but  just hashing over the complete name and not requiring a specific format is much better.&lt;/p&gt;

&lt;p&gt;You&apos;ll have to let me know the reference to the girl and the well stuff sometime &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12506327" author="ryantxu" created="Wed, 20 Jun 2007 00:14:07 +0100"  >&lt;p&gt;wow.  &lt;/p&gt;

&lt;p&gt;Here is an updated version that uses the field name hash for the seed.  I added a few comments and I have seen it run and give random results.  &lt;/p&gt;

&lt;p&gt;It gets configured with:&lt;br/&gt;
&amp;lt;dynamicField name=&quot;rand*&quot; type=&quot;random&quot; indexed=&quot;true&quot; stored=&quot;false&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;then you get nicely repeatably random results for:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=name&amp;amp;sort=rand_1234%20desc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=name&amp;amp;sort=rand_1234%20desc&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=name&amp;amp;sort=rand_2345%20desc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=name&amp;amp;sort=rand_2345%20desc&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=name&amp;amp;sort=rand_ABDC%20desc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=name&amp;amp;sort=rand_ABDC%20desc&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=name&amp;amp;sort=rand_21%20desc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=*:*&amp;amp;fl=name&amp;amp;sort=rand_21%20desc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;thanks yonik!&lt;/p&gt;</comment>
                            <comment id="12506343" author="yseeley@gmail.com" created="Wed, 20 Jun 2007 01:34:52 +0100"  >&lt;p&gt;If we want the comparator to be transitive, a subtraction doesn&apos;t work with negative numbers in there because of overflow.  We could either do explicit comparisons, or only use positive ints.  I chose positive ints because it might be a nicer range for ValueSource (function query).&lt;/p&gt;</comment>
                            <comment id="12506344" author="yseeley@gmail.com" created="Wed, 20 Jun 2007 01:37:33 +0100"  >&lt;p&gt;Might be nice to check cache statistics to see that the same seed results in a hit.&lt;br/&gt;
same with function query:  &lt;em&gt;val&lt;/em&gt;(rand_1234)&lt;/p&gt;</comment>
                            <comment id="12506347" author="hossman" created="Wed, 20 Jun 2007 01:58:50 +0100"  >&lt;p&gt;i was kind of wondering about the negative overflow (isn&apos;t that underflow) but i was trusting you that it worked ... isn&apos;t there still a potential problem with the transitive property if  i.doc + seed causes positive integer overflow?&lt;/p&gt;

&lt;p&gt;(i guess it&apos;s okay because the overflow is the same regardless of whether it&apos;s i or j, but in the previous case the overflow happend *after*the hash call.&lt;/p&gt;

&lt;p&gt;FWIW: i still think newComparator should be something like...&lt;/p&gt;

&lt;p&gt;        public ScoreDocComparator newComparator(IndexReader reader, String fieldname) throws IOException &lt;/p&gt;
{
          return new RandomComparator(seed ^ reader.getVersion());
        }

&lt;p&gt;...so that people who want orderings that are randomized per each &amp;lt;commit/&amp;gt; can just use...&lt;/p&gt;

&lt;p&gt;  &amp;lt;field name=&quot;random&quot; type=&quot;random&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;With the attachment as is, most changes to the index (ie: add a few documents, delete a few documents) won&apos;t have a significant impact on the &quot;random&quot; order because they won&apos;t change the majority of the docIds... you have to change the &quot;seed&quot; to see any noticable effects.&lt;/p&gt;</comment>
                            <comment id="12506352" author="yseeley@gmail.com" created="Wed, 20 Jun 2007 02:10:22 +0100"  >&lt;p&gt;&amp;gt; i guess it&apos;s okay because the overflow is the same regardless of whether it&apos;s i or j, but in the previous case the overflow happend *after*the hash call&lt;/p&gt;

&lt;p&gt;Yep, no bits of randomness are lost, so having an intermediate value over/underflow is fine.&lt;/p&gt;

&lt;p&gt;Including the reader version is an interesting idea, and would probably lead to less confusion (a user might otherwise be tricked into thinking that docs always sort the same relative to each other across a commit).&lt;/p&gt;</comment>
                            <comment id="12506353" author="yseeley@gmail.com" created="Wed, 20 Jun 2007 02:16:59 +0100"  >&lt;p&gt;LOL... I&apos;m obviously too tired for more coding tonight.  Could the next person to modify this patch please change&lt;br/&gt;
  return key &amp;gt;&amp;gt;&amp;gt; 31;  // only positive numbers&lt;br/&gt;
    to &lt;br/&gt;
  return key &amp;gt;&amp;gt;&amp;gt; 1;&lt;/p&gt;</comment>
                            <comment id="12506357" author="ryantxu" created="Wed, 20 Jun 2007 02:33:39 +0100"  >&lt;p&gt;changed to use:&lt;br/&gt;
 &quot;return key &amp;gt;&amp;gt;&amp;gt; 1;&quot;&lt;br/&gt;
and&lt;br/&gt;
 seed ^ reader.getVersion()&lt;/p&gt;

&lt;p&gt;actually it needs to be:&lt;br/&gt;
 (int)(seed^reader.getVersion())&lt;/p&gt;

&lt;p&gt;the long-&amp;gt;int overflow wrapping should not be a problem.&lt;/p&gt;</comment>
                            <comment id="12507090" author="koji" created="Fri, 22 Jun 2007 02:46:53 +0100"  >&lt;p&gt;&amp;gt; public SortComparatorSource getFactory() {&lt;br/&gt;
&amp;gt;   :&lt;br/&gt;
&amp;gt;   return new SortComparatorSource() {&lt;br/&gt;
&amp;gt;     :&lt;br/&gt;
&amp;gt;    public boolean equals(Object o) &lt;/p&gt;
{
&amp;gt;      return (o instanceof RandomSort) &amp;amp;&amp;amp; getField().equals(((RandomSort) o).getField());
&amp;gt;    }
&lt;p&gt;&amp;gt;  };&lt;br/&gt;
&amp;gt;}&lt;/p&gt;

&lt;p&gt;The equals() method should care of SortComparatorSource, instead of RandomSort...? The patch uses SortComparatorSource in equals() method.&lt;/p&gt;</comment>
                            <comment id="12507690" author="koji" created="Sun, 24 Jun 2007 16:12:26 +0100"  >&lt;p&gt;Some non-ASCII characters were slipped into the previous patch. I&apos;d like to upload new one.&lt;br/&gt;
regards,&lt;/p&gt;</comment>
                            <comment id="12508045" author="hossman" created="Tue, 26 Jun 2007 04:16:59 +0100"  >&lt;p&gt;Good catch Koji, i applied your patch as well as fixed up a few other things i noticed (ValueSource wasn&apos;t using IndexReader in the seed, confusing &quot;seed&quot; terminology used because of getSeed(field), etc...)&lt;/p&gt;</comment>
                            <comment id="12512313" author="hossman" created="Fri, 13 Jul 2007 01:01:17 +0100"  >&lt;p&gt;this was all committed a little while ago and seems to be working.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12360163" name="RandomSortField.java" size="6432" author="ryantxu" created="Wed, 20 Jun 2007 02:33:39 +0100"/>
                            <attachment id="12360161" name="RandomSortField.java" size="6429" author="yseeley@gmail.com" created="Wed, 20 Jun 2007 01:34:52 +0100"/>
                            <attachment id="12360153" name="RandomSortField.java" size="6331" author="ryantxu" created="Wed, 20 Jun 2007 00:14:07 +0100"/>
                            <attachment id="12360149" name="RandomSortField.java" size="3873" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 23:37:14 +0100"/>
                            <attachment id="12360143" name="RandomSortField.java" size="2506" author="yseeley@gmail.com" created="Tue, 19 Jun 2007 22:55:51 +0100"/>
                            <attachment id="12360422" name="SOLR-264-RandomSortField-2.patch" size="1998" author="koji" created="Sun, 24 Jun 2007 16:12:26 +0100"/>
                            <attachment id="12360337" name="SOLR-264-RandomSortField-2.patch" size="1998" author="koji" created="Fri, 22 Jun 2007 02:46:52 +0100"/>
                            <attachment id="12360075" name="SOLR-264-RandomSortOrder.patch" size="3852" author="ryantxu" created="Tue, 19 Jun 2007 05:27:31 +0100"/>
                            <attachment id="12360052" name="SOLR-264-RandomSortOrder.patch" size="3756" author="ryantxu" created="Mon, 18 Jun 2007 18:27:52 +0100"/>
                            <attachment id="12359989" name="SOLR-264-RandomSortOrder.patch" size="4061" author="ryantxu" created="Mon, 18 Jun 2007 08:05:08 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 18 Jun 2007 16:17:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7325</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxsef:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20920</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>