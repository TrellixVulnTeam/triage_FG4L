<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:22:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-258/SOLR-258.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-258] Date based Facets</title>
                <link>https://issues.apache.org/jira/browse/SOLR-258</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;1) Allow clients to express concepts like...&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&quot;give me facet counts per day for every day this month.&quot;&lt;/li&gt;
	&lt;li&gt;&quot;give me facet counts per hour for every hour of today.&quot;&lt;/li&gt;
	&lt;li&gt;&quot;give me facet counts per hour for every hour of a specific day.&quot;&lt;/li&gt;
	&lt;li&gt;&quot;give me facet counts per hour for every hour of a specific day and give me facet counts for the&lt;br/&gt;
       number of matches before that day, or after that day.&quot; &lt;br/&gt;
2) Return all data in a way that makes it easy to use to build filter queries on those date ranges.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12371198">SOLR-258</key>
            <summary>Date based Facets</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hossman">Hoss Man</assignee>
                                    <reporter username="hossman">Hoss Man</reporter>
                        <labels>
                    </labels>
                <created>Fri, 8 Jun 2007 01:41:42 +0100</created>
                <updated>Fri, 10 May 2013 11:38:47 +0100</updated>
                            <resolved>Thu, 6 Sep 2007 21:08:29 +0100</resolved>
                                                    <fixVersion>1.3</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12502588" author="hossman" created="Fri, 8 Jun 2007 01:50:35 +0100"  >&lt;p&gt;First pass, no tests but the basics work ... i&apos;m not all that happy about the cleanliness of the code yet (particularly the back and forth of format conversions).&lt;/p&gt;

&lt;p&gt;Params...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;facet.date = FIELD_NAME ... multivalued&lt;/li&gt;
	&lt;li&gt;(f. FIELD_NAME.)facet.date.start = DATE ... single value, per field overridable, date that supports &quot;NOW&quot; style date math strings&lt;/li&gt;
	&lt;li&gt;(f. FIELD_NAME.)facet.date.end = DATE ... single value, per field overridable, date that supports &quot;NOW&quot; style date math strings&lt;/li&gt;
	&lt;li&gt;(f. FIELD_NAME.)facet.date.gap = DATE_MATH_STR ... single value, per field overridable, date math string (ie: &quot;+1DAY&quot;)&lt;/li&gt;
	&lt;li&gt;(f. FIELD_NAME.)facet.date.other = pre | post | inner | all ... multivalue, per field overridable, string indicating what &quot;other&quot; info we want about the range:&lt;br/&gt;
          o pre = the count of matches before the start date&lt;br/&gt;
          o post = the count of matches after the end date&lt;br/&gt;
          o inner = the count of all matches between start and end&lt;br/&gt;
          o all = all of the above (default value)&lt;br/&gt;
          o none = no additional info requested. &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Still Todo...&lt;/p&gt;

&lt;p&gt;1) add the support for facet.date.other (simple to do, just ran out of time to day)&lt;br/&gt;
2)  Date parsing needs to be enhanced to support date math on full date strings, not just &quot;NOW&quot; that way if a client knows they are using facet.date.gap of +1DAY and they get back a facet count for 1995-12-31T00:00:00.000Z they can easily generate a filter query for field:&lt;span class=&quot;error&quot;&gt;&amp;#91;1995-12-31T00:00:00.000Z TO 1995-12-31T00:00:00.000Z+1DAY&amp;#93;&lt;/span&gt; to restrict their results &lt;br/&gt;
3) rethink some of the &quot;ft.toExternal(ft.toInternal(...))&quot; type stuff going on to ensure any date math strings are parsed... some of this may make sense as lower level methods in the DateField class&lt;/p&gt;

&lt;p&gt;Questions I&apos;m not sure about...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;how much should we worry about gaps not dividing evenly between start/end ... right now every range is exactly &quot;gap&quot; wide ... even if it goes past the &quot;end&quot;.  Should the last gap end at &quot;end&quot; no matter what? (how would we return that info in a way that&apos;s easy to parse and make a filter query out of)&lt;/li&gt;
	&lt;li&gt;ranges currently include both end poinst ... Ideally we&apos;d include one end but not the other (so no overlap) but that makes filterqueries to restrict by those rnages hard (even though queryparser supports inclusive or exclusive ranges it doesn&apos;t support a mix/match of inclusive on one side and exclusive on the other).  maybe we can have an &quot;interval&quot; param which defaults to one millisecond so ranges can allways be inclusive and still not overlap?&lt;/li&gt;
	&lt;li&gt;what should happen if &quot;end &amp;lt; start&quot; or &quot;gap &amp;lt; 0&quot; ... maybe those should be okay as long as both are true.&lt;/li&gt;
	&lt;li&gt;should we support hardcoded default values for start, end, and gap? ... for start it&apos;s easy to get the lowest value in the field, but what about gap and end?&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12504925" author="hossman" created="Thu, 14 Jun 2007 22:27:19 +0100"  >&lt;p&gt;no functionality changes, just reivsed to work with current trunk (547393)&lt;/p&gt;</comment>
                            <comment id="12504996" author="hossman" created="Fri, 15 Jun 2007 02:39:49 +0100"  >&lt;p&gt;revised patch with added functionality...&lt;/p&gt;

&lt;p&gt;1) facet.date.other now supported&lt;br/&gt;
2) the value of &quot;gap&quot; always explicitly returned for each field so all of the dates used as keys can be made into filter queries because...&lt;br/&gt;
3) DateField enhanced to support DateMath parsing of arbitrary dates (ie: 1995-12-31T23:59:59.999Z+5MINUTES)&lt;/p&gt;

&lt;p&gt;still haven&apos;t answered any of hte open questions before, nor have i cleaned up the usage of things like ft.toExternal(ft.toInternal(...)) in SimpleFacets &lt;/p&gt;

&lt;p&gt;(it still bugs me, but i&apos;d rather not refactor until i have some test cases)&lt;/p&gt;</comment>
                            <comment id="12507041" author="hossman" created="Thu, 21 Jun 2007 22:43:53 +0100"  >&lt;p&gt;no functional changes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;updated to work against trunk&lt;/li&gt;
	&lt;li&gt;changed name of toExternal method to toObejct to be more consistent with recent trunk additions.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12512311" author="hossman" created="Fri, 13 Jul 2007 00:55:52 +0100"  >&lt;p&gt;patch now includes unit tests, as well as a bug fix i discovered for the pre/inner/post logic after writing the test.&lt;/p&gt;</comment>
                            <comment id="12512312" author="hossman" created="Fri, 13 Jul 2007 00:57:28 +0100"  >&lt;p&gt;i&apos;d like to commit this in the next few days baring any objections.&lt;/p&gt;

&lt;p&gt;in particular, feedback on the API (ie: query params) would be good ... the internals can always be cleaned up later if people don&apos;t like them, but the query args should be sanity checked before people start using them.&lt;/p&gt;</comment>
                            <comment id="12512353" author="ryantxu" created="Fri, 13 Jul 2007 04:38:21 +0100"  >&lt;p&gt;This looks great Hoss.  Thanks!&lt;/p&gt;

&lt;p&gt;The facet param interface look reasonable.  Structurally, I would like to see &apos;component&apos; based params split into their own file - FacetParams should be similar to HighlightParams.  It seems funny to munge the get/set field bit with the expanding list of things we may get or set.  If we implement FacetParams as an interface (like HighlightParams), the deprecated class o.a.s.request.SolrParams could implement FacetParams.&lt;/p&gt;

&lt;p&gt;One thing to note on FacetDateOther.get( string ), if you put in an invalid string, you will get IllegalArgumentException or NullPointer - not a 400 response code.  Perhaps somethign like:&lt;/p&gt;

&lt;p&gt;  public enum FacetDateOther {&lt;br/&gt;
    PRE, POST, INNER, ALL, NONE;&lt;br/&gt;
    public String toString() &lt;/p&gt;
{ return super.toString().toLowerCase(); }
&lt;p&gt;    public static FacetDateOther get(String label) {&lt;br/&gt;
      try &lt;/p&gt;
{
        return valueOf(label.toUpperCase());
      }
&lt;p&gt;      catch( Exception ex ) &lt;/p&gt;
{
        throw new SolrException
          (SolrException.ErrorCode.BAD_REQUEST,
           label +&quot; is not a valid type of &apos;other&apos; date facet information&quot;, ex );
      }
&lt;p&gt;    }&lt;br/&gt;
  } &lt;/p&gt;

&lt;p&gt;Personally, I like the sound of  &quot;before&quot;, &quot;after&quot; and &quot;between&quot; better then &quot;pre&quot; &quot;post&quot; &quot;inner&quot;.  before/after seem to sit nicely with the other parameters &apos;start&apos; &apos;end&apos;.&lt;/p&gt;</comment>
                            <comment id="12512372" author="pberkel" created="Fri, 13 Jul 2007 07:16:36 +0100"  >&lt;p&gt;I&apos;ve just tried this patch and the results are impressive!&lt;/p&gt;

&lt;p&gt;I agree with Ryan regarding the naming of &apos;pre&apos;, &apos;post&apos; and &apos;inner&apos;, using simple concrete words will make it easier for developers to understand the basic concepts.  At first I was a little confused how the &apos;gap&apos; parameter was used, perhaps a name like &apos;interval&apos; would be more indicative of it&apos;s purpose?&lt;/p&gt;

&lt;p&gt;While on the topic of gaps / intervals, I can imagine a case where one might want facet counts over non-linear intervals, for instance obtaining results from: &quot;Last 7 days&quot;, &quot;Last 30 days&quot;, &quot;Last 90 days&quot;, &quot;Last 6 months&quot;.  Obviously you can achieve this by setting facet.date.gap=+1DAY and then post-process the results, but a much more elegant solution would be to allow &quot;facet.date.gap&quot;  (or another suitably named param) to accept a (comma-delimited) set of explicit partition dates:&lt;/p&gt;

&lt;p&gt;facet.date.start=NOW-6MONTHS/DAY&lt;br/&gt;
facet.date.end=NOW/DAY&lt;br/&gt;
facet.date.gap=NOW-90DAYS/DAY,NOW-30DAYS/DAY,NOW-7DAYS/DAY&lt;/p&gt;

&lt;p&gt;It would then be trivial to calculate facet counts for the ranges specified above.&lt;/p&gt;

&lt;p&gt;It would be useful to make the &apos;start&apos; an &apos;end&apos; parameters optional.  If not specified &apos;start&apos; should default to the earliest stored date value, and &apos;end&apos; should default to the latest stored date value (assuming that&apos;s possible).  Probably should return a 400 if &apos;gap&apos; is not set.&lt;/p&gt;

&lt;p&gt;My personal opinion is that &apos;end&apos; should be a hard limit, the last gap should never go past &apos;end&apos;.  Given that the facet label is always generated from the lower value in the range, I don&apos;t think truncating the last &apos;gap&apos; will cause problems, however it may be helpful to return the actual date value for &quot;end&quot; if it was specified as a offset of NOW.&lt;/p&gt;

&lt;p&gt;What might be a problem is when both start and end dates are specified as offsets of NOW, the value of NOW may not be constant for both values.  In one of my tests, I set:&lt;/p&gt;

&lt;p&gt;facet.date.start=NOW-12MONTHS&lt;br/&gt;
facet.date.end=NOW&lt;br/&gt;
facet.date.gap=+1MONTH&lt;/p&gt;

&lt;p&gt;With some extra debugging output I can see that mostly the value of NOW is the same:&lt;/p&gt;

&lt;p&gt;&amp;lt;str name=&quot;start&quot;&amp;gt;2006-07-13T06:06:07.397&amp;lt;/str&amp;gt;&lt;br/&gt;
&amp;lt;str name=&quot;end&quot;&amp;gt;2007-07-13T06:06:07.397&amp;lt;/str&amp;gt;&lt;/p&gt;

&lt;p&gt;However occasionally there is a difference:&lt;/p&gt;

&lt;p&gt;&amp;lt;str name=&quot;start&quot;&amp;gt;2006-07-13T05:48:23.014&amp;lt;/str&amp;gt;&lt;br/&gt;
&amp;lt;str name=&quot;end&quot;&amp;gt;2007-07-13T05:48:23.015&amp;lt;/str&amp;gt;&lt;/p&gt;

&lt;p&gt;This difference alters the number of gaps calculated (+1 when NOW values are diff for start &amp;amp; end).  Not sure how this could be fixed, but as you mentioned above, it will probably involve changing &quot;ft.toExternal(ft.toInternal(...))&quot;.&lt;/p&gt;

&lt;p&gt;Thanks again for creating this useful addition, I&apos;ll try to test it a bit more and see if I can find anything else.&lt;/p&gt;</comment>
                            <comment id="12512559" author="hossman" created="Fri, 13 Jul 2007 19:14:07 +0100"  >
&lt;p&gt;1) i&apos;m happy to break out the FacetParams into their own interface ... but i&apos;d like to track that in a separate refactoring commit (since the existing facet params are already in SolrParams)&lt;/p&gt;

&lt;p&gt;2) i clearly anticipated the FacetDateOther.get( bogus ) problem .. but for some reason i thought it returned null ... i&apos;ll fix that.&lt;/p&gt;

&lt;p&gt;3) i actually considered before, between, and after originally but decided they were too long (i was trying to find a way to make &quot;start&quot; shorter as well ... but two people thinking there better convinces me.&lt;/p&gt;

&lt;p&gt;4) my hesitation about renaming &quot;gap&quot; to &quot;interval&quot; is that i wanted to leave the door open for a sperate &quot;interval&quot; option (to define a &quot;gap between the gaps&quot; so to speak) later should it be desired ... see the &quot;questions&quot; i listed when opening the bug.&lt;/p&gt;

&lt;p&gt;5) i don&apos;t think this code makes sense for non-linear intervals ... the problem i&apos;m really trying to solve here is using 3 params to express equal date divisions across an arbitrarily long time scale.   for the example you listed simple facet.query options probably make more sense&lt;/p&gt;

&lt;p&gt;(allthough you do have me now thinking that a another good faceting option would be some new &quot;facet.range&quot; where many values can be specified, they all get sorted and then ranges are built between each successive value ... bt that should be a seperate issue)&lt;/p&gt;

&lt;p&gt;6) i want to make start and end optional, but for now i can&apos;t think of a clean/fast way to do end ... and we can always add defaults later.&lt;/p&gt;

&lt;p&gt;7) my prefrence is for every count to cover a range of exactly &quot;gap&quot; but i can definitely see where having a hard cutoff of &quot;end&quot; is usefull, so i&apos;ll make it an option ... name suggestions?&lt;/p&gt;

&lt;p&gt;i&apos;ll make sure to echo the value of &quot;end&quot; as well so it&apos;s easy to build filter queries for that last range ... probably should have it anyway to build filter queries on between and after.&lt;/p&gt;

&lt;p&gt;should the ranges used to compute the between and after counts depend on where the last range ended or on the literal &quot;end&quot; param?&lt;/p&gt;

&lt;p&gt;8) the NOW variance really bugs me ... back when i built DateMathParser i anticipated this by making the parser have a fixed concept of NOW which could be used to parse multiple strings but i don&apos;t kow why i didn&apos;t consider it when working on this new patch.&lt;br/&gt;
the real problem is that right now DateField is relied on to do all hte parsing, and a single instance can&apos;t have a fixed notion of &quot;NOW&quot; ... it builds a new DateMathParser each time ... i think i&apos;m going ot have to do some heavily refactoring to fix this, which is annoying &amp;#8211; but i don&apos;t want to commit without fixing this, even if it takes a while any bug that can produce an &quot;off by 1 millisecond&quot; discrepancy should die a horrible horrible freaking death.&lt;/p&gt;
</comment>
                            <comment id="12512571" author="ryantxu" created="Fri, 13 Jul 2007 19:40:07 +0100"  >&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; but i&apos;d like to track that in a separate refactoring commit (since the existing facet params are already in SolrParams)&lt;/p&gt;

&lt;p&gt;sounds good.&lt;/p&gt;

&lt;p&gt;&amp;gt; ... originally but decided they were too long ..&lt;/p&gt;

&lt;p&gt;In general, I favor longer self explanatory param names over short ones.    It is kind of annoying to have to look up &apos;pf&apos;, &apos;bq&apos; to decode what it means.  &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;- -&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Again, this is really great.  Now we can build the ubiquitous calendar widget from solr.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12512592" author="yseeley@gmail.com" created="Fri, 13 Jul 2007 20:40:28 +0100"  >&lt;p&gt;wrt &quot;NOW&quot;, DateMathParser constructor could pass in &quot;now&quot;, and take it from SolrQueryRequest.getStartTime()... the big problem being that I doubt the SolrQueryRequest is always available everywhere it&apos;s needed.&lt;/p&gt;

&lt;p&gt;Of course, if you had the request, you could just use it&apos;s context to stash a DateMathParser too.&lt;/p&gt;

&lt;p&gt;a ThreadLocal would be another (much less desirable) approach.&lt;/p&gt;</comment>
                            <comment id="12512626" author="hossman" created="Fri, 13 Jul 2007 22:19:34 +0100"  >&lt;p&gt;&amp;gt; the big problem being that I doubt the SolrQueryRequest is always available everywhere it&apos;s needed. &lt;/p&gt;

&lt;p&gt;...exactly, at the moment all of the date parsing is done inside DateField.&lt;/p&gt;

&lt;p&gt;i think i&apos;ll try refactoring it so that DateMathParser does &lt;b&gt;all&lt;/b&gt; the parsing, and make DateField delegate to it in the non-trivial case.&lt;/p&gt;

&lt;p&gt;the problem that&apos;s still a pain to solve is getting all concepts of &quot;NOW&quot; to be the samefor a request ... things like an fq=f:&lt;span class=&quot;error&quot;&gt;&amp;#91;NOW * NOW+1DAY&amp;#93;&lt;/span&gt;  are handled by DateField via a query parser ... i can&apos;t think of easy way to make that consistent with the facet parsing definition of &quot;NOW&quot; (without resorting to a ThreadLocal)&lt;/p&gt;</comment>
                            <comment id="12512775" author="tristanv" created="Sun, 15 Jul 2007 07:32:13 +0100"  >&lt;p&gt;&amp;gt; 4) my hesitation about renaming &quot;gap&quot; to &quot;interval&quot; is that i wanted to leave the door open &lt;br/&gt;
&amp;gt;      for a sperate &quot;interval&quot; option (to define a &quot;gap between the gaps&quot; so to speak) later &lt;br/&gt;
&amp;gt;      should it be desired ... see the &quot;questions&quot; i listed when opening the bug.&lt;/p&gt;

&lt;p&gt;I do like the idea of having an &quot;interval&quot; between &quot;gaps&quot;, however to me it would make more sense to reverse the meanings of these parameters to have &quot;gaps&quot; between &quot;intervals&quot;.  Regardless, as long as it&apos;s clearly documented, it shouldn&apos;t make any difference what you name them.&lt;/p&gt;

&lt;p&gt;&amp;gt; 5) i don&apos;t think this code makes sense for non-linear intervals ...&lt;/p&gt;

&lt;p&gt;It might be better to keep the logic simple and as-is for now so you can commit it.  Having a &quot;facet.range&quot; parameter or some way to specify multiple date facets on a single field would be useful in the future.&lt;/p&gt;

&lt;p&gt;&amp;gt; 7) my prefrence is for every count to cover a range of exactly &quot;gap&quot; but i can definitely see where &lt;br/&gt;
&amp;gt;      having a hard cutoff of &quot;end&quot; is usefull, so i&apos;ll make it an option ... name suggestions?&lt;/p&gt;

&lt;p&gt;Just thinking through this further, rather than specifying both start and end times, it might be more precise to specify a single start time, a gap, and a gap &quot;count&quot; (how many &quot;gaps&quot; to include), this will avoid the problem of the last &quot;gap&quot; going past the &quot;end&quot; date.&lt;/p&gt;

&lt;p&gt;I find it much easier to criticize other people&apos;s naming conventions than to come up with good ones myself, however I&apos;ll offer &quot;hardend&quot; (true | false) as an interim name, hopefully someone can think of a better one.&lt;/p&gt;

&lt;p&gt;&amp;gt; i&apos;ll make sure to echo the value of &quot;end&quot; as well so it&apos;s easy to build filter queries for that last range ... &lt;br/&gt;
&amp;gt; probably should have it anyway to build filter queries on between and after.&lt;/p&gt;

&lt;p&gt;It might be helpful to output the value of &quot;start&quot; also, especially if it was specified as an offset of NOW.&lt;/p&gt;

&lt;p&gt;&amp;gt; should the ranges used to compute the between and after counts depend on where the last range ended or on the literal &quot;end&quot; param?&lt;/p&gt;

&lt;p&gt;I suppose this will depend on the value of &quot;hardend&quot;, if true then use the &quot;end&quot; value, otherwise use the end of the last gap.&lt;/p&gt;

&lt;p&gt;&amp;gt; 8) the NOW variance really bugs me ...&lt;/p&gt;

&lt;p&gt;Sounds like a pretty nasty problem affecting more than just this date facet.  I know Solr is not a RDBMS, but I always assumed that NOW would be constant throughout the life of a query.  Definitely something to think about as a seperate issue though.&lt;/p&gt;</comment>
                            <comment id="12512776" author="hossman" created="Sun, 15 Jul 2007 07:48:18 +0100"  >&lt;p&gt;&amp;gt; it might be more precise to specify a single start time, a gap, and a gap &quot;count&quot; &lt;br/&gt;
&amp;gt; (how many &quot;gaps&quot; to include), this will avoid the problem of the last &quot;gap&quot; &lt;br/&gt;
&amp;gt; going past the &quot;end&quot; date.&lt;/p&gt;

&lt;p&gt;that would eliminate the DateMathParser value add for ... right now you can hardcode &quot;start=NOW/MONTH&amp;amp;end=NOW/MONTH+1MONTH&amp;amp;gap=+1DAY&quot; and get counts per day for the current month &amp;#8211; no matter how many days are in the current month ... if we changed it so a param said how many counts to compute they couldn&apos;t be specified in the solrconfig and the client would have to be a lot smarter (and might as well use explicit date params since it has to know the  current month to know the number of days)&lt;/p&gt;

&lt;p&gt;&amp;gt; It might be helpful to output the value of &quot;start&quot; also, &lt;br/&gt;
&amp;gt; especially if it was specified as an offset of NOW.&lt;/p&gt;

&lt;p&gt;that&apos;s already in the output ... each count is labeled by the lower bound of it&apos;s range, so the label of the first count is the  start .. but i guess there&apos;s no harm in being explicit about it.&lt;/p&gt;</comment>
                            <comment id="12512778" author="pberkel" created="Sun, 15 Jul 2007 07:58:22 +0100"  >&lt;p&gt;Sorry that last comment was from me (not Tristan), not posted from my regular computer.  I&apos;ll be more careful to post as myself and not as a colleague in future (I was wondering why JIRA didn&apos;t ask me to login, d&apos;oh).&lt;/p&gt;</comment>
                            <comment id="12514019" author="hossman" created="Thu, 19 Jul 2007 23:03:29 +0100"  >&lt;p&gt;checkpoint...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;renamed pre/post/inner to before/after/between&lt;/li&gt;
	&lt;li&gt;added a new facet.date.hardend param (with test additions)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;...still need to tackle the &quot;NOW&quot; inconsistency issue.&lt;/p&gt;</comment>
                            <comment id="12514043" author="hossman" created="Fri, 20 Jul 2007 00:12:44 +0100"  >&lt;p&gt;fixed the the NOW issue by refactoring the toExternal(toInternal()) logic into a new DateField.parseMath(Date,String) method ... a DateMathParser is still used internally to deal with teh math parsing aspects, but i wanted to leave the assumptions about the date format in the DateField class itself.&lt;/p&gt;

&lt;p&gt;comments/critique about this approach welcome.&lt;/p&gt;</comment>
                            <comment id="12515208" author="pberkel" created="Wed, 25 Jul 2007 06:46:22 +0100"  >&lt;p&gt;Looking good Hoss, the NOW issue seems to be resolved and the results look consistent after a quick test.&lt;/p&gt;

&lt;p&gt;&amp;gt; * what should happen if &quot;end &amp;lt; start&quot; or &quot;gap &amp;lt; 0&quot; ... maybe those should be okay as long as both are true. &lt;/p&gt;

&lt;p&gt;It is probably wise to explicitly check for (&quot;end &amp;lt; start&quot; XOR &quot;gap &amp;lt; 0&quot;) and return an error if so, otherwise the request gets caught in an infinite loop.&lt;/p&gt;

&lt;p&gt;Just on the subject of errors, I notice that exceptions thrown by the date facet code are caught in SimpleFacets.getFacetCounts() and written out in the response:&lt;/p&gt;

&lt;p&gt;    try &lt;/p&gt;
{
      res.add(&quot;facet_queries&quot;, getFacetQueryCounts());
      res.add(&quot;facet_fields&quot;, getFacetFieldCounts());
      res.add(&quot;facet_dates&quot;, getFacetDateCounts());
    }
&lt;p&gt; catch (Exception e) &lt;/p&gt;
{
      SolrException.logOnce(SolrCore.log, &quot;Exception during facet counts&quot;, e);
      res.add(&quot;exception&quot;, SolrException.toStr(e));
    }

&lt;p&gt;This doesn&apos;t seem very consistent the way other handlers deal with exceptions (i.e. http response code &amp;gt; 400), is there any reason why it is done this way in SimpleFacets?&lt;/p&gt;

&lt;p&gt;I also think it would also be a good idea to merge &quot;facet_dates&quot; response field into &quot;facet_fields&quot; so that all the facet data in the response is stored in the one location, how feasible would it be to do this?&lt;/p&gt;</comment>
                            <comment id="12515221" author="hossman" created="Wed, 25 Jul 2007 07:42:54 +0100"  >&lt;p&gt;&amp;gt; It is probably wise to explicitly check for (&quot;end &amp;lt; start&quot; XOR &quot;gap &amp;lt; 0&quot;) and return an error &lt;/p&gt;

&lt;p&gt;yeah ... good point.&lt;/p&gt;

&lt;p&gt;&amp;gt; Just on the subject of errors, I notice that exceptions thrown by the date facet code are&lt;br/&gt;
&amp;gt; caught in SimpleFacets.getFacetCounts() and written out in the response:&lt;br/&gt;
...&lt;br/&gt;
&amp;gt; This doesn&apos;t seem very consistent the way other handlers deal with exceptions (i.e. http &lt;br/&gt;
&amp;gt; response code &amp;gt; 400), is there any reason why it is done this way in SimpleFacets? &lt;/p&gt;

&lt;p&gt;SimpleFacets isn&apos;t a handler, it&apos;s just a utility class that other handlers can use. &lt;/p&gt;

&lt;p&gt; the original idea behind catching the errors and adding them to the response is that even if a problem happens while generating facet counts, that&apos;s just auxiliary data &amp;#8211; and the main result set is (probably) still useful, so let the request finish successfully so the client can decide what to do.&lt;/p&gt;

&lt;p&gt;&amp;gt; I also think it would also be a good idea to merge &quot;facet_dates&quot; response field into&lt;br/&gt;
&amp;gt; &quot;facet_fields&quot; so that all the facet data in the response is stored in the one location, how&lt;br/&gt;
&amp;gt; feasible would it be to do this?&lt;/p&gt;

&lt;p&gt;facet_dates and facet_fields are both children of single parent (facet_counts) just like facet_queries ... but they are in their own sub sections because the meaning and usecase are different ... if they were all lumped together you couldn&apos;t pragmatically know what each of the children were.&lt;/p&gt;</comment>
                            <comment id="12525511" author="hossman" created="Thu, 6 Sep 2007 21:08:29 +0100"  >&lt;p&gt;strange i could have sworn i resolved this issue ... commited over a month ago.&lt;/p&gt;</comment>
                            <comment id="12579150" author="hossman" created="Sun, 16 Mar 2008 03:23:52 +0000"  >&lt;p&gt;This bug was modified as part of a bulk update using the criteria...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Marked &quot;Resolved&quot; and &quot;Fixed&quot;&lt;/li&gt;
	&lt;li&gt;Had no &quot;Fix Version&quot; versions&lt;/li&gt;
	&lt;li&gt;Was listed in the CHANGES.txt for 1.3 as of today 2008-03-15&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The Fix Version for all 29 issues found was set to 1.3, email notification was suppressed to prevent excessive email.&lt;/p&gt;

&lt;p&gt;For a list of all the issues modified, search jira comments for this (hopefully) unique string: batch20070315hossman1&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12362175" name="date_facets.patch" size="21613" author="hossman" created="Fri, 20 Jul 2007 00:12:43 +0100"/>
                            <attachment id="12362168" name="date_facets.patch" size="21103" author="hossman" created="Thu, 19 Jul 2007 23:03:28 +0100"/>
                            <attachment id="12361728" name="date_facets.patch" size="18182" author="hossman" created="Fri, 13 Jul 2007 00:55:52 +0100"/>
                            <attachment id="12360325" name="date_facets.patch" size="12183" author="hossman" created="Thu, 21 Jun 2007 22:43:53 +0100"/>
                            <attachment id="12359791" name="date_facets.patch" size="12251" author="hossman" created="Fri, 15 Jun 2007 02:39:49 +0100"/>
                            <attachment id="12359773" name="date_facets.patch" size="6795" author="hossman" created="Thu, 14 Jun 2007 22:27:19 +0100"/>
                            <attachment id="12359228" name="date_facets.patch" size="6789" author="hossman" created="Fri, 8 Jun 2007 01:50:34 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 13 Jul 2007 03:38:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7331</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxsfr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20926</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>