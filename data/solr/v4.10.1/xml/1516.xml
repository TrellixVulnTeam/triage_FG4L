<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:23:02 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-1516/SOLR-1516.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-1516] DocumentList and Document QueryResponseWriter</title>
                <link>https://issues.apache.org/jira/browse/SOLR-1516</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;I tried to implement a custom QueryResponseWriter the other day and was amazed at the level of unmarshalling and weeding through objects that was necessary just to format the output o.a.l.Document list. As a user, I wanted to be able to implement either 2 functions:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;process a document at a time, and format it (for speed/efficiency)&lt;/li&gt;
	&lt;li&gt;process all the documents at once, and format them (in case an aggregate calculation is necessary for outputting)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, I&apos;ve decided to contribute 2 simple classes that I think are sufficiently generic and reusable. The first is o.a.s.request.DocumentResponseWriter &amp;#8211; it handles the first bullet above. The second is o.a.s.request.DocumentListResponseWriter. Both are abstract base classes and require the user to implement either an #emitDoc function (in the case of bullet 1), or an #emitDocList function (in the case of bullet 2). Both classes provide an #emitHeader and #emitFooter function set that handles formatting and output before the Document list is processed.&lt;/p&gt;
</description>
                <environment>&lt;p&gt;My MacBook Pro laptop.&lt;/p&gt;</environment>
        <key id="12438414">SOLR-1516</key>
            <summary>DocumentList and Document QueryResponseWriter</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="noble.paul">Noble Paul</assignee>
                                    <reporter username="chrismattmann">Chris A. Mattmann</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Oct 2009 02:52:52 +0100</created>
                <updated>Wed, 30 Mar 2011 16:45:44 +0100</updated>
                            <resolved>Wed, 25 Nov 2009 11:08:52 +0000</resolved>
                                    <version>1.3</version>
                                    <fixVersion>1.5</fixVersion>
                    <fixVersion>3.1</fixVersion>
                    <fixVersion>4.0-ALPHA</fixVersion>
                                    <component>search</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12767207" author="shalinmangar" created="Mon, 19 Oct 2009 05:13:52 +0100"  >&lt;p&gt;Moving to 1.5. We are not accepting new features for 1.4 anymore.&lt;/p&gt;</comment>
                            <comment id="12767925" author="chrismattmann" created="Tue, 20 Oct 2009 21:11:19 +0100"  >&lt;p&gt;Hi All:&lt;/p&gt;

&lt;p&gt;I don&apos;t mean to be a pest here, but I&apos;ve seen the amount of activity going on the SOLR lists recently, as well as the decision to hold off on calling for a vote on 1.4 until Lucene 2.9.1 is released. This patch is self-contained, doesn&apos;t touch any code, and honestly, it only adds functionality that would have made my life as a user of SOLR a lot easier (I would have saved the hour of debugging and printing out #getClass on the Objects in NamedList, and on top of that only had to implement an #emitDoc or #emitDocList function and optionally #emitHeader and #emitFooter, rather than the rest of the supporting code).&lt;/p&gt;

&lt;p&gt;Am I the only one that&apos;s run into a problem trying to write a custom XML SOLR output that&apos;s inherently simple? That is, XML output that doesn&apos;t need to worry about the inherent types of the named values in the NamedList, output that only cares about spitting out the set of returned Documents?&lt;/p&gt;

&lt;p&gt;It would be great to see this get into 1.4, but if I&apos;m the outlier, I can wait. Just thought I&apos;d raise the issue.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12770756" author="chrismattmann" created="Wed, 28 Oct 2009 02:26:40 +0000"  >&lt;p&gt;I haven&apos;t really heard any comments on this issue, and I&apos;ve got the impression that not many folks write these QueryResponseWriters. To me, writing one was invaluable. The use case was:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I make the choice to make SOLR the gold source for search index data (I&apos;m dealing with planetary science and earth science data on 4-5 projects)&lt;/li&gt;
	&lt;li&gt;I want to drive search but &lt;em&gt;also&lt;/em&gt; met output from SOLR (treating SOLR as a search web service, with customizable output &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;)&lt;/li&gt;
	&lt;li&gt;the default SOLR XML and the 5-7 output formats didn&apos;t do it for me since I have some specialized earth and planetary science use cases. E.g., on a few different projects, I need to be able to:&lt;/li&gt;
	&lt;li&gt;output FGDC XML (yes it&apos;s a standard for earth science metadata, and also relevant for the GeoSOLR stuff)&lt;/li&gt;
	&lt;li&gt;output custom RDF metadata&lt;/li&gt;
	&lt;li&gt;output a particular style of JSON to plug in to some external web client, e.g., an auto-suggest that requires its own JSON format, not SOLR&apos;s&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  To illustrate the reason that the 5-7 output formats didn&apos;t do it for me either, I&apos;ll use an example. There may be the sense of, &quot;well why didn&apos;t I write some Java/Ruby/PHP/Python client that called SOLR and one of it&apos;s existing wt&apos;s and then output a custom format from your favorite programming language (PL)&quot;? The reasons are three fold:&lt;/p&gt;

&lt;p&gt;  1. SOLR advertises that the QueryResponseWriter interface is an official SOLR plugin and interface, at least according to:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the Wiki documentation &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;the advertised published book on SOLR &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;Chris Hostetter&apos;s ApacheCon08 slides as part of the core SOLR architecture in his 50K foot view diagram &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. If SOLR is truly a search web service, and allows for changeable output formats (evidenced by exposing the wt parameter), then why force people to use one of the existing wt&apos;s and then ask them to transform (either via a PL, or via XSLT) instead of allowing them to natively generate the specific output format type?&lt;/p&gt;

&lt;p&gt;3. Why make o.a.l.r.QueryResponseWriter an interface and not a concrete class if it is never intended to be implemented by others, or more importantly, is kind of non-intuitive to implement?&lt;/p&gt;

&lt;p&gt;Besides 1-3 for me, I have external COTS and OTS tools that cannot be changed and that expect data to be loaded into them in a particular format, and I&apos;d like to plug them into SOLR and the easiest way for me to do that is with a curl/wget type operation and then a pipe into the COTS/OTS tool, and wt&apos;s are the way to go for that.&lt;/p&gt;

&lt;p&gt;So, given the above, when I went to write a &quot;wt&quot; I was surprised how hard it was for me to understand the NamedList structure which is just a bag of objects that you have to unpack with unfriendly instanceof checks and recursive unmarshalling (walking the NamedList tree). All I wanted for my wt was to be able to format the output Document List or on a Doc-by-doc basis. &lt;/p&gt;

&lt;p&gt;Anyways just wanted to provide some further fodder and discussion for this issue. To me this is important, and clearly, based on &lt;span class=&quot;error&quot;&gt;&amp;#91;1-3&amp;#93;&lt;/span&gt;, QueryResponseWriters by definition seem to be a big piece of the SOLR architecture.&lt;/p&gt;


&lt;p&gt;Chris&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://wiki.apache.org/solr/QueryResponseWriter&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/solr/QueryResponseWriter&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://people.apache.org/~hossman/apachecon2008us/btb/apache-solr-beyond-the-box.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~hossman/apachecon2008us/btb/apache-solr-beyond-the-box.pdf&lt;/a&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; SOLR 1.4 Enterprise Search Server, Packt Publishing, 2009.&lt;/p&gt;
</comment>
                            <comment id="12770811" author="shalinmangar" created="Wed, 28 Oct 2009 07:06:51 +0000"  >&lt;p&gt;Chris, it is not about whether we want to encourage people to write custom QueryResponseWriters or not. We had an agreement on where to draw the line for accepting new issues. Had this issue been opened a few weeks earlier we would have pushed it into 1.4&lt;/p&gt;

&lt;p&gt;We can work on this as soon as 1.4 is out. You can either use your internal patched version or 1.5 trunk once this patch is committed.&lt;/p&gt;</comment>
                            <comment id="12770925" author="chrismattmann" created="Wed, 28 Oct 2009 13:28:47 +0000"  >&lt;p&gt;Shalin, I guess what I&apos;m trying to raise is a larger issue. You mention &quot;we&quot; had an agreement on where to draw the line for &quot;new issues&quot;. Well, what&apos;s a &quot;new issue&quot;? And, who&apos;s &quot;we&quot;? What&apos;s SOLR&apos;s process for new features versus bug fixes, etc.? I don&apos;t see it documented anywhere but I think it seems pretty clear to you what the process is. Admittedly I&apos;ve only been actively monitoring the SOLR list for a few weeks now, so perhaps it was discussed on the mailing lists before at some point. Is this something that can be put up (or is already) on the Wiki? Or perhaps you can point me to it? &lt;/p&gt;

&lt;p&gt;I know in 2005 for Nutch, we had a release vote called on 0.7 which was a large release and a big time production like Solr 1.4. I also know that, at the last minute, someone mentioned that there was an RSSParser out there in patch land, that only added functionality, didn&apos;t take anything away, didn&apos;t touch core modules, and was sufficiently commit worthy (javadocs, unit tests &lt;span class=&quot;error&quot;&gt;&amp;#91;if applicable&amp;#93;&lt;/span&gt;, etc.) Nutch was very much in the same type of release cycle back in that day that Solr was: huge release, many months in between releases, etc., so it was just as sacrilegious back then for these folks to ask whether the RSSParser could be included in Nutch at the last minute before a release vote, and after a discussed &quot;freeze&quot; on features. However, the Nutch committers took a step back, discussed the pros/cons (briefly, nothing major) over a few emails and decided why not? At the time, Nutch was producing a release pretty infrequently, so getting something into a release meant it was going to be out there for more people to use, touch, test, and leverage, which was a good thing since the next release wouldn&apos;t be coming for a while. And, I think we can all agree, releases are different than trunk, or patched versions of software. In many organizations, folks just aren&apos;t comfortable with saying, &quot;depend on the latest trunk&quot; or &quot;depend on release X + patch Y&quot;. Releases sound more official to management.&lt;/p&gt;

&lt;p&gt;I&apos;m fine with this patch not getting into 1.4 and I&apos;ll drop it since no one else really seems to be commenting on this and I was just trying to see if there was interest, which I hope is something that&apos;s allowed and encouraged over here in SOLR land. Everyone wants to feel like there is opportunity to be included and to ask questions and everyone wants a chance to have their patch included in a big release that will be widely disseminated.Beyond that, thinking through this issue made me ask myself yesterday (and with my earlier comment), well, &quot;how are the SOLR users writing these response writers?&quot;, or, &quot;are they even doing it that much?&quot; So, I was trying to use this issue as a placeholder to obtain feedback on that.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</comment>
                            <comment id="12770939" author="noble.paul" created="Wed, 28 Oct 2009 14:03:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;Well, what&apos;s a &quot;new issue&quot;? And, who&apos;s &quot;we&quot;? What&apos;s SOLR&apos;s process for new features versus bug fixes, etc.?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Solr has been in the release mode for over a month. There are so many loose ends which the we (committers ) are trying to tie up before the actual release happens.&lt;/p&gt;

&lt;p&gt;We always welcome new features. But , adding a feature means we are going to keep it for long. So we need to ensure that we add the right  feature in the right way because Solr cannot break back-compat .  So, somebody is going to review it and figure out all these. There are only so many hands and  they have only so much spare time to do all these .That is the reason why the last minute feature requests are discouraged . &lt;/p&gt;
</comment>
                            <comment id="12778259" author="noble.paul" created="Mon, 16 Nov 2009 08:34:00 +0000"  >&lt;p&gt;I am looking at the patch and find it difficult to see the value this brings.  &lt;/p&gt;

&lt;p&gt;I am in general interested in making it easier to make it easier to write a QueryResponseWriter . Let us think about how we can enhance this to have a GenericResponseWriter which can be the base for all writers&lt;/p&gt;</comment>
                            <comment id="12778360" author="chrismattmann" created="Mon, 16 Nov 2009 14:38:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;I am looking at the patch and find it difficult to see the value this brings. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you elaborate on why you don&apos;t think this patch adds value? I&apos;ve elaborated above on the value I think that this brings, and I would appreciate the same level of detail regarding the contrary.&lt;/p&gt;

&lt;p&gt;I&apos;m +1 for actually refactoring and rewriting the QueryResponseWriter framework, making all QueryResponseWriters use an abstract base class, and functions/methods around this, simplifying the code. Furthermore, I&apos;m also for getting rid of the abstract data structure (bag of objects) class called NamedValueList and replacing it with a more concrete type hierarchy, but I think that&apos;s another patch (or series of patches) IMHO. Furthermore, there is one succinct difference between this patch and any GenericResponseWriter that you are proposing, namely: the existing SOLR QueryResponseWriters are all means of hijacking the &lt;em&gt;entire&lt;/em&gt; SOLR QueryResponse and writing it out in a particular format. On the other hand, my patch is focused on allowing the user to hijack simply the returned DocumentList (full set), or hijack the response on a Doc-by-Doc basis.&lt;/p&gt;</comment>
                            <comment id="12778710" author="noble.paul" created="Tue, 17 Nov 2009 04:04:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can you elaborate on why you don&apos;t think this patch adds value? I&apos;ve elaborated above on the value I think that this brings, and I would appreciate the same level of detail regarding the contrary.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This does not help the user of the API much because the real difficulty is in unmarshalling various types of objects. This patch does nothing to read the stored fields from the Document .   &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m also for getting rid of the abstract data structure (bag of objects) class called NamedValueList and replacing it with a more concrete type hierarchy....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is really difficult. A lot of components write their output in a very arbitrary Object tree. The output is largely designed like a JSON object tree (with more promitives) . The producer decides what the tree contains. The good thing about this approach is that we don&apos;t need to build custom classes  for every type of output.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;On the other hand, my patch is focused on allowing the user to hijack simply the returned DocumentList&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is no reason why a GenericResponseWriter can&apos;t do that . I am not happy about putting this classes in and leading users to believe that this is all that they have to do.&lt;/p&gt;</comment>
                            <comment id="12778726" author="chrismattmann" created="Tue, 17 Nov 2009 05:17:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;This does not help the user of the API much because the real difficulty is in unmarshalling various types of objects. This patch does nothing to read the stored fields from the Document .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with your statement above regarding &quot;the real difficulty&quot;. That&apos;s precisely what this patch addresses. This patch deals with that real difficulty for users (of which there are plenty, please see my comment above RE: use cases, e.g., FGDC, RDF, etc.) that are mostly concerned with spitting out (for format compatibility) the resultant Documents from searches in a particular XML format. This patch isn&apos;t intended to do anything with the stored fields &amp;#8211; that&apos;s left up to the user who extends the abstract base classes by implementing #emitDoc or #emitDocList, where the user deals with Lucene Documents. As I stated above numerous times, it took me quite a bit of printing out and deducing the structure of the resultant SolrResponse to determine where in that list Documents were stored (and in fact they weren&apos;t it i just the IDs). This isn&apos;t really documented anywhere per se (at least from what I could find with the online Javadocs or Wiki).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;That is really difficult. A lot of components write their output in a very arbitrary Object tree. The output is largely designed like a JSON object tree (with more promitives) . The producer decides what the tree contains. The good thing about this approach is that we don&apos;t need to build custom classes for every type of output.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why is this difficult? It would amount to components declaring what type of schema they return. Typed, bags of objects, coupled with sparse documentation isn&apos;t exactly the answer. I think we both agree that there is a larger issue to look at in terms of the SolrResponse though and QueryResponseWriters, my point is that I don&apos;t think using this issue to solve those bigger picture questions is the right answer. I&apos;d be happy to create further issues to discuss this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There is no reason why a GenericResponseWriter can&apos;t do that . I am not happy about putting this classes in and leading users to believe that this is all that they have to do.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How are we telling users that this is all they have to do? The patch specifically states (taken from the included Javadoc):&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This {@link QueryResponseWriter} allows a user to implement the {@link #emitDoc(Document, Writer)} function which acts as a callback function to process one Lucene {@link Document} returned from the SOLR Query at a time. Sub-classes should keep track of any global state as this class does not provide a means to access the entire set of returned {@link Document}s.If that functionality is required, see {@link DocumentListResponseWriter}.&lt;br/&gt;
&lt;br/&gt;
This {@link QueryResponseWriter} allows a user to implement the {@link #emitDocList(List, Writer)} function which acts as a callback function to process the entire {@link List} of Lucene {@link Document} returned from the SOLR Query at once. To process the {@link Document}s one-at-a-time (to conserve resources, or to speed up the processing/etc.), see {@link DocumentResponseWriter}.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not sure I see the concern behind this ~250 line patch? The patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;adds functionality that would have simplified a number of use cases that I am leveraging SOLR for in the space and earth science data community, where formats are critical and metadata output is more important than the specific search meta-info (# hits, query time, start/end, etc.). See the 3-4 examples I stated above.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;does not introduce anything that is not backwards compatible&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;includes javadoc on all public methods, as well as class-level javadoc&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;should apply without trouble to the current SVN trunk&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This has typically been the criteria for inclusion (modulo unit tests, which if there is concern there, I&apos;d be happy to include) &amp;#8211; is the criteria different here in SOLR? &lt;/p&gt;</comment>
                            <comment id="12778736" author="noble.paul" created="Tue, 17 Nov 2009 05:45:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;where formats are critical and metadata output is more important than the specific search meta-info&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;hi Cris, both of us are in agreement over the intent. We need to make it easier to write out data in any format. I am thinking that it can be made better and more complete. I hope to submit a patch soon&lt;/p&gt;








</comment>
                            <comment id="12778739" author="woollard" created="Tue, 17 Nov 2009 06:04:39 +0000"  >&lt;p&gt;As an outside observer to this list, i think this issue has gotten a little testy and I am hoping not indicative of SOLR as a project. I have use cases similar to Chris&apos; and I share Noble&apos;s sentiment that the purpose of this discussion should be to make it easier to write data out in any format the user needs. Noble, if you are working on a patch can you discuss alternatives to what Chris has suggested?&lt;/p&gt;</comment>
                            <comment id="12778766" author="noble.paul" created="Tue, 17 Nov 2009 08:21:53 +0000"  >&lt;p&gt;Most of the custom writers are less bothered about sections other than the DocList.  The hard part is in reading the stored fields from lucene Documents depending on what fields are requested by the user.  If the API allows to fetch the data as an Iterator&amp;lt;SolrDocument&amp;gt; w/o bothering about the low level Lucene details that would be ideal. &lt;/p&gt;
</comment>
                            <comment id="12778802" author="noble.paul" created="Tue, 17 Nov 2009 10:15:57 +0000"  >&lt;p&gt;idea as a patch (untested)&lt;/p&gt;</comment>
                            <comment id="12778803" author="noble.paul" created="Tue, 17 Nov 2009 10:17:32 +0000"  >&lt;p&gt;This adds a GenericResponseWriter which can be used to implement different writers.&lt;/p&gt;</comment>
                            <comment id="12778919" author="chrismattmann" created="Tue, 17 Nov 2009 15:00:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;Most of the custom writers are less bothered about sections other than the DocList. The hard part is in reading the stored fields from lucene Documents depending on what fields are requested by the user. If the API allows to fetch the data as an Iterator&amp;lt;SolrDocument&amp;gt; w/o bothering about the low level Lucene details that would be ideal.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is exactly my point with this issue. I think that you and I are on the same page, Noble. I took a look at the patch you uploaded:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void start(Writer writer);

  /**Start of document list
   * @param info
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void startDocumentList(Writer writer, DocListInfo info);
  /**Write out a document
   * @param solrDocument
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void writeDoc(Writer writer,SolrDocument solrDocument);

  /**End of documents
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void endDocumentList(Writer writer,);

  /**write the header &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; required
   * @param responseHeader
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void writeResponseHeader(Writer writer,NamedList responseHeader);

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void end(Writer writer);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1. You include a #writeDoc function. In my patch I called this #emitDoc. Why the name change?&lt;br/&gt;
2. Same goes for #startDocumentList and #endDocumentList (called #emitHeader and #emitFooter in my patch). Why the name change?&lt;br/&gt;
3. #start and #end are never called in your patch?&lt;br/&gt;
4. The javadoc I included in my patch is not included in yours.&lt;br/&gt;
5. My patch included a means to get the whole DocumentList (in the case that aggregate formatting is required) &amp;#8211; this is removed in your patch. Your patch includes only the equivalent of my DocumentResponseWriter.&lt;br/&gt;
6. The spirit of your patch is a bit more generic than mine, e.g., with the writeOther method. +1 to that.&lt;/p&gt;

&lt;p&gt;Let me take a crack at merging what you put up and what I wrote. Sound good?&lt;/p&gt;</comment>
                            <comment id="12779285" author="noble.paul" created="Wed, 18 Nov 2009 04:29:55 +0000"  >&lt;p&gt;I started of with a clean slate. I did not use your patch for reference. The method names are all arbitrary . header and footer are not familiar in Solr&apos;s context .So I did not use it. write*() or emit*() Ii am fine with both  &lt;/p&gt;

&lt;p&gt;As I mentioned , it is an idea as a patch and not a real patch. The final form may completely differ (including javadocs).  &lt;/p&gt;

&lt;p&gt;I shall put up another patch.&lt;/p&gt;</comment>
                            <comment id="12779296" author="chrismattmann" created="Wed, 18 Nov 2009 04:58:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;I started of with a clean slate. I did not use your patch for reference. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why? The end result of what you attached is very similar to the original I contributed (with the exception you used SolrInputDocument rather than o.a.l.Document &amp;#8211; why? &lt;em&gt;and&lt;/em&gt; you added a #writeObject method).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The method names are all arbitrary . header and footer are not familiar in Solr&apos;s context .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What is Solr&apos;s context? Is there a glossary of typical SOLR function names? I didn&apos;t see a pattern in the existing QueryResponseWriters, not that it would have been a big deal anyways since this is really a &lt;em&gt;new&lt;/em&gt; set of abstract base classes by which to build Document-focused response writers from.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So I did not use it. write*() or emit*() Ii am fine with both&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 for emit*() since that was the original intention, and since it matches the javadoc I spent time and effort to write. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As I mentioned , it is an idea as a patch and not a real patch. The final form may completely differ (including javadocs).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why is that? Is there a big delta between what I contributed and something that meets the criteria for a patch? &lt;/p&gt;

&lt;p&gt;I appreciate your time in reviewing this patch with me.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;
</comment>
                            <comment id="12779299" author="noble.paul" created="Wed, 18 Nov 2009 05:07:16 +0000"  >&lt;p&gt;next idea as patch. incorporating your suggestions&lt;/p&gt;</comment>
                            <comment id="12782326" author="chrismattmann" created="Wed, 25 Nov 2009 06:49:25 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;updated patch:&lt;/li&gt;
	&lt;li&gt;merged my javadoc&lt;/li&gt;
	&lt;li&gt;cleaned up formatting&lt;/li&gt;
	&lt;li&gt;added javadoc&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;My +1 to commit this...&lt;/p&gt;</comment>
                            <comment id="12782372" author="noble.paul" created="Wed, 25 Nov 2009 11:08:52 +0000"  >&lt;p&gt;committed r884037&lt;/p&gt;

&lt;p&gt;Thanks Mattman. removed author tags because Lucene has a policy against it&lt;/p&gt;</comment>
                            <comment id="12782489" author="chrismattmann" created="Wed, 25 Nov 2009 16:30:38 +0000"  >&lt;p&gt;Thanks, Noble!&lt;/p&gt;</comment>
                            <comment id="12782782" author="noble.paul" created="Thu, 26 Nov 2009 07:30:45 +0000"  >&lt;p&gt;some API changes&lt;/p&gt;</comment>
                            <comment id="12782783" author="noble.paul" created="Thu, 26 Nov 2009 07:33:01 +0000"  >&lt;p&gt;it was not possible to write multiple DocList&lt;/p&gt;</comment>
                            <comment id="12872687" author="hossman" created="Fri, 28 May 2010 00:07:41 +0100"  >
&lt;p&gt;Correcting Fix Version based on CHANGES.txt, see this thread for more details...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13013159" author="gsingers" created="Wed, 30 Mar 2011 16:45:44 +0100"  >&lt;p&gt;Bulk close for 3.1.0 release&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12422518" name="SOLR-1516.Mattmann.101809.patch.txt" size="10153" author="chrismattmann" created="Mon, 19 Oct 2009 02:55:35 +0100"/>
                            <attachment id="12426078" name="SOLR-1516.Mattmann.112409.patch.txt" size="20007" author="chrismattmann" created="Wed, 25 Nov 2009 06:49:25 +0000"/>
                            <attachment id="12426192" name="SOLR-1516.patch" size="2792" author="noble.paul" created="Thu, 26 Nov 2009 07:30:45 +0000"/>
                            <attachment id="12425304" name="SOLR-1516.patch" size="9712" author="noble.paul" created="Wed, 18 Nov 2009 05:07:16 +0000"/>
                            <attachment id="12425205" name="SOLR-1516.patch" size="6559" author="noble.paul" created="Tue, 17 Nov 2009 10:15:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Oct 2009 04:13:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6146</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxksv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19689</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>