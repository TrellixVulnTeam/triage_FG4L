<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:21:11 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-122/SOLR-122.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-122] Add optional support for Ruby-libxml2 (vs. REXML)</title>
                <link>https://issues.apache.org/jira/browse/SOLR-122</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;This file adds drop-in support for the ruby-libxml2, which is a wrapper for the libxml2 library, which is an order of magnitude or so faster than REXML.&lt;/p&gt;

&lt;p&gt;This depends on my &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-121&quot; title=&quot;Add support for multiple-document adds&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-121&quot;&gt;&lt;del&gt;SOLR-121&lt;/del&gt;&lt;/a&gt; patch for multi-document adds, since the behavior of Solr::Request::AddDocument#to_s is different.&lt;/p&gt;

&lt;p&gt;Requiring this makes some tests fail, but for trivial reasons: some tests are directly tied to REXML, others fail due to interelement whitespace added by libxml2 (which you can&apos;t disable via the Ruby interface). Functionally, it&apos;s identical, and passes all functional tests.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12361372">SOLR-122</key>
            <summary>Add optional support for Ruby-libxml2 (vs. REXML)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="codahale">Coda Hale</reporter>
                        <labels>
                    </labels>
                <created>Sat, 27 Jan 2007 00:38:18 +0000</created>
                <updated>Tue, 6 Feb 2007 17:20:24 +0000</updated>
                            <resolved>Tue, 6 Feb 2007 11:17:21 +0000</resolved>
                                                                    <component>clients - ruby - flare</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12467997" author="antonio_eggberg" created="Sat, 27 Jan 2007 05:48:46 +0000"  >&lt;p&gt;Even though Hpricot or Xaagly is new but they are much faster then libxml or REXML.. Have you considered them?&lt;/p&gt;

&lt;p&gt;Hpricot &lt;br/&gt;
&lt;a href=&quot;http://code.whytheluckystiff.net/hpricot/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.whytheluckystiff.net/hpricot/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Xaagly (I think this is just pure XML parsing) not tried&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://involution.com/2007/01/02/xaggly-a-c-based-xml-parser-for-ruby-released/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://involution.com/2007/01/02/xaggly-a-c-based-xml-parser-for-ruby-released/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A comparison&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://involution.com/2006/11/28/xaggly-vs-hpricot-vs-rexml/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://involution.com/2006/11/28/xaggly-vs-hpricot-vs-rexml/&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12467998" author="codahale" created="Sat, 27 Jan 2007 06:08:14 +0000"  >&lt;p&gt;I hadn&apos;t seen Xaagly, Antonio &amp;#8211; I&apos;ll check it out.&lt;/p&gt;

&lt;p&gt;libxml2 is definitely the most stable, mature XML parser for C around, though, and I&apos;d be reluctant to use anything else &amp;#8211; XML can be tricky business (from security perspectives as well as performance), and libxml2 has received scrutiny from a much, much larger population of programmers than either Hpricot or Xaagly.&lt;/p&gt;

&lt;p&gt;Either way, thanks to the well-architected nature of solrb, it&apos;s easy enough to write a wrapper for the XML library of your choice.&lt;/p&gt;</comment>
                            <comment id="12468047" author="ehatcher" created="Sat, 27 Jan 2007 18:34:19 +0000"  >&lt;p&gt;Hold that thought, folks.  First of all, we do very minimal with XML all of which could even be done with simply using strings instead of an XML API.  Also,  a refactoring of the request/response code is forthcoming which will make things a lot cleaner.  I think its a great idea for us to optimize our XML handling, don&apos;t get me wrong, and I&apos;ve come to really dislike REXML (primarily due to its performance).&lt;/p&gt;

&lt;p&gt;A question to Coda - did you measure performance before/after between REXML and libxml2 within solrb?&lt;/p&gt;</comment>
                            <comment id="12468057" author="codahale" created="Sat, 27 Jan 2007 19:24:00 +0000"  >&lt;p&gt;Erik &amp;#8211; using simple string substitution always sounds like a good idea, but I&apos;ve never found it to be.&lt;/p&gt;

&lt;p&gt;I&apos;ll post some benchmarks of REXML vs. libxml2 here in the next couple of days.&lt;/p&gt;</comment>
                            <comment id="12468101" author="ehatcher" created="Sun, 28 Jan 2007 10:21:03 +0000"  >&lt;p&gt;The main place where XML gets used in solrb is in adding a document to Solr, and only a few bits would need to be XML escaped: the field text and the field name.  The rest is static.  I&apos;m not suggesting we necessarily switch to using string concatenation, just tossing it out as an idea that would avoid having to use either REXML or libxml2 and likely be much faster than either.&lt;/p&gt;

&lt;p&gt;I&apos;m certainly curious what speed differences within the context of solrb and adding documents the difference between REXML and libxml2 makes.&lt;/p&gt;</comment>
                            <comment id="12468140" author="codahale" created="Sun, 28 Jan 2007 18:30:46 +0000"  >&lt;p&gt;So I just ran two tests: indexing and querying. The first was indexing about 251K records (mostly short strings, floats, and integers), 1K at a time (the server was stopped and the index deleted between these tests). The second was querying (&quot;id:&lt;span class=&quot;error&quot;&gt;&amp;#91;1 TO 1000&amp;#93;&lt;/span&gt;&quot;) and returning 100 rows. These tests were run on my MacBook Pro while I checked my mail and looked at funny pictures of cats. Solr was running on Jetty, with the config from the solrb directory, but a different schema.&lt;/p&gt;

&lt;p&gt;So... libxml-ruby is much faster:&lt;/p&gt;

&lt;p&gt;                        user     system       total         real&lt;br/&gt;
REXML indexing:  2107.480000  24.760000 2132.240000 (2421.141147)&lt;br/&gt;
libxml indexing:  728.810000  24.440000  753.250000 (1016.763167)&lt;/p&gt;

&lt;p&gt;REXML querying:    25.520000   7.210000   32.730000  (873.637089)&lt;br/&gt;
libxml querying:   19.790000   6.020000   25.810000  (706.032189)&lt;/p&gt;

&lt;p&gt;(For those unfamiliar with Ruby benchmarks, the first three numbers are CPU-seconds, the last number in parentheses is the actual elapsed clock time in seconds.)&lt;/p&gt;

&lt;p&gt;Just to clarify, I&apos;m not suggesting that REXML be ditched entirely; rather, I think it would be better to have a drop-in replacement for people who want to use libxml (or Xaagly or whatever) in situations where performance is important.&lt;/p&gt;

&lt;p&gt;Also, my previous file had an escaping bug, so I&apos;ll post a corrected version. (Basically, one should use XML::Node#&amp;lt;&amp;lt; instead of passing a second parameter to XML::Node.new when setting the content of an element to an unescaped value.)&lt;/p&gt;</comment>
                            <comment id="12468141" author="codahale" created="Sun, 28 Jan 2007 18:31:34 +0000"  >&lt;p&gt;This version has a fix for the escaping bug.&lt;/p&gt;</comment>
                            <comment id="12468153" author="ehatcher" created="Sun, 28 Jan 2007 20:53:08 +0000"  >&lt;p&gt;Thanks for the performance numbers.  I&apos;m confused on how your XML patch improves querying performance, since the Ruby&apos;s eval() is used for processing search results and there isn&apos;t any XML parsing involved (unless I&apos;m missing something) ???&lt;/p&gt;</comment>
                            <comment id="12468156" author="ehatcher" created="Sun, 28 Jan 2007 21:12:01 +0000"  >&lt;p&gt;Coda -Let&apos;s add a condition to keep this from loading if libxml is not installed.  Also, it looks like your Xml class is not used.   Again, I will be refactoring the request/response early this week, so stay tuned.&lt;/p&gt;</comment>
                            <comment id="12468158" author="codahale" created="Sun, 28 Jan 2007 21:19:20 +0000"  >&lt;p&gt;I&apos;ll see if I can&apos;t get some better benchmarks for this &amp;#8211; there&apos;s no good reason why this drop-in would improve querying times.&lt;/p&gt;

&lt;p&gt;Also, I&apos;m not sure what you mean by &quot;your Xml class.&quot; The drop-in doesn&apos;t add any additional classes; it just opens up the existing ones and modifies their XML behavior to use libxml-ruby instead of REXML. And the drop-in isn&apos;t loaded by default, so there&apos;s no worry of it not working with someone who doesn&apos;t have libxml-ruby installed. They&apos;d have to go out of their way (i.e., require &quot;solrb/libxml&quot;) to shoot themselves in the foot.&lt;/p&gt;

&lt;p&gt;Let me know when you refactor this; I&apos;m fine with re-writing it.&lt;/p&gt;</comment>
                            <comment id="12468166" author="codahale" created="Sun, 28 Jan 2007 22:53:48 +0000"  >&lt;p&gt;I can&apos;t nail down the query benchmarks &amp;#8211; running the same benchmark over and over again gives me fluctuations of 20-30%.&lt;/p&gt;

&lt;p&gt;I simplified the indexing benchmarks &amp;#8211; now it takes a hash of 1000 records, adds them in, and deletes them all. It does that 100 times. Here are the results:&lt;/p&gt;

&lt;p&gt;                       user     system      total        real&lt;br/&gt;
REXML indexing:  444.590000   2.740000 447.330000 (549.907248)&lt;br/&gt;
libxml indexing:  34.450000   3.650000  38.100000 (138.402562)&lt;/p&gt;</comment>
                            <comment id="12468394" author="yseeley@gmail.com" created="Mon, 29 Jan 2007 20:05:14 +0000"  >&lt;p&gt;I&apos;d echo Erik&apos;s sentiments... one often doesn&apos;t need an XML parser for XML generation.&lt;/p&gt;</comment>
                            <comment id="12468433" author="codahale" created="Mon, 29 Jan 2007 22:39:33 +0000"  >&lt;p&gt;Yonik &amp;#8211; in this case, libxml-ruby is faster at generating XML than simple string concatenation in Ruby when you take the overhead of escaping into consideration. Anything is faster than REXML, including guessing.&lt;/p&gt;

&lt;p&gt;====&lt;/p&gt;

&lt;p&gt;                            user     system      total        real&lt;br/&gt;
string concatenation:  35.280000   0.180000  35.460000 ( 35.713158)&lt;br/&gt;
string substitution:   34.870000   0.180000  35.050000 ( 35.273428)&lt;br/&gt;
REXML:                129.480000   0.610000 130.090000 (130.845760)&lt;br/&gt;
libxml:                23.020000   0.130000  23.150000 ( 23.315077)&lt;/p&gt;

&lt;p&gt;====&lt;/p&gt;

&lt;p&gt;require &quot;benchmark&quot;&lt;br/&gt;
require &quot;rexml/document&quot;&lt;br/&gt;
require &quot;xml/libxml&quot;&lt;/p&gt;

&lt;p&gt;TESTS = 1_000_000&lt;/p&gt;

&lt;p&gt;Benchmark.bmbm do |results|&lt;br/&gt;
  results.report(&quot;string concatenation:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      x = &quot;&amp;lt;blah&amp;gt;&quot;&lt;br/&gt;
      x &amp;lt;&amp;lt; &quot;woot&quot;.gsub(&quot;&amp;amp;&quot;, &quot;&amp;amp;&quot;).gsub(&quot;&amp;lt;&quot;, &quot;&amp;lt;&quot;).gsub(&quot;&amp;gt;&quot;, &quot;&amp;gt;&quot;)&lt;br/&gt;
      x &amp;lt;&amp;lt; &quot;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;

&lt;p&gt;  results.report(&quot;string substitution:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      x = &quot;&amp;lt;blah&amp;gt;#&lt;/p&gt;
{&quot;woot&quot;.gsub(&quot;&amp;amp;&quot;, &quot;&amp;amp;&quot;).gsub(&quot;&amp;lt;&quot;, &quot;&amp;lt;&quot;).gsub(&quot;&amp;gt;&quot;, &quot;&amp;gt;&quot;)}
&lt;p&gt;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;

&lt;p&gt;  results.report(&quot;REXML:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      e = REXML::Element.new(&quot;blah&quot;)&lt;br/&gt;
      e.add_text(&quot;woot&quot;)&lt;br/&gt;
      e.to_s&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;

&lt;p&gt;  results.report(&quot;libxml:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      e = XML::Node.new(&quot;blah&quot;)&lt;br/&gt;
      e &amp;lt;&amp;lt; &quot;woot&quot;&lt;br/&gt;
      e.to_s&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;br/&gt;
end&lt;/p&gt;</comment>
                            <comment id="12468472" author="ehatcher" created="Tue, 30 Jan 2007 03:06:18 +0000"  >&lt;p&gt;Nice benchmarks Coda.  I buy it.    But wow, libxml is faster than string concatenation.  That surprises since surely libxml is doing more work, but down in C instead of Ruby.  Another nail in REXMLs coffin.&lt;/p&gt;

&lt;p&gt;Let me get those refactorings to the request/responses committed and we&apos;ll rework this so that it can work automatically if libxml-ruby gem is installed.  Sound good?&lt;/p&gt;</comment>
                            <comment id="12468481" author="codahale" created="Tue, 30 Jan 2007 03:29:37 +0000"  >&lt;p&gt;Sounds like a plan, Erik.&lt;/p&gt;</comment>
                            <comment id="12468490" author="yseeley@gmail.com" created="Tue, 30 Jan 2007 04:12:12 +0000"  >&lt;p&gt;OK, check this out... my second ruby coding attempt ever.  The first was the 6 line program here &lt;a href=&quot;http://wiki.apache.org/solr/SolRuby&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/solr/SolRuby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first I thought maybe the speed difference was due to gsub scanning the string 3 times.  Then I started fooling around with it and realized the slowdown must be because the pattern is being &quot;compiled&quot; on every evaluation (just a guess).  I also wrote a single-pass version that&apos;s a little faster yet.&lt;/p&gt;

&lt;p&gt;I didn&apos;t test the XML versions since I don&apos;t have libxml (and I&apos;m not even sure how to get/install... I&apos;m obviously not a ruby person).   &lt;b&gt;but&lt;/b&gt; since these versions are 10 times faster than the original string concat versions, I assume they will be perhaps 5 times faster than libxml.  Assuming It&apos;s actually doing what it&apos;s supposed to and I didn&apos;t make some horrible mistake.&lt;/p&gt;

&lt;p&gt;                                          user     system      total        real&lt;br/&gt;
string concatenation:                 6.812000   0.171000   6.983000 (  7.172000)&lt;br/&gt;
string substitution:                  6.922000   0.141000   7.063000 (  7.250000)&lt;br/&gt;
string concatenation2:                1.047000   0.000000   1.047000 (  1.078000)&lt;br/&gt;
string substitution2:                 0.953000   0.000000   0.953000 (  0.969000)&lt;br/&gt;
catenation w/ single pass escape:     0.734000   0.000000   0.734000 (  0.750000)&lt;br/&gt;
substitution w/ single pass escape:   0.657000   0.000000   0.657000 (  0.656000&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;require &quot;benchmark&quot;&lt;/p&gt;

&lt;p&gt;#TESTS = 1_000_000&lt;br/&gt;
TESTS = 100_000&lt;/p&gt;

&lt;p&gt;def escape(text)&lt;br/&gt;
  text.gsub(/(&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;amp;&amp;lt;&amp;gt;&amp;#93;&lt;/span&gt;)/) &lt;/p&gt;
{ |ch|
    case ch
    when &apos;&amp;amp;&apos; then &apos;&amp;amp;&apos;
    when &apos;&amp;lt;&apos; then &apos;&amp;lt;&apos;
    when &apos;&amp;gt;&apos; then &apos;&amp;gt;&apos;
    end
  }
&lt;p&gt;end&lt;/p&gt;


&lt;p&gt;Benchmark.bmbm do |results|&lt;br/&gt;
  results.report(&quot;string concatenation:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      x = &quot;&amp;lt;blah&amp;gt;&quot;&lt;br/&gt;
      x &amp;lt;&amp;lt; &quot;woot&quot;.gsub(&quot;&amp;amp;&quot;, &quot;&amp;amp;&quot;).gsub(&quot;&amp;lt;&quot;, &quot;&amp;lt;&quot;).gsub(&quot;&amp;gt;&quot;, &quot;&amp;gt;&quot;)&lt;br/&gt;
      x &amp;lt;&amp;lt; &quot;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;

&lt;p&gt;  results.report(&quot;string substitution:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      x = &quot;&amp;lt;blah&amp;gt;#&lt;/p&gt;
{&quot;woot&quot;.gsub(&quot;&amp;amp;&quot;, &quot;&amp;amp;&quot;).gsub(&quot;&amp;lt;&quot;, &quot;&amp;lt;&quot;).gsub(&quot;&amp;gt;&quot;, &quot;&amp;gt;&quot;)}
&lt;p&gt;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;

&lt;p&gt;  results.report(&quot;string concatenation2:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      x = &quot;&amp;lt;blah&amp;gt;&quot;&lt;br/&gt;
      x &amp;lt;&amp;lt; &quot;woot&quot;.gsub(/&amp;amp;/, &apos;&amp;amp;&apos;).gsub(/&amp;lt;/, &apos;&amp;lt;&apos;).gsub(/&amp;gt;/, &apos;&amp;gt;&apos;)&lt;br/&gt;
      x &amp;lt;&amp;lt; &quot;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;

&lt;p&gt;  results.report(&quot;string substitution2:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      x = &quot;&amp;lt;blah&amp;gt;#&lt;/p&gt;
{&quot;woot&quot;.gsub(/&amp;amp;/, &apos;&amp;amp;&apos;).gsub(/&amp;lt;/, &apos;&amp;lt;&apos;).gsub(/&amp;gt;/, &apos;&amp;gt;&apos;)}
&lt;p&gt;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;

&lt;p&gt;  results.report(&quot;catenation w/ single pass escape:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      x = &quot;&amp;lt;blah&amp;gt;&quot;&lt;br/&gt;
      x &amp;lt;&amp;lt; escape(&quot;woot&quot;)&lt;br/&gt;
      x &amp;lt;&amp;lt; &quot;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;

&lt;p&gt;  results.report(&quot;substitution w/ single pass escape:&quot;) do&lt;br/&gt;
    TESTS.times do&lt;br/&gt;
      x = &quot;&amp;lt;blah&amp;gt;#&lt;/p&gt;
{escape(&apos;woot&apos;)}
&lt;p&gt;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
    end&lt;br/&gt;
  end&lt;/p&gt;


&lt;p&gt;end&lt;/p&gt;
</comment>
                            <comment id="12468498" author="codahale" created="Tue, 30 Jan 2007 04:47:45 +0000"  >&lt;p&gt;Yonik &amp;#8211; The results switch back once the text gets more complicated than &quot;woot.&quot; Your escape function is really fast as long as the block passed to String#gsub never gets called &amp;#8211; if there&apos;s nothing there to escape. Blocks are pretty slow compared with other means of branching. Good catch on the regexp compiling &amp;#8211; I didn&apos;t think that String#gsub compiled the first parameter to a Regexp every time.&lt;/p&gt;

&lt;p&gt;Here&apos;s how it looks with 1000 random characters of &lt;span class=&quot;error&quot;&gt;&amp;#91;A-Za-z0-9&amp;lt;&amp;gt;&amp;amp;&amp;#93;&lt;/span&gt;, 100,000 times each:&lt;/p&gt;

&lt;p&gt;                                          user     system      total        real&lt;br/&gt;
string concatenation:                 9.320000   0.070000   9.390000 (  9.921551)&lt;br/&gt;
string substitution:                  9.210000   0.050000   9.260000 (  9.660138)&lt;br/&gt;
string concatenation2:                7.610000   0.050000   7.660000 (  7.919240)&lt;br/&gt;
string substitution2:                 7.550000   0.040000   7.590000 (  7.817162)&lt;br/&gt;
catenation w/ single pass escape:    12.640000   0.070000  12.710000 ( 13.121503)&lt;br/&gt;
substitution w/ single pass escape:  12.420000   0.070000  12.490000 ( 12.845156)&lt;br/&gt;
libxml:                               2.050000   0.010000   2.060000 (  2.108470)&lt;/p&gt;

&lt;p&gt;libxml back in the lead. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Also, if you&apos;re on Mac or Linux, you can install libxml-ruby as follows: sudo gem install libxml-ruby&lt;/p&gt;

&lt;p&gt;Be sure you&apos;ve installed libxml2 first (sudo port install libxml2, sudo apt-get install libxml2, sudo rpm something-or-other).&lt;/p&gt;

&lt;p&gt;If you&apos;re on Windows, you&apos;ll just have to take my word for it.&lt;/p&gt;

&lt;p&gt;====&lt;/p&gt;

&lt;p&gt;require &quot;benchmark&quot;&lt;br/&gt;
require &quot;rexml/document&quot;&lt;br/&gt;
require &quot;rubygems&quot;&lt;br/&gt;
require &quot;xml/libxml&quot;&lt;/p&gt;

&lt;p&gt;TESTS = 100_000&lt;/p&gt;

&lt;p&gt;CHARS = (&apos;A&apos;..&apos;Z&apos;).to_a + (&apos;a&apos;..&apos;z&apos;).to_a + (&apos;0&apos;..&apos;9&apos;).to_a + &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;amp;&amp;#39;&amp;#93;&lt;/span&gt;&lt;br/&gt;
TEXT = &quot;&quot;&lt;br/&gt;
1000.times do&lt;br/&gt;
  TEXT &amp;lt;&amp;lt; CHARS&lt;span class=&quot;error&quot;&gt;&amp;#91;rand(CHARS.size)&amp;#93;&lt;/span&gt;&lt;br/&gt;
end&lt;/p&gt;

&lt;p&gt;def escape(text)&lt;br/&gt;
 text.gsub(/(&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;amp;&amp;lt;&amp;gt;&amp;#93;&lt;/span&gt;)/) &lt;/p&gt;
{ |ch|
   case ch
   when &apos;&amp;amp;&apos; then &apos;&amp;amp;&apos;
   when &apos;&amp;lt;&apos; then &apos;&amp;lt;&apos;
   when &apos;&amp;gt;&apos; then &apos;&amp;gt;&apos;
   end
 }
&lt;p&gt;end&lt;/p&gt;


&lt;p&gt;Benchmark.bmbm do |results|&lt;br/&gt;
 results.report(&quot;string concatenation:&quot;) do&lt;br/&gt;
   TESTS.times do&lt;br/&gt;
     x = &quot;&amp;lt;blah&amp;gt;&quot;&lt;br/&gt;
     x &amp;lt;&amp;lt; TEXT.gsub(&quot;&amp;amp;&quot;, &quot;&amp;amp;&quot;).gsub(&quot;&amp;lt;&quot;, &quot;&amp;lt;&quot;).gsub(&quot;&amp;gt;&quot;, &quot;&amp;gt;&quot;)&lt;br/&gt;
     x &amp;lt;&amp;lt; &quot;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
   end&lt;br/&gt;
 end&lt;/p&gt;

&lt;p&gt; results.report(&quot;string substitution:&quot;) do&lt;br/&gt;
   TESTS.times do&lt;br/&gt;
     x = &quot;&amp;lt;blah&amp;gt;#&lt;/p&gt;
{TEXT.gsub(&quot;&amp;amp;&quot;, &quot;&amp;amp;&quot;).gsub(&quot;&amp;lt;&quot;, &quot;&amp;lt;&quot;).gsub(&quot;&amp;gt;&quot;, &quot;&amp;gt;&quot;)}
&lt;p&gt;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
   end&lt;br/&gt;
 end&lt;/p&gt;

&lt;p&gt; results.report(&quot;string concatenation2:&quot;) do&lt;br/&gt;
   TESTS.times do&lt;br/&gt;
     x = &quot;&amp;lt;blah&amp;gt;&quot;&lt;br/&gt;
     x &amp;lt;&amp;lt; TEXT.gsub(/&amp;amp;/, &apos;&amp;amp;&apos;).gsub(/&amp;lt;/, &apos;&amp;lt;&apos;).gsub(/&amp;gt;/, &apos;&amp;gt;&apos;)&lt;br/&gt;
     x &amp;lt;&amp;lt; &quot;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
   end&lt;br/&gt;
 end&lt;/p&gt;

&lt;p&gt; results.report(&quot;string substitution2:&quot;) do&lt;br/&gt;
   TESTS.times do&lt;br/&gt;
     x = &quot;&amp;lt;blah&amp;gt;#&lt;/p&gt;
{TEXT.gsub(/&amp;amp;/, &apos;&amp;amp;&apos;).gsub(/&amp;lt;/, &apos;&amp;lt;&apos;).gsub(/&amp;gt;/, &apos;&amp;gt;&apos;)}
&lt;p&gt;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
   end&lt;br/&gt;
 end&lt;/p&gt;

&lt;p&gt; results.report(&quot;catenation w/ single pass escape:&quot;) do&lt;br/&gt;
   TESTS.times do&lt;br/&gt;
     x = &quot;&amp;lt;blah&amp;gt;&quot;&lt;br/&gt;
     x &amp;lt;&amp;lt; escape(TEXT)&lt;br/&gt;
     x &amp;lt;&amp;lt; &quot;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
   end&lt;br/&gt;
 end&lt;/p&gt;

&lt;p&gt; results.report(&quot;substitution w/ single pass escape:&quot;) do&lt;br/&gt;
   TESTS.times do&lt;br/&gt;
     x = &quot;&amp;lt;blah&amp;gt;#&lt;/p&gt;
{escape(TEXT)}
&lt;p&gt;&amp;lt;/blah&amp;gt;&quot;&lt;br/&gt;
   end&lt;br/&gt;
 end&lt;/p&gt;

&lt;p&gt; results.report(&quot;libxml:&quot;) do&lt;br/&gt;
   TESTS.times do&lt;br/&gt;
     e = XML::Node.new(&quot;blah&quot;)&lt;br/&gt;
     e &amp;lt;&amp;lt; TEXT&lt;br/&gt;
     e.to_s&lt;br/&gt;
   end&lt;br/&gt;
 end&lt;br/&gt;
end&lt;/p&gt;</comment>
                            <comment id="12468504" author="yseeley@gmail.com" created="Tue, 30 Jan 2007 05:31:11 +0000"  >&lt;p&gt;Uncle! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Still, considering the number of small attributes, tags, and values that won&apos;t have any reserved chars, I wouldn&apos;t hazard to guess which would come out fastest when actually constructing various Solr documents.  Not REXML &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12469938" author="ehatcher" created="Sat, 3 Feb 2007 02:45:25 +0000"  >&lt;p&gt;Coda - let&apos;s add the libxml2 support like AWS::S3 does:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rubyforge.org/viewvc/s3/trunk/lib/aws/s3.rb?revision=128&amp;amp;root=amazon&amp;amp;view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://rubyforge.org/viewvc/s3/trunk/lib/aws/s3.rb?revision=128&amp;amp;root=amazon&amp;amp;view=markup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You game for patching us up to have it load in if its installed?&lt;/p&gt;</comment>
                            <comment id="12470249" author="codahale" created="Mon, 5 Feb 2007 15:34:16 +0000"  >&lt;p&gt;Erik &amp;#8211; I think that makes a lot of sense. Let me know when you&apos;re done refactoring the XML methods.&lt;/p&gt;</comment>
                            <comment id="12470275" author="ehatcher" created="Mon, 5 Feb 2007 17:02:54 +0000"  >&lt;p&gt;Coda - go to town.  I&apos;m working on other things at this point.&lt;/p&gt;</comment>
                            <comment id="12470448" author="codahale" created="Tue, 6 Feb 2007 04:56:24 +0000"  >&lt;p&gt;Okay, so here it is, with full test support.&lt;/p&gt;

&lt;p&gt;I was wondering how we should refactor out the XML generation and so forth to a common interface, when I realized we had a common interface &amp;#8211; REXML::Element. With a few minor changes, we can make XML::Node act exactly like REXML::Element.&lt;/p&gt;

&lt;p&gt;So the XML generation class has been moved to Solr::XML::Element.&lt;/p&gt;

&lt;p&gt;If we can load libxml-ruby, we do so, and make the minor changes to get XML::Node acting like REXML::Element. We then set Solr::XML::Element to XML::Node.&lt;/p&gt;

&lt;p&gt;If we can&apos;t load libmxl-ruby, we load rexml/document, and set Solr::XML::Element to REXML::Element.&lt;/p&gt;

&lt;p&gt;I&apos;ve also gone through and changed some of the unit tests &amp;#8211; results are matched against regular expressions to smooth out the difference between libxml2 and REXML&apos;s output.&lt;/p&gt;

&lt;p&gt;I think this approach is a lot nicer than the drop-in monkey patching &amp;#8211; this allows us to toggle between libxml-ruby and REXML for testing purposes, and we don&apos;t need to maintain/develop two versions of code generation.&lt;/p&gt;

&lt;p&gt;I think the same approach should be taken with XML parsing, but since it doesn&apos;t seem like we&apos;re doing a lot of that, I&apos;ve put that off.&lt;/p&gt;

&lt;p&gt;As always, all tests pass, and I&apos;m interested in any feedback.&lt;/p&gt;</comment>
                            <comment id="12470521" author="ehatcher" created="Tue, 6 Feb 2007 11:17:21 +0000"  >&lt;p&gt;Coda - nicely done!   I&apos;ve committed this.  There are still some uses of REXML directly left over in the response classes.  Should these be adjusted to use Solr::XML also?  Is so, and you want to tackle it, let&apos;s open a new issue.   Thanks for this contribution!&lt;/p&gt;</comment>
                            <comment id="12470650" author="codahale" created="Tue, 6 Feb 2007 17:20:24 +0000"  >&lt;p&gt;Thanks, Erik!&lt;/p&gt;

&lt;p&gt;I didn&apos;t refactor Solr::Response::Xml mainly because it&apos;s much harder &amp;#8211; REXML&apos;s XPath support is, um, unique and special like a snowflake, so it&apos;s more than just making the method profiles line up. I figured eventually I or someone else would write Solr::XML::Parser, then have that run either REXML or libxml-ruby, depending on what loaded.&lt;/p&gt;

&lt;p&gt;I&apos;ll open another issue when it comes to that. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12349762" name="libxml.rb" size="1994" author="codahale" created="Sun, 28 Jan 2007 18:31:34 +0000"/>
                            <attachment id="12349718" name="libxml.rb" size="1843" author="codahale" created="Sat, 27 Jan 2007 00:38:35 +0000"/>
                            <attachment id="12350403" name="solrb_libxml_support.diff" size="10588" author="codahale" created="Tue, 6 Feb 2007 04:56:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 27 Jan 2007 05:48:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7461</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxt9j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21060</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>