<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:16:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-647/SOLR-647.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-647] Do SolrCore.close() in a refcounted way</title>
                <link>https://issues.apache.org/jira/browse/SOLR-647</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;The method &lt;em&gt;SolrCore.close()&lt;/em&gt; directly closes the core . It can cause Exceptions for in-flight requests. The &lt;em&gt;close()&lt;/em&gt; method should just do a decrement on refcount and the actual close must happen when the last request being processed by that core instance is completed&lt;/p&gt;</description>
                <environment></environment>
        <key id="12400811">SOLR-647</key>
            <summary>Do SolrCore.close() in a refcounted way</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                    <reporter username="noble.paul">Noble Paul</reporter>
                        <labels>
                    </labels>
                <created>Wed, 23 Jul 2008 11:57:06 +0100</created>
                <updated>Fri, 10 May 2013 11:40:31 +0100</updated>
                            <resolved>Mon, 18 Aug 2008 16:32:40 +0100</resolved>
                                    <version>1.3</version>
                                    <fixVersion>1.3</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12617434" author="shalinmangar" created="Mon, 28 Jul 2008 15:17:10 +0100"  >&lt;p&gt;Yonik, what do you feel about adding to to 1.3? Although it&apos;s immediate use is in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-561&quot; title=&quot;Solr replication by Solr (for windows also)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-561&quot;&gt;&lt;del&gt;SOLR-561&lt;/del&gt;&lt;/a&gt; but it is still an unsafe existing API call.&lt;/p&gt;</comment>
                            <comment id="12617435" author="yseeley@gmail.com" created="Mon, 28 Jul 2008 15:29:13 +0100"  >&lt;p&gt;I took a quick peek.... looks like there are probably race conditions.&lt;br/&gt;
A core could be obtained in thread A, then decRef() could be called in thread B that triggers a real close, then incRef() would be called in thread A (oops).&lt;/p&gt;</comment>
                            <comment id="12617760" author="noble.paul" created="Tue, 29 Jul 2008 11:24:25 +0100"  >&lt;p&gt;I hope this fixes the race condition &lt;/p&gt;</comment>
                            <comment id="12620276" author="henrib" created="Wed, 6 Aug 2008 16:08:25 +0100"  >&lt;p&gt;Looking at both versions of the patch, it seems you did not upload the intended one..&lt;/p&gt;</comment>
                            <comment id="12620331" author="henrib" created="Wed, 6 Aug 2008 18:27:08 +0100"  >&lt;p&gt;Being hit by the same core issue swapping/closing cores, here is another take at it.&lt;/p&gt;</comment>
                            <comment id="12620416" author="gsingers" created="Wed, 6 Aug 2008 21:27:30 +0100"  >&lt;p&gt;Quick glance suggests it needs unit tests.&lt;/p&gt;</comment>
                            <comment id="12620441" author="henrib" created="Wed, 6 Aug 2008 22:55:15 +0100"  >&lt;p&gt;Will do (tomorrow); might be the opportunity to align EmbeddedSolrServer &amp;amp; SolrDispatchFilter behaviors.&lt;/p&gt;</comment>
                            <comment id="12620572" author="henrib" created="Thu, 7 Aug 2008 10:43:17 +0100"  >&lt;p&gt;A few modifications to make things (hopefully) a little clearer &amp;amp; tests (single &amp;amp; multi threaded).&lt;br/&gt;
This new patch version solely deals with reference counting implementation (not its usage).&lt;br/&gt;
SolrDispatchFilter/EmbeddedSolrServer should be patched through solr-545.&lt;br/&gt;
CoreDescriptor (the reloadCore() method) might be better patched through solr-561 (this is easy to reintroduce if needed though).&lt;/p&gt;</comment>
                            <comment id="12620764" author="henrib" created="Thu, 7 Aug 2008 22:53:25 +0100"  >&lt;p&gt;Hopefully last version of it.&lt;br/&gt;
I goofed the MT test on the previous one.&lt;br/&gt;
Re-added CoreDescriptor.reloadCore().&lt;br/&gt;
Note that the same code is included in solr-545.&lt;/p&gt;</comment>
                            <comment id="12620997" author="henrib" created="Fri, 8 Aug 2008 19:07:35 +0100"  >&lt;p&gt;new version based on Yonik&apos;s comment in solr-545.&lt;/p&gt;</comment>
                            <comment id="12621597" author="gsingers" created="Mon, 11 Aug 2008 21:57:45 +0100"  >&lt;p&gt;This doesn&apos;t compile.  The TimeUnit.MINUTES in SolrCoreTest is a 1.6 constant.&lt;/p&gt;
</comment>
                            <comment id="12621598" author="gsingers" created="Mon, 11 Aug 2008 21:58:58 +0100"  >&lt;p&gt;But, I changed it to awaitTermination(60, TimeUnit.SECONDS) and that&apos;s just fine...  &lt;/p&gt;</comment>
                            <comment id="12621629" author="henrib" created="Mon, 11 Aug 2008 23:08:39 +0100"  >&lt;p&gt;fixed 1.6 dependency (sorry &amp;amp; thanks Grant);&lt;br/&gt;
updated to trunk;&lt;br/&gt;
fixed a bug in SolrDispatchFilter (Multicore.getAdminCore can return a null core);&lt;br/&gt;
introduced calls to acquire/release instead and modified EmbeddedSolrServer (for completeness).&lt;/p&gt;</comment>
                            <comment id="12621812" author="gsingers" created="Tue, 12 Aug 2008 14:23:30 +0100"  >&lt;p&gt;I&apos;d like to see some more documentation on this.  Namely, when should SolrCore.Reference be used, etc.  This may just be for my own edification.  For instance, what&apos;s the relationship in MultiCore between getCore and acquireCore and openCore?  (Since openCore just calls acquireCore w/ a null reference, we probably should just call it acquireCore as well.)&lt;/p&gt;

&lt;p&gt;Also, when do would I call Reference.release() versus core.close()?&lt;/p&gt;

&lt;p&gt;How does CoreDescriptor.reloadCore factor in?   I don&apos;t see that it is used.  Why would I call that instead of MultiCore.reload()?&lt;/p&gt;

&lt;p&gt;Part of these questions may just be bigger questions related to Multicore all together.&lt;/p&gt;</comment>
                            <comment id="12621817" author="noble.paul" created="Tue, 12 Aug 2008 14:47:49 +0100"  >&lt;blockquote&gt;&lt;p&gt;How does CoreDescriptor.reloadCore factor in? I don&apos;t see that it is used. Why would I call that instead of MultiCore.reload()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How else can I reload the core in a single core deployment?&lt;/p&gt;</comment>
                            <comment id="12621837" author="henrib" created="Tue, 12 Aug 2008 15:47:37 +0100"  >
&lt;p&gt;Grant;&lt;br/&gt;
getCore() does not protect the core from being closed by another thread (it must either be protected by another mean or earlier or it does not matter).&lt;/p&gt;

&lt;p&gt;For the other cases, calls should be used in pairs with the following convention; if you call an &quot;open&quot;, you should call a &quot;close&quot;, if you call an &quot;acquire&quot;, you should call a &quot;release&quot;.&lt;/p&gt;

&lt;p&gt;openCore()/openAdminCore() do protect from the core from a // close and core.close() should be used to decrease the refcount.&lt;br/&gt;
acquireCore()/acquireAdminCore() use a SolrCore.Reference and decreasing the refcount should be done through the ref via ref.release().&lt;/p&gt;

&lt;p&gt;The only difference between openCore()/close() or acquireCore()/release() is the usage of a reference which is just a convenience (at least to me: avoiding to test for null, assigning to final, etc).&lt;/p&gt;

&lt;p&gt;Hope this makes sense.&lt;/p&gt;</comment>
                            <comment id="12621849" author="gsingers" created="Tue, 12 Aug 2008 16:12:17 +0100"  >&lt;blockquote&gt;
&lt;p&gt;How else can I reload the core in a single core deployment?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In email, I said, &quot;OK, I&apos;ll buy that, maybe I just don&apos;t get Multicore/Single Core relationship.  Also, reload is not used anywhere and we&apos;ve never had the notion of reloading in the single core case, AFAICT.&quot;&lt;/p&gt;

&lt;p&gt;But, thinking about it some more, I guess I don&apos;t.  The descriptor up until this patch, was merely a container for storing core information, hence the name.  Now all of a sudden it has reload capabilities (but, it doesn&apos;t have open/close capabilities to go with it) so it just doesn&apos;t fit in my mind.&lt;/p&gt;</comment>
                            <comment id="12621853" author="gsingers" created="Tue, 12 Aug 2008 16:32:16 +0100"  >&lt;p&gt;Henri,&lt;/p&gt;

&lt;p&gt;At a minimum, all that should be documented, but I must admit to still being confused (but I&apos;m no expert in the multicore stuff so, please bear with me)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;getCore() does not protect the core from being closed by another thread (it must either be protected by another mean or earlier or it does not matter).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, but there appears to be mixed uses, the MultiCoreHandler uses getCore() in places, while the SolrDispatchFilter uses the Reference.  Isn&apos;t it possible for the core to then be closed behind the MultiCoreHandler?&lt;/p&gt;</comment>
                            <comment id="12621867" author="henrib" created="Tue, 12 Aug 2008 17:06:55 +0100"  >&lt;p&gt;Grant,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;At a minimum, all that should be documented&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll adapt the previous comments accordingly to make the Javadoc more obvious.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the MultiCoreHandler uses getCore() in places, while the SolrDispatchFilter uses the Reference&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good catch; the admin core (the one used to generate output) is protected but is this enough?&lt;br/&gt;
The MultiCoreHandler only deals with CoreDescriptor (not SolrCore); it does not perform &quot;real&quot; queries although getStatus comes close to it.&lt;br/&gt;
However, it would seem preferable to avoid manipulating the (multicore) cores map while we are are processing such requests.&lt;/p&gt;

&lt;p&gt; I&apos;ll fix it in the next upload.&lt;br/&gt;
Thanks for reviewing this.&lt;/p&gt;</comment>
                            <comment id="12621900" author="yseeley@gmail.com" created="Tue, 12 Aug 2008 18:49:19 +0100"  >&lt;p&gt;It seems like some simplifications could be made... see attached refcount_example.patch.&lt;/p&gt;

&lt;p&gt;I think we need to be able to describe in simple terms how the mechanism works:&lt;br/&gt;
Cores are created with a reference count of 1 and put in multicore.  As long as a core can&lt;br/&gt;
be obtained from the map, it will have at least a reference count of 1.  Thus, if we increment the core&apos;s reference during a time when we know that no other core is modifying multicore, we know we have a core that is safe from being asynchronously closed.&lt;/p&gt;

&lt;p&gt;To destroy a core, simply remove it from the map and call close on it.&lt;/p&gt;

&lt;p&gt;There are other issues that are still a bit muddled IMO... like the whole role of CoreDescriptor.&lt;/p&gt;</comment>
                            <comment id="12621909" author="noble.paul" created="Tue, 12 Aug 2008 19:07:57 +0100"  >&lt;p&gt;This patch is very clear as to what it is doing (and simple). &lt;/p&gt;
</comment>
                            <comment id="12622568" author="henrib" created="Thu, 14 Aug 2008 15:40:33 +0100"  >&lt;p&gt;My apologies to all for cluttering the issue. &lt;/p&gt;

&lt;p&gt;New simplified version based on Yonik&apos;s example for trunk 685913 (post solr-695 commit), dont let the patch size fool you:&lt;br/&gt;
CoreContainer.getCore() &amp;amp; CoreContainer.getAdminCore() now return an incref-ed (&quot;opened&quot;) core;&lt;br/&gt;
core.close() must be called when these 2 have been used.&lt;br/&gt;
SolrCore.Reference is gone.&lt;/p&gt;

&lt;p&gt;SolrCore.open() &amp;amp; SolrCore.close() method are kept because we can retrieve cores in 3 &quot;close-unprotected&quot; ways:&lt;br/&gt;
1 - a call to CoreDescriptor.getCore(), descriptors that can be retrieved through CoreContainer.getCoreDescriptors())&lt;br/&gt;
2 - a list of close-unprotected cores through CoreContainer.getCores().&lt;br/&gt;
3 - SolrCore.getCore() - which is deprecated&lt;br/&gt;
The first 2 can be used in a user-defined filter/servlet after the SolrDispatchFilter falls through the filter-chain, the CoreContainer being&lt;br/&gt;
set as an attribute of the request (&quot;org.apache.solr.CoreContainer&quot;). &lt;/p&gt;

&lt;p&gt;Because of this, we are not always synchronized by the CoreContainer#cores when we incref/decref.&lt;br/&gt;
We can thus try to open() a core which is closed and cant use a simple refCount.incrementAndGet().&lt;br/&gt;
Thus the refCount.get()/refCount.compareAndSet() pattern in both open &amp;amp; close.&lt;/p&gt;

&lt;p&gt;The TestHarness is modified to always create a CoreContainer that contains the &quot;unnamed&quot; core so testCoreMT uses&lt;br/&gt;
CoreContainer.getCore(&quot;&quot;).&lt;br/&gt;
Also touched some tests that were using SolrCore.getCore() when they can use the TestHarness core.&lt;/p&gt;</comment>
                            <comment id="12622575" author="noble.paul" created="Thu, 14 Aug 2008 16:21:15 +0100"  >&lt;p&gt;I fail to see the need for this code in SolrCore#close()&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; count;
    &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; {
      count = refCount.get();
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (count &amp;lt;= 0)
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    } &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (!refCount.compareAndSet(count, count - 1));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you do refCount.decrementAndGet() it should be fine. &lt;/p&gt;

&lt;p&gt;similarly in SolrCore$open() also&lt;/p&gt;

&lt;p&gt;you can do a refCount.incrementAndGet() and will be fine. &lt;br/&gt;
What you have written is a duplication of code in AtomicInteger&lt;/p&gt;

&lt;p&gt;Even the RefCounted class does increment and decrement in the same way&lt;/p&gt;

&lt;p&gt;Yonik&apos;s patch does it simply and I do not see anything wrong with that.&lt;/p&gt;</comment>
                            <comment id="12622579" author="henrib" created="Thu, 14 Aug 2008 16:30:52 +0100"  >&lt;p&gt;Based on Ryan&apos;s comment, simplified the patch to strictly focus on the matter at hand.&lt;/p&gt;</comment>
                            <comment id="12622583" author="henrib" created="Thu, 14 Aug 2008 16:41:51 +0100"  >&lt;p&gt;About the SolrCore.open() &amp;amp; close():&lt;/p&gt;

&lt;p&gt;If we were to do an incrementAndGet(), we could end up opening a closed core;&lt;br/&gt;
We thus must check the refcount is not &amp;lt;=0 first.&lt;br/&gt;
The close could use a decrementAndGet() but the current code ensures the count will never go &amp;lt; 0 and is symmetrical to open.&lt;br/&gt;
In both cases, it is the test in between the get() &amp;amp; compareAndSet() that makes the whole difference with {in,de]crementAndGet.&lt;/p&gt;

&lt;p&gt;My understanding of Yonik&apos;s version is that, as a premise, opening a core is always performed under the CoreContainer#cores synchronized protection; as I explained in a previous comment, the assumption can not be strictly met. &lt;/p&gt;</comment>
                            <comment id="12622586" author="yseeley@gmail.com" created="Thu, 14 Aug 2008 16:48:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;he close could use a decrementAndGet() but the current code ensures the count will never go &amp;lt; 0.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think we should cover this error case up since it could lead to premature closure in other cases.&lt;br/&gt;
I think we should do a simple decrementAndGet() followed by a logged error if the current count is less than zero.&lt;/p&gt;</comment>
                            <comment id="12622592" author="henrib" created="Thu, 14 Aug 2008 17:13:05 +0100"  >&lt;p&gt;Yonik;&lt;br/&gt;
About the close(), you&apos;re right: the refcount &amp;lt; 0 being an error, shouldn&apos;t we go all the way and throw a runtime exception ?&lt;br/&gt;
Are you in agreement about open()?&lt;/p&gt;</comment>
                            <comment id="12622610" author="henrib" created="Thu, 14 Aug 2008 18:18:31 +0100"  >&lt;p&gt;updated to reflect Yonik&apos;s last suggestion.&lt;br/&gt;
fixed test attempting to close closed core.&lt;br/&gt;
(throwing an exception was useful for quick detection).&lt;/p&gt;</comment>
                            <comment id="12622613" author="yseeley@gmail.com" created="Thu, 14 Aug 2008 18:26:41 +0100"  >&lt;blockquote&gt;&lt;p&gt;Are you in agreement about open()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, if cores obtained through other methods need to be open for some reason, then open() would need to be called.  I&apos;m not sure if we have any cases like that.&lt;/p&gt;</comment>
                            <comment id="12622614" author="noble.paul" created="Thu, 14 Aug 2008 18:31:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;About the close(), you&apos;re right: the refcount &amp;lt; 0 being an error, shouldn&apos;t we go all the way and throw a runtime exception ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt; refcount &amp;lt; 0 is an error . but should it throw an exception?  I am not too sure. logging a severe error should be fine. because that should not be a reason to crash a server&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Are you in agreement about open()?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;even open() does not need a compareAndSet. just do a refCount.incrementAndget(). if count &amp;lt;=1 return null .because it is already closed or being closed .&lt;/p&gt;</comment>
                            <comment id="12622618" author="yseeley@gmail.com" created="Thu, 14 Aug 2008 18:37:51 +0100"  >&lt;blockquote&gt;&lt;p&gt;refcount &amp;lt; 0 is an error . but should it throw an exception? I am not too sure. logging a severe error should be fine. because that should not be a reason to crash a server&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right... on one hand an exception brings more visibility, but on the other hand it&apos;s a recoverable error that&apos;s not necessarily tied to the request that would get the exception.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;even open() does not need a compareAndSet. just do a refCount.incrementAndget(). if count &amp;lt;=1 return null .because it is already closed or being closed .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And then if another thread calls open() at the same time, count will be 2 and it would incorrectly return a closing core.  If open() is needed, Henri has the right impl there.&lt;/p&gt;</comment>
                            <comment id="12622628" author="otis" created="Thu, 14 Aug 2008 19:14:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;Right... on one hand an exception brings more visibility, but on the other hand it&apos;s a recoverable error that&apos;s not necessarily tied to the request that would get the exception.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Should we then do:&lt;br/&gt;
LOG.severe(&quot;XYZ happened.  Please report this problem on solr-user@lucene.apache.org&quot;);&lt;/p&gt;</comment>
                            <comment id="12622632" author="noble.paul" created="Thu, 14 Aug 2008 19:27:21 +0100"  >&lt;p&gt;The CoreContainer#create(CoreDescriptor dcore)  must close the old core after creating the new one&lt;/p&gt;</comment>
                            <comment id="12622735" author="henrib" created="Fri, 15 Aug 2008 00:20:41 +0100"  >&lt;blockquote&gt;&lt;p&gt;Yes, if cores obtained through other methods need to be open for some reason, then open() would need to be called.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I&apos;m not sure if we have any cases like that.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No, we don&apos;t have any cases today. It could have been useful to someone implementing another filter or servlet.&lt;br/&gt;
Since the same effect can be obtained with:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
CoreDescriptor dcore;
CoreContainer container;
...
SolrCore opened = container.getCore(dcore.getName());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;open() can just be incrementAndGet(). (finally!&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;LOG.severe(&quot;XYZ happened. Please report this problem on solr-user@lucene.apache.org&quot;)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Seems to be the consensus; updated.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The CoreContainer#create(CoreDescriptor dcore) must close the old core after creating the new one &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Correct, fixed.&lt;/p&gt;</comment>
                            <comment id="12623000" author="yseeley@gmail.com" created="Fri, 15 Aug 2008 20:48:35 +0100"  >&lt;p&gt;I&apos;m thinking of changing the cores map to &amp;lt;String,SolrCore&amp;gt; (from &amp;lt;String,CoreDescriptor&amp;gt;)&lt;br/&gt;
and removing getCore() from CoreDescriptor.  Thoughts?&lt;/p&gt;</comment>
                            <comment id="12623001" author="yseeley@gmail.com" created="Fri, 15 Aug 2008 20:53:23 +0100"  >&lt;p&gt;Also, is there any reason not to allow the same core to be registered more than once if desired?  It really seems like CoreContainer should just map from a String to a SolrCore and not worry about some of the other stuff.&lt;/p&gt;</comment>
                            <comment id="12623003" author="ryantxu" created="Fri, 15 Aug 2008 21:08:38 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m thinking of changing the cores map to &amp;lt;String,SolrCore&amp;gt; (from &amp;lt;String,CoreDescriptor&amp;gt;) and removing getCore() from CoreDescriptor. Thoughts? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;since every core has a CoreDescriptor, this seems much cleaner then have the (existing) double link.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;is there any reason not to allow the same core to be registered more than once if desired?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;sounds good.&lt;/p&gt;</comment>
                            <comment id="12623007" author="yseeley@gmail.com" created="Fri, 15 Aug 2008 21:27:56 +0100"  >&lt;p&gt;FYI, I&apos;m also overhauling some of the synchronization... the lock is held far too long in some cases (like reload when it&apos;s held the whole time a new core is being created).&lt;/p&gt;</comment>
                            <comment id="12623019" author="yseeley@gmail.com" created="Fri, 15 Aug 2008 21:54:51 +0100"  >&lt;p&gt;Also, persistFile looks like it would take enough time that I&apos;m going to change it to synchronize on a separate lock so it doesn&apos;t block requests in the meantime.&lt;/p&gt;</comment>
                            <comment id="12623142" author="yseeley@gmail.com" created="Sat, 16 Aug 2008 17:50:08 +0100"  >&lt;p&gt;Here&apos;s an updated patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;cores is a Map&amp;lt;String,SolrCore&amp;gt;&lt;/li&gt;
	&lt;li&gt;no prohibition of adding a SolrCore to the CoreContainer multiple times (to be able to access it from multiple URLs, for back compatible migration for example)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I was going to remove the SolrCore name altogether.... but things like JMX and logging use it.&lt;br/&gt;
That&apos;s a weakness in both the way multicore worked (core swap wouldn&apos;t swap JMX) and the current patch (core name is independent of how it&apos;s mapped via CoreContainer).&lt;/p&gt;

&lt;p&gt;One resolution would be to have a callback on SolrCore whenever it&apos;s name is changed, so JMX and logging strings could be appropriately adjusted.&lt;/p&gt;</comment>
                            <comment id="12623173" author="ryantxu" created="Sun, 17 Aug 2008 02:07:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;I was going to remove the SolrCore name altogether.... but things like JMX and logging use it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can we remove it and always access the name via the CoreDescriptor?  Having a name on the core made sense before we added the descriptor...&lt;/p&gt;</comment>
                            <comment id="12623190" author="yseeley@gmail.com" created="Sun, 17 Aug 2008 14:22:54 +0100"  >&lt;p&gt;Here&apos;s a slight update:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removes the SolrCore finalizer to prevent too many closes exception (we could do a refcount check too)&lt;/li&gt;
	&lt;li&gt;calls SolrCore.setName() when a core is added or renamed in the CoreContainer (it was just too wierd to do a core swap and not have the names change).  This does not affect JMX.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I was going to remove the SolrCore name altogether.... but things like JMX and logging use it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can we remove it and always access the name via the CoreDescriptor? Having a name on the core made sense before we added the descriptor...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If we did want to change JMX or other things on a name change, it seems like the call needs to be on the SolrCore.  Currently this does change the logging string too (probably good for avoiding confusion on a core swap)&lt;/p&gt;

&lt;p&gt;Unless there are objections, I think this is close enough to commit soon and then propose smaller patches off of trunk.&lt;/p&gt;</comment>
                            <comment id="12623201" author="noble.paul" created="Sun, 17 Aug 2008 16:56:30 +0100"  >&lt;blockquote&gt;&lt;p&gt;Also, is there any reason not to allow the same core to be registered more than once if desired? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How will SolrCore#getCoreDescriptor() work. what will it return?&lt;/p&gt;

&lt;p&gt;should the getCore() have synchronized block? &lt;/p&gt;

&lt;p&gt;can we manage with a ConcurrentHashMap? A lock to be obtained per request looks like too much of a price . The only problem with concurrent map is that if you remove while an iteration is going on you may get an exception (correct me if I am wrong). If we can have a separate lock for just that we can have synchronization only in those places and we can spare the getCore()&lt;/p&gt;
</comment>
                            <comment id="12623204" author="henrib" created="Sun, 17 Aug 2008 17:27:44 +0100"  >&lt;p&gt;Small err that  would affect reload() in CoreContainer.register, ~line 261, it seems this should be:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
log.info( &lt;span class=&quot;code-quote&quot;&gt;&quot;replacing core: &quot;&lt;/span&gt;+name );
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!returnPrev) {
        old.close(); &lt;span class=&quot;code-comment&quot;&gt;// not core.close()
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Harmless, the &quot;alias&quot; attribute feature is folded into &quot;name&quot; so:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; aliasesStr = DOMUtil.getAttr(node, &lt;span class=&quot;code-quote&quot;&gt;&quot;aliases&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;can go.&lt;/p&gt;</comment>
                            <comment id="12623379" author="yseeley@gmail.com" created="Mon, 18 Aug 2008 16:30:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;How will SolrCore#getCoreDescriptor() work. what will it return?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The original core descriptor (the original name).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;should the getCore() have synchronized block?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;CoreContainer.getCore() does.&lt;br/&gt;
I removed CoreDescriptor.getCore()&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;can we manage with a ConcurrentHashMap? A lock to be obtained per request looks like too much of a price .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It could be reworked in the future, but a single synchronized map lookup per top-level request is certainly nothing to worry about - there are probably at least hundreds of synchronized calls per average request.&lt;/p&gt;</comment>
                            <comment id="12623380" author="yseeley@gmail.com" created="Mon, 18 Aug 2008 16:32:40 +0100"  >&lt;p&gt;I&apos;ve committed this patch.&lt;br/&gt;
There is probably some more multicore work to be done, but they can get their own issues.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12394490">SOLR-545</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12395304">SOLR-561</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12387090" name="SOLR-647.patch" size="4343" author="noble.paul" created="Tue, 29 Jul 2008 11:24:25 +0100"/>
                            <attachment id="12386940" name="SOLR-647.patch" size="4256" author="noble.paul" created="Sat, 26 Jul 2008 06:50:35 +0100"/>
                            <attachment id="12388069" name="refcount_example.patch" size="2839" author="yseeley@gmail.com" created="Tue, 12 Aug 2008 18:49:19 +0100"/>
                            <attachment id="12388379" name="solr-647.patch" size="42113" author="yseeley@gmail.com" created="Sun, 17 Aug 2008 14:22:54 +0100"/>
                            <attachment id="12388367" name="solr-647.patch" size="41970" author="yseeley@gmail.com" created="Sat, 16 Aug 2008 17:57:43 +0100"/>
                            <attachment id="12388366" name="solr-647.patch" size="41865" author="yseeley@gmail.com" created="Sat, 16 Aug 2008 17:50:08 +0100"/>
                            <attachment id="12388286" name="solr-647.patch" size="22001" author="henrib" created="Fri, 15 Aug 2008 00:20:41 +0100"/>
                            <attachment id="12388258" name="solr-647.patch" size="17192" author="henrib" created="Thu, 14 Aug 2008 18:18:31 +0100"/>
                            <attachment id="12388251" name="solr-647.patch" size="16845" author="henrib" created="Thu, 14 Aug 2008 16:30:52 +0100"/>
                            <attachment id="12388245" name="solr-647.patch" size="22671" author="henrib" created="Thu, 14 Aug 2008 15:40:33 +0100"/>
                            <attachment id="12388002" name="solr-647.patch" size="16796" author="henrib" created="Mon, 11 Aug 2008 23:08:38 +0100"/>
                            <attachment id="12387839" name="solr-647.patch" size="13413" author="henrib" created="Fri, 8 Aug 2008 19:07:35 +0100"/>
                            <attachment id="12387772" name="solr-647.patch" size="9548" author="henrib" created="Thu, 7 Aug 2008 22:53:25 +0100"/>
                            <attachment id="12387719" name="solr-647.patch" size="8302" author="henrib" created="Thu, 7 Aug 2008 10:43:17 +0100"/>
                            <attachment id="12387659" name="solr-647.patch" size="7944" author="henrib" created="Wed, 6 Aug 2008 18:27:08 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 28 Jul 2008 14:17:10 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6966</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxq2f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20542</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>