<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:17:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-614/SOLR-614.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-614] Allow components to read any kind of XML from solrconfig</title>
                <link>https://issues.apache.org/jira/browse/SOLR-614</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;All the components initialized by Solr have an init(NamedList args) initializer. This leads us to writing the configuration needed for the component in the NamedList xml format. People familiar with Solr may know the format but most of what is written is noise than information. For users who are not familiar w/ the format find it too difficult to understand why they have to write it this way. Moreover , it is not a very efficient way to configure .&lt;/p&gt;</description>
                <environment></environment>
        <key id="12399535">SOLR-614</key>
            <summary>Allow components to read any kind of XML from solrconfig</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="noble.paul">Noble Paul</reporter>
                        <labels>
                    </labels>
                <created>Thu, 3 Jul 2008 14:45:52 +0100</created>
                <updated>Wed, 18 Nov 2009 11:24:47 +0000</updated>
                            <resolved>Wed, 18 Nov 2009 11:24:47 +0000</resolved>
                                    <version>1.3</version>
                                                        <due></due>
                            <votes>3</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12610468" author="noble.paul" created="Fri, 4 Jul 2008 08:10:23 +0100"  >&lt;p&gt;If the configuration of a handler is as follows&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;requestHandler name=&lt;span class=&quot;code-quote&quot;&gt;&quot;/foo&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.FooHandler&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;defaults&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;some-name&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;classname&amp;gt;&lt;/span&gt;solr.MyClass&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/classname&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/defaults&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/requestHandler&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The values can be read from the iniArgs as follows&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
NamedList defaults = (NamedList )initArgs.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;);
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)defaults.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;);
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; classname = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)defaults.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;classname&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even attributes can be read as in the following config&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;requestHandler name=&lt;span class=&quot;code-quote&quot;&gt;&quot;/foo&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.FooHandler&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;defaults name=&lt;span class=&quot;code-quote&quot;&gt;&quot;default&quot;&lt;/span&gt; name=&lt;span class=&quot;code-quote&quot;&gt;&quot;somename&quot;&lt;/span&gt; classname=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.MyClass&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/requestHandler&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The values can be read from the iniArgs as follows&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
NamedList defaults = (NamedList )initArgs.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&quot;&lt;/span&gt;);
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)defaults.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;@name&quot;&lt;/span&gt;);
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; classname = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)defaults.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;@classname&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12615075" author="noble.paul" created="Sun, 20 Jul 2008 11:20:59 +0100"  >&lt;p&gt;The new patch for the changes proposed&lt;/p&gt;</comment>
                            <comment id="12615122" author="ryantxu" created="Sun, 20 Jul 2008 21:51:12 +0100"  >&lt;p&gt;If I understood the discussion on the dev list properly, we would put off any syntax changes until 2.0, and then hopefully use some configuration standards that we don&apos;t maintain (spring)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/lesser-noise-in-solrconfig.xml-td18253180.html#a18253180&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/lesser-noise-in-solrconfig.xml-td18253180.html#a18253180&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, the new format is cleaner and more clear, but I fear compatibility/clarity issues with existing 1.x setups and multiple syntaxs for the same thing seems problematic.&lt;/p&gt;

&lt;p&gt;I think we should mark this as &quot;won&apos;t fix&quot;, and save the configuration cleanup till we can do it well &amp;#8211; ie, spring.&lt;/p&gt;</comment>
                            <comment id="12615146" author="noble.paul" created="Mon, 21 Jul 2008 04:58:26 +0100"  >&lt;p&gt;The scope of this bug is not same as &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/lesser-noise-in-solrconfig.xml-td18253180.html#a18253180&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/lesser-noise-in-solrconfig.xml-td18253180.html#a18253180&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I descoped it. &lt;br/&gt;
It &lt;b&gt;WILL NOT&lt;/b&gt; make any changes to the &lt;em&gt;solrconfig.xml&lt;/em&gt;. The intend is to enable new components to take advantage of a flexible format. When I say new components the components written by users after 1.3 (intended to run on top of 1.3)&lt;/p&gt;

&lt;p&gt;We use our own custom components in our organization. I am sure there are a lot of other users who do that.  There is no harm in enabling them to choose their format (if they wish to do so) &lt;/p&gt;

&lt;p&gt;If we plan to change the configuration in any which way in the future , how can this affect any of our plans?&lt;/p&gt;

&lt;p&gt;The implementation does not have to be the same (or even the scope) . But we should allow more flexibility in the API for component writers&lt;/p&gt;</comment>
                            <comment id="12616458" author="shalinmangar" created="Thu, 24 Jul 2008 13:17:55 +0100"  >&lt;p&gt;I think the current scope is reasonable. This limited scope makes a cleaner config possible but makes no changes to the public configuration as it stands now. Future (Solr 1.4+) and custom user components can use the cleaner configuration syntax if they choose to do so. We can document in the wiki that a cleaner syntax is available for component writers if they so desire. Future versions of the existing components which use the XPath based parsing currently, can switch to using this code for a cleaner and consistent implementation, if we so desire.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12616776" author="noble.paul" created="Fri, 25 Jul 2008 07:46:34 +0100"  >&lt;p&gt;refactored&lt;/p&gt;</comment>
                            <comment id="12617203" author="shalinmangar" created="Sat, 26 Jul 2008 19:46:15 +0100"  >&lt;p&gt;I&apos;d like to commit this in a day or two if there are no objections.&lt;/p&gt;</comment>
                            <comment id="12617214" author="ryantxu" created="Sat, 26 Jul 2008 22:01:30 +0100"  >&lt;p&gt;-1&lt;/p&gt;

&lt;p&gt;As discussed elsewhere, I&apos;m against changing the NamedList config code.  I agree it is ugly, but at least it is consistent.  In 2.0, this should all be revisited, so I see no reason to introduce a new possible format into the mix...  even if it is only used for new things...&lt;/p&gt;

&lt;p&gt;Judging from the discussion on the related thread, I think Erik and Hoss are also -1 (but let them speak for themselves)&lt;/p&gt;</comment>
                            <comment id="12617229" author="shalinmangar" created="Sun, 27 Jul 2008 02:46:18 +0100"  >&lt;p&gt;Ryan &amp;#8211; I re-read the thread several times before posting this. My understanding was that the -1 was on changing the solrconfig.xml format now for 1.3, please correct me if I&apos;m wrong.&lt;/p&gt;

&lt;p&gt;IMHO, this patch does &lt;em&gt;not&lt;/em&gt; introduce a new format. The format as the user sees it, is the same one used in many places in solrconfig.xml right now and becomes just a bit more intuitive. The code that developers write to initialize their component also uses the &lt;em&gt;same&lt;/em&gt; NamedListInitializedPlugin which we are all familiar with instead of the clunky XPath stuff. Backwards compatibility is retained for both users as well as developers where users can write the old way and developers can still use XPath instead of NamedList for initialization and it all &lt;em&gt;just works&lt;/em&gt;. If life is made easy for both users and developers and at the same time the changes remain backwards-compatible, I don&apos;t see why we should be against it.&lt;/p&gt;

&lt;p&gt;2.0 remains distant and getting to a Spring integration will take time. IMHO, that will be a real support problem when users may complain on discovering that they have to write their whole configuration again from scratch, or we provide converters which may fail with custom plugins, or even worse where we may need to support both the old and new formats. I really like the NamedList structure and this issue provides us with the flexibility of having a gradual migration path to a more consistent configuration syntax both for the user as well as for the plugin developer. Any changes to existing configuration will be made post 1.3, no changes right now.&lt;/p&gt;

&lt;p&gt;With all due respect, I ask you to reconsider.&lt;/p&gt;</comment>
                            <comment id="12617236" author="noble.paul" created="Sun, 27 Jul 2008 04:48:29 +0100"  >&lt;p&gt;This one change has the potential to cleanup a lot of ugly XPath reading in our code. The intend here is to cleanup our internal code if needed. In many places (eg:updateHandler , &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-660&quot; title=&quot;Simplify UpdateRequestProcessor API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-660&quot;&gt;&lt;del&gt;SOLR-660&lt;/del&gt;&lt;/a&gt; etc) we have a simple format but the parsing code is still ugly. &lt;/p&gt;

&lt;p&gt;Another interesting point I observe in that many of our components are not &lt;em&gt;NamedListInitializedPlugin&lt;/em&gt; Just because of this one reason. They will have to stick to this ugly format. So what happens is, components take in an XML Node to parse their custom XML&lt;/p&gt;

&lt;p&gt;One point that all of us accept is that the current format is ugly. Moreover , the NameList format is no XML standard . It is just &lt;b&gt;another&lt;/b&gt; response format for SOLR output  . My request is let us &lt;b&gt;please&lt;/b&gt; not impose a weird format on component writers . Let us give choice to component writers who use Solr1.3 release as their base. The longer we delay this harder it gets to change this.&lt;/p&gt;

</comment>
                            <comment id="12617318" author="ryantxu" created="Sun, 27 Jul 2008 18:32:38 +0100"  >&lt;p&gt;perhaps I&apos;m missing something...  where/how does this get rid of any XPath?  Within a NamedListInitalizedPlugin, the plugin writer does not have access to the Node and can&apos;t use it anyway?  The plugin writer just has access to a NamedList.&lt;/p&gt;

&lt;p&gt;What I see is that this modifies/augments how we parse NamedLists, adding two key features:&lt;br/&gt;
1. &amp;lt;a&amp;gt;value&amp;lt;/a&amp;gt; == &amp;lt;str name=&quot;a&quot;&amp;gt;value&amp;lt;/str&amp;gt;&lt;br/&gt;
2. &amp;lt;node a=&quot;value&quot; /&amp;gt; &amp;#8211; adds &apos;@a&apos;=value to the NamedList &apos;node&apos;&lt;/p&gt;

&lt;p&gt;Perhaps I&apos;m just reluctant to muck with a format that despite its awkwardness works, and is consistent across (most) plugins.  To me it seems wrong that I would need to initialize most things with: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;defaults&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;echoParams&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;explicit&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; but &lt;b&gt;perhaps&lt;/b&gt; other plugins would need: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;defaults echoParams=&lt;span class=&quot;code-quote&quot;&gt;&quot;explicit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;  Yes, the latter is better looking, but considering that folks are already forced to use the former, it seems wrong (and asking for trouble) mix and match.  &lt;/p&gt;

&lt;p&gt;NamedList isn&apos;t an XML standard, but in 1.x we can&apos;t get rid of it, so I think we should just deal with it consistently and in 2.x make sure we fix it.&lt;/p&gt;</comment>
                            <comment id="12617319" author="ryantxu" created="Sun, 27 Jul 2008 18:36:21 +0100"  >&lt;p&gt;Perhaps I&apos;m not thinking of configurations substantially complex to warrant this change.  Is there something concrete I&apos;m not thinking about?  Is there anything that could not be represented with the existing format?&lt;/p&gt;</comment>
                            <comment id="12617321" author="noble.paul" created="Sun, 27 Jul 2008 18:58:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;perhaps I&apos;m missing something... where/how does this get rid of any XPath? Within a NamedListInitalizedPlugin, the plugin writer does not have access to the Node and can&apos;t use it anyway? The plugin writer just has access to a NamedList. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The NamedList instance contains everything you can add in an xml. so no more XPath needed .&lt;br/&gt;
For instance ,the UpdateprocessorChain coud have easily been a NamedListInitializedPlugin . All we need to do is add a method to SolrConfig#getNodeAsNamedList(String xpath). All components can start from there. (of cource the first xpath cannot be avoided)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Yes, the latter is better looking, but considering that folks are already forced to use the former, it seems wrong (and asking for trouble) mix and match.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We are &lt;b&gt;not&lt;/b&gt; changing anything here. &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;defaults&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;echoParams&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;explicit&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;is not same as &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;defaults echoParams=&lt;span class=&quot;code-quote&quot;&gt;&quot;explicit&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unless the component writer explicitly changes his code (which I am not recommending now)&lt;/p&gt;


&lt;p&gt;The use case is as follows:&lt;br/&gt;
For instance in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-561&quot; title=&quot;Solr replication by Solr (for windows also)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-561&quot;&gt;&lt;del&gt;SOLR-561&lt;/del&gt;&lt;/a&gt; I do not wish to keep this configuration&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;requestHandler name=&lt;span class=&quot;code-quote&quot;&gt;&quot;/replication&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.ReplicationHandler&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;master&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;code-tag&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;&amp;lt;!--Replicate on &apos;optimize&apos; it can also be  &apos;commit&apos; --&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;replicateAfter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;commit&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;code-tag&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;&amp;lt;!--Config files to be to be replicated--&amp;gt;&lt;/span&gt;&lt;/span&gt;
         &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;confFiles&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;schema.xml,stopwords.txt,elevate.xml&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;          
         &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;snapShootAfter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;optimize&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;          
         &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;snapDir&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;/user/datadir&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;          
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/requestHandler&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I wish to have a configuration&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;requestHandler name=&lt;span class=&quot;code-quote&quot;&gt;&quot;/replication&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.ReplicationHandler&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;
    &amp;lt;master replicateAfter=&lt;span class=&quot;code-quote&quot;&gt;&quot;commit&quot;&lt;/span&gt; 
                    confFiles=&lt;span class=&quot;code-quote&quot;&gt;&quot;schema.xml,stopwords.txt,elevate.xml&quot;&lt;/span&gt; 
                   snapShootAfter=&lt;span class=&quot;code-quote&quot;&gt;&quot;optimize&quot;&lt;/span&gt; snapDir=&lt;span class=&quot;code-quote&quot;&gt;&quot;/user/datadir&quot;&lt;/span&gt;/&amp;gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/requestHandler&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But ,it is not possible w/o resorting to xpath . &lt;/p&gt;


&lt;p&gt;with this code change. I can do something like &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
NamedList master = (NamedList )initArgs.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;master&quot;&lt;/span&gt;);
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; replicateAfter = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)master.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;@replicateAfter&quot;&lt;/span&gt;);
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; confFiles= (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)master.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;@confFiles&quot;&lt;/span&gt;);
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; snapDir= (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)master.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;@snapDir&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;This feature is not going to be a part of Solr1.3. But it may be deployed in our organization as an addon feature. &lt;/p&gt;


&lt;p&gt;The second usecase is components like UpdateHandler , UpdateRequestProcessor etc. which already has a syntax that is clean. They can cleanup their java code with no xpath&lt;/p&gt;</comment>
                            <comment id="12617368" author="shalinmangar" created="Mon, 28 Jul 2008 07:40:37 +0100"  >&lt;p&gt;Just to elaborate on the UpdateRequestProcessor use-case, right now we have modified SolrCore to add a method loadUpdateProcessorChains which has quite a bit of XPath parsing to create a NamedList which is passed to the UpdateRequestProcessorFactory. With this patch, the chain can just implement NamedListInitializedPlugin and the whole bit of parsing will be done automatically.&lt;/p&gt;

&lt;p&gt;So the whole code in SolrCore#loadUpdateProcessorChains will look like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
List&amp;lt;NamedList&amp;gt; initConfigs = solrConfig.getAllNodesAsNamedList(&lt;span class=&quot;code-quote&quot;&gt;&quot;updateRequestProcessorChain&quot;&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (NamedList list : initConfigs)  {
      UpdateRequestProcessorChain chain = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; UpdateRequestProcessorChain();
      chain.init(list);
      map.put((&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)list.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;@name&quot;&lt;/span&gt;), chain);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The chain will have an init method like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void init(NamedList args) {
    List&amp;lt;NamedList&amp;gt; processors = args.getAll(&lt;span class=&quot;code-quote&quot;&gt;&quot;processor&quot;&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (NamedList processor : processors)  {
      UpdateRequestProcessorFactory p = (UpdateRequestProcessorFactory)core.getResourceLoader().newInstance((&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;)processor.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;@class&quot;&lt;/span&gt;));
      p.init(processor);
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the chain can create all processors inside it rather than SolrCore creating processors and passing them into a chain constructor.&lt;/p&gt;</comment>
                            <comment id="12617370" author="shalinmangar" created="Mon, 28 Jul 2008 07:44:28 +0100"  >&lt;p&gt;Adds SolrConfig#getAllNodesAsNamedList and SolrConfig#getNodeAsNamedList helper methods to further simplify parsing code.&lt;/p&gt;</comment>
                            <comment id="12617423" author="ehatcher" created="Mon, 28 Jul 2008 14:41:51 +0100"  >&lt;p&gt;I still think this is an unnecessary addition that has the potential to be confusing.  Even though the current config stuff is ugly to navigate, it is only one way that will be easier to support.&lt;/p&gt;

&lt;p&gt;I don&apos;t want to thwart your efforts though.  -0&lt;/p&gt;

&lt;p&gt;I&apos;d really prefer this be taken to a post-1.3 commit at the very least though, so we can flesh out config syntax and infrastructure a bit more.&lt;/p&gt;</comment>
                            <comment id="12617430" author="noble.paul" created="Mon, 28 Jul 2008 15:03:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;I still think this is an unnecessary addition that has the potential to be confusing. Even though the current config stuff is ugly to navigate, it is only one way that will be easier to support. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;All the changes are under the skin. There will be no changes to the configuration or public API. All the components &lt;b&gt;must&lt;/b&gt;  stick to the old configuration.So, I hope there is no need to have any confusion&lt;/p&gt;</comment>
                            <comment id="12617433" author="shalinmangar" created="Mon, 28 Jul 2008 15:11:57 +0100"  >&lt;p&gt;Eric &amp;#8211; One reason that I&apos;m so +1 on it is that if it does not go into 1.3, all custom (internal) plugins we write for 1.3 will be stuck with the ugly config format or clunky xpath code for at least the next six to eight months until we have another release.&lt;/p&gt;</comment>
                            <comment id="12617563" author="hossman" created="Mon, 28 Jul 2008 22:36:32 +0100"  >&lt;blockquote&gt;&lt;p&gt;All the changes are under the skin. There will be no changes to the configuration or public API. All the components must stick to the old configuration.So, I hope there is no need to have any confusion&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m only half certain I understand exactly what&apos;s being discussed, so take this comment with a grain of salt...&lt;/p&gt;

&lt;p&gt;Even if the code changes dictate that existing components must still use the existing config syntax (I assume because it asks for things like params.get(&quot;foo&quot;) instead of params.get(&quot;@foo&quot;) the fact remains that if a single type of plugin (ie: RequestHandler) &lt;b&gt;can&lt;/b&gt; support multiple config syntaxes the potential exists for people to get very confused ... if we make this change, then someone who is already familiar with the way handlers are configured won&apos;t understand the &quot;/replication&quot; example Noble posted &amp;#8211; likewise someone new to Solr who sees that &quot;/replication&quot; example config will have a harder time understanding the &apos;old&apos; config style for other request handlers.&lt;/p&gt;

&lt;p&gt;There is a &lt;b&gt;lot&lt;/b&gt; of value in maintaining consistency &amp;#8211; even if it&apos;s ugly.&lt;/p&gt;

&lt;p&gt;Looking ahead two or three moves: adding support for something like this now would also probably make it that much harder to write a &quot;converter&quot; for existing solr config files if/when we switch to Spring or some other Java object wiring/configuration system.  It&apos;s a minor problem, but it has occurred to me.&lt;/p&gt;
</comment>
                            <comment id="12617674" author="ryantxu" created="Tue, 29 Jul 2008 04:09:45 +0100"  >&lt;p&gt;As i have said, I think consistency is a good thing and we will hopefully get out of the custom config format business in 2.0.  But I also see that having ugly configs makes it difficult to be clear about what it does.  (I remember struggling to figure out that lst != 1st)  Ugly configs are a big deal, so I hate to throw sticks at the endeavor...  I imagine any translation to a new format would involve reading it and then outputting the relevant configs rather then trying some sort of text manipulation.  With that in mind, it probably makes little difference on that front.&lt;/p&gt;

&lt;p&gt;So I&apos;ll change my vote to -0, and I&apos;ll let you all sort out what should happen...&lt;/p&gt;
</comment>
                            <comment id="12617688" author="noble.paul" created="Tue, 29 Jul 2008 05:19:26 +0100"  >&lt;blockquote&gt;&lt;p&gt;.. if we make this change, then someone who is already familiar with the way handlers are configured won&apos;t understand the &quot;/replication&quot; example Noble posted&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;the feature that is already under development may have its syntax not yet finalized . So when we eventually commit it, it may have a different syntax. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There is a lot of value in maintaining consistency - even if it&apos;s ugly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We do not have consistency in the way multiple components are configured. eg: UpdateHandler, UpdateProcessorChain, mainIndex etc.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the fact remains that if a single type of plugin (ie: RequestHandler) can support multiple config syntaxes the potential exists for people to get very confused &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We must not support multiple formats . We must stick to one an we will support only one .&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Looking ahead two or three moves: adding support for something like this now would also probably make it that much harder to write a &quot;converter&quot; for existing solr config files if/when we switch to Spring or some other Java object wiring/configuration system. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We are trivializing a config format switch . It is not going to be as simple as writing a simple converter. We may need total rewiring of components which may involve code modification for all the components. &lt;/p&gt;</comment>
                            <comment id="12620275" author="shalinmangar" created="Wed, 6 Aug 2008 16:06:38 +0100"  >&lt;p&gt;Committed revision 683288 after removing the attribute reading for plain NamedList so that existing usage is not changed in any way.&lt;/p&gt;

&lt;p&gt;Thanks Noble!&lt;/p&gt;</comment>
                            <comment id="12620320" author="hossman" created="Wed, 6 Aug 2008 18:04:03 +0100"  >&lt;p&gt;FWIW...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We do not have consistency in the way multiple components are configured. eg: UpdateHandler, UpdateProcessorChain, mainIndex etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is a &lt;b&gt;huge&lt;/b&gt; difference between having different types of plugins (ie: UpdateHandlers and RequestHandlers) configured with different syntaxes and allowing completely different config syntaxes for different implementations of the same type of plugin (ie: RequestHandler) &amp;#8211; people are not surprised when dissimilar things have dissimilar configuration, they are suprised when two tings of the same &quot;type&quot; can be configured with radically different syntaxes.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We must not support multiple formats . We must stick to one an we will support only one .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This comment doesn&apos;t make sense to me ... we have one syntax right now, this issue adds an arbitrary number of new syntaxes for any type of plugin whose init() method takes a NamedList &amp;#8211; and different implementations of those types can use it different ways.  &lt;/p&gt;

&lt;p&gt;How is that not multiple formats?&lt;/p&gt;

&lt;p&gt;I don&apos;t see any future for this change that doesn&apos;t involve people getting confused because they see RequestHandler X configured with one syntax in our example configs, but then in some third party plugin project they see RequestHandler Y configured with a completely different syntax and they have no idea what the right way to configure RequestHandler Z is.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But I also see that having ugly configs makes it difficult to be clear about what it does. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;having divergent configs makes it even more difficult.  at least with one ugly syntax once you understand it for one instance, you understand it for all instances.&lt;/p&gt;</comment>
                            <comment id="12620824" author="noble.paul" created="Fri, 8 Aug 2008 04:31:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;This comment doesn&apos;t make sense to me ... we have one syntax right now, this issue adds an arbitrary number of new syntaxes for any type of plugin whose init() method takes a NamedList - and different implementations of those types can use it different ways.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;users do not f\differentiate between namedlist format and simple xml format. according to them it is xml. It is only we who see it differently. So every component has its own different configuration. As long as one component consistently uses one configuration ,I guess we are fine. I have never seen users complaining about the inconsistency between updatehandler/requesthandler config. The fact is they don&apos;t care. According to them, an updatehandler and a requesthandler1 and requesthandler2 are 3 different components needing three different configurations. &lt;/p&gt;

&lt;p&gt;for instance compare between spellchecker and dismax. Though they have similar formats uses may never notice it because they have totally different configuration. I am sure there is no cause of a confusion because users never compare these two.&lt;/p&gt;

&lt;p&gt;There are certain well known conventions which are important. such as defaults , invariants etc in a requesthandler. It makes sense to  have consistency in those things. &lt;/p&gt;

&lt;p&gt;As we start building more and more complex handlers this format can become a real millstone around our neck. We must not sacrifice simplicity of future components because of a few components we already have.&lt;/p&gt;


</comment>
                            <comment id="12645689" author="shalinmangar" created="Fri, 7 Nov 2008 05:27:34 +0000"  >&lt;p&gt;Un-assigning myself since I don&apos;t see this going anywhere.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12387007" name="SOLR-614.patch" size="7848" author="shalinmangar" created="Mon, 28 Jul 2008 07:44:28 +0100"/>
                            <attachment id="12386856" name="SOLR-614.patch" size="5243" author="noble.paul" created="Fri, 25 Jul 2008 07:46:34 +0100"/>
                            <attachment id="12386486" name="SOLR-614.patch" size="4722" author="noble.paul" created="Sun, 20 Jul 2008 11:20:59 +0100"/>
                            <attachment id="12385277" name="SOLR-614.patch" size="4641" author="noble.paul" created="Fri, 4 Jul 2008 08:10:22 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 20 Jul 2008 20:51:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6997</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxq9j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20574</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>