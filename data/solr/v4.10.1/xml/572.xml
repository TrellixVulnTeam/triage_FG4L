<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:24:05 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-572/SOLR-572.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-572] Spell Checker as a Search Component</title>
                <link>https://issues.apache.org/jira/browse/SOLR-572</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/solr/SpellCheckComponent&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/solr/SpellCheckComponent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Expose the Lucene contrib SpellChecker as a Search Component. Provide the following features:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Allow creating a spell index on a given field and make it possible to have multiple spell indices &amp;#8211; one for each field&lt;/li&gt;
	&lt;li&gt;Give suggestions on a per-field basis&lt;/li&gt;
	&lt;li&gt;Given a multi-word query, give only one consistent suggestion&lt;/li&gt;
	&lt;li&gt;Process the query with the same analyzer specified for the source field and process each token separately&lt;/li&gt;
	&lt;li&gt;Allow the user to specify minimum length for a token (optional)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Consistency criteria for a multi-word query can consist of the following:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Preserve the correct words in the original query as it is&lt;/li&gt;
	&lt;li&gt;Never give duplicate words in a suggestion&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12395811">SOLR-572</key>
            <summary>Spell Checker as a Search Component</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gsingers">Grant Ingersoll</assignee>
                                    <reporter username="shalinmangar">Shalin Shekhar Mangar</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 May 2008 07:29:00 +0100</created>
                <updated>Fri, 10 May 2013 11:39:12 +0100</updated>
                            <resolved>Thu, 19 Jun 2008 14:54:41 +0100</resolved>
                                    <version>1.3</version>
                                    <fixVersion>1.3</fixVersion>
                                    <component>spellchecker</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="12597203" author="shalinmangar" created="Thu, 15 May 2008 18:22:16 +0100"  >&lt;p&gt;Linked to &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-507&quot; title=&quot;Spell Checking Improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-507&quot;&gt;&lt;del&gt;SOLR-507&lt;/del&gt;&lt;/a&gt; - Spell Checking Improvements.&lt;/p&gt;</comment>
                            <comment id="12597207" author="shalinmangar" created="Thu, 15 May 2008 18:44:56 +0100"  >&lt;p&gt;A first cut for this issue. Please consider this as work in progress. I&apos;ve posted this to get feedback on the approach and syntax.&lt;/p&gt;

&lt;p&gt;The contains the following:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;SpellCheckComponent is an implementation of SearchComponent&lt;/li&gt;
	&lt;li&gt;The configuration is specified in solrconfig.xml with multiple &quot;dictionary&quot; nodes. Each dictionary must have a name and a type. The name must be specified during query time. The type is needed to allow for more than one way of loading data into the spell index (solr field or file). For example:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;searchComponent name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellcheck&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.handler.component.SpellCheckComponent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;default&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;solr&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;field&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;word&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;indexDir&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;c:/temp/spellindex&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;external&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;file&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;path&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;spellings.txt&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/searchComponent&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;If indexDir is not present in the dictionary&apos;s configuration then a RAMDirectory is used, otherwise a FSDirectory is used.&lt;/li&gt;
	&lt;li&gt;This patch supports dictionaries loaded from Solr fields.&lt;/li&gt;
	&lt;li&gt;A separate Lucene SpellChecker is created for each configured dictionary&lt;/li&gt;
	&lt;li&gt;Sample query syntax is as follows:
	&lt;ul&gt;
		&lt;li&gt;&lt;tt&gt;/select/?q=aura&amp;amp;version=2.2&amp;amp;start=0&amp;amp;rows=10&amp;amp;indent=on&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=default&amp;amp;spellcheck.count=10&lt;/tt&gt;&lt;/li&gt;
		&lt;li&gt;&lt;tt&gt;/select/?q=toyata&amp;amp;version=2.2&amp;amp;start=0&amp;amp;rows=10&amp;amp;indent=on&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=default&lt;/tt&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;The value for &quot;q&quot; is analyzed with the Solr field&apos;s query analyzer. Suggestions for each token are fetched separately.&lt;/li&gt;
	&lt;li&gt;Only one suggestion for a query is given by default. This should be used for multi-token queries.&lt;/li&gt;
	&lt;li&gt;If spellcheck.count is specified then the response has a number of suggestions &amp;lt;= spellcheck.count for each token separately.&lt;/li&gt;
	&lt;li&gt;Only unique words are returned in the suggestions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Things to be done:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Add JUnit tests&lt;/li&gt;
	&lt;li&gt;Reloading dictionaries. Currently the dictionary is loaded only once during the first request.&lt;/li&gt;
	&lt;li&gt;Make things more configurable like SpellCheckerRequestHandler&lt;/li&gt;
	&lt;li&gt;Add support for onlyMorePopular flag as in SpellCheckerRequestHandler&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12597345" author="noble.paul" created="Fri, 16 May 2008 05:28:32 +0100"  >&lt;ul&gt;
	&lt;li&gt;the spellcheck.dictionary=default must be optional in query. The user must be able to name a dictionary as &apos;default&apos; and that can be used as the default if no value is passed.&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12597351" author="otis" created="Fri, 16 May 2008 05:44:29 +0100"  >&lt;p&gt;I had a quick look and it all looks nice and clean.&lt;br/&gt;
I like the config, though I think &quot;solr&quot; is too specific - the source field could be in a vanilla Lucene indexthat lives somewhere on disk, or example.  Thus, I&apos;d change &quot;solr&quot; to &quot;index&quot;.  Oh, I see, you are reading field values from the index of the current core.  I think that is fine, but wouldn&apos;t it also be good to be able to read field values from a vanilla Lucene index? (but you wouldn&apos;t know the field type and thus would not be able to get the Analyzer for the field)&lt;/p&gt;

&lt;p&gt;Also, and regardless of the above, instead of having &quot;indexDir&quot; and &quot;path&quot;, why not call them both &quot;location&quot; and maybe even let them include the file: schema for consistency, if it works with the code that uses those locations?&lt;/p&gt;

&lt;p&gt;Also on TODO:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Read dictionary from plain-text files.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12597354" author="shalinmangar" created="Fri, 16 May 2008 06:13:07 +0100"  >&lt;p&gt;Otis, I agree that we should call &quot;index&apos; instead of &quot;solr&quot; for the type and &quot;path&quot; can be renamed to &quot;location&quot;. But indexDir refers to the target for the spell check index whereas &quot;path&quot; currently refers to the source of the dictionary, so IMHO we should keep &quot;indexDir&quot; as it is (It can also be a relative path).&lt;/p&gt;

&lt;p&gt;For supporting arbitrary lucene indices, user must specify type=&quot;index&quot;, field=&quot;fieldName&quot;, location=&quot;path/to/lucene/index/directory&quot; which should be enough (TODO). In that case the analyzer can be fixed as something (say WhitespaceAnalyzer or StandardAnalyzer).&lt;/p&gt;

&lt;p&gt;I&apos;m not sure I understand your comment on the schema. If this is for text files then I was thinking more about having a text file which would have one word per line and all those words would go into the same dictionary.&lt;/p&gt;</comment>
                            <comment id="12597358" author="otis" created="Fri, 16 May 2008 06:37:15 +0100"  >&lt;p&gt;I see (indexDir comment).  Might be better to make it more obvious then - &quot;sourceIndex&quot; for the Lucene index that serves as the source of data) vs. &quot;targetIndex&quot; (or &quot;spellcheckerIndex&quot;) for the resulting spellchecker index.&lt;/p&gt;

&lt;p&gt;For Lucene indices to be used as sources of data type=&quot;index&quot;, field=&quot;fieldName&quot;, location=&quot;path/to/lucene/index/directory&quot; makes sense.&lt;/p&gt;

&lt;p&gt;Ignore my comment about the schema, I&apos;m just complicating things with that.  Yes, one word per line for plain-text file data sources - that can easily be digested with PlainTextDictionary class (part of Lucene SC).&lt;/p&gt;</comment>
                            <comment id="12597437" author="bosmid" created="Fri, 16 May 2008 13:02:11 +0100"  >&lt;p&gt;I added support for file-based dictionaries (they are configured as described in Shalin&apos;s post) using Lucene&apos;s PlainTextDictionary.&lt;/p&gt;

&lt;p&gt;However, I had to add property &quot;field&quot; to the configuration for this dictionary in order to obtain analyzer (which is passed to FieldSpellChecker). This analyzer is later used to extract tokens from the query.&lt;/p&gt;

&lt;p&gt;I guess my current solution is not quite correct (since PlainTextDictionary doesn&apos;t really need analyzer), but it also makes me wonder if in case of dictionary built from solr index, same analyzer should be used when building dictionary and parsing query strings?&lt;/p&gt;</comment>
                            <comment id="12597453" author="noble.paul" created="Fri, 16 May 2008 13:47:36 +0100"  >&lt;p&gt;Adding a &apos;field&apos; attribute is not intuitive. If your data needs custom analyzers create an extra &apos;type&apos; in the schema and let us dd an extra attribute &apos;dataType&apos;  eg:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dataType&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;my_new_data_type&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12597455" author="gsingers" created="Fri, 16 May 2008 13:50:59 +0100"  >&lt;p&gt;Patch applies cleanly.  Very cool that we have something concrete finally&lt;/p&gt;

&lt;p&gt;Some thoughts:&lt;br/&gt;
1. I don&apos;t believe we use author tags (is this a Solr policy?  I know it is a Lucene Java convention)&lt;br/&gt;
2. There needs to be unit tests&lt;br/&gt;
3. I think it makes sense to have the option to return extended results&lt;br/&gt;
4. I don&apos;t think it should be a default search component, but will defer to others.&lt;br/&gt;
5. numFound should be returned when count &amp;gt; 1 as well, right?  In other words, the structure should be the same for the response no matter what in:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (count &amp;gt; 1) {
        response.add(&lt;span class=&quot;code-quote&quot;&gt;&quot;suggestions&quot;&lt;/span&gt;, spellChecker.getSuggestions(q, count));
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        NamedList suggestions = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NamedList();
        suggestions.add(&lt;span class=&quot;code-quote&quot;&gt;&quot;numFound&quot;&lt;/span&gt;, 1);
        suggestions.add(q, spellChecker.getSuggestion(q));
        response.add(&lt;span class=&quot;code-quote&quot;&gt;&quot;suggestions&quot;&lt;/span&gt;, suggestions);
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That way it can be handled uniformly on the client&lt;/p&gt;</comment>
                            <comment id="12597466" author="bosmid" created="Fri, 16 May 2008 14:10:33 +0100"  >&lt;p&gt;The &quot;field&quot; attribute for file-based dictionary is basically the same &quot;field&quot; attribute as in default dictionary (in both cases they are used to obtain query analyzer), so that is the reason why I used the same name. My question was is it ok for default dictionary to use the same field to build dictionary from solr index and to obtain query analyzer for extracting tokens?&lt;/p&gt;</comment>
                            <comment id="12597472" author="shalinmangar" created="Fri, 16 May 2008 14:16:02 +0100"  >&lt;p&gt;Bojan &amp;#8211; Thanks for adding this functionality. I&apos;ll work on making things more configurable like SCRH and add a few tests. I think it is OK and may even be needed for a few cases. Though I prefer Noble&apos;s suggestion on having fieldType instead of field since it gives more freedom to the user.&lt;/p&gt;

&lt;p&gt;Grant &amp;#8211; Thanks for looking into the patch. My comments below:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Right, those were generated by my IDE, I&apos;ll remove it in the next patch&lt;/li&gt;
	&lt;li&gt;Agree&lt;/li&gt;
	&lt;li&gt;Agree, both 2 and 3 are on my todo list&lt;/li&gt;
	&lt;li&gt;I don&apos;t understand what you mean by &quot;defer to others&quot; but on making this default or not, I&apos;m fine either way.&lt;/li&gt;
	&lt;li&gt;Actually, the spellChecker.getSuggestion(q, count) returns a complete named list, which already has the numFound element. If you don&apos;t specify the count, then it gives back only a String for which we need to create a NamedList ourselves. In other words, the response format is actually the same both ways.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Noble &amp;#8211; I your suggestion on keeping a fieldType attribute in the configuration for non-Solr dictionaries. We can use the QueryAnalyzer defined for the given fieldType in Solr&apos;s schema. If this attribute is not present, we can default to WhitespaceAnalyzer or StandardAnalyzer.&lt;/p&gt;</comment>
                            <comment id="12597481" author="gsingers" created="Fri, 16 May 2008 14:55:45 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I don&apos;t understand what you mean by &quot;defer to others&quot; but on making this default or not, I&apos;m fine either way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just meaning, I&apos;m not the only one who has a say in whether or not is a default component.  My guess is not everyone will want it in the default list of components.&lt;/p&gt;

&lt;p&gt;Very cool on the other stuff.&lt;/p&gt;

&lt;p&gt;One other thing to think about:  What if we want a different underlying spell checker?  The Lucene spell checker approach isn&apos;t exactly state of the art as far as I understand it.  Obviously not your concern at the moment, but might be good to think about the ability to interchange the underlying implementation by abstracting the notion of spelling a bit while still maintaining the same search component interface. &lt;/p&gt;</comment>
                            <comment id="12597494" author="otis" created="Fri, 16 May 2008 15:43:11 +0100"  >&lt;p&gt;Grant - I agree it would be nice.  But let&apos;s get this one in first.  Perhaps you can add that idea to the list in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-507&quot; title=&quot;Spell Checking Improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-507&quot;&gt;&lt;del&gt;SOLR-507&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12597814" author="shalinmangar" created="Sun, 18 May 2008 16:07:25 +0100"  >&lt;p&gt;Grant - I was trying to implement the onlyMorePopular and extendedResults format of SCRH when I realized that supporting such a response is not possible for text file based dictionaries in the current implementation. Currently, we use Lucene&apos;s PlainTextDictionary to load such text files and we don&apos;t maintain any frequency information. What do you suggest?&lt;/p&gt;

&lt;p&gt;Bojan/Otis - The terms loaded from the text files are passed onto Lucene&apos;s SpellChecker as it is. As per Noble&apos;s suggestion, I&apos;ve added support for a optional fieldType attribute (this type must be defined in schema.xml). This type&apos;s query analyzer is used for queries. Wouldn&apos;t it be more consistent to apply the index-analyzer during index time also?&lt;/p&gt;

&lt;p&gt;Both the above problems can be solved if we keep the words loaded from the text files in a Lucene index but I&apos;m not sure if we want to go that way.&lt;/p&gt;</comment>
                            <comment id="12597816" author="otis" created="Sun, 18 May 2008 17:22:31 +0100"  >&lt;p&gt;Shalin&lt;br/&gt;
I think the onlyMorePopular and extendedResults should be optional, so in case of plain text dictionaries this information would just not be present if we cannot derive it.  Even if we take words from plain text files and index them into a Lucene index their frequency will remain 1.&lt;/p&gt;

&lt;p&gt;Does the index-time analyzer make sense?  I don&apos;t have the sources handy, but doesn&apos;t Lucene SC take the input word and chop it up into 2- and 3-grams before indexing?  If so, how would index-time analyzer come into play?&lt;/p&gt;

&lt;p&gt;In principal, if taking plain text files and indexing words in them into a Lucene SC index solves problems, I think that&apos;s acceptable - such indices are likely to be relatively small, so they should be quick to build and not require a lot of memory.&lt;/p&gt;
</comment>
                            <comment id="12597878" author="shalinmangar" created="Mon, 19 May 2008 07:39:35 +0100"  >&lt;p&gt;Ok, onlyMorePopular and extendedResults will only be supported for dictionaries built from Solr fields.&lt;/p&gt;

&lt;p&gt;Yes, the Lucene SpellChecker does create n-grams but think about lowercasing, stemming etc. All this analysis can potentially change the word which eventually gets n-grammed by Lucene.&lt;/p&gt;</comment>
                            <comment id="12597913" author="bosmid" created="Mon, 19 May 2008 11:44:02 +0100"  >&lt;p&gt;I would like to add support for different character encodings in file-based dictionaries (current implementation will take system&apos;s default settings). I&apos;m not sure how we&apos;ll synchronize your work with my fix? Can you let me know when/how can I start my work?&lt;/p&gt;</comment>
                            <comment id="12597914" author="shalinmangar" created="Mon, 19 May 2008 11:54:49 +0100"  >&lt;p&gt;A new patch containing the following changes:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;type=&quot;solr&quot; is now known as type=&quot;index&quot;&lt;/li&gt;
	&lt;li&gt;path is now called location&lt;/li&gt;
	&lt;li&gt;Relative paths are supported. They are loaded through SolrResourceLoader.openResource method.&lt;/li&gt;
	&lt;li&gt;Dictionaries can be built on arbitary Lucene indices&lt;/li&gt;
	&lt;li&gt;indexDir is now called spellcheckIndexDir to clearly highlight it&apos;s purpose&lt;/li&gt;
	&lt;li&gt;Dictionaries loaded from a text file can have a fieldType attribute. The analyzer of this fieldType is used at query time. If no fieldType is specified then WhitespaceAnalyzer is used.&lt;/li&gt;
	&lt;li&gt;For dictionaries loaded from a text file, if fieldType is specified then index-time analysis is done using the given fieldType&apos;s analyzer&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12597917" author="shalinmangar" created="Mon, 19 May 2008 12:00:05 +0100"  >&lt;p&gt;Bojan &amp;#8211; I don&apos;t want to hold you up so I&apos;ve uploaded the current state of my work. Please go ahead with your changes. I can continue after you&apos;re done.&lt;/p&gt;

&lt;p&gt;Another issue I noticed with the SCRH is that it accepts the accuracy as a request parameter and calls Lucene SpellChecker.setAccuracy before getting the suggestion. However, this is neither thread-safe nor can we guarantee that the accuracy is actually enforced for the suggestion. Therefore, I think we should only have accuracy configurable in the solrconfig.xml and not as a request parameter.&lt;/p&gt;</comment>
                            <comment id="12597930" author="bosmid" created="Mon, 19 May 2008 13:02:42 +0100"  >&lt;p&gt;Character encodings for file-based dictionaries now supported with property characterEncoding. So, configuration for such dictionary would look like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;external&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;file&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;sourceLocation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;spellings.txt&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;characterEncoding&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellcheckIndexDir &quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;c:\spellchecker&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;New code needs latest lucene-spellchecker-2.4*.jar from Lucene trunk.&lt;/p&gt;

&lt;p&gt;Since SolrResourceLoader.getLines method doesn&apos;t support configurable encodings (treats everything as UTF-8), I wasn&apos;t sure how to add that support. I could have added overloaded method to SolrResourceLoader, but there is a TODO comment, so I decided to create getLines() method inside SpellCheckComponent class instead. What do you think of this?&lt;/p&gt;</comment>
                            <comment id="12598533" author="oleg_gnatovskiy" created="Wed, 21 May 2008 02:03:15 +0100"  >&lt;p&gt;Hey guys I was just wondering if there is a way to get the suggestions not to echo the query if there are no suggestions available. For example, a query where q=food probably should not return a suggestion of &quot;food&quot;.&lt;/p&gt;</comment>
                            <comment id="12598549" author="shalinmangar" created="Wed, 21 May 2008 05:10:45 +0100"  >&lt;p&gt;Oleg &amp;#8211; Thanks for trying out the patch. No, currently it does not signal if suggestions are not found, it just returns the query terms themselves. I&apos;ll add that feature.&lt;/p&gt;</comment>
                            <comment id="12598716" author="oleg_gnatovskiy" created="Wed, 21 May 2008 18:08:55 +0100"  >&lt;p&gt;Hey guys, I am having trouble creating a file-based dictionary.&lt;/p&gt;

&lt;p&gt;The file looks like this: &lt;/p&gt;

&lt;p&gt;american&lt;br/&gt;
mexican&lt;br/&gt;
clothes&lt;br/&gt;
shoes&lt;/p&gt;

&lt;p&gt;and it is in my solr.home/conf directory.&lt;/p&gt;

&lt;p&gt;The solrConfig has the following: &amp;lt;searchComponent name=&quot;spellcheck&quot; class=&quot;org.apache.solr.handler.component.SpellCheckComponent&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;lst name=&quot;dictionary&quot;&amp;gt;&lt;br/&gt;
                &amp;lt;str name=&quot;name&quot;&amp;gt;external&amp;lt;/str&amp;gt;&lt;br/&gt;
                &amp;lt;str name=&quot;type&quot;&amp;gt;file&amp;lt;/str&amp;gt;&lt;br/&gt;
                &amp;lt;str name=&quot;sourceLocation&quot;&amp;gt;spellings.txt&amp;lt;/str&amp;gt;&lt;br/&gt;
                &amp;lt;str name=&quot;characterEncoding&quot;&amp;gt;UTF-8&amp;lt;/str&amp;gt;&lt;br/&gt;
                &amp;lt;str name=&quot;spellcheckIndexDir&quot;&amp;gt;/home/csweb/index&amp;lt;/str&amp;gt;&lt;br/&gt;
        &amp;lt;/lst&amp;gt;&lt;br/&gt;
  &amp;lt;/searchComponent&amp;gt;&lt;/p&gt;

&lt;p&gt;I hit it with the following URL: &lt;a href=&quot;http://localhost:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=external&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=external&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and I get the following stacktrace:&lt;/p&gt;

&lt;p&gt;SEVERE: java.lang.NullPointerException&lt;br/&gt;
        at org.apache.lucene.search.spell.SpellChecker.indexDictionary(SpellChecker.java:321)&lt;br/&gt;
        at org.apache.solr.handler.component.SpellCheckComponent$FieldSpellChecker.init(SpellCheckComponent.java:391)&lt;br/&gt;
        at org.apache.solr.handler.component.SpellCheckComponent.loadExternalFileDictionary(SpellCheckComponent.java:204)&lt;br/&gt;
        at org.apache.solr.handler.component.SpellCheckComponent.prepare(SpellCheckComponent.java:131)&lt;br/&gt;
        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:133)&lt;br/&gt;
        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:125)&lt;br/&gt;
        at org.apache.solr.core.SolrCore.execute(SolrCore.java:966)&lt;br/&gt;
        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:339)&lt;br/&gt;
        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:274)&lt;br/&gt;
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)&lt;br/&gt;
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)&lt;br/&gt;
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)&lt;br/&gt;
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)&lt;br/&gt;
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)&lt;br/&gt;
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)&lt;br/&gt;
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)&lt;br/&gt;
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)&lt;br/&gt;
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)&lt;br/&gt;
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)&lt;br/&gt;
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;


&lt;p&gt;Any idea what I am doing wrong? Thanks!&lt;/p&gt;</comment>
                            <comment id="12598727" author="otis" created="Wed, 21 May 2008 18:42:02 +0100"  >&lt;p&gt;Haven&apos;t looked at the code, but the first thing I&apos;d try is using a full/absolute path to your dictionary file.&lt;/p&gt;</comment>
                            <comment id="12598728" author="bosmid" created="Wed, 21 May 2008 18:43:17 +0100"  >&lt;p&gt;I already found the same problem, made a fix and sent it to Shalin, he will incorporate it into next patch when it&apos;s ready. If you specify field &quot;field type&quot; for that dictionary (and that field type can be found in Solr schema), you&apos;ll avoid the problem for now.&lt;/p&gt;</comment>
                            <comment id="12598733" author="otis" created="Wed, 21 May 2008 18:56:02 +0100"  >&lt;p&gt;Just got an idea.  File-based dictionaries don&apos;t have word frequency information and with that we use certain value (e.g. so onlyMorePopular cannot be used).  What if we (also) accepted plain-text field dictionaries that included word frequency information?&lt;br/&gt;
e.g.&lt;br/&gt;
ball,100&lt;br/&gt;
boil,44&lt;br/&gt;
bowl,77&lt;br/&gt;
...&lt;br/&gt;
I&apos;m not looking at sources now, but could we not feed this word frequency information into Lucene SC, so it makes use of that when figuring out top-N best words to suggest?&lt;/p&gt;

&lt;p&gt;And how would we figure out the frequency of each word to begin with?  I imagine we can have a tool/class that, given a path to a dictionary file with words and a path to a Lucene/Solr index, looks up each dictionary word&apos;s frequency in the given index and outputs &quot;&amp;lt;word&amp;gt;,&amp;lt;freq&amp;gt;&quot; for each word.  This class could live in Lucene SC, but could be used by SCRH when rebuilding the SC index for example.&lt;/p&gt;

&lt;p&gt;Does this sound useful and implementable?&lt;/p&gt;</comment>
                            <comment id="12598735" author="oleg_gnatovskiy" created="Wed, 21 May 2008 19:00:44 +0100"  >&lt;p&gt;Bojan, do you mean adding something like &amp;lt;str name=&quot;field&quot;&amp;gt;word&amp;lt;/str&amp;gt; to the definition for the file-based dictionary?&lt;/p&gt;</comment>
                            <comment id="12598738" author="bosmid" created="Wed, 21 May 2008 19:18:43 +0100"  >&lt;p&gt;Oleg, that field is now called fieldType, so something like &amp;lt;str name=&quot;fieldType&quot;&amp;gt;word&amp;lt;/str&amp;gt; should work for you as long as you have fileType with name word defined in your schema.xml. Let me know if this works.&lt;/p&gt;</comment>
                            <comment id="12598752" author="bosmid" created="Wed, 21 May 2008 20:04:30 +0100"  >&lt;p&gt;I noticed that when searching for suggestion for a word which exists in dictionary, SC returns some similar word instead of returning that same word. Old SCRH had field &quot;exist&quot; which returned true if word exists in the dictionary (so the client can treat it as correct word that doesn&apos;t need suggestion). &lt;/p&gt;

&lt;p&gt;We can&apos;t have exactly the same functionality here (since &quot;multi-word&quot; queries should be supported), but we can make SC return field &quot;spellingCorrect&quot; in case all words from the query exist in the dictionary. Otherwise, there is no way to know if spelling was correct or we should display suggestion.&lt;/p&gt;

&lt;p&gt;There is a method in Lucene&apos;s SC to check if word exists in the index, so it&apos;s easy to check if word is correct. However, I&apos;m also thinking of situation when we don&apos;t have just simple words in the query, for instance : &quot;toyata AND miles:&lt;span class=&quot;error&quot;&gt;&amp;#91;1 to 10000&amp;#93;&lt;/span&gt;&quot;, we want to check just toyata in the index, and return suggestion &quot;toyota AND miles:&lt;span class=&quot;error&quot;&gt;&amp;#91;1 to 10000&amp;#93;&lt;/span&gt;&quot;. Other query types which might pose a problem are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fuzzy query&lt;/li&gt;
	&lt;li&gt;wildcard query&lt;/li&gt;
	&lt;li&gt;prefix query&lt;br/&gt;
...&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12598801" author="oleg_gnatovskiy" created="Wed, 21 May 2008 22:43:36 +0100"  >&lt;p&gt;Yes, I&apos;ve actually run into that problem too. Do you think this is something that you will be able to solve?&lt;/p&gt;</comment>
                            <comment id="12598835" author="bosmid" created="Wed, 21 May 2008 23:42:25 +0100"  >&lt;p&gt;Sure. A quick fix can be done easily, but it probably wouldn&apos;t cover all possibilities, hence my post...&lt;/p&gt;</comment>
                            <comment id="12599166" author="gsingers" created="Thu, 22 May 2008 20:59:21 +0100"  >&lt;p&gt;OK, I&apos;m working on this.  &lt;/p&gt;

&lt;p&gt;Some thoughts:&lt;br/&gt;
1. Why is the initialization done in prepare?  Just to be a little more lazy than in init?&lt;/p&gt;

&lt;p&gt;2. In FieldSpellChecker, the getSuggestion method goes through and creates the suggested map, but then the loop over the entry set at the end only uses the value.   I think our response should return the associated correction with the original token. &lt;/p&gt;

&lt;p&gt;3. I&apos;m working on the abstraction notion.  The goal is to have a common response, no matter the spell checker, so that we can plug and play spell checkers.  I hope to have a patch soon.&lt;/p&gt;</comment>
                            <comment id="12599168" author="shalinmangar" created="Thu, 22 May 2008 21:10:34 +0100"  >&lt;p&gt;Grant, please hold on a bit. I&apos;m working on the patch too and it has some refactorings which may make merging two patches difficult. I&apos;ll post my patch in a few minutes and then you can take over.&lt;/p&gt;</comment>
                            <comment id="12599170" author="gsingers" created="Thu, 22 May 2008 21:13:00 +0100"  >&lt;p&gt;OK.  Kind of too late, but no worries, I will manage the merge, so just do what you think you need to do.&lt;/p&gt;
</comment>
                            <comment id="12599171" author="shalinmangar" created="Thu, 22 May 2008 21:18:46 +0100"  >&lt;p&gt;Grant &amp;#8211; please find my comments below:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;I had to move the init to prepare because there were issues in getting access to the IndexReader in inform() method. Please see &lt;a href=&quot;http://www.nabble.com/Accessing-IndexReader-during-core-initialization-hangs-init-to17259235.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Accessing-IndexReader-during-core-initialization-hangs-init-to17259235.html&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The first getSuggestion method aims to return a single suggestion string by combining suggestions for all tokens in the query. It&apos;s not perfect but seems to work. This is used when spellcheck.count is missing or one. The second suggestSimilar method returns suggestions for each token and associated suggestion.&lt;/li&gt;
	&lt;li&gt;That would be nice to have!&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12599195" author="shalinmangar" created="Thu, 22 May 2008 22:28:23 +0100"  >&lt;p&gt;This patch contains the following changes:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Fixes bug reported by Oleg &amp;#8211; Thanks to Bojan for this.&lt;/li&gt;
	&lt;li&gt;thresholdTokenFrequency can be used to tweak the frequency of tokens being passed to spell check index. This is applied only for index type dictionaries.&lt;/li&gt;
	&lt;li&gt;Moved getLines as an overloaded method to SolrResourceLoader.&lt;/li&gt;
	&lt;li&gt;To avoid having a dependency to Lucene 2.4 (trunk) code, I created a wrapper class for PlainTextDictionary which calls it&apos;s protected constructor PlainTextDictionary(Reader)&lt;/li&gt;
	&lt;li&gt;Uses Lucene&apos;s SpellChecker&apos;s overloaded suggestSimilar method which accepts the IndexReader as a param. This makes sure that when the query is present in the index, a different suggestion is not returned.&lt;/li&gt;
	&lt;li&gt;Implements the onlyMorePopular &lt;b&gt;only&lt;/b&gt; for dictionaries built from Solr fields&lt;/li&gt;
	&lt;li&gt;Implements the extendedResults &lt;b&gt;only&lt;/b&gt; for dictionaries built from Solr fields and only when spellcheck.count is greater than 1&lt;/li&gt;
	&lt;li&gt;No need to specify spellcheck.dictionary as a request parameter if only one dictionary is configured.&lt;/li&gt;
	&lt;li&gt;Accuracy is configurable through solrconfig.xml&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Still to do:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;It is possible to implement onlyMorePopular and extendedResults for dictionaries created from arbitary lucene indices too but I haven&apos;t looked into that yet.&lt;/li&gt;
	&lt;li&gt;Tests are missing&lt;/li&gt;
	&lt;li&gt;Add command to reload dictionaries&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12599202" author="shalinmangar" created="Thu, 22 May 2008 22:43:02 +0100"  >&lt;p&gt;Otis &amp;#8211; Sorry, I missed your post earlier. I can&apos;t think of a use-case for adding frequency information to plain text files. Spell checker&apos;s utility comes from the fact that it can suggest keywords for which Solr can return documents. That is possible only when the tokens (or synonyms) are present in the Solr index. Plain text dictionaries will be used to add additional common keywords which may not be in the Solr fields used for suggestions but may be present in huge fields which you don&apos;t want to add to spell checker. For example, I may build my index only on vehicle brands but I may like to include terms such as &quot;cars&quot;, &quot;manufacturer&quot;, &quot;make&quot; from plain text files, which may be present in my huge default search field. Since the intent would be just to match some document with the given suggestion, frequency may not play a significant role here, IMHO. What do you think?&lt;/p&gt;

&lt;p&gt;Bojan &amp;#8211; I think we should include an &quot;exists&quot; flag in the response. As for your point of queries with non-simple tokens, we can introduce another param like &quot;spellcheck.q&quot; to which the application can set the simple query. End users almost never know that Solr is running behind the scenes and the Solr queries are constructed by the application itself which can send the simple query in this way.&lt;/p&gt;</comment>
                            <comment id="12599222" author="otis" created="Thu, 22 May 2008 23:28:33 +0100"  >&lt;p&gt;Shalin &amp;#8211; I think you are right.  I looked at SpellChecker again and see that the frequency in the main/searchable index is checked at &quot;suggest time&quot;, regardless of what the source of dictionary words (index or file), so frequency will be accounted for even when words are loaded from plain-text dictionary files.&lt;/p&gt;

&lt;p&gt;Unless I&apos;m still missing something, that means that &quot;onlyMorePopular&quot; &lt;b&gt;can&lt;/b&gt; (or &lt;b&gt;should&lt;/b&gt;!) be used even when words are loaded from plain-text dictionary files.  No?&lt;/p&gt;</comment>
                            <comment id="12599403" author="gsingers" created="Fri, 23 May 2008 16:41:38 +0100"  >&lt;p&gt;Is the prepare thread-safe for dictionary creation?  Seems like there is a race-condition on the construction of the dictionaries.  I suppose we need a synchronize in there.&lt;/p&gt;</comment>
                            <comment id="12599412" author="shalinmangar" created="Fri, 23 May 2008 17:08:20 +0100"  >&lt;p&gt;Grant &amp;#8211; No, it is not thread-safe. Actually I wanted to put this initialization code in a inform method to avoid this situation. Since that did not work, I moved this into prepare method only as a stop gap arrangement. See &lt;a href=&quot;http://www.nabble.com/Accessing-IndexReader-during-core-initialization-hangs-init-to17259235.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Accessing-IndexReader-during-core-initialization-hangs-init-to17259235.html&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;I&apos;d suggest doing the following:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Move the initial dictionary creation into a inform method if someone with more knowledge about the SolrCore class can fix the issue I described in my mail.&lt;/li&gt;
	&lt;li&gt;The code in prepare can be used to reload dictionaries by specifying a request parameter (say spellcheck.rebuild=true)&lt;/li&gt;
	&lt;li&gt;Since we&apos;re already using a ConcurrentHashMap, the above two things should take care of all thread-safety issues.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12599426" author="gsingers" created="Fri, 23 May 2008 17:54:09 +0100"  >&lt;p&gt;Otis,&lt;/p&gt;

&lt;p&gt;What&apos;s the use case behind:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh, I see, you are reading field values from the index of the current core. I think that is fine, but wouldn&apos;t it also be good to be able to read field values from a vanilla Lucene index?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Seems kind of strange based on what I know of index-based spelling, but I don&apos;t know everything about it.&lt;/p&gt;</comment>
                            <comment id="12599475" author="gsingers" created="Fri, 23 May 2008 20:18:43 +0100"  >&lt;p&gt;WARNING:  This patch compiles &lt;em&gt;ONLY&lt;/em&gt;.  I do NOT claim it is semantically equivalent to the earlier patches although that is my goal and I don&apos;t think I am far off.  I have not tested it in any way, shape or form.  I am only putting it up here as a first cut of the abstractions I have in mind, so please provide feedback based on that, especially in regards to the SolrSpellChecker class.  Most interesting, there, is the passing in of the IndexReader.  I know not all spellers are going to need the IndexReader, so ideally, it would be something that is passed in or set during the construction of the speller, but I don&apos;t think that will work, or at least I am not aware of how to make it work just yet.  &lt;/p&gt;

&lt;p&gt;My next step is to add unit tests of the individual spell checkers and then the component itself.&lt;/p&gt;</comment>
                            <comment id="12599476" author="gsingers" created="Fri, 23 May 2008 20:21:45 +0100"  >&lt;p&gt;Move spelling core classes out of component package into it&apos;s own package, similar to highlighting, as spelling is just as important.  Same caveats as last patch apply.&lt;/p&gt;</comment>
                            <comment id="12599478" author="gsingers" created="Fri, 23 May 2008 20:25:18 +0100"  >&lt;p&gt;Also included in that last patch is a (proposed) sample configuration:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;searchComponent name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellcheck&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.handler.component.SpellCheckComponent&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellchecker&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;classname&quot;&lt;/span&gt;&amp;gt;org.apache.solr.spelling.IndexBasedSpellChecker&amp;lt;/str&amp;gt;
        &amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;&amp;gt;
          &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&amp;lt;/str&amp;gt;
          &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;field&quot;&lt;/span&gt;&amp;gt;word&amp;lt;/str&amp;gt;
          &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;indexDir&quot;&lt;/span&gt;&amp;gt;c:/temp/spellindex&amp;lt;/str&amp;gt;
        &amp;lt;/lst&amp;gt;
    &amp;lt;/lst&amp;gt;
    &amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellchecker&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;classname&quot;&lt;/span&gt;&amp;gt;org.apache.solr.spelling.FileBasedSpellChecker&amp;lt;/str&amp;gt;
      &amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;external&amp;lt;/str&amp;gt;
        &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;sourceLocation&quot;&lt;/span&gt;&amp;gt;spellings.txt&amp;lt;/str&amp;gt;
        &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;characterEncoding&quot;&lt;/span&gt;&amp;gt;UTF-8&amp;lt;/str&amp;gt;
        &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellcheckIndexDir &quot;&lt;/span&gt;&amp;gt;./spellchecker&amp;lt;/str&amp;gt;
      &amp;lt;/lst&amp;gt;

    &amp;lt;/lst&amp;gt;


  &amp;lt;/searchComponent&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12599494" author="otis" created="Fri, 23 May 2008 21:22:20 +0100"  >&lt;p&gt;I&apos;m still confused with some of the names in that config.&lt;br/&gt;
indexDir looks like the path to the spellchecker index.  But there is also spellcheckInexDir.  Is there a functonal difference?&lt;/p&gt;

&lt;p&gt;Regarding the &quot;wouldn&apos;t it also be good to be able to read field values from a vanilla Lucene index?&quot; - the use case is that not all source indices should have to be Solr indices.  What if I have a vanilla Lucene index on the machine and I want the SCRH to build a SC index from that index&apos;s &quot;title&quot; field?  That is, I want the functionality of SCRH, but I don&apos;t have my Lucene index under Solr.  Is that doable?&lt;/p&gt;</comment>
                            <comment id="12599496" author="gsingers" created="Fri, 23 May 2008 21:26:17 +0100"  >&lt;blockquote&gt;
&lt;p&gt;indexDir looks like the path to the spellchecker index. But there is also spellcheckInexDir. Is there a functonal difference?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good point, I fix that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is that doable?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course it is, I just didn&apos;t know why you would want to.  I get the file based need, b/c that is where you can put overrides, but I just don&apos;t get the need for another index, since wouldn&apos;t it have to have the same frequencies, etc. to return appropriate suggestions?  &lt;/p&gt;</comment>
                            <comment id="12599498" author="otis" created="Fri, 23 May 2008 21:34:11 +0100"  >&lt;p&gt;I think the choice of &quot;appropriate suggestions&quot; should be left to the user of this service.  If it&apos;s easily doable, let&apos;s make it possible and put information about frequencies in an appropriate place.&lt;/p&gt;</comment>
                            <comment id="12599558" author="otis" created="Sat, 24 May 2008 04:56:58 +0100"  >&lt;p&gt;Shalin/Grant:&lt;/p&gt;

&lt;p&gt;I think Bojan brings up some good questions:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-572?focusedCommentId=12598752#action_12598752&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/SOLR-572?focusedCommentId=12598752#action_12598752&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like the call to SpellChecker.exist(...) really got lost:&lt;br/&gt;
$ curl --silent &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12382691/SOLR-572.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12382691/SOLR-572.patch&lt;/a&gt; | grep &apos;exist(&apos;&lt;/p&gt;</comment>
                            <comment id="12599832" author="gsingers" created="Mon, 26 May 2008 13:39:53 +0100"  >&lt;p&gt;OK, this has some tests for the individual spell checkers.  Still haven&apos;t tested starting it up as an individual component in Solr.&lt;/p&gt;

&lt;p&gt;Also, still needs a way to account for when the returned suggestion is the same word, thus indicating the word exists in the index.&lt;/p&gt;</comment>
                            <comment id="12599833" author="gsingers" created="Mon, 26 May 2008 13:40:34 +0100"  >&lt;p&gt;Good stuff, but it ain&apos;t &quot;Major&quot;&lt;/p&gt;</comment>
                            <comment id="12599845" author="shalinmangar" created="Mon, 26 May 2008 15:18:48 +0100"  >&lt;p&gt;I have a few comments after a quick look at the patch&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Lets make SolrSpellChecker keep the standard init method structure akin to NamedListInitializedPlugin. Let the build method return the dictionary name. In the current patch, even if build fails, the spell checker would get added to the map.&lt;/li&gt;
	&lt;li&gt;I couldn&apos;t find where the SolrSpellChecker#build method is actually called apart from the tests.&lt;/li&gt;
	&lt;li&gt;Lets remove the SolrSpellChecker#getSuggestion(String query, IndexReader reader, boolean onlyMorePopular) method completely. The other getSuggestion method will be called with count=1 if count is absent in the query.&lt;/li&gt;
	&lt;li&gt;Rename AbstractLuceneSpellerSpellChecker to something shorter.&lt;/li&gt;
	&lt;li&gt;I would very much like to keep short names instead of complete class names. We should not force the user to remember or copy-paste our long internal class names just because we wanted to keep things pluggable. Sane defaults maybe?&lt;/li&gt;
	&lt;li&gt;The configuration looks scary. There&apos;s no value added by the repeated spellchecker nodes. I propose the following syntax:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;searchComponent name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellcheck&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.handler.component.SpellCheckComponent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;&amp;lt;!-- Optional, it is required when more than one dictionary is configured --&amp;gt;&lt;/span&gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;default&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;&amp;lt;!-- The type is optional, defaults to IndexBasedSpellChecker --&amp;gt;&lt;/span&gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.solr.spelling.IndexBasedSpellChecker&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;&amp;lt;!-- Optional, if present, the following lucene index is used as source instead of Solr index  --&amp;gt;&lt;/span&gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;sourceLocation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;c:/temp/myluceneindex&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &amp;lt;!--
	       Load tokens from the following field for spell checking, 
	       analyzer for the field&apos;s type as defined in schema.xml are used
	  --&amp;gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;field&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;word&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;&amp;lt;!-- Optional, by default use in-memory index (RAMDirectory) --&amp;gt;&lt;/span&gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellCheckIndexDir&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;c:/temp/spellindex&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;external&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.solr.spelling.FileBasedSpellChecker&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;sourceLocation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;spellings.txt&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &amp;lt;!--
	       Optional, if provided the analyzers for the given fieldType would be used.
	       Otherwise, no analyzer at index-time and WhiteSpaceAnalyzer at query time is used.
	       This fieldType should be defined in schema.xml
	   --&amp;gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;fieldType&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;text&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;&amp;lt;!-- Optional, defaults to platform encoding --&amp;gt;&lt;/span&gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;characterEncoding&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellcheckIndexDir&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;./spellchecker&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/searchComponent&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Last but not the least, Grant, do you know of a freely available spell checker implementation that someone may want to plugin instead of the Lucene SpellChecker? In other words, is this a real use-case or something we&apos;re imagining up? If we don&apos;t know of something that can be used right now, maybe we&apos;re better off postponing this change until users really need it and ask for it. I don&apos;t like the complexity this feature is asking for.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12599852" author="gsingers" created="Mon, 26 May 2008 16:04:39 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Lets make SolrSpellChecker keep the standard init method structure akin to NamedListInitializedPlugin. Let the build method return the dictionary name. In the current patch, even if build fails, the spell checker would get added to the map.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The approach is to then use the build in the prepare method, much like the cmd=rebuild.  Thus, spelling index creation is much like in the RequestHandler mode and gets around the firstSearcher issue.  I am working on the integration into the Component at the moment, which is why you only see it in the tests.&lt;/p&gt;

&lt;p&gt;So, I am not sure if this makes sense.  Right now, I have it so that we extract the necessary pieces in the init, but then they are applied during build.  I guess the question is what should happen if &quot;build&quot; fails?  Should we just remove that speller and log a warning?  Or should it throw an exception?  I am leaning towards the former.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rename AbstractLuceneSpellerSpellChecker to something shorter.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;OK, I will try to think of something.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lets remove the SolrSpellChecker#getSuggestion(String query, IndexReader reader, boolean onlyMorePopular) method completely. The other getSuggestion method will be called with count=1 if count is absent in the query.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I was just thinking the same thing.  Done.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The configuration looks scary. There&apos;s no value added by the repeated spellchecker nodes. I propose the following syntax:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;All Solr config&apos;s look scary to me! However...&lt;/p&gt;

&lt;p&gt;I can imagine an implementation that looks like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellchecker&quot;&lt;/span&gt;&amp;gt;
 &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;classname&quot;&lt;/span&gt;&amp;gt;my.great.SpellChecker&amp;lt;/str&amp;gt;
&amp;lt;/lst&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I agree, however, we can flatten mine one level, but keep the name spellchecker instead of dictionary.  &lt;/p&gt;

&lt;p&gt;Here&apos;s an iteration:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;searchComponent name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellcheck&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.handler.component.SpellCheckComponent&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;defaults&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;!-- omp = Only More Popular --&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;sc.omp&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&amp;lt;/str&amp;gt;
      &amp;lt;!-- exr = Extended Results --&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;sc.exr&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&amp;lt;/str&amp;gt;
      &amp;lt;!--  The number of suggestions to &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; --&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;sc.cnt&quot;&lt;/span&gt;&amp;gt;1&amp;lt;/str&amp;gt;
    &amp;lt;/lst&amp;gt;
    &amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellchecker&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;classname&quot;&lt;/span&gt;&amp;gt;org.apache.solr.spelling.IndexBasedSpellChecker&amp;lt;/str&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;&amp;lt;/str&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;field&quot;&lt;/span&gt;&amp;gt;text&amp;lt;/str&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;indexDir&quot;&lt;/span&gt;&amp;gt;c:/temp/spellindex&amp;lt;/str&amp;gt;
      
    &amp;lt;/lst&amp;gt;
    &amp;lt;lst name=&lt;span class=&quot;code-quote&quot;&gt;&quot;spellchecker&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;classname&quot;&lt;/span&gt;&amp;gt;org.apache.solr.spelling.FileBasedSpellChecker&amp;lt;/str&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;external&amp;lt;/str&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;sourceLocation&quot;&lt;/span&gt;&amp;gt;spellings.txt&amp;lt;/str&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;characterEncoding&quot;&lt;/span&gt;&amp;gt;UTF-8&amp;lt;/str&amp;gt;
      &amp;lt;str name=&lt;span class=&quot;code-quote&quot;&gt;&quot;indexDir&quot;&lt;/span&gt;&amp;gt;./spellchecker&amp;lt;/str&amp;gt;
    &amp;lt;/lst&amp;gt;
  &amp;lt;/searchComponent&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Last but not the least, Grant, do you know of a freely available spell checker implementation that someone may want to plugin instead of the Lucene SpellChecker? In other words, is this a real use-case or something we&apos;re imagining up? If we don&apos;t know of something that can be used right now, maybe we&apos;re better off postponing this change until users really need it and ask for it. I don&apos;t like the complexity this feature is asking for.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I have an immediate need for it.  The Lucene SpellChecker isn&apos;t all that good, IMO, and I want to offer something different without having to fork and have my own SpellChecker Component when the output is the same.   &lt;/p&gt;</comment>
                            <comment id="12599853" author="gsingers" created="Mon, 26 May 2008 16:15:13 +0100"  >&lt;p&gt;If this is a default component, how do you setup the field to be used for spelling?  Are you just using the default search field?  &lt;br/&gt;
Also, I don&apos;t think we should make it default, since there is this minor nit that it requires building the index first.  I suppose that could be done on the first time spellings are requested, but that seems like it could all of a sudden cause a much longer return.  By making it non-default, I think it forces the person doing the configuration to think more about the setup, since the setup of proper spelling is not trivial.&lt;/p&gt;</comment>
                            <comment id="12599865" author="otis" created="Mon, 26 May 2008 17:17:35 +0100"  >&lt;p&gt;Grant, which spellchecker are you plugging in?&lt;/p&gt;</comment>
                            <comment id="12599939" author="gsingers" created="Tue, 27 May 2008 02:10:52 +0100"  >&lt;p&gt;More tests, slight reworking of how response gets generated by using SpellingResult so that we can enforce a contract with whatever implementation of the SolrSpellChecker we have (NamedList is just too weakly typed to be effective for this.)&lt;/p&gt;

&lt;p&gt;Incorporated suggestions from Shalin on configuration and other pieces. &lt;/p&gt;

&lt;p&gt;TODO: more tests, Add easy to find &quot;exists&quot; functionality when the suggestion is the same as the token.  &lt;/p&gt;

&lt;p&gt;Getting closer to something to commit.&lt;/p&gt;</comment>
                            <comment id="12600059" author="shalinmangar" created="Tue, 27 May 2008 08:39:39 +0100"  >&lt;p&gt;The configuration looks fine Grant. Yes, we don&apos;t need this as default. Default search fields are usually large, we don&apos;t need that overhead by default. The user can always enable and configure this when he needs it. Maybe we should add the sample configuration as a commented section in solrconfig.xml&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;We should change the query parameter to long names so that their purpose is easily understood. Names like &quot;sc.omp&quot; and &quot;sc.exr&quot; seem cryptic&lt;/li&gt;
	&lt;li&gt;We don&apos;t need the rebuild command since build and rebuild both do the same thing.&lt;/li&gt;
	&lt;li&gt;Add a optional spellcheck.q request parameter for passing in simple queries (to avoid the problem that Bojan pointed out)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll give a patch shortly after making the above changes. Will also try to look into adding exists feature.&lt;/p&gt;</comment>
                            <comment id="12600065" author="bosmid" created="Tue, 27 May 2008 09:16:38 +0100"  >&lt;p&gt;Shalin, I&apos;m not sure we really need spellcheck.q parameter. I think we should handle all queries in a similar way (both complex and simple queries): &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Break each query into terms, and then for each term check if it was correctly spelled (with spellchecker.exist()). Some term types should be excluded from spell checking (range terms and other types I mentioned in the post above).&lt;/li&gt;
	&lt;li&gt;If all terms (which can be spell checked) in a query are correctly spelled, we put a flag correctlySpelled = true in the response, otherwise we put the flag to false and return suggestion (we change only terms for which spechecker.exist() returned false).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What do you think of that?&lt;/p&gt;</comment>
                            <comment id="12600068" author="shalinmangar" created="Tue, 27 May 2008 10:05:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;Break each query into terms, and then for each term check if it was correctly spelled (with spellchecker.exist()). Some term types should be excluded from spell checking (range terms and other types I mentioned in the post above).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We should not try to do intelligent things which the user can easily do. It&apos;s difficult to extract terms which represent range terms, wildcards, fuzzy queries and boolean operators. We will need a parser to identify and remove these things correctly from the query which is not something we should be doing. Since the user always builds the q parameter, he can also build the spellcheck.q parameter if he chooses to do so.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If all terms (which can be spell checked) in a query are correctly spelled, we put a flag correctlySpelled = true in the response, otherwise we put the flag to false and return suggestion (we change only terms for which spechecker.exist() returned false).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed&lt;/p&gt;</comment>
                            <comment id="12600088" author="gsingers" created="Tue, 27 May 2008 12:32:50 +0100"  >

&lt;p&gt;Yeah, I was torn on this one, and am fine either way.  Most of Solr&apos;s  &lt;br/&gt;
existing params are quite short and cryptic.  I guess it is trying to  &lt;br/&gt;
prevent the GET buffer length problem (does that still exist?), but I  &lt;br/&gt;
don&apos;t know.&lt;/p&gt;


&lt;p&gt;I was just trying to keep some common ground w/ the ReqHandler  &lt;br/&gt;
version, which uses rebuild, but I agree build is shorter and you  &lt;br/&gt;
can&apos;t rebuild something until you build it, right?&lt;/p&gt;



&lt;p&gt;Not sure I follow here, but I&apos;ll wait for your patch.&lt;/p&gt;







</comment>
                            <comment id="12600111" author="otis" created="Tue, 27 May 2008 13:32:56 +0100"  >&lt;p&gt;Yes, the GET length limit is still with us, but it&apos;s 2K+ chars.  Here is info about IE7 and friends, for example: &lt;a href=&quot;http://support.microsoft.com/kb/208427&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://support.microsoft.com/kb/208427&lt;/a&gt;&lt;br/&gt;
So I think we still have room a bit of room there.&lt;/p&gt;</comment>
                            <comment id="12600131" author="shalinmangar" created="Tue, 27 May 2008 15:06:49 +0100"  >&lt;p&gt;Changes:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Changed request parameters to use long names&lt;/li&gt;
	&lt;li&gt;Removed the command syntax. Params are spellcheck.build=true or spellcheck.reload=true&lt;/li&gt;
	&lt;li&gt;Uses spellcheck.q if present, otherwise q parameter&lt;/li&gt;
	&lt;li&gt;Return correctlySpelled=true in result if all tokens in the input query are present in the index. Added a simple test for this change.&lt;/li&gt;
	&lt;li&gt;Renamed indexDir in config to spellcheckIndexDir for clarity&lt;/li&gt;
	&lt;li&gt;Updated SpellCheckComponentTest and test solrconfig.xml for the above changes&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12600178" author="gsingers" created="Tue, 27 May 2008 17:25:09 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Return correctlySpelled=true in result if all tokens in the input query are present in the index. Added a simple test for this change.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If I&apos;m reading the code right, this only can be set if extendedResults is true since this is the only time there will be frequency information, yet, I believe with the upgrade to the latest Lucene spell checker that it now returns the original word as a suggestion if it is correctly spelled.&lt;/p&gt;


&lt;p&gt;Rest of changes look good.&lt;/p&gt;</comment>
                            <comment id="12600180" author="gsingers" created="Tue, 27 May 2008 17:26:02 +0100"  >&lt;p&gt;Some more tests for various edge cases on the Index based Speller.&lt;/p&gt;</comment>
                            <comment id="12600217" author="oleg_gnatovskiy" created="Tue, 27 May 2008 18:47:29 +0100"  >&lt;p&gt;Did you guys change the required URL parameters structure? I am hitting the following URL: &lt;a href=&quot;http://localhost:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=default&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=default&lt;/a&gt; and I am getting a nullpointer exception. The config is the one from the sample, and I am using the latest patch.&lt;/p&gt;</comment>
                            <comment id="12600222" author="gsingers" created="Tue, 27 May 2008 19:04:02 +0100"  >&lt;p&gt;Did you issue a build command first?   Note, I haven&apos;t yet fully  &lt;br/&gt;
tested in the Solr container, have been more focused on individual  &lt;br/&gt;
unit tests.&lt;/p&gt;

&lt;p&gt;Also, what&apos;s the NPE you are getting?&lt;/p&gt;




</comment>
                            <comment id="12600269" author="otis" created="Tue, 27 May 2008 21:43:59 +0100"  >&lt;p&gt;I haven&apos;t applied/tried the latest patch yet, but maybe it&apos;s&lt;br/&gt;
quicker/better to ask here.  I&apos;m wondering/worried about the case&lt;br/&gt;
where the input is a multi-term query string and a subset (e.g. 2 of 5&lt;br/&gt;
terms) of the query terms is misspelled.&lt;/p&gt;

&lt;p&gt;For example, what happens when the query is:&lt;/p&gt;

&lt;p&gt;&quot;london brigge is fallinge down&quot;&lt;br/&gt;
(my 2 year old&apos;s current hit)&lt;/p&gt;

&lt;p&gt;In this case the suggestions should be:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;brigge =&amp;gt; bridge&lt;/li&gt;
	&lt;li&gt;fallinge =&amp;gt; falling (or fall, more likely)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Is there something in the response that will allow the client to&lt;br/&gt;
figure out the positioning of the spelling suggestions and piece&lt;br/&gt;
together the ideal alternative query, in this case &quot;london bridge is&lt;br/&gt;
falling/fall down&quot;?&lt;/p&gt;

&lt;p&gt;Ideally, the client could piece the new query string, so that it can, for example, italicize the misspelled words (see Google&apos;s DYM).  If the current SCRH returns the final corrected string, e.g. &quot;london bridge is falling down&quot; the client has no easy/accurate way of figuring out what was changed, I think.  If the SCRH returned some mark-up that told the client which word(s) changed, then the client could do something with those changed words, e.g. &quot;london bridge&lt;/p&gt;
{was:brigge}
&lt;p&gt;....&quot;&lt;/p&gt;

&lt;p&gt;Or, if that has problems, maybe each word should be returned separately and sequentially:&lt;/p&gt;

&lt;p&gt;&amp;lt;word=&quot;london&quot;/&amp;gt; &amp;lt;!-- unchanged --&amp;gt;&lt;br/&gt;
&amp;lt;word=&quot;brigge&quot;&amp;gt;bridge&amp;lt;/word&amp;gt;&lt;/p&gt;

&lt;p&gt;or maybe with offset info:&lt;/p&gt;

&lt;p&gt;&amp;lt;word=&quot;london&quot; offset=&quot;0&quot;/&amp;gt; &amp;lt;!-- unchanged --&amp;gt;&lt;br/&gt;
&amp;lt;word=&quot;brigge&quot; offset=&quot;6&quot;&amp;gt;bridge&amp;lt;/word&amp;gt;&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12600272" author="oleg_gnatovskiy" created="Tue, 27 May 2008 21:53:08 +0100"  >&lt;p&gt;Hello. I am hitting &lt;a href=&quot;http://localhost:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=default&amp;amp;spellcheck.build=true&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=default&amp;amp;spellcheck.build=true&lt;/a&gt; when trying to build the dictionary. My config looks this this: &lt;br/&gt;
&amp;lt;searchComponent name=&quot;spellcheck&quot; class=&quot;org.apache.solr.handler.component.SpellCheckComponent&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;lst name=&quot;defaults&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;!-- omp = Only More Popular --&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;spellcheck.onlyMorePopular&quot;&amp;gt;false&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;!-- exr = Extended Results --&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;spellcheck.extendedResults&quot;&amp;gt;false&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;!--  The number of suggestions to return --&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;spellcheck.count&quot;&amp;gt;1&amp;lt;/str&amp;gt;&lt;br/&gt;
    &amp;lt;/lst&amp;gt;&lt;br/&gt;
    &amp;lt;lst name=&quot;spellchecker&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;classname&quot;&amp;gt;org.apache.solr.spelling.IndexBasedSpellChecker&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;name&quot;&amp;gt;default&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;fieldType&quot;&amp;gt;text_ws&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;indexDir&quot;&amp;gt;/usr/local/apache/lucene/solr1home/solr/data/spellchecker&amp;lt;/str&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;/lst&amp;gt;&lt;br/&gt;
    &amp;lt;lst name=&quot;spellchecker&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;classname&quot;&amp;gt;org.apache.solr.spelling.FileBasedSpellChecker&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;name&quot;&amp;gt;external&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;sourceLocation&quot;&amp;gt;spellings.txt&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;fieldType&quot;&amp;gt;text_ws&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;characterEncoding&quot;&amp;gt;UTF-8&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;indexDir&quot;&amp;gt;/usr/local/apache/lucene/solr1home/solr/data/spellchecker&amp;lt;/str&amp;gt;&lt;br/&gt;
    &amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/searchComponent&amp;gt;&lt;/p&gt;


&lt;p&gt;And the NPE is:&lt;/p&gt;

&lt;p&gt;SEVERE: java.lang.NullPointerException&lt;br/&gt;
        at org.apache.solr.util.HighFrequencyDictionary.&amp;lt;init&amp;gt;(HighFrequencyDictionary.java:48)&lt;br/&gt;
        at org.apache.solr.spelling.IndexBasedSpellChecker.loadLuceneDictionary(IndexBasedSpellChecker.java:103)&lt;br/&gt;
        at org.apache.solr.spelling.IndexBasedSpellChecker.build(IndexBasedSpellChecker.java:84)&lt;br/&gt;
        at org.apache.solr.handler.component.SpellCheckComponent.prepare(SpellCheckComponent.java:133)&lt;br/&gt;
        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:132)&lt;br/&gt;
        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:125)&lt;br/&gt;
        at org.apache.solr.core.SolrCore.execute(SolrCore.java:965)&lt;br/&gt;
        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:339)&lt;br/&gt;
        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:274)&lt;br/&gt;
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)&lt;br/&gt;
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)&lt;br/&gt;
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)&lt;br/&gt;
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)&lt;br/&gt;
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)&lt;br/&gt;
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)&lt;br/&gt;
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)&lt;br/&gt;
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)&lt;br/&gt;
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)&lt;br/&gt;
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)&lt;br/&gt;
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;</comment>
                            <comment id="12600275" author="gsingers" created="Tue, 27 May 2008 22:00:00 +0100"  >&lt;p&gt;I&apos;m working on it.  Will have a new patch soon.&lt;/p&gt;





</comment>
                            <comment id="12600277" author="oleg_gnatovskiy" created="Tue, 27 May 2008 22:06:41 +0100"  >&lt;p&gt;Is it an actual error, or was I missing something?&lt;/p&gt;</comment>
                            <comment id="12600279" author="oleg_gnatovskiy" created="Tue, 27 May 2008 22:08:29 +0100"  >&lt;p&gt;In response to Otis, I don&apos;t think each word should be returned individually. In fact it should probably return the entire phrase, with the suggestions inserted. I believe that is what google does. Although I guess if the words are returned sequentially, you can easily reform the phrase, so that works too...&lt;/p&gt;</comment>
                            <comment id="12600283" author="gsingers" created="Tue, 27 May 2008 22:32:00 +0100"  >


&lt;p&gt;All you see from Googs is their frontend, so who knows what their  &lt;br/&gt;
spell checker does.  I think we should return the words individually,  &lt;br/&gt;
the application is responsible for doing the sewing together of the  &lt;br/&gt;
new string, IMO.&lt;/p&gt;


</comment>
                            <comment id="12600284" author="oleg_gnatovskiy" created="Tue, 27 May 2008 22:36:54 +0100"  >&lt;p&gt;Should we return suggestions only for the misspelled words, or should we echo the correctly spelled ones as well?&lt;/p&gt;</comment>
                            <comment id="12600294" author="otis" created="Tue, 27 May 2008 23:28:38 +0100"  >&lt;p&gt;Right, Google only shows you the final output, not what they do in the backend.&lt;br/&gt;
But the fact that they italicize misspelled words tells us they have a mechanism that allows the front end to identify them.&lt;br/&gt;
So I think our task here is to figure out the best/easiest way for the client to identify misspelled words and offer the alternative query to the end user.&lt;/p&gt;

&lt;p&gt;I think what I outlined above will do that for us:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;output all words sequentially&lt;/li&gt;
	&lt;li&gt;mark the words that are misspelled - it may be best to return the original word plus corrected word:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;lt;word=&quot;london&quot;/&amp;gt; &amp;lt;!-- unchanged --&amp;gt;&lt;br/&gt;
&amp;lt;word=&quot;brigge&quot;&amp;gt;bridge&amp;lt;/word&amp;gt;&lt;/p&gt;

&lt;p&gt;or maybe with offset info:&lt;/p&gt;

&lt;p&gt;&amp;lt;word=&quot;london&quot; offset=&quot;0&quot;/&amp;gt; &amp;lt;!-- unchanged --&amp;gt;&lt;br/&gt;
&amp;lt;word=&quot;brigge&quot; offset=&quot;6&quot;&amp;gt;bridge&amp;lt;/word&amp;gt;&lt;/p&gt;

&lt;p&gt;It&apos;s also fine to (&lt;b&gt;also&lt;/b&gt;) return the final corrected string that doesn&apos;t mark the corrected words in any way, and let the &quot;lazy&quot; clients just use that.&lt;/p&gt;

&lt;p&gt;Grant or Shalin, will either of you be adding this?&lt;/p&gt;</comment>
                            <comment id="12600320" author="gsingers" created="Wed, 28 May 2008 01:17:46 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Grant or Shalin, will either of you be adding this?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I am working on it.&lt;/p&gt;</comment>
                            <comment id="12600323" author="oleg_gnatovskiy" created="Wed, 28 May 2008 01:23:54 +0100"  >&lt;p&gt;I am still confused about my NPE. Was that a config issue on my part, or was it a bug? The way Grant said he was working on it, I assumed that it was a bug &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12600326" author="gsingers" created="Wed, 28 May 2008 01:51:49 +0100"  >&lt;p&gt;Your &quot;field&quot; is null for your Lucene configuration.  You need to  &lt;br/&gt;
specify:&lt;/p&gt;

&lt;p&gt;&amp;lt;str name=&quot;field&quot;&amp;gt;fieldName&amp;lt;/str&amp;gt;&lt;/p&gt;

&lt;p&gt;You have fieldType instead.&lt;/p&gt;

&lt;p&gt;-Grant&lt;/p&gt;


</comment>
                            <comment id="12600457" author="gsingers" created="Wed, 28 May 2008 13:44:22 +0100"  >&lt;p&gt;OK, here&apos;s a start on the token stuff.  &lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;em&gt;NOTE:  This currently does not work!!!!!!!!  The tests do not pass and I haven&apos;t fully implemented the SpellingQueryConverter.  I have a few other things to attend to for a couple of days, so I wanted to get this up there as a starting point for others to look at and give comments on the approach for when I can get back to it in a day or two (but feel free to take it up, too).&lt;/em&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The basic gist of it is to hand off analysis to a pluggable piece called the SpellingQueryConverter, which produces a collection of Tokens (which contain offsets into the original query String).&lt;/p&gt;

&lt;p&gt;I&apos;m still torn on how to best achieve this.  In some sense, there has to be some interaction with some form of a Query Parser.  I think it needs to be a Query Parser that has the source field&apos;s Analyzer as the Analyzer for doing the parsing.  This way, the output Query is properly analyzed and we can then extract just those &quot;spellcheckable&quot; terms from it (i.e. TermQuery, PhraseQuery, ????)&lt;/p&gt;

&lt;p&gt;Does this make sense?&lt;/p&gt;</comment>
                            <comment id="12600515" author="gsingers" created="Wed, 28 May 2008 16:46:28 +0100"  >&lt;p&gt;OK, I changed the SpellingQueryConverter to not be dependent on the Query, instead opting for a simple regex approach.  It is by no means perfect, but I think it is an improvement.  All the tests now pass.  See the test solrconfig for how to configure.&lt;/p&gt;

&lt;p&gt;This time, I mean it, I won&apos;t be working on this for a couple of days more or less, depending on other tasks &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12600520" author="shalinmangar" created="Wed, 28 May 2008 17:12:22 +0100"  >&lt;p&gt;Grant, unless I&apos;m mistaken, the reason to add spellcheck.q parameter was to avoid the tedious query parsing logic that may be needed to extract &quot;spellcheckable&quot; terms from the q parameter. Do we really need to do this? All the extra things in the q parameter are usually added by the frontend itself, isn&apos;t it?&lt;/p&gt;</comment>
                            <comment id="12600524" author="gsingers" created="Wed, 28 May 2008 17:38:34 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Grant, unless I&apos;m mistaken, the reason to add spellcheck.q parameter was to avoid the tedious query parsing logic that may be needed to extract &quot;spellcheckable&quot; terms from the q parameter. Do we really need to do this? All the extra things in the q parameter are usually added by the frontend itself, isn&apos;t it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is that practical?  How would an application even know how to generate spellcheck.q without parsing, etc.?   I think the component should just work on the input query.  I guess I hadn&apos;t really thought about the need for spellcheck.q before, but now that you put it in that light, I am not sure I see the need for it.    &lt;/p&gt;

&lt;p&gt;I don&apos;t think all the extra things are necessarily added by the application.  Users can input range queries, etc.  The point is, it all depends on the application.&lt;/p&gt;

&lt;p&gt;At any rate, it is trivial to override the SpellingQueryConverter to not do the original REGEX and just apply the analyzer to produce the tokens.  I suppose, we could offer two converters, one w/ the regex, and one without, or it could just have a flag.&lt;/p&gt;</comment>
                            <comment id="12600563" author="oleg_gnatovskiy" created="Wed, 28 May 2008 19:36:26 +0100"  >&lt;p&gt;I still have some issues. Here is my config:&lt;br/&gt;
  &amp;lt;lst name=&quot;spellchecker&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;classname&quot;&amp;gt;org.apache.solr.spelling.FileBasedSpellChecker&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;name&quot;&amp;gt;external&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;sourceLocation&quot;&amp;gt;/usr/local/apache/lucene/solr1home/conf/spellings.txt&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;field&quot;&amp;gt;word&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;characterEncoding&quot;&amp;gt;UTF-8&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;!-&lt;del&gt;&amp;lt;str name=&quot;indexDir&quot;&amp;gt;/usr/local/apache/lucene/solr1home/solr/data/spellchecker&amp;lt;/str&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    &amp;lt;/lst&amp;gt;&lt;br/&gt;
But why do I need a field for a filebased dictionary? Also is the correct way to call this URL: &lt;a href=&quot;http://wil1devsch1.cs.tmcs:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=external&amp;amp;spellcheck.builld=true&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wil1devsch1.cs.tmcs:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=external&amp;amp;spellcheck.builld=true&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="12600582" author="shalinmangar" created="Wed, 28 May 2008 20:36:48 +0100"  >&lt;p&gt;Oleg &amp;#8211; You shouldn&apos;t need &quot;field&quot; for a file-based dictionary. &quot;fieldType&quot; is optional for file-based dictionary. &quot;field&quot; is necessary only when you&apos;re using a IndexBasedSpellChecker. If you&apos;re running into a problem it&apos;s a bug. Except for the double L in spellcheck.build in your URL, everything else looks Ok.&lt;/p&gt;</comment>
                            <comment id="12600590" author="oleg_gnatovskiy" created="Wed, 28 May 2008 21:02:43 +0100"  >&lt;p&gt;Here is what I am getting (using yesterday&apos;s patch):&lt;/p&gt;

&lt;p&gt;HTTP Status 500 - null java.lang.NullPointerException at org.apache.lucene.index.Term.&amp;lt;init&amp;gt;(Term.java:39) at org.apache.lucene.index.Term.&amp;lt;init&amp;gt;(Term.java:36) at org.apache.solr.spelling.AbstractLuceneSpellChecker.getSuggestions(AbstractLuceneSpellChecker.java:67) at org.apache.solr.handler.component.SpellCheckComponent.process(SpellCheckComponent.java:160) at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:153) at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:125) at org.apache.solr.core.SolrCore.execute(SolrCore.java:965) at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:339) at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:274) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;</comment>
                            <comment id="12601031" author="noble.paul" created="Fri, 30 May 2008 07:32:02 +0100"  >&lt;p&gt;We must consider committing a basic version of spellchecker without the intelligent query parsing etc. Most of the users need will be met . Adding enhancements later is not a bad idea. (as long as we are not breaking backward compatibility)&lt;/p&gt;
</comment>
                            <comment id="12601057" author="shalinmangar" created="Fri, 30 May 2008 10:46:55 +0100"  >&lt;p&gt;Oleg, please try this patch. There was a bug in the previous patch which tried to use &quot;field&quot; for suggestions even when it was null. That is why it gave a NullPointerException with FileBasedSpellChecker&lt;/p&gt;</comment>
                            <comment id="12601081" author="shalinmangar" created="Fri, 30 May 2008 11:56:31 +0100"  >&lt;p&gt;I had missed the src/test/test-files/spellings.txt in the previous patch so tests were failing. This patch adds it back.&lt;/p&gt;</comment>
                            <comment id="12601256" author="oleg_gnatovskiy" created="Fri, 30 May 2008 22:12:58 +0100"  >&lt;p&gt;I installed the latest patch. Still getting a NPE. Here is my config:&lt;/p&gt;

&lt;p&gt;&amp;lt;searchComponent name=&quot;spellcheck&quot; class=&quot;org.apache.solr.handler.component.SpellCheckComponent&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;lst name=&quot;defaults&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;!-- omp = Only More Popular --&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;spellcheck.onlyMorePopular&quot;&amp;gt;false&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;!-- exr = Extended Results --&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;spellcheck.extendedResults&quot;&amp;gt;false&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;!--  The number of suggestions to return --&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;spellcheck.count&quot;&amp;gt;1&amp;lt;/str&amp;gt;&lt;br/&gt;
    &amp;lt;/lst&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;lst name=&quot;spellchecker&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;classname&quot;&amp;gt;org.apache.solr.spelling.FileBasedSpellChecker&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;name&quot;&amp;gt;external&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;sourceLocation&quot;&amp;gt;spellings.txt&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;characterEncoding&quot;&amp;gt;UTF-8&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;fieldType&quot;&amp;gt;text_ws&amp;lt;/str&amp;gt;&lt;br/&gt;
      &amp;lt;str name=&quot;indexDir&quot;&amp;gt;/usr/local/apache/lucene/solr2home/solr/data/spellIndex&amp;lt;/str&amp;gt;&lt;br/&gt;
    &amp;lt;/lst&amp;gt;&lt;br/&gt;
  &amp;lt;/searchComponent&amp;gt;&lt;/p&gt;


&lt;p&gt;Here is the URL I am hitting: &lt;a href=&quot;http://localhost:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=external&amp;amp;spellcheck.build=true&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select/?q=pizza&amp;amp;spellcheck=true&amp;amp;spellcheck.dictionary=external&amp;amp;spellcheck.build=true&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the error:&lt;/p&gt;

&lt;p&gt;HTTP Status 500 - null java.lang.NullPointerException at org.apache.lucene.index.Term.&amp;lt;init&amp;gt;(Term.java:39) at org.apache.lucene.index.Term.&amp;lt;init&amp;gt;(Term.java:36) at org.apache.lucene.search.spell.SpellChecker.suggestSimilar(SpellChecker.java:228) at org.apache.solr.spelling.AbstractLuceneSpellChecker.getSuggestions(AbstractLuceneSpellChecker.java:71) at org.apache.solr.handler.component.SpellCheckComponent.process(SpellCheckComponent.java:177) at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:153) at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:125) at org.apache.solr.core.SolrCore.execute(SolrCore.java:965) at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:339) at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:274) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;

&lt;p&gt;spellings.txt is in my solr/home/conf.&lt;/p&gt;</comment>
                            <comment id="12602645" author="gsingers" created="Thu, 5 Jun 2008 14:41:20 +0100"  >&lt;p&gt;One thing I haven&apos;t quite settled in my mind is the use of the File based spell checker.  It seems to me, that the use case for this is as an override where one feels the index based spelling is not correct.  Is that right?  Or am I missing something?&lt;/p&gt;

&lt;p&gt;If it is the case, shouldn&apos;t we allow the option, at least, of it truly acting as an override?  Currently, the only way to get at it is by passing the dictionary name as the param.  The only way I can see this as useful is if you are making several round trips to the server, which means you might as well be using a request handler and not a search component.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12602651" author="bosmid" created="Thu, 5 Jun 2008 15:04:28 +0100"  >&lt;p&gt;File based spell checker would probably be used in cases when Solr index is too small or too young. So a user would compile a dictionary file (for instance, UNIX words file) and use it as a dictionary.&lt;/p&gt;</comment>
                            <comment id="12602654" author="gsingers" created="Thu, 5 Jun 2008 15:17:11 +0100"  >&lt;blockquote&gt;
&lt;p&gt;File based spell checker would probably be used in cases when Solr index is too small or too young. So a user would compile a dictionary file (for instance, UNIX words file) and use it as a dictionary.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But how is it useful to return results that aren&apos;t in the index?  It&apos;s not like querying on them results in anything useful.  Seems to me, that in this case, you just need to rebuild your dictionary on a regular basis.  Or is it that people are using Solr as a spelling server?&lt;/p&gt;

&lt;p&gt;Now, I can see it as an override situation.  i.e. one wishes to override certain results from the index based one with ones that are in known to be in the dictionary, but are lower down.&lt;/p&gt;</comment>
                            <comment id="12602687" author="gsingers" created="Thu, 5 Jun 2008 16:44:42 +0100"  >&lt;p&gt;Oleg,&lt;/p&gt;

&lt;p&gt;Can you try specifying a field value anyway for your bug up above?  I think this is actually a bug in the Lucene Spell checker.  Namely, the docs say that the field value can be null, but, it is trying to construct a Term, which requires a non-null field name.&lt;/p&gt;

&lt;p&gt;Just give it the name &quot;word&quot;, perhaps&lt;/p&gt;</comment>
                            <comment id="12602696" author="otis" created="Thu, 5 Jun 2008 17:22:47 +0100"  >&lt;p&gt;Grant, I think it&apos;s better to think of people using Solr+SCRH as a (generic) spellchecker service, not necessarily something that absolutely has to tie to a specific index and thus make only suggestions that result in hits.&lt;/p&gt;

&lt;p&gt;Another use case is where Solr is used with indices that are not indices for a narrow domain or that don&apos;t have nice, clean, short fields that can be used for populating the SC index.  For example, if the index consists of a pile of web pages, I don&apos;t think I&apos;d want to use their data (not even their titles) to populate the SC index.  I&apos;d really want just a plain dictionary-powered SCRH.&lt;/p&gt;</comment>
                            <comment id="12602706" author="shalinmangar" created="Thu, 5 Jun 2008 17:44:45 +0100"  >&lt;p&gt;Grant &amp;#8211; The exception is happening because the SpellCheckComponent always passes Solr&apos;s own IndexReader when calling the AbstractLuceneSpellChecker#getSuggestions method even when the underlying spell checker is a FileBasedSpellChecker. In that case, since a non-null IndexReader is passed onto Lucene, it tries to create a term on the null field name. That is when the NullPointerException comes up.&lt;/p&gt;

&lt;p&gt;Another problem will occur when using IndexBasedSpellChecker with an arbitary Lucene index, because then too, the Solr&apos;s IndexReader would be passed to Lucene SpellChecker instead of the actual index&apos;s reader.&lt;/p&gt;

&lt;p&gt;I think a possible solution can be to add another abstract method with the same signature as Lucene&apos;s SpellChecker to the AbstractLuceneSpellChecker and let each sub-class get suggestions on it&apos;s own. That way FileBasedSpellChecker will pass the correct IndexReader or a null IndexReader into Lucene appropriately. The AbstractLuceneSpellChecker#getSuggestion will just call the underlying suggest method, get the String[] back and process as it does right now.&lt;/p&gt;</comment>
                            <comment id="12602707" author="gsingers" created="Thu, 5 Jun 2008 17:51:12 +0100"  >&lt;p&gt;OK, here&apos;s another crack at it.  I think I fixed the field issue Oleg was seeing (but haven&apos;t fully tested that) and I have it up and running in the Solr example.  After indexing the example docs there, try something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
http:&lt;span class=&quot;code-comment&quot;&gt;//localhost:8983/solr/spellCheckCompRH/?q=iPoo+text:sola&amp;amp;version=2.2&amp;amp;start=0&amp;amp;rows=10&amp;amp;indent=on&amp;amp;spellcheck=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&amp;amp;spellcheck.build=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to build it and spell check the query.&lt;/p&gt;

&lt;p&gt;I also have, what I think is a good compromise on spell checking the CommonParams.Q and the Spellcheck.Q, namely, the latter just uses a whitespace tokenizer to create the tokens.&lt;/p&gt;

&lt;p&gt;I am also thinking of adding a &quot;collate&quot; functionality, which would take the top suggestions and splice them back into the original string, as this seems like somehting many apps would like to have.&lt;/p&gt;</comment>
                            <comment id="12602712" author="otis" created="Thu, 5 Jun 2008 18:04:48 +0100"  >&lt;p&gt;By &quot;collate&quot; you mean that the SCRH would not only return suggestions/corrections for individual token, but it would also try to glue together an already corrected query string based on its suggestions?&lt;/p&gt;

&lt;p&gt;Example:&lt;br/&gt;
Query: cogito ega sum&lt;/p&gt;

&lt;p&gt;SCRH returns this correction:&lt;br/&gt;
erga -&amp;gt; ergo&lt;/p&gt;

&lt;p&gt;But also tries to give you the whole thing corrected:&lt;br/&gt;
cogito ergo sum&lt;/p&gt;

&lt;p&gt;That?  Sounds useful - less work for the client app, should the app developers decide that SCRH&apos;s collated suggestions are what they would have to do themselves anyway.&lt;/p&gt;</comment>
                            <comment id="12602743" author="oleg_gnatovskiy" created="Thu, 5 Jun 2008 19:41:29 +0100"  >&lt;p&gt;Hey guys. Installed the latest patch. Old problem is still there. For example if I do q=pizzzzza I get:&lt;/p&gt;

&lt;p&gt;&amp;lt;lst name=&quot;spellcheck&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;lst name=&quot;suggestions&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;lst name=&quot;pizzza&quot;&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;numFound&quot;&amp;gt;1&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;startOffset&quot;&amp;gt;0&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;endOffset&quot;&amp;gt;6&amp;lt;/int&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;arr name=&quot;suggestion&quot;&amp;gt;&lt;br/&gt;
&amp;lt;str&amp;gt;pizza&amp;lt;/str&amp;gt;&lt;br/&gt;
&amp;lt;/arr&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;/p&gt;

&lt;p&gt;Which is good. Then I do q=pizza (pizza is in the dictionary)&lt;/p&gt;

&lt;p&gt;lst name=&quot;spellcheck&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;lst name=&quot;suggestions&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;lst name=&quot;pizza&quot;&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;numFound&quot;&amp;gt;1&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;startOffset&quot;&amp;gt;0&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;endOffset&quot;&amp;gt;5&amp;lt;/int&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;arr name=&quot;suggestion&quot;&amp;gt;&lt;br/&gt;
&amp;lt;str&amp;gt;plaza&amp;lt;/str&amp;gt;&lt;br/&gt;
&amp;lt;/arr&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t think it should give me that suggestion. If a word is in the dictionary it should not give any suggestions.&lt;/p&gt;</comment>
                            <comment id="12602745" author="gsingers" created="Thu, 5 Jun 2008 19:49:12 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Grant - The exception is happening because the SpellCheckComponent always passes Solr&apos;s own IndexReader when calling the AbstractLuceneSpellChecker#getSuggestions method even when the underlying spell checker is a FileBasedSpellChecker. In that case, since a non-null IndexReader is passed onto Lucene, it tries to create a term on the null field name. That is when the NullPointerException comes up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep, I think I fixed this piece.  See also &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1299&quot; title=&quot;Spell Checker suggestSimilar throws NPE when IndexReader is not null and field is null&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1299&quot;&gt;&lt;del&gt;LUCENE-1299&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think a possible solution can be to add another abstract method with the same signature as Lucene&apos;s SpellChecker to the AbstractLuceneSpellChecker and let each sub-class get suggestions on it&apos;s own. That way FileBasedSpellChecker will pass the correct IndexReader or a null IndexReader into Lucene appropriately. The AbstractLuceneSpellChecker#getSuggestion will just call the underlying suggest method, get the String[] back and process as it does right now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure I follow the solution (I understand the problem)  Which signature are you suggesting?&lt;/p&gt;</comment>
                            <comment id="12602808" author="gsingers" created="Thu, 5 Jun 2008 22:58:17 +0100"  >&lt;p&gt;OK, I think this one is pretty good.  I added a test for the alternate location piece.  I &lt;em&gt;think&lt;/em&gt; I also fixed the issues w/ the wrong IndexReader being passed around.  &lt;/p&gt;

&lt;p&gt;I didn&apos;t implement the collate thing yet, but I think that can be handled as a separate patch.&lt;/p&gt;</comment>
                            <comment id="12602828" author="klaasm" created="Thu, 5 Jun 2008 23:54:15 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;quote&amp;#93;&lt;/span&gt;Another use case is where Solr is used with indices that are not indices for a narrow domain or that don&apos;t have nice, clean, short fields that can be used for populating the SC index. For example, if the index consists of a pile of web pages, I don&apos;t think I&apos;d want to use their data (not even their titles) to populate the SC index. I&apos;d really want just a plain dictionary-powered SCRH.&lt;span class=&quot;error&quot;&gt;&amp;#91;/quote&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It works great, actually.  That was you get all the abbreviations, jargon, proper names, etc.   Thresholding help prevent most of the cruft from appearing in the index.&lt;/p&gt;</comment>
                            <comment id="12602856" author="swarag" created="Fri, 6 Jun 2008 00:36:35 +0100"  >&lt;p&gt;Hey Guys,&lt;br/&gt;
I installed the latest patch and it gives me compile errors :&lt;/p&gt;

&lt;p&gt;compile:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;mkdir&amp;#93;&lt;/span&gt; Created dir: C:\Documents and Settings\Swarag Segu\workspace\solrSrc\build\core&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 324 source files to C:\Documents and Settings\Swarag Segu\workspace\solrSrc\build\core&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; C:\Documents and Settings\Swarag Segu\workspace\solrSrc\src\java\org\apache\solr\spelling\FileBasedSpellChecker.java:97: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : variable MaxFieldLength&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: class org.apache.lucene.index.IndexWriter&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                 true, IndexWriter.MaxFieldLength.UNLIMITED);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                                  ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; C:\Documents and Settings\Swarag Segu\workspace\solrSrc\src\java\org\apache\solr\spelling\FileBasedSpellChecker.java:96: internal error; cannot instantiate org.apache.lucene.index.IndexWriter.&amp;lt;init&amp;gt; at org.apache.lucene.index.IndexWriter to ()&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;         IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                              ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: Some input files use or override a deprecated API.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: Recompile with -Xlint:deprecation for details.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: Some input files use unchecked or unsafe operations.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: Recompile with -Xlint:unchecked for details.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 2 errors&lt;/p&gt;


&lt;p&gt;Am I missing something?&lt;br/&gt;
Thanks,&lt;br/&gt;
Swarag.&lt;/p&gt;</comment>
                            <comment id="12602863" author="gsingers" created="Fri, 6 Jun 2008 01:18:49 +0100"  >&lt;p&gt;What version of Lucene do you have in your lib directory?  Try svn up  &lt;br/&gt;
from the root of Solr trunk.&lt;/p&gt;



</comment>
                            <comment id="12603028" author="gsingers" created="Fri, 6 Jun 2008 13:42:32 +0100"  >&lt;p&gt;Small mod to move name and name init up to the SolrSpellChecker abstract class, since name is common to all spellers.&lt;/p&gt;</comment>
                            <comment id="12603055" author="gsingers" created="Fri, 6 Jun 2008 15:23:03 +0100"  >&lt;p&gt;Removes &quot;unmodifiableMap&quot; factor from the suggestions/token freqs.  Rethinking this, I think it is reasonable to think that someone would want to modify these (or insert directly)&lt;/p&gt;</comment>
                            <comment id="12603070" author="oleg_gnatovskiy" created="Fri, 6 Jun 2008 16:06:45 +0100"  >&lt;p&gt;Do these latest patches require Lucene 2.4? Would it be better to stay with 2.3.1?&lt;/p&gt;</comment>
                            <comment id="12603075" author="gsingers" created="Fri, 6 Jun 2008 16:18:59 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Do these latest patches require Lucene 2.4? Would it be better to stay with 2.3.1?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;They require what is checked into Solr&apos;s lib directory, which is Lucene&apos;s trunk as of yesterday.  There are actually a few changes in Lucene&apos;s spell checker that I think are worth having in 2.4.  Additionally, I think we will want &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1297&quot; title=&quot;Allow other string distance measures in spellchecker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1297&quot;&gt;&lt;del&gt;LUCENE-1297&lt;/del&gt;&lt;/a&gt; before we are through, which is probably another configuration item.  However, that can be added later, unless Otis commits it fairly soon.&lt;/p&gt;</comment>
                            <comment id="12603220" author="swarag" created="Sat, 7 Jun 2008 00:14:50 +0100"  >&lt;p&gt;Hey guys. Installed the latest patch. Old problem is still there. For example if I do q=pizzzzza I get:&lt;/p&gt;

&lt;p&gt;&amp;lt;lst name=&quot;spellcheck&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;lst name=&quot;suggestions&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;lst name=&quot;pizzza&quot;&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;numFound&quot;&amp;gt;1&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;startOffset&quot;&amp;gt;0&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;endOffset&quot;&amp;gt;6&amp;lt;/int&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;arr name=&quot;suggestion&quot;&amp;gt;&lt;br/&gt;
&amp;lt;str&amp;gt;pizza&amp;lt;/str&amp;gt;&lt;br/&gt;
&amp;lt;/arr&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;/p&gt;

&lt;p&gt;Which is good. Then I do q=golf (golf is in the dictionary)&lt;/p&gt;

&lt;p&gt;lst name=&quot;spellcheck&quot;&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;lst name=&quot;spellcheck&quot;&amp;gt;&lt;br/&gt;
&#8722;&lt;br/&gt;
	&amp;lt;lst name=&quot;suggestions&quot;&amp;gt;&lt;br/&gt;
&#8722;&lt;br/&gt;
	&amp;lt;lst name=&quot;golf&quot;&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;numFound&quot;&amp;gt;1&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;startOffset&quot;&amp;gt;0&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;endOffset&quot;&amp;gt;4&amp;lt;/int&amp;gt;&lt;br/&gt;
&#8722;&lt;br/&gt;
	&amp;lt;arr name=&quot;suggestion&quot;&amp;gt;&lt;br/&gt;
&amp;lt;str&amp;gt;roof&amp;lt;/str&amp;gt;&lt;br/&gt;
&amp;lt;/arr&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;br/&gt;
&amp;lt;/lst&amp;gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t think it should give me that suggestion. If a word is in the dictionary it should not give any suggestions. Am I right?&lt;/p&gt;</comment>
                            <comment id="12604052" author="gsingers" created="Tue, 10 Jun 2008 22:46:02 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I don&apos;t think it should give me that suggestion. If a word is in the dictionary it should not give any suggestions. Am I right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Possibly.  I think it should give a better suggestion if one exists (i.e. more frequent) but otherwise, yes, it shouldn&apos;t give any suggestion.   For your example, I would argree that it should not return a suggestion (assuming golf is in the dictionary).  For example, the index could contain the words gilf and golf, with gilf having a freq. of 1 and golf having a freq of 100000.  If the user enters gilf, I think it is reasonable to assume that the suggestion should be golf, even though gilf exists.&lt;/p&gt;

&lt;p&gt;Not saying this is supported yet, or anything, but just laying out the case.&lt;/p&gt;</comment>
                            <comment id="12604056" author="oleg_gnatovskiy" created="Tue, 10 Jun 2008 22:59:46 +0100"  >&lt;p&gt;I think that lower frequency suggestions should be optional. Some users might only want to offer suggestions for misspelled words (words not in the dictionary). Would it be hard to check if the query term exists in the dictionary before returning a suggestion?&lt;/p&gt;</comment>
                            <comment id="12604060" author="gsingers" created="Tue, 10 Jun 2008 23:08:20 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Would it be hard to check if the query term exists in the dictionary before returning a suggestion?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;d have to double check, but I think the Lucene SC already does this in some cases (onlyMorePopular????)  &lt;/p&gt;</comment>
                            <comment id="12604062" author="otis" created="Tue, 10 Jun 2008 23:12:05 +0100"  >&lt;p&gt;I think the frequency awareness may be interesting.  What happens if &quot;gilf&quot; has a frequency of 95K and &quot;golf&quot; a freq of 100K?  Do we need this to become a SCRH config setting expressed as a percentage? (e.g. &quot;Show alternative word suggestions even if the input word exists in the index iff freq(input word)/freq(suggested word)*100 &amp;lt; N%?)&lt;/p&gt;</comment>
                            <comment id="12604101" author="gsingers" created="Wed, 11 Jun 2008 02:29:05 +0100"  >&lt;p&gt;Adds collation&lt;br/&gt;
Slight change in SpellingResult results to take advantage of a LinkedHashMap and to explicitly state in the contract that spelling suggestions are in order by best suggestion first.&lt;/p&gt;

&lt;p&gt;Also added some more javadocs.  Getting much closer.  I&apos;d like to see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1297&quot; title=&quot;Allow other string distance measures in spellchecker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1297&quot;&gt;&lt;del&gt;LUCENE-1297&lt;/del&gt;&lt;/a&gt; addressed and committed so it could be used in the Lucene SCs.&lt;/p&gt;

&lt;p&gt;I&apos;ve used this API to implement my own spell checker, too, so I&apos;m pretty happy w/ the API if others are.  I&apos;d like to commit in the next week or so, so if people can check it out, kick the tires, that would be great.&lt;/p&gt;
</comment>
                            <comment id="12604248" author="gsingers" created="Wed, 11 Jun 2008 16:16:01 +0100"  >&lt;p&gt;Minor change to only return the collation if it is different from the original&lt;/p&gt;</comment>
                            <comment id="12604504" author="gsingers" created="Thu, 12 Jun 2008 13:20:30 +0100"  >&lt;p&gt;Make getSpellChecker protected, add in JMX Stuff.  Handle if the SpellingResult is null&lt;/p&gt;</comment>
                            <comment id="12604617" author="timmsc" created="Thu, 12 Jun 2008 20:16:05 +0100"  >&lt;p&gt;It doesn&apos;t appear that you can get both extendedResults and count &amp;gt; 1.  With the below URL, I get 1 suggestion for each misspelled term regardless of the value of spellcheck.count.  If I set spellcheck.extendedResults=false, then I get the requested three suggestions for each term.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;/solr/spellCheckCompRH/?q=waz+designatd+two+bee+Arvil+25+bye+Pres.+it+waz&amp;amp;version=2.2&amp;amp;start=0&amp;amp;rows=2&amp;amp;indent=on&amp;amp;spellcheck=true&amp;amp;fl=title,url,id,categories,score&amp;amp;hl=on&amp;amp;hl.fl=body&amp;amp;qt=dismax&amp;amp;spellcheck.extendedResults=true&amp;amp;spellcheck.count=3
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12604639" author="ehatcher" created="Thu, 12 Jun 2008 21:47:26 +0100"  >&lt;p&gt;the spell checker component handling build/reload seems highly awkward to me.   suggestion component really should just do that... and wrap the other operations as a /spellchecker/rebuild kinda thing and not even necessarily componentize those operations since they don&apos;t really necessarily need to be hooked together with other operations as a single request.&lt;/p&gt;

&lt;p&gt;anyway, just the overloading of a &quot;component&quot; to do managerial operations seems awkward.  food for thought.  not a -1 kinda thing though.&lt;/p&gt;</comment>
                            <comment id="12604818" author="gsingers" created="Fri, 13 Jun 2008 13:08:50 +0100"  >&lt;blockquote&gt;
&lt;p&gt;the spell checker component handling build/reload seems highly awkward to me. suggestion component really should just do that... and wrap the other operations as a /spellchecker/rebuild kinda thing and not even necessarily componentize those operations since they don&apos;t really necessarily need to be hooked together with other operations as a single request.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve thought about a bit, too, as it bothers me, too, but I think the initialization, etc. gets a bit tricky, like all Solr initialization.  Not sure what to do.&lt;/p&gt;</comment>
                            <comment id="12604830" author="gsingers" created="Fri, 13 Jun 2008 13:37:38 +0100"  >&lt;p&gt;Sean,&lt;/p&gt;

&lt;p&gt;I see the issue and am working on it.  Good catch.  I&apos;ll have a patch shortly.&lt;/p&gt;</comment>
                            <comment id="12604885" author="gsingers" created="Fri, 13 Jun 2008 14:29:45 +0100"  >&lt;p&gt;Fixes Sean&apos;s issue w/ extended results.  &lt;/p&gt;

&lt;p&gt;Also, slightly modified the extended results results.  See the &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
testExtendedResultsCount()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in SpellCheckComponentTest for the new format.  Basically, though it tries to normalize the map entries so that one can ask for specific things by name,.&lt;/p&gt;</comment>
                            <comment id="12605293" author="gsingers" created="Mon, 16 Jun 2008 15:01:10 +0100"  >&lt;p&gt;OK, I&apos;d like to commit this tomorrow or Wednesday.  I am going to open another issue to bring in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1297&quot; title=&quot;Allow other string distance measures in spellchecker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1297&quot;&gt;&lt;del&gt;LUCENE-1297&lt;/del&gt;&lt;/a&gt; to the configuration&lt;/p&gt;</comment>
                            <comment id="12605367" author="yseeley@gmail.com" created="Mon, 16 Jun 2008 19:32:17 +0100"  >&lt;p&gt;For those who are just casually following this issue, is there a good summary of current  input options and example output?&lt;/p&gt;</comment>
                            <comment id="12605635" author="shalinmangar" created="Tue, 17 Jun 2008 16:31:18 +0100"  >&lt;p&gt;A few questions/comments:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Why is a WhiteSpaceTokenizer being used for tokenizing the value for a spellcheck.q parameter? Wouldn&apos;t it be more correct to use the query analyzer if the index is being built from a Solr field?&lt;/li&gt;
	&lt;li&gt;The above argument also applies to queryAnalyzerFieldType which is being used for QueryConverter.&lt;/li&gt;
	&lt;li&gt;I see that we can specify our own query converter through the queryConverter section in solrconfig.xml. But the SpellCheckComponent uses SpellingQueryConverter directly instead of an interface. We should add a QueryConvertor interface if this needs to be pluggable.&lt;/li&gt;
	&lt;li&gt;If name is omitted from two dictionaries in solrconfig.xml then both get named as Default from the SolrSpellChecker#init method and they overwrite each other in the spellCheckers map&lt;/li&gt;
	&lt;li&gt;How about building the index in the inform() method? I understand that the users can build the index using spellcheck.build=true and they can also use QuerySenderListener to build the index but this limits the user to use FSDirectory because if we use RAMDirectory and solr is restarted, the QuerySenderListener never fires and spell checker is left with no index. It&apos;s not a major inconvenience to use FSDirectory always but then RAMDirectory doesn&apos;t bring much to the table.&lt;/li&gt;
&lt;/ol&gt;

</comment>
                            <comment id="12605645" author="gsingers" created="Tue, 17 Jun 2008 17:12:57 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Why is a WhiteSpaceTokenizer being used for tokenizing the value for a spellcheck.q parameter? Wouldn&apos;t it be more correct to use the query analyzer if the index is being built from a Solr field?&lt;/p&gt;

&lt;p&gt;The above argument also applies to queryAnalyzerFieldType which is being used for QueryConverter&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My understanding was that the sc.q parameter was already analyzed and ready to be checked, thus all it needed was a conversion to tokens.  As for the queryAnalyzerFieldType, that assumes the implementation is the IndexBasedSpellChecker or some other field based one that the SpellCheckComponent doesn&apos;t have access to, thus my reasoning that it needs to be handled separately and explicitly, which is why it isn&apos;t a part of the spellchecker configuration.&lt;/p&gt;

 &lt;blockquote&gt;
&lt;p&gt;I see that we can specify our own query converter through the queryConverter section in solrconfig.xml. But the SpellCheckComponent uses SpellingQueryConverter directly instead of an interface. We should add a QueryConvertor interface if this needs to be pluggable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought about making it an abstract base class, but in my mind it is really easy to override the SpellingQueryConverter and the component should know how to deal with it.&lt;/p&gt;

 &lt;blockquote&gt;
&lt;p&gt;If name is omitted from two dictionaries in solrconfig.xml then both get named as Default from the SolrSpellChecker#init method and they overwrite each other in the spellCheckers map&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, not good.  I will fix.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How about building the index in the inform() method? I understand that the users can build the index using spellcheck.build=true and they can also use QuerySenderListener to build the index but this limits the user to use FSDirectory because if we use RAMDirectory and solr is restarted, the QuerySenderListener never fires and spell checker is left with no index. It&apos;s not a major inconvenience to use FSDirectory always but then RAMDirectory doesn&apos;t bring much to the table.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this gets back to our early discussions about it not working in inform b/c we don&apos;t have the reader at that point, or something like that.  I really don&apos;t know the right answer, but do feel free to try it out.  I do think it belongs in inform, but not sure if Solr is ready at that point.  As for the QuerySenderListener, seems like it should fire if it is restarted, but I admit I don&apos;t know a whole lot about that functionality.  &lt;/p&gt;</comment>
                            <comment id="12605661" author="gsingers" created="Tue, 17 Jun 2008 18:09:24 +0100"  >&lt;p&gt;Fix for the default name issue, add a test for it.&lt;/p&gt;</comment>
                            <comment id="12605708" author="gsingers" created="Tue, 17 Jun 2008 21:11:54 +0100"  >&lt;p&gt;Thought some more about the comment about the QueryConverter, and decided to abstract it as Shalin suggests.  &lt;/p&gt;</comment>
                            <comment id="12605902" author="shalinmangar" created="Wed, 18 Jun 2008 10:41:04 +0100"  >&lt;p&gt;&lt;b&gt;Changes&lt;/b&gt;&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Moved Analyzer from AbstractLuceneSpellChecker to SolrSpellChecker since some form of query-time analysis would probably be needed for all spell checker implementations. Added a getQueryAnalyzer() method in SolrSpellChecker.&lt;/li&gt;
	&lt;li&gt;Value specified for spellcheck.q is analyzed using the query analyzer for the dictionary as per the config (using the SolrSpellChecker.getQueryAnalyzer). The value for &quot;q&quot; will continue to be analyzed by QueryConvertor.&lt;/li&gt;
	&lt;li&gt;Removed the EncodedTextDictionary class. Now that we&apos;re using the lucene-2.4 spellchecker, it is no longer needed because the previously protected constructor of PlainTextDictionary is made public in 2.4&lt;/li&gt;
	&lt;li&gt;Added org.apache.solr.spelling to package list which can be searched by SolrResourceLoader. Now we can write solr.IndexBasedSpellChecker instead of the fully qualified class name.&lt;/li&gt;
	&lt;li&gt;&quot;classname&quot; attribute in configuration is optional now, it defaults to IndexBasedSpellChecker&lt;/li&gt;
	&lt;li&gt;Minor additions to javadocs&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12606386" author="gsingers" created="Thu, 19 Jun 2008 14:54:41 +0100"  >&lt;p&gt;Committed revision 669485.  Note, I incorporated &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1297&quot; title=&quot;Allow other string distance measures in spellchecker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1297&quot;&gt;&lt;del&gt;LUCENE-1297&lt;/del&gt;&lt;/a&gt;.  See &lt;a href=&quot;http://wiki.apache.org/solr/SpellCheckComponent&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/solr/SpellCheckComponent&lt;/a&gt; for more details on how to use it, as well as the unit tests.&lt;/p&gt;

&lt;p&gt;Thanks to all who helped/contributed.&lt;/p&gt;</comment>
                            <comment id="12606634" author="noble.paul" created="Fri, 20 Jun 2008 05:49:16 +0100"  >&lt;p&gt;Why do we need to add the queryConverter definition outside of the speallcheck search component? &lt;br/&gt;
Is it going to be used by any other component other than this? &lt;/p&gt;</comment>
                            <comment id="12606719" author="gsingers" created="Fri, 20 Jun 2008 13:03:47 +0100"  >&lt;p&gt;Because of the stupid way it gets initialized as a  &lt;br/&gt;
NamedListInitializerWhateverWhatever.  I&apos;m open to alternate  &lt;br/&gt;
suggestions on how to do it and take advantage of the resource loader,  &lt;br/&gt;
etc.&lt;/p&gt;

&lt;p&gt;Every time I go to do initialization stuff in Solr these days I pine  &lt;br/&gt;
for Spring, since we are basically re-inventing it, albeit not as  &lt;br/&gt;
nicely.&lt;/p&gt;

&lt;p&gt;-Grant&lt;/p&gt;

</comment>
                            <comment id="12608487" author="geoff" created="Thu, 26 Jun 2008 17:34:17 +0100"  >&lt;p&gt;I&apos;m seeing random weirdness in the collation results.  the same query shift-refreshed sometimes yields (in json)&lt;/p&gt;


&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;{
 &quot;responseHeader&quot;:{
    &quot;params&quot;:{
	&quot;spellcheck&quot;:&quot;true&quot;,
	&quot;q&quot;:&quot;redbull air show&quot;,
	&quot;qf&quot;:&quot;search-en&quot;,
	&quot;spellcheck.collate&quot;:&quot;true&quot;,
	&quot;qt&quot;:&quot;dismax&quot;,
	&quot;wt&quot;:&quot;json&quot;,
	&quot;rows&quot;:&quot;0&quot;}},
 &quot;response&quot;:{&quot;numFound&quot;:0,&quot;start&quot;:0,&quot;docs&quot;:[]
 },
 &quot;spellcheck&quot;:{
  &quot;suggestions&quot;:[
	&quot;redbull&quot;,[
	 &quot;numFound&quot;,1,
	 &quot;startOffset&quot;,0,
	 &quot;endOffset&quot;,7,
	 &quot;suggestion&quot;,[&quot;redbelly&quot;]],
	&quot;show&quot;,[
	 &quot;numFound&quot;,1,
	 &quot;startOffset&quot;,12,
	 &quot;endOffset&quot;,16,
	 &quot;suggestion&quot;,[&quot;shot&quot;]],
	&quot;collation&quot;,&quot;redbelly airshotw&quot;]}}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;note the &quot;collation&quot; spacing and extraneous &apos;w&apos;.  a refresh toggles between that and what you might expect :&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&quot;collation&quot;,&quot;redbelly air shot&quot;]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;UPDATE: opened new issue as &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-606&quot; title=&quot;spellcheck.colate doesn&amp;#39;t handle multiple tokens properly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-606&quot;&gt;&lt;del&gt;SOLR-606&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;--Geoff&lt;/p&gt;</comment>
                            <comment id="12608519" author="gsingers" created="Thu, 26 Jun 2008 18:41:58 +0100"  >&lt;p&gt;Can you open a new issue to track this?  Looks like a string replace issue on the offsets.  We probably should do the collation a bit differently to make sure the words fit right.  We&apos;ll probably have to right pad or something like that.&lt;/p&gt;</comment>
                            <comment id="12608527" author="timmsc" created="Thu, 26 Jun 2008 18:59:42 +0100"  >&lt;p&gt;For what it is worth, here is the code that I used client side before the collation feature was available.  I haven&apos;t looked at how it is done in this patch.  It has some nice features such as delimiting the spelling correction, e.g., with HTML bold tags, and preserving the users initial case on each word.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        StringBuilder buff = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();
        StringBuilder rawBuff = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; last = 0;
        &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; userStr = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; each suggestion
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;( Suggestion s : suggestions ) {
            &lt;span class=&quot;code-comment&quot;&gt;// add part before the mispelling
&lt;/span&gt;            userStr = userQuery.substring( last, s.startOffset );
            buff.append( userStr );
            rawBuff.append( userStr );
            &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; suggestion = s.suggestion;
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( _spellCheckPreserveUserCase ) {
                userStr = userQuery.substring( s.startOffset, s.endOffset );
                &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;[] userCh = userStr.toCharArray();
                &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; initialUpper = &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.isUpperCase( userCh[0] );
                &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; allUpper = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
                &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; c : userCh ) {
                    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.isLowerCase( c ) ) {
                        allUpper = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
                        &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
                    }
                }
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( allUpper ) {
                    suggestion = suggestion.toUpperCase();
                }
                &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( initialUpper ) {
                    userCh = suggestion.toCharArray();
                    userCh[0] = &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.toUpperCase( userCh[0] );
                    suggestion = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;( userCh );
                }
            }
            buff.append( _spellCheckStartHighlight ).append( suggestion )
                .append( _spellCheckEndHighlight );
            rawBuff.append( suggestion );
            last = s.endOffset;
        }
        &lt;span class=&quot;code-comment&quot;&gt;// add part after all mispellings
&lt;/span&gt;        userStr = userQuery.substring( last );
        buff.append( userStr );
        rawBuff.append( userStr );
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( log().isDebugEnabled() ) {
            log().debug( &lt;span class=&quot;code-quote&quot;&gt;&quot;Did you mean: &quot;&lt;/span&gt; + buff );
            log().debug( &lt;span class=&quot;code-quote&quot;&gt;&quot;Did you mean link: &quot;&lt;/span&gt; + rawBuff );
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12610247" author="bosmid" created="Thu, 3 Jul 2008 16:02:40 +0100"  >&lt;p&gt;I notice that old pizza-&amp;gt;plaza, golf-&amp;gt;roof issue is still here. &lt;/p&gt;

&lt;p&gt;I created a patch for latest trunk version which deals with this, here is the attachment, I believe the fix should be submitted (maybe it should be implemented differently, but that&apos;s open for the discussion, I used spellchecker.exist() method).&lt;/p&gt;</comment>
                            <comment id="12610276" author="gsingers" created="Thu, 3 Jul 2008 17:52:26 +0100"  >&lt;p&gt;Hi Bojan,&lt;/p&gt;

&lt;p&gt;Thanks for the patch.  I think it would be best to open a new issue for it.  &lt;/p&gt;

&lt;p&gt;However, I&apos;m not sure what is going on here.  When I look at the Lucene code, it has this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; freq = (ir != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; field != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) ? ir.docFreq(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Term(field, word)) : 0;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; goalFreq = (morePopular &amp;amp;&amp;amp; ir != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; field != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) ? freq : 0;
&lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the word exists in the real index and we don&apos;t care &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; word frequency, &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the word itself
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!morePopular &amp;amp;&amp;amp; freq &amp;gt; 0) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] { word };
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The comment says it all, so maybe we have something else going on wrong.&lt;/p&gt;

&lt;p&gt;At a minimum, your patch at least needs to account for when you want to get more popular suggestions even if the word exists. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12391793">SOLR-507</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12399644">SOLR-616</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12399872">SOLR-622</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12384220">SOLR-430</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12384204" name="SOLR-572.patch" size="93920" author="shalinmangar" created="Wed, 18 Jun 2008 10:41:04 +0100"/>
                            <attachment id="12384151" name="SOLR-572.patch" size="93700" author="gsingers" created="Tue, 17 Jun 2008 21:11:54 +0100"/>
                            <attachment id="12384143" name="SOLR-572.patch" size="92798" author="gsingers" created="Tue, 17 Jun 2008 18:09:24 +0100"/>
                            <attachment id="12383961" name="SOLR-572.patch" size="90506" author="gsingers" created="Fri, 13 Jun 2008 14:29:45 +0100"/>
                            <attachment id="12383909" name="SOLR-572.patch" size="85706" author="gsingers" created="Thu, 12 Jun 2008 13:20:30 +0100"/>
                            <attachment id="12383848" name="SOLR-572.patch" size="85628" author="gsingers" created="Wed, 11 Jun 2008 16:16:01 +0100"/>
                            <attachment id="12383799" name="SOLR-572.patch" size="85535" author="gsingers" created="Wed, 11 Jun 2008 02:29:04 +0100"/>
                            <attachment id="12383562" name="SOLR-572.patch" size="81089" author="gsingers" created="Fri, 6 Jun 2008 15:23:03 +0100"/>
                            <attachment id="12383555" name="SOLR-572.patch" size="81147" author="gsingers" created="Fri, 6 Jun 2008 13:42:32 +0100"/>
                            <attachment id="12383503" name="SOLR-572.patch" size="81506" author="gsingers" created="Thu, 5 Jun 2008 22:58:17 +0100"/>
                            <attachment id="12383470" name="SOLR-572.patch" size="77762" author="gsingers" created="Thu, 5 Jun 2008 17:51:12 +0100"/>
                            <attachment id="12383095" name="SOLR-572.patch" size="73700" author="shalinmangar" created="Fri, 30 May 2008 11:56:31 +0100"/>
                            <attachment id="12383088" name="SOLR-572.patch" size="73182" author="shalinmangar" created="Fri, 30 May 2008 10:46:55 +0100"/>
                            <attachment id="12382945" name="SOLR-572.patch" size="72585" author="gsingers" created="Wed, 28 May 2008 16:46:28 +0100"/>
                            <attachment id="12382926" name="SOLR-572.patch" size="72631" author="gsingers" created="Wed, 28 May 2008 13:44:21 +0100"/>
                            <attachment id="12382854" name="SOLR-572.patch" size="62008" author="gsingers" created="Tue, 27 May 2008 17:26:02 +0100"/>
                            <attachment id="12382846" name="SOLR-572.patch" size="57101" author="shalinmangar" created="Tue, 27 May 2008 15:06:49 +0100"/>
                            <attachment id="12382815" name="SOLR-572.patch" size="54375" author="gsingers" created="Tue, 27 May 2008 02:10:52 +0100"/>
                            <attachment id="12382770" name="SOLR-572.patch" size="46639" author="gsingers" created="Mon, 26 May 2008 13:39:53 +0100"/>
                            <attachment id="12382691" name="SOLR-572.patch" size="34427" author="gsingers" created="Fri, 23 May 2008 20:21:45 +0100"/>
                            <attachment id="12382690" name="SOLR-572.patch" size="34597" author="gsingers" created="Fri, 23 May 2008 20:18:43 +0100"/>
                            <attachment id="12382601" name="SOLR-572.patch" size="23461" author="shalinmangar" created="Thu, 22 May 2008 22:28:23 +0100"/>
                            <attachment id="12382297" name="SOLR-572.patch" size="17660" author="bosmid" created="Mon, 19 May 2008 13:02:42 +0100"/>
                            <attachment id="12382291" name="SOLR-572.patch" size="15718" author="shalinmangar" created="Mon, 19 May 2008 11:54:49 +0100"/>
                            <attachment id="12382164" name="SOLR-572.patch" size="12551" author="bosmid" created="Fri, 16 May 2008 13:02:11 +0100"/>
                            <attachment id="12382129" name="SOLR-572.patch" size="11299" author="shalinmangar" created="Thu, 15 May 2008 18:44:56 +0100"/>
                            <attachment id="12385212" name="solr-572.patch" size="2893" author="bosmid" created="Thu, 3 Jul 2008 16:02:40 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 May 2008 04:28:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7036</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxqiv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20616</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>