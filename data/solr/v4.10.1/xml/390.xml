<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:26:05 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-390/SOLR-390.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-390] HashDocSet initialization of internal array is not efficient</title>
                <link>https://issues.apache.org/jira/browse/SOLR-390</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;HashDocSet initializes the internal array but iterating it instead of using Arrays.fill which is much faster. Patch included&lt;/p&gt;</description>
                <environment></environment>
        <key id="12380989">SOLR-390</key>
            <summary>HashDocSet initialization of internal array is not efficient</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="5">Cannot Reproduce</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="john.wang@gmail.com">John Wang</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Oct 2007 16:50:40 +0100</created>
                <updated>Sat, 3 Nov 2007 05:42:40 +0000</updated>
                            <resolved>Wed, 24 Oct 2007 01:25:39 +0100</resolved>
                                                                    <component>search</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12537051" author="john.wang@gmail.com" created="Tue, 23 Oct 2007 17:00:30 +0100"  >&lt;p&gt;I am having problems with &quot;Attach file&quot;&lt;br/&gt;
Following is the patch:&lt;br/&gt;
Index: /Users/john/plum/solr-trunk/src/java/org/apache/solr/search/HashDocSet.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; /Users/john/plum/solr-trunk/src/java/org/apache/solr/search/HashDocSet.java (revision 587538)&lt;br/&gt;
+++ /Users/john/plum/solr-trunk/src/java/org/apache/solr/search/HashDocSet.java (working copy)&lt;br/&gt;
@@ -17,6 +17,8 @@&lt;/p&gt;

&lt;p&gt; package org.apache.solr.search;&lt;/p&gt;

&lt;p&gt;+import java.util.Arrays;&lt;br/&gt;
+&lt;br/&gt;
 import org.apache.solr.util.BitUtil;&lt;/p&gt;


&lt;p&gt;@@ -63,8 +65,8 @@&lt;br/&gt;
     mask=tsize-1;&lt;/p&gt;

&lt;p&gt;     table = new int&lt;span class=&quot;error&quot;&gt;&amp;#91;tsize&amp;#93;&lt;/span&gt;;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for (int i=tsize-1; i&amp;gt;=0; i--) table&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;=EMPTY;&lt;br/&gt;
-&lt;br/&gt;
+    //for (int i=tsize-1; i&amp;gt;=0; i--) table&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;=EMPTY;&lt;br/&gt;
+    Arrays.fill(table, EMPTY);&lt;br/&gt;
     for (int i=offset; i&amp;lt;len; i++) 
{
       put(docs[i]);
     }&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12537055" author="yseeley@gmail.com" created="Tue, 23 Oct 2007 17:15:52 +0100"  >&lt;p&gt;That&apos;s interesting... does it actually test as faster for you?  Have any JVMs finally done specific optimizations for it?&lt;br/&gt;
In the past, my version was always a little faster because counting down to zero can be slightly faster (no explicit compare needed in many instruction sets because the flags are often set by arithmetic operations anyway).&lt;/p&gt;</comment>
                            <comment id="12537062" author="yseeley@gmail.com" created="Tue, 23 Oct 2007 17:39:27 +0100"  >&lt;p&gt;As I suspected, it doesn&apos;t look like there is yet any JVM acceleration for Arrays.fill() (and I wouldn&apos;t hold my breath).&lt;br/&gt;
I just tested with Java 1.6 -server, and my current method appears about 88% faster (on a P4 at least).&lt;/p&gt;

&lt;p&gt;I used an array size of 1000 (since HashDocSet will normally be between 1 and 3000),&lt;br/&gt;
and 10,000,000 iterations.&lt;/p&gt;

&lt;p&gt;explicit loop countdown =&amp;gt;  9281 msec&lt;br/&gt;
Arrays.fill =&amp;gt; 17515 msec&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class TestPerf {

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; VAL=-1;

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void fill(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] x) {
/*
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=x.length-1; i&amp;gt;=0; i--) {
      x[i] = VAL;
    }
*/
    Arrays.fill(x,VAL);
  }


  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; a=0;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; sz = &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.parseInt(args[a++]);
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; iter = &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.parseInt(args[a++]);
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] x = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[sz];
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ret=0;
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;iter; i++) {
      fill(x);
      ret = ret + x[0];  &lt;span class=&quot;code-comment&quot;&gt;// use results
&lt;/span&gt;    }
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; end = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;result=&quot;&lt;/span&gt; + ret);
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;time=&quot;&lt;/span&gt; +(end-start));
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12537171" author="yseeley@gmail.com" created="Wed, 24 Oct 2007 00:49:01 +0100"  >&lt;p&gt;I did some further tests with mixed results...&lt;br/&gt;
After modifying the test program to do fill() on multiple arrays per iteration (and using an element from each array to try and prevent any dead code elimination), the benefit of the inlined loop vanishes (sneaky hotspot). Sometimes the Arrays.fill() version was faster, and sometimes it wasn&apos;t.  So perhaps a real test is needed here.&lt;/p&gt;
</comment>
                            <comment id="12537179" author="yseeley@gmail.com" created="Wed, 24 Oct 2007 01:24:33 +0100"  >&lt;p&gt;Doing a quick HashDocSet construction test (below) showed the loop to be slightly faster on average than Arrays.fill()... I have no idea why, but I&apos;ll close this bug for now and it can be reopened if someone comes up with a better test (or tests on different JVMs, etc).&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class TestPerf {

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; VAL=-1;

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; go(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] x) {
    HashDocSet ds = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashDocSet(x,0,x.length);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ds.exists(1) ? 1 : 0;
  }


  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; a=0;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; sz = &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.parseInt(args[a++]);
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; iter = &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.parseInt(args[a++]);
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] x = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[sz];
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] x2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[sz];
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ii=0; ii&amp;lt;sz; ii++) {
      x[ii]=ii*1234567891;
      x2[ii]=ii*987654323;
    }

    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ret=0;
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; num=0;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;iter; i++) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (++num&amp;gt;=sz) num=0;
      x[num] += go(x)+ret+x2[num];
      ret += go(x2) + x2[num]++;
    }
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; end = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;result=&quot;&lt;/span&gt; + ret);
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;time=&quot;&lt;/span&gt; +(end-start));
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12539863" author="john.wang@gmail.com" created="Sat, 3 Nov 2007 05:42:40 +0000"  >&lt;p&gt;Hi Yonik:&lt;br/&gt;
    With my tests, for large arrays, e.g. 2M entries, there is a 14% gain.&lt;br/&gt;
But it is 14% out of a small number, so I guess it is not a big deal. Sorry&lt;br/&gt;
for the false alarm.&lt;/p&gt;

&lt;p&gt;-John&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 23 Oct 2007 16:15:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7205</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxrmf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20794</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>