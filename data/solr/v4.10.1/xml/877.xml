<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:23:13 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-877/SOLR-877.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-877] Access to Lucene&apos;s TermEnum capabilities</title>
                <link>https://issues.apache.org/jira/browse/SOLR-877</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;I wrote a simple SearchComponent on the plane the other day that gives access to Lucene&apos;s TermEnum capabilities.  I think this will be useful for doing auto-suggest and other term based operations.  My first draft is not distributed, but it probably should be made to do so eventually. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12409123">SOLR-877</key>
            <summary>Access to Lucene&apos;s TermEnum capabilities</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                    <reporter username="gsingers">Grant Ingersoll</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 Nov 2008 15:39:39 +0000</created>
                <updated>Tue, 10 Nov 2009 15:51:51 +0000</updated>
                            <resolved>Sat, 6 Dec 2008 14:13:20 +0000</resolved>
                                                    <fixVersion>1.4</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12650232" author="gsingers" created="Mon, 24 Nov 2008 15:51:45 +0000"  >&lt;p&gt;First draft&lt;/p&gt;</comment>
                            <comment id="12650981" author="gsingers" created="Wed, 26 Nov 2008 12:32:54 +0000"  >&lt;p&gt;This is close to ready to commit.&lt;/p&gt;</comment>
                            <comment id="12651562" author="gsingers" created="Fri, 28 Nov 2008 13:31:13 +0000"  >&lt;p&gt;Committed revision 721491.&lt;/p&gt;

&lt;p&gt;This commit is slightly different from the last patch.  Fixed a couple of minor issues and added the ability to exclude the lower bound.&lt;/p&gt;</comment>
                            <comment id="12651598" author="yseeley@gmail.com" created="Fri, 28 Nov 2008 16:38:12 +0000"  >&lt;p&gt;Looks useful, esp for distributed idf when we get around to it.&lt;br/&gt;
A quick review:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;terms.fl&quot;, fl normally stands for field list.  Would this make more sense as &quot;terms.f&quot;?&lt;/li&gt;
	&lt;li&gt;strings are returned instead of integers for the term count (it&apos;s even more obvious in JSON output)&lt;/li&gt;
	&lt;li&gt;how does one ask for &quot;all terms after foo?&quot;  the docs suggest that upper or rows &lt;b&gt;must&lt;/b&gt; be set... is the only way to set a really high rows value? If so, allowing terms.rows=-1 for &quot;unlimited&quot; might be nicer.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Actually, this is very much like faceting.... perhaps we should use the same parameters:&lt;br/&gt;
terms.field&lt;br/&gt;
terms.offset&lt;br/&gt;
terms.limit&lt;br/&gt;
terms.mincount (future)&lt;br/&gt;
terms.sort (future)&lt;/p&gt;

&lt;p&gt;If this is to be useful for distributed search, it needs to be able to handle the direct specifications of terms in multiple fields.  We necessarily need to implement this now, but we should think about having an output format that doesn&apos;t need to be deprecated when it is added.  At a minimum it seems like there should be an extra level.... something like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;terms&quot;&lt;/span&gt; = {
  &lt;span class=&quot;code-quote&quot;&gt;&quot;myfield&quot;&lt;/span&gt; = { &lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;=10, &lt;span class=&quot;code-quote&quot;&gt;&quot;bar&quot;&lt;/span&gt;=5, ...}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or if we want to get even more like faceting with the output:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;terms&quot;&lt;/span&gt; = {
  &lt;span class=&quot;code-quote&quot;&gt;&quot;fields&quot;&lt;/span&gt; = {
    &lt;span class=&quot;code-quote&quot;&gt;&quot;myfield&quot;&lt;/span&gt; = {&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;=10,...}
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;terms.upr.incl&quot; and &quot;terms.lwr.incl&quot; hurt the eyes a little since we already have &quot;lower&quot; and &quot;upper&quot; in the names of other terms - seems error prone (but this is a purely aesthetic thing).&lt;/li&gt;
	&lt;li&gt;This is supposedly useful for auto suggest - how do I go about asking for all terms starting with &quot;abc&quot;?  Shouldn&apos;t there be a &quot;terms.prefix&quot; (just like faceting)?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12651603" author="gsingers" created="Fri, 28 Nov 2008 16:50:36 +0000"  >&lt;p&gt;Yeah, it is sort of like faceting, but I didn&apos;t want to get too close to it, otherwise we&apos;re just duplicating effort.  I wanted it to be really lightweight.  We can add the pieces suggested here.  I&apos;ll switch to int output right now.&lt;/p&gt;</comment>
                            <comment id="12651604" author="gsingers" created="Fri, 28 Nov 2008 16:53:33 +0000"  >&lt;p&gt;Fixed the int issue.&lt;/p&gt;


&lt;p&gt;Committed revision 721534.&lt;/p&gt;</comment>
                            <comment id="12651607" author="yseeley@gmail.com" created="Fri, 28 Nov 2008 17:05:19 +0000"  >&lt;p&gt;It&apos;s not about duplicating effort (implementation), it&apos;s about reusing interface conventions, and what makes the most sense.&lt;/p&gt;</comment>
                            <comment id="12651609" author="gsingers" created="Fri, 28 Nov 2008 17:10:47 +0000"  >&lt;p&gt;The field thing makes sense, too.  I thought about it and originally decided against it to avoid having to ever go to deep into nested NamedLists, but in hindsight, it does make sense to be able to send in multiple fields, which means we can keep the terms.fl param.&lt;/p&gt;</comment>
                            <comment id="12651713" author="ehatcher" created="Sat, 29 Nov 2008 12:47:59 +0000"  >&lt;p&gt;Do note that suggestions using this component will be across the entire index, not confined with q/fq constraints.  For that capability, look to the facet.prefix feature of the facet component.&lt;/p&gt;</comment>
                            <comment id="12651715" author="gsingers" created="Sat, 29 Nov 2008 13:58:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;It&apos;s not about duplicating effort (implementation), it&apos;s about reusing interface conventions, and what makes the most sense. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, I see what you mean.  For some reason, though, I tend to think of TermEnum in the terms of lower bound and upper bound instead of offset, b/c offset implies you are a certain number of items into an array (i.e. foo&lt;span class=&quot;error&quot;&gt;&amp;#91;10&amp;#93;&lt;/span&gt;), whereas lower bound just feels looser to me.  Semantics, I know.  As for term.limit, isn&apos;t that faceting duplicating the &quot;rows&quot; parameter?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I just committed several changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added terms.prefix so now the auto-suggest should be possible.  See the Wiki for an example&lt;/li&gt;
	&lt;li&gt;Changed upr.incl -&amp;gt; upper.incl and lwr.incl -&amp;gt; lower.incl&lt;/li&gt;
	&lt;li&gt;Fixed a but w/ lower.incl = false that skipped the next term even if the first term was not a match for the input lower bound term.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Committed revision 721681.&lt;/p&gt;</comment>
                            <comment id="12651717" author="yseeley@gmail.com" created="Sat, 29 Nov 2008 14:18:27 +0000"  >&lt;p&gt;For the purposes of this component, I think of TermEnum as an implementation, not the interface.... people will eventually want to do things like sort by high docfreq (just as in faceting), or only list terms above a certain count, or only list terms matching a certain pattern, etc.  All of these can make sense since we can do it more efficiently closer to the data.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I tend to think of TermEnum in the terms of lower bound and upper bound instead of offset&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, offset doesn&apos;t make as much sense with the current semantics (but it might later).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As for term.limit, isn&apos;t that faceting duplicating the &quot;rows&quot; parameter?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, we unfortunately have two ways of specifying this (&quot;rows&quot; and &quot;limit&quot;).  I think limit is the better name though (and this will be highly associated with faceting in people&apos;s mind I think).&lt;/p&gt;</comment>
                            <comment id="12652603" author="kheechin" created="Tue, 2 Dec 2008 23:56:56 +0000"  >&lt;p&gt;As a solr-user who uses this function for auto-complete, I&apos;d like to filter out terms with a low-frequency count. Thus, I&apos;ve implemented a quick-hack, against a 28th Nov checkout.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;/src/java/org/apache/solr/common/params/TermsParams.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

  &lt;span class=&quot;code-comment&quot;&gt;// Optional.  The minimum value of docFreq to be returned.  1 by &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; TERMS_FREQ_MIN = TERMS_PREFIX + &lt;span class=&quot;code-quote&quot;&gt;&quot;freqmin&quot;&lt;/span&gt;;
   &lt;span class=&quot;code-comment&quot;&gt;// Optional.  The maximum value of docFreq to be returned.  -1 by &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; means no boundary
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; TERMS_FREQ_MAX = TERMS_PREFIX + &lt;span class=&quot;code-quote&quot;&gt;&quot;freqmax&quot;&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 


&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;/src/java/org/apache/solr/handler/component/TermsComponent.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

    &lt;span class=&quot;code-comment&quot;&gt;// At lines 55-56, after initializing &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; upperIncl and lowerIncl
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; freqmin = params.getInt(TermsParams.TERMS_FREQ_MIN,1); &lt;span class=&quot;code-comment&quot;&gt;// initialize freqmin
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; freqmax = params.getInt(TermsParams.TERMS_FREQ_MAX,-1); &lt;span class=&quot;code-comment&quot;&gt;// initialize freqmax
&lt;/span&gt;    
    &lt;span class=&quot;code-comment&quot;&gt;// At line 69, replacing terms.add(theText, termEnum.docFreq());,    
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (termEnum.docFreq() &amp;gt;= freqmin &amp;amp;&amp;amp; (freqmax==-1 || (termEnum.docFreq() &amp;lt;= freqmax))) {
        terms.add(theText, termEnum.docFreq());
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        i--;
    } 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;The new parameters could be used by calling&lt;br/&gt;
  terms.freqmin=&amp;lt;value&amp;gt;&lt;br/&gt;
  terms.freqmax=&amp;lt;value&amp;gt;&lt;br/&gt;
both of which, are optional.&lt;/p&gt;</comment>
                            <comment id="12652623" author="gsingers" created="Wed, 3 Dec 2008 00:30:46 +0000"  >&lt;p&gt;Can you supply as a patch with some simple unit tests?&lt;/p&gt;</comment>
                            <comment id="12652879" author="kheechin" created="Wed, 3 Dec 2008 18:10:53 +0000"  >&lt;p&gt;As req, however, I have only done a single test case, but it should be trivial to add on more test cases in future.&lt;/p&gt;</comment>
                            <comment id="12653184" author="noble.paul" created="Thu, 4 Dec 2008 05:52:29 +0000"  >&lt;p&gt;We may need a faster solution for the autoSuggest feature. &lt;br/&gt;
This can be quite slow because we are doing a string compare for each string .Considering the fact that autoSuggest gets TOO MANY hits in a typical website it should not be doing so much of processing&lt;/p&gt;

&lt;p&gt;We must use something like this &lt;a href=&quot;http://en.wikipedia.org/wiki/Radix_tree&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Radix_tree&lt;/a&gt; to make it efficient and build the tree in the beginning (and after every commit).  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-706&quot; title=&quot;Fast auto-complete suggestions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-706&quot;&gt;&lt;del&gt;SOLR-706&lt;/del&gt;&lt;/a&gt; can be closed if that is included&lt;/p&gt;</comment>
                            <comment id="12653187" author="yseeley@gmail.com" created="Thu, 4 Dec 2008 06:01:45 +0000"  >&lt;p&gt;lol - didn&apos;t take too long for other faceting like features to pop up (i.e. facet.mincount).&lt;br/&gt;
We really should reuse the facet interface terminology here:  limit, mincount, etc.&lt;/p&gt;</comment>
                            <comment id="12653189" author="yseeley@gmail.com" created="Thu, 4 Dec 2008 06:04:25 +0000"  >&lt;p&gt;Noble: would optionally using something like a radix tree change the external interface?  That&apos;s what we should be focused most on now in order to enable seamlessly adding optimizations in the future.&lt;/p&gt;</comment>
                            <comment id="12653201" author="noble.paul" created="Thu, 4 Dec 2008 06:29:53 +0000"  >&lt;p&gt;autosuggest is a very commonly used feature. And when they are used , the hits are just too many. &lt;/p&gt;

&lt;p&gt;we can add extra options to optimize or not   (say memTree=true/false). &lt;/p&gt;

&lt;p&gt;If the option is set we can build a the data structure . Potentially this tree can consume a lot of memory if there are too many terms . Users must have an option to turn it off.&lt;/p&gt;

&lt;p&gt;The feature may be added with faceting component or the TermComponent. The problem here is that these components are already overloaded.with features. Adding this small option into these can cause more confusion. &lt;/p&gt;

&lt;p&gt;IMHO we should not pack too many features into one component unless we are sure that they are mostly used together. (For instance faceting and autosuggest are rarely done as a part of one request ).It would be better to write separate components for each functionality . Internally the components can share code and the users can mix and match if they need to&lt;/p&gt;
</comment>
                            <comment id="12653202" author="yseeley@gmail.com" created="Thu, 4 Dec 2008 06:35:50 +0000"  >&lt;p&gt;Regardless of how optimizations are selected or turned on/off, do you see anything in the current API that we should change now to enable optimization later (or now for all I care).  I&apos;m only asking about the API.&lt;/p&gt;</comment>
                            <comment id="12653207" author="noble.paul" created="Thu, 4 Dec 2008 06:49:40 +0000"  >&lt;p&gt;No changes in the TermComponent API (I mean the HTTP API). &lt;br/&gt;
May be a config param (in solrconfig.xml)&lt;/p&gt;</comment>
                            <comment id="12654066" author="gsingers" created="Sat, 6 Dec 2008 13:24:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;lol - didn&apos;t take too long for other faceting like features to pop up (i.e. facet.mincount).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We really should reuse the facet interface terminology here: limit, mincount, etc. &lt;/p&gt;

&lt;p&gt;Yeah, Yonik, I&apos;m starting to think of this as Term Faceting.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I still like rows better than limit, but will change Khee&apos;s params to be mincount and maxcount&lt;/p&gt;</comment>
                            <comment id="12654102" author="yseeley@gmail.com" created="Sat, 6 Dec 2008 14:12:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;I still like rows better than limit,&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So are you advocating deprecating facet.limit and adding facet.rows,&lt;br/&gt;
or that aligning the APIs doesn&apos;t matter in this case?&lt;/p&gt;</comment>
                            <comment id="12654103" author="gsingers" created="Sat, 6 Dec 2008 14:12:24 +0000"  >&lt;p&gt;Noble, have you done any performance testing of this approach versus the radix tree (or other tree/trie approaches)?&lt;/p&gt;

&lt;p&gt;AIUI, if you do the tree approach, doesn&apos;t that mean you need to build the tree from all of the terms in a given field?  And then what about if you want to go across multiple fields?  Seems like that would be a pretty large footprint.  In some sense, the Term dictionary in Lucene is already very similar to this structure, except it can&apos;t do the character matching like you are proposing (but it does very efficiently encodes the terms)&lt;/p&gt;</comment>
                            <comment id="12654104" author="gsingers" created="Sat, 6 Dec 2008 14:13:01 +0000"  >&lt;p&gt;Committed revision 723985.  Thanks, Khee!  I slightly changed the patch to use &quot;mincount&quot; and &quot;maxcount&quot; per Yonik&apos;s suggestion to overlap w/ faceting.&lt;/p&gt;</comment>
                            <comment id="12654110" author="gsingers" created="Sat, 6 Dec 2008 14:27:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;So are you advocating deprecating facet.limit and adding facet.rows,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;or that aligning the APIs doesn&apos;t matter in this case?&lt;/p&gt;

&lt;p&gt;I don&apos;t know.  Does every param need to be consistent?  If that is the case, then I guess we should either decide on rows or limit across all of them.  &lt;/p&gt;

&lt;p&gt;Otherwise, I mean, all of these end up having a prefix attached to them (i.e. terms.rows), so it may not be a big deal, either.  I&apos;m fine either way, I guess.  Your call.&lt;/p&gt;</comment>
                            <comment id="12654118" author="yseeley@gmail.com" created="Sat, 6 Dec 2008 15:21:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;Does every param need to be consistent?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No... there&apos;s certainly no mandate... &quot;rows&quot; and &quot;facet.limit&quot; are established enough now that neither should be changed IMO.&lt;br/&gt;
It just seems like more consistency rather than less generally seems like a good thing, balanced with other factors of course.  It also affects usability - if people think about this more like faceting, they are more likely to quickly type terms.limit by mistake.&lt;/p&gt;

&lt;p&gt;Of course these things are aesthetic and subjective  - would be nice to hear from someone else on preferences before a release.&lt;/p&gt;</comment>
                            <comment id="12654120" author="yseeley@gmail.com" created="Sat, 6 Dec 2008 15:45:10 +0000"  >&lt;p&gt;Another thought I&apos;ll just throw out there w/o advocating: could this just be a faceting optimization?&lt;/p&gt;

&lt;p&gt;If the faceting base query is &lt;b&gt;:&lt;/b&gt;, and one can ignore deleted docs, then the facet counts are equivalent to the term df here.  So this could be implemented as an optimization to faceting w/ the addition of a facet.ignoreDeletes parameter.  Then the distributed part would already be done (once facet.sort=false is implemented for distributed search).&lt;/p&gt;</comment>
                            <comment id="12654134" author="noble.paul" created="Sat, 6 Dec 2008 16:56:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;have you done any performance testing of this approach versus the radix tree (or other tree/trie approaches)? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I haven&apos;t done a perf comparison. But , it occurred to me as I looked at the code .It goes through each Term one by one and does a startsWith()&lt;/p&gt;

&lt;p&gt;It can be quite expensive for large no:of Terms&lt;/p&gt;

&lt;p&gt;Memory consumption can be a problem. &lt;br/&gt;
That is why I suggested a config param. User can make a call as to whether he wants to pay that price and he can afford that.&lt;/p&gt;
</comment>
                            <comment id="12654164" author="gsingers" created="Sun, 7 Dec 2008 00:18:50 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Another thought I&apos;ll just throw out there w/o advocating: could this just be a faceting optimization?&lt;/p&gt;

&lt;p&gt;If the faceting base query is :, and one can ignore deleted docs, then the facet counts are equivalent to the term df here. So this could be implemented as an optimization to faceting w/ the addition of a facet.ignoreDeletes parameter. Then the distributed part would already be done (once facet.sort=false is implemented for distributed search).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmmm, probably true.  I tend to think of this as pretty lightweight, but I see no reason not to make your suggested changes in the facet code either.&lt;/p&gt;</comment>
                            <comment id="12707594" author="yseeley@gmail.com" created="Sat, 9 May 2009 02:33:52 +0100"  >&lt;p&gt;I&apos;ve been reviewing some interfaces in prep for the 1.4 release....  Here&apos;s a patch to this request handler:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixes the labels for non-text fields (makes them human readable)&lt;/li&gt;
	&lt;li&gt;adds a terms.raw parameter just in case you really do want the raw internal indexed form of the term&lt;/li&gt;
	&lt;li&gt;changes terms.rows to terms.limit to match faceting (as predicted, people want to sort by freq too, so this is much closer to faceting than anything else)&lt;/li&gt;
	&lt;li&gt;changes the name of the request handler in the example schema to the more generic /terms (from /autoSuggest).  I could see this becoming a standard useful request handler, and limiting it to /autoSuggest doesn&apos;t sound right&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll commit shortly barring objections.&lt;/p&gt;</comment>
                            <comment id="12707601" author="mattweber" created="Sat, 9 May 2009 04:27:33 +0100"  >&lt;p&gt;I wrote a patch for freq. sorting thar is attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1156&quot; title=&quot;Sort TermsComponent results by frequency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1156&quot;&gt;&lt;del&gt;SOLR-1156&lt;/del&gt;&lt;/a&gt;. I will update that patch once you commit your latest changes.&lt;/p&gt;</comment>
                            <comment id="12707661" author="yseeley@gmail.com" created="Sat, 9 May 2009 14:06:32 +0100"  >&lt;p&gt;Committed latest changes, will update wiki shortly.&lt;/p&gt;</comment>
                            <comment id="12707667" author="yseeley@gmail.com" created="Sat, 9 May 2009 14:43:02 +0100"  >&lt;p&gt;Hmmm, looking at the wiki examples, I think there are some more quick improvements we can do...&lt;/p&gt;

&lt;p&gt;From the wiki:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;To use in auto-suggest, add in a lower bound, an upper bound and make the lower bound exclusive of the input term, as in: &lt;a href=&quot;http://localhost:8983/solr/terms?terms.fl=name&amp;amp;terms.lower=at&amp;amp;terms.prefix=at&amp;amp;terms.lower.incl=false&amp;amp;terms.upper=b&amp;amp;indent=true&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/terms?terms.fl=name&amp;amp;terms.lower=at&amp;amp;terms.prefix=at&amp;amp;terms.lower.incl=false&amp;amp;terms.upper=b&amp;amp;indent=true&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Unless I&apos;m missing something, it doesn&apos;t make sense to exclude the lower bound... seems like it would often be useful to know if what the user typed in matched a term in the index.... excluding it would lead one to believe that it doesn&apos;t exist.&lt;/p&gt;

&lt;p&gt;But the improvement is that one should simply be able to specify a prefix:&lt;br/&gt;
&lt;a href=&quot;http://localhost:8983/solr/terms?terms.fl=name&amp;amp;terms.prefix=at&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/terms?terms.fl=name&amp;amp;terms.prefix=at&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rest should be implementation details in Solr to make it efficient (i.e. Solr should know to start at &quot;at&quot; in the TermEnum if that&apos;s the prefix.)&lt;/p&gt;</comment>
                            <comment id="12707677" author="yseeley@gmail.com" created="Sat, 9 May 2009 15:42:29 +0100"  >&lt;p&gt;Found another bug: null pointer exception if you try a term enum past the end of the index (where lucene will return null from the term enum):&lt;br/&gt;
&lt;a href=&quot;http://localhost:8983/solr/terms?terms.fl=zzz_s&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/terms?terms.fl=zzz_s&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12707723" author="gsingers" created="Sun, 10 May 2009 00:32:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;Unless I&apos;m missing something, it doesn&apos;t make sense to exclude the lower bound... seems like it would often be useful to know if what the user typed in matched a term in the index.... excluding it would lead one to believe that it doesn&apos;t exist.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think excluding the lower bound allows you to get the &lt;em&gt;next&lt;/em&gt; item for suggestion, but I suppose it is up to the app to decide whether they want to confirm the existing word, or just suggest what could come next.&lt;/p&gt;</comment>
                            <comment id="12707729" author="yseeley@gmail.com" created="Sun, 10 May 2009 02:30:08 +0100"  >&lt;p&gt;OK, I just committed a fix for the null pointer exceptions, changed to use intern&apos;d comparisons, and a little restructuring.  Hopefully that&apos;s it.&lt;/p&gt;</comment>
                            <comment id="12775586" author="gsingers" created="Tue, 10 Nov 2009 15:51:51 +0000"  >&lt;p&gt;Bulk close for Solr 1.4&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12402544">SOLR-706</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12395198" name="SOLR-877.patch" size="4168" author="kheechin" created="Wed, 3 Dec 2008 18:10:53 +0000"/>
                            <attachment id="12394737" name="SOLR-877.patch" size="16863" author="gsingers" created="Wed, 26 Nov 2008 12:32:54 +0000"/>
                            <attachment id="12394562" name="SOLR-877.patch" size="12253" author="gsingers" created="Mon, 24 Nov 2008 15:51:44 +0000"/>
                            <attachment id="12407681" name="SOLR-877_2.patch" size="13111" author="yseeley@gmail.com" created="Sat, 9 May 2009 02:33:52 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 28 Nov 2008 16:38:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6753</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxonr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20314</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>