<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:25:31 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-486/SOLR-486.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-486] Support binary formats for QueryresponseWriter</title>
                <link>https://issues.apache.org/jira/browse/SOLR-486</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;QueryResponse writer only allows text data to be written.&lt;/p&gt;

&lt;p&gt;So it is not possible to implement a binary protocol . Create another interface which has a method &lt;br/&gt;
write(OutputStream os, SolrQueryRequest request, SolrQueryResponse response)&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12389456">SOLR-486</key>
            <summary>Support binary formats for QueryresponseWriter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                    <reporter username="noble.paul">Noble Paul</reporter>
                        <labels>
                    </labels>
                <created>Mon, 25 Feb 2008 08:08:16 +0000</created>
                <updated>Fri, 10 May 2013 11:39:14 +0100</updated>
                            <resolved>Tue, 15 Apr 2008 21:34:03 +0100</resolved>
                                                    <fixVersion>1.3</fixVersion>
                                    <component>clients - java</component>
                    <component>search</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12572024" author="noble.paul" created="Mon, 25 Feb 2008 08:16:54 +0000"  >&lt;p&gt;Without breaking the existing stuff we can add another interface&lt;/p&gt;

&lt;p&gt;BinaryQueryResponse extends QueryResponseWriter{&lt;br/&gt;
public void write(OutputStream out, SolrQueryRequest request,SolrQueryResponse response) throws IOException;&lt;/p&gt;

&lt;p&gt;and in the SolrDispatchFilter add the following linesQueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);&lt;/p&gt;

&lt;p&gt;if (responseWriter instanceof BinaryQueryResponse ) &lt;/p&gt;
{
               BinaryQueryResponse binaryResp = (Object)
responseWriter;
binaryResp.write(response.getOutputStream(), solrReq, solrRsp);
   }
&lt;p&gt; else &lt;/p&gt;
{
      responseWriter.write(response.getWriter(), solrReq, solrRsp);
}</comment>
                            <comment id="12572351" author="noble.paul" created="Tue, 26 Feb 2008 04:04:06 +0000"  >&lt;p&gt;This patch can add support for binary formats. &lt;/p&gt;</comment>
                            <comment id="12579897" author="noble.paul" created="Tue, 18 Mar 2008 15:37:01 +0000"  >&lt;p&gt;No changes . Just synchronizing with other code changes.&lt;/p&gt;

&lt;p&gt;This is a  very useful option for users who wish to implement a binary format to improve the performance. (I plan to contribute one as soon as this is committed)&lt;/p&gt;

&lt;p&gt;Currently the java clients go though the xml response format which can eat up some time in unmarshalling . It can be quite significant if the document size is large (take the case of facet requests)&lt;/p&gt;

&lt;p&gt;I have an xml reponse which took around 30ms for unmarshalling . Binary format would have taken less than 5 ms.&lt;/p&gt;</comment>
                            <comment id="12579943" author="yseeley@gmail.com" created="Tue, 18 Mar 2008 17:38:18 +0000"  >&lt;p&gt;This patch is small enough, perhaps just combine it with the patch that implements a specific binary format.&lt;/p&gt;</comment>
                            <comment id="12579977" author="noblepaul" created="Tue, 18 Mar 2008 18:17:24 +0000"  >&lt;p&gt;I can do that.&lt;br/&gt;
I have a java class which can serialize/deserialize a NamedList using&lt;br/&gt;
which I used to send response and deserialize it back&lt;br/&gt;
I can post it as well&lt;br/&gt;
--Noble&lt;/p&gt;





&lt;p&gt;&amp;#8211; &lt;br/&gt;
--Noble Paul&lt;/p&gt;</comment>
                            <comment id="12580007" author="yseeley@gmail.com" created="Tue, 18 Mar 2008 19:05:03 +0000"  >&lt;p&gt;Great! If we can get it to handle everything that the current XML handler can handle, then we could use it by default for distributed search.&lt;/p&gt;</comment>
                            <comment id="12580026" author="yseeley@gmail.com" created="Tue, 18 Mar 2008 19:42:59 +0000"  >&lt;p&gt;I accidentally committed this in conjunction with another patch.&lt;br/&gt;
I think I&apos;ll just leave it committed though, since it looks fine.&lt;br/&gt;
We can continue to use this JIRA issue for the actual binary protocol implementation though.&lt;/p&gt;</comment>
                            <comment id="12584644" author="noble.paul" created="Wed, 2 Apr 2008 16:43:55 +0100"  >&lt;p&gt;This contains a very simple binary format implementation using DataOutputStream/DataInputStream&lt;/p&gt;

&lt;p&gt;The class that implements this functionality is NamedListCodec which mustbe used on both end of the pipe&lt;/p&gt;

&lt;p&gt;It can marshal/unmarshal a NamedList to/from a stream.&lt;/p&gt;

&lt;p&gt;It supports all the primitives and List/Map/NamedList/SolrDocument/SolrDocumentList&lt;/p&gt;

&lt;p&gt;There is a class BinaryResponseWriter implements BinaryQueryResponseWriter&lt;/p&gt;

&lt;p&gt;which converts the lucene DocList to SolrDocumentList on demand&lt;/p&gt;

&lt;p&gt;A class BinaryResponseParser extends ResponseParser &lt;/p&gt;

&lt;p&gt;is also added to solrj&lt;br/&gt;
which can be used with the CommonsHttpSolrServer&lt;/p&gt;</comment>
                            <comment id="12586286" author="noble.paul" created="Mon, 7 Apr 2008 10:09:40 +0100"  >&lt;p&gt;Added a version byte in the beginning. &lt;br/&gt;
Types, Byte and Short were missing&lt;/p&gt;</comment>
                            <comment id="12588122" author="yseeley@gmail.com" created="Fri, 11 Apr 2008 22:09:38 +0100"  >&lt;p&gt;Revised patch that switches distributed search to use the binary format.&lt;br/&gt;
Currently fails the distributed search tests though.&lt;/p&gt;</comment>
                            <comment id="12588294" author="noble.paul" created="Sat, 12 Apr 2008 19:04:01 +0100"  >&lt;p&gt;There were bugs in the previous patch and it was not writing the SolrDocumentList properly. TestDistributedSearch was failing. &lt;br/&gt;
With this patch those are fixed. &lt;/p&gt;</comment>
                            <comment id="12588402" author="yseeley@gmail.com" created="Sun, 13 Apr 2008 17:35:02 +0100"  >&lt;p&gt;I&apos;m hacking on this now... I like how you separated the dependency on lucene-specific stuff via the resolver.  The problem is that we lose streaming ability for doc lists... if someone requests 1000 documents or whatever, everything is blown up in memory which could cause an OOM.  I&apos;m adding the ability for the resolver to call back to the codec... not as nicely separated, but better results.&lt;/p&gt;</comment>
                            <comment id="12588512" author="noble.paul" created="Mon, 14 Apr 2008 09:43:50 +0100"  >&lt;p&gt;performance numbers &lt;br/&gt;
=====================&lt;br/&gt;
bin vs. xml read performance : ~3 times faster&lt;br/&gt;
bin vs. xml write performance : ~2.5 times faster&lt;br/&gt;
datasize : 35% less&lt;br/&gt;
======================&lt;br/&gt;
The test: &lt;br/&gt;
The same operation is performed 100 times and an average is taken. Before the execution, a warmup run is performed.&lt;/p&gt;

&lt;p&gt;The output of a faceted query is taken out (xml).The size of the xml is 15.7KB. It is loaded into memory and unmarshalled using XMLResponseParser . Then the same object is written to xml using XMLWriter &lt;/p&gt;

&lt;p&gt;The same dataobject is marshalled to byte[](binary) using NamedListCodec. The datasize is 10.47KB . Then it is unmarshalled using NamedListCodec &lt;/p&gt;


</comment>
                            <comment id="12588823" author="yseeley@gmail.com" created="Mon, 14 Apr 2008 23:17:27 +0100"  >&lt;p&gt;Yep, those are about the numbers I&apos;m seeing for text-heavy documents + faceting on 2 text fields and 1 integer field + highlighting (response was only generated once, but continually reused).  I think I&apos;ve got some good improvements in the queue that I can attach soon.&lt;/p&gt;

</comment>
                            <comment id="12588875" author="yseeley@gmail.com" created="Tue, 15 Apr 2008 02:57:52 +0100"  >&lt;p&gt;OK, latest version attached.&lt;/p&gt;

&lt;p&gt;The bad:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;more code, a more complex codec, harder to debug with a hex editor&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The good:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;2/3 the size of the previous binary codec (50% improvement and 1/3 the size of XML)&lt;/li&gt;
	&lt;li&gt;certain common types like named list, array, and string pack a size right in the tag byte&lt;/li&gt;
	&lt;li&gt;variable length int and long values.. saves lots of space for facet counts, etc (first 5&lt;br/&gt;
     bits of vint are packed in the tag byte)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;performance results: (9 times faster than xml, encoding + decoding)&lt;br/&gt;
  writer xml, size=6885, encodeRate=627, decodeRate=883&lt;br/&gt;
  writer json, size=3556, encodeRate=3084, decodeRate=N/A&lt;br/&gt;
  writer javabin-v1, size=3170&lt;br/&gt;
  writer javabin-current, size=2153, encodeRate=6095, decodeRate=8695 &lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;performance changes:&lt;/li&gt;
	&lt;li&gt;FastInputStream, FastOutputStream: unsynchronized buffered streams&lt;/li&gt;
	&lt;li&gt;toObject() changes to sortable numerics - bypass string and go straight to numeric type&lt;/li&gt;
	&lt;li&gt;tons of other little things, including everything that was used to decrease the size&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;string values can now be &amp;gt; 64K (Java writeUTF is limited to that size)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;memory use changes: only &quot;explode&quot; one doc at a time in a doclist&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testing changes: more thorough random testing... (good thing too - found a long encoding bug)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Noble: I started from your second-to-last patch (we overlapped in the Document fixes...) I diffed your patches and I believe I saw everything.&lt;/p&gt;

&lt;p&gt;TODO: preserve SimpleOrderedMap vs NamedList?&lt;br/&gt;
TODO: make SolrJ default?&lt;/p&gt;
</comment>
                            <comment id="12588900" author="noble.paul" created="Tue, 15 Apr 2008 06:10:06 +0100"  >&lt;p&gt;The changes look good , infact very good. it is highly optimized. &lt;/p&gt;

&lt;p&gt;You already incorporated the Document changes which i added &lt;/p&gt;

&lt;p&gt;The writeUTF bug was a very critical one which I noticed after cutting the patch.Anyway you fixed it.&lt;/p&gt;

&lt;p&gt;I guess one test is failing in TestDistributedSearch&lt;br/&gt;
unit.framework.AssertionFailedError: .response.maxScore:4321.0!=null&lt;br/&gt;
       at org.apache.solr.TestDistributedSearch.compareResponses(TestDistributedSearch.java:416)&lt;br/&gt;
       .....&lt;/p&gt;

&lt;p&gt;need to take a look&lt;/p&gt;


&lt;p&gt;I vote vote for preserving SimpleOrderedMap.(anyway there is are two reserved types one can be taken up)&lt;/p&gt;

&lt;p&gt;Makee sense to use this in SolrJ . But there are people using SolrJ with Solr1.2 and older versions of Solr1.3 in production. We must take care of that in the code. &lt;/p&gt;


&lt;p&gt;send wt=javabin&lt;br/&gt;
read the response header, if the content type is application/octet-steram use BinaryResponseParser or use XMLResponseparser&lt;/p&gt;

</comment>
                            <comment id="12588904" author="iholsman" created="Tue, 15 Apr 2008 06:19:31 +0100"  >&lt;p&gt;i&apos;m a bit clueless here.&lt;/p&gt;

&lt;p&gt;you mention that it is 9 times faster. how big a component is encoding/decoding in the general scheme of things? (ie compared to actually getting the results)&lt;/p&gt;

</comment>
                            <comment id="12588909" author="noble.paul" created="Tue, 15 Apr 2008 06:29:08 +0100"  >&lt;p&gt;If the response not served from  cached there is some extra processing , in which case the share of marshalling/unmarshalling is lower. In cases where the response is given out of a cache it is  probably the only CPU intensive activity.&lt;/p&gt;

&lt;p&gt;Overall performance also involves the network latency . It is harder to count that because it is a very subjective number &lt;/p&gt;</comment>
                            <comment id="12589031" author="noble.paul" created="Tue, 15 Apr 2008 12:17:36 +0100"  >&lt;p&gt;Yonik: it would be nice the change the interface ObjectResolver as follows&lt;/p&gt;

&lt;p&gt;public static interface ObjectResolver&lt;/p&gt;
{
    public Object resolve(Object o, NamedListCodec codec) throws IOException;
}

</comment>
                            <comment id="12589074" author="yseeley@gmail.com" created="Tue, 15 Apr 2008 14:33:50 +0100"  >&lt;p&gt;Ian: you can sort of figure out what the total overhead would be given your max query rate.&lt;br/&gt;
For example, XML had an encode rate (for this particular test) of 627 messages per second (on my 3GHz P4).&lt;br/&gt;
If you wanted 100qps, XML encoding would be taking up 16% (100/627)&lt;/p&gt;

&lt;p&gt;Note that the overhead is particularly important for distributed search, given the number of messages that must be sent+received, and also the limited network bandwidth it must be done in.&lt;/p&gt;</comment>
                            <comment id="12589164" author="yseeley@gmail.com" created="Tue, 15 Apr 2008 18:46:50 +0100"  >&lt;p&gt;OK, latest changes.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SimpleOrderedMap type preserved (and I fixed some other recent code that accidentally used NamedList instead of SimpleOrderedMap).&lt;/li&gt;
	&lt;li&gt;changed resolver interface to pass codec&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;gt; I guess one test is failing in TestDistributedSearch&lt;/p&gt;

&lt;p&gt;Are you still seeing this?&lt;/p&gt;</comment>
                            <comment id="12589224" author="yseeley@gmail.com" created="Tue, 15 Apr 2008 21:33:53 +0100"  >&lt;p&gt;Committed.  Thanks Noble!&lt;/p&gt;</comment>
                            <comment id="12602740" author="ryantxu" created="Thu, 5 Jun 2008 19:29:56 +0100"  >&lt;p&gt;Should we make this the default parser for CommonsHttpSolrServer?&lt;br/&gt;
I think so...&lt;/p&gt;</comment>
                            <comment id="12602741" author="ehatcher" created="Thu, 5 Jun 2008 19:33:24 +0100"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12602918" author="noble.paul" created="Fri, 6 Jun 2008 06:22:57 +0100"  >&lt;p&gt;+1&lt;br/&gt;
It is OK to make it default. &lt;br/&gt;
But we will have to document properly that users with Solr1.2 must explicitly use XMLResponseParser or they will see failure.&lt;/p&gt;

&lt;p&gt;or we will have to modify the &lt;em&gt;CommonsHttpSolrServer&lt;/em&gt; to fallback to XMLResponseParser if content type header is text/xml. (This is more elegant solution)&lt;/p&gt;</comment>
                            <comment id="12603135" author="noble.paul" created="Fri, 6 Jun 2008 19:49:46 +0100"  >&lt;p&gt;one test failed in distributed search results when I changed the the default format to binary&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;testcase classname=&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.solr.TestDistributedSearch&quot;&lt;/span&gt; name=&lt;span class=&quot;code-quote&quot;&gt;&quot;testDistribSearch&quot;&lt;/span&gt; time=&lt;span class=&quot;code-quote&quot;&gt;&quot;5.406&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;failure message=&lt;span class=&quot;code-quote&quot;&gt;&quot;.response.maxScore:4321.0!=null&quot;&lt;/span&gt; type=&lt;span class=&quot;code-quote&quot;&gt;&quot;junit.framework.AssertionFailedError&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;junit.framework.AssertionFailedError: .response.maxScore:4321.0!=null
	at org.apache.solr.TestDistributedSearch.compareResponses(TestDistributedSearch.java:416)
	at org.apache.solr.TestDistributedSearch.query(TestDistributedSearch.java:192)
	at org.apache.solr.TestDistributedSearch.doTest(TestDistributedSearch.java:456)
	at org.apache.solr.TestDistributedSearch.testDistribSearch(TestDistributedSearch.java:427)
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/failure&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/testcase&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I could not figure out the reason&lt;/p&gt;</comment>
                            <comment id="12603136" author="ryantxu" created="Fri, 6 Jun 2008 19:50:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;or we will have to modify the CommonsHttpSolrServer to fallback to XMLResponseParser if content type header is text/xml. (This is more elegant solution)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t see how this would help.  If the ResponseParser for CommonsHttpSolrServer is the binary one, it will send the parameter: wt=javabin &amp;#8211; in a 1.2 setup, that should give an error.&lt;/p&gt;

&lt;p&gt;I think documenting that to use this for 1.2 you should set the XMLResponseParser in the constructor is good enough.&lt;/p&gt;</comment>
                            <comment id="12603281" author="noble.paul" created="Sat, 7 Jun 2008 03:47:54 +0100"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t see how this would help.  If the ResponseParser for CommonsHttpSolrServer is the binary one, it will send the parameter: wt=javabin &amp;#8211; in a 1.2 setup, that should give an error.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;if the wt= javabin is absent the server deafults to &apos;xml&apos; so the response format will be xml for Solr 1.2.  However ,it is important that we make the default format to binary before the 1.3 release. &lt;/p&gt;

&lt;p&gt;Documeting this behavior is good enough.&lt;/p&gt;</comment>
                            <comment id="12603475" author="noble.paul" created="Mon, 9 Jun 2008 06:46:19 +0100"  >&lt;p&gt;I debugged through the problems &lt;/p&gt;

&lt;p&gt;yonik: NamedlistCodec is agnostic of the request params. So wherever it has to write SolrDocumentList or SolrDocument it writes down whatever is available.&lt;/p&gt;

&lt;p&gt;Cases where the maxScore is not asked for and the value is present in SolrDocumentList  it is writtten down.&lt;/p&gt;

&lt;p&gt;May be we should ignore it  if &apos;maxScore&apos; is available without being asked for&lt;/p&gt;

&lt;p&gt;&apos;id&apos; are also written down in the same fashion.&lt;/p&gt;

&lt;p&gt;Should it be handed over to &lt;em&gt;BinaryResponseWriter&lt;/em&gt; to write the values so that the context is available?&lt;/p&gt;</comment>
                            <comment id="12603480" author="noble.paul" created="Mon, 9 Jun 2008 07:46:33 +0100"  >&lt;p&gt;changes required to make binary format default in solrJ &lt;/p&gt;</comment>
                            <comment id="12605126" author="noble.paul" created="Sun, 15 Jun 2008 05:12:13 +0100"  >&lt;p&gt; If we take a look at the data that is written down by NamedListCodec there are a lot of &quot;names&quot; which are repeated.  If we could avoid the repetitions we can achieve better optimization. &lt;br/&gt;
Can we have another type EXTERN_STRING &lt;br/&gt;
The NamedListCodec maintains a Map&amp;lt;String,Integer&amp;gt;  of EXTERN_STRING vs index as it is written out. When the same string is written it checks up in the List whether it already has a reference.&lt;/p&gt;

&lt;p&gt;While decoding all the EXTERN_STRING values are copied into a List &amp;lt;String&amp;gt;. When an EXTERN_STRING with an index comes it is copied from the List.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;NamedListCodec.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; stringsCount  =  0;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; stringsMap;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; &amp;gt; stringsList;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void writeExternString(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; s) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(s == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      writeTag(NULL) ;
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
    &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; idx = stringsMap == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; : stringsMap.get(s);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(idx == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) idx =0;
    writeTag(EXTERN_STRING,idx);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(idx == 0){
      writeStr(s);
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(stringsMap == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) stringsMap = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;();
      stringsMap.put(s,++stringsCount);
    }

  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;  readExternString(FastInputStream fis) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; idx = readSize(fis);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (idx != 0) {&lt;span class=&quot;code-comment&quot;&gt;// idx != 0 is the index of the extern string
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; stringsList.get(idx-1);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {&lt;span class=&quot;code-comment&quot;&gt;// idx == 0 means it has a string value
&lt;/span&gt;      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; s = (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;) readVal(fis);
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(stringsList == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ) stringsList = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;();
      stringsList.add(s);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; s;
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12605210" author="noble.paul" created="Mon, 16 Jun 2008 08:09:58 +0100"  >&lt;p&gt;This include changes for making Binary format the default for SolrJ and the changes for optimized write of Field names in Documents. So , for a response  with 5 fields and 10 records only 5 names are written instead of 50. there is an overhead of an extra byte per unique string (total 5 bytes in this case) &lt;/p&gt;</comment>
                            <comment id="12605306" author="yseeley@gmail.com" created="Mon, 16 Jun 2008 15:48:57 +0100"  >&lt;p&gt;Thanks Noble, this looks pretty good.&lt;/p&gt;

&lt;p&gt;I had previously considered caching strings via some kind of sliding window... keep track of the last 100 or so string values written under some certain length, and then if you see a string again in that window, write a reference (an index that says how many values ago it was seen).&lt;/p&gt;

&lt;p&gt;For Solr responses in general, it seems like the main duplication will be in field names (which you have taken care of).  The only other duplication I can think of would be the &quot;id&quot; field values (used as a key in other maps such as highlighting), and any duplication that is custom to the collection (such as string values for a type field, etc).&lt;/p&gt;

&lt;p&gt;Thoughts?  I&apos;d be happy to commit this version, or give you time to try out an alternative if you think it might be worth it (but I don&apos;t currently have time myself to implement the alternative).&lt;/p&gt;</comment>
                            <comment id="12605329" author="noble.paul" created="Mon, 16 Jun 2008 17:01:23 +0100"  >&lt;p&gt;Another  level of efficiency can be brought in by preloading the string table with well known strings like responseHeader , QTime etc . That did not look very elegant to me.  &lt;/p&gt;

&lt;p&gt;The sliding window approach is also good . But we do not have too many repeated strings unless we use highlighting etc . &lt;/p&gt;

&lt;p&gt;I guess this can go into trunk and give it enough time to &apos;settle&apos; before the release.&lt;/p&gt;</comment>
                            <comment id="12605601" author="yseeley@gmail.com" created="Tue, 17 Jun 2008 14:38:22 +0100"  >&lt;p&gt;OK, I just committed the latest changes.&lt;/p&gt;</comment>
                            <comment id="12605629" author="noble.paul" created="Tue, 17 Jun 2008 16:00:26 +0100"  >&lt;p&gt;These two constructors are inconsistent&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;CommonsHttpSolrServer.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CommonsHttpSolrServer(URL baseURL) 
  {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;(baseURL, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BinaryResponseParser());
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CommonsHttpSolrServer(URL baseURL, HttpClient client){
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;(baseURL, client, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; XMLResponseParser());
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12605648" author="yseeley@gmail.com" created="Tue, 17 Jun 2008 17:30:08 +0100"  >&lt;p&gt;Fixed (committed) the constructor inconsistency.&lt;/p&gt;</comment>
                            <comment id="12614954" author="noble.paul" created="Sat, 19 Jul 2008 07:58:59 +0100"  >&lt;p&gt;&lt;em&gt;Iterator&lt;/em&gt; was being treated like an array which is not optimal&lt;/p&gt;

&lt;p&gt;On a different note .should we use &lt;em&gt;writeExternString()&lt;/em&gt; to write all names in (NamedList, Map)&lt;/p&gt;</comment>
                            <comment id="12615036" author="noble.paul" created="Sat, 19 Jul 2008 19:57:25 +0100"  >&lt;p&gt;a better one. &lt;/p&gt;

&lt;p&gt;(I guess the approach is better even for the other collection types also. )&lt;/p&gt;</comment>
                            <comment id="12615054" author="yseeley@gmail.com" created="Sat, 19 Jul 2008 23:06:41 +0100"  >&lt;p&gt;So if I understand the reasoning behind the &quot;iterator&quot; type, it doesn&apos;t have a length up-front and instead has a terminator.... the idea being that you don&apos;t have to iterate over the entire list and buffer it, just to figure out what the length is, right?&lt;/p&gt;

&lt;p&gt;That&apos;s a good idea - but do we actually use any iterator or Iterable objects?&lt;/p&gt;
</comment>
                            <comment id="12615067" author="noble.paul" created="Sun, 20 Jul 2008 07:38:49 +0100"  >&lt;blockquote&gt;&lt;p&gt;That&apos;s a good idea - but do we actually use any iterator or Iterable objects?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We do not have it now . But NamedListCodec has a public method called &lt;em&gt;writeIterator()&lt;/em&gt; . If we leave it like that somebody may actually use it. Iterators are used to stream objects one by one and the current method implementation does not allow it.&lt;/p&gt;</comment>
                            <comment id="12615217" author="noble.paul" created="Mon, 21 Jul 2008 12:41:49 +0100"  >&lt;p&gt;name in namedlist written as extern string&lt;/p&gt;</comment>
                            <comment id="12617894" author="shalinmangar" created="Tue, 29 Jul 2008 19:20:26 +0100"  >&lt;p&gt;Yonik, can we commit Noble&apos;s latest patch?&lt;/p&gt;</comment>
                            <comment id="12617905" author="yseeley@gmail.com" created="Tue, 29 Jul 2008 19:55:14 +0100"  >&lt;p&gt;Just because an Iterator was used for writing a value does not mean that it should be reconstituted on the other side as an Iterator.  It seems like the type should still be an array, but that if a length isn&apos;t available then there should be an alternate way to serialize.&lt;/p&gt;</comment>
                            <comment id="12617907" author="yseeley@gmail.com" created="Tue, 29 Jul 2008 20:03:11 +0100"  >&lt;p&gt;I&apos;m working on a fix.&lt;/p&gt;</comment>
                            <comment id="12617919" author="yseeley@gmail.com" created="Tue, 29 Jul 2008 20:41:55 +0100"  >&lt;p&gt;OK, I committed efficient Iterator/Iterable support.  They return lists when unserialized.&lt;/p&gt;</comment>
                            <comment id="12638202" author="noble.paul" created="Thu, 9 Oct 2008 07:49:39 +0100"  >&lt;p&gt;Just the way NamedList keys can be externalized, Map keys can also be externalized.And this is backward compatible.&lt;/p&gt;

&lt;p&gt;Maps are not used very commonly in SOLR. but &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-561&quot; title=&quot;Solr replication by Solr (for windows also)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-561&quot;&gt;&lt;del&gt;SOLR-561&lt;/del&gt;&lt;/a&gt; uses maps for master-slave communication&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12386517" name="SOLR-486-iterator.patch" size="4235" author="noble.paul" created="Mon, 21 Jul 2008 12:41:48 +0100"/>
                            <attachment id="12386456" name="SOLR-486-iterator.patch" size="3371" author="noble.paul" created="Sat, 19 Jul 2008 07:58:59 +0100"/>
                            <attachment id="12384038" name="SOLR-486.patch" size="7487" author="noble.paul" created="Mon, 16 Jun 2008 08:09:58 +0100"/>
                            <attachment id="12380200" name="SOLR-486.patch" size="70293" author="yseeley@gmail.com" created="Tue, 15 Apr 2008 18:46:50 +0100"/>
                            <attachment id="12380132" name="SOLR-486.patch" size="62044" author="yseeley@gmail.com" created="Tue, 15 Apr 2008 02:57:52 +0100"/>
                            <attachment id="12379983" name="SOLR-486.patch" size="31526" author="noble.paul" created="Sat, 12 Apr 2008 19:04:01 +0100"/>
                            <attachment id="12379957" name="SOLR-486.patch" size="33157" author="yseeley@gmail.com" created="Fri, 11 Apr 2008 22:09:38 +0100"/>
                            <attachment id="12379536" name="SOLR-486.patch" size="30438" author="noble.paul" created="Mon, 7 Apr 2008 10:09:40 +0100"/>
                            <attachment id="12379146" name="SOLR-486.patch" size="29970" author="noble.paul" created="Wed, 2 Apr 2008 16:43:55 +0100"/>
                            <attachment id="12378130" name="SOLR-486.patch" size="3214" author="noble.paul" created="Tue, 18 Mar 2008 15:37:01 +0000"/>
                            <attachment id="12376469" name="SOLR-486.patch" size="2501" author="noble.paul" created="Tue, 26 Feb 2008 04:04:06 +0000"/>
                            <attachment id="12391797" name="optimizemap.patch" size="683" author="noble.paul" created="Thu, 9 Oct 2008 07:49:39 +0100"/>
                            <attachment id="12383667" name="solr-486.patch" size="5771" author="noble.paul" created="Mon, 9 Jun 2008 07:46:33 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 18 Mar 2008 17:38:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7118</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxr1j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20700</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>