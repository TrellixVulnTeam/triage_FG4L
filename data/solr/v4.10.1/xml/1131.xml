<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:18:43 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-1131/SOLR-1131.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-1131] Allow a single field type to index multiple fields</title>
                <link>https://issues.apache.org/jira/browse/SOLR-1131</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;In a few special cases, it makes sense for a single &quot;field&quot; (the concept) to be indexed as a set of Fields (lucene Field).  Consider &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-773&quot; title=&quot;Incorporate Local Lucene/Solr&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-773&quot;&gt;&lt;del&gt;SOLR-773&lt;/del&gt;&lt;/a&gt;.  The concept &quot;point&quot; may be best indexed in a variety of ways:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;geohash (sincle lucene field)&lt;/li&gt;
	&lt;li&gt;lat field, lon field (two double fields)&lt;/li&gt;
	&lt;li&gt;cartesian tiers (a series of fields with tokens to say if it exists within that region)&lt;/li&gt;
&lt;/ul&gt;

</description>
                <environment></environment>
        <key id="12423951">SOLR-1131</key>
            <summary>Allow a single field type to index multiple fields</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gsingers">Grant Ingersoll</assignee>
                                    <reporter username="ryantxu">Ryan McKinley</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Apr 2009 00:02:58 +0100</created>
                <updated>Thu, 2 May 2013 03:29:31 +0100</updated>
                            <resolved>Tue, 29 Dec 2009 02:59:21 +0000</resolved>
                                                    <fixVersion>1.5</fixVersion>
                    <fixVersion>3.1</fixVersion>
                    <fixVersion>4.0-ALPHA</fixVersion>
                                    <component>Schema and Analysis</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12703474" author="ryantxu" created="Tue, 28 Apr 2009 02:29:47 +0100"  >&lt;p&gt;This is a sketch to see how things look if we have SchemaField/FieldType return Field[] rather then Field:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  /**
+   * @deprecated use {@link #createFields(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt;)}
+   */
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Field createField(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; val, &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; boost) {
     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; type.createField(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;,val,boost);
   }
+  
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Field[] createFields(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; val, &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; boost) {
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; type.createFields(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;,val,boost);
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think this could work &amp;#8211; this would let FieldType#createFields() return a list of fields.  The issues i see are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;indexing each field adds a for loop (maybe not a big deal?)&lt;/li&gt;
	&lt;li&gt;FieldType#toInternal() may or may not relate to the actual indexed value&lt;/li&gt;
	&lt;li&gt;FieldType#getAnalyzer() &amp;#8211; I guess the same analyzer would have to apply to every field?  I&apos;m not sure what the implication is on this.&lt;/li&gt;
	&lt;li&gt;what about #getRangeQuery()&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12703545" author="ehatcher" created="Tue, 28 Apr 2009 10:08:46 +0100"  >&lt;p&gt;Perhaps this is a case where the TeeTokenFilter and friends can come into play in Solr finally?&lt;/p&gt;</comment>
                            <comment id="12703661" author="ryantxu" created="Tue, 28 Apr 2009 15:45:08 +0100"  >&lt;p&gt;&lt;a href=&quot;http://lucene.apache.org/java/2_4_1/api/org/apache/lucene/analysis/TeeTokenFilter.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;TeeTokenFilter&lt;/a&gt; look interesting.  How do you imagine it could help with letting a solr Field index multiple fields?&lt;/p&gt;

&lt;p&gt;Using the TeeTokenFilter seems like a matter of plumbing.  Perhaps we could add some properties to FieldType that create a SinkTokenizer and then use copyField (or something similar) to use the existing SinkTokenizer.&lt;/p&gt;

&lt;p&gt;I&apos;m not familiar enought with the Sink/Tee stuff to know what we would need &amp;#8211; but we should make sure any SchemaField/FieldType changes open the door to this.&lt;/p&gt;</comment>
                            <comment id="12706438" author="yseeley@gmail.com" created="Wed, 6 May 2009 15:05:23 +0100"  >&lt;blockquote&gt;&lt;p&gt;FieldType#getAnalyzer() - I guess the same analyzer would have to apply to every field?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fields in Lucene can now be pre-analyzed (which this was available when Solr was first being developed!)&lt;br/&gt;
See Field constructors that take a TokenStream..&lt;/p&gt;</comment>
                            <comment id="12780896" author="gsingers" created="Sat, 21 Nov 2009 02:52:04 +0000"  >&lt;p&gt;Brings it up to trunk.  Still needs test cases.  All other tests pass.&lt;/p&gt;</comment>
                            <comment id="12780924" author="noble.paul" created="Sat, 21 Nov 2009 06:54:31 +0000"  >&lt;p&gt;Is this a good idea? This creates an extra Object (Field[]) for every Field . For a corner case we are introducing an overhead to all the field types.&lt;/p&gt;

&lt;p&gt;Why don&apos;t we add a new interface MutlValuedFieldType which extends FieldType for this &lt;/p&gt;</comment>
                            <comment id="12780950" author="gsingers" created="Sat, 21 Nov 2009 11:17:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is this a good idea?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure yet. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why don&apos;t we add a new interface MutlValuedFieldType which extends FieldType for this &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Aren&apos;t we just substituting a very simple construction for an instanceof check?&lt;/p&gt;

&lt;p&gt;I was possibly thinking of a couple of other options, too:&lt;br/&gt;
1. add a boolean on FT for isMultiField which returns false by default, then we could check that&lt;br/&gt;
2. Add a threadlocal that stores a preconstructed array of size one which could then simply be set for the single field case, which is the most common case.&lt;/p&gt;

&lt;p&gt;My gut, however, says the object is very short lived and is likely to be of negligible cost.&lt;/p&gt;</comment>
                            <comment id="12780953" author="noble.paul" created="Sat, 21 Nov 2009 11:51:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;dd a boolean on FT for isMultiField which returns false by default, then we could check that&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;not bad&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My gut, however, says the object is very short lived and is likely to be of negligible cost.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;but, for a huge ingestion it just means several million objects created and that much extra GC&lt;/p&gt;</comment>
                            <comment id="12780954" author="gsingers" created="Sat, 21 Nov 2009 11:56:54 +0000"  >&lt;p&gt;I&apos;m also looking for ideas on how to handle the naming of the fields that are produced by this.  I think a FieldType that produces multiple fields should hide the logistics of the naming, which this patch doesn&apos;t even begin to scratch the surface of and also on the search side, how does one search against just one of the fields?&lt;/p&gt;

&lt;p&gt;Would appreciate thoughts on that.&lt;/p&gt;</comment>
                            <comment id="12780955" author="cmale" created="Sat, 21 Nov 2009 12:15:48 +0000"  >&lt;p&gt;My initial feeling is, is searching against just one field something this functionality needs to concern itself with? If someone creates a field of type Point for example, which behind the scenes is indexed as 2 fields, from a Solr schema.xml perspective it is just 1 field, and so it should be the same at the querying level.  We are trying to encapsulate the fact that the FieldType results in multiple fields.  This then frees us up to choose a naming convention that is easy for us to implement, because we don&apos;t have to concern users with the convention.&lt;/p&gt;

&lt;p&gt;If someone does want to be able to search against just one field, such as maybe being able to find documents at a certain x coordinate, rather than an x,y Point, then I think we can simply recommend they index that data in a separate field.&lt;/p&gt;</comment>
                            <comment id="12780956" author="gsingers" created="Sat, 21 Nov 2009 12:25:01 +0000"  >&lt;p&gt;I definitely agree, Chris, the interesting part is how that manifests itself in terms of implementation, which is where I am digging in at the moment.  It means the Query parsers need to handle it as well as the ResponseWriters, etc.&lt;/p&gt;</comment>
                            <comment id="12780961" author="cmale" created="Sat, 21 Nov 2009 12:32:57 +0000"  >&lt;p&gt;Those are definitely big problems.  &lt;/p&gt;

&lt;p&gt;The ResponseWriter problem could be simplified if they used SolrDocuments rather than retrieving raw Lucene Documents.  When constructing the SolrDocuments, which is done in cooperation with an IndexSchema instance, we have the information needed to bring the multiple fields together as one.  I&apos;m not sure of the performance impact of doing this, but it seems like having the ResponseWriters retrieve the data in a single consistent fashion is a good thing in the long run anyway.&lt;/p&gt;</comment>
                            <comment id="12781123" author="gsingers" created="Sun, 22 Nov 2009 13:39:29 +0000"  >&lt;p&gt;Starting to add unit tests.  Still no support on the search/response side, but groundwork for adding multiple fields per SchemaField/FieldType is now laid.  Still need a way to know that a field/fieldtype is going to output multiple fields so that we can detect them when searching, etc.&lt;/p&gt;</comment>
                            <comment id="12781948" author="gsingers" created="Tue, 24 Nov 2009 14:25:29 +0000"  >&lt;p&gt;See discussion at &lt;a href=&quot;http://search.lucidimagination.com/search/document/d24c920ddf05b4f7/solr_1131_multiple_fields_per_field_type&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search.lucidimagination.com/search/document/d24c920ddf05b4f7/solr_1131_multiple_fields_per_field_type&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12783333" author="yseeley@gmail.com" created="Sun, 29 Nov 2009 00:00:39 +0000"  >&lt;p&gt;Here&apos;s a completely untested prototype patch along the lines of how I was thinking this would work with geo.&lt;/p&gt;</comment>
                            <comment id="12783345" author="yseeley@gmail.com" created="Sun, 29 Nov 2009 01:30:53 +0000"  >&lt;p&gt;Second try - forgot to &quot;svn add&quot; the new files.&lt;/p&gt;</comment>
                            <comment id="12786586" author="gsingers" created="Sun, 6 Dec 2009 09:27:14 +0000"  >&lt;p&gt;Hey Yonik,&lt;/p&gt;

&lt;p&gt;One of the things I was debating was whether it was worthwhile to keep the single field creation or not.  I see in your patch you drop it.  I&apos;ve got a patch that keeps it.  I will try to put it up this week.&lt;/p&gt;</comment>
                            <comment id="12786894" author="yseeley@gmail.com" created="Mon, 7 Dec 2009 12:54:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;One of the things I was debating was whether it was worthwhile to keep the single field creation or not. I see in your patch you drop it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, I kept it.  And I borrowed the isPolyField() from your email thread.&lt;/p&gt;</comment>
                            <comment id="12786902" author="gsingers" created="Mon, 7 Dec 2009 13:08:38 +0000"  >&lt;p&gt;I&apos;ve got a patch with search and all the existing tests working.  Still trying to work on one test that is failing due to toInternal/external conflicts.  In the patch, I hide all the details of the internal fields, thus not requiring the dynamic field stuff.&lt;/p&gt;</comment>
                            <comment id="12786944" author="gsingers" created="Mon, 7 Dec 2009 15:27:14 +0000"  >&lt;p&gt;OK, here&apos;s my take on this.  I took Yonik&apos;s and merged it w/ a patch I had in the works.  It&apos;s not done, but all tests pass, including the new on I added (PolyFieldTest).  Yonik&apos;s move to put getFieldQuery in FieldType was just the key to answering the question of how to generate queries given a FieldType.&lt;/p&gt;

&lt;p&gt;Notes:&lt;br/&gt;
1. I changed the Geo examples to be CoordinateFieldType (representing an abstract coordinate system) and then PointFieldType which represents a point in an n-dimensional space (default 2D).  I think from this, we could easily add things like PolygonFieldType, etc. which would allow us to create more sophisticated shapes and do things like intersections, etc.  For instance, imagine saying:  Does this point lie within this shape?  I think that might be able to be expressed as a RangeQuery&lt;br/&gt;
2. I&apos;m not sure I care for the name of the new abstract FieldType that is a base class of CoordinateFieldType called DelegatingFieldType&lt;br/&gt;
3. I&apos;m not sure yet on the properties of the generated fields just yet.  Right now, I&apos;m delegating the handling to the sub FieldType except I&apos;m overriding to turn off storage, which I think is pretty cool (could even work as a copy field like functionality)&lt;br/&gt;
4. I&apos;m not thrilled about creating a SchemaField every time in the createFields protected helper method, but SchemaField is final and doesn&apos;t have a setName method (which makes sense)&lt;/p&gt;

&lt;p&gt;Questions for Yonik on his patch:&lt;br/&gt;
1. Why is TextField overriding getFieldQuery when it isn&apos;t called, except possibly via the FieldQParserPlugin?&lt;br/&gt;
2. I&apos;m not sure I understand the getDistance, getBoundingBox methods on the GeoFieldType.   It seems like that precludes one from picking a specific distance (for instance, some times you may want a faster approx. and others a slower more accurate calculation)&lt;/p&gt;


&lt;p&gt;Needs:&lt;br/&gt;
1. Write up changes.txt&lt;br/&gt;
2. More tests, including performance testing&lt;br/&gt;
3. Patch doesn&apos;t support dynamic fields yet, but it should&lt;/p&gt;</comment>
                            <comment id="12786951" author="chrismattmann" created="Mon, 7 Dec 2009 15:35:43 +0000"  >&lt;p&gt;Patch is looking good! I&apos;m pouring through it right now &amp;#8211; I&apos;ll try and test this as part of work I&apos;m doing on &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1586&quot; title=&quot;Create Spatial Point FieldTypes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1586&quot;&gt;&lt;del&gt;SOLR-1586&lt;/del&gt;&lt;/a&gt; &amp;#8211; maybe even update that issue if I get a sec today &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12788103" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 14:19:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;1. Why is TextField overriding getFieldQuery when it isn&apos;t called, except possibly via the FieldQParserPlugin?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As you point out, it is called by FieldQParserPlugin, and it&apos;s a move to make things a bit more orthogonal - with a little more work it could even be used by the SolrQueryParser for text field types as well.  It also opened the (expert) possibility of creating a new TextField type that handled things a bit differently.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;2. I&apos;m not sure I understand the getDistance, getBoundingBox methods on the GeoFieldType. It seems like that precludes one from picking a specific distance (for instance, some times you may want a faster approx. and others a slower more accurate calculation)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This decision will often be made for the user by the choice of field-types.  End users and app clients should be able to specify something like a bounding box filter and get the most performant implementation w/o having to know if it resolves to range queries, cartesian grids, or whatever.&lt;/p&gt;

&lt;p&gt;fq=&lt;/p&gt;
{!gbox point=110,220 r=1.5}
&lt;p&gt;   #specify a point and a radius&lt;/p&gt;

&lt;p&gt;This does not necessarily preclude users from calling exact functions if they know they are supported for that field type.&lt;/p&gt;</comment>
                            <comment id="12788113" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 15:03:03 +0000"  >&lt;p&gt;Some minor nits about tests in general that I&apos;ve also noticed in the past:&lt;br/&gt;
IMO, unit tests can be too low level.  They can also be too fragile.&lt;/p&gt;

&lt;p&gt;The test below is a pain to maintain... it essentially means you can&apos;t change the schema at all w/o breaking the test.&lt;br/&gt;
+    Map&amp;lt;String,FieldType&amp;gt; polyFs = schema.getPolyFieldTypes();&lt;br/&gt;
+    assertNotNull(polyFs);&lt;br/&gt;
+    assertTrue(polyFs.size() == 3);&lt;/p&gt;

&lt;p&gt;I also prefer testing low level &lt;b&gt;behavior&lt;/b&gt; as opposed to testing low level implementation.&lt;br/&gt;
It would be nice, for example, if testPointFieldType indexed a few couments (with various combinations of stored / indexed)  and then queried the index, with our high level xpath validation code to test that the field was correctly matched and had stored, or had not stored the value.&lt;/p&gt;

&lt;p&gt;Rendundant null checks, trivial strings, etc:&lt;br/&gt;
+    assertNotNull(&quot;topDocs is null&quot;, topDocs);&lt;br/&gt;
+    assertTrue(topDocs.totalHits + &quot; does not equal: &quot; + 1, topDocs.totalHits == 1)&lt;/p&gt;

&lt;p&gt;Things like the above can be replaced with the much more concise and readable:&lt;br/&gt;
assertEquals(1, topDocs.totalHits)&lt;/p&gt;

&lt;p&gt;But really, stuff like this:&lt;br/&gt;
+ TopDocs topDocs = core.getSearcher().get().search(bq, 1);&lt;/p&gt;

&lt;p&gt;Should normally use the higher level search and xpath validate  functionallity.  The code above actually leads to a refcount leak.&lt;/p&gt;

&lt;p&gt;schema.xml: geo will be core... let&apos;s not add a new/different schema file in tests for this and simply add it to the latest schema12&lt;/p&gt;</comment>
                            <comment id="12788116" author="chrismattmann" created="Wed, 9 Dec 2009 15:08:22 +0000"  >&lt;p&gt;Hi Yonik:&lt;/p&gt;

&lt;p&gt;I agree in general with your points above regarding unit tests. However, there seems to be a contradiction in your last statement to what you proposed above:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;schema.xml: geo will be core... let&apos;s not add a new/different schema file in tests for this and simply add it to the latest schema12&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why have unit tests point at the actual schema? That explicitly ties your unit tests to the shipped ops schema, and then encourages people to write unit tests against it (which could lead to the specific number checks that will break when the schema is updated as you mentioned). Instead +1 for having a separate test schema even if it causes duplication it insulates change.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12788117" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 15:12:26 +0000"  >&lt;p&gt;Please see the DocumentBuilder changes I had added... there was starting to be too much duplicated code and I pulled it out into a utility method.&lt;/p&gt;

&lt;p&gt;Seems like SolrQueryParser should use getFieldQuery for everything (except TextField... but it could even be used for that if we make it such that we could call back to getBooleanQuery, etc).  I had this in my patch.&lt;/p&gt;</comment>
                            <comment id="12788119" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 15:21:47 +0000"  >&lt;p&gt;Regarding polyfields... it&apos;s not clear why they are special enough to have to change the IndexSchema? (IndexSchema.isPolyField, getPolyField, getPolyFieldType, getPolyFieldTypeNoEx, etc).  Can&apos;t we just store them as normal field types?&lt;/p&gt;</comment>
                            <comment id="12788121" author="gsingers" created="Wed, 9 Dec 2009 15:29:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;IMO, unit tests can be too low level. They can also be too fragile. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess it all comes down to what you call a unit.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;t would be nice, for example, if testPointFieldType indexed a few couments (with various combinations of stored / indexed) and then queried the index,&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is done in testIndexing()&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;TopDocs topDocs = core.getSearcher().get().search(bq, 1);&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, see my comment there even!  I wanted a way to validate that the correct query is created, but I don&apos;t even really need to run a search for that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rendundant null checks, trivial strings, etc:&lt;br/&gt;
+ assertNotNull(&quot;topDocs is null&quot;, topDocs);&lt;br/&gt;
+ assertTrue(topDocs.totalHits + &quot; does not equal: &quot; + 1, topDocs.totalHits == 1)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I need to update my IntelliJ &quot;Live Templates&quot;, as I have them setup to spit out a pattern like above&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Please see the DocumentBuilder changes I had added... &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Will do.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Seems like SolrQueryParser should use getFieldQuery for everything (except TextField... but it could even be used for that if we make it such that we could call back to getBooleanQuery, etc). I had this in my patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought I captured that, but will look again.&lt;/p&gt;</comment>
                            <comment id="12788123" author="gsingers" created="Wed, 9 Dec 2009 15:36:49 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Regarding polyfields... it&apos;s not clear why they are special enough to have to change the IndexSchema? (IndexSchema.isPolyField, getPolyField, getPolyFieldType, getPolyFieldTypeNoEx, etc). Can&apos;t we just store them as normal field types?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My thinking was that a Query Parser or other things might need to know look up this information, but you are right, I don&apos;t have a specific use case for them at the moment.  At the same time, poly fields &lt;em&gt;feel&lt;/em&gt; like a hybrid between regular fields and dynamic fields and thus fit at the same level they do.&lt;/p&gt;</comment>
                            <comment id="12788125" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 15:38:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;I need to update my IntelliJ &quot;Live Templates&quot;, as I have them setup to spit out a pattern like above&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;lol... so that&apos;s where all that comes from...  I was going to say something like &quot;this looks like it came out of a code generator&quot; but it sounded a bit too harsh in the off chance that it wasn&apos;t &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I&apos;m very relieved to find you weren&apos;t typing out that crap by hand.&lt;/p&gt;</comment>
                            <comment id="12788138" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 16:08:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;poly fields feel like a hybrid between regular fields and dynamic fields and thus fit at the same level they do.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The schema needs to know about dynamic fields because it affects field names.&lt;/p&gt;

&lt;p&gt;Actually, I think I just saw why you currently need &lt;b&gt;some&lt;/b&gt; support in IndexSchema with the current way you are doing things:&lt;br/&gt;
If you have a dynamicField &lt;em&gt;pt, then I think you use field names like home_pt&lt;/em&gt;&lt;em&gt;0 and home_pt&lt;/em&gt;_1?&lt;br/&gt;
So in essence, it&apos;s a new type of dynamic field?  This seems like it might be hard to actually get right in all of the corner cases.&lt;/p&gt;

&lt;p&gt;What if, instead, dynamic fields are directly used for subfields?&lt;br/&gt;
So for a field name &quot;home&quot; instead of home_&lt;em&gt;0 and home&lt;/em&gt;&lt;em&gt;1, you would use  home&lt;/em&gt;_0_d, home__1_d&lt;br/&gt;
Not as short, but it avoids having to add new capabilities to the IndexSchema.&lt;/p&gt;

&lt;p&gt;Another alternative: use a prefix for subfields and the suffix for the type. _0_home_d,  _1_home_d&lt;/p&gt;

&lt;p&gt;Another thing to keep in mind - not all subfields will always be of the same type.&lt;/p&gt;</comment>
                            <comment id="12788151" author="gsingers" created="Wed, 9 Dec 2009 16:35:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;What if, instead, dynamic fields are directly used for subfields?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That then requires those dynamic fields to be present, which I&apos;d rather not have to do.  Part of the goal of this issue is to hide the implementation.  Having said that, I still don&apos;t know whether that means I need to keep the IndexSchema changes.  Let me do another iteration.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Another thing to keep in mind - not all subfields will always be of the same type.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed, but I don&apos;t think this is baked in to the generic capabilities, just the Point stuff, where I think it is fine to have the same sub-type.&lt;/p&gt;</comment>
                            <comment id="12788156" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 16:48:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;That then requires those dynamic fields to be present, which I&apos;d rather not have to do. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s sort of a separate question: if one were allowed to register a dynamic field (not sure if this capability is present), then it could be registered if it didn&apos;t exist.   &lt;/p&gt;

&lt;p&gt;Also, you have subFieldType=&quot;double&quot; in the schema... and that requires that the &quot;double&quot; field type be defined.  Why not have subFieldSuffix=&quot;_d&quot; and require the &quot;_d&quot; dynamic field be defined?  Seems like the same complexity level.&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; Another thing to keep in mind - not all subfields will always be of the same type.&lt;br/&gt;
&amp;gt; Agreed, but I don&apos;t think this is baked in to the generic capabilities, just the Point stuff,&lt;/p&gt;

&lt;p&gt;For a specific point implementation, that&apos;s fine.  But if you use a point type that can do cartesian grid stuff, then you already have different field types.  But I guess subFieldType=&quot;double&quot; need only apply to some of the subfields (the ones that index the points).&lt;/p&gt;</comment>
                            <comment id="12788163" author="gsingers" created="Wed, 9 Dec 2009 17:06:56 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Also, you have subFieldType=&quot;double&quot; in the schema... and that requires that the &quot;double&quot; field type be defined. Why not have subFieldSuffix=&quot;_d&quot; and require the &quot;_d&quot; dynamic field be defined? Seems like the same complexity level&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it makes more sense for the subFieldType to be present to be tied to a type than a Field (subFieldSuffix), as it seems weird to have a field type have a dependency on a Field, whereas it seems fine for a field type to have a dependency on another field type.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a specific point implementation, that&apos;s fine. But if you use a point type that can do cartesian grid stuff, then you already have different field types. But I guess subFieldType=&quot;double&quot; need only apply to some of the subfields (the ones that index the points).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m not sure I see this.  If and when we implement CartesianPointType, it will still need to have a type for the sub fields (depending on the tiers specified) but I don&apos;t see why the subFieldType wouldn&apos;t be the same for all of them.  AIUI, they all have the same precision requirements.&lt;/p&gt;

&lt;p&gt;I think part of what&apos;s missing is that for some of these attributes, it would be better for them to be field properties and not fieldType properties.  For instance for the Cartesian case, you will need to declare what levels to support.  If that is specified on the FieldType, then you have a proliferation of Field Type declarations, whereas if it is on the Field, that is a lot cleaner and less verbose.  I&apos;m just not sure how that gets implemented just yet, as having to specify startTier and endTier doesn&apos;t seem like the same level as multiValued or stored.  &lt;/p&gt;</comment>
                            <comment id="12788164" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 17:10:09 +0000"  >&lt;p&gt;Perhaps we should return to the design level a bit instead of me reading code and maybe making mistakes and trying to infer intent.&lt;/p&gt;

&lt;p&gt;Assume we have this:&lt;br/&gt;
  &amp;lt;fieldType name=&quot;xy&quot; class=&quot;solr.PointType&quot; dimension=&quot;2&quot; subFieldType=&quot;double&quot;/&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;home&quot; type=&quot;xy&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;What are the exact field names that are indexed?&lt;/p&gt;</comment>
                            <comment id="12788168" author="chrismattmann" created="Wed, 9 Dec 2009 17:15:52 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Perhaps we should return to the design level a bit instead of me reading code and maybe making mistakes and trying to infer intent.&lt;/p&gt;

&lt;p&gt;Assume we have this:&lt;br/&gt;
&amp;lt;fieldType name=&quot;xy&quot; class=&quot;solr.PointType&quot; dimension=&quot;2&quot; subFieldType=&quot;double&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;home&quot; type=&quot;xy&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;What are the exact field names that are indexed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Regarding the fieldType subFieldType attribute &amp;#8211; a question popped into my mind. How do we handle poly fields where each type is different? I.e., where subFieldType=&quot;double,tint&quot; or whatever...&lt;/p&gt;</comment>
                            <comment id="12788170" author="gsingers" created="Wed, 9 Dec 2009 17:17:38 +0000"  >&lt;blockquote&gt;
&lt;p&gt;&amp;lt;fieldType name=&quot;xy&quot; class=&quot;solr.PointType&quot; dimension=&quot;2&quot; subFieldType=&quot;double&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;home&quot; type=&quot;xy&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Two indexed fields&lt;br/&gt;
home___0&lt;br/&gt;
home___1&lt;/p&gt;

&lt;p&gt;One stored field:&lt;br/&gt;
home&lt;/p&gt;</comment>
                            <comment id="12788228" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 18:47:47 +0000"  >&lt;p&gt;OK... so the real issue is that this introduces a new mechanism to look up field types... not necessarily a horrible thing, but we should definitely think twice before doing so.&lt;/p&gt;

&lt;p&gt;home__&lt;em&gt;0 and home&lt;/em&gt;__1 are not dynamic fields as I understand it (in that there is no ___0 dynamic field.  The lookup is done by adding new support to the IndexSchema to strip off ___foo off of any field and use that as it&apos;s type?&lt;/p&gt;

&lt;p&gt;But... that scheme seems to limit us to a single subField type (in addition to the other downsides of requiring a new lookup mechanism).&lt;/p&gt;

&lt;p&gt;I do want to separate these two issues though:&lt;br/&gt;
1) field lookup mechanism (currently just exact name in schema followed by a dynamic field check)&lt;br/&gt;
2) if and when fields or field types should be explicitly defined in the schema vs being created by the polyField&lt;/p&gt;

&lt;p&gt;Aside: it looks like the code for getFieldOrNull isn&apos;t right?  Seems like it will return a field with both the wrong type and the wrong name?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; SchemaField getFieldOrNull(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fieldName) {
      SchemaField f = fields.get(fieldName);
@@ -1055,25 +1071,28 @@
     &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (DynamicField df : dynamicFields) {
       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (df.matches(fieldName)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; df.makeSchemaField(fieldName);
     }
-    
+    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; idx = fieldName.indexOf(FieldType.POLY_FIELD_SEPARATOR);
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (idx != -1){
+      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fn = fieldName.substring(0, idx);
+      f = getFieldOrNull(fn);
+    }
     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; f;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12788298" author="gsingers" created="Wed, 9 Dec 2009 20:37:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;OK... so the real issue is that this introduces a new mechanism to look up field types... not necessarily a horrible thing, but we should definitely think twice before doing so. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed.  I&apos;m not wedded to this approach, just want to see the discussion through.  I do feel strongly that the goal is such that an app designer should be able to use a FieldType just as they always have, either dynamic or static.  How we get to that I don&apos;t care so much as long as it works and performs.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But... that scheme seems to limit us to a single subField type (in addition to the other downsides of requiring a new lookup mechanism).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t follow this.  In this particular implementation, I have a single subFieldType, but I don&apos;t see why a different implementation couldn&apos;t do something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;fieldType name=&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt; type=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.MultiSubPointType&quot;&lt;/span&gt; dimension=&lt;span class=&quot;code-quote&quot;&gt;&quot;3&quot;&lt;/span&gt; subFieldTypes=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;,tdouble,&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;Aside: it looks like the code for getFieldOrNull isn&apos;t right? Seems like it will return a field with both the wrong type and the wrong name?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmmm, I &lt;em&gt;think&lt;/em&gt; it should return the &quot;owning&quot; Schema Field, i.e. the one that exists in the schema.xml file.&lt;/p&gt;</comment>
                            <comment id="12788307" author="gsingers" created="Wed, 9 Dec 2009 20:50:33 +0000"  >&lt;p&gt;Note, I don&apos;t think the distance function queries will work w/ my patch yet.&lt;/p&gt;</comment>
                            <comment id="12788319" author="yseeley@gmail.com" created="Wed, 9 Dec 2009 21:17:44 +0000"  >&lt;p&gt;&amp;gt;  Aside: it looks like the code for getFieldOrNull isn&apos;t right? Seems like it will return a field with both the wrong type and the wrong name?&lt;br/&gt;
&amp;gt; &amp;gt; Hmmm, I think it should return the &quot;owning&quot; Schema Field, i.e. the one that exists in the schema.xml file.&lt;/p&gt;

&lt;p&gt;Those fields probably will be exposed at least internally to other parts of solr, so they should really return the correct field / fieldType.&lt;/p&gt;</comment>
                            <comment id="12788751" author="gsingers" created="Thu, 10 Dec 2009 15:45:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Seems like SolrQueryParser should use getFieldQuery for everything (except TextField... but it could even be used for that if we make it such that we could call back to getBooleanQuery, etc). I had this in my patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yonik, could you elaborate on this?  It seems kind of weird to have that instanceof check in SolrQueryParser.getFieldQuery() to see if we have a TextField or not.&lt;/p&gt;</comment>
                            <comment id="12788778" author="gsingers" created="Thu, 10 Dec 2009 16:34:03 +0000"  >&lt;p&gt;This implements Option B as laid out at: &lt;a href=&quot;http://search.lucidimagination.com/search/document/83a5442ab155686/solr_1131_multiple_fields_per_field_type#a600de441418a798&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search.lucidimagination.com/search/document/83a5442ab155686/solr_1131_multiple_fields_per_field_type#a600de441418a798&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up:  Implement ValueSource support for PointType.&lt;/p&gt;</comment>
                            <comment id="12788800" author="yseeley@gmail.com" created="Thu, 10 Dec 2009 17:32:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;Next up: Implement ValueSource support for PointType.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Exactly!&lt;/p&gt;

&lt;p&gt;My thinking was perhaps to add the ability to get lat+lon from DocValues... but for efficiency have DocValues fill in values on an object passed to it (this is inner-loop stuff.... we don&apos;t want to be creating objects per doc).&lt;/p&gt;

&lt;p&gt;DocValues getPoint(Point point)&lt;br/&gt;
or perhaps&lt;br/&gt;
DocValues.getPoint(double[] point)&lt;/p&gt;</comment>
                            <comment id="12788802" author="yseeley@gmail.com" created="Thu, 10 Dec 2009 17:37:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yonik, could you elaborate on this? It seems kind of weird to have that instanceof check in SolrQueryParser.getFieldQuery() to see if we have a TextField or not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you look at the impl in TextField, I had to comment out stuff like &quot;newTermQuery&quot; and replace it with &quot;new TermQuery&quot;.&lt;/p&gt;

&lt;p&gt;+            // Query currentQuery = newTermQuery(new Term(field, term));&lt;br/&gt;
+            Query currentQuery = new TermQuery(new Term(field, term));&lt;/p&gt;

&lt;p&gt;To be fully back compatible, all we would need to do is check if the parser was an instance of QueryParser, and if so, delegate to newTermQuery.  Then we could use fieldType.getFieldQuery() absolutely everywhere.&lt;/p&gt;</comment>
                            <comment id="12788805" author="gsingers" created="Thu, 10 Dec 2009 17:45:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;DocValues.getPoint(double[] point)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, let me see how that plays out.&lt;/p&gt;

&lt;p&gt;See also &lt;a href=&quot;http://www.lucidimagination.com/search/document/fd804bcd78d7bec1/solr_1131_poly_fields_and_valuesource&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.lucidimagination.com/search/document/fd804bcd78d7bec1/solr_1131_poly_fields_and_valuesource&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12789003" author="chrismattmann" created="Thu, 10 Dec 2009 23:06:27 +0000"  >&lt;p&gt;Hi All:&lt;/p&gt;

&lt;p&gt;Here&apos;s a cut on the patch. Some questions/comments on the existing patch(es):&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Why use
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; DynamicField[] dynamicFields;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; instead of &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
List&amp;lt;DynamicField&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; or &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Collection&amp;lt;DynamicField&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; in IndexSchema?&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;There are a bunch of useless whitespace changes (e.g., in IndexSchema, FieldType) in the existing patches. The final patch probably shouldn&apos;t include those since it makes it difficult to understand what was actually changed.&lt;/li&gt;
	&lt;li&gt;IndexSchema:
	&lt;ul&gt;
		&lt;li&gt;when checking for isDuplicateDynField, if it is, nothing is done. Shouldn&apos;t this be where an exception is thrown or a message is logged? In the patch I&apos;m attaching I took the log approach.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;IndexSchema:
	&lt;ul&gt;
		&lt;li&gt;what happens if subs.isEmpty() == true?&lt;/li&gt;
		&lt;li&gt;maybe log message that says, dyn field definition is up to you?&lt;/li&gt;
		&lt;li&gt;I took the approach in my attached patch to log it.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Why does getPolyFieldType(String) throw an exception if the field is not a poly field type &amp;#8211; that seems a bit brittle? Also there&apos;s the NoEx version anyways (why not just keep that one?). In the patch I&apos;ve attached, I took the approach of only including a getPolyFieldType that returns null rather than throwing an ex (the NoEx version).&lt;/li&gt;
	&lt;li&gt;CoordinateFieldType: why process &amp;gt; 1 sub field types and then throw an exception at the end? I cleaned this up to throw the Exception when it occurs.&lt;/li&gt;
	&lt;li&gt;parsePoint in DistanceUtils, why use &apos;,&apos; as the separator &amp;#8211; use &apos; &apos; (at least conforms to georss point then). I guess because you are supporting N-dimensional points, right?&lt;/li&gt;
	&lt;li&gt;parsePoint &amp;#8211; instead of complicated isolation loops, why not just use trim()? I&apos;ve taken that approach in the patch I&apos;ve attached.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This patch passes all unit tests as well. This doesn&apos;t implement option C that I proposed yet. Hopefully I&apos;ll get a chance to put that up later tonight.&lt;/p&gt;
</comment>
                            <comment id="12789079" author="yseeley@gmail.com" created="Fri, 11 Dec 2009 02:19:31 +0000"  >&lt;p&gt;Quick comment based on a spot check of the changes to IndexSchema: rather than make polyField special somehow w.r.t IndexSchema, and add a FieldType.getPolyFieldNames, etc, I had been thinking more along the lines of having an IndexSchema.registerDynamicFieldDefinition - just like the existing registerDynamicCopyField.  This would (optionally) allow any field type to add other definitions to the IndexSchema.  I continue to think it would be good to stay away of special logic for &quot;polyfields&quot; in the IndexSchema.&lt;/p&gt;</comment>
                            <comment id="12789082" author="yseeley@gmail.com" created="Fri, 11 Dec 2009 02:30:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;parsePoint in DistanceUtils, why use &apos;,&apos; as the separator&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A comma is more user friendly - spaces are often already used as delimiters in quite a few places.&lt;br/&gt;
Why did you replace more optimized code that was already written in parsePoint with less optimized code?&lt;/p&gt;</comment>
                            <comment id="12789106" author="chrismattmann" created="Fri, 11 Dec 2009 04:36:50 +0000"  >&lt;blockquote&gt;
&lt;p&gt;A comma is more user friendly - spaces are often already used as delimiters in quite a few places.&lt;br/&gt;
Why did you replace more optimized code that was already written in parsePoint with less optimized code?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Meh, I could go either way on the comma/space issue. It would be nice to be compatible with an existing GeoPoint standard. I know georss uses space as the delimeter &amp;#8211; do you know of any that use &quot;,&quot;?&lt;/p&gt;

&lt;p&gt;RE: optimized code, can you be explicit? I would argue the code I inserted is more optimized from a readiability standpoint. It&apos;s a bit easier for your typical CS101 grad to understand. All that was being done in the prior patch is a set of forwards/backwards isolation loops to determine the start/end index to substring out, in case you have:&lt;/p&gt;

&lt;p&gt;34.333      ,100.1 OR&lt;br/&gt;
34.333,100.1 OR&lt;br/&gt;
34.333,       100.1&lt;/p&gt;

&lt;p&gt;At first blush, trying to understand that code was a bit harder than simply tokenizing on the known delimeter, and then trimming each tokenized value.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  out = externalVal.split(&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;);
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(out.length != dimension){
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SolrException(SolrException.ErrorCode.BAD_REQUEST, &lt;span class=&quot;code-quote&quot;&gt;&quot;incompatible dimension (&quot;&lt;/span&gt; + dimension +
+            &lt;span class=&quot;code-quote&quot;&gt;&quot;) and values (&quot;&lt;/span&gt; + externalVal + &lt;span class=&quot;code-quote&quot;&gt;&quot;).  Only &quot;&lt;/span&gt; + i + &lt;span class=&quot;code-quote&quot;&gt;&quot; values specified&quot;&lt;/span&gt;);        
+      }
+      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j=0; j &amp;lt; out.length; j++){
+        out[j] = out[j].trim();
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

</comment>
                            <comment id="12789240" author="gsingers" created="Fri, 11 Dec 2009 11:13:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Quick comment based on a spot check of the changes to IndexSchema: rather than make polyField special somehow w.r.t IndexSchema, and add a FieldType.getPolyFieldNames, etc, I had been thinking more along the lines of having an IndexSchema.registerDynamicFieldDefinition - just like the existing registerDynamicCopyField. This would (optionally) allow any field type to add other definitions to the IndexSchema. I continue to think it would be good to stay away of special logic for &quot;polyfields&quot; in the IndexSchema.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, then the FieldType would register it&apos;s Dynamic Fields in it&apos;s own init() method by calling this method?  That can work.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why use Dynamic Field array&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The array is sorted and array access is much faster and we often have to loop over it to look it up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CoordinateFieldType: why process &amp;gt; 1 sub field types and then throw an exception at the end? I cleaned this up to throw the Exception when it occurs.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK.  Actually, this should just be in the derived class, as it may be the case some other CoordinateFieldType has multiple sub types.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;parsePoint in DistanceUtils, why use &apos;,&apos; as the separator - use &apos; &apos; (at least conforms to georss point then). I guess because you are supporting N-dimensional points, right?&lt;/li&gt;
	&lt;li&gt;parsePoint - instead of complicated isolation loops, why not just use trim()? I&apos;ve taken that approach in the patch I&apos;ve attached.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think comma makes sense.  As for the optimization stuff, I agree w/ Yonik, this is code that will be called a lot.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;when checking for isDuplicateDynField, if it is, nothing is done. Shouldn&apos;t this be where an exception is thrown or a message is logged? In the patch I&apos;m attaching I took the log approach.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;/blockquote&gt;

&lt;p&gt;It is logged, but for the poly fields, if the dyn field is already defined, that&apos;s just fine.&lt;/p&gt;</comment>
                            <comment id="12789241" author="gsingers" created="Fri, 11 Dec 2009 11:13:31 +0000"  >&lt;p&gt;I&apos;ve got a patch almost ready that brings in the ValueSource stuff.&lt;/p&gt;</comment>
                            <comment id="12789330" author="chrismattmann" created="Fri, 11 Dec 2009 14:47:12 +0000"  >&lt;p&gt;Hi Grant:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The array is sorted and array access is much faster and we often have to loop over it to look it up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, fair enough.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think comma makes sense. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, so you think it makes sense &amp;#8211; why? Because it&apos;s an N-dimensional array and spaces are less &quot;user friendly&quot; as Yonik put it? &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As for the optimization stuff, I agree w/ Yonik, this is code that will be called a lot.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m wondering what there is to agree with since &quot;optimization&quot; was never defined. Are you talking speed? Are you talking memory efficiency? Code readability? Maintainability? Some combination of all of those? There are tradeoffs in everything. You could rewrite some of the provided java runtime methods to squeeze out extra performance, but what&apos;s the point of libraries or reusable functions then? The prior code that was in there basically rewrote exactly what split() and trim() do, so why not reuse what&apos;s there? If you throw up the performance flag, I would push back on readability and maintainability. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It is logged, but for the poly fields, if the dyn field is already defined, that&apos;s just fine.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Where is it logged? It wasn&apos;t in the most up-to-date patch, provided on 2009-12-10 04:34 PM. Here was the code snipped that was there:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-comment&quot;&gt;//For each poly field, go through and add the appropriate Dynamic field
&lt;/span&gt;+      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (FieldType fieldType : polyFieldTypes.values()) {
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (fieldType &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DelegatingFieldType){
+          List&amp;lt;FieldType&amp;gt; subs = ((DelegatingFieldType) fieldType).getSubTypes();
+          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (subs.isEmpty() == &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;){
+            &lt;span class=&quot;code-comment&quot;&gt;//add a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; dynamic field &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; each sub field type
&lt;/span&gt;+            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (FieldType type : subs) {
+              log.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;dynamic field creation &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; sub type: &quot;&lt;/span&gt; + type.typeName);
+              SchemaField df = SchemaField.create(&lt;span class=&quot;code-quote&quot;&gt;&quot;*&quot;&lt;/span&gt; + FieldType.POLY_FIELD_SEPARATOR + type.typeName,
+                      type, type.args);&lt;span class=&quot;code-comment&quot;&gt;//TODO: is type.args right?
&lt;/span&gt;+              &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isDuplicateDynField(dFields, df) == &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;){
+                addDynamicFieldNoDupCheck(dFields, df);
+              }
               &lt;span class=&quot;code-comment&quot;&gt;// NOTE: there is no &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; here, so I added an &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; and a log message
&lt;/span&gt;+            }
+          }
            &lt;span class=&quot;code-comment&quot;&gt;// NOTE: there is no &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; here, so I added an &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; and a log message
&lt;/span&gt;+        }
+      }
+
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here&apos;s what I added:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-comment&quot;&gt;//For each poly field, go through and add the appropriate Dynamic field
&lt;/span&gt;+      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (FieldType fieldType : polyFieldTypes.values()) {
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (fieldType &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DelegatingFieldType){
+          List&amp;lt;FieldType&amp;gt; subs = ((DelegatingFieldType) fieldType).getSubTypes();
+          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!subs.isEmpty()){
+            &lt;span class=&quot;code-comment&quot;&gt;//add a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; dynamic field &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; each sub field type
&lt;/span&gt;+            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (FieldType type : subs) {
+              log.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;dynamic field creation &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; sub type: &quot;&lt;/span&gt; + type.typeName);
+              SchemaField df = SchemaField.create(&lt;span class=&quot;code-quote&quot;&gt;&quot;*&quot;&lt;/span&gt; + FieldType.POLY_FIELD_SEPARATOR + type.typeName,
+                      type, type.args);&lt;span class=&quot;code-comment&quot;&gt;//TODO: is type.args right?
&lt;/span&gt;+              &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!isDuplicateDynField(dFields, df)){
+                addDynamicFieldNoDupCheck(dFields, df);
+              }
+              &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;{
+                log.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;dynamic field creation avoided: dynamic field: [&quot;&lt;/span&gt;+df.getName()+&lt;span class=&quot;code-quote&quot;&gt;&quot;] &quot;&lt;/span&gt; +
+                		&lt;span class=&quot;code-quote&quot;&gt;&quot;already defined in the schema!&quot;&lt;/span&gt;);
+              }
+              
+            }
+          }
+          &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;{
+            log.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;field type: [&quot;&lt;/span&gt;+fieldType.getTypeName()+&lt;span class=&quot;code-quote&quot;&gt;&quot;]: no sub fields defined&quot;&lt;/span&gt;);
+          }
+        }
+      }
+
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, I get that it&apos;s fine for the poly fields if the dyn field is already defined (in fact, based on my mailing lists comments &lt;a href=&quot;http://old.nabble.com/SOLR-1131:-disconnect-between-fields-created-by-poly-fields-td26736431.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://old.nabble.com/SOLR-1131:-disconnect-between-fields-created-by-poly-fields-td26736431.html&lt;/a&gt; I think this should &lt;em&gt;always&lt;/em&gt; be the case), but whether it&apos;s fine or not, it&apos;s still worthy to log to provide someone more information. &lt;/p&gt;
</comment>
                            <comment id="12789339" author="gsingers" created="Fri, 11 Dec 2009 15:11:57 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;m wondering what there is to agree with since &quot;optimization&quot; was never defined. Are you talking speed? Are you talking memory efficiency? Code readability? Maintainability? Some combination of all of those?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Speed and memory.  &lt;/p&gt;

&lt;p&gt;As for logging, that code is all going away in the next patch, I think&lt;/p&gt;</comment>
                            <comment id="12789342" author="chrismattmann" created="Fri, 11 Dec 2009 15:18:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;Speed and memory. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, it&apos;s at the cost of readability and maintainability. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As for logging, that code is all going away in the next patch, I think&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll take a look when you throw it up, thanks.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;
</comment>
                            <comment id="12789351" author="gsingers" created="Fri, 11 Dec 2009 15:45:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;Unfortunately, it&apos;s at the cost of readability and maintainability. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe.  It took me all of 30 seconds to figure out what it was doing.  I&apos;ll put some comments on it.  While readability is important, Solr&apos;s goal is not to make a product that a CS101 grad can read, it&apos;s too build a blazing fast search server.  That call could hit millions of times when indexing points.&lt;/p&gt;</comment>
                            <comment id="12789354" author="chrismattmann" created="Fri, 11 Dec 2009 15:50:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe. It took me all of 30 seconds to figure out what it was doing. I&apos;ll put some comments on it. While readability is important, Solr&apos;s goal is not to make a product that a CS101 grad can read, it&apos;s too build a blazing fast search server. That call could hit millions of times when indexing points.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, maybe the goal isn&apos;t for a CS101 grad to be able to easily understand the code, but SOLR&apos;s goal should include being open to ideas from the community that involve reusing standard Java library functions and not rewriting based on perception of speed and memory without empirical proof. Where&apos;s the evidence that using things like split and trim are so much more costly than rewriting those basic capabilities that they warrant not using them?&lt;/p&gt;</comment>
                            <comment id="12789406" author="gsingers" created="Fri, 11 Dec 2009 17:28:00 +0000"  >&lt;p&gt;OK, this is getting a lot closer to ready to commit.&lt;/p&gt;

&lt;p&gt;Changes:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Introduced a MultiValueSource - ValueSource that abstractly represents ValueSources for poly fields, and other things.&lt;/li&gt;
	&lt;li&gt;Introduced PointValueSource - point(x,y,z) - a MultiValueSource that wraps other value sources (could be called something else, I suppose)&lt;/li&gt;
	&lt;li&gt;Implemented PointTypeValueSource to represent ValueSource for the PointType class.&lt;/li&gt;
	&lt;li&gt;Hooked in multivalue callbacks to DocValues.  In addition to making functions work with Points (et. al) it should be possible to write functions that work on multivalued fields, but I did not undertake this work.&lt;/li&gt;
	&lt;li&gt;Add in SchemaAware callback mechanism so that Field Types and other schema stuff can register dynamic fields, etc. after the schema has been created&lt;/li&gt;
	&lt;li&gt;Updated the example to have spatial information in the docs, etc.  See &lt;a href=&quot;http://wiki.apache.org/solr/SpatialSearch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/solr/SpatialSearch&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Modified the distance functions to work with MultiValueSources&lt;/li&gt;
	&lt;li&gt;cleaned up the tests&lt;/li&gt;
	&lt;li&gt;Incorporated various comments from Chris and Yonik.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12789484" author="chrismattmann" created="Fri, 11 Dec 2009 19:38:26 +0000"  >&lt;p&gt;Hi All,&lt;/p&gt;

&lt;p&gt;Updated patch:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;Introduced a MultiValueSource - ValueSource that abstractly represents ValueSources for poly fields, and other things.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I added javadoc to this and the ASF license header.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;Introduced PointValueSource - point(x,y,z) - a MultiValueSource that wraps other value sources (could be called something else, I suppose)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I put the ASF header before the package decl, to be consistent with the other SOLR java files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;Add in SchemaAware callback mechanism so that Field Types and other schema stuff can register dynamic fields, etc. after the schema has been created&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Added more javadoc here, and ASF license.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
	&lt;li&gt;Incorporated various comments from Chris and Yonik.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks, I appreciate it. I&apos;m still -1 on the way this patch deals with the &quot;optimization&quot; issue. I&apos;d like to see evidence that it makes sense to not use split and trim.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;
</comment>
                            <comment id="12789520" author="gsingers" created="Fri, 11 Dec 2009 20:54:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m still -1 on the way this patch deals with the &quot;optimization&quot; issue. I&apos;d like to see evidence that it makes sense to not use split and trim.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My tests show it to be at least 7 times faster.  But this should be obvious from static analysis, too.  First of all, String.split() uses a regex which then makes a pass through the underlying character array.  Then, trim has to go back through and analyze the char array too, not to mention the extra String creations.  The optimized version here makes one pass and deals solely at the char array level and only has to do the substring, which I think can be optimized by the JVM to be a copy on write.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testDistPerf() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; [] input = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[1000000];
    Random random = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Random();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; input.length; i++){
      input[i] = random.nextInt() + &lt;span class=&quot;code-quote&quot;&gt;&quot;, &quot;&lt;/span&gt; + random.nextInt();
    }
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; [] out = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[2];
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; time = 0;
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0; j &amp;lt; 50; j++) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; input.length; i++){
        split(input[i], out, 2);
      }
    }
    time = (&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis() - start);
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;Time: &quot;&lt;/span&gt; + time);
    time = 0;
    start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0; j &amp;lt; 50; j++) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; input.length; i++){
        DistanceUtils.parsePoint(out, input[i], 2);
      }
    }
    time = (&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis() - start);
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;Time: &quot;&lt;/span&gt; + time);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] split(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; externalVal, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] out, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; dimension) {
    out = externalVal.split(&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (out.length != dimension) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SolrException(SolrException.ErrorCode.BAD_REQUEST, &lt;span class=&quot;code-quote&quot;&gt;&quot;incompatible dimension (&quot;&lt;/span&gt; + dimension +
              &lt;span class=&quot;code-quote&quot;&gt;&quot;) and values (&quot;&lt;/span&gt; + externalVal + &lt;span class=&quot;code-quote&quot;&gt;&quot;).  Only &quot;&lt;/span&gt; + out.length + &lt;span class=&quot;code-quote&quot;&gt;&quot; values specified&quot;&lt;/span&gt;);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0; j &amp;lt; out.length; j++) {
      out[j] = out[j].trim();
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; out;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12789526" author="gsingers" created="Fri, 11 Dec 2009 21:00:40 +0000"  >&lt;p&gt;I think this is ready to commit.  I&apos;d like to do so on Monday or Tuesday of next week, so that should give plenty of time for further review&lt;/p&gt;</comment>
                            <comment id="12789561" author="chrismattmann" created="Fri, 11 Dec 2009 22:02:50 +0000"  >&lt;p&gt;Hi Grant:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My tests show it to be at least 7 times faster. But this should be obvious from static analysis, too. First of all, String.split() uses a regex which then makes a pass through the underlying character array. Then, trim has to go back through and analyze the char array too, not to mention the extra String creations. The optimized version here makes one pass and deals solely at the char array level and only has to do the substring, which I think can be optimized by the JVM to be a copy on write.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Got it. A couple of points:&lt;/p&gt;

&lt;p&gt;1. 7x faster is great, but could end up being noise if x = 2 ms. It matters if x is say 2 minutes, agreed. If it&apos;s on the ms end then the expense of more lines of (uncommented) code isn&apos;t worth it.&lt;br/&gt;
2. This code is likely to get called heavily on the indexing side, so performance, though still an issue, is not as hugely important as say on the searching side.&lt;br/&gt;
3. If you feel strongly about an optimized version of this magic splitAndTrim function, how ability a utility function and refactor then? I would guess this code could be used elsewhere, and that would help to satisfy my hunger for reusability. I&apos;ll even javadoc the function and do the refactor if you&apos;d like.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;
</comment>
                            <comment id="12789802" author="gsingers" created="Sat, 12 Dec 2009 22:00:50 +0000"  >&lt;p&gt;Missing an &amp;amp; in DistanceUtils.parsePoint&lt;/p&gt;</comment>
                            <comment id="12789833" author="chrismattmann" created="Sun, 13 Dec 2009 01:20:02 +0000"  >&lt;p&gt;Hi Grant:&lt;/p&gt;

&lt;p&gt;Thanks. Your latest patch omits class-level javadoc I wrote for DelegatingFieldType and for the #inform method in SchemaAware.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+/**
+ * An &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; {@link FieldType}s that are poly fields, as defined in &amp;lt;a
+ * href=&lt;span class=&quot;code-quote&quot;&gt;&quot;http:&lt;span class=&quot;code-comment&quot;&gt;//issues.apache.org/jira/browse/SOLR-1131&quot;&lt;/span&gt;&amp;gt;SOLR-1131&amp;lt;/a&amp;gt;, so that
&lt;/span&gt;+ * poly fields can declare the {@link FieldType}s of their sub-fields.
+ * 
+ * @since SOLR-1131
+ * 
+ **/
+&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; DelegatingFieldType {
+
+  /**
+   * 
+   * Returns the {@link FieldType}s of the sub-fields &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; poly-field.
+   * 
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; A {@link List} of {@link FieldType}s &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the sub-fields of a poly
+   *         field.
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;FieldType&amp;gt; getSubTypes();
+}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; SchemaAware {
+
+  /**
+   * Informs the {@link IndexSchema} provided by the &amp;lt;code&amp;gt;schema&amp;lt;/code&amp;gt;
+   * parameter of an event (e.g., a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; {@link FieldType} was added, etc.
+   * 
+   * @param schema
+   *          The {@link IndexSchema} instance that inform of the update to.
+   * 
+   * @since SOLR-1131
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void inform(IndexSchema schema);
+}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other than that +1. Thanks for seeing this through to a great patch.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12789883" author="gsingers" created="Sun, 13 Dec 2009 12:14:08 +0000"  >&lt;p&gt;Added Chris&apos;s comments.&lt;/p&gt;</comment>
                            <comment id="12790237" author="yseeley@gmail.com" created="Mon, 14 Dec 2009 16:58:45 +0000"  >&lt;p&gt;Given the concerns of some people around automatically registering a dynamic field, perhaps we should optionally allow a subFieldSuffix to be passed instead of subFieldTypes.  &lt;/p&gt;

&lt;p&gt;minor nit: why is &quot;subFieldTypes&quot; plural?  We&apos;re only specifying a single type, right?&lt;/p&gt;</comment>
                            <comment id="12790330" author="gsingers" created="Mon, 14 Dec 2009 20:22:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;minor nit: why is &quot;subFieldTypes&quot; plural? We&apos;re only specifying a single type, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s inherited from a more general mechanism that would allow multiple field types.  So, the PointType only allows one, but other implementations may allow more.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Given the concerns of some people around automatically registering a dynamic field, perhaps we should optionally allow a subFieldSuffix to be passed instead of subFieldTypes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s fine by me.  Given my workload, I will try to do this and commit on Thursday of this week, unless someone wants to take it before then.&lt;/p&gt;</comment>
                            <comment id="12790357" author="yseeley@gmail.com" created="Mon, 14 Dec 2009 20:45:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;That&apos;s inherited from a more general mechanism that would allow multiple field types.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But multiple sub-field types would be used for different things, and should hence be separate parameters?  So if a field type indexed points separately and indexed a field that contains a list of cartesian tiers, I could see the params being&lt;/p&gt;

&lt;p&gt;&amp;lt;fieldType ..., coordinateType=&quot;...&quot;  cartesianTierType=&quot;...&quot;/&amp;gt;&lt;br/&gt;
(or coordinateSuffix / cartesianTierSuffix)&lt;/p&gt;</comment>
                            <comment id="12790635" author="noble.paul" created="Tue, 15 Dec 2009 09:51:35 +0000"  >&lt;p&gt;in FieldType#createFields(SchemaField field, FieldType delegatedType, String storageVal, boost, String ... externalVals)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name = field.getName();
      Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; props = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;();
      &lt;span class=&quot;code-comment&quot;&gt;//Just set these, delegate everything &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; to the field type
&lt;/span&gt;      props.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;indexed&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;);
      props.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;stored&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-comment&quot;&gt;//props.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;omitNorms&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;);
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;//props.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;tokenized&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&quot;&lt;/span&gt;);
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (field.indexed()) {

        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0; j &amp;lt; externalVals.length; j++) {
          &lt;span class=&quot;code-comment&quot;&gt;//SchemaField is &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt;, as is name, so we need to recreate each time
&lt;/span&gt;          &lt;span class=&quot;code-comment&quot;&gt;//put the counter before the separator, b/c dynamic fields can&apos;t be asterisks on both the front and the end of the &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;          SchemaField sf = SchemaField.create(name  + &lt;span class=&quot;code-quote&quot;&gt;&quot;_&quot;&lt;/span&gt; + j + POLY_FIELD_SEPARATOR + delegatedType.typeName, delegatedType, props);
          &lt;span class=&quot;code-comment&quot;&gt;//QUESTION: should we allow &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; vectors, etc?  Not sure that it makes sense
&lt;/span&gt;          results[j] = delegatedType.createField(sf, externalVals[j], boost);
        }
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is not clear as to why can&apos;t the &apos;sf&apos; instance be cached and reused? &lt;/p&gt;

&lt;p&gt; we can also  avoid creating the synthetic field name at query time in PointField#.getFieldQuery&lt;/p&gt;


&lt;p&gt;Why do we have a map for flags why not use a bitset?&lt;/p&gt;</comment>
                            <comment id="12790715" author="gsingers" created="Tue, 15 Dec 2009 12:08:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;It is not clear as to why can&apos;t the &apos;sf&apos; instance be cached and reused? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because there is no way to change the name on a SchemaField w/o changing SchemaField to be non-final.  I don&apos;t think SchemaField should be non-final.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why do we have a map for flags why not use a bitset?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, we could add a new method that takes a bitset, b/c I believe that is what is used under the hood anyway.&lt;/p&gt;</comment>
                            <comment id="12790720" author="noble.paul" created="Tue, 15 Dec 2009 12:25:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;Because there is no way to change the name on a SchemaField w/o changing SchemaField to be non-final. I don&apos;t think SchemaField should be non-final.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Even if SchemaField is final we can precreate and cache the SchemaField objects because the properties of the synthetic field is known in advance. For instance, if you have a dimension of 2 ,the PointType instance will always have 2 well known synthetic names and types that can be created well in advance and they can be reused&lt;/p&gt;</comment>
                            <comment id="12790728" author="gsingers" created="Tue, 15 Dec 2009 13:07:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;Even if SchemaField is final we can precreate and cache the SchemaField objects because the properties of the synthetic field is known in advance. For instance, if you have a dimension of 2 ,the PointType instance will always have 2 well known synthetic names and types that can be created well in advance and they can be reused&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, but you need to also be able to change the name and it needs to be able to rely on the existing createField signature, which uses these values on the SchemaField.  Earlier patches had a separate, internal createField() method that took in all the options (thus not requiring the SF at all) but they don&apos;t work for the delegation.  &lt;/p&gt;

&lt;p&gt;I&apos;m open to ideas, though, so throw up some code.&lt;/p&gt;</comment>
                            <comment id="12790744" author="shalinmangar" created="Tue, 15 Dec 2009 13:44:33 +0000"  >&lt;p&gt;I guess Noble was referring to something like what is done in this patch.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;DelegatingFieldType has a new method:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; SchemaField[] getSubFields(SchemaField mainField);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;PointType and PlusMinusField implement this new method. It is not the prettiest way but this is one way to do it.&lt;/li&gt;
	&lt;li&gt;With this approach, we can get the names from the subFields wherever the name is used (not implemented in this patch).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The PlusMinusField is actually a field type and not a field so we should probably rename it to PlusMinusFieldType.&lt;/p&gt;</comment>
                            <comment id="12790745" author="gsingers" created="Tue, 15 Dec 2009 13:55:52 +0000"  >&lt;p&gt;OK, I see what you mean.  I don&apos;t think we should add it onto the interface, though.  I think it can just be handled by changing the signature of the createField method that takes in the delegatedFieldType.&lt;/p&gt;</comment>
                            <comment id="12791235" author="noble.paul" created="Wed, 16 Dec 2009 06:57:25 +0000"  >&lt;p&gt;Modified the Query creation to use the cached SchemaField names. &lt;/p&gt;</comment>
                            <comment id="12791414" author="yseeley@gmail.com" created="Wed, 16 Dec 2009 15:45:56 +0000"  >&lt;p&gt;I&apos;m spot-checking mutiple different patches at this point... but in general, we should strive to not expose the complexity further up the type hierarchy, and we should not limit what subclasses can do.&lt;/p&gt;

&lt;p&gt;isPolyField() returns true if more than one Fieldable &lt;b&gt;can&lt;/b&gt; be returned from createFields()&lt;br/&gt;
createFields() is free to return whatever the heck it likes.&lt;br/&gt;
And from SchemaField and FieldType&apos;s perspective,that&apos;s it. Implementation details are up to subclasses and we shouldn&apos;t add assumptions in base classes.  There should be &lt;b&gt;no&lt;/b&gt; concept of subFieldTypes or whatever baked into anything.&lt;/p&gt;

&lt;p&gt;So, from Noble&apos;s patch: we shouldn&apos;t try caching subfields in SchemaField... and esp not via &quot;if (type instanceof DelegatingFieldType)&quot;... it really doesn&apos;t belong there.&lt;/p&gt;
</comment>
                            <comment id="12791505" author="noble.paul" created="Wed, 16 Dec 2009 18:24:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;we shouldn&apos;t try caching subfields in SchemaField&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I believe The SchemaField is an ideal place to cache the &apos;synthetic&apos; field info. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;and esp not via &quot;if (type instanceof DelegatingFieldType)&quot;... it really doesn&apos;t belong there.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;true. It was a quick and dirty way to demo the idea. &lt;/p&gt;</comment>
                            <comment id="12791665" author="gsingers" created="Wed, 16 Dec 2009 23:09:19 +0000"  >&lt;p&gt;I have a new patch in the works that makes creating the SchemaField lighter weight.  I agree w/ Yonik, I don&apos;t think this can be cached in general.  Also, I&apos;ve done away with the Delegating Field Type.&lt;/p&gt;</comment>
                            <comment id="12791789" author="noble.paul" created="Thu, 17 Dec 2009 05:12:35 +0000"  >&lt;p&gt;I guess we need to revamp the API.&lt;/p&gt;

&lt;p&gt;The FieldType should act as a factory of SchemaField. And SchemaField does not have to be a final class. Solr Should do all the operations through that SchemaField&lt;/p&gt;</comment>
                            <comment id="12791831" author="noble.paul" created="Thu, 17 Dec 2009 07:35:38 +0000"  >&lt;p&gt;I have opened an issue for the same &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1664&quot; title=&quot;Some Methods in FieldType actually should be in SchemaField&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1664&quot;&gt;SOLR-1664&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12791964" author="gsingers" created="Thu, 17 Dec 2009 15:12:03 +0000"  >&lt;p&gt;Cleaned up the field creation a bit, more documentation in the example.  I think this is ready to go.&lt;/p&gt;</comment>
                            <comment id="12792052" author="chrismattmann" created="Thu, 17 Dec 2009 18:30:07 +0000"  >&lt;p&gt;Hey Grant:&lt;/p&gt;

&lt;p&gt;Let me give this a quick review. Won&apos;t take longer than 20 mins. Thanks for pushing forward on this.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12792055" author="chrismattmann" created="Thu, 17 Dec 2009 18:34:02 +0000"  >&lt;p&gt;+1. Looks good, Grant. Let&apos;s get this sucker committed...&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12792405" author="noble.paul" created="Fri, 18 Dec 2009 09:14:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;Cleaned up the field creation a bit, more documentation in the example. I think this is ready to go.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Are you sure that we want to create a new String for every query/field creation?&lt;/p&gt;</comment>
                            <comment id="12792448" author="gsingers" created="Fri, 18 Dec 2009 12:09:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;Are you sure that we want to create a new String for every query/field creation?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t see anyway around it.  The caching doesn&apos;t work b/c there may be field types where the number of SchemaFields may not be known. &lt;/p&gt;</comment>
                            <comment id="12792495" author="noble.paul" created="Fri, 18 Dec 2009 14:49:46 +0000"  >&lt;p&gt;it is possible to cache the objects in FieldType as &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;SchemaField, List&amp;lt;SchemaField&amp;gt;&amp;gt; subFields;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can lazily initialize this Map for each SchemaField .&lt;/p&gt;</comment>
                            <comment id="12792522" author="yseeley@gmail.com" created="Fri, 18 Dec 2009 16:29:23 +0000"  >&lt;p&gt;It doesn&apos;t look like subFieldSuffix actually works correctly - I&apos;ve made a lot of little changes already, so I&apos;ll just go ahead and take a shot at fixing it.&lt;/p&gt;</comment>
                            <comment id="12792669" author="yseeley@gmail.com" created="Fri, 18 Dec 2009 22:14:36 +0000"  >&lt;p&gt;Here&apos;s an updated patch that fixes a lot of little bugs - hopefully others can use this as a base so we don&apos;t lose all the little changes.  I also attached a diff of the patch to the previous patch to help people see what&apos;s changed (yuck... doesn&apos;t seem that readable though).  This isn&apos;t finished though - I only got to the FieldType / IndexSchema changes, and &lt;b&gt;some&lt;/b&gt; of the ValueSource stuff.  I didn&apos;t get to distance and value source parsing stuff.&lt;/p&gt;

&lt;p&gt;Some of the changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;small javadoc cleanups&lt;/li&gt;
	&lt;li&gt;fix subFieldSuffix so that it actually uses that suffix&lt;/li&gt;
	&lt;li&gt;make any utility methods on FieldType/IndexSchema dealing with &quot;poly&quot; field creation package protected - I don&apos;t think we want these public... it&apos;s specific for a field that adds only to other fields that it defines (with a specific naming convention) all of the same type.  They probably don&apos;t even belong on the base classes, but I don&apos;t care so much if they aren&apos;t public or protected, we can remove later.&lt;/li&gt;
	&lt;li&gt;make PointType actually delegate to the subFieldType... before it was assuming thinks like TermQuery and TermRangeQuery... this would have actually disabled NumericRangeQuery speedups!&lt;/li&gt;
	&lt;li&gt;remove SchemaField creation from PointType - we should get fields from the schema&lt;/li&gt;
	&lt;li&gt;fixed some value sources that didn&apos;t weight correctly&lt;/li&gt;
	&lt;li&gt;fix createFields() to return Fieldable instead of Field&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When I fixed up point type, I did so in many places by assuming 2 points (so it will break for other dimensions).&lt;/p&gt;

&lt;p&gt;I had been working off the assumption that we wanted a geo specific base class to delegate some things to (like the most efficient way to get a bounding box, etc).  If so, we need to decide what that class will be.  Making it point or coordinate already bakes in a lot if implementation details (subType stuff).  Do we want geo to just work off of a generic n dimentional point class, or should we have a 2d lat/lon?  It does feel like we&apos;re loosing something by trying to over-generalize.  The PointTypeValueSource is inner-loop stuff, so I did specialize that for lat/lon.&lt;/p&gt;</comment>
                            <comment id="12792675" author="gsingers" created="Fri, 18 Dec 2009 22:28:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we want geo to just work off of a generic n dimentional point class, or should we have a 2d lat/lon?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we want generic.  Some geo stuff will want 3D (elevation).  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;remove SchemaField creation from PointType - we should get fields from the schema&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought about that, but why should we have to figure out what the dynamic field is every time when we already know it?&lt;/p&gt;

&lt;p&gt;bq, make PointType actually delegate to the subFieldType... before it was assuming thinks like TermQuery and TermRangeQuery... this would have actually disabled NumericRangeQuery speedups!&lt;/p&gt;

&lt;p&gt;Where do you mean?  In createField?  Or in the getFieldQuery?&lt;/p&gt;</comment>
                            <comment id="12792725" author="gsingers" created="Sat, 19 Dec 2009 00:41:10 +0000"  >&lt;p&gt;Actually, we should probably move the creation of the actual PointType off to &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1586&quot; title=&quot;Create Spatial Point FieldTypes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1586&quot;&gt;&lt;del&gt;SOLR-1586&lt;/del&gt;&lt;/a&gt;, anyway.  The reason I want n-dimensional is b/c this stuff is useful for more than just traditional lat/lon.  &lt;/p&gt;</comment>
                            <comment id="12792751" author="chrismattmann" created="Sat, 19 Dec 2009 01:43:33 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Actually, we should probably move the creation of the actual PointType off to &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1586&quot; title=&quot;Create Spatial Point FieldTypes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1586&quot;&gt;&lt;del&gt;SOLR-1586&lt;/del&gt;&lt;/a&gt;, anyway. The reason I want n-dimensional is b/c this stuff is useful for more than just traditional lat/lon. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, I was going to suggest the same thing. BTW, the geohash field type is ready when you have a chance to take a look.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                            <comment id="12792848" author="yseeley@gmail.com" created="Sat, 19 Dec 2009 14:50:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we want generic. Some geo stuff will want 3D (elevation).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I imagine 99% of the users of Point will be those wanting straight 2D geo search (limit by simple distance, or sort by simple distance).&lt;br/&gt;
I don&apos;t see how elevation would help in isolation since more accurate distance measures would presumably need map info for driving distance.&lt;br/&gt;
I could see people wanting to &lt;b&gt;store&lt;/b&gt; 3D points, etc, but they can do that today.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I thought about that, but why should we have to figure out what the dynamic field is every time when we already know it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s more of an issue of directly creating fields... that&apos;s currently up to the schema (or the FieldType if some form of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1664&quot; title=&quot;Some Methods in FieldType actually should be in SchemaField&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1664&quot;&gt;SOLR-1664&lt;/a&gt; goes in).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;gt; make PointType actually delegate to the subFieldType... before it was assuming thinks like TermQuery and TermRangeQuery... this would have actually disabled NumericRangeQuery speedups!&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;Where do you mean? In createField? Or in the getFieldQuery?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In getFieldQuery and getRangeQuery... I changed to actually delegate to the subFieldType.getFieldQuery and getRangeQuery.&lt;/p&gt;</comment>
                            <comment id="12792864" author="gsingers" created="Sat, 19 Dec 2009 17:08:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;I imagine 99% of the users of Point will be those wanting straight 2D geo search (limit by simple distance, or sort by simple distance).&lt;br/&gt;
I don&apos;t see how elevation would help in isolation since more accurate distance measures would presumably need map info for driving distance.&lt;br/&gt;
I could see people wanting to store 3D points, etc, but they can do that today.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But it&apos;s not like the code is any faster or more complicated and neither is the interface the user sees (I&apos;m sure most people know what a point is).  If I have a generic Point, now I have a Vector.  With a Vector, I can do all kinds of interesting things.  But rather than fret over it, we can have both.  LatLonFieldType and PointFieldType.&lt;/p&gt;</comment>
                            <comment id="12792875" author="steve_rowe" created="Sat, 19 Dec 2009 17:42:02 +0000"  >&lt;p&gt;Maybe Point -&amp;gt; &lt;/p&gt;
{ Point2D, Point3D }
&lt;p&gt; ?&lt;/p&gt;</comment>
                            <comment id="12793313" author="gsingers" created="Mon, 21 Dec 2009 19:43:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;It&apos;s more of an issue of directly creating fields... that&apos;s currently up to the schema &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not following.  Is the problem in:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Fieldable[] createFields(SchemaField field, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; externalVal, &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; boost) {
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] point = DistanceUtils.parsePoint(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, externalVal, dimension);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; createFields(field, dynFieldProps, subType, externalVal, boost, point);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12793320" author="gsingers" created="Mon, 21 Dec 2009 19:53:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;fix createFields() to return Fieldable instead of Field&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This seems a bit weird (even though I understand why) due to the fact that the other createField methods actually return Field and not Fieldable.  &lt;/p&gt;</comment>
                            <comment id="12793482" author="yseeley@gmail.com" created="Tue, 22 Dec 2009 03:25:04 +0000"  >&lt;p&gt;&amp;gt; &amp;gt;    It&apos;s more of an issue of directly creating fields... that&apos;s currently up to the schema &lt;br/&gt;
&amp;gt; I&apos;m not following. Is the problem in:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;br/&gt;
No, I meant directly creating SchemaFields doesn&apos;t seem great.  If we put a cache in, it would bypass that too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This seems a bit weird (even though I understand why) due to the fact that the other createField methods actually return Field and not Fieldable. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If it weren&apos;t for back compat, we would have already changed createField to return Fieldable (and I think there&apos;s a SOLR issue somewhere that either does this or depends on it).  Fields are a lot more limiting than Fieldables (but createField was in Solr before there even was a Fieldable).&lt;/p&gt;

&lt;p&gt;if &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1664&quot; title=&quot;Some Methods in FieldType actually should be in SchemaField&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1664&quot;&gt;SOLR-1664&lt;/a&gt; goes ahead it might be a natural place to make everything in SchemaField deal in Fieldabes?&lt;/p&gt;</comment>
                            <comment id="12793521" author="noble.paul" created="Tue, 22 Dec 2009 06:00:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;if &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1664&quot; title=&quot;Some Methods in FieldType actually should be in SchemaField&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1664&quot;&gt;SOLR-1664&lt;/a&gt; goes ahead it might be a natural place to make everything in SchemaField deal in Fieldabes?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What stops us from resolving &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1664&quot; title=&quot;Some Methods in FieldType actually should be in SchemaField&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1664&quot;&gt;SOLR-1664&lt;/a&gt; ? &lt;/p&gt;</comment>
                            <comment id="12793679" author="gsingers" created="Tue, 22 Dec 2009 17:20:58 +0000"  >&lt;p&gt;Updated to include some of Yonik&apos;s concerns about implementation.  I didn&apos;t get his Javadoc changes b/c they were too hard to determine the differences.&lt;/p&gt;

&lt;p&gt;Other notes:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Removed PlusMinusField and just used the PointType for those tests.  This then allowed me to move the registerPoly static method to the CoordinateFieldType&lt;/li&gt;
	&lt;li&gt;I kept the n-dimensional point.  All of our distances work on vectors, I see no reason not to keep them.  Performance wise, most people w/ dimension of 2 or 3 will see little if any difference between this and specifically calling out a lat/lon field type.&lt;/li&gt;
	&lt;li&gt;I believe I cleaned up the public method stuff so that helper methods are now package private.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12793699" author="gsingers" created="Tue, 22 Dec 2009 18:08:21 +0000"  >&lt;p&gt;Note, I also changed PointValueSource to be ToMultiValueSource, as it really isn&apos;t just a point, but I&apos;m not married to that name either.&lt;/p&gt;</comment>
                            <comment id="12794054" author="gsingers" created="Wed, 23 Dec 2009 14:08:36 +0000"  >&lt;p&gt;Added some range tests.&lt;/p&gt;</comment>
                            <comment id="12794413" author="gsingers" created="Thu, 24 Dec 2009 13:04:51 +0000"  >&lt;p&gt;Committed revision 893746.&lt;/p&gt;

&lt;p&gt;Leaving open for a little while to deal with any side effects.&lt;/p&gt;</comment>
                            <comment id="12794439" author="yseeley@gmail.com" created="Thu, 24 Dec 2009 15:02:59 +0000"  >&lt;p&gt;OK, I&apos;ll try to diff what I had done before and re-make those changes.&lt;br/&gt;
edit: I also see bug fixes I had made that got lost... I&apos;ll do a full re-review.&lt;br/&gt;
edit: It appears the subFieldSuffix is broken again too.&lt;/p&gt;</comment>
                            <comment id="12794445" author="gsingers" created="Thu, 24 Dec 2009 15:30:44 +0000"  >&lt;p&gt;OK, I thought I had got them all, but feel free to commit as you see fit.&lt;/p&gt;</comment>
                            <comment id="12794842" author="gsingers" created="Mon, 28 Dec 2009 18:15:04 +0000"  >&lt;p&gt;Changed toMultiVS to vector(): Committed revision 894183. &lt;/p&gt;</comment>
                            <comment id="12872676" author="hossman" created="Thu, 27 May 2010 23:57:43 +0100"  >&lt;p&gt;Correcting Fix Version based on CHANGES.txt, see this thread for more details...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13013092" author="gsingers" created="Wed, 30 Mar 2011 16:45:31 +0100"  >&lt;p&gt;Bulk close for 3.1.0 release&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12440848">SOLR-1568</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12441367">SOLR-1586</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12443178">SOLR-1650</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12404381">SOLR-773</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12468549">SOLR-1986</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12406593" name="SOLR-1131-IndexMultipleFields.patch" size="4962" author="ryantxu" created="Tue, 28 Apr 2009 02:29:47 +0100"/>
                            <attachment id="12427657" name="SOLR-1131.Mattmann.121009.patch.txt" size="69526" author="chrismattmann" created="Thu, 10 Dec 2009 23:06:27 +0000"/>
                            <attachment id="12427758" name="SOLR-1131.Mattmann.121109.patch.txt" size="122538" author="chrismattmann" created="Fri, 11 Dec 2009 19:38:26 +0000"/>
                            <attachment id="12428822" name="SOLR-1131.patch" size="123612" author="gsingers" created="Wed, 23 Dec 2009 14:08:36 +0000"/>
                            <attachment id="12428741" name="SOLR-1131.patch" size="120933" author="gsingers" created="Tue, 22 Dec 2009 17:20:58 +0000"/>
                            <attachment id="12428490" name="SOLR-1131.patch" size="132143" author="yseeley@gmail.com" created="Fri, 18 Dec 2009 22:14:36 +0000"/>
                            <attachment id="12428299" name="SOLR-1131.patch" size="124325" author="gsingers" created="Thu, 17 Dec 2009 15:12:03 +0000"/>
                            <attachment id="12428135" name="SOLR-1131.patch" size="127327" author="noble.paul" created="Wed, 16 Dec 2009 06:57:25 +0000"/>
                            <attachment id="12428042" name="SOLR-1131.patch" size="124574" author="shalinmangar" created="Tue, 15 Dec 2009 13:44:33 +0000"/>
                            <attachment id="12427851" name="SOLR-1131.patch" size="122238" author="gsingers" created="Sun, 13 Dec 2009 12:14:08 +0000"/>
                            <attachment id="12427834" name="SOLR-1131.patch" size="121062" author="gsingers" created="Sat, 12 Dec 2009 22:00:50 +0000"/>
                            <attachment id="12427740" name="SOLR-1131.patch" size="117764" author="gsingers" created="Fri, 11 Dec 2009 17:28:00 +0000"/>
                            <attachment id="12427612" name="SOLR-1131.patch" size="71175" author="gsingers" created="Thu, 10 Dec 2009 16:34:03 +0000"/>
                            <attachment id="12427189" name="SOLR-1131.patch" size="84364" author="gsingers" created="Mon, 7 Dec 2009 15:27:14 +0000"/>
                            <attachment id="12426350" name="SOLR-1131.patch" size="26705" author="yseeley@gmail.com" created="Sun, 29 Nov 2009 01:30:53 +0000"/>
                            <attachment id="12426346" name="SOLR-1131.patch" size="17360" author="yseeley@gmail.com" created="Sun, 29 Nov 2009 00:00:38 +0000"/>
                            <attachment id="12425757" name="SOLR-1131.patch" size="15934" author="gsingers" created="Sun, 22 Nov 2009 13:39:29 +0000"/>
                            <attachment id="12425699" name="SOLR-1131.patch" size="6088" author="gsingers" created="Sat, 21 Nov 2009 02:52:04 +0000"/>
                            <attachment id="12428491" name="diff.patch" size="92758" author="yseeley@gmail.com" created="Fri, 18 Dec 2009 22:14:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 28 Apr 2009 09:08:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6510</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxn3z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20063</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>