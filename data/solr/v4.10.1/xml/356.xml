<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:23:35 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-356/SOLR-356.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-356] pluggable functions (value sources)</title>
                <link>https://issues.apache.org/jira/browse/SOLR-356</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;allow configuration of new value sources ot be created by the function query parser.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12378326">SOLR-356</key>
            <summary>pluggable functions (value sources)</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="yseeley@gmail.com">Yonik Seeley</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Sep 2007 23:11:38 +0100</created>
                <updated>Fri, 10 May 2013 11:39:57 +0100</updated>
                            <resolved>Thu, 28 Feb 2008 14:11:09 +0000</resolved>
                                                    <fixVersion>1.3</fixVersion>
                                        <due></due>
                            <votes>2</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12528896" author="jonpierce" created="Wed, 19 Sep 2007 22:01:42 +0100"  >&lt;p&gt;A related thread on the list:&lt;br/&gt;
&lt;a href=&quot;http://www.mail-archive.com/solr-user@lucene.apache.org/msg06073.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.mail-archive.com/solr-user@lucene.apache.org/msg06073.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/pluggable-functions-tf4476995.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/pluggable-functions-tf4476995.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12558357" author="ddaniels" created="Sun, 13 Jan 2008 07:38:05 +0000"  >&lt;p&gt;This is a quick attempt at pluggable functions using the same style as Yonik&apos;s QParser plugins.  it takes the path suggested in &lt;a href=&quot;http://www.nabble.com/forum/ViewPost.jtp?post=12770704&amp;amp;framed=y&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/forum/ViewPost.jtp?post=12770704&amp;amp;framed=y&lt;/a&gt; by letting people register new functions as ValueSourceParser plugins in solrconfig.&lt;/p&gt;</comment>
                            <comment id="12558423" author="yseeley@gmail.com" created="Sun, 13 Jan 2008 16:35:01 +0000"  >&lt;p&gt;Thanks for taking a crack at this Doug!&lt;/p&gt;

&lt;p&gt;My initial thought was perhaps to simply have a Map from function name to ValueSource class, and the ValueSource could either&lt;br/&gt;
1) take a List&amp;lt;Object&amp;gt; (or NamedList if we want to start supporting named params like python, etc)&lt;br/&gt;
2) specify the argment list so that the function parser could validate the parameters (but on second thought, I think this could get too complex)&lt;/p&gt;

&lt;p&gt;But your use of ValueSourceParser looks to have advantages, as it&apos;s essentially a factory and can  act as a virtual constructor, and can be initialized with different static params from config.&lt;/p&gt;

&lt;p&gt;One question would be if we really want to expose StrParser to the ValueSourceParser.&lt;br/&gt;
StrParser is a really quick hack I threw together (that&apos;s grown) and I could see it changing in the future (esp if we eventually implement an infix parser).  Two ways of isolating the ValueSourceParser from the low level details of parsing I see are:&lt;br/&gt;
1) have a ValueSourceParser.createValueSource(List params), and the function parser would create the list&lt;br/&gt;
   and pass it to the parser&lt;br/&gt;
2) keep the current style, and lock down the public APIs on FunctionQParser.  Remove some of the details of parsing (like reading separators).  So the following code from your patch&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    standardValueSourceParsers.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;max&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ValueSourceParser() {
      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ValueSource parse(FunctionQParser fp) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; ParseException {
        ValueSource source = fp.parseValSource();
        fp.getStrParser().expect(&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;);
        &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; val = fp.getStrParser().getFloat();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MaxFloatFunction(source,val);
      }
    });
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Would look something more like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    standardValueSourceParsers.put(&lt;span class=&quot;code-quote&quot;&gt;&quot;max&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ValueSourceParser() {
      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ValueSource parse(FunctionQParser fp) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; ParseException {
        ValueSource source = fp.getValSource();
        &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; val = fp.getFloat();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MaxFloatFunction(source,val);
      }
    });
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12558434" author="ddaniels" created="Sun, 13 Jan 2008 18:13:51 +0000"  >&lt;p&gt;I agree that the ValueSourceParser should be isolated from the low-level details like grabbing commas between args.&lt;/p&gt;

&lt;p&gt;I thought about the first option you suggested, and it seems difficult with recursive functions.  When the ValueSourceParser.createValueSource method expects another ValueSource as an arg, it would need to invoke whatever code created it (presumably from the FunctionQParser).   Alternately, the FunctionQParser could ensure that the innermost functions are run first, passing their completed values out to enclosing functions as params.&lt;/p&gt;

&lt;p&gt;It seems simpler to me to go with the second option though &amp;#8211; locking down the API on FunctionQParser.  The ValueSourceParser would already have access to FunctionQParser, which it could call when it needs to parse a ValueSource argument.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="12558471" author="ddaniels" created="Sun, 13 Jan 2008 23:55:53 +0000"  >&lt;p&gt;Here&apos;s a patch for the second option, hiding the low-level details from ValueSourceParser implementations.&lt;/p&gt;</comment>
                            <comment id="12558525" author="hossman" created="Mon, 14 Jan 2008 07:21:41 +0000"  >&lt;p&gt;I&apos;m not really following this issue, but in skimming the comments i just wanted to toss out the idea that the approach taken by the Lucene-java xml-query-parser contrib might make sense here.&lt;/p&gt;

&lt;p&gt;it&apos;s got the same basic problem: support parsing and building of nested (query/function) structures where user configuration tells you which (query/function) name maps to which implementation.&lt;/p&gt;

&lt;p&gt;the code may not be reusable in this case, but the pattern may be (not that i remember much about what the pattern was, just that it made a lot of sense when it was being fleshed out)&lt;/p&gt;</comment>
                            <comment id="12559075" author="ddaniels" created="Tue, 15 Jan 2008 15:16:03 +0000"  >&lt;p&gt;I found that thread at &lt;a href=&quot;http://marc.info/?l=lucene-dev&amp;amp;m=113355526731460&amp;amp;w=2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://marc.info/?l=lucene-dev&amp;amp;m=113355526731460&amp;amp;w=2&lt;/a&gt;.  It&apos;s quite a lengthy thread, but from what I read I agree that it&apos;s trying to solve a similar problem (plus a few additional problems that solr has since solved nicely).&lt;/p&gt;

&lt;p&gt;Perhaps it&apos;s just personal preference, but I find XML description of functions, though powerful and expressive, quite a bit clunky.  I far prefer the functional style for this sort of task.&lt;/p&gt;

&lt;p&gt;Maybe I&apos;m missing something from the recommendation though.  Were you recommending using XML to express the functions themselves, or something else about the xml-query-parser?&lt;/p&gt;</comment>
                            <comment id="12559206" author="hossman" created="Tue, 15 Jan 2008 20:03:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe I&apos;m missing something from the recommendation though. Were you recommending using XML to express the functions themselves, or something else about the xml-query-parser?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was not suggesting an XML syntax ... just that the approach the xml-query-parser takes to deal with recursively parsing/eval-ing the XML structure using &quot;user&quot; configured implementations for each type of XML node seems to map closely to the idea of recusively parsing/eval-ing parenthetical function syntax using &quot;user&quot; configured implantations for each function name.&lt;/p&gt;

&lt;p&gt;In both cases the XML/paren parsing is trivial, it&apos;s deciding how to let the &quot;user&quot; tell you what Java objects to build based on each node/function name that gets interesting.&lt;/p&gt;

&lt;p&gt;(like i said, i haven&apos;t looked at the xml-query-parser code since it was orriginally being written .. i may be over romanticizing the idea behind it&apos;s design and how applicable it could be in this case)&lt;/p&gt;</comment>
                            <comment id="12560207" author="yseeley@gmail.com" created="Fri, 18 Jan 2008 03:26:34 +0000"  >&lt;p&gt;Looking good! I think the current API is straight forward and relatively easy to support, even if we changed underlying parsing technologies.&lt;/p&gt;

&lt;p&gt;I think all we need now is a test that exercises plugging in a new function from solrconfig.xml...&lt;/p&gt;</comment>
                            <comment id="12564494" author="ddaniels" created="Thu, 31 Jan 2008 20:45:37 +0000"  >&lt;p&gt;Added a sample ValueSourceParser plugin and some tests for it in TestFunctionQuery.  The sample plugin is for an &quot;nvl&quot; function that replaces a null value in a doc with a parameter float value. It works much like the oracle SQL function of the same name.  It also takes in an initialization parameter to test that functionality out.&lt;/p&gt;

&lt;p&gt;I also made TestFunctionQuery use a new copy of solrconfig.xml (in solrconfig-functionquery.xml) to avoid polluting the standard one with plugins.&lt;/p&gt;</comment>
                            <comment id="12573293" author="yseeley@gmail.com" created="Thu, 28 Feb 2008 14:11:09 +0000"  >&lt;p&gt;I just committed this.  Thanks Doug!&lt;/p&gt;</comment>
                            <comment id="12579143" author="hossman" created="Sun, 16 Mar 2008 03:23:52 +0000"  >&lt;p&gt;This bug was modified as part of a bulk update using the criteria...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Marked &quot;Resolved&quot; and &quot;Fixed&quot;&lt;/li&gt;
	&lt;li&gt;Had no &quot;Fix Version&quot; versions&lt;/li&gt;
	&lt;li&gt;Was listed in the CHANGES.txt for 1.3 as of today 2008-03-15&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The Fix Version for all 29 issues found was set to 1.3, email notification was suppressed to prevent excessive email.&lt;/p&gt;

&lt;p&gt;For a list of all the issues modified, search jira comments for this (hopefully) unique string: batch20070315hossman1&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12374499" name="pluggableFunctions.patch" size="41405" author="ddaniels" created="Thu, 31 Jan 2008 20:45:36 +0000"/>
                            <attachment id="12373067" name="pluggableFunctions.patch" size="25486" author="ddaniels" created="Sun, 13 Jan 2008 23:55:52 +0000"/>
                            <attachment id="12373046" name="pluggableFunctions.patch" size="20402" author="ddaniels" created="Sun, 13 Jan 2008 07:38:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 19 Sep 2007 21:01:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7237</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxrtz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20828</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>