<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:18:13 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-822/SOLR-822.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-822] CharFilter - normalize characters before tokenizer</title>
                <link>https://issues.apache.org/jira/browse/SOLR-822</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;A new plugin which can be placed in front of &amp;lt;tokenizer/&amp;gt;.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;fieldType name=&lt;span class=&quot;code-quote&quot;&gt;&quot;textCharNorm&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.TextField&quot;&lt;/span&gt; positionIncrementGap=&lt;span class=&quot;code-quote&quot;&gt;&quot;100&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;charFilter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.MappingCharFilterFactory&quot;&lt;/span&gt; mapping=&lt;span class=&quot;code-quote&quot;&gt;&quot;mapping_ja.txt&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.MappingCJKTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.StopFilterFactory&quot;&lt;/span&gt; ignoreCase=&lt;span class=&quot;code-quote&quot;&gt;&quot;true&quot;&lt;/span&gt; words=&lt;span class=&quot;code-quote&quot;&gt;&quot;stopwords.txt&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.LowerCaseFilterFactory&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;lt;charFilter/&amp;gt; can be multiple (chained). I&apos;ll post a JPEG file to show character normalization sample soon.&lt;/p&gt;

&lt;p&gt;MOTIVATION:&lt;br/&gt;
In Japan, there are two types of tokenizers &amp;#8211; N-gram (CJKTokenizer) and Morphological Analyzer.&lt;br/&gt;
When we use morphological analyzer, because the analyzer uses Japanese dictionary to detect terms,&lt;br/&gt;
we need to normalize characters before tokenization.&lt;/p&gt;

&lt;p&gt;I&apos;ll post a patch soon, too.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12406978">SOLR-822</key>
            <summary>CharFilter - normalize characters before tokenizer</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="koji">Koji Sekiguchi</assignee>
                                    <reporter username="koji">Koji Sekiguchi</reporter>
                        <labels>
                    </labels>
                <created>Wed, 22 Oct 2008 11:18:42 +0100</created>
                <updated>Fri, 10 Jan 2014 14:26:55 +0000</updated>
                            <resolved>Thu, 19 Mar 2009 11:52:52 +0000</resolved>
                                    <version>1.3</version>
                                    <fixVersion>1.4</fixVersion>
                                    <component>Schema and Analysis</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12641758" author="koji" created="Wed, 22 Oct 2008 11:21:16 +0100"  >&lt;p&gt;forgive me if I&apos;m wrong something with German and Chinese language. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12641763" author="koji" created="Wed, 22 Oct 2008 11:32:30 +0100"  >&lt;p&gt;patch attached. it includes MappingCharFilter and its Factory as a sample charFilter.&lt;/p&gt;

&lt;p&gt;Known bug:&lt;br/&gt;
analysis.jsp has not been supported yet in this patch. This can be fixed.&lt;/p&gt;</comment>
                            <comment id="12642169" author="koji" created="Thu, 23 Oct 2008 15:31:06 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Known bug:&lt;br/&gt;
analysis.jsp has not been supported yet in this patch. This can be fixed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Now the patch fixes the bug.&lt;/p&gt;</comment>
                            <comment id="12642178" author="koji" created="Thu, 23 Oct 2008 16:03:05 +0100"  >&lt;p&gt;sample_mapping_ja.txt file is attached. To use it, open schema.xml by editor and define textCharNorm fieldType and text_cjk field as follows:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;fieldType name=&lt;span class=&quot;code-quote&quot;&gt;&quot;textCharNorm&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.TextField&quot;&lt;/span&gt; positionIncrementGap=&lt;span class=&quot;code-quote&quot;&gt;&quot;100&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;charFilter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.MappingCharFilterFactory&quot;&lt;/span&gt; mapping=&lt;span class=&quot;code-quote&quot;&gt;&quot;sample_mapping_ja.txt&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.MappingCJKTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.LowerCaseFilterFactory&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;field name=&lt;span class=&quot;code-quote&quot;&gt;&quot;text_cjk&quot;&lt;/span&gt; type=&lt;span class=&quot;code-quote&quot;&gt;&quot;textCharNorm&quot;&lt;/span&gt; indexed=&lt;span class=&quot;code-quote&quot;&gt;&quot;true&quot;&lt;/span&gt; stored=&lt;span class=&quot;code-quote&quot;&gt;&quot;true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then start solr and access analysis.jsp.&lt;/p&gt;</comment>
                            <comment id="12642181" author="tfeak" created="Thu, 23 Oct 2008 16:13:43 +0100"  >&lt;p&gt;Seems like a very flexible way to solve the issue, as well as &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-814&quot; title=&quot;Add new Japanese Hiragana Filter and Factory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-814&quot;&gt;&lt;del&gt;SOLR-814&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-815&quot; title=&quot;Add new Japanese half-width/full-width normalizaton Filter and Factory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-815&quot;&gt;&lt;del&gt;SOLR-815&lt;/del&gt;&lt;/a&gt;. It should also work for existing filters like LowerCase. Seems like it has the potential to be faster then the filters, as it doesn&apos;t have to perform the same replacement multiple times if a particular character is replicated into multiple tokens, like in NGramTokenizer or CJKTokenizer.&lt;/p&gt;

&lt;p&gt;I didn&apos;t look in depth at the patch (good size patch to look through), but I wanted to verify at least 2 things. First, I assume that this only affects indexing and searching, not the actual document field contents? Second, is it easy to create a MappingCharFilter subclass with a hardcoded map built in? I don&apos;t think users should all have to recreate the same mapping files if we can just embed them.&lt;/p&gt;

&lt;p&gt;However, what about Lucene? Is this something that should exist in Lucene first, then be expanded to Solr? Are Lucene users in need of a similar functionality?&lt;/p&gt;</comment>
                            <comment id="12642183" author="tfeak" created="Thu, 23 Oct 2008 16:16:05 +0100"  >&lt;p&gt;Oh, and another thought. Can it support characters written as &quot;\uff01&quot; format in the mapping file?&lt;/p&gt;</comment>
                            <comment id="12642188" author="wunder" created="Thu, 23 Oct 2008 16:31:37 +0100"  >&lt;p&gt;Yes, it should be in Lucene. LIke this: &lt;a href=&quot;http://webui.sourcelabs.com/lucene/issues/1343&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://webui.sourcelabs.com/lucene/issues/1343&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are (at least) four kinds of character mapping:&lt;/p&gt;

&lt;p&gt;Unicode normalization from decomposed to composed forms (always safe).&lt;/p&gt;

&lt;p&gt;Unicode normalization from compatability forms to standard forms (may change the look, like fullwidth to halfwidth Latin).&lt;/p&gt;

&lt;p&gt;Language-specific normalization, like &quot;oe&quot; to &quot;&#246;&quot; (German-only).&lt;/p&gt;

&lt;p&gt;Mappings that improve search but are linguistically dodgy, like stripping accents and mapping katakana to hirigana.&lt;/p&gt;

&lt;p&gt;wunder&lt;/p&gt;</comment>
                            <comment id="12642210" author="koji" created="Thu, 23 Oct 2008 18:33:40 +0100"  >&lt;blockquote&gt;
&lt;p&gt;First, I assume that this only affects indexing and searching, not the actual document field contents?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right. This only affects indexing and searching.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Second, is it easy to create a MappingCharFilter subclass with a hardcoded map built in?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I didn&apos;t expect such use case, but it is must have.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Can it support characters written as &quot;\uff01&quot; format in the mapping file?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The patch doesn&apos;t support this format, but must have, too.&lt;/p&gt;</comment>
                            <comment id="12642631" author="hossman" created="Sat, 25 Oct 2008 17:10:27 +0100"  >&lt;p&gt;Koji:&lt;/p&gt;

&lt;p&gt;1) the patch is a little hard to read ... there seems to be a ton of unrelated whitespace changes (some in files that don&apos;t seem like they need modified for this functionality at all)&lt;/p&gt;

&lt;p&gt;2) the motivation of adding a new type of plugin that has direct access to the &quot;stream of characters&quot; in the Reader before the tokenizer gets access to it seems like a great idea, but i&apos;m a little unclear as to the specific reason for some of the new apis: CharReader, CharFilter, CharStream.  What value do these add beyond something like...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class ReaderWrapperFactory {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void init(Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; args) { ... }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; getArgs() { ... }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Reader create(Reader input) { 
     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; input;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;?&lt;/p&gt;</comment>
                            <comment id="12642835" author="koji" created="Mon, 27 Oct 2008 02:07:30 +0000"  >&lt;p&gt;Hoss,&lt;/p&gt;

&lt;p&gt;Sorry about the unrelated whitespaces in the patch. I&apos;ll remove them in the next patch.&lt;/p&gt;

&lt;p&gt;About CharStream, CharReader and CharFilter classes, I created CharFilterFactory:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; CharFilterFactory {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void init(Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; args);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; getArgs();
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CharStream create(CharStream input);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;instead of ReaderWrapperFactory mentioned by Hoss. CharFilterFactory is a factory of CharFilter which reads CharStream and outputs CharStream. CharStream is a Reader but has correctPosition method:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class CharStream &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Reader {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; correctPosition( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; currentPos );
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method will be called by CharFilters and Tokenizer(in this case, Tokenizer should be CharStream &quot;aware&quot;) to correct start/end offsets of tokens, because CharFilters may convert 1 char to 2 chars or the other way around. The following is a sample implementation of the method:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;MappingCharFilter.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;PosCorrectMap&amp;gt; pcmList;

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; correctPosition( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; currentPos ){
  currentPos = input.correctPosition( currentPos );
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( pcmList.isEmpty() ) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; currentPos;
  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = pcmList.size() - 1; i &amp;gt;= 0; i-- ){
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( currentPos &amp;gt;= pcmList.get( i ).pos )
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; currentPos + pcmList.get( i ).cumulativeDiff;
  }
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; currentPos;
}

&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class PosCorrectMap {
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; pos;
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; cumulativeDiff;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; PosCorrectMap( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; pos, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; cumulativeDiff ){
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.pos = pos;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.cumulativeDiff = cumulativeDiff;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is another CharStream class, CharReader. It is a Reader wrapper and necessary to get Reader and outputs CharStream. CharReader is a concrete class and instanciated in TokenizerChain.&lt;/p&gt;

&lt;p&gt;Does that make sense to you?&lt;/p&gt;</comment>
                            <comment id="12642913" author="koji" created="Mon, 27 Oct 2008 13:22:36 +0000"  >&lt;p&gt;I think I found a bug... the correctPosition() returns incorrect position. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;m working on that...&lt;/p&gt;</comment>
                            <comment id="12643443" author="koji" created="Wed, 29 Oct 2008 09:04:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think I found a bug... the correctPosition() returns incorrect position.  I&apos;m working on that...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Attached patch fixes the problem. It also includes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;some unit tests&lt;/li&gt;
	&lt;li&gt;Javadoc for CharStream, CharReader and CharFilter&lt;/li&gt;
	&lt;li&gt;rename correctPosition() to correctOffset() and make it final in CharFilter:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; correctOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; currentOff) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; input.correctOffset( correctPosition( currentOff ) );
}

&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; correctPosition( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; pos ){
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pos;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then correctOffset() calls correctPosition(). correctPosition() can be override to correct position in subclass of CharFilter.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rename MappingCJKTokenizer to CharStreamAwareCJKTokenizer&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TODO:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;support \uNNNN style in mapping.txt&lt;/li&gt;
	&lt;li&gt;add StopCharFilter&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="12643608" author="hossman" created="Wed, 29 Oct 2008 19:03:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;Does that make sense to you?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, definitely ... but still a few questions:&lt;/p&gt;

&lt;p&gt;1) if i understand correctly: another use case beyond character normalization could be refactoring the existing HTMLStrip___Tokenizers so that instead people would use an HTMLStripCharFilter and then whatever tokenizer they like, correct?&lt;/p&gt;

&lt;p&gt;2) based on your explanation, shouldn&apos;t CharFilterFactory be renamed CharStreamFactory ? ... there&apos;s no requirement that implementations produce a CharFilter, as long as they produce a ChaStream, correct?&lt;/p&gt;

&lt;p&gt;3) should CharStream extend FilterReader?&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;One thing that worries me is the interaction of CharStreams with their corrected positions and Tokenizers that may not know about CharStream at all.  Oviously that could just be an unsupported case (ie; if you want to use some CharStreamFactories, you better use a TokenizerFactory that can handle it) but i still suspect some people could easily be bitten by this.&lt;/p&gt;

&lt;p&gt;i wonder if we could protect people from this.  perhaps a new CharStreamTokenizerFactory interface that must be implemented by any TokenizerFactory that knows about CharStreams (with a single &quot;public TokenStream create(CharStream input)&quot;)  if a fieldType uses any CharStreamFactory it&apos;s an initialize error unless the TokenizerFactory is also a CharStreamTokenizerFactory.&lt;/p&gt;

&lt;p&gt;Something else to consider: it seems like a lot of future headache could be simplied if the CharStream API was committed in lucene-java so that the Tokenizer API and all of the existing OOTB Tokenizers could know about it.&lt;/p&gt;</comment>
                            <comment id="12644955" author="koji" created="Tue, 4 Nov 2008 13:18:06 +0000"  >&lt;p&gt;Hoss, sorry for the late reply.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) if i understand correctly: another use case beyond character normalization could be refactoring the existing HTMLStrip___Tokenizers so that instead people would use an HTMLStripCharFilter and then whatever tokenizer they like, correct?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Correct.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3) should CharStream extend FilterReader?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we need all these classes to construct the CharFilter framework - CharStream, CharReader and CharFilter. CharReader and CharFilter are the subclass of CharStream. CharStream has an abstract method correctOffset():&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class CharStream &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Reader {
  /**
   * called by CharFilter(s) and Tokenizer to correct token offset.
   *
   * @param currentOff current offset
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; corrected token offset
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; correctOffset( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; currentOff );
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CharStream extends Reader instead of FilterReader because FilterReader has a Reader member but I don&apos;t need it. Instead, CharReader has a Reader and CharFilter has CharStream. The role of CharReader is that it wraps Reader and makes it CharStream.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; class CharReader &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; CharStream {
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; Reader input;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CharReader( Reader in ){
    input = in;
  }
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; correctOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; currentOff) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; currentOff;
  }
  :
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then CharReader is placed at the beginning of char-filter-chain. Now we get CharStream, CharFilters can be used to organize&lt;br/&gt;
a filter chain. I made the correctOffset() to final in CharFilter.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class CharFilter &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; CharStream {
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; CharStream input;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; CharFilter( CharStream in ){
    input = in;
  }
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; correctPosition( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; pos ){
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pos;
  }
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; correctOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; currentOff) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; input.correctOffset( correctPosition( currentOff ) );
  }
  :
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Subclass of CharFilter can override correctPosition() method to correct current position.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2) based on your explanation, shouldn&apos;t CharFilterFactory be renamed CharStreamFactory ? ... there&apos;s no requirement that implementations produce a CharFilter, as long as they produce a ChaStream, correct?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, CharFilterFactory creates CharStream but I like CharFilterFactory because 1) the factory will instanciate CharFilter (not CharStream) and 2) the return type of TokenFilterFactory.create() is TokenStream although it instantiates TokenFilter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Something else to consider: it seems like a lot of future headache could be simplied if the CharStream API was committed in lucene-java so that the Tokenizer API and all of the existing OOTB Tokenizers could know about it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. I&apos;ll open a ticket in Lucene.&lt;/p&gt;</comment>
                            <comment id="12645654" author="koji" created="Fri, 7 Nov 2008 01:24:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Agreed. I&apos;ll open a ticket in Lucene.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Before opening a ticket, I&apos;m seeking comments:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Proposal-for-introducing-CharFilter-to20327007.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Proposal-for-introducing-CharFilter-to20327007.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12646309" author="koji" created="Mon, 10 Nov 2008 17:37:19 +0000"  >&lt;p&gt;The patch includes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&apos;\uNNNN&apos; style supported in mapping.txt&lt;/li&gt;
	&lt;li&gt;mapping-ISOLatin1Accent.txt&lt;/li&gt;
	&lt;li&gt;CharStreamAwareWhitespaceTokenizer&lt;/li&gt;
	&lt;li&gt;&amp;lt;charFilter/&amp;gt; in example/solr/conf/schema.xml
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;&amp;lt;!-- charFilter + WhitespaceTokenizer  --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;fieldType name=&lt;span class=&quot;code-quote&quot;&gt;&quot;textCharNorm&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.TextField&quot;&lt;/span&gt; positionIncrementGap=&lt;span class=&quot;code-quote&quot;&gt;&quot;100&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;charFilter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.MappingCharFilterFactory&quot;&lt;/span&gt; mapping=&lt;span class=&quot;code-quote&quot;&gt;&quot;mapping-ISOLatin1Accent.txt&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.CharStreamAwareWhitespaceTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12646588" author="koji" created="Tue, 11 Nov 2008 16:31:51 +0000"  >&lt;p&gt;added:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;support multiple mapping files (&lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-663&quot; title=&quot;Allow multiple files for stopwords, protwords and synonyms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-663&quot;&gt;&lt;del&gt;SOLR-663&lt;/del&gt;&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;an abstract base class - BaseCharFilter and moved PosCorrectMap to the base class&lt;/li&gt;
	&lt;li&gt;more test code&lt;br/&gt;
I&apos;ll commit in a few days if there is no objections.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12647497" author="koji" created="Fri, 14 Nov 2008 01:57:17 +0000"  >&lt;p&gt;Committed revision 713902.&lt;/p&gt;</comment>
                            <comment id="12648929" author="koji" created="Wed, 19 Nov 2008 08:28:20 +0000"  >&lt;p&gt;patch file for Solr 1.3.0 users.&lt;/p&gt;</comment>
                            <comment id="12677627" author="pwolanin" created="Sat, 28 Feb 2009 02:29:55 +0000"  >&lt;p&gt;Is there an issue for CharStream API  in lucene?  The e-mail thread looks like people were generally in support.&lt;/p&gt;</comment>
                            <comment id="12677641" author="koji" created="Sat, 28 Feb 2009 04:09:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is there an issue for CharStream API in lucene? The e-mail thread looks like people were generally in support. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oops. The pointer of the ticket for Lucene is missing. That is &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1466&quot; title=&quot;CharFilter - normalize characters before tokenizer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1466&quot;&gt;&lt;del&gt;LUCENE-1466&lt;/del&gt;&lt;/a&gt; .&lt;/p&gt;</comment>
                            <comment id="12683345" author="koji" created="Thu, 19 Mar 2009 06:58:29 +0000"  >&lt;p&gt;Reopening because currentPosition() method in CharFilter class is not for token position, but for token offset. It should be renamed before releasing Solr 1.4.&lt;/p&gt;</comment>
                            <comment id="12683347" author="koji" created="Thu, 19 Mar 2009 07:06:51 +0000"  >&lt;p&gt;I plan to commit shortly.&lt;/p&gt;</comment>
                            <comment id="12683443" author="koji" created="Thu, 19 Mar 2009 11:52:52 +0000"  >&lt;p&gt;Committed revision 755945.&lt;/p&gt;</comment>
                            <comment id="12702434" author="otis" created="Fri, 24 Apr 2009 17:49:23 +0100"  >&lt;p&gt;Todd&apos;s comment from Oct 23, 2008 caught my attention:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It should also work for existing filters like LowerCase. Seems like it has the potential to be faster then the filters, as it doesn&apos;t have to perform the same replacement multiple times if a particular character is replicated into multiple tokens, like in NGramTokenizer or CJKTokenizer. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Couldn&apos;t we replace LowerCaseFilter then?  Or does LCF still have some unique value?  Ah, it does - it makes it possible to put it &lt;b&gt;after&lt;/b&gt; something like WordDelimiterFilterFactory.  Lowercasing at the very beginning would make it impossible for WDFF to do its job.  Never mind.  Leaving for posterity.&lt;/p&gt;</comment>
                            <comment id="12711717" author="mbennett" created="Thu, 21 May 2009 18:37:55 +0100"  >&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-814&quot; title=&quot;Add new Japanese Hiragana Filter and Factory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-814&quot;&gt;&lt;del&gt;SOLR-814&lt;/del&gt;&lt;/a&gt; it was suggested that some systems might want to normalizes all Hiragana characters to their Katakana counterpart.&lt;/p&gt;

&lt;p&gt;Although this is not universally agreed to, &lt;b&gt;if&lt;/b&gt; somebody wanted to do it, I believe this attached mapping file would peform that task when used with this 822 patch.  I don&apos;t speak Japanese and don&apos;t have test content yet, so I&apos;m not 100% it works, but wanted to upload it as a start.&lt;/p&gt;</comment>
                            <comment id="12769700" author="lancenorskog" created="Sat, 24 Oct 2009 20:21:53 +0100"  >&lt;p&gt;Please update the Wiki for this feature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters?highlight=char+filters&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters?highlight=char+filters&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12769741" author="koji" created="Sun, 25 Oct 2009 01:26:28 +0100"  >&lt;blockquote&gt;&lt;p&gt;Please update the Wiki for this feature. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Done. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12775559" author="gsingers" created="Tue, 10 Nov 2009 15:51:49 +0000"  >&lt;p&gt;Bulk close for Solr 1.4&lt;/p&gt;</comment>
                            <comment id="13867832" author="not-victor" created="Fri, 10 Jan 2014 14:26:55 +0000"  >&lt;p&gt;An old comment&apos;s link has been moved.&lt;/p&gt;

&lt;p&gt;Originally: &lt;a href=&quot;http://webui.sourcelabs.com/lucene/issues/1343&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://webui.sourcelabs.com/lucene/issues/1343&lt;/a&gt;&lt;br/&gt;
Moved to: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1343&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-1343&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12394228" name="SOLR-822-for-1.3.patch" size="61693" author="koji" created="Wed, 19 Nov 2008 08:28:20 +0000"/>
                            <attachment id="12402551" name="SOLR-822-renameMethod.patch" size="6978" author="koji" created="Thu, 19 Mar 2009 07:06:51 +0000"/>
                            <attachment id="12393713" name="SOLR-822.patch" size="61768" author="koji" created="Tue, 11 Nov 2008 16:31:51 +0000"/>
                            <attachment id="12393648" name="SOLR-822.patch" size="58772" author="koji" created="Mon, 10 Nov 2008 17:37:19 +0000"/>
                            <attachment id="12392977" name="SOLR-822.patch" size="49278" author="koji" created="Wed, 29 Oct 2008 09:04:14 +0000"/>
                            <attachment id="12392730" name="SOLR-822.patch" size="53754" author="koji" created="Thu, 23 Oct 2008 15:31:05 +0100"/>
                            <attachment id="12392641" name="SOLR-822.patch" size="53109" author="koji" created="Wed, 22 Oct 2008 11:32:30 +0100"/>
                            <attachment id="12392639" name="character-normalization.JPG" size="30833" author="koji" created="Wed, 22 Oct 2008 11:21:16 +0100"/>
                            <attachment id="12408724" name="japanese-h-to-k-mapping.txt" size="2962" author="mbennett" created="Thu, 21 May 2009 18:37:55 +0100"/>
                            <attachment id="12393649" name="sample_mapping_ja.txt" size="1787" author="koji" created="Mon, 10 Nov 2008 17:47:54 +0000"/>
                            <attachment id="12392733" name="sample_mapping_ja.txt" size="1307" author="koji" created="Thu, 23 Oct 2008 16:03:05 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 23 Oct 2008 15:13:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6803</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxozz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20369</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>