<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:18:26 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-81/SOLR-81.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-81] Add Query Spellchecker functionality</title>
                <link>https://issues.apache.org/jira/browse/SOLR-81</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;Use the simple approach of n-gramming outside of Solr and indexing n-gram documents.  For example:&lt;/p&gt;

&lt;p&gt;&amp;lt;doc&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;word&quot;&amp;gt;lettuce&amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;start3&quot;&amp;gt;let&amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;gram3&quot;&amp;gt;let ett ttu tuc uce&amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;end3&quot;&amp;gt;uce&amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;start4&quot;&amp;gt;lett&amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;gram4&quot;&amp;gt;lett ettu ttuc tuce&amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;end4&quot;&amp;gt;tuce&amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;/doc&amp;gt;&lt;/p&gt;

&lt;p&gt;See:&lt;br/&gt;
&lt;a href=&quot;http://www.mail-archive.com/solr-user@lucene.apache.org/msg01254.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.mail-archive.com/solr-user@lucene.apache.org/msg01254.html&lt;/a&gt;&lt;br/&gt;
Java clients: &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-20&quot; title=&quot;A simple Java client for updating and searching&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-20&quot;&gt;&lt;del&gt;SOLR-20&lt;/del&gt;&lt;/a&gt; (add delete commit optimize), &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-30&quot; title=&quot;Java client code for performing searches against a Solr instance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-30&quot;&gt;&lt;del&gt;SOLR-30&lt;/del&gt;&lt;/a&gt; (search)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12358370">SOLR-81</key>
            <summary>Add Query Spellchecker functionality</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="otis">Otis Gospodnetic</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 Dec 2006 06:42:50 +0000</created>
                <updated>Fri, 10 May 2013 11:41:01 +0100</updated>
                            <resolved>Tue, 27 Mar 2007 00:33:16 +0100</resolved>
                                                    <fixVersion>1.2</fixVersion>
                                    <component>search</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12457871" author="oguen" created="Tue, 12 Dec 2006 20:37:55 +0000"  >&lt;p&gt;I have created a NGramFilter for generating those gram fields based on the &quot;word&quot; field&lt;br/&gt;
It is configurable with the schema.xml file simply by generating fieldtypes and using the &lt;br/&gt;
copyField directive. &lt;br/&gt;
The generated documents can be used with the Lucene spellchecker extension to fetch a &lt;br/&gt;
suggest word.&lt;br/&gt;
Unfortunately i have made this extension during my working hours and so i can&apos;t apply the &lt;br/&gt;
asf license on it, but if you have question please ask.&lt;/p&gt;</comment>
                            <comment id="12458052" author="otis" created="Wed, 13 Dec 2006 08:51:49 +0000"  >&lt;p&gt;Something like this, then?&lt;/p&gt;

&lt;p&gt;    &amp;lt;fieldtype name=&quot;queryString&quot; class=&quot;solr.TextField&quot; positionIncrementGap=&quot;1&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;analyzer&amp;gt;&lt;br/&gt;
       &amp;lt;tokenizer class=&quot;solr.NGramTokenizerFactory&quot;/&amp;gt;  &amp;lt;!-- Or maybe just make an NGramAnalyzer? --&amp;gt;&lt;br/&gt;
      &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;/analyzer&amp;gt;&lt;br/&gt;
    &amp;lt;/fieldtype&amp;gt;&lt;/p&gt;

&lt;p&gt;Plus:&lt;/p&gt;

&lt;p&gt;&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_start1&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_end1&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_start2&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_end2&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_start3&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_end3&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_gram1&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_gram2&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_gram3&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;word_gram4&quot;/&amp;gt; &lt;/p&gt;

&lt;p&gt;I&apos;d probably also want to give those word_start* n-grams some boost, though I don&apos;t see how to do that in schema.xml yet.&lt;/p&gt;</comment>
                            <comment id="12458072" author="oguen" created="Wed, 13 Dec 2006 10:48:28 +0000"  >&lt;p&gt;Yes exactly as you described. &lt;br/&gt;
The Fieldnames for the gram fields have to be like this to make it work with SpellChecker: &lt;/p&gt;

&lt;p&gt;&amp;lt;copyField source=&quot;word&quot; dest=&quot;start1&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;end1&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;start2&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;end2&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;start3&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;end3&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;start4&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;end4&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;gram1&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;gram2&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;gram3&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;copyField source=&quot;word&quot; dest=&quot;gram4&quot;/&amp;gt; &lt;/p&gt;

&lt;p&gt;A NGramAnalyzer is enough, i used a WhiteSpacetokenizer as Tokenizer, some other filters and finally  the &lt;br/&gt;
NGramAnaylzer&lt;/p&gt;

&lt;p&gt;Unfortunately the SpellChecker implementation has a beta state imho. It is not possible to set your own boost factors &lt;br/&gt;
for the start or end grams. In the current release it is set to start-gram factor 2 , end-gram factor 1&lt;/p&gt;
</comment>
                            <comment id="12460331" author="otis" created="Thu, 21 Dec 2006 19:52:33 +0000"  >&lt;p&gt;Og&#252;n - yes, that Spellchecker class in Lucene&apos;s contrib/spellchecker has 1.0f defined as the boost for the last n-gram.  I&apos;m not even sure if that&apos;s needed.  I talked to Bob Carpenter (alias-i.com) about it recently, and he said boosting the end ngram doesn&apos;t make sense, if I remember correctly.  I&apos;m inclined to go remove that from the source completely.  Thoughts?&lt;/p&gt;

&lt;p&gt;I&apos;m unsure about how to integrate the Lucene spellchecker code into Solr, though.  There is no &quot;n-gram tokenizer&quot; per se in the spellchecker extension, so I can&apos;t really point NGramFilter config in Solr&apos;s schema.xml to anything in that spellchecker library.... I can write my own n-gram Filter, that&apos;s not a problem, but you said you made use of the Lucene spellchecker code, and I can&apos;t see how to do that.&lt;/p&gt;

&lt;p&gt;Did you simply create your own NGramFilter that creates the same ngrams as Spellchecker.java, and then used the Spellchecker.suggest(String word) method &lt;b&gt;only&lt;/b&gt; for fetching/getting alternative spelling suggestions?&lt;/p&gt;</comment>
                            <comment id="12460397" author="ehatcher" created="Fri, 22 Dec 2006 07:34:59 +0000"  >&lt;p&gt;The way the spell checker works is to have a separate spell checking index.  This could be integrated into Solr with a custom cache that builds the dictionary index into a RAMDirectory.  I&apos;ve done this in Collex for AJAX suggestions.  Will it scale?  I&apos;m not sure, but I suspect for many Solr installations it&apos;d fit into RAM just fine.  Tie in a custom request handler (and underlying Util class like highlighting, etc) and you&apos;re all set!   &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;What have I overlooked or oversimplified?&lt;/p&gt;</comment>
                            <comment id="12460402" author="otis" created="Fri, 22 Dec 2006 07:49:53 +0000"  >&lt;p&gt;Yeah, I&apos;ve used the Lucene-based spellchecker before, I just never had to hook it up with Solr.  At this point I&apos;m not interested in the fancy stuff (cache, RAMDir...), I just want to figure out how to configure it via schema.xml...&lt;/p&gt;</comment>
                            <comment id="12460405" author="otis" created="Fri, 22 Dec 2006 08:10:33 +0000"  >&lt;p&gt;This patch contains 3 new classes for org.apache.solr.analysis:&lt;br/&gt;
1. NGramTokenizerFactory&lt;br/&gt;
2. NGramTokenizer&lt;br/&gt;
3. NGramTokenizerTest (all tests pass)&lt;br/&gt;
+ 1 modified class:&lt;br/&gt;
4. BaseTokenizerFactory&lt;/p&gt;

&lt;p&gt;I &lt;b&gt;think&lt;/b&gt; the above can be configured in schema.xml as follows:&lt;/p&gt;

&lt;p&gt;    &amp;lt;fieldtype name=&quot;gram1&quot; class=&quot;solr.TextField&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;analyzer&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.WhitespaceTokenizerFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.NGramTokenizerFactory&quot; minGram=&quot;1&quot; maxGram=&quot;1&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;/analyzer&amp;gt;&lt;br/&gt;
    &amp;lt;/fieldtype&amp;gt;&lt;br/&gt;
    &amp;lt;fieldtype name=&quot;gram2&quot; class=&quot;solr.TextField&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;analyzer&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.WhitespaceTokenizerFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.NGramTokenizerFactory&quot; minGram=&quot;2&quot; maxGram=&quot;2&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;/analyzer&amp;gt;&lt;br/&gt;
    &amp;lt;/fieldtype&amp;gt;&lt;br/&gt;
    &amp;lt;fieldtype name=&quot;gram3&quot; class=&quot;solr.TextField&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;analyzer&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.WhitespaceTokenizerFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.NGramTokenizerFactory&quot; minGram=&quot;3&quot; maxGram=&quot;3&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;/analyzer&amp;gt;&lt;br/&gt;
    &amp;lt;/fieldtype&amp;gt;&lt;/p&gt;

&lt;p&gt;And I &lt;b&gt;believe&lt;/b&gt; the following fields would have to be defined (to match the fields in Spellchecker.java):&lt;/p&gt;

&lt;p&gt;&amp;lt;field name=&quot;word&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;start1&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt;  **&lt;br/&gt;
&amp;lt;field name=&quot;end1&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt; **&lt;br/&gt;
&amp;lt;field name=&quot;start2&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt; **&lt;br/&gt;
&amp;lt;field name=&quot;end2&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt; **&lt;br/&gt;
&amp;lt;field name=&quot;start3&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt; **&lt;br/&gt;
&amp;lt;field name=&quot;end3&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt; **&lt;br/&gt;
&amp;lt;field name=&quot;start4&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt; **&lt;br/&gt;
&amp;lt;field name=&quot;end4&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt; **&lt;br/&gt;
&amp;lt;field name=&quot;gram1&quot; type=&quot;gram1&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;gram2&quot; type=&quot;gram2&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;gram3&quot; type=&quot;gram3&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;field name=&quot;gram4&quot; type=&quot;gram4&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;c.f. &lt;a href=&quot;http://wiki.apache.org/jakarta-lucene/SpellChecker&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/jakarta-lucene/SpellChecker&lt;/a&gt;&lt;br/&gt;
I am not sure how to configure the fields marked with  ** above.&lt;br/&gt;
Maybe I don&apos;t even need startN/endN fields.  I am not sure how endN fields would be useful.  The startN are probably useful because those can get an extra boost.&lt;/p&gt;

&lt;p&gt;I &lt;b&gt;think&lt;/b&gt; the above config (except for ** fields, which I don&apos;t know how to handle) will do the following.&lt;br/&gt;
If the input (query string) is &quot;pork&quot;, my ngrammer may generate the following uni- and bi-gram tokens:&lt;/p&gt;

&lt;p&gt;  p o r k po or rk&lt;/p&gt;

&lt;p&gt;And this is how I think they will get mapped to fields and indexed:&lt;br/&gt;
word: pork&lt;br/&gt;
gram1: p o r k&lt;br/&gt;
gram2: po or rk&lt;br/&gt;
start1: p **&lt;br/&gt;
start2: po **&lt;br/&gt;
end1 rk **&lt;br/&gt;
end2: rk **&lt;/p&gt;

&lt;p&gt;Again, not sure how to achieve **.&lt;/p&gt;

&lt;p&gt;I haven&apos;t actually tried this.  I am only modifying my local example/solr/conf/schema.xml for now, and I haven&apos;t actually indexed anything with the above config.&lt;/p&gt;

&lt;p&gt;Thoughts/comments?&lt;/p&gt;</comment>
                            <comment id="12470011" author="adamh" created="Sun, 4 Feb 2007 01:15:38 +0000"  >&lt;p&gt;This new patch provides a superset of the functionality of Otis&apos;s orginal patch. Specifically it includes edge n-gram tokenizers based on Otis&apos;s lucene analyzer contrib. I modified this tokenizer to output edge n-grams in a range of sizes (ie you can tokenizer a range of 1-2 on the string &quot;abc&quot; resulting in &quot;a&quot;, &quot;ab&quot;).  This patch also fixes a bug in the n-gram factory and provides some code cleanup. &lt;/p&gt;

&lt;p&gt;For clarity&apos;s sake this patch suplants &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-81&quot; title=&quot;Add Query Spellchecker functionality&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-81&quot;&gt;&lt;del&gt;SOLR-81&lt;/del&gt;&lt;/a&gt;-ngram.patch&apos; &lt;/p&gt;</comment>
                            <comment id="12470295" author="otis" created="Mon, 5 Feb 2007 18:03:55 +0000"  >&lt;p&gt;Adam,&lt;/p&gt;

&lt;p&gt;I took a look at your patch.  It looks like you brought over (copied) various n-gram tokenizer classes and their unit tests that I put in Lucene&apos;s contrib/analyzers/.... .  Did you do this on purpose?  I intentionally put those n-gram tokenizers under Lucene&apos;s contrib, as they are generic and not Solr-specific.  Thus, the only classes my patch has are classes that are Solr-specific:&lt;/p&gt;

&lt;p&gt;src/java/org/apache/solr/analysis/EdgeNGramTokenizerFactory.java&lt;br/&gt;
src/java/org/apache/solr/analysis/NGramTokenizerFactory.java&lt;br/&gt;
src/java/org/apache/solr/analysis/BaseTokenizerFactory.java&lt;/p&gt;

&lt;p&gt;And instead of copying the source classes from Lucene&apos;s contrib/analyzers/.... it adds the new jar built from those sources:&lt;br/&gt;
lib/lucene-analyzers-2.1-dev.jar&lt;/p&gt;

&lt;p&gt;Plus:&lt;br/&gt;
lib/lucene-spellchecker-2.1-dev.jar&lt;br/&gt;
example/solr/conf/schema.xml&lt;/p&gt;

&lt;p&gt;I have some locally modified code for this issue, that was not a part of the first patch.  I wanted to attach the updated patch assuming you didn&apos;t really want those few generic tokenizer classes copied from Lucene over to Solr, but because changes are now in two places, so to speak, let&apos;s do this to unify our work:&lt;/p&gt;

&lt;p&gt;Could you please:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;open a new LUCENE issue or just reopen the one where I originally attached this code and post your patch to the Lucene tokenizers there.&lt;/li&gt;
	&lt;li&gt;prepare a new patch for this issue and make sure it only contains Solr-specific classes (see above), plus those 2 Jars.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll upload my patch for schema.xml, so you can see my config (your patch didn&apos;t have this), and make sure your changes to the code are in sync with that.&lt;/p&gt;

&lt;p&gt;Finally, are you making use of this code somehow already?&lt;br/&gt;
One thing that is completely missing from this patch is the RequestHandler that knows how to take the input (a query string), and get suggestions for alternative spellings via a SpellChecker instance.  I have some NGramRequestHandler code locally, but the code is unfinished.&lt;/p&gt;</comment>
                            <comment id="12470297" author="otis" created="Mon, 5 Feb 2007 18:07:58 +0000"  >&lt;p&gt;schema.xml changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;to make use of NGramTokenizerFactory and EdgeNGramTokenizerFactory&lt;/li&gt;
	&lt;li&gt;to define some &amp;lt;field&amp;gt;s and some &amp;lt;copyField&amp;gt;s to be used with Lucene SpellChecker.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12473813" author="otis" created="Fri, 16 Feb 2007 20:05:57 +0000"  >&lt;p&gt;Adam:&lt;br/&gt;
Please look at &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-759&quot; title=&quot;Add n-gram tokenizers to contrib/analyzers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-759&quot;&gt;&lt;del&gt;LUCENE-759&lt;/del&gt;&lt;/a&gt;.  That incorporates your patch, fixes a bug I found in it, and introduces a new bug, so we are not too bored with bug-free code.  Any idea how to extract that last n-gram when using Side.BACK?&lt;/p&gt;</comment>
                            <comment id="12473848" author="adamh" created="Fri, 16 Feb 2007 23:06:07 +0000"  >&lt;p&gt;What was the bug? I couldn&apos;t tell from the Lucene issue description.&lt;/p&gt;


</comment>
                            <comment id="12474734" author="otis" created="Wed, 21 Feb 2007 15:40:38 +0000"  >&lt;p&gt;Here is a new patch that should include everything:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;New SpellCheckerRequestHandler&lt;/li&gt;
	&lt;li&gt;Updated solrconfig.xml that defines the above handler and maps it to /spellechecker&lt;/li&gt;
	&lt;li&gt;New NGramTokenizerFactory&lt;/li&gt;
	&lt;li&gt;New EdgeNGramTokenizerFactory (includes Adam&apos;s changes)&lt;/li&gt;
	&lt;li&gt;Modified BaseTokenizerFactory (used by the above 2 factories)&lt;/li&gt;
	&lt;li&gt;Updated schema.xml that configures the above 2 factories to tokenize the input words into n-grams as required by the Lucene contrib SpellChecker (see &lt;a href=&quot;http://wiki.apache.org/jakarta-lucene/SpellChecker&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/jakarta-lucene/SpellChecker&lt;/a&gt; for examples of n-grams used by the SpellChecker)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12475416" author="otis" created="Fri, 23 Feb 2007 17:49:47 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed SpellCheckerRequestHandler (needed that init method)&lt;/li&gt;
	&lt;li&gt;Fixed SpellCheckerRequestHandler name in solrconfig.xml&lt;/li&gt;
	&lt;li&gt;Removed unused field types, fields, and copy fields from schema.xml&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The indexing part has a bug (will bring it to solr-user in a moment).&lt;/p&gt;</comment>
                            <comment id="12477392" author="otis" created="Fri, 2 Mar 2007 18:08:00 +0000"  >&lt;p&gt;I think this is the final version - tested it, and it works.&lt;br/&gt;
I&apos;d like to commit this next week, so please have a look if you have time.&lt;/p&gt;

&lt;p&gt;This is what&apos;s in the patch:&lt;/p&gt;

&lt;p&gt;A      lib/lucene-spellchecker-2.2-dev.jar&lt;br/&gt;
A      lib/lucene-analyzers-2.2-dev.jar&lt;br/&gt;
A      src/java/org/apache/solr/analysis/NGramTokenFilterFactory.java&lt;br/&gt;
M      src/java/org/apache/solr/analysis/BaseTokenFilterFactory.java&lt;br/&gt;
A      src/java/org/apache/solr/analysis/EdgeNGramTokenFilterFactory.java&lt;br/&gt;
A      src/java/org/apache/solr/request/SpellCheckerRequestHandler.java&lt;br/&gt;
C      example/solr/conf/schema.xml&lt;br/&gt;
M      example/solr/conf/solrconfig.xml&lt;/p&gt;

&lt;p&gt;I think you can ignore that &quot;C&quot; &amp;#8211; there is no conflict in the file, actually.&lt;/p&gt;</comment>
                            <comment id="12477542" author="adamh" created="Fri, 2 Mar 2007 23:08:48 +0000"  >&lt;p&gt;This patch was developed off of Otis&apos;s previous patch. It fixes a numSuggestion bug + adds an accuracy argument for the spellchecker + adds a commit handler for updating the spell correction index. It removes the n-gram generation from the spell correction index generation because that isn&apos;t actually needed to build the index (SpellChecker does that for you).&lt;/p&gt;</comment>
                            <comment id="12477547" author="yseeley@gmail.com" created="Fri, 2 Mar 2007 23:26:09 +0000"  >&lt;p&gt;Is spelling check normally going to be integrated into the &quot;main&quot; index, or will it normally be a separate index?&lt;br/&gt;
If the latter, does it make more sense for some of this (the field definitions &amp;amp; handler) to be in contrib instead of core?&lt;/p&gt;

&lt;p&gt;Any other way to avoid &quot;cluttering&quot; the current schema.xml?&lt;/p&gt;

&lt;p&gt;If spelling check is to be a core feature (that one can turn on for any field in any index), it seems like it needs to be easier to configure.  Having the user define all the ngram fields, fieldTypes, and copyField statements doesn&apos;t seem ideal.&lt;/p&gt;

&lt;p&gt;If, however, this is more of a &quot;configuration&quot; of solr used for spell-checking, it might make more sense for contrib.&lt;/p&gt;</comment>
                            <comment id="12477568" author="adamh" created="Sat, 3 Mar 2007 00:38:21 +0000"  >&lt;p&gt;&amp;gt; Is spelling check normally going to be integrated into the &quot;main&quot; index, or will it normally be a separate index?&lt;br/&gt;
AH: It is a separate index.&lt;/p&gt;

&lt;p&gt;&amp;gt; If the latter, does it make more sense for some of this (the field definitions &amp;amp; handler) to be in contrib instead of core? &lt;br/&gt;
AH: That would be fine by me. However, it should be noted that it can be turned on for any field.&lt;/p&gt;

&lt;p&gt;&amp;gt; Any other way to avoid &quot;cluttering&quot; the current schema.xml?&lt;br/&gt;
&amp;gt; If spelling check is to be a core feature (that one can turn on for any field in any index), it seems like it needs to be easier to configure. Having the user &lt;br/&gt;
&amp;gt; define all the ngram fields, fieldTypes, and copyField statements doesn&apos;t seem ideal. &lt;br/&gt;
AH: I think there is some confusion over Otis&apos;s version and mine. I was never able to get Otis&apos;s version (single index using ngram types + copyfields) working fully so I went with the pure SpellChecker implementation that doesn&apos;t require any of that (no schema.xml additions) It just needs for the user to use a custom request handler to query for spelling corrections (Otis wrote the original) and a custom commit handler (based on CommitRequestHandler) to rebuild the spell checker index.&lt;/p&gt;

&lt;p&gt;For the record the version I commited is: &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12352485/SOLR-81-spellchecker.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12352485/SOLR-81-spellchecker.patch&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12477569" author="adamh" created="Sat, 3 Mar 2007 00:38:23 +0000"  >&lt;p&gt;&amp;gt; Is spelling check normally going to be integrated into the &quot;main&quot; index, or will it normally be a separate index?&lt;br/&gt;
AH: It is a separate index.&lt;/p&gt;

&lt;p&gt;&amp;gt; If the latter, does it make more sense for some of this (the field definitions &amp;amp; handler) to be in contrib instead of core? &lt;br/&gt;
AH: That would be fine by me. However, it should be noted that it can be turned on for any field.&lt;/p&gt;

&lt;p&gt;&amp;gt; Any other way to avoid &quot;cluttering&quot; the current schema.xml?&lt;br/&gt;
&amp;gt; If spelling check is to be a core feature (that one can turn on for any field in any index), it seems like it needs to be easier to configure. Having the user &lt;br/&gt;
&amp;gt; define all the ngram fields, fieldTypes, and copyField statements doesn&apos;t seem ideal. &lt;br/&gt;
AH: I think there is some confusion over Otis&apos;s version and mine. I was never able to get Otis&apos;s version (single index using ngram types + copyfields) working fully so I went with the pure SpellChecker implementation that doesn&apos;t require any of that (no schema.xml additions) It just needs for the user to use a custom request handler to query for spelling corrections (Otis wrote the original) and a custom commit handler (based on CommitRequestHandler) to rebuild the spell checker index.&lt;/p&gt;

&lt;p&gt;For the record the version I commited is: &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12352485/SOLR-81-spellchecker.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12352485/SOLR-81-spellchecker.patch&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12478277" author="otis" created="Tue, 6 Mar 2007 06:27:22 +0000"  >&lt;p&gt;Adam:&lt;/p&gt;

&lt;p&gt;I can merge our patches to produce a unified one.&lt;/p&gt;

&lt;p&gt;NOTE:&lt;br/&gt;
The SpellCheckerCommitRequestHandler assumes that:&lt;br/&gt;
  a) one wants to populate the spellchecker index with data from another Lucene index.&lt;br/&gt;
  b) the Lucene index to be used for populating is available on the same box where the spellchecker service is running.&lt;/p&gt;

&lt;p&gt;I think both a) and b) are good - let those who want this functionality have it.&lt;br/&gt;
However, some may not be able to live with these assumptions (e.g. one may want to have a server dedicated to spellchecker service, and may not want to push the source Lucene index to the spellchecker box.)  For those people, the approach that includes schema.xml modifications will be required, unless I&apos;m missing something.  Am I?&lt;/p&gt;

&lt;p&gt;Also, I think this is a mistake:&lt;/p&gt;

&lt;p&gt;accuracy = p.getFloat(&quot;accuracy&quot;, DEFAULT_NUM_SUGGESTIONS);&lt;/p&gt;

&lt;p&gt;You probably wanted DEFAULT_ACCURACY there, but that doesn&apos;t exist yet, so I&apos;ll fix that.&lt;/p&gt;</comment>
                            <comment id="12478301" author="adamh" created="Tue, 6 Mar 2007 08:00:32 +0000"  >&lt;p&gt;Good call on the DEFAULT_ACCURACY constant. BTW it should probably be .5.&lt;/p&gt;

&lt;p&gt;As for:&lt;br/&gt;
&amp;gt; The SpellCheckerCommitRequestHandler assumes that:&lt;br/&gt;
&amp;gt;  a) one wants to populate the spellchecker index with data from another Lucene index.&lt;br/&gt;
&amp;gt;  b) the Lucene index to be used for populating is available on the same box where the spellchecker service is running. &lt;/p&gt;

&lt;p&gt;This does not necessarily have to be true (well a. sort of has to be true). The way I&apos;ve been testing this is to make my primary index  an index of search terms + related metadata. The SpellChecker simply creates a separate index for the pieces it needs to do its work. In essence this is a standalone spellchecker. However, as you note, this same setup allows for the primary index to be any field. Can you see a downside to this approach?&lt;/p&gt;</comment>
                            <comment id="12478302" author="adamh" created="Tue, 6 Mar 2007 08:01:21 +0000"  >&lt;p&gt;BTW updated patch added.&lt;/p&gt;</comment>
                            <comment id="12478893" author="hossman" created="Wed, 7 Mar 2007 21:02:07 +0000"  >&lt;p&gt;looking over both Otis&apos;s patches and Adam&apos;s patches for hte first time i find myself really confused.&lt;/p&gt;

&lt;p&gt;As previously discussed in email, there are two completley different appraoches that could be taken to achieve &quot;spell correction&quot; using Solr:&lt;/p&gt;

&lt;p&gt;1) Use something like the Lucene SpellChecker contrib to make suggestions basedon the data in the main solr index (defined by the solr schema) ... adding hooks to Solr to keep the SpellChecker system aware of changes to the main index, and hooks to allow requesthandlers to return suggestions with each query&lt;/p&gt;

&lt;p&gt;2) use the main solr index (defined by the schema) to store the dictionary of words, turning the entire solr instance into one giant SpellChecker.  In this case there would be a recomended schema.xml for users who want to setup a SpellChecker Solr instance and possible a custom RequestHandler htat assumes you are using this schema.&lt;/p&gt;


&lt;p&gt;These two patches both seem to be dealing with case#1, but they have hints of approach#2 ... for example i don&apos;t entirely understand why they include the NGram tokenfilter factories, since they don&apos;t seem to need the fields of the solr index to be tokenized in any special way (since the lucene SpellChecker controls the format of it&apos;s dictionary).   It&apos;s also not clear do me what the purpose of the SpellCheckerRequestHandler is ... if the main index is storing &quot;real&quot; user records, then wouldn&apos;t a helper method that existing request handlers (like dismax and standard) can optionally call to get the SpellChecker data be more useful?&lt;/p&gt;</comment>
                            <comment id="12478900" author="adamh" created="Wed, 7 Mar 2007 21:24:40 +0000"  >&lt;p&gt;In essence, point 1) is true. However, the way I have been using the SpellChecker index allows for the user to have a standalone spell checker as well as piggy-backing it off a primary index. &lt;/p&gt;

&lt;p&gt;Point 2) prevents the second use case I mentioned and also limits what can be done with the SpellChecker. &lt;/p&gt;

&lt;p&gt;WRT the issue of the NGram/EdgeNGram tokenizers: These should probably be split out into a separate patch/issue as they are not critical to the implementation. &lt;/p&gt;

&lt;p&gt;I like the idea of providing the SpellChecker index access functionality as a contrib that can be accessed from any RequestHandler, but it is useful to have a separate RequestHandler that can just provide spell checking functionality alone.&lt;/p&gt;</comment>
                            <comment id="12479670" author="hossman" created="Fri, 9 Mar 2007 18:12:50 +0000"  >&lt;p&gt;Okay, assuming what we are talking about is a adding the existing Lucene SpellChecker as a hook into a Solr instance, where the dictionary may be built externally, or it may be built based on the main source index, here&apos;s my comments based on the most recent patch (from Adam ... as i recall it already incorperates most of Otis&apos;s stuff)&lt;/p&gt;


&lt;p&gt;1) we should definitely move the *NGramTokenizerFactories into a seperate issues since they don&apos;t come into play here.&lt;/p&gt;

&lt;p&gt;2) when configuring where the SpellChecker Directory lives, we should probably support three options:  a path relative dataDir (so the regular replication scripts can copy a SpellChecker index from a master to slave right along with the main index), an absolute path, or a RAMDirectory&lt;/p&gt;

&lt;p&gt;3) it seems like the functionality present in SpellCheckerRequestHandler and SpellCheckerCommitRequestHandler should all be in one request handler (where special query time input triggers the rebuild).  that way no redundent configuration is required.  There should also be an option for &quot;reloading&quot; the SpellChecker instance from disk (ie: reopening it&apos;s IndexReader) without rebuilding &amp;#8211; which would be useful for people who are (re)buidling the SpellChecker index external from Solr and need a way to tell Solr to start using the new one&lt;/p&gt;

&lt;p&gt;A key use case i&apos;m imagining is that a master could have a postCommit listener configured to ping &quot;qt=spell&amp;amp;rebuild=true&quot; after each commit, while a slave could have &quot;qt=spell&amp;amp;rebuild=true&quot; to pick up the changed SpellCheck index.&lt;/p&gt;

&lt;p&gt;4) i&apos;ts not really safe to trust this...&lt;/p&gt;

&lt;p&gt;+        IndexReader indexReader = req.getSearcher().getReader();&lt;br/&gt;
+        Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);&lt;/p&gt;

&lt;p&gt;...the source field might be encoded in some way.  We really need a subclass of LuceneDictionary that knows about the IndexSchema/FieldType of termSourceField to extract the Readable value from the indexed terms (either that or we go ahead and feed SpellChecker the raw terms, and then at query time run the users (mispelled) input through the query time analyzer for termSourceField before passing it to spellChecker.suggestSimilar&lt;/p&gt;

&lt;p&gt;5) we definitely shouldn&apos;t have a &quot;private static SpellChecker&quot; it should be possible to have multiple SpellChecker instance (from different dictionaries) just by registerig multiple instances of the handler .. at first glance this seems like it might make adding SpellChecking funtionality to the other requesthandlers hard .. except that they can call core.getRequestHandler(name) ... so we can still add code to other request handlers so that they can be configured to ask for a SpellCheckerRequestHandler by name, and delegate some spell checking functionality to it.&lt;/p&gt;

&lt;p&gt;6) as far as configuring things like spellcheckerIndexDir and termSourceField, there&apos;s no reason to do that in the &quot;invariants&quot; list .. that&apos;s really for things that the code allows to be query time params, but the person configuring Solr doesn&apos;t want query clients to be able to specify it.  seperate init params can be used and accessed directly from the init method (just like XSLTResponseWriter)...&lt;/p&gt;

&lt;p&gt;+    &amp;lt;requestHandler name=&quot;spellchecker&quot; class=&quot;solr.SpellCheckerRequestHandler&quot;&amp;gt;&lt;br/&gt;
+        &amp;lt;!-- default values for query parameters --&amp;gt;&lt;br/&gt;
+        &amp;lt;lst name=&quot;defaults&quot;&amp;gt;&lt;br/&gt;
+            &amp;lt;str name=&quot;echoParams&quot;&amp;gt;explicit&amp;lt;/str&amp;gt;&lt;br/&gt;
+            &amp;lt;int name=&quot;suggestionCount&quot;&amp;gt;1&amp;lt;/int&amp;gt;&lt;br/&gt;
+            &amp;lt;float name=&quot;accuracy&quot;&amp;gt;0.5&amp;lt;/float&amp;gt;&lt;br/&gt;
+        &amp;lt;/lst&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+        &amp;lt;!-- main init params for handler --&amp;gt;&lt;br/&gt;
+        &amp;lt;str name=&quot;spellcheckerIndexDir&quot;&amp;gt;/tmp/spellchecker&amp;lt;/str&amp;gt;&lt;br/&gt;
+        &amp;lt;str name=&quot;termSourceField&quot;&amp;gt;word&amp;lt;/str&amp;gt;&lt;br/&gt;
+    &amp;lt;/requestHandler&amp;gt;&lt;br/&gt;
+&lt;/p&gt;

&lt;p&gt;7) adding a special field to the example schema (and example docs) to demonstrate building the SpellChecker index is a bit confusing ... we should just build the dictionary off of an existing field that contains data (like &quot;name&quot; or &quot;text&quot;) to demonstrate the common use case.&lt;/p&gt;
</comment>
                            <comment id="12480409" author="otis" created="Tue, 13 Mar 2007 14:33:13 +0000"  >&lt;p&gt;Adam:&lt;br/&gt;
Have you started making the changes that Hoss proposed here?  Please let me know (today, if you can).  If you have not started, I&apos;ll make the changes.  If you&apos;ve started, I&apos;ll hold off.&lt;/p&gt;

&lt;p&gt;Hoss &amp;amp; Adam:&lt;/p&gt;

&lt;p&gt;1) out with tokenizer factories - right, they are no longer needed.&lt;/p&gt;

&lt;p&gt;2) I&apos;ll stick to the absolute path for now, get that in SVN, and then we can add support for other things... unless you show me an example of how easy it is to support other paths/locations&lt;/p&gt;

&lt;p&gt;3) merging the handlers sounds ok:&lt;br/&gt;
  to get suggestions: ...?qt=spellchecker&amp;amp;cmd=suggest &lt;br/&gt;
  to completely rebuild: ...?qt=spellchecker&amp;amp;cmd=rebuild&lt;br/&gt;
OK?&lt;br/&gt;
The use-case here is to rebuild the index every once in a while, &lt;b&gt;not&lt;/b&gt; on every change of the main index.&lt;/p&gt;

&lt;p&gt;4) I&apos;ll leave that for later, as I don&apos;t completely understand you there.&lt;/p&gt;

&lt;p&gt;5) ok, no static SpellChecker&lt;/p&gt;

&lt;p&gt;6) ok, sounds like we just need remove the wrapping &amp;lt;lst name=&quot;invariants&quot;&amp;gt; element&lt;/p&gt;

&lt;p&gt;7) I actually liked having a separate example doc for demonstrating just the spellchecker functionality &amp;#8211; you don&apos;t have to know about those other documents/fields/values.  But if both Adam and Hoss think differently, we should go with the majority&apos;s opinion.&lt;/p&gt;</comment>
                            <comment id="12480618" author="otis" created="Wed, 14 Mar 2007 01:20:44 +0000"  >&lt;p&gt;Here is a new version of the patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No token filters, no schema.xml changes, no invariant properties used&lt;/li&gt;
	&lt;li&gt;Only 1 SpellCheckerRequestHandler that either returns spelling suggestions or rebuilds the spellchecker index is cmd=rebuild is specified&lt;/li&gt;
	&lt;li&gt;SpellChecker instance is no longer static&lt;/li&gt;
	&lt;li&gt;kept spellchecker.xml example doc&lt;/li&gt;
	&lt;li&gt;still using absolute path for index dir&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m still recovering from a +13h timezone change, so please shout if I missed anything.  I&apos;d like to commit this by the end of the week, so please help me finalize this.&lt;/p&gt;

&lt;p&gt;Adam: if you are doing any work on this, please email or comment here, so we don&apos;t duplicate the effort.&lt;/p&gt;
</comment>
                            <comment id="12480660" author="hossman" created="Wed, 14 Mar 2007 05:43:05 +0000"  >&lt;p&gt;Otis: haven&apos;t had a chance to look at your newest patch yet, but just to clarify my comment#4... In the last patch i looked at, LuceneDictionary could be used to build the dictionary based on a field name from the index &amp;#8211; but this will only work for simple String or TextFields.&lt;/p&gt;

&lt;p&gt;Theoretically, someone could write a ROT132FieldType that munges up the field values stored in it, if you were to try and build a SpellChecker index from this field, nothing good would come of it just using LUceneDIctionary (because of hte way it uses hte raw TermEnum) .. but since we have the IndexSchema, we can get the FieldType for the field name we want to use, and then the &quot;indexedToReadable&quot; method on each indexed term will tell you the &quot;plain text&quot; version.&lt;/p&gt;

&lt;p&gt;it&apos;s a minor thing, but it&apos;s a good thing to take into account.&lt;/p&gt;

&lt;p&gt;Alternately, we can just document that it doesn&apos;t make sense to use any field type except &quot;StrField&quot; (even TextField doens&apos;t really make sense since we can&apos;t anticipate what hte Analyzer might have done)&lt;/p&gt;</comment>
                            <comment id="12481738" author="otis" created="Fri, 16 Mar 2007 19:29:35 +0000"  >&lt;p&gt;This is in SVN now, but I&apos;m going to leave this open for another week, in case Hoss, Adam, or anyone else finds any issues.&lt;/p&gt;</comment>
                            <comment id="12481759" author="otis" created="Fri, 16 Mar 2007 20:53:45 +0000"  >&lt;p&gt;There is a useless (I think) static IndexReader in there:&lt;br/&gt;
    private static IndexReader reader = null;&lt;/p&gt;

&lt;p&gt;If we set this to some real IndexReader, we can get the SpellChecker to act as follows (from its coffeedocs):&lt;/p&gt;

&lt;p&gt;....&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@param ir the indexReader of the user index (can be null see field param)&lt;/li&gt;
	&lt;li&gt;@param field String the field of the user index: if field is not null, the suggested&lt;/li&gt;
	&lt;li&gt;words are restricted to the words present in this field.&lt;/li&gt;
	&lt;li&gt;@param morePopular boolean return only the suggest words that are more frequent than the searched word&lt;/li&gt;
	&lt;li&gt;(only if restricted mode = (indexReader!=null and field!=null)&lt;br/&gt;
....&lt;br/&gt;
  public String[] suggestSimilar(String word, int numSug, IndexReader ir,&lt;br/&gt;
      String field, boolean morePopular) throws IOException {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, should we do this on init:&lt;br/&gt;
  reader = req.getSearcher().getReader();&lt;br/&gt;
?&lt;br/&gt;
Or maybe add a new param to solrconfig.xml&apos;s declaration of the SpellCheckerRequestHandler that turns this on/off?&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12483790" author="hossman" created="Fri, 23 Mar 2007 23:34:47 +0000"  >
&lt;p&gt;patch makes a few changes, if there are no objections i&apos;ll try to commit this on monday....&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;fixed NPE if no q param (when using cmd)&lt;/li&gt;
	&lt;li&gt;fixed schema.xml to know about &quot;words&quot; field in spellchecker.xml&lt;/li&gt;
	&lt;li&gt;cmd=rebuild needs to be disabled if termSourceField is null&lt;/li&gt;
	&lt;li&gt;added &quot;cmd=reopen&quot; for people maintaining the spell index externally.&lt;/li&gt;
	&lt;li&gt;added support for ramDir based spell index.&lt;/li&gt;
	&lt;li&gt;can&apos;t do relative path to dataDir, because we can&apos;t getdataDir,&lt;br/&gt;
   because SolrCore isn&apos;t done initializing yet.&lt;/li&gt;
	&lt;li&gt;added more explanation to solrconfig.xml about meaning of params,&lt;br/&gt;
   and changed the default values to work for anyone (using ramdir)&lt;/li&gt;
	&lt;li&gt;I punted on the issue of field type encoding by making it clear in&lt;br/&gt;
   the solrconfig.xml comments that termSourceField needs to use a simple&lt;br/&gt;
   field type&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remaining issues...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;should we add a firstSearcher or newSearcher hook to rebuild in&lt;br/&gt;
   the example solrconfig.xml ?&lt;/li&gt;
	&lt;li&gt;i don&apos;t have an optinion about passing an IndexReader to&lt;br/&gt;
   suggestSimilar, if we want to do that it shouldn&apos;t be a static reader,&lt;br/&gt;
   it should come from the current request ... in the meantime i changed&lt;br/&gt;
   the name of the current one to &quot;nullReader&quot; so it&apos;s clear what it is.&lt;/li&gt;
	&lt;li&gt;the indenting is currently a hodgepodge of 2spaces vs 4 spaces ...&lt;br/&gt;
   i&apos;ll fix after commiting (trying to keep the patch easy to read for now)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12483795" author="ryantxu" created="Fri, 23 Mar 2007 23:41:47 +0000"  >&lt;p&gt;&amp;gt;  * can&apos;t do relative path to dataDir, because we can&apos;t getdataDir,&lt;br/&gt;
&amp;gt;    because SolrCore isn&apos;t done initializing yet.&lt;/p&gt;

&lt;p&gt;with &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-182&quot; title=&quot;register SolrRequestHandlers at runtime / lazy loading&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-182&quot;&gt;&lt;del&gt;SOLR-182&lt;/del&gt;&lt;/a&gt;, SolrCore gets initialized first - so we could use relative paths during handler initialization.&lt;/p&gt;</comment>
                            <comment id="12483804" author="otis" created="Sat, 24 Mar 2007 04:28:29 +0000"  >&lt;p&gt;I haven&apos;t applied this and tried it, but I looked at the patch, and like the changes.  The only issues I could stop are 3 typos that we can clean up later.&lt;/p&gt;</comment>
                            <comment id="12483805" author="otis" created="Sat, 24 Mar 2007 04:34:19 +0000"  >&lt;p&gt;Hoss, another poooooossibly interesting and useful addition:&lt;/p&gt;

&lt;p&gt;Make use of public RAMDirectory(Directory dir) and allow one to specify that even though the spellchecker index exists in FS, use it only to pull it into a RAMDir-based index.  Might not be a huge win because most spellchecker indices are probably pretty small and easily fit in RAM already, even when they are FSDir-based, but I thought I&apos;d mention it anyway.&lt;/p&gt;

</comment>
                            <comment id="12484232" author="hossman" created="Mon, 26 Mar 2007 22:17:47 +0100"  >&lt;p&gt;I&apos;ve committed my last patch with a few changes:&lt;/p&gt;

&lt;p&gt;1) support for directories relative dataDir since &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-182&quot; title=&quot;register SolrRequestHandlers at runtime / lazy loading&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-182&quot;&gt;&lt;del&gt;SOLR-182&lt;/del&gt;&lt;/a&gt; was committed - used this in example solrconfig.xml&lt;br/&gt;
2) cleaned up some Typos (thanks for reminding me Otis)&lt;br/&gt;
3) whitespace reformatted (separate commit so diffs are easier to follow)&lt;/p&gt;

&lt;p&gt;I think things are in a pretty good generally usable state now ... Otis; how do you feel about resolving? (possibly opening new enhancement Jira issues for some of the other things discussed, like the reader idea, and loading copying the FSDirectory into a RAMDirectory?)&lt;/p&gt;</comment>
                            <comment id="12484261" author="otis" created="Tue, 27 Mar 2007 00:33:16 +0100"  >&lt;p&gt;Thanks Hoss, finito!&lt;/p&gt;</comment>
                            <comment id="12511989" author="tpeuss" created="Thu, 12 Jul 2007 08:02:37 +0100"  >&lt;p&gt;Hello Otis!&lt;/p&gt;

&lt;p&gt;What happened to the TokenFilters included in the patch? They are in the patch but in trunk I don&apos;t see them.&lt;/p&gt;

&lt;p&gt;CU&lt;br/&gt;
Thomas&lt;/p&gt;</comment>
                            <comment id="12512290" author="hossman" created="Thu, 12 Jul 2007 23:29:01 +0100"  >&lt;p&gt;the various NGram tokenizers and token filters were promoted out of this issue into a LUCENE issue and subsequently committed into a contrib.&lt;/p&gt;</comment>
                            <comment id="12589324" author="hossman" created="Wed, 16 Apr 2008 00:44:45 +0100"  >&lt;p&gt;This bug was modified as part of a bulk update using the criteria...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Marked (&quot;Resolved&quot; or &quot;Closed&quot;) and &quot;Fixed&quot;&lt;/li&gt;
	&lt;li&gt;Had no &quot;Fix Version&quot; versions&lt;/li&gt;
	&lt;li&gt;Was listed in the CHANGES.txt for 1.2&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The Fix Version for all 39 issues found was set to 1.2, email notification&lt;br/&gt;
was suppressed to prevent excessive email.&lt;/p&gt;

&lt;p&gt;For a list of all the issues modified, search jira comments for this&lt;br/&gt;
(hopefully) unique string: 20080415hossman2&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12359323">LUCENE-759</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12350288" name="SOLR-81-edgengram-ngram.patch" size="24384" author="adamh" created="Sun, 4 Feb 2007 01:15:38 +0000"/>
                            <attachment id="12350361" name="SOLR-81-ngram-schema.patch" size="7109" author="otis" created="Mon, 5 Feb 2007 18:07:58 +0000"/>
                            <attachment id="12352468" name="SOLR-81-ngram.patch" size="16325" author="otis" created="Fri, 2 Mar 2007 18:08:00 +0000"/>
                            <attachment id="12351908" name="SOLR-81-ngram.patch" size="16181" author="otis" created="Fri, 23 Feb 2007 17:49:46 +0000"/>
                            <attachment id="12351689" name="SOLR-81-ngram.patch" size="17519" author="otis" created="Wed, 21 Feb 2007 15:40:38 +0000"/>
                            <attachment id="12347713" name="SOLR-81-ngram.patch" size="11627" author="otis" created="Fri, 22 Dec 2006 08:11:03 +0000"/>
                            <attachment id="12353241" name="SOLR-81-spellchecker.patch" size="7220" author="otis" created="Wed, 14 Mar 2007 01:20:44 +0000"/>
                            <attachment id="12352719" name="SOLR-81-spellchecker.patch" size="16678" author="adamh" created="Tue, 6 Mar 2007 08:00:31 +0000"/>
                            <attachment id="12352485" name="SOLR-81-spellchecker.patch" size="16628" author="adamh" created="Fri, 2 Mar 2007 23:08:48 +0000"/>
                            <attachment id="12354135" name="hoss.spell.patch" size="8345" author="hossman" created="Fri, 23 Mar 2007 23:34:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 12 Dec 2006 20:37:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7501</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxtin:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21101</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>