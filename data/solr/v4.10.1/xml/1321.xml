<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:24:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-1321/SOLR-1321.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-1321] Support for efficient leading wildcards search</title>
                <link>https://issues.apache.org/jira/browse/SOLR-1321</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;This patch is an implementation of the &quot;reversed tokens&quot; strategy for efficient leading wildcards queries.&lt;/p&gt;

&lt;p&gt;ReversedWildcardsTokenFilter reverses tokens and returns both the original token (optional) and the reversed token (with positionIncrement == 0). Reversed tokens are prepended with a marker character to avoid collisions between legitimate tokens and the reversed tokens - e.g. &quot;DNA&quot; would become &quot;and&quot;, thus colliding with the regular term &quot;and&quot;, but with the marker character it becomes &quot;\u0001and&quot;.&lt;/p&gt;

&lt;p&gt;This TokenFilter can be added to the analyzer chain that it used during indexing.&lt;/p&gt;

&lt;p&gt;SolrQueryParser has been modified to detect the presence of such fields in the current schema, and treat them in a special way. First, SolrQueryParser examines the schema and collects a map of fields where these reversed tokens are indexed. If there is at least one such field, it also sets QueryParser.setAllowLeadingWildcards(true). When building a wildcard query (in getWildcardQuery) the term text may be optionally reversed to put wildcards further along the term text. This happens when the field uses the reversing filter during indexing (as detected above), AND if the wildcard characters are either at 0-th or 1-st position in the term. Otherwise the term text is processed as before, i.e. turned into a regular wildcard query.&lt;/p&gt;

&lt;p&gt;Unit tests are provided to test the TokenFilter and the query parsing.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12431905">SOLR-1321</key>
            <summary>Support for efficient leading wildcards search</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gsingers">Grant Ingersoll</assignee>
                                    <reporter username="ab">Andrzej Bialecki </reporter>
                        <labels>
                    </labels>
                <created>Fri, 31 Jul 2009 16:04:03 +0100</created>
                <updated>Tue, 10 Nov 2009 15:50:36 +0000</updated>
                            <resolved>Fri, 11 Sep 2009 14:50:38 +0100</resolved>
                                    <version>1.4</version>
                                    <fixVersion>1.4</fixVersion>
                                    <component>Schema and Analysis</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12737549" author="ab" created="Fri, 31 Jul 2009 16:05:23 +0100"  >&lt;p&gt;Patch containing the new filter, example schema and unit tests.&lt;/p&gt;</comment>
                            <comment id="12737592" author="rcmuir" created="Fri, 31 Jul 2009 17:46:50 +0100"  >&lt;p&gt;andrej, i really like this feature.&lt;/p&gt;

&lt;p&gt;one question though, the way you have overridden getWildcardQuery() i am not certain how I can have both this feature and say, override getWildCardQuery to produce an AutomatonWildcardQuery: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1606&quot; title=&quot;Automaton Query/Filter (scalable regex)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1606&quot;&gt;&lt;del&gt;LUCENE-1606&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
what I want is both &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; , because AutomatonWildCardQuery cannot help at all with leading *, (it can with leading ? for example).&lt;/p&gt;

&lt;p&gt;but don&apos;t let this really get in your way, just a side note.&lt;/p&gt;</comment>
                            <comment id="12737596" author="ab" created="Fri, 31 Jul 2009 17:56:32 +0100"  >&lt;p&gt;If you follow the logic in getWildcardQuery, a field has to meet specific requirements for this reversal to occur - namely, it needs to declare in its indexing analysis chain that it uses ReversedWildcardFilter. This filter does very special kind of reversal (prepending the marker) so it&apos;s unlikely that anyone would use it for other purpose than to explicitly support leading wildcards. So for now I&apos;d say that users should consciously choose between this method of supporting leading wildcards and the automaton wildcard query.&lt;/p&gt;</comment>
                            <comment id="12737601" author="rcmuir" created="Fri, 31 Jul 2009 18:10:13 +0100"  >&lt;p&gt;andrzej i see what you are saying. I think its a great feature the way it is!&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;In the future I will take a look at finding a way to do both, this way complex cases like *abcde?f get reversed by this feature into \u0001f?edcba*, 
but then implemented with automaton so that it doesn&apos;t have to enumerate all tokens that start with \u0001f. 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this is bad example hope you see what i mean.  the biggest challenge would be preventing suboptimal cases, like reversing g?abcde* into \u2001*edcba?g, (at least I think).&lt;br/&gt;
the first is actually more efficient, I think regardless of the wildcard impl.&lt;/p&gt;

&lt;p&gt;I wonder if in your patch you could have an additional check, if something is in the 1st position but the last character is also a wildcard, not to reverse it?&lt;br/&gt;
in the example above even with the default lucene wildcard query, at least it would only enumerate the tokens starting with g, so its better not to reverse it.&lt;/p&gt;

&lt;p&gt;if its in the 0th position it doesnt matter if you reverse it or not but I think that one case can be optimized.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Robert&lt;/p&gt;</comment>
                            <comment id="12737763" author="ab" created="Sat, 1 Aug 2009 00:06:41 +0100"  >&lt;p&gt;I think your example of g?abcde* could be handled if we assigned different &quot;costs&quot; of expanding ? and *, the latter being more costly. There could be also a rule that prevents the reversing if a trailing &quot;costly&quot; wildcard is used.&lt;/p&gt;

&lt;p&gt;This quickly gets more and more complicated, so ultimately we may want to put this logic elsewhere, in a class that knows the best how to make such decisions (ReversedWildcardFilter ?). I&apos;ll try to modify the patch in this direction.&lt;/p&gt;</comment>
                            <comment id="12738343" author="rcmuir" created="Mon, 3 Aug 2009 14:48:47 +0100"  >&lt;p&gt;Andrzej, with the costs logic, you wouldn&apos;t have to limit the reversing to just 0th or 1st position wildcards either, right?&lt;/p&gt;

&lt;p&gt;for example if a term was 10 characters long with a wildcard in the 3rd position, reversing it is helpful.&lt;/p&gt;</comment>
                            <comment id="12738347" author="ab" created="Mon, 3 Aug 2009 14:59:12 +0100"  >&lt;p&gt;Exactly, that&apos;s the reason to put this logic in an isolated well-defined place, with some configurable knobs. One parameter would be the max. position of the leading wildcard, another would be relative cost of ? and *, or whether we allow wildcards at any positions except the 0-th (pure suffix search).&lt;/p&gt;</comment>
                            <comment id="12738352" author="rcmuir" created="Mon, 3 Aug 2009 15:08:49 +0100"  >&lt;p&gt;sounds perfect, great idea. Thanks!&lt;/p&gt;</comment>
                            <comment id="12738562" author="ab" created="Mon, 3 Aug 2009 21:27:26 +0100"  >&lt;p&gt;Updated patch with more configurable knobs. See javadoc of ReversedWildcardsFilterFactory and unit tests.&lt;/p&gt;</comment>
                            <comment id="12738626" author="rcmuir" created="Mon, 3 Aug 2009 22:48:34 +0100"  >&lt;p&gt;Andrzej, did you accidentally leave out ReversedWildcardsFilterFactory.java in the patch? &lt;/p&gt;</comment>
                            <comment id="12738634" author="ab" created="Mon, 3 Aug 2009 23:07:09 +0100"  >&lt;p&gt;Previous patch mistakenly included other stuff instead of ReversedWildcardFilterFactory.&lt;/p&gt;</comment>
                            <comment id="12738730" author="rcmuir" created="Tue, 4 Aug 2009 02:15:38 +0100"  >&lt;p&gt;andrzej, thanks, I like this design.&lt;/p&gt;</comment>
                            <comment id="12742430" author="gsingers" created="Wed, 12 Aug 2009 17:12:52 +0100"  >&lt;p&gt;Since this is a new filter, we might as well use the new incrementToken capability and reusable stuff as well as avoiding other deprecated analysis calls.&lt;/p&gt;</comment>
                            <comment id="12742434" author="gsingers" created="Wed, 12 Aug 2009 17:23:13 +0100"  >&lt;p&gt;Also no need to do the string round trip in the reverse method, right?  See the ReverseStringFilter in Lucene contrib/analysis.  Perhaps we should just patch that and add some config options to it?  Then all Solr would need is the QP change and the FilterFactory change, no?&lt;/p&gt;</comment>
                            <comment id="12742451" author="rcmuir" created="Wed, 12 Aug 2009 18:02:09 +0100"  >&lt;p&gt;i do have one comment on the reverse() present here: it is not unicode-safe (it will create unpaired surrogates).&lt;br/&gt;
We need to think thru the implications of this, fyi i have a patch for lucene&apos;s ReverseStringFilter (similar problem) sitting in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1689&quot; title=&quot;supplementary character handling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1689&quot;&gt;&lt;del&gt;LUCENE-1689&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12742559" author="ab" created="Wed, 12 Aug 2009 21:27:04 +0100"  >&lt;blockquote&gt;&lt;p&gt;Since this is a new filter, we might as well use the new incrementToken capability and reusable stuff as well as avoiding other deprecated analysis calls.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed, I&apos;ll fix this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also no need to do the string round trip in the reverse method, right? See the ReverseStringFilter in Lucene contrib/analysis.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Roundtrip ... you mean the allocation of new char[] buffer, or conversion to String? I assume the latter - the former is needed because we add the marker char in front. Yeah, I can return char[] and convert to String only in QP.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Perhaps we should just patch that and add some config options to it? Then all Solr would need is the QP change and the FilterFactory change, no?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm. After adding the marker-related stuff the code in ReverseStringFilter won&apos;t be so nice as it is now. I&apos;d keep in mind the specific use case of this filter ...&lt;/p&gt;</comment>
                            <comment id="12742568" author="gsingers" created="Wed, 12 Aug 2009 21:49:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;After adding the marker-related stuff the code in ReverseStringFilter won&apos;t be so nice as it is now&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course, it would be optional.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Yeah, I can return char[] and convert to String only in QP&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, no need to materialize a String if we don&apos;t need to.  FWIW, it also seemed like the reverse code in ReverseStringFilter was faster than the patch, but I didn&apos;t compare quantitatively.&lt;/p&gt;</comment>
                            <comment id="12742573" author="ab" created="Wed, 12 Aug 2009 22:01:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;FWIW, it also seemed like the reverse code in ReverseStringFilter was faster than the patch, but I didn&apos;t compare quantitatively.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It better be - it can reverse in-place, while we have to allocate a new buffer because of the marker char in front. That&apos;s what I meant by messy code - we would need both the in-place and the out-of-place method depending on an option.&lt;/p&gt;</comment>
                            <comment id="12742576" author="yseeley@gmail.com" created="Wed, 12 Aug 2009 22:15:58 +0100"  >&lt;p&gt;Use resizeTermBuffer() first... and then do it in place.  The buffer may already be big enough and so resizeTermBuffer would just be a check.&lt;/p&gt;</comment>
                            <comment id="12742611" author="rcmuir" created="Wed, 12 Aug 2009 23:18:56 +0100"  >&lt;p&gt;btw, i found apache harmony has a nice impl of in-place reversing that is unicode safe (AbstractStringBuilder.reverse0)&lt;br/&gt;
it will treat surrogate pairs as one character for the op just like java 5 StringBuilder.reverse()&lt;/p&gt;

&lt;p&gt;since lucene wildcard does not properly handle these, it would probably be bad to be &quot;unicode correct&quot; at this point.&lt;br/&gt;
but perhaps a TODO or comment is desirable, as I hope to improve this situation in the future!&lt;/p&gt;</comment>
                            <comment id="12747950" author="gsingers" created="Wed, 26 Aug 2009 15:04:38 +0100"  >&lt;p&gt;So, now that this is in Lucene, we likely just need to update the Factory in Solr, right?  As well as the Lucene libs, if they haven&apos;t been already.&lt;/p&gt;</comment>
                            <comment id="12748067" author="ab" created="Wed, 26 Aug 2009 19:29:02 +0100"  >&lt;p&gt;I&apos;ll update the patch, assuming the presence of the updated filter in Lucene, but I&apos;d rather leave updating the libs to someone more intimate with Solr internals ...&lt;/p&gt;</comment>
                            <comment id="12748941" author="gsingers" created="Fri, 28 Aug 2009 19:53:43 +0100"  >&lt;p&gt;I can take care of the libs.&lt;/p&gt;</comment>
                            <comment id="12753295" author="ab" created="Wed, 9 Sep 2009 23:11:00 +0100"  >&lt;p&gt;Updated patch that uses new TokenAttribute API and uses (as much as possible) the new ReverseStringFilter.&lt;/p&gt;</comment>
                            <comment id="12753631" author="gsingers" created="Thu, 10 Sep 2009 15:18:35 +0100"  >&lt;p&gt;Added ASL headers.&lt;/p&gt;

&lt;p&gt;I don&apos;t understand, in the Test, the comment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;// XXX note: this should be false, but for now we return true for any field,&lt;br/&gt;
    // XXX if at least one field uses the reversing&lt;br/&gt;
    assertTrue(parserThree.getAllowLeadingWildcard());&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Seems like this needs to be fixed before committing.&lt;/p&gt;</comment>
                            <comment id="12753648" author="ab" created="Thu, 10 Sep 2009 16:00:10 +0100"  >&lt;p&gt;This comment refers to the limitation of Lucene&apos;s QueryParser - there is only a single flag there to decide whether it accepts leading wildcards or not, regardless of field. Consequently, after checking the schema in SolrQueryParser we turn on this flag if &lt;em&gt;any&lt;/em&gt; field type supports leading wildcards. The end effect of this is that parsers for any field, which are created with IndexSchema.getSolrQueryParser(), will return true if any field type supports leading wildcards, not neccessarily the one for which the parser was created..&lt;/p&gt;

&lt;p&gt;I don&apos;t see a way to fix this. I can clarify the comment, though, so that it&apos;s clear that this is a limitation in Lucene QueryParser.&lt;/p&gt;</comment>
                            <comment id="12753655" author="yseeley@gmail.com" created="Thu, 10 Sep 2009 16:11:46 +0100"  >&lt;p&gt;I&apos;ve always been in favor of just allowing leading wildcards for all fields, but I think others disagreed on that point.&lt;/p&gt;</comment>
                            <comment id="12753705" author="gsingers" created="Thu, 10 Sep 2009 17:56:57 +0100"  >&lt;p&gt;OK, Andrzej.  That makes sense.  We may want to push down into Lucene eventually.  The only outcome of this is that people who are expecting &quot;efficient&quot; wildcard searches on fields that don&apos;t use the Reverse stuff would see slower perf.  &lt;/p&gt;

&lt;p&gt;I feel comfortable committing this patch now.&lt;/p&gt;</comment>
                            <comment id="12753706" author="rcmuir" created="Thu, 10 Sep 2009 18:05:15 +0100"  >&lt;p&gt;one comment, i think you should be able to use char[] versus String here pretty easily. it might have some impact on indexing speed.&lt;/p&gt;

&lt;p&gt;but this could be a later improvement.&lt;/p&gt;</comment>
                            <comment id="12753870" author="gsingers" created="Thu, 10 Sep 2009 23:41:09 +0100"  >&lt;p&gt;Hmm, anyone else having troubles with the other tests?  I don&apos;t think this is handling dynamic fields properly.&lt;/p&gt;</comment>
                            <comment id="12753872" author="gsingers" created="Thu, 10 Sep 2009 23:42:37 +0100"  >&lt;p&gt;Notwithstanding the fact that other tests that use the QP fail with this patch (and the old one), here&apos;s a patch that uses char[] instead of Strings.&lt;/p&gt;</comment>
                            <comment id="12753879" author="rcmuir" created="Thu, 10 Sep 2009 23:57:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;Hmm, anyone else having troubles with the other tests?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, I can confirm this... btw shouldnt the qp be looking at .getQueryAnalyzer() versus .getAnalyzer()?&lt;/p&gt;

&lt;p&gt;nevermind, since you dont want to reverse at query time... &lt;/p&gt;</comment>
                            <comment id="12753902" author="gsingers" created="Fri, 11 Sep 2009 00:45:06 +0100"  >&lt;p&gt;Problem seems to stem from &lt;b&gt;:&lt;/b&gt; queries.&lt;/p&gt;</comment>
                            <comment id="12753917" author="yseeley@gmail.com" created="Fri, 11 Sep 2009 01:25:13 +0100"  >&lt;blockquote&gt;&lt;p&gt;btw shouldnt the qp be looking at .getQueryAnalyzer() versus .getAnalyzer()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The QueryParser should be using the query analyzer in general, but in this case, it&apos;s looking at the index analyzer to see if it indexed reverse tokens.&lt;/p&gt;</comment>
                            <comment id="12753983" author="rcmuir" created="Fri, 11 Sep 2009 05:17:25 +0100"  >&lt;p&gt;grant&apos;s patch, but with the logic to handle matchalldocs&lt;/p&gt;</comment>
                            <comment id="12754124" author="gsingers" created="Fri, 11 Sep 2009 14:38:05 +0100"  >&lt;p&gt;Only annoying thing about this solution is now that * check gets done twice, once in the SolrQueryParser method and once in the QueryParser method. &lt;/p&gt;

&lt;p&gt;Also, why not just &amp;amp;&amp;amp; the two clauses (I realize it is a cut and paste from the parent).&lt;/p&gt;

&lt;p&gt;I&apos;ll fix and commit.&lt;/p&gt;</comment>
                            <comment id="12754129" author="gsingers" created="Fri, 11 Sep 2009 14:50:38 +0100"  >&lt;p&gt;Committed revision 813830.&lt;/p&gt;</comment>
                            <comment id="12758868" author="b_ravi_kiran" created="Wed, 23 Sep 2009 21:33:33 +0100"  >&lt;p&gt;While using ReversedWildcardFilterFactory with KeywordTokenizerFactory I get the following error for the fieldType&lt;/p&gt;

&lt;p&gt;    &amp;lt;fieldType name=&quot;keywordText&quot; class=&quot;solr.TextField&quot; sortMissingLast=&quot;true&quot; omitNorms=&quot;true&quot; positionIncrementGap=&quot;100&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;analyzer type=&quot;index&quot;&amp;gt;       &lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.KeywordTokenizerFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.TrimFilterFactory&quot; /&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.StopFilterFactory&quot; ignoreCase=&quot;true&quot; words=&quot;stopwords.txt&quot; enablePositionIncrements=&quot;true&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.SynonymFilterFactory&quot; synonyms=&quot;synonyms.txt&quot; ignoreCase=&quot;true&quot; expand=&quot;true&quot; /&amp;gt;                          &lt;br/&gt;
        &amp;lt;filter class=&quot;solr.RemoveDuplicatesTokenFilterFactory&quot;/&amp;gt;       &lt;br/&gt;
      &amp;lt;/analyzer&amp;gt;&lt;br/&gt;
      &amp;lt;analyzer type=&quot;query&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.KeywordTokenizerFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.TrimFilterFactory&quot; /&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.StopFilterFactory&quot; ignoreCase=&quot;true&quot; words=&quot;stopwords.txt&quot; enablePositionIncrements=&quot;true&quot; /&amp;gt;       &lt;br/&gt;
        &amp;lt;filter class=&quot;solr.SynonymFilterFactory&quot; synonyms=&quot;synonyms.txt&quot; ignoreCase=&quot;true&quot; expand=&quot;true&quot; /&amp;gt;                         &lt;br/&gt;
        &amp;lt;filter class=&quot;solr.RemoveDuplicatesTokenFilterFactory&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;/analyzer&amp;gt;&lt;br/&gt;
    &amp;lt;/fieldType&amp;gt;&lt;/p&gt;

&lt;p&gt;ERROR&lt;br/&gt;
--------&lt;br/&gt;
HTTP Status 500 - org.apache.solr.analysis.WhitespaceTokenizerFactory.create(Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer; java.lang.AbstractMethodError: org.apache.solr.analysis.WhitespaceTokenizerFactory.create(Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer; at org.apache.solr.analysis.TokenizerChain.getStream(TokenizerChain.java:69) at org.apache.solr.analysis.SolrAnalyzer.reusableTokenStream(SolrAnalyzer.java:74) at org.apache.solr.schema.IndexSchema$SolrIndexAnalyzer.reusableTokenStream(IndexSchema.java:364) at org.apache.lucene.queryParser.QueryParser.getFieldQuery(QueryParser.java:543) at org.apache.solr.search.SolrQueryParser.getFieldQuery(SolrQueryParser.java:153) at org.apache.solr.util.SolrPluginUtils$DisjunctionMaxQueryParser.getFieldQuery(SolrPluginUtils.java:807) at org.apache.solr.util.SolrPluginUtils$DisjunctionMaxQueryParser.getFieldQuery(SolrPluginUtils.java:794) at org.apache.lucene.queryParser.QueryParser.Term(QueryParser.java:1425) at org.apache.lucene.queryParser.QueryParser.Clause(QueryParser.java:1313) at org.apache.lucene.queryParser.QueryParser.Query(QueryParser.java:1241) at org.apache.lucene.queryParser.QueryParser.TopLevelQuery(QueryParser.java:1230) at org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:176) at org.apache.solr.search.DisMaxQParser.getUserQuery(DisMaxQParser.java:195) at org.apache.solr.search.DisMaxQParser.addMainQuery(DisMaxQParser.java:158) at org.apache.solr.search.DisMaxQParser.parse(DisMaxQParser.java:74) at org.apache.solr.search.QParser.getQuery(QParser.java:131) at org.apache.solr.handler.component.QueryComponent.prepare(QueryComponent.java:89) at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:174) at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131) at org.apache.solr.core.SolrCore.execute(SolrCore.java:1313) at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:338) at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:241) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:198) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:297) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:271) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:202) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:632) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:577) at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:94) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:206) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:632) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:577) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:571) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1080) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:150) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:632) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:577) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:571) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1080) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:272) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.invokeAdapter(DefaultProcessorTask.java:637) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.doProcess(DefaultProcessorTask.java:568) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.process(DefaultProcessorTask.java:813) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.executeProcessorTask(DefaultReadTask.java:341) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.doTask(DefaultReadTask.java:263) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.doTask(DefaultReadTask.java:214) at com.sun.enterprise.web.connector.grizzly.TaskBase.run(TaskBase.java:265) at com.sun.enterprise.web.connector.grizzly.ssl.SSLWorkerThread.run(SSLWorkerThread.java:106)&lt;/p&gt;</comment>
                            <comment id="12758873" author="yseeley@gmail.com" created="Wed, 23 Sep 2009 21:46:52 +0100"  >&lt;p&gt;Works for me in the latest trunk - perhaps you have some old class files laying around somewhere? That&apos;s normally the case with something like AbstractMethodError.&lt;/p&gt;</comment>
                            <comment id="12759187" author="b_ravi_kiran" created="Thu, 24 Sep 2009 18:28:18 +0100"  >&lt;p&gt;Thanks Yonik for the very prompt reply. Yes, you were right.  The lucene related jars had a &apos;dev&apos; suffix previously and now the &apos;dev&apos; was removed and hence my eclipse had jar resolution problems while building. I tested it and works great as always. BTW you folks did a wonderful job with solr &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12759218" author="b_ravi_kiran" created="Thu, 24 Sep 2009 20:10:27 +0100"  >&lt;p&gt;Is there a way to get only the actual instead of both actual and reversed texts (I see that we can just get the reserved without the actual. Is the other way round possible ?). &lt;/p&gt;

&lt;p&gt;The reason being, I tried to facet the field and it returned be both as follows&lt;/p&gt;

&lt;p&gt;&amp;lt;int name=&quot;#1;ssergnoC&quot;&amp;gt;78&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;Congress&quot;&amp;gt;78&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;#1;.W egroeG ,hsuB&quot;&amp;gt;28&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;Bush, George W.&quot;&amp;gt;28&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;#1;detinU&quot;&amp;gt;263&amp;lt;/int&amp;gt;&lt;br/&gt;
&amp;lt;int name=&quot;United&quot;&amp;gt;263&amp;lt;/int&amp;gt;&lt;/p&gt;</comment>
                            <comment id="12775482" author="gsingers" created="Tue, 10 Nov 2009 15:50:36 +0000"  >&lt;p&gt;Bulk close Solr 1.4 issues&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12419264" name="SOLR-1321.patch" size="23541" author="rcmuir" created="Fri, 11 Sep 2009 05:17:25 +0100"/>
                            <attachment id="12419230" name="SOLR-1321.patch" size="23344" author="gsingers" created="Thu, 10 Sep 2009 23:42:37 +0100"/>
                            <attachment id="12419178" name="SOLR-1321.patch" size="22822" author="gsingers" created="Thu, 10 Sep 2009 15:18:35 +0100"/>
                            <attachment id="12415416" name="wildcards-2.patch" size="19855" author="ab" created="Mon, 3 Aug 2009 23:07:09 +0100"/>
                            <attachment id="12419095" name="wildcards-3.patch" size="20380" author="ab" created="Wed, 9 Sep 2009 23:11:00 +0100"/>
                            <attachment id="12415125" name="wildcards.patch" size="15253" author="ab" created="Fri, 31 Jul 2009 16:05:23 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 31 Jul 2009 16:46:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6329</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxlyn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19877</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>