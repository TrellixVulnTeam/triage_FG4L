<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:16:26 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-42/SOLR-42.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-42] Highlighting problems with HTMLStripWhitespaceTokenizerFactory</title>
                <link>https://issues.apache.org/jira/browse/SOLR-42</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;Indexing content that contains HTML markup, causes problems with highlighting if the HTMLStripWhitespaceTokenizerFactory is used (to prevent the tag names from being searchable).&lt;/p&gt;

&lt;p&gt;Example title field:&lt;/p&gt;

&lt;p&gt;&amp;lt;SUP&amp;gt;40&amp;lt;/SUP&amp;gt;Ar/&amp;lt;SUP&amp;gt;39&amp;lt;/SUP&amp;gt;Ar laserprobe dating of mylonitic fabrics in a polyorogenic terrane of NW Iberia&lt;/p&gt;

&lt;p&gt;Searching for title:fabrics with highlighting on, the highlighted version has the &amp;lt;em&amp;gt; tags in the wrong place - 22 characters to the left of where they should be (i.e. the sum of the lengths of the tags).&lt;/p&gt;

&lt;p&gt;Response from Yonik on the solr-user mailing-list:&lt;/p&gt;

&lt;p&gt;HTMLStripWhitespaceTokenizerFactory works in two phases...&lt;br/&gt;
HTMLStripReader removes the HTML and passes the result to&lt;br/&gt;
WhitespaceTokenizer... at that point, Tokens are generated, but the&lt;br/&gt;
offsets will correspond to the text after HTML removal, not before.&lt;/p&gt;

&lt;p&gt;I did it this way so that HTMLStripReader  could go before any&lt;br/&gt;
tokenizer (like StandardTokenizer).&lt;/p&gt;

&lt;p&gt;Can you open a JIRA bug for this?  The fix would be a special version&lt;br/&gt;
of HTMLStripReader integrated with a WhitespaceTokenizer to keep&lt;br/&gt;
offsets correct. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12346872">SOLR-42</key>
            <summary>Highlighting problems with HTMLStripWhitespaceTokenizerFactory</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="steve_rowe">Steve Rowe</assignee>
                                    <reporter username="amayingenta">Andrew May</reporter>
                        <labels>
                    </labels>
                <created>Fri, 28 Jul 2006 21:43:04 +0100</created>
                <updated>Fri, 10 May 2013 11:41:09 +0100</updated>
                            <resolved>Tue, 24 Jan 2012 15:55:48 +0000</resolved>
                                                    <fixVersion>3.6</fixVersion>
                    <fixVersion>4.0-ALPHA</fixVersion>
                                    <component>highlighter</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="12462338" author="hossman" created="Thu, 4 Jan 2007 22:21:50 +0000"  >&lt;p&gt;Suggestion from Mirko on solr-dev: change HTMLStripReader to replace striped HTML with equal length whitespace.&lt;/p&gt;

&lt;p&gt;(this could possibly be made a constructor option)&lt;/p&gt;</comment>
                            <comment id="12480554" author="paulfryer" created="Tue, 13 Mar 2007 21:37:01 +0000"  >&lt;p&gt;Any update on this? I was hoping to use Solr to do full text search of HTML documents and provide snippets with search terms highlighted.  I assume I won&apos;t be able to provide accurate HTML snippet highlighting until this issue is resolved - correct? If so, what sort of time frame would be be looking at? Anything I can contribute to help?&lt;/p&gt;</comment>
                            <comment id="12480555" author="hossman" created="Tue, 13 Mar 2007 21:40:12 +0000"  >&lt;p&gt;the most helpful contribution would be a patch containing a JUnit test demonstrating hte problem and the necessary fix &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/solr/HowToContribute&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/solr/HowToContribute&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12532570" author="skeptikos" created="Fri, 5 Oct 2007 05:37:27 +0100"  >&lt;p&gt;Here is the workaround I am using, along with a long comment explaining why:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;solrconfig.xml&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
		&amp;lt;!--
			Special-&lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; stuff &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; HTML tags in Abstract field:
			Originally we had
				&amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.HTMLStripWhitespaceTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;
			but pre-stripping destroys offsets needed &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; highiighting.
			Tried an HTML tag-extraction RegEx as a post-process
				&amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.WhitespaceTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;
				&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.PatternReplaceFilterFactory&quot;&lt;/span&gt;
					pattern=&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;amp;lt;/?\w+((\s+\w+(\s*=\s*(?:&amp;amp;quot;.*?&amp;amp;quot;|&apos;.*?&apos;|[^&apos;&amp;amp;quot;&amp;gt;\s]+))?)+\s*|\s*)/?&amp;amp;gt;&quot;&lt;/span&gt;
					replacement=&quot;&quot;
					replace=&lt;span class=&quot;code-quote&quot;&gt;&quot;all&quot;&lt;/span&gt;/&amp;gt;
			but it still doesn&apos;t adjust the offset and the subsequent WDF then created havoc.
			One solution is to split on whitespace or tag delimiters (making tags
			into text), and either index the tags or use StopFilter to remove &apos;em.
			But the chosen solution is to swallow an entire chain of tags and any whitespace
			which surrounds or separates them, leaving non-HTML &amp;lt; and &amp;gt; intact, or &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; runs
			of whitespace as normal.

		--&amp;gt;
			&amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.PatternTokenizerFactory&quot;&lt;/span&gt;
					pattern=&lt;span class=&quot;code-quote&quot;&gt;&quot;(?:\s*&amp;amp;lt;/?\w+((\s+\w+(\s*=\s*(?:&amp;amp;quot;.*?&amp;amp;quot;|&apos;.*?&apos;|[^&apos;&amp;amp;quot;&amp;gt;\s]+))?)+\s*|\s*)/?&amp;amp;gt;\s*)++|\s+&quot;&lt;/span&gt;/&amp;gt;
			&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.ISOLatin1AccentFilterFactory&quot;&lt;/span&gt;/&amp;gt;
			...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;without the XMLEncoding the RegEx is:&lt;/p&gt;

&lt;p&gt;			&lt;tt&gt;(?:\s*&amp;lt;/?\w+((\s+\w+(\s*=\s*(?:&quot;&lt;b&gt;?&amp;amp;&quot;&apos;.&lt;/b&gt;?&apos;|&lt;span class=&quot;error&quot;&gt;&amp;#91;^&amp;#39;&amp;quot;&amp;gt;\s&amp;#93;&lt;/span&gt;&lt;ins&gt;))?)&lt;/ins&gt;\s*|\s*)/?&amp;gt;\s*)+&lt;ins&gt;|\s&lt;/ins&gt;&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;and it will treat runs of &quot;things that look like HTML/XML open or close tags with optional attributes, optionally preceded or followed by spaces&quot; identically to &quot;runs of one or more spaces&quot; as token delimiters, and swallow them up, so the previous and following tokens have the correct offsets.&lt;/p&gt;

&lt;p&gt;Of course this is just a hack: It doesn&apos;t have any real understanding of HTML or XML syntax, so something invalid like &amp;lt;/closing attr=&quot;x&quot;/&amp;gt; will get matched.  On the other hand, &amp;lt; and &amp;gt; in text will be left alone.  &lt;/p&gt;

&lt;p&gt;Also note it doesn&apos;t decode XML or HTML numeric or symbolic entity references, as HTMLStripReader does (my indexer is pre-decoding the entity references before sending the text to Solr for indexing).&lt;/p&gt;

&lt;p&gt;So fixing HTMLStripReader and its dependent HTMLStripXXXTokenizers to do the right thing with offsets would still be a worthy task.  I wonder whether recasting HTMLStripReader using the org.apache.lucene.analysis.standard.CharStream interface would make sense for this?&lt;/p&gt;</comment>
                            <comment id="12542184" author="stuartsierra" created="Tue, 13 Nov 2007 17:58:12 +0000"  >&lt;p&gt;Another workaround is simply to strip HTML tags and entities before sending the document to Solr.  This gives correct highlights.  But if you want to retrieve the original HTML document you&apos;ll need to stash it somewhere else.&lt;/p&gt;</comment>
                            <comment id="12555559" author="gsingers" created="Thu, 3 Jan 2008 12:54:51 +0000"  >&lt;p&gt;Might a solution to this be to replace the removed characters with whitespace, thus preserving the input offsets?&lt;/p&gt;</comment>
                            <comment id="12555577" author="gsingers" created="Thu, 3 Jan 2008 14:15:27 +0000"  >&lt;p&gt;Here&apos;s the start of a test for the HTMLStripReader.  Note, in order to incorporate my suggestion of replacing HTML tags w/ whitespace, this test would need to be modified.&lt;/p&gt;</comment>
                            <comment id="12555601" author="gsingers" created="Thu, 3 Jan 2008 16:20:52 +0000"  >&lt;p&gt;Patch that replaces HTML cruft with whitespace, thus preserving highlighting at the expense of extra characters.  Also included the a test file and test case&lt;/p&gt;

&lt;p&gt;NOTE: This is not backward-compatible with old HTMLStripReader, but seeing how it requires re-indexing to use anyway, I don&apos;t see that it is a concern.&lt;/p&gt;</comment>
                            <comment id="12556098" author="gsingers" created="Fri, 4 Jan 2008 22:43:55 +0000"  >&lt;p&gt;Hmm, I don&apos;t know if this completely solves the problem even though the code seems like it is right.  I am still having trouble w/ the offsets.&lt;/p&gt;

&lt;p&gt;has anyone else tried the patch?&lt;/p&gt;</comment>
                            <comment id="12556104" author="yseeley@gmail.com" created="Fri, 4 Jan 2008 22:58:47 +0000"  >&lt;p&gt;Grant, I&apos;m getting a test failure... did you forget to &quot;svn add&quot; some files?&lt;/p&gt;

&lt;p&gt;    &amp;lt;error message=&quot;src\test\test-files\htmlStripReaderTest.html (The system ca&lt;br/&gt;
not find the path specified)&quot; type=&quot;java.io.FileNotFoundException&quot;&amp;gt;java.io.File&lt;br/&gt;
otFoundException: src\test\test-files\htmlStripReaderTest.html (The system cann&lt;br/&gt;
t find the path specified)&lt;br/&gt;
        at java.io.FileInputStream.open(Native Method)&lt;br/&gt;
        at java.io.FileInputStream.&amp;lt;init&amp;gt;(FileInputStream.java:106)&lt;br/&gt;
        at java.io.FileReader.&amp;lt;init&amp;gt;(FileReader.java:55)&lt;br/&gt;
        at org.apache.solr.analysis.HTMLStripReaderTest.testHTML(HTMLStripReade&lt;br/&gt;
Test.java:65)&lt;/p&gt;</comment>
                            <comment id="12556113" author="gsingers" created="Fri, 4 Jan 2008 23:24:28 +0000"  >&lt;p&gt;There is definitely still an issue w/ the HTMLStripReader in some circumstances, working on a test now.&lt;/p&gt;</comment>
                            <comment id="12556115" author="gsingers" created="Fri, 4 Jan 2008 23:31:18 +0000"  >&lt;p&gt;Here is the file.  It shows it as being added in svn stat, but not sure why it wasn&apos;t included.&lt;/p&gt;

&lt;p&gt;It goes in src/test/test-files&lt;/p&gt;

&lt;p&gt;It&apos;s just a copy of site/index.html&lt;/p&gt;</comment>
                            <comment id="12556149" author="gsingers" created="Sat, 5 Jan 2008 01:12:25 +0000"  >&lt;blockquote&gt;
&lt;p&gt;There is definitely still an issue w/ the HTMLStripReader in some circumstances, working on a test now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Red herring.  The problem I was seeing is due to some tags that are valid syntax for my text are being stripped.  I think this patch can go ahead, although it might be useful to keep certain tags (i.e. a set of tags)&lt;/p&gt;</comment>
                            <comment id="12556158" author="yseeley@gmail.com" created="Sat, 5 Jan 2008 02:06:38 +0000"  >&lt;p&gt;Hmmm, I&apos;m still getting the exception, even after adding the file.&lt;br/&gt;
Did you test with &quot;ant clean test&quot;, or with a GUI?&lt;/p&gt;</comment>
                            <comment id="12556160" author="yseeley@gmail.com" created="Sat, 5 Jan 2008 02:09:25 +0000"  >&lt;p&gt;To elaborate, I think the CWD when running tests under ant is &quot;src\test\test-files&quot;, so adding that to the filename when you try to open the file seems incorrect.  To match ant, I have intellij set up to use src\test\test-files as the CWD when running tests.&lt;/p&gt;</comment>
                            <comment id="12556161" author="gsingers" created="Sat, 5 Jan 2008 02:44:39 +0000"  >&lt;p&gt;You are right.  I forgot that the CWD is different for Solr.  Feel  &lt;br/&gt;
free to strip off that initial path stuff, or I can generate a new  &lt;br/&gt;
patch.&lt;/p&gt;

&lt;p&gt;-Grant&lt;/p&gt;



&lt;p&gt;--------------------------&lt;br/&gt;
Grant Ingersoll&lt;br/&gt;
&lt;a href=&quot;http://lucene.grantingersoll.com&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://lucene.grantingersoll.com&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.lucenebootcamp.com&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.lucenebootcamp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lucene Helpful Hints:&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/lucene-java/BasicsOfPerformance&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/lucene-java/BasicsOfPerformance&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/lucene-java/LuceneFAQ&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/lucene-java/LuceneFAQ&lt;/a&gt;&lt;/p&gt;



</comment>
                            <comment id="12556226" author="gsingers" created="Sat, 5 Jan 2008 13:55:00 +0000"  >&lt;p&gt;Here&apos;s a new version, with some more testing and the ability to preserve certain tags via a passed in set.  This is useful for text where some tags are meaningful or at least are useful further down the chain.  I am not sure why the html test file is not included.  svn stat shows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A  +   src/test/test-files/htmlStripReaderTest.html&lt;br/&gt;
A      src/test/org/apache/solr/analysis/HTMLStripReaderTest.java&lt;br/&gt;
M      src/java/org/apache/solr/analysis/HTMLStripReader.java&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="12556247" author="yseeley@gmail.com" created="Sat, 5 Jan 2008 16:01:35 +0000"  >&lt;p&gt;committed.  Thanks Grant!&lt;/p&gt;</comment>
                            <comment id="12556634" author="gsingers" created="Mon, 7 Jan 2008 17:30:19 +0000"  >&lt;p&gt;Hmmm, still seems to be a problem with entities.  I think we need to replace the entity w/ the appropriate amount of whitespace.  I will work up test and patch.&lt;/p&gt;</comment>
                            <comment id="12556636" author="yseeley@gmail.com" created="Mon, 7 Jan 2008 17:37:26 +0000"  >&lt;p&gt;Hmmm, this points out a deficiency in this approach... it could break up words or tokens (with whitespace) that were not originally separated (think international char in the middle of a word).&lt;br/&gt;
So I think this approach is probably OK for now, but a better approach would have the tokenizer get the offsets from the reader somehow (perhaps just a whitespace tokenizer with HTML stripping integrated).&lt;/p&gt;</comment>
                            <comment id="12556659" author="gsingers" created="Mon, 7 Jan 2008 19:21:24 +0000"  >&lt;p&gt;OK, here&apos;s a patch for the entity problem, but yes, I do agree Yonik, a better approach is needed.&lt;/p&gt;

&lt;p&gt;It might be as simple as the SolrHighlighter being aware the the HTMLStripReader is being used.&lt;/p&gt;</comment>
                            <comment id="12556668" author="klaasm" created="Mon, 7 Jan 2008 19:51:35 +0000"  >&lt;p&gt;&amp;gt; It might be as simple as the SolrHighlighter being aware the the HTMLStripReader is being used.&lt;/p&gt;

&lt;p&gt;Grant, thanks for looking in to this issue.  What do you imagine the highlighter being able to do with that knowledge?  &lt;/p&gt;

&lt;p&gt;Note that the entity problem is an issue for search, not just highlighting.  The proper tokens will not be created in the case of international chars&lt;/p&gt;</comment>
                            <comment id="12556670" author="gsingers" created="Mon, 7 Jan 2008 20:02:38 +0000"  >&lt;blockquote&gt;
&lt;p&gt;What do you imagine the highlighter being able to do with that knowledge?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My understanding of looking at the code is the disjoint comes from line 298.  In the call to Lucene&apos;s highlighter, we pass in the TokenStream, which has been stripped (or will be stripped if the the HTMLStripReader is employed) and the value from the stored field (docTexts&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;).  If, docTexts&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; was stripped first, then I &lt;em&gt;think&lt;/em&gt; the offsets would be the same, no?  Of course, it would be really easy to test.  &lt;/p&gt;

&lt;p&gt;Of course, the real answer may be as suggested earlier and to apply the stripreader before sending to Solr.&lt;/p&gt;</comment>
                            <comment id="12556676" author="klaasm" created="Mon, 7 Jan 2008 20:12:41 +0000"  >&lt;p&gt;&amp;gt; Of course, the real answer may be as suggested earlier and to apply the stripreader before sending to Solr.&lt;/p&gt;

&lt;p&gt;HTMLStripTokenizer currently breaks the tokenizer contract, so it seems like the real answer is to fix the offsets.  I&apos;ve glanced at the code, and it would be a significant amount of work to make the current implementation adhere to this contract.  The main problem is that no-one is really interested in doing this work.&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; What do you imagine the highlighter being able to do with that knowledge?&lt;/p&gt;

&lt;p&gt;&amp;gt; My understanding of looking at the code is the disjoint comes from line 298. In the call to Lucene&apos;s highlighter, we pass in the TokenStream, which has &amp;gt; been stripped (or will be stripped if the the HTMLStripReader is employed) and the value from the stored field (docTexts&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;). If, docTexts&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; was stripped first, &amp;gt; then I think the offsets would be the same, no? Of course, it would be really easy to test.&lt;/p&gt;

&lt;p&gt;You know, this is incredibly hacky, but I think that it is a great idea.&lt;/p&gt;

&lt;p&gt;-Mike&lt;/p&gt;
</comment>
                            <comment id="12556729" author="hossman" created="Mon, 7 Jan 2008 21:56:38 +0000"  >&lt;p&gt;I don&apos;t know much about unicode, but there are &lt;b&gt;so&lt;/b&gt; many special characters in unicode, i just have to wonder if there is a special marker character that could be used instead of whitespace to &quot;fill in the gaps&quot; left when converting entities to real characters (or stripping tags).  ... something that isn&apos;t printable, and does&apos;t trigger any &quot;boundary&quot; logic (ie: note whitespace, punctuation, letter, digit, etc...)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;NUL perhaps?  (can you legally embed null in a string in java?)&lt;/li&gt;
	&lt;li&gt;does anyone understand the definition of a &quot;nonspacing mark&quot; ?&lt;/li&gt;
	&lt;li&gt;the &quot;Invisible Separator&quot; character?&lt;/li&gt;
	&lt;li&gt;a &quot;private use&quot; character?  (this actually seems like the most promising option)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I say we just punt: have two options that allows users to specify characters: one for when tags are striped, one for when entities are converted to normal characters ... default both to an empty string (ie: current behavior)&lt;/p&gt;</comment>
                            <comment id="12556740" author="yseeley@gmail.com" created="Mon, 7 Jan 2008 22:15:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;i just have to wonder if there is a special marker character that could be used instead of whitespace&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For a hack, not a bad idea...&lt;br/&gt;
There could be a TokenFilter that removes any such characters in tokens, and it could even be automatically used by Tokenizers that use the html strip reader.&lt;/p&gt;</comment>
                            <comment id="12556748" author="hossman" created="Mon, 7 Jan 2008 22:35:07 +0000"  >&lt;p&gt;Hmmm.... I was assuming this would be an option on both the HTMLStripReader and the Tokenizers that use it (the tokenizers taking the option only to pass it on to the Reader) but i see what you mean ... once the Tokenizer knows the character positions of the &quot;words&quot; coming out of the text, it can then strip out those characters (Hmmm... strip the characters that are a placeholder for when other characters where already striped ... why do i feel like we&apos;re going to go to hell for this?)&lt;/p&gt;

&lt;p&gt;Tf there were characters that we were &lt;b&gt;certain&lt;/b&gt; would never appear in any unicode string, we could do it all under the covers by picking one of them ... but the safest thing to do would still be to have it as an option (but with a sensible default from the &quot;private use&quot; range instead of an empty string).  ... &lt;/p&gt;

&lt;p&gt;So the HtmlStripReader would have a constructor that looks like...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   /** 
   * @param entityFiller character to replace gaps made when entities are collapsed to real characters so that character positions still line up, may be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; no filler should be used 
   * @param tagFiller character to replace gaps made when entities are collapsed to real characters so that character positions still line up, may be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; no filler should be used 
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; HtmlStripReader(Reader input, &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt; entityFiller, &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt; tagFiller) { ... }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the Tokenizers could look like...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class HTMLStripStandardTokenizerFactory &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; BaseTokenizerFactory {
  Pattern fillerPattern;
  &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt; entityFiller, tagFiller; 
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void init(...) {
    entityFiller = getInitParam(...);
    tagFiller = getInitParam(...)
    fillerPattern = getInitParam(stripFiller) ? makePattern(entityFiller, tagFiller) : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TokenStream create(Reader input) {
    TokenStream s = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StandardTokenizer(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HTMLStripReader(input,entityFiller, tagFiller);
    If (&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; != fillerPatterm) {
      s = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PatternReplaceFiler(s, fillerPattern, &quot;&quot;, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; s;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;that should totally work right?&lt;/p&gt;</comment>
                            <comment id="12556928" author="gsingers" created="Tue, 8 Jan 2008 16:19:26 +0000"  >&lt;p&gt;Yet another problem: &lt;br/&gt;
In certain circumstances, it is possible that restoreState() cannot be invoked b/c the mark has been lost due to moving well beyond it.  This is most noticeable in the while (true) loop inside of readProcessingInstruction() and can be caused by the following test:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testQuestionMark() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    StringBuilder testBuilder = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(5020);
    testBuilder.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;ah&amp;lt;?&amp;gt; &quot;&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 5000; i++){
      testBuilder.append(&apos;a&apos;);&lt;span class=&quot;code-comment&quot;&gt;//tack on enough to go beyond the mark readahead limit, since &amp;lt;?&amp;gt; makes HTMLStripReader think it is a processing instruction
&lt;/span&gt;    }
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; test = testBuilder.toString();
    Reader reader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HTMLStripReader(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringReader(test)));&lt;span class=&quot;code-comment&quot;&gt;//force the use of BufferedReader
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ch = 0;
    StringBuilder builder = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; ((ch = reader.read()) != -1){
        builder.append((&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;)ch);
      }
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;: &quot;&lt;/span&gt; + builder.toString());
    }
    assertTrue(builder.toString() + &lt;span class=&quot;code-quote&quot;&gt;&quot; is not equal to &quot;&lt;/span&gt; + test, builder.toString().equals(test) == &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the final assert never gets hit, because there is an IOException in reader.read of:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.io.IOException: Mark invalid
	at java.io.BufferedReader.reset(BufferedReader.java:485)
	at org.apache.solr.analysis.HTMLStripReader.restoreState(HTMLStripReader.java:158)
	at org.apache.solr.analysis.HTMLStripReader.read(HTMLStripReader.java:731)
	at org.apache.solr.analysis.HTMLStripReaderTest.testQuestionMark(HTMLStripReaderTest.java:171)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will add that this is based off of text seen in the wild.&lt;/p&gt;</comment>
                            <comment id="12556946" author="gsingers" created="Tue, 8 Jan 2008 17:06:58 +0000"  >&lt;p&gt;OK, I think the solution for these pieces is to change the &lt;br/&gt;
while (true) loops inside of HTMLStripReader to only read up to READAHEAD chars so that it can always fall back to the last mark&lt;/p&gt;


&lt;p&gt;I will work up a patch.&lt;/p&gt;</comment>
                            <comment id="12557256" author="gsingers" created="Wed, 9 Jan 2008 12:50:11 +0000"  >&lt;p&gt;OK, I&apos;m 99.99% confident this fixes the issues w/ the while (true) loops and handles entities properly, etc.  and highlighting works correctly.  Added more tests, etc.&lt;/p&gt;</comment>
                            <comment id="12557395" author="ehatcher" created="Wed, 9 Jan 2008 19:41:44 +0000"  >&lt;p&gt;patch applied, all tests still pass, and committed.  Thanks Grant!&lt;/p&gt;</comment>
                            <comment id="12569035" author="ryguasu" created="Thu, 14 Feb 2008 18:37:35 +0000"  >&lt;p&gt;The committed HtmlStripReader doesn&apos;t seem to handle offsets correctly for XML processing instructions such as this:&lt;/p&gt;

&lt;p&gt;    &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;&lt;/p&gt;

&lt;p&gt;I&apos;m attaching two files:&lt;/p&gt;

&lt;p&gt;HtmlStripReaderTestXmlProcessing.patch adds an HtmlStripReader test case to catch the problem. (The test currently fails.)&lt;/p&gt;

&lt;p&gt;TokenPrinter.java can help make it a little clearer what the problem actually is. Here is the output if I run it against against the analysis code in trunk. Note that the offsets are basically what one would expect, except in the XML processing instructions case, where the start position is off by one:&lt;/p&gt;

&lt;p&gt;-------------------------------------&lt;br/&gt;
String to test: &amp;lt;uniqueKey&amp;gt;id&amp;lt;/uniqueKey&amp;gt;&lt;br/&gt;
 Token info:&lt;br/&gt;
   token &apos;id&apos;&lt;br/&gt;
     startOffset: 11&lt;br/&gt;
     char at startOffset, and next few: &apos;id&amp;lt;/u&apos;&lt;br/&gt;
-------------------------------------&lt;br/&gt;
String to test: &amp;lt;!-- Unless this field is marked with required=&quot;false&quot;, it will be a required field --&amp;gt;&lt;br/&gt;
&amp;lt;uniqueKey&amp;gt;id&amp;lt;/uniqueKey&amp;gt;&lt;br/&gt;
 Token info:&lt;br/&gt;
   token &apos;id&apos;&lt;br/&gt;
     startOffset: 99&lt;br/&gt;
     char at startOffset, and next few: &apos;id&amp;lt;/u&apos;&lt;br/&gt;
-------------------------------------&lt;br/&gt;
String to test: &amp;lt;!-- And now: two elements --&amp;gt; &amp;lt;element1&amp;gt;one&amp;lt;/element1&amp;gt;&lt;br/&gt;
 &amp;lt;element2&amp;gt;two&amp;lt;/element2&amp;gt;&lt;br/&gt;
 Token info:&lt;br/&gt;
   token &apos;one&apos;&lt;br/&gt;
     startOffset: 41&lt;br/&gt;
     char at startOffset, and next few: &apos;one&amp;lt;/&apos;&lt;br/&gt;
   token &apos;two&apos;&lt;br/&gt;
     startOffset: 68&lt;br/&gt;
     char at startOffset, and next few: &apos;two&amp;lt;/&apos;&lt;br/&gt;
-------------------------------------&lt;br/&gt;
String to test: &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;&amp;lt;uniqueKey&amp;gt;id&amp;lt;/uniqueKey&amp;gt;&lt;br/&gt;
 Token info:&lt;br/&gt;
   token &apos;id&apos;&lt;br/&gt;
     startOffset: 49&lt;br/&gt;
     char at startOffset, and next few: &apos;&amp;gt;id&amp;lt;/&apos;&lt;br/&gt;
-------------------------------------&lt;/p&gt;</comment>
                            <comment id="12570338" author="ryguasu" created="Tue, 19 Feb 2008 17:49:00 +0000"  >&lt;p&gt;Updating test case to reflect the fact that offset info still gets screwed up in the XML processing instruction case even if there are no XML elements in the source XML&lt;/p&gt;</comment>
                            <comment id="12620545" author="solrize" created="Thu, 7 Aug 2008 09:09:39 +0100"  >&lt;p&gt;I am getting a ton of these errors in real documents with the 2008-07-30 nightly build.  Any advice?  Thanks.&lt;/p&gt;</comment>
                            <comment id="12625835" author="imjimmurphy" created="Tue, 26 Aug 2008 20:41:08 +0100"  >&lt;p&gt;I&apos;ve tracked down some background info on this issue - at least the way it was affecting me.  I could care less about highlighting - I&apos;m using the HTMLStripWhitespaceTokenizerFactory during indexing to tokenize blog content - which obviously contains lots of html.  &lt;/p&gt;

&lt;p&gt;The pathological case I&apos;ve found with our input document set is:&lt;/p&gt;

&lt;p&gt;Content contains a malformed xml processing instruction in the first &quot;page&quot; of the buffer that contains more than one page of data.&lt;/p&gt;

&lt;p&gt;It seems this is a fairly common (maybe MS Word XML?) form of invalid HTML.  Commonly it looks like this:&lt;/p&gt;

&lt;p&gt;...valid html...&amp;lt;?xml:namespace prefix = o /&amp;gt;...valid html...&lt;/p&gt;

&lt;p&gt;Notice the PI starts with &quot;&amp;lt;?xml&quot; but terminates with a close tag., doh.&lt;/p&gt;

&lt;p&gt;This issue is manifested in HTMLStripReader. It causes the following code to read too much off the buffer and invalidates the previous mark at the beginning of the tag.&lt;/p&gt;

&lt;p&gt;private int readProcessingInstruction() throws IOException {&lt;br/&gt;
    // &quot;&amp;lt;?&quot; has already been read&lt;br/&gt;
    while ((numRead - lastMark) &amp;lt; readAheadLimitMinus1) {&lt;br/&gt;
      int ch = next();&lt;br/&gt;
      if (ch==&apos;?&apos; &amp;amp;&amp;amp; peek()==&apos;&amp;gt;&apos;) &lt;/p&gt;
{
        next();
        return MATCH;
      }
&lt;p&gt; else if (ch==-1) &lt;/p&gt;
{
        return MISMATCH;
      }

&lt;p&gt;    }&lt;br/&gt;
    return MISMATCH;&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;The demoralizing part is the special treatment (readAheadLimitMinus1) isn&apos;t enough.  There is actually a &quot;over read&quot; by 2 chars.&lt;/p&gt;

&lt;p&gt;The IOException - Invalid Mark happens when readProcessingInstruction() retuns (a mismatch because the entire buffer is read without finding the close PI) and restoreState(); is called to reset the marks - which fails.&lt;/p&gt;

&lt;p&gt;If I tweak readAheadLimitMinus1 like this&lt;/p&gt;

&lt;p&gt;readAheadLimitMinus1 -= 2 &lt;/p&gt;

&lt;p&gt;So maybe the variable should be readAheadLimitMinus3 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;then the buffer limits are preserved and the exception isn&apos;t found, parsing proceedes as expected.&lt;/p&gt;

&lt;p&gt;Jim  &lt;/p&gt;
</comment>
                            <comment id="12628473" author="goksron" created="Thu, 4 Sep 2008 22:47:41 +0100"  >&lt;p&gt;A slight nit: Unicode contains three characters, fffD, fffE, and fffF, which are not supposed to appear in any document. One (fffD i think) is the offical &quot;not a character&quot; character, and should be used for the purpose of separating terms.&lt;/p&gt;
</comment>
                            <comment id="12628475" author="goksron" created="Thu, 4 Sep 2008 22:48:23 +0100"  >&lt;p&gt;Another bigger nit: the last time I studied this, the HTML stripper code did not pull alt-text fields as searchable tags.&lt;/p&gt;</comment>
                            <comment id="12628650" author="pakore" created="Fri, 5 Sep 2008 16:01:34 +0100"  >&lt;p&gt;The patch is for solr 1.3? &lt;/p&gt;

&lt;p&gt;I tried to apply the patch to solr 1.2 but it fails &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Can anybody complete the &quot;affected version&quot; and &quot;fix version&quot; field? thanks!&lt;/p&gt;</comment>
                            <comment id="12641883" author="solrize" created="Wed, 22 Oct 2008 16:14:41 +0100"  >&lt;p&gt;This problem is still present in solr 1.3.0 and I&apos;m getting a ton of those &quot;mark invalid&quot; exceptions.  Is this really a minor issue?!!!!&lt;/p&gt;</comment>
                            <comment id="12717688" author="mertsakarya" created="Tue, 9 Jun 2009 15:26:52 +0100"  >&lt;p&gt;I think this is a problem of Microsoft Word. No one can say that;&lt;/p&gt;

&lt;p&gt;      ...valid html...&amp;lt;?xml:namespace prefix = o /&amp;gt;...valid html...&lt;/p&gt;

&lt;p&gt;is a valid HTML. Any HTMLParser should look for a &quot;?&amp;gt;&quot; after a &quot;&amp;lt;?&quot;&lt;/p&gt;

&lt;p&gt;BUT! As a solution, I modified line 644 at HTMLStripReader.java as;&lt;/p&gt;

&lt;p&gt;      //if (ch==&apos;?&apos; &amp;amp;&amp;amp; peek()==&apos;&amp;gt;&apos;) {&lt;br/&gt;
      if ((ch==&apos;?&apos; || ch==&apos;/&apos;) &amp;amp;&amp;amp; peek()==&apos;&amp;gt;&apos;) { //This fixes Office Word problem, but might cause other problems!!! Be very careful.&lt;/p&gt;

&lt;p&gt;And created my own HTMLStripReader in another jar file.&lt;/p&gt;</comment>
                            <comment id="12749421" author="andersm" created="Mon, 31 Aug 2009 09:23:37 +0100"  >&lt;p&gt;I found the issue with entity replacement breaking up words, and created &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1394&quot; title=&quot;HTML stripper is splitting tokens&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1394&quot;&gt;&lt;del&gt;SOLR-1394&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My patch in that issue is to HTMLStripCharFilter.&lt;/p&gt;</comment>
                            <comment id="12848542" author="dsmiley" created="Tue, 23 Mar 2010 04:33:02 +0000"  >&lt;p&gt;I was just reading this whole thread and &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1394&quot; title=&quot;HTML stripper is splitting tokens&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1394&quot;&gt;&lt;del&gt;SOLR-1394&lt;/del&gt;&lt;/a&gt;.  It seems this issue can be closed as a duplicate of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1394&quot; title=&quot;HTML stripper is splitting tokens&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1394&quot;&gt;&lt;del&gt;SOLR-1394&lt;/del&gt;&lt;/a&gt;.  No?&lt;/p&gt;</comment>
                            <comment id="13027629" author="mpdude" created="Mon, 2 May 2011 13:00:05 +0100"  >&lt;p&gt;I don&apos;t think it&apos;s a duplicate and the issue is still unresolved at least in regard to &lt;a href=&quot;#comment-12625835&quot;&gt;comment-12625835&lt;/a&gt; and the 1.4.1 release.&lt;/p&gt;

&lt;p&gt;The input string &quot;&amp;lt;??&amp;gt;xx yy xx&quot; will have the start offsets for xx, yy and xx at 3, 6 and 9 respectively and is off by one.&lt;/p&gt;

&lt;p&gt;&quot;&amp;lt;? ?&amp;gt;&amp;lt;? ?&amp;gt;xx yy xx&quot; &lt;span class=&quot;error&quot;&gt;&amp;#91;spaces added between question marks for JIRA display&amp;#93;&lt;/span&gt; will even have 6, 9 and 12, that is, every &quot;&amp;lt;??&amp;gt;&quot; (as a special &quot;degenerated&quot; kind of XML PI) will shift the offset by one.&lt;/p&gt;</comment>
                            <comment id="13192226" author="steve_rowe" created="Tue, 24 Jan 2012 15:55:48 +0000"  >&lt;p&gt;Fixed by &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3690&quot; title=&quot;JFlex-based HTMLStripCharFilter replacement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-3690&quot;&gt;&lt;del&gt;LUCENE-3690&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12353729">SOLR-57</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310051">
                    <name>Supercedes</name>
                                                                <inwardlinks description="is superceded by">
                                        <issuelink>
            <issuekey id="12538152">LUCENE-3690</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12372453" name="HTMLStripReaderTest.java" size="2138" author="gsingers" created="Thu, 3 Jan 2008 14:15:27 +0000"/>
                            <attachment id="12375947" name="HtmlStripReaderTestXmlProcessing.patch" size="1931" author="ryguasu" created="Tue, 19 Feb 2008 17:49:00 +0000"/>
                            <attachment id="12375616" name="HtmlStripReaderTestXmlProcessing.patch" size="1211" author="ryguasu" created="Thu, 14 Feb 2008 18:37:35 +0000"/>
                            <attachment id="12372792" name="SOLR-42.patch" size="18629" author="gsingers" created="Wed, 9 Jan 2008 12:50:11 +0000"/>
                            <attachment id="12372643" name="SOLR-42.patch" size="2607" author="gsingers" created="Mon, 7 Jan 2008 19:21:24 +0000"/>
                            <attachment id="12372562" name="SOLR-42.patch" size="15422" author="gsingers" created="Sat, 5 Jan 2008 13:55:00 +0000"/>
                            <attachment id="12372455" name="SOLR-42.patch" size="5592" author="gsingers" created="Thu, 3 Jan 2008 16:20:52 +0000"/>
                            <attachment id="12375617" name="TokenPrinter.java" size="2017" author="ryguasu" created="Thu, 14 Feb 2008 18:37:35 +0000"/>
                            <attachment id="12372537" name="htmlStripReaderTest.html" size="13592" author="gsingers" created="Fri, 4 Jan 2008 23:31:18 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 4 Jan 2007 22:21:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7537</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxtr3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21139</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>