<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:23:43 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-807/SOLR-807.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-807] UUIDField type cannot be recognized when wt=javabin is used</title>
                <link>https://issues.apache.org/jira/browse/SOLR-807</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;I&apos;m using UUID via Solrj in my project. When I use javabin (default), I got:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java.util.UUID:&lt;/b&gt; 391e3214-4f8e-4abd-aa6b-4f12be79534f&lt;/p&gt;

&lt;p&gt;as the uuid value. But if I use xml, I got:&lt;/p&gt;

&lt;p&gt;391e3214-4f8e-4abd-aa6b-4f12be79534f&lt;/p&gt;

&lt;p&gt;I think the both of them should return same string.&lt;/p&gt;

&lt;p&gt;program for reproducing the problem:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    CommonsHttpSolrServer server = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CommonsHttpSolrServer( &lt;span class=&quot;code-quote&quot;&gt;&quot;http:&lt;span class=&quot;code-comment&quot;&gt;//localhost:8983/solr&quot;&lt;/span&gt; );
&lt;/span&gt;    SolrQuery query = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SolrQuery().setQuery( &lt;span class=&quot;code-quote&quot;&gt;&quot;*:*&quot;&lt;/span&gt; );
    &lt;span class=&quot;code-comment&quot;&gt;//server.setParser( &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; XMLResponseParser() );   // uncomment &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; wt=xml
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println( &lt;span class=&quot;code-quote&quot;&gt;&quot;===== &quot;&lt;/span&gt; + server.getParser().getClass().getSimpleName() + &lt;span class=&quot;code-quote&quot;&gt;&quot; =====&quot;&lt;/span&gt; );
    QueryResponse rsp = server.query( query );
    SolrDocumentList docs = rsp.getResults();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;( SolrDocument doc : docs ){
      &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; id = doc.getFieldValue( &lt;span class=&quot;code-quote&quot;&gt;&quot;id&quot;&lt;/span&gt; );
      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println( &lt;span class=&quot;code-quote&quot;&gt;&quot;type = &quot;&lt;/span&gt; + id.getClass().getName() + &lt;span class=&quot;code-quote&quot;&gt;&quot;, id = &quot;&lt;/span&gt; + id );
      &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; timestamp = doc.getFieldValue( &lt;span class=&quot;code-quote&quot;&gt;&quot;timestamp&quot;&lt;/span&gt; );
      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println( &lt;span class=&quot;code-quote&quot;&gt;&quot;type = &quot;&lt;/span&gt; + timestamp.getClass().getName() + &lt;span class=&quot;code-quote&quot;&gt;&quot;, timestamp = &quot;&lt;/span&gt; + timestamp );
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;result for wt=javabin&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;javabin&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;===== BinaryResponseParser =====
type = java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, id = java.util.UUID:391e3214-4f8e-4abd-aa6b-4f12be79534f
type = java.util.Date, timestamp = Wed Oct 15 00:20:50 JST 2008
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;result for wt=xml&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;xml&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;===== XMLResponseParser =====
type = java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, id = 391e3214-4f8e-4abd-aa6b-4f12be79534f
type = java.util.Date, timestamp = Wed Oct 15 00:20:50 JST 2008
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12406407">SOLR-807</key>
            <summary>UUIDField type cannot be recognized when wt=javabin is used</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shalinmangar">Shalin Shekhar Mangar</assignee>
                                    <reporter username="koji">Koji Sekiguchi</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Oct 2008 17:57:49 +0100</created>
                <updated>Tue, 10 Nov 2009 15:51:48 +0000</updated>
                            <resolved>Sun, 14 Dec 2008 17:38:51 +0000</resolved>
                                    <version>1.3</version>
                                    <fixVersion>1.4</fixVersion>
                                    <component>clients - java</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12639716" author="noble.paul" created="Wed, 15 Oct 2008 05:27:16 +0100"  >&lt;p&gt;is java.util.UUID a supported type in Lucene? &lt;/p&gt;

&lt;p&gt;Then let us follow what XML format is doing. &lt;/p&gt;</comment>
                            <comment id="12639722" author="koji" created="Wed, 15 Oct 2008 05:50:13 +0100"  >&lt;blockquote&gt;&lt;p&gt;is java.util.UUID a supported type in Lucene?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No. Date is also NOT a supported type in Lucene, but it seems that Date is recognized in BinaryResponseWriter...&lt;/p&gt;</comment>
                            <comment id="12639732" author="noble.paul" created="Wed, 15 Oct 2008 06:59:00 +0100"  >&lt;p&gt;I guess there is a &lt;tt&gt;org.apache.solr.schema.DateField&lt;/tt&gt;  which produces &lt;tt&gt;java.util.Date&lt;/tt&gt; type. &lt;/p&gt;

&lt;p&gt;All other types are written down as&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
val.getClass().getName() + &apos;:&apos; + val.toString()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I realize that there is a &lt;tt&gt;org.apache.solr.schema.UUIDField&lt;/tt&gt; also &lt;/p&gt;

&lt;p&gt;Should we make an Exception for UUID or just change the code to omit the &lt;tt&gt;val.getClass().getName()&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;I guess that is better.&lt;/p&gt;

</comment>
                            <comment id="12639930" author="hossman" created="Wed, 15 Oct 2008 19:49:56 +0100"  >&lt;p&gt;Change which code?&lt;/p&gt;

&lt;p&gt;both BinaryResponseWriter+NamedListCodec and the XMLWriter classes use &quot;val.getClass().getName() + &apos;:&apos; + val.toString()&quot; to outbut objects on on the list of legal things that can be in a SolrQueryResponse...&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;http://lucene.apache.org/solr/api/org/apache/solr/request/SolrQueryResponse.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://lucene.apache.org/solr/api/org/apache/solr/request/SolrQueryResponse.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;I&apos;m not very familiar with the way either SolrJ or the BinaryResponseWriter/NamedListCodec stuff works, but I don&apos;t think this is relaly about how either ResponseWriter deals with &quot;objects&quot; added directly to the response ... it seems to relate specifically to how BinaryResponseWriter deals with writing field values of Documents ... the text/xml based writers use FieldType.write(...) and let the FieldType decide how to best render itself, while the NameListCodec seems to make it&apos;s own decisions based on FieldType.toObject (although i&apos;m not sure where toObject is getting called &amp;#8211; but that&apos;s the only reason i can think of why you would encounter a java.util.UUID object directly in a SolrDocument)&lt;/p&gt;

&lt;p&gt;This doesn&apos;t seem like a SolrJ in so much as a larger issue with the way the NamedListCodec works ... if it&apos;s not going to delegate to the FieldType to decide how to &quot;write&quot; a non standard object, then shouldn&apos;t it at least recognize and automatically extract that class type prefix info when it &quot;reads&quot; a non standard object?&lt;/p&gt;</comment>
                            <comment id="12640057" author="noble.paul" created="Thu, 16 Oct 2008 05:25:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;Change which code? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;NamedListCodec&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;while the NameListCodec seems to make it&apos;s own decisions based on FieldType.toObject..&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;you are right. NamedListCodec needs to handle Objects differently because , that is the only way it can write out values efficiently. There are two ways to address the issue.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Make UUID a known type . I mean add a new type to NamedListCodec. This means bumping up the version of javabin format say version=2. I guess we should not make this change unless we wish to make some more important changes.&lt;/li&gt;
	&lt;li&gt;Write down UUID as a String and treat it like String (of course w/o the classname). XMLWriter is anyway doing this . This change will be backward compatible and we may not need to bump up the version.&lt;/li&gt;
&lt;/ul&gt;






</comment>
                            <comment id="12640491" author="noble.paul" created="Fri, 17 Oct 2008 11:51:09 +0100"  >&lt;p&gt;write UUID as a String&lt;/p&gt;</comment>
                            <comment id="12640700" author="hossman" created="Sat, 18 Oct 2008 00:26:45 +0100"  >
&lt;blockquote&gt;&lt;p&gt;Make UUID a known type . I mean add a new type to NamedListCodec. This means bumping up the version of javabin format say version=2. I guess we should not make this change unless we wish to make some more important changes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;but the crux of the issue isn&apos;t specific to UUIDField ... any custom FieldType people might have is going to encounter this same problem.&lt;/p&gt;

&lt;p&gt;If a RequestHandler adds an arbitrary object (not on the legal list) directly to the response, then the ResponseWriter is certainly at liberty to output that however it makes sense &amp;#8211; for both XmlResponseWriter and BinaryResponseWriter that&apos;s going to result in a java.util.UUID object, or a chrish.custom.MyBean object, named &apos;val&apos; being translated into a string via...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;val.getClass().getName() + &apos;:&apos; + val.toString()&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...that&apos;s fine.  But the problem seems to be specifically related to how the BinaryResponseWriter deals with writing out field values of Documents &amp;#8211; the FieldType should be used to decide how to render field values.  &lt;/p&gt;

&lt;p&gt;If we want to have optimized code in the NamedListCodec for efficiently dealing with the really commons types that&apos;s great, but that fallback case, for dealing with FieldTypes we haven&apos;t optimized &amp;#8211; that needs to result in the client getting some object which isn&apos;t just &lt;tt&gt;val.getClass().getName() + &apos;:&apos; + val.toString()&lt;/tt&gt; ... at a minimum it should be &lt;tt&gt;val.toString()&lt;/tt&gt; , but ideally the FieldType should be able to control of how clients ultimately get the value of that field.  (They don&apos;t necessarily need to be able to control how it should go over the wire, but they should be able to control what the end result is)&lt;/p&gt;

&lt;p&gt;Let&apos;s fix the problem (BinaryResponseWriter and field values of arbitrary FieldTypes) and not the symptom (UUIDFIeld)&lt;/p&gt;

&lt;p&gt;How exactly we do this ... i&apos;m not sure.  Based on my limited understanding of the existing code my rough suggestions...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;NamedListCodec could have pass a special TextResponseWriter subclass to the FieldType&apos;s write(TextResponseWriter,...) method, and that TextResponseWriter could take the same special action NamedListCodec currently takes to efficiently serialize all of the datatypes in the varies write*(..) methods&lt;/li&gt;
	&lt;li&gt;NamedListCodec maintains it&apos;s current list of efficient encodings for common types, but uses FieldType.toExternal() to generate a String to send over the wire (instead of using toObject) in non-common cases.&lt;/li&gt;
	&lt;li&gt;we add a new &quot;&lt;tt&gt;toSimpleObject(Fieldable)&lt;/tt&gt;&quot; method to FieldType, which would be documented to say that it must return an object of the &quot;legal&quot; types for a response ... the default implementation would call toObject(Fieldable), test the result with a few instanceOf checks and return val.toString() if it doesn&apos;t pass any of them. and start using this method instead of toObject(Fieldable) when dealing with DocLists.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;thoughts?&lt;/p&gt;







</comment>
                            <comment id="12640748" author="noble.paul" created="Sat, 18 Oct 2008 06:14:56 +0100"  >&lt;blockquote&gt;&lt;p&gt;NamedListCodec could have pass a special TextResponseWriter...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not a godd idea. On the client side it may not know how to deserialize it. Moreover , Binary format is very fragile and it can break the output because each bit is significant. Every byte that is written out must use NamedListCodec.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NamedListCodec maintains it&apos;s current list of efficient encodings for common types, but uses FieldType.toExternal() to generate a String to send over the wire (instead of using toObject) in non-common cases.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;make sense. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;we add a new &quot;toSimpleObject(Fieldable)&quot; method to FieldType,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Problem is not with writing out. How to deserialize it at the other end of the pipe. &lt;/p&gt;

&lt;p&gt;String representation is the most convenient form for everyone. Even with xml we write out everything as a String &amp;lt;str&amp;gt;&amp;lt;/str&amp;gt;, just that the the content format of the string type is decided by the FieldType. If toString() is implemented properly by the Object it should be fine.&lt;/p&gt;

&lt;p&gt;We may not be able to support all the user defined types. But , we must be able to support all the types which we know of.&lt;/p&gt;</comment>
                            <comment id="12640775" author="noble.paul" created="Sat, 18 Oct 2008 16:01:22 +0100"  >&lt;p&gt;while writing out  a DocList resolve any unknown Object to String&lt;/p&gt;</comment>
                            <comment id="12648535" author="shalinmangar" created="Tue, 18 Nov 2008 09:08:41 +0000"  >&lt;ol&gt;
	&lt;li&gt;Added a set of FieldTypes supported by NamedListCodec (the ones that we know how to read).&lt;/li&gt;
	&lt;li&gt;BinaryResponseWriter writes fieldType.toExternal if it is not a supported type, otherwise it writes fieldType.toObject&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Note &amp;#8211; UUID is not a supported type so it is written as toExternal.&lt;/p&gt;

&lt;p&gt;Need to add a test for this.&lt;/p&gt;</comment>
                            <comment id="12655139" author="shalinmangar" created="Wed, 10 Dec 2008 08:32:06 +0000"  >&lt;p&gt;Updated with a test to verify the encoding/decoding of UUID with the changes to BinaryResponseWriter. All tests pass.&lt;/p&gt;

&lt;p&gt;With this change, we make a lookup on a HashSet for each field to be written out. Someone who knows more about the javabin format should take a look. Yonik or Noble?&lt;/p&gt;</comment>
                            <comment id="12655523" author="noble.paul" created="Thu, 11 Dec 2008 05:42:20 +0000"  >&lt;p&gt;This does not impact the &apos;javabin&apos;  format in any way. Just that the objects passed to the NamedListCodec will be different if they are not &apos;supported&apos;&lt;/p&gt;

&lt;p&gt;There is a small overhead of a HashSet lookup for each object . (which is trivial I guess) &lt;/p&gt;</comment>
                            <comment id="12656418" author="shalinmangar" created="Sun, 14 Dec 2008 17:38:50 +0000"  >&lt;p&gt;Committed revision 726502.&lt;/p&gt;

&lt;p&gt;Thanks Koji and Noble!&lt;/p&gt;</comment>
                            <comment id="12775550" author="gsingers" created="Tue, 10 Nov 2009 15:51:48 +0000"  >&lt;p&gt;Bulk close for Solr 1.4&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12406560">SOLR-810</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12395722" name="SOLR-807.patch" size="10373" author="shalinmangar" created="Wed, 10 Dec 2008 08:32:06 +0000"/>
                            <attachment id="12394150" name="SOLR-807.patch" size="7384" author="shalinmangar" created="Tue, 18 Nov 2008 09:08:40 +0000"/>
                            <attachment id="12392415" name="SOLR-807.patch" size="2800" author="noble.paul" created="Sat, 18 Oct 2008 16:01:22 +0100"/>
                            <attachment id="12392341" name="SOLR-807.patch" size="602" author="noble.paul" created="Fri, 17 Oct 2008 11:51:09 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 15 Oct 2008 04:27:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6816</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxp3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20384</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>