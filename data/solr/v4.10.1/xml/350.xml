<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:23:38 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-350/SOLR-350.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-350] Manage Multiple SolrCores</title>
                <link>https://issues.apache.org/jira/browse/SOLR-350</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-215&quot; title=&quot;Multiple Solr Cores - remove static singleton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-215&quot;&gt;&lt;del&gt;SOLR-215&lt;/del&gt;&lt;/a&gt;, we enabled support for more then one SolrCore - but there is no way to use them yet.&lt;/p&gt;

&lt;p&gt;We need to make some interface to manage, register, modify avaliable SolrCores&lt;/p&gt;</description>
                <environment></environment>
        <key id="12377827">SOLR-350</key>
            <summary>Manage Multiple SolrCores</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ryantxu">Ryan McKinley</assignee>
                                    <reporter username="ryantxu">Ryan McKinley</reporter>
                        <labels>
                    </labels>
                <created>Sat, 8 Sep 2007 20:15:02 +0100</created>
                <updated>Fri, 10 May 2013 11:40:10 +0100</updated>
                            <resolved>Sun, 25 May 2008 04:19:08 +0100</resolved>
                                    <version>1.3</version>
                                    <fixVersion>1.3</fixVersion>
                                        <due></due>
                            <votes>2</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12526201" author="ryantxu" created="Mon, 10 Sep 2007 18:41:35 +0100"  >&lt;p&gt;Here is a quick sketch of what I think the multicore management/interface should look like.  &lt;/p&gt;

&lt;p&gt;Essentially, it works like this:&lt;/p&gt;

&lt;p&gt;A.  If you do nothing, solr keeps working as it is - it has a little extra checking at startup and each requests only makes an extra if( singlecore != null ) call&lt;/p&gt;

&lt;p&gt;B. If you put a &quot;multicore.xml&quot; file in the startup instanceDir, a multicore registry will be initialized.  Each call to the SolrDispatchFilter will select the core (from a synchronized map).  Using the default core does not require a synchronized map lookup.&lt;/p&gt;

&lt;p&gt;In the attached patch, you select the core from the path:  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://host:port/context/handlerpath&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host:port/context/handlerpath&lt;/a&gt; &amp;#8211; uses default core&lt;br/&gt;
&lt;a href=&quot;http://host:port/context/@core0/handlerpath&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host:port/context/@core0/handlerpath&lt;/a&gt; &amp;#8211; uses core0&lt;br/&gt;
&lt;a href=&quot;http://host:port/context/@core1/handlerpath&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host:port/context/@core1/handlerpath&lt;/a&gt; &amp;#8211; uses core1&lt;/p&gt;

&lt;p&gt;This assumes handler names will not start with &apos;@&apos;  (perhaps we should make it a requirement that handler names don&apos;t start with any punctuation?  this would leave open special characters in the future?)&lt;/p&gt;

&lt;p&gt;This still needs a servlet or request handler to manage core manipulation (load, restart, etc).  Since it handles functions across handlers, it should probably be a servlet, but that makes it difficult to use the wt=json/xml stuff.&lt;/p&gt;

&lt;p&gt;NOTE &amp;#8211; the core management stuff is untested, I&apos;m attaching it now because I don&apos;t have much time to work on it and hopefully someone else can carry on.  &lt;/p&gt;

&lt;p&gt;Parts of this patch clean up things from &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-215&quot; title=&quot;Multiple Solr Cores - remove static singleton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-215&quot;&gt;&lt;del&gt;SOLR-215&lt;/del&gt;&lt;/a&gt;.  Unless there is much movement on this issue, I&apos;d like to commit that part in a few days.&lt;/p&gt;
</comment>
                            <comment id="12526207" author="yseeley@gmail.com" created="Mon, 10 Sep 2007 18:59:11 +0100"  >&lt;p&gt;I assume core management stuff needs to be persistent.... if you add a core via the REST api, and the server restarts, you want it to still be there.  So should multicore.xml be changed and written back in this case?&lt;/p&gt;</comment>
                            <comment id="12526210" author="ryantxu" created="Mon, 10 Sep 2007 19:24:11 +0100"  >&lt;p&gt;Yes, persistence seems like a good option.  &lt;/p&gt;

&lt;p&gt;For the case where you are updating a live schema it may not make sense though.&lt;br/&gt;
 tempCore = load new core&lt;br/&gt;
 defaultCore = tempCore  &lt;br/&gt;
 (close old core when all requests have finished)&lt;/p&gt;</comment>
                            <comment id="12528372" author="waltersbox" created="Tue, 18 Sep 2007 13:35:25 +0100"  >&lt;p&gt;In my system (netbeans5.5/java1.6 on winxp), it seems to me that it look for multicore.xml in 2 places, both in solr/multicore.xml and in solr/conf/multicore.xml. (using the example dir, Multicore look for multicore.xml in solr/, while Dispatcher in solr/conf)&lt;/p&gt;

&lt;p&gt;In MultiCore.java, a getCores() &lt;/p&gt;
{ return cores.keySet(); }
&lt;p&gt; would allow to retrieve all the cores registered in the server. &lt;br/&gt;
This would allow an handler, for example, to dynamically retrieve all the cores (at least by their names) currently registered (&lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-215&quot; title=&quot;Multiple Solr Cores - remove static singleton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-215&quot;&gt;&lt;del&gt;SOLR-215&lt;/del&gt;&lt;/a&gt; had this).&lt;/p&gt;

&lt;p&gt;How replication will work with multicores? Every core will have different bin dirs (allowing different settings for each one), or replication binaries will replicate all cores (making replication much easier)?&lt;/p&gt;

&lt;p&gt;Hope this patch get committed soon.&lt;br/&gt;
Have a nice day.&lt;/p&gt;</comment>
                            <comment id="12529628" author="stuhood" created="Sat, 22 Sep 2007 08:31:24 +0100"  >&lt;p&gt;I feel like the suggested implementation is a re-imagining of the Tomcat Manager REST api (&lt;a href=&quot;http://tomcat.apache.org/tomcat-6.0-doc/manager-howto.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://tomcat.apache.org/tomcat-6.0-doc/manager-howto.html&lt;/a&gt;). The main reason I like the idea of multiple cores in the same instance is to provide tighter integration between them: more like a conventional relational database, with multiple tables that have independent schemas (where Solr core == SQL table). Otherwise, having your servlet container managing the contexts just makes more sense, since that is what it is built for.&lt;/p&gt;

&lt;p&gt;Also, I think the core should be a parameter of the query, so that there is the possibility of querying multiple cores simultaneously. Having a top-level controller managing dispatch to the cores opens up all kinds of possibilities for future expansion, (such as joins between indexes?) and it would make things like federated search much more elegant. &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-303&quot; title=&quot;Distributed Search over HTTP&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-303&quot;&gt;&lt;del&gt;SOLR-303&lt;/del&gt;&lt;/a&gt; already has a &quot;shards&quot; parameter with the same idea behind it: just prefix local cores with the @ symbol, and you are good to go.&lt;/p&gt;

&lt;p&gt;Loving the potential here!&lt;/p&gt;</comment>
                            <comment id="12529704" author="ryantxu" created="Sat, 22 Sep 2007 22:56:17 +0100"  >&lt;p&gt;Updated patch to work with trunk &amp;#8211; in rev 578507, I added the core changes to trunk so this patch can focus on the multicore interface.&lt;/p&gt;

&lt;p&gt;Stu - I like the idea of looking to the existing API for guidance.  That seems smart.&lt;/p&gt;

&lt;p&gt;Again, I&apos;m not working on this actively, but want to make sure it is easy for someone to pick up.&lt;/p&gt;</comment>
                            <comment id="12531917" author="ryantxu" created="Tue, 2 Oct 2007 22:25:27 +0100"  >&lt;p&gt;more real example.&lt;/p&gt;

&lt;p&gt;This looks for a &apos;multicore.xml&apos; in the instancedir and registers different cores if it is present...&lt;/p&gt;</comment>
                            <comment id="12539352" author="dsteigerwald" created="Thu, 1 Nov 2007 12:50:49 +0000"  >&lt;p&gt;Any chance there&apos;s going to be support to view the admin interface for each core?  Doesn&apos;t seem like it&apos;s possible currently.&lt;/p&gt;

&lt;p&gt;Also, the admin interface you do see is for the last core loaded and not the default core in the configuration.&lt;/p&gt;</comment>
                            <comment id="12542365" author="henrib" created="Wed, 14 Nov 2007 08:51:54 +0000"  >&lt;p&gt;Ryan - Should solr-409 (aka class loader sharing) become a dependency of this issue and if so what kind of &quot;link&quot; should be used to refer to it?&lt;br/&gt;
Or should I fold solr-409 in solr-350 (closing solr-409 in the process)? The &quot;new&quot; behavior does not break the current one.&lt;/p&gt;</comment>
                            <comment id="12542447" author="ryantxu" created="Wed, 14 Nov 2007 12:58:34 +0000"  >&lt;p&gt;For simplicity, I think adding 409 to 350 is a good idea.  I have not looked at 409 yet, but I like Walters suggestion to optionally have a single shared lib across all cores (rather then making each lib dir optionally shared)&lt;/p&gt;

&lt;p&gt;&amp;lt;multicore enabled=&quot;true&quot; adminpath=&quot;/admin/multicore&quot; persistent=&quot;true&quot; sharedLibDir=&quot;lib&quot;&amp;gt;&lt;br/&gt;
   &amp;lt;core name=&quot;core0&quot; instanceDir=&quot;core0&quot; default=&quot;true&quot;/&amp;gt;&lt;br/&gt;
   &amp;lt;core name=&quot;core1&quot; instanceDir=&quot;core1&quot; /&amp;gt;&lt;br/&gt;
&amp;lt;/multicore&amp;gt;&lt;/p&gt;</comment>
                            <comment id="12542520" author="henrib" created="Wed, 14 Nov 2007 17:35:30 +0000"  >
&lt;p&gt;Walter&apos;s suggestion is already in solr-409 (with libDir attribute name).&lt;/p&gt;

&lt;p&gt;I could not verify everything and wanted to be safe so I loaded an updated version of solr-350_409.patch in solr-409.&lt;br/&gt;
There are some improvements in the admin webapp that is now multi core aware. (ie: you can switch from core to core).&lt;br/&gt;
I also made a small change in Config.java; locateInstanceDir seems to look for sol.solr.home as an environment variable.&lt;/p&gt;

&lt;p&gt;I&apos;ve quickly checked the deployment against the example starting with: java -Dsolr.home=`pwd`/multicore -jar start.jar .&lt;br/&gt;
As soon as I&apos;m more confident, I&apos;ll push the patch over solr-350.&lt;/p&gt;</comment>
                            <comment id="12550448" author="henrib" created="Tue, 11 Dec 2007 13:58:53 +0000"  >&lt;p&gt;core can be set as a request parameter ( ?core=corename versus /@corename)&lt;/p&gt;</comment>
                            <comment id="12550454" author="henrib" created="Tue, 11 Dec 2007 14:27:48 +0000"  >&lt;p&gt;use a request attribute to pass the core in all pages&lt;/p&gt;</comment>
                            <comment id="12551188" author="ryantxu" created="Thu, 13 Dec 2007 01:32:52 +0000"  >&lt;p&gt;patch to get rid of the @corename syntax and force things into /corename/handler &lt;/p&gt;

&lt;p&gt;Adds &apos;RENAME&apos; action to rename a core &amp;#8211; &lt;/p&gt;

&lt;p&gt;see:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/purpose-of-MultiCore--22default-22---to14268755.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/purpose-of-MultiCore--22default-22---to14268755.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/multicore-and-admin-pages--to14268867.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/multicore-and-admin-pages--to14268867.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This also got rid of the ?core=name syntax for /admin, and makes it work for:&lt;br/&gt;
/corename/admin/xxx.jsp&lt;/p&gt;</comment>
                            <comment id="12553696" author="henrib" created="Thu, 20 Dec 2007 15:29:06 +0000"  >&lt;p&gt;updated to implement &apos;alias&apos; (should be considered draft since there aren&apos;t specific unit tests associated yet);&lt;br/&gt;
implements persistence (added an XmlWriter that might be revisited); all operations that modify the multicore state will rewrite the multicore.xml &lt;/p&gt;

&lt;p&gt;Alias feature:&lt;br/&gt;
0 - Name and aliases reside in a common identifier space; one identifier uniquely determines a core (can&apos;t have the identifier &apos;core&apos; used a a name to point to coreA and as an alias to point to coreB)&lt;br/&gt;
1 - One core has one unique immutable name (rename command has been neutralized)&lt;br/&gt;
2 - One core may have many aliases&lt;br/&gt;
3 - There are only 2 admin commands related to aliases:&lt;br/&gt;
   3.1 - alias(core, alias): adds an alias to a core, overriding any existing alias but fails to override a core name.&lt;br/&gt;
   3.2 - unalias(str); if str is a core name identifier, all its aliases get deleted, if str is an alias identifer only that alias gets deleted.&lt;br/&gt;
4 - Core addressing through URLs/API can use either name or alias (although using alias is best practice for common &lt;del&gt;aka non-admin&lt;/del&gt; operations)&lt;/p&gt;</comment>
                            <comment id="12553750" author="henrib" created="Thu, 20 Dec 2007 18:57:01 +0000"  >&lt;p&gt;simplified code; prepared for createCore&lt;/p&gt;</comment>
                            <comment id="12553754" author="ryantxu" created="Thu, 20 Dec 2007 19:11:19 +0000"  >&lt;p&gt;I have not looked at the recent patches yet... but I&apos;m still wondering if there is any value to &quot;alias&quot; if we have a SWAP command?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/purpose-of-MultiCore--22default-22---to14268755.html#a14427376&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/purpose-of-MultiCore--22default-22---to14268755.html#a14427376&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aliasing has me nervous about the maintining a unique ID and a name - it seems to just lead to a management/clarity problem.&lt;/p&gt;</comment>
                            <comment id="12553798" author="henrib" created="Thu, 20 Dec 2007 22:03:34 +0000"  >&lt;p&gt;backup of my local state: added untested code (create core dynamically), still some thinking to be done (using CoreDescriptor as vehicle for multicore serialization in&amp;amp;out?)&lt;/p&gt;

&lt;p&gt;As for the added complexity versus the swap command, I believe the potential functional benefits make it worth it. &lt;br/&gt;
Using the URL (and not parameters) to carry information is good practice and seems like an appropriate rationale; for instance, using the &apos;alias&apos; through the URL to map query behaviors (be it, filtered queries, query parsers, etc) would open to easy ways to fit per-user/usage profiles behaviors.&lt;/p&gt;

&lt;p&gt;And I think we can be informative enough on misconfiguration so users know exactly where the error sit.&lt;/p&gt;</comment>
                            <comment id="12553809" author="ryantxu" created="Thu, 20 Dec 2007 22:43:15 +0000"  >&lt;p&gt;&amp;gt; (be it, filtered queries, query parsers, etc) would open to easy ways to fit per-user/usage profiles behaviors.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;Are you saying there is a big win if you can get stats on:&lt;br/&gt;
 &lt;a href=&quot;http://host/henri/select&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host/henri/select&lt;/a&gt; vs &lt;a href=&quot;http://host/ryan/select&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host/ryan/select&lt;/a&gt;&lt;br/&gt;
when &apos;henri&apos; and &apos;ryan&apos; are both aliased to &apos;core1&apos;?  Perhaps?  but mod_rewrite can do that and much much more (if you really wanted to). &lt;/p&gt;

&lt;p&gt;With the alias model, how would you reindex a running core and end up with an identical setup at the end?  Unless I&apos;m missing something, the new core would need a different name (id), and there would be a brief moment where the main core was not avaliable&lt;/p&gt;

&lt;p&gt;consider:&lt;br/&gt;
 &amp;lt;core name=&quot;core0&quot; alias=&quot;main&quot; ... /&amp;gt;&lt;/p&gt;

&lt;p&gt;and all queries come to solr as:&lt;br/&gt;
 &lt;a href=&quot;http://host/solr/main/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host/solr/main/&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;I would have to run:&lt;br/&gt;
 1. LOAD core1 using same config as core0&lt;br/&gt;
 2. send add commands to core1 &lt;br/&gt;
 3. UNALIAS &quot;main&quot; from core0&lt;br/&gt;
 (now nothing is available at /main)&lt;br/&gt;
 4. ALIAS &quot;main&quot; to core1&lt;br/&gt;
 5. UNLOAD core0&lt;br/&gt;
 (now the persisted configuration is different then when we started but should not be)&lt;/p&gt;</comment>
                            <comment id="12553882" author="henrib" created="Fri, 21 Dec 2007 06:26:58 +0000"  >&lt;p&gt;If we are making a new index - a new index version-, it can mean the schema and the config can change; I may change my analysis chain or schema but also warming queries, cache set up, etc. The config is thus not necessarily the same.&lt;br/&gt;
I may also want to have the new setup tested by a group of users before I make it available to the whole population;  &lt;a href=&quot;http://host/productionl&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host/productionl&lt;/a&gt; versus &lt;a href=&quot;http://host/stage&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host/stage&lt;/a&gt;.  I might even have automated tests that verify that some queries do return some expected documents.&lt;br/&gt;
If we were to use the &apos;alias&apos; to map behaviors, it seems more convenient to declare those within Solr than anywhere else; describing that &lt;a href=&quot;http://host/ryan/select&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://host/ryan/select&lt;/a&gt; queries on core main with an automated fq author=&apos;ryan&apos; should not force mod-rewrite usage imho.&lt;br/&gt;
Finally, the &apos;alias&apos; command as it stands, allows to redefine an alias (without havng to unalias first) so the sequence would be:&lt;br/&gt;
(considering &amp;lt;core name=&quot;core,0&quot; alias=&quot;main&quot; ... /&amp;gt;)&lt;br/&gt;
LOAD core,1  // which could even be aliased as &apos;stage&apos; at this time&lt;br/&gt;
send adds to core,1 // when done, could run verifications on &apos;stage&apos;&lt;br/&gt;
ALIAS core,1 main // &apos;swap&apos; so to speak, overwrites previous &apos;main&apos; alias&lt;br/&gt;
UNLOAD core,0&lt;/p&gt;</comment>
                            <comment id="12553885" author="ryantxu" created="Fri, 21 Dec 2007 06:57:18 +0000"  >&lt;p&gt;&amp;gt; If we were to use the &apos;alias&apos; to map behaviors, &lt;/p&gt;

&lt;p&gt;how would an alias map different behaviors?  Alias just offer multiple ways to access the &lt;b&gt;same&lt;/b&gt; core and the same behavior.  RequestHandlers don&apos;t know what path requested them.&lt;/p&gt;

&lt;p&gt;My point about mod_rewrite was referring to the use case you referred to:  making the log files easier to parse per user.  &lt;/p&gt;

&lt;p&gt;Re production and stage, why do you need aliasing for that?  each core has name - when &apos;stage&apos; is ready &amp;#8211; it can swap with &apos;production&apos;  &lt;/p&gt;

&lt;p&gt;&amp;gt; Finally, the &apos;alias&apos; command as it stands, allows to redefine an alias (without havng to unalias first) so the sequence would be:&lt;br/&gt;
&amp;gt; (considering &amp;lt;core name=&quot;core,0&quot; alias=&quot;main&quot; ... /&amp;gt;)&lt;br/&gt;
&amp;gt; LOAD core,1  // which could even be aliased as &apos;stage&apos; at this time&lt;br/&gt;
&amp;gt; send adds to core,1 // when done, could run verifications on &apos;stage&apos;&lt;br/&gt;
&amp;gt; ALIAS core,1 main // &apos;swap&apos; so to speak, overwrites previous &apos;main&apos; alias&lt;br/&gt;
&amp;gt; UNLOAD core,0&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;so if you serialize at the beginning, you have:&lt;br/&gt;
&amp;lt;core name=&quot;core,0&quot; alias=&quot;main&quot; ... /&amp;gt;&lt;br/&gt;
at the end you have:&lt;br/&gt;
&amp;lt;core name=&quot;core,1&quot; alias=&quot;main&quot; ... /&amp;gt;&lt;/p&gt;

&lt;p&gt;if you run that every hour, do you end up with &quot;core,1000&quot; or switch between them?  This would require you ask MultiCore, what i the &apos;id&apos; for the core sitting at &apos;main&apos; before you can operate on it.  Why add this complexity?&lt;/p&gt;</comment>
                            <comment id="12553922" author="henrib" created="Fri, 21 Dec 2007 10:56:08 +0000"  >&lt;p&gt;RequestHandlers do not today know the path that requested them;I was merely proposing a possible functional extension through usage of aliases.&lt;br/&gt;
As for core names, being able to carry which version/revision of the config/schema is in use is imho not complex and useful to many (using svn/cvs/webdav to store config/schema)&lt;br/&gt;
Anyway, the &apos;aliases&apos; idea is definitely not something you did find useful enough from the beginning and I&apos;m obviously failing to make the case for it. Alas.&lt;/p&gt;</comment>
                            <comment id="12553983" author="ryantxu" created="Fri, 21 Dec 2007 18:23:27 +0000"  >
&lt;p&gt;&amp;gt; RequestHandlers do not today know the path that requested them;&lt;/p&gt;

&lt;p&gt;aaah &amp;#8211; so if we need it later, we could add aliasing then?&lt;/p&gt;


&lt;p&gt;&amp;gt; is imho not complex and useful to many (using svn/cvs/webdav to store config/schema)&lt;/p&gt;

&lt;p&gt;How does aliasing change this.  What can you do that you could not do without it?  I store my config/schema in svn and don&apos;t have any problems.&lt;/p&gt;


&lt;p&gt;&amp;gt; Anyway, the &apos;aliases&apos; idea is definitely not something you did find useful enough from the beginning&lt;/p&gt;

&lt;p&gt;If I understood what you gain, I could be convinced.  Right now I just see it as the need to manage and maintain multiple names+one immutable name without any reason.&lt;/p&gt;

&lt;p&gt;Perhaps we can move forward without aliasing, and add it later if we find (and implement) a solid use case for it.&lt;/p&gt;</comment>
                            <comment id="12554022" author="ryantxu" created="Fri, 21 Dec 2007 20:14:23 +0000"  >&lt;p&gt;Here is a patch that cleans up some naming and implements the SWAP command.&lt;/p&gt;

&lt;p&gt;It does not include the persistence stuff in the latest  solr-350.patch &lt;/p&gt;

&lt;p&gt;Henri - how do you feel about committing this, then implementing persistence in a smaller patch?&lt;/p&gt;</comment>
                            <comment id="12554045" author="henrib" created="Fri, 21 Dec 2007 21:49:11 +0000"  >&lt;p&gt;SWAP is an important feature to exploit multicore &amp;amp; persistence is not production ready yet, so committing feels like the next logical step .&lt;br/&gt;
Ryan, if possible, I&apos;d appreciate and would greatly benefit from a quick/early review of the solr-315.patch peristence &amp;amp; core creation code (XmWriter, CoreDescriptor; keep them or loose them?).&lt;/p&gt;

&lt;p&gt;As an upside on the ALIAS discussion, if &amp;amp; when a use case shows up, I guess we will be ready!&lt;/p&gt;</comment>
                            <comment id="12554053" author="ryantxu" created="Fri, 21 Dec 2007 22:40:09 +0000"  >&lt;p&gt;just committed &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-350&quot; title=&quot;Manage Multiple SolrCores&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-350&quot;&gt;&lt;del&gt;SOLR-350&lt;/del&gt;&lt;/a&gt;-Naming.patch &lt;/p&gt;

&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt; Ryan, if possible, I&apos;d appreciate and would greatly benefit from a quick/early review of the solr-315.patch peristence &amp;amp; core creation code (XmWriter, CoreDescriptor; keep them or loose them?).&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;I gave it a quick look this morning, but did not look too closely because all the &apos;alias&apos; stuff &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;XmWriter and CoreDescriptor seem reasonable to me.  The CoreDescriptor could be used to move both Config and Schema away from knowing what file opened them.  Check &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-427&quot; title=&quot;Allow IndexSchema to load from an InputStream, not just a file system file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-427&quot;&gt;&lt;del&gt;SOLR-427&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12554085" author="henrib" created="Sat, 22 Dec 2007 06:01:53 +0000"  >&lt;p&gt;On aliases - for completeness - , I had this &quot;nagging&quot; thought I was missing something...&lt;br/&gt;
Re-reading Hoss&apos;s proposal and crossing that with the 1000 unique names point you made, there is in any case 1000 unique &apos;instanceDir&apos; that need to be provided; Hoss proposed to use the &apos;instanceDir&apos; instead of a name and alias that if I&apos;m not mistaken.&lt;br/&gt;
I got side tracked by the fact that the instanceDir could be absolute which would have introduced a deployment host &apos;hard&apos; dependency and lost the equivalence.&lt;br/&gt;
If we define an &apos;instanceRoot&apos; (at the multicore level or at the core level) and make the (core) instanceDir = instanceRoot + &apos;/&apos; + name, the uniqueness of the core name would be put to its initial intended use (instead of just being a by-product of the alias feature). In that case, at least one alias is convenient so we can keep the &apos;url&apos; constant across index revisions.&lt;br/&gt;
For instance, if you are using svn, you could have you instanceDir/&lt;/p&gt;
{schema, conf}
&lt;p&gt; versioned; when you have a new revision ready to go, you copy these over using the instanceDir+&quot;,&quot;+revision-number and use that as a name (which isn&apos;t too bad of a convention).&lt;br/&gt;
And then, there are maybe future features that could be added to use aliases for other purpose...&lt;br/&gt;
Oh well...&lt;/p&gt;</comment>
                            <comment id="12558655" author="henrib" created="Mon, 14 Jan 2008 16:27:06 +0000"  >&lt;p&gt;updated for trunk 611834;&lt;br/&gt;
improved code related to configuration wrt absolute/relative locations: allows core dataDir/instanceDir to be absolute or relative to multicore (pseudo) instanceDir/dataDir.&lt;br/&gt;
added a &apos;dataDir&apos; attribute at the multicore.xml level so that all core data directories can be made relative to it (when they are not absolute).&lt;br/&gt;
After much consideration, added CoreDescriptor/XmlWriter classes; the former describe cores (makes it easier to manage/persist cores and eventually extend behavior - variables...), the latter is (an overkill to) persist XML (ala java6 XmlWriter).&lt;/p&gt;</comment>
                            <comment id="12560234" author="ryantxu" created="Fri, 18 Jan 2008 06:06:47 +0000"  >&lt;p&gt;Hi Henri-&lt;/p&gt;

&lt;p&gt;We&apos;re getting there....  but I had trouble applying this patch, can you post a new one with a few changes?&lt;/p&gt;

&lt;p&gt;1. can you change your editor settings to use two spaces rather then tabs?  In general, solr code should have two spaces rather then tabs or 4 spaces.&lt;/p&gt;

&lt;p&gt;2. To avoid confusion with o.a.s.request.XMLWriter, can we call XmlWriter something else?  XmlWriterHelper? XmlWriterUtils?&lt;/p&gt;

&lt;p&gt;3. Can we make XmlWriter a package protected class in o.a.s.core?  This way we don&apos;t have to make it part of the public API.  If there is a need for it later, we can easily move it.  Also, if it can be replaced with an off the shelf library, we can do that later without mucking anyone up.&lt;/p&gt;

&lt;p&gt;Thanks for your work and patience with this!&lt;/p&gt;</comment>
                            <comment id="12561635" author="henrib" created="Wed, 23 Jan 2008 11:09:45 +0000"  >&lt;p&gt;changed persistence to use o.a.s.common.util.XML (removed XmlWriter);&lt;br/&gt;
updated multicore params/solrj to reflect full set of core creation parameters;&lt;br/&gt;
modified multicore tests to use a clean copy of multicore.xml (multicore-base.xml) before running and made dataDir point to $&lt;/p&gt;
{CWD}
&lt;p&gt;/solr-350 to avoid environment pollution;&lt;/p&gt;

&lt;p&gt;patch produced on Solaris 10 by:&lt;br/&gt;
svn diff --diff-cmd /usr/local/bin/diff -x &quot;-w -B -b -E -d -N -u&quot; &amp;gt; ~/solr-350.patch&lt;br/&gt;
can be applied with:&lt;br/&gt;
/usr/local/bin/patch -u -p 0 &amp;lt; ~/solr-350.patch&lt;/p&gt;</comment>
                            <comment id="12561780" author="ryantxu" created="Wed, 23 Jan 2008 19:13:49 +0000"  >&lt;p&gt;Looking good.  I took your patch and removed all the &apos;default&apos; stuff to make it in line with Hoss&apos; observations in:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Re%3A-purpose-of-MultiCore-%22default%22---p14591921.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Re%3A-purpose-of-MultiCore-%22default%22---p14591921.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This adds the dispatcher settings to multicore.xml&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;multicore adminPath=&lt;span class=&quot;code-quote&quot;&gt;&quot;/admin/multicore&quot;&lt;/span&gt; dataDir=&lt;span class=&quot;code-quote&quot;&gt;&quot;alldata&quot;&lt;/span&gt; persistent=&lt;span class=&quot;code-quote&quot;&gt;&quot;true&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;abortOnConfigurationError&amp;gt;&lt;/span&gt;true&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/abortOnConfigurationError&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;requestDispatcher handleSelect=&lt;span class=&quot;code-quote&quot;&gt;&quot;true&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;
    &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;requestParsers enableRemoteStreaming=&lt;span class=&quot;code-quote&quot;&gt;&quot;false&quot;&lt;/span&gt; multipartUploadLimitInKB=&lt;span class=&quot;code-quote&quot;&gt;&quot;2048&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/requestDispatcher&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;core name=&lt;span class=&quot;code-quote&quot;&gt;&quot;core0&quot;&lt;/span&gt; instanceDir=&lt;span class=&quot;code-quote&quot;&gt;&quot;core0&quot;&lt;/span&gt; default=&lt;span class=&quot;code-quote&quot;&gt;&quot;true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;core name=&lt;span class=&quot;code-quote&quot;&gt;&quot;core1&quot;&lt;/span&gt; instanceDir=&lt;span class=&quot;code-quote&quot;&gt;&quot;core1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/multicore&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;The one thing we need to change before commiting is how the test work with multicore-base.xml and multicore.xml &amp;#8211; maybe the &apos;clean&apos; copy should live in the test files and get copied over on a shutdown hook?  We want to make sure everythign in the /examples directory helps people understand how things work.&lt;/p&gt;</comment>
                            <comment id="12562834" author="hossman" created="Sat, 26 Jan 2008 07:36:36 +0000"  >&lt;p&gt;hey guys ... i&apos;m catching up on some Jira reading and this comment jumped out at me...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;improved code related to configuration wrt absolute/relative locations: allows core dataDir/instanceDir to be absolute or relative to multicore (pseudo) instanceDir/dataDir.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;(i&apos;m guessing that&apos;s what the dataDir option in the &amp;lt;multicore/&amp;gt; tag in Ryan&apos;s example is for?)&lt;/p&gt;

&lt;p&gt;this seems like a bad idea to me ... violating the principle of least suprise and all.  it will make the behavior of a solrconfig.xml file dependent on whether or not it&apos;s being used in a multicore context or not.&lt;/p&gt;

&lt;p&gt;I&apos;d like to suggest that an aternate approach would be to generalize the current system property based variable substitution to support arbitrary key=val pairs specified when the SolrCore is constructed...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;we add new syntax to multicore.xml for declaring &quot;global properties&quot;&lt;/li&gt;
	&lt;li&gt;MultiCore converts these global declarations into a SolrParams instance&lt;/li&gt;
	&lt;li&gt;we also add syntax to multicore.xml for declaring properties specific to a core.&lt;/li&gt;
	&lt;li&gt;when MultiCore instantiates a core, it uses DefaultSolrParams to let the specific properties override the global properties &lt;b&gt;and&lt;/b&gt; to set a special property containing the name of the core (ie: &quot;solr.core.name&quot;)&lt;/li&gt;
	&lt;li&gt;if cloning a core is possible (i can&apos;t remember) MultiCore would reuse the SolrParams from the source core, changing only the core name property (solr.core.name)&lt;/li&gt;
	&lt;li&gt;system properties with the same names as properties in multicore.xml would trump anything from the configs (since they are a run time overrides)&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;multicore adminPath=&lt;span class=&quot;code-quote&quot;&gt;&quot;/admin/multicore&quot;&lt;/span&gt; persistent=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;
  &amp;lt;abortOnConfigurationError&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&amp;lt;/abortOnConfigurationError&amp;gt;
  &amp;lt;requestDispatcher handleSelect=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;
    &amp;lt;requestParsers enableRemoteStreaming=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&quot;&lt;/span&gt; multipartUploadLimitInKB=&lt;span class=&quot;code-quote&quot;&gt;&quot;2048&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;/requestDispatcher&amp;gt;
  &amp;lt;property name=&lt;span class=&quot;code-quote&quot;&gt;&quot;alldata.dir&quot;&lt;/span&gt;&amp;gt;/my/solr/basedir&amp;lt;/property&amp;gt;
  &amp;lt;property name=&lt;span class=&quot;code-quote&quot;&gt;&quot;magicnumber&quot;&lt;/span&gt;&amp;gt;32&amp;lt;/property&amp;gt;

  &amp;lt;!-- core0 gets props above, any other props in it&apos;s configs must come from system props --&amp;gt;
  &amp;lt;core name=&lt;span class=&quot;code-quote&quot;&gt;&quot;core0&quot;&lt;/span&gt; instanceDir=&lt;span class=&quot;code-quote&quot;&gt;&quot;core0&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;core name=&lt;span class=&quot;code-quote&quot;&gt;&quot;core1&quot;&lt;/span&gt; instanceDir=&lt;span class=&quot;code-quote&quot;&gt;&quot;core1&quot;&lt;/span&gt;&amp;gt;
     &amp;lt;property name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dataDir&quot;&lt;/span&gt;&amp;gt;foo&amp;lt;/property&amp;gt;
  &amp;lt;/core&amp;gt;
  &amp;lt;core name=&lt;span class=&quot;code-quote&quot;&gt;&quot;core111&quot;&lt;/span&gt; instanceDir=&lt;span class=&quot;code-quote&quot;&gt;&quot;core1&quot;&lt;/span&gt;&amp;gt;&amp;lt;!-- note same instanceDir as above--&amp;gt;
     &amp;lt;!-- can reuse exact same instance dir as another core ${solr.core.name} will be differnet --&amp;gt;
     &amp;lt;property name=&lt;span class=&quot;code-quote&quot;&gt;&quot;dataDir&quot;&lt;/span&gt;&amp;gt;bar&amp;lt;/property&amp;gt;
     &amp;lt;!-- and now ${dataDir} will be different too --&amp;gt;
  &amp;lt;/core&amp;gt;
&amp;lt;/multicore&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This would not only give us the ability to have a common $&lt;/p&gt;
{alldata.dir}
&lt;p&gt; for all cores, but also an easy way to reuse the same solrconfig.xml for multiple cores and still get subtle changes in behavior &amp;#8211; all while making it transparent what any one solrconfig.xml will do.&lt;/p&gt;

&lt;p&gt;Super powerful &amp;#8211; and (i think) pretty easy to implement... a new optional SolrParams arg to the SolrCore, SolrConfig, and Config constructors, and DOMUtil.substituteSystemProperties plus some code in MultiCore to create the SolrParams (hmm,  DOMUtil doesn&apos;t have a very friendly method for that yet, not that big a deal though)&lt;/p&gt;

&lt;p&gt;what do you think?&lt;/p&gt;</comment>
                            <comment id="12562835" author="hossman" created="Sat, 26 Jan 2008 07:51:41 +0000"  >&lt;p&gt;Actually, one more unrelated comment...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Looking good. I took your patch and removed all the &apos;default&apos; stuff to make it in line with Hoss&apos; observations in:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;...i know i suggested moving anything related to the entire solr server into multicore.xml, but i&apos;ve been looking at SolrDispatchFilter lately because of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-127&quot; title=&quot;Make Solr more friendly to external HTTP caches&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-127&quot;&gt;&lt;del&gt;SOLR-127&lt;/del&gt;&lt;/a&gt; and i&apos;m starting to wonder if the &amp;lt;requestDispatcher/&amp;gt; config options really need to be webapp wide.  &lt;/p&gt;

&lt;p&gt;They are (currently) only used to construct a protected instance of SolrRequestParsers in SolrDispatchFilter.init, but that SolrRequestParsers is only needed in the doFilter method once we&apos;ve already figured out what core we&apos;re using ... it&apos;s a fairly light weight class, so why not construct a new one in each call to doFilter (after we&apos;ve determined the correct core) and leave those options core specific?&lt;/p&gt;

&lt;p&gt;(not to mention the HTTP caching options &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-127&quot; title=&quot;Make Solr more friendly to external HTTP caches&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-127&quot;&gt;&lt;del&gt;SOLR-127&lt;/del&gt;&lt;/a&gt; is probably going to add to  &amp;lt;requestDispatcher/&amp;gt;)&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;


&lt;p&gt;And while i&apos;m thinking about it ... what does abortOnConfigurationError=true mean in a multicore world when someone attempts to dynamicly load a core with a config error?  &lt;/p&gt;

&lt;p&gt;Currently SolrDispatchFilter only looks at that setting on init ... is MultiCore goung to start checking it after each LOAD core action?  will it cause the whole server to stop accepting requests or just do something special for that one core?&lt;/p&gt;
</comment>
                            <comment id="12563346" author="henrib" created="Tue, 29 Jan 2008 00:01:10 +0000"  >&lt;p&gt;Regarding introducing variables, this is tempting but this looks like a rather important feature for a rather limited need. Plus it could be argued that it increases the element of surprise or at least the potential for side effects.&lt;br/&gt;
If a solrconfig/schema refers to a variable that can be superseded in a multicore.xml, the behavior of a core is explictly dependant on whether it is loaded in a multicore configuration of not. I agree that being explicit rather than implicit is better but this does modify behavior even deeper nevertheless.&lt;/p&gt;

&lt;p&gt;The door that variable introduction would open seems much wider than the functional hole is; the original &quot;breach&quot; was needed for the shared class loader, a common dataDir root is adressing the good practise to segregate data from configuration. We could introduce a configDir/schemaDir at multicore level to adress sharing config/schema sharing - although using multiple cores is usually related to different config/schema so reusing/sharing them does not look like a must-have feature.&lt;/p&gt;

&lt;p&gt;The multicore dataDir attributes is a default directory/roots that can be overriden by core definitions, the current convention is really limited in its effects to what&apos;s needed. Variables and the huge functional potential of a whole environment defined within Solr seem way beyond the current use-cases; if we follow the precedent of &quot;alias vs swap&quot;, we should retain the idea but wait till more needs emerge before implementing it, shouldn&apos;t we? &lt;/p&gt;



</comment>
                            <comment id="12564212" author="hossman" created="Wed, 30 Jan 2008 23:16:49 +0000"  >&lt;p&gt;I agree generalizing variables is somewhat significant, and a larger scope then just what&apos;s being talked about here &amp;#8211; perhaps that&apos;s part of the disconnect ... I&apos;m taking it as a given that it&apos;s a problem that needs to be solved before multicores can really be useful &amp;#8211; so if we have to solve that problem, and that solution can also solve the common dataDir problem, let&apos;s not have an alternate solution to hte dataDir problem that is &quot;non transparent&quot; to people reading the configs.&lt;/p&gt;

&lt;p&gt;(my assumption being based on the impression that we can&apos;t really support a lot of the use cases people have talked about without having at a minimum a way to know use the &quot;name&quot; of the current core as a variable in the configs  &amp;#8211;  postCommit hooks being one example of a place where this info will be crucial) &lt;/p&gt;

&lt;p&gt;In a nutshell: if we know we are going to need variables, then instead of introducing a new &amp;lt;multicore dataDir=&quot;...&quot;&amp;gt; option now (which if used changes the meaning of the &amp;lt;dataDir/&amp;gt;) let&apos;s solve the broader problem of passing arbitrary variables to a SolrCore.  we can still commit all of the other stuff you guys have been working on, lets just set the dataDir issue aside until we add the variable support.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;BUT!!!&lt;/b&gt; part of your comment has me worried that i&apos;m misunderstanding how &amp;lt;multicore dataDir=&quot;...&quot;&amp;gt; works, you just said...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The multicore dataDir attributes is a default directory/roots that can be overriden by core definitions&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;...how can it be overridden?  My understanding based on your early comment was that &amp;lt;multicore dataDir=&quot;...&quot;&amp;gt; was the directory that the &amp;lt;dataDir&amp;gt;...&amp;lt;/dataDir&amp;gt; options in each solrconfig.xml would be relative to ...do you mean that in the multicore.xml file, each &amp;lt;core/&amp;gt; can have a dataDir option? ... if so that doesn&apos;t really solve the concern I have: people should be able to read a solrconfig.xml and understand when there are outside inflluences on that config...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Plus it could be argued that it increases the element of surprise or at least the potential for side effects.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If a solrconfig/schema refers to a variable that can be superseded in a multicore.xml, the behavior of a core is explictly dependant on whether it is loaded in a multicore configuration of not. I agree that being explicit rather than implicit is better but this does modify behavior even deeper nevertheless.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I disagree ... it&apos;s true that using a &quot;variables&quot; approach the evaluation of a solrconfig.xml would be dependent on the environment it&apos;s run in (ie: is there a multicore.xml? are variables set in it? are any system properties set?) but the evaluation of solrconfog.xml is already dependent on it&apos;s environment  (ie: what is the solr home? are any system properties set?) ...  my point is that when a human is &lt;b&gt;reading&lt;/b&gt; a config with variables in it, it is crystal clear that there is an environmental factor that will affect the behavior.  If a person reads a solrconfig.xml that contains this line...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;dataDir&amp;gt;${my.special.dir}/data&amp;lt;/dataDir&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;...then it&apos;s very obvious that the location of the data will depends on the environment the core is run in (in which &quot;my.special.dir&quot; must be set, either as a system property or as a multicore.xml variable &amp;#8211; the point being it&apos;s an &lt;b&gt;known&lt;/b&gt; external factor).  The approach you guys have been talking about though (assuming i&apos;m understanding it correctly) would take away that transparency &amp;#8211; people could look at a solrconfig.xml that looks like this...&lt;/p&gt;

&lt;p&gt;&amp;lt;dataDir&amp;gt;data&amp;lt;/dataDir&amp;gt;&lt;/p&gt;

&lt;p&gt;...and that that could mean anything depending on whether or not this solrconfig.xml is running in a multicore setup or not.&lt;/p&gt;</comment>
                            <comment id="12564457" author="henrib" created="Thu, 31 Jan 2008 18:56:58 +0000"  >
&lt;p&gt;I&apos;m confused and dont see the dataDir element parsing you are referring to in solrconfig.xml; my current understanding is that the dataDir is deduced from the instance dir if not specified explicitly at core construction time. Are you proposing to add it (and/or instanceDir) to solrconfig.xml?&lt;/p&gt;

&lt;p&gt;Anyway, the current patch code allows both dataDir &amp;amp; instanceDir to be specified as multicore &amp;amp; core attributes (and everything related to file/directory locations is contained within multicore.xml); it treats absolute directory specifications (ie starting with &apos;/&apos;) as such, core specification having precedence over multicore.&lt;br/&gt;
If the core specified instanceDir is absolute, it is used as is and the dataDir is made relative to it if not absolute.&lt;br/&gt;
Otherwise, the instanceDir is relative to the multicore instanceDir; If the core specified dataDir is absolute, it is used as such otherwise the core dataDir is relative to the multicore dataDir.&lt;br/&gt;
When left unspecified, everything behaves relative to the multicore implied instanceDir or as current defaults.&lt;/p&gt;

&lt;p&gt;If you still find this is a bad solution, I&apos;m confident you &amp;amp; Ryan will agree on the good one; just let me know, I&apos;ll (try to) code it (if you want).&lt;/p&gt;</comment>
                            <comment id="12565138" author="ryantxu" created="Sun, 3 Feb 2008 03:09:51 +0000"  >&lt;p&gt;Apologies for the lack of input, I&apos;ve been too sick to follow this thread.&lt;/p&gt;

&lt;p&gt;Henri - the &amp;lt;dataDir&amp;gt; element is in solrconfig.xml &amp;#8211; check the example config, it lists:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
 &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;dataDir&amp;gt;&lt;/span&gt;${solr.data.dir:./solr/data}&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/dataDir&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;m a bit torn on the proper direction from here - the flexibility of setting the dataDir from multicore.xml is really nice, it makes it really easy to share all the same configs, but change the data directory.  However, if the dataDir is set in solrconfig,xml, what about the existing &amp;lt;datadir&amp;gt; within solrconfig.xml?&lt;/p&gt;

&lt;p&gt;The properties/variables solution seems interesting, but more then I think we need to take on right now.&lt;/p&gt;

&lt;p&gt;I&apos;ll post an updated patch that removes all dataDir configuration and then we can work from there.&lt;/p&gt;</comment>
                            <comment id="12565139" author="ryantxu" created="Sun, 3 Feb 2008 03:13:00 +0000"  >&lt;p&gt;Updated patch that removes dataDir configuration.  This also puts the requestParser configuration back within each core.  Creating a new RequestParser is not a lightweight operation, so creating one for each request does not seem like a good idea.  This keeps a WeakHashMap&amp;lt;SolrCore,RequestParser&amp;gt; &lt;/p&gt;</comment>
                            <comment id="12566421" author="hossman" created="Thu, 7 Feb 2008 01:04:53 +0000"  >&lt;p&gt;just to clarify, i still haven&apos;t looked at the patch closely (I trust Ryan/Henri&apos;s judgment on bulk of the multicore implementation ... i mainly just want to sanity cehck the concepts and configs) ... but I have just a few follow up questions/clarifications about some of the issues i mentioned before...&lt;/p&gt;

&lt;p&gt;a) by &quot;requestParser configuration back within each core&quot; you mean all of the &amp;lt;requestDispatcher&amp;gt; configuration, correct?  (currently requestParser and handleSelect ... likely to be httpCaching as well) i mainly just want to be sure that moving forward we think it makes sense for each solrconfig.xml to have it&apos;s own &amp;lt;requestDispatcher&amp;gt; section containing info on how the SolrDispatchFilter should deal with requests for the core using that config.&lt;/p&gt;

&lt;p&gt;b) (constructing a) SolrRequestParsers instance seems pretty lightweight to me ... is there any think specific you&apos;re worried about that i&apos;m not noticing?&lt;/p&gt;

&lt;p&gt;c) should i open a separate issue for dealing with generalizing variables (and note that corename and dataDir are two prime use cases) ?  it seems like that can definitely be dealt with &lt;b&gt;after&lt;/b&gt; the bulk of the stuff in this issue is committed.&lt;/p&gt;

&lt;p&gt;d) anyone have any thoughts regarding my question about &quot;abortOnConfigurationError&quot; and what it &lt;b&gt;should&lt;/b&gt; mean when dealing with dynamically loaded cores (i&apos;m pretty sure right now it&apos;s ignored for any dynamically loaded cores ... i&apos;m just wondering if that&apos;s what we want it to do)&lt;/p&gt;</comment>
                            <comment id="12568992" author="henrib" created="Thu, 14 Feb 2008 16:43:19 +0000"  >&lt;p&gt;Regarding c/variables/properties, imho we can definitely tackle the bulk of it in here, no need for another issue yet.&lt;/p&gt;

&lt;p&gt;On that topic, one small nag regarding multicore.xml serialization; do we want multicore.xml serialization to retain expressions if any (ie serailize them back as expressions) or not? Seems like it would be convenient to be able to distribute the same multicore.xml across several hosts - which may have different envs.&lt;br/&gt;
As of now, we do expand all expressions before parsing resource files; if multicore.xml uses expressions based on environment variables, these will be expanded before we even have a chance to see them which precludes being able to write them back.&lt;br/&gt;
Since we will have to serialize variables in multicore.xml, one workaround would be for users to declare local variables for each env based expressions (as multicore &quot;global&quot; properties) and only use those locals (keeping those definitions before expansion that is). Parsing multicore.xml would make one pass before expansion to extract the &apos;multicore/property&apos; &amp;amp; &apos;core/property&apos; raw expressions, then expand the whole.&lt;br/&gt;
(implementation/self note: MultiCore &amp;amp; CoreDescriptor need to be able to define/serialize properties).&lt;/p&gt;

&lt;p&gt;Would this be ok / needed? Thoughts ?&lt;/p&gt;</comment>
                            <comment id="12569018" author="ryantxu" created="Thu, 14 Feb 2008 17:37:32 +0000"  >
&lt;p&gt;&amp;gt; Regarding c/variables/properties, imho we can definitely tackle the bulk of it in here, no need for another issue yet.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I think we should try to wrap up thins without properties, then open a new issue for them.  They are functionally different enough.  As a note, I&apos;m using this multicore patch with system variables for the data path in each solrconfig.xml &amp;#8211; this gives the same behavior you were looking for.  &amp;lt;dataDir&amp;gt;$&lt;/p&gt;
{solr.data}
&lt;p&gt;/corename/&amp;lt;/dataDir&amp;gt;&lt;/p&gt;

&lt;p&gt;In my view the one thing we need to fix before getting this patch commited is the returning results for unloaded cores...&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Multicore---Querying-unloaded-core-returns-results-from-default-td15469303.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Multicore---Querying-unloaded-core-returns-results-from-default-td15469303.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12569146" author="henrib" created="Fri, 15 Feb 2008 00:27:41 +0000"  >&lt;p&gt;We need a way to define a global data root without having to define a system env variable; can&apos;t we at least reintroduce the dataDir as a multicore attribute?&lt;br/&gt;
The previous patch version went too far and was ignoring the solrconfig.xml dataDir specification, but having no way to describe where all data go easily is really too inconvenient.&lt;br/&gt;
Can&apos;t we find something acceptable in between ?&lt;br/&gt;
Strawman solution would be, if dataDir is &lt;b&gt;not&lt;/b&gt; specified in solrconfig.xml, use the previous patch code ?&lt;br/&gt;
Hopefully more acceptable, only provide a minimum set of variables with no possibility to define any for now ? The env would only contain &apos;solr.multicore.&lt;/p&gt;
{home,data}
&lt;p&gt;&apos; and for each core,&apos;solr.multicore.core.instance&apos; (I&apos;m reluctant to expose &apos;sol.multicore.core.name&apos;, explanation follows...)&lt;/p&gt;

&lt;p&gt;This would not preclude extending variables later and would not delay solr-350 by much now.&lt;/p&gt;

&lt;p&gt;We used {{&amp;lt;dataDir&amp;gt;$&lt;/p&gt;
{solr.data}
&lt;p&gt;/corename/&amp;lt;/dataDir&amp;gt;}} to illustrate the variable solution but I grow feeling uneasy seeing the core &lt;b&gt;name&lt;/b&gt; as a variable part of a path (explicit or implicit): if we issue a SWAP command, how do we end up in a proper state when we stop/start the container without swapping the directory contents as well ?&lt;/p&gt;

&lt;p&gt;My rationale is that the &lt;b&gt;instanceDir&lt;/b&gt; is really what physically identifies a core in a persistent manner wrt SWAP/stop/start; when we specify a data root, the data directory should somehow depend on the instanceDir as well.&lt;br/&gt;
For instance, with &lt;tt&gt;&amp;lt;core name=&quot;books&quot; instanceDir=&quot;books,0&apos;.../&amp;gt;&lt;/tt&gt; and &lt;tt&gt;&amp;lt;core name=&quot;books-dev&quot; instanceDir=&quot;books,1&quot;.../&amp;gt;&lt;/tt&gt; ; even if both use the same data root &lt;em&gt;&apos;/solr/data&apos;&lt;/em&gt;, the &apos;books&apos; core will use &lt;em&gt;&apos;/solr/data/books,0/&apos;&lt;/em&gt; as dataDir and &apos;books-dev&apos; will use &lt;em&gt;&apos;/solr/data/books,1&apos;&lt;/em&gt;.&lt;br/&gt;
When we swap(&apos;books&apos;, &apos;books-dev&apos;) , everything is still ok; &apos;books&apos; now refers to_&apos;/solr/data/books,1&apos;_ and books-dev refers to &lt;em&gt;&apos;/solr/data/books,0/&apos;&lt;/em&gt; . If we stop/start the container, since nothing physically persistent depended on the name, variable substitution (or implicit expansion) can not interfere.&lt;br/&gt;
If we are using the core &lt;b&gt;name&lt;/b&gt; to build data directories, issuing swap is likely to break something...&lt;/p&gt;

&lt;p&gt;Please correct me if I&apos;m deeply misunderstanding something...&lt;/p&gt;</comment>
                            <comment id="12571282" author="otis" created="Fri, 22 Feb 2008 05:55:42 +0000"  >&lt;p&gt;I haven&apos;t followed the patches, and I quickly read through the last month&apos;s worth of comments here.  One thing that Hoss said caught my attention:&lt;/p&gt;

&lt;p&gt;&quot;...easy way to reuse the same solrconfig.xml for multiple cores and still&lt;br/&gt;
get subtle changes in behavior - all while making it transparent what&lt;br/&gt;
any one solrconfig.xml will do...&quot;&lt;/p&gt;

&lt;p&gt;Please count this as my +1 for this.&lt;br/&gt;
Yes, one use case is that each core is unique and thus needs unique configs, but I also have a concrete use case where all cores are identical as far as the configs go, all that needs to be different is the data directory where the index lives.  In this case, it would be ideal if one could have a single copy of the schema.xml and solrconfig.xml, and specify core-specific settings (e.g. data/index dir) in multicore.xml.&lt;/p&gt;

&lt;p&gt;It would be even better if configs for cores were not all in a single/monolithic file - imagine a situation where you have thousands or even tends of thousands of indices and you add a few hundred or a few thousand new ones every day, throughout the day.  You could certainly regenerate the whole multicore.xml file every time a new index is added, but it would be much more efficient to generate just the descriptor for that single new index that was just created, and tell Solr - &quot;hey, look here, there is a new core/index you need to be aware of&quot;.  Perhaps one way to deal with this is to expose an API (URL) to send such a &quot;hey, look here....&quot; message to Solr, and let Solr periodically write out multicore.xml to disk.&lt;/p&gt;</comment>
                            <comment id="12572080" author="henrib" created="Mon, 25 Feb 2008 13:28:07 +0000"  >&lt;p&gt;Otis, reading your requirements, I&apos;d be considering using a Solr core (the &quot;metacore&quot;) to handle an indexed version of multicore.xml; if you have a few thousands indices, it might be convenient to use queries in some occasions to select/retrieve/operate on one/many of them.&lt;br/&gt;
The xml version of the multicore persistent file could be written at application/multicore shutdown and the Lucene based one could be recreated at application/multicore startup; creating a new index would just induce creating a new document in the multicore core (and in fact all CRUD operations could be handled that way) and we&apos;d benefit from Solr autocommit feature &amp;amp; al, tackling your functional requirements reusing well-known capabilities &amp;amp; code.&lt;br/&gt;
This also removes the &quot;hack&quot; loop used to find a core to work with when issuing a multicore/admin request (and the getDefaultCore call). Got a patch running for this now if this seems interesting.&lt;/p&gt;


&lt;p&gt;On configuring easily the data/index dir from multicore.xml, it seems we all agree that variables definitions should be able to allow just that; the non-extensible version of the feature (see previous comment)- where we dont allow the user to augment the environment but only expose &apos;solr.multicore.*&apos;- did not trigger any comment yet, Otis/Hoss/Ryan what do you think of it ?&lt;/p&gt;</comment>
                            <comment id="12573101" author="ryantxu" created="Wed, 27 Feb 2008 23:26:45 +0000"  >&lt;p&gt;Updated patch for /trunk and fixed the dispatcher problem.&lt;/p&gt;

&lt;p&gt;I think this is ready to commit &amp;#8211; we can address the variable/config/data issue in a different issue or smaller patches.&lt;/p&gt;



&lt;p&gt;&lt;b&gt;In reply to Hoss Feb 06&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;a) yes &amp;#8211; each core keeps the &amp;lt;requestDispatcher&amp;gt; settings from solrconfig.xml&lt;/p&gt;

&lt;p&gt;b) Creating a SolrRequestparsers is not super lightweight &amp;#8211; it has 3 xpath queires on config, then builds a map and puts 5 things in it.  That seems like a lot to add to &lt;b&gt;every&lt;/b&gt; request rather then saving it at the beginning&lt;/p&gt;

&lt;p&gt;c) yes - we should open a seperate issue for variables&lt;/p&gt;

&lt;p&gt;d) &quot;abortOnConfigurationError&quot; should probably be renamed &quot;abortOnStartupConfigurationError&quot; &amp;#8211; once the app is running, it does not (nor do i think it should) quit working if something loads incorrectly.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;re 1000s of cores&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Note that you don&apos;t have to use the xml multicore management stuff.  If MultiCore support is enabled before the SolrRequestDispatcher init() method, it will use that directly.  You can load cores from SQL or whereever and put them into the MultiCore registry.  (i am doing just this in one project)&lt;/p&gt;</comment>
                            <comment id="12573338" author="henrib" created="Thu, 28 Feb 2008 16:06:53 +0000"  >&lt;p&gt;A new version attempting to make it easier to derive from MultiCore (and associated classes - SolrDispatchFilter, MultiCoreHandler).&lt;br/&gt;
This breaks the API (MultiCore.getInstance is removed) but a SolrMultiCore class is added to allow a smooth transition.&lt;br/&gt;
SolrDispatchFilter logic has been reworked to reduce the number of &apos;return;&apos; points and to be more lenient &amp;amp; let other filters handle more things when possible.&lt;br/&gt;
One caveat, patch does not apply cleanly on MultiCore.java; the .rej is not too complex (now that I&apos;m not in a rush), the beginning of the class def gets rejected.&lt;/p&gt;</comment>
                            <comment id="12574122" author="henrib" created="Sat, 1 Mar 2008 16:12:56 +0000"  >&lt;p&gt;Despite many tries, can&apos;t get this patch to apply without reject on MultiCore.java - still with the same block to apply manually. This latest version just introduces more comments and 2/3 more methods have been marked protected.&lt;br/&gt;
Ryan, I guess that if you dont like this version, you should just commit yours which is in any case a step forward from the current trunk.&lt;/p&gt;</comment>
                            <comment id="12574658" author="yseeley@gmail.com" created="Mon, 3 Mar 2008 18:40:45 +0000"  >&lt;p&gt;&amp;gt; I think this is ready to commit - we can address the variable/config/data issue in a different issue or smaller patches.&lt;br/&gt;
+1&lt;/p&gt;</comment>
                            <comment id="12574839" author="ryantxu" created="Tue, 4 Mar 2008 04:08:02 +0000"  >&lt;p&gt;Henri &amp;#8211; i just the previous patch.  If you make another smaller one, i&apos;ll review and commit quickly.&lt;br/&gt;
Thanks for all your work on this!&lt;/p&gt;</comment>
                            <comment id="12574982" author="henrib" created="Tue, 4 Mar 2008 13:12:56 +0000"  >&lt;p&gt;Updated patch to current trunk.&lt;/p&gt;

&lt;p&gt;Removes the static singleton from Multicore (&amp;amp; moves it to SolrMulticore), updated classes that depended upon it, makes Multicore/SolrDispatchFilter easily derivable.&lt;br/&gt;
SolrDispatchFilter logic is more lenient and will let the filter chain handle urls that can&apos;t be dealt with.&lt;/p&gt;

&lt;p&gt;Produced on Ubuntu 7.10 by:&lt;br/&gt;
svn diff --diff-cmd /usr/bin/diff -x &quot;-w -B -b -E -d -N -u&quot; &amp;gt; /tmp/solr-350.patch&lt;br/&gt;
Successfully applied with no rejects with:&lt;br/&gt;
patch -u -p 0 &amp;lt; /tmp/solr-350.patch&lt;/p&gt;</comment>
                            <comment id="12575369" author="henrib" created="Wed, 5 Mar 2008 14:35:47 +0000"  >&lt;p&gt;simplified the MultiCore singleton handling (aka SolrMultiCore.getInstance is lazily loading) but kept SolrDispatchFilter/MultiCore/MultiCoreHandler derivable.&lt;/p&gt;</comment>
                            <comment id="12577346" author="shalinmangar" created="Tue, 11 Mar 2008 09:30:03 +0000"  >&lt;p&gt;Since the MultiCore#getRegistry does not exist anymore after the commit of this patch, a couple of JSPs do not work. &lt;/p&gt;

&lt;p&gt;I&apos;ve changed those JSPs to use SolrMultiCore#getInstance method instead. This patch contains those changes.&lt;/p&gt;</comment>
                            <comment id="12577350" author="shalinmangar" created="Tue, 11 Mar 2008 09:38:07 +0000"  >&lt;p&gt;I missed a couple of files when creating the last patch. This contains all the modified JSPs. The svn stat is as follows:&lt;/p&gt;

&lt;p&gt;M      src\webapp\resources\index.jsp&lt;br/&gt;
M      src\webapp\resources\admin\logging.jsp&lt;br/&gt;
M      src\webapp\resources\admin\raw-schema.jsp&lt;br/&gt;
M      src\webapp\resources\admin\ping.jsp&lt;br/&gt;
M      src\webapp\resources\admin\threaddump.jsp&lt;br/&gt;
M      src\webapp\resources\admin\index.jsp&lt;/p&gt;</comment>
                            <comment id="12577421" author="waltersbox" created="Tue, 11 Mar 2008 12:16:12 +0000"  >&lt;p&gt;It&apos;s been a while since I had a look at this patch, and things seems to have changed a bit meanwhile &amp;#8211; but it looks strange that the only way to access the cores registry inside a solr istance relay on a deprecated class, org.apache.solr.core.SolrMultiCore. I noticed Henri mention that the SolrMultiCore singleton &quot;is added to allow a smooth transition&quot;, but...&lt;br/&gt;
If there is no another way to achieve the same result bypassing org.apache.solr.core.SolrMultiCore, that class should not be marked as deprecated. Or that deprecation has to be read as &quot;in the final solr 1.3 just use SolrMultiCore and ignore the warning, but remember that in the next version, the 2.0, things will change&quot;?&lt;/p&gt;</comment>
                            <comment id="12577434" author="henrib" created="Tue, 11 Mar 2008 13:11:20 +0000"  >&lt;p&gt;Ryan: thanks for the commit.&lt;/p&gt;

&lt;p&gt;Shalin: thanks a lot for the JSP fix, my bad. Thinking of it, it might be possible to put the Multicore instance as a request attribute from the filter code &amp;amp; let JSP consume it this way rather than using SolrMultiCore. I&apos;ll look into it.&lt;/p&gt;

&lt;p&gt;Walter: yes, you are correct, things will most likely change in 2.0. We want MultiCore to be derivable and we dont want core core to consider MultiCore to be a singleton; however, we do not feel current needs require the class to be configurable (yet). May be o.a.s.servlet. would be/have been a better package for SolrMultiCore to make this easier. Sorry for the confusion.&lt;/p&gt;</comment>
                            <comment id="12577439" author="yseeley@gmail.com" created="Tue, 11 Mar 2008 13:26:13 +0000"  >&lt;p&gt;Thanks Shalin, I just committed your JSP fixes (after converting the patch from UTF-16 to UTF-8 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12581961" author="ryantxu" created="Tue, 25 Mar 2008 14:35:23 +0000"  >&lt;p&gt;remove SolrMultiCore references from JSP&lt;/p&gt;</comment>
                            <comment id="12581972" author="ehatcher" created="Tue, 25 Mar 2008 14:53:35 +0000"  >&lt;p&gt;The RemoveStatic patch looks good, Ryan.  +1&lt;/p&gt;</comment>
                            <comment id="12609944" author="mamdev" created="Wed, 2 Jul 2008 15:51:01 +0100"  >&lt;p&gt;MultiCore persistence is broken.&lt;/p&gt;

&lt;p&gt;multicore/@sharedLib gets written as multicore/@libDir, so loading the multicore configuration after saving will fail.&lt;/p&gt;</comment>
                            <comment id="12609968" author="ryantxu" created="Wed, 2 Jul 2008 17:16:16 +0100"  >&lt;p&gt;thanks for finding this Markus!&lt;br/&gt;
fixed in rev 673430&lt;/p&gt;</comment>
                            <comment id="12614337" author="ryantxu" created="Thu, 17 Jul 2008 14:53:09 +0100"  >&lt;p&gt;it looks like dataDir option was removed from CoreDescriptor.  Was there a reason for this?  Can multicore.xml manage the data directories?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/solr/MultiCore#head-2696b6ae9766aa312580b5014f6c8f659a2c1bea&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/solr/MultiCore#head-2696b6ae9766aa312580b5014f6c8f659a2c1bea&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think we should return that configuration.&lt;/p&gt;</comment>
                            <comment id="12614422" author="henrib" created="Thu, 17 Jul 2008 17:33:46 +0100"  >&lt;p&gt;Looks like this was removed around 02/Feb/08 from one of your comments &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ; the dataDir can be set in solrconfig.xml so configuring it through multicore.xml was considered a dangerous feature.&lt;br/&gt;
And I agree we should enhance the configuration behaviors.&lt;/p&gt;

&lt;p&gt;Since we are in the functional vicinity, the &quot;2008-01-23 03:09 AM&quot;  version of the patch allowed (at least MulitCore.create(...)) the following:&lt;br/&gt;
Make the instanceDir relative to the multicore instanceDir if not absolute&lt;br/&gt;
Make the dataDir relative to the multicore dataDir if not absolute&lt;br/&gt;
Just in case...&lt;/p&gt;
</comment>
                            <comment id="12615311" author="henrib" created="Mon, 21 Jul 2008 18:14:33 +0100"  >&lt;p&gt;This patch (solr-350-properties.patch) implements &apos;properties&apos; as specified by &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-350?focusedCommentId=12562834#action_12562834&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HossMan&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;see &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-646&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;solr-646&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12384984">SOLR-441</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12400757">SOLR-646</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12371892">SOLR-265</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12384132">SOLR-428</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12402094">SOLR-689</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12400474">SOLR-638</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12368128">SOLR-215</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12394490">SOLR-545</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12366957" name="SOLR-350-MultiCore.patch" size="38550" author="ryantxu" created="Tue, 2 Oct 2007 22:25:27 +0100"/>
                            <attachment id="12366411" name="SOLR-350-MultiCore.patch" size="12057" author="ryantxu" created="Sat, 22 Sep 2007 22:56:16 +0100"/>
                            <attachment id="12365490" name="SOLR-350-MultiCore.patch" size="38846" author="ryantxu" created="Mon, 10 Sep 2007 18:41:34 +0100"/>
                            <attachment id="12372103" name="SOLR-350-Naming.patch" size="52130" author="ryantxu" created="Fri, 21 Dec 2007 20:14:23 +0000"/>
                            <attachment id="12371572" name="SOLR-350-Naming.patch" size="40500" author="ryantxu" created="Thu, 13 Dec 2007 01:32:52 +0000"/>
                            <attachment id="12378571" name="SOLR-350-RemoveStatic.patch" size="6249" author="ryantxu" created="Tue, 25 Mar 2008 14:35:23 +0000"/>
                            <attachment id="12377591" name="SOLR-350-jsp-fixes.patch" size="8426" author="shalinmangar" created="Tue, 11 Mar 2008 09:38:07 +0000"/>
                            <attachment id="12377590" name="SOLR-350-jsp-fixes.patch" size="4244" author="shalinmangar" created="Tue, 11 Mar 2008 09:30:02 +0000"/>
                            <attachment id="12386546" name="solr-350-properties.patch" size="38598" author="henrib" created="Mon, 21 Jul 2008 18:14:33 +0100"/>
                            <attachment id="12377172" name="solr-350.patch" size="26216" author="henrib" created="Wed, 5 Mar 2008 14:35:47 +0000"/>
                            <attachment id="12377081" name="solr-350.patch" size="30029" author="henrib" created="Tue, 4 Mar 2008 13:12:56 +0000"/>
                            <attachment id="12376903" name="solr-350.patch" size="87776" author="henrib" created="Sat, 1 Mar 2008 16:12:56 +0000"/>
                            <attachment id="12376741" name="solr-350.patch" size="84510" author="henrib" created="Thu, 28 Feb 2008 16:06:53 +0000"/>
                            <attachment id="12376679" name="solr-350.patch" size="70534" author="ryantxu" created="Wed, 27 Feb 2008 23:26:44 +0000"/>
                            <attachment id="12374625" name="solr-350.patch" size="68429" author="ryantxu" created="Sun, 3 Feb 2008 03:13:00 +0000"/>
                            <attachment id="12373859" name="solr-350.patch" size="70474" author="ryantxu" created="Wed, 23 Jan 2008 19:13:48 +0000"/>
                            <attachment id="12373818" name="solr-350.patch" size="62869" author="henrib" created="Wed, 23 Jan 2008 11:09:45 +0000"/>
                            <attachment id="12373098" name="solr-350.patch" size="68415" author="henrib" created="Mon, 14 Jan 2008 16:27:05 +0000"/>
                            <attachment id="12372044" name="solr-350.patch" size="62338" author="henrib" created="Thu, 20 Dec 2007 22:03:34 +0000"/>
                            <attachment id="12372035" name="solr-350.patch" size="57803" author="henrib" created="Thu, 20 Dec 2007 18:57:01 +0000"/>
                            <attachment id="12372025" name="solr-350.patch" size="55532" author="henrib" created="Thu, 20 Dec 2007 15:29:05 +0000"/>
                            <attachment id="12371435" name="solr-350.patch" size="5299" author="henrib" created="Tue, 11 Dec 2007 14:27:43 +0000"/>
                            <attachment id="12371433" name="solr-350.patch" size="1385" author="henrib" created="Tue, 11 Dec 2007 13:58:53 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 10 Sep 2007 17:59:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7243</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxrvb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20834</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>