<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:21:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-921/SOLR-921.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-921] SolrResourceLoader must cache short name vs fully qualified name</title>
                <link>https://issues.apache.org/jira/browse/SOLR-921</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;every class that is loaded through SolrResourceLoader does a Class.forName() and when if it is not found a ClassNotFoundExcepton is thrown&lt;/p&gt;

&lt;p&gt;Then , it looks up with the various packages and finds the right class if the name starts with solr. Considering the fact that we usually use this solr.&amp;lt;classname&amp;gt; format we pay too much of a price for this. After every lookup the result can be cached in a static Map&amp;lt;String, String&amp;gt; with short name as keys and fully qualified name as values and can be shared across all the cores and this Map can be stored at the CoreContainer level.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12410774">SOLR-921</key>
            <summary>SolrResourceLoader must cache short name vs fully qualified name</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shalinmangar">Shalin Shekhar Mangar</assignee>
                                    <reporter username="noble.paul">Noble Paul</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Dec 2008 09:24:06 +0000</created>
                <updated>Tue, 10 Nov 2009 15:51:53 +0000</updated>
                            <resolved>Wed, 18 Feb 2009 06:54:45 +0000</resolved>
                                                    <fixVersion>1.4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12656948" author="noble.paul" created="Tue, 16 Dec 2008 10:42:17 +0000"  >&lt;p&gt;SolrResourceLoader is modified to load classes and cache them if they are not loaded by the $&lt;/p&gt;
{solr.home}/lib classloader&lt;br/&gt;
&lt;br/&gt;
We need the caching where we use Solr specific classes which are not found in ${solr.home}
&lt;p&gt;/lib  and we access them using solr.&amp;lt;classname&amp;gt; usually&lt;/p&gt;</comment>
                            <comment id="12658312" author="hossman" created="Sat, 20 Dec 2008 19:02:58 +0000"  >&lt;p&gt;if i understand correctly, the goal here is to reduce the number of Class.forName calls on the same &quot;cname&quot; once we&apos;ve already retrieved an instance of a class using that cname, and the patch does this by caching in a static map from cname=&amp;gt;Class&lt;/p&gt;

&lt;p&gt;two things concern me about this...&lt;/p&gt;

&lt;p&gt;1) the first time findClass(&quot;solr.FooBarBaz&quot;, &quot;yak&quot;, &quot;wak&quot;) is called the patched code could make at most three Class.forName calls (&quot;solr.FooBarBaz&quot;, &quot;yak.FooBarBaz&quot;, &quot;wak.FooBarBaz&quot;).  assume &quot;wak.FooBarBaz&quot; winds up being the true class name that acutally get&apos;s loaded.  the next time someone calls findClass(&quot;solr.FooBarBaz&quot;, &quot;yak&quot;, &quot;wak&quot;) no calls to Class.forName are made because &quot;solr.FooBarBaz&quot; is found in the cache.  The problem comes up when a call is made to  findClass(&quot;solr.FooBarBaz&quot;, &quot;xxxxx&quot;, &quot;yyyyy&quot;) ... &quot;wak.FooBarBaz&quot; is returned from the cache, even though that package wasn&apos;t even on the list of packages hte client was interested in.  if we&apos;re going to cache these results, the full arg list needs to be the cache key&lt;/p&gt;

&lt;p&gt;2) the cache is a static map in the SolrResourceLoader class.  unless i&apos;m mistaken, there&apos;s only going to be a single instance of that for the entire Solr app (SolrResourceLoader will be loaded by the main/parent loader) which means that cache will cause Class object references to bleed over from one SolrCore to another (ie: i have a FooBarBaz plugin in my core1 lib, and that&apos;s different then the FooBarBaz plugin in core2 (or a differnet version).  Changing the cacche to just be an instance variable of SolrResourceLoader should solve this ... there&apos;s only one SolrResourceLoader per core (right?)&lt;/p&gt;
</comment>
                            <comment id="12658754" author="noble.paul" created="Tue, 23 Dec 2008 05:30:05 +0000"  >&lt;p&gt;The patch currently caches the result only if the default set of packages are used . If you pass an extra list of package names , then the result is not cached.  The ideal solution is to consider the package names also in the key . I have ignored those usecases for simplicity. I have also ignored cases where classes are loaded by parent classloader. Ideally the classloader also must be considered for making the key for the cache . &lt;/p&gt;

&lt;p&gt;This is useful when cores are loaded/unloaded very frequently and there are a large number of cores (tens of thousands) . In other cases the perf benefits are negligible. &lt;/p&gt;

&lt;p&gt;When loading plugins they are rarely loaded using the solr.&amp;lt;cname&amp;gt; .If we use a fully qualified name then the ClassNotFoundExceptions are not thrown and the cost is low and not worth optimizing.   So I have ignored all such cases &lt;/p&gt;

&lt;p&gt;Caching the classes on a SolrResopurceLoader instance level means one core cannot benefit from the &apos;learnings&apos; of another core.&lt;/p&gt;


</comment>
                            <comment id="12666432" author="shalinmangar" created="Fri, 23 Jan 2009 07:03:41 +0000"  >&lt;p&gt;Hoss, the use-case is for a server with very large number of cores with cores being loaded/unloaded all the time.&lt;/p&gt;

&lt;p&gt;For your concern #1 &amp;#8211; The code does not cache if the package list passed to the method is different from the default list of packages (which are always loaded by the webapp classloader. So these can be shared by all cores.&lt;/p&gt;

&lt;p&gt;On #2 &amp;#8211; When you put custom classes in $solr_home/lib, they have different packages from Solr&apos;s own packages. So one would most likely put the fully qualified class name. In that case the caching won&apos;t happen.&lt;/p&gt;

&lt;p&gt;The only problem right now is that if you want to override a class supplied by Solr by adding a jar to the $solr_home/lib, it won&apos;t take precedence. This can be fixed easily before we commit.&lt;/p&gt;</comment>
                            <comment id="12667657" author="noble.paul" created="Tue, 27 Jan 2009 12:03:01 +0000"  >
&lt;p&gt;do a &lt;br/&gt;
Class c = Class.forName(&quot;cname&quot;,this.classLoader) &lt;br/&gt;
//and if the &lt;br/&gt;
classloader == SolrResourceLoader.class.getClassLoader()  &lt;br/&gt;
//then cache it&lt;/p&gt;</comment>
                            <comment id="12668146" author="shalinmangar" created="Wed, 28 Jan 2009 20:34:39 +0000"  >&lt;p&gt;Hoss, the latest patch fixes the issue I noted. Do you still see any problems with the idea/patch?&lt;/p&gt;</comment>
                            <comment id="12669795" author="hossman" created="Mon, 2 Feb 2009 23:18:53 +0000"  >&lt;p&gt;Looking at the latest patch, I now see the restriction that the cache is only used if the packages being searched are the default list.  I also see the new addition that only stores in the cache if the classloader used is the same as that of the SolrResourceLoader (to prevent bleed over from one core to another).  &lt;/p&gt;

&lt;p&gt;But honestly: the whole idea of tricks like this seems overly risky to me considering how easy it is to get into &quot;classloader hell&quot; with java.  &lt;/p&gt;

&lt;p&gt;Does anyone have any profiling info they can share showing that this patch actually improves performance in any particular usecases? (without adversely affecting it in the common use cases)&lt;/p&gt;

&lt;p&gt;Even if the package searching behavior of SolrResourceLoader really is that expensive, then I&apos;d rather encourage people to stop using the solr.* aliasing and start explicitly using FQN for classes.  I can&apos;t imagine Class.findClass on an already initialized classname is measurably slower then pulling a class instance out of this cache.&lt;/p&gt;

&lt;p&gt;(The short names were designed just to make the example configs easier to read, but if people in high load environments where cores are added/removed all the time find the package alias resolution to be prohibitively expensive on core initialization, then just don&apos;t use that that syntactic feature)&lt;/p&gt;

&lt;p&gt;If someone has numbers showing that the cache really is faster even when specifying FQNs in the configs, then I&apos;d be convinced, but otherwise ..... ugh, ... it just seems like a bad idea to go down this road.&lt;/p&gt;</comment>
                            <comment id="12669864" author="noble.paul" created="Tue, 3 Feb 2009 03:52:39 +0000"  >&lt;p&gt;We have a usecase where we load/unload tens of 1000&apos;s (yes tens of  1000s) of cores at runtime (and we have 10&apos;s of millions of cores spread across a farm of servers). We have identified this in profiling that this cost is indeed significant (among other things &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-919&quot; title=&quot;Cache and reuse the SolrConfig&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-919&quot;&gt;&lt;del&gt;SOLR-919&lt;/del&gt;&lt;/a&gt; , &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-920&quot; title=&quot;Cache and reuse IndexSchema&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-920&quot;&gt;&lt;del&gt;SOLR-920&lt;/del&gt;&lt;/a&gt; ). &lt;/p&gt;

&lt;p&gt;As you said using FQN may obviate most of the problems. &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;But my question is , are we saying this fix is too complex and hard to understand? Or is it the &quot;fear of the unknown&quot; that is holding us back?&lt;/li&gt;
	&lt;li&gt;What are the failure cases?&lt;/li&gt;
	&lt;li&gt;The package names of all the classes we use in solrconfig/schema is never advertised. Though the users can figure it out, with some work , isn&apos;t it better to just solve it once and for all if it is a correct fix.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12671727" author="noble.paul" created="Mon, 9 Feb 2009 04:44:47 +0000"  >&lt;p&gt;here are the numbers&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
before optimization
-----------------------------
core load x 13, 1313 calls, 442ms 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12672678" author="noble.paul" created="Wed, 11 Feb 2009 17:00:24 +0000"  >&lt;p&gt;afterall , we may not need to cache the classes themselves. Loading classes with FQN is as fast as a HashMap lookup after the class is loaded . So we can just cache short-name -&amp;gt; FQN and we are still fine.&lt;/p&gt;</comment>
                            <comment id="12672944" author="shalinmangar" created="Thu, 12 Feb 2009 10:30:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;afterall , we may not need to cache the classes themselves. Loading classes with FQN is as fast as a HashMap lookup after the class is loaded . So we can just cache short-name -&amp;gt; FQN and we are still fine.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this is a much better approach. No danger of leaking class references. The correct one will always be loaded.&lt;/p&gt;

&lt;p&gt;Hoss, what do you think about this?&lt;/p&gt;</comment>
                            <comment id="12673089" author="hossman" created="Thu, 12 Feb 2009 23:28:05 +0000"  >
&lt;blockquote&gt;&lt;p&gt;But my question is , are we saying this fix is too complex and hard to understand? Or is it the &quot;fear of the unknown&quot; that is holding us back?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My main concerns are: &lt;br/&gt;
1) that caching classes adds complexity to solve a performance problem that could/should easily be avoidable by config change (using FQN instead of aliases)&lt;br/&gt;
2) I am in fact scared that caching classes &lt;b&gt;may&lt;/b&gt; have unexpected adverse behavior in atypical JVMs/servlet containers that we aren&apos;t familiar with ... mucking with class loading is something that&apos;s notoriously problematic, so i&apos;d prefer we get involved in it only as a matter of last resort&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The package names of all the classes we use in solrconfig/schema is never advertised.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;First off: i don&apos;t think that really true. the example configs may never refer to the full name, but every place we document classes on the wiki we link to their javadcos with full names, and we do have a  comment in the example configs explaining what full packages the &quot;solr.*&quot;  prefix is an alias for.  &lt;/p&gt;

&lt;p&gt;The aliasing feature was introduced early on to help the readability of the configs, and initially had essentially 0 cost (because the aliasing resolution was only done once at server startup).  Documenting that people who deal with a high rate of core creation should avoid using the aliases (on the CoreAdmin page perhaps) and better advertising the full names of every class seems like a much simpler, risk free, solution.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So we can just cache short-name -&amp;gt; FQN and we are still fine.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Eh.  &lt;/p&gt;

&lt;p&gt;I&apos;m still in favor of just documenting that people who want to create cores quickly should use the FQNs &amp;#8211; especially since it keeps the code simpler &amp;#8211; but i&apos;m not opposed to caching the String-&amp;gt;String mappings if you guys really think that&apos;s better.&lt;/p&gt;
</comment>
                            <comment id="12673136" author="shalinmangar" created="Fri, 13 Feb 2009 04:08:10 +0000"  >&lt;p&gt;Hoss, my concerns are:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;People may not even know that using the short name has a cost and they will come to accept it, unless they check the wiki.&lt;/li&gt;
	&lt;li&gt;Even if someone wants to change his schema.xml and solrconfig.xml to use FQN, I see that as a time consuming non-trivial effort.&lt;/li&gt;
	&lt;li&gt;The classloader caches the FQN vs Class. It is the negative lookups which are costly because firstly, they are not cached and secondly, Solr&apos;s retry logic is based on ClassNotFoundException being thrown.&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;I&apos;m still in favor of just documenting that people who want to create cores quickly should use the FQNs - especially since it keeps the code simpler - but i&apos;m not opposed to caching the String-&amp;gt;String mappings if you guys really think that&apos;s better.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I really think this is a good solution. No more mucking around with the classloader. It solves the original problem well (i.e. subsequent instantiation can use the FQN which is fast) and the code is simpler to understand too. If there are no objections, I&apos;d like to commit this new patch tomorrow.&lt;/p&gt;</comment>
                            <comment id="12673456" author="hossman" created="Sat, 14 Feb 2009 02:09:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d like to commit this new patch tomorrow.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;after sleeping on it last night I realized caching the String mappings from alias-&amp;gt;FQN is a good idea, for the same reasons you mentioned &amp;#8211; but let me ask you for three favors before you commit: &lt;/p&gt;

&lt;p&gt;1) let&apos;s add some comments in the javadocs to SolrResourceLoader.findClass noting that it does this caching, and go into some specifics ... particularly the fact that the cache is static.&lt;/p&gt;

&lt;p&gt;2) ditto for elaborating on the SolrReesourceLoader.loadClass javadocs - the whole this.getClass().getClassLoader thing is going to be fairly non-intuitive, and right now it just refers to &quot;base classloader&quot; ...let&apos;s make sure future developers looking at the docs understand why it does what it does&lt;/p&gt;

&lt;p&gt;3) let&apos;s change the warning if a cached class name triggers a ClassNotFound to be a severe error and log the stack trace, stuff that should never happen is the stuff you really want to know about if somehow it magically does.&lt;/p&gt;</comment>
                            <comment id="12673471" author="noble.paul" created="Sat, 14 Feb 2009 05:54:00 +0000"  >&lt;p&gt;Hi Hoss, will do , all three&lt;/p&gt;</comment>
                            <comment id="12673789" author="noble.paul" created="Mon, 16 Feb 2009 04:56:24 +0000"  >&lt;p&gt;with javadocs and the code is simplified&lt;/p&gt;</comment>
                            <comment id="12674491" author="shalinmangar" created="Wed, 18 Feb 2009 06:54:45 +0000"  >&lt;p&gt;Committed revision 745394.&lt;/p&gt;

&lt;p&gt;Thanks Noble and Hoss!&lt;/p&gt;</comment>
                            <comment id="12775611" author="gsingers" created="Tue, 10 Nov 2009 15:51:53 +0000"  >&lt;p&gt;Bulk close for Solr 1.4&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12430758">SOLR-1293</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12400263" name="SOLR-921.patch" size="3390" author="noble.paul" created="Mon, 16 Feb 2009 04:56:24 +0000"/>
                            <attachment id="12400023" name="SOLR-921.patch" size="3489" author="noble.paul" created="Wed, 11 Feb 2009 17:00:24 +0000"/>
                            <attachment id="12398811" name="SOLR-921.patch" size="3053" author="noble.paul" created="Tue, 27 Jan 2009 12:03:01 +0000"/>
                            <attachment id="12396180" name="SOLR-921.patch" size="2685" author="noble.paul" created="Tue, 16 Dec 2008 10:42:17 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 20 Dec 2008 19:02:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6712</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxodz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20270</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>