<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:16:06 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-908/SOLR-908.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-908] Port of Nutch  CommonGrams filter to Solr</title>
                <link>https://issues.apache.org/jira/browse/SOLR-908</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;Phrase queries containing common words are extremely slow.  We are reluctant to just use stop words due to various problems with false hits and some things becoming impossible to search with stop words turned on. (For example &quot;to be or not to be&quot;, &quot;the who&quot;, &quot;man in the moon&quot; vs &quot;man on the moon&quot; etc.)  &lt;/p&gt;

&lt;p&gt;Several postings regarding slow phrase queries have suggested using the approach used by Nutch.  Perhaps someone with more Java/Solr experience might take this on.&lt;/p&gt;

&lt;p&gt;It should be possible to port the Nutch CommonGrams code to Solr  and create a suitable Solr FilterFactory so that it could be used in Solr by listing it in the Solr schema.xml.&lt;/p&gt;

&lt;p&gt;&quot;Construct n-grams for frequently occuring terms and phrases while indexing. Optimize phrase queries to use the n-grams. Single terms are still indexed too, with n-grams overlaid.&quot;&lt;br/&gt;
&lt;a href=&quot;http://lucene.apache.org/nutch/apidocs-0.8.x/org/apache/nutch/analysis/CommonGrams.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://lucene.apache.org/nutch/apidocs-0.8.x/org/apache/nutch/analysis/CommonGrams.html&lt;/a&gt;&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12410517">SOLR-908</key>
            <summary>Port of Nutch  CommonGrams filter to Solr</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                    <reporter username="tbw">Tom Burton-West</reporter>
                        <labels>
                    </labels>
                <created>Thu, 11 Dec 2008 20:36:29 +0000</created>
                <updated>Thu, 2 May 2013 03:29:21 +0100</updated>
                            <resolved>Wed, 23 Sep 2009 00:02:24 +0100</resolved>
                                                    <fixVersion>1.4</fixVersion>
                                    <component>Schema and Analysis</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="12695637" author="tburtonwest" created="Sat, 4 Apr 2009 00:06:21 +0100"  >&lt;p&gt;Attached is my first cut at a port of the Nutch CommonGrams filter to Solr.   I still need to write tests for CommonGramsFilterFactory and CommonGramsQueryFilterFactory.  Nutch had a method call to optimize phrase queries.  For Solr I just wrote CommonGramsQueryFilter for handling queries.   Preliminary tests with a relatively small* index of 100,000 full-text documents (index size 44GB, about  30% larger than the index without commongrams)  indicate about 10x decrease in response times for phrase queries.   &lt;/p&gt;

&lt;p&gt;This post by Hoss was extremely helpful as was his suggestion to use the Solr BufferedTokenStream  as a base class:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Re%3A-Index---search-questions--special-cases-p7344056.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Re%3A-Index---search-questions--special-cases-p7344056.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Here is an example schema.xml entry&lt;br/&gt;
&amp;lt;fieldType name=&quot;ocrCommon&quot; class=&quot;solr.TextField&quot; positionIncrementGap=&quot;100&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;analyzer type=&quot;index&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.WhitespaceTokenizerFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.CommonGramsFilterFactory&quot;  words=&quot;commonwords.txt&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;/analyzer&amp;gt;&lt;br/&gt;
      &amp;lt;analyzer type=&quot;query&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;tokenizer class=&quot;solr.WhitespaceTokenizerFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;filter class=&quot;solr.CommonGramsQueryFilterFactory&quot;  words=&quot;commonwords.txt&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;/analyzer&amp;gt;&lt;br/&gt;
    &amp;lt;/fieldType&amp;gt; &lt;/p&gt;

&lt;p&gt;Tom Burton-West&lt;br/&gt;
University of Michigan Library&lt;br/&gt;
-----------------------------------&lt;br/&gt;
*We are working on indexing 1-6 million full-text documents. Our current 1 million document index is about 235GB,  so in our context 100,000 docs is relatively small.&lt;/p&gt;

&lt;p&gt;The files in CommonGramsPort.zip are:&lt;br/&gt;
CommonGramsFilter.java  &lt;br/&gt;
CommonGramsFilterTest.java    &lt;br/&gt;
CommonGramsFilterFactory.java &lt;br/&gt;
CommonGramsQueryFilter.java   &lt;br/&gt;
CommonGramsQueryFilterFactory.java   &lt;br/&gt;
CommonGramsQueryFilterTest.java   &lt;br/&gt;
TestCommonGrams.java     (Non-junit test for input on STDIN)&lt;/p&gt;

</comment>
                            <comment id="12723288" author="tburtonwest" created="Tue, 23 Jun 2009 21:24:30 +0100"  >&lt;p&gt;Attached is a patch which includes the code and unit tests for CommonGramsFilterFactory and CommonGramsQueryFilterFactory as well as the doce and  unit tests for CommonGramsFilter and CommonGramsQueryFilter.&lt;/p&gt;</comment>
                            <comment id="12723418" author="otis" created="Wed, 24 Jun 2009 04:47:46 +0100"  >&lt;p&gt;I took a super quick look and noticed:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;not all classes have ASL (I think unit test classes need it, too)&lt;/li&gt;
	&lt;li&gt;Mentions of Copyright 2009, The Regents of The University of Michigan.  I have a feeling this would need to be removed&lt;/li&gt;
	&lt;li&gt;@author and @version. I know we remove @author lines, and I&apos;m not sure if @version is really desired&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Looks like a very thorough and complete patch, but I haven&apos;t tried it yet.&lt;/p&gt;</comment>
                            <comment id="12726105" author="tburtonwest" created="Wed, 1 Jul 2009 16:18:55 +0100"  >&lt;p&gt;Thanks Otis.   I&apos;ll add the ASL and remove the @author and @version.  I must have misunderstood the ASL regarding copyright.  I&apos;ll go ahead and remove the UMich copyright statements as well.   Should I also remove the TODO&apos;s in the comments?&lt;/p&gt;

&lt;p&gt;Tom &lt;/p&gt;</comment>
                            <comment id="12726209" author="otis" created="Wed, 1 Jul 2009 21:07:01 +0100"  >&lt;p&gt;Thanks Tom.  TODOs are good reminders, so I&apos;d say leave them.&lt;/p&gt;</comment>
                            <comment id="12726695" author="hossman" created="Thu, 2 Jul 2009 22:44:32 +0100"  >
&lt;p&gt;FWIW: There are some decently readable docs from the legal team about this topic...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.apache.org/legal/src-headers.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/legal/src-headers.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12736147" author="tburtonwest" created="Tue, 28 Jul 2009 18:14:37 +0100"  >&lt;p&gt;Cleaned up patch.&lt;/p&gt;

&lt;p&gt;ASF license now included in all files. &lt;br/&gt;
Umich copyright statements removed&lt;br/&gt;
Removed author and revision tags&lt;br/&gt;
Cleaned up code and reformatted using Solr Eclipse codestyle&lt;/p&gt;</comment>
                            <comment id="12736208" author="jasonrutherglen" created="Tue, 28 Jul 2009 19:35:51 +0100"  >&lt;p&gt;Great Tom!&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Can we add a flag to not return the actual stop words? (I know&lt;br/&gt;
we could add a StopWordFilter after, however it seems redundant?)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;CommonGramsFilter.ArrayTokens is not used?&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12736314" author="jasonrutherglen" created="Tue, 28 Jul 2009 22:30:11 +0100"  >&lt;ul&gt;
	&lt;li&gt;Added an includeCommon flag which when false, does not return&lt;br/&gt;
common words in the token stream&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Removed static stop words, we refer to&lt;br/&gt;
StopAnalyzer.ENGLISH_STOP_WORDS&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Needs test cases for includeCommon&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Maybe there&apos;s more redundant code that can be removed or&lt;br/&gt;
adjusted?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can we change this to be a fix for 1.4?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12736322" author="jasonrutherglen" created="Tue, 28 Jul 2009 22:41:21 +0100"  >&lt;p&gt;Sorry, patch without the patch inlined!&lt;/p&gt;</comment>
                            <comment id="12736800" author="tburtonwest" created="Wed, 29 Jul 2009 21:27:23 +0100"  >&lt;p&gt;Hi Jason,&lt;/p&gt;


&lt;p&gt;Thanks for the contribution.  I applied the patch to the latest Solr and the QueryFilter tests failed (see below).  Perhaps something is wrong with my configuration. Did they pass for you.?&lt;/p&gt;

&lt;p&gt;I&apos;ll dig in to this tomorrow.&lt;/p&gt;

&lt;p&gt;Tom. &lt;/p&gt;

&lt;p&gt;TEST-org.apache.solr.analysis.CommonGramsQueryFilterTest.xml:&amp;lt;testsuite errors=&quot;0&quot; failures=&quot;17&quot; hostname=&quot;ULIB-LIT0602&quot;&lt;br/&gt;
 name=&quot;org.apache.solr.analysis.CommonGramsQueryFilterTest&quot; tests=&quot;22&quot; time=&quot;0.453&quot; timestamp=&quot;2009-07-29T19:49:24&quot;&amp;gt;&lt;br/&gt;
TESTS-TestSuites.xml:  &amp;lt;testsuite errors=&quot;0&quot; failures=&quot;17&quot; hostname=&quot;ULIB-LIT0602&quot; id=&quot;12&quot; name=&quot;CommonGramsQueryFilterT&lt;br/&gt;
est&quot; package=&quot;org.apache.solr.analysis&quot; tests=&quot;22&quot; time=&quot;0.453&quot; timestamp=&quot;2009-07-29T19:49:24&quot;&amp;gt;&lt;br/&gt;
bash-3.2$&lt;/p&gt;</comment>
                            <comment id="12736960" author="jasonrutherglen" created="Thu, 30 Jul 2009 03:13:53 +0100"  >&lt;p&gt;I&apos;ll post a new patch tomorrow, essentially nothing is changing,&lt;br/&gt;
just cleaned up some of the code. Adding StopFilterFactory at&lt;br/&gt;
the end of the analyzer chain performed the same function as&lt;br/&gt;
includeCommon=false with no performance difference. &lt;/p&gt;</comment>
                            <comment id="12737309" author="tburtonwest" created="Thu, 30 Jul 2009 22:46:49 +0100"  >&lt;p&gt;Thanks for cleaning up the code.&lt;/p&gt;

&lt;p&gt;I found the problem that was causing the CommonGramsQueryFilter test to fail.  CommonGramsQueryFilter checks for token type = &quot;gram&quot;.  Since the patch changed the type to &quot;shingle&quot;  in CommonGramsFilter,, the same change has to be made in CommonGramsQueryFilter.&lt;/p&gt;

&lt;p&gt;I&apos;m suprised that adding StopFilterFactory to the end of the filter change doesn&apos;t affect performance.   I&apos;ll wait for your new patch before proceeding.&lt;/p&gt;

&lt;p&gt;BTW  you asked &amp;gt;&amp;gt;Can we change this to be a fix for 1.4?&lt;br/&gt;
I&apos;d love to, but don&apos;t the committers make that decision?  How do we do that?&lt;/p&gt;

&lt;p&gt;Tom&lt;/p&gt;
</comment>
                            <comment id="12737327" author="shalinmangar" created="Thu, 30 Jul 2009 23:09:29 +0100"  >&lt;blockquote&gt;
&lt;p&gt;BTW you asked &amp;gt;&amp;gt;Can we change this to be a fix for 1.4?&lt;br/&gt;
I&apos;d love to, but don&apos;t the committers make that decision? How do we do that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Considering that:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The issue is old and a patch has been here in one form or another since April&lt;/li&gt;
	&lt;li&gt;We have ample time before 1.4 release&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I see no reason why it can&apos;t be committed for 1.4. Otis, since you have looked at this in the past, will you take this up? Or, I can try to have a look this weekend.&lt;/p&gt;
</comment>
                            <comment id="12737332" author="jasonrutherglen" created="Thu, 30 Jul 2009 23:22:07 +0100"  >&lt;p&gt;We ran an indexing performance test with CommonGramFilter and a&lt;br/&gt;
heavily modified/optimized filter state machine from the book&lt;br/&gt;
Building Search Applications that does not emit stop words. I&lt;br/&gt;
tried to change CommonGramFilter to not emit stop words, however&lt;br/&gt;
BufferedTokenStream seems to only move forwards.&lt;/p&gt;

&lt;p&gt;CommonGramFilter was 10% faster with the StopWordsFilter at the&lt;br/&gt;
end of the chain compared with the book&apos;s version. The book has&lt;br/&gt;
a GNU license for it&apos;s code so I cannot post it here.&lt;/p&gt;

&lt;p&gt;The attached patch just cleans up a few things.  Perhaps more of&lt;br/&gt;
the test code can be shared?&lt;/p&gt;

&lt;p&gt;To mark the issue as 1.4 you&apos;d edit it, change affected version&lt;br/&gt;
to 1.3, fix version to 1.4. &lt;/p&gt;
</comment>
                            <comment id="12737845" author="otis" created="Sat, 1 Aug 2009 08:27:03 +0100"  >&lt;p&gt;I won&apos;t get to it before going on vacation.  Assigning to you if you want it.&lt;/p&gt;</comment>
                            <comment id="12740506" author="shalinmangar" created="Fri, 7 Aug 2009 12:14:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;Perhaps more of the test code can be shared?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can&apos;t we use BaseTokenTestCase&apos;s helper methods?&lt;/p&gt;</comment>
                            <comment id="12740689" author="jasonrutherglen" created="Fri, 7 Aug 2009 20:48:42 +0100"  >&lt;ul&gt;
	&lt;li&gt;Cleaned up more&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Consolidated the test classes into one&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Formatting in CHANGES.txt for 66 seemed off, fixed it&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I didn&apos;t see how we could use BaseTokenTestCase&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12742657" author="jasonrutherglen" created="Thu, 13 Aug 2009 00:43:31 +0100"  >&lt;p&gt;I&apos;ll add resuableToken support to this patch.&lt;/p&gt;</comment>
                            <comment id="12742679" author="jasonrutherglen" created="Thu, 13 Aug 2009 03:07:54 +0100"  >&lt;p&gt;Tom,&lt;/p&gt;

&lt;p&gt;Is it our intention to support phrase queries with slop?  I&apos;m not sure this works?&lt;/p&gt;</comment>
                            <comment id="12742959" author="tburtonwest" created="Thu, 13 Aug 2009 22:02:13 +0100"  >&lt;p&gt;Hi Jason,&lt;/p&gt;

&lt;p&gt;Thanks for all your work on this. &lt;/p&gt;

&lt;p&gt;I would be inclined to not deal with supporting slop at this point.  &lt;/p&gt;

&lt;p&gt;I guess slop of more than 0 will work as long as the query matches the commongrams exactly.  (so each commongram gets treated as one token for calculating slop).  Otherwise it would seem that you would have to generate commongrams for each combination of a common word and words n edit distance away to support a slop of n.  At least for our use case, the increase in the size of the index would not be worth it.  &lt;/p&gt;

&lt;p&gt;Tom&lt;/p&gt;
</comment>
                            <comment id="12743460" author="jasonrutherglen" created="Fri, 14 Aug 2009 22:45:55 +0100"  >&lt;p&gt;Tom,&lt;/p&gt;

&lt;p&gt;I&apos;ll add in the javadocs that if a phrase has a stop word, slop will not work.&lt;/p&gt;</comment>
                            <comment id="12746964" author="jasonrutherglen" created="Mon, 24 Aug 2009 18:29:07 +0100"  >&lt;p&gt;I&apos;m reworking BufferedTokenStream to use the new token API. It&lt;br/&gt;
seems like caching tokens goes against the way the new token api&lt;br/&gt;
works. Is there an example to follow, it seems like we&apos;re&lt;br/&gt;
allocating objects per gram (which is what we&apos;re trying to&lt;br/&gt;
avoid?). &lt;/p&gt;</comment>
                            <comment id="12747632" author="jasonrutherglen" created="Tue, 25 Aug 2009 21:53:53 +0100"  >&lt;p&gt;There seems to be a bug in CommonGramsQueryFilterFactory where the last word of a non common word query is removed.  I&apos;m going to fix it and check in a new patch.&lt;/p&gt;</comment>
                            <comment id="12748423" author="tburtonwest" created="Thu, 27 Aug 2009 17:21:21 +0100"  >&lt;p&gt;Hi Jason,&lt;/p&gt;

&lt;p&gt;If the last non-common word in a query is part of the previous common-gram then it gets removed by design.  &lt;br/&gt;
i.e.    query=&quot; see the hat&quot;  query filter output should be |see-the|the-hat|&lt;/p&gt;

&lt;p&gt;Is this a different case?  The test cases should have caught the bug.  Maybe we need to add a few more test cases. Could you send me a test case that shows the bug?  &lt;/p&gt;

&lt;p&gt;Tom&lt;/p&gt;</comment>
                            <comment id="12748478" author="jasonrutherglen" created="Thu, 27 Aug 2009 18:54:19 +0100"  >&lt;p&gt;I changed: if (prev != null &amp;amp;&amp;amp; prev.type() != &quot;gram&quot;) from&lt;br/&gt;
checking for &quot;word&quot; which when a token was created from&lt;br/&gt;
StandardFilter, would be of type &quot;&amp;lt;ALPHANUM&amp;gt;&quot; and was being&lt;br/&gt;
discarded. This was causing at least one of the bugs, though&lt;br/&gt;
there may be another.&lt;/p&gt;</comment>
                            <comment id="12748639" author="jasonrutherglen" created="Fri, 28 Aug 2009 02:39:41 +0100"  >&lt;p&gt;There is a bug that seems to be related to&lt;br/&gt;
HTMLStripStandardTokenizerFactory where a single word query&lt;br/&gt;
fails to generate a token using the following chain. However a&lt;br/&gt;
StandardTokenizer in it&apos;s place returns a token as expected.&lt;br/&gt;
When &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-908&quot; title=&quot;Port of Nutch  CommonGrams filter to Solr&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-908&quot;&gt;&lt;del&gt;SOLR-908&lt;/del&gt;&lt;/a&gt;.patch was tested with rev 799698, HTMLSSTF worked.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.HTMLStripStandardTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.StandardFilterFactory&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.LowerCaseFilterFactory&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.EnglishPorterFilterFactory&quot;&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt;=&lt;span class=&quot;code-quote&quot;&gt;&quot;stopwords.txt&quot;&lt;/span&gt;/&amp;gt; 
&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.CommonGramsQueryFilterFactory&quot;&lt;/span&gt; words=&lt;span class=&quot;code-quote&quot;&gt;&quot;stopwords.txt&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.StopFilterFactory&quot;&lt;/span&gt; ignoreCase=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; words=&lt;span class=&quot;code-quote&quot;&gt;&quot;stopwords.txt&quot;&lt;/span&gt; enablePositionIncrements=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12753065" author="shalinmangar" created="Wed, 9 Sep 2009 13:48:51 +0100"  >&lt;p&gt;I&apos;ll not be able to look at this before the end of the week, so un-assigning myself.&lt;/p&gt;</comment>
                            <comment id="12755597" author="jasonrutherglen" created="Tue, 15 Sep 2009 18:33:16 +0100"  >&lt;p&gt;Is there a reason this patch is unassigned for 1.4?&lt;/p&gt;</comment>
                            <comment id="12756933" author="jasonrutherglen" created="Fri, 18 Sep 2009 04:12:49 +0100"  >&lt;p&gt;This schema consistently and randomly generates query&lt;br/&gt;
truncations. Perhaps because we&apos;re mixing the new and old&lt;br/&gt;
tokenizing APIs? I can&apos;t figure out what state is being shared&lt;br/&gt;
nor how to debug this. We unfortunately upgraded to Solr 1.4&lt;br/&gt;
trunk and so cannot revert back to 1.3. I wrote a test case that&lt;br/&gt;
has not reproduced the bug locally. The bug happens in a&lt;br/&gt;
distributed environment with 20+ servers. &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;fieldType name=&lt;span class=&quot;code-quote&quot;&gt;&quot;vCommonGrams&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.TextField&quot;&lt;/span&gt; positionIncrementGap=&lt;span class=&quot;code-quote&quot;&gt;&quot;100&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;analyzer type=&lt;span class=&quot;code-quote&quot;&gt;&quot;index&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.HTMLStripStandardTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;  
  &amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.StandardFilterFactory&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.CommonGramsFilterFactory&quot;&lt;/span&gt; ignoreCase=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; words=&lt;span class=&quot;code-quote&quot;&gt;&quot;stopwords.txt&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.StopFilterFactory&quot;&lt;/span&gt; ignoreCase=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; words=&lt;span class=&quot;code-quote&quot;&gt;&quot;stopwords.txt&quot;&lt;/span&gt; enablePositionIncrements=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/analyzer&amp;gt;
  &amp;lt;analyzer type=&lt;span class=&quot;code-quote&quot;&gt;&quot;query&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.StandardTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.StandardFilterFactory&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.CommonGramsQueryFilterFactory&quot;&lt;/span&gt; ignoreCase=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; words=&lt;span class=&quot;code-quote&quot;&gt;&quot;stopwords.txt&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;filter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.StopFilterFactory&quot;&lt;/span&gt; ignoreCase=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; words=&lt;span class=&quot;code-quote&quot;&gt;&quot;stopwords.txt&quot;&lt;/span&gt; enablePositionIncrements=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/analyzer&amp;gt;
&amp;lt;/fieldType&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12756995" author="jasonrutherglen" created="Fri, 18 Sep 2009 07:25:32 +0100"  >&lt;p&gt;It looks like our problem could be due to&lt;br/&gt;
Analyzer.reusableTokenStream and how it reuses tokenstreams from&lt;br/&gt;
a thread local variable. This would explain the random behavior&lt;br/&gt;
(i.e. depending on the thread one was assigned for a query, the&lt;br/&gt;
associated token stream, if it were in an invalid state, would&lt;br/&gt;
return incorrect results). I&apos;m thinking reusableTokenStream can&lt;br/&gt;
be overridden to return a new token stream each time? And so&lt;br/&gt;
bypass whatever reseting issue is occurring from the mixture of&lt;br/&gt;
the old and new tokenizer APIs.&lt;/p&gt;</comment>
                            <comment id="12757267" author="yseeley@gmail.com" created="Fri, 18 Sep 2009 18:04:40 +0100"  >&lt;p&gt;Jason, at a quick look, I see that this filter maintains state, but doesn&apos;t implement reset() - could that be the issue?&lt;/p&gt;</comment>
                            <comment id="12757271" author="rcmuir" created="Fri, 18 Sep 2009 18:15:11 +0100"  >&lt;p&gt;just my opinion, do not think this problem is due to mixed tokenizer APIs (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1919&quot; title=&quot;Analysis back compat break&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-1919&quot;&gt;&lt;del&gt;LUCENE-1919&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;this is because this BufferedTokenStream does not mix the apis that cause that issue... it only uses TokenStream.next()&lt;/p&gt;

&lt;p&gt;i think instead Yonik might be on the right track, could be wrong.&lt;/p&gt;</comment>
                            <comment id="12757344" author="thetaphi" created="Fri, 18 Sep 2009 19:52:04 +0100"  >&lt;p&gt;In my opinion, the problem is BufferedTokenStream (should its name not BufferedTokenFilter?). It has the linked list but does not implement reset(). So the problem is not this issue, more the usage of reset because you reuse the token stream. As long as BufferedTokenStream is not fixed to support reset() you have to create new instances.&lt;/p&gt;</comment>
                            <comment id="12757364" author="rcmuir" created="Fri, 18 Sep 2009 20:18:24 +0100"  >&lt;p&gt;Uwe, i opened an issue for this: &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1446&quot; title=&quot;BufferedTokenStream keeps state, but does not implement reset&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1446&quot;&gt;&lt;del&gt;SOLR-1446&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i think even if not the cause of this problem, BufferedTokenStream should implement reset() since it keeps internal state.&lt;/p&gt;</comment>
                            <comment id="12757381" author="rcmuir" created="Fri, 18 Sep 2009 20:49:52 +0100"  >&lt;p&gt;similar to the BufferedTokenStream reset, the CommonGramsQueryFilter here has its own internal state:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Token prev;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so this filter too should implement reset (and must call super.reset() so the BufferedTokenStream lists get reset too).&lt;/p&gt;</comment>
                            <comment id="12757413" author="jasonrutherglen" created="Fri, 18 Sep 2009 21:59:01 +0100"  >&lt;p&gt;Interesting, the whole reusableTokenStream model is new to me,&lt;br/&gt;
so it wasn&apos;t in my mental view of how Lucene analyzers work. It&lt;br/&gt;
seems if BTS is caching tokens, then being reused, and isn&apos;t&lt;br/&gt;
reset, then there would be excess tokens instead of deletions?&lt;br/&gt;
Or perhaps the reset is being called from another analyzer? It&apos;s&lt;br/&gt;
quite confusing. I started work on a LoggingTokenizer that could&lt;br/&gt;
be inserted between tokenizers in the Solr schema, however have&lt;br/&gt;
been working on reproducing the issue (which hasn&apos;t worked&lt;br/&gt;
either). &lt;/p&gt;

&lt;p&gt;Uwe, Yonik, and Robert, thanks for taking a look! &lt;/p&gt;</comment>
                            <comment id="12757432" author="rcmuir" created="Fri, 18 Sep 2009 22:11:04 +0100"  >&lt;blockquote&gt;
&lt;p&gt;It seems if BTS is caching tokens, then being reused, and isn&apos;t&lt;br/&gt;
reset, then there would be excess tokens instead of deletions?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;right, thats what the test case I added for BufferedTokenStream showed. &lt;br/&gt;
this would be more of a corner case, as i think most BufferedTokenStreams would have empty lists anyway&lt;br/&gt;
by the time they are reset(), so its likely not causing your problem (though it should be fixed!)&lt;/p&gt;

&lt;p&gt;your problem, again is probably the internal state kept in CommonGramsQueryFilter&lt;br/&gt;
as you can see, CommonGramsQueryFilter has hairy logic involving the buffered token &apos;prev&apos;&lt;br/&gt;
a lot of this logic has to do with what happens at end of stream.&lt;/p&gt;

&lt;p&gt;unfortunately there is no reset() for CommonGramsQueryFilter to set &apos;prev&apos; back to its initial state, so when something like QueryParser tries to reuse it, it is probably not behaving correctly. &lt;/p&gt;</comment>
                            <comment id="12757445" author="yseeley@gmail.com" created="Fri, 18 Sep 2009 22:20:37 +0100"  >&lt;p&gt;I guess if something causes an exception during analysis, things like BufferedTokenStream can be left with unwanted state.&lt;br/&gt;
Note that BufferedTokenStream didn&apos;t inherit from TokenFilter and thus wouldn&apos;t automatically chain the reset() to it&apos;s input... so any upstream filters wouldn&apos;t be reset().  I just fixed that.&lt;/p&gt;</comment>
                            <comment id="12757461" author="jasonrutherglen" created="Fri, 18 Sep 2009 22:46:02 +0100"  >&lt;p&gt;Added reset overrides to CommonGramsFilter and CommonGramsQueryFilter.  &lt;/p&gt;</comment>
                            <comment id="12757472" author="rcmuir" created="Fri, 18 Sep 2009 22:58:53 +0100"  >&lt;p&gt;jason, i took a glance. i think the reset() for CommonGramsQueryFilter should not set prev = null&lt;br/&gt;
this is because the initial state is not null:&lt;br/&gt;
in the ctor, prev = new Token() &lt;br/&gt;
with the current logic, this is what reset() must do also.&lt;/p&gt;

&lt;p&gt;also, fyi CommonGramsFilter does not need a reset since the stringbuffer isn&apos;t used to keep state,&lt;/p&gt;

&lt;p&gt;the best way I think to ensure its correct i think, is to add tests that consume and reuse/reset()&lt;/p&gt;</comment>
                            <comment id="12757504" author="jasonrutherglen" created="Sat, 19 Sep 2009 00:06:26 +0100"  >&lt;p&gt;Robert thanks.  I added the new token in CGQF.reset and reset test cases.&lt;/p&gt;</comment>
                            <comment id="12757675" author="yseeley@gmail.com" created="Sat, 19 Sep 2009 17:28:32 +0100"  >&lt;p&gt;I&apos;ve updated the lucene libs to rc5 in trunk - hopefully that, coupled with the recent changes to this patch will eliminate the flakiness.&lt;/p&gt;</comment>
                            <comment id="12757820" author="jasonrutherglen" created="Mon, 21 Sep 2009 05:56:18 +0100"  >&lt;p&gt;Yeah, unfortunately it&apos;s going to be hard to upgrade as folks&lt;br/&gt;
feel a bit burned at this point and reverting to Solr trunk 8/31&lt;br/&gt;
plus the old HTMLStripReader which seems to be more stable than&lt;br/&gt;
the latest Solr builds. I need to reproduce our wacky crazy&lt;br/&gt;
random query truncations, and haven&apos;t yet. I&apos;ll probably try&lt;br/&gt;
creating completely randomized queries in multiple threads and&lt;br/&gt;
see what happens. Without reproducing the problem and showing it&lt;br/&gt;
fixed, upgrading will be difficult to justify. Logically the&lt;br/&gt;
threadlocal reusableTokenStream is the problem, however,&lt;br/&gt;
perception is things got way too broken. &lt;/p&gt;

&lt;p&gt;Also I need to upgrade the patch to use the new tokenizing API.&lt;br/&gt;
I think this belongs in Lucene analyzers rather than in Solr&lt;br/&gt;
anyways, and BufferedTokenStream totally changes with the new&lt;br/&gt;
tokenizing API. Hacking ShingleFilter to only include certain&lt;br/&gt;
words seemed like too much of a rewrite of it. So porting is the&lt;br/&gt;
next task here after hopefully reproducing.&lt;/p&gt;
</comment>
                            <comment id="12758354" author="jasonrutherglen" created="Tue, 22 Sep 2009 19:47:13 +0100"  >&lt;p&gt;Thanks everyone on this, we deployed the latest patch with the latest Solr build and things work now, reliably. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12758388" author="yseeley@gmail.com" created="Tue, 22 Sep 2009 20:34:57 +0100"  >&lt;p&gt;Yay!  I think we could commit this now... any objections/concerns with the latest patch?&lt;/p&gt;</comment>
                            <comment id="12758396" author="shalinmangar" created="Tue, 22 Sep 2009 20:52:53 +0100"  >&lt;blockquote&gt;&lt;p&gt;Yay! I think we could commit this now... any objections/concerns with the latest patch?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Looks good. +1 for commit.&lt;/p&gt;</comment>
                            <comment id="12758403" author="rcmuir" created="Tue, 22 Sep 2009 21:03:12 +0100"  >&lt;p&gt;i&apos;ve been doing some tests, latest patch has been working fine for me.&lt;br/&gt;
i think jason cleared up any remaining reset/reusable issues with this latest patch.&lt;/p&gt;</comment>
                            <comment id="12758472" author="yseeley@gmail.com" created="Wed, 23 Sep 2009 00:02:24 +0100"  >&lt;p&gt;Committed.  Thanks everyone!&lt;/p&gt;</comment>
                            <comment id="12775604" author="gsingers" created="Tue, 10 Nov 2009 15:51:53 +0000"  >&lt;p&gt;Bulk close for Solr 1.4&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12431547">SOLR-1312</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12404608" name="CommonGramsPort.zip" size="14074" author="tburtonwest" created="Sat, 4 Apr 2009 00:06:21 +0100"/>
                            <attachment id="12420100" name="SOLR-908.patch" size="39300" author="jasonrutherglen" created="Sat, 19 Sep 2009 00:06:26 +0100"/>
                            <attachment id="12420085" name="SOLR-908.patch" size="37410" author="jasonrutherglen" created="Fri, 18 Sep 2009 22:46:02 +0100"/>
                            <attachment id="12417904" name="SOLR-908.patch" size="37206" author="jasonrutherglen" created="Thu, 27 Aug 2009 18:54:19 +0100"/>
                            <attachment id="12415879" name="SOLR-908.patch" size="38446" author="jasonrutherglen" created="Fri, 7 Aug 2009 20:48:41 +0100"/>
                            <attachment id="12415065" name="SOLR-908.patch" size="43780" author="jasonrutherglen" created="Thu, 30 Jul 2009 23:22:07 +0100"/>
                            <attachment id="12414808" name="SOLR-908.patch" size="45696" author="jasonrutherglen" created="Tue, 28 Jul 2009 22:41:21 +0100"/>
                            <attachment id="12414805" name="SOLR-908.patch" size="92761" author="jasonrutherglen" created="Tue, 28 Jul 2009 22:30:11 +0100"/>
                            <attachment id="12414768" name="SOLR-908.patch" size="48401" author="tburtonwest" created="Tue, 28 Jul 2009 18:14:37 +0100"/>
                            <attachment id="12411568" name="SOLR-908.patch" size="46712" author="tburtonwest" created="Tue, 23 Jun 2009 21:24:30 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Apr 2009 23:06:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6725</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxogn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20282</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>