<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:23:30 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-435/SOLR-435.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-435] QParser must validate existence/absence of &quot;q&quot; parameter</title>
                <link>https://issues.apache.org/jira/browse/SOLR-435</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;Each QParser should check if &quot;q&quot; exists or not.  For some it will be required others not.&lt;br/&gt;
currently it throws a null pointer:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
java.lang.NullPointerException
	at org.apache.solr.common.util.StrUtils.splitSmart(StrUtils.java:36)
	at org.apache.solr.search.OldLuceneQParser.parse(LuceneQParserPlugin.java:104)
	at org.apache.solr.search.QParser.getQuery(QParser.java:80)
	at org.apache.solr.handler.component.QueryComponent.prepare(QueryComponent.java:67)
	at org.apache.solr.handler.SearchHandler.handleRequestBody(SearchHandler.java:150)
        ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;see:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/query-parsing-error-to14124285.html#a14140108&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/query-parsing-error-to14124285.html#a14140108&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12384531">SOLR-435</key>
            <summary>QParser must validate existence/absence of &quot;q&quot; parameter</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dsmiley">David Smiley</assignee>
                                    <reporter username="ryantxu">Ryan McKinley</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 Dec 2007 22:36:36 +0000</created>
                <updated>Sun, 1 Apr 2012 05:08:08 +0100</updated>
                            <resolved>Sun, 1 Apr 2012 05:08:08 +0100</resolved>
                                    <version>1.3</version>
                                    <fixVersion>3.6</fixVersion>
                    <fixVersion>4.0-ALPHA</fixVersion>
                                    <component>search</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12551149" author="yseeley@gmail.com" created="Wed, 12 Dec 2007 23:08:20 +0000"  >&lt;p&gt;Or more correctly, verify that it&apos;s query string is non-null if it was expecting one and doesn&apos;t have a backup plan or default semantics.&lt;/p&gt;</comment>
                            <comment id="12670664" author="shalinmangar" created="Thu, 5 Feb 2009 08:42:11 +0000"  >&lt;p&gt;Committed revision 741046.&lt;/p&gt;

&lt;p&gt;I have committed Lars&apos;s patch at &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-525&quot; title=&quot;NullPointerException with no query or empty query&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-525&quot;&gt;&lt;del&gt;SOLR-525&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12670769" author="shalinmangar" created="Thu, 5 Feb 2009 15:01:15 +0000"  >&lt;p&gt;Reverting the commit and re-opening the issue.&lt;/p&gt;</comment>
                            <comment id="12674117" author="shalinmangar" created="Tue, 17 Feb 2009 07:29:26 +0000"  >&lt;p&gt;Marked for 1.5&lt;/p&gt;</comment>
                            <comment id="12872421" author="hossman" created="Thu, 27 May 2010 23:04:57 +0100"  >&lt;p&gt;Bulk updating 240 Solr issues to set the Fix Version to &quot;next&quot; per the process outlined in this email...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selection criteria was &quot;Unresolved&quot; with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.&lt;/p&gt;

&lt;p&gt;A unique token for finding these 240 issues in the future: hossversioncleanup20100527&lt;/p&gt;</comment>
                            <comment id="13043801" author="rcmuir" created="Fri, 3 Jun 2011 17:47:09 +0100"  >&lt;p&gt;Bulk move 3.2 -&amp;gt; 3.3&lt;/p&gt;</comment>
                            <comment id="13106250" author="rcmuir" created="Fri, 16 Sep 2011 15:50:14 +0100"  >&lt;p&gt;3.4 -&amp;gt; 3.5&lt;/p&gt;</comment>
                            <comment id="13235020" author="dsmiley" created="Wed, 21 Mar 2012 20:59:27 +0000"  >&lt;p&gt;I&apos;ve always thought it was bad that Solr throws an error if &apos;q&apos; is not specified, and it can be a &quot;WTF&quot; experience to new users unfamiliar with this.  I am aware that dismax has q.alt but that&apos;s separate.  What&apos;s wrong with assuming a match-all docs query of &amp;#42;:&amp;#42;?  It&apos;s better than an error, IMO.&lt;/p&gt;

&lt;p&gt;FYI aside from seeing this from time to time in my own Solr work, the Ajax-Solr framework has a work-around to basically automatically supply q or q.alt with &apos;&amp;#42;:&amp;#42;&apos; in different circumstances, and it&apos;s quite a hack.  You can argue the user should explicitly supply &amp;#42;:&amp;#42; but then if they forget, they get a Solr error.&lt;/p&gt;</comment>
                            <comment id="13237092" author="hossman" created="Fri, 23 Mar 2012 20:39:47 +0000"  >&lt;p&gt;Issue is marked 3.6 and actively being discussed but has no assignee - assigning to most active committer contributing patches/discussion so far to triage wether this can/should be pushed to 4.0 or not.&lt;/p&gt;</comment>
                            <comment id="13237186" author="dsmiley" created="Fri, 23 Mar 2012 22:00:58 +0000"  >&lt;p&gt;Attached is a patch that I&apos;d like to apply on Monday end of day (EST).  My changes.txt is as follows:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-435&quot; title=&quot;QParser must validate existence/absence of &amp;quot;q&amp;quot; parameter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-435&quot;&gt;&lt;del&gt;SOLR-435&lt;/del&gt;&lt;/a&gt;: For the lucene, dismax, and edismax query parsers: if no query string is supplied, or if its blank or just whitespace, then the default is to match all documents.  It used to be an error. This basically means &apos;q&apos; isn&apos;t required and q.alt=&lt;b&gt;:&lt;/b&gt; is redundant. (dsmiley)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I also discovered and fixed a bug in edismax in which a query of pure whitespace threw an error. dismax didn&apos;t do this. It was a trivial fix in which a trim() was forgotten.&lt;/p&gt;

&lt;p&gt;There are many ways to approach addressing this issue with different pros/cons; it was hard to ultimately settle on what I chose to do.  I could have modified QueryComponent, or just QParser, or just the actual QParser subclasses.  A universal choice couldn&apos;t be made for all qparsers because most qparsers don&apos;t even use the query string.  Feedback please! &lt;/p&gt;</comment>
                            <comment id="13237366" author="hossman" created="Sat, 24 Mar 2012 00:53:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;if no query string is supplied, or if its blank or just whitespace, then the default is to match all documents. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;-0 ... the risk with this approach is that (new) users who make typos in queries or are missinformed about the name &quot;q&quot; param (ie: &lt;tt&gt;/search?Q=foo&lt;/tt&gt; or &lt;tt&gt;/search?query=foo&lt;/tt&gt;) will be really confused when they query they specify is completely ignored w/o explanation and all docs are returned in it&apos;s place.  I think it&apos;s much better to throw a clear error &quot;q param is not specified&quot; but i certainly see the value in adding q.alt support to the LuceneQParser with the same semantics as dismax (used if q is missing or all whitespace) .. not sure why we&apos;ve never considered that before.  (obviosly it wouldn&apos;t make sense for all QParsers, like &quot;field&quot; or &quot;term&quot; since all whitespace and or empty strings are totally valid input for them)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I could have modified QueryComponent, or just QParser, or just the actual QParser subclasses. A universal choice couldn&apos;t be made for all qparsers...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;we definitely shouldn&apos;t modify QueryComponent ... the entire point of the issue is that QueryComponent can&apos;t attempt to validate the q param, because it doesn&apos;t know if/when the defType QParser requires it to exist &amp;#8211; the individual QParsers all need to throw clear errors if they require it and it&apos;s not specified, that&apos;s really the whole reason this issue was opened in the first place&lt;/p&gt;</comment>
                            <comment id="13237410" author="cmale" created="Sat, 24 Mar 2012 02:07:05 +0000"  >&lt;blockquote&gt;
&lt;p&gt;we definitely shouldn&apos;t modify QueryComponent ... the entire point of the issue is that QueryComponent can&apos;t attempt to validate the q param, because it doesn&apos;t know if/when the defType QParser requires it to exist &#8211; the individual QParsers all need to throw clear errors if they require it and it&apos;s not specified, that&apos;s really the whole reason this issue was opened in the first place&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If the purpose of the QueryComponent is to be QParser agnostic and consequently unable to know if the &apos;q&apos; parameter is even relevant, shouldn&apos;t it be up to the QParser to retrieve what it believes the query string to be from the request parameters?  Currently QueryComponent assumes the &apos;q&apos; parameter value is the query string, sets that as being the case in the ResponseBuilder and passes it down to the QParser.&lt;/p&gt;</comment>
                            <comment id="13237416" author="dsmiley" created="Sat, 24 Mar 2012 03:33:36 +0000"  >&lt;p&gt;IMO the bear minimum change should be a clear error that &apos;q&apos; is missing.  Right now you get a NullPointerException &amp;#8211; Bad!&lt;/p&gt;

&lt;p&gt;Another change that I&apos;ve always thought should happen that would address this issue is /search in the example config being configured with defType=edismax with q.alt=&amp;#42;:&amp;#42;  &lt;/p&gt;

&lt;p&gt;Chris, as both Hoss and I said, QueryComponent can&apos;t assume that the particular QParser subclass even needs the query string at all, such as when defType=term or something.  Granted that&apos;s very unusual but still.&lt;/p&gt;

&lt;p&gt;Shall I just go ahead and commit the missing trim() bug fix to edismax, or create an issue for it?&lt;/p&gt;</comment>
                            <comment id="13237418" author="cmale" created="Sat, 24 Mar 2012 03:40:41 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Chris, as both Hoss and I said, QueryComponent can&apos;t assume that the particular QParser subclass even needs the query string at all, such as when defType=term or something. Granted that&apos;s very unusual but still.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s exactly what I&apos;m saying.  The QueryComponent is making that assumption today.  It retrieves a query string from the &apos;q&apos; param and passes it to the QParser.  Why not let the QParser do this all itself? that way, if the QParser doesn&apos;t need a query string or gets it from somewhere else, it can choose what to do or what not to do.&lt;/p&gt;</comment>
                            <comment id="13237424" author="dsmiley" created="Sat, 24 Mar 2012 04:16:49 +0000"  >&lt;p&gt;Chris:  If you look at QueryComponent a little further down the line it has to use QParser again to pass in filter queries in &apos;fq&apos; not &apos;q&apos;.&lt;/p&gt;</comment>
                            <comment id="13237427" author="cmale" created="Sat, 24 Mar 2012 04:31:46 +0000"  >&lt;p&gt;You&apos;re absolutely right.  &lt;/p&gt;

&lt;p&gt;I can see the advantages of having QParser&apos;s accept a generic String that they need to parse, whether it be the main query string or a filter query.  But in that case I don&apos;t think QParser&apos;s should also be trying to find the query string themselves in certain cases (such as ExtendedDisMaxQParser trying q.alt as an alternative source of a query string).  QParsers are not required to respect what the QueryComponent gives them, so you can specify whatever you like in &apos;q&apos; or &apos;fq&apos; and QParser can totally ignore it.&lt;/p&gt;

&lt;p&gt;It just feels a little messy and confusing because wherever the query string identification occurs is where the validation should occur too, right?&lt;/p&gt;</comment>
                            <comment id="13237445" author="dsmiley" created="Sat, 24 Mar 2012 05:19:20 +0000"  >&lt;p&gt;FYI I created an issue for this edismax bug in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-3270&quot; title=&quot;edismax throws exception with q having just whitespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-3270&quot;&gt;&lt;del&gt;SOLR-3270&lt;/del&gt;&lt;/a&gt; and committed it.&lt;/p&gt;

&lt;p&gt;Hoss: I don&apos;t agree with your reasoning on the developer-user typo-ing the &apos;q&apos; parameter.  If you mistype basically  any parameter then clearly it is as if you didn&apos;t even specify that parameter and you get the default behavior of the parameter you were trying to type correctly but didn&apos;t.  In this case, we want q to be match-all-docs by default.  It&apos;s not uncommon for there to be no query &amp;#8211; initial state or just filter queries.  &lt;/p&gt;</comment>
                            <comment id="13238538" author="hossman" created="Mon, 26 Mar 2012 17:36:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;If the purpose of the QueryComponent is to be QParser agnostic and consequently unable to know if the &apos;q&apos; parameter is even relevant, shouldn&apos;t it be up to the QParser to retrieve what it believes the query string to be from the request parameters?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry ... i chose my words carelessly and wound up saying almost the exact opposite of what i ment.&lt;/p&gt;

&lt;p&gt;What i should have said...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;QueryComponent is responsible for determining the QParser to use for the main query and passing it the value of the q query-string param to the  QParser.getParser(...) method&lt;/li&gt;
	&lt;li&gt;QParser.getParser passes that query-string on to whater QParserPlugin was selected as the &quot;qstr&quot; param to the createParser&lt;/li&gt;
	&lt;li&gt;The QParser that gets created by the createParser call should do whatever validation it needs to do (including a null check) in it&apos;s parse() method&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In answer to your questions...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;QueryComponent can not do any validation of the q param, because it can&apos;t make any assumptions about what the defType QParser this are legal values &amp;#8211; not even a null check, because in case of things like dismax nll is perfectly fine&lt;/li&gt;
	&lt;li&gt;QParsers (and QParserPlugins) can&apos;t be made responsible for fetching the q param because they don&apos;t know if/when they are being used to parse the main query param, vs fq params, vs some other nested subquery&lt;/li&gt;
	&lt;li&gt;by putting this kind of validation/error checking in the QParser.parse method, we ensure that it is used properly even when the QParser(s) are used for things like &apos;fq&apos; params or in nested subqueries&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;Hoss: I don&apos;t agree with your reasoning on the developer-user typo-ing the &apos;q&apos; parameter. If you mistype basically any parameter then clearly it is as if you didn&apos;t even specify that parameter and you get the default behavior of the parameter you were trying to type correctly but didn&apos;t. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;understood ... but most other situations the &quot;default&quot; behavior is either &quot;do nothing&quot; or &quot;error&quot; ... we don&apos;t have a lot of default behaviors which are &quot;give me tones of stuff&quot; ... if you use &lt;tt&gt;facet=true&amp;amp;faceet.field=foo&lt;/tt&gt; (note the extra character) you don&apos;t silently get get faceting on every field as a default &amp;#8211; you get no field faceting at all. if you misstype the q param name and get an error on your first attempt you immediately understand you did something wrong.  likewise if we made the default a &quot;matches nothing&quot; query, then you&apos;d get no results and (hopefully) be suspicious enough to realize you made a mistake &amp;#8211; but if we give you a bunch of results by default you may not realize at all that you&apos;re looking at all results not just the results of what you thought the query was.  the only situations i can think of where forgetting or mistyping a param name doens&apos;t default to error or nothing are things with fixed expectations: start, rows, fl, etc...  Those have defaults that (if they don&apos;t match what you tried to specify) are immediately obvious ... the &apos;start&apos; attribute on the docList returned is wrong, you get more results then you expected, you get field names you know you didn&apos;t specify, etc...  it&apos;s less obvious when you are looking at the results of a query that it&apos;s a match-all query instead of the query you thought you were specifying.&lt;/p&gt;

&lt;p&gt;like i said ... i&apos;m -0 to having a hardcoded default query for lucene/dismax/edismax ... if you feel strongly about it that&apos;s fine, allthough i would try to convince you &quot;match none&quot; is a better hardcoded default then &apos;match all&apos; (so that it&apos;s easier to recognize mistakes quickly) and really don&apos;t think we should do it w/o also add q.alt support to the LuceneQParser so people can override it.&lt;/p&gt;
</comment>
                            <comment id="13238560" author="ryantxu" created="Mon, 26 Mar 2012 18:00:31 +0100"  >&lt;blockquote&gt;&lt;p&gt;if no query string is supplied, or if its blank or just whitespace, then the default is to match all documents.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;-0&lt;/p&gt;

&lt;p&gt;When I opened this issue (4 years ago!) I was only worried that you get a NPE from a missing &apos;q&apos;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;don&apos;t think we should do it w/o also add q.alt support to the LuceneQParser so people can override it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Match none seems like the most appropriate behavior unless you explicitly say something else &lt;/p&gt;</comment>
                            <comment id="13238795" author="dsmiley" created="Mon, 26 Mar 2012 21:40:15 +0100"  >&lt;p&gt;If match none were the default, then this would be an additional difference from a filter query aside from scoring implications.  Think about it.  If you don&apos;t add any filter queries, in effect there is no filtering, which is kinda like the default being &amp;#42;:&amp;#42; even though it strictly speaking doesn&apos;t work that way.  Shouldn&apos;t &apos;q&apos; work similarly?&lt;/p&gt;

&lt;p&gt;I&apos;ll commit a better error message later tonight:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (qstr == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || qstr.length() == 0)
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ParseException(&lt;span class=&quot;code-quote&quot;&gt;&quot;missing query string&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;inside LuceneQParserPlugin.parse().  This is the same error message dismax &amp;amp; edismax use.&lt;/p&gt;

&lt;p&gt;v3.6 is soon and I don&apos;t feel like fighting this issue once the error message is improved.&lt;/p&gt;</comment>
                            <comment id="13238992" author="cmale" created="Tue, 27 Mar 2012 00:36:02 +0100"  >&lt;blockquote&gt;
&lt;p&gt;QParsers (and QParserPlugins) can&apos;t be made responsible for fetching the q param because they don&apos;t know if/when they are being used to parse the main query param, vs fq params, vs some other nested subquery&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.  I just have problems with the fact they kind of do this today.  Both DisMaxQParser and ExtendedDisMaxParser check the q.alt parameter when the string given to them is null.  So imagine if they&apos;re being used to parse a filter query but for whatever reason they are given a null string so they use the q.alt value instead, even though thats totally unrelated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;by putting this kind of validation/error checking in the QParser.parse method, we ensure that it is used properly even when the QParser(s) are used for things like &apos;fq&apos; params or in nested subqueries&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Again I agree.  But I&apos;m just not sure if that validation / error checking should involve checking alternative parameters.  That feels like its defeating the goal of QParsers working in all situations.&lt;/p&gt;

&lt;p&gt;I just also wonder whether down the line we want better error messages here too.  David&apos;s suggestion for &quot;missing query string&quot; aligns with other such messages (so I&apos;m all for adding it).  But I also wonder whether we could do better as well, by having context dependent messages saying what parameters were missing and how the user can address it.  But that would require the QParser to know what its being used for which we don&apos;t want.  Hence why I think this is really messy.&lt;/p&gt;

&lt;p&gt;I&apos;ll leave this discussion here and open another issue at some stage to address this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;allthough i would try to convince you &quot;match none&quot; is a better hardcoded default then &apos;match all&apos;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with Hoss.  If no query was mentioned, nothing was matched.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If match none were the default, then this would be an additional difference from a filter query aside from scoring implications&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I see them as very different things so I&apos;m not bothered by the difference.&lt;/p&gt;</comment>
                            <comment id="13239018" author="hossman" created="Tue, 27 Mar 2012 00:50:24 +0100"  >&lt;p&gt;FYI: i started cranking out a test patch to try and verify that all OOTB QParsers were doing the necessary vaidation, and realized poking at the code that we already addressed a lot of these discussions back in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt;, it just didn&apos;t make it into javadocs.&lt;/p&gt;

&lt;p&gt;QueryCOmponent allows and expects QParsers to return null from their parse() method if they think the input was valid, but doesn&apos;t result in an actual query, and then QueryCOmponent implements a standard default behavior of &quot;match nothing&quot;&lt;/p&gt;</comment>
                            <comment id="13239023" author="hossman" created="Tue, 27 Mar 2012 00:57:39 +0100"  >&lt;blockquote&gt;&lt;p&gt;Again I agree. But I&apos;m just not sure if that validation / error checking should involve checking alternative parameters. That feels like its defeating the goal of QParsers working in all situations.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure i see the problem, ... part of the advantage in how q.alt it&apos;s implemented now is that you can put things like...&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; &amp;lt;str name=&quot;fq&quot;&amp;gt;!dismax q.alt=*:* v=$keywords}&amp;lt;/str&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;...into &quot;appends&quot; params in your solrconfig.  by default nothing is filtered, but if the client provides a &quot;keywords&quot; param then it&apos;s used.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I just also wonder whether down the line we want better error messages here too. David&apos;s suggestion for &quot;missing query string&quot; aligns with other such messages&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It wouldn&apos;t have to ... parse() can throw ParseExceptions and QueryCOmponent (or whatever delegated to the QParser can wrap that in a user error (QueryCOmponent already does that)&lt;/p&gt;</comment>
                            <comment id="13239047" author="cmale" created="Tue, 27 Mar 2012 01:17:49 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Not sure i see the problem, ... part of the advantage in how q.alt it&apos;s implemented now is that you can put things like...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah that is a cool way to to use q.alt.  But that is only usable when a q.alt is specified in the local params of the QParser.  We don&apos;t prevent users from specifying it as a normal param, and then the QParser can be looking up a parameter that is not intended to be for it.  For safety, shouldn&apos;t we constrain such parameters to being local params only?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It wouldn&apos;t have to ... parse() can throw ParseExceptions and QueryCOmponent (or whatever delegated to the QParser can wrap that in a user error (QueryCOmponent already does that)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It doesn&apos;t really do that though.  Take DisMaxQParser for example, if it can&apos;t find a query string through either its given string or through the q.alt param, it throws a SolrException which isn&apos;t caught by QueryComponent.  So there isn&apos;t any context here except through the stack trace.  At best the QueryComponent catches a ParseException but since it wraps both the parsing of the main query and filter queries into the same try-catch block, it just wraps the ParseException in a SolrException and throws it.  Again, no context.&lt;/p&gt;</comment>
                            <comment id="13239070" author="hossman" created="Tue, 27 Mar 2012 01:34:34 +0100"  >&lt;blockquote&gt;&lt;p&gt;It doesn&apos;t really do that though. Take DisMaxQParser for example, if it can&apos;t find a query string through either its given string or through the q.alt param, it throws a SolrException &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry ... i was looking at my patched version &amp;#8211; agreed it should throw ParseException&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;At best the QueryComponent catches a ParseException but since it wraps both the parsing of the main query and filter queries into the same try-catch block, it just wraps the ParseException in a SolrException and throws it. Again, no context.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;...that can be fixed though, it doesn&apos;t cahnge the question of semantics for the QParsers themselves&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;Here&apos;s the patch i put together, the attempted goal was:&lt;/p&gt;

&lt;p&gt;1) add javadocs to QParser.parse documenting the (current) expectations&lt;br/&gt;
2) automated test verifying that al built-in QParsers meet the expectations when given null or empty string&lt;br/&gt;
3) standardizes lucene, dismax, and edismax to treat empty query strings as valid representations of matching nothing&lt;br/&gt;
4) fixes all the other special case QParsers to throw a ParseError on null or empty string based on what makes sense (ie: things like TermQParser should allow &quot;&quot; as input, but things like FunctionQParser should not)&lt;/p&gt;

&lt;p&gt;...however the test is currently broken, because it doesn&apos;t account for the fact that some of the special case QParsers have other required params &amp;#8211; it does however nicely demonstrate other ways these Qparsers do a bad job of reporting errors.&lt;/p&gt;

&lt;p&gt;Given te level of debate in this issue, and the differences in opinion on what the right / wrong way to address this broader topic of query parsing validation i suggest we punt on this for Solr 3.6 &amp;#8211; I&apos;d rather leave things the way they are then make a bad decision in a hurry&lt;/p&gt;</comment>
                            <comment id="13239078" author="cmale" created="Tue, 27 Mar 2012 01:42:58 +0100"  >&lt;blockquote&gt;&lt;p&gt;Sorry ... i was looking at my patched version &#8211; agreed it should throw ParseException&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No worries.  I think we should ensure that all QParsers only use ParseException (I see that ExtendedDisMaxQParser uses a c&amp;amp;p of the logic from DisMaxQParser).  I see that&apos;s what your patch does.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given te level of debate in this issue, and the differences in opinion on what the right / wrong way to address this broader topic of query parsing validation i suggest we punt on this for Solr 3.6 &#8211; I&apos;d rather leave things the way they are then make a bad decision in a hurry&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree but I also think we should commit the improved error message suggested by David so that we avoid the unhelpful NPE.  Any broader changes will be in 4.0 so we don&apos;t have a backwards compat problem.&lt;/p&gt;</comment>
                            <comment id="13239087" author="hossman" created="Tue, 27 Mar 2012 01:55:19 +0100"  >&lt;blockquote&gt;&lt;p&gt;I agree but I also think we should commit the improved error message suggested by David so that we avoid the unhelpful NPE. Any broader changes will be in 4.0 so we don&apos;t have a backwards compat problem.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Grrr... yes, i see ... &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; is only on trunk, somehow i overlooked that and it contributed to my confusion as to some of the comments in this issue.&lt;/p&gt;

&lt;p&gt;So instead of NPEs or what not that you get in 3.5 from various parsers, we switch to consistent&apos;new ParseException(&quot;missing query string&quot;);&apos; in 3.6, and address if there can be better default handling in 4.0 (continuing what &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; started)&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13239112" author="hossman" created="Tue, 27 Mar 2012 02:49:15 +0100"  >&lt;p&gt;patch against 3x that ensures the parsers likely to be used as defaults (lucene, lucenePlusSort, dismax, and edismax) give consistent ParseExceptions when the query sting is null or missing.&lt;/p&gt;

&lt;p&gt;this seems to be along the lines of what smiley and male where suggesting for 3.6, and then we could open a new issue to re-evaluate if/where the error handling/reporting of QParsers in general is lacking for 4.0 or if there should be different defaults (given that &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; already made changes relate this this dicussion on trunk)&lt;/p&gt;</comment>
                            <comment id="13239197" author="dsmiley" created="Tue, 27 Mar 2012 06:34:40 +0100"  >&lt;p&gt;Looks nice Hoss.  There&apos;s a typo in your test javadoc: &quot;change in SOlr 4.0&quot;.  I did indeed notice the needless use of SolrException instead of ParseException and I think it that was in my patch.&lt;/p&gt;

&lt;p&gt;RE &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; wow, yet another issue about the same problem &amp;#8211; that makes 3.  Clearly it&apos;s a problem!  Why not simply apply the &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; patch for consistent behavior?&lt;/p&gt;</comment>
                            <comment id="13239605" author="hossman" created="Tue, 27 Mar 2012 17:31:40 +0100"  >&lt;blockquote&gt;&lt;p&gt;Why not simply apply the &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; patch for consistent behavior?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;good question ... if you&apos;re cool with that then it seems okay to me (although off the top of my head i think when i was looking at trunk one of those 4 &quot;main&quot; parsers still needed &quot;fixed&quot; to return null).&lt;/p&gt;

&lt;p&gt;in general my suggestion for 3.6 was largely based on the fact that there was still active discussion about what the best long term behavior was, which might contradict what was discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt;, so better to play it safe and just clean up the error reporting: &quot;I&apos;d rather leave things the way they are then make a bad decision in a hurry&quot;&lt;/p&gt;

&lt;p&gt;if you want to backport &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; and sanity check that lucene/dismax/edismax/lucenePlusSort all return null on null/blank query strings i&apos;m +1 to that (that seems consistent with what ryan/male/me were advocating here, so as long as your on board i think we&apos;re good)&lt;/p&gt;</comment>
                            <comment id="13239670" author="dsmiley" created="Tue, 27 Mar 2012 18:27:45 +0100"  >&lt;p&gt;I&apos;m onboard with &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt;.  My 1st concern was the NPE, my 2nd was a non-error default, my 3rd was &lt;b&gt;:&lt;/b&gt;.  I can&apos;t have everything &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I did consider the approach in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; which is to return null from QParser.parse() but I wasn&apos;t sure if that would be disruptive to any implied contract/expectation.  I guess there&apos;s no issue with that.&lt;/p&gt;

&lt;p&gt;I&apos;ll try and attach a back-ported patch soon.&lt;/p&gt;</comment>
                            <comment id="13239810" author="dsmiley" created="Tue, 27 Mar 2012 19:43:46 +0100"  >&lt;p&gt;Attached is my 3x port of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt;.  Modifications:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I added your test Hoss&lt;/li&gt;
	&lt;li&gt;Added empty string check&lt;/li&gt;
	&lt;li&gt;Added a Javadoc on QParser.parse() to indicate null may be returned&lt;/li&gt;
	&lt;li&gt;Added support for DisMaxQParser&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;d like to commit this tonight to 3x, and commit the differences it has with trunk to trunk.&lt;/p&gt;

&lt;p&gt;Is a CHANGES.txt necessary?&lt;/p&gt;</comment>
                            <comment id="13240154" author="dsmiley" created="Wed, 28 Mar 2012 05:22:29 +0100"  >&lt;p&gt;I committed the patch to 3x and made the small improvements to 4x.&lt;/p&gt;</comment>
                            <comment id="13240423" author="markrmiller@gmail.com" created="Wed, 28 Mar 2012 14:58:50 +0100"  >&lt;p&gt;Reverted on 4x&lt;/p&gt;</comment>
                            <comment id="13240991" author="dsmiley" created="Thu, 29 Mar 2012 06:29:22 +0100"  >&lt;p&gt;(This patch didn&apos;t break the build.)&lt;/p&gt;

&lt;p&gt;Since this is a back-port, what do I do with the &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2001&quot; title=&quot;NPE using http://localhost:8983/solr/select/?q=&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-2001&quot;&gt;&lt;del&gt;SOLR-2001&lt;/del&gt;&lt;/a&gt; entry in the CHANGES.txt in trunk?  I suspect I should move the issue to the 3.6 section of the file, and commit that to the CHANGES.txt on both branches.&lt;/p&gt;

&lt;p&gt;For reference:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;* SOLR-2001: The query component will substitute an empty query that matches
  no documents if the query parser returns null.  This also prevents an
  exception from being thrown by the default parser if &quot;q&quot; is missing. (yonik)
  SOLR-435: if q is &quot;&quot; then it&apos;s also acceptable. (dsmiley, hoss)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13243647" author="dsmiley" created="Sun, 1 Apr 2012 05:08:08 +0100"  >&lt;p&gt;Re-committed to 4.x, and I moved the CHANGES.txt from the v4 to v3 section on both branches.  Closing issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12392805">SOLR-525</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12469098">SOLR-2001</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12520172" name="SOLR-2001_3x_backport_with_empty_string_check_and_test.patch" size="10228" author="dsmiley" created="Tue, 27 Mar 2012 19:43:46 +0100"/>
                            <attachment id="12520043" name="SOLR-435.patch" size="11513" author="hossman" created="Tue, 27 Mar 2012 01:34:34 +0100"/>
                            <attachment id="12520048" name="SOLR-435_3x_consistent_errors.patch" size="4417" author="hossman" created="Tue, 27 Mar 2012 02:49:15 +0100"/>
                            <attachment id="12519732" name="SOLR-435_q_defaults_to_all-docs.patch" size="5870" author="dsmiley" created="Fri, 23 Mar 2012 22:00:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 12 Dec 2007 23:08:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>497</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxrcn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20750</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>