<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 05:24:30 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/SOLR-1553/SOLR-1553.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[SOLR-1553] extended dismax query parser</title>
                <link>https://issues.apache.org/jira/browse/SOLR-1553</link>
                <project id="12310230" key="SOLR">Solr</project>
                    <description>&lt;p&gt;An improved user-facing query parser based on dismax&lt;/p&gt;</description>
                <environment></environment>
        <key id="12440348">SOLR-1553</key>
            <summary>extended dismax query parser</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                    <reporter username="yseeley@gmail.com">Yonik Seeley</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 Nov 2009 22:44:56 +0000</created>
                <updated>Wed, 4 Sep 2013 01:05:43 +0100</updated>
                            <resolved>Wed, 16 Feb 2011 17:05:07 +0000</resolved>
                                                    <fixVersion>3.1</fixVersion>
                                        <due></due>
                            <votes>9</votes>
                                    <watches>25</watches>
                                                                <comments>
                            <comment id="12776133" author="yseeley@gmail.com" created="Tue, 10 Nov 2009 22:47:54 +0000"  >&lt;p&gt;Lucid Imagination is contributing back this query parser currently being used at search.lucidimagination.com&lt;/p&gt;

&lt;p&gt;The extended dismax parser was based on the original Solr dismax parser.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Supports full lucene query syntax in the absence of syntax errors&lt;/li&gt;
	&lt;li&gt;supports &quot;and&quot;/&quot;or&quot; to mean &quot;AND&quot;/&quot;OR&quot; in lucene syntax mode&lt;/li&gt;
	&lt;li&gt;When there are syntax errors, improved smart partial escaping of special characters is done to prevent them... in this mode, fielded queries, +/-, and phrase queries are still supported.&lt;/li&gt;
	&lt;li&gt;Improved proximity boosting via word bigrams... this prevents the problem of needing 100% of the words in the document to get any boost, as well as having all of the words in a single field.&lt;/li&gt;
	&lt;li&gt;advanced stopword handling... stopwords are not required in the mandatory part of the query but are still used (if indexed) in the proximity boosting part.  If a query consists of all stopwords (e.g. to be or not to be) then all will be required.&lt;/li&gt;
	&lt;li&gt;Supports the &quot;boost&quot; parameter.. like the dismax bf param, but multiplies the function query instead of adding it in&lt;/li&gt;
	&lt;li&gt;Supports pure negative nested queries... so a query like +foo (-foo) will match all documents&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some examples of queries that currently give dismax fits that now work with extended dismax:&lt;br/&gt;
  OR&lt;br/&gt;
  AND&lt;br/&gt;
  NOT &lt;br/&gt;
  -&lt;br/&gt;
  &quot;&lt;/p&gt;

&lt;p&gt;Example queries:&lt;br/&gt;
&lt;a href=&quot;http://localhost:8983/solr/select?defType=edismax&amp;amp;q=big+blue+house&amp;amp;pf=text&amp;amp;qf=text&amp;amp;debugQuery=true&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select?defType=edismax&amp;amp;q=big+blue+house&amp;amp;pf=text&amp;amp;qf=text&amp;amp;debugQuery=true&lt;/a&gt;&lt;br/&gt;
+(((text:big) (text:blue) (text:hous))~3) ((text:&quot;big blue&quot;) (text:&quot;blue hous&quot;))&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8983/solr/select?defType=edismax&amp;amp;q=hello&amp;amp;pf=text&amp;amp;qf=text&amp;amp;boost=popularity&amp;amp;debugQuery=true&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select?defType=edismax&amp;amp;q=hello&amp;amp;pf=text&amp;amp;qf=text&amp;amp;boost=popularity&amp;amp;debugQuery=true&lt;/a&gt;&lt;br/&gt;
boost(+(text:hello),int(popularity))&lt;/p&gt;

&lt;p&gt;And if the text field were configured with the stopfilter only on the query analyzer, then&lt;br/&gt;
&lt;a href=&quot;http://localhost:8983/solr/select?defType=edismax&amp;amp;q=this+is+the+end&amp;amp;pf=text&amp;amp;qf=text&amp;amp;debugQuery=true&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select?defType=edismax&amp;amp;q=this+is+the+end&amp;amp;pf=text&amp;amp;qf=text&amp;amp;debugQuery=true&lt;/a&gt;&lt;br/&gt;
+(((text:end))~1) ((text:&quot;this is&quot;) (text:&quot;is the&quot;) (text:&quot;the end&quot;))&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8983/solr/select?defType=edismax&amp;amp;q=how+now+&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select?defType=edismax&amp;amp;q=how+now+&lt;/a&gt;&quot;brown+cow&quot;+popularity:100&amp;amp;pf=text&amp;amp;qf=text&amp;amp;debugQuery=true&lt;br/&gt;
+(((text:how) (text:now) (text:&quot;brown cow&quot;) popularity:100)~4) (text:&quot;how now&quot;)&lt;/p&gt;</comment>
                            <comment id="12776192" author="yseeley@gmail.com" created="Wed, 11 Nov 2009 00:27:33 +0000"  >&lt;p&gt;Oops, I meant to link the related dismax issues as &quot;related to&quot; not &quot;blocks&quot;... not sure how to undo it though.&lt;/p&gt;</comment>
                            <comment id="12776488" author="yseeley@gmail.com" created="Wed, 11 Nov 2009 16:04:17 +0000"  >&lt;p&gt;I guess one of the main questions is if this should remain separate from dismax, or if it should eventually replace dismax?  If the latter, they could either co-exist for some time and eventually replace, or remain uncommitted before it can replace...&lt;/p&gt;

&lt;p&gt;Incompatibilities off the top of my head:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;pf&quot; creates word bigrams for proximity boosting... we could perhaps change this to &quot;pf2&quot; and add in support for the dismax-style pf&lt;/li&gt;
	&lt;li&gt;fielded queries - dismax doesn&apos;t have them, and they may not be desired by all clients&lt;/li&gt;
	&lt;li&gt;full lucene syntax - same as above - may not be desired by all clients&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think the other incompatibilities would mostly fall in the category of bugs, or things that weren&apos;t well specified or well behaved anyway (e.g. I don&apos;t really see a downside to allowing nested pure negative queries to work)&lt;/p&gt;</comment>
                            <comment id="12776661" author="otis" created="Wed, 11 Nov 2009 21:14:02 +0000"  >&lt;p&gt;I think you need to click on &quot;Issue Links&quot; link, delete, and re-link.&lt;/p&gt;

&lt;p&gt;I have a feeling once this is in, people won&apos;t need the original dismax.&lt;/p&gt;

&lt;p&gt;Yonik, did you mean to attach a patch, but forgot?&lt;/p&gt;</comment>
                            <comment id="12776776" author="yseeley@gmail.com" created="Thu, 12 Nov 2009 01:05:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yonik, did you mean to attach a patch, but forgot?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Heh... yup.  Here it is.&lt;/p&gt;</comment>
                            <comment id="12777000" author="ehatcher" created="Thu, 12 Nov 2009 14:01:53 +0000"  >&lt;p&gt;Personally I think this should live independently from dismax.  Having the capability to do field selections from the query string can often be undesirable, if not even a security issue in some cases.  &lt;/p&gt;

&lt;p&gt;+1 to keeping them separate, or at least controllable whether the field selection and other crazy query syntax is available or not.&lt;/p&gt;</comment>
                            <comment id="12777289" author="hossman" created="Fri, 13 Nov 2009 00:00:47 +0000"  >&lt;p&gt;I haven&apos;t looked at the patch, and i hope to find some time to do so prior to year with a &quot;3&quot; in it, but in the meantime...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I guess one of the main questions is if this should remain separate from dismax, or if it should eventually replace dismax?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the right way to handle this is to let both &lt;b&gt;classes&lt;/b&gt; coexist in the code base, but to start encouraging people to use the new/improved version by changing the default used when defType=dismax ... a note in CHANGES.txt that people who really want the old class should use defType=oldDismax, or explicitly declare the old parsing using the name &quot;dismax&quot; seems totally suitable (much as we did with LegacyDateField, and lucenePlusSort.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Having the capability to do field selections from the query string can often be undesirable, if not even a security issue in some cases.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Assuming the new parser is well written (and i would expect nothing less from all you lucid folks) i imagine it wouldn&apos;t take too much work to make all of those various options controllable by params.  if nothing else, an &quot;escapeTheseChars&quot; type option would be nice brute force way to disable some stuff.&lt;/p&gt;</comment>
                            <comment id="12777312" author="yseeley@gmail.com" created="Fri, 13 Nov 2009 00:59:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Assuming the new parser is well written (and i would expect nothing less from all you lucid folks) &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Errr, well... I wrote it pretty quickly.  Someone was working on a better query parser and this one was more of a &quot;we need something now&quot; type of thing.&lt;/p&gt;

&lt;p&gt;But yes, it should be easy to turn off the extra features.&lt;/p&gt;</comment>
                            <comment id="12777322" author="hossman" created="Fri, 13 Nov 2009 01:38:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;Errr, well... I wrote it pretty quickly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You can&apos;t possibly have written it any more quickly then i did the original dismax parser ... i mean jusus: was so rushed i forgot to test &quot;AND&quot; in uppercase, and as a result didn&apos;t request the time i needed to do it all the right way.&lt;/p&gt;

&lt;p&gt;i think we&apos;ve all suffered from my poor initial implementation long enough.&lt;/p&gt;</comment>
                            <comment id="12779161" author="yseeley@gmail.com" created="Tue, 17 Nov 2009 21:52:21 +0000"  >&lt;p&gt;committed.&lt;br/&gt;
Leaving open for now, as there are unresolved issues, such as if we should point &quot;dismax&quot; at this new version.&lt;/p&gt;


</comment>
                            <comment id="12787021" author="hossman" created="Mon, 7 Dec 2009 18:08:31 +0000"  >&lt;p&gt;Thoughts while reading the code...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;the code is kind of hard to read ... there&apos;s a serious dirth of comments&lt;/li&gt;
	&lt;li&gt;reads very kludgy, clearly a hacked up version of DisMax ... probably want to refactor some helper functions (that can then be documented)&lt;/li&gt;
	&lt;li&gt;the clause.field and getFieldName functionality is dangerous for people migrating from edismax-&amp;gt;dismax (users guessing field names can query on fields the solr admin doesn&apos;t want them to query on) ... we need an option to turn that off.
	&lt;ul&gt;
		&lt;li&gt;one really nice thing about the field query support though: it looks like it would really be easy to add support for arbitrary field name aliasing with something like f.someFieldAlias.qf=realFieldA^3+realFieldB^4&lt;/li&gt;
		&lt;li&gt;perhaps getFieldName should only work for fields explicitly enumerated in a param?&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;why is &quot;TO&quot; listed as an operator when building up the phrase boost fields? (line 296) ... if range queries are supported, then shouldn&apos;t the upper/lower bounds also be striped out of the clauses list?
	&lt;ul&gt;
		&lt;li&gt;accepting range queries also seems like something that people should be able to disable&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;apparently &quot;pf&quot; was changed to iteratively build boosting phrase queries for every &apos;pair&apos; of words, and &quot;pf3&quot; is a new param to build boosting phrase queries for every &apos;triple&apos; of words in the input. while this certainly seems useful, it&apos;s not back-compatable .. why not restore &apos;pf&apos; to it&apos;s original purpose, and add &quot;pf2&quot; for hte pairs?&lt;/li&gt;
	&lt;li&gt;what is the motivation for ExtendedSolrQueryParser.makeDismax? ... i see that the boost queries built from the pf and pf3 fields are put in BooleanQueries instead of DisjunctionMaxQueries ... but why? (if the user searches for a phrase that&apos;s common in many fields of one document, that document is going to get a huge score boost regardless of the &quot;tie&quot; value, which kind of defeats the point of what the dismax parser is trying to do)&lt;/li&gt;
	&lt;li&gt;we should remove the extremely legacy &quot;/* legacy logic */&quot; for dealing with &quot;bq&quot; ... almost no one should care about that, we really don&apos;t need to carry it forward in a new parser.&lt;/li&gt;
	&lt;li&gt;there are a lot of empty catch blocks that seem like they should at least log a warning or debug message.&lt;/li&gt;
	&lt;li&gt;ExtendedAnalyzer feels like a really big hack ... i&apos;m not certain, but i don&apos;t think it works correctly if a CharFilter is declared.&lt;/li&gt;
	&lt;li&gt;we need to document all these new params (&quot;pf3&quot;, &quot;lowercaseOperators&quot;, &quot;boost&quot;,&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Thoughts while testing it out on some really hairy edge cases that break the old dismax parser...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;this is really cool&lt;/li&gt;
	&lt;li&gt;this is really freaking cool.&lt;/li&gt;
	&lt;li&gt;still has a problem with search strings like &quot;foo &amp;amp;&amp;amp;&quot; and &quot;foo ||&quot; ... i suspect it would be an easy fix to recognize these just like AND/OR are recognized and escaped.&lt;/li&gt;
	&lt;li&gt;once we fix some of hte issues mentioned above, we should absolutely register this using the name &quot;dismax&quot; by default, and register the old one as &quot;oldDismax&quot; with a note in CHANGES.txt telling people to use defType=oldDismax if they really need it.&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12793813" author="yseeley@gmail.com" created="Tue, 22 Dec 2009 22:20:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;why is &quot;TO&quot; listed as an operator when building up the phrase boost fields? (line 296) ... if range queries are supported, then shouldn&apos;t the upper/lower bounds also be striped out of the clauses list?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It seemed incrementally better than leaving it out.&lt;br/&gt;
Range queries aren&apos;t actually supported in the fallback mode.  The phrase boosting is also relatively rudimentary.  We could try to recognize range queries and removing the whole thing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;i see that the boost queries built from the pf and pf3 fields are put in BooleanQueries instead of DisjunctionMaxQueries ... but why?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I honestly don&apos;t recall (this was written a while ago).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;ExtendedAnalyzer feels like a really big hack ... i&apos;m not certain, but i don&apos;t think it works correctly if a CharFilter is declared.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Probably not - CharFilter didn&apos;t exist when this was written.&lt;br/&gt;
Should we use an alternative method for signaling that stopwords are optional?  The nice thing about putting the stopword filter in the query analyzer (and having edismax detect it) is that something like the lucene query parser works as it did in the past... stopwords are removed.  But I could see the other side of the argument too.&lt;/p&gt;

&lt;p&gt;Anyway, I think I agree with pretty much everything you say - just haven&apos;t had time to do anything about it.&lt;/p&gt;</comment>
                            <comment id="12795741" author="hossman" created="Fri, 1 Jan 2010 08:55:54 +0000"  >&lt;p&gt;incremental patch (against trunk) that i wrote on the plane a few days ago... &lt;/p&gt;

&lt;p&gt;refactors the pf logic and adds comments: pf is restored to it&apos;s original meaning in dismax, pf3 does what it did in edismax, and pf2 is added to do what edismax was previously doing with pf.&lt;/p&gt;

&lt;p&gt;clear as mud right? ... fortunately the code is much cleaner then the explanation.&lt;/p&gt;</comment>
                            <comment id="12801112" author="dsmiley" created="Sat, 16 Jan 2010 06:20:23 +0000"  >&lt;p&gt;Yonik (or someone else I guess), would you mind commenting on this claim?:&lt;br/&gt;
&quot;Improved proximity boosting via word bigrams... this prevents the problem of needing 100% of the words in the document to get any boost, as well as having all of the words in a single field.&quot;&lt;br/&gt;
I looked through the source and saw the bigram addition using &quot;SHOULD&quot;... cool... but I am unaware of the two problems you speak of that this addresses.&lt;/p&gt;

&lt;p&gt;By the way... this thing is slick.  You rock.&lt;/p&gt;</comment>
                            <comment id="12801197" author="dsmiley" created="Sat, 16 Jan 2010 15:47:34 +0000"  >&lt;p&gt;To answer my own question, the bigram phrasing approach is to address shortcomings in a complete phrase boost.&lt;/p&gt;</comment>
                            <comment id="12802950" author="hossman" created="Wed, 20 Jan 2010 19:26:20 +0000"  >&lt;p&gt;Committed revision 901342.&lt;br/&gt;
...&lt;br/&gt;
this was the same as my &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1553&quot; title=&quot;extended dismax query parser&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-1553&quot;&gt;&lt;del&gt;SOLR-1553&lt;/del&gt;&lt;/a&gt;.pf-refactor.patch with the one addition of restoring the use of DisjunctionMaxQuery for the pf* params (per yonik&apos;s comment that he couldn&apos;t remember why he changed it)&lt;/p&gt;

&lt;p&gt;if we figure out his reason (i&apos;m sure he had one) we can re-evaluate.&lt;/p&gt;</comment>
                            <comment id="12805303" author="pwolanin" created="Wed, 27 Jan 2010 00:45:39 +0000"  >&lt;p&gt;some commented out debug code left in the committed parser?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void addClause(List clauses, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; conj, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; mods, Query q) {
&lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;addClause:clauses=&quot;&lt;/span&gt;+clauses+&lt;span class=&quot;code-quote&quot;&gt;&quot; conj=&quot;&lt;/span&gt;+conj+&lt;span class=&quot;code-quote&quot;&gt;&quot; mods=&quot;&lt;/span&gt;+mods+&lt;span class=&quot;code-quote&quot;&gt;&quot; q=&quot;&lt;/span&gt;+q);
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.addClause(clauses, conj, mods, q);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12839892" author="hossman" created="Mon, 1 Mar 2010 22:27:43 +0000"  >&lt;p&gt;On the train this past weekend i started trying to tackle the issue of making support for field based queries (ie: &quot;fieldA:valueB&quot;) configurable so that it could be turned on/off for certain fields (or left off completely for back-compat with dismax)&lt;/p&gt;

&lt;p&gt;Based on yonik&apos;s description of edismax, and my initial reading of the code (particularly the use of clause.field and getFieldName in ExtendedDismaxQParser) i was under the impression that if a &quot;clause&quot; consisting of FOO:BAR was encountered, and FOO was not a known field, that the clause would be treated as a literal, and the colon would be escaped before passing it on to ExtendedSolrQueryParser ... essentially that FOO:BAR and FOO\:BAR would be equivalent if FOO is not the name of a real field according to the IndexSchema.&lt;/p&gt;

&lt;p&gt;For reasons I don&apos;t fully understand yet, this isn&apos;t the case &amp;#8211; as the attached test shows, the queries are parsed differently, and (evidently) FOO:BAR is parsed as an empty query if FOO is not a real field.&lt;/p&gt;

&lt;p&gt;Before I try digging into this too much, I wanted to sanity check:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;is this expected? ... was this done intentionally?&lt;/li&gt;
	&lt;li&gt;is this desired? ... is this logical default behavior to have if the field isn&apos;t defined? should we have tests to assert this before i start adding more config options to change the behavior?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12839893" author="hossman" created="Mon, 1 Mar 2010 22:33:56 +0000"  >&lt;p&gt;FWIW: initial steps towards adding a &quot;uf&quot; param to let users specify what field names can be specified explicitly in the query string, with optional default boosts to apply to those clauses ... not finished.&lt;/p&gt;</comment>
                            <comment id="12839907" author="otis" created="Mon, 1 Mar 2010 23:06:28 +0000"  >&lt;p&gt;What does &quot;u&quot; in &quot;uf&quot; stand for?&lt;/p&gt;</comment>
                            <comment id="12839914" author="hossman" created="Mon, 1 Mar 2010 23:21:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;What does &quot;u&quot; in &quot;uf&quot; stand for? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&quot;user fields&quot; ... as in &quot;field names a user may refer to&quot; ... but it&apos;s not something i though through to hard, as i said: work in progress.&lt;/p&gt;</comment>
                            <comment id="12846725" author="yseeley@gmail.com" created="Thu, 18 Mar 2010 03:00:08 +0000"  >&lt;p&gt;Hmmm, the intention was to try and detect when a &apos;:&apos; meant a fielded query, or if it was a literal.&lt;br/&gt;
So IIRC, it does look like a bug if it&apos;s not working.&lt;/p&gt;

&lt;p&gt;A &quot;uf&quot; param sounds good.&lt;/p&gt;</comment>
                            <comment id="12851700" author="jrochkind" created="Wed, 31 Mar 2010 03:06:02 +0100"  >&lt;p&gt;Hoss, I would be EXTREMELY interested in the &quot;uf&quot; ability to specify only certain fields that may be user-specified (with other field-spec-looking things just escaped, I guess?), and also in another comment you made earlier:&lt;/p&gt;

&lt;p&gt;&quot;one really nice thing about the field query support though: it looks like it would really be easy to add support for arbitrary field name aliasing with something like f.someFieldAlias.qf=realFieldA^3+realFieldB^4&quot;&lt;/p&gt;

&lt;p&gt;That would be amazing, and make eDismax meet all my needs. Are you still thinking of that, and does your work with the code make it seem any more or less plausible?&lt;/p&gt;</comment>
                            <comment id="12853447" author="hossman" created="Mon, 5 Apr 2010 18:28:56 +0100"  >&lt;p&gt;Jonathan: looking at the code, it seems completely plausible, ant that&apos;s the direction i was going down with that previous patch &amp;#8211;  but i got hung up on the fact that for reasons i couldn&apos;t identify, clauses refering to fieldnames that don&apos;t exist in the schema are getting dropped &amp;#8211; need to track down where that is happening and stop it, so the new code can look at those &quot;field names&quot; and treat them as aliases (to resolve to other fields)&lt;/p&gt;

&lt;p&gt;I just need to find time to dig into it more &amp;#8211; but if you want to take a swing at fixing edismax.unescapedcolon.bug.test.patch and then improving on edismax.userFields.patch, by all means be my guest.&lt;/p&gt;</comment>
                            <comment id="12871244" author="hossman" created="Tue, 25 May 2010 17:58:11 +0100"  >&lt;p&gt;Another bug noticed on the user list, edismax doesn&apos;t seem to respect MM all the time &amp;#8211; in particular when there are negated clauses...&lt;/p&gt;

&lt;p&gt;Compare...&lt;br/&gt;
&lt;a href=&quot;http://localhost:8983/solr/select?debugQuery=true&amp;amp;defType=dismax&amp;amp;qf=text&amp;amp;q=xxx+yyy+zzz+-1234&amp;amp;mm=2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select?debugQuery=true&amp;amp;defType=dismax&amp;amp;qf=text&amp;amp;q=xxx+yyy+zzz+-1234&amp;amp;mm=2&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://localhost:8983/solr/select?debugQuery=true&amp;amp;defType=edismax&amp;amp;qf=text&amp;amp;q=xxx+yyy+zzz+-1234&amp;amp;mm=2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8983/solr/select?debugQuery=true&amp;amp;defType=edismax&amp;amp;qf=text&amp;amp;q=xxx+yyy+zzz+-1234&amp;amp;mm=2&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12872417" author="hossman" created="Thu, 27 May 2010 23:04:52 +0100"  >&lt;p&gt;Bulk updating 240 Solr issues to set the Fix Version to &quot;next&quot; per the process outlined in this email...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selection criteria was &quot;Unresolved&quot; with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.&lt;/p&gt;

&lt;p&gt;A unique token for finding these 240 issues in the future: hossversioncleanup20100527&lt;/p&gt;</comment>
                            <comment id="12872693" author="hossman" created="Fri, 28 May 2010 00:10:48 +0100"  >
&lt;p&gt;Correcting Fix Version based on CHANGES.txt, see this thread for more details...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12892233" author="grahamp" created="Mon, 26 Jul 2010 10:36:42 +0100"  >&lt;p&gt;Please ensure that the the edismax does not have old DisMax bug where a query for&lt;/p&gt;

&lt;p&gt;bar - foo&lt;/p&gt;

&lt;p&gt;gets treated like&lt;/p&gt;

&lt;p&gt;bar -foo&lt;/p&gt;

&lt;p&gt;Users do not expect the first query to remove all instances of &quot;foo&quot; from their results.  &quot;&amp;#45;&quot; meaning &quot;forbidden&quot; should only take effect when the &quot;&amp;#45;&quot; is followed by a non-whitespace character.  Similarly for +.   Same problem as &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-490&quot; title=&quot;dismax should autoescape + and - followed by whitespace (maybe?)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SOLR-490&quot;&gt;SOLR-490&lt;/a&gt;, but I doubt the necessity of interpreting the original query as a phrase query &quot;bar - foo&quot; in order to fix the problem.&lt;/p&gt;
</comment>
                            <comment id="12892323" author="yseeley@gmail.com" created="Mon, 26 Jul 2010 15:45:35 +0100"  >&lt;p&gt;Interesting... edismax does currently treat (bar - foo) like (bar -foo).&lt;br/&gt;
I didn&apos;t code that, so it must be the Lucene query parser.&lt;br/&gt;
I wonder if it has done that forever, and if it was intended?&lt;/p&gt;</comment>
                            <comment id="12899857" author="yseeley@gmail.com" created="Wed, 18 Aug 2010 15:28:58 +0100"  >&lt;p&gt;Does anyone remember why we disable coord for the main query?&lt;/p&gt;</comment>
                            <comment id="12900412" author="ramayer" created="Thu, 19 Aug 2010 20:47:27 +0100"  >&lt;p&gt;I very much like edismax - The &quot;pf2&quot; parameter in particular is doing wonders for getting my most relevant documents to the very top of the list in one of my apps.&lt;/p&gt;</comment>
                            <comment id="12907775" author="lancenorskog" created="Thu, 9 Sep 2010 21:34:22 +0100"  >&lt;p&gt;Does edismax handle wildcards, and should it? &lt;/p&gt;

&lt;p&gt;To handle the upper/lower case problem (which extends to character set folding), text and string fields could specify a CharFilter for indexing. Which promptly interacts with faceting because facets come from indexed values, not stored values.&lt;/p&gt;</comment>
                            <comment id="12921249" author="gunnar" created="Fri, 15 Oct 2010 07:36:34 +0100"  >&lt;p&gt;Re: field-based queries (field:value)&lt;/p&gt;

&lt;p&gt;I was wonder if it would be possible to add support for explicitly limiting the allowed fields? For example, I&apos;d like to be able to not allow queries in internal fields but only in a defined set of &quot;public&quot; fields (eg. GMail recognizes &quot;to&quot;, &quot;subject&quot;, etc. but really only those).&lt;/p&gt;

&lt;p&gt;Another nice feature would be alias definitions for fields. This would allow to support localized field names in queries which translate to the real field name. (eg. &quot;an&quot; -&amp;gt; &quot;to&quot;, &quot;Betreff&quot; -&amp;gt; &quot;subject&quot;, &quot;betreff&quot; -&amp;gt; &quot;subject&quot;).&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12921563" author="hossman" created="Fri, 15 Oct 2010 22:33:05 +0100"  >&lt;p&gt;Gunnar: this is precisely what i was attempting with the edismax.userFields.patch file but it doesn&apos;t work at the moment, probably because of the problem i identified in edismax.unescapedcolon.bug.test.patch  (see previous comments, particularly discussion with Jonathan.&lt;/p&gt;

&lt;p&gt;If you&apos;ve got some time/energy to dig into those patches and help get them working that would be great&lt;/p&gt;</comment>
                            <comment id="12925097" author="yseeley@gmail.com" created="Tue, 26 Oct 2010 20:19:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;Users do not expect the first query to remove all instances of &quot;foo&quot; from their results. &quot;&lt;del&gt;&quot; meaning &quot;forbidden&quot; should only take effect when the &quot;&lt;/del&gt;&quot; is followed by a non-whitespace character. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Graham, this has just been fixed in trunk: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2566&quot; title=&quot;+ - operators allow any amount of whitespace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-2566&quot;&gt;&lt;del&gt;LUCENE-2566&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12985483" author="markrmiller@gmail.com" created="Mon, 24 Jan 2011 01:45:32 +0000"  >&lt;p&gt;Heh - one of the issues blocked by this is already resolved.&lt;/p&gt;</comment>
                            <comment id="12994061" author="rcmuir" created="Sun, 13 Feb 2011 10:23:33 +0000"  >&lt;p&gt;Hi, can we just mark this stuff experimental for 3.1?&lt;/p&gt;

&lt;p&gt;If nobody takes action on this issue within 7 days, &lt;br/&gt;
I plan to add the text to README.txt and move the issue out of 3.1.&lt;/p&gt;</comment>
                            <comment id="12994097" author="markrmiller@gmail.com" created="Sun, 13 Feb 2011 13:27:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hi, can we just mark this stuff experimental for 3.1?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12994448" author="ryantxu" created="Mon, 14 Feb 2011 19:42:45 +0000"  >&lt;p&gt;+1 to mark as experimental in 3.1&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The innards of how this works it totally greek, but tried finding somethign to fix hoss&apos; unescaped patch.  It seems that the root of the problem is that QueryParserBase.parse( String ) will return a BooleanQuery with no clauses for the invalid field query.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Query res = TopLevelQuery(field);
&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; res!=&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ? res : newBooleanQuery(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then the edismax just checks if the parsedQuery is null to see if it is valid.&lt;/p&gt;

&lt;p&gt;I tried just returning null from the QueryParserBase, but that (not surprisingly) breaks other tests like TestMultiFieldQueryParser.  I imagine somethign changed here for why it used to work, and now &quot;mysteriously&quot; does not.  &lt;/p&gt;

&lt;p&gt;Adding a check for empty BooleanQuery fixes this in edismax though:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( parsedUserQuery &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; BooleanQuery ) {
   &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( ((BooleanQuery)parsedUserQuery).getClauses().length &amp;lt; 1 ) {
     parsedUserQuery = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
   }
 }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All tests pass... but can someone who knows what the ramifications of this change means take a look?&lt;/p&gt;</comment>
                            <comment id="12994781" author="rcmuir" created="Tue, 15 Feb 2011 13:20:14 +0000"  >&lt;p&gt;I marked this experimental in trunk.&lt;/p&gt;

&lt;p&gt;I&apos;ll keep the issue open in 3.1 for a few more days as discussed, then i&apos;m moving it out.&lt;/p&gt;</comment>
                            <comment id="12995125" author="hossman" created="Wed, 16 Feb 2011 02:52:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;ll keep the issue open in 3.1 for a few more days as discussed, then i&apos;m moving it out.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;it would be less confusing to just resolve it as fixed, and open new issues to track the outstanding problems/bugs/questions.&lt;/p&gt;</comment>
                            <comment id="12995388" author="yseeley@gmail.com" created="Wed, 16 Feb 2011 17:05:07 +0000"  >&lt;p&gt;Resolving.  Improvements can be tracked in a new issue.&lt;/p&gt;</comment>
                            <comment id="12995555" author="dsmiley" created="Wed, 16 Feb 2011 22:38:04 +0000"  >&lt;p&gt;I&apos;m confused about why this cool query parser I&apos;ve been using is &quot;experimental&quot;.  Sure, there are opportunities for improvement, but it&apos;s already better than the original dismax which this makes obsolete. No?&lt;/p&gt;</comment>
                            <comment id="12995588" author="hossman" created="Wed, 16 Feb 2011 23:52:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m confused about why this cool query parser I&apos;ve been using is &quot;experimental&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;because some of it&apos;s current &quot;default&quot; behavior is less then ideal, particularly for people migrating from dismax (ie: see comments about making field queries configurable) and in a few cases even &quot;broken&quot; compared to how it worked when the patch was initially commited (see recent comments about foo:bar when foo is &lt;b&gt;not&lt;/b&gt; a field)&lt;/p&gt;

&lt;p&gt;in general, marking it experimental is a way to allow us to leave it in the 3.1 release but still have the flexibility to modify the &quot;default&quot; behavior moving forward.&lt;/p&gt;</comment>
                            <comment id="12995642" author="ryantxu" created="Thu, 17 Feb 2011 02:24:05 +0000"  >&lt;p&gt;the &apos;experimental&apos; label is a flag to say that the behavior will likely change in the future &amp;#8211; since back compatibility is taken so seriously, this allows a way to add features before they are 100% cooked.  &lt;/p&gt;</comment>
                            <comment id="13013182" author="gsingers" created="Wed, 30 Mar 2011 16:45:48 +0100"  >&lt;p&gt;Bulk close for 3.1.0 release&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12408947">SOLR-874</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12397372">SOLR-589</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12403783">SOLR-756</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12403792">SOLR-758</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12389640">SOLR-490</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12400216">SOLR-629</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12381627">SOLR-405</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12498784">SOLR-2368</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12537795">SOLR-3017</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12471989">SOLR-2058</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12424685" name="SOLR-1553.patch" size="54160" author="yseeley@gmail.com" created="Thu, 12 Nov 2009 01:05:16 +0000"/>
                            <attachment id="12429251" name="SOLR-1553.pf-refactor.patch" size="8431" author="hossman" created="Fri, 1 Jan 2010 08:55:54 +0000"/>
                            <attachment id="12471013" name="edismax.unescapedcolon.bug.test.patch" size="3677" author="ryantxu" created="Mon, 14 Feb 2011 19:42:45 +0000"/>
                            <attachment id="12437526" name="edismax.unescapedcolon.bug.test.patch" size="2383" author="hossman" created="Mon, 1 Mar 2010 22:27:43 +0000"/>
                            <attachment id="12437527" name="edismax.userFields.patch" size="2831" author="hossman" created="Mon, 1 Mar 2010 22:33:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 11 Nov 2009 21:14:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6114</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxxkkn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19652</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>