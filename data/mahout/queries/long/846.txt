The pdf() implementation in GaussianCluster is pretty lame. It is computing a running product of the element pdfs which, for wide input vectors (Reuters is 41,807), always underflows and returns 0. Here's the code:

  public double pdf(VectorWritable vw) {
    Vector x = vw.get();
    // return the product of the component pdfs
    // TODO: is this reasonable? correct? It seems to work in some cases.
    double pdf = 1;
    for (int i = 0; i < x.size(); i++) {
      // small prior on stdDev to avoid numeric instability when stdDev==0
      pdf *= UncommonDistributions.dNorm(x.getQuick(i),
          getCenter().getQuick(i), getRadius().getQuick(i) + 0.000001);
    }
    return pdf;


  }