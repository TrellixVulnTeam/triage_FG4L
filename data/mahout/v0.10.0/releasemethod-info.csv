metadata,unique_words,total_words
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingDataModelBuilder.buildDataModel(FastByIDMap<PreferenceArray>),10,23
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommenderEvaluatorRunner.BookCrossingBooleanRecommenderEvaluatorRunner(),5,5
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommenderEvaluatorRunner.main(String),26,60
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.KDDCupFactorizablePreferences(File),6,11
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.getUserIDs(),7,8
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.getItemIDs(),7,8
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.getPreferences(),14,26
"org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.getPreferences().$1.apply(Pair<PreferenceArray,long[]>)",5,6
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.getMinPreference(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.getMaxPreference(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.numUsers(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.numItems(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.numPreferences(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.FixedSizeLongIterator.FixedSizeLongIterator(long),6,8
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.FixedSizeLongIterator.nextLong(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.FixedSizeLongIterator.peek(),3,3
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.FixedSizeLongIterator.skip(int),3,3
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.FixedSizeLongIterator.hasNext(),3,3
org.apache.mahout.cf.taste.example.kddcup.track1.svd.KDDCupFactorizablePreferences.FixedSizeLongIterator.remove(),4,4
"org.apache.mahout.cf.taste.example.email.MailToDictionaryReducer.reduce(Text,Iterable<VarIntWritable>,Context)",13,26
"org.apache.mahout.cf.taste.example.email.MsgIdToDictionaryMapper.map(Text,Text,Context)",36,70
org.apache.mahout.cf.taste.example.email.EmailUtility.EmailUtility(),2,2
org.apache.mahout.cf.taste.example.email.EmailUtility.cleanUpEmailAddress(CharSequence),23,37
"org.apache.mahout.cf.taste.example.email.EmailUtility.loadDictionaries(Configuration,String,OpenObjectIntHashMap<String>,String,OpenObjectIntHashMap<String>)",31,86
org.apache.mahout.cf.taste.example.email.EmailUtility.parseReferences(CharSequence),16,31
org.apache.mahout.clustering.display.ClustersFilter.accept(Path),5,12
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1Callable.Track1Callable(Recommender,PreferenceArray)",7,14
org.apache.mahout.cf.taste.example.kddcup.track1.Track1Callable.call(),30,58
org.apache.mahout.cf.taste.example.kddcup.track2.TrackData.TrackData(CharSequence),17,33
org.apache.mahout.cf.taste.example.kddcup.track2.TrackData.parse(String),4,9
org.apache.mahout.cf.taste.example.kddcup.track2.TrackData.getTrackID(),1,2
org.apache.mahout.cf.taste.example.kddcup.track2.TrackData.getAlbumID(),1,2
org.apache.mahout.cf.taste.example.kddcup.track2.TrackData.getArtistID(),1,2
org.apache.mahout.cf.taste.example.kddcup.track2.TrackData.getGenreIDs(),3,4
org.apache.mahout.cf.taste.similarity.precompute.example.BatchItemSimilaritiesGroupLens.BatchItemSimilaritiesGroupLens(),4,4
org.apache.mahout.cf.taste.similarity.precompute.example.BatchItemSimilaritiesGroupLens.main(String[]),47,98
org.apache.mahout.cf.taste.example.kddcup.track2.Track2RecommenderBuilder.buildRecommender(DataModel),11,22
org.apache.mahout.clustering.syntheticcontrol.canopy.Job.Job(),1,1
org.apache.mahout.clustering.syntheticcontrol.canopy.Job.main(String[]),25,38
"org.apache.mahout.clustering.syntheticcontrol.canopy.Job.run(Path,Path,DistanceMeasure,double,double)",59,141
org.apache.mahout.clustering.syntheticcontrol.canopy.Job.run(String[]),25,96
org.apache.mahout.classifier.sgd.LogisticModelParametersTest.serializationWithoutCsv(),29,47
org.apache.mahout.classifier.df.mapreduce.BuildForest.run(String[]),77,494
org.apache.mahout.classifier.df.mapreduce.BuildForest.buildForest(),50,197
"org.apache.mahout.classifier.df.mapreduce.BuildForest.loadData(Configuration,Path,Dataset)",14,36
org.apache.mahout.classifier.df.mapreduce.BuildForest.main(String[]),10,11
"org.apache.mahout.h2obindings.ops.Cbind.exec(H2ODrm,H2ODrm)",28,66
"org.apache.mahout.h2obindings.ops.Cbind.zip(Frame,Vec,Frame,Vec)",28,61
"org.apache.mahout.h2obindings.ops.Cbind.join(Frame,Vec,Frame,Vec)",35,58
"org.apache.mahout.h2obindings.ops.Cbind.join(Frame,Vec,Frame,Vec).$1.map(Chunk)",12,26
org.apache.mahout.math.VectorWritable.VectorWritable(),2,2
org.apache.mahout.math.VectorWritable.VectorWritable(boolean),6,12
org.apache.mahout.math.VectorWritable.VectorWritable(Vector),2,6
"org.apache.mahout.math.VectorWritable.VectorWritable(Vector,boolean)",6,15
org.apache.mahout.math.VectorWritable.get(),8,10
org.apache.mahout.math.VectorWritable.set(Vector),2,5
org.apache.mahout.math.VectorWritable.isWritesLaxPrecision(),23,28
org.apache.mahout.math.VectorWritable.setWritesLaxPrecision(boolean),4,13
org.apache.mahout.math.VectorWritable.write(DataOutput),8,10
org.apache.mahout.math.VectorWritable.readFields(DataInput),10,16
"org.apache.mahout.math.VectorWritable.readFields(DataInput,byte,int)",36,119
"org.apache.mahout.math.VectorWritable.writeVector(DataOutput,Vector)",5,13
"org.apache.mahout.math.VectorWritable.flags(Vector,boolean)",9,30
"org.apache.mahout.math.VectorWritable.writeVectorFlagsAndSize(DataOutput,byte,int)",12,21
"org.apache.mahout.math.VectorWritable.writeVector(DataOutput,Vector,boolean)",10,26
"org.apache.mahout.math.VectorWritable.writeVectorContents(DataOutput,Vector,byte)",34,116
org.apache.mahout.math.VectorWritable.readVector(DataInput),7,12
"org.apache.mahout.math.VectorWritable.readVector(DataInput,byte,int)",9,18
org.apache.mahout.math.VectorWritable.merge(Iterator<VectorWritable>),5,12
org.apache.mahout.math.VectorWritable.mergeToVector(Iterator<VectorWritable>),12,27
org.apache.mahout.math.VectorWritable.equals(Object),4,8
org.apache.mahout.math.VectorWritable.hashCode(),3,5
org.apache.mahout.math.VectorWritable.toString(),2,4
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.ReloadFromJDBCDataModel(JDBCDataModel),18,34
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.ReloadFromJDBCDataModel(JDBCDataModel).$1.call(),9,10
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.refresh(Collection<Refreshable>),5,8
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.reload(),25,49
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getDelegate(),4,5
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getDelegateInMemory(),4,6
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getUserIDs(),7,8
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getPreferencesFromUser(long),8,10
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getItemIDsFromUser(long),8,10
"org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getPreferenceValue(long,long)",8,12
"org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getPreferenceTime(long,long)",8,12
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getItemIDs(),7,8
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getPreferencesForItem(long),8,12
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getNumItems(),6,8
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getNumUsers(),6,8
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getNumUsersWithPreferenceFor(long),8,12
"org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getNumUsersWithPreferenceFor(long,long)",8,14
"org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.setPreference(long,long,float)",9,14
"org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.removePreference(long,long)",8,12
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.hasPreferenceValues(),4,6
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getMaxPreference(),4,6
org.apache.mahout.cf.taste.impl.model.jdbc.ReloadFromJDBCDataModel.getMinPreference(),4,6
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommenderBuilder.buildRecommender(DataModel),8,14
"org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkRunner(long,long)",9,24
org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkFn.randIndex(),4,6
org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkFn.randBool(),4,6
org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkFn.depends(Vector),15,15
org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkFnD.randIndex(),4,6
org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkFnD.randBool(),4,6
org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkFnD.depends(Vector),15,15
org.apache.mahout.benchmark.BenchmarkRunner.randIndex(),4,4
org.apache.mahout.benchmark.BenchmarkRunner.randBool(),2,2
org.apache.mahout.benchmark.BenchmarkRunner.benchmark(BenchmarkFn),14,31
org.apache.mahout.benchmark.BenchmarkRunner.benchmarkD(BenchmarkFnD),22,41
org.apache.mahout.clustering.display.DisplayKMeans.DisplayKMeans(),8,9
org.apache.mahout.clustering.display.DisplayKMeans.main(String[]),35,81
"org.apache.mahout.clustering.display.DisplayKMeans.runSequentialKMeansClassifier(Configuration,Path,Path,DistanceMeasure,int,int,double)",44,90
"org.apache.mahout.clustering.display.DisplayKMeans.runSequentialKMeansClusterer(Configuration,Path,Path,DistanceMeasure,int,int,double)",28,55
org.apache.mahout.clustering.display.DisplayKMeans.paint(Graphics),6,9
org.apache.mahout.cf.taste.impl.similarity.jdbc.SQL92JDBCInMemoryItemSimilarity.SQL92JDBCInMemoryItemSimilarity(),14,18
org.apache.mahout.cf.taste.impl.similarity.jdbc.SQL92JDBCInMemoryItemSimilarity.SQL92JDBCInMemoryItemSimilarity(String),14,21
org.apache.mahout.cf.taste.impl.similarity.jdbc.SQL92JDBCInMemoryItemSimilarity.SQL92JDBCInMemoryItemSimilarity(DataSource),8,13
"org.apache.mahout.cf.taste.impl.similarity.jdbc.SQL92JDBCInMemoryItemSimilarity.SQL92JDBCInMemoryItemSimilarity(DataSource,String)",9,18
org.apache.mahout.h2obindings.H2OContext.H2OContext(String),18,28
org.apache.mahout.cf.taste.example.email.MailToRecReducer.setup(Context),7,11
"org.apache.mahout.cf.taste.example.email.MailToRecReducer.reduce(Text,Iterable<LongWritable>,Context)",14,28
"org.apache.mahout.text.ReadOnlyFileSystemDirectory.ReadOnlyFileSystemDirectory(FileSystem,Path,boolean,Configuration)",16,42
org.apache.mahout.text.ReadOnlyFileSystemDirectory.create(),19,54
org.apache.mahout.text.ReadOnlyFileSystemDirectory.list(),13,31
org.apache.mahout.text.ReadOnlyFileSystemDirectory.listAll(),3,4
org.apache.mahout.text.ReadOnlyFileSystemDirectory.fileExists(String),7,9
org.apache.mahout.text.ReadOnlyFileSystemDirectory.fileLength(String),9,11
org.apache.mahout.text.ReadOnlyFileSystemDirectory.deleteFile(String),8,14
"org.apache.mahout.text.ReadOnlyFileSystemDirectory.createOutput(String,IOContext)",20,37
org.apache.mahout.text.ReadOnlyFileSystemDirectory.sync(Collection<String>),6,6
"org.apache.mahout.text.ReadOnlyFileSystemDirectory.openInput(String,IOContext)",12,18
org.apache.mahout.text.ReadOnlyFileSystemDirectory.makeLock(String),3,5
org.apache.mahout.text.ReadOnlyFileSystemDirectory.makeLock(String).$1.obtain(),1,1
org.apache.mahout.text.ReadOnlyFileSystemDirectory.makeLock(String).$1.release(),1,1
org.apache.mahout.text.ReadOnlyFileSystemDirectory.makeLock(String).$1.isLocked(),4,4
org.apache.mahout.text.ReadOnlyFileSystemDirectory.makeLock(String).$1.toString(),5,6
org.apache.mahout.text.ReadOnlyFileSystemDirectory.clearLock(String),4,4
org.apache.mahout.text.ReadOnlyFileSystemDirectory.close(),4,5
org.apache.mahout.text.ReadOnlyFileSystemDirectory.setLockFactory(LockFactory),4,8
org.apache.mahout.text.ReadOnlyFileSystemDirectory.getLockFactory(),2,4
org.apache.mahout.text.ReadOnlyFileSystemDirectory.toString(),3,4
"org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexInput.Descriptor.Descriptor(Path,int)",6,11
"org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexInput.FileSystemIndexInput(Path,int)",14,30
"org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexInput.readInternal(byte[],int,int)",13,33
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexInput.close(),8,11
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexInput.seekInternal(long),5,6
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexInput.length(),1,2
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexInput.finalize(),5,7
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexInput.clone(),6,17
"org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexOutput.FileSystemIndexOutput(Path,int)",10,19
"org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexOutput.flushBuffer(byte[],int,int)",6,8
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexOutput.close(),6,10
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexOutput.seek(long),5,6
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexOutput.length(),3,3
org.apache.mahout.text.ReadOnlyFileSystemDirectory.FileSystemIndexOutput.finalize(),4,6
org.apache.mahout.cf.taste.example.email.FromEmailToDictionaryMapper.setup(Context),8,14
"org.apache.mahout.cf.taste.example.email.FromEmailToDictionaryMapper.map(Text,Text,Context)",36,77
org.apache.mahout.h2obindings.ops.AtA.exec(H2ODrm),24,39
org.apache.mahout.h2obindings.ops.AtA.exec(H2ODrm).$1.map(Chunk),12,26
org.apache.mahout.benchmark.ClosestCentroidBenchmark.ClosestCentroidBenchmark(VectorBenchmarks),6,8
org.apache.mahout.benchmark.ClosestCentroidBenchmark.benchmark(DistanceMeasure),40,195
"org.apache.mahout.cf.taste.impl.model.jdbc.AbstractBooleanPrefJDBCDataModel.AbstractBooleanPrefJDBCDataModel(DataSource,String,String,String,String,String,String,String,String,String,String,String,String,String,String,String,String,String,String,String)",21,135
org.apache.mahout.cf.taste.impl.model.jdbc.AbstractBooleanPrefJDBCDataModel.buildPreference(ResultSet),7,10
org.apache.mahout.cf.taste.impl.model.jdbc.AbstractBooleanPrefJDBCDataModel.getSetPreferenceSQL(),4,7
"org.apache.mahout.cf.taste.impl.model.jdbc.AbstractBooleanPrefJDBCDataModel.setPreference(long,long,float)",31,72
org.apache.mahout.cf.taste.impl.model.jdbc.AbstractBooleanPrefJDBCDataModel.hasPreferenceValues(),2,2
org.apache.mahout.cf.taste.impl.model.jdbc.AbstractBooleanPrefJDBCDataModel.getMaxPreference(),2,2
org.apache.mahout.cf.taste.impl.model.jdbc.AbstractBooleanPrefJDBCDataModel.getMinPreference(),2,2
"org.apache.mahout.utils.Bump125.scale(double,double)",8,14
org.apache.mahout.utils.Bump125.base(double),7,11
org.apache.mahout.utils.Bump125.increment(),5,17
"org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilter.BloomTokenFilter(Filter,boolean,TokenStream)",33,57
org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilter.incrementToken(),18,26
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCInMemoryItemSimilarity.MySQLJDBCInMemoryItemSimilarity(),6,6
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCInMemoryItemSimilarity.MySQLJDBCInMemoryItemSimilarity(String),10,13
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCInMemoryItemSimilarity.MySQLJDBCInMemoryItemSimilarity(DataSource),6,10
"org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCInMemoryItemSimilarity.MySQLJDBCInMemoryItemSimilarity(DataSource,String)",9,17
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCInMemoryItemSimilarity.getFetchSize(),9,9
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingDataModel.BookCrossingDataModel(boolean),19,25
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingDataModel.BookCrossingDataModel(File,boolean)",16,30
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingDataModel.convertBCFile(File,boolean)",51,116
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingDataModel.toString(),5,6
org.apache.mahout.text.LuceneSegmentRecordReaderTest.before(),26,65
org.apache.mahout.text.LuceneSegmentRecordReaderTest.after(),7,7
org.apache.mahout.text.LuceneSegmentRecordReaderTest.testKey(),33,83
org.apache.mahout.text.LuceneSegmentRecordReaderTest.testNonExistingIdField(),30,66
org.apache.mahout.text.LuceneSegmentRecordReaderTest.testNonExistingField(),30,67
"org.apache.mahout.text.LuceneSegmentRecordReaderTest.getTaskAttemptContext(Configuration,TaskAttemptID)",25,59
"org.apache.mahout.h2obindings.ops.AewUnary.exec(H2ODrm,Object,boolean)",33,68
"org.apache.mahout.h2obindings.ops.AewUnary.exec(H2ODrm,Object,boolean).MRTaskAewUnary.MRTaskAewUnary(Object)",5,5
"org.apache.mahout.h2obindings.ops.AewUnary.exec(H2ODrm,Object,boolean).MRTaskAewUnary.map(Chunk,NewChunk)",21,72
"org.apache.mahout.h2obindings.ops.MapBlock.exec(H2ODrm,int,Object,boolean,ClassTag<K>,ClassTag<R>)",49,139
"org.apache.mahout.h2obindings.ops.MapBlock.exec(H2ODrm,int,Object,boolean,ClassTag<K>,ClassTag<R>).MRTaskBMF.MRTaskBMF(Object,Vec)",23,34
"org.apache.mahout.h2obindings.ops.MapBlock.exec(H2ODrm,int,Object,boolean,ClassTag<K>,ClassTag<R>).MRTaskBMF.blockify(Chunk)",7,11
"org.apache.mahout.h2obindings.ops.MapBlock.exec(H2ODrm,int,Object,boolean,ClassTag<K>,ClassTag<R>).MRTaskBMF.deblockify(Matrix,NewChunk)",16,21
"org.apache.mahout.h2obindings.ops.MapBlock.exec(H2ODrm,int,Object,boolean,ClassTag<K>,ClassTag<R>).MRTaskBMF.map(Chunk,NewChunk)",28,64
org.apache.mahout.math.OldQRDecomposition.OldQRDecomposition(Matrix),55,130
org.apache.mahout.math.OldQRDecomposition.getQ(),17,38
org.apache.mahout.math.OldQRDecomposition.getR(),9,24
org.apache.mahout.math.OldQRDecomposition.hasFullRank(),5,5
org.apache.mahout.math.OldQRDecomposition.solve(Matrix),39,69
org.apache.mahout.math.OldQRDecomposition.toString(),8,12
org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.Track1Recommender(DataModel),14,26
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.recommend(long,int)",8,10
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.recommend(long,int,boolean)",9,13
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.recommend(long,int,IDRescorer)",9,13
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.recommend(long,int,IDRescorer,boolean)",11,17
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.estimatePreference(long,long)",7,11
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.setPreference(long,long,float)",8,13
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.removePreference(long,long)",7,11
org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.getDataModel(),3,7
org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.refresh(Collection<Refreshable>),5,7
org.apache.mahout.cf.taste.example.kddcup.track1.Track1Recommender.toString(),3,6
"org.apache.mahout.math.WeightedVector.WeightedVector(double,int)",4,8
"org.apache.mahout.math.WeightedVector.WeightedVector(Vector,double,int)",4,9
"org.apache.mahout.math.WeightedVector.WeightedVector(Vector,Vector,int)",6,11
"org.apache.mahout.math.WeightedVector.project(Vector,Vector)",6,10
"org.apache.mahout.math.WeightedVector.project(Vector,Vector,int)",5,11
org.apache.mahout.math.WeightedVector.getWeight(),1,2
org.apache.mahout.math.WeightedVector.getIndex(),1,2
org.apache.mahout.math.WeightedVector.setWeight(double),2,5
org.apache.mahout.math.WeightedVector.setIndex(int),2,5
org.apache.mahout.math.WeightedVector.like(),4,6
org.apache.mahout.math.WeightedVector.toString(),5,9
org.apache.mahout.math.WeightedVector.clone(),5,12
org.apache.mahout.math.DenseVector.DenseVector(),4,4
org.apache.mahout.math.DenseVector.DenseVector(double[]),9,13
"org.apache.mahout.math.DenseVector.DenseVector(double[],boolean)",7,13
"org.apache.mahout.math.DenseVector.DenseVector(DenseVector,boolean)",5,11
org.apache.mahout.math.DenseVector.DenseVector(int),7,13
org.apache.mahout.math.DenseVector.DenseVector(Vector),12,24
org.apache.mahout.math.DenseVector.dot(Vector),10,20
"org.apache.mahout.math.DenseVector.matrixLike(int,int)",4,8
org.apache.mahout.math.DenseVector.clone(),4,7
org.apache.mahout.math.DenseVector.isDense(),1,1
org.apache.mahout.math.DenseVector.isSequentialAccess(),2,2
org.apache.mahout.math.DenseVector.dotSelf(),6,10
org.apache.mahout.math.DenseVector.getQuick(int),3,4
org.apache.mahout.math.DenseVector.like(),3,5
org.apache.mahout.math.DenseVector.like(int),3,5
"org.apache.mahout.math.DenseVector.setQuick(int,double)",8,10
"org.apache.mahout.math.DenseVector.incrementQuick(int,double)",7,10
org.apache.mahout.math.DenseVector.assign(double),9,10
org.apache.mahout.math.DenseVector.getNumNondefaultElements(),5,5
org.apache.mahout.math.DenseVector.getNumNonZeroElements(),7,16
org.apache.mahout.math.DenseVector.assign(DenseVector),11,27
org.apache.mahout.math.DenseVector.mergeUpdates(OrderedIntDoubleMapping),7,20
"org.apache.mahout.math.DenseVector.viewPart(int,int)",7,21
org.apache.mahout.math.DenseVector.getLookupCost(),2,2
org.apache.mahout.math.DenseVector.getIteratorAdvanceCost(),3,3
org.apache.mahout.math.DenseVector.isAddConstantTime(),3,3
org.apache.mahout.math.DenseVector.iterateNonZero(),4,5
org.apache.mahout.math.DenseVector.iterator(),2,4
org.apache.mahout.math.DenseVector.equals(Object),8,14
org.apache.mahout.math.DenseVector.addAll(Vector),9,15
org.apache.mahout.math.DenseVector.NonDefaultIterator.hasNext(),8,15
org.apache.mahout.math.DenseVector.NonDefaultIterator.lookAhead(),5,16
org.apache.mahout.math.DenseVector.NonDefaultIterator.next(),12,29
org.apache.mahout.math.DenseVector.NonDefaultIterator.remove(),4,4
org.apache.mahout.math.DenseVector.AllIterator.AllIterator(),3,3
org.apache.mahout.math.DenseVector.AllIterator.hasNext(),3,3
org.apache.mahout.math.DenseVector.AllIterator.next(),5,10
org.apache.mahout.math.DenseVector.AllIterator.remove(),4,4
org.apache.mahout.math.DenseVector.DenseElement.get(),2,2
org.apache.mahout.math.DenseVector.DenseElement.index(),1,2
org.apache.mahout.math.DenseVector.DenseElement.set(double),7,8
org.apache.mahout.text.SequenceFilesFromLuceneStorage.run(LuceneStorageConfiguration),46,191
"org.apache.mahout.text.SequenceFilesFromLuceneStorage.SeqFileWriterCollector.SeqFileWriterCollector(LuceneStorageConfiguration,SequenceFile.Writer,int)",11,34
org.apache.mahout.text.SequenceFilesFromLuceneStorage.SeqFileWriterCollector.setScorer(Scorer),7,9
org.apache.mahout.text.SequenceFilesFromLuceneStorage.SeqFileWriterCollector.collect(int),35,84
org.apache.mahout.text.SequenceFilesFromLuceneStorage.SeqFileWriterCollector.setNextReader(AtomicReaderContext),6,9
org.apache.mahout.text.SequenceFilesFromLuceneStorage.SeqFileWriterCollector.acceptsDocsOutOfOrder(),2,2
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92JDBCDataModel.SQL92JDBCDataModel(),23,36
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92JDBCDataModel.SQL92JDBCDataModel(String),30,67
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92JDBCDataModel.SQL92JDBCDataModel(DataSource),17,39
"org.apache.mahout.cf.taste.impl.model.jdbc.SQL92JDBCDataModel.SQL92JDBCDataModel(DataSource,String,String,String,String,String)",38,289
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92JDBCDataModel.getUpdatePreferenceSQL(),4,7
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92JDBCDataModel.getVerifyPreferenceSQL(),4,7
"org.apache.mahout.cf.taste.impl.model.jdbc.SQL92JDBCDataModel.setPreference(long,long,float)",43,166
"org.apache.mahout.utils.vectors.io.DelimitedTermInfoWriter.DelimitedTermInfoWriter(Writer,String,String)",7,16
org.apache.mahout.utils.vectors.io.DelimitedTermInfoWriter.write(TermInfo),21,65
org.apache.mahout.utils.vectors.io.DelimitedTermInfoWriter.close(),1,1
org.apache.mahout.math.VarIntWritable.VarIntWritable(),2,2
org.apache.mahout.math.VarIntWritable.VarIntWritable(int),3,5
org.apache.mahout.math.VarIntWritable.get(),1,1
org.apache.mahout.math.VarIntWritable.set(int),2,4
org.apache.mahout.math.VarIntWritable.equals(Object),5,8
org.apache.mahout.math.VarIntWritable.hashCode(),3,3
org.apache.mahout.math.VarIntWritable.toString(),2,5
org.apache.mahout.math.VarIntWritable.clone(),4,6
org.apache.mahout.math.VarIntWritable.compareTo(VarIntWritable),4,7
org.apache.mahout.math.VarIntWritable.write(DataOutput),8,9
org.apache.mahout.math.VarIntWritable.readFields(DataInput),9,10
"org.apache.mahout.utils.clustering.CSVClusterWriter.CSVClusterWriter(Writer,Map<List<Integer,WeightedPropertyVectorWritable>>,DistanceMeasure)",12,19
org.apache.mahout.utils.clustering.CSVClusterWriter.write(ClusterWritable),25,69
"org.apache.mahout.math.AbstractMatrix.AbstractMatrix(int,int)",3,7
org.apache.mahout.math.AbstractMatrix.columnSize(),3,3
org.apache.mahout.math.AbstractMatrix.rowSize(),3,3
org.apache.mahout.math.AbstractMatrix.iterator(),4,5
org.apache.mahout.math.AbstractMatrix.iterateAll(),6,9
org.apache.mahout.math.AbstractMatrix.iterateAll().$1.computeNext(),8,12
org.apache.mahout.math.AbstractMatrix.iterateNonEmpty(),5,6
org.apache.mahout.math.AbstractMatrix.numSlices(),3,4
"org.apache.mahout.math.AbstractMatrix.get(String,String)",10,38
org.apache.mahout.math.AbstractMatrix.getColumnLabelBindings(),6,9
org.apache.mahout.math.AbstractMatrix.getRowLabelBindings(),6,9
"org.apache.mahout.math.AbstractMatrix.set(String,double[])",11,29
"org.apache.mahout.math.AbstractMatrix.set(String,int,double[])",9,26
"org.apache.mahout.math.AbstractMatrix.set(String,String,double)",12,42
"org.apache.mahout.math.AbstractMatrix.set(String,String,int,int,double)",10,44
"org.apache.mahout.math.AbstractMatrix.setColumnLabelBindings(Map<String,Integer>)",7,12
"org.apache.mahout.math.AbstractMatrix.setRowLabelBindings(Map<String,Integer>)",7,12
org.apache.mahout.math.AbstractMatrix.numRows(),4,4
org.apache.mahout.math.AbstractMatrix.numCols(),4,4
org.apache.mahout.math.AbstractMatrix.asFormatString(),2,4
org.apache.mahout.math.AbstractMatrix.assign(double),11,22
org.apache.mahout.math.AbstractMatrix.assign(double[][]),14,42
"org.apache.mahout.math.AbstractMatrix.assign(Matrix,DoubleDoubleFunction)",14,47
org.apache.mahout.math.AbstractMatrix.assign(Matrix),12,40
org.apache.mahout.math.AbstractMatrix.assign(DoubleFunction),12,27
org.apache.mahout.math.AbstractMatrix.aggregateRows(VectorFunction),10,21
org.apache.mahout.math.AbstractMatrix.viewRow(int),4,8
org.apache.mahout.math.AbstractMatrix.viewColumn(int),4,8
org.apache.mahout.math.AbstractMatrix.viewDiagonal(),4,6
"org.apache.mahout.math.AbstractMatrix.aggregate(DoubleDoubleFunction,DoubleFunction)",9,14
"org.apache.mahout.math.AbstractMatrix.aggregate(DoubleDoubleFunction,DoubleFunction).$2.apply(Vector)",5,5
org.apache.mahout.math.AbstractMatrix.aggregateColumns(VectorFunction),12,21
org.apache.mahout.math.AbstractMatrix.determinant(),26,55
org.apache.mahout.math.AbstractMatrix.clone(),15,43
org.apache.mahout.math.AbstractMatrix.divide(double),9,23
"org.apache.mahout.math.AbstractMatrix.get(int,int)",6,23
org.apache.mahout.math.AbstractMatrix.minus(Matrix),13,47
org.apache.mahout.math.AbstractMatrix.plus(double),11,27
org.apache.mahout.math.AbstractMatrix.plus(Matrix),13,47
"org.apache.mahout.math.AbstractMatrix.set(int,int,double)",8,27
"org.apache.mahout.math.AbstractMatrix.set(int,double[])",12,30
org.apache.mahout.math.AbstractMatrix.times(double),11,27
org.apache.mahout.math.AbstractMatrix.times(Matrix),14,46
org.apache.mahout.math.AbstractMatrix.times(Vector),14,30
org.apache.mahout.math.AbstractMatrix.timesSquared(Vector),16,28
org.apache.mahout.math.AbstractMatrix.transpose(),11,29
"org.apache.mahout.math.AbstractMatrix.viewPart(int,int,int,int)",8,19
"org.apache.mahout.math.AbstractMatrix.viewPart(int[],int[])",9,48
org.apache.mahout.math.AbstractMatrix.zSum(),7,17
org.apache.mahout.math.AbstractMatrix.getNumNondefaultElements(),6,7
"org.apache.mahout.math.AbstractMatrix.TransposeViewVector.TransposeViewVector(Matrix,int)",5,6
"org.apache.mahout.math.AbstractMatrix.TransposeViewVector.TransposeViewVector(Matrix,int,boolean)",10,29
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.clone(),7,9
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.isDense(),1,1
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.isSequentialAccess(),2,2
"org.apache.mahout.math.AbstractMatrix.TransposeViewVector.matrixLike(int,int)",3,7
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.iterator(),3,6
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.iterator().$1.computeNext(),4,5
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.iterateNonZero(),4,5
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.getElement(int),2,6
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.getElement(int).$2.get(),1,1
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.getElement(int).$2.index(),1,1
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.getElement(int).$2.set(double),3,5
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.mergeUpdates(OrderedIntDoubleMapping),10,11
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.getQuick(int),9,16
"org.apache.mahout.math.AbstractMatrix.TransposeViewVector.setQuick(int,double)",14,33
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.newVector(int),3,6
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.like(),3,4
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.like(int),3,5
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.getNumNondefaultElements(),4,4
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.getLookupCost(),6,12
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.getIteratorAdvanceCost(),7,14
org.apache.mahout.math.AbstractMatrix.TransposeViewVector.isAddConstantTime(),7,14
org.apache.mahout.math.AbstractMatrix.toString(),17,67
org.apache.mahout.math.AbstractMatrix.getFlavor(),7,10
"org.apache.mahout.math.FunctionalMatrixView.FunctionalMatrixView(int,int,IntIntFunction)",6,8
"org.apache.mahout.math.FunctionalMatrixView.FunctionalMatrixView(int,int,IntIntFunction,boolean)",17,30
"org.apache.mahout.math.FunctionalMatrixView.assignColumn(int,Vector)",9,11
"org.apache.mahout.math.FunctionalMatrixView.assignRow(int,Vector)",10,12
"org.apache.mahout.math.FunctionalMatrixView.getQuick(int,int)",4,6
org.apache.mahout.math.FunctionalMatrixView.like(),3,3
"org.apache.mahout.math.FunctionalMatrixView.like(int,int)",5,12
"org.apache.mahout.math.FunctionalMatrixView.setQuick(int,int,double)",12,12
org.apache.mahout.math.FunctionalMatrixView.viewRow(int),5,9
org.apache.mahout.math.FunctionalMatrixView.viewColumn(int),5,9
org.apache.mahout.math.FunctionalMatrixView.getFlavor(),2,4
"org.apache.mahout.utils.vectors.arff.ARFFVectorIterable.ARFFVectorIterable(File,ARFFModel)",8,13
"org.apache.mahout.utils.vectors.arff.ARFFVectorIterable.ARFFVectorIterable(File,Charset,ARFFModel)",10,16
"org.apache.mahout.utils.vectors.arff.ARFFVectorIterable.ARFFVectorIterable(String,ARFFModel)",7,13
"org.apache.mahout.utils.vectors.arff.ARFFVectorIterable.ARFFVectorIterable(Reader,ARFFModel)",67,290
org.apache.mahout.utils.vectors.arff.ARFFVectorIterable.iterator(),5,7
org.apache.mahout.utils.vectors.arff.ARFFVectorIterable.getModel(),6,10
org.apache.mahout.classifier.sgd.bankmarketing.BankMarketingClassificationMain.main(String[]),49,105
org.apache.mahout.cf.taste.example.kddcup.track1.EstimateConverter.EstimateConverter(),2,2
"org.apache.mahout.cf.taste.example.kddcup.track1.EstimateConverter.convert(double,long,long)",9,27
org.apache.mahout.classifier.email.PrepEmailReducer.setup(Context),13,17
"org.apache.mahout.classifier.email.PrepEmailReducer.reduce(Text,Iterable<VectorWritable>,Context)",24,35
org.apache.mahout.math.list.AbstractList.size(),1,1
org.apache.mahout.math.list.AbstractList.isEmpty(),2,2
"org.apache.mahout.math.list.AbstractList.beforeInsertDummies(int,int)",21,40
"org.apache.mahout.math.list.AbstractList.checkRange(int,int)",7,17
"org.apache.mahout.math.list.AbstractList.checkRangeFromTo(int,int,int)",9,18
org.apache.mahout.math.list.AbstractList.clear(),10,11
org.apache.mahout.math.list.AbstractList.mergeSort(),39,56
"org.apache.mahout.math.list.AbstractList.mergeSortFromTo(int,int)",44,67
org.apache.mahout.math.list.AbstractList.quickSort(),40,53
"org.apache.mahout.math.list.AbstractList.quickSortFromTo(int,int)",49,66
org.apache.mahout.math.list.AbstractList.remove(int),16,25
"org.apache.mahout.math.list.AbstractList.removeFromTo(int,int)",20,37
org.apache.mahout.math.list.AbstractList.reverse(),4,4
org.apache.mahout.math.list.AbstractList.setSize(int),23,69
org.apache.mahout.math.list.AbstractList.sort(),19,25
"org.apache.mahout.math.list.AbstractList.sortFromTo(int,int)",30,42
org.apache.mahout.math.list.AbstractList.trimToSize(),21,23
"org.apache.mahout.math.VectorBinaryAggregate.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",12,14
"org.apache.mahout.math.VectorBinaryAggregate.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",11,15
"org.apache.mahout.math.VectorBinaryAggregate.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",13,15
"org.apache.mahout.math.VectorBinaryAggregate.getBestOperation(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",14,33
"org.apache.mahout.math.VectorBinaryAggregate.aggregateBest(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",9,12
"org.apache.mahout.math.VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",10,12
"org.apache.mahout.math.VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",10,14
"org.apache.mahout.math.VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",10,23
"org.apache.mahout.math.VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",9,11
"org.apache.mahout.math.VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",10,16
"org.apache.mahout.math.VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",10,23
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateIntersection.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",7,11
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateIntersection.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",11,20
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateIntersection.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",11,49
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateUnionSequential.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",7,11
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateUnionSequential.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",11,20
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateUnionSequential.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",16,68
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateUnionRandom.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",9,13
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateUnionRandom.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",12,24
"org.apache.mahout.math.VectorBinaryAggregate.AggregateIterateUnionRandom.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",16,63
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateSequential.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",6,11
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateSequential.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",9,16
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateSequential.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",8,31
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateThisLookupThat.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",8,10
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateThisLookupThat.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",8,12
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateThisLookupThat.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",10,29
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateThatLookupThis.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",8,10
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateThatLookupThis.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",8,12
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllIterateThatLookupThis.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",10,29
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllLoop.isValid(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",3,5
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllLoop.estimateCost(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",6,11
"org.apache.mahout.math.VectorBinaryAggregate.AggregateAllLoop.aggregate(Vector,Vector,DoubleDoubleFunction,DoubleDoubleFunction)",7,17
org.apache.mahout.collections.Arithmetic.Arithmetic(),4,4
"org.apache.mahout.collections.Arithmetic.binomial(double,long)",7,16
"org.apache.mahout.collections.Arithmetic.binomial(long,long)",29,52
org.apache.mahout.collections.Arithmetic.ceil(double),12,21
"org.apache.mahout.collections.Arithmetic.chbevl(double,double[],int)",39,61
org.apache.mahout.collections.Arithmetic.factorial(int),12,23
org.apache.mahout.collections.Arithmetic.floor(double),13,23
"org.apache.mahout.collections.Arithmetic.log(double,double)",6,15
org.apache.mahout.collections.Arithmetic.log10(double),5,12
org.apache.mahout.collections.Arithmetic.log2(double),5,12
org.apache.mahout.collections.Arithmetic.logFactorial(int),15,18
org.apache.mahout.collections.Arithmetic.longFactorial(int),12,17
org.apache.mahout.collections.Arithmetic.stirlingCorrection(int),10,26
"org.apache.mahout.h2obindings.ops.ABt.exec(H2ODrm,H2ODrm)",28,63
"org.apache.mahout.h2obindings.ops.ABt.exec(H2ODrm,H2ODrm).$1.map(Chunk,NewChunk)",12,24
org.apache.mahout.math.RandomAccessSparseVector.RandomAccessSparseVector(),6,6
org.apache.mahout.math.RandomAccessSparseVector.RandomAccessSparseVector(int),12,14
"org.apache.mahout.math.RandomAccessSparseVector.RandomAccessSparseVector(int,int)",10,13
org.apache.mahout.math.RandomAccessSparseVector.RandomAccessSparseVector(Vector),12,13
"org.apache.mahout.math.RandomAccessSparseVector.RandomAccessSparseVector(int,OpenIntDoubleHashMap)",8,11
"org.apache.mahout.math.RandomAccessSparseVector.RandomAccessSparseVector(RandomAccessSparseVector,boolean)",11,19
"org.apache.mahout.math.RandomAccessSparseVector.matrixLike(int,int)",4,8
org.apache.mahout.math.RandomAccessSparseVector.clone(),9,14
org.apache.mahout.math.RandomAccessSparseVector.toString(),3,5
org.apache.mahout.math.RandomAccessSparseVector.assign(Vector),11,15
org.apache.mahout.math.RandomAccessSparseVector.mergeUpdates(OrderedIntDoubleMapping),7,12
org.apache.mahout.math.RandomAccessSparseVector.isDense(),1,1
org.apache.mahout.math.RandomAccessSparseVector.isSequentialAccess(),2,2
org.apache.mahout.math.RandomAccessSparseVector.getQuick(int),3,4
"org.apache.mahout.math.RandomAccessSparseVector.setQuick(int,double)",10,15
"org.apache.mahout.math.RandomAccessSparseVector.incrementQuick(int,double)",9,13
org.apache.mahout.math.RandomAccessSparseVector.like(),6,11
org.apache.mahout.math.RandomAccessSparseVector.like(int),7,9
org.apache.mahout.math.RandomAccessSparseVector.getNumNondefaultElements(),5,5
org.apache.mahout.math.RandomAccessSparseVector.getNumNonZeroElements(),12,31
org.apache.mahout.math.RandomAccessSparseVector.getLookupCost(),2,2
org.apache.mahout.math.RandomAccessSparseVector.getIteratorAdvanceCost(),8,11
org.apache.mahout.math.RandomAccessSparseVector.isAddConstantTime(),3,3
org.apache.mahout.math.RandomAccessSparseVector.iterateNonZero(),4,5
org.apache.mahout.math.RandomAccessSparseVector.iterator(),2,4
org.apache.mahout.math.RandomAccessSparseVector.NonDefaultIterator.NonDefaultElement.get(),2,2
org.apache.mahout.math.RandomAccessSparseVector.NonDefaultIterator.NonDefaultElement.index(),3,4
org.apache.mahout.math.RandomAccessSparseVector.NonDefaultIterator.NonDefaultElement.set(double),7,9
org.apache.mahout.math.RandomAccessSparseVector.NonDefaultIterator.NonDefaultIterator(),2,4
org.apache.mahout.math.RandomAccessSparseVector.NonDefaultIterator.hasNext(),1,1
org.apache.mahout.math.RandomAccessSparseVector.NonDefaultIterator.next(),5,7
org.apache.mahout.math.RandomAccessSparseVector.NonDefaultIterator.remove(),4,4
org.apache.mahout.math.RandomAccessSparseVector.AllIterator.AllIterator(),3,3
org.apache.mahout.math.RandomAccessSparseVector.AllIterator.hasNext(),3,3
org.apache.mahout.math.RandomAccessSparseVector.AllIterator.next(),3,6
org.apache.mahout.math.RandomAccessSparseVector.AllIterator.remove(),4,4
org.apache.mahout.math.RandomAccessSparseVector.RandomAccessElement.get(),2,2
org.apache.mahout.math.RandomAccessSparseVector.RandomAccessElement.index(),1,2
org.apache.mahout.math.RandomAccessSparseVector.RandomAccessElement.set(double),9,13
org.apache.mahout.text.LuceneSegmentInputSplit.LuceneSegmentInputSplit(),5,5
"org.apache.mahout.text.LuceneSegmentInputSplit.LuceneSegmentInputSplit(Path,String,long)",10,24
org.apache.mahout.text.LuceneSegmentInputSplit.getLength(),3,5
org.apache.mahout.text.LuceneSegmentInputSplit.getLocations(),4,6
org.apache.mahout.text.LuceneSegmentInputSplit.getSegmentInfoName(),4,7
org.apache.mahout.text.LuceneSegmentInputSplit.getIndexPath(),2,5
org.apache.mahout.text.LuceneSegmentInputSplit.write(DataOutput),12,16
org.apache.mahout.text.LuceneSegmentInputSplit.readFields(DataInput),12,17
org.apache.mahout.text.LuceneSegmentInputSplit.getSegment(Configuration),27,82
"org.apache.mahout.h2obindings.ops.CbindScalar.exec(H2ODrm,double,boolean)",23,57
"org.apache.mahout.h2obindings.ops.AewScalar.exec(H2ODrm,double,String)",33,68
"org.apache.mahout.h2obindings.ops.AewScalar.exec(H2ODrm,double,String).$1.opfn(String,double,double)",3,6
"org.apache.mahout.h2obindings.ops.AewScalar.exec(H2ODrm,double,String).$1.map(Chunk,NewChunk)",12,22
"org.apache.mahout.text.LuceneSegmentRecordReader.initialize(InputSplit,TaskAttemptContext)",31,119
org.apache.mahout.text.LuceneSegmentRecordReader.nextKeyValue(),7,11
org.apache.mahout.text.LuceneSegmentRecordReader.getCurrentKey(),9,12
org.apache.mahout.text.LuceneSegmentRecordReader.getCurrentValue(),5,7
org.apache.mahout.text.LuceneSegmentRecordReader.getProgress(),10,14
org.apache.mahout.text.LuceneSegmentRecordReader.close(),4,5
org.apache.mahout.math.PersistentObject.PersistentObject(),3,3
org.apache.mahout.math.PersistentObject.clone(),9,11
"org.apache.mahout.math.jet.random.Gamma.Gamma(double,double,Random)",17,42
org.apache.mahout.math.jet.random.Gamma.cdf(double),5,5
org.apache.mahout.math.jet.random.Gamma.nextDouble(),2,2
"org.apache.mahout.math.jet.random.Gamma.nextDouble(double,double)",71,198
org.apache.mahout.math.jet.random.Gamma.pdf(double),12,25
org.apache.mahout.math.jet.random.Gamma.toString(),4,5
org.apache.mahout.math.jet.random.Gamma.logGamma(double),6,11
org.apache.mahout.utils.io.IOWriterWrapper.IOWriterWrapper(Writer),2,6
"org.apache.mahout.utils.io.IOWriterWrapper.write(String,String)",6,10
org.apache.mahout.utils.io.IOWriterWrapper.close(),3,4
org.apache.mahout.text.LuceneIndexHelper.LuceneIndexHelper(),3,3
"org.apache.mahout.text.LuceneIndexHelper.fieldShouldExistInIndex(IndexReader,String)",15,35
org.apache.mahout.utils.regex.IdentityTransformer.transformMatch(String),3,6
org.apache.mahout.math.FileBasedMatrixTest.testBigMatrix(),38,90
org.apache.mahout.math.FileBasedMatrixTest.matrixValue(int),2,2
org.apache.mahout.math.FileBasedMatrixTest.testSetData(),30,61
org.apache.mahout.utils.vectors.arff.DriverTest.dictionary(),24,60
org.apache.mahout.utils.vectors.arff.DriverTest.dictionaryJSON(),25,62
org.apache.mahout.math.random.Sampler<T>.sample(),1,1
"org.apache.mahout.math.IndexException.IndexException(int,int)",6,10
org.apache.mahout.cf.taste.example.kddcup.track1.Track1RecommenderEvaluatorRunner.Track1RecommenderEvaluatorRunner(),4,4
org.apache.mahout.cf.taste.example.kddcup.track1.Track1RecommenderEvaluatorRunner.main(String),28,81
org.apache.mahout.classifier.sgd.SGDInfo.getAverageLL(),1,2
org.apache.mahout.classifier.sgd.SGDInfo.setAverageLL(double),2,5
org.apache.mahout.classifier.sgd.SGDInfo.getAverageCorrect(),2,4
org.apache.mahout.classifier.sgd.SGDInfo.setAverageCorrect(double),3,9
org.apache.mahout.classifier.sgd.SGDInfo.getStep(),1,2
org.apache.mahout.classifier.sgd.SGDInfo.setStep(double),2,5
org.apache.mahout.classifier.sgd.SGDInfo.getBumps(),1,2
org.apache.mahout.classifier.sgd.SGDInfo.setBumps(int[]),2,5
org.apache.mahout.text.SequenceFilesFromMailArchivesMapper.setup(Context),53,210
"org.apache.mahout.text.SequenceFilesFromMailArchivesMapper.parseMailboxLineByLine(String,InputStream,Context)",61,252
"org.apache.mahout.text.SequenceFilesFromMailArchivesMapper.generateKey(String,String,String)",15,22
"org.apache.mahout.text.SequenceFilesFromMailArchivesMapper.writeContent(String,StringBuilder,CharSequence,String[])",15,29
"org.apache.mahout.text.SequenceFilesFromMailArchivesMapper.map(IntWritable,BytesWritable,Context)",24,55
org.apache.mahout.classifier.sgd.bankmarketing.TelephoneCallParser.TelephoneCallParser(String),7,11
org.apache.mahout.classifier.sgd.bankmarketing.TelephoneCallParser.iterator(),24,36
org.apache.mahout.classifier.sgd.bankmarketing.TelephoneCallParser.iterator().$1.computeNext(),16,23
org.apache.mahout.clustering.display.ClustersFilterTest.setUp(),8,10
org.apache.mahout.clustering.display.ClustersFilterTest.testAcceptNotFinal(),11,41
org.apache.mahout.clustering.display.ClustersFilterTest.testAcceptFinalPath(),11,74
org.apache.mahout.cf.taste.impl.similarity.jdbc.SQL92JDBCItemSimilarity.SQL92JDBCItemSimilarity(),8,8
org.apache.mahout.cf.taste.impl.similarity.jdbc.SQL92JDBCItemSimilarity.SQL92JDBCItemSimilarity(String),11,16
org.apache.mahout.cf.taste.impl.similarity.jdbc.SQL92JDBCItemSimilarity.SQL92JDBCItemSimilarity(DataSource),8,18
"org.apache.mahout.cf.taste.impl.similarity.jdbc.SQL92JDBCItemSimilarity.SQL92JDBCItemSimilarity(DataSource,String,String,String,String)",12,60
org.apache.mahout.clustering.conversion.InputDriver.InputDriver(),2,2
org.apache.mahout.clustering.conversion.InputDriver.main(String[]),49,158
"org.apache.mahout.clustering.conversion.InputDriver.runJob(Path,Path,String)",35,92
org.apache.mahout.text.SequenceFilesFromLuceneStorageMapper.setup(Context),20,51
"org.apache.mahout.text.SequenceFilesFromLuceneStorageMapper.map(Text,NullWritable,Context)",36,111
org.apache.mahout.text.SequenceFilesFromLuceneStorageMapper.cleanup(Context),7,9
org.apache.mahout.utils.regex.RegexFormatter.format(String),2,4
"org.apache.mahout.utils.io.ChunkedWriter.ChunkedWriter(Configuration,int,Path)",26,59
org.apache.mahout.utils.io.ChunkedWriter.getPath(int),3,7
"org.apache.mahout.utils.io.ChunkedWriter.write(String,String)",24,60
org.apache.mahout.utils.io.ChunkedWriter.close(),4,5
org.apache.mahout.text.LuceneSegmentInputFormatTest.before(),19,39
org.apache.mahout.text.LuceneSegmentInputFormatTest.after(),7,7
org.apache.mahout.text.LuceneSegmentInputFormatTest.testGetSplits(),27,69
"org.apache.mahout.text.LuceneSegmentInputFormatTest.getJobContext(Configuration,JobID)",24,50
org.apache.mahout.math.CentroidTest.testUpdate(),25,65
org.apache.mahout.math.CentroidTest.vectorToTest(int),6,10
org.apache.mahout.math.CentroidTest.testSize(),7,9
org.apache.mahout.math.CentroidTest.generateTestVector(int),7,11
"org.apache.mahout.text.doc.UnstoredFieldsDocument.UnstoredFieldsDocument(String,String)",5,7
org.apache.mahout.text.doc.UnstoredFieldsDocument.asLuceneDocument(),7,16
org.apache.mahout.math.AbstractVector.AbstractVector(int),2,4
org.apache.mahout.math.AbstractVector.all(),3,5
org.apache.mahout.math.AbstractVector.all().$1.iterator(),3,5
org.apache.mahout.math.AbstractVector.nonZeroes(),4,6
org.apache.mahout.math.AbstractVector.nonZeroes().$2.iterator(),4,5
org.apache.mahout.math.AbstractVector.iterator(),15,21
org.apache.mahout.math.AbstractVector.iterateNonZero(),17,24
"org.apache.mahout.math.AbstractVector.aggregate(DoubleDoubleFunction,DoubleFunction)",29,86
"org.apache.mahout.math.AbstractVector.aggregate(Vector,DoubleDoubleFunction,DoubleDoubleFunction)",11,20
"org.apache.mahout.math.AbstractVector.matrixLike(int,int)",13,19
"org.apache.mahout.math.AbstractVector.viewPart(int,int)",7,21
org.apache.mahout.math.AbstractVector.clone(),10,18
org.apache.mahout.math.AbstractVector.divide(double),10,16
org.apache.mahout.math.AbstractVector.dot(Vector),11,15
org.apache.mahout.math.AbstractVector.dotSelf(),6,7
org.apache.mahout.math.AbstractVector.get(int),4,10
org.apache.mahout.math.AbstractVector.getElement(int),3,6
org.apache.mahout.math.AbstractVector.normalize(),7,7
org.apache.mahout.math.AbstractVector.normalize(double),5,6
org.apache.mahout.math.AbstractVector.logNormalize(),7,9
org.apache.mahout.math.AbstractVector.logNormalize(double),5,9
"org.apache.mahout.math.AbstractVector.logNormalize(double,double)",22,38
org.apache.mahout.math.AbstractVector.norm(double),28,55
org.apache.mahout.math.AbstractVector.getLengthSquared(),4,10
org.apache.mahout.math.AbstractVector.invalidateCachedLength(),4,5
org.apache.mahout.math.AbstractVector.getDistanceSquared(Vector),18,39
org.apache.mahout.math.AbstractVector.maxValue(),8,10
org.apache.mahout.math.AbstractVector.maxValueIndex(),18,50
org.apache.mahout.math.AbstractVector.minValue(),8,10
org.apache.mahout.math.AbstractVector.minValueIndex(),19,50
org.apache.mahout.math.AbstractVector.plus(double),8,12
org.apache.mahout.math.AbstractVector.plus(Vector),10,15
org.apache.mahout.math.AbstractVector.minus(Vector),10,15
"org.apache.mahout.math.AbstractVector.set(int,double)",6,14
"org.apache.mahout.math.AbstractVector.incrementQuick(int,double)",4,10
org.apache.mahout.math.AbstractVector.times(double),8,8
org.apache.mahout.math.AbstractVector.createOptimizedCopy(),17,27
org.apache.mahout.math.AbstractVector.createOptimizedCopy(Vector),11,21
org.apache.mahout.math.AbstractVector.times(Vector),14,27
org.apache.mahout.math.AbstractVector.zSum(),5,6
org.apache.mahout.math.AbstractVector.getNumNonZeroElements(),7,10
org.apache.mahout.math.AbstractVector.assign(double),27,51
org.apache.mahout.math.AbstractVector.assign(double[]),22,47
org.apache.mahout.math.AbstractVector.assign(Vector),3,5
"org.apache.mahout.math.AbstractVector.assign(DoubleDoubleFunction,double)",12,21
org.apache.mahout.math.AbstractVector.assign(DoubleFunction),13,21
"org.apache.mahout.math.AbstractVector.assign(Vector,DoubleDoubleFunction)",10,19
org.apache.mahout.math.AbstractVector.cross(Vector),14,25
org.apache.mahout.math.AbstractVector.size(),1,2
org.apache.mahout.math.AbstractVector.asFormatString(),2,4
org.apache.mahout.math.AbstractVector.hashCode(),13,21
org.apache.mahout.math.AbstractVector.equals(Object),9,13
org.apache.mahout.math.AbstractVector.toString(),1,3
org.apache.mahout.math.AbstractVector.toString(String[]),11,45
org.apache.mahout.math.AbstractVector.sparseVectorToString(),20,43
org.apache.mahout.math.AbstractVector.LocalElement.LocalElement(int),3,5
org.apache.mahout.math.AbstractVector.LocalElement.get(),2,2
org.apache.mahout.math.AbstractVector.LocalElement.index(),1,2
org.apache.mahout.math.AbstractVector.LocalElement.set(double),4,6
org.apache.mahout.math.Sorting.Sorting(),1,1
"org.apache.mahout.math.Sorting.med3(T[],int,int,int,Comparator<T>)",8,21
"org.apache.mahout.math.Sorting.med3(byte[],int,int,int,ByteComparator)",8,21
"org.apache.mahout.math.Sorting.med3(char[],int,int,int,CharComparator)",8,21
"org.apache.mahout.math.Sorting.med3(double[],int,int,int,DoubleComparator)",8,21
"org.apache.mahout.math.Sorting.med3(float[],int,int,int,FloatComparator)",8,21
"org.apache.mahout.math.Sorting.med3(int[],int,int,int,IntComparator)",8,21
"org.apache.mahout.math.Sorting.med3(int,int,int,IntComparator)",15,33
"org.apache.mahout.math.Sorting.med3(long[],int,int,int,LongComparator)",8,21
"org.apache.mahout.math.Sorting.med3(short[],int,int,int,ShortComparator)",8,21
"org.apache.mahout.math.Sorting.quickSort(byte[],int,int,ByteComparator)",22,56
"org.apache.mahout.math.Sorting.checkBounds(int,int,int)",11,34
"org.apache.mahout.math.Sorting.quickSort0(int,int,byte[],ByteComparator)",16,137
"org.apache.mahout.math.Sorting.quickSort(int,int,IntComparator,Swapper)",24,51
"org.apache.mahout.math.Sorting.quickSort0(int,int,IntComparator,Swapper)",43,193
"org.apache.mahout.math.Sorting.insertionSort(int,int,IntComparator,Swapper)",18,34
"org.apache.mahout.math.Sorting.quickSort(char[],int,int,CharComparator)",20,51
"org.apache.mahout.math.Sorting.quickSort0(int,int,char[],CharComparator)",16,137
"org.apache.mahout.math.Sorting.quickSort(double[],int,int,DoubleComparator)",22,55
"org.apache.mahout.math.Sorting.quickSort0(int,int,double[],DoubleComparator)",16,137
"org.apache.mahout.math.Sorting.quickSort(float[],int,int,FloatComparator)",20,54
"org.apache.mahout.math.Sorting.quickSort0(int,int,float[],FloatComparator)",16,137
"org.apache.mahout.math.Sorting.quickSort(int[],int,int,IntComparator)",20,54
"org.apache.mahout.math.Sorting.quickSort0(int,int,int[],IntComparator)",16,137
"org.apache.mahout.math.Sorting.quickSort(long[],int,int,LongComparator)",20,54
"org.apache.mahout.math.Sorting.quickSort0(int,int,long[],LongComparator)",16,137
"org.apache.mahout.math.Sorting.quickSort(T[],int,int,Comparator<T>)",20,53
"org.apache.mahout.math.Sorting.ComparableAdaptor<T,T,T>.compare(T,T)",1,2
"org.apache.mahout.math.Sorting.quickSort(T[],int,int)",14,30
"org.apache.mahout.math.Sorting.quickSort0(int,int,T[],Comparator<T>)",16,137
"org.apache.mahout.math.Sorting.quickSort(short[],int,int,ShortComparator)",22,52
"org.apache.mahout.math.Sorting.quickSort0(int,int,short[],ShortComparator)",16,137
"org.apache.mahout.math.Sorting.mergeSort(T[],int,int,Comparator<T>)",12,28
"org.apache.mahout.math.Sorting.mergeSort(T[],int,int)",15,33
"org.apache.mahout.math.Sorting.mergeSort(T[],T[],int,int,Comparator<T>)",41,129
"org.apache.mahout.math.Sorting.find(T[],T,int,int,int,Comparator<T>)",24,58
"org.apache.mahout.math.Sorting.$1.compare(byte,byte)",1,1
"org.apache.mahout.math.Sorting.mergeSort(byte[],int,int)",6,10
"org.apache.mahout.math.Sorting.mergeSort(byte[],int,int,ByteComparator)",19,41
"org.apache.mahout.math.Sorting.mergeSort(byte[],byte[],int,int,ByteComparator)",23,88
"org.apache.mahout.math.Sorting.find(byte[],byte,int,int,int,ByteComparator)",5,12
"org.apache.mahout.math.Sorting.$2.compare(char,char)",1,1
"org.apache.mahout.math.Sorting.mergeSort(char[],int,int)",6,10
"org.apache.mahout.math.Sorting.mergeSort(char[],int,int,CharComparator)",19,41
"org.apache.mahout.math.Sorting.mergeSort(char[],char[],int,int,CharComparator)",23,88
"org.apache.mahout.math.Sorting.find(char[],char,int,int,int,CharComparator)",5,12
"org.apache.mahout.math.Sorting.$3.compare(short,short)",1,1
"org.apache.mahout.math.Sorting.mergeSort(short[],int,int)",6,10
"org.apache.mahout.math.Sorting.mergeSort(short[],int,int,ShortComparator)",11,21
"org.apache.mahout.math.Sorting.mergeSort(short[],short[],int,int,ShortComparator)",31,106
"org.apache.mahout.math.Sorting.find(short[],short,int,int,int,ShortComparator)",5,12
"org.apache.mahout.math.Sorting.$4.compare(int,int)",1,1
"org.apache.mahout.math.Sorting.mergeSort(int[],int,int)",6,10
"org.apache.mahout.math.Sorting.mergeSort(int[],int,int,IntComparator)",19,41
"org.apache.mahout.math.Sorting.mergeSort(int[],int[],int,int,IntComparator)",31,106
"org.apache.mahout.math.Sorting.find(int[],int,int,int,int,IntComparator)",5,12
"org.apache.mahout.math.Sorting.$5.compare(long,long)",1,1
"org.apache.mahout.math.Sorting.mergeSort(long[],int,int)",6,10
"org.apache.mahout.math.Sorting.mergeSort(long[],int,int,LongComparator)",19,41
"org.apache.mahout.math.Sorting.mergeSort(long[],long[],int,int,LongComparator)",23,88
"org.apache.mahout.math.Sorting.find(long[],long,int,int,int,LongComparator)",5,12
"org.apache.mahout.math.Sorting.$6.compare(float,float)",1,2
"org.apache.mahout.math.Sorting.mergeSort(float[],int,int)",6,10
"org.apache.mahout.math.Sorting.mergeSort(float[],int,int,FloatComparator)",19,41
"org.apache.mahout.math.Sorting.mergeSort(float[],float[],int,int,FloatComparator)",23,88
"org.apache.mahout.math.Sorting.find(float[],float,int,int,int,FloatComparator)",5,12
"org.apache.mahout.math.Sorting.$7.compare(double,double)",1,2
"org.apache.mahout.math.Sorting.mergeSort(double[],int,int)",6,10
"org.apache.mahout.math.Sorting.mergeSort(double[],int,int,DoubleComparator)",19,41
"org.apache.mahout.math.Sorting.mergeSort(double[],double[],int,int,DoubleComparator)",23,88
"org.apache.mahout.math.Sorting.find(double[],double,int,int,int,DoubleComparator)",5,12
"org.apache.mahout.math.Sorting.inplaceMerge(int,int,int,IntComparator,Swapper)",37,106
"org.apache.mahout.math.Sorting.lowerBound(int,int,int,IntComparator)",32,62
"org.apache.mahout.math.Sorting.mergeSort(int,int,IntComparator,Swapper)",74,158
"org.apache.mahout.math.Sorting.upperBound(int,int,int,IntComparator)",32,59
org.apache.mahout.math.MurmurHash.MurmurHash(),2,2
"org.apache.mahout.math.MurmurHash.hash(int,int)",12,22
"org.apache.mahout.math.MurmurHash.hash(byte[],int)",11,23
"org.apache.mahout.math.MurmurHash.hash(byte[],int,int,int)",16,35
"org.apache.mahout.math.MurmurHash.hash(ByteBuffer,int)",21,54
"org.apache.mahout.math.MurmurHash.hash64A(byte[],int)",5,8
"org.apache.mahout.math.MurmurHash.hash64A(byte[],int,int,int)",7,12
"org.apache.mahout.math.MurmurHash.hash64A(ByteBuffer,int)",12,33
"org.apache.mahout.math.VectorBinaryAssign.isValid(Vector,Vector,DoubleDoubleFunction)",11,12
"org.apache.mahout.math.VectorBinaryAssign.estimateCost(Vector,Vector,DoubleDoubleFunction)",11,14
"org.apache.mahout.math.VectorBinaryAssign.assign(Vector,Vector,DoubleDoubleFunction)",12,15
"org.apache.mahout.math.VectorBinaryAssign.getBestOperation(Vector,Vector,DoubleDoubleFunction)",14,32
"org.apache.mahout.math.VectorBinaryAssign.assignBest(Vector,Vector,DoubleDoubleFunction)",14,19
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThisLookupThat.isValid(Vector,Vector,DoubleDoubleFunction)",5,6
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThisLookupThat.estimateCost(Vector,Vector,DoubleDoubleFunction)",10,13
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThisLookupThat.assign(Vector,Vector,DoubleDoubleFunction)",9,11
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThatLookupThisInplaceUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",4,5
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThatLookupThisInplaceUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",10,15
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThatLookupThisInplaceUpdates.assign(Vector,Vector,DoubleDoubleFunction)",9,13
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThatLookupThisMergeUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",9,10
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThatLookupThisMergeUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",10,13
"org.apache.mahout.math.VectorBinaryAssign.AssignNonzerosIterateThatLookupThisMergeUpdates.assign(Vector,Vector,DoubleDoubleFunction)",12,19
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateIntersection.isValid(Vector,Vector,DoubleDoubleFunction)",8,11
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateIntersection.estimateCost(Vector,Vector,DoubleDoubleFunction)",11,19
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateIntersection.assign(Vector,Vector,DoubleDoubleFunction)",10,35
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionSequentialMergeUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",9,12
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionSequentialMergeUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",11,19
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionSequentialMergeUpdates.assign(Vector,Vector,DoubleDoubleFunction)",18,63
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionSequentialInplaceUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",9,12
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionSequentialInplaceUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",11,19
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionSequentialInplaceUpdates.assign(Vector,Vector,DoubleDoubleFunction)",16,57
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionRandomMergeUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",9,10
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionRandomMergeUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",12,23
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionRandomMergeUpdates.assign(Vector,Vector,DoubleDoubleFunction)",16,36
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionRandomInplaceUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",7,8
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionRandomInplaceUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",12,23
"org.apache.mahout.math.VectorBinaryAssign.AssignIterateUnionRandomInplaceUpdates.assign(Vector,Vector,DoubleDoubleFunction)",13,30
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateSequentialMergeUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",9,13
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateSequentialMergeUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",9,15
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateSequentialMergeUpdates.assign(Vector,Vector,DoubleDoubleFunction)",11,24
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateSequentialInplaceUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",9,13
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateSequentialInplaceUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",9,15
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateSequentialInplaceUpdates.assign(Vector,Vector,DoubleDoubleFunction)",9,18
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThisLookupThatMergeUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",7,8
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThisLookupThatMergeUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",8,11
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThisLookupThatMergeUpdates.assign(Vector,Vector,DoubleDoubleFunction)",11,18
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThisLookupThatInplaceUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",7,8
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThisLookupThatInplaceUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",8,11
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThisLookupThatInplaceUpdates.assign(Vector,Vector,DoubleDoubleFunction)",8,12
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThatLookupThisMergeUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",7,8
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThatLookupThisMergeUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",8,11
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThatLookupThisMergeUpdates.assign(Vector,Vector,DoubleDoubleFunction)",11,18
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThatLookupThisInplaceUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",7,8
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThatLookupThisInplaceUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",8,11
"org.apache.mahout.math.VectorBinaryAssign.AssignAllIterateThatLookupThisInplaceUpdates.assign(Vector,Vector,DoubleDoubleFunction)",8,12
"org.apache.mahout.math.VectorBinaryAssign.AssignAllLoopMergeUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",6,7
"org.apache.mahout.math.VectorBinaryAssign.AssignAllLoopMergeUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",6,10
"org.apache.mahout.math.VectorBinaryAssign.AssignAllLoopMergeUpdates.assign(Vector,Vector,DoubleDoubleFunction)",10,17
"org.apache.mahout.math.VectorBinaryAssign.AssignAllLoopInplaceUpdates.isValid(Vector,Vector,DoubleDoubleFunction)",6,7
"org.apache.mahout.math.VectorBinaryAssign.AssignAllLoopInplaceUpdates.estimateCost(Vector,Vector,DoubleDoubleFunction)",6,10
"org.apache.mahout.math.VectorBinaryAssign.AssignAllLoopInplaceUpdates.assign(Vector,Vector,DoubleDoubleFunction)",7,11
org.apache.mahout.utils.regex.RegexConverterDriver.run(String[]),52,166
org.apache.mahout.utils.regex.RegexConverterDriver.main(String[]),10,11
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.AbstractJDBCInMemoryItemSimilarity(DataSource,String)",25,59
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.itemSimilarity(long,long)",5,11
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.itemSimilarities(long,long[])",5,11
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.allSimilarItemIDs(long),5,9
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.refresh(Collection<Refreshable>),8,8
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.reload(),13,19
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.JDBCSimilaritiesIterable.JDBCSimilaritiesIterable(DataSource,String)",8,21
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.JDBCSimilaritiesIterable.iterator(),12,22
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.JDBCSimilaritiesIterator.JDBCSimilaritiesIterator(DataSource,String)",9,18
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCInMemoryItemSimilarity.JDBCSimilaritiesIterator.parseElement(ResultSet),9,26
"org.apache.mahout.h2obindings.ops.Par.exec(H2ODrm,int,int)",45,109
"org.apache.mahout.h2obindings.ops.Par.exec(H2ODrm,int,int).$1.map(Chunk,NewChunk)",18,34
"org.apache.mahout.h2obindings.ops.Par.exec(H2ODrm,int,int).$2.map(Chunk)",12,22
org.apache.mahout.common.RandomWrapper.RandomWrapper(),13,17
org.apache.mahout.common.RandomWrapper.RandomWrapper(long),5,7
org.apache.mahout.common.RandomWrapper.setSeed(long),14,20
org.apache.mahout.common.RandomWrapper.resetToTestSeed(),5,7
org.apache.mahout.common.RandomWrapper.getRandomGenerator(),2,5
org.apache.mahout.common.RandomWrapper.next(int),13,14
org.apache.mahout.common.RandomWrapper.nextBytes(byte[]),2,5
org.apache.mahout.common.RandomWrapper.nextInt(),1,1
org.apache.mahout.common.RandomWrapper.nextInt(int),1,1
org.apache.mahout.common.RandomWrapper.nextLong(),1,1
org.apache.mahout.common.RandomWrapper.nextBoolean(),1,1
org.apache.mahout.common.RandomWrapper.nextFloat(),1,1
org.apache.mahout.common.RandomWrapper.nextDouble(),1,1
org.apache.mahout.common.RandomWrapper.nextGaussian(),2,3
org.apache.mahout.cf.taste.example.kddcup.track1.Track1RecommenderBuilder.buildRecommender(DataModel),7,13
org.apache.mahout.clustering.evaluation.RepresentativePointsReducer.cleanup(Context),15,28
"org.apache.mahout.clustering.evaluation.RepresentativePointsReducer.reduce(IntWritable,Iterable<WeightedVectorWritable>,Context)",15,44
org.apache.mahout.clustering.evaluation.RepresentativePointsReducer.setup(Context),8,17
"org.apache.mahout.clustering.evaluation.RepresentativePointsReducer.configure(Map<List<Integer,VectorWritable>>)",7,9
org.apache.mahout.classifier.sgd.ValidateAdaptiveLogistic.ValidateAdaptiveLogistic(),3,3
org.apache.mahout.classifier.sgd.ValidateAdaptiveLogistic.main(String[]),11,15
"org.apache.mahout.classifier.sgd.ValidateAdaptiveLogistic.mainToOutput(String[],PrintWriter)",76,222
org.apache.mahout.classifier.sgd.ValidateAdaptiveLogistic.parseArgs(String[]),38,216
"org.apache.mahout.classifier.sgd.ValidateAdaptiveLogistic.getBooleanArgument(CommandLine,Option)",5,11
"org.apache.mahout.classifier.sgd.ValidateAdaptiveLogistic.getStringArgument(CommandLine,Option)",9,16
"org.apache.mahout.utils.clustering.GraphMLClusterWriter.GraphMLClusterWriter(Writer,Map<List<Integer,WeightedPropertyVectorWritable>>,DistanceMeasure,int,String[],int)",20,41
org.apache.mahout.utils.clustering.GraphMLClusterWriter.init(Writer),38,108
org.apache.mahout.utils.clustering.GraphMLClusterWriter.write(ClusterWritable),62,176
org.apache.mahout.utils.clustering.GraphMLClusterWriter.getColor(int),7,59
"org.apache.mahout.utils.clustering.GraphMLClusterWriter.createEdge(String,String,double)",13,28
"org.apache.mahout.utils.clustering.GraphMLClusterWriter.createNode(String,Color,float,float)",10,30
org.apache.mahout.utils.clustering.GraphMLClusterWriter.close(),6,8
"org.apache.mahout.h2obindings.ops.AewB.exec(H2ODrm,H2ODrm,String)",32,71
"org.apache.mahout.h2obindings.ops.AewB.exec(H2ODrm,H2ODrm,String).$1.opfn(String,double,double)",3,6
"org.apache.mahout.h2obindings.ops.AewB.exec(H2ODrm,H2ODrm,String).$1.map(Chunk,NewChunk)",14,27
"org.apache.mahout.math.ConstantVector.ConstantVector(double,int)",4,7
"org.apache.mahout.math.ConstantVector.matrixLike(int,int)",4,8
org.apache.mahout.math.ConstantVector.mergeUpdates(OrderedIntDoubleMapping),9,10
org.apache.mahout.math.ConstantVector.isDense(),1,1
org.apache.mahout.math.ConstantVector.isSequentialAccess(),2,2
org.apache.mahout.math.ConstantVector.iterator(),4,7
org.apache.mahout.math.ConstantVector.iterator().$1.computeNext(),4,5
org.apache.mahout.math.ConstantVector.iterateNonZero(),4,5
org.apache.mahout.math.ConstantVector.getQuick(int),3,3
org.apache.mahout.math.ConstantVector.like(),3,4
org.apache.mahout.math.ConstantVector.like(int),3,5
"org.apache.mahout.math.ConstantVector.setQuick(int,double)",10,12
org.apache.mahout.math.ConstantVector.getNumNondefaultElements(),4,4
org.apache.mahout.math.ConstantVector.getLookupCost(),2,2
org.apache.mahout.math.ConstantVector.getIteratorAdvanceCost(),3,3
org.apache.mahout.math.ConstantVector.isAddConstantTime(),8,9
org.apache.mahout.cf.taste.web.RecommenderWrapper.RecommenderWrapper(),6,8
org.apache.mahout.cf.taste.web.RecommenderWrapper.buildRecommender(),9,12
"org.apache.mahout.cf.taste.web.RecommenderWrapper.recommend(long,int)",8,10
"org.apache.mahout.cf.taste.web.RecommenderWrapper.recommend(long,int,IDRescorer)",9,13
"org.apache.mahout.cf.taste.web.RecommenderWrapper.estimatePreference(long,long)",7,11
"org.apache.mahout.cf.taste.web.RecommenderWrapper.setPreference(long,long,float)",8,13
"org.apache.mahout.cf.taste.web.RecommenderWrapper.removePreference(long,long)",7,11
org.apache.mahout.cf.taste.web.RecommenderWrapper.getDataModel(),3,7
org.apache.mahout.cf.taste.web.RecommenderWrapper.refresh(Collection<Refreshable>),5,7
org.apache.mahout.cf.taste.web.RecommenderWrapper.readResourceToTempFile(String),52,137
org.apache.mahout.cf.taste.example.kddcup.DataFileIterable.DataFileIterable(File),3,10
org.apache.mahout.cf.taste.example.kddcup.DataFileIterable.iterator(),9,15
org.apache.mahout.text.wikipedia.WikipediaAnalyzer.WikipediaAnalyzer(),8,10
org.apache.mahout.text.wikipedia.WikipediaAnalyzer.WikipediaAnalyzer(CharArraySet),7,10
"org.apache.mahout.text.wikipedia.WikipediaAnalyzer.createComponents(String,Reader)",19,42
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.BookCrossingBooleanRecommender(DataModel),19,38
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.recommend(long,int)",8,10
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.recommend(long,int,boolean)",9,13
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.recommend(long,int,IDRescorer)",9,13
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.recommend(long,int,IDRescorer,boolean)",11,17
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.estimatePreference(long,long)",7,11
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.setPreference(long,long,float)",8,13
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.removePreference(long,long)",7,11
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.getDataModel(),3,7
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.refresh(Collection<Refreshable>),5,7
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingBooleanRecommender.toString(),4,7
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.BookCrossingRecommender(DataModel),16,35
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.recommend(long,int)",8,10
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.recommend(long,int,boolean)",9,13
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.recommend(long,int,IDRescorer)",9,13
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.recommend(long,int,IDRescorer,boolean)",11,15
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.estimatePreference(long,long)",7,11
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.setPreference(long,long,float)",8,13
"org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.removePreference(long,long)",7,11
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.getDataModel(),3,7
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.refresh(Collection<Refreshable>),5,7
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommender.toString(),4,7
"org.apache.mahout.text.SequenceFilesFromDirectoryFilter.SequenceFilesFromDirectoryFilter(Configuration,String,Map<String,String>,ChunkedWriter,Charset,FileSystem)",16,31
org.apache.mahout.text.SequenceFilesFromDirectoryFilter.getPrefix(),2,3
org.apache.mahout.text.SequenceFilesFromDirectoryFilter.getWriter(),2,4
org.apache.mahout.text.SequenceFilesFromDirectoryFilter.getCharset(),1,3
org.apache.mahout.text.SequenceFilesFromDirectoryFilter.getFs(),2,2
org.apache.mahout.text.SequenceFilesFromDirectoryFilter.getOptions(),3,5
org.apache.mahout.text.SequenceFilesFromDirectoryFilter.getConf(),2,3
org.apache.mahout.text.SequenceFilesFromDirectoryFilter.accept(Path),15,28
"org.apache.mahout.text.SequenceFilesFromDirectoryFilter.process(FileStatus,Path)",6,6
org.apache.mahout.utils.io.ChunkedWrapper.ChunkedWrapper(ChunkedWriter),3,7
"org.apache.mahout.utils.io.ChunkedWrapper.write(String,String)",6,10
org.apache.mahout.utils.io.ChunkedWrapper.close(),3,4
org.apache.mahout.classifier.email.PrepEmailVectorsDriver.main(String[]),12,13
org.apache.mahout.classifier.email.PrepEmailVectorsDriver.run(String[]),52,126
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommenderBuilder.buildRecommender(DataModel),8,14
"org.apache.mahout.text.wikipedia.XmlInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",19,32
"org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.XmlRecordReader(FileSplit,Configuration)",19,51
"org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.next(LongWritable,Text)",17,30
org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.close(),4,5
org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.getProgress(),5,6
"org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.readUntilMatch(byte[],boolean)",16,24
org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.getCurrentKey(),5,8
org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.getCurrentValue(),5,8
"org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.initialize(InputSplit,TaskAttemptContext)",8,11
org.apache.mahout.text.wikipedia.XmlInputFormat.XmlRecordReader.nextKeyValue(),7,15
"org.apache.mahout.math.MatrixView.MatrixView(Matrix,int[],int[])",16,96
org.apache.mahout.math.MatrixView.clone(),4,17
"org.apache.mahout.math.MatrixView.getQuick(int,int)",6,11
org.apache.mahout.math.MatrixView.like(),4,6
"org.apache.mahout.math.MatrixView.like(int,int)",3,6
"org.apache.mahout.math.MatrixView.setQuick(int,int,double)",8,15
org.apache.mahout.math.MatrixView.getNumNondefaultElements(),6,7
"org.apache.mahout.math.MatrixView.viewPart(int[],int[])",11,60
"org.apache.mahout.math.MatrixView.assignColumn(int,Vector)",12,29
"org.apache.mahout.math.MatrixView.assignRow(int,Vector)",12,29
org.apache.mahout.math.MatrixView.viewColumn(int),10,25
org.apache.mahout.math.MatrixView.viewRow(int),10,25
org.apache.mahout.math.MatrixView.getFlavor(),2,5
org.apache.mahout.math.stats.OnlineExponentialAverage.OnlineExponentialAverage(double),33,58
"org.apache.mahout.math.stats.OnlineExponentialAverage.add(double,double)",4,4
org.apache.mahout.math.stats.OnlineExponentialAverage.mean(),1,1
org.apache.mahout.math.stats.OnlineExponentialAverage.meanRate(),2,2
"org.apache.mahout.h2obindings.ops.Rbind.exec(H2ODrm,H2ODrm)",31,91
"org.apache.mahout.h2obindings.ops.Rbind.exec(H2ODrm,H2ODrm).$1.map(Chunk,NewChunk)",21,62
"org.apache.mahout.h2obindings.ops.TimesRightMatrix.exec(H2ODrm,Matrix)",18,50
"org.apache.mahout.h2obindings.ops.TimesRightMatrix.execDiagonal(Frame,Vector)",13,23
"org.apache.mahout.h2obindings.ops.TimesRightMatrix.execDiagonal(Frame,Vector).$1.map(Chunk,NewChunk)",13,21
"org.apache.mahout.h2obindings.ops.TimesRightMatrix.execCommon(Frame,Matrix)",14,22
"org.apache.mahout.h2obindings.ops.TimesRightMatrix.execCommon(Frame,Matrix).$2.map(Chunk,NewChunk)",13,23
org.apache.mahout.clustering.syntheticcontrol.kmeans.Job.Job(),1,1
org.apache.mahout.clustering.syntheticcontrol.kmeans.Job.main(String[]),26,42
org.apache.mahout.clustering.syntheticcontrol.kmeans.Job.run(String[]),35,173
"org.apache.mahout.clustering.syntheticcontrol.kmeans.Job.run(Configuration,Path,Path,DistanceMeasure,int,double,int)",70,200
"org.apache.mahout.clustering.syntheticcontrol.kmeans.Job.run(Configuration,Path,Path,DistanceMeasure,double,double,double,int)",76,203
org.apache.mahout.benchmark.CloneBenchmark.CloneBenchmark(VectorBenchmarks),5,7
org.apache.mahout.benchmark.CloneBenchmark.benchmark(),12,36
org.apache.mahout.benchmark.CloneBenchmark.benchmark().$1.apply(Integer),7,16
org.apache.mahout.benchmark.CloneBenchmark.benchmark().$2.apply(Integer),7,16
org.apache.mahout.benchmark.CloneBenchmark.benchmark().$3.apply(Integer),7,16
org.apache.mahout.clustering.TestClusterEvaluator.setUp(),23,41
"org.apache.mahout.clustering.TestClusterEvaluator.generateSamples(int,double,double,double)",21,44
org.apache.mahout.clustering.TestClusterEvaluator.generateSamples(),2,8
org.apache.mahout.clustering.TestClusterEvaluator.printRepPoints(int),7,11
"org.apache.mahout.clustering.TestClusterEvaluator.initData(double,double,DistanceMeasure)",28,106
org.apache.mahout.clustering.TestClusterEvaluator.testRepresentativePoints(),42,135
org.apache.mahout.clustering.TestClusterEvaluator.testCluster0(),24,49
org.apache.mahout.clustering.TestClusterEvaluator.testCluster1(),24,49
org.apache.mahout.clustering.TestClusterEvaluator.testCluster2(),24,49
org.apache.mahout.clustering.TestClusterEvaluator.testEmptyCluster(),33,67
org.apache.mahout.clustering.TestClusterEvaluator.testSingleValueCluster(),36,76
org.apache.mahout.clustering.TestClusterEvaluator.testAllSameValueCluster(),34,82
org.apache.mahout.clustering.TestClusterEvaluator.testCanopy(),34,80
org.apache.mahout.clustering.TestClusterEvaluator.testKmeans(),38,111
org.apache.mahout.clustering.TestClusterEvaluator.testFuzzyKmeans(),40,119
org.apache.mahout.cf.taste.impl.model.jdbc.MySQLBooleanPrefJDBCDataModel.MySQLBooleanPrefJDBCDataModel(),24,43
org.apache.mahout.cf.taste.impl.model.jdbc.MySQLBooleanPrefJDBCDataModel.MySQLBooleanPrefJDBCDataModel(String),31,72
org.apache.mahout.cf.taste.impl.model.jdbc.MySQLBooleanPrefJDBCDataModel.MySQLBooleanPrefJDBCDataModel(DataSource),18,44
"org.apache.mahout.cf.taste.impl.model.jdbc.MySQLBooleanPrefJDBCDataModel.MySQLBooleanPrefJDBCDataModel(DataSource,String,String,String,String)",38,238
org.apache.mahout.cf.taste.impl.model.jdbc.MySQLBooleanPrefJDBCDataModel.getFetchSize(),9,9
"org.apache.mahout.cf.taste.example.kddcup.track2.UserResult.UserResult(long,boolean[])",7,21
org.apache.mahout.cf.taste.example.kddcup.track2.UserResult.getUserID(),1,2
org.apache.mahout.cf.taste.example.kddcup.track2.UserResult.getResultBytes(),2,4
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.EntityEntityWritable(),2,3
"org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.EntityEntityWritable(long,long)",2,3
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.getAID(),1,1
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.getBID(),1,1
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.write(DataOutput),7,12
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.readFields(DataInput),8,13
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.compareTo(EntityEntityWritable),5,11
"org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.compare(long,long)",1,1
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.hashCode(),3,8
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.equals(Object),6,13
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.toString(),1,2
org.apache.mahout.cf.taste.hadoop.EntityEntityWritable.clone(),3,7
org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLBooleanPrefJDBCDataModel.PostgreSQLBooleanPrefJDBCDataModel(),25,36
org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLBooleanPrefJDBCDataModel.PostgreSQLBooleanPrefJDBCDataModel(String),26,53
org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLBooleanPrefJDBCDataModel.PostgreSQLBooleanPrefJDBCDataModel(DataSource),15,30
"org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLBooleanPrefJDBCDataModel.PostgreSQLBooleanPrefJDBCDataModel(DataSource,String,String,String,String)",22,76
"org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLBooleanPrefJDBCDataModel.setPreference(long,long,float)",36,85
org.apache.mahout.utils.regex.IdentityFormatter.format(String),2,5
"org.apache.mahout.math.CardinalityException.CardinalityException(int,int)",4,8
org.apache.mahout.math.BinarySearch.BinarySearch(),2,2
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(byte[],byte,int,int)",24,67
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(char[],char,int,int)",24,67
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(double[],double,int,int)",25,71
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(float[],float,int,int)",25,71
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(int[],int,int,int)",24,67
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(long[],long,int,int)",24,67
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(T[],T,int,int)",27,70
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(T[],T,int,int,Comparator<>)",27,73
"org.apache.mahout.math.BinarySearch.binarySearchFromTo(short[],short,int,int)",24,67
"org.apache.mahout.math.BinarySearch.lessThan(double,double)",11,13
"org.apache.mahout.math.BinarySearch.lessThan(float,float)",11,13
org.apache.mahout.math.jet.random.engine.MersenneTwisterTest.toDouble(long),10,11
org.apache.mahout.math.jet.random.engine.MersenneTwisterTest.test10001(),12,22
org.apache.mahout.math.jet.random.engine.MersenneTwisterTest.testRegression(),8,9
org.apache.mahout.math.jet.random.engine.MersenneTwisterTest.testDateConstructor(),8,14
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommenderEvaluatorRunner.BookCrossingRecommenderEvaluatorRunner(),5,5
org.apache.mahout.cf.taste.example.bookcrossing.BookCrossingRecommenderEvaluatorRunner.main(String),24,52
org.apache.mahout.cf.taste.example.kddcup.track1.svd.Track1SVDRunner.Track1SVDRunner(),3,3
org.apache.mahout.cf.taste.example.kddcup.track1.svd.Track1SVDRunner.main(String[]),79,264
"org.apache.mahout.cf.taste.example.kddcup.track1.svd.Track1SVDRunner.estimatePreference(Factorization,long,long,float,float)",11,53
org.apache.mahout.math.SingularValueDecomposition.SingularValueDecomposition(Matrix),92,278
org.apache.mahout.math.SingularValueDecomposition.cond(),7,8
org.apache.mahout.math.SingularValueDecomposition.getS(),5,7
org.apache.mahout.math.SingularValueDecomposition.getSingularValues(),6,9
org.apache.mahout.math.SingularValueDecomposition.getU(),13,24
org.apache.mahout.math.SingularValueDecomposition.getV(),12,23
org.apache.mahout.math.SingularValueDecomposition.norm2(),3,4
org.apache.mahout.math.SingularValueDecomposition.rank(),14,19
org.apache.mahout.math.SingularValueDecomposition.getCovariance(double),21,52
org.apache.mahout.math.SingularValueDecomposition.toString(),20,128
org.apache.mahout.benchmark.DotBenchmark.DotBenchmark(VectorBenchmarks),5,7
org.apache.mahout.benchmark.DotBenchmark.benchmark(),5,10
org.apache.mahout.benchmark.DotBenchmark.benchmarkLogNormalize(),13,41
org.apache.mahout.benchmark.DotBenchmark.benchmarkLogNormalize().$1.apply(Integer),8,9
org.apache.mahout.benchmark.DotBenchmark.benchmarkLogNormalize().$2.apply(Integer),8,9
org.apache.mahout.benchmark.DotBenchmark.benchmarkLogNormalize().$3.apply(Integer),8,9
org.apache.mahout.benchmark.DotBenchmark.benchmarkNorm1(),12,37
org.apache.mahout.benchmark.DotBenchmark.benchmarkNorm1().$4.apply(Integer),6,7
org.apache.mahout.benchmark.DotBenchmark.benchmarkNorm1().$5.apply(Integer),6,7
org.apache.mahout.benchmark.DotBenchmark.benchmarkNorm1().$6.apply(Integer),6,7
org.apache.mahout.benchmark.DotBenchmark.benchmarkNorm2(),12,37
org.apache.mahout.benchmark.DotBenchmark.benchmarkNorm2().$7.apply(Integer),6,7
org.apache.mahout.benchmark.DotBenchmark.benchmarkNorm2().$8.apply(Integer),6,7
org.apache.mahout.benchmark.DotBenchmark.benchmarkNorm2().$9.apply(Integer),6,7
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot(),13,112
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$10.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$11.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$12.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$13.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$14.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$15.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$16.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$17.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.benchmarkDot().$18.apply(Integer),7,13
org.apache.mahout.benchmark.DotBenchmark.main(String[]),13,19
org.apache.mahout.clustering.display.DisplayCanopy.DisplayCanopy(),8,9
org.apache.mahout.clustering.display.DisplayCanopy.paint(Graphics),6,9
org.apache.mahout.clustering.display.DisplayCanopy.plotClusters(Graphics2D),24,54
org.apache.mahout.clustering.display.DisplayCanopy.main(String[]),30,51
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.ConnectionPoolDataSource(DataSource),26,72
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.getConnection(),4,6
"org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.getConnection(String,String)",7,12
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.getLogWriter(),6,9
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.setLogWriter(PrintWriter),7,15
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.setLoginTimeout(int),6,11
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.getLoginTimeout(),5,7
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.unwrap(Class<T>),5,7
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.isWrapperFor(Class<>),5,7
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.getParentLogger(),13,21
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.ConfiguringConnectionFactory.ConfiguringConnectionFactory(DataSource),6,14
org.apache.mahout.cf.taste.impl.model.jdbc.ConnectionPoolDataSource.ConfiguringConnectionFactory.createConnection(),17,28
"org.apache.mahout.math.Matrices.functionalMatrixView(int,int,IntIntFunction,boolean)",30,59
"org.apache.mahout.math.Matrices.functionalMatrixView(int,int,IntIntFunction)",14,25
org.apache.mahout.math.Matrices.transposedView(Matrix),12,32
"org.apache.mahout.math.Matrices.gaussianView(int,int,long)",10,22
"org.apache.mahout.math.Matrices.symmetricUniformView(int,int,int)",12,25
"org.apache.mahout.math.Matrices.uniformView(int,int,int)",11,23
org.apache.mahout.math.Matrices.gaussianGenerator(long),17,36
"org.apache.mahout.math.Matrices.gaussianGenerator(long).$1.apply(int,int)",5,7
org.apache.mahout.math.Matrices.uniformSymmetricGenerator(int),20,30
"org.apache.mahout.math.Matrices.uniformSymmetricGenerator(int).$2.apply(int,int)",11,17
org.apache.mahout.math.Matrices.uniformGenerator(int),10,20
org.apache.mahout.math.Matrices.uniformGenerator(int).$3.apply(double),1,1
org.apache.mahout.text.doc.TestDocument.getId(),1,1
org.apache.mahout.text.doc.TestDocument.getField(),2,2
org.apache.mahout.text.doc.TestDocument.asLuceneDocument(),2,3
org.apache.mahout.math.VarLongWritable.VarLongWritable(),2,2
org.apache.mahout.math.VarLongWritable.VarLongWritable(long),3,5
org.apache.mahout.math.VarLongWritable.get(),1,1
org.apache.mahout.math.VarLongWritable.set(long),2,4
org.apache.mahout.math.VarLongWritable.equals(Object),5,7
org.apache.mahout.math.VarLongWritable.hashCode(),4,6
org.apache.mahout.math.VarLongWritable.toString(),2,5
org.apache.mahout.math.VarLongWritable.compareTo(VarLongWritable),4,7
org.apache.mahout.math.VarLongWritable.write(DataOutput),8,9
org.apache.mahout.math.VarLongWritable.readFields(DataInput),9,10
org.apache.mahout.benchmark.TimesBenchmark.TimesBenchmark(VectorBenchmarks),5,7
org.apache.mahout.benchmark.TimesBenchmark.benchmark(),12,102
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$1.apply(Integer),9,15
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$2.apply(Integer),9,15
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$3.apply(Integer),9,15
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$4.apply(Integer),9,15
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$5.apply(Integer),9,15
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$6.apply(Integer),9,15
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$7.apply(Integer),9,15
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$8.apply(Integer),9,15
org.apache.mahout.benchmark.TimesBenchmark.benchmark().$9.apply(Integer),9,15
org.apache.mahout.h2obindings.H2OBlockMatrix.H2OBlockMatrix(Chunk),7,11
org.apache.mahout.h2obindings.H2OBlockMatrix.cow(),18,37
"org.apache.mahout.h2obindings.H2OBlockMatrix.setQuick(int,int,double)",6,12
"org.apache.mahout.h2obindings.H2OBlockMatrix.like(int,int)",6,13
org.apache.mahout.h2obindings.H2OBlockMatrix.like(),7,15
"org.apache.mahout.h2obindings.H2OBlockMatrix.getQuick(int,int)",6,12
"org.apache.mahout.h2obindings.H2OBlockMatrix.assignRow(int,Vector)",5,11
"org.apache.mahout.h2obindings.H2OBlockMatrix.assignColumn(int,Vector)",6,11
org.apache.mahout.h2obindings.H2OBlockMatrix.getFlavor(),7,14
org.apache.mahout.text.LuceneIndexFileNameFilter.getFilter(),6,13
org.apache.mahout.text.LuceneIndexFileNameFilter.LuceneIndexFileNameFilter(),5,5
org.apache.mahout.text.LuceneIndexFileNameFilter.accept(Path),15,28
"org.apache.mahout.h2obindings.ops.RowRange.exec(H2ODrm,Range)",29,61
"org.apache.mahout.h2obindings.ops.RowRange.exec(H2ODrm,Range).$1.map(Chunk,NewChunk)",18,41
"org.apache.mahout.h2obindings.ops.RowRange.exec(H2ODrm,Range).$2.map(Chunk,NewChunk)",17,40
org.apache.mahout.math.random.MultinomialTest.setUp(),5,5
org.apache.mahout.math.random.MultinomialTest.testNoValues(),9,13
org.apache.mahout.math.random.MultinomialTest.testSingleton(),10,18
org.apache.mahout.math.random.MultinomialTest.testEvenSplit(),19,54
org.apache.mahout.math.random.MultinomialTest.testPrime(),37,151
org.apache.mahout.math.random.MultinomialTest.testInsert(),14,22
org.apache.mahout.math.random.MultinomialTest.testSetZeroWhileIterating(),19,29
org.apache.mahout.math.random.MultinomialTest.testNoNullValuesAllowed(),7,12
org.apache.mahout.math.random.MultinomialTest.testDeleteAndUpdate(),19,77
org.apache.mahout.math.random.MultinomialTest.checkSelfConsistent(Multinomial<Integer>),13,35
"org.apache.mahout.text.wikipedia.WikipediaDatasetCreatorReducer.reduce(Text,Iterable<Text>,Context)",18,30
org.apache.mahout.math.decomposer.lanczos.LanczosSolver.Scale.Scale(double),1,1
org.apache.mahout.math.decomposer.lanczos.LanczosSolver.Scale.apply(double),2,3
"org.apache.mahout.math.decomposer.lanczos.LanczosSolver.solve(LanczosState,int)",4,7
"org.apache.mahout.math.decomposer.lanczos.LanczosSolver.solve(LanczosState,int,boolean)",84,297
org.apache.mahout.math.decomposer.lanczos.LanczosSolver.calculateScaleFactor(Vector),5,7
org.apache.mahout.math.decomposer.lanczos.LanczosSolver.outOfRange(double),3,5
"org.apache.mahout.math.decomposer.lanczos.LanczosSolver.orthoganalizeAgainstAllButLast(Vector,LanczosState)",10,25
org.apache.mahout.math.decomposer.lanczos.LanczosSolver.startTime(TimingSection),7,11
org.apache.mahout.math.decomposer.lanczos.LanczosSolver.endTime(TimingSection),9,20
org.apache.mahout.text.TextParagraphSplittingJob.run(String[]),28,49
"org.apache.mahout.text.TextParagraphSplittingJob.SplitMap.map(Text,Text,Context)",11,35
org.apache.mahout.text.TextParagraphSplittingJob.main(String[]),11,12
"org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.Track2Recommender(DataModel,File)",17,39
"org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.recommend(long,int)",8,10
"org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.recommend(long,int,boolean)",9,13
"org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.recommend(long,int,IDRescorer)",9,13
"org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.recommend(long,int,IDRescorer,boolean)",11,17
"org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.estimatePreference(long,long)",7,11
"org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.setPreference(long,long,float)",8,13
"org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.removePreference(long,long)",7,11
org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.getDataModel(),3,7
org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.refresh(Collection<Refreshable>),5,7
org.apache.mahout.cf.taste.example.kddcup.track2.Track2Recommender.toString(),3,6
org.apache.mahout.math.jet.math.Constants.Constants(),1,1
org.apache.mahout.cf.taste.example.TasteOptionParser.TasteOptionParser(),3,3
org.apache.mahout.cf.taste.example.TasteOptionParser.getRatings(String[]),38,105
org.apache.mahout.utils.vectors.io.VectorWriter.write(Iterable<Vector>),12,18
org.apache.mahout.utils.vectors.io.VectorWriter.write(Vector),9,16
"org.apache.mahout.utils.vectors.io.VectorWriter.write(Iterable<Vector>,long)",14,27
org.apache.mahout.classifier.sgd.ModelDissectorTest.testCategoryOrdering(),8,26
org.apache.mahout.math.jet.random.sampling.RandomSampler.RandomSampler(),2,2
"org.apache.mahout.math.jet.random.sampling.RandomSampler.rejectMethodD(long,long,int,long,long[],int,Random)",93,309
"org.apache.mahout.math.jet.random.sampling.RandomSampler.sample(long,long,int,long,long[],int,Random)",77,175
"org.apache.mahout.math.jet.random.sampling.RandomSampler.sampleMethodA(long,long,int,long,long[],int,Random)",45,124
"org.apache.mahout.math.jet.random.sampling.RandomSampler.sampleMethodD(long,long,int,long,long[],int,Random)",77,264
org.apache.mahout.cf.taste.example.kddcup.track1.svd.FactorizablePreferences.getUserIDs(),3,3
org.apache.mahout.cf.taste.example.kddcup.track1.svd.FactorizablePreferences.getItemIDs(),3,3
org.apache.mahout.cf.taste.example.kddcup.track1.svd.FactorizablePreferences.getPreferences(),3,3
org.apache.mahout.cf.taste.example.kddcup.track1.svd.FactorizablePreferences.getMinPreference(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.FactorizablePreferences.getMaxPreference(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.FactorizablePreferences.numUsers(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.FactorizablePreferences.numItems(),2,2
org.apache.mahout.cf.taste.example.kddcup.track1.svd.FactorizablePreferences.numPreferences(),2,2
org.apache.mahout.math.jet.stat.Gamma.Gamma(),1,1
"org.apache.mahout.math.jet.stat.Gamma.beta(double,double)",12,46
org.apache.mahout.math.jet.stat.Gamma.gamma(double),19,45
"org.apache.mahout.math.jet.stat.Gamma.incompleteBeta(double,double,double)",47,135
"org.apache.mahout.math.jet.stat.Gamma.incompleteBetaFraction1(double,double,double)",18,80
"org.apache.mahout.math.jet.stat.Gamma.incompleteBetaFraction2(double,double,double)",18,80
"org.apache.mahout.math.jet.stat.Gamma.incompleteGamma(double,double)",26,52
"org.apache.mahout.math.jet.stat.Gamma.incompleteGammaComplement(double,double)",29,78
org.apache.mahout.math.jet.stat.Gamma.logGamma(double),22,55
"org.apache.mahout.math.jet.stat.Gamma.powerSeries(double,double,double)",20,40
org.apache.mahout.math.jet.stat.Gamma.stirlingFormula(double),23,31
org.apache.mahout.classifier.sgd.RunLogistic.RunLogistic(),2,2
org.apache.mahout.classifier.sgd.RunLogistic.main(String[]),11,15
"org.apache.mahout.classifier.sgd.RunLogistic.mainToOutput(String[],PrintWriter)",50,126
org.apache.mahout.classifier.sgd.RunLogistic.parseArgs(String[]),33,186
"org.apache.mahout.classifier.sgd.RunLogistic.getBooleanArgument(CommandLine,Option)",5,11
"org.apache.mahout.classifier.sgd.RunLogistic.getStringArgument(CommandLine,Option)",9,16
org.apache.mahout.math.Matrix.asFormatString(),5,7
org.apache.mahout.math.Matrix.assign(double),7,12
org.apache.mahout.math.Matrix.assign(double[][]),9,14
org.apache.mahout.math.Matrix.assign(Matrix),10,14
org.apache.mahout.math.Matrix.assign(DoubleFunction),8,14
"org.apache.mahout.math.Matrix.assign(Matrix,DoubleDoubleFunction)",15,26
"org.apache.mahout.math.Matrix.assignColumn(int,Vector)",12,21
"org.apache.mahout.math.Matrix.assignRow(int,Vector)",11,21
org.apache.mahout.math.Matrix.aggregateRows(VectorFunction),10,17
org.apache.mahout.math.Matrix.aggregateColumns(VectorFunction),10,17
"org.apache.mahout.math.Matrix.aggregate(DoubleDoubleFunction,DoubleFunction)",14,24
org.apache.mahout.math.Matrix.columnSize(),4,4
org.apache.mahout.math.Matrix.rowSize(),5,5
org.apache.mahout.math.Matrix.clone(),4,5
org.apache.mahout.math.Matrix.determinant(),7,9
org.apache.mahout.math.Matrix.divide(double),9,11
"org.apache.mahout.math.Matrix.get(int,int)",8,17
"org.apache.mahout.math.Matrix.getQuick(int,int)",9,16
org.apache.mahout.math.Matrix.like(),4,6
"org.apache.mahout.math.Matrix.like(int,int)",10,16
org.apache.mahout.math.Matrix.minus(Matrix),11,16
org.apache.mahout.math.Matrix.plus(double),8,10
org.apache.mahout.math.Matrix.plus(Matrix),11,16
"org.apache.mahout.math.Matrix.set(int,int,double)",9,25
"org.apache.mahout.math.Matrix.set(int,double[])",3,3
"org.apache.mahout.math.Matrix.setQuick(int,int,double)",10,24
org.apache.mahout.math.Matrix.getNumNondefaultElements(),9,9
org.apache.mahout.math.Matrix.times(double),8,11
org.apache.mahout.math.Matrix.times(Matrix),11,16
org.apache.mahout.math.Matrix.transpose(),3,6
org.apache.mahout.math.Matrix.zSum(),3,4
org.apache.mahout.math.Matrix.getColumnLabelBindings(),8,15
org.apache.mahout.math.Matrix.getRowLabelBindings(),8,15
"org.apache.mahout.math.Matrix.setColumnLabelBindings(Map<String,Integer>)",10,21
"org.apache.mahout.math.Matrix.setRowLabelBindings(Map<String,Integer>)",10,21
"org.apache.mahout.math.Matrix.get(String,String)",10,25
"org.apache.mahout.math.Matrix.set(String,String,double)",10,31
"org.apache.mahout.math.Matrix.set(String,String,int,int,double)",10,41
"org.apache.mahout.math.Matrix.set(String,double[])",9,23
"org.apache.mahout.math.Matrix.set(String,int,double[])",12,31
"org.apache.mahout.math.Matrix.viewPart(int[],int[])",19,38
"org.apache.mahout.math.Matrix.viewPart(int,int,int,int)",21,55
org.apache.mahout.math.Matrix.viewRow(int),12,19
org.apache.mahout.math.Matrix.viewColumn(int),12,19
org.apache.mahout.math.Matrix.viewDiagonal(),11,17
org.apache.mahout.math.Matrix.getFlavor(),13,17
"org.apache.mahout.h2obindings.ops.AtB.exec(H2ODrm,H2ODrm)",30,60
"org.apache.mahout.h2obindings.ops.AtB.exec(H2ODrm,H2ODrm).$1.map(Chunk)",12,29
"org.apache.mahout.h2obindings.ops.Atx.exec(H2ODrm,Vector)",35,77
"org.apache.mahout.h2obindings.ops.Atx.exec(H2ODrm,Vector).MRTaskAtx.map(Chunk)",12,24
"org.apache.mahout.h2obindings.ops.Atx.exec(H2ODrm,Vector).MRTaskAtx.reduce(MRTaskAtx)",6,8
"org.apache.mahout.math.jet.random.Uniform.Uniform(double,double,int)",21,28
"org.apache.mahout.math.jet.random.Uniform.Uniform(double,double,Random)",10,19
org.apache.mahout.math.jet.random.Uniform.Uniform(Random),7,11
org.apache.mahout.math.jet.random.Uniform.cdf(double),3,6
org.apache.mahout.math.jet.random.Uniform.nextBoolean(),4,5
org.apache.mahout.math.jet.random.Uniform.nextDouble(),3,4
"org.apache.mahout.math.jet.random.Uniform.nextDoubleFromTo(double,double)",8,9
"org.apache.mahout.math.jet.random.Uniform.nextFloatFromTo(float,float)",8,8
"org.apache.mahout.math.jet.random.Uniform.nextIntFromTo(int,int)",9,10
"org.apache.mahout.math.jet.random.Uniform.nextLongFromTo(long,long)",41,79
org.apache.mahout.math.jet.random.Uniform.pdf(double),3,5
"org.apache.mahout.math.jet.random.Uniform.setState(double,double)",5,14
org.apache.mahout.math.jet.random.Uniform.toString(),4,5
org.apache.mahout.Version.Version(),1,1
org.apache.mahout.Version.version(),3,5
org.apache.mahout.Version.versionFromResource(),7,11
org.apache.mahout.Version.main(String[]),8,9
"org.apache.mahout.cf.taste.example.kddcup.track2.HybridSimilarity.HybridSimilarity(DataModel,File)",12,27
"org.apache.mahout.cf.taste.example.kddcup.track2.HybridSimilarity.itemSimilarity(long,long)",5,17
"org.apache.mahout.cf.taste.example.kddcup.track2.HybridSimilarity.itemSimilarities(long,long[])",9,24
org.apache.mahout.cf.taste.example.kddcup.track2.HybridSimilarity.refresh(Collection<Refreshable>),5,7
org.apache.mahout.cf.taste.impl.model.jdbc.MySQLJDBCDataModel.MySQLJDBCDataModel(),17,30
org.apache.mahout.cf.taste.impl.model.jdbc.MySQLJDBCDataModel.MySQLJDBCDataModel(String),25,59
org.apache.mahout.cf.taste.impl.model.jdbc.MySQLJDBCDataModel.MySQLJDBCDataModel(DataSource),15,38
"org.apache.mahout.cf.taste.impl.model.jdbc.MySQLJDBCDataModel.MySQLJDBCDataModel(DataSource,String,String,String,String,String)",38,262
org.apache.mahout.cf.taste.impl.model.jdbc.MySQLJDBCDataModel.getFetchSize(),9,9
"org.apache.mahout.math.function.ObjectObjectProcedure<K,V>.apply(K,V)",27,47
"org.apache.mahout.classifier.df.BreimanExample.runIteration(Random,Data,int,int)",53,199
org.apache.mahout.classifier.df.BreimanExample.main(String[]),10,11
org.apache.mahout.classifier.df.BreimanExample.run(String[]),68,333
org.apache.mahout.classifier.email.PrepEmailMapper.setup(Context),12,17
"org.apache.mahout.classifier.email.PrepEmailMapper.map(WritableComparable<>,VectorWritable,Context)",29,52
org.apache.mahout.classifier.email.PrepEmailMapper.escape(CharSequence),11,12
org.apache.mahout.math.flavor.MatrixFlavor.getBacking(),8,8
org.apache.mahout.math.flavor.MatrixFlavor.getStructure(),3,5
org.apache.mahout.math.flavor.MatrixFlavor.isDense(),1,1
"org.apache.mahout.math.flavor.MatrixFlavor.FlavorImpl.FlavorImpl(BackEnum,TraversingStructureEnum,boolean)",5,10
org.apache.mahout.math.flavor.MatrixFlavor.FlavorImpl.getBacking(),0,0
org.apache.mahout.math.flavor.MatrixFlavor.FlavorImpl.getStructure(),2,4
org.apache.mahout.math.flavor.MatrixFlavor.FlavorImpl.isDense(),1,2
org.apache.mahout.h2obindings.drm.H2ODrm.H2ODrm(Frame),7,9
"org.apache.mahout.h2obindings.drm.H2ODrm.H2ODrm(Frame,Vec)",10,11
org.apache.mahout.math.jet.random.AbstractContinousDistribution.cdf(double),8,8
org.apache.mahout.math.jet.random.AbstractContinousDistribution.pdf(double),7,8
org.apache.mahout.math.jet.random.AbstractContinousDistribution.nextInt(),2,2
org.apache.mahout.benchmark.PlusBenchmark.PlusBenchmark(VectorBenchmarks),5,7
org.apache.mahout.benchmark.PlusBenchmark.benchmark(),12,102
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$1.apply(Integer),9,15
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$2.apply(Integer),9,15
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$3.apply(Integer),9,15
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$4.apply(Integer),9,15
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$5.apply(Integer),9,15
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$6.apply(Integer),9,15
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$7.apply(Integer),9,15
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$8.apply(Integer),9,15
org.apache.mahout.benchmark.PlusBenchmark.benchmark().$9.apply(Integer),9,15
org.apache.mahout.math.function.Mult.Mult(double),2,4
org.apache.mahout.math.function.Mult.apply(double),2,2
org.apache.mahout.math.function.Mult.div(double),3,6
org.apache.mahout.math.function.Mult.mult(double),2,6
org.apache.mahout.math.function.Mult.getMultiplicator(),1,2
org.apache.mahout.math.function.Mult.setMultiplicator(double),2,5
"org.apache.mahout.math.function.DoubleDoubleFunction.apply(double,double)",8,16
org.apache.mahout.math.function.DoubleDoubleFunction.isLikeRightPlus(),2,2
org.apache.mahout.math.function.DoubleDoubleFunction.isLikeLeftMult(),3,3
org.apache.mahout.math.function.DoubleDoubleFunction.isLikeRightMult(),2,2
org.apache.mahout.math.function.DoubleDoubleFunction.isLikeMult(),3,5
org.apache.mahout.math.function.DoubleDoubleFunction.isCommutative(),2,2
org.apache.mahout.math.function.DoubleDoubleFunction.isAssociative(),2,2
org.apache.mahout.math.function.DoubleDoubleFunction.isAssociativeAndCommutative(),3,5
org.apache.mahout.math.function.DoubleDoubleFunction.isDensifying(),3,3
"org.apache.mahout.math.jet.random.NegativeBinomial.NegativeBinomial(int,double,Random)",22,49
org.apache.mahout.math.jet.random.NegativeBinomial.cdf(int),8,8
org.apache.mahout.math.jet.random.NegativeBinomial.pdf(int),9,11
org.apache.mahout.math.jet.random.NegativeBinomial.nextInt(),0,0
"org.apache.mahout.math.jet.random.NegativeBinomial.nextInt(int,double)",47,60
org.apache.mahout.math.jet.random.NegativeBinomial.toString(),2,3
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.testValues(),27,65
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.testDense(),13,36
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.testSparse(),16,36
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.testNonNumeric(),28,133
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.testDate(),31,133
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.testMultipleNoms(),27,157
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.testNumerics(),21,76
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.testQuotes(),39,159
"org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.getVectors(String,ARFFModel)",13,26
org.apache.mahout.utils.vectors.arff.ARFFVectorIterableTest.readModelFromResource(String),11,20
org.apache.mahout.benchmark.MinusBenchmark.MinusBenchmark(VectorBenchmarks),5,7
org.apache.mahout.benchmark.MinusBenchmark.benchmark(),12,102
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$1.apply(Integer),9,15
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$2.apply(Integer),9,15
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$3.apply(Integer),9,15
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$4.apply(Integer),9,15
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$5.apply(Integer),9,15
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$6.apply(Integer),9,15
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$7.apply(Integer),9,15
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$8.apply(Integer),9,15
org.apache.mahout.benchmark.MinusBenchmark.benchmark().$9.apply(Integer),9,15
"org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.TermInfoClusterInOut(String,int,int,double)",7,22
org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.hashCode(),9,13
org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.equals(Object),8,24
org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.compareTo(TermInfoClusterInOut),8,18
org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.getInClusterDiff(),2,4
org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.getTerm(),2,3
org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.getInClusterDF(),1,2
org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.getOutClusterDF(),1,2
org.apache.mahout.utils.vectors.lucene.TermInfoClusterInOut.getLogLikelihoodRatio(),3,6
org.apache.mahout.common.IOUtils.IOUtils(),1,1
org.apache.mahout.common.IOUtils.quietClose(ResultSet),13,18
org.apache.mahout.common.IOUtils.quietClose(Statement),12,17
org.apache.mahout.common.IOUtils.quietClose(Connection),12,17
"org.apache.mahout.common.IOUtils.quietClose(ResultSet,Statement,Connection)",18,55
org.apache.mahout.common.IOUtils.close(Collection<>),39,99
org.apache.mahout.common.IOUtils.DeleteFileOnClose.DeleteFileOnClose(File),3,7
org.apache.mahout.common.IOUtils.DeleteFileOnClose.close(),4,6
org.apache.mahout.common.IOUtils.MultipleOutputsCloseableAdapter.MultipleOutputsCloseableAdapter(MultipleOutputs),4,6
org.apache.mahout.common.IOUtils.MultipleOutputsCloseableAdapter.close(),2,3
org.apache.mahout.utils.regex.ChainTransformer.ChainTransformer(),2,2
org.apache.mahout.utils.regex.ChainTransformer.ChainTransformer(List<RegexTransformer>),4,8
org.apache.mahout.utils.regex.ChainTransformer.transformMatch(String),7,18
org.apache.mahout.utils.regex.ChainTransformer.getChain(),4,5
org.apache.mahout.utils.regex.ChainTransformer.setChain(List<RegexTransformer>),5,8
org.apache.mahout.fpm.pfpgrowth.dataset.KeyBasedStringTupleGrouper.KeyBasedStringTupleGrouper(),5,5
org.apache.mahout.fpm.pfpgrowth.dataset.KeyBasedStringTupleGrouper.startJob(Parameters),52,177
org.apache.mahout.math.map.QuickOpenIntIntHashMap.QuickOpenIntIntHashMap(),8,10
org.apache.mahout.math.map.QuickOpenIntIntHashMap.QuickOpenIntIntHashMap(int),18,33
"org.apache.mahout.math.map.QuickOpenIntIntHashMap.QuickOpenIntIntHashMap(int,double,double)",19,73
"org.apache.mahout.math.map.QuickOpenIntIntHashMap.put(int,int)",92,224
org.apache.mahout.math.map.QuickOpenIntIntHashMap.rehash(int),24,70
org.apache.mahout.math.random.ChineseRestaurant.ChineseRestaurant(double),12,16
"org.apache.mahout.math.random.ChineseRestaurant.ChineseRestaurant(double,double)",22,43
org.apache.mahout.math.random.ChineseRestaurant.sample(),18,35
org.apache.mahout.math.random.ChineseRestaurant.size(),5,6
org.apache.mahout.math.random.ChineseRestaurant.count(),3,3
org.apache.mahout.math.random.ChineseRestaurant.count(int),11,12
"org.apache.mahout.utils.clustering.ClusterDumperWriter.ClusterDumperWriter(Writer,Map<List<Integer,WeightedPropertyVectorWritable>>,DistanceMeasure,int,String[],int)",18,38
org.apache.mahout.utils.clustering.ClusterDumperWriter.write(ClusterWritable),39,161
"org.apache.mahout.math.Swapper.swap(int,int)",4,4
org.apache.mahout.clustering.streaming.tools.IOUtils.IOUtils(),1,1
org.apache.mahout.clustering.streaming.tools.IOUtils.getCentroidsFromCentroidWritableIterable(Iterable<CentroidWritable>),19,42
org.apache.mahout.clustering.streaming.tools.IOUtils.getCentroidsFromCentroidWritableIterable(Iterable<CentroidWritable>).$1.apply(CentroidWritable),7,11
org.apache.mahout.clustering.streaming.tools.IOUtils.getCentroidsFromClusterWritableIterable(Iterable<ClusterWritable>),22,44
org.apache.mahout.clustering.streaming.tools.IOUtils.getCentroidsFromClusterWritableIterable(Iterable<ClusterWritable>).$2.apply(ClusterWritable),14,19
org.apache.mahout.clustering.streaming.tools.IOUtils.getVectorsFromVectorWritableIterable(Iterable<VectorWritable>),18,42
org.apache.mahout.clustering.streaming.tools.IOUtils.getVectorsFromVectorWritableIterable(Iterable<VectorWritable>).$3.apply(VectorWritable),7,10
"org.apache.mahout.utils.vectors.lucene.AbstractLuceneIterator.AbstractLuceneIterator(TermInfo,double,IndexReader,Weight,double,String)",18,45
org.apache.mahout.utils.vectors.lucene.AbstractLuceneIterator.getVectorName(int),17,30
org.apache.mahout.utils.vectors.lucene.AbstractLuceneIterator.computeNext(),54,166
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.AbstractJDBCItemSimilarity(DataSource,String,String)",10,33
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.AbstractJDBCItemSimilarity(DataSource,String,String,String,String,String,String)",25,148
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.getSimilarityTable(),3,5
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.getItemAIDColumn(),4,7
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.getItemBIDColumn(),4,7
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.getSimilarityColumn(),3,5
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.itemSimilarity(long,long)",29,69
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.itemSimilarities(long,long[])",31,75
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.allSimilarItemIDs(long),35,91
org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.refresh(Collection<Refreshable>),4,4
"org.apache.mahout.cf.taste.impl.similarity.jdbc.AbstractJDBCItemSimilarity.doItemSimilarity(PreparedStatement,long,long)",25,47
"org.apache.mahout.math.decomposer.hebbian.EigenUpdater.update(Vector,Vector,TrainingState)",6,9
org.apache.mahout.text.MailArchivesClusteringAnalyzer.MailArchivesClusteringAnalyzer(),8,8
org.apache.mahout.text.MailArchivesClusteringAnalyzer.MailArchivesClusteringAnalyzer(CharArraySet),9,12
"org.apache.mahout.text.MailArchivesClusteringAnalyzer.createComponents(String,Reader)",25,61
org.apache.mahout.text.MailArchivesClusteringAnalyzer.AlphaNumericMaxLengthFilter.AlphaNumericMaxLengthFilter(TokenStream),11,13
org.apache.mahout.text.MailArchivesClusteringAnalyzer.AlphaNumericMaxLengthFilter.incrementToken(),20,42
org.apache.mahout.cf.taste.example.kddcup.track1.Track1RecommenderEvaluator.Track1RecommenderEvaluator(File),12,22
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1RecommenderEvaluator.evaluate(RecommenderBuilder,DataModelBuilder,DataModel,double,double)",42,105
org.apache.mahout.cf.taste.example.kddcup.track1.Track1RecommenderEvaluator.reset(),3,4
"org.apache.mahout.cf.taste.example.kddcup.track1.Track1RecommenderEvaluator.processOneEstimate(float,Preference)",11,18
org.apache.mahout.cf.taste.example.kddcup.track1.Track1RecommenderEvaluator.computeFinalEvaluation(),5,6
org.apache.mahout.clustering.syntheticcontrol.fuzzykmeans.Job.Job(),1,1
org.apache.mahout.clustering.syntheticcontrol.fuzzykmeans.Job.main(String[]),26,42
org.apache.mahout.clustering.syntheticcontrol.fuzzykmeans.Job.run(String[]),43,176
"org.apache.mahout.clustering.syntheticcontrol.fuzzykmeans.Job.run(Configuration,Path,Path,DistanceMeasure,double,double,int,float,double)",78,200
org.apache.mahout.math.decomposer.AsyncEigenVerifier.AsyncEigenVerifier(),8,12
"org.apache.mahout.math.decomposer.AsyncEigenVerifier.verify(VectorIterable,Vector)",16,33
org.apache.mahout.math.decomposer.AsyncEigenVerifier.close(),4,4
"org.apache.mahout.math.decomposer.AsyncEigenVerifier.innerVerify(VectorIterable,Vector)",7,12
"org.apache.mahout.math.decomposer.AsyncEigenVerifier.VerifierRunnable.VerifierRunnable(VectorIterable,Vector)",5,11
org.apache.mahout.math.decomposer.AsyncEigenVerifier.VerifierRunnable.run(),11,18
org.apache.mahout.math.jet.math.Arithmetic.Arithmetic(),1,1
"org.apache.mahout.math.jet.math.Arithmetic.binomial(long,long)",27,54
org.apache.mahout.math.jet.math.Arithmetic.factorial(int),12,27
org.apache.mahout.math.jet.math.Arithmetic.logFactorial(int),14,19
org.apache.mahout.math.solver.LSMR.getIterationCount(),2,3
org.apache.mahout.math.solver.LSMR.getResidualNorm(),2,4
org.apache.mahout.math.solver.LSMR.getNormalEquationResidual(),3,6
org.apache.mahout.math.solver.LSMR.getANorm(),1,2
org.apache.mahout.math.solver.LSMR.getCondition(),2,2
org.apache.mahout.math.solver.LSMR.getXNorm(),1,2
org.apache.mahout.math.solver.LSMR.LSMR(),10,12
"org.apache.mahout.math.solver.LSMR.solve(Matrix,Vector)",187,656
"org.apache.mahout.math.solver.LSMR.statusDump(Vector,double,double,double,double)",12,25
org.apache.mahout.math.solver.LSMR.zeros(int),3,4
org.apache.mahout.math.solver.LSMR.localVEnqueue(Vector),5,14
org.apache.mahout.math.solver.LSMR.localVOrtho(Vector),6,9
org.apache.mahout.math.solver.LSMR.StopCode.StopCode(String),4,6
org.apache.mahout.math.solver.LSMR.StopCode.getMessage(),2,3
org.apache.mahout.math.solver.LSMR.setAtolerance(double),3,5
org.apache.mahout.math.solver.LSMR.setBtolerance(double),3,5
org.apache.mahout.math.solver.LSMR.setConditionLimit(double),3,9
org.apache.mahout.math.solver.LSMR.setIterationLimit(int),3,9
org.apache.mahout.math.solver.LSMR.setLocalSize(int),3,9
org.apache.mahout.math.solver.LSMR.getLambda(),1,2
org.apache.mahout.math.solver.LSMR.getAtolerance(),2,2
org.apache.mahout.math.solver.LSMR.getBtolerance(),2,2
org.apache.mahout.text.TestPathFilter.accept(Path),4,12
org.apache.mahout.utils.email.MailOptions.getInput(),2,3
org.apache.mahout.utils.email.MailOptions.setInput(File),3,6
org.apache.mahout.utils.email.MailOptions.getOutputDir(),3,5
org.apache.mahout.utils.email.MailOptions.setOutputDir(String),9,16
org.apache.mahout.utils.email.MailOptions.getPrefix(),2,3
org.apache.mahout.utils.email.MailOptions.setPrefix(String),19,26
org.apache.mahout.utils.email.MailOptions.getChunkSize(),2,4
org.apache.mahout.utils.email.MailOptions.setChunkSize(int),8,15
org.apache.mahout.utils.email.MailOptions.getCharset(),1,3
org.apache.mahout.utils.email.MailOptions.setCharset(Charset),5,9
org.apache.mahout.utils.email.MailOptions.getSeparator(),2,3
org.apache.mahout.utils.email.MailOptions.setSeparator(String),8,12
org.apache.mahout.utils.email.MailOptions.getBodySeparator(),3,5
org.apache.mahout.utils.email.MailOptions.setBodySeparator(String),7,15
org.apache.mahout.utils.email.MailOptions.isIncludeBody(),2,4
org.apache.mahout.utils.email.MailOptions.setIncludeBody(boolean),8,14
org.apache.mahout.utils.email.MailOptions.getPatternsToMatch(),3,5
org.apache.mahout.utils.email.MailOptions.setPatternsToMatch(Pattern[]),13,20
org.apache.mahout.utils.email.MailOptions.getPatternOrder(),4,5
"org.apache.mahout.utils.email.MailOptions.setPatternOrder(Map<String,Integer>)",5,8
org.apache.mahout.utils.email.MailOptions.isStripQuotedText(),4,10
org.apache.mahout.utils.email.MailOptions.setStripQuotedText(boolean),8,19
org.apache.mahout.utils.email.MailOptions.getQuotedTextPattern(),3,7
org.apache.mahout.utils.email.MailOptions.setQuotedTextPattern(Pattern),12,28
org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLJDBCDataModel.PostgreSQLJDBCDataModel(),24,34
org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLJDBCDataModel.PostgreSQLJDBCDataModel(String),25,51
org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLJDBCDataModel.PostgreSQLJDBCDataModel(DataSource),14,28
"org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLJDBCDataModel.PostgreSQLJDBCDataModel(DataSource,String,String,String,String,String)",21,85
"org.apache.mahout.cf.taste.impl.model.jdbc.PostgreSQLJDBCDataModel.setPreference(long,long,float)",38,135
org.apache.mahout.h2obindings.H2OHdfs.isSeqfile(String),27,52
"org.apache.mahout.h2obindings.H2OHdfs.drmFromFile(String,int)",22,47
"org.apache.mahout.h2obindings.H2OHdfs.drmFromSeqfile(String,int)",61,211
"org.apache.mahout.h2obindings.H2OHdfs.drmToFile(String,H2ODrm)",45,127
org.apache.mahout.math.function.Functions.$1.apply(double),3,3
org.apache.mahout.math.function.Functions.$2.apply(double),3,3
org.apache.mahout.math.function.Functions.$3.apply(double),3,3
org.apache.mahout.math.function.Functions.$4.apply(double),3,3
org.apache.mahout.math.function.Functions.$5.apply(double),3,3
org.apache.mahout.math.function.Functions.$6.apply(double),3,3
org.apache.mahout.math.function.Functions.$7.apply(double),3,3
org.apache.mahout.math.function.Functions.$8.apply(double),3,3
org.apache.mahout.math.function.Functions.$9.apply(double),1,1
org.apache.mahout.math.function.Functions.$10.apply(double),1,1
org.apache.mahout.math.function.Functions.$11.apply(double),3,3
org.apache.mahout.math.function.Functions.$12.apply(double),3,3
org.apache.mahout.math.function.Functions.$13.apply(double),1,1
org.apache.mahout.math.function.Functions.$14.apply(double),3,3
org.apache.mahout.math.function.Functions.$15.apply(double),1,1
org.apache.mahout.math.function.Functions.$16.apply(double),3,3
org.apache.mahout.math.function.Functions.$17.apply(double),3,3
org.apache.mahout.math.function.Functions.$18.apply(double),1,1
org.apache.mahout.math.function.Functions.$19.apply(double),3,3
org.apache.mahout.math.function.Functions.$20.apply(double),1,1
org.apache.mahout.math.function.Functions.$21.apply(double),3,3
"org.apache.mahout.math.function.Functions.$22.apply(double,double)",3,3
"org.apache.mahout.math.function.Functions.$23.apply(double,double)",1,1
"org.apache.mahout.math.function.Functions.$24.apply(double,double)",1,1
org.apache.mahout.math.function.Functions.$24.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$24.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$24.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$24.isCommutative(),1,1
org.apache.mahout.math.function.Functions.$24.isAssociative(),1,1
"org.apache.mahout.math.function.Functions.$25.apply(double,double)",1,1
org.apache.mahout.math.function.Functions.$25.isCommutative(),1,1
"org.apache.mahout.math.function.Functions.$26.apply(double,double)",1,1
"org.apache.mahout.math.function.Functions.$27.apply(double,double)",4,4
"org.apache.mahout.math.function.Functions.$28.apply(double,double)",1,1
"org.apache.mahout.math.function.Functions.$29.apply(double,double)",1,1
"org.apache.mahout.math.function.Functions.$30.apply(double,double)",1,1
"org.apache.mahout.math.function.Functions.$31.apply(double,double)",1,1
"org.apache.mahout.math.function.Functions.$32.apply(double,double)",3,5
"org.apache.mahout.math.function.Functions.$33.apply(double,double)",3,3
org.apache.mahout.math.function.Functions.$33.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$33.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$33.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$33.isAssociative(),1,1
org.apache.mahout.math.function.Functions.$33.isCommutative(),1,1
"org.apache.mahout.math.function.Functions.$34.apply(double,double)",4,7
org.apache.mahout.math.function.Functions.$34.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$34.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$34.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$34.isAssociative(),1,1
org.apache.mahout.math.function.Functions.$34.isCommutative(),1,1
"org.apache.mahout.math.function.Functions.$35.apply(double,double)",3,3
org.apache.mahout.math.function.Functions.$35.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$35.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$35.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$35.isAssociative(),1,1
org.apache.mahout.math.function.Functions.$35.isCommutative(),1,1
"org.apache.mahout.math.function.Functions.$36.apply(double,double)",1,1
org.apache.mahout.math.function.Functions.$36.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$36.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$36.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$36.isCommutative(),1,1
org.apache.mahout.math.function.Functions.$36.isAssociative(),1,1
"org.apache.mahout.math.function.Functions.$37.apply(double,double)",1,1
"org.apache.mahout.math.function.Functions.$38.apply(double,double)",3,5
org.apache.mahout.math.function.Functions.$38.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$38.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$38.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$38.isAssociative(),1,1
org.apache.mahout.math.function.Functions.$38.isCommutative(),1,1
"org.apache.mahout.math.function.Functions.$39.apply(double,double)",3,3
org.apache.mahout.math.function.Functions.$39.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$39.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$39.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$39.isCommutative(),1,1
org.apache.mahout.math.function.Functions.$39.isAssociative(),1,1
"org.apache.mahout.math.function.Functions.$40.apply(double,double)",3,3
org.apache.mahout.math.function.Functions.$40.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$40.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$40.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$40.isCommutative(),1,1
org.apache.mahout.math.function.Functions.$40.isAssociative(),1,1
"org.apache.mahout.math.function.Functions.$41.apply(double,double)",1,1
org.apache.mahout.math.function.Functions.$41.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$41.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$41.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$41.isCommutative(),1,1
org.apache.mahout.math.function.Functions.$41.isAssociative(),1,1
"org.apache.mahout.math.function.Functions.$42.apply(double,double)",6,6
org.apache.mahout.math.function.Functions.$42.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$42.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$42.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$42.isCommutative(),1,1
org.apache.mahout.math.function.Functions.$42.isAssociative(),1,1
"org.apache.mahout.math.function.Functions.$43.apply(double,double)",1,1
org.apache.mahout.math.function.Functions.$43.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$43.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$43.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$43.isCommutative(),1,1
org.apache.mahout.math.function.Functions.$43.isAssociative(),1,1
"org.apache.mahout.math.function.Functions.$44.apply(double,double)",1,1
org.apache.mahout.math.function.Functions.$44.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.$44.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.$44.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.$44.isCommutative(),1,1
org.apache.mahout.math.function.Functions.$44.isAssociative(),1,1
"org.apache.mahout.math.function.Functions.reweigh(double,double)",6,20
"org.apache.mahout.math.function.Functions.reweigh(double,double).$45.apply(double,double)",1,1
"org.apache.mahout.math.function.Functions.reweigh(double,double).$45.isLikeRightPlus()",1,1
"org.apache.mahout.math.function.Functions.reweigh(double,double).$45.isLikeLeftMult()",2,2
"org.apache.mahout.math.function.Functions.reweigh(double,double).$45.isLikeRightMult()",1,1
"org.apache.mahout.math.function.Functions.reweigh(double,double).$45.isCommutative()",1,1
"org.apache.mahout.math.function.Functions.reweigh(double,double).$45.isAssociative()",1,1
org.apache.mahout.math.function.Functions.Functions(),1,1
"org.apache.mahout.math.function.Functions.between(double,double)",6,8
"org.apache.mahout.math.function.Functions.between(double,double).$46.apply(double)",1,1
"org.apache.mahout.math.function.Functions.bindArg1(DoubleDoubleFunction,double)",19,33
"org.apache.mahout.math.function.Functions.bindArg1(DoubleDoubleFunction,double).$47.apply(double)",3,5
"org.apache.mahout.math.function.Functions.bindArg2(DoubleDoubleFunction,double)",19,33
"org.apache.mahout.math.function.Functions.bindArg2(DoubleDoubleFunction,double).$48.apply(double)",3,5
"org.apache.mahout.math.function.Functions.chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction)",23,51
"org.apache.mahout.math.function.Functions.chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction).$49.apply(double,double)",1,4
"org.apache.mahout.math.function.Functions.chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction).$49.isLikeRightPlus()",1,1
"org.apache.mahout.math.function.Functions.chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction).$49.isLikeLeftMult()",3,5
"org.apache.mahout.math.function.Functions.chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction).$49.isLikeRightMult()",2,3
"org.apache.mahout.math.function.Functions.chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction).$49.isCommutative()",2,3
"org.apache.mahout.math.function.Functions.chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction).$49.isAssociative()",1,1
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleDoubleFunction)",14,39
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleDoubleFunction).$50.apply(double,double)",1,3
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleDoubleFunction).$50.isLikeRightPlus()",1,1
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleDoubleFunction).$50.isLikeLeftMult()",3,5
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleDoubleFunction).$50.isLikeRightMult()",2,3
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleDoubleFunction).$50.isCommutative()",1,2
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleDoubleFunction).$50.isAssociative()",1,1
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleFunction)",6,16
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,DoubleFunction).$51.apply(double)",1,3
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,IntIntFunction)",7,17
"org.apache.mahout.math.function.Functions.chain(DoubleFunction,IntIntFunction).$52.apply(int,int)",1,3
org.apache.mahout.math.function.Functions.compare(double),7,9
org.apache.mahout.math.function.Functions.compare(double).$53.apply(double),1,1
org.apache.mahout.math.function.Functions.constant(double),5,8
org.apache.mahout.math.function.Functions.constant(double).$54.apply(double),1,1
org.apache.mahout.math.function.Functions.div(double),7,8
org.apache.mahout.math.function.Functions.equals(double),7,9
org.apache.mahout.math.function.Functions.equals(double).$55.apply(double),1,1
org.apache.mahout.math.function.Functions.notEqual(double),7,9
org.apache.mahout.math.function.Functions.notEqual(double).$56.apply(double),1,1
org.apache.mahout.math.function.Functions.greater(double),6,8
org.apache.mahout.math.function.Functions.greater(double).$57.apply(double),1,1
org.apache.mahout.math.function.Functions.mathIEEEremainder(double),9,14
org.apache.mahout.math.function.Functions.mathIEEEremainder(double).$58.apply(double),4,4
"org.apache.mahout.math.function.Functions.isBetween(double,double)",15,18
"org.apache.mahout.math.function.Functions.isBetween(double,double).$59.apply(double)",1,1
org.apache.mahout.math.function.Functions.isEqual(double),8,9
org.apache.mahout.math.function.Functions.isEqual(double).$60.apply(double),1,1
org.apache.mahout.math.function.Functions.isGreater(double),7,8
org.apache.mahout.math.function.Functions.isGreater(double).$61.apply(double),1,1
org.apache.mahout.math.function.Functions.isLess(double),7,8
org.apache.mahout.math.function.Functions.isLess(double).$62.apply(double),1,1
org.apache.mahout.math.function.Functions.less(double),6,8
org.apache.mahout.math.function.Functions.less(double).$63.apply(double),1,1
org.apache.mahout.math.function.Functions.lg(double),11,18
org.apache.mahout.math.function.Functions.lg(double).$64.apply(double),4,5
org.apache.mahout.math.function.Functions.max(double),8,11
org.apache.mahout.math.function.Functions.max(double).$65.apply(double),3,3
org.apache.mahout.math.function.Functions.min(double),8,11
org.apache.mahout.math.function.Functions.min(double).$66.apply(double),3,3
org.apache.mahout.math.function.Functions.minus(double),7,8
org.apache.mahout.math.function.Functions.minusMult(double),9,14
org.apache.mahout.math.function.Functions.mod(double),7,9
org.apache.mahout.math.function.Functions.mod(double).$67.apply(double),1,1
org.apache.mahout.math.function.Functions.mult(double),7,10
org.apache.mahout.math.function.Functions.plus(double),7,9
org.apache.mahout.math.function.Functions.plus(double).$68.apply(double),1,1
org.apache.mahout.math.function.Functions.plusMult(double),8,14
org.apache.mahout.math.function.Functions.pow(double),8,11
org.apache.mahout.math.function.Functions.pow(double).$69.apply(double),3,3
org.apache.mahout.math.function.Functions.random(),36,60
org.apache.mahout.math.function.Functions.round(double),12,21
org.apache.mahout.math.function.Functions.round(double).$70.apply(double),4,5
org.apache.mahout.math.function.Functions.swapArgs(DoubleDoubleFunction),14,29
"org.apache.mahout.math.function.Functions.swapArgs(DoubleDoubleFunction).$71.apply(double,double)",2,3
org.apache.mahout.math.function.Functions.minusAbsPow(double),8,18
"org.apache.mahout.math.function.Functions.minusAbsPow(double).$72.apply(double,double)",5,6
org.apache.mahout.math.function.Functions.minusAbsPow(double).$72.isLikeRightPlus(),1,1
org.apache.mahout.math.function.Functions.minusAbsPow(double).$72.isLikeLeftMult(),2,2
org.apache.mahout.math.function.Functions.minusAbsPow(double).$72.isLikeRightMult(),1,1
org.apache.mahout.math.function.Functions.minusAbsPow(double).$72.isCommutative(),1,1
org.apache.mahout.math.function.Functions.minusAbsPow(double).$72.isAssociative(),1,1
org.apache.mahout.fpm.pfpgrowth.DeliciousTagsExample.DeliciousTagsExample(),3,3
org.apache.mahout.fpm.pfpgrowth.DeliciousTagsExample.main(String[]),64,248
org.apache.mahout.math.random.MultiNormal.MultiNormal(Vector),10,18
"org.apache.mahout.math.random.MultiNormal.MultiNormal(Vector,Vector)",16,32
"org.apache.mahout.math.random.MultiNormal.MultiNormal(Matrix,Vector)",11,14
org.apache.mahout.math.random.MultiNormal.MultiNormal(int),3,4
"org.apache.mahout.math.random.MultiNormal.MultiNormal(double,Vector)",8,11
"org.apache.mahout.math.random.MultiNormal.MultiNormal(Matrix,Vector,int)",10,17
org.apache.mahout.math.random.MultiNormal.sample(),11,20
org.apache.mahout.math.random.MultiNormal.sample().$1.apply(double),4,4
org.apache.mahout.math.random.MultiNormal.getScale(),3,3
org.apache.mahout.classifier.ConfusionMatrixDumper.ConfusionMatrixDumper(),3,3
org.apache.mahout.classifier.ConfusionMatrixDumper.main(String[]),10,11
org.apache.mahout.classifier.ConfusionMatrixDumper.run(String[]),39,93
"org.apache.mahout.classifier.ConfusionMatrixDumper.exportText(Path,PrintStream)",30,95
"org.apache.mahout.classifier.ConfusionMatrixDumper.exportTable(Path,PrintStream,boolean)",29,72
org.apache.mahout.classifier.ConfusionMatrixDumper.stripDefault(ConfusionMatrix),14,25
"org.apache.mahout.classifier.ConfusionMatrixDumper.readSeqFile(Path,Text,MatrixWritable)",18,33
org.apache.mahout.classifier.ConfusionMatrixDumper.getPrintStream(String),20,45
"org.apache.mahout.classifier.ConfusionMatrixDumper.getLabelTotal(ConfusionMatrix,String)",10,20
"org.apache.mahout.classifier.ConfusionMatrixDumper.printTextInBox(ConfusionMatrix,PrintStream)",14,21
"org.apache.mahout.classifier.ConfusionMatrixDumper.printSummaryTable(ConfusionMatrix,PrintStream)",17,32
"org.apache.mahout.classifier.ConfusionMatrixDumper.printSummaryRow(ConfusionMatrix,PrintStream,String)",17,31
"org.apache.mahout.classifier.ConfusionMatrixDumper.getCount(ConfusionMatrix,String)",6,12
"org.apache.mahout.classifier.ConfusionMatrixDumper.printGrayTable(ConfusionMatrix,PrintStream)",12,19
"org.apache.mahout.classifier.ConfusionMatrixDumper.printGrayRows(ConfusionMatrix,PrintStream)",27,39
"org.apache.mahout.classifier.ConfusionMatrixDumper.printGrayRow(ConfusionMatrix,PrintStream,Iterable<String>,String)",16,37
"org.apache.mahout.classifier.ConfusionMatrixDumper.printGrayCell(ConfusionMatrix,PrintStream,int,String,String)",32,63
"org.apache.mahout.classifier.ConfusionMatrixDumper.printCountsTable(ConfusionMatrix,PrintStream)",11,19
"org.apache.mahout.classifier.ConfusionMatrixDumper.printCountsRows(ConfusionMatrix,PrintStream)",12,19
"org.apache.mahout.classifier.ConfusionMatrixDumper.printCountsRow(ConfusionMatrix,PrintStream,Iterable<String>,String)",15,31
"org.apache.mahout.classifier.ConfusionMatrixDumper.printCountsCell(ConfusionMatrix,PrintStream,String,String)",15,30
"org.apache.mahout.classifier.ConfusionMatrixDumper.printCountsHeader(ConfusionMatrix,PrintStream,boolean)",28,52
org.apache.mahout.classifier.ConfusionMatrixDumper.getLongestHeader(Iterable<String>),8,15
"org.apache.mahout.classifier.ConfusionMatrixDumper.format(String,PrintStream,Object)",7,15
"org.apache.mahout.classifier.ConfusionMatrixDumper.printHeader(PrintStream,CharSequence)",7,11
org.apache.mahout.classifier.ConfusionMatrixDumper.printFooter(PrintStream),4,6
org.apache.mahout.utils.vectors.TermInfo.totalTerms(String),4,4
"org.apache.mahout.utils.vectors.TermInfo.getTermEntry(String,String)",4,8
org.apache.mahout.utils.vectors.TermInfo.getAllEntries(),4,4
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.Cache(Retriever<>)",14,19
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.Cache(Retriever<>,int)",21,45
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.get(K)",5,14
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.remove(K)",7,14
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.removeKeysMatching(MatchPredicate<K>)",12,23
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.removeValueMatching(MatchPredicate<V>)",11,22
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.clear()",2,4
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.getAndCacheValue(K)",6,15
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.toString()",3,5
"org.apache.mahout.cf.taste.impl.common.Cache<K,V>.MatchPredicate<T>.matches(T)",1,1
org.apache.mahout.math.random.PoissonSampler.PoissonSampler(double),12,21
org.apache.mahout.math.random.PoissonSampler.sample(),2,3
org.apache.mahout.math.random.PoissonSampler.sample(double),14,33
org.apache.mahout.math.function.SquareRootFunction.apply(double),4,5
org.apache.mahout.clustering.display.DisplayFuzzyKMeans.DisplayFuzzyKMeans(),9,11
org.apache.mahout.clustering.display.DisplayFuzzyKMeans.paint(Graphics),6,9
org.apache.mahout.clustering.display.DisplayFuzzyKMeans.main(String[]),36,79
"org.apache.mahout.clustering.display.DisplayFuzzyKMeans.runSequentialFuzzyKClassifier(Configuration,Path,Path,DistanceMeasure,int,int,float,double)",39,82
"org.apache.mahout.clustering.display.DisplayFuzzyKMeans.runSequentialFuzzyKClusterer(Configuration,Path,Path,DistanceMeasure,int,float,double)",27,51
"org.apache.mahout.h2obindings.ops.Ax.exec(H2ODrm,Vector)",33,56
"org.apache.mahout.h2obindings.ops.Ax.exec(H2ODrm,Vector).$1.map(Chunk,NewChunk)",12,19
org.apache.mahout.utils.vectors.io.SequenceFileVectorWriter.SequenceFileVectorWriter(SequenceFile.Writer),4,10
"org.apache.mahout.utils.vectors.io.SequenceFileVectorWriter.write(Iterable<Vector>,long)",11,22
org.apache.mahout.utils.vectors.io.SequenceFileVectorWriter.write(Vector),8,12
org.apache.mahout.utils.vectors.io.SequenceFileVectorWriter.write(Iterable<Vector>),6,9
org.apache.mahout.utils.vectors.io.SequenceFileVectorWriter.close(),4,5
org.apache.mahout.utils.vectors.io.SequenceFileVectorWriter.getWriter(),3,5
org.apache.mahout.utils.ConcatenateVectorsReducer.ConcatenateVectorsReducer(),3,3
org.apache.mahout.utils.ConcatenateVectorsReducer.setup(Context),15,31
"org.apache.mahout.utils.ConcatenateVectorsReducer.reduce(IntWritable,Iterable<VectorWritable>,Context)",23,64
"org.apache.mahout.utils.ConcatenateVectorsReducer.appendVector(Vector,Vector,int)",7,14
org.apache.mahout.cf.taste.impl.model.jdbc.GenericJDBCDataModel.GenericJDBCDataModel(Properties),42,131
org.apache.mahout.cf.taste.impl.model.jdbc.GenericJDBCDataModel.GenericJDBCDataModel(File),29,51
org.apache.mahout.cf.taste.impl.model.jdbc.GenericJDBCDataModel.GenericJDBCDataModel(String),33,65
org.apache.mahout.cf.taste.impl.model.jdbc.GenericJDBCDataModel.getPropertiesFromFile(File),8,20
org.apache.mahout.cf.taste.impl.model.jdbc.GenericJDBCDataModel.getPropertiesFromStream(InputStream),10,20
org.apache.mahout.cf.taste.web.RecommenderSingleton.getInstance(),6,8
org.apache.mahout.cf.taste.web.RecommenderSingleton.initializeIfNeeded(String),6,10
org.apache.mahout.cf.taste.web.RecommenderSingleton.RecommenderSingleton(String),9,18
org.apache.mahout.cf.taste.web.RecommenderSingleton.getRecommender(),1,3
"org.apache.mahout.utils.vectors.TermEntry.TermEntry(String,int,int)",6,18
org.apache.mahout.utils.vectors.TermEntry.getTerm(),2,3
org.apache.mahout.utils.vectors.TermEntry.getTermIdx(),2,4
org.apache.mahout.utils.vectors.TermEntry.getDocFreq(),2,4
"org.apache.mahout.text.doc.MultipleFieldsDocument.MultipleFieldsDocument(String,String,String,String)",5,15
org.apache.mahout.text.doc.MultipleFieldsDocument.getField1(),2,3
org.apache.mahout.text.doc.MultipleFieldsDocument.getField2(),2,3
org.apache.mahout.text.doc.MultipleFieldsDocument.asLuceneDocument(),7,26
org.apache.mahout.math.set.OpenHashSet<T>.OpenHashSet(),8,9
org.apache.mahout.math.set.OpenHashSet<T>.OpenHashSet(int),18,32
"org.apache.mahout.math.set.OpenHashSet<T>.OpenHashSet(int,double,double)",18,72
org.apache.mahout.math.set.OpenHashSet<T>.clear(),10,12
org.apache.mahout.math.set.OpenHashSet<T>.clone(),6,17
org.apache.mahout.math.set.OpenHashSet<T>.contains(Object),4,6
org.apache.mahout.math.set.OpenHashSet<T>.ensureCapacity(int),7,14
org.apache.mahout.math.set.OpenHashSet<T>.forEachKey(ObjectProcedure<T>),6,9
org.apache.mahout.math.set.OpenHashSet<T>.indexOfInsertion(T),40,117
org.apache.mahout.math.set.OpenHashSet<T>.indexOfKey(T),36,75
org.apache.mahout.math.set.OpenHashSet<T>.keys(List<T>),8,14
org.apache.mahout.math.set.OpenHashSet<T>.add(Object),21,49
org.apache.mahout.math.set.OpenHashSet<T>.rehash(int),20,54
org.apache.mahout.math.set.OpenHashSet<T>.remove(Object),18,27
"org.apache.mahout.math.set.OpenHashSet<T>.setUp(int,double,double)",40,97
org.apache.mahout.math.set.OpenHashSet<T>.trimToSize(),13,17
"org.apache.mahout.math.set.OpenHashSet<T>.getInternalFactors(int[],double[],double[])",13,37
org.apache.mahout.math.set.OpenHashSet<T>.isEmpty(),2,2
org.apache.mahout.math.set.OpenHashSet<T>.equals(Object),9,18
org.apache.mahout.math.set.OpenHashSet<T>.equals(Object).$1.apply(T),3,4
org.apache.mahout.math.set.OpenHashSet<T>.hashCode(),11,21
org.apache.mahout.math.set.OpenHashSet<T>.iterator(),5,13
org.apache.mahout.math.set.OpenHashSet<T>.toArray(),5,13
org.apache.mahout.math.set.OpenHashSet<T>.addAll(Collection<>),3,8
org.apache.mahout.math.set.OpenHashSet<T>.containsAll(Collection<>),3,4
org.apache.mahout.math.set.OpenHashSet<T>.removeAll(Collection<>),4,9
org.apache.mahout.math.set.OpenHashSet<T>.retainAll(Collection<>),7,11
org.apache.mahout.math.set.OpenHashSet<T>.retainAll(Collection<>).$2.apply(T),6,8
org.apache.mahout.math.set.OpenHashSet<T>.toArray(T1[]),2,3
org.apache.mahout.math.set.OpenHashSet<T>.keys(),3,9
org.apache.mahout.utils.vectors.arff.ARFFModel.getRelation(),2,2
org.apache.mahout.utils.vectors.arff.ARFFModel.setRelation(String),3,4
org.apache.mahout.utils.vectors.arff.ARFFModel.getLabelBindings(),10,11
"org.apache.mahout.utils.vectors.arff.ARFFModel.getNominalValue(String,String)",5,7
"org.apache.mahout.utils.vectors.arff.ARFFModel.addNominal(String,String,int)",5,7
org.apache.mahout.utils.vectors.arff.ARFFModel.getDateFormat(Integer),4,6
"org.apache.mahout.utils.vectors.arff.ARFFModel.addDateFormat(Integer,DateFormat)",5,8
org.apache.mahout.utils.vectors.arff.ARFFModel.getLabelIndex(String),4,5
"org.apache.mahout.utils.vectors.arff.ARFFModel.addLabel(String,Integer)",5,6
org.apache.mahout.utils.vectors.arff.ARFFModel.getARFFType(Integer),4,6
"org.apache.mahout.utils.vectors.arff.ARFFModel.addType(Integer,ARFFType)",5,7
org.apache.mahout.utils.vectors.arff.ARFFModel.getWordCount(),4,6
"org.apache.mahout.utils.vectors.arff.ARFFModel.getValue(String,int)",4,4
org.apache.mahout.utils.vectors.arff.ARFFModel.getNominalMap(),4,7
org.apache.mahout.utils.vectors.arff.ARFFModel.getLabelSize(),2,2
org.apache.mahout.utils.vectors.arff.ARFFModel.getWords(),3,3
org.apache.mahout.utils.regex.URLDecodeTransformer.URLDecodeTransformer(),5,5
org.apache.mahout.utils.regex.URLDecodeTransformer.URLDecodeTransformer(String),6,7
org.apache.mahout.utils.regex.URLDecodeTransformer.transformMatch(String),11,15
org.apache.mahout.utils.regex.FPGFormatter.format(String),5,8
org.apache.mahout.math.DelegatingVector.DelegatingVector(Vector),3,4
org.apache.mahout.math.DelegatingVector.DelegatingVector(),2,2
org.apache.mahout.math.DelegatingVector.getVector(),2,3
"org.apache.mahout.math.DelegatingVector.aggregate(DoubleDoubleFunction,DoubleFunction)",5,9
"org.apache.mahout.math.DelegatingVector.aggregate(Vector,DoubleDoubleFunction,DoubleDoubleFunction)",6,10
"org.apache.mahout.math.DelegatingVector.viewPart(int,int)",5,8
org.apache.mahout.math.DelegatingVector.clone(),9,22
org.apache.mahout.math.DelegatingVector.all(),3,3
org.apache.mahout.math.DelegatingVector.nonZeroes(),4,5
org.apache.mahout.math.DelegatingVector.divide(double),3,4
org.apache.mahout.math.DelegatingVector.dot(Vector),3,4
org.apache.mahout.math.DelegatingVector.get(int),2,3
org.apache.mahout.math.DelegatingVector.getElement(int),3,6
org.apache.mahout.math.DelegatingVector.mergeUpdates(OrderedIntDoubleMapping),4,8
org.apache.mahout.math.DelegatingVector.minus(Vector),3,5
org.apache.mahout.math.DelegatingVector.normalize(),3,4
org.apache.mahout.math.DelegatingVector.normalize(double),4,6
org.apache.mahout.math.DelegatingVector.logNormalize(),4,6
org.apache.mahout.math.DelegatingVector.logNormalize(double),5,8
org.apache.mahout.math.DelegatingVector.norm(double),3,5
org.apache.mahout.math.DelegatingVector.getLengthSquared(),3,5
org.apache.mahout.math.DelegatingVector.invalidateCachedLength(),6,14
org.apache.mahout.math.DelegatingVector.getDistanceSquared(Vector),4,6
org.apache.mahout.math.DelegatingVector.getLookupCost(),3,5
org.apache.mahout.math.DelegatingVector.getIteratorAdvanceCost(),4,7
org.apache.mahout.math.DelegatingVector.isAddConstantTime(),4,7
org.apache.mahout.math.DelegatingVector.maxValue(),3,5
org.apache.mahout.math.DelegatingVector.maxValueIndex(),4,7
org.apache.mahout.math.DelegatingVector.minValue(),3,5
org.apache.mahout.math.DelegatingVector.minValueIndex(),4,7
org.apache.mahout.math.DelegatingVector.plus(double),3,4
org.apache.mahout.math.DelegatingVector.plus(Vector),3,5
"org.apache.mahout.math.DelegatingVector.set(int,double)",4,7
org.apache.mahout.math.DelegatingVector.times(double),3,4
org.apache.mahout.math.DelegatingVector.times(Vector),3,5
org.apache.mahout.math.DelegatingVector.zSum(),2,3
org.apache.mahout.math.DelegatingVector.assign(double),4,6
org.apache.mahout.math.DelegatingVector.assign(double[]),4,6
org.apache.mahout.math.DelegatingVector.assign(Vector),3,5
"org.apache.mahout.math.DelegatingVector.assign(DoubleDoubleFunction,double)",4,5
org.apache.mahout.math.DelegatingVector.assign(DoubleFunction),4,7
"org.apache.mahout.math.DelegatingVector.assign(Vector,DoubleDoubleFunction)",4,8
org.apache.mahout.math.DelegatingVector.cross(Vector),4,5
org.apache.mahout.math.DelegatingVector.size(),2,3
org.apache.mahout.math.DelegatingVector.asFormatString(),3,6
org.apache.mahout.math.DelegatingVector.hashCode(),3,5
org.apache.mahout.math.DelegatingVector.equals(Object),3,4
org.apache.mahout.math.DelegatingVector.toString(),2,4
org.apache.mahout.math.DelegatingVector.isDense(),2,3
org.apache.mahout.math.DelegatingVector.isSequentialAccess(),3,5
org.apache.mahout.math.DelegatingVector.getQuick(int),3,5
org.apache.mahout.math.DelegatingVector.like(),3,4
org.apache.mahout.math.DelegatingVector.like(int),4,6
"org.apache.mahout.math.DelegatingVector.setQuick(int,double)",5,9
"org.apache.mahout.math.DelegatingVector.incrementQuick(int,double)",4,9
org.apache.mahout.math.DelegatingVector.getNumNondefaultElements(),4,7
org.apache.mahout.math.DelegatingVector.getNumNonZeroElements(),4,7
org.apache.mahout.h2obindings.ops.At.exec(H2ODrm),31,53
org.apache.mahout.h2obindings.ops.At.exec(H2ODrm).$1.map(Chunk),10,21
org.apache.mahout.utils.regex.RegexUtils.RegexUtils(),2,2
"org.apache.mahout.utils.regex.RegexUtils.extract(CharSequence,Pattern,Collection<Integer>,String,RegexTransformer)",12,26
"org.apache.mahout.utils.regex.RegexUtils.extract(CharSequence,StringBuilder,Pattern,Collection<Integer>,String,RegexTransformer)",23,71
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92BooleanPrefJDBCDataModel.SQL92BooleanPrefJDBCDataModel(),24,37
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92BooleanPrefJDBCDataModel.SQL92BooleanPrefJDBCDataModel(String),31,66
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92BooleanPrefJDBCDataModel.SQL92BooleanPrefJDBCDataModel(DataSource),18,38
"org.apache.mahout.cf.taste.impl.model.jdbc.SQL92BooleanPrefJDBCDataModel.SQL92BooleanPrefJDBCDataModel(DataSource,String,String,String,String)",38,241
org.apache.mahout.cf.taste.impl.model.jdbc.SQL92BooleanPrefJDBCDataModel.getVerifyPreferenceSQL(),4,7
"org.apache.mahout.cf.taste.impl.model.jdbc.SQL92BooleanPrefJDBCDataModel.setPreference(long,long,float)",42,126
org.apache.mahout.utils.Bump125Test.testIncrement(),12,16
org.apache.mahout.math.Varint.Varint(),1,1
"org.apache.mahout.math.Varint.writeSignedVarLong(long,DataOutput)",36,74
"org.apache.mahout.math.Varint.writeUnsignedVarLong(long,DataOutput)",37,68
"org.apache.mahout.math.Varint.writeSignedVarInt(int,DataOutput)",20,29
"org.apache.mahout.math.Varint.writeUnsignedVarInt(int,DataOutput)",8,19
org.apache.mahout.math.Varint.readSignedVarLong(DataInput),38,70
org.apache.mahout.math.Varint.readUnsignedVarLong(DataInput),22,45
org.apache.mahout.math.Varint.readSignedVarInt(DataInput),35,65
org.apache.mahout.math.Varint.readUnsignedVarInt(DataInput),18,40
org.apache.mahout.math.CholeskyDecomposition.CholeskyDecomposition(Matrix),3,3
"org.apache.mahout.math.CholeskyDecomposition.CholeskyDecomposition(Matrix,boolean)",16,26
org.apache.mahout.math.CholeskyDecomposition.decomposeWithPivoting(Matrix),48,123
org.apache.mahout.math.CholeskyDecomposition.decompose(Matrix),38,83
org.apache.mahout.math.CholeskyDecomposition.isPositiveDefinite(),2,4
org.apache.mahout.math.CholeskyDecomposition.getL(),2,2
org.apache.mahout.math.CholeskyDecomposition.getPermutedL(),3,3
org.apache.mahout.math.CholeskyDecomposition.getPivot(),7,8
org.apache.mahout.math.CholeskyDecomposition.getInversePivot(),3,5
org.apache.mahout.math.CholeskyDecomposition.solveLeft(Matrix),20,40
org.apache.mahout.math.CholeskyDecomposition.solveRight(Matrix),23,52
org.apache.mahout.utils.vectors.arff.ARFFType.ARFFType(String),4,6
org.apache.mahout.utils.vectors.arff.ARFFType.getIndicator(),2,3
org.apache.mahout.utils.vectors.arff.ARFFType.getLabel(String),13,17
org.apache.mahout.utils.vectors.arff.ARFFType.removeQuotes(String),15,41
org.apache.mahout.utils.vectors.io.TextualVectorWriter.TextualVectorWriter(Writer),3,7
org.apache.mahout.utils.vectors.io.TextualVectorWriter.getWriter(),1,3
org.apache.mahout.utils.vectors.io.TextualVectorWriter.write(Iterable<Vector>),6,9
"org.apache.mahout.utils.vectors.io.TextualVectorWriter.write(Iterable<Vector>,long)",7,18
org.apache.mahout.utils.vectors.io.TextualVectorWriter.write(Vector),6,11
org.apache.mahout.utils.vectors.io.TextualVectorWriter.close(),4,5
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCInMemoryItemSimilarityTest.testMemoryLoad(),34,201
"org.apache.mahout.utils.vectors.lucene.TFDFMapper.TFDFMapper(int,Weight,TermInfo)",7,20
"org.apache.mahout.utils.vectors.lucene.TFDFMapper.setExpectations(String,long)",13,22
"org.apache.mahout.utils.vectors.lucene.TFDFMapper.map(BytesRef,int)",21,33
org.apache.mahout.utils.vectors.lucene.TFDFMapper.getVector(),1,3
org.apache.mahout.utils.vectors.RandomVectorIterable.RandomVectorIterable(),5,6
org.apache.mahout.utils.vectors.RandomVectorIterable.RandomVectorIterable(int),7,10
"org.apache.mahout.utils.vectors.RandomVectorIterable.RandomVectorIterable(int,VectorType)",6,14
org.apache.mahout.utils.vectors.RandomVectorIterable.iterator(),12,18
org.apache.mahout.utils.vectors.RandomVectorIterable.iterator().$1.apply(Integer),15,25
org.apache.mahout.utils.vectors.RandomVectorIterable.iterator().$1.apply(Integer).$1.apply(double),3,3
org.apache.mahout.benchmark.DistanceBenchmark.DistanceBenchmark(VectorBenchmarks),5,7
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure),14,114
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$1.apply(Integer),8,14
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$2.apply(Integer),8,14
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$3.apply(Integer),8,14
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$4.apply(Integer),8,14
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$5.apply(Integer),8,14
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$6.apply(Integer),8,14
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$7.apply(Integer),8,14
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$8.apply(Integer),8,14
org.apache.mahout.benchmark.DistanceBenchmark.benchmark(DistanceMeasure).$9.apply(Integer),8,14
org.apache.mahout.collections.Constants.Constants(),20,36
"org.apache.mahout.cf.taste.impl.recommender.AbstractCandidateItemsStrategy.doGetCandidateItems(long[],DataModel)",10,18
"org.apache.mahout.cf.taste.impl.recommender.AbstractCandidateItemsStrategy.getCandidateItems(long,PreferenceArray,DataModel,boolean)",13,25
"org.apache.mahout.cf.taste.impl.recommender.AbstractCandidateItemsStrategy.getCandidateItems(long[],DataModel)",9,16
"org.apache.mahout.cf.taste.impl.recommender.AbstractCandidateItemsStrategy.doGetCandidateItems(long[],DataModel,boolean)",11,14
org.apache.mahout.cf.taste.impl.recommender.AbstractCandidateItemsStrategy.refresh(Collection<Refreshable>),4,4
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCItemSimilarity.MySQLJDBCItemSimilarity(),5,5
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCItemSimilarity.MySQLJDBCItemSimilarity(String),9,12
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCItemSimilarity.MySQLJDBCItemSimilarity(DataSource),5,9
"org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCItemSimilarity.MySQLJDBCItemSimilarity(DataSource,String,String,String,String)",10,33
org.apache.mahout.cf.taste.impl.similarity.jdbc.MySQLJDBCItemSimilarity.getFetchSize(),9,9
org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJob.main(String[]),10,11
org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJob.run(String[]),92,415
org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJob.MostSimilarItemPairsMapper.setup(Context),21,41
"org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJob.MostSimilarItemPairsMapper.map(IntWritable,VectorWritable,Context)",22,111
"org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJob.MostSimilarItemPairsReducer.reduce(EntityEntityWritable,Iterable<DoubleWritable>,Context)",12,18
org.apache.mahout.text.LuceneSegmentInputSplitTest.before(),2,3
org.apache.mahout.text.LuceneSegmentInputSplitTest.after(),7,7
org.apache.mahout.text.LuceneSegmentInputSplitTest.testGetSegment(),17,60
org.apache.mahout.text.LuceneSegmentInputSplitTest.testGetSegmentNonExistingSegment(),21,69
org.apache.mahout.text.LuceneSegmentInputSplitTest.assertSegmentContainsOneDoc(String),20,52
org.apache.mahout.math.MurmurHashTest.testForLotsOfChange64(),19,34
org.apache.mahout.math.MurmurHashTest.testHash64(),16,40
org.apache.mahout.math.MurmurHashTest.testForLotsOfChange32(),20,35
org.apache.mahout.math.MurmurHashTest.testChangingSeed(),10,21
org.apache.mahout.math.MurmurHashTest.testChangingKey(),12,25
org.apache.mahout.math.MurmurHashTest.testChangingKeyLength(),10,24
"org.apache.mahout.math.MurmurHashTest.setKey(byte[],int)",7,12
org.apache.mahout.text.SequenceFilesFromDirectoryMapper.setup(Context),8,15
"org.apache.mahout.text.SequenceFilesFromDirectoryMapper.map(IntWritable,BytesWritable,Context)",26,70
"org.apache.mahout.math.RandomTrinaryMatrix.RandomTrinaryMatrix(int,int,int,boolean)",7,13
"org.apache.mahout.math.RandomTrinaryMatrix.RandomTrinaryMatrix(int,int)",6,8
"org.apache.mahout.math.RandomTrinaryMatrix.assignColumn(int,Vector)",9,12
"org.apache.mahout.math.RandomTrinaryMatrix.assignRow(int,Vector)",9,12
"org.apache.mahout.math.RandomTrinaryMatrix.getQuick(int,int)",19,35
org.apache.mahout.math.RandomTrinaryMatrix.like(),5,7
"org.apache.mahout.math.RandomTrinaryMatrix.like(int,int)",4,7
"org.apache.mahout.math.RandomTrinaryMatrix.setQuick(int,int,double)",12,12
org.apache.mahout.math.RandomTrinaryMatrix.getNumNondefaultElements(),10,10
"org.apache.mahout.math.RandomTrinaryMatrix.viewPart(int[],int[])",4,8
org.apache.mahout.math.TestSparseColumnMatrix.matrixFactory(double[][]),11,34
org.apache.mahout.math.TestSparseColumnMatrix.testIterate(),3,4
org.apache.mahout.math.jet.random.ExponentialTest.consistency(),14,22
org.apache.mahout.math.jet.random.ExponentialTest.testCdf(),9,13
org.apache.mahout.math.jet.random.ExponentialTest.testPdf(),4,5
"org.apache.mahout.math.jet.random.ExponentialTest.checkPdf(Exponential,double)",9,25
org.apache.mahout.math.jet.random.ExponentialTest.testSetState(),7,15
org.apache.mahout.math.jet.random.ExponentialTest.testNextDouble(),12,23
"org.apache.mahout.math.jet.random.ExponentialTest.checkEmpiricalDistribution(Exponential,int,double)",13,18
org.apache.mahout.math.jet.random.ExponentialTest.testToString(),10,22
"org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent.checkNotNullAndLog(String,Object)",11,22
"org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent.checkNotNullAndLog(String,Object[])",12,25
org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent.lookupDataSource(String),29,77
org.apache.mahout.cf.taste.impl.common.jdbc.AbstractJDBCComponent.getFetchSize(),2,4
org.apache.mahout.math.set.HashUtilsTest.testHashFloat(),24,36
org.apache.mahout.math.set.HashUtilsTest.testHashDouble(),12,18
org.apache.mahout.math.set.HashUtilsTest.testHashLong(),12,18
org.apache.mahout.math.set.HashUtilsTest.checkCounts(Collection<T>),11,36
org.apache.mahout.text.LuceneSeqFileHelper.LuceneSeqFileHelper(),4,4
"org.apache.mahout.text.LuceneSeqFileHelper.populateValues(Document,Text,List<String>)",17,47
org.apache.mahout.utils.clustering.ClusterWriter.write(Iterable<ClusterWritable>),14,20
org.apache.mahout.utils.clustering.ClusterWriter.write(ClusterWritable),4,8
"org.apache.mahout.utils.clustering.ClusterWriter.write(Iterable<ClusterWritable>,long)",15,28
org.apache.mahout.math.VectorView.VectorView(),4,4
"org.apache.mahout.math.VectorView.VectorView(Vector,int,int)",4,11
"org.apache.mahout.math.VectorView.matrixLike(int,int)",4,9
org.apache.mahout.math.VectorView.clone(),4,12
org.apache.mahout.math.VectorView.isDense(),2,3
org.apache.mahout.math.VectorView.isSequentialAccess(),3,5
org.apache.mahout.math.VectorView.like(),4,7
org.apache.mahout.math.VectorView.like(int),2,4
org.apache.mahout.math.VectorView.getQuick(int),4,6
"org.apache.mahout.math.VectorView.setQuick(int,double)",6,10
org.apache.mahout.math.VectorView.getNumNondefaultElements(),4,4
"org.apache.mahout.math.VectorView.viewPart(int,int)",7,23
org.apache.mahout.math.VectorView.isInView(int),7,12
org.apache.mahout.math.VectorView.iterateNonZero(),4,6
org.apache.mahout.math.VectorView.iterator(),2,4
org.apache.mahout.math.VectorView.NonZeroIterator.NonZeroIterator(),4,5
org.apache.mahout.math.VectorView.NonZeroIterator.computeNext(),8,14
org.apache.mahout.math.VectorView.AllIterator.AllIterator(),2,3
org.apache.mahout.math.VectorView.AllIterator.computeNext(),9,16
org.apache.mahout.math.VectorView.DecoratorElement.DecoratorElement(Element),3,6
org.apache.mahout.math.VectorView.DecoratorElement.get(),1,1
org.apache.mahout.math.VectorView.DecoratorElement.index(),3,4
org.apache.mahout.math.VectorView.DecoratorElement.set(double),3,5
org.apache.mahout.math.VectorView.getLengthSquared(),6,12
org.apache.mahout.math.VectorView.getDistanceSquared(Vector),7,14
org.apache.mahout.math.VectorView.getLookupCost(),3,5
org.apache.mahout.math.VectorView.getIteratorAdvanceCost(),8,12
org.apache.mahout.math.VectorView.isAddConstantTime(),4,7
org.apache.mahout.math.VectorView.mergeUpdates(OrderedIntDoubleMapping),9,17
"org.apache.mahout.text.doc.NumericFieldDocument.NumericFieldDocument(String,String,int)",4,13
org.apache.mahout.text.doc.NumericFieldDocument.asLuceneDocument(),9,34
org.apache.mahout.text.doc.NumericFieldDocument.getNumericField(),2,4
org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper.createSharedInstance(Context),25,34
org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper.setup(Mapper.Context),18,33
"org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper.map(IntWritable,VectorWritable,Context)",23,34
"org.apache.mahout.text.doc.SingleFieldDocument.SingleFieldDocument(String,String)",4,8
org.apache.mahout.text.doc.SingleFieldDocument.getId(),1,1
org.apache.mahout.text.doc.SingleFieldDocument.getField(),2,3
org.apache.mahout.text.doc.SingleFieldDocument.asLuceneDocument(),8,30
org.apache.mahout.math.Arrays.Arrays(),1,1
"org.apache.mahout.math.Arrays.ensureCapacity(byte[],int)",21,62
"org.apache.mahout.math.Arrays.ensureCapacity(char[],int)",21,62
"org.apache.mahout.math.Arrays.ensureCapacity(double[],int)",21,65
"org.apache.mahout.math.Arrays.ensureCapacity(float[],int)",21,62
"org.apache.mahout.math.Arrays.ensureCapacity(int[],int)",21,62
"org.apache.mahout.math.Arrays.ensureCapacity(long[],int)",21,62
"org.apache.mahout.math.Arrays.ensureCapacity(Object[],int)",22,66
"org.apache.mahout.math.Arrays.ensureCapacity(short[],int)",21,62
"org.apache.mahout.math.Arrays.ensureCapacity(boolean[],int)",21,62
org.apache.mahout.math.Arrays.toString(byte[]),23,51
org.apache.mahout.math.Arrays.toString(char[]),23,51
org.apache.mahout.math.Arrays.toString(double[]),23,51
org.apache.mahout.math.Arrays.toString(float[]),23,51
org.apache.mahout.math.Arrays.toString(int[]),23,51
org.apache.mahout.math.Arrays.toString(long[]),23,51
org.apache.mahout.math.Arrays.toString(Object[]),24,52
org.apache.mahout.math.Arrays.toString(short[]),23,51
org.apache.mahout.math.Arrays.toString(boolean[]),23,51
"org.apache.mahout.math.Arrays.trimToCapacity(byte[],int)",22,57
"org.apache.mahout.math.Arrays.trimToCapacity(char[],int)",22,57
"org.apache.mahout.math.Arrays.trimToCapacity(double[],int)",22,57
"org.apache.mahout.math.Arrays.trimToCapacity(float[],int)",22,57
"org.apache.mahout.math.Arrays.trimToCapacity(int[],int)",22,57
"org.apache.mahout.math.Arrays.trimToCapacity(long[],int)",22,57
"org.apache.mahout.math.Arrays.trimToCapacity(Object[],int)",23,61
"org.apache.mahout.math.Arrays.trimToCapacity(short[],int)",22,57
"org.apache.mahout.math.Arrays.trimToCapacity(boolean[],int)",22,57
"org.apache.mahout.math.Arrays.copyOf(byte[],int)",13,22
"org.apache.mahout.math.Arrays.copyOf(char[],int)",13,22
"org.apache.mahout.math.Arrays.copyOf(short[],int)",13,22
"org.apache.mahout.math.Arrays.copyOf(int[],int)",13,22
"org.apache.mahout.math.Arrays.copyOf(float[],int)",13,22
"org.apache.mahout.math.Arrays.copyOf(double[],int)",13,22
"org.apache.mahout.math.Arrays.copyOf(long[],int)",13,22
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage.InvertedRunningAverage(RunningAverage),4,8
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage.addDatum(double),5,6
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage.removeDatum(double),5,6
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage.changeDatum(double),6,6
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage.getCount(),2,3
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage.getAverage(),2,3
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverage.inverse(),4,4
org.apache.mahout.text.MailArchivesClusteringAnalyzerTest.testAnalysis(),56,108
org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest.before(),32,45
"org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest.before().$1.newLucene2SeqConfiguration(Configuration,List<Path>,Path,String,List<String>)",12,36
org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest.after(),10,15
org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest.testNewLucene2SeqConfiguration(),19,66
org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest.testRun(),41,153
org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest.testRunOptionalArguments(),39,130
org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest.testRunInvalidQuery(),36,74
org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest.testHelp(),10,13
org.apache.mahout.cf.taste.hadoop.item.ToUserVectorsReducer.setup(Context),9,15
"org.apache.mahout.cf.taste.hadoop.item.ToUserVectorsReducer.reduce(VarLongWritable,Iterable<VarLongWritable>,Context)",37,86
org.apache.mahout.math.random.AbstractSamplerFunction.apply(double),3,3
org.apache.mahout.math.random.AbstractSamplerFunction.sample(),1,1
org.apache.mahout.utils.vectors.io.TermInfoWriter.write(TermInfo),4,4
org.apache.mahout.math.list.AbstractObjectList<T>.addAllOf(Collection<T>),13,18
"org.apache.mahout.math.list.AbstractObjectList<T>.beforeInsertAllOf(int,Collection<T>)",24,51
"org.apache.mahout.math.list.AbstractObjectList<T>.replaceFromWith(int,Collection<T>)",21,39
"org.apache.mahout.utils.io.WrappedWriter.write(String,String)",7,10
org.apache.mahout.cf.taste.impl.eval.RMSRecommenderEvaluator.reset(),3,4
"org.apache.mahout.cf.taste.impl.eval.RMSRecommenderEvaluator.processOneEstimate(float,Preference)",11,18
org.apache.mahout.cf.taste.impl.eval.RMSRecommenderEvaluator.computeFinalEvaluation(),5,6
org.apache.mahout.cf.taste.impl.eval.RMSRecommenderEvaluator.toString(),4,5
org.apache.mahout.utils.vectors.csv.CSVVectorIterator.CSVVectorIterator(Reader),5,9
"org.apache.mahout.utils.vectors.csv.CSVVectorIterator.CSVVectorIterator(Reader,CSVStrategy)",6,13
org.apache.mahout.utils.vectors.csv.CSVVectorIterator.computeNext(),14,26
org.apache.mahout.cf.taste.common.TasteException.TasteException(),2,2
org.apache.mahout.cf.taste.common.TasteException.TasteException(String),4,5
org.apache.mahout.cf.taste.common.TasteException.TasteException(Throwable),4,5
"org.apache.mahout.cf.taste.common.TasteException.TasteException(String,Throwable)",6,8
"org.apache.mahout.utils.email.MailProcessor.MailProcessor(MailOptions,String,Writer)",19,31
"org.apache.mahout.utils.email.MailProcessor.MailProcessor(MailOptions,String,ChunkedWriter)",11,23
org.apache.mahout.utils.email.MailProcessor.parseMboxLineByLine(File),76,261
"org.apache.mahout.utils.email.MailProcessor.generateKey(File,String,String)",9,19
org.apache.mahout.utils.email.MailProcessor.getPrefix(),2,3
org.apache.mahout.utils.email.MailProcessor.getOptions(),2,4
"org.apache.mahout.utils.email.MailProcessor.writeContent(String,StringBuilder,CharSequence,String[])",11,27
org.apache.mahout.utils.vectors.arff.ARFFTypeTest.removeQuotes(),7,45
org.apache.mahout.utils.regex.RegexTransformer.transformMatch(String),3,5
"org.apache.mahout.utils.vectors.lucene.LuceneIterable.LuceneIterable(IndexReader,String,String,TermInfo,Weight)",11,20
"org.apache.mahout.utils.vectors.lucene.LuceneIterable.LuceneIterable(IndexReader,String,String,TermInfo,Weight,double)",12,25
"org.apache.mahout.utils.vectors.lucene.LuceneIterable.LuceneIterable(IndexReader,String,String,TermInfo,Weight,double,double)",33,91
org.apache.mahout.utils.vectors.lucene.LuceneIterable.iterator(),14,17
org.apache.mahout.utils.email.MailProcessorTest.testLabel(),34,74
org.apache.mahout.utils.email.MailProcessorTest.testStripQuoted(),45,113
org.apache.mahout.math.OrderedIntDoubleMapping.OrderedIntDoubleMapping(boolean),1,1
org.apache.mahout.math.OrderedIntDoubleMapping.OrderedIntDoubleMapping(),4,4
org.apache.mahout.math.OrderedIntDoubleMapping.OrderedIntDoubleMapping(int),6,8
"org.apache.mahout.math.OrderedIntDoubleMapping.OrderedIntDoubleMapping(int[],double[],int)",5,13
org.apache.mahout.math.OrderedIntDoubleMapping.getIndices(),1,2
org.apache.mahout.math.OrderedIntDoubleMapping.indexAt(int),3,4
"org.apache.mahout.math.OrderedIntDoubleMapping.setIndexAt(int,int)",4,7
org.apache.mahout.math.OrderedIntDoubleMapping.getValues(),1,2
"org.apache.mahout.math.OrderedIntDoubleMapping.setValueAt(int,double)",4,7
org.apache.mahout.math.OrderedIntDoubleMapping.getNumMappings(),2,4
org.apache.mahout.math.OrderedIntDoubleMapping.growTo(int),9,25
org.apache.mahout.math.OrderedIntDoubleMapping.find(int),7,23
org.apache.mahout.math.OrderedIntDoubleMapping.get(int),4,7
"org.apache.mahout.math.OrderedIntDoubleMapping.set(int,double)",14,45
org.apache.mahout.math.OrderedIntDoubleMapping.merge(OrderedIntDoubleMapping),26,101
org.apache.mahout.math.OrderedIntDoubleMapping.hashCode(),9,14
org.apache.mahout.math.OrderedIntDoubleMapping.equals(Object),7,15
org.apache.mahout.math.OrderedIntDoubleMapping.toString(),8,25
org.apache.mahout.math.OrderedIntDoubleMapping.clone(),6,9
"org.apache.mahout.math.OrderedIntDoubleMapping.increment(int,double)",7,20
"org.apache.mahout.math.OrderedIntDoubleMapping.insertValueIfNotDefault(int,int,double)",12,35
"org.apache.mahout.math.OrderedIntDoubleMapping.insertOrUpdateValueIfPresent(int,double)",8,20
org.apache.mahout.math.TestOrderedIntDoubleMapping.testGetSet(),7,75
org.apache.mahout.math.TestOrderedIntDoubleMapping.testClone(),9,30
org.apache.mahout.math.TestOrderedIntDoubleMapping.testAddDefaultElements(),8,24
org.apache.mahout.math.TestOrderedIntDoubleMapping.testMerge(),7,35
org.apache.mahout.math.MahoutTestCase.setUp(),8,9
org.apache.mahout.math.MahoutTestCase.tearDown(),8,11
org.apache.mahout.math.MahoutTestCase.getTestTempDir(),23,64
org.apache.mahout.math.MahoutTestCase.getTestTempFile(String),7,12
org.apache.mahout.math.MahoutTestCase.getTestTempDir(String),7,12
"org.apache.mahout.math.MahoutTestCase.getTestTempFileOrDir(String,boolean)",11,21
org.apache.mahout.math.MahoutTestCase.DeletingVisitor.accept(File),5,6
"org.apache.mahout.math.function.IntIntFunction.apply(int,int)",1,1
org.apache.mahout.math.map.HashFunctions.HashFunctions(),5,5
org.apache.mahout.math.map.HashFunctions.hash(char),6,12
org.apache.mahout.math.map.HashFunctions.hash(double),12,24
org.apache.mahout.math.map.HashFunctions.hash(float),12,19
org.apache.mahout.math.map.HashFunctions.hash(int),10,19
org.apache.mahout.math.map.HashFunctions.hash(long),9,29
org.apache.mahout.math.map.HashFunctions.hash(Object),7,16
org.apache.mahout.math.map.HashFunctions.hash(short),6,12
org.apache.mahout.math.map.HashFunctions.hash(boolean),6,12
org.apache.mahout.math.map.PrimeFinder.PrimeFinder(),5,5
org.apache.mahout.math.map.PrimeFinder.nextPrime(int),19,45
"org.apache.mahout.cf.taste.impl.eval.LoadCallable.LoadCallable(Recommender,long)",4,9
org.apache.mahout.cf.taste.impl.eval.LoadCallable.call(),5,5
org.apache.mahout.math.DiagonalMatrixTest.testBasics(),18,71
org.apache.mahout.math.DiagonalMatrixTest.testSparsity(),16,63
org.apache.mahout.cf.taste.impl.recommender.ByRescoreComparator.ByRescoreComparator(IDRescorer),3,6
"org.apache.mahout.cf.taste.impl.recommender.ByRescoreComparator.compare(RecommendedItem,RecommendedItem)",7,26
org.apache.mahout.cf.taste.impl.recommender.ByRescoreComparator.toString(),4,6
org.apache.mahout.math.random.Multinomial<T>.Multinomial(),4,5
org.apache.mahout.math.random.Multinomial<T>.Multinomial(Multiset<T>),17,21
org.apache.mahout.math.random.Multinomial<T>.Multinomial(Iterable<WeightedThing<T>>),6,7
"org.apache.mahout.math.random.Multinomial<T>.add(T,double)",19,46
org.apache.mahout.math.random.Multinomial<T>.getWeight(T),5,9
org.apache.mahout.math.random.Multinomial<T>.getProbability(T),6,10
org.apache.mahout.math.random.Multinomial<T>.getWeight(),2,4
org.apache.mahout.math.random.Multinomial<T>.delete(T),3,4
"org.apache.mahout.math.random.Multinomial<T>.set(T,double)",21,31
org.apache.mahout.math.random.Multinomial<T>.sample(),7,8
org.apache.mahout.math.random.Multinomial<T>.sample(double),6,10
org.apache.mahout.math.random.Multinomial<T>.getWeights(),24,39
org.apache.mahout.math.random.Multinomial<T>.iterator(),5,11
org.apache.mahout.math.random.Multinomial<T>.iterator().$1.computeNext(),7,9
"org.apache.mahout.math.WeightedVectorComparator.compare(WeightedVector,WeightedVector)",13,29
org.apache.mahout.utils.vectors.lucene.CachedTermInfoTest.before(),19,52
org.apache.mahout.utils.vectors.lucene.CachedTermInfoTest.test(),21,83
"org.apache.mahout.utils.vectors.lucene.CachedTermInfoTest.createTestIndex(FieldType,RAMDirectory,int)",27,72
"org.apache.mahout.math.MatrixSlice.MatrixSlice(Vector,int)",4,6
org.apache.mahout.math.MatrixSlice.vector(),1,3
org.apache.mahout.math.MatrixSlice.index(),1,2
"org.apache.mahout.math.function.TimesFunction.apply(double,double)",1,1
org.apache.mahout.math.function.TimesFunction.isLikeRightPlus(),1,1
org.apache.mahout.math.function.TimesFunction.isLikeLeftMult(),2,2
org.apache.mahout.math.function.TimesFunction.isLikeRightMult(),1,1
org.apache.mahout.math.function.TimesFunction.isCommutative(),1,1
org.apache.mahout.math.function.TimesFunction.isAssociative(),1,1
"org.apache.mahout.math.VectorBinaryAggregateCostTest.createStubs(Vector,Vector)",24,65
org.apache.mahout.math.VectorBinaryAggregateCostTest.setUpStubs(),7,17
org.apache.mahout.math.VectorBinaryAggregateCostTest.denseInteractions(),31,130
org.apache.mahout.math.VectorBinaryAggregateCostTest.sasvInteractions(),30,128
org.apache.mahout.math.VectorBinaryAggregateCostTest.rasvInteractions(),31,130
org.apache.mahout.math.VectorBinaryAggregateCostTest.sasvDenseInteractions(),32,131
org.apache.mahout.math.VectorBinaryAggregateCostTest.denseSasvInteractions(),32,131
org.apache.mahout.math.VectorBinaryAggregateCostTest.denseRasvInteractions(),32,131
org.apache.mahout.math.VectorBinaryAggregateCostTest.rasvDenseInteractions(),32,131
org.apache.mahout.math.VectorBinaryAggregateCostTest.sasvRasvInteractions(),32,131
org.apache.mahout.math.VectorBinaryAggregateCostTest.rasvSasvInteractions(),32,131
org.apache.mahout.math.VectorBinaryAggregateCostTest.replayAll(),4,5
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.FileBasedSparseBinaryMatrix(int,int)",12,21
org.apache.mahout.math.FileBasedSparseBinaryMatrix.setData(File),41,135
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.writeMatrix(File,Matrix)",40,87
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.writeMatrix(File,Matrix).$1.apply(Vector.Element)",5,7
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.assignColumn(int,Vector)",7,9
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.assignRow(int,Vector)",7,9
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.getQuick(int,int)",14,34
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.searchForIndex(IntBuffer,int)",8,27
org.apache.mahout.math.FileBasedSparseBinaryMatrix.like(),4,5
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.like(int,int)",4,7
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.setQuick(int,int,double)",8,9
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.viewPart(int[],int[])",7,8
org.apache.mahout.math.FileBasedSparseBinaryMatrix.viewRow(int),16,39
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.SparseBinaryVector(IntBuffer,int)",6,15
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.SparseBinaryVector(ByteBuffer,int,int,int)",13,33
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.matrixLike(int,int)",6,8
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.mergeUpdates(OrderedIntDoubleMapping),10,11
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.isDense(),1,1
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.isSequentialAccess(),2,2
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.iterator(),3,6
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.iterator().$1.computeNext(),11,22
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.iterator().$1.computeNext().$1.get(),2,2
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.iterator().$1.computeNext().$1.index(),1,2
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.iterator().$1.computeNext().$1.set(double),5,6
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.iterateNonZero(),5,7
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.iterateNonZero().$2.computeNext(),7,9
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.getQuick(int),4,6
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.like(),5,6
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.like(int),5,7
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.createOptimizedCopy(),9,10
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.setQuick(int,double)",9,9
"org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.incrementQuick(int,double)",8,9
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.getNumNondefaultElements(),5,5
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.getLookupCost(),2,2
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.getIteratorAdvanceCost(),3,3
org.apache.mahout.math.FileBasedSparseBinaryMatrix.SparseBinaryVector.isAddConstantTime(),9,10
org.apache.mahout.math.FileBasedSparseBinaryMatrix.BinaryReadOnlyElement.BinaryReadOnlyElement(int),4,6
org.apache.mahout.math.FileBasedSparseBinaryMatrix.BinaryReadOnlyElement.get(),0,0
org.apache.mahout.math.FileBasedSparseBinaryMatrix.BinaryReadOnlyElement.index(),1,2
org.apache.mahout.math.FileBasedSparseBinaryMatrix.BinaryReadOnlyElement.set(double),7,9
org.apache.mahout.math.stats.OnlineSummarizerTest.testStats(),35,50
org.apache.mahout.math.stats.OnlineSummarizerTest.check(double[]),18,41
org.apache.mahout.math.stats.OnlineSummarizerTest.normal(int),5,8
org.apache.mahout.math.stats.OnlineSummarizerTest.exp(int),6,9
"org.apache.mahout.math.stats.OnlineSummarizerTest.gamma(int,double)",7,15
org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils.TasteHadoopUtils(),3,3
org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils.splitPrefTokens(CharSequence),11,17
org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils.idToIndex(long),9,9
"org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils.readID(String,boolean)",6,9
"org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils.readIDIndexMap(String,Configuration)",25,59
"org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy.getCandidateItems(long,PreferenceArray,DataModel,boolean)",14,20
"org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.SamplingLongPrimitiveIterator(LongPrimitiveIterator,double)",7,14
"org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.SamplingLongPrimitiveIterator(RandomWrapper,LongPrimitiveIterator,double)",18,41
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.hasNext(),0,0
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.nextLong(),3,4
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.peek(),3,3
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.doNext(),5,9
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.remove(),4,4
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.skip(int),5,11
"org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.maybeWrapIterator(LongPrimitiveIterator,double)",7,19
"org.apache.mahout.cf.taste.hadoop.item.ItemIDIndexReducer.reduce(VarIntWritable,Iterable<VarLongWritable>,Context)",14,47
org.apache.mahout.utils.vectors.arff.MapBackedARFFModelTest.processNominal(),16,56
org.apache.mahout.utils.vectors.arff.MapBackedARFFModelTest.processBadNumeric(),14,26
org.apache.mahout.utils.vectors.arff.MapBackedARFFModelTest.processGoodNumeric(),11,30
"org.apache.mahout.cf.taste.eval.RecommenderEvaluator.evaluate(RecommenderBuilder,DataModelBuilder,DataModel,double,double)",68,228
org.apache.mahout.cf.taste.eval.RecommenderEvaluator.getMaxPreference(),2,2
org.apache.mahout.cf.taste.eval.RecommenderEvaluator.setMaxPreference(float),3,5
org.apache.mahout.cf.taste.eval.RecommenderEvaluator.getMinPreference(),2,2
org.apache.mahout.cf.taste.eval.RecommenderEvaluator.setMinPreference(float),3,5
org.apache.mahout.math.decomposer.SolverTest.assertOrthonormal(Matrix),3,5
"org.apache.mahout.math.decomposer.SolverTest.assertOrthonormal(Matrix,double)",26,55
org.apache.mahout.math.decomposer.SolverTest.assertOrthonormal(LanczosState),24,48
"org.apache.mahout.math.decomposer.SolverTest.assertEigen(Matrix,VectorIterable,double,boolean)",11,18
"org.apache.mahout.math.decomposer.SolverTest.assertEigen(Matrix,VectorIterable,int,double,boolean)",13,24
"org.apache.mahout.math.decomposer.SolverTest.assertEigen(int,Vector,VectorIterable,double,boolean)",18,48
"org.apache.mahout.math.decomposer.SolverTest.randomSequentialAccessSparseMatrix(int,int,int,int,double)",29,80
"org.apache.mahout.math.decomposer.SolverTest.randomHierarchicalMatrix(int,int,boolean)",27,61
org.apache.mahout.math.decomposer.SolverTest.randomHierarchicalSymmetricMatrix(int),5,11
org.apache.mahout.math.MatricesTest.testFunctionalView(),17,21
"org.apache.mahout.math.MatricesTest.testFunctionalView().$1.apply(int,int)",3,7
org.apache.mahout.math.MatricesTest.testTransposeView(),21,47
org.apache.mahout.math.MatricesTest.testViewDenseSparseReporting(),11,37
org.apache.mahout.math.MatricesTest.testUniformView(),18,37
org.apache.mahout.math.MatricesTest.testSymmetricUniformView(),19,40
org.apache.mahout.math.MatricesTest.testGaussianView(),12,21
org.apache.mahout.math.jet.random.GammaTest.testNextDouble(),18,25
org.apache.mahout.math.jet.random.GammaTest.testCdf(),28,110
"org.apache.mahout.math.jet.random.GammaTest.checkGammaCdf(double,double,double)",14,25
"org.apache.mahout.math.jet.random.GammaTest.seq(double,double,double)",3,3
org.apache.mahout.math.jet.random.GammaTest.testPdf(),23,45
"org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefItemBasedRecommender.GenericBooleanPrefItemBasedRecommender(DataModel,ItemSimilarity)",8,15
"org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefItemBasedRecommender.GenericBooleanPrefItemBasedRecommender(DataModel,ItemSimilarity,CandidateItemsStrategy,MostSimilarItemsCandidateItemsStrategy)",12,39
"org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefItemBasedRecommender.doEstimatePreference(long,PreferenceArray,long)",13,33
org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefItemBasedRecommender.toString(),6,7
org.apache.mahout.classifier.df.data.conditions.Condition.isTrueFor(Instance),6,15
"org.apache.mahout.classifier.df.data.conditions.Condition.equals(int,double)",7,13
"org.apache.mahout.classifier.df.data.conditions.Condition.lesser(int,double)",6,13
"org.apache.mahout.classifier.df.data.conditions.Condition.greaterOrEquals(int,double)",7,13
org.apache.mahout.math.TransposedMatrixView.TransposedMatrixView(Matrix),6,8
"org.apache.mahout.math.TransposedMatrixView.assignColumn(int,Vector)",5,8
"org.apache.mahout.math.TransposedMatrixView.assignRow(int,Vector)",5,8
"org.apache.mahout.math.TransposedMatrixView.getQuick(int,int)",3,6
org.apache.mahout.math.TransposedMatrixView.like(),3,3
"org.apache.mahout.math.TransposedMatrixView.like(int,int)",3,5
"org.apache.mahout.math.TransposedMatrixView.setQuick(int,int,double)",5,10
org.apache.mahout.math.TransposedMatrixView.viewRow(int),4,7
org.apache.mahout.math.TransposedMatrixView.viewColumn(int),4,7
org.apache.mahout.math.TransposedMatrixView.assign(double),3,5
"org.apache.mahout.math.TransposedMatrixView.assign(Matrix,DoubleDoubleFunction)",5,18
org.apache.mahout.math.TransposedMatrixView.assign(Matrix),4,14
org.apache.mahout.math.TransposedMatrixView.assign(DoubleFunction),3,6
org.apache.mahout.math.TransposedMatrixView.getFlavor(),2,4
org.apache.mahout.math.TransposedMatrixView.$1.getBacking(),1,1
org.apache.mahout.math.TransposedMatrixView.$1.getStructure(),7,26
org.apache.mahout.math.TransposedMatrixView.$1.isDense(),2,3
org.apache.mahout.math.TransposedMatrixView.getDelegate(),2,2
"org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder.PartialBuilder(TreeBuilder,Path,Path,Long)",8,21
"org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder.PartialBuilder(TreeBuilder,Path,Path,Long,Configuration)",9,23
org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder.configureJob(Job),43,119
org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder.parseOutput(Job),18,44
"org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder.processOutput(JobContext,Path,TreeID[],Node[])",40,118
org.apache.mahout.cf.taste.common.NoSuchItemException.NoSuchItemException(),2,2
org.apache.mahout.cf.taste.common.NoSuchItemException.NoSuchItemException(long),4,6
org.apache.mahout.cf.taste.common.NoSuchItemException.NoSuchItemException(String),4,5
"org.apache.mahout.math.PermutedVectorView.PermutedVectorView(Vector,int[],int[])",6,15
"org.apache.mahout.math.PermutedVectorView.PermutedVectorView(Vector,int[])",6,12
org.apache.mahout.math.PermutedVectorView.reversePivotPermutation(int[]),5,12
"org.apache.mahout.math.PermutedVectorView.matrixLike(int,int)",7,15
org.apache.mahout.math.PermutedVectorView.mergeUpdates(OrderedIntDoubleMapping),9,17
org.apache.mahout.math.PermutedVectorView.isDense(),2,3
org.apache.mahout.math.PermutedVectorView.isSequentialAccess(),2,2
org.apache.mahout.math.PermutedVectorView.iterator(),4,10
org.apache.mahout.math.PermutedVectorView.iterator().$1.computeNext(),7,12
org.apache.mahout.math.PermutedVectorView.iterator().$1.computeNext().$1.get(),0,0
org.apache.mahout.math.PermutedVectorView.iterator().$1.computeNext().$1.index(),1,2
org.apache.mahout.math.PermutedVectorView.iterator().$1.computeNext().$1.set(double),2,4
org.apache.mahout.math.PermutedVectorView.iterateNonZero(),7,12
org.apache.mahout.math.PermutedVectorView.iterateNonZero().$2.computeNext(),7,12
org.apache.mahout.math.PermutedVectorView.iterateNonZero().$2.computeNext().$1.get(),0,0
org.apache.mahout.math.PermutedVectorView.iterateNonZero().$2.computeNext().$1.index(),1,2
org.apache.mahout.math.PermutedVectorView.iterateNonZero().$2.computeNext().$1.set(double),2,4
org.apache.mahout.math.PermutedVectorView.getQuick(int),4,6
org.apache.mahout.math.PermutedVectorView.like(),1,2
org.apache.mahout.math.PermutedVectorView.like(int),2,4
"org.apache.mahout.math.PermutedVectorView.setQuick(int,double)",6,10
org.apache.mahout.math.PermutedVectorView.getNumNondefaultElements(),4,7
org.apache.mahout.math.PermutedVectorView.getNumNonZeroElements(),9,12
org.apache.mahout.math.PermutedVectorView.getLookupCost(),3,5
org.apache.mahout.math.PermutedVectorView.getIteratorAdvanceCost(),4,7
org.apache.mahout.math.PermutedVectorView.isAddConstantTime(),4,7
org.apache.mahout.math.MurmurHash3.MurmurHash3(),2,2
"org.apache.mahout.math.MurmurHash3.murmurhash3x8632(byte[],int,int,int)",19,40
"org.apache.mahout.math.SparseRowMatrix.SparseRowMatrix(int,int,Vector[])",15,39
"org.apache.mahout.math.SparseRowMatrix.SparseRowMatrix(int,int,boolean)",9,23
"org.apache.mahout.math.SparseRowMatrix.SparseRowMatrix(int,int,Vector[],boolean,boolean)",19,58
"org.apache.mahout.math.SparseRowMatrix.SparseRowMatrix(int,int)",14,25
org.apache.mahout.math.SparseRowMatrix.clone(),7,27
"org.apache.mahout.math.SparseRowMatrix.getQuick(int,int)",4,11
org.apache.mahout.math.SparseRowMatrix.like(),8,11
"org.apache.mahout.math.SparseRowMatrix.like(int,int)",7,11
"org.apache.mahout.math.SparseRowMatrix.setQuick(int,int,double)",6,12
org.apache.mahout.math.SparseRowMatrix.getNumNondefaultElements(),11,27
"org.apache.mahout.math.SparseRowMatrix.viewPart(int[],int[])",10,61
"org.apache.mahout.math.SparseRowMatrix.assignColumn(int,Vector)",12,35
"org.apache.mahout.math.SparseRowMatrix.assignRow(int,Vector)",10,26
org.apache.mahout.math.SparseRowMatrix.viewRow(int),7,16
org.apache.mahout.math.SparseRowMatrix.transpose(),14,25
org.apache.mahout.math.SparseRowMatrix.times(Matrix),26,136
org.apache.mahout.math.SparseRowMatrix.getFlavor(),3,6
org.apache.mahout.classifier.evaluation.Auc.Auc(double),18,28
org.apache.mahout.classifier.evaluation.Auc.Auc(),1,1
"org.apache.mahout.classifier.evaluation.Auc.add(int,double)",61,129
"org.apache.mahout.classifier.evaluation.Auc.add(int,int)",9,17
org.apache.mahout.classifier.evaluation.Auc.auc(),40,77
org.apache.mahout.classifier.evaluation.Auc.confusion(),7,12
org.apache.mahout.classifier.evaluation.Auc.entropy(),34,75
org.apache.mahout.classifier.evaluation.Auc.setMaxBufferSize(int),4,13
org.apache.mahout.classifier.evaluation.Auc.isProbabilityScore(),2,4
org.apache.mahout.classifier.evaluation.Auc.setProbabilityScore(boolean),3,9
"org.apache.mahout.cf.taste.impl.common.FixedRunningAverageAndStdDev.FixedRunningAverageAndStdDev(double,double,int)",6,15
org.apache.mahout.cf.taste.impl.common.FixedRunningAverageAndStdDev.inverse(),6,10
org.apache.mahout.cf.taste.impl.common.FixedRunningAverageAndStdDev.toString(),3,5
org.apache.mahout.cf.taste.impl.common.FixedRunningAverageAndStdDev.getStandardDeviation(),4,4
"org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.ImplicitFeedbackAlternatingLeastSquaresSolver(int,double,double,OpenIntObjectHashMap<Vector>,int)",16,32
org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.solve(Vector),8,14
"org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.solve(Matrix,Matrix)",6,8
org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.confidence(double),3,4
org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.getYtransposeY(OpenIntObjectHashMap<Vector>),49,85
org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.getYtransposeY(OpenIntObjectHashMap<Vector>).$1.run(),7,15
org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.getYtransponseCuMinusIYPlusLambdaI(Vector),38,98
org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.getYtransponseCuPu(Vector),22,36
org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver.columnVectorAsMatrix(Vector),8,15
org.apache.mahout.math.jet.random.engine.MersenneTwister.MersenneTwister(),21,22
org.apache.mahout.math.jet.random.engine.MersenneTwister.MersenneTwister(int),11,16
org.apache.mahout.math.jet.random.engine.MersenneTwister.MersenneTwister(Date),11,13
org.apache.mahout.math.jet.random.engine.MersenneTwister.nextBlock(),9,23
org.apache.mahout.math.jet.random.engine.MersenneTwister.nextInt(),17,32
org.apache.mahout.math.jet.random.engine.MersenneTwister.setSeed(int),29,36
org.apache.mahout.math.jet.random.engine.MersenneTwister.setReferenceSeed(int),33,46
"org.apache.mahout.math.PivotedMatrix.PivotedMatrix(Matrix,int[])",9,14
"org.apache.mahout.math.PivotedMatrix.PivotedMatrix(Matrix,int[],int[])",9,34
org.apache.mahout.math.PivotedMatrix.PivotedMatrix(Matrix),8,15
"org.apache.mahout.math.PivotedMatrix.swap(int,int)",10,16
"org.apache.mahout.math.PivotedMatrix.swapRows(int,int)",10,17
"org.apache.mahout.math.PivotedMatrix.swapColumns(int,int)",11,17
"org.apache.mahout.math.PivotedMatrix.swap(int[],int[],int,int)",9,25
"org.apache.mahout.math.PivotedMatrix.assignColumn(int,Vector)",13,21
"org.apache.mahout.math.PivotedMatrix.assignRow(int,Vector)",13,21
org.apache.mahout.math.PivotedMatrix.viewColumn(int),11,26
org.apache.mahout.math.PivotedMatrix.viewRow(int),11,26
"org.apache.mahout.math.PivotedMatrix.getQuick(int,int)",5,11
org.apache.mahout.math.PivotedMatrix.like(),3,4
org.apache.mahout.math.PivotedMatrix.clone(),8,32
"org.apache.mahout.math.PivotedMatrix.like(int,int)",5,8
"org.apache.mahout.math.PivotedMatrix.setQuick(int,int,double)",7,15
org.apache.mahout.math.PivotedMatrix.getNumNondefaultElements(),4,7
"org.apache.mahout.math.PivotedMatrix.viewPart(int[],int[])",4,8
org.apache.mahout.math.PivotedMatrix.rowUnpivot(int),2,4
org.apache.mahout.math.PivotedMatrix.columnUnpivot(int),2,4
org.apache.mahout.math.PivotedMatrix.getRowPivot(),2,4
org.apache.mahout.math.PivotedMatrix.getInverseRowPivot(),4,5
org.apache.mahout.math.PivotedMatrix.getColumnPivot(),2,4
org.apache.mahout.math.PivotedMatrix.getInverseColumnPivot(),4,5
org.apache.mahout.math.PivotedMatrix.getBase(),2,3
org.apache.mahout.math.PivotedMatrix.identityPivot(int),2,5
org.apache.mahout.math.PivotedMatrix.invert(int[]),3,7
org.apache.mahout.math.function.DoubleFunction.apply(double),6,10
org.apache.mahout.math.function.DoubleFunction.isDensifying(),4,4
org.apache.mahout.text.LuceneStorageConfigurationTest.testSerialization(),16,62
org.apache.mahout.text.LuceneStorageConfigurationTest.testSerializationNotSerialized(),7,8
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.PlusAnonymousUserDataModel(DataModel),10,14
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getDelegate(),3,4
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.setTempPrefs(PreferenceArray),13,26
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.clearTempPrefs(),4,6
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getUserIDs(),10,18
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getPreferencesFromUser(long),9,22
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getItemIDsFromUser(long),10,22
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getItemIDs(),13,14
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getPreferencesForItem(long),22,67
"org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.cloneAndMergeInto(PreferenceArray,long,long,float)",14,97
"org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getPreferenceValue(long,long)",10,30
"org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getPreferenceTime(long,long)",9,20
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getNumItems(),5,7
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getNumUsers(),7,9
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getNumUsersWithPreferenceFor(long),11,28
"org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getNumUsersWithPreferenceFor(long,long)",11,40
"org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.setPreference(long,long,float)",12,25
"org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.removePreference(long,long)",11,23
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.refresh(Collection<Refreshable>),5,7
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.hasPreferenceValues(),3,5
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getMaxPreference(),3,5
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserDataModel.getMinPreference(),3,5
org.apache.mahout.cf.taste.impl.common.SkippingIterator<V>.skip(int),16,24
org.apache.mahout.math.function.VectorFunction.apply(Vector),2,2
"org.apache.mahout.math.random.IndianBuffet<T>.IndianBuffet(double,WordFunction<T>)",9,14
org.apache.mahout.math.random.IndianBuffet<T>.createIntegerDocumentSampler(double),9,14
org.apache.mahout.math.random.IndianBuffet<T>.createTextDocumentSampler(double),10,14
org.apache.mahout.math.random.IndianBuffet<T>.sample(),17,42
org.apache.mahout.math.random.IndianBuffet<T>.WordFunction<T>.convert(int),1,1
org.apache.mahout.math.random.IndianBuffet<T>.IdentityConverter.convert(int),2,2
org.apache.mahout.math.random.IndianBuffet<T>.StringConverter.convert(int),3,4
org.apache.mahout.math.random.IndianBuffet<T>.WordConverter.WordConverter(),19,27
org.apache.mahout.math.random.IndianBuffet<T>.WordConverter.WordConverter().$1.processLine(String),8,10
org.apache.mahout.math.random.IndianBuffet<T>.WordConverter.WordConverter().$1.getResult(),4,4
org.apache.mahout.math.random.IndianBuffet<T>.WordConverter.convert(int),4,5
org.apache.mahout.math.random.IndianBuffet<T>.ImpossibleException.ImpossibleException(Throwable),3,3
org.apache.mahout.math.DiagonalMatrix.DiagonalMatrix(Vector),5,10
org.apache.mahout.math.DiagonalMatrix.DiagonalMatrix(Matrix),4,7
"org.apache.mahout.math.DiagonalMatrix.DiagonalMatrix(double,int)",6,8
org.apache.mahout.math.DiagonalMatrix.DiagonalMatrix(double[]),6,11
org.apache.mahout.math.DiagonalMatrix.identity(int),4,7
"org.apache.mahout.math.DiagonalMatrix.assignColumn(int,Vector)",9,13
"org.apache.mahout.math.DiagonalMatrix.assignRow(int,Vector)",9,13
org.apache.mahout.math.DiagonalMatrix.viewRow(int),5,8
org.apache.mahout.math.DiagonalMatrix.viewColumn(int),6,8
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.SingleElementVector(int),6,8
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.getQuick(int),3,6
"org.apache.mahout.math.DiagonalMatrix.SingleElementVector.set(int,double)",10,18
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterateNonZero(),5,9
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterateNonZero().$1.hasNext(),0,0
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterateNonZero().$1.next(),8,13
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterateNonZero().$1.next().$1.get(),2,2
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterateNonZero().$1.next().$1.index(),1,2
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterateNonZero().$1.next().$1.set(double),4,6
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterateNonZero().$1.remove(),7,8
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterator(),3,13
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterator().$2.$1.get(),2,3
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterator().$2.$1.index(),1,1
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterator().$2.$1.set(double),9,14
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterator().$2.hasNext(),2,2
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterator().$2.next(),8,12
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.iterator().$2.remove(),4,5
"org.apache.mahout.math.DiagonalMatrix.SingleElementVector.matrixLike(int,int)",4,8
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.isDense(),1,1
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.isSequentialAccess(),2,2
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.mergeUpdates(OrderedIntDoubleMapping),6,8
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.like(),3,4
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.like(int),3,5
"org.apache.mahout.math.DiagonalMatrix.SingleElementVector.setQuick(int,double)",11,19
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.getNumNondefaultElements(),3,3
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.getLookupCost(),2,2
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.getIteratorAdvanceCost(),3,3
org.apache.mahout.math.DiagonalMatrix.SingleElementVector.isAddConstantTime(),3,3
org.apache.mahout.math.DiagonalMatrix.viewDiagonal(),3,4
"org.apache.mahout.math.DiagonalMatrix.getQuick(int,int)",4,7
org.apache.mahout.math.DiagonalMatrix.like(),5,8
"org.apache.mahout.math.DiagonalMatrix.like(int,int)",5,8
"org.apache.mahout.math.DiagonalMatrix.setQuick(int,int,double)",11,18
org.apache.mahout.math.DiagonalMatrix.getNumNondefaultElements(),9,9
"org.apache.mahout.math.DiagonalMatrix.viewPart(int[],int[])",4,8
org.apache.mahout.math.DiagonalMatrix.times(Matrix),2,4
org.apache.mahout.math.DiagonalMatrix.timesRight(Matrix),16,31
org.apache.mahout.math.DiagonalMatrix.timesLeft(Matrix),19,34
org.apache.mahout.math.DiagonalMatrix.getFlavor(),3,6
org.apache.mahout.math.VectorBinaryAssignTest.generateData(),24,44
"org.apache.mahout.math.VectorBinaryAssignTest.VectorBinaryAssignTest(DoubleDoubleFunction,VectorBinaryAssign)",6,14
org.apache.mahout.math.VectorBinaryAssignTest.testAll(),16,35
"org.apache.mahout.math.jet.random.Exponential.Exponential(double,Random)",17,37
org.apache.mahout.math.jet.random.Exponential.cdf(double),4,4
org.apache.mahout.math.jet.random.Exponential.nextDouble(),4,4
org.apache.mahout.math.jet.random.Exponential.pdf(double),4,5
org.apache.mahout.math.jet.random.Exponential.setState(double),7,12
org.apache.mahout.math.jet.random.Exponential.toString(),6,8
org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator.reset(),3,4
"org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator.processOneEstimate(float,Preference)",12,17
org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator.computeFinalEvaluation(),3,4
org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator.toString(),6,7
org.apache.mahout.math.function.PlusMult.PlusMult(double),3,5
"org.apache.mahout.math.function.PlusMult.apply(double,double)",2,2
org.apache.mahout.math.function.PlusMult.minusMult(double),4,9
org.apache.mahout.math.function.PlusMult.plusMult(double),3,9
org.apache.mahout.math.function.PlusMult.getMultiplicator(),1,2
org.apache.mahout.math.function.PlusMult.isLikeRightPlus(),1,1
org.apache.mahout.math.function.PlusMult.isLikeLeftMult(),2,2
org.apache.mahout.math.function.PlusMult.isLikeRightMult(),1,1
org.apache.mahout.math.function.PlusMult.isCommutative(),6,6
org.apache.mahout.math.function.PlusMult.isAssociative(),6,11
org.apache.mahout.math.function.PlusMult.setMultiplicator(double),2,5
"org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator.AbstractJDBCIDMigrator(DataSource,String,String)",17,50
"org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator.storeMapping(long,String)",21,42
org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator.toStringID(long),28,58
org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator.initialize(Iterable<String>),7,13
org.apache.mahout.math.function.IntFunction.apply(int),7,12
org.apache.mahout.math.PivotedMatrixTest.matrixFactory(double[][]),20,31
org.apache.mahout.math.PivotedMatrixTest.testSwap(),13,41
"org.apache.mahout.cf.taste.impl.recommender.PreferredItemsNeighborhoodCandidateItemsStrategy.doGetCandidateItems(long[],DataModel,boolean)",22,62
"org.apache.mahout.math.MatrixVectorView.MatrixVectorView(Matrix,int,int,int,int,boolean)",7,21
"org.apache.mahout.math.MatrixVectorView.MatrixVectorView(Matrix,int,int,int,int)",9,56
"org.apache.mahout.math.MatrixVectorView.viewSize(Matrix,int,int,int,int)",11,42
org.apache.mahout.math.MatrixVectorView.isDense(),1,2
org.apache.mahout.math.MatrixVectorView.isSequentialAccess(),2,2
org.apache.mahout.math.MatrixVectorView.iterator(),4,12
org.apache.mahout.math.MatrixVectorView.iterator().$1.hasNext(),1,1
org.apache.mahout.math.MatrixVectorView.iterator().$1.next(),4,5
org.apache.mahout.math.MatrixVectorView.iterator().$1.remove(),6,7
org.apache.mahout.math.MatrixVectorView.iterateNonZero(),8,25
org.apache.mahout.math.MatrixVectorView.iterateNonZero().$2.NonZeroElement.get(),2,2
org.apache.mahout.math.MatrixVectorView.iterateNonZero().$2.NonZeroElement.index(),1,2
org.apache.mahout.math.MatrixVectorView.iterateNonZero().$2.NonZeroElement.set(double),7,9
org.apache.mahout.math.MatrixVectorView.iterateNonZero().$2.hasNext(),8,15
org.apache.mahout.math.MatrixVectorView.iterateNonZero().$2.lookAhead(),5,16
org.apache.mahout.math.MatrixVectorView.iterateNonZero().$2.next(),10,23
org.apache.mahout.math.MatrixVectorView.iterateNonZero().$2.remove(),4,4
org.apache.mahout.math.MatrixVectorView.getQuick(int),6,12
org.apache.mahout.math.MatrixVectorView.like(),5,5
org.apache.mahout.math.MatrixVectorView.like(int),5,6
"org.apache.mahout.math.MatrixVectorView.setQuick(int,double)",8,16
org.apache.mahout.math.MatrixVectorView.getNumNondefaultElements(),4,4
org.apache.mahout.math.MatrixVectorView.getLookupCost(),5,5
org.apache.mahout.math.MatrixVectorView.getIteratorAdvanceCost(),6,6
org.apache.mahout.math.MatrixVectorView.isAddConstantTime(),6,6
"org.apache.mahout.math.MatrixVectorView.matrixLike(int,int)",3,7
org.apache.mahout.math.MatrixVectorView.clone(),7,24
org.apache.mahout.math.MatrixVectorView.mergeUpdates(OrderedIntDoubleMapping),13,25
org.apache.mahout.math.QRDecompositionTest.randomMatrix(),25,42
org.apache.mahout.math.QRDecompositionTest.rank1(),14,26
"org.apache.mahout.math.QRDecompositionTest.rank1().$1.apply(double,double)",4,9
org.apache.mahout.math.QRDecompositionTest.fullRankTall(),20,70
org.apache.mahout.math.QRDecompositionTest.fullRankWide(),20,84
org.apache.mahout.math.QRDecompositionTest.fasterThanBefore(),20,35
org.apache.mahout.math.QRDecompositionTest.fasterThanBefore().$2.decompose(Matrix),3,3
org.apache.mahout.math.QRDecompositionTest.fasterThanBefore().$3.decompose(Matrix),3,3
org.apache.mahout.math.QRDecompositionTest.Decomposer.decompose(Matrix),2,2
"org.apache.mahout.math.QRDecompositionTest.decompositionSpeedCheck(Decomposer,OnlineSummarizer,Matrix,String)",38,91
"org.apache.mahout.math.QRDecompositionTest.assertEquals(Matrix,Matrix,double)",10,16
"org.apache.mahout.math.QRDecompositionTest.printMatrix(String,Matrix)",10,26
org.apache.mahout.math.QRDecompositionTest.matrix(),3,5
"org.apache.mahout.math.QRDecompositionTest.reshape(double[],int,int)",7,14
org.apache.mahout.math.QRDecompositionTest.b(),2,2
org.apache.mahout.math.jet.random.NormalTest.testCdf(),17,31
org.apache.mahout.math.jet.random.NormalTest.consistency(),16,36
org.apache.mahout.math.jet.random.NormalTest.testSetState(),11,17
org.apache.mahout.math.jet.random.NormalTest.testToString(),10,12
"org.apache.mahout.math.set.AbstractSet.chooseGrowCapacity(int,double,double)",19,36
"org.apache.mahout.math.set.AbstractSet.chooseHighWaterMark(int,double)",16,26
"org.apache.mahout.math.set.AbstractSet.chooseLowWaterMark(int,double)",12,22
"org.apache.mahout.math.set.AbstractSet.chooseMeanCapacity(int,double,double)",22,39
"org.apache.mahout.math.set.AbstractSet.chooseShrinkCapacity(int,double,double)",19,36
org.apache.mahout.math.set.AbstractSet.clear(),5,5
org.apache.mahout.math.set.AbstractSet.ensureCapacity(int),30,42
org.apache.mahout.math.set.AbstractSet.isEmpty(),8,13
org.apache.mahout.math.set.AbstractSet.nextPrime(int),10,31
"org.apache.mahout.math.set.AbstractSet.setUp(int,double,double)",20,126
org.apache.mahout.math.set.AbstractSet.size(),8,13
org.apache.mahout.math.set.AbstractSet.trimToSize(),18,20
"org.apache.mahout.math.set.AbstractSet.equalsMindTheNull(Object,Object)",3,5
"org.apache.mahout.math.decomposer.lanczos.LanczosState.LanczosState(VectorIterable,int,Vector)",22,40
org.apache.mahout.math.decomposer.lanczos.LanczosState.intitializeBasisAndSingularVectors(),7,13
org.apache.mahout.math.decomposer.lanczos.LanczosState.getDiagonalMatrix(),2,5
org.apache.mahout.math.decomposer.lanczos.LanczosState.getIterationNumber(),1,2
org.apache.mahout.math.decomposer.lanczos.LanczosState.getScaleFactor(),2,4
org.apache.mahout.math.decomposer.lanczos.LanczosState.getCorpus(),3,4
org.apache.mahout.math.decomposer.lanczos.LanczosState.getRightSingularVector(int),3,5
org.apache.mahout.math.decomposer.lanczos.LanczosState.getSingularValue(int),3,4
org.apache.mahout.math.decomposer.lanczos.LanczosState.getBasisVector(int),2,4
org.apache.mahout.math.decomposer.lanczos.LanczosState.getBasisSize(),2,4
"org.apache.mahout.math.decomposer.lanczos.LanczosState.setBasisVector(int,Vector)",3,9
org.apache.mahout.math.decomposer.lanczos.LanczosState.setScaleFactor(double),3,7
org.apache.mahout.math.decomposer.lanczos.LanczosState.setIterationNumber(int),2,3
"org.apache.mahout.math.decomposer.lanczos.LanczosState.setRightSingularVector(int,Vector)",4,8
"org.apache.mahout.math.decomposer.lanczos.LanczosState.setSingularValue(int,double)",4,7
org.apache.mahout.math.FileBasedSparseBinaryMatrixTest.testSetData(),34,78
org.apache.mahout.math.TestSingularValueDecomposition.testMoreRows(),15,47
org.apache.mahout.math.TestSingularValueDecomposition.testMoreColumns(),15,47
org.apache.mahout.math.TestSingularValueDecomposition.testDimensions(),13,46
org.apache.mahout.math.TestSingularValueDecomposition.testHadamard(),15,54
org.apache.mahout.math.TestSingularValueDecomposition.testAEqualUSVt(),7,21
org.apache.mahout.math.TestSingularValueDecomposition.checkAEqualUSVt(Matrix),23,66
org.apache.mahout.math.TestSingularValueDecomposition.testUOrthogonal(),10,30
org.apache.mahout.math.TestSingularValueDecomposition.testVOrthogonal(),10,30
org.apache.mahout.math.TestSingularValueDecomposition.checkOrthogonal(Matrix),14,22
org.apache.mahout.math.TestSingularValueDecomposition.testMatricesValues1(),18,56
org.apache.mahout.math.TestSingularValueDecomposition.testConditionNumber(),12,17
org.apache.mahout.math.TestSingularValueDecomposition.testSvdHang(),25,44
org.apache.mahout.math.TestSingularValueDecomposition.readTsv(String),28,55
"org.apache.mahout.math.TestSingularValueDecomposition.createTestMatrix(Random,int,int,double[])",11,29
"org.apache.mahout.math.TestSingularValueDecomposition.createOrthogonalMatrix(Random,int)",21,58
"org.apache.mahout.math.TestSingularValueDecomposition.createDiagonalMatrix(double[],int,int)",9,19
org.apache.mahout.math.UpperTriangularTest.testBasics(),20,54
org.apache.mahout.math.UpperTriangularTest.print(Matrix),9,16
"org.apache.mahout.cf.taste.impl.eval.StatsCallable.StatsCallable(Callable<Void>,boolean,RunningAverageAndStdDev,AtomicInteger)",13,27
org.apache.mahout.cf.taste.impl.eval.StatsCallable.call(),25,56
org.apache.mahout.math.jet.random.AbstractDiscreteDistribution.AbstractDiscreteDistribution(),5,5
org.apache.mahout.math.jet.random.AbstractDiscreteDistribution.nextDouble(),0,0
org.apache.mahout.cf.taste.impl.similarity.precompute.FileSimilarItemsWriter.FileSimilarItemsWriter(File),4,8
org.apache.mahout.cf.taste.impl.similarity.precompute.FileSimilarItemsWriter.open(),8,13
org.apache.mahout.cf.taste.impl.similarity.precompute.FileSimilarItemsWriter.add(SimilarItems),11,44
org.apache.mahout.cf.taste.impl.similarity.precompute.FileSimilarItemsWriter.close(),4,5
org.apache.mahout.math.MatrixTest.setUp(),6,7
org.apache.mahout.math.MatrixTest.matrixFactory(double[][]),3,4
org.apache.mahout.math.MatrixTest.testCardinality(),9,18
org.apache.mahout.math.MatrixTest.testCopy(),13,34
org.apache.mahout.math.MatrixTest.testClone(),13,32
org.apache.mahout.math.MatrixTest.testIterate(),14,28
org.apache.mahout.math.MatrixTest.testGetQuick(),10,26
org.apache.mahout.math.MatrixTest.testLike(),9,19
org.apache.mahout.math.MatrixTest.testLikeIntInt(),9,13
org.apache.mahout.math.MatrixTest.testSetQuick(),10,29
org.apache.mahout.math.MatrixTest.testSize(),10,18
org.apache.mahout.math.MatrixTest.testViewPart(),12,41
org.apache.mahout.math.MatrixTest.testViewPartCardinality(),5,9
org.apache.mahout.math.MatrixTest.testViewPartIndexOver(),5,9
org.apache.mahout.math.MatrixTest.testViewPartIndexUnder(),5,9
org.apache.mahout.math.MatrixTest.testAssignDouble(),10,25
org.apache.mahout.math.MatrixTest.testAssignDoubleArrayArray(),11,27
org.apache.mahout.math.MatrixTest.testAssignDoubleArrayArrayCardinality(),7,13
org.apache.mahout.math.MatrixTest.testMatrixViewBug(),10,15
org.apache.mahout.math.MatrixTest.testAssignMatrixBinaryFunction(),16,34
org.apache.mahout.math.MatrixTest.testAssignMatrixBinaryFunctionCardinality(),9,12
org.apache.mahout.math.MatrixTest.testAssignMatrix(),11,34
org.apache.mahout.math.MatrixTest.testAssignMatrixCardinality(),5,8
org.apache.mahout.math.MatrixTest.testAssignUnaryFunction(),15,32
org.apache.mahout.math.MatrixTest.testRowView(),11,62
org.apache.mahout.math.MatrixTest.testColumnView(),12,62
org.apache.mahout.math.MatrixTest.testAggregateRows(),12,19
org.apache.mahout.math.MatrixTest.testAggregateRows().$1.apply(Vector),3,3
org.apache.mahout.math.MatrixTest.testAggregateCols(),13,19
org.apache.mahout.math.MatrixTest.testAggregateCols().$2.apply(Vector),3,3
org.apache.mahout.math.MatrixTest.testAggregate(),13,19
org.apache.mahout.math.MatrixTest.testAggregate().$3.apply(Vector),3,3
org.apache.mahout.math.MatrixTest.testDivide(),12,30
org.apache.mahout.math.MatrixTest.testGet(),9,24
org.apache.mahout.math.MatrixTest.testGetIndexUnder(),6,17
org.apache.mahout.math.MatrixTest.testGetIndexOver(),6,17
org.apache.mahout.math.MatrixTest.testMinus(),11,28
org.apache.mahout.math.MatrixTest.testMinusCardinality(),4,7
org.apache.mahout.math.MatrixTest.testPlusDouble(),12,30
org.apache.mahout.math.MatrixTest.testPlusMatrix(),12,32
org.apache.mahout.math.MatrixTest.testPlusMatrixCardinality(),5,8
org.apache.mahout.math.MatrixTest.testSetUnder(),6,18
org.apache.mahout.math.MatrixTest.testSetOver(),6,18
org.apache.mahout.math.MatrixTest.testTimesDouble(),12,30
org.apache.mahout.math.MatrixTest.testTimesMatrix(),25,65
org.apache.mahout.math.MatrixTest.testTimesVector(),10,39
org.apache.mahout.math.MatrixTest.testTimesSquaredTimesVector(),10,30
org.apache.mahout.math.MatrixTest.testTimesMatrixCardinality(),4,8
org.apache.mahout.math.MatrixTest.testTranspose(),13,47
org.apache.mahout.math.MatrixTest.testZSum(),5,9
org.apache.mahout.math.MatrixTest.testAssignRow(),9,20
org.apache.mahout.math.MatrixTest.testAssignRowCardinality(),7,11
org.apache.mahout.math.MatrixTest.testAssignColumn(),9,25
org.apache.mahout.math.MatrixTest.testAssignColumnCardinality(),7,11
org.apache.mahout.math.MatrixTest.testViewRow(),19,45
org.apache.mahout.math.MatrixTest.testViewRowIndexUnder(),4,7
org.apache.mahout.math.MatrixTest.testViewRowIndexOver(),4,7
org.apache.mahout.math.MatrixTest.testViewColumn(),10,15
org.apache.mahout.math.MatrixTest.testViewColumnIndexUnder(),4,7
org.apache.mahout.math.MatrixTest.testViewColumnIndexOver(),4,7
org.apache.mahout.math.MatrixTest.testDeterminant(),6,9
org.apache.mahout.math.MatrixTest.testLabelBindings(),23,91
org.apache.mahout.math.MatrixTest.testSettingLabelBindings(),17,50
org.apache.mahout.math.MatrixTest.testLabelBindingSerialization(),23,77
"org.apache.mahout.math.VectorBinaryAssignCostTest.createStubs(Vector,Vector)",24,65
org.apache.mahout.math.VectorBinaryAssignCostTest.setUpStubs(),7,17
org.apache.mahout.math.VectorBinaryAssignCostTest.denseInteractions(),21,90
org.apache.mahout.math.VectorBinaryAssignCostTest.sasvInteractions(),20,93
org.apache.mahout.math.VectorBinaryAssignCostTest.rasvInteractions(),21,90
org.apache.mahout.math.VectorBinaryAssignCostTest.sasvDenseInteractions(),21,92
org.apache.mahout.math.VectorBinaryAssignCostTest.denseSasvInteractions(),23,94
org.apache.mahout.math.VectorBinaryAssignCostTest.denseRasvInteractions(),22,91
org.apache.mahout.math.VectorBinaryAssignCostTest.rasvDenseInteractions(),22,91
org.apache.mahout.math.VectorBinaryAssignCostTest.sasvRasvInteractions(),22,92
org.apache.mahout.math.VectorBinaryAssignCostTest.rasvSasvInteractions(),21,92
org.apache.mahout.math.VectorBinaryAssignCostTest.replayAll(),4,5
org.apache.mahout.classifier.df.data.Instance.Instance(Vector),3,5
org.apache.mahout.classifier.df.data.Instance.get(int),9,14
"org.apache.mahout.classifier.df.data.Instance.set(int,double)",5,14
org.apache.mahout.classifier.df.data.Instance.equals(Object),5,15
org.apache.mahout.classifier.df.data.Instance.hashCode(),3,5
org.apache.mahout.cf.taste.impl.recommender.svd.Factorizer.factorize(),4,4
"org.apache.mahout.math.random.WeightedThing<T>.WeightedThing(T,double)",5,7
org.apache.mahout.math.random.WeightedThing<T>.WeightedThing(double),3,5
org.apache.mahout.math.random.WeightedThing<T>.getValue(),1,2
org.apache.mahout.math.random.WeightedThing<T>.getWeight(),1,2
org.apache.mahout.math.random.WeightedThing<T>.setWeight(double),2,5
org.apache.mahout.math.random.WeightedThing<T>.compareTo(WeightedThing<T>),3,5
org.apache.mahout.math.random.WeightedThing<T>.equals(Object),8,13
org.apache.mahout.math.random.WeightedThing<T>.hashCode(),6,9
org.apache.mahout.math.TestVectorView.testCardinality(),4,6
org.apache.mahout.math.TestVectorView.testCopy(),8,14
org.apache.mahout.math.TestVectorView.testGet(),7,9
org.apache.mahout.math.TestVectorView.testGetOver(),2,4
org.apache.mahout.math.TestVectorView.testIterator(),15,56
"org.apache.mahout.math.TestVectorView.checkIterator(Iterator<Vector.Element>,double[])",11,21
org.apache.mahout.math.TestVectorView.testGetUnder(),1,2
org.apache.mahout.math.TestVectorView.testSet(),8,13
org.apache.mahout.math.TestVectorView.testSize(),7,9
org.apache.mahout.math.TestVectorView.testViewPart(),12,16
org.apache.mahout.math.TestVectorView.testViewPartUnder(),3,5
org.apache.mahout.math.TestVectorView.testViewPartOver(),3,5
org.apache.mahout.math.TestVectorView.testViewPartCardinality(),5,7
org.apache.mahout.math.TestVectorView.testDot(),6,11
org.apache.mahout.math.TestVectorView.testDotCardinality(),6,9
org.apache.mahout.math.TestVectorView.testNormalize(),14,19
org.apache.mahout.math.TestVectorView.testMinus(),8,17
org.apache.mahout.math.TestVectorView.testPlusDouble(),10,18
org.apache.mahout.math.TestVectorView.testPlusVector(),10,20
org.apache.mahout.math.TestVectorView.testPlusVectorCardinality(),6,10
org.apache.mahout.math.TestVectorView.testTimesDouble(),10,18
org.apache.mahout.math.TestVectorView.testDivideDouble(),10,18
org.apache.mahout.math.TestVectorView.testTimesVector(),10,22
org.apache.mahout.math.TestVectorView.testTimesVectorCardinality(),6,10
org.apache.mahout.math.TestVectorView.testZSum(),9,15
org.apache.mahout.math.TestVectorView.testAssignDouble(),7,11
org.apache.mahout.math.TestVectorView.testAssignDoubleArray(),9,17
org.apache.mahout.math.TestVectorView.testAssignDoubleArrayCardinality(),5,10
org.apache.mahout.math.TestVectorView.testAssignVector(),10,18
org.apache.mahout.math.TestVectorView.testAssignVectorCardinality(),6,11
org.apache.mahout.math.TestVectorView.testAssignUnaryFunction(),12,16
org.apache.mahout.math.TestVectorView.testAssignBinaryFunction(),13,18
org.apache.mahout.math.TestVectorView.testAssignBinaryFunction2(),13,17
org.apache.mahout.math.TestVectorView.testAssignBinaryFunction3(),12,17
org.apache.mahout.math.TestVectorView.testLike(),3,4
org.apache.mahout.math.TestVectorView.testCrossProduct(),12,51
org.apache.mahout.math.set.HashUtils.HashUtils(),2,2
org.apache.mahout.math.set.HashUtils.hash(byte),1,1
org.apache.mahout.math.set.HashUtils.hash(short),1,1
org.apache.mahout.math.set.HashUtils.hash(char),1,1
org.apache.mahout.math.set.HashUtils.hash(int),1,1
org.apache.mahout.math.set.HashUtils.hash(float),3,4
org.apache.mahout.math.set.HashUtils.hash(double),2,3
org.apache.mahout.math.set.HashUtils.hash(long),1,1
org.apache.mahout.math.TestMatrixView.setUp(),9,13
org.apache.mahout.math.TestMatrixView.testCardinality(),9,18
org.apache.mahout.math.TestMatrixView.testCopy(),14,35
org.apache.mahout.math.TestMatrixView.testGetQuick(),10,26
org.apache.mahout.math.TestMatrixView.testLike(),10,20
org.apache.mahout.math.TestMatrixView.testLikeIntInt(),10,14
org.apache.mahout.math.TestMatrixView.testSetQuick(),10,29
org.apache.mahout.math.TestMatrixView.testSize(),8,18
org.apache.mahout.math.TestMatrixView.testViewPart(),13,34
org.apache.mahout.math.TestMatrixView.testViewPartCardinality(),5,9
org.apache.mahout.math.TestMatrixView.testViewPartIndexOver(),5,9
org.apache.mahout.math.TestMatrixView.testViewPartIndexUnder(),5,9
org.apache.mahout.math.TestMatrixView.testAssignDouble(),10,25
org.apache.mahout.math.TestMatrixView.testAssignDoubleArrayArray(),11,27
org.apache.mahout.math.TestMatrixView.testAssignDoubleArrayArrayCardinality(),7,13
org.apache.mahout.math.TestMatrixView.testAssignMatrixBinaryFunction(),16,34
org.apache.mahout.math.TestMatrixView.testAssignMatrixBinaryFunctionCardinality(),9,12
org.apache.mahout.math.TestMatrixView.testAssignMatrix(),11,34
org.apache.mahout.math.TestMatrixView.testAssignMatrixCardinality(),5,8
org.apache.mahout.math.TestMatrixView.testAssignUnaryFunction(),15,32
org.apache.mahout.math.TestMatrixView.testDivide(),12,30
org.apache.mahout.math.TestMatrixView.testGet(),9,24
org.apache.mahout.math.TestMatrixView.testGetIndexUnder(),6,17
org.apache.mahout.math.TestMatrixView.testGetIndexOver(),6,17
org.apache.mahout.math.TestMatrixView.testMinus(),11,28
org.apache.mahout.math.TestMatrixView.testMinusCardinality(),4,7
org.apache.mahout.math.TestMatrixView.testPlusDouble(),12,30
org.apache.mahout.math.TestMatrixView.testPlusMatrix(),12,32
org.apache.mahout.math.TestMatrixView.testPlusMatrixCardinality(),5,8
org.apache.mahout.math.TestMatrixView.testSetUnder(),6,18
org.apache.mahout.math.TestMatrixView.testSetOver(),6,18
org.apache.mahout.math.TestMatrixView.testTimesDouble(),12,30
org.apache.mahout.math.TestMatrixView.testTimesMatrix(),15,32
org.apache.mahout.math.TestMatrixView.testTimesMatrixCardinality(),4,8
org.apache.mahout.math.TestMatrixView.testTranspose(),13,47
org.apache.mahout.math.TestMatrixView.testZSum(),5,9
org.apache.mahout.math.TestMatrixView.testAssignRow(),9,20
org.apache.mahout.math.TestMatrixView.testAssignRowCardinality(),7,11
org.apache.mahout.math.TestMatrixView.testAssignColumn(),9,25
org.apache.mahout.math.TestMatrixView.testAssignColumnCardinality(),7,11
org.apache.mahout.math.TestMatrixView.testViewRow(),9,15
org.apache.mahout.math.TestMatrixView.testViewRowIndexUnder(),4,7
org.apache.mahout.math.TestMatrixView.testViewRowIndexOver(),4,7
org.apache.mahout.math.TestMatrixView.testViewColumn(),10,17
org.apache.mahout.math.TestMatrixView.testViewColumnIndexUnder(),4,7
org.apache.mahout.math.TestMatrixView.testViewColumnIndexOver(),4,7
org.apache.mahout.math.TestMatrixView.testLabelBindings(),19,93
org.apache.mahout.math.TestMatrixView.testSettingLabelBindings(),15,57
org.apache.mahout.math.TestMatrixView.testLabelBindingSerialization(),21,80
org.apache.mahout.math.jet.random.DistributionChecks.DistributionChecks(),2,2
"org.apache.mahout.math.jet.random.DistributionChecks.checkDistribution(AbstractContinousDistribution,double[],double,double,int)",58,100
"org.apache.mahout.math.jet.random.DistributionChecks.checkDistribution(AbstractContinousDistribution,double[],double,double,int).$1.value(double)",3,3
"org.apache.mahout.math.jet.random.DistributionChecks.checkCdf(double,double,AbstractContinousDistribution,double[],double[])",12,20
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity.PearsonCorrelationSimilarity(DataModel),14,21
"org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity.PearsonCorrelationSimilarity(DataModel,Weighting)",16,34
"org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity.computeResult(int,double,double,double,double)",18,31
org.apache.mahout.common.RandomUtilsTest.testHashDouble(),8,30
org.apache.mahout.common.RandomUtilsTest.testHashFloat(),8,30
org.apache.mahout.common.RandomUtilsTest.testNextTwinPrime(),12,67
org.apache.mahout.common.RandomUtilsTest.testSetSeed(),9,38
"org.apache.mahout.cf.taste.impl.recommender.AllUnknownItemsCandidateItemsStrategy.doGetCandidateItems(long[],DataModel,boolean)",16,40
org.apache.mahout.cf.taste.impl.recommender.ByValueRecommendedItemComparator.getInstance(),4,5
"org.apache.mahout.cf.taste.impl.recommender.ByValueRecommendedItemComparator.compare(RecommendedItem,RecommendedItem)",4,13
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.GenericUserBasedRecommender(DataModel,UserNeighborhood,UserSimilarity)",19,50
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.GenericUserBasedRecommender(DataModel,UserNeighborhood,UserSimilarity).$1.call()",3,4
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.getSimilarity(),2,4
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.recommend(long,int,IDRescorer,boolean)",26,65
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.estimatePreference(long,long)",12,32
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.mostSimilarUserIDs(long,int)",4,8
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.mostSimilarUserIDs(long,int,Rescorer<LongPair>)",11,20
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.doMostSimilarUsers(int,TopItems.Estimator<Long>)",10,20
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.doEstimatePreference(long,long[],long)",38,91
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.getAllOtherItems(long[],long,boolean)",13,39
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.refresh(Collection<Refreshable>),5,8
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.toString(),6,8
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.buildCapper(),8,24
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.MostSimilarEstimator.MostSimilarEstimator(long,UserSimilarity,Rescorer<LongPair>)",6,15
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.MostSimilarEstimator.estimate(Long),13,37
"org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.Estimator.Estimator(long,long[])",3,7
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender.Estimator.estimate(Long),7,9
org.apache.mahout.math.TestDenseVector.generateTestVector(int),5,8
org.apache.mahout.math.TestDenseVector.testSize(),7,9
org.apache.mahout.math.TestDenseVector.vectorToTest(int),7,13
org.apache.mahout.math.TestDenseVector.testToString(),2,4
org.apache.mahout.classifier.sgd.L2.L2(double),1,4
org.apache.mahout.classifier.sgd.L2.L2(),0,0
"org.apache.mahout.classifier.sgd.L2.age(double,double,double)",7,11
org.apache.mahout.classifier.sgd.L2.logP(double),4,8
org.apache.mahout.classifier.sgd.L2.write(DataOutput),4,6
org.apache.mahout.classifier.sgd.L2.readFields(DataInput),5,7
org.apache.mahout.math.Vector.asFormatString(),5,7
org.apache.mahout.math.Vector.assign(double),7,12
org.apache.mahout.math.Vector.assign(double[]),9,14
org.apache.mahout.math.Vector.assign(Vector),9,14
org.apache.mahout.math.Vector.assign(DoubleFunction),8,14
"org.apache.mahout.math.Vector.assign(Vector,DoubleDoubleFunction)",15,26
"org.apache.mahout.math.Vector.assign(DoubleDoubleFunction,double)",12,20
org.apache.mahout.math.Vector.size(),5,5
org.apache.mahout.math.Vector.isDense(),7,8
org.apache.mahout.math.Vector.isSequentialAccess(),14,16
org.apache.mahout.math.Vector.clone(),2,2
org.apache.mahout.math.Vector.all(),2,2
org.apache.mahout.math.Vector.nonZeroes(),3,3
org.apache.mahout.math.Vector.getElement(int),11,22
org.apache.mahout.math.Vector.mergeUpdates(OrderedIntDoubleMapping),12,16
org.apache.mahout.math.Vector.Element.get(),3,3
org.apache.mahout.math.Vector.Element.index(),3,4
org.apache.mahout.math.Vector.Element.set(double),5,8
org.apache.mahout.math.Vector.divide(double),9,11
org.apache.mahout.math.Vector.dot(Vector),9,12
org.apache.mahout.math.Vector.get(int),5,11
org.apache.mahout.math.Vector.getQuick(int),6,10
org.apache.mahout.math.Vector.like(),4,6
org.apache.mahout.math.Vector.like(int),6,9
org.apache.mahout.math.Vector.minus(Vector),11,16
org.apache.mahout.math.Vector.normalize(),7,9
org.apache.mahout.math.Vector.normalize(double),28,45
org.apache.mahout.math.Vector.logNormalize(),8,11
org.apache.mahout.math.Vector.logNormalize(double),13,20
org.apache.mahout.math.Vector.norm(double),24,32
org.apache.mahout.math.Vector.minValue(),4,5
org.apache.mahout.math.Vector.minValueIndex(),4,6
org.apache.mahout.math.Vector.maxValue(),4,5
org.apache.mahout.math.Vector.maxValueIndex(),4,6
org.apache.mahout.math.Vector.plus(double),8,10
org.apache.mahout.math.Vector.plus(Vector),11,16
"org.apache.mahout.math.Vector.set(int,double)",7,18
"org.apache.mahout.math.Vector.setQuick(int,double)",8,17
"org.apache.mahout.math.Vector.incrementQuick(int,double)",7,19
org.apache.mahout.math.Vector.getNumNondefaultElements(),10,11
org.apache.mahout.math.Vector.getNumNonZeroElements(),4,6
org.apache.mahout.math.Vector.times(double),8,11
org.apache.mahout.math.Vector.times(Vector),12,17
"org.apache.mahout.math.Vector.viewPart(int,int)",16,31
org.apache.mahout.math.Vector.zSum(),3,4
org.apache.mahout.math.Vector.cross(Vector),6,10
"org.apache.mahout.math.Vector.aggregate(DoubleDoubleFunction,DoubleFunction)",29,45
"org.apache.mahout.math.Vector.aggregate(Vector,DoubleDoubleFunction,DoubleDoubleFunction)",35,48
org.apache.mahout.math.Vector.getLengthSquared(),9,11
org.apache.mahout.math.Vector.getDistanceSquared(Vector),4,7
org.apache.mahout.math.Vector.getLookupCost(),8,10
org.apache.mahout.math.Vector.getIteratorAdvanceCost(),9,12
org.apache.mahout.math.Vector.isAddConstantTime(),9,11
org.apache.mahout.math.solver.ConjugateGradientSolver.ConjugateGradientSolver(),7,7
"org.apache.mahout.math.solver.ConjugateGradientSolver.solve(VectorIterable,Vector)",36,46
"org.apache.mahout.math.solver.ConjugateGradientSolver.solve(VectorIterable,Vector,Preconditioner)",41,57
"org.apache.mahout.math.solver.ConjugateGradientSolver.solve(VectorIterable,Vector,Preconditioner,int,double)",50,224
org.apache.mahout.math.solver.ConjugateGradientSolver.getIterations(),5,9
org.apache.mahout.math.solver.ConjugateGradientSolver.getResidualNorm(),22,28
org.apache.mahout.cf.taste.impl.similarity.file.FileItemItemSimilarityIterable.FileItemItemSimilarityIterable(File),5,12
org.apache.mahout.cf.taste.impl.similarity.file.FileItemItemSimilarityIterable.iterator(),11,24
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.VectorOrPrefWritable(),3,3
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.VectorOrPrefWritable(Vector),3,7
"org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.VectorOrPrefWritable(long,float)",5,9
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.getVector(),1,3
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.getUserID(),1,2
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.getValue(),1,2
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.set(Vector),5,9
"org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.set(long,float)",4,8
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.write(DataOutput),15,24
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.readFields(DataInput),13,28
org.apache.mahout.cf.taste.hadoop.item.VectorOrPrefWritable.toString(),4,7
org.apache.mahout.clustering.RunningSumsGaussianAccumulator.getN(),0,0
org.apache.mahout.clustering.RunningSumsGaussianAccumulator.getMean(),2,3
org.apache.mahout.clustering.RunningSumsGaussianAccumulator.getStd(),2,3
org.apache.mahout.clustering.RunningSumsGaussianAccumulator.getAverageStd(),4,6
org.apache.mahout.clustering.RunningSumsGaussianAccumulator.getVariance(),4,5
"org.apache.mahout.clustering.RunningSumsGaussianAccumulator.observe(Vector,double)",8,20
org.apache.mahout.clustering.RunningSumsGaussianAccumulator.compute(),10,12
org.apache.mahout.math.ssvd.SequentialBigSvdTest.testSingularValues(),18,38
org.apache.mahout.math.ssvd.SequentialBigSvdTest.testLeftVectors(),24,46
"org.apache.mahout.math.ssvd.SequentialBigSvdTest.assertEquals(Matrix,Matrix)",7,10
"org.apache.mahout.math.ssvd.SequentialBigSvdTest.assertEquals(Vector,Vector)",7,10
org.apache.mahout.math.ssvd.SequentialBigSvdTest.testRightVectors(),15,29
org.apache.mahout.math.ssvd.SequentialBigSvdTest.lowRankMatrix(),8,18
org.apache.mahout.cf.taste.common.Refreshable.refresh(Collection<Refreshable>),34,45
"org.apache.mahout.math.decomposer.SingularVectorVerifier.verify(VectorIterable,Vector)",6,9
"org.apache.mahout.cf.taste.eval.RecommenderIRStatsEvaluator.evaluate(RecommenderBuilder,DataModelBuilder,DataModel,IDRescorer,int,double,double)",41,90
org.apache.mahout.cf.taste.model.Preference.getUserID(),3,4
org.apache.mahout.cf.taste.model.Preference.getItemID(),2,3
org.apache.mahout.cf.taste.model.Preference.getValue(),10,15
org.apache.mahout.cf.taste.model.Preference.setValue(float),7,10
"org.apache.mahout.classifier.df.split.OptIgSplit.computeSplit(Data,int)",7,18
"org.apache.mahout.classifier.df.split.OptIgSplit.categoricalSplit(Data,int)",25,74
"org.apache.mahout.classifier.df.split.OptIgSplit.computeFrequencies(Data,int,double[],int[][],int[])",16,48
"org.apache.mahout.classifier.df.split.OptIgSplit.numericalSplit(Data,int)",34,117
org.apache.mahout.classifier.df.split.OptIgSplit.chooseNumericSplitPoints(double[]),23,66
org.apache.mahout.classifier.df.split.OptIgSplit.chooseCategoricalSplitPoints(double[]),23,40
"org.apache.mahout.classifier.df.split.OptIgSplit.entropy(int[],int)",12,31
org.apache.mahout.math.random.MultiNormalTest.setUp(),5,5
org.apache.mahout.math.random.MultiNormalTest.testDiagonal(),14,45
org.apache.mahout.math.random.MultiNormalTest.testRadius(),16,21
"org.apache.mahout.math.jet.random.Poisson.Poisson(double,Random)",8,17
"org.apache.mahout.math.jet.random.Poisson.f(int,double,double)",5,5
org.apache.mahout.math.jet.random.Poisson.nextInt(),1,1
org.apache.mahout.math.jet.random.Poisson.nextInt(double),96,247
"org.apache.mahout.math.SparseColumnMatrix.SparseColumnMatrix(int,int,Vector[])",14,28
"org.apache.mahout.math.SparseColumnMatrix.SparseColumnMatrix(int,int,Vector[],boolean)",11,33
"org.apache.mahout.math.SparseColumnMatrix.SparseColumnMatrix(int,int)",15,38
org.apache.mahout.math.SparseColumnMatrix.clone(),7,27
org.apache.mahout.math.SparseColumnMatrix.numSlices(),3,4
"org.apache.mahout.math.SparseColumnMatrix.getQuick(int,int)",4,11
org.apache.mahout.math.SparseColumnMatrix.like(),5,8
"org.apache.mahout.math.SparseColumnMatrix.like(int,int)",5,8
"org.apache.mahout.math.SparseColumnMatrix.setQuick(int,int,double)",11,24
org.apache.mahout.math.SparseColumnMatrix.getNumNondefaultElements(),12,27
"org.apache.mahout.math.SparseColumnMatrix.viewPart(int[],int[])",11,61
"org.apache.mahout.math.SparseColumnMatrix.assignColumn(int,Vector)",10,26
"org.apache.mahout.math.SparseColumnMatrix.assignRow(int,Vector)",13,35
org.apache.mahout.math.SparseColumnMatrix.viewColumn(int),7,16
org.apache.mahout.math.SparseColumnMatrix.transpose(),16,26
org.apache.mahout.math.SparseColumnMatrix.toString(),17,64
org.apache.mahout.math.CholeskyDecompositionTest.rank1(),18,37
"org.apache.mahout.math.CholeskyDecompositionTest.rank1().$1.apply(double,double)",4,9
org.apache.mahout.math.CholeskyDecompositionTest.test1(),33,79
org.apache.mahout.math.CholeskyDecompositionTest.test1().$2.apply(double),3,3
org.apache.mahout.math.CholeskyDecompositionTest.test2(),23,45
org.apache.mahout.math.CholeskyDecompositionTest.testRankDeficient(),21,54
org.apache.mahout.math.CholeskyDecompositionTest.rank4Matrix(),11,25
org.apache.mahout.math.CholeskyDecompositionTest.rank4Matrix().$3.apply(double),3,3
org.apache.mahout.math.CholeskyDecompositionTest.rank4Matrix().$4.apply(double),3,3
"org.apache.mahout.cf.taste.similarity.precompute.SimilarItem.$1.compare(SimilarItem,SimilarItem)",5,9
"org.apache.mahout.cf.taste.similarity.precompute.SimilarItem.SimilarItem(long,double)",4,7
"org.apache.mahout.cf.taste.similarity.precompute.SimilarItem.set(long,double)",3,7
org.apache.mahout.cf.taste.similarity.precompute.SimilarItem.getItemID(),1,2
org.apache.mahout.cf.taste.similarity.precompute.SimilarItem.getSimilarity(),1,2
org.apache.mahout.math.TestDenseMatrix.matrixFactory(double[][]),4,7
"org.apache.mahout.math.random.Empirical.Empirical(boolean,boolean,int,double)",58,148
org.apache.mahout.math.random.Empirical.sample(),2,3
org.apache.mahout.math.random.Empirical.sample(double),17,22
org.apache.mahout.classifier.AbstractVectorClassifier.numCategories(),2,2
org.apache.mahout.classifier.AbstractVectorClassifier.classify(Vector),29,55
org.apache.mahout.classifier.AbstractVectorClassifier.classifyNoLink(Vector),34,54
org.apache.mahout.classifier.AbstractVectorClassifier.classifyScalar(Vector),19,28
org.apache.mahout.classifier.AbstractVectorClassifier.classifyFull(Vector),45,110
"org.apache.mahout.classifier.AbstractVectorClassifier.classifyFull(Vector,Vector)",55,125
org.apache.mahout.classifier.AbstractVectorClassifier.classify(Matrix),24,58
org.apache.mahout.classifier.AbstractVectorClassifier.classifyFull(Matrix),19,49
org.apache.mahout.classifier.AbstractVectorClassifier.classifyScalar(Matrix),31,61
"org.apache.mahout.classifier.AbstractVectorClassifier.logLikelihood(int,Vector)",38,78
org.apache.mahout.classifier.ClassifierResult.ClassifierResult(),2,2
"org.apache.mahout.classifier.ClassifierResult.ClassifierResult(String,double)",5,9
org.apache.mahout.classifier.ClassifierResult.ClassifierResult(String),4,6
"org.apache.mahout.classifier.ClassifierResult.ClassifierResult(String,double,double)",7,15
org.apache.mahout.classifier.ClassifierResult.getLogLikelihood(),2,4
org.apache.mahout.classifier.ClassifierResult.setLogLikelihood(double),3,9
org.apache.mahout.classifier.ClassifierResult.getLabel(),2,3
org.apache.mahout.classifier.ClassifierResult.getScore(),1,2
org.apache.mahout.classifier.ClassifierResult.setLabel(String),3,6
org.apache.mahout.classifier.ClassifierResult.setScore(double),2,5
org.apache.mahout.classifier.ClassifierResult.toString(),6,8
org.apache.mahout.math.NamedVector.NamedVector(),2,2
org.apache.mahout.math.NamedVector.NamedVector(NamedVector),4,8
"org.apache.mahout.math.NamedVector.NamedVector(Vector,String)",8,15
org.apache.mahout.math.NamedVector.getName(),2,3
org.apache.mahout.math.NamedVector.getDelegate(),2,3
org.apache.mahout.math.NamedVector.hashCode(),3,5
org.apache.mahout.math.NamedVector.equals(Object),3,4
org.apache.mahout.math.NamedVector.clone(),5,8
org.apache.mahout.math.NamedVector.all(),3,3
org.apache.mahout.math.NamedVector.nonZeroes(),4,5
org.apache.mahout.math.NamedVector.asFormatString(),2,4
org.apache.mahout.math.NamedVector.toString(),6,16
org.apache.mahout.math.NamedVector.assign(double),4,6
org.apache.mahout.math.NamedVector.assign(double[]),4,6
org.apache.mahout.math.NamedVector.assign(Vector),3,5
org.apache.mahout.math.NamedVector.assign(DoubleFunction),4,7
"org.apache.mahout.math.NamedVector.assign(Vector,DoubleDoubleFunction)",4,8
"org.apache.mahout.math.NamedVector.assign(DoubleDoubleFunction,double)",4,5
org.apache.mahout.math.NamedVector.size(),2,3
org.apache.mahout.math.NamedVector.isDense(),2,3
org.apache.mahout.math.NamedVector.isSequentialAccess(),3,5
org.apache.mahout.math.NamedVector.getElement(int),3,6
org.apache.mahout.math.NamedVector.mergeUpdates(OrderedIntDoubleMapping),4,8
org.apache.mahout.math.NamedVector.divide(double),3,4
org.apache.mahout.math.NamedVector.dot(Vector),3,4
org.apache.mahout.math.NamedVector.get(int),2,3
org.apache.mahout.math.NamedVector.getQuick(int),3,5
org.apache.mahout.math.NamedVector.like(),4,6
org.apache.mahout.math.NamedVector.like(int),5,7
org.apache.mahout.math.NamedVector.minus(Vector),3,5
org.apache.mahout.math.NamedVector.normalize(),3,4
org.apache.mahout.math.NamedVector.normalize(double),4,6
org.apache.mahout.math.NamedVector.logNormalize(),4,6
org.apache.mahout.math.NamedVector.logNormalize(double),5,8
org.apache.mahout.math.NamedVector.norm(double),3,5
org.apache.mahout.math.NamedVector.maxValue(),3,5
org.apache.mahout.math.NamedVector.maxValueIndex(),4,7
org.apache.mahout.math.NamedVector.minValue(),3,5
org.apache.mahout.math.NamedVector.minValueIndex(),4,7
org.apache.mahout.math.NamedVector.plus(double),3,4
org.apache.mahout.math.NamedVector.plus(Vector),3,5
"org.apache.mahout.math.NamedVector.set(int,double)",4,7
"org.apache.mahout.math.NamedVector.setQuick(int,double)",5,9
"org.apache.mahout.math.NamedVector.incrementQuick(int,double)",4,9
org.apache.mahout.math.NamedVector.getNumNonZeroElements(),4,7
org.apache.mahout.math.NamedVector.getNumNondefaultElements(),4,7
org.apache.mahout.math.NamedVector.times(double),3,4
org.apache.mahout.math.NamedVector.times(Vector),3,5
"org.apache.mahout.math.NamedVector.viewPart(int,int)",5,8
org.apache.mahout.math.NamedVector.zSum(),2,3
org.apache.mahout.math.NamedVector.cross(Vector),4,5
"org.apache.mahout.math.NamedVector.aggregate(DoubleDoubleFunction,DoubleFunction)",5,9
"org.apache.mahout.math.NamedVector.aggregate(Vector,DoubleDoubleFunction,DoubleDoubleFunction)",6,10
org.apache.mahout.math.NamedVector.getLengthSquared(),3,5
org.apache.mahout.math.NamedVector.getDistanceSquared(Vector),4,6
org.apache.mahout.math.NamedVector.getLookupCost(),3,5
org.apache.mahout.math.NamedVector.getIteratorAdvanceCost(),4,7
org.apache.mahout.math.NamedVector.isAddConstantTime(),4,7
"org.apache.mahout.classifier.ResultAnalyzer.ResultAnalyzer(Collection<String>,String)",10,18
org.apache.mahout.classifier.ResultAnalyzer.getConfusionMatrix(),2,6
"org.apache.mahout.classifier.ResultAnalyzer.addInstance(String,ClassifierResult)",19,54
org.apache.mahout.classifier.ResultAnalyzer.toString(),44,340
org.apache.mahout.math.DenseSymmetricMatrix.DenseSymmetricMatrix(int),3,3
"org.apache.mahout.math.DenseSymmetricMatrix.DenseSymmetricMatrix(double[],boolean)",5,7
org.apache.mahout.math.DenseSymmetricMatrix.DenseSymmetricMatrix(Vector),5,6
org.apache.mahout.math.DenseSymmetricMatrix.DenseSymmetricMatrix(UpperTriangular),5,5
"org.apache.mahout.math.DenseSymmetricMatrix.getQuick(int,int)",4,14
"org.apache.mahout.math.DenseSymmetricMatrix.setQuick(int,int,double)",6,18
"org.apache.mahout.math.random.Missing<T>.Missing(int,double,Sampler<T>,T)",8,17
"org.apache.mahout.math.random.Missing<T>.Missing(double,Sampler<T>,T)",4,8
"org.apache.mahout.math.random.Missing<T>.Missing(double,Sampler<T>)",3,4
org.apache.mahout.math.random.Missing<T>.sample(),5,6
org.apache.mahout.math.QRDecomposition.QRDecomposition(Matrix),51,115
org.apache.mahout.math.QRDecomposition.getQ(),1,1
org.apache.mahout.math.QRDecomposition.getR(),1,1
org.apache.mahout.math.QRDecomposition.hasFullRank(),1,2
org.apache.mahout.math.QRDecomposition.solve(Matrix),38,65
org.apache.mahout.math.QRDecomposition.toString(),7,10
org.apache.mahout.common.RandomUtils.RandomUtils(),2,2
org.apache.mahout.common.RandomUtils.useTestSeed(),9,15
org.apache.mahout.common.RandomUtils.getRandom(),6,17
org.apache.mahout.common.RandomUtils.getRandom(long),4,12
org.apache.mahout.common.RandomUtils.hashDouble(double),6,11
org.apache.mahout.common.RandomUtils.hashFloat(float),5,8
org.apache.mahout.common.RandomUtils.nextTwinPrime(int),12,23
"org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver.timeSolver(Matrix,double,int,TrainingState)",9,16
"org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver.timeSolver(Matrix,double,int,int,TrainingState)",27,72
"org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver.timeSolver(Matrix,TrainingState)",5,8
"org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver.timeSolver(Matrix,TrainingState,int)",6,10
org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver.testHebbianSolver(),24,47
org.apache.mahout.math.jet.stat.GammaTest.testGamma(),9,24
org.apache.mahout.math.jet.stat.GammaTest.testNegativeArgForGamma(),11,27
org.apache.mahout.math.jet.stat.GammaTest.gammaInteger(double),2,2
org.apache.mahout.math.jet.stat.GammaTest.testBigX(),11,63
org.apache.mahout.math.jet.stat.GammaTest.factorial(int),1,1
org.apache.mahout.math.jet.stat.GammaTest.beta(),14,44
org.apache.mahout.math.jet.stat.GammaTest.incompleteBeta(),35,68
org.apache.mahout.math.random.NormalTest.setUp(),5,5
org.apache.mahout.math.random.NormalTest.testOffset(),12,18
org.apache.mahout.math.random.NormalTest.testSample(),21,37
org.apache.mahout.classifier.df.ErrorEstimate.ErrorEstimate(),2,2
"org.apache.mahout.classifier.df.ErrorEstimate.errorRate(double[],double[])",15,39
org.apache.mahout.math.list.SimpleLongArrayList.SimpleLongArrayList(),5,6
org.apache.mahout.math.list.SimpleLongArrayList.SimpleLongArrayList(long[]),27,39
org.apache.mahout.math.list.SimpleLongArrayList.SimpleLongArrayList(int),21,35
org.apache.mahout.math.list.SimpleLongArrayList.ensureCapacity(int),9,15
org.apache.mahout.math.list.SimpleLongArrayList.getQuick(int),3,4
"org.apache.mahout.math.list.SimpleLongArrayList.setQuick(int,long)",5,7
org.apache.mahout.math.list.SimpleLongArrayList.trimToSize(),9,12
"org.apache.mahout.math.FileBasedMatrix.FileBasedMatrix(int,int)",12,32
org.apache.mahout.math.FileBasedMatrix.addData(DoubleBuffer),4,7
"org.apache.mahout.math.FileBasedMatrix.setData(File,boolean)",27,53
"org.apache.mahout.math.FileBasedMatrix.writeMatrix(File,Matrix)",23,45
"org.apache.mahout.math.FileBasedMatrix.assignColumn(int,Vector)",7,9
"org.apache.mahout.math.FileBasedMatrix.assignRow(int,Vector)",7,9
"org.apache.mahout.math.FileBasedMatrix.getQuick(int,int)",7,14
org.apache.mahout.math.FileBasedMatrix.like(),4,5
"org.apache.mahout.math.FileBasedMatrix.like(int,int)",4,7
"org.apache.mahout.math.FileBasedMatrix.setQuick(int,int,double)",8,9
"org.apache.mahout.math.FileBasedMatrix.viewPart(int[],int[])",7,8
"org.apache.mahout.math.decomposer.EigenStatus.EigenStatus(double,double)",5,10
"org.apache.mahout.math.decomposer.EigenStatus.EigenStatus(double,double,boolean)",6,17
org.apache.mahout.math.decomposer.EigenStatus.getCosAngle(),2,4
org.apache.mahout.math.decomposer.EigenStatus.getEigenValue(),2,4
org.apache.mahout.math.decomposer.EigenStatus.inProgress(),1,2
org.apache.mahout.math.decomposer.EigenStatus.setInProgress(boolean),3,5
org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator.nextLong(),8,9
org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator.peek(),4,5
"org.apache.mahout.cf.taste.hadoop.item.SimilarityMatrixRowWrapperMapper.map(IntWritable,VectorWritable,Context)",17,38
org.apache.mahout.cf.taste.hadoop.als.SolveImplicitFeedbackMapper.createSharedInstance(Context),32,76
"org.apache.mahout.cf.taste.hadoop.als.SolveImplicitFeedbackMapper.map(IntWritable,VectorWritable,Context)",21,32
org.apache.mahout.cf.taste.impl.common.BitSet.BitSet(int),5,15
org.apache.mahout.cf.taste.impl.common.BitSet.BitSet(long[]),3,5
org.apache.mahout.cf.taste.impl.common.BitSet.get(int),6,8
org.apache.mahout.cf.taste.impl.common.BitSet.set(int),7,9
org.apache.mahout.cf.taste.impl.common.BitSet.clear(int),6,8
org.apache.mahout.cf.taste.impl.common.BitSet.clear(),2,5
org.apache.mahout.cf.taste.impl.common.BitSet.clone(),4,7
org.apache.mahout.cf.taste.impl.common.BitSet.hashCode(),4,6
org.apache.mahout.cf.taste.impl.common.BitSet.equals(Object),6,12
org.apache.mahout.cf.taste.impl.common.BitSet.toString(),6,16
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.EntityPrefWritable(),3,3
"org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.EntityPrefWritable(long,float)",5,11
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.EntityPrefWritable(EntityPrefWritable),4,8
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.getID(),0,0
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.getPrefValue(),2,4
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.write(DataOutput),6,8
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.readFields(DataInput),7,10
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.hashCode(),6,9
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.equals(Object),6,15
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.toString(),3,4
org.apache.mahout.cf.taste.hadoop.EntityPrefWritable.clone(),5,9
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.GenericUserPreferenceArray(int),11,14
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.GenericUserPreferenceArray(List<>),16,36
"org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.GenericUserPreferenceArray(long[],long,float[])",9,13
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.length(),2,3
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.get(int),2,3
"org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.set(int,Preference)",8,11
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.getUserID(int),1,1
"org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.setUserID(int,long)",2,4
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.getItemID(int),2,2
"org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.setItemID(int,long)",3,5
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.getIDs(),1,1
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.getValue(int),2,2
"org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.setValue(int,float)",3,5
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.sortByUser(),2,2
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.sortByItem(),3,5
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.sortByValue(),3,5
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.sortByValueReversed(),4,7
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.hasPrefWithUserID(long),2,4
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.hasPrefWithItemID(long),3,5
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.lateralSort(int),14,30
"org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.isLess(int,int,int)",8,14
"org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.swap(int,int)",4,13
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.clone(),7,13
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.hashCode(),5,10
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.equals(Object),9,26
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.iterator(),9,12
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.iterator().$1.apply(Integer),4,5
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.toString(),11,43
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.PreferenceView.PreferenceView(int),2,2
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.PreferenceView.getUserID(),4,6
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.PreferenceView.getItemID(),5,6
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.PreferenceView.getValue(),2,2
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray.PreferenceView.setValue(float),3,5
org.apache.mahout.math.stats.LogLikelihoodTest.testEntropy(),11,21
org.apache.mahout.math.stats.LogLikelihoodTest.testLogLikelihood(),9,43
org.apache.mahout.math.stats.LogLikelihoodTest.testRootLogLikelihood(),13,103
org.apache.mahout.math.stats.LogLikelihoodTest.testRootNegativeLLR(),7,10
org.apache.mahout.math.stats.LogLikelihoodTest.testFrequencyComparison(),67,185
org.apache.mahout.math.stats.LogLikelihoodTest.testFrequencyComparison().$1.apply(double),5,5
"org.apache.mahout.math.stats.LogLikelihoodTest.sample(Vector,Random)",20,33
"org.apache.mahout.cf.taste.hadoop.als.SharingMapper<K1,V1,K2,V2,S>.createSharedInstance(Context)",10,13
"org.apache.mahout.cf.taste.hadoop.als.SharingMapper<K1,V1,K2,V2,S>.setupSharedInstance(Context)",6,14
"org.apache.mahout.cf.taste.hadoop.als.SharingMapper<K1,V1,K2,V2,S>.getSharedInstance()",2,4
"org.apache.mahout.cf.taste.hadoop.als.SharingMapper<K1,V1,K2,V2,S>.reset()",3,3
org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest.testFilter(),8,32
org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest.testAnalyzer(),15,25
org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest.testNonKeepdAnalyzer(),21,38
org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest.testKeepAnalyzer(),19,36
org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest.testShingleFilteredAnalyzer(),20,41
"org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest.setKey(Key,String)",9,15
"org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest.validateTokens(String[],TokenStream)",18,38
org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest.getFilter(String[]),10,21
org.apache.mahout.math.DenseMatrix.DenseMatrix(double[][]),5,9
"org.apache.mahout.math.DenseMatrix.DenseMatrix(double[][],boolean)",12,32
"org.apache.mahout.math.DenseMatrix.DenseMatrix(int,int)",10,21
org.apache.mahout.math.DenseMatrix.clone(),5,19
"org.apache.mahout.math.DenseMatrix.getQuick(int,int)",4,6
org.apache.mahout.math.DenseMatrix.like(),4,5
"org.apache.mahout.math.DenseMatrix.like(int,int)",4,7
"org.apache.mahout.math.DenseMatrix.setQuick(int,int,double)",6,9
"org.apache.mahout.math.DenseMatrix.viewPart(int[],int[])",10,29
"org.apache.mahout.math.DenseMatrix.viewPart(int,int,int,int)",11,64
org.apache.mahout.math.DenseMatrix.assign(double),8,13
org.apache.mahout.math.DenseMatrix.assign(DenseMatrix),11,37
"org.apache.mahout.math.DenseMatrix.assignColumn(int,Vector)",11,32
"org.apache.mahout.math.DenseMatrix.assignRow(int,Vector)",12,32
org.apache.mahout.math.DenseMatrix.viewRow(int),8,17
org.apache.mahout.math.DenseMatrix.getFlavor(),3,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.FastMap()",7,9
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.FastMap(int)",4,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.FastMap(Map<K,V>)",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.FastMap(int,float)",6,10
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.FastMap(int,int)",6,10
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.FastMap(int,int,float)",36,110
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.find(Object)",12,46
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.findForAdd(Object)",15,80
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.get(Object)",9,13
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.size()",3,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.isEmpty()",3,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.containsKey(Object)",4,7
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.containsValue(Object)",5,11
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.put(K,V)",35,78
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.clearStaleEntry(int)",15,35
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.putAll(Map<>)",5,11
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.remove(Object)",19,30
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.clear()",11,14
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.keySet()",2,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.values()",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.entrySet()",2,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.rehash()",9,10
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.growAndRehash()",14,24
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.rehash(int)",18,38
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.iteratorRemove(int)",12,14
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.clone()",17,34
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.hashCode()",8,25
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.equals(Object)",12,54
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.toString()",11,30
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.size()",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.isEmpty()",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.contains(Object)",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.iterator()",2,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.add(Entry<K,V>)",5,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.remove(Object)",5,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.addAll(Collection<>)",6,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.retainAll(Collection<>)",6,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.removeAll(Collection<>)",6,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.clear()",2,2
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.MapEntry.MapEntry(int)",3,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.MapEntry.getKey()",3,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.MapEntry.getValue()",3,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.MapEntry.setValue(V)",7,14
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.EntryIterator.hasNext()",3,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.EntryIterator.next()",7,10
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.EntryIterator.goToNext()",3,8
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.EntrySet.EntryIterator.remove()",2,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.size()",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.isEmpty()",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.contains(Object)",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.iterator()",2,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.add(K)",4,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.remove(Object)",5,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.addAll(Collection<>)",5,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.retainAll(Collection<>)",6,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.removeAll(Collection<>)",6,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.clear()",2,2
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.KeyIterator.hasNext()",3,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.KeyIterator.next()",5,8
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.KeyIterator.goToNext()",3,8
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.KeySet.KeyIterator.remove()",2,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.size()",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.isEmpty()",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.contains(Object)",3,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.iterator()",2,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.add(V)",4,4
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.remove(Object)",5,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.addAll(Collection<>)",5,5
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.removeAll(Collection<>)",6,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.retainAll(Collection<>)",6,6
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.clear()",2,2
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.ValueIterator.hasNext()",3,3
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.ValueIterator.next()",5,8
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.ValueIterator.goToNext()",3,8
"org.apache.mahout.cf.taste.impl.common.FastMap<K,V>.ValueCollection.ValueIterator.remove()",2,3
"org.apache.mahout.cf.taste.hadoop.item.PartialMultiplyMapper.map(VarIntWritable,VectorAndPrefsWritable,Context)",20,66
org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer.setup(Context),24,44
"org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer.reduce(VarLongWritable,Iterable<PrefAndSimilarityColumnWritable>,Context)",13,26
"org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer.reduceBooleanData(VarLongWritable,Iterable<PrefAndSimilarityColumnWritable>,Context)",29,52
"org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer.reduceNonBooleanData(VarLongWritable,Iterable<PrefAndSimilarityColumnWritable>,Context)",53,184
"org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer.writeRecommendedItems(VarLongWritable,Vector,Context)",37,130
"org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer.shouldIncludeItemIntoRecommendations(long,FastIDSet,FastIDSet)",9,26
org.apache.mahout.cf.taste.hadoop.preparation.PreparePreferenceMatrixJob.main(String[]),11,12
org.apache.mahout.cf.taste.hadoop.preparation.PreparePreferenceMatrixJob.run(String[]),64,263
org.apache.mahout.classifier.df.split.RegressionSplit.InstanceComparator.InstanceComparator(int),3,5
"org.apache.mahout.classifier.df.split.RegressionSplit.InstanceComparator.compare(Instance,Instance)",4,10
"org.apache.mahout.classifier.df.split.RegressionSplit.computeSplit(Data,int)",7,18
"org.apache.mahout.classifier.df.split.RegressionSplit.categoricalSplit(Data,int)",21,79
"org.apache.mahout.classifier.df.split.RegressionSplit.numericalSplit(Data,int)",29,109
org.apache.mahout.math.random.IndianBuffetTest.testBasicText(),23,39
org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.PrefAndSimilarityColumnWritable(),4,4
"org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.PrefAndSimilarityColumnWritable(float,Vector)",7,14
"org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.set(float,Vector)",6,14
org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.getPrefValue(),2,4
org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.getSimilarityColumn(),3,5
org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.readFields(DataInput),11,16
org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.write(DataOutput),14,18
org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.equals(Object),8,26
org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable.hashCode(),8,11
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.FastByIDMap(),7,9
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.FastByIDMap(int),4,6
"org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.FastByIDMap(int,float)",6,10
"org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.FastByIDMap(int,int)",6,10
"org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.FastByIDMap(int,int,float)",42,125
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.find(long),11,43
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.findForAdd(long),14,77
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.get(long),8,12
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.size(),3,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.isEmpty(),3,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.containsKey(long),4,8
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.containsValue(Object),5,11
"org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.put(long,V)",36,87
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.clearStaleEntry(int),14,34
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.remove(long),18,30
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.clear(),11,14
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.keySetIterator(),4,7
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.entrySet(),3,7
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.values(),3,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.rehash(),9,10
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.growAndRehash(),14,24
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.rehash(int),20,40
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.iteratorRemove(int),11,13
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.clone(),17,34
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.toString(),11,30
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.hashCode(),8,24
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.equals(Object),12,54
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.KeyIterator.hasNext(),3,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.KeyIterator.nextLong(),5,8
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.KeyIterator.peek(),6,8
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.KeyIterator.goToNext(),3,8
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.KeyIterator.remove(),2,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.KeyIterator.skip(int),2,2
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.size(),3,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.isEmpty(),3,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.contains(Object),3,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.iterator(),3,6
"org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.add(Map.Entry<Long,V>)",6,6
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.remove(Object),5,5
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.addAll(Collection<>),7,7
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.retainAll(Collection<>),6,6
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.removeAll(Collection<>),6,6
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.clear(),2,2
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.MapEntry.MapEntry(int),3,5
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.MapEntry.getKey(),3,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.MapEntry.getValue(),3,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.MapEntry.setValue(V),7,14
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.EntryIterator.hasNext(),3,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.EntryIterator.next(),7,11
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.EntryIterator.goToNext(),3,8
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.EntrySet.EntryIterator.remove(),2,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.size(),3,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.isEmpty(),3,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.contains(Object),3,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.iterator(),2,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.add(V),4,4
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.remove(Object),5,5
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.addAll(Collection<>),5,5
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.removeAll(Collection<>),6,6
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.retainAll(Collection<>),6,6
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.clear(),2,2
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.ValueIterator.hasNext(),3,3
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.ValueIterator.next(),5,8
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.ValueIterator.goToNext(),3,8
org.apache.mahout.cf.taste.impl.common.FastByIDMap<V>.ValueCollection.ValueIterator.remove(),2,3
org.apache.mahout.classifier.df.tools.Frequencies.Frequencies(),1,1
org.apache.mahout.classifier.df.tools.Frequencies.run(String[]),37,150
"org.apache.mahout.classifier.df.tools.Frequencies.runTool(String,String)",25,62
org.apache.mahout.classifier.df.tools.Frequencies.main(String[]),9,10
"org.apache.mahout.cf.taste.impl.common.FixedRunningAverage.FixedRunningAverage(double,int)",4,9
org.apache.mahout.cf.taste.impl.common.FixedRunningAverage.addDatum(double),5,6
org.apache.mahout.cf.taste.impl.common.FixedRunningAverage.removeDatum(double),5,6
org.apache.mahout.cf.taste.impl.common.FixedRunningAverage.changeDatum(double),6,6
org.apache.mahout.cf.taste.impl.common.FixedRunningAverage.getCount(),1,2
org.apache.mahout.cf.taste.impl.common.FixedRunningAverage.getAverage(),1,2
org.apache.mahout.cf.taste.impl.common.FixedRunningAverage.inverse(),4,6
org.apache.mahout.cf.taste.impl.common.FixedRunningAverage.toString(),3,5
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.lambda(double),15,20
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.link(Vector),29,51
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.link(double),12,15
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.classifyNoLink(Vector),13,16
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.classifyScalarNoLink(Vector),9,10
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.classify(Vector),4,8
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.classifyScalar(Vector),22,31
"org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.train(long,String,int,Vector)",43,85
"org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.train(long,int,Vector)",6,11
"org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.train(int,Vector)",4,7
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.regularize(Vector),29,56
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.perTermLearningRate(int),3,3
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.currentLearningRate(),3,3
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.setPrior(PriorFunction),3,7
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.setGradient(Gradient),2,6
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.getPrior(),2,4
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.getBeta(),3,4
"org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.setBeta(int,int,double)",2,6
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.numCategories(),2,4
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.numFeatures(),4,5
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.getLambda(),1,2
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.getStep(),1,2
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.nextStep(),1,2
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.isSealed(),1,2
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.unseal(),2,2
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.regularizeAll(),7,9
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.close(),4,5
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.copyFrom(AbstractOnlineLogisticRegression),21,36
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.validModel(),8,8
org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression.validModel().$1.apply(double),2,2
"org.apache.mahout.math.decomposer.SimpleEigenVerifier.verify(VectorIterable,Vector)",14,50
"org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.SVDRecommender(DataModel,Factorizer)",12,20
"org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.SVDRecommender(DataModel,Factorizer,CandidateItemsStrategy)",11,24
"org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.SVDRecommender(DataModel,Factorizer,PersistenceStrategy)",31,60
"org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.SVDRecommender(DataModel,Factorizer,CandidateItemsStrategy,PersistenceStrategy)",43,113
"org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.SVDRecommender(DataModel,Factorizer,CandidateItemsStrategy,PersistenceStrategy).$1.call()",5,5
org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.getDefaultPersistenceStrategy(),2,6
org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.train(),12,17
"org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.recommend(long,int,IDRescorer,boolean)",27,59
"org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.estimatePreference(long,long)",10,33
org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.Estimator.Estimator(long),2,4
org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.Estimator.estimate(Long),6,8
org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender.refresh(Collection<Refreshable>),5,8
org.apache.mahout.math.UpperTriangular.UpperTriangular(int),3,3
"org.apache.mahout.math.UpperTriangular.UpperTriangular(double[],boolean)",13,20
org.apache.mahout.math.UpperTriangular.UpperTriangular(Vector),11,15
org.apache.mahout.math.UpperTriangular.elementsToMatrixSize(int),7,11
org.apache.mahout.math.UpperTriangular.UpperTriangular(UpperTriangular),5,7
"org.apache.mahout.math.UpperTriangular.assignColumn(int,Vector)",18,38
"org.apache.mahout.math.UpperTriangular.assignRow(int,Vector)",20,28
"org.apache.mahout.math.UpperTriangular.assignNonZeroElementsInRow(int,double[])",9,14
"org.apache.mahout.math.UpperTriangular.getQuick(int,int)",4,8
"org.apache.mahout.math.UpperTriangular.getL(int,int)",11,18
org.apache.mahout.math.UpperTriangular.like(),4,5
"org.apache.mahout.math.UpperTriangular.like(int,int)",4,7
"org.apache.mahout.math.UpperTriangular.setQuick(int,int,double)",6,9
org.apache.mahout.math.UpperTriangular.getNumNondefaultElements(),6,6
"org.apache.mahout.math.UpperTriangular.viewPart(int[],int[])",4,8
org.apache.mahout.math.UpperTriangular.getData(),2,2
org.apache.mahout.math.UpperTriangular.getFlavor(),14,19
org.apache.mahout.math.OrthonormalityVerifier.OrthonormalityVerifier(),2,2
org.apache.mahout.math.OrthonormalityVerifier.pairwiseInnerProducts(Iterable<MatrixSlice>),18,43
"org.apache.mahout.math.function.IntIntDoubleFunction.apply(int,int,double)",9,21
"org.apache.mahout.cf.taste.impl.common.Retriever<K,V>.get(K)",9,16
org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier.ComplementaryNaiveBayesClassifier(NaiveBayesModel),5,9
"org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier.getScoreForLabelFeature(int,int)",27,52
"org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier.computeWeight(double,double,double,double,double,double)",25,46
org.apache.mahout.math.VectorIterable.iterateAll(),5,6
org.apache.mahout.math.VectorIterable.iterateNonEmpty(),7,9
org.apache.mahout.math.VectorIterable.numSlices(),2,2
org.apache.mahout.math.VectorIterable.numRows(),2,2
org.apache.mahout.math.VectorIterable.numCols(),2,2
org.apache.mahout.math.VectorIterable.times(Vector),16,29
org.apache.mahout.math.VectorIterable.timesSquared(Vector),24,37
org.apache.mahout.common.iterator.sequencefile.PathFilters.$1.accept(Path),6,11
org.apache.mahout.common.iterator.sequencefile.PathFilters.$2.accept(Path),6,11
org.apache.mahout.common.iterator.sequencefile.PathFilters.$3.accept(Path),6,13
org.apache.mahout.common.iterator.sequencefile.PathFilters.PathFilters(),2,2
org.apache.mahout.common.iterator.sequencefile.PathFilters.partFilter(),12,16
org.apache.mahout.common.iterator.sequencefile.PathFilters.finalPartFilter(),9,12
org.apache.mahout.common.iterator.sequencefile.PathFilters.logsCRCFilter(),17,25
org.apache.mahout.math.als.AlternatingLeastSquaresSolver.AlternatingLeastSquaresSolver(),3,3
"org.apache.mahout.math.als.AlternatingLeastSquaresSolver.solve(Iterable<Vector>,Vector,double,int)",29,99
"org.apache.mahout.math.als.AlternatingLeastSquaresSolver.solve(Matrix,Matrix)",6,8
"org.apache.mahout.math.als.AlternatingLeastSquaresSolver.addLambdaTimesNuiTimesE(Matrix,double,int)",14,42
"org.apache.mahout.math.als.AlternatingLeastSquaresSolver.miTimesMiTransposePlusLambdaTimesNuiTimesE(Matrix,double,int)",13,42
"org.apache.mahout.math.als.AlternatingLeastSquaresSolver.createMiIi(Iterable<Vector>,int)",12,26
org.apache.mahout.math.als.AlternatingLeastSquaresSolver.createRiIiMaybeTransposed(Vector),21,40
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev.InvertedRunningAverageAndStdDev(RunningAverageAndStdDev),6,12
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev.addDatum(double),5,6
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev.removeDatum(double),5,6
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev.changeDatum(double),6,6
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev.getCount(),2,3
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev.getAverage(),2,3
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev.getStandardDeviation(),3,5
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev.inverse(),6,6
org.apache.mahout.cf.taste.impl.recommender.AllSimilarItemsCandidateItemsStrategy.AllSimilarItemsCandidateItemsStrategy(ItemSimilarity),9,15
"org.apache.mahout.cf.taste.impl.recommender.AllSimilarItemsCandidateItemsStrategy.doGetCandidateItems(long[],DataModel,boolean)",15,39
org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.OrderBasedRecommenderEvaluator(),3,3
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.evaluate(Recommender,Recommender,int,RunningAverage,String)",37,112
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.evaluate(Recommender,DataModel,int,RunningAverage,String)",45,118
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.evaluate(DataModel,DataModel,int,RunningAverage,String)",39,118
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.mask(FastIDSet,FastIDSet,long)",14,33
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.getCommonItems(FastIDSet,Iterable<RecommendedItem>,int)",12,34
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.getCommonItems(FastIDSet,PreferenceArray,int)",12,31
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.setBits(FastIDSet,List<RecommendedItem>,int)",11,31
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.setBits(FastIDSet,PreferenceArray,int)",11,30
org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.printHeader(),13,13
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.scoreCommonSubset(String,long,int,int,Long[],Long[])",48,95
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.slidingWindowHamming(Long[],Long[])",13,45
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.normalWilcoxon(int[],int[])",32,50
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.getVectorZ(Long[],Long[],int[],int[])",30,61
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.wilcoxonRanks(int[],int[],double[],double[])",23,56
org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.getMeanRank(int[]),6,13
org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.getMeanWplus(double[]),7,14
org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.getMeanWminus(double[]),7,14
"org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator.sort(Long[],Long[])",25,86
"org.apache.mahout.math.jet.random.Normal.Normal(double,double,Random)",12,34
org.apache.mahout.math.jet.random.Normal.cdf(double),5,5
org.apache.mahout.math.jet.random.Normal.pdf(double),7,9
org.apache.mahout.math.jet.random.Normal.nextDouble(),13,24
org.apache.mahout.math.jet.random.Normal.setRandomGenerator(Random),5,13
"org.apache.mahout.math.jet.random.Normal.setState(double,double)",13,41
org.apache.mahout.math.jet.random.Normal.toString(),8,10
org.apache.mahout.math.solver.Preconditioner.precondition(Vector),6,11
org.apache.mahout.classifier.naivebayes.training.TrainNaiveBayesJob.main(String[]),12,13
org.apache.mahout.classifier.naivebayes.training.TrainNaiveBayesJob.run(String[]),95,390
org.apache.mahout.classifier.naivebayes.training.TrainNaiveBayesJob.createLabelIndex(Path),25,44
org.apache.mahout.math.stats.OnlineSummarizer.add(double),6,18
org.apache.mahout.math.stats.OnlineSummarizer.getCount(),1,1
org.apache.mahout.math.stats.OnlineSummarizer.getMean(),1,2
org.apache.mahout.math.stats.OnlineSummarizer.getSD(),3,3
org.apache.mahout.math.stats.OnlineSummarizer.getMin(),2,2
org.apache.mahout.math.stats.OnlineSummarizer.getMax(),2,2
org.apache.mahout.math.stats.OnlineSummarizer.getQuartile(int),3,3
org.apache.mahout.math.stats.OnlineSummarizer.quantile(double),2,3
org.apache.mahout.math.stats.OnlineSummarizer.getMedian(),2,2
org.apache.mahout.math.jet.math.Polynomial.Polynomial(),1,1
"org.apache.mahout.math.jet.math.Polynomial.p1evl(double,double[],int)",25,43
"org.apache.mahout.math.jet.math.Polynomial.polevl(double,double[],int)",16,32
"org.apache.mahout.math.map.OpenHashMap<K,V>.OpenHashMap()",7,9
"org.apache.mahout.math.map.OpenHashMap<K,V>.OpenHashMap(int)",17,32
"org.apache.mahout.math.map.OpenHashMap<K,V>.OpenHashMap(int,double,double)",18,72
"org.apache.mahout.math.map.OpenHashMap<K,V>.clear()",10,11
"org.apache.mahout.math.map.OpenHashMap<K,V>.clone()",7,22
"org.apache.mahout.math.map.OpenHashMap<K,V>.containsKey(Object)",4,7
"org.apache.mahout.math.map.OpenHashMap<K,V>.containsValue(Object)",4,7
"org.apache.mahout.math.map.OpenHashMap<K,V>.ensureCapacity(int)",7,14
"org.apache.mahout.math.map.OpenHashMap<K,V>.forEachKey(ObjectProcedure<K>)",6,9
"org.apache.mahout.math.map.OpenHashMap<K,V>.forEachPair(ObjectObjectProcedure<K,V>)",7,11
"org.apache.mahout.math.map.OpenHashMap<K,V>.get(Object)",5,7
"org.apache.mahout.math.map.OpenHashMap<K,V>.indexOfInsertion(K)",42,119
"org.apache.mahout.math.map.OpenHashMap<K,V>.indexOfKey(K)",37,76
"org.apache.mahout.math.map.OpenHashMap<K,V>.indexOfValue(V)",15,27
"org.apache.mahout.math.map.OpenHashMap<K,V>.keys(List<K>)",8,14
"org.apache.mahout.math.map.OpenHashMap<K,V>.put(K,V)",22,53
"org.apache.mahout.math.map.OpenHashMap<K,V>.rehash(int)",21,66
"org.apache.mahout.math.map.OpenHashMap<K,V>.remove(Object)",20,32
"org.apache.mahout.math.map.OpenHashMap<K,V>.setUp(int,double,double)",41,100
"org.apache.mahout.math.map.OpenHashMap<K,V>.trimToSize()",13,17
"org.apache.mahout.math.map.OpenHashMap<K,V>.getInternalFactors(int[],double[],double[])",13,37
"org.apache.mahout.math.map.OpenHashMap<K,V>.MapEntry.MapEntry(K,V)",4,8
"org.apache.mahout.math.map.OpenHashMap<K,V>.MapEntry.getKey()",1,2
"org.apache.mahout.math.map.OpenHashMap<K,V>.MapEntry.getValue()",1,2
"org.apache.mahout.math.map.OpenHashMap<K,V>.MapEntry.setValue(V)",9,13
"org.apache.mahout.math.map.OpenHashMap<K,V>.entrySet()",11,20
"org.apache.mahout.math.map.OpenHashMap<K,V>.entrySet().$1.apply(K,V)",7,9
"org.apache.mahout.math.map.OpenHashMap<K,V>.keySet()",7,12
"org.apache.mahout.math.map.OpenHashMap<K,V>.keySet().$2.apply(K)",4,5
"org.apache.mahout.math.map.OpenHashMap<K,V>.putAll(Map<>)",5,7
"org.apache.mahout.math.map.OpenHashMap<K,V>.values()",9,14
"org.apache.mahout.math.map.OpenHashMap<K,V>.values().$3.apply(K,V)",5,7
"org.apache.mahout.math.map.OpenHashMap<K,V>.equals(Object)",10,21
"org.apache.mahout.math.map.OpenHashMap<K,V>.equals(Object).$4.apply(K,V)",6,8
"org.apache.mahout.math.map.OpenHashMap<K,V>.toString()",7,14
"org.apache.mahout.math.map.OpenHashMap<K,V>.toString().$5.apply(K,V)",4,10
"org.apache.mahout.math.ssvd.SequentialBigSvd.SequentialBigSvd(Matrix,int)",15,25
org.apache.mahout.math.ssvd.SequentialBigSvd.getSingularValues(),5,8
org.apache.mahout.math.ssvd.SequentialBigSvd.getU(),5,5
org.apache.mahout.math.ssvd.SequentialBigSvd.getV(),6,6
org.apache.mahout.math.randomized.RandomBlasting.testAgainstReferenceOpenObjectIntHashMap(),29,100
org.apache.mahout.math.randomized.RandomBlasting.testAgainstReferenceOpenIntObjectHashMap(),29,100
org.apache.mahout.math.randomized.RandomBlasting.testAgainstReferenceOpenIntIntHashMap(),31,126
org.apache.mahout.math.randomized.RandomBlasting.testAgainstReferenceOpenIntHashSet(),28,91
org.apache.mahout.math.randomized.RandomBlasting.testAgainstReferenceOpenHashSet(),28,92
org.apache.mahout.math.randomized.RandomBlasting.testMahout1225(),6,10
org.apache.mahout.math.randomized.RandomBlasting.testClearTable(),20,44
"org.apache.mahout.math.randomized.RandomBlasting.addOp(List<Operation>,Operation,int)",7,13
org.apache.mahout.math.solver.EigenDecomposition.EigenDecomposition(Matrix),4,4
"org.apache.mahout.math.solver.EigenDecomposition.EigenDecomposition(Matrix,boolean)",20,28
org.apache.mahout.math.solver.EigenDecomposition.getV(),3,4
org.apache.mahout.math.solver.EigenDecomposition.getRealEigenvalues(),3,5
org.apache.mahout.math.solver.EigenDecomposition.getImagEigenvalues(),4,5
org.apache.mahout.math.solver.EigenDecomposition.getD(),9,17
org.apache.mahout.math.solver.EigenDecomposition.tred2(),44,137
org.apache.mahout.math.solver.EigenDecomposition.tql2(),47,130
org.apache.mahout.math.solver.EigenDecomposition.orthes(Matrix),59,181
"org.apache.mahout.math.solver.EigenDecomposition.cdiv(double,double,double,double)",5,9
org.apache.mahout.math.solver.EigenDecomposition.hqr2(Matrix),93,494
org.apache.mahout.math.solver.EigenDecomposition.isSymmetric(Matrix),7,13
org.apache.mahout.math.random.ChineseRestaurantTest.testDepth(),29,66
org.apache.mahout.math.random.ChineseRestaurantTest.testExtremeDiscount(),15,20
org.apache.mahout.math.random.ChineseRestaurantTest.testGrowth(),26,97
"org.apache.mahout.math.random.ChineseRestaurantTest.predictSize(Matrix,int,double)",38,77
org.apache.mahout.math.random.ChineseRestaurantTest.hapaxCount(ChineseRestaurant),5,6
org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.MutableRecommendedItem(),3,3
"org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.MutableRecommendedItem(long,float)",4,9
org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.getItemID(),1,2
org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.getValue(),1,2
org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.setItemID(long),2,5
"org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.set(long,float)",3,7
org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.capToMaxValue(float),3,11
org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.toString(),5,9
org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.hashCode(),6,7
org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem.equals(Object),6,13
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.BooleanUserPreferenceArray(int),9,11
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.BooleanUserPreferenceArray(List<>),9,21
"org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.BooleanUserPreferenceArray(long[],long)",7,9
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.length(),2,3
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.get(int),2,3
"org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.set(int,Preference)",6,8
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.getUserID(int),1,1
"org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.setUserID(int,long)",2,4
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.getItemID(int),2,2
"org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.setItemID(int,long)",3,5
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.getIDs(),1,1
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.getValue(int),1,1
"org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.setValue(int,float)",5,6
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.sortByUser(),2,2
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.sortByItem(),4,5
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.sortByValue(),2,2
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.sortByValueReversed(),3,3
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.hasPrefWithUserID(long),2,4
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.hasPrefWithItemID(long),3,5
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.clone(),5,9
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.hashCode(),4,6
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.equals(Object),7,18
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.iterator(),9,12
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.iterator().$1.apply(Integer),4,5
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.toString(),9,30
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.PreferenceView.PreferenceView(int),2,2
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.PreferenceView.getUserID(),3,5
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.PreferenceView.getItemID(),4,5
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.PreferenceView.getValue(),1,1
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArray.PreferenceView.setValue(float),5,6
org.apache.mahout.cf.taste.impl.similarity.LongPairMatchPredicate.LongPairMatchPredicate(long),3,3
org.apache.mahout.cf.taste.impl.similarity.LongPairMatchPredicate.matches(LongPair),2,5
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.BooleanItemPreferenceArray(int),9,11
"org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.BooleanItemPreferenceArray(List<>,boolean)",9,28
"org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.BooleanItemPreferenceArray(long[],long)",7,9
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.length(),2,3
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.get(int),2,3
"org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.set(int,Preference)",6,8
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.getUserID(int),2,2
"org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.setUserID(int,long)",3,5
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.getItemID(int),1,1
"org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.setItemID(int,long)",2,4
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.getIDs(),1,1
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.getValue(int),1,1
"org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.setValue(int,float)",5,6
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.sortByUser(),4,5
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.sortByItem(),2,2
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.sortByValue(),2,2
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.sortByValueReversed(),3,3
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.hasPrefWithUserID(long),3,5
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.hasPrefWithItemID(long),2,4
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.clone(),5,9
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.hashCode(),4,6
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.equals(Object),7,18
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.iterator(),9,12
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.iterator().$1.apply(Integer),4,5
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.toString(),9,30
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.PreferenceView.PreferenceView(int),2,2
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.PreferenceView.getUserID(),4,5
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.PreferenceView.getItemID(),3,5
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.PreferenceView.getValue(),1,1
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArray.PreferenceView.setValue(float),5,6
"org.apache.mahout.classifier.df.builder.TreeBuilder.build(Random,Data)",13,22
org.apache.mahout.math.MurmurHash3Test.testCorrectValues(),21,49
org.apache.mahout.math.OldQRDecompositionTest.rank1(),14,26
"org.apache.mahout.math.OldQRDecompositionTest.rank1().$1.apply(double,double)",4,9
org.apache.mahout.math.OldQRDecompositionTest.fullRankTall(),10,39
org.apache.mahout.math.OldQRDecompositionTest.fullRankWide(),11,49
"org.apache.mahout.math.OldQRDecompositionTest.assertEquals(Matrix,Matrix,double)",10,16
"org.apache.mahout.math.OldQRDecompositionTest.printMatrix(String,Matrix)",10,26
org.apache.mahout.math.OldQRDecompositionTest.matrix(),3,5
"org.apache.mahout.math.OldQRDecompositionTest.reshape(double[],int,int)",7,14
org.apache.mahout.math.OldQRDecompositionTest.b(),2,2
"org.apache.mahout.cf.taste.impl.recommender.SimilarUser.SimilarUser(long,double)",3,8
org.apache.mahout.cf.taste.impl.recommender.SimilarUser.getUserID(),1,2
org.apache.mahout.cf.taste.impl.recommender.SimilarUser.getSimilarity(),1,2
org.apache.mahout.cf.taste.impl.recommender.SimilarUser.hashCode(),6,7
org.apache.mahout.cf.taste.impl.recommender.SimilarUser.equals(Object),5,12
org.apache.mahout.cf.taste.impl.recommender.SimilarUser.toString(),4,8
org.apache.mahout.cf.taste.impl.recommender.SimilarUser.compareTo(SimilarUser),4,15
org.apache.mahout.cf.taste.neighborhood.UserNeighborhood.getUserNeighborhood(long),11,18
org.apache.mahout.cf.taste.eval.RecommenderBuilder.buildRecommender(DataModel),16,41
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.main(String[]),10,11
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.run(String[]),102,646
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.CountObservationsMapper.map(IntWritable,VectorWritable,Context)",16,35
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.CountObservationsMapper.cleanup(Context),10,13
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.SumObservationsReducer.reduce(NullWritable,Iterable<VectorWritable>,Context)",18,31
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.VectorNormMapper.setup(Context),34,98
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.VectorNormMapper.sampleDown(Vector,Context)",27,93
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.VectorNormMapper.map(IntWritable,VectorWritable,Context)",38,111
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.VectorNormMapper.cleanup(Context),17,37
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.MergeVectorsCombiner.reduce(IntWritable,Iterable<VectorWritable>,Context)",13,22
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.MergeVectorsReducer.setup(Context),14,32
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.MergeVectorsReducer.reduce(IntWritable,Iterable<VectorWritable>,Context)",24,68
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.CooccurrencesMapper.$1.compare(Vector.Element,Vector.Element)",5,9
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.CooccurrencesMapper.setup(Context),24,47
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.CooccurrencesMapper.consider(Vector.Element,Vector.Element)",13,48
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.CooccurrencesMapper.map(IntWritable,VectorWritable,Context)",36,86
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.SimilarityReducer.setup(Context),25,50
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.SimilarityReducer.reduce(IntWritable,Iterable<VectorWritable>,Context)",29,93
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.UnsymmetrifyMapper.setup(Mapper.Context),14,24
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.UnsymmetrifyMapper.map(IntWritable,VectorWritable,Context)",37,134
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.MergeToTopKSimilaritiesReducer.setup(Context),13,23
"org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJob.MergeToTopKSimilaritiesReducer.reduce(IntWritable,Iterable<VectorWritable>,Context)",17,34
org.apache.mahout.math.function.FloatFunction.apply(float),7,12
org.apache.mahout.math.MatrixVectorViewTest.testColumnView(),13,34
org.apache.mahout.math.MatrixVectorViewTest.testIndexRange(),20,35
"org.apache.mahout.cf.taste.impl.neighborhood.AbstractUserNeighborhood.AbstractUserNeighborhood(UserSimilarity,DataModel,double)",14,63
org.apache.mahout.cf.taste.impl.neighborhood.AbstractUserNeighborhood.getUserSimilarity(),2,6
org.apache.mahout.cf.taste.impl.neighborhood.AbstractUserNeighborhood.getDataModel(),2,6
org.apache.mahout.cf.taste.impl.neighborhood.AbstractUserNeighborhood.getSamplingRate(),2,4
org.apache.mahout.cf.taste.impl.neighborhood.AbstractUserNeighborhood.refresh(Collection<Refreshable>),5,8
"org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.AbstractRecommender(DataModel,CandidateItemsStrategy)",8,25
org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.AbstractRecommender(DataModel),6,10
org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.getDefaultCandidateItemsStrategy(),5,12
"org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.recommend(long,int)",7,9
"org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.recommend(long,int,boolean)",9,13
"org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.recommend(long,int,IDRescorer)",8,12
"org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.setPreference(long,long,float)",15,27
"org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.removePreference(long,long)",10,20
org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.getDataModel(),2,6
"org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender.getAllOtherItems(long,PreferenceArray,boolean)",24,56
"org.apache.mahout.cf.taste.similarity.ItemSimilarity.itemSimilarity(long,long)",23,42
"org.apache.mahout.cf.taste.similarity.ItemSimilarity.itemSimilarities(long,long[])",20,38
org.apache.mahout.cf.taste.similarity.ItemSimilarity.allSimilarItemIDs(long),6,8
"org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood.ThresholdUserNeighborhood(double,UserSimilarity,DataModel)",17,45
"org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood.ThresholdUserNeighborhood(double,UserSimilarity,DataModel,double)",27,69
org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood.getUserNeighborhood(long),21,61
org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood.toString(),4,5
org.apache.mahout.math.DenseSymmetricTest.testBasics(),21,63
org.apache.mahout.math.DenseSymmetricTest.testEigen(),20,49
org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest.testYtY(),12,35
"org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest.validateYtY(Matrix,int)",24,72
org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest.asRowVectors(Matrix),11,31
org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest.addLambdaTimesNuiTimesE(),12,26
org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest.createMiIi(),12,32
org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest.createRiIiMaybeTransposed(),19,53
org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest.createRiIiMaybeTransposedExceptionOnNonSequentialVector(),18,32
"org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem.GenericRecommendedItem(long,float)",9,19
org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem.getItemID(),1,2
org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem.getValue(),1,2
org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem.toString(),4,8
org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem.hashCode(),6,7
org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem.equals(Object),6,13
"org.apache.mahout.common.distance.ManhattanDistanceMeasure.distance(double[],double[])",5,7
org.apache.mahout.common.distance.ManhattanDistanceMeasure.configure(Configuration),3,3
org.apache.mahout.common.distance.ManhattanDistanceMeasure.getParameters(),6,6
"org.apache.mahout.common.distance.ManhattanDistanceMeasure.createParameters(String,Configuration)",7,7
"org.apache.mahout.common.distance.ManhattanDistanceMeasure.distance(Vector,Vector)",10,15
"org.apache.mahout.common.distance.ManhattanDistanceMeasure.distance(double,Vector,Vector)",6,10
"org.apache.mahout.common.mapreduce.VectorSumCombiner.reduce(WritableComparable<>,Iterable<VectorWritable>,Context)",17,23
org.apache.mahout.math.PermutedVectorViewTest.testViewBasics(),14,32
org.apache.mahout.math.PermutedVectorViewTest.testIterators(),27,69
org.apache.mahout.math.PermutedVectorViewTest.pivot(),1,1
org.apache.mahout.math.PermutedVectorViewTest.unpivot(),2,7
org.apache.mahout.math.PermutedVectorViewTest.randomVector(),8,14
org.apache.mahout.math.PermutedVectorViewTest.randomVector().$1.apply(double),3,3
org.apache.mahout.math.VectorTest.testSparseVector(),7,19
org.apache.mahout.math.VectorTest.testSparseVectorFullIteration(),16,39
org.apache.mahout.math.VectorTest.testSparseVectorSparseIteration(),18,45
org.apache.mahout.math.VectorTest.testEquivalent(),15,257
"org.apache.mahout.math.VectorTest.doTestVectors(Vector,Vector)",10,26
org.apache.mahout.math.VectorTest.testGetDistanceSquared(),10,40
org.apache.mahout.math.VectorTest.testAddTo(),12,36
org.apache.mahout.math.VectorTest.setUpV(Vector),3,8
org.apache.mahout.math.VectorTest.setUpW(Vector),3,12
"org.apache.mahout.math.VectorTest.doTestGetDistanceSquared(Vector,Vector)",8,13
org.apache.mahout.math.VectorTest.testGetLengthSquared(),10,26
org.apache.mahout.math.VectorTest.lengthSquaredSlowly(Vector),6,8
org.apache.mahout.math.VectorTest.doTestGetLengthSquared(Vector),32,289
org.apache.mahout.math.VectorTest.testIterator(),18,76
"org.apache.mahout.math.VectorTest.doTestIterators(Vector,Collection<Integer>)",19,63
org.apache.mahout.math.VectorTest.testNormalize(),27,181
org.apache.mahout.math.VectorTest.testLogNormalize(),24,112
"org.apache.mahout.math.VectorTest.assertVectorEquals(Vector,Vector,double)",8,18
org.apache.mahout.math.VectorTest.testMax(),18,174
org.apache.mahout.math.VectorTest.testMin(),19,174
org.apache.mahout.math.VectorTest.testDenseVector(),5,15
org.apache.mahout.math.VectorTest.testVectorView(),9,67
"org.apache.mahout.math.VectorTest.doTestEnumeration(double[],Vector)",12,25
org.apache.mahout.math.VectorTest.testEnumeration(),11,54
org.apache.mahout.math.VectorTest.testAggregation(),9,46
"org.apache.mahout.math.VectorTest.doTestAggregation(Vector,Vector)",21,80
org.apache.mahout.math.VectorTest.testEmptyAggregate1(),10,29
org.apache.mahout.math.VectorTest.testEmptyAggregate2(),10,24
org.apache.mahout.math.VectorTest.setUpFirstVector(Vector),3,9
org.apache.mahout.math.VectorTest.setUpSecondVector(Vector),3,11
org.apache.mahout.math.VectorTest.testHashCodeEquivalence(),19,181
org.apache.mahout.math.VectorTest.testHashCode(),12,91
org.apache.mahout.math.VectorTest.testIteratorRasv(),10,24
org.apache.mahout.math.VectorTest.testIteratorSasv(),10,24
org.apache.mahout.math.VectorTest.testIteratorDense(),7,18
org.apache.mahout.math.VectorTest.testIterator(Vector),7,20
org.apache.mahout.math.VectorTest.testSkips(Vector),15,55
org.apache.mahout.math.VectorTest.testSkipsLast(Vector),12,33
org.apache.mahout.math.VectorTest.testEmptyNonZeroIterator(Vector),13,27
org.apache.mahout.math.VectorTest.testEmptyAllIterator(Vector),13,30
org.apache.mahout.math.VectorTest.testNumNonZerosDense(),11,21
org.apache.mahout.math.VectorTest.testNumNonZerosRandomAccessSparse(),12,30
org.apache.mahout.math.VectorTest.testNumNonZerosSequentialAccessSparse(),12,30
org.apache.mahout.math.VectorTest.testSingleNonZeroIterator(Vector),13,28
org.apache.mahout.math.VectorTest.testExample1NonZeroIterator(Vector),30,89
org.apache.mahout.cf.taste.eval.IRStatistics.getPrecision(),8,10
org.apache.mahout.cf.taste.eval.IRStatistics.getRecall(),8,10
org.apache.mahout.cf.taste.eval.IRStatistics.getFallOut(),8,10
org.apache.mahout.cf.taste.eval.IRStatistics.getF1Measure(),8,10
org.apache.mahout.cf.taste.eval.IRStatistics.getFNMeasure(double),8,10
org.apache.mahout.cf.taste.eval.IRStatistics.getNormalizedDiscountedCumulativeGain(),10,18
org.apache.mahout.cf.taste.eval.IRStatistics.getReach(),6,6
org.apache.mahout.math.TestSequentialAccessSparseVector.generateTestVector(int),7,10
org.apache.mahout.math.TestSequentialAccessSparseVector.testDotSuperBig(),12,25
org.apache.mahout.math.TestSequentialAccessSparseVector.vectorToTest(int),11,26
org.apache.mahout.math.TestSequentialAccessSparseVector.testToString(),2,4
"org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefUserBasedRecommender.GenericBooleanPrefUserBasedRecommender(DataModel,UserNeighborhood,UserSimilarity)",9,19
"org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefUserBasedRecommender.doEstimatePreference(long,long[],long)",18,52
"org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefUserBasedRecommender.getAllOtherItems(long[],long,boolean)",13,39
org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefUserBasedRecommender.toString(),6,7
org.apache.mahout.clustering.GaussianAccumulator.getN(),1,1
org.apache.mahout.clustering.GaussianAccumulator.getMean(),3,4
org.apache.mahout.clustering.GaussianAccumulator.getStd(),3,4
org.apache.mahout.clustering.GaussianAccumulator.getAverageStd(),4,6
org.apache.mahout.clustering.GaussianAccumulator.getVariance(),3,4
"org.apache.mahout.clustering.GaussianAccumulator.observe(Vector,double)",6,12
org.apache.mahout.clustering.GaussianAccumulator.compute(),5,6
"org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities.BatchItemSimilarities(ItemBasedRecommender,int)",9,29
org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities.getRecommender(),3,5
org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities.getSimilarItemsPerItem(),3,6
"org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities.computeItemSimilarities(int,int,SimilarItemsWriter)",22,43
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.OnlineLogisticRegression(),7,7
"org.apache.mahout.classifier.sgd.OnlineLogisticRegression.OnlineLogisticRegression(int,int,PriorFunction)",19,39
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.alpha(double),16,23
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.lambda(double),8,11
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.learningRate(double),13,21
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.stepOffset(int),5,11
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.decayExponent(double),6,17
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.perTermLearningRate(int),9,10
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.currentLearningRate(),11,15
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.copyFrom(OnlineLogisticRegression),12,23
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.copy(),9,17
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.write(DataOutput),25,49
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.readFields(DataInput),29,61
"org.apache.mahout.classifier.sgd.DefaultGradient.apply(String,int,Vector,AbstractVectorClassifier)",15,24
org.apache.mahout.math.solver.TestConjugateGradientSolver.testConjugateGradientSolver(),19,35
org.apache.mahout.math.solver.TestConjugateGradientSolver.testConditionedConjugateGradientSolver(),28,86
org.apache.mahout.math.solver.TestConjugateGradientSolver.testEarlyStop(),29,64
org.apache.mahout.math.solver.TestConjugateGradientSolver.getA(),2,2
org.apache.mahout.math.solver.TestConjugateGradientSolver.getB(),2,3
org.apache.mahout.math.solver.TestConjugateGradientSolver.getIllConditionedMatrix(),4,5
"org.apache.mahout.math.solver.TestConjugateGradientSolver.reshape(double[],int,int)",7,14
org.apache.mahout.clustering.canopy.CanopyConfigKeys.CanopyConfigKeys(),3,3
org.apache.mahout.clustering.canopy.CanopyConfigKeys.configureCanopyClusterer(Configuration),16,61
org.apache.mahout.cf.taste.hadoop.ToItemPrefsMapper.ToItemPrefsMapper(),3,3
org.apache.mahout.classifier.df.tools.UDistrib.UDistrib(),1,1
org.apache.mahout.classifier.df.tools.UDistrib.main(String[]),50,219
"org.apache.mahout.classifier.df.tools.UDistrib.runTool(String,String,String,int)",78,319
org.apache.mahout.cf.taste.recommender.RecommendedItem.getItemID(),2,3
org.apache.mahout.cf.taste.recommender.RecommendedItem.getValue(),14,19
org.apache.mahout.math.VectorBinaryAggregateTest.generateData(),31,83
"org.apache.mahout.math.VectorBinaryAggregateTest.VectorBinaryAggregateTest(DoubleDoubleFunction,DoubleDoubleFunction,VectorBinaryAggregate,Vector,Vector)",8,20
org.apache.mahout.math.VectorBinaryAggregateTest.testSelf(),25,74
org.apache.mahout.math.VectorBinaryAggregateTest.testSeparate(),24,91
org.apache.mahout.math.TestSparseRowMatrix.matrixFactory(double[][]),11,34
org.apache.mahout.math.TestSparseRowMatrix.testTimesSparseEfficiency(),29,68
org.apache.mahout.math.TestSparseRowMatrix.testTimesDenseEfficiency(),28,57
org.apache.mahout.math.TestSparseRowMatrix.testTimesOtherSparseEfficiency(),33,71
org.apache.mahout.math.TestSparseRowMatrix.testTimesCorrect(),21,62
"org.apache.mahout.cf.taste.eval.RelevantItemsDataSplitter.getRelevantItemsIDs(long,int,double,DataModel)",25,41
"org.apache.mahout.cf.taste.eval.RelevantItemsDataSplitter.processOtherUser(long,FastIDSet,FastByIDMap<PreferenceArray>,long,DataModel)",28,55
org.apache.mahout.math.random.EmpiricalTest.testSimpleDist(),15,18
org.apache.mahout.math.random.EmpiricalTest.testZeros(),5,8
org.apache.mahout.math.random.EmpiricalTest.testBadArguments(),9,33
"org.apache.mahout.classifier.df.mapreduce.Builder.Builder(TreeBuilder,Path,Path,Long,Configuration)",8,31
org.apache.mahout.classifier.df.mapreduce.Builder.getDataPath(),2,5
org.apache.mahout.classifier.df.mapreduce.Builder.getNumMaps(Configuration),9,17
org.apache.mahout.classifier.df.mapreduce.Builder.isOutput(Configuration),12,20
org.apache.mahout.classifier.df.mapreduce.Builder.getRandomSeed(Configuration),10,21
"org.apache.mahout.classifier.df.mapreduce.Builder.setRandomSeed(Configuration,long)",9,23
org.apache.mahout.classifier.df.mapreduce.Builder.getTreeBuilder(Configuration),8,16
"org.apache.mahout.classifier.df.mapreduce.Builder.setTreeBuilder(Configuration,TreeBuilder)",9,18
org.apache.mahout.classifier.df.mapreduce.Builder.getNbTrees(Configuration),10,15
"org.apache.mahout.classifier.df.mapreduce.Builder.setNbTrees(Configuration,int)",17,32
org.apache.mahout.classifier.df.mapreduce.Builder.setOutputDirName(String),9,21
org.apache.mahout.classifier.df.mapreduce.Builder.getOutputPath(Configuration),12,37
"org.apache.mahout.classifier.df.mapreduce.Builder.getDistributedCacheFile(Configuration,int)",17,46
org.apache.mahout.classifier.df.mapreduce.Builder.loadDataset(Configuration),15,38
org.apache.mahout.classifier.df.mapreduce.Builder.configureJob(Job),10,18
org.apache.mahout.classifier.df.mapreduce.Builder.runJob(Job),16,25
org.apache.mahout.classifier.df.mapreduce.Builder.parseOutput(Job),18,27
org.apache.mahout.classifier.df.mapreduce.Builder.build(int),39,109
org.apache.mahout.classifier.df.mapreduce.Builder.sortSplits(InputSplit[]),15,25
"org.apache.mahout.classifier.df.mapreduce.Builder.sortSplits(InputSplit[]).$1.compare(InputSplit,InputSplit)",10,25
org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver.testEigenvalueCheck(),42,97
org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver.testLanczosSolver(),25,60
org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver.testLanczosSolverSymmetric(),23,49
org.apache.mahout.utils.vectors.lucene.DriverTest.setUp(),11,23
org.apache.mahout.utils.vectors.lucene.DriverTest.asDocument(String),9,16
"org.apache.mahout.utils.vectors.lucene.DriverTest.TextFieldWithTermVectors.TextFieldWithTermVectors(String,String)",8,11
org.apache.mahout.utils.vectors.lucene.DriverTest.sequenceFileDictionary(),49,169
org.apache.mahout.math.jet.stat.ProbabilityTest.testNormalCdf(),11,32
org.apache.mahout.math.jet.stat.ProbabilityTest.testBetaCdf(),18,46
org.apache.mahout.math.jet.stat.ProbabilityTest.testLogGamma(),7,13
org.apache.mahout.math.jet.random.NegativeBinomialTest.testDistributionFunctions(),38,74
org.apache.mahout.math.MatrixTimesOps.timesRight(Matrix),4,6
org.apache.mahout.math.MatrixTimesOps.timesLeft(Matrix),5,7
org.apache.mahout.clustering.iterator.ClusterWritable.ClusterWritable(Cluster),3,4
org.apache.mahout.clustering.iterator.ClusterWritable.ClusterWritable(),2,2
org.apache.mahout.clustering.iterator.ClusterWritable.getValue(),2,3
org.apache.mahout.clustering.iterator.ClusterWritable.setValue(Cluster),3,6
org.apache.mahout.clustering.iterator.ClusterWritable.write(DataOutput),7,8
org.apache.mahout.clustering.iterator.ClusterWritable.readFields(DataInput),9,10
org.apache.mahout.clustering.OnlineGaussianAccumulator.getN(),2,2
org.apache.mahout.clustering.OnlineGaussianAccumulator.getMean(),2,3
org.apache.mahout.clustering.OnlineGaussianAccumulator.getStd(),8,8
"org.apache.mahout.clustering.OnlineGaussianAccumulator.observe(Vector,double)",15,40
org.apache.mahout.clustering.OnlineGaussianAccumulator.compute(),1,1
org.apache.mahout.clustering.OnlineGaussianAccumulator.getAverageStd(),6,11
org.apache.mahout.clustering.OnlineGaussianAccumulator.getVariance(),2,3
org.apache.mahout.math.random.PoissonSamplerTest.setUp(),5,5
org.apache.mahout.math.random.PoissonSamplerTest.testBasics(),7,9
"org.apache.mahout.math.random.PoissonSamplerTest.checkDistribution(Sampler<Double>,double)",20,35
"org.apache.mahout.cf.taste.hadoop.preparation.ToItemVectorsMapper.map(VarLongWritable,VectorWritable,Context)",34,80
org.apache.mahout.math.QR.getQ(),1,1
org.apache.mahout.math.QR.getR(),1,1
org.apache.mahout.math.QR.hasFullRank(),1,1
org.apache.mahout.math.QR.solve(Matrix),2,3
org.apache.mahout.math.TestSparseMatrix.matrixFactory(double[][]),11,33
org.apache.mahout.math.TestSparseMatrix.add(),9,36
org.apache.mahout.math.TestSparseMatrix.testSparseCopy(),19,81
org.apache.mahout.math.TestSparseMatrix.createSparseMatrixWithEmptyRow(),14,34
org.apache.mahout.clustering.lda.cvb.CachingCVB0Mapper.getModelTrainer(),2,6
org.apache.mahout.clustering.lda.cvb.CachingCVB0Mapper.getMaxIters(),2,4
org.apache.mahout.clustering.lda.cvb.CachingCVB0Mapper.getNumTopics(),2,4
org.apache.mahout.clustering.lda.cvb.CachingCVB0Mapper.setup(Context),41,182
"org.apache.mahout.clustering.lda.cvb.CachingCVB0Mapper.map(IntWritable,VectorWritable,Context)",18,31
org.apache.mahout.clustering.lda.cvb.CachingCVB0Mapper.cleanup(Context),19,44
org.apache.mahout.math.solver.LSMRTest.basics(),34,79
org.apache.mahout.math.solver.LSMRTest.random(),28,56
org.apache.mahout.math.solver.LSMRTest.hilbert(int),4,6
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageAndStdDev.WeightedRunningAverageAndStdDev(),9,15
"org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageAndStdDev.addDatum(double,double)",7,29
"org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageAndStdDev.removeDatum(double,double)",7,49
"org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageAndStdDev.changeDatum(double,double)",7,7
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageAndStdDev.getStandardDeviation(),9,27
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageAndStdDev.inverse(),6,10
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageAndStdDev.toString(),5,9
"org.apache.mahout.cf.taste.hadoop.als.MultithreadedSharingMapper<K1,V1,K2,V2>.run(Context)",24,66
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator.LongPrimitiveArrayIterator(long[]),16,27
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator.hasNext(),2,2
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator.next(),0,0
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator.nextLong(),5,7
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator.peek(),6,8
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator.remove(),4,4
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator.skip(int),2,2
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator.toString(),4,5
org.apache.mahout.math.solver.JacobiConditioner.JacobiConditioner(Matrix),16,25
org.apache.mahout.math.solver.JacobiConditioner.precondition(Vector),5,6
org.apache.mahout.math.jet.random.AbstractDistribution.AbstractDistribution(),4,4
org.apache.mahout.math.jet.random.AbstractDistribution.getRandomGenerator(),2,5
org.apache.mahout.math.jet.random.AbstractDistribution.randomDouble(),2,3
org.apache.mahout.math.jet.random.AbstractDistribution.apply(double),2,2
org.apache.mahout.math.jet.random.AbstractDistribution.apply(int),2,2
org.apache.mahout.math.jet.random.AbstractDistribution.nextDouble(),4,5
org.apache.mahout.math.jet.random.AbstractDistribution.nextInt(),7,7
org.apache.mahout.math.jet.random.AbstractDistribution.setRandomGenerator(Random),8,19
org.apache.mahout.math.Algebra.Algebra(),1,1
"org.apache.mahout.math.Algebra.mult(Matrix,Vector)",15,29
"org.apache.mahout.math.Algebra.hypot(double,double)",6,16
org.apache.mahout.math.Algebra.getNorm(Matrix),22,37
"org.apache.mahout.cf.taste.impl.model.BooleanPreference.BooleanPreference(long,long)",3,7
org.apache.mahout.cf.taste.impl.model.BooleanPreference.getUserID(),1,2
org.apache.mahout.cf.taste.impl.model.BooleanPreference.getItemID(),1,2
org.apache.mahout.cf.taste.impl.model.BooleanPreference.getValue(),1,1
org.apache.mahout.cf.taste.impl.model.BooleanPreference.setValue(float),5,6
org.apache.mahout.cf.taste.impl.model.BooleanPreference.toString(),4,7
org.apache.mahout.math.LengthCachingVector.getLengthSquared(),12,14
org.apache.mahout.math.LengthCachingVector.invalidateCachedLength(),8,9
"org.apache.mahout.common.parameters.PathParameter.PathParameter(String,String,Configuration,Path,String)",10,20
org.apache.mahout.common.parameters.PathParameter.setStringValue(String),4,10
org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer.AbstractFactorizer(DataModel),14,26
org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer.AbstractFactorizer(DataModel).$1.call(),6,6
org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer.buildMappings(),13,26
"org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer.createFactorization(double[][],double[][])",6,16
org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer.userIndex(long),5,24
org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer.itemIndex(long),5,24
"org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer.createIDMapping(int,LongPrimitiveIterator)",9,23
org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer.refresh(Collection<Refreshable>),5,8
org.apache.mahout.clustering.canopy.CanopyReducer.getCanopyClusterer(),2,6
"org.apache.mahout.clustering.canopy.CanopyReducer.reduce(Text,Iterable<VectorWritable>,Context)",24,52
org.apache.mahout.clustering.canopy.CanopyReducer.setup(Context),15,30
"org.apache.mahout.cf.taste.impl.common.jdbc.ResultSetIterator<T>.ResultSetIterator(DataSource,String)",15,29
"org.apache.mahout.cf.taste.impl.common.jdbc.ResultSetIterator<T>.ResultSetIterator(DataSource,String).$1.apply(ResultSet)",9,11
org.apache.mahout.cf.taste.impl.common.jdbc.ResultSetIterator<T>.delegate(),2,3
org.apache.mahout.cf.taste.impl.common.jdbc.ResultSetIterator<T>.parseElement(ResultSet),6,8
org.apache.mahout.cf.taste.impl.common.jdbc.ResultSetIterator<T>.skip(int),7,10
org.apache.mahout.cf.taste.impl.common.AbstractLongPrimitiveIterator.next(),0,0
"org.apache.mahout.math.AbstractVectorTest<T>.checkIterator(Iterator<Vector.Element>,double[])",11,25
org.apache.mahout.math.AbstractVectorTest<T>.vectorToTest(int),3,3
org.apache.mahout.math.AbstractVectorTest<T>.testSimpleOps(),60,427
org.apache.mahout.math.AbstractVectorTest<T>.generateTestVector(int),4,5
org.apache.mahout.math.AbstractVectorTest<T>.getTestVector(),2,4
org.apache.mahout.math.AbstractVectorTest<T>.setUp(),7,14
org.apache.mahout.math.AbstractVectorTest<T>.testCardinality(),4,6
org.apache.mahout.math.AbstractVectorTest<T>.testIterator(),17,82
org.apache.mahout.math.AbstractVectorTest<T>.testIteratorSet(),10,30
org.apache.mahout.math.AbstractVectorTest<T>.testCopy(),7,13
org.apache.mahout.math.AbstractVectorTest<T>.testGet(),5,10
org.apache.mahout.math.AbstractVectorTest<T>.testGetOver(),2,4
org.apache.mahout.math.AbstractVectorTest<T>.testGetUnder(),1,2
org.apache.mahout.math.AbstractVectorTest<T>.testSet(),6,18
org.apache.mahout.math.AbstractVectorTest<T>.testSize(),6,8
org.apache.mahout.math.AbstractVectorTest<T>.testViewPart(),9,14
org.apache.mahout.math.AbstractVectorTest<T>.testViewPartUnder(),4,6
org.apache.mahout.math.AbstractVectorTest<T>.testViewPartOver(),2,4
org.apache.mahout.math.AbstractVectorTest<T>.testViewPartCardinality(),3,5
org.apache.mahout.math.AbstractVectorTest<T>.testSparseDoubleVectorInt(),9,16
org.apache.mahout.math.AbstractVectorTest<T>.testDot(),6,12
org.apache.mahout.math.AbstractVectorTest<T>.testDot2(),7,15
org.apache.mahout.math.AbstractVectorTest<T>.testDotCardinality(),6,9
org.apache.mahout.math.AbstractVectorTest<T>.testNormalize(),12,20
org.apache.mahout.math.AbstractVectorTest<T>.testMinus(),9,61
org.apache.mahout.math.AbstractVectorTest<T>.testPlusDouble(),8,21
org.apache.mahout.math.AbstractVectorTest<T>.testPlusVector(),8,23
org.apache.mahout.math.AbstractVectorTest<T>.testPlusVectorCardinality(),6,10
org.apache.mahout.math.AbstractVectorTest<T>.testTimesDouble(),8,21
org.apache.mahout.math.AbstractVectorTest<T>.testDivideDouble(),8,21
org.apache.mahout.math.AbstractVectorTest<T>.testTimesVector(),8,24
org.apache.mahout.math.AbstractVectorTest<T>.testTimesVectorCardinality(),6,10
org.apache.mahout.math.AbstractVectorTest<T>.testZSum(),8,14
org.apache.mahout.math.AbstractVectorTest<T>.testGetDistanceSquared(),14,30
org.apache.mahout.math.AbstractVectorTest<T>.testAssignDouble(),8,11
org.apache.mahout.math.AbstractVectorTest<T>.testAssignDoubleArray(),10,16
org.apache.mahout.math.AbstractVectorTest<T>.testAssignDoubleArrayCardinality(),5,10
org.apache.mahout.math.AbstractVectorTest<T>.testAssignVector(),11,17
org.apache.mahout.math.AbstractVectorTest<T>.testAssignVectorCardinality(),6,11
org.apache.mahout.math.AbstractVectorTest<T>.testAssignUnaryFunction(),12,16
org.apache.mahout.math.AbstractVectorTest<T>.testAssignBinaryFunction(),12,20
org.apache.mahout.math.AbstractVectorTest<T>.testAssignBinaryFunction2(),12,19
org.apache.mahout.math.AbstractVectorTest<T>.testAssignBinaryFunction3(),12,19
org.apache.mahout.math.AbstractVectorTest<T>.testLike(),5,10
org.apache.mahout.math.AbstractVectorTest<T>.testCrossProduct(),12,51
org.apache.mahout.math.AbstractVectorTest<T>.testIterators(),12,31
org.apache.mahout.math.AbstractVectorTest<T>.testSmallDistances(),14,41
org.apache.mahout.math.AbstractVectorTest<T>.testToString(),6,22
"org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.NearestNUserNeighborhood(int,UserSimilarity,DataModel)",17,35
"org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.NearestNUserNeighborhood(int,double,UserSimilarity,DataModel)",19,44
"org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.NearestNUserNeighborhood(int,double,UserSimilarity,DataModel,double)",31,77
org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.getUserNeighborhood(long),19,49
org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.toString(),4,5
"org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.Estimator.Estimator(UserSimilarity,long,double)",6,21
org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.Estimator.estimate(Long),8,18
"org.apache.mahout.cf.taste.hadoop.preparation.ToItemVectorsReducer.reduce(IntWritable,Iterable<VectorWritable>,Context)",18,29
"org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserLongPrimitiveIterator.PlusAnonymousUserLongPrimitiveIterator(LongPrimitiveIterator,long)",9,18
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserLongPrimitiveIterator.nextLong(),5,19
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserLongPrimitiveIterator.peek(),5,17
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserLongPrimitiveIterator.hasNext(),3,3
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserLongPrimitiveIterator.remove(),4,4
org.apache.mahout.cf.taste.impl.model.PlusAnonymousUserLongPrimitiveIterator.skip(int),1,1
org.apache.mahout.classifier.df.node.CategoricalNode.CategoricalNode(),2,2
"org.apache.mahout.classifier.df.node.CategoricalNode.CategoricalNode(int,double[],Node[])",5,12
org.apache.mahout.classifier.df.node.CategoricalNode.classify(Instance),11,18
org.apache.mahout.classifier.df.node.CategoricalNode.maxDepth(),5,15
org.apache.mahout.classifier.df.node.CategoricalNode.nbNodes(),4,9
org.apache.mahout.classifier.df.node.CategoricalNode.getType(),2,4
org.apache.mahout.classifier.df.node.CategoricalNode.equals(Object),9,26
org.apache.mahout.classifier.df.node.CategoricalNode.hashCode(),8,25
org.apache.mahout.classifier.df.node.CategoricalNode.getString(),7,16
org.apache.mahout.classifier.df.node.CategoricalNode.readFields(DataInput),11,16
org.apache.mahout.classifier.df.node.CategoricalNode.writeNode(DataOutput),10,15
org.apache.mahout.cf.taste.impl.similarity.UncenteredCosineSimilarity.UncenteredCosineSimilarity(DataModel),14,21
"org.apache.mahout.cf.taste.impl.similarity.UncenteredCosineSimilarity.UncenteredCosineSimilarity(DataModel,Weighting)",16,34
"org.apache.mahout.cf.taste.impl.similarity.UncenteredCosineSimilarity.computeResult(int,double,double,double,double)",12,22
org.apache.mahout.cf.taste.hadoop.ToEntityPrefsMapper.ToEntityPrefsMapper(boolean),5,9
org.apache.mahout.cf.taste.hadoop.ToEntityPrefsMapper.setup(Context),13,27
"org.apache.mahout.cf.taste.hadoop.ToEntityPrefsMapper.map(LongWritable,Text,Context)",32,78
"org.apache.mahout.classifier.df.data.conditions.Lesser.Lesser(int,double)",3,7
org.apache.mahout.classifier.df.data.conditions.Lesser.isTrueFor(Instance),3,5
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.FullRunningAverageAndStdDev(),5,7
"org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.FullRunningAverageAndStdDev(int,double,double,double)",6,11
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.getMk(),0,0
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.getSk(),0,0
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.getStandardDeviation(),4,4
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.addDatum(double),8,21
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.removeDatum(double),7,19
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.changeDatum(double),6,6
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.recomputeStdDev(),6,11
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.inverse(),6,10
org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev.toString(),5,9
"org.apache.mahout.clustering.lda.cvb.CVB0DocInferenceMapper.map(IntWritable,VectorWritable,Context)",24,68
org.apache.mahout.clustering.lda.cvb.CVB0DocInferenceMapper.cleanup(Context),5,6
"org.apache.mahout.common.iterator.SamplingIterable<T>.SamplingIterable(Iterable<>,double)",4,12
org.apache.mahout.common.iterator.SamplingIterable<T>.iterator(),4,8
"org.apache.mahout.common.iterator.SamplingIterable<T>.maybeWrapIterable(Iterable<T>,double)",6,16
org.apache.mahout.common.distance.CosineDistanceMeasure.configure(Configuration),3,3
org.apache.mahout.common.distance.CosineDistanceMeasure.getParameters(),6,6
"org.apache.mahout.common.distance.CosineDistanceMeasure.createParameters(String,Configuration)",7,7
"org.apache.mahout.common.distance.CosineDistanceMeasure.distance(double[],double[])",15,43
"org.apache.mahout.common.distance.CosineDistanceMeasure.distance(Vector,Vector)",19,49
"org.apache.mahout.common.distance.CosineDistanceMeasure.distance(double,Vector,Vector)",18,45
org.apache.mahout.math.SequentialAccessSparseVector.SequentialAccessSparseVector(),6,6
org.apache.mahout.math.SequentialAccessSparseVector.SequentialAccessSparseVector(int),10,13
"org.apache.mahout.math.SequentialAccessSparseVector.SequentialAccessSparseVector(int,int)",8,10
org.apache.mahout.math.SequentialAccessSparseVector.SequentialAccessSparseVector(Vector),28,42
org.apache.mahout.math.SequentialAccessSparseVector.copySortedRandomAccessSparseVector(Vector),25,60
"org.apache.mahout.math.SequentialAccessSparseVector.SequentialAccessSparseVector(SequentialAccessSparseVector,boolean)",9,17
org.apache.mahout.math.SequentialAccessSparseVector.SequentialAccessSparseVector(SequentialAccessSparseVector),10,15
"org.apache.mahout.math.SequentialAccessSparseVector.SequentialAccessSparseVector(int,OrderedIntDoubleMapping)",7,10
"org.apache.mahout.math.SequentialAccessSparseVector.matrixLike(int,int)",5,13
org.apache.mahout.math.SequentialAccessSparseVector.clone(),7,12
org.apache.mahout.math.SequentialAccessSparseVector.mergeUpdates(OrderedIntDoubleMapping),4,7
org.apache.mahout.math.SequentialAccessSparseVector.toString(),3,5
org.apache.mahout.math.SequentialAccessSparseVector.isDense(),1,1
org.apache.mahout.math.SequentialAccessSparseVector.isSequentialAccess(),2,2
org.apache.mahout.math.SequentialAccessSparseVector.getQuick(int),3,4
"org.apache.mahout.math.SequentialAccessSparseVector.setQuick(int,double)",8,11
"org.apache.mahout.math.SequentialAccessSparseVector.incrementQuick(int,double)",7,11
org.apache.mahout.math.SequentialAccessSparseVector.like(),8,12
org.apache.mahout.math.SequentialAccessSparseVector.like(int),5,7
org.apache.mahout.math.SequentialAccessSparseVector.getNumNondefaultElements(),5,6
org.apache.mahout.math.SequentialAccessSparseVector.getNumNonZeroElements(),9,28
org.apache.mahout.math.SequentialAccessSparseVector.getLookupCost(),11,12
org.apache.mahout.math.SequentialAccessSparseVector.getIteratorAdvanceCost(),3,3
org.apache.mahout.math.SequentialAccessSparseVector.isAddConstantTime(),3,3
org.apache.mahout.math.SequentialAccessSparseVector.iterateNonZero(),9,12
org.apache.mahout.math.SequentialAccessSparseVector.iterator(),2,4
org.apache.mahout.math.SequentialAccessSparseVector.NonDefaultIterator.hasNext(),5,5
org.apache.mahout.math.SequentialAccessSparseVector.NonDefaultIterator.next(),4,7
org.apache.mahout.math.SequentialAccessSparseVector.NonDefaultIterator.remove(),4,4
org.apache.mahout.math.SequentialAccessSparseVector.AllIterator.hasNext(),7,7
org.apache.mahout.math.SequentialAccessSparseVector.AllIterator.next(),4,7
org.apache.mahout.math.SequentialAccessSparseVector.AllIterator.remove(),4,4
org.apache.mahout.math.SequentialAccessSparseVector.NonDefaultElement.advanceOffset(),2,3
org.apache.mahout.math.SequentialAccessSparseVector.NonDefaultElement.getNextOffset(),1,2
org.apache.mahout.math.SequentialAccessSparseVector.NonDefaultElement.get(),2,3
org.apache.mahout.math.SequentialAccessSparseVector.NonDefaultElement.index(),4,4
org.apache.mahout.math.SequentialAccessSparseVector.NonDefaultElement.set(double),7,10
org.apache.mahout.math.SequentialAccessSparseVector.AllElement.advanceIndex(),7,12
org.apache.mahout.math.SequentialAccessSparseVector.AllElement.getNextIndex(),1,2
org.apache.mahout.math.SequentialAccessSparseVector.AllElement.get(),8,13
org.apache.mahout.math.SequentialAccessSparseVector.AllElement.index(),1,2
org.apache.mahout.math.SequentialAccessSparseVector.AllElement.set(double),12,28
"org.apache.mahout.math.SequentialAccessSparseVector.OrderedElement.OrderedElement(int,double)",3,7
org.apache.mahout.math.SequentialAccessSparseVector.OrderedElement.compareTo(OrderedElement),12,16
org.apache.mahout.math.SequentialAccessSparseVector.OrderedElement.hashCode(),5,7
org.apache.mahout.math.SequentialAccessSparseVector.OrderedElement.equals(Object),5,9
org.apache.mahout.classifier.naivebayes.test.BayesTestMapper.setup(Context),32,79
"org.apache.mahout.classifier.naivebayes.test.BayesTestMapper.map(Text,VectorWritable,Context)",17,29
"org.apache.mahout.common.parameters.ClassParameter.ClassParameter(String,String,Configuration,Class<>,String)",9,17
org.apache.mahout.common.parameters.ClassParameter.setStringValue(String),7,14
org.apache.mahout.common.parameters.ClassParameter.getStringValue(),3,4
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.CentroidWritable(),2,2
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.CentroidWritable(Centroid),2,6
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.getCentroid(),1,3
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.write(DataOutput),9,24
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.readFields(DataInput),12,32
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.read(DataInput),9,25
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.equals(Object),4,13
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.hashCode(),3,5
org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable.toString(),2,4
org.apache.mahout.common.iterator.CountingIterator.CountingIterator(int),2,2
org.apache.mahout.common.iterator.CountingIterator.computeNext(),4,5
org.apache.mahout.math.list.ObjectArrayList<T>.ObjectArrayList(),5,6
org.apache.mahout.math.list.ObjectArrayList<T>.ObjectArrayList(T[]),27,39
org.apache.mahout.math.list.ObjectArrayList<T>.ObjectArrayList(int),7,10
org.apache.mahout.math.list.ObjectArrayList<T>.add(T),14,22
"org.apache.mahout.math.list.ObjectArrayList<T>.beforeInsert(int,T)",24,65
org.apache.mahout.math.list.ObjectArrayList<T>.clone(),7,9
org.apache.mahout.math.list.ObjectArrayList<T>.copy(),5,8
org.apache.mahout.math.list.ObjectArrayList<T>.elements(),1,2
org.apache.mahout.math.list.ObjectArrayList<T>.elements(T[]),26,39
org.apache.mahout.math.list.ObjectArrayList<T>.ensureCapacity(int),21,35
org.apache.mahout.math.list.ObjectArrayList<T>.equals(Object),10,32
org.apache.mahout.math.list.ObjectArrayList<T>.forEach(ObjectProcedure<T>),5,11
org.apache.mahout.math.list.ObjectArrayList<T>.get(int),7,15
org.apache.mahout.math.list.ObjectArrayList<T>.getQuick(int),3,4
"org.apache.mahout.math.list.ObjectArrayList<T>.indexOfFromTo(T,int,int)",27,65
"org.apache.mahout.math.list.ObjectArrayList<T>.lastIndexOfFromTo(T,int,int)",28,66
"org.apache.mahout.math.list.ObjectArrayList<T>.partFromTo(int,int)",9,17
org.apache.mahout.math.list.ObjectArrayList<T>.reverse(),9,18
"org.apache.mahout.math.list.ObjectArrayList<T>.set(int,T)",17,44
"org.apache.mahout.math.list.ObjectArrayList<T>.setQuick(int,T)",28,46
org.apache.mahout.math.list.ObjectArrayList<T>.trimToSize(),9,12
"org.apache.mahout.math.list.ObjectArrayList<T>.removeFromTo(int,int)",5,6
"org.apache.mahout.math.list.ObjectArrayList<T>.replaceFromWith(int,Collection<T>)",5,5
"org.apache.mahout.math.list.ObjectArrayList<T>.beforeInsertDummies(int,int)",7,7
"org.apache.mahout.math.list.ObjectArrayList<T>.mergeSortFromTo(int,int)",5,5
"org.apache.mahout.math.list.ObjectArrayList<T>.quickSortFromTo(int,int)",5,5
org.apache.mahout.math.list.ObjectArrayList<T>.size(),1,2
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.SparseRowBlockWritable(),4,4
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.SparseRowBlockWritable(int),9,14
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.getRowIndices(),2,4
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.getRows(),2,3
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.readFields(DataInput),16,40
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.write(DataOutput),14,25
"org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.plusRow(int,Vector)",22,48
"org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.insertIntoPos(int,int,Vector)",16,58
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.plusBlock(SparseRowBlockWritable),29,65
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.getNumRows(),2,4
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockWritable.clear(),4,5
org.apache.mahout.cf.taste.impl.model.MySQLJDBCIDMigrator.MySQLJDBCIDMigrator(DataSource),8,13
"org.apache.mahout.cf.taste.impl.model.MySQLJDBCIDMigrator.MySQLJDBCIDMigrator(DataSource,String,String,String)",12,30
org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev.getStandardDeviation(),3,5
org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev.inverse(),5,5
"org.apache.mahout.cf.taste.impl.recommender.svd.SVDPreference.SVDPreference(long,long,float,double)",7,12
org.apache.mahout.cf.taste.impl.recommender.svd.SVDPreference.getCache(),1,2
org.apache.mahout.cf.taste.impl.recommender.svd.SVDPreference.setCache(double),6,11
org.apache.mahout.math.random.Normal.Normal(),1,1
"org.apache.mahout.math.random.Normal.Normal(double,double)",2,4
org.apache.mahout.math.random.Normal.sample(),4,4
"org.apache.mahout.classifier.sgd.PriorFunction.age(double,double,double)",12,25
org.apache.mahout.classifier.sgd.PriorFunction.logP(double),10,15
org.apache.mahout.clustering.iterator.CIMapper.setup(Context),19,40
"org.apache.mahout.clustering.iterator.CIMapper.map(WritableComparable<>,VectorWritable,Context)",19,29
org.apache.mahout.clustering.iterator.CIMapper.cleanup(Context),15,30
org.apache.mahout.cf.taste.impl.common.RunningAverage.addDatum(double),10,14
org.apache.mahout.cf.taste.impl.common.RunningAverage.removeDatum(double),11,17
org.apache.mahout.cf.taste.impl.common.RunningAverage.changeDatum(double),12,18
org.apache.mahout.cf.taste.impl.common.RunningAverage.getCount(),1,1
org.apache.mahout.cf.taste.impl.common.RunningAverage.getAverage(),1,1
org.apache.mahout.cf.taste.impl.common.RunningAverage.inverse(),8,9
org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity.LogLikelihoodSimilarity(DataModel),5,9
org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity.setPreferenceInferrer(PreferenceInferrer),6,9
"org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity.userSimilarity(long,long)",17,85
"org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity.itemSimilarity(long,long)",10,32
"org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity.itemSimilarities(long,long[])",13,40
"org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity.doItemSimilarity(long,long,long,long)",13,50
org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity.refresh(Collection<Refreshable>),9,17
org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity.toString(),6,9
"org.apache.mahout.math.decomposer.hebbian.HebbianUpdater.update(Vector,Vector,TrainingState)",28,166
"org.apache.mahout.math.decomposer.hebbian.HebbianUpdater.updateTrainingProjectionsVector(TrainingState,Vector,int)",12,39
org.apache.mahout.common.lucene.TokenStreamIterator.TokenStreamIterator(TokenStream),3,11
org.apache.mahout.common.lucene.TokenStreamIterator.computeNext(),13,23
"org.apache.mahout.cf.taste.recommender.Rescorer<T>.rescore(T,double)",9,16
org.apache.mahout.cf.taste.recommender.Rescorer<T>.isFiltered(T),7,10
org.apache.mahout.cf.taste.model.JDBCDataModel.getDataSource(),5,9
org.apache.mahout.cf.taste.model.JDBCDataModel.exportWithPrefs(),16,19
org.apache.mahout.cf.taste.model.JDBCDataModel.exportWithIDsOnly(),6,7
"org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.RatingSGDFactorizer(DataModel,int,int)",10,19
"org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.RatingSGDFactorizer(DataModel,int,double,double,double,int,double)",19,56
org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.prepareTraining(),32,146
org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.countPreferences(),13,29
org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.cachePreferences(),16,49
org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.shufflePreferences(),12,31
"org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.swapCachedPreferences(int,int)",8,41
org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.factorize(),26,54
org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.getAveragePreference(),15,27
"org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.updateParameters(long,long,float,double)",24,145
"org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer.predictRating(int,int)",9,20
org.apache.mahout.common.StringUtils.StringUtils(),2,2
org.apache.mahout.common.StringUtils.toString(Object),14,23
org.apache.mahout.common.StringUtils.fromString(String),9,17
org.apache.mahout.common.StringUtils.escapeXML(CharSequence),8,9
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.LoglikelihoodSimilarity.similarity(double,double,double,int)",8,28
"org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.IRStatisticsImpl(double,double,double,double,double)",12,67
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.getPrecision(),1,2
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.getRecall(),1,2
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.getFallOut(),1,2
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.getF1Measure(),1,2
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.getFNMeasure(double),4,8
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.getNormalizedDiscountedCumulativeGain(),5,5
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.getReach(),1,2
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.toString(),9,14
org.apache.mahout.math.function.ObjectProcedure<T>.apply(T),25,39
org.apache.mahout.math.jet.stat.Probability.Probability(),1,1
"org.apache.mahout.math.jet.stat.Probability.beta(double,double,double)",11,25
"org.apache.mahout.math.jet.stat.Probability.gamma(double,double,double)",23,55
"org.apache.mahout.math.jet.stat.Probability.negativeBinomial(int,int,double)",32,48
org.apache.mahout.math.jet.stat.Probability.normal(double),3,5
"org.apache.mahout.math.jet.stat.Probability.normal(double,double,double)",24,43
"org.apache.mahout.math.jet.stat.Probability.poisson(int,double)",23,42
org.apache.mahout.math.jet.random.engine.RandomEngine.apply(double),3,3
org.apache.mahout.math.jet.random.engine.RandomEngine.apply(int),2,2
org.apache.mahout.math.jet.random.engine.RandomEngine.nextDouble(),16,31
org.apache.mahout.math.jet.random.engine.RandomEngine.nextFloat(),14,14
org.apache.mahout.math.jet.random.engine.RandomEngine.nextInt(),11,19
org.apache.mahout.math.jet.random.engine.RandomEngine.nextLong(),13,20
org.apache.mahout.math.jet.random.engine.RandomEngine.raw(),18,34
org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms.HmmAlgorithms(),5,5
"org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms.forwardAlgorithm(HmmModel,int[],boolean)",23,50
"org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms.forwardAlgorithm(Matrix,HmmModel,int[],boolean)",45,138
"org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms.backwardAlgorithm(HmmModel,int[],boolean)",25,57
"org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms.backwardAlgorithm(Matrix,HmmModel,int[],boolean)",38,126
"org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms.viterbiAlgorithm(HmmModel,int[],boolean)",33,76
"org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms.viterbiAlgorithm(int[],double[][],int[][],HmmModel,int[],boolean)",59,208
org.apache.mahout.classifier.df.data.DataConverter.DataConverter(Dataset),3,6
org.apache.mahout.classifier.df.data.DataConverter.convert(CharSequence),34,75
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasures.VectorSimilarityMeasures(Class<>),6,9
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasures.getClassname(),4,4
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasures.list(),4,5
org.apache.mahout.cf.taste.hadoop.als.RecommenderJob.main(String[]),9,10
org.apache.mahout.cf.taste.hadoop.als.RecommenderJob.run(String[]),54,190
org.apache.mahout.clustering.lda.cvb.CachingCVB0PerplexityMapper.setup(Context),48,184
org.apache.mahout.clustering.lda.cvb.CachingCVB0PerplexityMapper.cleanup(Context),10,14
"org.apache.mahout.clustering.lda.cvb.CachingCVB0PerplexityMapper.map(IntWritable,VectorWritable,Context)",31,44
"org.apache.mahout.common.mapreduce.MergeVectorsCombiner.reduce(WritableComparable<>,Iterable<VectorWritable>,Context)",14,21
org.apache.mahout.cf.taste.model.DataModel.getUserIDs(),10,13
org.apache.mahout.cf.taste.model.DataModel.getPreferencesFromUser(long),19,29
org.apache.mahout.cf.taste.model.DataModel.getItemIDsFromUser(long),20,30
org.apache.mahout.cf.taste.model.DataModel.getItemIDs(),11,16
org.apache.mahout.cf.taste.model.DataModel.getPreferencesForItem(long),20,32
"org.apache.mahout.cf.taste.model.DataModel.getPreferenceValue(long,long)",21,43
"org.apache.mahout.cf.taste.model.DataModel.getPreferenceTime(long,long)",25,49
org.apache.mahout.cf.taste.model.DataModel.getNumItems(),14,18
org.apache.mahout.cf.taste.model.DataModel.getNumUsers(),10,13
org.apache.mahout.cf.taste.model.DataModel.getNumUsersWithPreferenceFor(long),13,20
"org.apache.mahout.cf.taste.model.DataModel.getNumUsersWithPreferenceFor(long,long)",14,25
"org.apache.mahout.cf.taste.model.DataModel.setPreference(long,long,float)",21,52
"org.apache.mahout.cf.taste.model.DataModel.removePreference(long,long)",18,44
org.apache.mahout.cf.taste.model.DataModel.hasPreferenceValues(),9,11
org.apache.mahout.cf.taste.model.DataModel.getMaxPreference(),39,53
org.apache.mahout.cf.taste.model.DataModel.getMinPreference(),3,4
org.apache.mahout.cf.taste.similarity.precompute.SimilarItemsWriter.open(),1,1
org.apache.mahout.cf.taste.similarity.precompute.SimilarItemsWriter.add(SimilarItems),4,6
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarity.EuclideanDistanceSimilarity(DataModel),14,21
"org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarity.EuclideanDistanceSimilarity(DataModel,Weighting)",16,34
"org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarity.computeResult(int,double,double,double,double)",6,13
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler.PreferenceShuffler(DataModel),10,14
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler.countPreferences(DataModel),13,33
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler.cachePreferences(DataModel),14,44
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler.shuffle(),10,16
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler.swapCachedPreferences(int,int)",14,21
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler.stage(),3,4
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler.get(int),2,2
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler.size(),3,3
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.ParallelSGDFactorizer(DataModel,int,double,int)",30,55
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.ParallelSGDFactorizer(DataModel,int,double,int,double,double,int,double)",17,39
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.ParallelSGDFactorizer(DataModel,int,double,int,double,double,int,double,int)",18,39
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.ParallelSGDFactorizer(DataModel,int,double,int,double,double,int,double,double,double)",19,48
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.ParallelSGDFactorizer(DataModel,int,double,int,double,double,int,double,double,double,int)",20,49
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.initialize(),28,135
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.getMu(int),10,12
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.factorize(),50,87
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.factorize().$1.run(),4,4
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.getAveragePreference(),15,27
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.update(Preference,double)",88,197
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.dot(double[],double[])",6,13
org.apache.mahout.cf.taste.eval.DataModelBuilder.buildDataModel(FastByIDMap<PreferenceArray>),14,31
"org.apache.mahout.cf.taste.impl.model.GenericPreference.GenericPreference(long,long,float)",8,16
org.apache.mahout.cf.taste.impl.model.GenericPreference.getUserID(),1,2
org.apache.mahout.cf.taste.impl.model.GenericPreference.getItemID(),1,2
org.apache.mahout.cf.taste.impl.model.GenericPreference.getValue(),1,2
org.apache.mahout.cf.taste.impl.model.GenericPreference.setValue(float),5,10
org.apache.mahout.cf.taste.impl.model.GenericPreference.toString(),6,10
org.apache.mahout.classifier.sequencelearning.hmm.LossyHmmSerializer.LossyHmmSerializer(),3,3
"org.apache.mahout.classifier.sequencelearning.hmm.LossyHmmSerializer.serialize(HmmModel,DataOutput)",15,38
org.apache.mahout.classifier.sequencelearning.hmm.LossyHmmSerializer.deserialize(DataInput),15,49
org.apache.mahout.cf.taste.hadoop.item.ItemIDIndexMapper.setup(Context),11,17
"org.apache.mahout.cf.taste.hadoop.item.ItemIDIndexMapper.map(LongWritable,Text,Context)",21,44
"org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator<V>.SequenceFileValueIterator(Path,boolean,Configuration)",18,53
org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator<V>.getValueClass(),1,2
org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator<V>.close(),6,7
org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator<V>.computeNext(),18,29
org.apache.mahout.classifier.df.tools.ForestVisualizer.ForestVisualizer(),2,2
"org.apache.mahout.classifier.df.tools.ForestVisualizer.toString(DecisionForest,Dataset,String[])",25,71
"org.apache.mahout.classifier.df.tools.ForestVisualizer.toString(String,String,String[])",13,57
"org.apache.mahout.classifier.df.tools.ForestVisualizer.print(String,String,String[])",13,39
org.apache.mahout.classifier.df.tools.ForestVisualizer.main(String[]),44,189
"org.apache.mahout.cf.taste.recommender.UserBasedRecommender.mostSimilarUserIDs(long,int)",16,30
"org.apache.mahout.cf.taste.recommender.UserBasedRecommender.mostSimilarUserIDs(long,int,Rescorer<LongPair>)",22,45
"org.apache.mahout.common.parameters.DoubleParameter.DoubleParameter(String,String,Configuration,double,String)",8,15
org.apache.mahout.common.parameters.DoubleParameter.setStringValue(String),3,10
org.apache.mahout.cf.taste.impl.common.FastIDSet.FastIDSet(),5,7
org.apache.mahout.cf.taste.impl.common.FastIDSet.FastIDSet(long[]),6,10
org.apache.mahout.cf.taste.impl.common.FastIDSet.FastIDSet(int),5,6
"org.apache.mahout.cf.taste.impl.common.FastIDSet.FastIDSet(int,float)",17,51
org.apache.mahout.cf.taste.impl.common.FastIDSet.find(long),13,47
org.apache.mahout.cf.taste.impl.common.FastIDSet.findForAdd(long),14,77
org.apache.mahout.cf.taste.impl.common.FastIDSet.size(),3,3
org.apache.mahout.cf.taste.impl.common.FastIDSet.isEmpty(),3,3
org.apache.mahout.cf.taste.impl.common.FastIDSet.contains(long),4,7
org.apache.mahout.cf.taste.impl.common.FastIDSet.add(long),26,61
org.apache.mahout.cf.taste.impl.common.FastIDSet.iterator(),3,5
org.apache.mahout.cf.taste.impl.common.FastIDSet.toArray(),8,17
org.apache.mahout.cf.taste.impl.common.FastIDSet.remove(long),7,14
org.apache.mahout.cf.taste.impl.common.FastIDSet.addAll(long[]),2,5
org.apache.mahout.cf.taste.impl.common.FastIDSet.addAll(FastIDSet),6,9
org.apache.mahout.cf.taste.impl.common.FastIDSet.removeAll(long[]),2,5
org.apache.mahout.cf.taste.impl.common.FastIDSet.removeAll(FastIDSet),6,9
org.apache.mahout.cf.taste.impl.common.FastIDSet.retainAll(FastIDSet),10,15
org.apache.mahout.cf.taste.impl.common.FastIDSet.clear(),6,7
org.apache.mahout.cf.taste.impl.common.FastIDSet.growAndRehash(),14,24
org.apache.mahout.cf.taste.impl.common.FastIDSet.rehash(),9,10
org.apache.mahout.cf.taste.impl.common.FastIDSet.rehash(int),12,22
org.apache.mahout.cf.taste.impl.common.FastIDSet.intersectionSize(FastIDSet),16,30
org.apache.mahout.cf.taste.impl.common.FastIDSet.clone(),9,21
org.apache.mahout.cf.taste.impl.common.FastIDSet.hashCode(),5,15
org.apache.mahout.cf.taste.impl.common.FastIDSet.equals(Object),12,48
org.apache.mahout.cf.taste.impl.common.FastIDSet.toString(),10,25
org.apache.mahout.cf.taste.impl.common.FastIDSet.KeyIterator.hasNext(),3,3
org.apache.mahout.cf.taste.impl.common.FastIDSet.KeyIterator.nextLong(),5,8
org.apache.mahout.cf.taste.impl.common.FastIDSet.KeyIterator.peek(),6,8
org.apache.mahout.cf.taste.impl.common.FastIDSet.KeyIterator.goToNext(),4,11
org.apache.mahout.cf.taste.impl.common.FastIDSet.KeyIterator.remove(),9,11
org.apache.mahout.cf.taste.impl.common.FastIDSet.KeyIterator.iterator(),2,4
org.apache.mahout.cf.taste.impl.common.FastIDSet.KeyIterator.skip(int),2,2
org.apache.mahout.classifier.mlp.NeuralNetworkFunctions.$1.apply(double),1,1
"org.apache.mahout.classifier.mlp.NeuralNetworkFunctions.$2.apply(double,double)",3,5
"org.apache.mahout.classifier.mlp.NeuralNetworkFunctions.$3.apply(double,double)",5,11
"org.apache.mahout.classifier.mlp.NeuralNetworkFunctions.$4.apply(double,double)",5,32
org.apache.mahout.classifier.mlp.NeuralNetworkFunctions.getDoubleFunction(String),16,34
org.apache.mahout.classifier.mlp.NeuralNetworkFunctions.getDerivativeDoubleFunction(String),18,35
org.apache.mahout.classifier.mlp.NeuralNetworkFunctions.getDoubleDoubleFunction(String),19,39
org.apache.mahout.classifier.mlp.NeuralNetworkFunctions.getDerivativeDoubleDoubleFunction(String),19,41
org.apache.mahout.classifier.df.mapreduce.MapredOutput.MapredOutput(),2,2
"org.apache.mahout.classifier.df.mapreduce.MapredOutput.MapredOutput(Node,int[])",5,9
org.apache.mahout.classifier.df.mapreduce.MapredOutput.MapredOutput(Node),4,5
org.apache.mahout.classifier.df.mapreduce.MapredOutput.getTree(),2,3
org.apache.mahout.classifier.df.mapreduce.MapredOutput.getPredictions(),1,2
org.apache.mahout.classifier.df.mapreduce.MapredOutput.readFields(DataInput),10,22
org.apache.mahout.classifier.df.mapreduce.MapredOutput.write(DataOutput),8,16
org.apache.mahout.classifier.df.mapreduce.MapredOutput.clone(),5,7
org.apache.mahout.classifier.df.mapreduce.MapredOutput.equals(Object),8,22
org.apache.mahout.classifier.df.mapreduce.MapredOutput.hashCode(),5,17
org.apache.mahout.classifier.df.mapreduce.MapredOutput.toString(),4,6
org.apache.mahout.cf.taste.impl.recommender.EstimatedPreferenceCapper.EstimatedPreferenceCapper(DataModel),7,14
org.apache.mahout.cf.taste.impl.recommender.EstimatedPreferenceCapper.capEstimate(float),4,12
"org.apache.mahout.cf.taste.recommender.Recommender.recommend(long,int)",18,31
"org.apache.mahout.cf.taste.recommender.Recommender.recommend(long,int,boolean)",20,40
"org.apache.mahout.cf.taste.recommender.Recommender.recommend(long,int,IDRescorer)",23,41
"org.apache.mahout.cf.taste.recommender.Recommender.recommend(long,int,IDRescorer,boolean)",10,11
"org.apache.mahout.cf.taste.recommender.Recommender.estimatePreference(long,long)",18,38
"org.apache.mahout.cf.taste.recommender.Recommender.setPreference(long,long,float)",14,29
"org.apache.mahout.cf.taste.recommender.Recommender.removePreference(long,long)",13,24
org.apache.mahout.cf.taste.recommender.Recommender.getDataModel(),6,11
org.apache.mahout.math.FunctionTest.generateData(),27,45
"org.apache.mahout.math.FunctionTest.FunctionTest(DoubleDoubleFunction,String)",4,13
org.apache.mahout.math.FunctionTest.testIsLikeRightPlus(),8,11
org.apache.mahout.math.FunctionTest.testIsLikeLeftMult(),9,13
org.apache.mahout.math.FunctionTest.testIsLikeRightMult(),8,11
org.apache.mahout.math.FunctionTest.testIsCommutative(),10,16
org.apache.mahout.math.FunctionTest.testIsAssociative(),10,21
org.apache.mahout.math.FunctionTest.testIsDensifying(),6,9
"org.apache.mahout.common.distance.DistanceMeasure.distance(Vector,Vector)",13,23
"org.apache.mahout.common.distance.DistanceMeasure.distance(double,Vector,Vector)",19,35
org.apache.mahout.common.MemoryUtil.MemoryUtil(),2,2
org.apache.mahout.common.MemoryUtil.logMemoryStatistics(),12,44
org.apache.mahout.common.MemoryUtil.startMemoryLogger(long),26,53
org.apache.mahout.common.MemoryUtil.startMemoryLogger(long).$1.newThread(Runnable),5,8
org.apache.mahout.common.MemoryUtil.startMemoryLogger(long).$2.run(),4,4
org.apache.mahout.common.MemoryUtil.startMemoryLogger(),9,14
org.apache.mahout.common.MemoryUtil.stopMemoryLogger(),10,20
"org.apache.mahout.classifier.df.split.DefaultIgSplit.computeSplit(Data,int)",9,31
"org.apache.mahout.classifier.df.split.DefaultIgSplit.categoricalIg(Data,int)",16,40
"org.apache.mahout.classifier.df.split.DefaultIgSplit.numericalIg(Data,int,double)",17,50
org.apache.mahout.classifier.df.split.DefaultIgSplit.entropy(Data),16,43
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.WeightedRunningAverage(),5,6
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.addDatum(double),2,6
"org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.addDatum(double,double)",5,25
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.removeDatum(double),2,6
"org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.removeDatum(double,double)",5,26
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.changeDatum(double),3,6
"org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.changeDatum(double,double)",9,18
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.getTotalWeight(),2,4
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.getCount(),3,3
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.getAverage(),1,2
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.inverse(),4,6
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.toString(),3,5
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.GenericItemPreferenceArray(int),11,14
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.GenericItemPreferenceArray(List<>),16,36
"org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.GenericItemPreferenceArray(long[],long,float[])",9,13
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.length(),2,3
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.get(int),2,3
"org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.set(int,Preference)",8,11
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.getUserID(int),2,2
"org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.setUserID(int,long)",3,5
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.getItemID(int),1,1
"org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.setItemID(int,long)",2,4
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.getIDs(),1,1
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.getValue(int),2,2
"org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.setValue(int,float)",3,5
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.sortByUser(),3,5
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.sortByItem(),2,2
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.sortByValue(),3,5
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.sortByValueReversed(),4,7
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.hasPrefWithUserID(long),3,5
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.hasPrefWithItemID(long),2,4
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.lateralSort(int),14,30
"org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.isLess(int,int,int)",8,14
"org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.swap(int,int)",4,13
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.clone(),7,13
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.hashCode(),5,10
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.equals(Object),9,26
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.iterator(),9,12
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.iterator().$1.apply(Integer),4,5
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.toString(),11,43
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.PreferenceView.PreferenceView(int),2,2
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.PreferenceView.getUserID(),5,6
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.PreferenceView.getItemID(),4,6
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.PreferenceView.getValue(),2,2
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArray.PreferenceView.setValue(float),3,5
"org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.Factorization(FastByIDMap<Integer>,FastByIDMap<Integer>,double[][],double[][])",10,35
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.allUserFeatures(),2,4
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.getUserFeatures(long),6,17
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.allItemFeatures(),2,4
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.getItemFeatures(long),6,17
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.userIndex(long),5,15
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.getUserIDMappings(),8,10
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.getUserIDMappingKeys(),7,10
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.itemIndex(long),5,15
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.getItemIDMappings(),8,10
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.getItemIDMappingKeys(),7,10
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.numFeatures(),4,8
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.numUsers(),5,5
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.numItems(),5,5
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.equals(Object),9,29
org.apache.mahout.cf.taste.impl.recommender.svd.Factorization.hashCode(),8,34
org.apache.mahout.cf.taste.impl.recommender.svd.PersistenceStrategy.load(),6,12
org.apache.mahout.cf.taste.impl.recommender.svd.PersistenceStrategy.maybePersist(Factorization),11,16
"org.apache.mahout.cf.taste.recommender.IDRescorer.rescore(long,double)",12,19
org.apache.mahout.cf.taste.recommender.IDRescorer.isFiltered(long),10,13
"org.apache.mahout.vectorizer.VectorizerConfig.VectorizerConfig(Configuration,String,String,String,boolean,boolean,int)",13,39
org.apache.mahout.vectorizer.VectorizerConfig.getConf(),2,3
org.apache.mahout.vectorizer.VectorizerConfig.setConf(Configuration),3,6
org.apache.mahout.vectorizer.VectorizerConfig.getAnalyzerClassName(),3,5
org.apache.mahout.vectorizer.VectorizerConfig.setAnalyzerClassName(String),4,10
org.apache.mahout.vectorizer.VectorizerConfig.getEncoderName(),3,5
org.apache.mahout.vectorizer.VectorizerConfig.setEncoderName(String),4,10
org.apache.mahout.vectorizer.VectorizerConfig.isSequentialAccess(),2,4
org.apache.mahout.vectorizer.VectorizerConfig.setSequentialAccess(boolean),3,9
org.apache.mahout.vectorizer.VectorizerConfig.getTfDirName(),3,5
org.apache.mahout.vectorizer.VectorizerConfig.setTfDirName(String),4,10
org.apache.mahout.vectorizer.VectorizerConfig.isNamedVectors(),2,4
org.apache.mahout.vectorizer.VectorizerConfig.setNamedVectors(boolean),3,9
org.apache.mahout.vectorizer.VectorizerConfig.getCardinality(),1,2
org.apache.mahout.vectorizer.VectorizerConfig.setCardinality(int),2,5
org.apache.mahout.vectorizer.VectorizerConfig.getEncoderClass(),2,3
org.apache.mahout.vectorizer.VectorizerConfig.setEncoderClass(String),3,6
org.apache.mahout.vectorizer.VectorizerConfig.getMinSupport(),2,4
org.apache.mahout.vectorizer.VectorizerConfig.setMinSupport(int),3,9
org.apache.mahout.vectorizer.VectorizerConfig.getMaxNGramSize(),3,6
org.apache.mahout.vectorizer.VectorizerConfig.setMaxNGramSize(int),4,13
org.apache.mahout.vectorizer.VectorizerConfig.getMinLLRValue(),3,6
org.apache.mahout.vectorizer.VectorizerConfig.setMinLLRValue(float),4,13
org.apache.mahout.vectorizer.VectorizerConfig.getNormPower(),2,4
org.apache.mahout.vectorizer.VectorizerConfig.setNormPower(float),3,9
org.apache.mahout.vectorizer.VectorizerConfig.isLogNormalize(),2,4
org.apache.mahout.vectorizer.VectorizerConfig.setLogNormalize(boolean),3,9
org.apache.mahout.vectorizer.VectorizerConfig.getNumReducers(),2,4
org.apache.mahout.vectorizer.VectorizerConfig.setNumReducers(int),3,9
org.apache.mahout.vectorizer.VectorizerConfig.getChunkSizeInMegabytes(),3,6
org.apache.mahout.vectorizer.VectorizerConfig.setChunkSizeInMegabytes(int),4,13
org.apache.mahout.ep.Payload<T>.copy(),2,2
org.apache.mahout.ep.Payload<T>.update(double[]),2,2
org.apache.mahout.classifier.sgd.ElasticBandPrior.ElasticBandPrior(),5,5
org.apache.mahout.classifier.sgd.ElasticBandPrior.ElasticBandPrior(double),5,9
"org.apache.mahout.classifier.sgd.ElasticBandPrior.age(double,double,double)",14,29
org.apache.mahout.classifier.sgd.ElasticBandPrior.logP(double),4,8
org.apache.mahout.classifier.sgd.ElasticBandPrior.write(DataOutput),6,9
org.apache.mahout.classifier.sgd.ElasticBandPrior.readFields(DataInput),7,12
org.apache.mahout.cf.taste.common.NoSuchUserException.NoSuchUserException(),2,2
org.apache.mahout.cf.taste.common.NoSuchUserException.NoSuchUserException(long),4,6
org.apache.mahout.cf.taste.common.NoSuchUserException.NoSuchUserException(String),4,5
"org.apache.mahout.classifier.df.data.conditions.Equals.Equals(int,double)",3,7
org.apache.mahout.classifier.df.data.conditions.Equals.isTrueFor(Instance),3,5
"org.apache.mahout.math.hadoop.MatrixMultiplicationJob.createMatrixMultiplyJobConf(Path,Path,Path,int)",8,23
"org.apache.mahout.math.hadoop.MatrixMultiplicationJob.createMatrixMultiplyJobConf(Configuration,Path,Path,Path,int)",31,112
org.apache.mahout.math.hadoop.MatrixMultiplicationJob.main(String[]),10,11
org.apache.mahout.math.hadoop.MatrixMultiplicationJob.run(String[]),32,133
org.apache.mahout.math.hadoop.MatrixMultiplicationJob.MatrixMultiplyMapper.configure(JobConf),8,10
"org.apache.mahout.math.hadoop.MatrixMultiplicationJob.MatrixMultiplyMapper.map(IntWritable,TupleWritable,OutputCollector<IntWritable,VectorWritable>,Reporter)",19,51
"org.apache.mahout.math.hadoop.MatrixMultiplicationJob.MatrixMultiplicationReducer.reduce(IntWritable,Iterator<VectorWritable>,OutputCollector<IntWritable,VectorWritable>,Reporter)",19,38
"org.apache.mahout.classifier.df.data.conditions.GreaterOrEquals.GreaterOrEquals(int,double)",3,7
org.apache.mahout.classifier.df.data.conditions.GreaterOrEquals.isTrueFor(Instance),3,3
org.apache.mahout.math.list.ObjectArrayListTest.emptyOnCreation(),9,25
org.apache.mahout.math.list.ObjectArrayListTest.correctSizeAfterInstantiation(),9,17
org.apache.mahout.math.list.ObjectArrayListTest.correctSizeAfterInstantiationWithElements(),10,19
org.apache.mahout.cf.taste.impl.similarity.AbstractItemSimilarity.AbstractItemSimilarity(DataModel),11,27
org.apache.mahout.cf.taste.impl.similarity.AbstractItemSimilarity.getDataModel(),2,6
org.apache.mahout.cf.taste.impl.similarity.AbstractItemSimilarity.allSimilarItemIDs(long),14,37
org.apache.mahout.cf.taste.impl.similarity.AbstractItemSimilarity.refresh(Collection<Refreshable>),5,8
"org.apache.mahout.math.hadoop.stats.StandardDeviationCalculatorReducer.reduce(IntWritable,Iterable<DoubleWritable>,Context)",11,22
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.clone(),14,38
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.assign(HmmModel),16,50
"org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.HmmModel(int,int,long)",26,60
"org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.HmmModel(int,int)",11,21
"org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.HmmModel(Matrix,Matrix,Vector)",26,61
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.initRandomParameters(long),32,113
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getNrOfHiddenStates(),3,6
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getNrOfOutputStates(),3,6
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getTransitionMatrix(),7,14
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getEmissionMatrix(),8,14
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getInitialProbabilities(),9,15
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getHiddenStateNames(),7,14
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.registerHiddenStateNames(String[]),13,27
"org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.registerHiddenStateNames(Map<String,Integer>)",11,26
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getHiddenStateName(int),10,20
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getHiddenStateID(String),10,25
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getOutputStateNames(),7,14
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.registerOutputStateNames(String[]),14,27
"org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.registerOutputStateNames(Map<String,Integer>)",12,26
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getOutputStateName(int),10,20
org.apache.mahout.classifier.sequencelearning.hmm.HmmModel.getOutputStateID(String),10,25
org.apache.mahout.clustering.classify.ClusterClassificationConfigKeys.ClusterClassificationConfigKeys(),4,4
org.apache.mahout.clustering.spectral.IntDoublePairWritable.IntDoublePairWritable(),2,2
"org.apache.mahout.clustering.spectral.IntDoublePairWritable.IntDoublePairWritable(int,double)",4,4
org.apache.mahout.clustering.spectral.IntDoublePairWritable.setKey(int),2,3
org.apache.mahout.clustering.spectral.IntDoublePairWritable.setValue(double),2,3
org.apache.mahout.clustering.spectral.IntDoublePairWritable.readFields(DataInput),7,9
org.apache.mahout.clustering.spectral.IntDoublePairWritable.write(DataOutput),6,8
org.apache.mahout.clustering.spectral.IntDoublePairWritable.getKey(),1,2
org.apache.mahout.clustering.spectral.IntDoublePairWritable.getValue(),1,2
org.apache.mahout.cf.taste.impl.similarity.CityBlockSimilarity.CityBlockSimilarity(DataModel),5,9
org.apache.mahout.cf.taste.impl.similarity.CityBlockSimilarity.setPreferenceInferrer(PreferenceInferrer),6,9
org.apache.mahout.cf.taste.impl.similarity.CityBlockSimilarity.refresh(Collection<Refreshable>),9,19
"org.apache.mahout.cf.taste.impl.similarity.CityBlockSimilarity.itemSimilarity(long,long)",11,38
"org.apache.mahout.cf.taste.impl.similarity.CityBlockSimilarity.itemSimilarities(long,long[])",14,45
"org.apache.mahout.cf.taste.impl.similarity.CityBlockSimilarity.userSimilarity(long,long)",12,57
"org.apache.mahout.cf.taste.impl.similarity.CityBlockSimilarity.doSimilarity(int,int,int)",17,36
"org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.ComplementaryThetaTrainer(Vector,Vector,double)",18,46
"org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.train(int,Vector)",26,56
org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.alphaI(),1,2
org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.numFeatures(),2,4
org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.labelWeight(int),3,6
org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.totalWeightSum(),3,6
org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.featureWeight(int),3,6
"org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.updatePerLabelThetaNormalizer(int,double)",20,31
org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer.retrievePerLabelThetaNormalizer(),6,9
org.apache.mahout.cf.taste.model.PreferenceArray.length(),3,4
org.apache.mahout.cf.taste.model.PreferenceArray.get(int),6,8
"org.apache.mahout.cf.taste.model.PreferenceArray.set(int,Preference)",7,11
org.apache.mahout.cf.taste.model.PreferenceArray.getUserID(int),4,5
"org.apache.mahout.cf.taste.model.PreferenceArray.setUserID(int,long)",6,11
org.apache.mahout.cf.taste.model.PreferenceArray.getItemID(int),4,5
"org.apache.mahout.cf.taste.model.PreferenceArray.setItemID(int,long)",6,11
org.apache.mahout.cf.taste.model.PreferenceArray.getIDs(),2,2
org.apache.mahout.cf.taste.model.PreferenceArray.getValue(int),4,6
"org.apache.mahout.cf.taste.model.PreferenceArray.setValue(int,float)",6,13
org.apache.mahout.cf.taste.model.PreferenceArray.clone(),6,6
org.apache.mahout.cf.taste.model.PreferenceArray.sortByUser(),6,7
org.apache.mahout.cf.taste.model.PreferenceArray.sortByItem(),6,7
org.apache.mahout.cf.taste.model.PreferenceArray.sortByValue(),7,8
org.apache.mahout.cf.taste.model.PreferenceArray.sortByValueReversed(),8,9
org.apache.mahout.cf.taste.model.PreferenceArray.hasPrefWithUserID(long),6,10
org.apache.mahout.cf.taste.model.PreferenceArray.hasPrefWithItemID(long),6,10
"org.apache.mahout.clustering.canopy.CanopyClusterer.CanopyClusterer(DistanceMeasure,double,double)",4,7
org.apache.mahout.clustering.canopy.CanopyClusterer.getT1(),0,0
org.apache.mahout.clustering.canopy.CanopyClusterer.getT2(),0,0
org.apache.mahout.clustering.canopy.CanopyClusterer.getT3(),0,0
org.apache.mahout.clustering.canopy.CanopyClusterer.getT4(),0,0
org.apache.mahout.clustering.canopy.CanopyClusterer.useT3T4(),5,5
"org.apache.mahout.clustering.canopy.CanopyClusterer.addPointToCanopies(Vector,Collection<Canopy>)",41,88
"org.apache.mahout.clustering.canopy.CanopyClusterer.canopyCovers(Canopy,Vector)",10,17
"org.apache.mahout.clustering.canopy.CanopyClusterer.createCanopies(List<Vector>,DistanceMeasure,double,double)",39,111
org.apache.mahout.clustering.canopy.CanopyClusterer.getCenters(Iterable<Canopy>),15,31
org.apache.mahout.clustering.canopy.CanopyClusterer.updateCentroids(Iterable<Canopy>),12,20
org.apache.mahout.clustering.canopy.CanopyClusterer.setT3(double),1,1
org.apache.mahout.clustering.canopy.CanopyClusterer.setT4(double),1,1
"org.apache.mahout.cf.taste.similarity.UserSimilarity.userSimilarity(long,long)",21,39
org.apache.mahout.cf.taste.similarity.UserSimilarity.setPreferenceInferrer(PreferenceInferrer),9,19
"org.apache.mahout.cf.taste.similarity.PreferenceInferrer.inferPreference(long,long)",14,28
org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarity.SpearmanCorrelationSimilarity(DataModel),7,13
"org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarity.userSimilarity(long,long)",40,158
org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarity.setPreferenceInferrer(PreferenceInferrer),6,9
org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarity.refresh(Collection<Refreshable>),9,17
org.apache.mahout.common.IntPairWritable.IntPairWritable(),3,4
org.apache.mahout.common.IntPairWritable.IntPairWritable(IntPairWritable),6,11
"org.apache.mahout.common.IntPairWritable.IntPairWritable(int,int)",3,3
"org.apache.mahout.common.IntPairWritable.set(int,int)",2,2
org.apache.mahout.common.IntPairWritable.setFirst(int),1,1
org.apache.mahout.common.IntPairWritable.getFirst(),0,0
org.apache.mahout.common.IntPairWritable.setSecond(int),2,2
org.apache.mahout.common.IntPairWritable.getSecond(),1,1
org.apache.mahout.common.IntPairWritable.readFields(DataInput),5,6
org.apache.mahout.common.IntPairWritable.write(DataOutput),4,5
org.apache.mahout.common.IntPairWritable.hashCode(),3,5
org.apache.mahout.common.IntPairWritable.equals(Object),6,16
org.apache.mahout.common.IntPairWritable.compareTo(BinaryComparable),6,7
org.apache.mahout.common.IntPairWritable.clone(),4,4
org.apache.mahout.common.IntPairWritable.toString(),1,2
org.apache.mahout.common.IntPairWritable.getBytes(),1,1
org.apache.mahout.common.IntPairWritable.getLength(),2,3
"org.apache.mahout.common.IntPairWritable.putInt(int,byte[],int)",2,4
"org.apache.mahout.common.IntPairWritable.getInt(byte[],int)",2,5
org.apache.mahout.common.IntPairWritable.Comparator.Comparator(),3,3
"org.apache.mahout.common.IntPairWritable.Comparator.compare(byte[],int,int,byte[],int,int)",1,2
"org.apache.mahout.common.IntPairWritable.Comparator.doCompare(byte[],int,byte[],int)",3,10
"org.apache.mahout.common.IntPairWritable.Comparator.compareInts(byte[],int,byte[],int)",9,10
org.apache.mahout.common.IntPairWritable.FirstGroupingComparator.FirstGroupingComparator(),3,3
"org.apache.mahout.common.IntPairWritable.FirstGroupingComparator.compare(byte[],int,int,byte[],int,int)",5,13
"org.apache.mahout.common.IntPairWritable.FirstGroupingComparator.compare(Object,Object)",5,13
"org.apache.mahout.common.IntPairWritable.Frequency.Frequency(IntPairWritable,double)",4,11
org.apache.mahout.common.IntPairWritable.Frequency.getFrequency(),1,2
org.apache.mahout.common.IntPairWritable.Frequency.getPair(),2,4
org.apache.mahout.common.IntPairWritable.Frequency.hashCode(),6,9
org.apache.mahout.common.IntPairWritable.Frequency.equals(Object),4,10
org.apache.mahout.common.IntPairWritable.Frequency.compareTo(Frequency),2,6
org.apache.mahout.common.IntPairWritable.Frequency.toString(),3,4
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.PearsonCorrelationSimilarity.normalize(Vector),12,27
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarity.FileItemSimilarity(File),9,18
"org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarity.FileItemSimilarity(File,long)",27,77
"org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarity.itemSimilarities(long,long[])",5,11
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarity.allSimilarItemIDs(long),5,9
"org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarity.itemSimilarity(long,long)",5,11
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarity.refresh(Collection<Refreshable>),14,17
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarity.reload(),11,24
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarity.toString(),5,9
org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue.TopElementsQueue(int),5,11
org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue.getTopElements(),22,42
org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue.getSentinelObject(),7,10
"org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue.lessThan(MutableElement,MutableElement)",2,4
"org.apache.mahout.classifier.df.split.IgSplit.computeSplit(Data,int)",6,9
org.apache.mahout.classifier.df.data.DescriptorException.DescriptorException(String),4,5
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorReducer.setup(Context),15,32
"org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorReducer.reduce(IntWritable,Iterable<VectorWritable>,Context)",21,37
org.apache.mahout.math.TestRandomAccessSparseVector.generateTestVector(int),7,10
org.apache.mahout.math.TestRandomAccessSparseVector.vectorToTest(int),10,26
org.apache.mahout.math.TestRandomAccessSparseVector.testToString(),14,38
org.apache.mahout.classifier.naivebayes.training.ThetaMapper.setup(Context),25,44
"org.apache.mahout.classifier.naivebayes.training.ThetaMapper.map(IntWritable,VectorWritable,Context)",11,15
org.apache.mahout.classifier.naivebayes.training.ThetaMapper.cleanup(Context),18,25
"org.apache.mahout.classifier.OnlineLearner.train(int,Vector)",42,63
"org.apache.mahout.classifier.OnlineLearner.train(long,String,int,Vector)",53,95
"org.apache.mahout.classifier.OnlineLearner.train(long,int,Vector)",48,84
org.apache.mahout.classifier.OnlineLearner.close(),1,1
org.apache.mahout.math.WeightedVectorTest.testLength(),18,39
org.apache.mahout.math.WeightedVectorTest.vectorToTest(int),5,9
org.apache.mahout.math.WeightedVectorTest.testOrdering(),8,41
org.apache.mahout.math.WeightedVectorTest.testProjection(),25,76
org.apache.mahout.math.WeightedVectorTest.testSize(),7,9
org.apache.mahout.math.WeightedVectorTest.generateTestVector(int),6,10
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.GivensThinSolver(int,int)",8,11
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.reset(),2,2
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.solve(Matrix),9,17
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.isFull(),1,1
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.getM(),0,0
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.getN(),0,0
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.getCnt(),1,2
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.adjust(int),19,31
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.trim(),3,3
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.appendRow(double[]),39,91
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.getQtRow(int),2,7
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.setQtRow(int,double[])",3,10
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.pushQtDown(),3,7
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.getRRow(int),2,8
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.setRRow(int,double[])",4,10
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.pushRDown(),3,7
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.getRTilde(),11,18
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.getThinQtTilde(),10,20
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.applyGivensInPlace(double,double,double[],double[],int,int)",6,19
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.applyGivensInPlace(double,double,Vector,Vector,int,int)",9,27
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.applyGivensInPlace(double,double,int,int,Matrix)",7,13
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.fromRho(double,double[])",4,12
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.givens(double,double,double[])",5,17
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.toRho(double,double)",4,9
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.mergeR(UpperTriangular,UpperTriangular)",10,36
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.mergeR(double[][],double[][])",4,6
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.mergeRonQ(UpperTriangular,UpperTriangular,double[][],double[][])",12,43
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.mergeRonQ(double[][],double[][],double[][],double[][])",10,19
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.mergeQrUp(double[][],double[][],double[][])",6,10
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.mergeQrUp(double[][],UpperTriangular,UpperTriangular)",8,14
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.mergeQrDown(double[][],double[][],double[][])",4,9
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.mergeQrDown(UpperTriangular,double[][],UpperTriangular)",6,13
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.computeQtHat(double[][],int,Iterator<UpperTriangular>)",8,20
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.isOrthonormal(double[][],boolean,double)",14,38
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.isOrthonormalBlocked(Iterable<double[][]>,boolean,double)",23,71
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.TriangularRowView(UpperTriangular),7,11
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.setViewedRow(int),6,10
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.isDense(),1,1
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.isSequentialAccess(),2,2
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.iterator(),5,6
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.iterateNonZero(),7,7
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.getQuick(int),5,7
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.like(),4,4
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.like(int),5,5
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.setQuick(int,double)",7,11
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.getNumNondefaultElements(),6,6
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.getLookupCost(),2,2
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.getIteratorAdvanceCost(),3,3
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.isAddConstantTime(),3,3
"org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.matrixLike(int,int)",6,7
org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver.TriangularRowView.mergeUpdates(OrderedIntDoubleMapping),11,20
org.apache.mahout.math.solver.EigenDecompositionTest.testDegenerateMatrix(),11,21
org.apache.mahout.math.solver.EigenDecompositionTest.testDeficientRank(),23,42
org.apache.mahout.math.solver.EigenDecompositionTest.testDeficientRank().$1.apply(double),4,4
org.apache.mahout.math.solver.EigenDecompositionTest.testEigen(),16,32
org.apache.mahout.math.solver.EigenDecompositionTest.testSequential(),20,48
"org.apache.mahout.math.solver.EigenDecompositionTest.check(String,Matrix,Matrix)",10,13
org.apache.mahout.clustering.fuzzykmeans.SoftCluster.SoftCluster(),3,3
"org.apache.mahout.clustering.fuzzykmeans.SoftCluster.SoftCluster(Vector,int,DistanceMeasure)",8,22
org.apache.mahout.clustering.fuzzykmeans.SoftCluster.asFormatString(),5,8
org.apache.mahout.clustering.fuzzykmeans.SoftCluster.getIdentifier(),3,3
org.apache.mahout.clustering.fuzzykmeans.SoftCluster.pdf(VectorWritable),13,22
org.apache.mahout.classifier.sgd.RecordFactory.defineTargetCategories(List<String>),6,6
org.apache.mahout.classifier.sgd.RecordFactory.maxTargetValue(int),5,6
org.apache.mahout.classifier.sgd.RecordFactory.usesFirstLineAsSchema(),2,2
"org.apache.mahout.classifier.sgd.RecordFactory.processLine(String,Vector)",5,7
org.apache.mahout.classifier.sgd.RecordFactory.getPredictors(),3,3
org.apache.mahout.classifier.sgd.RecordFactory.getTraceDictionary(),6,6
org.apache.mahout.classifier.sgd.RecordFactory.includeBiasTerm(boolean),5,6
org.apache.mahout.classifier.sgd.RecordFactory.getTargetCategories(),4,4
org.apache.mahout.classifier.sgd.RecordFactory.firstLine(String),2,3
"org.apache.mahout.vectorizer.Weight.calculate(int,int,int,int)",12,21
org.apache.mahout.classifier.naivebayes.training.WeightsMapper.setup(Context),18,32
"org.apache.mahout.classifier.naivebayes.training.WeightsMapper.map(IntWritable,VectorWritable,Context)",25,45
org.apache.mahout.classifier.naivebayes.training.WeightsMapper.cleanup(Context),16,36
org.apache.mahout.math.Centroid.Centroid(WeightedVector),7,12
"org.apache.mahout.math.Centroid.Centroid(int,Vector)",5,8
"org.apache.mahout.math.Centroid.Centroid(int,Vector,double)",6,10
"org.apache.mahout.math.Centroid.create(int,Vector)",9,27
org.apache.mahout.math.Centroid.update(Vector),5,9
"org.apache.mahout.math.Centroid.update(Vector,double)",8,9
org.apache.mahout.math.Centroid.like(),4,5
org.apache.mahout.math.Centroid.getKey(),2,2
org.apache.mahout.math.Centroid.addWeight(double),3,7
org.apache.mahout.math.Centroid.toString(),7,10
org.apache.mahout.math.Centroid.clone(),2,3
org.apache.mahout.clustering.canopy.Canopy.Canopy(),3,3
"org.apache.mahout.clustering.canopy.Canopy.Canopy(Vector,int,DistanceMeasure)",13,30
org.apache.mahout.clustering.canopy.Canopy.asFormatString(),4,7
org.apache.mahout.clustering.canopy.Canopy.toString(),4,6
org.apache.mahout.clustering.canopy.Canopy.getIdentifier(),2,2
"org.apache.mahout.vectorizer.TF.calculate(int,int,int,int)",5,6
"org.apache.mahout.clustering.iterator.ClusteringPolicy.classify(Vector,ClusterClassifier)",11,26
org.apache.mahout.clustering.iterator.ClusteringPolicy.select(Vector),7,14
org.apache.mahout.clustering.iterator.ClusteringPolicy.update(ClusterClassifier),6,11
org.apache.mahout.clustering.iterator.ClusteringPolicy.close(ClusterClassifier),9,14
"org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.AbstractSimilarity(DataModel,Weighting,boolean)",20,47
"org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.AbstractSimilarity(DataModel,Weighting,boolean).$1.call()",10,18
org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.getPreferenceInferrer(),2,5
org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.setPreferenceInferrer(PreferenceInferrer),11,23
org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.isWeighted(),1,2
"org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.computeResult(int,double,double,double,double)",36,85
"org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.userSimilarity(long,long)",42,244
"org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.itemSimilarity(long,long)",37,186
"org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.itemSimilarities(long,long[])",7,18
"org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.normalizeWeightResult(double,int,int)",14,44
org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.refresh(Collection<Refreshable>),5,10
org.apache.mahout.cf.taste.impl.similarity.AbstractSimilarity.toString(),6,10
"org.apache.mahout.classifier.sgd.MixedGradient.MixedGradient(double,int)",8,14
"org.apache.mahout.classifier.sgd.MixedGradient.apply(String,int,Vector,AbstractVectorClassifier)",22,47
org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.HmmTrainer(),5,5
"org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.trainSupervised(int,int,int[],int[],double)",56,208
"org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.countTransitions(Matrix,Matrix,int[],int[])",17,88
"org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.trainSupervisedSequence(int,int,Collection<int[]>,Collection<int[]>,double)",53,268
"org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.trainViterbi(HmmModel,int[],double,double,int,boolean)",67,248
"org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.trainBaumWelch(HmmModel,int[],double,int,boolean)",68,269
"org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.unscaledBaumWelch(int[],HmmModel,Matrix,Matrix)",27,105
"org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.logScaledBaumWelch(int[],HmmModel,Matrix,Matrix)",34,146
"org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer.checkConvergence(HmmModel,HmmModel,double)",28,108
org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFiles.main(String[]),12,13
org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFiles.run(String[]),55,210
org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter.main(String[]),9,10
org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter.run(String[]),40,216
org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter.MarkPreferencesMapper.setup(Context),13,26
"org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter.MarkPreferencesMapper.map(LongWritable,Text,Context)",15,31
org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter.WritePrefsMapper.setup(Context),6,8
"org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter.WritePrefsMapper.map(Text,Text,Context)",11,17
org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder.ContinuousValueEncoder(String),7,10
"org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder.addToVector(byte[],double,Vector)",15,31
"org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder.getWeight(byte[],double)",7,11
org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder.asString(String),4,8
org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder.getSeed(),4,5
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CooccurrenceCountSimilarity.similarity(double,double,double,int)",4,6
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CooccurrenceCountSimilarity.consider(int,int,double,double,double)",7,20
"org.apache.mahout.cf.taste.hadoop.item.ItemFilterMapper.map(LongWritable,Text,Context)",18,36
"org.apache.mahout.classifier.sgd.PassiveAggressive.PassiveAggressive(int,int)",9,19
org.apache.mahout.classifier.sgd.PassiveAggressive.learningRate(double),12,22
org.apache.mahout.classifier.sgd.PassiveAggressive.copyFrom(PassiveAggressive),8,13
org.apache.mahout.classifier.sgd.PassiveAggressive.numCategories(),2,4
org.apache.mahout.classifier.sgd.PassiveAggressive.classify(Vector),18,33
org.apache.mahout.classifier.sgd.PassiveAggressive.classifyNoLink(Vector),15,26
org.apache.mahout.classifier.sgd.PassiveAggressive.classifyScalar(Vector),10,18
org.apache.mahout.classifier.sgd.PassiveAggressive.numFeatures(),4,5
org.apache.mahout.classifier.sgd.PassiveAggressive.copy(),7,13
org.apache.mahout.classifier.sgd.PassiveAggressive.write(DataOutput),12,18
org.apache.mahout.classifier.sgd.PassiveAggressive.readFields(DataInput),15,28
org.apache.mahout.classifier.sgd.PassiveAggressive.close(),3,3
"org.apache.mahout.classifier.sgd.PassiveAggressive.train(long,String,int,Vector)",38,113
"org.apache.mahout.classifier.sgd.PassiveAggressive.train(long,int,Vector)",6,11
"org.apache.mahout.classifier.sgd.PassiveAggressive.train(int,Vector)",4,7
"org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer.reduce(WritableComparable<>,Iterable<VectorWritable>,Context)",35,86
org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer.setup(Context),38,93
"org.apache.mahout.math.stats.OnlineAuc.addSample(int,String,double)",6,6
"org.apache.mahout.math.stats.OnlineAuc.addSample(int,double)",4,4
org.apache.mahout.math.stats.OnlineAuc.auc(),1,1
org.apache.mahout.math.stats.OnlineAuc.setPolicy(GlobalOnlineAuc.ReplacementPolicy),6,8
org.apache.mahout.math.stats.OnlineAuc.setWindowSize(int),3,5
"org.apache.mahout.cf.taste.recommender.ItemBasedRecommender.mostSimilarItems(long,int)",18,34
"org.apache.mahout.cf.taste.recommender.ItemBasedRecommender.mostSimilarItems(long,int,Rescorer<LongPair>)",25,49
"org.apache.mahout.cf.taste.recommender.ItemBasedRecommender.mostSimilarItems(long[],int)",20,38
"org.apache.mahout.cf.taste.recommender.ItemBasedRecommender.mostSimilarItems(long[],int,Rescorer<LongPair>)",24,49
"org.apache.mahout.cf.taste.recommender.ItemBasedRecommender.mostSimilarItems(long[],int,boolean)",20,46
"org.apache.mahout.cf.taste.recommender.ItemBasedRecommender.mostSimilarItems(long[],int,Rescorer<LongPair>,boolean)",26,61
"org.apache.mahout.cf.taste.recommender.ItemBasedRecommender.recommendedBecause(long,long,int)",44,84
org.apache.mahout.clustering.Model<O>.pdf(O),8,10
org.apache.mahout.clustering.Model<O>.observe(O),6,8
"org.apache.mahout.clustering.Model<O>.observe(O,double)",9,13
org.apache.mahout.clustering.Model<O>.observe(Model<O>),6,9
org.apache.mahout.clustering.Model<O>.computeParameters(),8,10
org.apache.mahout.clustering.Model<O>.getNumObservations(),6,7
org.apache.mahout.clustering.Model<O>.getTotalObservations(),5,6
org.apache.mahout.clustering.Model<O>.sampleFromPosterior(),5,8
"org.apache.mahout.classifier.df.mapreduce.MapredMapper<KEYIN,VALUEIN,KEYOUT,VALUEOUT>.isOutput()",4,6
"org.apache.mahout.classifier.df.mapreduce.MapredMapper<KEYIN,VALUEIN,KEYOUT,VALUEOUT>.getTreeBuilder()",2,6
"org.apache.mahout.classifier.df.mapreduce.MapredMapper<KEYIN,VALUEIN,KEYOUT,VALUEOUT>.getDataset()",1,3
"org.apache.mahout.classifier.df.mapreduce.MapredMapper<KEYIN,VALUEIN,KEYOUT,VALUEOUT>.setup(Context)",12,24
"org.apache.mahout.classifier.df.mapreduce.MapredMapper<KEYIN,VALUEIN,KEYOUT,VALUEOUT>.configure(boolean,TreeBuilder,Dataset)",13,28
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity.TanimotoCoefficientSimilarity(DataModel),5,9
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity.setPreferenceInferrer(PreferenceInferrer),6,9
"org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity.userSimilarity(long,long)",13,72
"org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity.itemSimilarity(long,long)",10,18
"org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity.itemSimilarities(long,long[])",13,26
"org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity.doItemSimilarity(long,long,int)",10,33
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity.refresh(Collection<Refreshable>),9,17
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity.toString(),6,9
org.apache.mahout.classifier.df.node.Node.classify(Instance),5,8
org.apache.mahout.classifier.df.node.Node.nbNodes(),3,4
org.apache.mahout.classifier.df.node.Node.maxDepth(),4,5
org.apache.mahout.classifier.df.node.Node.getType(),1,2
org.apache.mahout.classifier.df.node.Node.read(DataInput),15,33
org.apache.mahout.classifier.df.node.Node.toString(),2,4
org.apache.mahout.classifier.df.node.Node.getString(),1,2
org.apache.mahout.classifier.df.node.Node.write(DataOutput),7,9
org.apache.mahout.classifier.df.node.Node.writeNode(DataOutput),5,5
"org.apache.mahout.math.SparseMatrix.SparseMatrix(int,int,Map<Integer,Vector>)",14,32
"org.apache.mahout.math.SparseMatrix.SparseMatrix(int,int,Map<Integer,Vector>,boolean)",24,58
"org.apache.mahout.math.SparseMatrix.SparseMatrix(int,int)",12,17
org.apache.mahout.math.SparseMatrix.clone(),10,22
org.apache.mahout.math.SparseMatrix.numSlices(),5,5
org.apache.mahout.math.SparseMatrix.iterateNonEmpty(),12,22
org.apache.mahout.math.SparseMatrix.iterateNonEmpty().$1.computeNext(),9,18
"org.apache.mahout.math.SparseMatrix.getQuick(int,int)",5,9
org.apache.mahout.math.SparseMatrix.like(),5,7
"org.apache.mahout.math.SparseMatrix.like(int,int)",4,7
"org.apache.mahout.math.SparseMatrix.setQuick(int,int,double)",11,22
org.apache.mahout.math.SparseMatrix.getNumNondefaultElements(),12,25
"org.apache.mahout.math.SparseMatrix.viewPart(int[],int[])",9,52
"org.apache.mahout.math.SparseMatrix.assign(Matrix,DoubleDoubleFunction)",23,52
"org.apache.mahout.math.SparseMatrix.assign(Matrix,DoubleDoubleFunction).$2.apply(int,Vector)",9,23
"org.apache.mahout.math.SparseMatrix.assignColumn(int,Vector)",16,48
"org.apache.mahout.math.SparseMatrix.assignRow(int,Vector)",10,25
org.apache.mahout.math.SparseMatrix.viewRow(int),12,31
org.apache.mahout.math.SparseMatrix.nonZeroRowIndices(),11,12
org.apache.mahout.math.SparseMatrix.getFlavor(),3,6
org.apache.mahout.clustering.iterator.CanopyClusteringPolicy.select(Vector),12,25
org.apache.mahout.clustering.iterator.CanopyClusteringPolicy.write(DataOutput),4,6
org.apache.mahout.clustering.iterator.CanopyClusteringPolicy.readFields(DataInput),5,7
"org.apache.mahout.cf.taste.model.UpdatableIDMigrator.storeMapping(long,String)",21,33
org.apache.mahout.cf.taste.model.UpdatableIDMigrator.initialize(Iterable<String>),15,22
org.apache.mahout.clustering.kmeans.Kluster.Kluster(),3,3
"org.apache.mahout.clustering.kmeans.Kluster.Kluster(Vector,int,DistanceMeasure)",8,24
org.apache.mahout.clustering.kmeans.Kluster.formatCluster(Kluster),10,21
org.apache.mahout.clustering.kmeans.Kluster.asFormatString(),3,5
org.apache.mahout.clustering.kmeans.Kluster.write(DataOutput),5,7
org.apache.mahout.clustering.kmeans.Kluster.readFields(DataInput),6,9
org.apache.mahout.clustering.kmeans.Kluster.toString(),2,4
org.apache.mahout.clustering.kmeans.Kluster.getIdentifier(),3,3
"org.apache.mahout.clustering.kmeans.Kluster.computeConvergence(DistanceMeasure,double)",16,41
org.apache.mahout.clustering.kmeans.Kluster.isConverged(),1,2
org.apache.mahout.clustering.kmeans.Kluster.setConverged(boolean),2,5
org.apache.mahout.clustering.kmeans.Kluster.calculateConvergence(double),12,19
org.apache.mahout.math.stats.Sampler.Sampler(Random),2,6
"org.apache.mahout.math.stats.Sampler.Sampler(Random,double[])",2,8
"org.apache.mahout.math.stats.Sampler.Sampler(Random,Vector)",4,10
org.apache.mahout.math.stats.Sampler.sample(Vector),4,6
org.apache.mahout.math.stats.Sampler.sample(),7,12
org.apache.mahout.math.stats.Sampler.samplerFor(Vector),7,23
org.apache.mahout.math.stats.Sampler.sample(double[]),7,11
org.apache.mahout.classifier.df.builder.DefaultTreeBuilder.DefaultTreeBuilder(),4,5
org.apache.mahout.classifier.df.builder.DefaultTreeBuilder.setM(int),1,1
"org.apache.mahout.classifier.df.builder.DefaultTreeBuilder.build(Random,Data)",45,204
org.apache.mahout.classifier.df.builder.DefaultTreeBuilder.isIdentical(Data),16,38
"org.apache.mahout.classifier.df.builder.DefaultTreeBuilder.cloneCategoricalAttributes(Dataset,boolean[])",12,28
"org.apache.mahout.classifier.df.builder.DefaultTreeBuilder.randomAttributes(Random,boolean[],int)",28,94
org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifier.StandardNaiveBayesClassifier(NaiveBayesModel),5,9
"org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifier.getScoreForLabelFeature(int,int)",13,30
"org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifier.computeWeight(double,double,double,double)",11,25
org.apache.mahout.cf.taste.hadoop.item.UserVectorSplitterMapper.setup(Context),15,35
"org.apache.mahout.cf.taste.hadoop.item.UserVectorSplitterMapper.map(VarLongWritable,VectorWritable,Context)",24,52
org.apache.mahout.cf.taste.hadoop.item.UserVectorSplitterMapper.maybePruneUserVector(Vector),27,50
org.apache.mahout.cf.taste.hadoop.item.UserVectorSplitterMapper.findSmallestLargeValue(Vector),18,35
"org.apache.mahout.cf.taste.hadoop.item.UserVectorSplitterMapper.findSmallestLargeValue(Vector).$1.lessThan(Float,Float)",0,0
"org.apache.mahout.cf.taste.similarity.precompute.SimilarItems.SimilarItems(long,List<RecommendedItem>)",9,37
org.apache.mahout.cf.taste.similarity.precompute.SimilarItems.getItemID(),1,2
org.apache.mahout.cf.taste.similarity.precompute.SimilarItems.numSimilarItems(),5,6
org.apache.mahout.cf.taste.similarity.precompute.SimilarItems.getSimilarItems(),5,9
org.apache.mahout.cf.taste.similarity.precompute.SimilarItems.getSimilarItems().$1.iterator(),4,7
org.apache.mahout.cf.taste.similarity.precompute.SimilarItems.SimilarItemsIterator.hasNext(),4,4
org.apache.mahout.cf.taste.similarity.precompute.SimilarItems.SimilarItemsIterator.next(),6,12
org.apache.mahout.math.hadoop.stochasticsvd.DenseBlockWritable.setBlock(double[][]),2,5
org.apache.mahout.math.hadoop.stochasticsvd.DenseBlockWritable.getBlock(),1,2
org.apache.mahout.math.hadoop.stochasticsvd.DenseBlockWritable.readFields(DataInput),9,21
org.apache.mahout.math.hadoop.stochasticsvd.DenseBlockWritable.write(DataOutput),6,16
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArrayTest.testUserID(),10,24
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArrayTest.testItemID(),10,30
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArrayTest.testSetValue(),11,34
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArrayTest.testHasPref(),9,25
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArrayTest.testSort(),10,33
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArrayTest.testSortValue(),12,47
org.apache.mahout.cf.taste.impl.model.GenericItemPreferenceArrayTest.testClone(),12,36
org.apache.mahout.clustering.canopy.CanopyDriver.main(String[]),10,11
org.apache.mahout.clustering.canopy.CanopyDriver.run(String[]),34,216
"org.apache.mahout.clustering.canopy.CanopyDriver.run(Configuration,Path,Path,DistanceMeasure,double,double,double,double,int,boolean,double,boolean)",40,123
"org.apache.mahout.clustering.canopy.CanopyDriver.run(Configuration,Path,Path,DistanceMeasure,double,double,boolean,double,boolean)",21,39
"org.apache.mahout.clustering.canopy.CanopyDriver.run(Path,Path,DistanceMeasure,double,double,boolean,double,boolean)",36,87
"org.apache.mahout.clustering.canopy.CanopyDriver.buildClusters(Configuration,Path,Path,DistanceMeasure,double,double,int,boolean)",20,35
"org.apache.mahout.clustering.canopy.CanopyDriver.buildClusters(Configuration,Path,Path,DistanceMeasure,double,double,double,double,int,boolean)",38,112
"org.apache.mahout.clustering.canopy.CanopyDriver.buildClustersSeq(Path,Path,DistanceMeasure,double,double,int)",67,192
"org.apache.mahout.clustering.canopy.CanopyDriver.buildClustersMR(Configuration,Path,Path,DistanceMeasure,double,double,double,double,int)",61,239
"org.apache.mahout.clustering.canopy.CanopyDriver.clusterData(Configuration,Path,Path,Path,double,boolean)",22,44
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.SplitPartitionedWritable(Mapper<>.Context),9,16
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.SplitPartitionedWritable(),3,3
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.getTaskId(),1,2
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.getTaskItemOrdinal(),3,6
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.incrementItemOrdinal(),4,6
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.setTaskItemOrdinal(long),4,13
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.readFields(DataInput),11,17
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.write(DataOutput),10,16
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.hashCode(),5,9
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.equals(Object),7,15
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.compareTo(SplitPartitionedWritable),7,20
org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.SplitGroupingComparator.SplitGroupingComparator(),4,5
"org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable.SplitGroupingComparator.compare(Object,Object)",6,19
org.apache.mahout.clustering.spectral.AffinityMatrixInputJob.AffinityMatrixInputJob(),4,4
"org.apache.mahout.clustering.spectral.AffinityMatrixInputJob.runJob(Path,Path,int,int)",46,130
"org.apache.mahout.clustering.spectral.AffinityMatrixInputJob.runJob(Path,Path,int)",34,67
"org.apache.mahout.clustering.spectral.AffinityMatrixInputReducer.reduce(IntWritable,Iterable<DistributedRowMatrix.MatrixEntryWritable>,Context)",35,78
org.apache.mahout.vectorizer.collocations.llr.GramKeyGroupComparator.GramKeyGroupComparator(),3,5
"org.apache.mahout.vectorizer.collocations.llr.GramKeyGroupComparator.compare(WritableComparable,WritableComparable)",11,29
"org.apache.mahout.cf.taste.impl.common.jdbc.EachRowIterator.EachRowIterator(DataSource,String)",26,60
org.apache.mahout.cf.taste.impl.common.jdbc.EachRowIterator.computeNext(),8,15
org.apache.mahout.cf.taste.impl.common.jdbc.EachRowIterator.skip(int),11,17
org.apache.mahout.cf.taste.impl.common.jdbc.EachRowIterator.close(),8,9
org.apache.mahout.cf.taste.impl.model.AbstractIDMigrator.AbstractIDMigrator(),10,13
org.apache.mahout.cf.taste.impl.model.AbstractIDMigrator.hash(String),9,23
org.apache.mahout.cf.taste.impl.model.AbstractIDMigrator.toLongID(String),2,4
org.apache.mahout.cf.taste.impl.model.AbstractIDMigrator.refresh(Collection<Refreshable>),4,4
"org.apache.mahout.clustering.kernel.IKernelProfile.calculateDerivativeValue(double,double)",7,8
"org.apache.mahout.clustering.iterator.DistanceMeasureCluster.DistanceMeasureCluster(Vector,int,DistanceMeasure)",4,9
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.DistanceMeasureCluster(),3,3
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.configure(Configuration),4,7
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.readFields(DataInput),11,15
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.write(DataOutput),7,9
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.pdf(VectorWritable),6,6
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.sampleFromPosterior(),9,10
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.getMeasure(),2,4
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.setMeasure(DistanceMeasure),4,11
org.apache.mahout.clustering.iterator.DistanceMeasureCluster.getIdentifier(),3,3
org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.AbstractNaiveBayesClassifier(NaiveBayesModel),4,9
org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.getModel(),3,5
"org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.getScoreForLabelFeature(int,int)",3,5
"org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.getScoreForLabelInstance(int,Vector)",9,17
org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.numCategories(),4,5
org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.classifyFull(Vector),6,10
"org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.classifyFull(Vector,Vector)",10,19
org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.classifyScalar(Vector),10,10
org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier.classify(Vector),10,11
org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator.HmmEvaluator(),5,5
"org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator.predict(HmmModel,int)",18,40
"org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator.predict(HmmModel,int,long)",20,46
"org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator.predict(HmmModel,int,Random)",43,122
"org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator.modelLikelihood(HmmModel,int[],boolean)",30,67
"org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator.modelLikelihood(Matrix,boolean)",28,62
"org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator.modelLikelihood(HmmModel,int[],Matrix,boolean)",27,77
"org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator.decode(HmmModel,int[],boolean)",26,46
"org.apache.mahout.vectorizer.collocations.llr.GramKeyPartitioner.getPartition(GramKey,Gram,int)",17,33
"org.apache.mahout.classifier.sgd.L1.age(double,double,double)",11,21
org.apache.mahout.classifier.sgd.L1.logP(double),4,5
org.apache.mahout.classifier.sgd.L1.write(DataOutput),6,6
org.apache.mahout.classifier.sgd.L1.readFields(DataInput),7,9
"org.apache.mahout.clustering.spectral.AffinityMatrixInputMapper.map(LongWritable,Text,Context)",47,121
org.apache.mahout.clustering.classify.WeightedVectorWritable.WeightedVectorWritable(),3,3
"org.apache.mahout.clustering.classify.WeightedVectorWritable.WeightedVectorWritable(double,Vector)",5,12
org.apache.mahout.clustering.classify.WeightedVectorWritable.getVector(),2,4
org.apache.mahout.clustering.classify.WeightedVectorWritable.setVector(Vector),3,8
org.apache.mahout.clustering.classify.WeightedVectorWritable.getWeight(),1,2
org.apache.mahout.clustering.classify.WeightedVectorWritable.readFields(DataInput),8,11
org.apache.mahout.clustering.classify.WeightedVectorWritable.write(DataOutput),7,9
org.apache.mahout.clustering.classify.WeightedVectorWritable.toString(),6,12
org.apache.mahout.classifier.df.split.DefaultIgSplitTest.testEntropy(),26,150
org.apache.mahout.classifier.sgd.PolymorphicWritable.PolymorphicWritable(),2,2
"org.apache.mahout.classifier.sgd.PolymorphicWritable.write(DataOutput,T)",8,18
"org.apache.mahout.classifier.sgd.PolymorphicWritable.read(DataInput,Class<>)",12,22
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.setUp(),10,21
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testReadRegexSplittedFile(),17,41
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testFile(),18,46
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testTranspose(),20,46
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testGetItems(),8,13
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testPreferencesForItem(),12,32
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testGetNumUsers(),6,8
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testNumUsersPreferring(),8,25
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testRefresh(),19,31
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testRefresh().$1.run(),10,10
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testExplicitRefreshAfterCompleteFileUpdate(),27,61
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testToString(),4,5
org.apache.mahout.cf.taste.impl.model.file.FileDataModelTest.testEmptyFile(),11,20
"org.apache.mahout.common.distance.WeightedManhattanDistanceMeasure.distance(Vector,Vector)",12,28
"org.apache.mahout.common.distance.WeightedManhattanDistanceMeasure.distance(double,Vector,Vector)",6,10
org.apache.mahout.classifier.sgd.TPrior.TPrior(double),1,1
"org.apache.mahout.classifier.sgd.TPrior.age(double,double,double)",5,13
org.apache.mahout.classifier.sgd.TPrior.logP(double),4,15
org.apache.mahout.classifier.sgd.TPrior.write(DataOutput),4,5
org.apache.mahout.classifier.sgd.TPrior.readFields(DataInput),5,6
org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob.MatrixDiagonalizeJob(),3,3
"org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob.runJob(Path,int)",46,140
"org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob.MatrixDiagonalizeMapper.map(IntWritable,VectorWritable,Context)",12,25
"org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob.MatrixDiagonalizeReducer.reduce(NullWritable,Iterable<IntDoublePairWritable>,Context)",25,43
org.apache.mahout.clustering.iterator.AbstractClusteringPolicy.write(DataOutput),4,4
org.apache.mahout.clustering.iterator.AbstractClusteringPolicy.readFields(DataInput),5,5
org.apache.mahout.clustering.iterator.AbstractClusteringPolicy.select(Vector),12,25
org.apache.mahout.clustering.iterator.AbstractClusteringPolicy.update(ClusterClassifier),4,4
"org.apache.mahout.clustering.iterator.AbstractClusteringPolicy.classify(Vector,ClusterClassifier)",19,34
org.apache.mahout.clustering.iterator.AbstractClusteringPolicy.close(ClusterClassifier),7,11
org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDevTest.testFull(),13,87
org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDevTest.testFullBig(),15,28
org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDevTest.testStddev(),13,93
org.apache.mahout.cf.taste.impl.recommender.svd.NoPersistenceStrategy.load(),3,3
org.apache.mahout.cf.taste.impl.recommender.svd.NoPersistenceStrategy.maybePersist(Factorization),4,5
"org.apache.mahout.common.iterator.FixedSizeSamplingIterator<T>.FixedSizeSamplingIterator(int,Iterator<T>)",17,40
org.apache.mahout.common.iterator.FixedSizeSamplingIterator<T>.delegate(),2,3
"org.apache.mahout.vectorizer.encoders.CachingStaticWordValueEncoder.CachingStaticWordValueEncoder(String,int)",10,15
org.apache.mahout.vectorizer.encoders.CachingStaticWordValueEncoder.initCaches(),6,14
org.apache.mahout.vectorizer.encoders.CachingStaticWordValueEncoder.getCaches(),3,4
org.apache.mahout.vectorizer.encoders.CachingStaticWordValueEncoder.setProbes(int),4,8
"org.apache.mahout.vectorizer.encoders.CachingStaticWordValueEncoder.hashForProbe(byte[],int,String,int)",19,59
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorMapper.setup(Context),20,40
"org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorMapper.map(IntWritable,WeightedVectorWritable,Context)",22,35
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testPutAndGet(),4,10
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testRemove(),7,16
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testClear(),6,14
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testSizeEmpty(),7,26
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testContains(),11,37
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testRehash(),9,18
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testGrow(),8,17
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testVersusHashMap(),17,53
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.testMaxSize(),9,29
org.apache.mahout.cf.taste.impl.common.FastByIDMapTest.buildTestFastMap(),8,21
org.apache.mahout.classifier.df.data.DataConverterTest.testConvert(),23,106
org.apache.mahout.cf.taste.hadoop.item.RecommenderJob.run(String[]),147,1072
org.apache.mahout.cf.taste.hadoop.item.RecommenderJob.setIOSort(JobContext),49,93
org.apache.mahout.cf.taste.hadoop.item.RecommenderJob.main(String[]),10,11
org.apache.mahout.clustering.spectral.VectorMatrixMultiplicationJob.VectorMatrixMultiplicationJob(),4,4
"org.apache.mahout.clustering.spectral.VectorMatrixMultiplicationJob.runJob(Path,Vector,Path)",18,38
"org.apache.mahout.clustering.spectral.VectorMatrixMultiplicationJob.runJob(Path,Vector,Path,Path)",51,165
org.apache.mahout.clustering.spectral.VectorMatrixMultiplicationJob.VectorMatrixMultiplicationMapper.setup(Context),14,34
"org.apache.mahout.clustering.spectral.VectorMatrixMultiplicationJob.VectorMatrixMultiplicationMapper.map(IntWritable,VectorWritable,Context)",20,35
org.apache.mahout.clustering.spectral.VectorMatrixMultiplicationJob.VectorMatrixMultiplicationMapper.setup(Vector),9,12
org.apache.mahout.cf.taste.impl.model.AbstractDataModel.AbstractDataModel(),5,6
org.apache.mahout.cf.taste.impl.model.AbstractDataModel.getMaxPreference(),2,4
org.apache.mahout.cf.taste.impl.model.AbstractDataModel.setMaxPreference(float),3,9
org.apache.mahout.cf.taste.impl.model.AbstractDataModel.getMinPreference(),2,4
org.apache.mahout.cf.taste.impl.model.AbstractDataModel.setMinPreference(float),3,9
org.apache.mahout.vectorizer.encoders.StaticWordValueEncoder.StaticWordValueEncoder(String),6,11
"org.apache.mahout.vectorizer.encoders.StaticWordValueEncoder.hashForProbe(byte[],int,String,int)",12,21
"org.apache.mahout.vectorizer.encoders.StaticWordValueEncoder.setDictionary(Map<String,Double>)",17,31
org.apache.mahout.vectorizer.encoders.StaticWordValueEncoder.setMissingValueWeight(double),9,25
org.apache.mahout.vectorizer.encoders.StaticWordValueEncoder.weight(byte[]),11,20
"org.apache.mahout.classifier.df.split.Split.Split(int,double,double)",2,7
"org.apache.mahout.classifier.df.split.Split.Split(int,double)",2,3
org.apache.mahout.classifier.df.split.Split.getAttr(),3,4
org.apache.mahout.classifier.df.split.Split.getIg(),3,3
org.apache.mahout.classifier.df.split.Split.getSplit(),4,6
org.apache.mahout.classifier.df.split.Split.toString(),6,10
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.GenericItemBasedRecommender(DataModel,ItemSimilarity,CandidateItemsStrategy,MostSimilarItemsCandidateItemsStrategy)",22,98
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.GenericItemBasedRecommender(DataModel,ItemSimilarity,CandidateItemsStrategy,MostSimilarItemsCandidateItemsStrategy).$1.call()",3,4
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.GenericItemBasedRecommender(DataModel,ItemSimilarity)",11,23
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.getDefaultMostSimilarItemsCandidateItemsStrategy(),6,16
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.getSimilarity(),2,4
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.recommend(long,int,IDRescorer,boolean)",30,72
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.estimatePreference(long,long)",12,32
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.getPreferenceForItem(PreferenceArray,long)",8,19
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.mostSimilarItems(long,int)",7,11
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.mostSimilarItems(long,int,Rescorer<LongPair>)",12,24
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.mostSimilarItems(long[],int)",12,24
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.mostSimilarItems(long[],int,Rescorer<LongPair>)",14,28
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.mostSimilarItems(long[],int,boolean)",12,27
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.mostSimilarItems(long[],int,Rescorer<LongPair>,boolean)",14,31
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.recommendedBecause(long,long,int)",25,59
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.doMostSimilarItems(long[],int,TopItems.Estimator<Long>)",16,32
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.doEstimatePreference(long,PreferenceArray,long)",38,77
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.refresh(Collection<Refreshable>),5,8
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.toString(),6,8
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.buildCapper(),8,24
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.MostSimilarEstimator.MostSimilarEstimator(long,ItemSimilarity,Rescorer<LongPair>)",6,15
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.MostSimilarEstimator.estimate(Long),10,28
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.Estimator.Estimator(long,PreferenceArray)",5,12
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.Estimator.estimate(Long),7,10
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.MultiMostSimilarEstimator.MultiMostSimilarEstimator(long[],ItemSimilarity,Rescorer<LongPair>,boolean)",8,25
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.MultiMostSimilarEstimator.estimate(Long),17,52
"org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.RecommendedBecauseEstimator.RecommendedBecauseEstimator(long,long)",4,11
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender.RecommendedBecauseEstimator.estimate(Long),12,23
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CosineSimilarity.normalize(Vector),2,6
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CosineSimilarity.norm(Vector),4,7
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CosineSimilarity.aggregate(double,double)",3,7
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CosineSimilarity.similarity(double,double,double,int)",4,6
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CosineSimilarity.consider(int,int,double,double,double)",7,24
org.apache.mahout.cf.taste.impl.common.FullRunningAverage.FullRunningAverage(),2,2
"org.apache.mahout.cf.taste.impl.common.FullRunningAverage.FullRunningAverage(int,double)",3,8
org.apache.mahout.cf.taste.impl.common.FullRunningAverage.addDatum(double),4,12
org.apache.mahout.cf.taste.impl.common.FullRunningAverage.removeDatum(double),6,14
org.apache.mahout.cf.taste.impl.common.FullRunningAverage.changeDatum(double),7,9
org.apache.mahout.cf.taste.impl.common.FullRunningAverage.getCount(),1,2
org.apache.mahout.cf.taste.impl.common.FullRunningAverage.getAverage(),1,2
org.apache.mahout.cf.taste.impl.common.FullRunningAverage.inverse(),4,6
org.apache.mahout.cf.taste.impl.common.FullRunningAverage.toString(),3,5
org.apache.mahout.clustering.spectral.VertexWritable.VertexWritable(),2,2
"org.apache.mahout.clustering.spectral.VertexWritable.VertexWritable(int,int,double,String)",5,5
org.apache.mahout.clustering.spectral.VertexWritable.getRow(),1,1
org.apache.mahout.clustering.spectral.VertexWritable.setRow(int),2,2
org.apache.mahout.clustering.spectral.VertexWritable.getCol(),1,1
org.apache.mahout.clustering.spectral.VertexWritable.setCol(int),2,2
org.apache.mahout.clustering.spectral.VertexWritable.getValue(),1,2
org.apache.mahout.clustering.spectral.VertexWritable.setValue(double),2,3
org.apache.mahout.clustering.spectral.VertexWritable.getType(),2,3
org.apache.mahout.clustering.spectral.VertexWritable.setType(String),3,4
org.apache.mahout.clustering.spectral.VertexWritable.readFields(DataInput),9,17
org.apache.mahout.clustering.spectral.VertexWritable.write(DataOutput),8,16
org.apache.mahout.vectorizer.encoders.Dictionary.intern(String),6,9
org.apache.mahout.vectorizer.encoders.Dictionary.values(),10,13
org.apache.mahout.vectorizer.encoders.Dictionary.size(),2,3
org.apache.mahout.vectorizer.encoders.Dictionary.fromList(Iterable<String>),8,15
org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure.configure(Configuration),3,3
org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure.getParameters(),6,6
"org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure.createParameters(String,Configuration)",7,7
"org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure.distance(Vector,Vector)",3,5
"org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure.distance(double,Vector,Vector)",7,14
org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob.main(String[]),12,13
org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob.run(String[]),54,161
"org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob.run(Configuration,Path,Path,Path,DistanceMeasure,String)",14,26
"org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob.run(Configuration,Path,Path,Path,DistanceMeasure,String,Double)",49,190
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageTest.testAverage(),10,37
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageTest.testUnsupported1(),7,13
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageTest.testUnsupported2(),7,13
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageTest.testUnsupported3(),7,13
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageTest.testAverageAndStdDev(),16,54
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageTest.testAndStdDevUnsupported1(),9,19
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageTest.testAndStdDevUnsupported2(),9,19
org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageTest.testAndStdDevUnsupported3(),9,19
"org.apache.mahout.vectorizer.term.TermCountReducer.reduce(Text,Iterable<LongWritable>,Context)",14,25
org.apache.mahout.vectorizer.term.TermCountReducer.setup(Context),9,20
org.apache.mahout.clustering.topdown.PathDirectory.PathDirectory(),2,2
org.apache.mahout.clustering.topdown.PathDirectory.getTopLevelClusterPath(Path),11,34
org.apache.mahout.clustering.topdown.PathDirectory.getClusterPostProcessorOutputDirectory(Path),18,45
org.apache.mahout.clustering.topdown.PathDirectory.getClusterOutputClusteredPoints(Path),14,27
"org.apache.mahout.clustering.topdown.PathDirectory.getBottomLevelClusterPath(Path,String)",14,39
"org.apache.mahout.clustering.topdown.PathDirectory.getClusterPathForClusterId(Path,String)",16,44
org.apache.mahout.clustering.UncommonDistributions.UncommonDistributions(),2,2
"org.apache.mahout.clustering.UncommonDistributions.rGamma(double,double)",32,67
"org.apache.mahout.clustering.UncommonDistributions.rBeta(double,double)",13,28
"org.apache.mahout.clustering.UncommonDistributions.rNorm(double,double)",16,33
"org.apache.mahout.clustering.UncommonDistributions.rBinomial(int,double)",31,37
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.testRecommender(),13,37
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.testHowMany(),20,63
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.testRescorer(),23,78
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.testIncludeKnownItems(),25,79
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.testEstimatePref(),9,13
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.testBestRating(),14,32
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.testMostSimilar(),9,21
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.testIsolatedUser(),17,47
org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommenderTest.buildRecommender(),14,38
org.apache.mahout.classifier.df.DecisionForestTest.setUp(),5,7
org.apache.mahout.classifier.df.DecisionForestTest.generateTrainingDataA(),21,60
org.apache.mahout.classifier.df.DecisionForestTest.generateTrainingDataB(),12,80
org.apache.mahout.classifier.df.DecisionForestTest.buildForest(Data[]),21,46
org.apache.mahout.classifier.df.DecisionForestTest.testClassify(),21,79
org.apache.mahout.classifier.df.DecisionForestTest.testClassifyData(),20,62
org.apache.mahout.classifier.df.DecisionForestTest.testRegression(),22,103
org.apache.mahout.math.DistributedRowMatrixWriter.DistributedRowMatrixWriter(),4,4
"org.apache.mahout.math.DistributedRowMatrixWriter.write(Path,Configuration,Iterable<MatrixSlice>)",22,58
org.apache.mahout.common.distance.ChebyshevDistanceMeasure.configure(Configuration),3,3
org.apache.mahout.common.distance.ChebyshevDistanceMeasure.getParameters(),6,6
"org.apache.mahout.common.distance.ChebyshevDistanceMeasure.createParameters(String,Configuration)",7,7
"org.apache.mahout.common.distance.ChebyshevDistanceMeasure.distance(Vector,Vector)",10,15
"org.apache.mahout.common.distance.ChebyshevDistanceMeasure.distance(double,Vector,Vector)",6,10
org.apache.mahout.cf.taste.impl.eval.LoadStatistics.LoadStatistics(RunningAverage),5,7
org.apache.mahout.cf.taste.impl.eval.LoadStatistics.getTiming(),3,4
org.apache.mahout.cf.taste.impl.eval.GenericRecommenderIRStatsEvaluatorImplTest.testBoolean(),23,70
org.apache.mahout.cf.taste.impl.eval.GenericRecommenderIRStatsEvaluatorImplTest.testBoolean().$1.buildRecommender(DataModel),11,19
org.apache.mahout.cf.taste.impl.eval.GenericRecommenderIRStatsEvaluatorImplTest.testBoolean().$2.buildDataModel(FastByIDMap<PreferenceArray>),10,23
org.apache.mahout.cf.taste.impl.eval.GenericRecommenderIRStatsEvaluatorImplTest.testIRStats(),13,29
org.apache.mahout.classifier.df.data.DataLoaderTest.setUp(),5,7
org.apache.mahout.classifier.df.data.DataLoaderTest.testLoadDataWithDescriptor(),28,121
org.apache.mahout.classifier.df.data.DataLoaderTest.testGenerateDataset(),28,98
"org.apache.mahout.classifier.df.data.DataLoaderTest.prepareData(double[][],Attribute[],Collection<Integer>)",31,91
"org.apache.mahout.classifier.df.data.DataLoaderTest.testLoadedData(double[][],Attribute[],Collection<Integer>,Data)",34,106
"org.apache.mahout.classifier.df.data.DataLoaderTest.testLoadedDataset(double[][],Attribute[],Collection<Integer>,Data)",29,90
org.apache.mahout.classifier.df.data.DataLoaderTest.testLoadDataFromFile(),34,138
org.apache.mahout.classifier.df.data.DataLoaderTest.testGenerateDatasetFromFile(),34,124
"org.apache.mahout.classifier.df.data.DataLoaderTest.checkCategorical(double[][],Collection<Integer>,Data,int,int,double,double)",23,60
org.apache.mahout.cf.taste.impl.common.RunningAverageTest.testFull(),10,118
org.apache.mahout.cf.taste.impl.common.RunningAverageTest.testCopyConstructor(),10,44
org.apache.mahout.clustering.ModelDistribution<O>.sampleFromPrior(int),10,13
org.apache.mahout.clustering.ModelDistribution<O>.sampleFromPosterior(Model<O>[]),11,18
"org.apache.mahout.cf.taste.impl.similarity.SimilarityTestCase.assertCorrelationEquals(double,double)",5,17
org.apache.mahout.cf.taste.impl.neighborhood.ThresholdNeighborhoodTest.testNeighborhood(),13,69
org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder.LuceneTextValueEncoder(String),6,7
org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder.setAnalyzer(Analyzer),2,6
org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder.tokenize(CharSequence),17,26
org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder.CharSequenceReader.CharSequenceReader(CharSequence),14,21
"org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder.CharSequenceReader.read(char[],int,int)",7,14
org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder.CharSequenceReader.close(),1,1
"org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder.LuceneTokenIterable.LuceneTokenIterable(TokenStream,boolean)",5,10
org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder.LuceneTokenIterable.iterator(),9,20
org.apache.mahout.clustering.Cluster.getId(),3,3
org.apache.mahout.clustering.Cluster.getCenter(),3,6
org.apache.mahout.clustering.Cluster.getRadius(),14,19
org.apache.mahout.clustering.Cluster.asFormatString(String[]),17,23
org.apache.mahout.clustering.Cluster.asJson(String[]),16,21
org.apache.mahout.clustering.Cluster.isConverged(),4,5
org.apache.mahout.clustering.iterator.KMeansClusteringPolicy.KMeansClusteringPolicy(),3,3
org.apache.mahout.clustering.iterator.KMeansClusteringPolicy.KMeansClusteringPolicy(double),5,9
org.apache.mahout.clustering.iterator.KMeansClusteringPolicy.write(DataOutput),6,7
org.apache.mahout.clustering.iterator.KMeansClusteringPolicy.readFields(DataInput),7,8
org.apache.mahout.clustering.iterator.KMeansClusteringPolicy.close(ClusterClassifier),17,35
org.apache.mahout.common.CommandLineUtil.CommandLineUtil(),3,3
org.apache.mahout.common.CommandLineUtil.printHelp(Group),4,11
org.apache.mahout.common.CommandLineUtil.printHelpWithGenericOptions(Group),38,70
"org.apache.mahout.common.CommandLineUtil.printHelpWithGenericOptions(Group,OptionException)",21,43
"org.apache.mahout.common.distance.EuclideanDistanceMeasure.distance(Vector,Vector)",4,6
"org.apache.mahout.common.distance.EuclideanDistanceMeasure.distance(double,Vector,Vector)",7,14
org.apache.mahout.cf.taste.hadoop.TopItemsQueueTest.topK(),12,35
org.apache.mahout.cf.taste.hadoop.TopItemsQueueTest.topKInputSmallerThanK(),13,36
"org.apache.mahout.cf.taste.hadoop.TopItemsQueueTest.findTop(float[],int)",12,38
org.apache.mahout.cf.taste.hadoop.item.ToUserVectorsReducerTest.testToUsersReducerMinPreferencesUserIgnored(),24,55
org.apache.mahout.cf.taste.hadoop.item.ToUserVectorsReducerTest.testToUsersReducerMinPreferencesUserPasses(),36,107
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIteratorTest.testEmpty(),5,7
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIteratorTest.testNext(),5,9
org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIteratorTest.testPeekSkip(),7,12
"org.apache.mahout.vectorizer.collocations.llr.CollocReducer.reduce(GramKey,Iterable<Gram>,Context)",26,58
org.apache.mahout.vectorizer.collocations.llr.CollocReducer.setup(Context),15,42
"org.apache.mahout.vectorizer.collocations.llr.CollocReducer.processUnigram(Iterator<Gram>,Context)",24,44
"org.apache.mahout.vectorizer.collocations.llr.CollocReducer.processSubgram(Iterator<Gram>,Context)",42,142
org.apache.mahout.cf.taste.impl.recommender.svd.FilePersistenceStrategyTest.persistAndLoad(),22,73
org.apache.mahout.clustering.spectral.Keys.Keys(),1,1
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.getTestableWithoutDelegateData(int),18,41
"org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.getTestableWithDelegateData(int,FastByIDMap<PreferenceArray>)",16,32
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testTakeFirstAvailableUser(),15,30
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testTakeNextAvailableUser(),16,35
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testTakeUnavailableUser(),13,23
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testReleaseValidUser(),13,22
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testReleaseInvalidUser(),14,19
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testReleasePreviouslyReleasedUser(),14,27
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testSetAndGetTempPreferences(),23,60
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testSetMultipleTempPreferences(),23,105
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testGetNumUsersWithDelegateUsersOnly(),25,59
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testGetNumAnonymousUsers(),25,55
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testGetPreferenceValue(),25,67
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testGetPreferencesForNonAnonymousUser(),23,61
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testGetPreferencesForNonExistingUser(),16,23
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testGetUserIDs(),25,91
org.apache.mahout.cf.taste.impl.model.PlusAnonymousConcurrentUserDataModelTest.testGetPreferencesForItem(),28,167
"org.apache.mahout.cf.taste.impl.recommender.ReversingRescorer<T>.rescore(T,double)",3,5
org.apache.mahout.cf.taste.impl.recommender.ReversingRescorer<T>.isFiltered(T),1,1
"org.apache.mahout.cf.taste.impl.recommender.ReversingRescorer<T>.rescore(long,double)",3,5
org.apache.mahout.cf.taste.impl.recommender.ReversingRescorer<T>.isFiltered(long),1,1
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testRecommender(),13,42
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testHowMany(),20,71
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testRescorer(),23,126
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testIncludeKnownItems(),25,127
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testEstimatePref(),9,13
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testBestRating(),14,32
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testMostSimilar(),14,36
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testMostSimilarToMultiple(),15,37
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testMostSimilarToMultipleExcludeIfNotSimilarToAll(),16,31
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testMostSimilarToMultipleDontExcludeIfNotSimilarToAll(),17,40
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.testRecommendedBecause(),13,46
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.buildRecommender(),14,60
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.buildRecommender2(),14,116
org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommenderTest.preferencesFetchedOnlyOnce(),31,174
org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilderTest.testProcessOutput(),50,137
org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilderTest.testConfigure(),10,31
"org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilderTest.randomKeyValues(Random,TreeID[],MapredOutput[],int[])",36,88
"org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilderTest.nextIntArray(Random,int)",5,14
"org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilderTest.PartialBuilderChecker.PartialBuilderChecker(TreeBuilder,Path,Path,Long)",8,31
org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilderTest.PartialBuilderChecker.runJob(Job),29,52
"org.apache.mahout.math.hadoop.decomposer.EigenVector.EigenVector(Vector,double,double,int)",8,20
org.apache.mahout.math.hadoop.decomposer.EigenVector.getEigenValue(),3,5
org.apache.mahout.math.hadoop.decomposer.EigenVector.getCosAngleError(),4,7
org.apache.mahout.math.hadoop.decomposer.EigenVector.getIndex(),2,3
org.apache.mahout.math.hadoop.decomposer.EigenVector.getEigenValue(CharSequence),7,8
org.apache.mahout.math.hadoop.decomposer.EigenVector.getCosAngleError(CharSequence),8,9
org.apache.mahout.math.hadoop.decomposer.EigenVector.getIndex(CharSequence),6,7
org.apache.mahout.math.hadoop.decomposer.EigenVector.parseMetaData(CharSequence),11,20
org.apache.mahout.math.hadoop.decomposer.EigenVector.parseMetaData(),4,7
"org.apache.mahout.cf.taste.recommender.MostSimilarItemsCandidateItemsStrategy.getCandidateItems(long[],DataModel)",9,11
org.apache.mahout.ep.Mapping.Mapping(),1,1
org.apache.mahout.ep.Mapping.SoftLimit.SoftLimit(),2,2
"org.apache.mahout.ep.Mapping.SoftLimit.SoftLimit(double,double,double)",5,11
org.apache.mahout.ep.Mapping.SoftLimit.apply(double),6,7
org.apache.mahout.ep.Mapping.SoftLimit.write(DataOutput),7,10
org.apache.mahout.ep.Mapping.SoftLimit.readFields(DataInput),8,11
org.apache.mahout.ep.Mapping.LogLimit.LogLimit(),2,2
"org.apache.mahout.ep.Mapping.LogLimit.LogLimit(double,double)",6,11
org.apache.mahout.ep.Mapping.LogLimit.apply(double),4,5
org.apache.mahout.ep.Mapping.LogLimit.write(DataOutput),7,12
org.apache.mahout.ep.Mapping.LogLimit.readFields(DataInput),9,10
org.apache.mahout.ep.Mapping.Exponential.Exponential(),1,1
org.apache.mahout.ep.Mapping.Exponential.Exponential(double),2,4
org.apache.mahout.ep.Mapping.Exponential.apply(double),4,4
org.apache.mahout.ep.Mapping.Exponential.write(DataOutput),5,6
org.apache.mahout.ep.Mapping.Exponential.readFields(DataInput),6,7
org.apache.mahout.ep.Mapping.Identity.apply(double),1,1
org.apache.mahout.ep.Mapping.Identity.write(DataOutput),4,6
org.apache.mahout.ep.Mapping.Identity.readFields(DataInput),5,7
"org.apache.mahout.ep.Mapping.softLimit(double,double,double)",27,54
"org.apache.mahout.ep.Mapping.softLimit(double,double)",25,43
"org.apache.mahout.ep.Mapping.logLimit(double,double)",29,53
org.apache.mahout.ep.Mapping.exponential(),7,9
org.apache.mahout.ep.Mapping.exponential(double),9,14
org.apache.mahout.ep.Mapping.identity(),7,8
org.apache.mahout.classifier.df.node.NumericalNode.NumericalNode(),2,2
"org.apache.mahout.classifier.df.node.NumericalNode.NumericalNode(int,double,Node,Node)",5,16
org.apache.mahout.classifier.df.node.NumericalNode.classify(Instance),5,12
org.apache.mahout.classifier.df.node.NumericalNode.maxDepth(),4,10
org.apache.mahout.classifier.df.node.NumericalNode.nbNodes(),2,5
org.apache.mahout.classifier.df.node.NumericalNode.getType(),2,4
org.apache.mahout.classifier.df.node.NumericalNode.equals(Object),8,27
org.apache.mahout.classifier.df.node.NumericalNode.hashCode(),6,11
org.apache.mahout.classifier.df.node.NumericalNode.getString(),2,6
org.apache.mahout.classifier.df.node.NumericalNode.readFields(DataInput),9,15
org.apache.mahout.classifier.df.node.NumericalNode.writeNode(DataOutput),8,13
org.apache.mahout.common.parameters.Parameter<T>.prefix(),13,14
org.apache.mahout.common.parameters.Parameter<T>.name(),6,7
org.apache.mahout.common.parameters.Parameter<T>.description(),5,6
org.apache.mahout.common.parameters.Parameter<T>.type(),2,3
org.apache.mahout.common.parameters.Parameter<T>.setStringValue(String),5,12
org.apache.mahout.common.parameters.Parameter<T>.getStringValue(),4,8
org.apache.mahout.common.parameters.Parameter<T>.set(T),4,6
org.apache.mahout.common.parameters.Parameter<T>.get(),3,3
org.apache.mahout.common.parameters.Parameter<T>.defaultValue(),4,5
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansReducer.setup(Context),9,12
"org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansReducer.reduce(IntWritable,Iterable<CentroidWritable>,Context)",34,73
"org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansReducer.reduce(IntWritable,Iterable<CentroidWritable>,Context).$1.apply(CentroidWritable)",7,11
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansReducer.centroidWritablesToList(Iterable<CentroidWritable>),20,32
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansReducer.centroidWritablesToList(Iterable<CentroidWritable>).$2.apply(CentroidWritable),7,11
"org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansReducer.getBestCentroids(List<Centroid>,Configuration)",36,112
org.apache.mahout.classifier.mlp.RunMultilayerPerceptronTest.runMultilayerPerceptron(),32,99
org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarityTest.testSimple(),13,82
org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarityTest.testFromCorrelation(),10,39
org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarityTest.testAllSimilaritiesWithoutIndex(),13,81
org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarityTest.testAllSimilaritiesWithIndex(),13,81
"org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarityTest.containsExactly(long[],long)",8,12
org.apache.mahout.math.hadoop.stochasticsvd.qr.GramSchmidt.GramSchmidt(),2,2
org.apache.mahout.math.hadoop.stochasticsvd.qr.GramSchmidt.orthonormalizeColumns(Matrix),16,29
org.apache.mahout.math.hadoop.stochasticsvd.qr.GramSchmidt.orthonormalizeColumns(Matrix).$1.apply(double),2,2
"org.apache.mahout.common.distance.TanimotoDistanceMeasure.distance(Vector,Vector)",18,48
"org.apache.mahout.common.distance.TanimotoDistanceMeasure.distance(double,Vector,Vector)",6,10
org.apache.mahout.math.hadoop.stochasticsvd.SSVDCli.run(String[]),102,522
org.apache.mahout.math.hadoop.stochasticsvd.SSVDCli.main(String[]),9,10
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testFullCorrelation1(),10,20
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testFullCorrelation1Weighted(),12,23
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testFullCorrelation2(),11,20
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testNoCorrelation1(),10,20
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testNoCorrelation1Weighted(),12,23
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testNoCorrelation2(),9,18
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testNoCorrelation3(),10,20
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testSimple(),11,20
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testSimpleWeighted(),13,23
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testFullItemCorrelation1(),10,21
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testFullItemCorrelation2(),11,21
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testNoItemCorrelation1(),10,21
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testNoItemCorrelation2(),9,19
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testNoItemCorrelation3(),10,21
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testSimpleItem(),11,21
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testSimpleItemWeighted(),13,30
org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarityTest.testRefresh(),10,12
org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJobTest.testMostSimilarItemsPairsMapper(),30,103
org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJobTest.testMostSimilarItemPairsReducer(),20,53
org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJobTest.testCompleteJob(),49,155
"org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJobTest.testCompleteJob().$1.accept(File,String)",6,7
org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJobTest.testMaxSimilaritiesPerItem(),51,162
"org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJobTest.testMaxSimilaritiesPerItem().$2.accept(File,String)",6,7
org.apache.mahout.common.TimingStatistics.TimingStatistics(),6,6
"org.apache.mahout.common.TimingStatistics.TimingStatistics(int,long,long,long,double)",8,32
org.apache.mahout.common.TimingStatistics.getNCalls(),1,2
org.apache.mahout.common.TimingStatistics.getMinTime(),4,6
org.apache.mahout.common.TimingStatistics.getMaxTime(),2,4
org.apache.mahout.common.TimingStatistics.getSumTime(),2,4
org.apache.mahout.common.TimingStatistics.getSumSquaredTime(),3,6
org.apache.mahout.common.TimingStatistics.getMeanTime(),4,6
org.apache.mahout.common.TimingStatistics.getStdDevTime(),15,30
org.apache.mahout.common.TimingStatistics.toString(),10,26
org.apache.mahout.common.TimingStatistics.newCall(long),13,26
org.apache.mahout.common.TimingStatistics.LeadTimeCall.LeadTimeCall(),3,3
org.apache.mahout.common.TimingStatistics.LeadTimeCall.end(),9,12
org.apache.mahout.common.TimingStatistics.LeadTimeCall.end(long),3,3
org.apache.mahout.common.TimingStatistics.Call.Call(),1,1
org.apache.mahout.common.TimingStatistics.Call.end(),12,30
org.apache.mahout.common.TimingStatistics.Call.end(long),7,13
"org.apache.mahout.math.hadoop.stats.StandardDeviationCalculatorMapper.map(IntWritable,Writable,Context)",16,41
org.apache.mahout.cf.taste.impl.model.GenericDataModelTest.testSerialization(),23,91
org.apache.mahout.math.stats.OnlineExponentialAverageTest.testAverage(),10,16
org.apache.mahout.math.stats.OnlineExponentialAverageTest.testRate(),16,29
"org.apache.mahout.math.neighborhood.HashedVector.HashedVector(Vector,long,int)",4,10
"org.apache.mahout.math.neighborhood.HashedVector.HashedVector(Vector,Matrix,int,long)",8,16
"org.apache.mahout.math.neighborhood.HashedVector.HashedVector(WeightedVector,Matrix,long)",10,25
"org.apache.mahout.math.neighborhood.HashedVector.computeHash64(Vector,Matrix)",9,18
"org.apache.mahout.math.neighborhood.HashedVector.hash(WeightedVector,Matrix)",6,9
"org.apache.mahout.math.neighborhood.HashedVector.hash(WeightedVector,Matrix,long)",7,12
org.apache.mahout.math.neighborhood.HashedVector.hammingDistance(long),5,7
org.apache.mahout.math.neighborhood.HashedVector.getHash(),1,2
org.apache.mahout.math.neighborhood.HashedVector.toString(),5,9
org.apache.mahout.math.neighborhood.HashedVector.equals(Object),7,16
org.apache.mahout.math.neighborhood.HashedVector.hashCode(),3,10
org.apache.mahout.classifier.df.data.DescriptorUtilsTest.testParseDescriptor(),26,63
org.apache.mahout.classifier.df.data.DescriptorUtilsTest.testGenerateDescription(),11,20
"org.apache.mahout.classifier.df.data.DescriptorUtilsTest.validate(String,CharSequence)",9,14
"org.apache.mahout.math.hadoop.DistributedRowMatrix.DistributedRowMatrix(Path,Path,int,int)",10,23
"org.apache.mahout.math.hadoop.DistributedRowMatrix.DistributedRowMatrix(Path,Path,int,int,boolean)",12,38
org.apache.mahout.math.hadoop.DistributedRowMatrix.getConf(),2,3
org.apache.mahout.math.hadoop.DistributedRowMatrix.setConf(Configuration),18,37
org.apache.mahout.math.hadoop.DistributedRowMatrix.getRowPath(),2,5
org.apache.mahout.math.hadoop.DistributedRowMatrix.getOutputTempPath(),5,8
org.apache.mahout.math.hadoop.DistributedRowMatrix.setOutputTempPathString(String),17,35
org.apache.mahout.math.hadoop.DistributedRowMatrix.iterateNonEmpty(),5,6
org.apache.mahout.math.hadoop.DistributedRowMatrix.iterateAll(),29,55
"org.apache.mahout.math.hadoop.DistributedRowMatrix.iterateAll().$1.apply(Pair<IntWritable,VectorWritable>)",6,9
org.apache.mahout.math.hadoop.DistributedRowMatrix.numSlices(),3,4
org.apache.mahout.math.hadoop.DistributedRowMatrix.numRows(),2,4
org.apache.mahout.math.hadoop.DistributedRowMatrix.numCols(),2,4
org.apache.mahout.math.hadoop.DistributedRowMatrix.times(DistributedRowMatrix),17,31
"org.apache.mahout.math.hadoop.DistributedRowMatrix.times(DistributedRowMatrix,Path)",28,86
org.apache.mahout.math.hadoop.DistributedRowMatrix.columnMeans(),7,10
org.apache.mahout.math.hadoop.DistributedRowMatrix.columnMeans(String),38,92
org.apache.mahout.math.hadoop.DistributedRowMatrix.transpose(),26,65
org.apache.mahout.math.hadoop.DistributedRowMatrix.times(Vector),31,87
org.apache.mahout.math.hadoop.DistributedRowMatrix.timesSquared(Vector),29,88
org.apache.mahout.math.hadoop.DistributedRowMatrix.iterator(),4,5
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.getRow(),1,2
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.setRow(int),2,5
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.getCol(),1,2
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.setCol(int),2,5
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.getVal(),1,2
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.setVal(double),2,5
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.compareTo(MatrixEntryWritable),6,12
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.equals(Object),7,15
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.hashCode(),4,4
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.write(DataOutput),7,10
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.readFields(DataInput),8,11
org.apache.mahout.math.hadoop.DistributedRowMatrix.MatrixEntryWritable.toString(),4,5
org.apache.mahout.cf.taste.impl.recommender.NullRescorerTest.testItemRescorer(),8,24
org.apache.mahout.cf.taste.impl.recommender.NullRescorerTest.testUserRescorer(),8,24
org.apache.mahout.common.lucene.AnalyzerUtils.AnalyzerUtils(),2,2
org.apache.mahout.common.lucene.AnalyzerUtils.createAnalyzer(String),21,43
"org.apache.mahout.common.lucene.AnalyzerUtils.createAnalyzer(String,Version)",8,21
org.apache.mahout.common.lucene.AnalyzerUtils.createAnalyzer(Class<>),18,32
"org.apache.mahout.common.lucene.AnalyzerUtils.createAnalyzer(Class<>,Version)",8,20
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CountbasedMeasure.normalize(Vector),2,5
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CountbasedMeasure.norm(Vector),2,5
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CountbasedMeasure.aggregate(double,double)",3,4
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CountbasedMeasure.consider(int,int,double,double,double)",7,12
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.EuclideanDistanceSimilarity.normalize(Vector),2,5
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.EuclideanDistanceSimilarity.norm(Vector),5,13
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.EuclideanDistanceSimilarity.aggregate(double,double)",3,7
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.EuclideanDistanceSimilarity.similarity(double,double,double,int)",21,30
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.EuclideanDistanceSimilarity.consider(int,int,double,double,double)",7,12
org.apache.mahout.math.stats.GlobalOnlineAuc.GlobalOnlineAuc(),13,25
"org.apache.mahout.math.stats.GlobalOnlineAuc.addSample(int,String,double)",6,10
"org.apache.mahout.math.stats.GlobalOnlineAuc.addSample(int,double)",29,78
org.apache.mahout.math.stats.GlobalOnlineAuc.auc(),4,6
org.apache.mahout.math.stats.GlobalOnlineAuc.value(),2,2
org.apache.mahout.math.stats.GlobalOnlineAuc.setPolicy(ReplacementPolicy),3,7
org.apache.mahout.math.stats.GlobalOnlineAuc.setWindowSize(int),3,9
org.apache.mahout.math.stats.GlobalOnlineAuc.write(DataOutput),14,25
org.apache.mahout.math.stats.GlobalOnlineAuc.readFields(DataInput),16,28
org.apache.mahout.math.hadoop.TransposeJob.main(String[]),9,10
org.apache.mahout.math.hadoop.TransposeJob.run(String[]),27,68
"org.apache.mahout.math.hadoop.TransposeJob.buildTransposeJob(Path,Path,int)",11,29
"org.apache.mahout.math.hadoop.TransposeJob.buildTransposeJob(Configuration,Path,Path,int)",30,79
org.apache.mahout.common.parameters.Parametered.getParameters(),3,3
"org.apache.mahout.common.parameters.Parametered.createParameters(String,Configuration)",29,53
org.apache.mahout.common.parameters.Parametered.configure(Configuration),3,3
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.ParameteredGeneralizations(),2,2
"org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.configureParameters(Parametered,Configuration)",8,15
"org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.configureParameters(String,Parametered,Configuration)",28,72
"org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.configureParametersRecursively(Parametered,String,Configuration)",17,48
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.help(Parametered),3,7
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.conf(Parametered),3,7
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.Help.Help(Parametered),14,22
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.Help.toString(),1,3
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.Help.recurseCount(Parametered),10,30
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.Help.recurseWrite(Parametered),14,42
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.Conf.Conf(Parametered),9,13
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.Conf.toString(),1,3
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.Conf.recurseCount(Parametered),13,49
org.apache.mahout.common.parameters.Parametered.ParameteredGeneralizations.Conf.recurseWrite(Parametered),11,32
"org.apache.mahout.classifier.df.Bagging.Bagging(TreeBuilder,Data)",6,16
org.apache.mahout.classifier.df.Bagging.build(Random),16,26
"org.apache.mahout.vectorizer.pruner.WordsPrunerReducer.reduce(WritableComparable<>,Iterable<VectorWritable>,Context)",23,60
org.apache.mahout.vectorizer.pruner.WordsPrunerReducer.setup(Context),29,61
"org.apache.mahout.classifier.sgd.UniformPrior.age(double,double,double)",5,6
org.apache.mahout.classifier.sgd.UniformPrior.logP(double),2,2
org.apache.mahout.classifier.sgd.UniformPrior.write(DataOutput),4,7
org.apache.mahout.classifier.sgd.UniformPrior.readFields(DataInput),7,10
"org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure.distance(Vector,Vector)",12,31
"org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure.distance(double,Vector,Vector)",6,10
org.apache.mahout.classifier.naivebayes.NaiveBayesTestBase.setUp(),9,23
org.apache.mahout.classifier.naivebayes.NaiveBayesTestBase.getStandardModel(),4,7
org.apache.mahout.classifier.naivebayes.NaiveBayesTestBase.getComplementaryModel(),4,7
"org.apache.mahout.classifier.naivebayes.NaiveBayesTestBase.complementaryNaiveBayesThetaWeight(int,Matrix,Vector,Vector)",19,55
"org.apache.mahout.classifier.naivebayes.NaiveBayesTestBase.naiveBayesThetaWeight(int,Matrix,Vector,Vector)",17,47
org.apache.mahout.classifier.naivebayes.NaiveBayesTestBase.createStandardNaiveBayesModel(),14,51
org.apache.mahout.classifier.naivebayes.NaiveBayesTestBase.createComplementaryNaiveBayesModel(),16,103
org.apache.mahout.classifier.naivebayes.NaiveBayesTestBase.maxIndex(Vector),10,26
org.apache.mahout.cf.taste.impl.similarity.file.FileItemItemSimilarityIterator.FileItemItemSimilarityIterator(File),14,26
org.apache.mahout.cf.taste.impl.similarity.file.FileItemItemSimilarityIterator.FileItemItemSimilarityIterator(File).$1.apply(String),9,24
org.apache.mahout.cf.taste.impl.similarity.file.FileItemItemSimilarityIterator.delegate(),5,9
org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategyTest.testStrategy(),28,139
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testItemIDIndexMapper(),19,45
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testItemIDIndexReducer(),17,51
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testToItemPrefsMapper(),18,59
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testToItemPrefsMapperBooleanData(),19,62
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testToUserVectorReducer(),37,110
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testToUserVectorReducerWithBooleanData(),32,95
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testSimilarityMatrixRowWrapperMapper(),30,78
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorOfVectorOrPrefWritableMatches(Vector.Element),15,27
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorOfVectorOrPrefWritableMatches(Vector.Element).$1.matches(Object),10,17
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorOfVectorOrPrefWritableMatches(Vector.Element).$1.appendTo(StringBuffer),3,4
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testUserVectorSplitterMapper(),28,94
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.prefOfVectorOrPrefWritableMatches(long,float)",15,25
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.prefOfVectorOrPrefWritableMatches(long,float).$2.matches(Object)",8,22
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.prefOfVectorOrPrefWritableMatches(long,float).$2.appendTo(StringBuffer)",3,4
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testUserVectorSplitterMapperUserExclusion(),33,120
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testUserVectorSplitterMapperOnlySomePrefsConsidered(),28,96
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.prefOfVectorOrPrefWritableMatchesNaN(long),15,24
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.prefOfVectorOrPrefWritableMatchesNaN(long).$3.matches(Object),8,20
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.prefOfVectorOrPrefWritableMatchesNaN(long).$3.appendTo(StringBuffer),3,4
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testToVectorAndPrefReducer(),33,107
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorAndPrefsWritableMatches(List<Long>,List<Float>,Vector.Element)",18,28
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorAndPrefsWritableMatches(List<Long>,List<Float>,Vector.Element).$4.matches(Object)",14,34
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorAndPrefsWritableMatches(List<Long>,List<Float>,Vector.Element).$4.appendTo(StringBuffer)",3,4
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testToVectorAndPrefReducerExceptionOn2Vectors(),29,86
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testItemFilterMapper(),16,55
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testItemFilterAsVectorAndPrefsReducer(),25,66
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorAndPrefsForFilteringMatches(long,long)",13,17
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorAndPrefsForFilteringMatches(long,long).$5.matches(Object)",18,44
"org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.vectorAndPrefsForFilteringMatches(long,long).$5.appendTo(StringBuffer)",3,4
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testPartialMultiplyMapper(),29,110
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testAggregateAndRecommendReducer(),40,145
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testAggregateAndRecommendReducerExcludeRecommendationsBasedOnOneItem(),42,143
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testAggregateAndRecommendReducerLimitNumberOfRecommendations(),41,144
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.recommendationsMatch(RecommendedItem),14,21
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.recommendationsMatch(RecommendedItem).$6.matches(Object),11,33
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.recommendationsMatch(RecommendedItem).$6.appendTo(StringBuffer),3,4
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testCompleteJob(),48,241
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testCompleteJobBoolean(),51,165
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.testCompleteJobWithFiltering(),51,166
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.readSimilarities(File),13,28
org.apache.mahout.cf.taste.hadoop.item.RecommenderJobTest.readRecommendations(File),26,73
org.apache.mahout.clustering.spectral.UnitVectorizerJob.UnitVectorizerJob(),3,3
"org.apache.mahout.clustering.spectral.UnitVectorizerJob.runJob(Path,Path)",31,90
"org.apache.mahout.clustering.spectral.UnitVectorizerJob.UnitVectorizerMapper.map(IntWritable,VectorWritable,Context)",9,18
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.TanimotoCoefficientSimilarity.similarity(double,double,double,int)",6,12
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.TanimotoCoefficientSimilarity.consider(int,int,double,double,double)",7,26
org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifierTest.setUp(),8,18
org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifierTest.testNaiveBayes(),13,36
"org.apache.mahout.vectorizer.pruner.PrunedPartialVectorMergeReducer.reduce(WritableComparable<>,Iterable<VectorWritable>,Context)",24,62
org.apache.mahout.vectorizer.pruner.PrunedPartialVectorMergeReducer.setup(Context),15,32
"org.apache.mahout.vectorizer.Vectorizer.createVectors(Path,Path,VectorizerConfig)",10,14
org.apache.mahout.math.hadoop.stochasticsvd.QJob.QJob(),1,1
org.apache.mahout.math.hadoop.stochasticsvd.QJob.QMapper.setup(Context),46,123
org.apache.mahout.math.hadoop.stochasticsvd.QJob.QMapper.setup(Context).$1.close(),3,4
"org.apache.mahout.math.hadoop.stochasticsvd.QJob.QMapper.setup(Context).$2.collect(Writable,DenseBlockWritable)",16,21
"org.apache.mahout.math.hadoop.stochasticsvd.QJob.QMapper.setup(Context).$3.collect(Writable,VectorWritable)",14,20
"org.apache.mahout.math.hadoop.stochasticsvd.QJob.QMapper.map(Writable,VectorWritable,Context)",15,23
org.apache.mahout.math.hadoop.stochasticsvd.QJob.QMapper.cleanup(Context),7,9
"org.apache.mahout.math.hadoop.stochasticsvd.QJob.run(Configuration,Path[],Path,Path,int,int,int,int,long,int)",65,248
"org.apache.mahout.classifier.df.tools.FrequenciesJob.FrequenciesJob(Path,Path,Path)",10,33
org.apache.mahout.classifier.df.tools.FrequenciesJob.run(Configuration),47,144
org.apache.mahout.classifier.df.tools.FrequenciesJob.parseOutput(JobContext),43,92
org.apache.mahout.classifier.df.tools.FrequenciesJob.FrequenciesMapper.setup(Context),9,17
org.apache.mahout.classifier.df.tools.FrequenciesJob.FrequenciesMapper.setup(Dataset),6,9
"org.apache.mahout.classifier.df.tools.FrequenciesJob.FrequenciesMapper.map(LongWritable,Text,Context)",15,24
org.apache.mahout.classifier.df.tools.FrequenciesJob.FrequenciesReducer.setup(Context),10,19
org.apache.mahout.classifier.df.tools.FrequenciesJob.FrequenciesReducer.setup(int),4,6
"org.apache.mahout.classifier.df.tools.FrequenciesJob.FrequenciesReducer.reduce(LongWritable,Iterable<IntWritable>,Context)",13,24
org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.Frequencies(),1,1
"org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.Frequencies(long,int[])",5,8
org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.readFields(DataInput),8,10
org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.write(DataOutput),7,9
org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.equals(Object),3,4
org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.hashCode(),2,2
org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.clone(),3,4
org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.compareTo(Frequencies),3,5
org.apache.mahout.classifier.df.tools.FrequenciesJob.Frequencies.extractCounts(Frequencies[]),5,13
org.apache.mahout.classifier.ClassifierData.ClassifierData(),2,2
org.apache.mahout.cf.taste.hadoop.TasteHadoopUtilsTest.testWithinRange(),9,56
org.apache.mahout.math.neighborhood.UpdatableSearcher.UpdatableSearcher(DistanceMeasure),4,8
"org.apache.mahout.math.neighborhood.UpdatableSearcher.remove(Vector,double)",3,3
org.apache.mahout.math.neighborhood.UpdatableSearcher.clear(),0,0
org.apache.mahout.cf.taste.impl.similarity.AveragingPreferenceInferrerTest.testInferrer(),12,23
"org.apache.mahout.common.iterator.SamplingIterator<T>.SamplingIterator(Iterator<>,double)",6,12
"org.apache.mahout.common.iterator.SamplingIterator<T>.SamplingIterator(RandomWrapper,Iterator<>,double)",17,43
org.apache.mahout.common.iterator.SamplingIterator<T>.computeNext(),9,29
"org.apache.mahout.vectorizer.SimpleTextEncodingVectorizer.createVectors(Path,Path,VectorizerConfig)",49,120
org.apache.mahout.classifier.df.builder.InfiniteRecursionTest.testBuild(),18,64
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.CityBlockSimilarity.similarity(double,double,double,int)",4,8
"org.apache.mahout.vectorizer.collocations.llr.CollocCombiner.reduce(GramKey,Iterable<Gram>,Context)",16,39
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.setEigensToVerify(VectorIterable),5,9
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.run(String[]),26,48
"org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.run(Path,Path,Path,Path,double,double,boolean,Configuration)",67,165
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.handleArgs(String[]),41,90
"org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.saveCleanEigens(Configuration,Collection<Map.Entry<MatrixSlice,EigenStatus>>)",55,138
"org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.pruneEigens(Map<MatrixSlice,EigenStatus>)",44,200
"org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.pruneEigens(Map<MatrixSlice,EigenStatus>).$1.compare(Map.Entry<MatrixSlice,EigenStatus>,Map.Entry<MatrixSlice,EigenStatus>)",12,24
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.verifyEigens(),14,40
"org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.prepareEigens(Configuration,Path,boolean)",23,60
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.getCleanedEigensPath(),3,7
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.main(String[]),10,11
"org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.runJob(Configuration,Path,Path,Path,boolean,double,int)",43,113
"org.apache.mahout.vectorizer.term.TermDocumentCountMapper.map(WritableComparable<>,VectorWritable,Context)",16,27
"org.apache.mahout.common.mapreduce.MergeVectorsReducer.reduce(WritableComparable<>,Iterable<VectorWritable>,Context)",20,31
org.apache.mahout.clustering.spectral.TestVectorMatrixMultiplicationJob.testVectorMatrixMultiplicationMapper(),41,119
org.apache.mahout.cf.taste.impl.recommender.MockRecommender.MockRecommender(MutableInt),5,9
"org.apache.mahout.cf.taste.impl.recommender.MockRecommender.recommend(long,int)",10,16
"org.apache.mahout.cf.taste.impl.recommender.MockRecommender.recommend(long,int,boolean)",7,9
"org.apache.mahout.cf.taste.impl.recommender.MockRecommender.recommend(long,int,IDRescorer)",6,9
"org.apache.mahout.cf.taste.impl.recommender.MockRecommender.recommend(long,int,IDRescorer,boolean)",8,11
"org.apache.mahout.cf.taste.impl.recommender.MockRecommender.estimatePreference(long,long)",7,7
"org.apache.mahout.cf.taste.impl.recommender.MockRecommender.setPreference(long,long,float)",5,5
"org.apache.mahout.cf.taste.impl.recommender.MockRecommender.removePreference(long,long)",4,4
org.apache.mahout.cf.taste.impl.recommender.MockRecommender.getDataModel(),4,8
org.apache.mahout.cf.taste.impl.recommender.MockRecommender.refresh(Collection<Refreshable>),4,4
"org.apache.mahout.math.hadoop.similarity.VectorDistanceInvertedMapper.map(WritableComparable<>,VectorWritable,Context)",24,64
org.apache.mahout.math.hadoop.similarity.VectorDistanceInvertedMapper.setup(Context),19,37
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasure.normalize(Vector),2,4
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasure.norm(Vector),2,3
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasure.aggregate(double,double)",3,5
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasure.similarity(double,double,double,int)",5,6
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasure.consider(int,int,double,double,double)",7,12
"org.apache.mahout.common.nlp.NGrams.NGrams(String,int)",5,11
org.apache.mahout.common.nlp.NGrams.generateNGrams(),27,85
org.apache.mahout.common.nlp.NGrams.generateNGramsWithoutLabel(),20,62
"org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.HdfsBackedLanczosState(VectorIterable,int,Vector,Path)",19,47
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.setConf(Configuration),12,16
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.getConf(),2,3
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.setupDirs(),14,24
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.createDirIfNotExist(Path),8,14
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.setIterationNumber(int),7,11
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.updateHdfsState(),32,173
"org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.persistVector(Path,int,Vector)",18,35
"org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.fetchVector(Path,int)",12,28
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.getBasisVector(int),11,23
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.getRightSingularVector(int),13,26
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.getScaleFactor(),12,23
org.apache.mahout.math.hadoop.decomposer.HdfsBackedLanczosState.getDiagonalMatrix(),18,61
org.apache.mahout.classifier.df.split.RegressionSplitTest.generateTrainingData(),12,80
org.apache.mahout.classifier.df.split.RegressionSplitTest.testComputeSplit(),15,70
org.apache.mahout.classifier.df.node.Leaf.Leaf(),1,1
org.apache.mahout.classifier.df.node.Leaf.Leaf(double),2,4
org.apache.mahout.classifier.df.node.Leaf.classify(Instance),3,4
org.apache.mahout.classifier.df.node.Leaf.maxDepth(),2,2
org.apache.mahout.classifier.df.node.Leaf.nbNodes(),1,1
org.apache.mahout.classifier.df.node.Leaf.getType(),2,4
org.apache.mahout.classifier.df.node.Leaf.equals(Object),8,16
org.apache.mahout.classifier.df.node.Leaf.hashCode(),4,7
org.apache.mahout.classifier.df.node.Leaf.getString(),1,2
org.apache.mahout.classifier.df.node.Leaf.readFields(DataInput),6,7
org.apache.mahout.classifier.df.node.Leaf.writeNode(DataOutput),6,7
"org.apache.mahout.common.DummyOutputCollector<K,V>.collect(K,V)",8,13
"org.apache.mahout.common.DummyOutputCollector<K,V>.getData()",3,4
"org.apache.mahout.common.DummyOutputCollector<K,V>.getValue(K)",4,5
"org.apache.mahout.common.DummyOutputCollector<K,V>.getKeys()",4,5
org.apache.mahout.classifier.df.tools.TreeVisualizer.TreeVisualizer(),2,2
org.apache.mahout.classifier.df.tools.TreeVisualizer.doubleToString(double),4,9
"org.apache.mahout.classifier.df.tools.TreeVisualizer.toStringNode(Node,Dataset,String[],Map<String,Field>,int)",31,225
org.apache.mahout.classifier.df.tools.TreeVisualizer.getReflectMap(),23,116
"org.apache.mahout.classifier.df.tools.TreeVisualizer.toString(Node,Dataset,String[])",11,29
"org.apache.mahout.classifier.df.tools.TreeVisualizer.print(Node,Dataset,String[])",12,27
"org.apache.mahout.classifier.df.tools.TreeVisualizer.toStringPredict(Node,Instance,Dataset,String[],Map<String,Field>)",31,230
"org.apache.mahout.classifier.df.tools.TreeVisualizer.predictTrace(Node,Data,String[])",16,48
"org.apache.mahout.classifier.df.tools.TreeVisualizer.predictTracePrint(Node,Data,String[])",18,43
"org.apache.mahout.vectorizer.TFIDF.calculate(int,int,int,int)",7,11
org.apache.mahout.cf.taste.model.IDMigrator.toLongID(String),7,10
org.apache.mahout.cf.taste.model.IDMigrator.toStringID(long),11,15
org.apache.mahout.classifier.df.builder.DecisionTreeBuilderTest.testRandomAttributes(),31,95
org.apache.mahout.cf.taste.impl.common.MockRefreshable.refresh(Collection<Refreshable>),5,5
org.apache.mahout.cf.taste.impl.common.MockRefreshable.call(),3,4
org.apache.mahout.cf.taste.impl.common.MockRefreshable.getCallCount(),2,4
org.apache.mahout.common.iterator.FileLineIterable.FileLineIterable(File),10,18
"org.apache.mahout.common.iterator.FileLineIterable.FileLineIterable(File,boolean)",11,22
"org.apache.mahout.common.iterator.FileLineIterable.FileLineIterable(File,Charset,boolean)",13,28
org.apache.mahout.common.iterator.FileLineIterable.FileLineIterable(InputStream),7,7
"org.apache.mahout.common.iterator.FileLineIterable.FileLineIterable(InputStream,boolean)",8,11
"org.apache.mahout.common.iterator.FileLineIterable.FileLineIterable(InputStream,Charset,boolean)",10,17
"org.apache.mahout.common.iterator.FileLineIterable.FileLineIterable(InputStream,Charset,boolean,String)",11,20
org.apache.mahout.common.iterator.FileLineIterable.iterator(),11,16
"org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement.MutableElement(int,double)",4,8
org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement.get(),1,1
org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement.index(),1,2
org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement.setIndex(int),2,5
org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement.set(double),2,4
org.apache.mahout.vectorizer.collocations.llr.GramKey.GramKey(),2,2
"org.apache.mahout.vectorizer.collocations.llr.GramKey.GramKey(Gram,byte[])",7,15
"org.apache.mahout.vectorizer.collocations.llr.GramKey.set(Gram,byte[])",10,32
org.apache.mahout.vectorizer.collocations.llr.GramKey.getBytes(),1,2
org.apache.mahout.vectorizer.collocations.llr.GramKey.getLength(),1,2
org.apache.mahout.vectorizer.collocations.llr.GramKey.getPrimaryLength(),2,4
org.apache.mahout.vectorizer.collocations.llr.GramKey.readFields(DataInput),13,28
org.apache.mahout.vectorizer.collocations.llr.GramKey.write(DataOutput),10,18
"org.apache.mahout.vectorizer.collocations.llr.GramKey.setCapacity(int,boolean)",25,51
org.apache.mahout.vectorizer.collocations.llr.GramKey.getType(),9,12
org.apache.mahout.vectorizer.collocations.llr.GramKey.getPrimaryString(),10,13
org.apache.mahout.vectorizer.collocations.llr.GramKey.toString(),3,5
org.apache.mahout.cf.taste.impl.recommender.AllUnknownItemsCandidateItemsStrategyTest.testStrategy(),33,100
"org.apache.mahout.math.hadoop.similarity.VectorDistanceMapper.map(WritableComparable<>,VectorWritable,Context)",23,70
org.apache.mahout.math.hadoop.similarity.VectorDistanceMapper.setup(Context),24,58
"org.apache.mahout.classifier.sgd.Gradient.apply(String,int,Vector,AbstractVectorClassifier)",7,10
org.apache.mahout.math.hadoop.stochasticsvd.YtYJob.YtYJob(),1,1
org.apache.mahout.math.hadoop.stochasticsvd.YtYJob.YtYMapper.setup(Context),20,40
"org.apache.mahout.math.hadoop.stochasticsvd.YtYJob.YtYMapper.map(Writable,VectorWritable,Context)",36,65
org.apache.mahout.math.hadoop.stochasticsvd.YtYJob.YtYMapper.cleanup(Context),11,18
org.apache.mahout.math.hadoop.stochasticsvd.YtYJob.YtYReducer.setup(Context),14,23
org.apache.mahout.math.hadoop.stochasticsvd.YtYJob.YtYReducer.cleanup(Context),7,10
"org.apache.mahout.math.hadoop.stochasticsvd.YtYJob.YtYReducer.reduce(IntWritable,Iterable<VectorWritable>,Context)",12,17
"org.apache.mahout.math.hadoop.stochasticsvd.YtYJob.run(Configuration,Path[],Path,int,int,long)",49,140
org.apache.mahout.classifier.df.mapreduce.partial.TreeID.TreeID(),1,1
"org.apache.mahout.classifier.df.mapreduce.partial.TreeID.TreeID(int,int)",7,22
"org.apache.mahout.classifier.df.mapreduce.partial.TreeID.set(int,int)",5,8
org.apache.mahout.classifier.df.mapreduce.partial.TreeID.partition(),9,10
org.apache.mahout.classifier.df.mapreduce.partial.TreeID.treeId(),3,3
org.apache.mahout.classifier.df.mapreduce.partial.TreeID.clone(),3,5
org.apache.mahout.cf.taste.impl.common.FastMapTest.testPutAndGet(),7,18
org.apache.mahout.cf.taste.impl.common.FastMapTest.testRemove(),10,23
org.apache.mahout.cf.taste.impl.common.FastMapTest.testClear(),9,20
org.apache.mahout.cf.taste.impl.common.FastMapTest.testSizeEmpty(),10,32
org.apache.mahout.cf.taste.impl.common.FastMapTest.testContains(),14,41
org.apache.mahout.cf.taste.impl.common.FastMapTest.testNull1(),5,12
org.apache.mahout.cf.taste.impl.common.FastMapTest.testNull2(),5,11
org.apache.mahout.cf.taste.impl.common.FastMapTest.testRehash(),11,22
org.apache.mahout.cf.taste.impl.common.FastMapTest.testGrow(),12,28
org.apache.mahout.cf.taste.impl.common.FastMapTest.testKeySet(),22,63
org.apache.mahout.cf.taste.impl.common.FastMapTest.testValues(),22,61
org.apache.mahout.cf.taste.impl.common.FastMapTest.testEntrySet(),26,90
org.apache.mahout.cf.taste.impl.common.FastMapTest.testVersusHashMap(),18,56
org.apache.mahout.cf.taste.impl.common.FastMapTest.testMaxSize(),12,35
org.apache.mahout.cf.taste.impl.common.FastMapTest.buildTestFastMap(),11,27
org.apache.mahout.classifier.df.builder.DefaultTreeBuilderTest.testRandomAttributes(),25,81
"org.apache.mahout.math.stats.GroupedOnlineAuc.addSample(int,String,double)",14,35
"org.apache.mahout.math.stats.GroupedOnlineAuc.addSample(int,double)",9,10
org.apache.mahout.math.stats.GroupedOnlineAuc.auc(),6,13
org.apache.mahout.math.stats.GroupedOnlineAuc.setPolicy(GlobalOnlineAuc.ReplacementPolicy),8,19
org.apache.mahout.math.stats.GroupedOnlineAuc.setWindowSize(int),7,20
org.apache.mahout.math.stats.GroupedOnlineAuc.write(DataOutput),19,31
org.apache.mahout.math.stats.GroupedOnlineAuc.readFields(DataInput),19,29
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFiles.main(String[]),11,12
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFiles.run(String[]),158,1233
org.apache.mahout.classifier.df.data.DataTest.setUp(),11,27
org.apache.mahout.classifier.df.data.DataTest.testSubset(),20,175
org.apache.mahout.classifier.df.data.DataTest.testValues(),18,63
"org.apache.mahout.classifier.df.data.DataTest.count(double[],double)",3,8
org.apache.mahout.classifier.df.data.DataTest.testIdenticalTrue(),21,61
org.apache.mahout.classifier.df.data.DataTest.testIdenticalFalse(),19,42
org.apache.mahout.classifier.df.data.DataTest.testIdenticalLabelTrue(),21,70
org.apache.mahout.classifier.df.data.DataTest.testIdenticalLabelFalse(),24,65
org.apache.mahout.classifier.df.data.DataTest.testBagging(),14,74
org.apache.mahout.classifier.df.data.DataTest.testRsplit(),17,165
org.apache.mahout.classifier.df.data.DataTest.testCountLabel(),17,48
org.apache.mahout.classifier.df.data.DataTest.testMajorityLabel(),27,171
"org.apache.mahout.classifier.df.mapreduce.inmem.InMemMapper.loadData(Configuration,Dataset)",15,34
org.apache.mahout.classifier.df.mapreduce.inmem.InMemMapper.setup(Context),18,34
"org.apache.mahout.classifier.df.mapreduce.inmem.InMemMapper.map(IntWritable,NullWritable,Context)",7,13
"org.apache.mahout.classifier.df.mapreduce.inmem.InMemMapper.map(IntWritable,Context)",23,36
org.apache.mahout.classifier.df.mapreduce.inmem.InMemMapper.initRandom(InMemInputSplit),13,27
"org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.SSVDSolver(Configuration,Path[],Path,int,int,int,int)",52,101
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getQ(),0,0
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setQ(int),10,10
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setComputeU(boolean),9,12
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setComputeV(boolean),11,16
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setcUHalfSigma(boolean),6,11
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setcVHalfSigma(boolean),6,11
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setcUSigma(boolean),5,10
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setcVSigma(boolean),5,10
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setMinSplitSize(int),16,27
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getSingularValues(),10,13
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getUPath(),11,15
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getVPath(),10,14
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getuSigmaPath(),4,6
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getuHalfSigmaPath(),5,8
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getvSigmaPath(),4,6
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getvHalfSigmaPath(),5,8
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.isOverwrite(),1,2
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setOverwrite(boolean),8,12
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getOuterBlockHeight(),3,6
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setOuterBlockHeight(int),25,40
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getAbtBlockHeight(),3,6
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setAbtBlockHeight(int),18,38
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.isBroadcast(),1,2
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setBroadcast(boolean),10,15
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getPcaMeanPath(),36,52
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.setPcaMeanPath(Path),4,14
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.getOmegaSeed(),2,4
org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver.run(),148,708
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegressionTest.testTrain(),34,110
"org.apache.mahout.classifier.sgd.AdaptiveLogisticRegressionTest.getExample(int,Random,Vector)",17,36
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegressionTest.copyLearnsAsExpected(),44,123
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegressionTest.stepSize(),6,26
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegressionTest.constantStep(),9,19
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegressionTest.growingStep(),15,26
"org.apache.mahout.common.mapreduce.VectorSumReducer.reduce(WritableComparable<>,Iterable<VectorWritable>,Context)",15,22
"org.apache.mahout.vectorizer.term.TermDocumentCountReducer.reduce(IntWritable,Iterable<LongWritable>,Context)",11,22
org.apache.mahout.classifier.df.data.DatasetTest.jsonEncoding(),21,54
org.apache.mahout.classifier.df.data.DatasetTest.jsonEncodingIgnoreFeatures(),26,77
org.apache.mahout.math.MultiLabelVectorWritable.MultiLabelVectorWritable(),4,4
"org.apache.mahout.math.MultiLabelVectorWritable.MultiLabelVectorWritable(Vector,int[])",6,13
org.apache.mahout.math.MultiLabelVectorWritable.getVector(),2,4
org.apache.mahout.math.MultiLabelVectorWritable.setVector(Vector),3,8
org.apache.mahout.math.MultiLabelVectorWritable.setLabels(int[]),2,5
org.apache.mahout.math.MultiLabelVectorWritable.getLabels(),1,2
org.apache.mahout.math.MultiLabelVectorWritable.readFields(DataInput),10,19
org.apache.mahout.math.MultiLabelVectorWritable.write(DataOutput),9,14
org.apache.mahout.math.MultiLabelVectorWritable.read(DataInput),9,21
"org.apache.mahout.math.MultiLabelVectorWritable.write(DataOutput,SequentialAccessSparseVector,int[])",13,17
"org.apache.mahout.math.hadoop.solver.TestDistributedConjugateGradientSolver.randomVector(int,double)",10,21
org.apache.mahout.math.hadoop.solver.TestDistributedConjugateGradientSolver.testSolver(),31,66
"org.apache.mahout.math.hadoop.stochasticsvd.VJob.VMapper.map(IntWritable,VectorWritable,Context)",33,54
org.apache.mahout.math.hadoop.stochasticsvd.VJob.VMapper.setup(Context),40,131
"org.apache.mahout.math.hadoop.stochasticsvd.VJob.run(Configuration,Path,Path,Path,Path,Path,Path,int,int,SSVDSolver.OutputScalingEnum)",57,252
org.apache.mahout.math.hadoop.stochasticsvd.VJob.waitForCompletion(),8,15
org.apache.mahout.cf.taste.impl.neighborhood.DummySimilarity.DummySimilarity(DataModel),4,8
"org.apache.mahout.cf.taste.impl.neighborhood.DummySimilarity.userSimilarity(long,long)",10,26
"org.apache.mahout.cf.taste.impl.neighborhood.DummySimilarity.itemSimilarity(long,long)",5,9
"org.apache.mahout.cf.taste.impl.neighborhood.DummySimilarity.itemSimilarities(long,long[])",5,16
org.apache.mahout.cf.taste.impl.neighborhood.DummySimilarity.setPreferenceInferrer(PreferenceInferrer),6,9
org.apache.mahout.cf.taste.impl.neighborhood.DummySimilarity.refresh(Collection<Refreshable>),4,4
org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifierTest.setUp(),8,18
org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifierTest.testNaiveBayes(),13,36
org.apache.mahout.vectorizer.DocumentProcessor.DocumentProcessor(),4,4
"org.apache.mahout.vectorizer.DocumentProcessor.tokenizeDocuments(Path,Class<>,Path,Configuration)",63,186
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarityTest.setUp(),9,15
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarityTest.testLoadFromFile(),11,49
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarityTest.testNoRefreshAfterFileUpdate(),28,54
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarityTest.testRefreshAfterFileUpdate(),26,74
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarityTest.testFileNotFoundExceptionForNonExistingFile(),8,12
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarityTest.testFileItemItemSimilarityIterable(),12,66
org.apache.mahout.cf.taste.impl.similarity.file.FileItemSimilarityTest.testToString(),7,14
"org.apache.mahout.vectorizer.term.TermCountCombiner.reduce(Text,Iterable<LongWritable>,Context)",12,22
org.apache.mahout.vectorizer.encoders.TextValueEncoder.TextValueEncoder(String),10,16
"org.apache.mahout.vectorizer.encoders.TextValueEncoder.addToVector(byte[],double,Vector)",8,14
org.apache.mahout.vectorizer.encoders.TextValueEncoder.addText(byte[]),18,29
org.apache.mahout.vectorizer.encoders.TextValueEncoder.addText(CharSequence),20,28
"org.apache.mahout.vectorizer.encoders.TextValueEncoder.flush(double,Vector)",20,33
"org.apache.mahout.vectorizer.encoders.TextValueEncoder.hashForProbe(byte[],int,String,int)",8,9
"org.apache.mahout.vectorizer.encoders.TextValueEncoder.hashesForProbe(byte[],int,String,int)",21,37
org.apache.mahout.vectorizer.encoders.TextValueEncoder.tokenize(CharSequence),19,22
org.apache.mahout.vectorizer.encoders.TextValueEncoder.asString(String),9,24
org.apache.mahout.vectorizer.encoders.TextValueEncoder.setWordEncoder(FeatureVectorEncoder),5,12
"org.apache.mahout.vectorizer.document.SequenceFileTokenizerMapper.map(Text,Text,Context)",25,61
org.apache.mahout.vectorizer.document.SequenceFileTokenizerMapper.setup(Context),15,34
"org.apache.mahout.cf.taste.impl.TasteTestCase.getDataModel(long[],Double[][])",18,54
"org.apache.mahout.cf.taste.impl.TasteTestCase.getBooleanDataModel(long[],boolean[][])",13,41
org.apache.mahout.cf.taste.impl.TasteTestCase.getDataModel(),2,6
org.apache.mahout.cf.taste.impl.TasteTestCase.getBooleanDataModel(),2,6
"org.apache.mahout.cf.taste.impl.TasteTestCase.arrayContains(long[],long)",3,6
org.apache.mahout.cf.taste.impl.model.file.FileIDMigratorTest.setUp(),10,16
org.apache.mahout.cf.taste.impl.model.file.FileIDMigratorTest.testLoadFromFile(),10,32
org.apache.mahout.cf.taste.impl.model.file.FileIDMigratorTest.testNoRefreshAfterFileUpdate(),31,62
org.apache.mahout.cf.taste.impl.model.file.FileIDMigratorTest.testRefreshAfterFileUpdate(),27,62
org.apache.mahout.classifier.naivebayes.training.IndexInstancesMapper.setup(Context),12,17
"org.apache.mahout.classifier.naivebayes.training.IndexInstancesMapper.map(Text,VectorWritable,Context)",21,37
org.apache.mahout.classifier.ConfusionMatrixTest.testBuild(),10,20
org.apache.mahout.classifier.ConfusionMatrixTest.testGetMatrix(),20,64
org.apache.mahout.classifier.ConfusionMatrixTest.testPrecisionRecallAndF1ScoreAsScikitLearn(),17,51
org.apache.mahout.classifier.ConfusionMatrixTest.checkValues(ConfusionMatrix),14,48
org.apache.mahout.classifier.ConfusionMatrixTest.checkAccuracy(ConfusionMatrix),12,20
"org.apache.mahout.classifier.ConfusionMatrixTest.fillConfusionMatrix(int[][],String[],String)",13,70
"org.apache.mahout.clustering.fuzzykmeans.FuzzyKMeansClusterer.computePi(Collection<SoftCluster>,List<Double>)",13,31
"org.apache.mahout.clustering.fuzzykmeans.FuzzyKMeansClusterer.computeProbWeight(double,Iterable<Double>)",16,35
org.apache.mahout.clustering.fuzzykmeans.FuzzyKMeansClusterer.setM(double),1,1
org.apache.mahout.cf.taste.impl.common.RefreshHelperTest.testCallable(),9,18
org.apache.mahout.cf.taste.impl.common.RefreshHelperTest.testNoCallable(),5,8
org.apache.mahout.cf.taste.impl.common.RefreshHelperTest.testDependencies(),11,35
org.apache.mahout.cf.taste.impl.common.RefreshHelperTest.testAlreadyRefreshed(),17,47
org.apache.mahout.vectorizer.encoders.AdaptiveWordValueEncoder.AdaptiveWordValueEncoder(String),10,11
"org.apache.mahout.vectorizer.encoders.AdaptiveWordValueEncoder.addToVector(String,double,Vector)",8,18
"org.apache.mahout.vectorizer.encoders.AdaptiveWordValueEncoder.getWeight(byte[],double)",3,6
org.apache.mahout.vectorizer.encoders.AdaptiveWordValueEncoder.weight(byte[]),28,40
org.apache.mahout.vectorizer.encoders.AdaptiveWordValueEncoder.getDictionary(),3,4
org.apache.mahout.classifier.mlp.MultilayerPerceptron.MultilayerPerceptron(),3,3
org.apache.mahout.classifier.mlp.MultilayerPerceptron.MultilayerPerceptron(String),11,18
"org.apache.mahout.classifier.mlp.MultilayerPerceptron.train(int,Vector)",12,36
"org.apache.mahout.classifier.mlp.MultilayerPerceptron.train(long,String,int,Vector)",10,11
"org.apache.mahout.classifier.mlp.MultilayerPerceptron.train(long,int,Vector)",9,9
org.apache.mahout.classifier.mlp.MultilayerPerceptron.close(),1,1
org.apache.mahout.cf.taste.hadoop.item.IDReaderTest.testUserItemFilter(),24,140
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArrayTest.testUserID(),9,23
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArrayTest.testItemID(),9,29
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArrayTest.testSetValue(),10,19
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArrayTest.testHasPref(),9,24
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArrayTest.testSort(),10,32
org.apache.mahout.cf.taste.impl.model.BooleanItemPreferenceArrayTest.testClone(),9,27
org.apache.mahout.classifier.naivebayes.NaiveBayesModelTest.testRandomModelGeneration(),12,32
org.apache.mahout.vectorizer.common.PartialVectorMerger.PartialVectorMerger(),5,5
"org.apache.mahout.vectorizer.common.PartialVectorMerger.mergePartialVectors(Iterable<Path>,Path,Configuration,float,boolean,int,boolean,boolean,int)",87,303
org.apache.mahout.vectorizer.common.PartialVectorMerger.getCommaSeparatedPaths(Iterable<Path>),9,32
org.apache.mahout.vectorizer.collocations.llr.CollocDriver.main(String[]),9,10
org.apache.mahout.vectorizer.collocations.llr.CollocDriver.run(String[]),94,357
"org.apache.mahout.vectorizer.collocations.llr.CollocDriver.generateAllGrams(Path,Path,Configuration,int,int,float,int)",48,119
"org.apache.mahout.vectorizer.collocations.llr.CollocDriver.generateCollocations(Path,Path,Configuration,boolean,int,int,int)",56,192
"org.apache.mahout.vectorizer.collocations.llr.CollocDriver.computeNGramsPruneByLLR(Path,Configuration,long,boolean,float,int)",50,165
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArrayTest.testUserID(),9,24
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArrayTest.testItemID(),10,30
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArrayTest.testSetValue(),11,34
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArrayTest.testHasPref(),9,25
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArrayTest.testSort(),10,33
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArrayTest.testSortValue(),12,47
org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArrayTest.testClone(),12,36
"org.apache.mahout.clustering.lda.cvb.CVB0TopicTermVectorNormalizerMapper.map(IntWritable,VectorWritable,Context)",13,21
"org.apache.mahout.common.LongPair.LongPair(long,long)",1,1
org.apache.mahout.common.LongPair.getFirst(),0,0
org.apache.mahout.common.LongPair.getSecond(),0,0
org.apache.mahout.common.LongPair.swap(),2,3
org.apache.mahout.common.LongPair.equals(Object),4,11
org.apache.mahout.common.LongPair.hashCode(),11,20
org.apache.mahout.common.LongPair.toString(),2,4
org.apache.mahout.common.LongPair.compareTo(LongPair),2,2
org.apache.mahout.math.hadoop.stats.VarianceTotals.getSumOfSquares(),2,4
org.apache.mahout.math.hadoop.stats.VarianceTotals.setSumOfSquares(double),3,9
org.apache.mahout.math.hadoop.stats.VarianceTotals.getSum(),1,2
org.apache.mahout.math.hadoop.stats.VarianceTotals.setSum(double),2,5
org.apache.mahout.math.hadoop.stats.VarianceTotals.getTotalCount(),2,4
org.apache.mahout.math.hadoop.stats.VarianceTotals.setTotalCount(double),3,9
org.apache.mahout.math.hadoop.stats.VarianceTotals.computeMean(),5,5
org.apache.mahout.math.hadoop.stats.VarianceTotals.computeVariance(),6,12
org.apache.mahout.math.hadoop.stats.VarianceTotals.computeVarianceForGivenMean(double),7,12
org.apache.mahout.clustering.canopy.TestCanopyCreation.getPointsWritable(),13,24
org.apache.mahout.clustering.canopy.TestCanopyCreation.getPoints(),12,19
org.apache.mahout.clustering.canopy.TestCanopyCreation.printCanopies(Iterable<Canopy>),11,20
org.apache.mahout.clustering.canopy.TestCanopyCreation.setUp(),16,38
org.apache.mahout.clustering.canopy.TestCanopyCreation.testReferenceManhattan(),22,66
org.apache.mahout.clustering.canopy.TestCanopyCreation.testReferenceEuclidean(),22,66
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyMapperManhattan(),39,127
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyMapperEuclidean(),39,127
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyReducerManhattan(),42,143
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyReducerEuclidean(),42,143
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyGenManhattanMR(),47,162
"org.apache.mahout.clustering.canopy.TestCanopyCreation.findAndRemove(Pair<Double,Double>,Collection<Pair<Double,Double>>,double)",9,23
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyGenEuclideanMR(),47,162
org.apache.mahout.clustering.canopy.TestCanopyCreation.testClusteringManhattanSeq(),40,92
org.apache.mahout.clustering.canopy.TestCanopyCreation.testClusteringEuclideanSeq(),52,151
org.apache.mahout.clustering.canopy.TestCanopyCreation.testClusteringEuclideanWithOutlierRemovalSeq(),56,164
org.apache.mahout.clustering.canopy.TestCanopyCreation.testClusteringManhattanMR(),30,72
org.apache.mahout.clustering.canopy.TestCanopyCreation.testClusteringEuclideanMR(),43,126
org.apache.mahout.clustering.canopy.TestCanopyCreation.testClusteringEuclideanWithOutlierRemovalMR(),46,139
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyReducerT3T4Configuration(),32,112
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyMapperClusterFilter(),39,116
org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyReducerClusterFilter(),36,105
org.apache.mahout.common.IntegerTuple.IntegerTuple(),2,2
org.apache.mahout.common.IntegerTuple.IntegerTuple(Integer),4,6
org.apache.mahout.common.IntegerTuple.IntegerTuple(Iterable<Integer>),6,10
org.apache.mahout.common.IntegerTuple.IntegerTuple(Integer[]),5,9
org.apache.mahout.common.IntegerTuple.add(Integer),8,13
org.apache.mahout.common.IntegerTuple.integerAt(int),9,15
"org.apache.mahout.common.IntegerTuple.replaceAt(int,Integer)",11,20
org.apache.mahout.common.IntegerTuple.getEntries(),10,15
org.apache.mahout.common.IntegerTuple.length(),4,7
org.apache.mahout.common.IntegerTuple.toString(),2,4
org.apache.mahout.common.IntegerTuple.hashCode(),3,5
org.apache.mahout.common.IntegerTuple.equals(Object),5,16
org.apache.mahout.common.IntegerTuple.readFields(DataInput),12,19
org.apache.mahout.common.IntegerTuple.write(DataOutput),8,12
org.apache.mahout.common.IntegerTuple.compareTo(IntegerTuple),7,26
"org.apache.mahout.clustering.canopy.CanopyMapper.map(WritableComparable<>,VectorWritable,Context)",12,16
org.apache.mahout.clustering.canopy.CanopyMapper.setup(Context),15,28
org.apache.mahout.clustering.canopy.CanopyMapper.cleanup(Context),18,27
org.apache.mahout.vectorizer.EncodingMapper.setup(Context),33,89
"org.apache.mahout.vectorizer.EncodingMapper.map(Text,Text,Context)",20,48
org.apache.mahout.common.lucene.IteratorTokenStream.IteratorTokenStream(Iterator<String>),8,14
org.apache.mahout.common.lucene.IteratorTokenStream.incrementToken(),7,8
org.apache.mahout.cf.taste.impl.neighborhood.NearestNNeighborhoodTest.testNeighborhood(),13,75
"org.apache.mahout.clustering.kernel.TriangularKernelProfile.calculateDerivativeValue(double,double)",4,5
org.apache.mahout.common.mapreduce.TransposeMapper.setup(Context),12,16
"org.apache.mahout.common.mapreduce.TransposeMapper.map(IntWritable,VectorWritable,Context)",20,35
org.apache.mahout.clustering.iterator.ClusteringPolicyWritable.ClusteringPolicyWritable(ClusteringPolicy),4,8
org.apache.mahout.clustering.iterator.ClusteringPolicyWritable.ClusteringPolicyWritable(),3,3
org.apache.mahout.clustering.iterator.ClusteringPolicyWritable.getValue(),3,4
org.apache.mahout.clustering.iterator.ClusteringPolicyWritable.setValue(ClusteringPolicy),4,7
org.apache.mahout.clustering.iterator.ClusteringPolicyWritable.write(DataOutput),7,8
org.apache.mahout.clustering.iterator.ClusteringPolicyWritable.readFields(DataInput),10,11
org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.FeatureVectorEncoder(String),5,6
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.FeatureVectorEncoder(String,int)",6,10
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.addToVector(String,Vector)",11,30
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.addToVector(byte[],Vector)",11,29
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.addToVector(String,double,Vector)",24,52
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.addToVector(byte[],double,Vector)",6,7
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.hashForProbe(byte[],int,String,int)",28,50
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.hashesForProbe(byte[],int,String,int)",30,59
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.getWeight(byte[],double)",3,3
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.hash(String,int,int)",16,47
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.hash(byte[],int,int)",16,44
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.hash(String,String,int,int)",17,58
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.hash(byte[],byte[],int,int)",16,52
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.hash(String,String,String,String,int,int)",19,85
org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.asString(String),18,30
org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.getProbes(),1,2
org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.setProbes(int),9,14
org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.getName(),2,3
org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.isTraceEnabled(),3,4
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.trace(String,int)",11,32
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.trace(byte[],int)",6,9
"org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.setTraceDictionary(Map<Set<String,Integer>>)",6,13
org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder.bytesForString(String),6,8
org.apache.mahout.cf.taste.impl.recommender.CachingRecommenderTest.testRecommender(),20,159
"org.apache.mahout.common.parameters.AbstractParameter<T>.AbstractParameter(Class<T>,String,String,Configuration,T,String)",11,42
org.apache.mahout.common.parameters.AbstractParameter<T>.configure(Configuration),4,4
"org.apache.mahout.common.parameters.AbstractParameter<T>.createParameters(String,Configuration)",7,7
org.apache.mahout.common.parameters.AbstractParameter<T>.getStringValue(),2,6
org.apache.mahout.common.parameters.AbstractParameter<T>.getParameters(),6,6
org.apache.mahout.common.parameters.AbstractParameter<T>.prefix(),2,3
org.apache.mahout.common.parameters.AbstractParameter<T>.name(),2,3
org.apache.mahout.common.parameters.AbstractParameter<T>.description(),2,3
org.apache.mahout.common.parameters.AbstractParameter<T>.type(),1,2
org.apache.mahout.common.parameters.AbstractParameter<T>.defaultValue(),2,3
org.apache.mahout.common.parameters.AbstractParameter<T>.get(),1,1
org.apache.mahout.common.parameters.AbstractParameter<T>.set(T),2,4
org.apache.mahout.common.parameters.AbstractParameter<T>.toString(),2,6
org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest.setUp(),14,77
org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest.setFeatureColumn(),13,40
org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest.ratingVector(),19,44
org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest.averageRating(),9,16
org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest.initializeM(),14,38
org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest.toyExample(),34,67
org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest.toyExampleImplicit(),43,128
org.apache.mahout.common.StringTuple.StringTuple(),2,2
org.apache.mahout.common.StringTuple.StringTuple(String),4,6
org.apache.mahout.common.StringTuple.StringTuple(Iterable<String>),6,10
org.apache.mahout.common.StringTuple.StringTuple(String[]),5,9
org.apache.mahout.common.StringTuple.add(String),8,13
org.apache.mahout.common.StringTuple.stringAt(int),8,15
"org.apache.mahout.common.StringTuple.replaceAt(int,String)",10,20
org.apache.mahout.common.StringTuple.getEntries(),10,15
org.apache.mahout.common.StringTuple.length(),4,7
org.apache.mahout.common.StringTuple.toString(),2,4
org.apache.mahout.common.StringTuple.hashCode(),3,5
org.apache.mahout.common.StringTuple.equals(Object),5,16
org.apache.mahout.common.StringTuple.readFields(DataInput),15,24
org.apache.mahout.common.StringTuple.write(DataOutput),11,18
org.apache.mahout.common.StringTuple.compareTo(StringTuple),7,26
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testFullCorrelation1(),9,20
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testFullCorrelation1Weighted(),11,23
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testFullCorrelation2(),10,20
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testNoCorrelation1(),9,20
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testNoCorrelation1Weighted(),11,23
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testNoCorrelation2(),8,18
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testNoCorrelation3(),9,20
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testSimple(),10,20
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testSimpleWeighted(),12,23
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testFullItemCorrelation1(),9,21
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testFullItemCorrelation2(),10,21
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testNoItemCorrelation1(),9,21
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testNoItemCorrelation2(),8,19
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testNoItemCorrelation3(),9,21
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testSimpleItem(),10,21
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testSimpleItemWeighted(),12,30
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testRefresh(),9,11
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testInferrer(),14,30
"org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testInferrer().$1.inferPreference(long,long)",4,4
org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarityTest.testInferrer().$1.refresh(Collection<Refreshable>),4,4
org.apache.mahout.classifier.sequencelearning.hmm.HMMUtilsTest.setUp(),7,18
org.apache.mahout.classifier.sequencelearning.hmm.HMMUtilsTest.testValidatorLegal(),7,11
org.apache.mahout.classifier.sequencelearning.hmm.HMMUtilsTest.testValidatorDimensionError(),14,17
org.apache.mahout.classifier.sequencelearning.hmm.HMMUtilsTest.testValidatorIllegelMatrixError(),15,18
org.apache.mahout.classifier.sequencelearning.hmm.HMMUtilsTest.testEncodeStateSequence(),19,68
org.apache.mahout.classifier.sequencelearning.hmm.HMMUtilsTest.testDecodeStateSequence(),19,72
org.apache.mahout.classifier.sequencelearning.hmm.HMMUtilsTest.testNormalizeModel(),10,31
org.apache.mahout.classifier.sequencelearning.hmm.HMMUtilsTest.testTruncateModel(),22,85
org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormatTest.testSplits(),24,108
org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormatTest.testRecordReader(),29,99
org.apache.mahout.common.iterator.FileLineIterator.FileLineIterator(File),14,27
"org.apache.mahout.common.iterator.FileLineIterator.FileLineIterator(File,boolean)",15,31
"org.apache.mahout.common.iterator.FileLineIterator.FileLineIterator(File,Charset,boolean)",16,34
org.apache.mahout.common.iterator.FileLineIterator.FileLineIterator(InputStream),8,8
"org.apache.mahout.common.iterator.FileLineIterator.FileLineIterator(InputStream,boolean)",9,12
"org.apache.mahout.common.iterator.FileLineIterator.FileLineIterator(InputStream,Charset,boolean)",12,22
"org.apache.mahout.common.iterator.FileLineIterator.FileLineIterator(InputStream,Charset,boolean,String)",22,62
org.apache.mahout.common.iterator.FileLineIterator.getFileInputStream(File),13,39
org.apache.mahout.common.iterator.FileLineIterator.computeNext(),13,21
org.apache.mahout.common.iterator.FileLineIterator.skip(int),8,10
org.apache.mahout.common.iterator.FileLineIterator.close(),5,6
org.apache.mahout.cf.taste.impl.recommender.RandomRecommenderTest.testRecommender(),13,31
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.setUp(),13,17
"org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.StreamingKMeansTestMR(String,String)",8,20
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.configure(Configuration),31,98
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.generateData(),16,34
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.testHypercubeMapper(),45,112
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.testMapperVsLocal(),63,276
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.testHypercubeReducer(),50,132
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.testHypercubeMapReduce(),34,90
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.testHypercubeMapReduceRunSequentially(),46,90
"org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.testHypercubeMapReduceRunSequentially().$1.apply(org.apache.mahout.common.Pair<IntWritable,CentroidWritable>)",12,30
"org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansTestMR.testReducerResults(int,List<org.apache.hadoop.mrunit.types.Pair<IntWritable,CentroidWritable>>)",25,104
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.setUp(),11,22
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.getPointsWritable(double[][]),13,25
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.testVectorClassificationWithOutlierRemovalMR(),28,65
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.testVectorClassificationWithoutOutlierRemoval(),25,57
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.testVectorClassificationWithOutlierRemoval(),25,57
"org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.runClustering(Path,Configuration,Boolean)",20,43
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.runClassificationWithoutOutlierRemoval(),14,21
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.runClassificationWithOutlierRemoval(boolean),15,25
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.collectVectorsForAssertion(),26,65
"org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.collectVector(String,Vector)",7,22
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.assertVectorsWithOutlierRemoval(),5,7
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.assertVectorsWithoutOutlierRemoval(),5,13
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.assertThirdClusterWithoutOutlierRemoval(),12,19
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.assertSecondClusterWithoutOutlierRemoval(),11,16
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.assertFirstClusterWithoutOutlierRemoval(),11,16
org.apache.mahout.clustering.classify.ClusterClassificationDriverTest.checkClustersWithOutlierRemoval(),34,117
org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommenderTest.estimatePreference(),21,76
org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommenderTest.recommend(),33,176
org.apache.mahout.classifier.sequencelearning.hmm.HMMEvaluatorTest.testModelLikelihood(),19,56
org.apache.mahout.classifier.sequencelearning.hmm.HMMEvaluatorTest.testScaledModelLikelihood(),20,57
org.apache.mahout.clustering.ClusteringTestUtils.ClusteringTestUtils(),3,3
"org.apache.mahout.clustering.ClusteringTestUtils.writePointsToFile(Iterable<VectorWritable>,Path,FileSystem,Configuration)",10,16
"org.apache.mahout.clustering.ClusteringTestUtils.writePointsToFile(Iterable<VectorWritable>,boolean,Path,FileSystem,Configuration)",17,43
"org.apache.mahout.clustering.ClusteringTestUtils.sampledCorpus(Matrix,Random,int,int,int)",22,76
"org.apache.mahout.clustering.ClusteringTestUtils.randomStructuredModel(int,int)",9,17
"org.apache.mahout.clustering.ClusteringTestUtils.randomStructuredModel(int,int).$1.apply(double)",3,3
"org.apache.mahout.clustering.ClusteringTestUtils.randomStructuredModel(int,int,DoubleFunction)",18,53
"org.apache.mahout.clustering.ClusteringTestUtils.LDASampler.LDASampler(Matrix,Random)",11,21
"org.apache.mahout.clustering.ClusteringTestUtils.LDASampler.sample(Vector,int)",25,74
org.apache.mahout.classifier.evaluation.AucTest.testAuc(),11,25
org.apache.mahout.classifier.evaluation.AucTest.testTies(),17,46
org.apache.mahout.classifier.evaluation.AucTest.testEntropy(),12,41
org.apache.mahout.cf.taste.impl.eval.LoadEvaluationRunner.LoadEvaluationRunner(),3,3
org.apache.mahout.cf.taste.impl.eval.LoadEvaluationRunner.main(String[]),31,97
org.apache.mahout.classifier.mlp.Datasets.Datasets(),1,1
org.apache.mahout.math.hadoop.decomposer.TestDistributedLanczosSolverCLI.testDistributedLanczosSolverCLI(),46,177
org.apache.mahout.math.hadoop.decomposer.TestDistributedLanczosSolverCLI.testDistributedLanczosSolverEVJCLI(),71,335
"org.apache.mahout.vectorizer.encoders.CachingTextValueEncoder.CachingTextValueEncoder(String,int)",10,19
org.apache.mahout.classifier.naivebayes.training.WeightsMapperTest.scores(),27,98
org.apache.mahout.common.commandline.DefaultOptionCreator.DefaultOptionCreator(),2,2
org.apache.mahout.common.commandline.DefaultOptionCreator.helpOption(),12,19
org.apache.mahout.common.commandline.DefaultOptionCreator.inputOption(),20,35
org.apache.mahout.common.commandline.DefaultOptionCreator.clustersInOption(),24,40
org.apache.mahout.common.commandline.DefaultOptionCreator.outputOption(),19,34
org.apache.mahout.common.commandline.DefaultOptionCreator.overwriteOption(),16,26
org.apache.mahout.common.commandline.DefaultOptionCreator.distanceMeasureOption(),23,47
org.apache.mahout.common.commandline.DefaultOptionCreator.methodOption(),25,43
org.apache.mahout.common.commandline.DefaultOptionCreator.t1Option(),18,29
org.apache.mahout.common.commandline.DefaultOptionCreator.t2Option(),18,29
org.apache.mahout.common.commandline.DefaultOptionCreator.t3Option(),17,29
org.apache.mahout.common.commandline.DefaultOptionCreator.t4Option(),17,29
org.apache.mahout.common.commandline.DefaultOptionCreator.clusterFilterOption(),14,38
org.apache.mahout.common.commandline.DefaultOptionCreator.maxIterationsOption(),21,42
org.apache.mahout.common.commandline.DefaultOptionCreator.numClustersOption(),18,34
org.apache.mahout.common.commandline.DefaultOptionCreator.useSetRandomSeedOption(),12,25
org.apache.mahout.common.commandline.DefaultOptionCreator.convergenceOption(),20,38
org.apache.mahout.common.commandline.DefaultOptionCreator.numReducersOption(),15,27
org.apache.mahout.common.commandline.DefaultOptionCreator.clusteringOption(),14,24
org.apache.mahout.common.commandline.DefaultOptionCreator.analyzerOption(),17,39
org.apache.mahout.common.commandline.DefaultOptionCreator.emitMostLikelyOption(),20,35
org.apache.mahout.common.commandline.DefaultOptionCreator.thresholdOption(),22,36
org.apache.mahout.common.commandline.DefaultOptionCreator.kernelProfileOption(),13,34
org.apache.mahout.common.commandline.DefaultOptionCreator.outlierThresholdOption(),18,37
org.apache.mahout.common.AbstractJobTest.AbstractJobFactory.getJob(),1,2
org.apache.mahout.common.AbstractJobTest.testFlag(),20,55
org.apache.mahout.common.AbstractJobTest.testFlag().$1.getJob(),2,4
org.apache.mahout.common.AbstractJobTest.testFlag().$1.getJob().$1.run(String[]),13,26
org.apache.mahout.common.AbstractJobTest.testOptions(),29,212
org.apache.mahout.common.AbstractJobTest.testOptions().$2.getJob(),2,4
org.apache.mahout.common.AbstractJobTest.testOptions().$2.getJob().$1.run(String[]),17,46
org.apache.mahout.common.AbstractJobTest.testInputOutputPaths(),26,308
org.apache.mahout.common.AbstractJobTest.testInputOutputPaths().$3.getJob(),2,4
org.apache.mahout.common.AbstractJobTest.testInputOutputPaths().$3.getJob().$1.run(String[]),17,46
org.apache.mahout.classifier.mlp.TestMultilayerPerceptron.testMLP(),7,20
"org.apache.mahout.classifier.mlp.TestMultilayerPerceptron.testMLP(String,boolean,boolean,int)",45,152
org.apache.mahout.classifier.df.mapreduce.partial.Step1MapperTest.MockTreeBuilder.setExpected(Data),3,6
"org.apache.mahout.classifier.df.mapreduce.partial.Step1MapperTest.MockTreeBuilder.build(Random,Data)",10,16
"org.apache.mahout.classifier.df.mapreduce.partial.Step1MapperTest.MockStep1Mapper.MockStep1Mapper(TreeBuilder,Dataset,Long,int,int,int)",13,28
org.apache.mahout.classifier.df.mapreduce.partial.Step1MapperTest.TreeIDCapture.TreeIDCapture(),3,4
org.apache.mahout.classifier.df.mapreduce.partial.Step1MapperTest.TreeIDCapture.setValue(TreeID),4,8
org.apache.mahout.classifier.df.mapreduce.partial.Step1MapperTest.testMapper(),61,205
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.setUp(),6,9
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.getPointsWritable(double[][]),13,25
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.testTopDownClustering(),27,72
"org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.assertTopLevelCluster(Entry<String,Path>)",13,38
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.assertPointsInFirstTopLevelCluster(Path),13,26
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.assertPointsInSecondTopLevelCluster(Path),13,26
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.getVectorsInCluster(Path),22,68
"org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.bottomLevelClustering(Map<String,Path>)",28,73
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.assertBottomLevelCluster(Path),26,74
"org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.assertPostProcessedOutput(Map<String,Path>)",12,24
org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.ouputPostProcessing(Configuration),15,39
"org.apache.mahout.clustering.topdown.postprocessor.ClusterOutputPostProcessorTest.topLevelClustering(Path,Configuration)",16,22
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.setUp(),21,43
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.completeJobToyExample(),6,7
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.completeJobToyExampleMultithreaded(),7,8
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.explicitExample(int),82,242
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.completeJobImplicitToyExample(),6,8
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.completeJobImplicitToyExampleMultithreaded(),7,9
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.implicitExample(int),75,270
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.exampleWithIDMapping(),65,225
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.preferencesAsText(Matrix),14,41
org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJobTest.recommenderJobWithIDMapping(),48,169
org.apache.mahout.classifier.mlp.TestNeuralNetwork.testReadWrite(),54,203
org.apache.mahout.classifier.mlp.TestNeuralNetwork.testOutput(),39,203
org.apache.mahout.classifier.mlp.TestNeuralNetwork.testNeuralNetwork(),8,28
"org.apache.mahout.classifier.mlp.TestNeuralNetwork.testNeuralNetwork(String,boolean,boolean,int)",46,144
org.apache.mahout.classifier.mlp.TestNeuralNetwork.testWithCancerDataSet(),79,207
org.apache.mahout.classifier.mlp.TestNeuralNetwork.testWithIrisDataSet(),93,275
org.apache.mahout.classifier.naivebayes.training.ThetaMapperTest.standard(),31,110
org.apache.mahout.vectorizer.encoders.ConstantValueEncoder.ConstantValueEncoder(String),5,6
"org.apache.mahout.vectorizer.encoders.ConstantValueEncoder.addToVector(byte[],double,Vector)",15,31
"org.apache.mahout.vectorizer.encoders.ConstantValueEncoder.getWeight(byte[],double)",3,3
org.apache.mahout.vectorizer.encoders.ConstantValueEncoder.asString(String),4,6
org.apache.mahout.vectorizer.encoders.ConstantValueEncoder.getSeed(),1,1
org.apache.mahout.vectorizer.DictionaryVectorizerTest.setUp(),26,63
org.apache.mahout.vectorizer.DictionaryVectorizerTest.testCreateTermFrequencyVectors(),7,8
org.apache.mahout.vectorizer.DictionaryVectorizerTest.testCreateTermFrequencyVectorsNam(),8,9
org.apache.mahout.vectorizer.DictionaryVectorizerTest.testCreateTermFrequencyVectorsSeq(),8,9
org.apache.mahout.vectorizer.DictionaryVectorizerTest.testCreateTermFrequencyVectorsSeqNam(),9,10
"org.apache.mahout.vectorizer.DictionaryVectorizerTest.runTest(boolean,boolean)",51,147
"org.apache.mahout.vectorizer.DictionaryVectorizerTest.validateVectors(Configuration,int,Path,boolean,boolean)",28,70
"org.apache.mahout.vectorizer.DictionaryVectorizerTest.validateDictionary(Path,Configuration)",31,79
"org.apache.mahout.vectorizer.DictionaryVectorizerTest.validateDictionary(Path,Configuration).$1.accept(Path)",7,11
"org.apache.mahout.vectorizer.DictionaryVectorizerTest.validateVectorContainingSecondTextBlock(Configuration,Path,int)",20,36
org.apache.mahout.clustering.TestGaussianAccumulators.setUp(),30,81
"org.apache.mahout.clustering.TestGaussianAccumulators.generate2dSamples(int,double,double,double,double)",23,58
org.apache.mahout.clustering.TestGaussianAccumulators.generateSamples(),2,4
org.apache.mahout.clustering.TestGaussianAccumulators.testAccumulatorNoSamples(),16,40
org.apache.mahout.clustering.TestGaussianAccumulators.testAccumulatorOneSample(),19,50
org.apache.mahout.clustering.TestGaussianAccumulators.testOLAccumulatorResults(),20,52
org.apache.mahout.clustering.TestGaussianAccumulators.testRSAccumulatorResults(),21,52
org.apache.mahout.clustering.TestGaussianAccumulators.testAccumulatorWeightedResults(),22,58
org.apache.mahout.clustering.TestGaussianAccumulators.testAccumulatorWeightedResults2(),22,58
"org.apache.mahout.vectorizer.encoders.CachingValueEncoder.CachingValueEncoder(String,int)",9,11
org.apache.mahout.vectorizer.encoders.CachingValueEncoder.setProbes(int),6,10
org.apache.mahout.vectorizer.encoders.CachingValueEncoder.getSeed(),1,1
org.apache.mahout.vectorizer.encoders.CachingValueEncoder.cacheProbeLocations(int),15,21
"org.apache.mahout.vectorizer.encoders.CachingValueEncoder.hashForProbe(byte[],int,String,int)",10,16
org.apache.mahout.cf.taste.impl.common.CacheTest.testLotsOfGets(),9,20
org.apache.mahout.cf.taste.impl.common.CacheTest.testMixedUsage(),13,30
org.apache.mahout.cf.taste.impl.common.CacheTest.IdentityRetriever.get(Object),4,6
"org.apache.mahout.vectorizer.common.PartialVectorMergeReducer.reduce(WritableComparable<>,Iterable<VectorWritable>,Context)",35,83
org.apache.mahout.vectorizer.common.PartialVectorMergeReducer.setup(Context),22,57
org.apache.mahout.common.distance.DefaultWeightedDistanceMeasureTest.distanceMeasureFactory(),4,6
org.apache.mahout.common.distance.DefaultWeightedDistanceMeasureTest.testMeasureWeighted(),13,42
org.apache.mahout.vectorizer.encoders.WordValueEncoder.WordValueEncoder(String),6,11
"org.apache.mahout.vectorizer.encoders.WordValueEncoder.addToVector(byte[],double,Vector)",15,32
"org.apache.mahout.vectorizer.encoders.WordValueEncoder.getWeight(byte[],double)",3,6
"org.apache.mahout.vectorizer.encoders.WordValueEncoder.hashForProbe(byte[],int,String,int)",12,21
org.apache.mahout.vectorizer.encoders.WordValueEncoder.asString(String),9,17
org.apache.mahout.vectorizer.encoders.WordValueEncoder.weight(byte[]),3,3
org.apache.mahout.clustering.streaming.cluster.StreamingKMeansTest.setUp(),13,17
"org.apache.mahout.clustering.streaming.cluster.StreamingKMeansTest.StreamingKMeansTest(UpdatableSearcher,boolean)",5,8
org.apache.mahout.clustering.streaming.cluster.StreamingKMeansTest.generateData(),15,49
org.apache.mahout.clustering.streaming.cluster.StreamingKMeansTest.testAverageDistanceCutoff(),30,111
org.apache.mahout.clustering.streaming.cluster.StreamingKMeansTest.testClustering(),58,214
org.apache.mahout.cf.taste.common.CommonTest.testTasteException(),12,42
org.apache.mahout.cf.taste.common.CommonTest.testNSUException(),14,33
org.apache.mahout.cf.taste.common.CommonTest.testNSIException(),14,33
org.apache.mahout.clustering.iterator.TestClusterClassifier.newDMClassifier(),16,47
org.apache.mahout.clustering.iterator.TestClusterClassifier.newKlusterClassifier(),21,57
org.apache.mahout.clustering.iterator.TestClusterClassifier.newCosineKlusterClassifier(),21,58
org.apache.mahout.clustering.iterator.TestClusterClassifier.newSoftClusterClassifier(),18,47
org.apache.mahout.clustering.iterator.TestClusterClassifier.writeAndRead(ClusterClassifier),13,33
org.apache.mahout.clustering.iterator.TestClusterClassifier.testDMClusterClassification(),11,29
org.apache.mahout.clustering.iterator.TestClusterClassifier.testClusterClassification(),12,30
org.apache.mahout.clustering.iterator.TestClusterClassifier.testSoftClusterClassification(),12,32
org.apache.mahout.clustering.iterator.TestClusterClassifier.testDMClassifierSerialization(),11,28
org.apache.mahout.clustering.iterator.TestClusterClassifier.testClusterClassifierSerialization(),12,30
org.apache.mahout.clustering.iterator.TestClusterClassifier.testSoftClusterClassifierSerialization(),12,32
org.apache.mahout.clustering.iterator.TestClusterClassifier.testClusterIteratorKMeans(),22,40
org.apache.mahout.clustering.iterator.TestClusterClassifier.testClusterIteratorDirichlet(),22,40
org.apache.mahout.clustering.iterator.TestClusterClassifier.testSeqFileClusterIteratorKMeans(),38,132
org.apache.mahout.clustering.iterator.TestClusterClassifier.testMRFileClusterIteratorKMeans(),39,142
org.apache.mahout.clustering.iterator.TestClusterClassifier.testCosineKlusterClassification(),13,32
org.apache.mahout.cf.taste.impl.recommender.ItemUserAverageRecommenderTest.testRecommender(),16,41
org.apache.mahout.math.hadoop.decomposer.TestDistributedLanczosSolver.setUp(),16,51
org.apache.mahout.math.hadoop.decomposer.TestDistributedLanczosSolver.suf(boolean),5,6
org.apache.mahout.math.hadoop.decomposer.TestDistributedLanczosSolver.getCorpus(boolean),7,10
"org.apache.mahout.math.hadoop.decomposer.TestDistributedLanczosSolver.doTestDistributedLanczosSolver(boolean,int,boolean)",27,87
org.apache.mahout.math.hadoop.decomposer.TestDistributedLanczosSolver.doTestResumeIteration(boolean),30,105
org.apache.mahout.vectorizer.encoders.CachingEncoderTest.testCacheAreUsedStaticWord(),14,30
org.apache.mahout.vectorizer.encoders.CachingEncoderTest.testCacheAreUsedContinuous(),15,30
org.apache.mahout.clustering.spectral.kmeans.TestEigenSeedGenerator.getPoints(),13,23
org.apache.mahout.clustering.spectral.kmeans.TestEigenSeedGenerator.setUp(),6,9
org.apache.mahout.clustering.spectral.kmeans.TestEigenSeedGenerator.testEigenSeedGenerator(),46,112
org.apache.mahout.math.VectorWritableTest.createRandom(Vector),11,20
org.apache.mahout.math.VectorWritableTest.testViewSequentialAccessSparseVectorWritable(),13,28
org.apache.mahout.math.VectorWritableTest.testSequentialAccessSparseVectorWritable(),12,21
org.apache.mahout.math.VectorWritableTest.testRandomAccessSparseVectorWritable(),11,21
org.apache.mahout.math.VectorWritableTest.testDenseVectorWritable(),10,17
org.apache.mahout.math.VectorWritableTest.testNamedVectorWritable(),12,20
org.apache.mahout.math.VectorWritableTest.doTestVectorWritableEquals(Vector),10,45
"org.apache.mahout.math.VectorWritableTest.writeAndRead(Writable,Writable)",16,52
org.apache.mahout.classifier.RegressionResultAnalyzerTest.parseAnalysis(CharSequence),5,19
org.apache.mahout.classifier.RegressionResultAnalyzerTest.parseAnalysisCount(CharSequence),7,23
org.apache.mahout.classifier.RegressionResultAnalyzerTest.testAnalyze(),16,69
org.apache.mahout.classifier.RegressionResultAnalyzerTest.testUnpredictable(),17,58
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDSolverDenseTest.testSSVDSolverDense(),6,8
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDSolverDenseTest.testSSVDSolverPowerIterations1(),7,9
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDSolverDenseTest.runSSVDSolver(int),106,341
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDSolverDenseTest.dumpSv(Vector),7,11
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.randomMatrix(int,int,double)",10,27
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.normalize(Matrix,double)",13,26
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.normalize(Matrix,double).$1.apply(Vector)",5,6
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.normalize(Matrix,double).$2.apply(Vector)",5,6
"org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.normalize(Matrix,double).$3.apply(double)",5,7
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.setUpSyntheticData(),29,97
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.setUpToyData(),17,77
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.testPreferenceShufflerWithSyntheticData(),29,103
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.testFactorizerWithToyData(),55,170
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.testRecommenderWithToyData(),43,84
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.testFactorizerWithWithSyntheticData(),56,170
org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizerTest.testRecommenderWithSyntheticData(),44,84
org.apache.mahout.classifier.sgd.PassiveAggressiveTest.testPassiveAggressive(),13,21
org.apache.mahout.common.MockIterator.close(),1,1
org.apache.mahout.common.MockIterator.getKey(),4,4
org.apache.mahout.common.MockIterator.getProgress(),1,2
org.apache.mahout.common.MockIterator.getValue(),4,4
org.apache.mahout.common.MockIterator.next(),0,0
org.apache.mahout.classifier.sequencelearning.hmm.HMMAlgorithmsTest.testForwardAlgorithm(),24,42
org.apache.mahout.classifier.sequencelearning.hmm.HMMAlgorithmsTest.testLogScaledForwardAlgorithm(),27,46
org.apache.mahout.classifier.sequencelearning.hmm.HMMAlgorithmsTest.testBackwardAlgorithm(),24,42
org.apache.mahout.classifier.sequencelearning.hmm.HMMAlgorithmsTest.testLogScaledBackwardAlgorithm(),27,46
org.apache.mahout.classifier.sequencelearning.hmm.HMMAlgorithmsTest.testViterbiAlgorithm(),19,34
org.apache.mahout.classifier.sequencelearning.hmm.HMMAlgorithmsTest.testLogScaledViterbiAlgorithm(),21,36
org.apache.mahout.classifier.sgd.CsvRecordFactoryTest.testAddToVector(),26,105
org.apache.mahout.classifier.sgd.CsvRecordFactoryTest.testDictionaryOrder(),9,32
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageTest.testWeighted(),11,89
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverageTest.testWeightedAndStdDev(),16,123
org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommenderTest.testRecommender(),15,40
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.distributedSimilarity(double[],double[],Class<>)",14,45
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.computeSimilarity(double[],double[],Class<>,Vector)",12,59
"org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.asVector(double[],Vector)",5,17
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.testCooccurrenceCountSimilarity(),6,12
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.testTanimotoCoefficientSimilarity(),7,13
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.testCityblockSimilarity(),8,12
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.testLoglikelihoodSimilarity(),6,11
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.testCosineSimilarity(),6,11
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.testPearsonCorrelationSimilarity(),7,13
org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.VectorSimilarityMeasuresTest.testEuclideanDistanceSimilarity(),7,13
org.apache.mahout.clustering.kmeans.TestKmeansClustering.setUp(),6,9
org.apache.mahout.clustering.kmeans.TestKmeansClustering.getPointsWritable(double[][]),13,25
org.apache.mahout.clustering.kmeans.TestKmeansClustering.getPointsWritableDenseVector(double[][]),11,25
org.apache.mahout.clustering.kmeans.TestKmeansClustering.getPoints(double[][]),12,20
org.apache.mahout.clustering.kmeans.TestKmeansClustering.testKMeansSeqJob(),83,268
org.apache.mahout.clustering.kmeans.TestKmeansClustering.testKMeansSeqJobDenseVector(),84,272
org.apache.mahout.clustering.kmeans.TestKmeansClustering.testKMeansMRJob(),81,263
org.apache.mahout.clustering.kmeans.TestKmeansClustering.testKMeansWithCanopyClusterInput(),72,294
org.apache.mahout.classifier.mlp.TrainMultilayerPerceptronTest.testIrisDataset(),26,55
org.apache.mahout.classifier.mlp.TrainMultilayerPerceptronTest.initializeModelWithDifferentParameters(),38,157
"org.apache.mahout.classifier.mlp.TrainMultilayerPerceptronTest.trainModel(String[],File)",11,21
org.apache.mahout.clustering.topdown.PathDirectoryTest.shouldReturnTopLevelClusterPath(),8,25
org.apache.mahout.clustering.topdown.PathDirectoryTest.shouldReturnClusterPostProcessorOutputDirectory(),9,26
org.apache.mahout.clustering.topdown.PathDirectoryTest.shouldReturnClusterOutputClusteredPoints(),9,23
org.apache.mahout.clustering.topdown.PathDirectoryTest.shouldReturnBottomLevelClusterPath(),10,29
org.apache.mahout.clustering.topdown.PathDirectoryTest.shouldReturnClusterPathForClusterId(),8,32
org.apache.mahout.driver.MahoutDriverTest.testMain(),8,9
org.apache.mahout.common.distance.TestWeightedManhattanDistanceMeasure.distanceMeasureFactory(),5,11
org.apache.mahout.classifier.naivebayes.training.IndexInstancesMapperTest.setUp(),20,27
org.apache.mahout.classifier.naivebayes.training.IndexInstancesMapperTest.index(),18,37
org.apache.mahout.classifier.naivebayes.training.IndexInstancesMapperTest.skip(),22,61
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDSolverSparseSequentialTest.testSSVDSolverPowerIterations1(),7,9
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDSolverSparseSequentialTest.runSSVDSolver(int),108,318
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDSolverSparseSequentialTest.dumpSv(Vector),7,11
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDSolverSparseSequentialTest.dump(double[][]),5,11
org.apache.mahout.math.hadoop.stochasticsvd.SSVDTestsHelper.SSVDTestsHelper(),3,3
"org.apache.mahout.math.hadoop.stochasticsvd.SSVDTestsHelper.generateDenseInput(Path,FileSystem,Vector,int,int)",11,19
"org.apache.mahout.math.hadoop.stochasticsvd.SSVDTestsHelper.generateDenseInput(Path,FileSystem,Vector,int,int,int)",38,85
"org.apache.mahout.math.hadoop.stochasticsvd.SSVDTestsHelper.generateDenseOrthonormalRandom(int,int,Random)",17,26
org.apache.mahout.math.hadoop.stochasticsvd.SSVDTestsHelper.main(String[]),51,115
org.apache.mahout.common.distance.CosineDistanceMeasureTest.testMeasure(),16,80
org.apache.mahout.classifier.df.node.NodeTest.setUp(),9,15
org.apache.mahout.classifier.df.node.NodeTest.testReadTree(),14,51
org.apache.mahout.classifier.df.node.NodeTest.readNode(),7,21
org.apache.mahout.classifier.df.node.NodeTest.testReadLeaf(),8,14
org.apache.mahout.classifier.df.node.NodeTest.testParseNumerical(),10,20
org.apache.mahout.classifier.df.node.NodeTest.testCategoricalNode(),9,25
org.apache.mahout.common.MahoutTestCase.setUp(),9,11
org.apache.mahout.common.MahoutTestCase.tearDown(),10,22
org.apache.mahout.common.MahoutTestCase.getConfiguration(),13,20
org.apache.mahout.common.MahoutTestCase.getTestTempDirPath(),21,52
org.apache.mahout.common.MahoutTestCase.getTestTempFilePath(String),8,14
org.apache.mahout.common.MahoutTestCase.getTestTempDirPath(String),8,14
"org.apache.mahout.common.MahoutTestCase.getTestTempFileOrDirPath(String,boolean)",13,48
"org.apache.mahout.common.MahoutTestCase.setField(Object,String,Object)",14,31
"org.apache.mahout.common.MahoutTestCase.findDeclaredField(Class<>,String)",12,25
org.apache.mahout.common.MahoutTestCase.optKey(String),6,17
"org.apache.mahout.common.MahoutTestCase.writeLines(File,String)",13,29
org.apache.mahout.classifier.naivebayes.NaiveBayesTest.setUp(),38,170
org.apache.mahout.classifier.naivebayes.NaiveBayesTest.toyData(),38,87
org.apache.mahout.classifier.naivebayes.NaiveBayesTest.toyDataComplementary(),38,90
org.apache.mahout.classifier.naivebayes.NaiveBayesTest.trainingInstance(Vector.Element),10,27
org.apache.mahout.clustering.streaming.cluster.BallKMeansTest.setUp(),15,19
org.apache.mahout.clustering.streaming.cluster.BallKMeansTest.testClusteringMultipleRuns(),27,86
org.apache.mahout.clustering.streaming.cluster.BallKMeansTest.testClustering(),67,189
org.apache.mahout.clustering.streaming.cluster.BallKMeansTest.testInitialization(),56,92
org.apache.mahout.clustering.streaming.cluster.BallKMeansTest.testInitialization().$1.apply(Vector),11,16
org.apache.mahout.clustering.streaming.cluster.BallKMeansTest.cubishTestData(double),20,47
org.apache.mahout.common.distance.TestChebyshevMeasure.testMeasure(),11,42
org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarityTest.testFullCorrelation1(),9,20
org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarityTest.testFullCorrelation2(),9,20
org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarityTest.testAnticorrelation(),10,20
org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarityTest.testSimple(),10,20
org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarityTest.testRefresh(),9,10
org.apache.mahout.clustering.fuzzykmeans.TestFuzzyKmeansClustering.setUp(),6,9
org.apache.mahout.clustering.fuzzykmeans.TestFuzzyKmeansClustering.tweakValue(Vector),4,5
org.apache.mahout.clustering.fuzzykmeans.TestFuzzyKmeansClustering.testFuzzyKMeansSeqJob(),78,235
org.apache.mahout.clustering.fuzzykmeans.TestFuzzyKmeansClustering.testFuzzyKMeansMRJob(),76,227
org.apache.mahout.classifier.df.mapreduce.partial.TreeIDTest.testTreeID(),13,40
org.apache.mahout.vectorizer.collocations.llr.GramKeyGroupComparatorTest.testComparator(),17,82
org.apache.mahout.classifier.df.data.Utils.Utils(),1,1
"org.apache.mahout.classifier.df.data.Utils.randomTokens(Random,int)",21,52
org.apache.mahout.classifier.df.data.Utils.generateDescriptor(char[]),11,23
"org.apache.mahout.classifier.df.data.Utils.randomDescriptor(Random,int)",17,26
"org.apache.mahout.classifier.df.data.Utils.randomDoubles(Random,CharSequence,boolean,int)",22,45
"org.apache.mahout.classifier.df.data.Utils.randomData(Random,int,boolean,int)",20,60
"org.apache.mahout.classifier.df.data.Utils.randomVector(Random,Attribute[],boolean)",23,74
org.apache.mahout.classifier.df.data.Utils.double2String(double[]),8,22
org.apache.mahout.classifier.df.data.Utils.double2String(double[][]),12,34
"org.apache.mahout.classifier.df.data.Utils.randomDoublesWithSameLabel(Random,CharSequence,boolean,int,int)",15,40
org.apache.mahout.classifier.df.data.Utils.findLabel(CharSequence),11,21
"org.apache.mahout.classifier.df.data.Utils.writeDataToFile(String[],Path)",15,30
org.apache.mahout.classifier.df.data.Utils.writeDataToTestFile(String[]),14,46
"org.apache.mahout.classifier.df.data.Utils.splitData(String[],int)",13,47
org.apache.mahout.clustering.lda.cvb.TestCVBModelTrainer.testInMemoryCVB0(),47,130
org.apache.mahout.clustering.lda.cvb.TestCVBModelTrainer.testInMemoryCVB0().$1.apply(double),3,3
org.apache.mahout.clustering.lda.cvb.TestCVBModelTrainer.testRandomStructuredModelViaMR(),52,179
org.apache.mahout.clustering.lda.cvb.TestCVBModelTrainer.testRandomStructuredModelViaMR().$2.apply(double),3,3
"org.apache.mahout.clustering.lda.cvb.TestCVBModelTrainer.lowestPerplexity(Configuration,Path)",18,31
"org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator.SparseRowBlockAccumulator(int,OutputCollector<LongWritable,SparseRowBlockWritable>)",9,17
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator.flushBlock(),10,19
"org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator.collect(Long,Vector)",14,34
org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator.close(),4,4
org.apache.mahout.vectorizer.DocumentProcessorTest.testTokenizeDocuments(),41,153
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest.testOmegaTRightMultiply(),30,67
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest.testOmegaTRightMultiply().$1.apply(double),2,2
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest.runPCATest1(),6,7
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest.runPCATest0(),6,7
org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest.runSSVDSolver(int),132,415
"org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest.verifyInternals(Path,Matrix,Omega,int,int)",32,62
"org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest.verifyInternals(Path,Matrix,Omega,int,int).$2.apply(Vector)",4,4
"org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest.verifyInternals(Path,Matrix,Omega,int,int).$3.apply(Vector)",3,3
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJobTest.toyIntegration(),47,193
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJobTest.toyIntegrationMaxSimilaritiesPerRow(),44,174
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJobTest.toyIntegrationWithThreshold(),43,170
org.apache.mahout.math.hadoop.similarity.cooccurrence.RowSimilarityJobTest.testVectorDimensions(),25,63
org.apache.mahout.clustering.spectral.TestAffinityMatrixInputJob.testAffinityMatrixInputMapper(),35,111
org.apache.mahout.clustering.spectral.TestAffinityMatrixInputJob.testAffinitymatrixInputReducer(),53,219
org.apache.mahout.common.distance.TestWeightedEuclideanDistanceMeasureTest.distanceMeasureFactory(),5,10
org.apache.mahout.ep.EvolutionaryProcessTest.testConverges(),19,30
"org.apache.mahout.ep.EvolutionaryProcessTest.testConverges().$1.apply(Payload<Double>,double[])",4,8
org.apache.mahout.ep.EvolutionaryProcessTest.Foo.copy(),2,2
org.apache.mahout.ep.EvolutionaryProcessTest.Foo.update(double[]),3,3
org.apache.mahout.ep.EvolutionaryProcessTest.Foo.write(DataOutput),4,6
org.apache.mahout.ep.EvolutionaryProcessTest.Foo.readFields(DataInput),5,7
org.apache.mahout.vectorizer.RandomDocumentGenerator.getRandomDelimiter(),4,6
org.apache.mahout.vectorizer.RandomDocumentGenerator.getRandomDocument(),9,27
org.apache.mahout.vectorizer.RandomDocumentGenerator.getRandomSentence(),9,28
org.apache.mahout.vectorizer.RandomDocumentGenerator.getRandomString(),9,29
org.apache.mahout.clustering.spectral.TestMatrixDiagonalizeJob.rowSum(double[]),2,7
org.apache.mahout.clustering.spectral.TestMatrixDiagonalizeJob.testMatrixDiagonalizeMapper(),34,90
org.apache.mahout.clustering.spectral.TestMatrixDiagonalizeJob.testMatrixDiagonalizeReducer(),45,163
org.apache.mahout.math.stats.SamplerTest.testDiscreteSampler(),14,35
"org.apache.mahout.math.stats.SamplerTest.l1Dist(Vector,Vector)",5,7
org.apache.mahout.math.hadoop.stats.BasicStatsTest.setUp(),4,5
org.apache.mahout.math.hadoop.stats.BasicStatsTest.testVar(),18,34
org.apache.mahout.math.hadoop.stats.BasicStatsTest.testStdDev(),19,43
org.apache.mahout.math.hadoop.stats.BasicStatsTest.testStdDevForGivenMean(),18,41
org.apache.mahout.math.hadoop.stats.BasicStatsTest.produceTestData(Path),20,80
org.apache.mahout.math.hadoop.stats.BasicStatsTest.testStdDev2(),24,66
org.apache.mahout.math.hadoop.stochasticsvd.SSVDCommonTest.testGivensQR(),31,78
org.apache.mahout.math.hadoop.stochasticsvd.SSVDCommonTest.testGivensQR().$1.apply(double),4,4
"org.apache.mahout.math.hadoop.stochasticsvd.SSVDCommonTest.assertOrthonormality(Matrix,boolean,double)",14,42
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.getInitialVector(VectorIterable),20,34
"org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.runJob(Configuration,LanczosState,int,boolean,String)",21,40
"org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.runJob(Configuration,Path,Path,int,int,boolean,int,String)",31,75
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.run(String[]),28,155
"org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.run(Path,Path,Path,Path,int,int,boolean,int,double,double,boolean)",43,148
"org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.run(Path,Path,Path,Path,int,int,boolean,int)",38,137
"org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.serializeOutput(LanczosState,Path)",42,102
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.setConf(Configuration),3,6
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.getConf(),2,3
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.job(),4,9
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.DistributedLanczosSolverJob.setConf(Configuration),6,10
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.DistributedLanczosSolverJob.getConf(),5,6
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.DistributedLanczosSolverJob.run(String[]),62,113
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.main(String[]),11,12
org.apache.mahout.vectorizer.collocations.llr.LLRReducerTest.setUp(),9,17
"org.apache.mahout.vectorizer.collocations.llr.LLRReducerTest.setUp().$1.logLikelihoodRatio(long,long,long,long)",4,10
org.apache.mahout.vectorizer.collocations.llr.LLRReducerTest.testReduce(),47,166
org.apache.mahout.vectorizer.encoders.ConstantValueEncoderTest.testAddToVector(),18,86
org.apache.mahout.vectorizer.encoders.ConstantValueEncoderTest.testAsString(),10,14
org.apache.mahout.vectorizer.collocations.llr.CollocMapperTest.setUp(),7,15
org.apache.mahout.vectorizer.collocations.llr.CollocMapperTest.testCollectNgrams(),48,150
org.apache.mahout.vectorizer.collocations.llr.CollocMapperTest.testCollectNgramsWithUnigrams(),52,191
org.apache.mahout.common.iterator.TestSamplingIterator.testEmptyCase(),6,12
org.apache.mahout.common.iterator.TestSamplingIterator.testSmallInput(),8,11
org.apache.mahout.common.iterator.TestSamplingIterator.testBadRate1(),7,8
org.apache.mahout.common.iterator.TestSamplingIterator.testBadRate2(),7,8
org.apache.mahout.common.iterator.TestSamplingIterator.testExactSizeMatch(),10,13
org.apache.mahout.common.iterator.TestSamplingIterator.testSample(),8,11
org.apache.mahout.vectorizer.encoders.WordLikeValueEncoderTest.testAddToVector(),17,41
org.apache.mahout.vectorizer.encoders.WordLikeValueEncoderTest.testAsString(),12,18
org.apache.mahout.vectorizer.encoders.WordLikeValueEncoderTest.testStaticWeights(),23,66
org.apache.mahout.vectorizer.encoders.WordLikeValueEncoderTest.testDynamicWeights(),24,80
org.apache.mahout.vectorizer.collocations.llr.CollocReducerTest.setUp(),6,9
org.apache.mahout.vectorizer.collocations.llr.CollocReducerTest.testReduce(),38,159
"org.apache.mahout.math.hadoop.stochasticsvd.UJob.run(Configuration,Path,Path,Path,Path,int,int,Class<>,SSVDSolver.OutputScalingEnum)",48,183
org.apache.mahout.math.hadoop.stochasticsvd.UJob.waitForCompletion(),8,15
"org.apache.mahout.math.hadoop.stochasticsvd.UJob.UMapper.map(Writable,VectorWritable,Context)",25,62
org.apache.mahout.math.hadoop.stochasticsvd.UJob.UMapper.setup(Context),32,102
org.apache.mahout.vectorizer.collocations.llr.GramKeyTest.testGramKeySort(),24,128
org.apache.mahout.vectorizer.collocations.llr.GramKeyTest.testWritable(),29,87
org.apache.mahout.math.neighborhood.Searcher.Searcher(DistanceMeasure),3,9
org.apache.mahout.math.neighborhood.Searcher.getDistanceMeasure(),2,6
org.apache.mahout.math.neighborhood.Searcher.add(Vector),15,21
org.apache.mahout.math.neighborhood.Searcher.size(),7,7
"org.apache.mahout.math.neighborhood.Searcher.search(Vector,int)",25,45
"org.apache.mahout.math.neighborhood.Searcher.search(Iterable<>,int)",15,31
"org.apache.mahout.math.neighborhood.Searcher.searchFirst(Vector,boolean)",16,42
"org.apache.mahout.math.neighborhood.Searcher.searchFirst(Iterable<>,boolean)",14,29
org.apache.mahout.math.neighborhood.Searcher.addAll(Iterable<>),10,19
org.apache.mahout.math.neighborhood.Searcher.addAllMatrixSlices(Iterable<MatrixSlice>),11,24
org.apache.mahout.math.neighborhood.Searcher.addAllMatrixSlicesAsWeightedVectors(Iterable<MatrixSlice>),10,20
"org.apache.mahout.math.neighborhood.Searcher.remove(Vector,double)",8,10
org.apache.mahout.math.neighborhood.Searcher.clear(),7,7
org.apache.mahout.math.neighborhood.Searcher.getCandidateQueue(int),18,30
"org.apache.mahout.math.neighborhood.Searcher.getCandidateQueue(int).$1.lessThan(WeightedThing<Vector>,WeightedThing<Vector>)",3,6
org.apache.mahout.math.neighborhood.LocalitySensitiveHashSearchTest.testNormal(),37,98
"org.apache.mahout.math.neighborhood.LocalitySensitiveHashSearchTest.evaluateStrategy(Matrix,BruteSearch,LocalitySensitiveHashSearch)",25,58
org.apache.mahout.math.neighborhood.LocalitySensitiveHashSearchTest.testDotCorrelation(),23,67
org.apache.mahout.common.distance.TestTanimotoDistanceMeasure.distanceMeasureFactory(),4,9
org.apache.mahout.clustering.spectral.TestVectorCache.testSave(),27,61
org.apache.mahout.clustering.spectral.TestVectorCache.testLoad(),39,90
org.apache.mahout.clustering.spectral.TestVectorCache.testAll(),18,36
"org.apache.mahout.vectorizer.collocations.llr.LLRReducer.reduce(Gram,Iterable<Gram>,Context)",48,180
org.apache.mahout.vectorizer.collocations.llr.LLRReducer.setup(Context),22,61
org.apache.mahout.vectorizer.collocations.llr.LLRReducer.LLRReducer(),4,4
org.apache.mahout.vectorizer.collocations.llr.LLRReducer.LLRReducer(LLCallback),8,8
"org.apache.mahout.vectorizer.collocations.llr.LLRReducer.LLCallback.logLikelihoodRatio(long,long,long,long)",3,3
"org.apache.mahout.vectorizer.collocations.llr.LLRReducer.ConcreteLLCallback.logLikelihoodRatio(long,long,long,long)",3,8
"org.apache.mahout.math.hadoop.stochasticsvd.Omega.Omega(long,int)",2,4
"org.apache.mahout.math.hadoop.stochasticsvd.Omega.getQuick(int,int)",15,25
"org.apache.mahout.math.hadoop.stochasticsvd.Omega.computeYRow(Vector,double[])",14,26
"org.apache.mahout.math.hadoop.stochasticsvd.Omega.computeYRow(Vector,Vector)",17,36
org.apache.mahout.math.hadoop.stochasticsvd.Omega.mutlithreadedTRightMultiply(Vector),43,79
org.apache.mahout.math.hadoop.stochasticsvd.Omega.mutlithreadedTRightMultiply(Vector).$1.call(),10,17
"org.apache.mahout.math.hadoop.stochasticsvd.Omega.accumDots(int,double,double[])",6,9
"org.apache.mahout.math.hadoop.stochasticsvd.Omega.accumDots(int,double,Vector)",8,14
"org.apache.mahout.math.hadoop.stochasticsvd.Omega.murmur64(long,int,long)",16,37
"org.apache.mahout.math.hadoop.stochasticsvd.Omega.murmur64(byte[],int,int,long)",5,18
"org.apache.mahout.math.hadoop.TestDistributedRowMatrix.assertEquals(VectorIterable,VectorIterable,double)",23,87
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testTranspose(),22,64
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testMatrixColumnMeansJob(),31,53
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testNullMatrixColumnMeansJob(),31,51
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testMatrixTimesVector(),22,40
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testMatrixTimesSquaredVector(),21,42
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testMatrixTimesMatrix(),21,64
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testMatrixMultiplactionJobConfBuilder(),23,90
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testTransposeJobConfBuilder(),23,88
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testTimesSquaredJobConfBuilders(),31,297
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testTimesVectorTempDirDeletion(),42,166
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.testTimesSquaredVectorTempDirDeletion(),42,169
org.apache.mahout.math.hadoop.TestDistributedRowMatrix.createInitialConf(),10,20
"org.apache.mahout.math.hadoop.TestDistributedRowMatrix.deleteContentsOfPath(Configuration,Path)",13,29
"org.apache.mahout.math.hadoop.TestDistributedRowMatrix.randomDistributedMatrix(int,int,int,int,double,boolean)",13,31
"org.apache.mahout.math.hadoop.TestDistributedRowMatrix.randomDenseHierarchicalDistributedMatrix(int,int,boolean,String)",21,48
"org.apache.mahout.math.hadoop.TestDistributedRowMatrix.randomDistributedMatrix(int,int,int,int,double,boolean,String)",27,60
"org.apache.mahout.math.hadoop.TestDistributedRowMatrix.saveToFs(Matrix,Path)",27,74
"org.apache.mahout.math.hadoop.TestDistributedRowMatrix.saveToFs(Matrix,Path).$1.iterator()",9,13
"org.apache.mahout.math.hadoop.TestDistributedRowMatrix.saveToFs(Matrix,Path).$1.iterator().$1.apply(MatrixSlice)",6,10
org.apache.mahout.vectorizer.collocations.llr.Gram.Type.Type(char),1,1
org.apache.mahout.vectorizer.collocations.llr.Gram.Type.toString(),2,4
org.apache.mahout.vectorizer.collocations.llr.Gram.Gram(),1,1
org.apache.mahout.vectorizer.collocations.llr.Gram.Gram(Gram),7,11
"org.apache.mahout.vectorizer.collocations.llr.Gram.Gram(String,Type)",12,22
"org.apache.mahout.vectorizer.collocations.llr.Gram.Gram(String,int,Type)",30,55
org.apache.mahout.vectorizer.collocations.llr.Gram.getBytes(),1,2
org.apache.mahout.vectorizer.collocations.llr.Gram.getLength(),1,2
org.apache.mahout.vectorizer.collocations.llr.Gram.getType(),9,11
org.apache.mahout.vectorizer.collocations.llr.Gram.getString(),12,15
org.apache.mahout.vectorizer.collocations.llr.Gram.getFrequency(),2,4
org.apache.mahout.vectorizer.collocations.llr.Gram.setFrequency(int),4,9
org.apache.mahout.vectorizer.collocations.llr.Gram.incrementFrequency(int),2,3
org.apache.mahout.vectorizer.collocations.llr.Gram.readFields(DataInput),13,25
org.apache.mahout.vectorizer.collocations.llr.Gram.write(DataOutput),10,17
"org.apache.mahout.vectorizer.collocations.llr.Gram.setCapacity(int,boolean)",28,55
org.apache.mahout.vectorizer.collocations.llr.Gram.toString(),3,5
"org.apache.mahout.vectorizer.collocations.llr.Gram.encodeType(Type,byte[],int)",10,23
"org.apache.mahout.vectorizer.collocations.llr.Gram.decodeType(byte[],int)",10,19
org.apache.mahout.clustering.kmeans.TestRandomSeedGenerator.getPoints(),13,23
org.apache.mahout.clustering.kmeans.TestRandomSeedGenerator.setUp(),6,9
org.apache.mahout.clustering.kmeans.TestRandomSeedGenerator.testRandomSeedGenerator(),45,107
org.apache.mahout.clustering.kmeans.TestRandomSeedGenerator.testRandomSeedGeneratorSeeded(),46,108
org.apache.mahout.clustering.kmeans.TestRandomSeedGenerator.testBuildRandomSeededSameInitalClusters(),42,155
"org.apache.mahout.clustering.kmeans.TestRandomSeedGenerator.assertVectorEquals(double[],Vector)",7,14
"org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder.CachingContinuousValueEncoder(String,int)",10,15
org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder.initCaches(),6,14
org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder.getCaches(),3,4
org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder.setProbes(int),4,8
"org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder.hashForProbe(byte[],int,String,int)",19,59
org.apache.mahout.common.DummyStatusReporter.newCounter(),15,29
org.apache.mahout.common.DummyStatusReporter.getCounter(Enum<>),5,12
"org.apache.mahout.common.DummyStatusReporter.getCounter(String,String)",5,14
org.apache.mahout.common.DummyStatusReporter.progress(),1,1
org.apache.mahout.common.DummyStatusReporter.setStatus(String),3,4
org.apache.mahout.common.DummyStatusReporter.getProgress(),1,1
org.apache.mahout.clustering.streaming.tools.ResplitSequenceFilesTest.testSplitting(),45,146
"org.apache.mahout.clustering.streaming.tools.ResplitSequenceFilesTest.numEntries(FileStatus,Configuration)",11,15
"org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.InteractionValueEncoder(String,FeatureVectorEncoder,FeatureVectorEncoder)",7,18
"org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.addToVector(String,double,Vector)",12,16
"org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.addToVector(byte[],double,Vector)",11,15
"org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.addInteractionToVector(String,String,double,Vector)",13,53
"org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.addInteractionToVector(byte[],byte[],double,Vector)",28,92
org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.probes(),1,2
"org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.getWeight(byte[],byte[],double)",4,13
org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.asString(String),7,12
"org.apache.mahout.vectorizer.encoders.InteractionValueEncoder.hashForProbe(byte[],int,String,int)",8,14
org.apache.mahout.common.iterator.CountingIteratorTest.testEmptyCase(),4,4
org.apache.mahout.common.iterator.CountingIteratorTest.testCount(),6,9
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIteratorTest.testEmptyCase(),6,12
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIteratorTest.testSmallInput(),7,11
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIteratorTest.testBadRate1(),7,8
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIteratorTest.testBadRate2(),7,8
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIteratorTest.testExactSizeMatch(),10,14
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIteratorTest.testSample(),11,15
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIteratorTest.countingIterator(int),5,11
org.apache.mahout.cf.taste.impl.common.BitSetTest.testGetSet(),5,28
org.apache.mahout.cf.taste.impl.common.BitSetTest.testBounds1(),6,13
org.apache.mahout.cf.taste.impl.common.BitSetTest.testBounds2(),6,13
org.apache.mahout.cf.taste.impl.common.BitSetTest.testClear(),5,24
org.apache.mahout.cf.taste.impl.common.BitSetTest.testClone(),6,24
org.apache.mahout.clustering.streaming.cluster.DataUtils.DataUtils(),2,2
"org.apache.mahout.clustering.streaming.cluster.DataUtils.sampleMultiNormalHypercube(int,int,double)",64,179
"org.apache.mahout.clustering.streaming.cluster.DataUtils.sampleMultiNormalHypercube(int,int)",15,35
org.apache.mahout.common.DistributedCacheFileLocationTest.nonExistingFile(),9,13
org.apache.mahout.common.DistributedCacheFileLocationTest.existingFile(),11,17
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testContainsAndAdd(),5,14
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testRemove(),9,18
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testClear(),8,16
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testSizeEmpty(),8,27
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testContains(),5,17
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testReservedValues(),16,42
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testRehash(),7,15
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testGrow(),6,15
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testIterator(),14,30
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.testVersusHashSet(),19,54
org.apache.mahout.cf.taste.impl.common.FastIDSetTest.buildTestFastSet(),5,18
org.apache.mahout.common.StringUtilsTest.DummyTest.equals(Object),6,14
org.apache.mahout.common.StringUtilsTest.DummyTest.hashCode(),3,3
org.apache.mahout.common.StringUtilsTest.DummyTest.getField(),1,2
org.apache.mahout.common.StringUtilsTest.testStringConversion(),13,36
org.apache.mahout.common.StringUtilsTest.testEscape(),8,11
org.apache.mahout.common.distance.TestMinkowskiMeasure.testMeasure(),12,99
org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputSplitTest.setUp(),9,15
org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputSplitTest.testWritable(),10,19
org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputSplitTest.testNullSeed(),10,18
org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputSplitTest.readSplit(),8,25
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArrayTest.testUserID(),8,23
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArrayTest.testItemID(),9,29
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArrayTest.testSetValue(),10,19
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArrayTest.testHasPref(),9,24
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArrayTest.testSort(),9,29
org.apache.mahout.cf.taste.impl.model.BooleanUserPreferenceArrayTest.testClone(),9,27
org.apache.mahout.classifier.sgd.GradientMachineTest.testGradientmachine(),29,45
org.apache.mahout.common.distance.TestEuclideanDistanceMeasure.distanceMeasureFactory(),4,8
org.apache.mahout.math.hadoop.similarity.TestVectorDistanceSimilarityJob.setUp(),5,6
org.apache.mahout.math.hadoop.similarity.TestVectorDistanceSimilarityJob.testVectorDistanceMapper(),35,137
org.apache.mahout.math.hadoop.similarity.TestVectorDistanceSimilarityJob.testVectorDistanceInvertedMapper(),38,128
org.apache.mahout.math.hadoop.similarity.TestVectorDistanceSimilarityJob.testRun(),41,133
org.apache.mahout.math.hadoop.similarity.TestVectorDistanceSimilarityJob.testMaxDistance(),42,146
org.apache.mahout.math.hadoop.similarity.TestVectorDistanceSimilarityJob.testRunInverted(),52,171
org.apache.mahout.math.hadoop.similarity.TestVectorDistanceSimilarityJob.getPointsWritable(double[][]),13,25
org.apache.mahout.common.lucene.AnalyzerUtilsTest.createStandardAnalyzer(),6,11
org.apache.mahout.common.lucene.AnalyzerUtilsTest.createCJKAnalyzer(),6,11
"org.apache.mahout.math.hadoop.solver.TestDistributedConjugateGradientSolverCLI.randomVector(int,double)",10,20
"org.apache.mahout.math.hadoop.solver.TestDistributedConjugateGradientSolverCLI.saveVector(Configuration,Path,Vector)",13,35
"org.apache.mahout.math.hadoop.solver.TestDistributedConjugateGradientSolverCLI.loadVector(Configuration,Path)",16,42
org.apache.mahout.math.hadoop.solver.TestDistributedConjugateGradientSolverCLI.testSolver(),41,127
org.apache.mahout.cf.taste.impl.recommender.PreferredItemsNeighborhoodCandidateItemsStrategyTest.testStrategy(),34,138
org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarityTest.testCorrelation(),10,58
org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarityTest.testNoSimilarity(),10,38
org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarityTest.testRefresh(),9,10
"org.apache.mahout.math.neighborhood.LumpyData.LumpyData(int,double,double)",25,43
"org.apache.mahout.math.neighborhood.LumpyData.lumpyRandomData(int,int)",13,33
org.apache.mahout.math.neighborhood.LumpyData.sample(),11,17
org.apache.mahout.common.distance.TestMahalanobisDistanceMeasure.testMeasure(),20,95
org.apache.mahout.vectorizer.HighDFWordsPrunerTest.setUp(),25,55
org.apache.mahout.vectorizer.HighDFWordsPrunerTest.enhanceWithHighDFWords(String),8,19
org.apache.mahout.vectorizer.HighDFWordsPrunerTest.testHighDFWordsPreserving(),5,6
org.apache.mahout.vectorizer.HighDFWordsPrunerTest.testHighDFWordsPruning(),5,6
org.apache.mahout.vectorizer.HighDFWordsPrunerTest.runTest(boolean),37,128
org.apache.mahout.vectorizer.HighDFWordsPrunerTest.getHighDFWordsDictionaryIndices(Path),20,49
"org.apache.mahout.vectorizer.HighDFWordsPrunerTest.validateVectors(Path,int[],boolean)",31,67
org.apache.mahout.classifier.sgd.OnlineBaseTest.getInput(),2,3
org.apache.mahout.classifier.sgd.OnlineBaseTest.readStandardData(),26,40
"org.apache.mahout.classifier.sgd.OnlineBaseTest.train(Matrix,Vector,OnlineLearner)",18,31
"org.apache.mahout.classifier.sgd.OnlineBaseTest.test(Matrix,Vector,AbstractVectorClassifier,double,double)",29,99
"org.apache.mahout.classifier.sgd.OnlineBaseTest.permute(Random,int)",12,29
org.apache.mahout.classifier.sgd.OnlineBaseTest.readCsv(String),59,124
org.apache.mahout.vectorizer.encoders.TextValueEncoderTest.testAddToVector(),29,83
org.apache.mahout.vectorizer.encoders.TextValueEncoderTest.testAsString(),12,22
org.apache.mahout.vectorizer.encoders.TextValueEncoderTest.testLuceneEncoding(),36,88
org.apache.mahout.classifier.sequencelearning.hmm.HMMTestBase.setUp(),22,58
org.apache.mahout.classifier.sequencelearning.hmm.HMMTestBase.getModel(),2,4
org.apache.mahout.classifier.sequencelearning.hmm.HMMTestBase.getSequence(),1,2
org.apache.mahout.common.DummyRecordWriterTest.testWrite(),15,66
org.apache.mahout.vectorizer.encoders.ContinuousValueEncoderTest.testAddToVector(),28,118
org.apache.mahout.vectorizer.encoders.ContinuousValueEncoderTest.testAsString(),10,14
org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.setUp(),7,9
org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.testSingularValues(),50,113
"org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.testSingularValues().$1.accept(File,String)",5,9
"org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.testSingularValues().$2.accept(File,String)",5,9
"org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.testSingularValues().$3.accept(File,String)",5,9
org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.readBlockMatrix(List<File>),52,115
org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.testLeftVectors(),19,35
"org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.lowRankMatrixInMemory(int,int)",7,13
"org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.assertEquals(Matrix,Matrix)",7,10
org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.testRightVectors(),17,31
"org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest.lowRankMatrix(File,String,int,int,int)",31,76
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFilesTest.setupDocs(),24,54
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFilesTest.testCreateTermFrequencyVectors(),10,12
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFilesTest.testCreateTermFrequencyVectorsNam(),11,13
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFilesTest.testCreateTermFrequencyVectorsSeq(),11,13
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFilesTest.testCreateTermFrequencyVectorsSeqNam(),12,14
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFilesTest.testPruning(),46,117
org.apache.mahout.vectorizer.SparseVectorsFromSequenceFilesTest.testPruningTF(),44,111
"org.apache.mahout.vectorizer.SparseVectorsFromSequenceFilesTest.runTest(boolean,boolean,boolean,double,int)",39,133
org.apache.mahout.cf.taste.impl.model.MemoryIDMigratorTest.testToLong(),6,10
org.apache.mahout.cf.taste.impl.model.MemoryIDMigratorTest.testStore(),10,23
org.apache.mahout.cf.taste.impl.model.MemoryIDMigratorTest.testInitialize(),11,24
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopItems(),16,51
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopItems().$1.estimate(Long),1,1
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopItemsRandom(),18,56
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopItemsRandom().$2.estimate(Long),2,2
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopUsers(),14,40
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopUsers().$3.estimate(Long),1,1
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopItemItem(),19,53
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopItemItemAlt(),20,54
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopUserUser(),19,53
org.apache.mahout.cf.taste.impl.recommender.TopItemsTest.testTopUserUserAlt(),20,54
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarityTest.testNoCorrelation(),10,20
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarityTest.testFullCorrelation1(),10,20
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarityTest.testFullCorrelation2(),10,20
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarityTest.testCorrelation1(),11,20
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarityTest.testCorrelation2(),11,20
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarityTest.testRefresh(),9,10
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarityTest.testReturnNaNDoubleWhenNoSimilaritiesForTwoItems(),12,21
org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarityTest.testItemsSimilarities(),12,35
"org.apache.mahout.common.iterator.SamplerCase.createSampler(int,Iterator<Integer>)",9,11
org.apache.mahout.common.iterator.SamplerCase.isSorted(),1,1
org.apache.mahout.common.iterator.SamplerCase.testEmptyCase(),6,6
org.apache.mahout.common.iterator.SamplerCase.testSmallInput(),9,16
org.apache.mahout.common.iterator.SamplerCase.testAbsurdSize(),8,9
org.apache.mahout.common.iterator.SamplerCase.testExactSizeMatch(),11,12
org.apache.mahout.common.iterator.SamplerCase.testSample(),22,55
org.apache.mahout.classifier.sequencelearning.hmm.HMMTrainerTest.testViterbiTraining(),26,64
org.apache.mahout.classifier.sequencelearning.hmm.HMMTrainerTest.testScaledViterbiTraining(),27,65
org.apache.mahout.classifier.sequencelearning.hmm.HMMTrainerTest.testBaumWelchTraining(),26,72
org.apache.mahout.classifier.sequencelearning.hmm.HMMTrainerTest.testScaledBaumWelchTraining(),27,73
org.apache.mahout.classifier.sequencelearning.hmm.HMMModelTest.testRandomModelGeneration(),10,20
org.apache.mahout.common.IntPairWritableTest.testGetSet(),5,16
org.apache.mahout.common.IntPairWritableTest.testWritable(),16,50
org.apache.mahout.common.IntPairWritableTest.testComparable(),16,71
org.apache.mahout.clustering.topdown.postprocessor.ClusterCountReaderTest.setUp(),6,9
org.apache.mahout.clustering.topdown.postprocessor.ClusterCountReaderTest.getPointsWritable(double[][]),13,25
org.apache.mahout.clustering.topdown.postprocessor.ClusterCountReaderTest.testGetNumberOfClusters(),29,77
"org.apache.mahout.clustering.topdown.postprocessor.ClusterCountReaderTest.topLevelClustering(Path,Configuration)",22,49
"org.apache.mahout.clustering.topdown.postprocessor.ClusterCountReaderTest.verifyThatNumberOfClustersIsCorrect(Configuration,Path)",25,57
"org.apache.mahout.math.neighborhood.SearchSanityTest.multiNormalRandomData(int,int)",13,32
org.apache.mahout.math.neighborhood.SearchSanityTest.generateData(),25,52
"org.apache.mahout.math.neighborhood.SearchSanityTest.SearchSanityTest(UpdatableSearcher,Matrix)",7,12
org.apache.mahout.math.neighborhood.SearchSanityTest.testExactMatch(),42,121
org.apache.mahout.math.neighborhood.SearchSanityTest.testNearMatch(),36,69
org.apache.mahout.math.neighborhood.SearchSanityTest.testOrdering(),25,40
org.apache.mahout.math.neighborhood.SearchSanityTest.testRemoval(),42,92
org.apache.mahout.math.neighborhood.SearchSanityTest.testSearchFirst(),16,40
org.apache.mahout.math.neighborhood.SearchSanityTest.testSearchLimiting(),15,22
org.apache.mahout.math.neighborhood.SearchSanityTest.testRemove(),31,60
"org.apache.mahout.classifier.sgd.ModelSerializerTest.roundTrip(T,Class<T>)",17,39
org.apache.mahout.classifier.sgd.ModelSerializerTest.onlineAucRoundtrip(),16,70
org.apache.mahout.classifier.sgd.ModelSerializerTest.onlineLogisticRegressionRoundTrip(),16,55
org.apache.mahout.classifier.sgd.ModelSerializerTest.crossFoldLearnerRoundTrip(),11,62
org.apache.mahout.classifier.sgd.ModelSerializerTest.adaptiveLogisticRegressionRoundTrip(),16,69
"org.apache.mahout.classifier.sgd.ModelSerializerTest.train(OnlineLearner,int)",12,24
"org.apache.mahout.classifier.sgd.ModelSerializerTest.randomVector(Random,int)",7,11
"org.apache.mahout.classifier.sgd.ModelSerializerTest.randomVector(Random,int).$1.apply(double)",3,3
org.apache.mahout.math.VarintTest.testUnsignedLong(),16,66
org.apache.mahout.math.VarintTest.testSignedPositiveLong(),17,85
org.apache.mahout.math.VarintTest.testSignedNegativeLong(),17,71
org.apache.mahout.math.VarintTest.testUnsignedInt(),17,68
org.apache.mahout.math.VarintTest.testSignedPositiveInt(),18,87
org.apache.mahout.math.VarintTest.testSignedNegativeInt(),18,75
org.apache.mahout.math.VarintTest.testUnsignedSize(),15,35
org.apache.mahout.math.VarintTest.testSignedSize(),15,51
org.apache.mahout.common.distance.DefaultDistanceMeasureTest.distanceMeasureFactory(),3,5
org.apache.mahout.common.distance.DefaultDistanceMeasureTest.testMeasure(),13,76
"org.apache.mahout.common.distance.DefaultDistanceMeasureTest.compare(DistanceMeasure,Vector[])",15,95
"org.apache.mahout.common.iterator.TestFixedSizeSampler.createSampler(int,Iterator<Integer>)",8,13
org.apache.mahout.common.iterator.TestFixedSizeSampler.isSorted(),1,1
org.apache.mahout.clustering.spectral.TestUnitVectorizerJob.testUnitVectorizerMapper(),40,105
org.apache.mahout.clustering.TestClusterInterface.testClusterAsFormatString(),15,35
org.apache.mahout.clustering.TestClusterInterface.testClusterAsFormatStringSparse(),18,39
org.apache.mahout.clustering.TestClusterInterface.testClusterAsFormatStringWithBindings(),18,43
org.apache.mahout.clustering.TestClusterInterface.testClusterAsFormatStringSparseWithBindings(),19,40
org.apache.mahout.math.MatrixWritableTest.testSparseMatrixWritable(),16,36
org.apache.mahout.math.MatrixWritableTest.testSparseRowMatrixWritable(),16,38
org.apache.mahout.math.MatrixWritableTest.testDenseMatrixWritable(),16,36
org.apache.mahout.math.MatrixWritableTest.doTestMatrixWritableEquals(Matrix),14,38
"org.apache.mahout.math.MatrixWritableTest.compareMatrices(Matrix,Matrix)",20,93
"org.apache.mahout.math.MatrixWritableTest.doCheckBindings(Map<String,Integer>)",11,36
"org.apache.mahout.math.MatrixWritableTest.writeAndRead(Writable,Writable)",16,52
org.apache.mahout.common.distance.TestManhattanDistanceMeasure.distanceMeasureFactory(),4,8
org.apache.mahout.vectorizer.collocations.llr.GramKeyPartitionerTest.testPartition(),14,84
org.apache.mahout.math.hadoop.MathHelper.MathHelper(),2,2
"org.apache.mahout.math.hadoop.MathHelper.elem(int,double)",10,15
"org.apache.mahout.math.hadoop.MathHelper.ElementToCheck.ElementToCheck(int,double)",4,8
org.apache.mahout.math.hadoop.MathHelper.ElementToCheck.get(),1,1
org.apache.mahout.math.hadoop.MathHelper.ElementToCheck.index(),1,2
org.apache.mahout.math.hadoop.MathHelper.ElementToCheck.set(double),2,4
org.apache.mahout.math.hadoop.MathHelper.vectorMatches(Vector.Element),15,25
org.apache.mahout.math.hadoop.MathHelper.vectorMatches(Vector.Element).$1.matches(Object),7,12
org.apache.mahout.math.hadoop.MathHelper.vectorMatches(Vector.Element).$1.appendTo(StringBuffer),3,4
"org.apache.mahout.math.hadoop.MathHelper.consistsOf(Vector,Vector.Element)",16,32
org.apache.mahout.math.hadoop.MathHelper.numberOfNoNZeroNonNaNElements(Vector),10,23
"org.apache.mahout.math.hadoop.MathHelper.readMatrix(Configuration,Path,int,int)",26,67
"org.apache.mahout.math.hadoop.MathHelper.readMatrixRows(Configuration,Path)",22,59
"org.apache.mahout.math.hadoop.MathHelper.writeDistributedRowMatrix(double[][],FileSystem,Configuration,Path)",26,55
"org.apache.mahout.math.hadoop.MathHelper.assertMatrixEquals(Matrix,Matrix)",14,46
org.apache.mahout.math.hadoop.MathHelper.nice(Vector),17,41
org.apache.mahout.math.hadoop.MathHelper.nice(Matrix),10,21
"org.apache.mahout.common.iterator.TestStableFixedSizeSampler.createSampler(int,Iterator<Integer>)",9,14
org.apache.mahout.common.iterator.TestStableFixedSizeSampler.isSorted(),1,1
org.apache.mahout.math.stats.OnlineAucTest.testBinaryCase(),30,173
org.apache.mahout.math.stats.OnlineAucTest.mustNotOmitGroup(),5,7
org.apache.mahout.math.stats.OnlineAucTest.groupedAuc(),10,51
org.apache.mahout.vectorizer.encoders.InteractionValueEncoderTest.testAddToVector(),25,75
org.apache.mahout.vectorizer.encoders.InteractionValueEncoderTest.testAddToVectorUsesProductOfWeights(),21,44
org.apache.mahout.vectorizer.encoders.InteractionValueEncoderTest.testAddToVectorWithTextValueEncoder(),15,42
org.apache.mahout.vectorizer.encoders.InteractionValueEncoderTest.testTraceDictionary(),24,66
org.apache.mahout.math.neighborhood.SearchQualityTest.generateData(),37,139
"org.apache.mahout.math.neighborhood.SearchQualityTest.SearchQualityTest(Searcher,Matrix,Matrix,Pair<List<List<WeightedThing<Vector>>>,Long>,Pair<List<WeightedThing<Vector>>,Long>)",12,33
org.apache.mahout.math.neighborhood.SearchQualityTest.testOverlapAndRuntimeSearchFirst(),32,101
org.apache.mahout.math.neighborhood.SearchQualityTest.testOverlapAndRuntime(),38,135
"org.apache.mahout.math.neighborhood.SearchQualityTest.getResultsAndRuntime(Searcher,Iterable<>)",16,38
"org.apache.mahout.math.neighborhood.SearchQualityTest.getResultsAndRuntimeSearchFirst(Searcher,Iterable<>)",15,34
org.apache.mahout.math.neighborhood.SearchQualityTest.StripWeight.apply(WeightedThing<Vector>),11,15
org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest.setUp(),24,54
org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest.testCreate(),4,5
org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest.testCreateNamed(),5,6
org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest.testCreateSeq(),5,6
org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest.testCreateSeqNamed(),6,7
"org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest.runTest(boolean,boolean)",46,118
org.apache.mahout.vectorizer.collocations.llr.GramTest.testConstructorsGetters(),14,68
org.apache.mahout.vectorizer.collocations.llr.GramTest.testNull1(),4,5
org.apache.mahout.vectorizer.collocations.llr.GramTest.testNull2(),3,3
org.apache.mahout.vectorizer.collocations.llr.GramTest.testEquality(),15,75
org.apache.mahout.vectorizer.collocations.llr.GramTest.testHashing(),25,82
org.apache.mahout.vectorizer.collocations.llr.GramTest.testWritable(),23,78
org.apache.mahout.vectorizer.collocations.llr.GramTest.testSorting(),18,64
