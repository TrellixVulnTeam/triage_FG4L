<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:25:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-263/MAHOUT-263.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-263] Matrix interface should extend Iterable&lt;Vector&gt; for better integration with distributed storage</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-263</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Many sparse algorithms for dealing with Matrices just make sequential passes over the data, but don&apos;t need to see the entire matrix at once.  The way they would be implemented currently is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Matrix m = getInputCorpus();
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;m.numRows(); i++) {
  Vector v = m.getRow(i);
  doStuffWithRow(v); 
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the Matrix is backed essentially by a SequenceFile&amp;lt;Integer, Vector&amp;gt;, this algorithm outline doesn&apos;t make sense, because it requires lots of sequential random access reads.  What makes more sense, and works for in-memory matrices too, is something like the following:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Matrix &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Iterable&amp;lt;Vector&amp;gt; { 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which allows for algorithms which only need iterators over Vectors do use them as such:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Matrix m = getInputCorpus();
Iterator&amp;lt;Vector&amp;gt; it = m.iterator();
Vector v;
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(it.hasNext() &amp;amp;&amp;amp; (v = it.next()) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
  doStuffWithRow(v); 
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Iterator interface could be easily implemented in the AbstractMatrix base class, so implementing this idea would be transparent to all current Mahout code.  Additionally, pulling out two layers of AbstractMatrix - one which only knows how to do the things which can be done using iterators (like times(Vector), timesSquared(Vector), plus(Matrix), assignRow(), etc...), which would be the direct base class for DistributedMatrix (or HDFSMatrix), but all the random-access matrix methods currently in AbstractMatrix would go in another abstract base class of the first one (which could be called AbstractVectorIterable, say).&lt;/p&gt;

&lt;p&gt;I think Iteratable&amp;lt;Vector&amp;gt; could be made more flexible by extending that to a new interface VectorIterable, which provided iterateAll() and iterateNonEmpty(), in case document Ids were sparse, and could also allow for the possibility of adding other methods (things like skipTo(int rowNum), perhaps).  &lt;/p&gt;

&lt;p&gt;Question is: should this go for all Matrices, or just SparseRowMatrix?  It&apos;s really tricky to have a matrix which is iterable both as sparse rows &lt;b&gt;and&lt;/b&gt; sparse columns.  I guess the point would be that by default, it iterates over rows, unless it&apos;s SparseColumnMatrix, which obviously iterates over columns.&lt;/p&gt;

&lt;p&gt;Thoughts?  Having to rely on random-access to a distributed-backed matrix is making me jump through silly extra hoops on some of the stuff I&apos;m working on patches for.&lt;/p&gt;</description>
                <environment>&lt;p&gt;all&lt;/p&gt;</environment>
        <key id="12445954">MAHOUT-263</key>
            <summary>Matrix interface should extend Iterable&lt;Vector&gt; for better integration with distributed storage</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jake.mannix">Jake Mannix</assignee>
                                    <reporter username="jake.mannix">Jake Mannix</reporter>
                        <labels>
                    </labels>
                <created>Tue, 19 Jan 2010 17:57:06 +0000</created>
                <updated>Sat, 21 May 2011 04:23:52 +0100</updated>
                            <resolved>Thu, 28 Jan 2010 06:17:44 +0000</resolved>
                                    <version>0.2</version>
                                    <fixVersion>0.3</fixVersion>
                                    <component>Math</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12802960" author="tdunning" created="Wed, 20 Jan 2010 19:58:50 +0000"  >&lt;p&gt;The idea of iterating through inputs sequentially is absolutely key to good performance on sequential algorithms with good abstraction.&lt;/p&gt;

&lt;p&gt;Some algorithms need to permute inputs to some degree, but that is easily handled to a moderate degree by buffering some number of rows and presenting them in randomized order.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Question is: should this go for all Matrices, or just SparseRowMatrix?  It&apos;s really tricky to have a matrix which is iterable both as sparse rows &lt;b&gt;and&lt;/b&gt; sparse columns.  I guess the point would be that by default, it iterates over rows, unless it&apos;s SparseColumnMatrix, which obviously iterates over columns.&lt;/p&gt;

&lt;p&gt;Thoughts?  Having to rely on random-access to a distributed-backed matrix is making me jump through silly extra hoops on some of the stuff I&apos;m working on patches for.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My feeling is that we don&apos;t need to support iteration both ways.  It would be nice, but the performance hit is so prodigious that it just isn&apos;t worth it.  In the past, where I needed to support column and row access, generally stored two copies each optimized for a different kind of access.  This is very rarely needed since most algorithms are very row or column centric and the data can be transposed (and thus permuted to match the desired access pattern) ahead of time to accommodate the need.  In many cases, the loop nesting can be rearranged as well to allow sequential row access to serve as well as column access, especially if map-reduce can be used to rearrange intermediate products.&lt;/p&gt;
</comment>
                            <comment id="12805353" author="jakemannix" created="Wed, 27 Jan 2010 05:29:23 +0000"  >&lt;p&gt;Ugly ugly names.  Better suggestions?&lt;/p&gt;</comment>
                            <comment id="12805356" author="jakemannix" created="Wed, 27 Jan 2010 05:31:02 +0000"  >&lt;p&gt;Let&apos;s try a patch which is svn up&apos;ed first.  &lt;/p&gt;

&lt;p&gt;Suggest better names for these methods / interfaces / classes?&lt;/p&gt;</comment>
                            <comment id="12805807" author="jake.mannix" created="Thu, 28 Jan 2010 06:17:44 +0000"  >&lt;p&gt;fixed in r903965&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12431523" name="MAHOUT-263.diff" size="8545" author="jakemannix" created="Wed, 27 Jan 2010 05:31:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 Jan 2010 19:58:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9802</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy673:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23155</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>