<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:17:55 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1272/MAHOUT-1272.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1272] Parallel SGD matrix factorizer for SVDrecommender</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1272</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;a parallel factorizer based on &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1089&quot; title=&quot;SGD matrix factorization for rating prediction with user and item biases&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1089&quot;&gt;&lt;del&gt;MAHOUT-1089&lt;/del&gt;&lt;/a&gt; may achieve better performance on multicore processor.&lt;/p&gt;

&lt;p&gt;existing code is single-thread and perhaps may still be outperformed by the default ALS-WR.&lt;/p&gt;

&lt;p&gt;In addition, its hardcoded online-to-batch-conversion prevents it to be used by an online recommender. An online SGD implementation may help build high-performance online recommender as a replacement of the outdated slope-one.&lt;/p&gt;

&lt;p&gt;The new factorizer can implement either DSGD (&lt;a href=&quot;http://www.mpi-inf.mpg.de/~rgemulla/publications/gemulla11dsgd.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.mpi-inf.mpg.de/~rgemulla/publications/gemulla11dsgd.pdf&lt;/a&gt;) or hogwild! (www.cs.wisc.edu/~brecht/papers/hogwildTR.pdf).&lt;/p&gt;

&lt;p&gt;Related discussion has been carried on for a while but remain inconclusive:&lt;br/&gt;
&lt;a href=&quot;http://web.archiveorange.com/archive/v/z6zxQUSahofuPKEzZkzl&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://web.archiveorange.com/archive/v/z6zxQUSahofuPKEzZkzl&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12655421">MAHOUT-1272</key>
            <summary>Parallel SGD matrix factorizer for SVDrecommender</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="peng">Peng Cheng</reporter>
                        <labels>
                            <label>features</label>
                            <label>patch</label>
                            <label>test</label>
                    </labels>
                <created>Fri, 28 Jun 2013 21:53:51 +0100</created>
                <updated>Mon, 3 Feb 2014 08:06:18 +0000</updated>
                            <resolved>Mon, 8 Jul 2013 00:51:24 +0100</resolved>
                                                    <fixVersion>0.8</fixVersion>
                                    <component>Collaborative Filtering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                    <timeoriginalestimate seconds="1209600">336h</timeoriginalestimate>
                            <timeestimate seconds="1209600">336h</timeestimate>
                                        <comments>
                            <comment id="13695784" author="ssc" created="Fri, 28 Jun 2013 21:57:43 +0100"  >&lt;p&gt;Are refering to a single-machine multi-core implementation or a MapReduce implementation? &lt;/p&gt;</comment>
                            <comment id="13695791" author="peng" created="Fri, 28 Jun 2013 22:01:27 +0100"  >&lt;p&gt;I presume it be be a single-machine multi-core? many people on the dicussion has voted against iterative MR. Not sure though...&lt;/p&gt;</comment>
                            <comment id="13695800" author="peng" created="Fri, 28 Jun 2013 22:11:30 +0100"  >&lt;p&gt;I&apos;m reading the source code of ALS-WR, apparently it uses an ExecutorService to distribute ALS to each core.&lt;br/&gt;
There is no MR here. I just started using it for a few days. Plz correct me if I&apos;m wrong.&lt;/p&gt;</comment>
                            <comment id="13695807" author="ssc" created="Fri, 28 Jun 2013 22:16:57 +0100"  >&lt;p&gt;There is also a MR version of ALS. But I agree that it would be better to start with a single machine implementation of DSGD or Hogwild. If its faster than ALS-WR, it would be a good replacement for RatingSGDFactorizer and ALSWRFactorizer. What do you think?&lt;/p&gt;</comment>
                            <comment id="13695818" author="peng" created="Fri, 28 Jun 2013 22:26:35 +0100"  >&lt;p&gt;Thank a lot for the hint! Is it in org.apache.mahout.math.als? I can&apos;t find any other implementation in core-0.7&lt;br/&gt;
Yeah, I think this should be a good practice to start with, regardless of whether it has any performance edge.&lt;br/&gt;
I&apos;ll try to do something this weekend.&lt;/p&gt;</comment>
                            <comment id="13695821" author="ssc" created="Fri, 28 Jun 2013 22:34:16 +0100"  >&lt;p&gt;You should use the trunk, lots of things have been improved. Take your time to work on the code, no need for a hurry &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13696155" author="peng" created="Sat, 29 Jun 2013 18:09:56 +0100"  >&lt;p&gt;learning rate/step size are set to be identical to package ~.classifier.sgd, the old learning rate is exponential with a constant decaying factor, this setting seems to be only working for smooth functions (proved by Nesterov?), I&apos;m not sure if it is true in CF. Otherwise, either use 1/sqrt&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; for convex f or 1/n for strongly convex f.&lt;/p&gt;</comment>
                            <comment id="13696932" author="peng" created="Mon, 1 Jul 2013 17:38:21 +0100"  >&lt;p&gt;Looks like the 1/n learning rate doesn&apos;t work at all on SGD factorizer, maybe the convergence of stochastic optimization can&apos;t be applied on the non-convex MF problem. Can someone show me a paper discussing convergence bound of such problem? Much appreciated.&lt;/p&gt;</comment>
                            <comment id="13701233" author="peng" created="Sat, 6 Jul 2013 03:48:00 +0100"  >&lt;p&gt;Hey I have finished the class and test for parallel sgd factorizer for matrix-completion based recommender (not mapreduced, just single machine multi-thread), it is loosely based on vanilla sgd and hogwild!. I have only tested on toy and synthetic data (2000users * 1000 items) but it is pretty fast, 3-5x times faster than vanilla sgd with 8 cores. (never exceed 6x, apparently the executor induces high overhead allocation cost) And definitely faster than single machine ALSWR. &lt;/p&gt;

&lt;p&gt;I&apos;m submitting my java files and patch for review.&lt;/p&gt;</comment>
                            <comment id="13701234" author="peng" created="Sat, 6 Jul 2013 03:57:40 +0100"  >&lt;p&gt;java file&lt;/p&gt;</comment>
                            <comment id="13701236" author="peng" created="Sat, 6 Jul 2013 04:05:50 +0100"  >&lt;p&gt;patch&lt;/p&gt;</comment>
                            <comment id="13701241" author="peng" created="Sat, 6 Jul 2013 04:26:51 +0100"  >&lt;p&gt;The next step would be to create an online version of this (and recommender)&lt;br/&gt;
sgd is an online algorithm but now works only for batch recommender.&lt;br/&gt;
In the mean time the only online recommender in mahout is the slope-one, kind of a shame.&lt;br/&gt;
Will create a new JIRA ticket tomorrow.&lt;/p&gt;</comment>
                            <comment id="13701244" author="ssc" created="Sat, 6 Jul 2013 04:44:38 +0100"  >&lt;p&gt;Hello Peng, &lt;/p&gt;

&lt;p&gt;the code looks very good on a first glimpse. I&apos;d like you to work on it a little more though. Can you format the files according to our code conventions (e.g. no tabs, 2 spaces indent, no braces on next line etc). The code conventions are basically Oracle&apos;s standard conventions with 120 chars per line instead of 80.&lt;/p&gt;

&lt;p&gt;Furthermore, could you benchmark your code via a holdout test on a known dataset, maybe movielens1M or movielens10M? That would be awesome. I think this is going to be a great contribution.&lt;/p&gt;</comment>
                            <comment id="13701247" author="pc175@uowmail.edu.au" created="Sat, 6 Jul 2013 04:55:47 +0100"  >&lt;p&gt;Aye aye, more test on the way. Much obliged to the quick suggestion.&lt;/p&gt;


</comment>
                            <comment id="13701672" author="peng" created="Sun, 7 Jul 2013 22:31:12 +0100"  >&lt;p&gt;Hey honoured contributors I&apos;ve got some crude test results for the new parallel SGD factorizer for CF:&lt;/p&gt;

&lt;p&gt;1. parameters:&lt;br/&gt;
    lambda = 1e-10&lt;br/&gt;
    rank of the rating matrix/number of features of each user/item vectors = 50&lt;br/&gt;
    number of biases: 3 (average rating + user bias + item bias)&lt;br/&gt;
    number of iterations/epochs = 2 (for all factorizers including ALSWR, ratingSGD and the proposed parallelSGD)&lt;br/&gt;
    initial mu/learning rate = 0.01 (for ratingSGD and proposed parallelSGD)&lt;br/&gt;
    decay rate of mu = 1 (does not decay) (for ratingSGD and proposed parallelSGD)&lt;br/&gt;
    other parameters are set to default.&lt;/p&gt;

&lt;p&gt;2. result on movielens-10m (I don&apos;t know what the hell happened to ALSWR, the default hyperparameters must screw up real bad, but my point is the speed edge):&lt;br/&gt;
  a. RMSE&lt;/p&gt;

&lt;p&gt;Jul 07, 2013 5:20:23 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ALSWRFactorizer: 3.7709163950800665E21 time spent: 6.179s===================&lt;br/&gt;
Jul 07, 2013 5:20:23 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With RatingSGDFactorizer: 0.8847393972529887 time spent: 6.179s===================&lt;br/&gt;
Jul 07, 2013 5:20:23 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ParallelSGDFactorizer: 0.8805947464818478 time spent: 3.084s====================&lt;/p&gt;

&lt;p&gt;  b. Absolute Average&lt;/p&gt;

&lt;p&gt;INFO: ==================Recommender With ALSWRFactorizer: 1.2085420449917682E19 time spent: 7.444s===================&lt;br/&gt;
Jul 07, 2013 5:22:39 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With RatingSGDFactorizer: 0.6757777685274206 time spent: 7.444s===================&lt;br/&gt;
Jul 07, 2013 5:22:39 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ParallelSGDFactorizer: 0.6775774766740665 time spent: 2.365s====================&lt;/p&gt;

&lt;p&gt;3. result on movielens-1m (in average sgd works worse on it comparing to movielens-10m, perhaps I could use more iterations/epochs)&lt;/p&gt;

&lt;p&gt;  a. RMSE&lt;/p&gt;

&lt;p&gt;Jul 07, 2013 5:26:04 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ALSWRFactorizer: 1.3514189134383086E20 time spent: 0.637s===================&lt;br/&gt;
Jul 07, 2013 5:26:04 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With RatingSGDFactorizer: 0.9312989913558529 time spent: 0.637s===================&lt;br/&gt;
Jul 07, 2013 5:26:04 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ParallelSGDFactorizer: 0.9529995632658007 time spent: 0.305s====================&lt;/p&gt;

&lt;p&gt;  b. Absolute Average&lt;/p&gt;

&lt;p&gt;Jul 07, 2013 5:25:29 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ALSWRFactorizer: 1.58934499216789965E18 time spent: 0.626s===================&lt;br/&gt;
Jul 07, 2013 5:25:29 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With RatingSGDFactorizer: 0.7459565635961599 time spent: 0.626s===================&lt;br/&gt;
Jul 07, 2013 5:25:29 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ParallelSGDFactorizer: 0.7420818642753416 time spent: 0.297s====================&lt;/p&gt;

&lt;p&gt;Great thanks to Sebastian for his guidance, I&apos;ll upload the EvaluatorRunner class as a mahout-example component and the formatted code shortly.&lt;/p&gt;</comment>
                            <comment id="13701678" author="peng" created="Sun, 7 Jul 2013 22:49:12 +0100"  >&lt;p&gt;My laptop is a HP Pavilion with Intel&#174; Core&#8482; i7-3610QM CPU @ 2.30GHz &#215; 8 and 8G mem.&lt;/p&gt;</comment>
                            <comment id="13701679" author="peng" created="Sun, 7 Jul 2013 23:00:06 +0100"  >&lt;p&gt;Hi Sebastian may I ask question? I digged some old post and found that the best result should be RMSE ~= 0.85, do you know the parameters being used?&lt;/p&gt;</comment>
                            <comment id="13701682" author="peng" created="Sun, 7 Jul 2013 23:20:30 +0100"  >&lt;p&gt;New parameter:&lt;br/&gt;
lambda = 0.001&lt;br/&gt;
rank of the rating matrix/number of features of each user/item vectors = 5&lt;br/&gt;
number of iterations/epochs = 20&lt;/p&gt;

&lt;p&gt;result on movielens-10m, all evaluation uses RMSE:&lt;br/&gt;
Jul 07, 2013 6:18:57 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With RatingSGDFactorizer: 0.8119081937625745 time spent: 36.509s===================&lt;br/&gt;
Jul 07, 2013 6:18:57 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ParallelSGDFactorizer: 0.8115207244832938 time spent: 8.747s====================&lt;/p&gt;

&lt;p&gt;This is fast and accurate enough, I&apos;m advancing to netflix prize dataset.&lt;/p&gt;</comment>
                            <comment id="13701686" author="ssc" created="Sun, 7 Jul 2013 23:32:50 +0100"  >&lt;p&gt;Hi Peng, &lt;/p&gt;

&lt;p&gt;I also played with your code and the results look very good, its blazingly fast compared to ALS (which has to solve lots of linear systems). The formatting is not completely correct, but I can take over this part. Not sure, if the patch makes it into the current release (0.8), but we will definitely include it for 0.9. Thank you for this contribution.&lt;/p&gt;</comment>
                            <comment id="13701688" author="peng" created="Sun, 7 Jul 2013 23:39:47 +0100"  >&lt;p&gt;Hi Sebastian,&lt;/p&gt;

&lt;p&gt;Really? I would break my fingers to squeeze into 0.8 release. (not RC1 of course, but there is still RC2 :-&amp;gt;) A few guys I work with are also kicking me for the online recommender, so I can work very hard and undistracted. You just tell me what to do next and I&apos;ll be thrilled to oblige.&lt;/p&gt;</comment>
                            <comment id="13701693" author="ssc" created="Sun, 7 Jul 2013 23:55:29 +0100"  >&lt;p&gt;Lets see what we can do to get this into 0.8. The online recommender will definitely be out of scope for 0.8.  But its an interesting project for 0.9!&lt;/p&gt;</comment>
                            <comment id="13701717" author="hudson" created="Mon, 8 Jul 2013 02:21:09 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #2135 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2135/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2135/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1272&quot; title=&quot;Parallel SGD matrix factorizer for SVDrecommender&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1272&quot;&gt;&lt;del&gt;MAHOUT-1272&lt;/del&gt;&lt;/a&gt; Parallel SGD matrix factorizer for SVDrecommender (Revision 1500553)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
ssc : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/CHANGELOG&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ParallelSGDFactorizer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/recommender/svd/ParallelSGDFactorizerTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13702175" author="peng" created="Mon, 8 Jul 2013 18:52:50 +0100"  >&lt;p&gt;Hey Sebastian, Hudson, Thank you so much for on pushing things that hard. I own you this.&lt;br/&gt;
I&apos;ll test more grouplens data. Since Sebastian has taken over the code, new test cases will only be posted as code snippets.&lt;/p&gt;</comment>
                            <comment id="13707830" author="peng" created="Sat, 13 Jul 2013 21:54:29 +0100"  >&lt;p&gt;Test on libimseti dataset (&lt;a href=&quot;http://www.occamslab.com/petricek/data/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.occamslab.com/petricek/data/&lt;/a&gt;), libimseti is a czech dating website.&lt;br/&gt;
This dataset has been used in a live example described in book &apos;Mahout in Action&apos;, page 71, written by a few guys hanging around this site.&lt;/p&gt;

&lt;p&gt;parameters:&lt;br/&gt;
  private final static double lambda = 0.1;&lt;br/&gt;
  private final static int rank = 16;&lt;/p&gt;

&lt;p&gt;  private static int numALSIterations=5;&lt;br/&gt;
  private static int numEpochs=20;&lt;/p&gt;

&lt;p&gt;(for ratingSGD)&lt;br/&gt;
      double randomNoise=0.02;&lt;br/&gt;
      double learningRate=0.01;&lt;br/&gt;
      double learningDecayRate=1;&lt;/p&gt;

&lt;p&gt;(for parallelSGD)&lt;br/&gt;
      double mu0=1;&lt;br/&gt;
      double decayFactor=1;&lt;br/&gt;
      int stepOffset=100;&lt;br/&gt;
      double forgettingExponent=-1;&lt;/p&gt;

&lt;p&gt;result (using average absolute difference, the rating is based on a 1-10 scale):&lt;/p&gt;

&lt;p&gt;INFO: ==================Recommender With ALSWRFactorizer: 1.5623366369454739 time spent: 41.24s=================== (should be noted the number of ALS iteration is much smaller than others, which leads to suboptimal result, but this is not the point of this test)&lt;br/&gt;
Jul 13, 2013 4:39:34 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With RatingSGDFactorizer: 1.28022379922957 time spent: 118.188s===================&lt;br/&gt;
Jul 13, 2013 4:39:34 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: ==================Recommender With ParallelSGDFactorizer: 1.2798905733917445 time spent: 21.806s====================&lt;/p&gt;

&lt;p&gt;This is already the best result I can get, the original book claims a best result of 1.12 on this dataset, which I never achieve. If you have also experimented and find a better parameter set, please post here.&lt;/p&gt;</comment>
                            <comment id="13707831" author="peng" created="Sat, 13 Jul 2013 21:56:16 +0100"  >&lt;p&gt;here is the component for testing on libimseti dataset&lt;/p&gt;</comment>
                            <comment id="13707923" author="peng" created="Sun, 14 Jul 2013 03:14:46 +0100"  >&lt;p&gt;Runnable component for testing ParallelSGDFactorizer on netflix training dataset (yeah, only the trainingSet generated by NetflixDatasetConverter, I cannot get judging.txt for validation, but my purpose is just to test its efficiency on extreme scale, so whatever).&lt;/p&gt;

&lt;p&gt;Warning! To run it without danger you need to allocate at least 12G of heap space to jvm by using the following VM parameters:&lt;/p&gt;

&lt;p&gt;-Xms12288M -Xmx12288M.&lt;/p&gt;

&lt;p&gt;In addition, 16G+ RAM is MANDATORY otherwise either garbage collection or swap will kill you (or both). I almost burned my laptop on this (which has only 8G RAM). As a result, I won&apos;t be able to post any result before I can get a better machine. But since its number of rating is about 6 times the size of the movielens-10m or libimseti dataset, and SGD scales linearly to this number, I estimate the running time to be between 2.5-3 minutes.&lt;/p&gt;

&lt;p&gt;I will be utmost obliged to anybody who can try it and post the result here (of course, if your machine can handle it). But obviously as Sebastian has pointed out, our FileDataModel needs some serious optimization to handle such scale.&lt;/p&gt;

&lt;p&gt;Hey Sebastian, can you try this out in your lab? That will be most helpful.&lt;/p&gt;</comment>
                            <comment id="13709456" author="ssc" created="Tue, 16 Jul 2013 05:39:56 +0100"  >&lt;p&gt;I think we should rework the datamodel first. It makes no sense to have to allocate 12GB heap for a 1GB dataset.&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12591150" name="GroupLensSVDRecomenderEvaluatorRunner.java" size="4554" author="peng" created="Sun, 7 Jul 2013 22:49:12 +0100"/>
                            <attachment id="12592179" name="NetflixRecomenderEvaluatorRunner.java" size="4720" author="peng" created="Sun, 14 Jul 2013 03:14:46 +0100"/>
                            <attachment id="12591151" name="ParallelSGDFactorizer.java" size="13847" author="peng" created="Sun, 7 Jul 2013 22:49:12 +0100"/>
                            <attachment id="12591066" name="ParallelSGDFactorizer.java" size="12287" author="peng" created="Sat, 6 Jul 2013 03:57:40 +0100"/>
                            <attachment id="12591152" name="ParallelSGDFactorizerTest.java" size="11761" author="peng" created="Sun, 7 Jul 2013 22:49:12 +0100"/>
                            <attachment id="12591067" name="ParallelSGDFactorizerTest.java" size="9996" author="peng" created="Sat, 6 Jul 2013 03:57:40 +0100"/>
                            <attachment id="12592161" name="libimsetiSVDRecomenderEvaluatorRunner.java" size="4646" author="peng" created="Sat, 13 Jul 2013 21:56:16 +0100"/>
                            <attachment id="12591068" name="mahout.patch" size="23739" author="peng" created="Sat, 6 Jul 2013 04:05:50 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 28 Jun 2013 20:57:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>335696</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzfqyf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>336020</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>