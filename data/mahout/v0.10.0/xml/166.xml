<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:15:23 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-166/MAHOUT-166.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-166] Potpourri 2</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-166</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Another large changelist constructed from FindBugs and IntelliJ analysis. It&apos;s big enough I figured I&apos;d run it by the list. Key changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Making stuff final, private that can be&lt;/li&gt;
	&lt;li&gt;Dead code elimination&lt;/li&gt;
	&lt;li&gt;Simplifying JUnit assertions &amp;#8211; &quot;assertTrue(a.equals(b) == true)&quot; could be &quot;assertEquals(a, b)&quot; for instance. Also fixed some expected/actual value issues&lt;/li&gt;
	&lt;li&gt;Not compiling a Pattern object millions of times &amp;#8211; String.split() and replace()/replaceAll() do this and can be profitably replaced with a precompiled Pattern.&lt;/li&gt;
	&lt;li&gt;Small bug fixes picked up by analysis&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12433771">MAHOUT-166</key>
            <summary>Potpourri 2</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="srowen">Sean Owen</reporter>
                        <labels>
                    </labels>
                <created>Sat, 22 Aug 2009 19:36:28 +0100</created>
                <updated>Mon, 17 Sep 2012 21:04:58 +0100</updated>
                            <resolved>Mon, 24 Aug 2009 21:16:52 +0100</resolved>
                                    <version>0.2</version>
                                    <fixVersion>0.2</fixVersion>
                                        <due>Fri, 28 Aug 2009 07:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12746490" author="tdunning" created="Sat, 22 Aug 2009 20:03:17 +0100"  >&lt;p&gt;I would suspect that Patterns compiled from constant strings are cached by the system.  This would make several of these changes moot.  Since this is a prospective performance tweak, the key test should be readability first, profiling second.  IF the region of code containing the regex usage does not constitute the majority of the time, then it probably should be left in whatever is the most readable form.&lt;/p&gt;

&lt;p&gt;A good example of a change that I would see as less readable would be the modification of this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; label = labelFeaturePair.split(&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;)[0];
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;into this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; comma = labelFeaturePair.indexOf(&apos;,&apos;);
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; label = comma &amp;lt; 0 ? labelFeaturePair : labelFeaturePair.substring(0, comma);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In canopy/InputMapper.java, I see a change for the better with this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; Constructor&amp;lt;?&amp;gt; constructor;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can this be further changed to Constructor&amp;lt;? extends Vector&amp;gt; to avoid a cast shortly thereafter?&lt;/p&gt;

&lt;p&gt;As a random questions, why is this still transient if the class is not serializable?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;transient&lt;/span&gt; Logger log = LoggerFactory.getLogger(WikipediaDatasetCreatorDriver.class);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the category of gratuitous strangeness, why the single quotes here?  This can&apos;t be better in any way that I can think of (concatenating string constants might be forced out of compile time, this is a test class and so on).&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-quote&quot;&gt;&quot;   @RELATION Mahout\n&quot;&lt;/span&gt; +
    &apos;\n&apos; +
    &lt;span class=&quot;code-quote&quot;&gt;&quot;   @ATTRIBUTE foo  NUMERIC\n&quot;&lt;/span&gt; +
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12746492" author="srowen" created="Sat, 22 Aug 2009 20:17:36 +0100"  >&lt;p&gt;I am all but certain the Pattern class does not cache these compilations, no. I will check in the source shortly, once I can download it. The compiler can&apos;t perform, well, any optimizations, let alone optimize this out. (FWIW IntelliJ flagged it and I trust the inspections, but will look at the source.)&lt;/p&gt;

&lt;p&gt;Some of these occur in map() methods or loops where it&apos;ll mean compiling a regex over and over. It seemed significant enough to consider actively optimizing. As for readability, that&apos;s a good point. We could make a method with good name to fix that?&lt;/p&gt;

&lt;p&gt;IIRC that Constructor type can&apos;t be tightened further without more changes to how that code works and I didn&apos;t want to rock the boat too much.&lt;/p&gt;

&lt;p&gt;On transient, I don&apos;t know. static members can never be serialized anyway. IntelliJ flags this too, but recall from some earlier discussion that &apos;transient&apos; is in place in some cases for JSON, so I have avoided touching this keyword.&lt;/p&gt;

&lt;p&gt;The compiler does pre-concatenate strings at compile time if it can. It&apos;s allowed to do that. In that sense the String-to-char change does nothing. It&apos;s test code anyway. I can back it out. But as a matter of general practice, it&apos;s better to append to a char than one-character String, in a quite small way. The former results in a call to StringBuilder.append(char) rather than append(String) and that is faster. (I suppose it avoids more constants in the String pool too but that&apos;s a truly small effect.) It&apos;s one of those things that seems like good default practice and my IDE just does automatically anyway. But yeah I don&apos;t mind backing this out.&lt;/p&gt;</comment>
                            <comment id="12746515" author="tdunning" created="Sat, 22 Aug 2009 22:57:33 +0100"  >&lt;p&gt;I did some quick testing consisting of splitting a million pairs of strings on a comma.&lt;/p&gt;

&lt;p&gt;The three idioms that I tested included these:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
1               &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; first = s.split(&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;)[0];
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2               &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; comma = s.indexOf(&apos;,&apos;);
                &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; first = comma &amp;gt; 0 ? s.substring(0, comma) : s;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
3               &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Pattern COMMA = Pattern.compile(&lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt;);
                ...
                &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; first = COMMA.split(s)[0];
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The results were that idiom 1 takes about 1ms, idiom 2 takes 75 microseconds and idiom 3 takes about 600 microseconds.&lt;/p&gt;

&lt;p&gt;The first conclusion is that it appears that Sean is right that using a string literal is more expensive than a pre-compiled pattern and much more expensive than using low-level string operations.&lt;/p&gt;

&lt;p&gt;But...&lt;/p&gt;

&lt;p&gt;For a large clustering with, say, 10 million items the total cost of this split applied to each item would be less than 10,000 CPU core seconds.  Split across a typical small cluster of 10 nodes, each with 8 cores, the real-time cost would  about 120 seconds and across a medium cluster with 100 nodes each with 8 cores, the cost would be 12 seconds of runtime.  My guess is that clustering this many elements on the small cluster would take quite a bit longer than 2 minutes.&lt;/p&gt;

&lt;p&gt;My feeling is that these a non-trivial costs, and the savings are worth the clarity in a stable production InputFormat, but I wouldn&apos;t bother to fix these in most cases since this isn&apos;t likely to be the dominant cost.&lt;/p&gt;</comment>
                            <comment id="12746581" author="srowen" created="Sun, 23 Aug 2009 11:08:33 +0100"  >&lt;p&gt;Yes, of course, it&apos;s not as if it&apos;s doubling the speed. A couple CPU-hours seems non-trivial to me, in a project that&apos;s focused on scalability. Every little helps. I do take the point about readability; I personally find both about the same. Or, I think there are more significant sins in the code already, so I&apos;d dislike rolling this actual win back on this basis. Let me let the patch sit for a bit longer for more comments from anyone?&lt;/p&gt;</comment>
                            <comment id="12746792" author="srowen" created="Mon, 24 Aug 2009 10:39:42 +0100"  >&lt;p&gt;I&apos;d like to commit this today &amp;#8211; gauging whether there are still any objections to bits of it or not. I did not hear any in the end.&lt;br/&gt;
As a bonus, this patch will clean up copyright notices: standardize and add them where missing to all source code.&lt;/p&gt;</comment>
                            <comment id="13457266" author="hudson" created="Mon, 17 Sep 2012 21:04:58 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #1663 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1663/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1663/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-166&quot; title=&quot;Potpourri 2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-166&quot;&gt;&lt;del&gt;MAHOUT-166&lt;/del&gt;&lt;/a&gt; ignore directories inside update file directory (Revision 1386734)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
srowen : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1386734&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1386734&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12417368" name="MAHOUT-166.patch" size="92071" author="srowen" created="Sat, 22 Aug 2009 19:37:03 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 22 Aug 2009 19:03:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9899</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxwdhj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12672</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>