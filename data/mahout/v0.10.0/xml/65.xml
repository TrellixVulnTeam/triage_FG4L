<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:23:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-65/MAHOUT-65.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-65] Add Element Labels to Vectors and Matrices</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-65</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Many applications can benefit by accessing elements in vectors and matrices using String labels in addition to numeric indices. Investigate adding such a capability.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12399674">MAHOUT-65</key>
            <summary>Add Element Labels to Vectors and Matrices</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jeastman@windwardsolutions.com">Jeff Eastman</assignee>
                                    <reporter username="jeastman@windwardsolutions.com">Jeff Eastman</reporter>
                        <labels>
                    </labels>
                <created>Sun, 6 Jul 2008 19:52:31 +0100</created>
                <updated>Sat, 21 May 2011 04:24:16 +0100</updated>
                            <resolved>Wed, 9 Dec 2009 12:14:45 +0000</resolved>
                                    <version>0.1</version>
                                    <fixVersion>0.2</fixVersion>
                                    <component>Math</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12610829" author="jeastman@windwardsolutions.com" created="Sun, 6 Jul 2008 20:09:48 +0100"  >&lt;p&gt;This patch introduces four new operations on Vectors:&lt;/p&gt;

&lt;p&gt;1. setLabelBindings(Map&amp;lt;String, Integer&amp;gt; bindings) - sets a map of bindings between string labels and vector index values&lt;br/&gt;
2. getLabelBindings() - returns the map, creating an empty one if needed&lt;br/&gt;
3. set(String label, double value) throws UnboundLabelException, IndexException - sets the labeled element of the vector to the given value&lt;br/&gt;
4. get(String label) throws UnboundLabelException, IndexException - returns the value indexed by the given label&lt;/p&gt;

&lt;p&gt;This patch required reworking of the serializing/deserializing code so that the maps are included in the formatted value if present. Added some new unit tests to verify it all works. All tests still run.&lt;/p&gt;

&lt;p&gt;This is about as minimal a change as I could imagine, and I chose to just expose the map rather than try to encapsulate all the operations that clients might want to perform on it. Is this the kind of functionality that people will find useful?&lt;/p&gt;

&lt;p&gt;Jeff&lt;/p&gt;</comment>
                            <comment id="12613255" author="karl.wettin" created="Mon, 14 Jul 2008 08:57:56 +0100"  >&lt;p&gt;Late submission, but I think I&apos;d prefer if the labels was a bit less hard bound to vectors. And I want to associate them more than a name, at least class values too. Perhaps something like this:&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

&lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class Labels {
  &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; get(Vector v, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; l) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (v.get(indexOf(l));
  }
  void set(Vector v, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; l, &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; w) {
    v.set(indexOf(l), w);
  }

  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; indexOf(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;);
  Label getLabel(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;);
  Iterator&amp;lt;Label&amp;gt; iterate();
}

class Label {
  &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name;
  &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Type { real, ordinal }
  Type type;
  List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; ordinalValues;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; </comment>
                            <comment id="12613262" author="tdunning" created="Mon, 14 Jul 2008 10:03:02 +0100"  >
&lt;p&gt;It is a fair preference to prefer that the labels be loosely bound to vectors, but I would prefer otherwise.  Obviously, either of us could live with the opposing view.&lt;/p&gt;

&lt;p&gt;The idea that the label should be more than a string is interesting.  I am not sure if it should have such an elaborate structure, as opposed to something based on inheritance more like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Label {
   &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; getName()
}

class StringLabel &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Label {
   &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name;
   &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; getName() {&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; name}
}

class OrdinalLabel &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Label { ... }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and so on.  Note that I only use interface here for clarity of exposition.  I know your antipathy to interfaces and preference for abstract classes.&lt;/p&gt;

&lt;p&gt;Also, what do you mean by a label with type &quot;real&quot;?&lt;/p&gt;</comment>
                            <comment id="12613330" author="karl.wettin" created="Mon, 14 Jul 2008 15:35:27 +0100"  >&lt;p&gt;With &quot;real&quot; I just mean &quot;plain old double weight feature value&quot;. With &quot;ordinal&quot; I mean associating vector values with feature string class values. &lt;/p&gt;

&lt;p&gt;How do you propose one get to know if the feature is of ordinal type if we use subclasses? Wouldn&apos;t that mean lots of instanceof or a visitor? To me it seems much easier to bake it all up in one and the same class. &lt;/p&gt;

&lt;p&gt;If the labels are hard bound to vectors, then I think it also makes sense to allow vectors to be hard bound to a matrix in which we keep a default list of labels to fall back on. I&apos;m not going to push that hard for hard or loosly bound labels, but I&apos;m going to take the oppertunity to say that many people have spent lots of time to define flexible data definition models, such as the one in JSR 247. We don&apos;t need all that stuff they got in there but the stuff we talk about here is very related to what their logical/physical data model is about.&lt;/p&gt;

&lt;p&gt;Labels are not really needed, it&apos;s just meta data that makes life simpler when you are constructing a matrix. Let&apos;s not make such a tool difficult to use.&lt;/p&gt;
</comment>
                            <comment id="12613352" author="tdunning" created="Mon, 14 Jul 2008 16:46:14 +0100"  >&lt;p&gt;Ahhh...&lt;/p&gt;

&lt;p&gt;So this would be the type of the element of the vector.  That seems like shoe-horning two functions into one, but I see your point that these are both characteristics of the element of the vector.&lt;/p&gt;

&lt;p&gt;And I do think that labels on matrix rows should be inherited from the column labels of the matrix.  &lt;/p&gt;</comment>
                            <comment id="12615292" author="karl.wettin" created="Mon, 21 Jul 2008 17:20:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;That seems like shoe-horning two functions into one, but I see your point that these are both characteristics of the element of the vector.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What about something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

class Matrix {
  Attributes attributes;
}

class Vector {
  &lt;span class=&quot;code-keyword&quot;&gt;transient&lt;/span&gt; Matrix matrix;
  Attributes attributes;
  Attributes getAttributes() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; attributes != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ? attributes : matrix != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ? matrix.attributes : &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
  }
}

class Attributes {
  Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Attribute&amp;gt; nameIndex;
  List&amp;lt;Attribute&amp;gt; attributes;
  
  void setName(Attribute, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;);
  &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; getName(Attribute);
}  

class Attribute {
  Type type {ordinal, numeric};
  List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; ordinalValues;
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12615560" author="jeastman@windwardsolutions.com" created="Tue, 22 Jul 2008 10:02:13 +0100"  >&lt;p&gt;This thread is beginning to diverge significantly from its original problem statement. While I can understand the trade-offs between binding optional Label maps to every Vector/Matrix instance vs. creating a new wrapper type to add labelled accessing when needed (Wettin 14-Jul) the above proposal seems to combine the worst of both worlds. I&apos;d sure like to understand the problem we are trying to solve before going further. In particular, I do not understand the generality or universal utility of the specific attributes that are being discussed. &lt;/p&gt;

&lt;p&gt;Karl, could you please state the problem you are trying to solve and how closely binding these Attributes to every Vector/Matrix instance helps us to solve it? &lt;/p&gt;</comment>
                            <comment id="12615612" author="tdunning" created="Tue, 22 Jul 2008 14:03:27 +0100"  >&lt;p&gt;Adding attributes to elements of vectors or columns of a matrix is a reasonable thing to do, especially where you need to provide a decoding rule for ordinal values.&lt;/p&gt;

&lt;p&gt;But it really should be a separate JIRA, possibly as a follow-on to this one.&lt;/p&gt;

&lt;p&gt;The topic here is naming rows and columns for access by name and (hopefully) joining during multiplication.&lt;/p&gt;
</comment>
                            <comment id="12615636" author="karl.wettin" created="Tue, 22 Jul 2008 15:57:28 +0100"  >&lt;blockquote&gt;&lt;p&gt;could you please state the problem you are trying to solve &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The way I look at it attribute names (labels), types and meta data is the part of the same thing. I predict the future will contain more meta data in class Attribute and Attributes, but  right now I&apos;m only concerned about attribute names and ordinal value codec. Typically this would be interesting at pre processing time and not when invoking some algorithm on the matrix.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;and how closely binding these Attributes to every Vector/Matrix instance helps us to solve it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I honestly don&apos;t see how my dry code is more closly bound to Vector/Matrix than the Map in the patch?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But it really should be a separate JIRA, possibly as a follow-on to this one.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I really don&apos;t agree. If anything I think we should rename this issue to something like &quot;Attribute meta data&quot;. You see, I&apos;m doing my best here to come up with an alternative to the patch as I don&apos;t like it. It is to static and has no room for more meta data. I mean, it&apos;s just a map! Should we also add a map in the vector for ordinal values, one for  types, et c? I really don&apos;t think that is a good solution. I want meta data be gathered together in some aggregated layer because I think such data belongs together. (I still think it should be completely separated from the Vector and Matrix.)&lt;/p&gt;</comment>
                            <comment id="12615675" author="tdunning" created="Tue, 22 Jul 2008 18:09:03 +0100"  >&lt;p&gt;Karl,&lt;/p&gt;

&lt;p&gt;That makes sense.  Of course, you tend to make sense so that isn&apos;t a surprise.&lt;/p&gt;

&lt;p&gt;To summarize what I think people are after here:&lt;/p&gt;

&lt;p&gt;a) a wrapping structure over Matrix and Vector to allow annotation.&lt;/p&gt;

&lt;p&gt;b) the wrapper for Matrix should provide row and column labels where are just strings.&lt;/p&gt;

&lt;p&gt;c) the wrapper for Vector should allow a single label as well as per element labels (i.e. row and column labels) that may or may not be inherited&lt;br/&gt;
from a matrix if the vector is a row or column view.&lt;/p&gt;

&lt;p&gt;d) attributes should be applicable to rows or column just as labels are.&lt;/p&gt;

&lt;p&gt;e) attributes should be able to specify, at least, the general type of data (continuous, ordinal, categorial) as well as provide some information about the encoding of ordinal and categorial values.&lt;/p&gt;

&lt;p&gt;f) the underlying matrix or vector should not know about labels and attributes&lt;/p&gt;

&lt;p&gt;g) the wrapped structure should admit matrix like operations (such as element-wise operations, aggregates and matrix multiplication) that work label-wise rather than row or column index-wise.&lt;/p&gt;

&lt;p&gt;Is that a fair summary?&lt;/p&gt;

</comment>
                            <comment id="12615869" author="jeastman@windwardsolutions.com" created="Wed, 23 Jul 2008 04:06:41 +0100"  >&lt;p&gt;Whether or not we decide to split this issue or just rename it, the semantics of &quot;associate arbitrary metadata with&quot; are a significant generalization of the original &quot;use labels to access&quot;. As a minimalist, my only concern is that we have real, testable user stories that support such a generalization else we risk premature abstraction complications down the road. In particular, do we have a concrete ML algorithm under development for Mahout that requires this capability or are we just imagining that we might encounter one down the road? If we do have such user stories then it would be instructive to describe them here. I&apos;m not sure that the &quot;use labels to access&quot; feature even passes this test, though I think the bar is lower. Finally, I think a wrapper implementation would be just fine.&lt;/p&gt;</comment>
                            <comment id="12615897" author="tdunning" created="Wed, 23 Jul 2008 08:04:06 +0100"  >
&lt;p&gt;The user story I have in mind is one I encounter at least once a week.&lt;/p&gt;

&lt;p&gt;I have data in a matrix that represents test conditions, clicks and impressions.&lt;/p&gt;

&lt;p&gt;I build a model using some or all of the test conditions including or excluding interactions and some simple functions of the test conditions.  To do this, the modeling software has to convert my data matrix into a so-called design matrix.  Each column that contains categorial data has to be converted to a 1 of n-1 binary encoding, but other values need to be carried along intact.  The columns containing the binary encoding need to be named according to the ordinal values that they represent.&lt;/p&gt;

&lt;p&gt;The result is a set of rows that represent possible coefficient values.  These are, of course, labelled with the design matrix columns.&lt;/p&gt;

&lt;p&gt;Sometimes I will get new data.  It won&apos;t have the result columns and design variables may be shifted around somewhat, but the column labels will be the same.  I need to compute predictions for the new data so I have to create a new design matrix and multiply it by the coefficients.  This has to be done by matching labels.&lt;/p&gt;

&lt;p&gt;This user story requires &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;labels&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;data type (categorial or continuous)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the names of the values of the ordinal types&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;matrix multiply by label instead of just column.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;i.e. all of the capabilities that Karl mentioned and that I included in my list.&lt;/p&gt;</comment>
                            <comment id="12640616" author="jeastman" created="Fri, 17 Oct 2008 19:33:01 +0100"  >&lt;p&gt;I did a test implementation of element labeling based upon Karl&apos;s suggestion and Ted&apos;s use case. It used a lazy instantiation of a label map rather than a wrapper that was similar to my earlier patch. The rub comes when trying to serialize the label map for asFormatString(). Here, the richness of the labeling semantics made serialization/deserialization of its state most awkward. &lt;/p&gt;</comment>
                            <comment id="12719119" author="gsingers" created="Sat, 13 Jun 2009 13:44:48 +0100"  >&lt;p&gt;Jeff, &lt;/p&gt;

&lt;p&gt;Could you bring this up to date with trunk?&lt;/p&gt;</comment>
                            <comment id="12719181" author="jeastman@windwardsolutions.com" created="Sat, 13 Jun 2009 22:13:09 +0100"  >&lt;p&gt;Will do,&lt;br/&gt;
Jeff&lt;/p&gt;

</comment>
                            <comment id="12719648" author="jeastman" created="Mon, 15 Jun 2009 18:02:59 +0100"  >&lt;p&gt;Here&apos;s a patch that re-implements the previous simple scheme for supporting Vector accessing via a user-settable Map of index bindings. In this patch, the map itself is not serialized with the vector. In preparation for changing the serialization to use Json I moved the JsonVectorAdapter from Dirichlet (where it was not actually used).&lt;/p&gt;

&lt;p&gt;This implementation could be generalized by making the map hold a richer record containing other properties of the index.&lt;/p&gt;
</comment>
                            <comment id="12719649" author="jeastman" created="Mon, 15 Jun 2009 18:03:39 +0100"  >&lt;p&gt;Here&apos;s the patch.&lt;/p&gt;</comment>
                            <comment id="12719771" author="jeastman" created="Mon, 15 Jun 2009 22:00:37 +0100"  >&lt;p&gt;This patch goes a step further than 65b and changes Vector and Matrix serializations to use Gson. Most of the clustering packages are impacted as they had dependencies upon the encoded format, but the rest of Mahout seems to be unaffected.&lt;/p&gt;

&lt;p&gt;mvn install succeeds.&lt;/p&gt;</comment>
                            <comment id="12719863" author="jeastman" created="Tue, 16 Jun 2009 00:59:07 +0100"  >&lt;p&gt;Here&apos;s an issue that needs some further discussion:&lt;/p&gt;

&lt;p&gt;For text analysis, we are seeing sparse term vectors with about 50k term cardinality, and only about 1k term size. If such a sparse vector is serialized with Gson, each instance will currently (in 65c anyway) include the 50k element bindings map that names each of the vector indices. This is not, IMHO, the kind of semantics we want. Nor do I think we want the input vectors to contain this redundant overhead.&lt;/p&gt;

&lt;p&gt;I would propose to make the bindings map be transient, so that Gson will not output the binding maps when it serializes Vectors. Since the map is sharable - the API allows it to be set in one method, presumably processors of such term vectors would be ok with managing a shared instance independently from the vector points themselves. I also can imagine allowing a binding map to be named as an optional argument to e.g. Canopy clustering which, if supplied, would then be associated with each input point by the code as it is read in. But, Canopy does not need the map and its values would not be output either. So why bother?&lt;/p&gt;

&lt;p&gt;Associating a binding map - or, in general, any similar meta-information - with each vector instance only makes sense to me if we have a system-wide policy for managing it efficiently. &lt;/p&gt;</comment>
                            <comment id="12719884" author="tdunning" created="Tue, 16 Jun 2009 02:11:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;For text analysis, we are seeing sparse term vectors with about 50k term cardinality, and only about 1k term size. If such a sparse vector is serialized with Gson, each instance will currently (in 65c anyway) include the 50k element bindings map that names each of the vector indices. This is not, IMHO, the kind of semantics we want. Nor do I think we want the input vectors to contain this redundant overhead.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Generally, these vectors are part of a matrix which should have this mapping available at the matrix level rather than at the vector (row) level.  If you do that, the cost of storing the label map is amortized over many rows and it becomes irrelevant.&lt;/p&gt;

&lt;p&gt;The reason that it is very important to store this map at the matrix level is so that matrix multiplications can be made efficient.  If I am multiplying a matrix with column labels by a vector with element labels, I want the iteration to proceed by multiplying elements with the same label.  This can be done by putting a permutation between the two operands or by remapping one or them to use the other&apos;s label map, or by sharing a label map across all elements of interest, or by iteratoring over labels instead of indexes.&lt;/p&gt;

&lt;p&gt;My general preference is to have the code magically notice if the label map is shared (so that iteration over index is safe) and to iterate over labels if not.&lt;/p&gt;
</comment>
                            <comment id="12720037" author="gsingers" created="Tue, 16 Jun 2009 11:17:02 +0100"  >&lt;p&gt;Hey Jeff,&lt;/p&gt;

&lt;p&gt;Minor request, it seems like you have some sort of reformatting going on that causes the patch to contain all kinds of formatting changes that make it a lot harder to see the actual changes.  &lt;/p&gt;

&lt;p&gt;In thinking about this a little bit more, is there a way to just name a vector and a row in a Matrix.  All I really want right now is to be able to track which Vector is associated with which document, and I could do this by setting a unique name on the Vector and having that serialized.  The name itself could be stored in the first entry (for SparseVector, it would have to coincide with the sCardinality stuff.&lt;/p&gt;

&lt;p&gt;I&apos;m fine with all the other label stuff, too.&lt;/p&gt;

&lt;p&gt;Also, the patch doesn&apos;t apply because of the JSONVectorAdapter&lt;/p&gt;</comment>
                            <comment id="12720045" author="gsingers" created="Tue, 16 Jun 2009 11:27:05 +0100"  >&lt;p&gt;Is the only way to add bindings by setting the map?  Seems like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
set(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; label, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index, &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;would be useful.  And, that if bindings is null, it would create a new map.&lt;/p&gt;

&lt;p&gt;Also, I&apos;ll see if I can work up the name thing.&lt;/p&gt;</comment>
                            <comment id="12720128" author="jeastman" created="Tue, 16 Jun 2009 14:41:36 +0100"  >&lt;p&gt;I committed &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-65&quot; title=&quot;Add Element Labels to Vectors and Matrices&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-65&quot;&gt;&lt;del&gt;MAHOUT-65&lt;/del&gt;&lt;/a&gt;c and another patch to make bindings transient. Sorry about the formatting, I use the Lucene formatter in Eclipse and reformat as a reflex. I will also add the set(label, index, value) function you requested and will implement labels in Matrix next. In Matrix, I expect the bindings should not be transient, but be amortized as part of the matrix&apos;s state as Ted suggested above.&lt;/p&gt;</comment>
                            <comment id="12720161" author="gsingers" created="Tue, 16 Jun 2009 15:42:37 +0100"  >&lt;p&gt;OK, I will work up a patch for the name thing on a vector, unless you think that can be handled through the bindings thing.  Basically, I think we need a way to name a vector and have it carried through.&lt;/p&gt;</comment>
                            <comment id="12720176" author="jeastman" created="Tue, 16 Jun 2009 16:01:08 +0100"  >&lt;p&gt;Naming a Vector and having that be stateful - as opposed to bindings which are not - sounds useful. It could be used to implement the row and column Matrix label bindings, a SWAG of which is attached. &lt;/p&gt;</comment>
                            <comment id="12720199" author="gsingers" created="Tue, 16 Jun 2009 16:52:20 +0100"  >&lt;p&gt;That works for Matrix.  For Vector, I was thinking, probably naively, we simply need to be able to add a name attribute.  For &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-126&quot; title=&quot;Prepare document vectors from the text&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-126&quot;&gt;&lt;del&gt;MAHOUT-126&lt;/del&gt;&lt;/a&gt;, I just dumped the column/cell labels out separately.  Like you said, I&apos;m not sure we want all of that serialized. &lt;/p&gt;</comment>
                            <comment id="12720216" author="jeastman" created="Tue, 16 Jun 2009 17:18:36 +0100"  >&lt;p&gt;How about we just add a name attribute to AbstractVector and a getter and setter thereof? It would automatically be serialized with the vector state and can be further integrated with the Matrix stuff next. I can commit that now if you want?&lt;/p&gt;</comment>
                            <comment id="12720218" author="gsingers" created="Tue, 16 Jun 2009 17:23:49 +0100"  >&lt;p&gt;Yep, I have a patch for that, will upload shortly, just writing the tests.&lt;/p&gt;</comment>
                            <comment id="12720273" author="gsingers" created="Tue, 16 Jun 2009 19:08:44 +0100"  >&lt;p&gt;Add name attribute.  Also added some docs on equals and added a strict equivalence notion that can be useful if one cares  about the implementation.&lt;/p&gt;
</comment>
                            <comment id="12720302" author="gsingers" created="Tue, 16 Jun 2009 20:20:35 +0100"  >&lt;p&gt;Jeff,&lt;/p&gt;

&lt;p&gt;One comment on the GSON serialization stuff.  It can get pretty verbose storing the class name repeatedly, although I do realize it&apos;s a drop in the bucket compared to the vector itself.  Perhaps we could do like Solr does and, if some abbreviated form is present where a class name is required (maybe &apos;DV&apos; or &apos;SV&apos;) it could know to use those forms, otherwise it can do the full class lookup.  Might just save a little bit on size of a serialized file, which I imagine can add up.&lt;/p&gt;</comment>
                            <comment id="12720312" author="gsingers" created="Tue, 16 Jun 2009 20:33:56 +0100"  >&lt;p&gt;implement hashCode better, require equals and hashcode as part of the interface, same as java.util.List&lt;/p&gt;</comment>
                            <comment id="12720337" author="gsingers" created="Tue, 16 Jun 2009 21:41:18 +0100"  >&lt;p&gt;How about a version where the tests actually pass?  Will commit shortly.&lt;/p&gt;</comment>
                            <comment id="12720345" author="gsingers" created="Tue, 16 Jun 2009 21:56:58 +0100"  >&lt;p&gt;Committed the name stuff: &lt;br/&gt;
Committed revision 785386.&lt;/p&gt;</comment>
                            <comment id="12720671" author="gsingers" created="Wed, 17 Jun 2009 14:41:38 +0100"  >&lt;p&gt;So, with Sean&apos;s patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-121&quot; title=&quot;Speed up distance calculations for sparse vectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-121&quot;&gt;&lt;del&gt;MAHOUT-121&lt;/del&gt;&lt;/a&gt;, it seems the bottleneck is now in deserialization.  In looking at it, it seems like there is a whole lot of String stuff going on.  In particular, line 61: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; vector = obj.get(VECTOR).getAsString();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;seems a bit worrisome.  I haven&apos;t looked into GSON yet, but is there any advice on making it faster?&lt;/p&gt;</comment>
                            <comment id="12720732" author="jeastman" created="Wed, 17 Jun 2009 17:02:23 +0100"  >&lt;p&gt;This particular operation is just extracting the Vector&apos;s serialized String value from the JsonPrimitive. The real heavy lifting is done on line 69:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    return (Vector) gson.fromJson(vector, cl);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For really big vectors I&apos;d expect serialization and deserialization to be String-intensive.&lt;/p&gt;</comment>
                            <comment id="12720752" author="gsingers" created="Wed, 17 Jun 2009 17:44:13 +0100"  >&lt;blockquote&gt;&lt;p&gt;For really big vectors I&apos;d expect serialization and deserialization to be String-intensive.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, it is.  It&apos;s the majority of the work, in fact, in the profiling (85%+ of time spent) I&apos;ve done so far on this.  Not sure if it is premature optimization, but it seems likely that a compact binary format may be a nice option to have for internal pieces of the puzzle.  In other words, the input can still be String based as we have now, but the internal mappers and reducers can use something more compact.  &lt;/p&gt;

&lt;p&gt;I&apos;ve seen this happen a lot with Solr and other XML based apps in that if you control both ends of the pipe, String based approaches, while nice from a readability standpoint, are showstoppers for performance.  Having a converter from binary to String-based can then be employed when readability/debugging is required.&lt;/p&gt;</comment>
                            <comment id="12720768" author="jeastman" created="Wed, 17 Jun 2009 18:20:12 +0100"  >&lt;p&gt;Perhaps, though the Json representation of Sean&apos;s new SparseVector looks pretty dense. Realistic element values would be larger than these test values, of course. A thousand double terms will still add up:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Vec: {&quot;class&quot;:&quot;org.apache.mahout.matrix.SparseVector&quot;,&quot;vector&quot;:&quot;{\&quot;values\&quot;:{\&quot;indices\&quot;:[0,1,2],\&quot;values\&quot;:[1.0,2.0,3.0],\&quot;numMappings\&quot;:3},\&quot;cardinality\&quot;:3}&quot;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12720784" author="tdunning" created="Wed, 17 Jun 2009 18:42:47 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;ve seen this happen a lot with Solr and other XML based apps in that if you control both ends of the pipe, String based approaches, while nice from a readability standpoint, are showstoppers for performance. Having a converter from binary to String-based can then be employed when readability/debugging is required.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The natural binary alternatives would include:&lt;/p&gt;

&lt;p&gt;1) thrift (or not ... could be complicated due to lots of compatibility concerns)&lt;/p&gt;

&lt;p&gt;2) protocol buffers (not really open source)&lt;/p&gt;

&lt;p&gt;3) ad hoc hadoop writable format (but writables may be going away in favor of (4))&lt;/p&gt;

&lt;p&gt;4) avro (but it is really new)&lt;/p&gt;

&lt;p&gt;My tendency would be either (1) or (4).&lt;/p&gt;
</comment>
                            <comment id="12720797" author="srowen" created="Wed, 17 Jun 2009 18:56:51 +0100"  >&lt;p&gt;For strictly internal representations, the default Java serialization mechanism isn&apos;t bad at all. It is a pretty straightforward binary serialization (and can be overridden) and has the advantage of being pretty seamless to use in Java.&lt;/p&gt;

&lt;p&gt;I would have also suggested PBs myself, what is the open-sourceness concern?&lt;/p&gt;

&lt;p&gt;I agree that any string-based representation is going to be a lot slower, I&apos;m almost sure, so this is a worthy inquiry. For external input and output however a more readable format could be desirable indeed.&lt;/p&gt;</comment>
                            <comment id="12720817" author="robertburrelldonkin" created="Wed, 17 Jun 2009 19:32:44 +0100"  >&lt;p&gt;The canopy clustering example has been broken by the changes to the internal representation of Vector. The problem is that Canopy, Cluster and the example OutputMapper all rely on string concatenation. Judging by the code, the string parsing work looks inefficient and has proved fragile. (Personally speaking, I also find it hard to understand the code when the wire format and object designs are quite different.) &lt;/p&gt;

&lt;p&gt;IMHO adopting a binary serialization system which could be used for both Vector and other types would make the code more robust in this area &lt;/p&gt;

&lt;p&gt;I agree with Ted that either thrift or avro would be a good choice &lt;/p&gt;</comment>
                            <comment id="12720838" author="gsingers" created="Wed, 17 Jun 2009 20:18:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;The canopy clustering example has been broken by the changes to the internal representation of Vector. The problem is that Canopy, Cluster and the example OutputMapper all rely on string concatenation. Judging by the code, the string parsing work looks inefficient and has proved fragile. (Personally speaking, I also find it hard to understand the code when the wire format and object designs are quite different.)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds like we need some better tests that prevent this from happening, too.  FWIW,, I like the JSON for external representation, but I admit you guys know more about this than me.&lt;/p&gt;</comment>
                            <comment id="12720850" author="srowen" created="Wed, 17 Jun 2009 20:30:49 +0100"  >&lt;p&gt;I am neutral on JSON, if only because its headline feature is not one we care about, and that is being especially nice to parse in Javascript &amp;#8211; since it represents the data as actual javascript code. (Right?) As such, it happens to be a bit more compact that XML, as these self-describing text formats go. &lt;/p&gt;

&lt;p&gt;Is the goal to take as input, and emit as output, human-readable output? if so, JSON seems OK &amp;#8211; I am left wishing there were a format more readily designed for this purpose. XML is of course an option but it is even more verbose... but standard...&lt;/p&gt;

&lt;p&gt;Custom binary formats seem unfriendly, as does even Java serialized objects (for &lt;b&gt;external&lt;/b&gt; interaction, that is). So we have stuff like PBs and Thrift. I have a bias towards PBs only because I have used them; I imagine it&apos;s about the same as Thrift. You can relatively easily crank out a human readable version of a PB with a tool &amp;#8211; at least, it worked just fine for us at Google in practice.&lt;/p&gt;

&lt;p&gt;Anyway, all that said, not really against JSON. There isn&apos;t an ideal solution I know of, and it&apos;s not obviously worse than alternatives. Kinda depends on our priorities.&lt;/p&gt;</comment>
                            <comment id="12720871" author="jeastman" created="Wed, 17 Jun 2009 21:24:33 +0100"  >&lt;p&gt;I implemented a little test using a TestVector that inherits from AbstractVector and has Sean&apos;s new SparseVector instvars. It also implements Serializable. The results are a bit surprising:&lt;/p&gt;


&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; public void testThree() {
    int[] indexes = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    double[] values = { 1.111, 2.222, 3.333, 4.444, 5.555, 6.666, 7.777, 8.888,
        9.999 };
    Vector obj = new TestVector(indexes, values);

    Type vectorType = new TypeToken&amp;lt;Vector&amp;gt;() {
    }.getType();
    GsonBuilder builder = new GsonBuilder();
    builder.registerTypeAdapter(vectorType, new JsonVectorAdapter());
    Gson gson = builder.create();
    String json = gson.toJson(obj, vectorType);
    System.out.println(&quot;3 &quot; + json.length() + &quot; = &quot; + json);
  }

  public void testFour() throws IOException {
    int[] indexes = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    double[] values = { 1.111, 2.222, 3.333, 4.444, 5.555, 6.666, 7.777, 8.888,
        9.999 };
    TestVector obj = new TestVector(indexes, values);
    OutputStream stm = new ByteArrayOutputStream();
    ObjectOutputStream out = new ObjectOutputStream(stm);
    out.writeObject(obj);
    String json = stm.toString();
    System.out.println(&quot;4 &quot; + json.length() + &quot; = &quot; + json);
  }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It produced the following results:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;3 159 = {&quot;class&quot;:&quot;org.apache.mahout.matrix.TestVector&quot;,&quot;vector&quot;:&quot;{\&quot;indexes\&quot;:[1,2,3,4,5,6,7,8,9],\&quot;values\&quot;:[1.111,2.222,3.333,4.444,5.555,6.666,7.777,8.888,9.999]}&quot;}
4 239 = &amp;lt;a long string of gibberish that the wiki cannot render correctly so I&apos;ve replaced it with this long string of gibberish&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12720881" author="bmargulies" created="Wed, 17 Jun 2009 21:38:04 +0100"  >&lt;p&gt;XML FastInfoSet?&lt;/p&gt;</comment>
                            <comment id="12720883" author="tdunning" created="Wed, 17 Jun 2009 21:44:06 +0100"  >&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; public void testFour() throws IOException {
    int[] indexes = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    double[] values = { 1.111, 2.222, 3.333, 4.444, 5.555, 6.666, 7.777, 8.888,
        9.999 };
    TestVector obj = new TestVector(indexes, values);
    OutputStream stm = new ByteArrayOutputStream();
    ObjectOutputStream out = new ObjectOutputStream(stm);
    out.writeObject(obj);
    String json = stm.toString();
    System.out.println(&quot;4 &quot; + json.length() + &quot; = &quot; + json);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This looks like you are serializing this object to bytes and then converting those bytes to characters and printing them.  The name of the string is json, but I don&apos;t think the contents are anything like that.&lt;/p&gt;

&lt;p&gt;What did you find surprising here?&lt;/p&gt;</comment>
                            <comment id="12720885" author="gsingers" created="Wed, 17 Jun 2009 21:48:16 +0100"  >&lt;p&gt;JSON is fine for In and Out of Mahout, IMO, but for internal use (i.e. between mappers/reducers, etc.) a binary protocol makes more sense.  For now, we can likely live with JSON, but as others have stated, Thrift, PB, Avro, et. al. are really designed for this kind of thing&lt;/p&gt;

&lt;p&gt;At any rate, we probably should take this discussion to a separate thread, as it has nothing to do with the thread subject.&lt;/p&gt;</comment>
                            <comment id="12720886" author="jeastman" created="Wed, 17 Jun 2009 21:51:19 +0100"  >&lt;p&gt;I changed the code to substitute 10 random double values and it tipped the scales in favor of #4, but not by much:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;3 300 = {&quot;class&quot;:&quot;org.apache.mahout.matrix.TestVector&quot;,&quot;vector&quot;:&quot;{\&quot;indexes\&quot;:[1,2,3,4,5,6,7,8,9],\&quot;values &amp;lt;snip&amp;gt;
4 247 = &amp;lt;snip&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I upped the number to 1000 entries to correspond with our text term vectors. Almost a 2:1 advantage but no readability:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;3 23283
4 12131
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12727378" author="arshad" created="Mon, 6 Jul 2009 02:49:30 +0100"  >&lt;p&gt;Hi All&lt;/p&gt;

&lt;p&gt;Looking at the implementation of clone method in SparseVector, it seems that the &quot;name&quot; field is not being copied to the new instance. As a result, for example, when the the &quot;idField&quot; parameter is passed to org.apache.mahout.util.vectors.Driver, the output does not contain any id field. A fix as follows solves the problem:&lt;/p&gt;

&lt;p&gt;Index: core/src/main/java/org/apache/mahout/matrix/SparseVector.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; core/src/main/java/org/apache/mahout/matrix/SparseVector.java	(revision 791354)&lt;br/&gt;
+++ core/src/main/java/org/apache/mahout/matrix/SparseVector.java	(working copy)&lt;br/&gt;
@@ -73,6 +73,7 @@&lt;br/&gt;
   public SparseVector clone() &lt;/p&gt;
{
     SparseVector result = like();
     result.values = (OrderedIntDoubleMapping) values.clone();
+    result.setName(this.name);
     return result;
   }

&lt;p&gt;Not sure if other classes like SparseMatrix also require a similar fix. Comments?&lt;/p&gt;

&lt;p&gt;Regards&lt;br/&gt;
Arshad&lt;/p&gt;</comment>
                            <comment id="12727430" author="srowen" created="Mon, 6 Jul 2009 09:20:09 +0100"  >&lt;p&gt;You are right. I think these two changes kind of collided as they were submitted about the same time. I will review all the existing clone() methods and make fixes.&lt;/p&gt;

&lt;p&gt;NB that the clone() method must be updated when you add fields! think of it as another pseudo-constructor (which is one reason Josh Bloch kind of argues against clone()). May seem bad, but this is just the old copy() method, and it does have its uses.&lt;/p&gt;</comment>
                            <comment id="12727436" author="srowen" created="Mon, 6 Jul 2009 09:46:06 +0100"  >&lt;p&gt;OK yeah, the clone() methods needed some work. It is somewhat tricky to get right &amp;#8211; think I got it here. It takes even a little more work to do it efficiently. Worth taking a look at the patch. I am testing now to double-check before submitting.&lt;/p&gt;

&lt;p&gt;(And while I&apos;m at it... can we place member fields before constructors, and not use &apos;transient&apos; where Java serialization is not involved)&lt;/p&gt;</comment>
                            <comment id="12727440" author="srowen" created="Mon, 6 Jul 2009 09:59:45 +0100"  >&lt;p&gt;OK ready to submit, after I fixed a bone-headed NPE in the patch.&lt;/p&gt;

&lt;p&gt;Some tests in VectorTest fail, but I think they are actually wrong &amp;#8211; and passed before due to this bug. The test creates a labelled Vector, serializes/deserializes, but then expects it to be unbound?&lt;/p&gt;</comment>
                            <comment id="12728466" author="arshad" created="Wed, 8 Jul 2009 02:47:12 +0100"  >&lt;p&gt;The patch seems to work for me. However, I get some strange results when I run KMeans (through KMeansDriver) on the list of points. Previously, when I used k=4, the &quot;points&quot; would contain name of the point and the cluster name (0, 1,  2, 3). After this patch, the point name is there but cluster name is changed to the name of the centroid point id. &lt;/p&gt;</comment>
                            <comment id="12788059" author="srowen" created="Wed, 9 Dec 2009 12:14:45 +0000"  >&lt;p&gt;Am i correct that the original topic of this issue is basically done and resolved? we have labels, and the subsequent discussions here were committed and reflected in code.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12426652">MAHOUT-126</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12412591" name="Clone_changes.patch" size="10852" author="srowen" created="Mon, 6 Jul 2009 09:46:06 +0100"/>
                            <attachment id="12410849" name="MAHOUT-65-name.patch" size="9961" author="gsingers" created="Tue, 16 Jun 2009 21:41:18 +0100"/>
                            <attachment id="12410846" name="MAHOUT-65-name.patch" size="9830" author="gsingers" created="Tue, 16 Jun 2009 20:33:56 +0100"/>
                            <attachment id="12410840" name="MAHOUT-65-name.patch" size="9372" author="gsingers" created="Tue, 16 Jun 2009 19:08:44 +0100"/>
                            <attachment id="12385352" name="MAHOUT-65.patch" size="33686" author="jeastman@windwardsolutions.com" created="Sun, 6 Jul 2008 20:09:47 +0100"/>
                            <attachment id="12410683" name="MAHOUT-65b.patch" size="40830" author="jeastman" created="Mon, 15 Jun 2009 18:03:39 +0100"/>
                            <attachment id="12410711" name="MAHOUT-65c.patch" size="96431" author="jeastman" created="Mon, 15 Jun 2009 22:00:37 +0100"/>
                            <attachment id="12410816" name="MAHOUT-65d.patch" size="3026" author="jeastman" created="Tue, 16 Jun 2009 16:01:08 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 14 Jul 2008 07:57:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10001</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy7f3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23353</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>