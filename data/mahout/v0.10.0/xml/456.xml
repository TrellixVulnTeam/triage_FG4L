<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:18:55 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-456/MAHOUT-456.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-456] RowSimilarityJob should not produce SequentialAccessSparseVectors</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-456</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;RowSimilarityJob currently produces SequentialAccessSparseVectors with cardinality Integer.MAX_VALUE wrapped inside VectorWritables.&lt;/p&gt;

&lt;p&gt;It should better produce RandomAccessSparseVectors as some methods like assign(Vector) are very slow on such SequentialAccessSparseVectors.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12470937">MAHOUT-456</key>
            <summary>RowSimilarityJob should not produce SequentialAccessSparseVectors</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ssc">Sebastian Schelter</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Aug 2010 21:50:59 +0100</created>
                <updated>Sun, 31 Oct 2010 15:50:02 +0000</updated>
                            <resolved>Tue, 10 Aug 2010 18:24:23 +0100</resolved>
                                                    <fixVersion>0.4</fixVersion>
                                    <component>Math</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12895840" author="ssc" created="Thu, 5 Aug 2010 23:12:53 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Would it not be better to fix that inner loop of AbstractVector.assign(), to&lt;br/&gt;
zero out&lt;br/&gt;
the current values, followed by using iterateNonZero() on the argument?&lt;/p&gt;

&lt;p&gt;  -jake&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Added an optimized assign(Vector) method to SequentialAccessSparseVector instead of changing the output of the RowSimilarityJob.&lt;/p&gt;</comment>
                            <comment id="12895878" author="jake.mannix" created="Fri, 6 Aug 2010 00:41:21 +0100"  >&lt;p&gt;Slightly modified version of Sebastian&apos;s most recent patch: if SequentialAccessSparseVector is passed in as an argument, just clone() it&apos;s internal values data structure, as this will be way faster in this case.&lt;/p&gt;</comment>
                            <comment id="12895881" author="jake.mannix" created="Fri, 6 Aug 2010 00:48:21 +0100"  >&lt;p&gt;Oops.  DenseVector.isSequentialAccess() returns true.  Have to do explicit instanceof check here.&lt;/p&gt;</comment>
                            <comment id="12895884" author="jake.mannix" created="Fri, 6 Aug 2010 01:07:48 +0100"  >&lt;p&gt;Current patch passes all tests (in less than infinite time, no less!).  &lt;/p&gt;

&lt;p&gt;I&apos;ll commit unless there are objections.  It&apos;s a pretty straightforward fix at this point.&lt;/p&gt;</comment>
                            <comment id="12895890" author="tdunning" created="Fri, 6 Aug 2010 01:24:42 +0100"  >&lt;p&gt;I haven&apos;t measured the effect, but I have seen rumblings about clone eating more time than does allocation and copying.  These rumblings make me leery of using clone in any code where I care about speed.&lt;/p&gt;

&lt;p&gt;Does anybody have anything more than vague suspicions on this point?&lt;/p&gt;

&lt;p&gt;See here for instance for some old back and forth on this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6195753&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6195753&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12895891" author="jake.mannix" created="Fri, 6 Aug 2010 01:37:06 +0100"  >&lt;p&gt;In this case, the code without the clone is certainly slower, because it requires many inserts into the OrderedIntDoubleMapping (O&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; inserts).  &lt;/p&gt;

&lt;p&gt;If clone is in fact slow, then the right thing, I guess, is to add a copy constructor to OrderedIntDoubleMapping, which just allocates the inner int[] and double[] arrays and System.arraycopy()&apos;s them over.&lt;/p&gt;

&lt;p&gt;We do rely on clone() in a variety of places, where is it primarily thought to be most slow?&lt;/p&gt;

&lt;p&gt;Looking more closely at that thread, wasn&apos;t the final conclusion this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Posted Date : 2006-09-22 18:58:41.0&lt;/p&gt;

&lt;p&gt;Now that &lt;br/&gt;
6428387: array clone() much slower than Arrays.copyOf&lt;br/&gt;
has been fixed, all methods of copying arrays are equally performant,&lt;br/&gt;
so there is no reason to uglify the code for performance.&lt;br/&gt;
Closing as Not a Defect.&lt;br/&gt;
Posted Date : 2007-06-03 08:30:25.0&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="12895933" author="hudson" created="Fri, 6 Aug 2010 04:03:36 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #173 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Mahout-Quality/173/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Mahout-Quality/173/&lt;/a&gt;)&lt;br/&gt;
    Fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-456&quot; title=&quot;RowSimilarityJob should not produce SequentialAccessSparseVectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-456&quot;&gt;&lt;del&gt;MAHOUT-456&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12896970" author="srowen" created="Tue, 10 Aug 2010 18:24:23 +0100"  >&lt;p&gt;Looks like this was resolved right&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12451381" name="MAHOUT-456-2.patch" size="1297" author="ssc" created="Thu, 5 Aug 2010 23:10:48 +0100"/>
                            <attachment id="12451396" name="MAHOUT-456.patch" size="1457" author="jake.mannix" created="Fri, 6 Aug 2010 00:48:21 +0100"/>
                            <attachment id="12451393" name="MAHOUT-456.patch" size="1438" author="jake.mannix" created="Fri, 6 Aug 2010 00:41:21 +0100"/>
                            <attachment id="12451369" name="MAHOUT-456.patch" size="2698" author="ssc" created="Thu, 5 Aug 2010 21:53:25 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 Aug 2010 23:41:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9607</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy507:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22962</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>