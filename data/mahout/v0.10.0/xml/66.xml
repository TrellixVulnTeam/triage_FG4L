<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:23:19 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-66/MAHOUT-66.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-66] EuclideanDistanceMeasure and ManhattanDistanceMeasure classes are not optimized for Sparse Vectors</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-66</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description></description>
                <environment></environment>
        <key id="12399704">MAHOUT-66</key>
            <summary>EuclideanDistanceMeasure and ManhattanDistanceMeasure classes are not optimized for Sparse Vectors</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="pallavipalleti">Pallavi Palleti</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Jul 2008 10:10:36 +0100</created>
                <updated>Sat, 21 May 2011 04:23:50 +0100</updated>
                            <resolved>Wed, 9 Dec 2009 12:25:24 +0000</resolved>
                                                    <fixVersion>0.2</fixVersion>
                                    <component>Clustering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12611120" author="pallavipalleti" created="Mon, 7 Jul 2008 12:29:53 +0100"  >&lt;p&gt;I added a condition to the actual distance method such that if the vectors are sparse, a different distance method gets called which is specific for SparseVector.&lt;/p&gt;</comment>
                            <comment id="12611121" author="pallavipalleti" created="Mon, 7 Jul 2008 12:31:32 +0100"  >&lt;p&gt;Please do code review on the existing patch.&lt;/p&gt;</comment>
                            <comment id="12611330" author="isabel" created="Mon, 7 Jul 2008 21:33:02 +0100"  >&lt;p&gt;I think it would be a better idea to refactor the entire distance implementations to reuse the existing functionality inside the vector classes for this kind of operation. If I am not completely mistaken, for the euclidean distance metric, it should be possible to say something like:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;br/&gt;
double difference = v2.minus(v1);&lt;br/&gt;
double result = difference.length();&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Btw: Is there a reason, we still have the Float[] versions? I think, it should be possible to remove them, as there should be no code left, depending on them. Having not released any code yet, I guess backwards compatibility should be no issue as well.&lt;/p&gt;</comment>
                            <comment id="12611489" author="pallavipalleti" created="Tue, 8 Jul 2008 10:27:50 +0100"  >&lt;p&gt;I have refactored the code as per Isabel instructions. And overridden minus method in SparseVector and have only one distance(Vector v1, Vector v2) method in both EuclideanDistanceMeasure and ManhattanDistanceMeasure.&lt;br/&gt;
Please review the code.&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Pallavi&lt;/p&gt;</comment>
                            <comment id="12611716" author="isabel" created="Tue, 8 Jul 2008 18:50:14 +0100"  >&lt;p&gt;Looks good to me. I only have one last minor comment left: The vector interface currently supports the method dot() - would it make sense to factor the loop for multiplication out of euclidean distance and use the simple dot product instead? Should do the same and be a little easier to read, I&apos;d say.&lt;/p&gt;

&lt;p&gt;As for the manhattan distance, I see nothing else to improve.&lt;/p&gt;

&lt;p&gt;Isabel&lt;/p&gt;</comment>
                            <comment id="12611742" author="karl.wettin" created="Tue, 8 Jul 2008 19:38:51 +0100"  >&lt;p&gt;What is it that actually does not work when using SparseVector? I just added this to the trunk test and it passes for all distance measure classes:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Index: core/src/test/java/org/apache/mahout/utils/DefaultDistanceMeasureTest.java
===================================================================
--- core/src/test/java/org/apache/mahout/utils/DefaultDistanceMeasureTest.java	(revision 674908)
+++ core/src/test/java/org/apache/mahout/utils/DefaultDistanceMeasureTest.java	(working copy)
@@ -20,6 +20,7 @@
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; junit.framework.TestCase;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.mahout.matrix.DenseVector;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.mahout.matrix.Vector;
+&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.mahout.matrix.SparseVector;
 
 
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class DefaultDistanceMeasureTest &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; TestCase {
@@ -59,4 +60,51 @@
 
   }
 
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testMeasureSparse() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
+
+    DistanceMeasure distanceMeasure = distanceMeasureFactory();
+
+    Vector[] vectors = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Vector[]{
+        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SparseVector(6),
+        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SparseVector(6),
+        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SparseVector(6)
+    };
+
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;6; i++) {
+      vectors[0].set(i, 1);
+    }
+
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;6; i++) {
+      vectors[1].set(i, 2);
+    }
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;6; i++) {
+      vectors[2].set(i, 6);
+    }
+
+
+
+
+    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[][] distanceMatrix = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[3][3];
+
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; a = 0; a &amp;lt; 3; a++) {
+      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; b = 0; b &amp;lt; 3; b++) {
+        distanceMatrix[a][b] = distanceMeasure.distance(vectors[a], vectors[b]);
+      }
+    }
+
+    assertEquals(0d, distanceMatrix[0][0]);
+    assertTrue(distanceMatrix[0][0] &amp;lt; distanceMatrix[0][1]);
+    assertTrue(distanceMatrix[0][1] &amp;lt; distanceMatrix[0][2]);
+
+    assertEquals(0d, distanceMatrix[1][1]);
+    assertTrue(distanceMatrix[1][0] &amp;gt; distanceMatrix[1][1]);
+    assertTrue(distanceMatrix[1][2] &amp;gt; distanceMatrix[1][0]);
+
+    assertEquals(0d, distanceMatrix[2][2]);
+    assertTrue(distanceMatrix[2][0] &amp;gt; distanceMatrix[2][1]);
+    assertTrue(distanceMatrix[2][1] &amp;gt; distanceMatrix[2][2]);
+
+
+  }
+
 }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12611762" author="isabel" created="Tue, 8 Jul 2008 20:26:07 +0100"  >&lt;p&gt;It does work in that the correct result is returned. But the distance computation does not exploit the sparseness of the SparseVector.&lt;/p&gt;

&lt;p&gt;Suppose you want to compute the distance of two vectors, both of high dimensionality but with the majority of entries equal to zero. The current implementation would still iterate the complete vectors and add up/ multiply a lot of zeros.&lt;/p&gt;

&lt;p&gt;Using the Vector-interface methods plus, minus etc. should hide such details from the implementation of DistanceMeasure.&lt;/p&gt;</comment>
                            <comment id="12611769" author="karl.wettin" created="Tue, 8 Jul 2008 20:44:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;It does work in that the correct result is returned. But the distance computation does not exploit the sparseness of the SparseVector.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Aha! Proceed with your business &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I saw a bunch of instanceof-clauses in the patch. I suspect that there will be more Vector implementations in the future. How about gathering the per class strategies in a VectorVisitor instead. It could, if nothing else, save a few CPU cycles. Perhaps it&apos;s all overkill.&lt;/p&gt;</comment>
                            <comment id="12611770" author="isabel" created="Tue, 8 Jul 2008 20:55:07 +0100"  >&lt;p&gt;&amp;gt; I saw a bunch of instanceof-clauses in the patch.&lt;/p&gt;

&lt;p&gt;In the original 7kb version or in the new 5kb version?&lt;/p&gt;


&lt;p&gt;&amp;gt; I suspect that there will be more Vector implementations in the future.&lt;/p&gt;

&lt;p&gt;Probably. Yes.&lt;/p&gt;


&lt;p&gt;&amp;gt; How about gathering the per class strategies in a VectorVisitor instead. It could, if nothing else,&lt;br/&gt;
&amp;gt; save a few CPU cycles. Perhaps it&apos;s all overkill.&lt;/p&gt;

&lt;p&gt;I think to some extend it should already be sufficient to use the methods that vectors themselves provide  for addition, multiplication...  After all, those distance measures are mathematically defined in terms of vector operations. So it should be possible to implement them in terms of vector method calls. At least IMHO.&lt;/p&gt;</comment>
                            <comment id="12611912" author="pallavipalleti" created="Wed, 9 Jul 2008 07:41:40 +0100"  >&lt;p&gt;used dot method while computing euclidean distance. and used Java5 style notation while iterating thru vectors.&lt;br/&gt;
Please review the code so that I can submit the patch.&lt;/p&gt;</comment>
                            <comment id="12612230" author="isabel" created="Wed, 9 Jul 2008 19:40:19 +0100"  >&lt;p&gt;If possible, could you please also add a unit test that shows, that the current implementation is broken but your version works?&lt;/p&gt;</comment>
                            <comment id="12620206" author="pallavipalleti" created="Wed, 6 Aug 2008 11:40:55 +0100"  >&lt;p&gt;I agree it as an improvement rather a bug.&lt;/p&gt;</comment>
                            <comment id="12620208" author="pallavipalleti" created="Wed, 6 Aug 2008 11:41:43 +0100"  >&lt;p&gt;As this is not a bug but an improvement, existing unit tests hold here. I have added unit tests for Manhattan and Euclidean distance measures.Please review the code.&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Pallavi&lt;/p&gt;</comment>
                            <comment id="12709184" author="jeastman" created="Wed, 13 May 2009 23:36:39 +0100"  >&lt;p&gt;r 774566 implemented the SparseVector times optimizations and an associated unit test that demonstrates a 5-10ms improvement when used with 50,000 cardinality, 1000 random element vectors typical of text clustering applications. &lt;/p&gt;

&lt;p&gt;Upon inspection of Manhattan and EculideanDistanceMeasure implementations, I think that replacing a single loop over all elements with - even optimized - vector operations which each do their own iterations will not offer performance improvements even in the above situations.&lt;/p&gt;

&lt;p&gt;I&apos;m still open to a test which demonstrates I&apos;m wrong. The proposed optimizations are certainly cleaner looking.&lt;/p&gt;</comment>
                            <comment id="12709260" author="pallavipalleti" created="Thu, 14 May 2009 04:55:19 +0100"  >&lt;p&gt;Can you please elaborate on this a little bit as I couldn&apos;t get it. Essentially, what I did was modified these distance measure classes to use vector operations there by reusing code and depending on the vector type we are using, the respective class methods get called and there by taking care of optimizations at the vector class level.&lt;/p&gt;</comment>
                            <comment id="12709265" author="jeastman" created="Thu, 14 May 2009 06:07:49 +0100"  >&lt;p&gt;Sure. Let&apos;s consider them individually:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;EuclideanDistanceMeasure: A single loop over all elements&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;   double result = 0;
   for (int i = 0; i &amp;lt; v1.cardinality(); i++) {
     double delta = v2.getQuick(i) - v1.getQuick(i);
     result += delta * delta;
   }
   return Math.sqrt(result);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... gets replaced by &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    Vector resultV = v1.minus(v2);
    double result = resultV.dot(resultV);
     return Math.sqrt(result);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since minus will iterate over both vectors, and dot will then do the same, it seems we have to iterate twice. If minus and dot can be optimized in SparseVector, then some of this could be mitigated. Not clear what the improvement would be without that. (I&apos;ve not yet committed minus)&lt;/p&gt;

&lt;p&gt;Consider then ManhattanDistanceMeasure&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    double result = 0;
    for (int i = 0; i &amp;lt; v1.cardinality(); i++)
      result += Math.abs(v2.getQuick(i) - v1.getQuick(i));
    return result;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... is replaced by:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    double result = 0;
    Vector resultV = v1.minus(v2);
    for(Vector.Element element: resultV) {  
      double value = element.get();
      result += Math.abs(value);
    }
    return result;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, two iterations. The minus() implementation in the patch uses plus() and times(), both of which will iterate (though times has been optimized).&lt;/p&gt;

&lt;p&gt;It seems to me for either of these distance measure changes to make sense we need to also optimize plus, minus and dot. Putting the changes into the measures will also cause the DenseVector computations to loop twice rather than just once. Not a clear case to me, not yet anyway though I&apos;m willing to investigate further.&lt;/p&gt;

&lt;p&gt;It seems to me that the next step would be to justify the SparseVector optimizations of plus, minus and dot in the manner I have done for times. With an optimize boolean in both measures we could then make an objective case.&lt;/p&gt;</comment>
                            <comment id="12713660" author="gsingers" created="Wed, 27 May 2009 18:57:45 +0100"  >&lt;p&gt;Can this be closed?&lt;/p&gt;</comment>
                            <comment id="12788062" author="srowen" created="Wed, 9 Dec 2009 12:25:24 +0000"  >&lt;p&gt;Yes, the optimizations this patch makes to distance() and times(), for example, were superseded by other changes.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12387627" name="MAHOUT-66.patch" size="5959" author="pallavipalleti" created="Wed, 6 Aug 2008 11:41:43 +0100"/>
                            <attachment id="12385578" name="MAHOUT-66.patch" size="3848" author="pallavipalleti" created="Wed, 9 Jul 2008 07:41:39 +0100"/>
                            <attachment id="12385472" name="MAHOUT-66.patch" size="4716" author="pallavipalleti" created="Tue, 8 Jul 2008 10:27:50 +0100"/>
                            <attachment id="12385388" name="MAHOUT-66.patch" size="6791" author="pallavipalleti" created="Mon, 7 Jul 2008 12:29:53 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 7 Jul 2008 20:33:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10000</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy7ev:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23352</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>