<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:23:15 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-925/MAHOUT-925.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-925] Evaluate the reach of recommender algorithms</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-925</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;The evaluation of a CF algorithm should include reach, the proportion of users for whom a recommendation could be made.  An algorithm usually has a cutoff value on the confidence of the recommender, and if it is not high enough, no recommendation is made.  The number of requested recommendations, or this parameter could be varied as part of the evaluation.  The proposed patch adds this.&lt;/p&gt;

&lt;p&gt;My build with this patch breaks testMapper(org.apache.mahout.classifier.df.mapreduce.partial.Step1MapperTest): org.apache.mahout.classifier.df.node.Leaf.&amp;lt;init&amp;gt;(I)V .  The test seems unrelated to the patch, so I am assuming this is broken in the trunk head as well.  Unfortunately I am under a deadline, and I do not have time to write tests for the patch.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12534801">MAHOUT-925</key>
            <summary>Evaluate the reach of recommender algorithms</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="akats">Anatoliy Kats</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 Dec 2011 15:26:55 +0000</created>
                <updated>Thu, 9 Feb 2012 14:01:03 +0000</updated>
                            <resolved>Tue, 13 Dec 2011 21:09:21 +0000</resolved>
                                    <version>0.5</version>
                                    <fixVersion>0.6</fixVersion>
                                    <component>Collaborative Filtering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                    <timeoriginalestimate seconds="3600">1h</timeoriginalestimate>
                            <timeestimate seconds="3600">1h</timeestimate>
                                        <comments>
                            <comment id="13167573" author="srowen" created="Mon, 12 Dec 2011 16:15:30 +0000"  >&lt;p&gt;This is fine, though, don&apos;t you want to count like so?&lt;/p&gt;

&lt;p&gt;    if (numRecommendedItems &amp;gt; 0) &lt;/p&gt;
{
      reach++;
    }

&lt;p&gt;Otherwise it seems like you&apos;re just counting all users, except the ones that the &lt;b&gt;test framework&lt;/b&gt; couldn&apos;t test due to sampling size, which is something else and something you want to ignore in general. (So actually I think I&apos;d count both reach and the number of users that the test framework succeeded for). Is that about right for you?&lt;/p&gt;</comment>
                            <comment id="13168204" author="akats" created="Tue, 13 Dec 2011 08:06:01 +0000"  >&lt;p&gt;That&apos;s a good point, we should be careful about how we analyze undersampled data.  The purpose of measuring reach is to predict what percentage of the audience in a production system will get a required number of recommendations.  Actually I think the easiest way to do this is to loop over the users, and try to generate recommendation on the model that does not exclude any preferences.&lt;/p&gt;

&lt;p&gt;Also, in the spirit of creating conditions maximally similar to a production environment, it seems unfair to exclude users because the evaluator judges there are not enough preferences remaining (lines 116-118 in the patched code).  The recommender should decide for itself whether or not to generate anything.  Only if it refuses to generate the required number of recommendations do we exclude the user from the IR statistics.  This kind of a change would always make precision and recall equal.  They often are in practice.  What was the original motivation for including both statistics?&lt;/p&gt;</comment>
                            <comment id="13168231" author="akats" created="Tue, 13 Dec 2011 08:38:08 +0000"  >&lt;p&gt;Actually I see the difference between precision and recall still remains, but not in boolean case.&lt;/p&gt;</comment>
                            <comment id="13168299" author="srowen" created="Tue, 13 Dec 2011 10:56:09 +0000"  >&lt;p&gt;Yes you could create a different kind of test that doesn&apos;t hold out any data to find this reach figure. I don&apos;t think it&apos;s worth a whole different test class just for this. The entire test framework is only valid insofar as you run it on enough data, with enough to train, that the result reflects how the full system works. So I think it&apos;s as valid as anything else to run on the training data only.&lt;/p&gt;

&lt;p&gt;Regarding the &quot;2@&quot; prefs heuristic: it&apos;s not really a question of the recommender deciding &lt;b&gt;not&lt;/b&gt; to recommend. It&apos;s that it will &lt;b&gt;always&lt;/b&gt; recommend as much as possible, up to what you ask for. But if the test is based on so little data to begin with, the result is not very meaningful. If I am figuring precision@5 and the user has only 4 prefs, what can I do? I can&apos;t even call all 4 &quot;relevant&quot; items since it would leave no training data. Even if I did, there would be no way to achieve 100% precision as there are only 4 relevant items. I (arbitrarily) picked 2@ as the minimum &amp;#8211; 10 here if @=5 &amp;#8211; since you can select 5 of the 10 in this case as relevant, and have as many available for training.&lt;/p&gt;

&lt;p&gt;You would not want to drop a user&apos;s result just because it recommended 3 items in a test @5. That&apos;s a perfectly valid result (given the condition in the preceding paragraph) to include. You can still decide how many of those 3 are relevant, and how many of the relevant items are in those 3.&lt;/p&gt;

&lt;p&gt;Precision and recall are not the same in general. If the number of items deemed relevant is equal to &quot;@&quot;, then precision will equal recall, yes. And that is usually true for data with ratings, the way this class works. It will just choose some &quot;@&quot; of the items, as there is no basis to call one more relevant than the other. Choosing that many is also somewhat arbitrary; it can&apos;t be 0, and can&apos;t be all items (or there would no training data from the user under test), so that looked like a nice round number.&lt;/p&gt;</comment>
                            <comment id="13168333" author="akats" created="Tue, 13 Dec 2011 12:39:44 +0000"  >&lt;p&gt;We agree that there needs to be enough training data for a recommender to output something, but you believe the cutoff should happen in the evaluator, whereas I think the recommender should figure this out by itself, via some sort of a threshold on the expected rating.  For now, the distinction is mostly theoretical to, so let&apos;s use what we already have.  I&apos;ll change the reach calculation as you suggest.&lt;/p&gt;</comment>
                            <comment id="13168389" author="tdunning" created="Tue, 13 Dec 2011 13:58:21 +0000"  >&lt;p&gt;Reach is a nice statistic to have, but I think it can be had more simply than this.&lt;/p&gt;

&lt;p&gt;In my experience, quality of recommendations depends very strongly on the number of items in the history.  Where the history is too small, recommendations will typically be pretty poor and above a threshold, they will be as good as they are going to be.  For music, that threshold was 5-10 items, for video it was comparable.&lt;/p&gt;

&lt;p&gt;IF this is true, then the reach computation can be broken into two parts:&lt;/p&gt;

&lt;p&gt;a) what is the threshold?&lt;/p&gt;

&lt;p&gt;b) how many people reach the threshold?&lt;/p&gt;

&lt;p&gt;The first question is answerable by the standard precision recall measurement methods except that the resulting data need to be averaged with an awareness of the history size so that the threshold can be detected.&lt;/p&gt;

&lt;p&gt;The second question is simple arithmetic and doesn&apos;t need a framework.&lt;/p&gt;</comment>
                            <comment id="13168412" author="srowen" created="Tue, 13 Dec 2011 14:42:52 +0000"  >&lt;p&gt;@Anatoliy how would the recommender decide a relevance threshold? That is a priori knowledge not something the recommender can know. This seems orthogonal to the other issues here. If you&apos;re OK with the computation as described I&apos;ll commit and of course can iterate on it later.&lt;/p&gt;

&lt;p&gt;@Ted that&apos;s probably true, though all the same I&apos;m happy to add 3 lines of code and 1 more field to the result to compute &apos;reach&apos; as Anatoliy describes here. It&apos;s very little additional code or complexity.&lt;/p&gt;</comment>
                            <comment id="13168720" author="srowen" created="Tue, 13 Dec 2011 21:09:21 +0000"  >&lt;p&gt;Committed a variation on the patch which closes the immediate issue; we could talk about it further though.&lt;/p&gt;</comment>
                            <comment id="13168927" author="hudson" created="Wed, 14 Dec 2011 00:42:57 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #1252 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1252/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1252/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-925&quot; title=&quot;Evaluate the reach of recommender algorithms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-925&quot;&gt;&lt;del&gt;MAHOUT-925&lt;/del&gt;&lt;/a&gt; Add basic idea of &apos;reach&apos;&lt;/p&gt;

&lt;p&gt;srowen : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1213930&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1213930&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/eval/IRStatistics.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/IRStatisticsImpl.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12507177" name="MAHOUT-925.patch" size="3619" author="akats" created="Tue, 13 Dec 2011 12:58:54 +0000"/>
                            <attachment id="12507010" name="MAHOUT-925.patch" size="3259" author="akats" created="Mon, 12 Dec 2011 15:38:50 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 12 Dec 2011 16:15:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>220485</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy24n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22496</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>