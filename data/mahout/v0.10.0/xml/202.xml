<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:21:12 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-202/MAHOUT-202.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-202] Make Taste support HBase as data store</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-202</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;I&apos;d like to add hbase as another data store option for taste.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12441024">MAHOUT-202</key>
            <summary>Make Taste support HBase as data store</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="zjffdu">Jeff Zhang</reporter>
                        <labels>
                    </labels>
                <created>Wed, 18 Nov 2009 07:44:32 +0000</created>
                <updated>Wed, 3 Oct 2012 23:54:11 +0100</updated>
                            <resolved>Tue, 22 Dec 2009 13:21:23 +0000</resolved>
                                    <version>0.3</version>
                                                    <component>Collaborative Filtering</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="12779407" author="srowen" created="Wed, 18 Nov 2009 11:00:30 +0000"  >&lt;p&gt;I think it make sense to support this, so would accept a patch here. However I am concerned that performance will be so slow as to make it difficult to use. If a data set is too big to fit into memory, one can already put it in a relational database. But even when that database is sitting on the same machine, optimized and so on, it&apos;s orders of magnitude slower. Moving to a remote data store gets even worse.&lt;/p&gt;

&lt;p&gt;At that scale I suppose I&apos;d advise someone to give up real-time recommendations and go with some natively Hadoop-ified algorithm. DataModel supports, really, real-time implementations.&lt;/p&gt;

&lt;p&gt;Anyway that&apos;s why it&apos;s not on my to-do list but would accept a patch.&lt;/p&gt;</comment>
                            <comment id="12793613" author="srowen" created="Tue, 22 Dec 2009 13:19:09 +0000"  >&lt;p&gt;I&apos;m going to shelve this as nobody is stepping up to implement it, and I have concerns about whether this would perform at all. (It&apos;s always possible to copy data from HBase locally and run that way.)&lt;/p&gt;</comment>
                            <comment id="13467701" author="mumrah" created="Tue, 2 Oct 2012 14:16:46 +0100"  >&lt;p&gt;Initial support for HBase DataModel. This patch was generated against trunk checked out from github&lt;/p&gt;</comment>
                            <comment id="13468309" author="otis" created="Wed, 3 Oct 2012 04:35:02 +0100"  >&lt;p&gt;Should this issue be reopened now?  I like the idea of HBase DataModel.&lt;/p&gt;</comment>
                            <comment id="13468399" author="srowen" created="Wed, 3 Oct 2012 08:51:19 +0100"  >&lt;p&gt;(It can&apos;t be reopened as it&apos;s closed, but, a new JIRA can be made.)&lt;/p&gt;

&lt;p&gt;My concern here is that this could be very slow at scale. A local relational DB is too slow when you get into, say, 100K data points or more. Local HBase may not be much different. What kinds of performance did you see?&lt;/p&gt;

&lt;p&gt;The counterpart implementations actually load into memory.&lt;/p&gt;</comment>
                            <comment id="13468517" author="mumrah" created="Wed, 3 Oct 2012 13:19:01 +0100"  >&lt;p&gt;I just put together a quick test of ~1M ratings for 10k items and 1000 users &lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Insert standard disclaimer about local benchmarks&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
12/10/03 08:00:00 INFO hbase.HBaseDataModel: Finished refreshing caches in 2845 ms
12/10/03 08:00:00 INFO hbase.TestHBaseDataModel: Iterate through all users
12/10/03 08:00:02 INFO hbase.TestHBaseDataModel: Iterated through all users in: 1669 ms
12/10/03 08:00:02 INFO hbase.TestHBaseDataModel: Counted 1000799 ratings
12/10/03 08:00:02 INFO hbase.TestHBaseDataModel: Total number of users: 1000
12/10/03 08:00:02 INFO hbase.TestHBaseDataModel: Iterate through all items
12/10/03 08:00:06 INFO hbase.TestHBaseDataModel: Iterated through all items in: 3790 ms
12/10/03 08:00:06 INFO hbase.TestHBaseDataModel: Counted 1000799 ratings
12/10/03 08:00:06 INFO hbase.TestHBaseDataModel: Total number of items: 10000
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The results are pretty consistent between runs. I am running HBase 0.94.1 and Hadoop 1.0.2 in pseudo-distributed mode on a 2011 MBP (i7) with 16Gb of memory.&lt;/p&gt;

&lt;p&gt;1669&#181;s to get one user&apos;s prefs and 379&#181;s for one item - seems fast enough to me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Of course, in a real distributed setup, you will incur (non-trivial) network costs.&lt;/p&gt;

&lt;p&gt;The cache refresh does a full table scan to discover every user and item id and stores them in FastIDSets. This is the only thing that seems reasonable to cache, imo. If you&apos;re caching the preferences, why bother with a distributed database like HBase? An LRU cache might make sense, but (afaik) if you&apos;re hitting the same user/item repeatedly then you should get see some caching from HBase or HDFS (through disk cache) anyways.&lt;/p&gt;

&lt;p&gt;Here&apos;s a picture of HDFS where this table lives to get an idea of storage size:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
drwxr-xr-x   - mumrah supergroup          0 2012-10-03 07:45 /hbase/taste/49a6dbaa1fef6274435c9b9551fb348a/items
-rw-r--r--   3 mumrah supergroup   47110005 2012-10-03 07:45 /hbase/taste/49a6dbaa1fef6274435c9b9551fb348a/items/cdfd7942a3d34472a8622425531dd4d1
drwxr-xr-x   - mumrah supergroup          0 2012-10-03 07:45 /hbase/taste/49a6dbaa1fef6274435c9b9551fb348a/users
-rw-r--r--   3 mumrah supergroup   47110005 2012-10-03 07:45 /hbase/taste/49a6dbaa1fef6274435c9b9551fb348a/users/85fadbcf3eb74dfd9b530d86cca5ed64
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So each column family takes up about 45MB to store 1M ratings, and each rating takes up only 47 bytes&lt;/p&gt;</comment>
                            <comment id="13468519" author="mumrah" created="Wed, 3 Oct 2012 13:21:11 +0100"  >&lt;p&gt;For full disclosure, here&apos;s the script I used to generate the above benchmark:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; t1, t2;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; total;
    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Iterate through all users&quot;&lt;/span&gt;);
    LongPrimitiveIterator userIDs = model.getUserIDs();
    total = 0;
    t1 = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(userIDs.hasNext()) {
      &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; user = userIDs.nextLong();
      PreferenceArray prefs = model.getPreferencesFromUser(user);
      total += prefs.length();
    }
    t2 = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Iterated through all users in: {} ms&quot;&lt;/span&gt;, (t2-t1));
    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Counted {} ratings&quot;&lt;/span&gt;, total);
    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Total number of users: &quot;&lt;/span&gt; + model.getNumUsers());

    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Iterate through all items&quot;&lt;/span&gt;);
    LongPrimitiveIterator itemIDs = model.getItemIDs();
    total = 0;
    t1 = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(itemIDs.hasNext()) {
      &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; item = itemIDs.nextLong();
      PreferenceArray prefs = model.getPreferencesForItem(item);
      total += prefs.length();
    }
    t2 = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Iterated through all items in: {} ms&quot;&lt;/span&gt;, (t2-t1));
    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Counted {} ratings&quot;&lt;/span&gt;, total);
    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Total number of items: &quot;&lt;/span&gt; + model.getNumItems());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13468626" author="srowen" created="Wed, 3 Oct 2012 16:50:47 +0100"  >&lt;p&gt;How about making a recommendation? For example in an item-based rec, you&apos;d have 1 request to get the user&apos;s data. Say the user rated 20 items. You&apos;d retrieve 20 items. Say each was rated by 100 people. You&apos;d go get 2000 items&apos; data. That&apos;s already about 1 second.&lt;/p&gt;

&lt;p&gt;I&apos;m not terribly against this as it&apos;s self-contained and just adds a dependency in a secondary module. I do just wonder whether it would be used... if you care to use HBase you probably have well over 1M data point (or else why bother) and it&apos;s pushing some response time issues. Compare with just dumping to a text file and loading it into memory, where it would run much faster.&lt;/p&gt;

&lt;p&gt;Then again this is useful perhaps if you have data in HBase already for another reason, and, don&apos;t want to export, and, the data isn&apos;t so big. Is that the idea?&lt;/p&gt;</comment>
                            <comment id="13468648" author="mumrah" created="Wed, 3 Oct 2012 17:23:29 +0100"  >&lt;p&gt;In a full-fledged recommender system, you usually want good ad-hoc access to your ratings data (for UI or whatever). This would afford that, and might be useful if someone used HBase as their primary data store. &lt;/p&gt;

&lt;p&gt;Also, considering a end-to-end application, if it takes ~1s to gather the user&apos;s neighborhood of ratings, and then some amount of time to do the calculation (probably a few ms), that&apos;s still not bad for ad-hoc, scalable, always-up-to-date, (albeit simple) recommendations. I guess this would be a situation where you lose some performance in exchange for scalability.&lt;/p&gt;

&lt;p&gt;Like I said before, if people think it would be useful - great. If not, no big deal.&lt;/p&gt;</comment>
                            <comment id="13468857" author="srowen" created="Wed, 3 Oct 2012 22:30:31 +0100"  >&lt;p&gt;OK, when you get to 10M data points it&apos;ll take 10 seconds... I don&apos;t mind putting this in. Let me massage it a little and commit tomorrow.&lt;/p&gt;</comment>
                            <comment id="13468887" author="srowen" created="Wed, 3 Oct 2012 22:51:52 +0100"  >&lt;p&gt;I added this, with some modest modifications.&lt;/p&gt;</comment>
                            <comment id="13468900" author="hudson" created="Wed, 3 Oct 2012 23:07:16 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #1684 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1684/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1684/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-202&quot; title=&quot;Make Taste support HBase as data store&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-202&quot;&gt;&lt;del&gt;MAHOUT-202&lt;/del&gt;&lt;/a&gt; add Hbase data model (Revision 1393785)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
srowen : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1393785&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1393785&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/integration/pom.xml&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/hbase&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/cf/taste/impl/model/hbase/HBaseDataModel.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13468948" author="mumrah" created="Wed, 3 Oct 2012 23:54:11 +0100"  >&lt;p&gt;Thanks, Sean! BTW, I should expect real HBase timings to be better than my local dev setup. There&apos;s also a number of tuning parameters I have not touched.&lt;/p&gt;

&lt;p&gt;Regarding introducing HBase as a dependency. It does brings along with it a whole host of stuff. I believe for the usage here, we only need the main HBase jar and the protobuf dependency (I&apos;d have to double check on that).&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
David&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12547384" name="MAHOUT-202.patch" size="17492" author="mumrah" created="Tue, 2 Oct 2012 14:16:46 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 18 Nov 2009 11:00:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9863</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxuyx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4480</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>