<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:21:32 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-359/MAHOUT-359.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-359] org.apache.mahout.cf.taste.hadoop.item.RecommenderJob for Boolean recommendation</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-359</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;in some case there has no preference value in the input data ,the preference value is set to zero,then &lt;/p&gt;

&lt;p&gt;RecommenderMapper.class&lt;/p&gt;

&lt;p&gt; @Override&lt;br/&gt;
  public void map(LongWritable userID,&lt;br/&gt;
                  VectorWritable vectorWritable,&lt;br/&gt;
                  OutputCollector&amp;lt;LongWritable,RecommendedItemsWritable&amp;gt; output,&lt;br/&gt;
                  Reporter reporter) throws IOException {&lt;/p&gt;

&lt;p&gt;    if ((usersToRecommendFor != null) &amp;amp;&amp;amp; !usersToRecommendFor.contains(userID.get())) &lt;/p&gt;
{
      return;
    }
&lt;p&gt;    Vector userVector = vectorWritable.get();&lt;br/&gt;
    Iterator&amp;lt;Vector.Element&amp;gt; userVectorIterator = userVector.iterateNonZero();&lt;br/&gt;
    Vector recommendationVector = new RandomAccessSparseVector(Integer.MAX_VALUE, 1000);&lt;br/&gt;
    while (userVectorIterator.hasNext()) {&lt;br/&gt;
      Vector.Element element = userVectorIterator.next();&lt;br/&gt;
      int index = element.index();&lt;br/&gt;
      double value = element.get();     //here will get 0.0 for Boolean recommendation &lt;br/&gt;
      Vector columnVector;&lt;br/&gt;
      try &lt;/p&gt;
{
        columnVector = cooccurrenceColumnCache.get(new IntWritable(index));
      }
&lt;p&gt; catch (TasteException te) {&lt;br/&gt;
        if (te.getCause() instanceof IOException) &lt;/p&gt;
{
          throw (IOException) te.getCause();
        }
&lt;p&gt; else &lt;/p&gt;
{
          throw new IOException(te.getCause());
        }
&lt;p&gt;      }&lt;br/&gt;
      if (columnVector != null) &lt;/p&gt;
{
        columnVector.times(value).addTo(recommendationVector); //here will set all score value to zero for Boolean recommendation
      }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    Queue&amp;lt;RecommendedItem&amp;gt; topItems = new PriorityQueue&amp;lt;RecommendedItem&amp;gt;(recommendationsPerUser + 1,&lt;br/&gt;
        Collections.reverseOrder());&lt;/p&gt;

&lt;p&gt;    Iterator&amp;lt;Vector.Element&amp;gt; recommendationVectorIterator = recommendationVector.iterateNonZero();&lt;br/&gt;
    LongWritable itemID = new LongWritable();&lt;br/&gt;
    while (recommendationVectorIterator.hasNext()) {&lt;br/&gt;
      Vector.Element element = recommendationVectorIterator.next();&lt;br/&gt;
      int index = element.index();&lt;br/&gt;
      if (userVector.get(index) == 0.0) {&lt;br/&gt;
        if (topItems.size() &amp;lt; recommendationsPerUser) &lt;/p&gt;
{
          indexItemIDMap.get(new IntWritable(index), itemID);
          topItems.add(new GenericRecommendedItem(itemID.get(), (float) element.get()));
        }
&lt;p&gt; else if (element.get() &amp;gt; topItems.peek().getValue()) &lt;/p&gt;
{
          indexItemIDMap.get(new IntWritable(index), itemID);
          topItems.add(new GenericRecommendedItem(itemID.get(), (float) element.get()));
          topItems.poll();
        }
&lt;p&gt;      }&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    List&amp;lt;RecommendedItem&amp;gt; recommendations = new ArrayList&amp;lt;RecommendedItem&amp;gt;(topItems.size());&lt;br/&gt;
    recommendations.addAll(topItems);&lt;br/&gt;
    Collections.sort(recommendations);&lt;br/&gt;
    output.collect(userID, new RecommendedItemsWritable(recommendations));&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;so maybe we need a option to distinguish boolean recommendation and slope one recommendation.&lt;/p&gt;

&lt;p&gt;in ToUserVectorReducer.class&lt;/p&gt;

&lt;p&gt;here no need findTopNPrefsCutoff,maybe take all item.&lt;/p&gt;

&lt;p&gt;it&apos;s just my thinking ,maybe item is used for slope one only .&lt;br/&gt;
&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12461004">MAHOUT-359</key>
            <summary>org.apache.mahout.cf.taste.hadoop.item.RecommenderJob for Boolean recommendation</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="huiwenhan">Han Hui Wen </reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Apr 2010 09:42:21 +0100</created>
                <updated>Sun, 31 Oct 2010 15:49:20 +0000</updated>
                            <resolved>Tue, 27 Apr 2010 09:52:51 +0100</resolved>
                                    <version>0.4</version>
                                    <fixVersion>0.4</fixVersion>
                                    <component>Collaborative Filtering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12852778" author="srowen" created="Fri, 2 Apr 2010 11:20:17 +0100"  >&lt;p&gt;I am not sure I understand the issue yet. This class has nothing to do with slope one.&lt;/p&gt;

&lt;p&gt;Are you looking at this line?&lt;/p&gt;

&lt;p&gt;if (userVector.get(index) == 0.0) {&lt;/p&gt;

&lt;p&gt;This basically asks, did the user express no preference for the item? If so, then the item is recommendable. This ought to work fine for boolean preferences too.&lt;/p&gt;

&lt;p&gt;But then actually, ToItemPrefsMapper assumes you have preference values. That, I can change. There&apos;s no need for that assumption &amp;#8211; it can default to 1.0f.&lt;/p&gt;

&lt;p&gt;But then I don&apos;t understand your comment about ToUserVectorReducer? I think it&apos;s still important for scalability to perhaps cap the size of vectors.&lt;/p&gt;</comment>
                            <comment id="12852826" author="huiwenhan" created="Fri, 2 Apr 2010 15:07:35 +0100"  >&lt;p&gt;sorry for confusing you.&lt;/p&gt;

&lt;p&gt;I have two questions:&lt;/p&gt;

&lt;p&gt;1) if item has no preferences,we normally set the  preferences to 0 or null in database:&lt;/p&gt;

&lt;p&gt;if (columnVector != null) { columnVector.times(value).addTo(recommendationVector)  will cause all value has same value,&lt;/p&gt;

&lt;p&gt;2) if item has no preferences,we normally set the  preferences to 0 or null:&lt;/p&gt;

&lt;p&gt;in ToUserVectorReducer.class we need not select the top N items,becasue they have the same default value (0 or null)&lt;/p&gt;

&lt;p&gt;we can take all items ,it will decrease the calculatation time ,so improve the performance.&lt;/p&gt;

&lt;p&gt;very thanks&lt;/p&gt;</comment>
                            <comment id="12852831" author="srowen" created="Fri, 2 Apr 2010 15:18:33 +0100"  >&lt;p&gt;No preference is represented by the absence of a preference &amp;#8211; &apos;null&apos;, maybe. It&apos;s not represented by a preference of value 0, normally.&lt;/p&gt;

&lt;p&gt;But yes when put into a user vector, we have to give a value. Non-existence preferences are modelled as a 0. This makes preferences of 0 indistinguishable from no preference, unfortunately, in these Hadoop-based, vector-based implementations, but it doesn&apos;t usually cause an issue in practice.&lt;/p&gt;

&lt;p&gt;The loop in RecommenderMapper loops only over non-zero values, so &apos;value&apos; is never 0 in the line you cite.&lt;/p&gt;

&lt;p&gt;In the case of boolean preferences, all values are 1. (I could optimize this and avoid the multiplication, I guess.) But that&apos;s not your issue is it?&lt;/p&gt;


&lt;p&gt;I also agree we can optimize findTopNPrefsCutoff(). For boolean data, the cutoff is 1.0, and all preferences are kept. We might want to keep a random n items. For now, it&apos;s not broken right, it&apos;s just keeping more data than we might desire.&lt;/p&gt;


&lt;p&gt;Is that resolving your issue? maybe you can otherwise help me understand the problem you are having.&lt;/p&gt;</comment>
                            <comment id="12852846" author="huiwenhan" created="Fri, 2 Apr 2010 16:18:36 +0100"  >&lt;p&gt;my problem is how to process the case Non-existence preferences high-performance and more clear.&lt;/p&gt;

&lt;p&gt;how about the following solution about Non-existence preferences?&lt;/p&gt;

&lt;p&gt;we add one option to distinguish Non-existence preferences or existence preferences,&lt;br/&gt;
so it need not consider set preference to 1 or zero and end user can to use this implementation clearly.&lt;/p&gt;

&lt;p&gt;The loop in RecommenderMapper loops only over non-zero values ,maybe I need read the code deeply.&lt;/p&gt;

&lt;p&gt;Iterator&amp;lt;Vector.Element&amp;gt; userVectorIterator = userVector.iterateNonZero(); &lt;/p&gt;

&lt;p&gt;I checked source  method iterateNonZero of RandomAccessSparseVector&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/viewvc/lucene/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java?view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/lucene/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java?view=markup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but not find how to skip zero items.&lt;/p&gt;</comment>
                            <comment id="12852847" author="srowen" created="Fri, 2 Apr 2010 16:26:33 +0100"  >&lt;p&gt;Yes, most of the recommender code makes this distinction. When user preferences are translated to a vector, the &apos;null&apos; values are necessarily mapped to zero. This makes sense for vectors. It has some implications for the algorithms written to use vectors, but I believe they are fine.&lt;/p&gt;

&lt;p&gt;RandomAccessSparseVector stores only non-zero entries in the &apos;values&apos; field. iterateNonZero iterates only over entries in &apos;values&apos;. This is how it skips non-zero entries.&lt;/p&gt;

&lt;p&gt;Is the issue performance &amp;#8211; what part in particular seems slow?&lt;/p&gt;</comment>
                            <comment id="12852850" author="huiwenhan" created="Fri, 2 Apr 2010 16:37:58 +0100"  >&lt;p&gt;if it can optimize to avoid the multiplication and avoid to  findTopNPrefsCutoff() for Non-existence preferences,&lt;br/&gt;
it will improve the performance.&lt;/p&gt;

&lt;p&gt;also find issue is :&lt;/p&gt;

&lt;p&gt;UserVectorToCooccurrenceMapper can has 2 map task maximumly (I need test more here )&lt;/p&gt;</comment>
                            <comment id="12852913" author="srowen" created="Fri, 2 Apr 2010 19:54:38 +0100"  >&lt;p&gt;I think I understand your ideas. I committed a change that better optimized for &apos;boolean&apos; data. Unfortunately I need to add a command line flag for this: &quot;--booleanData true&quot;. But I believe it should work more efficiently. I&apos;d appreciate it if you can try it out. This is very helpful.&lt;/p&gt;</comment>
                            <comment id="12854581" author="huiwenhan" created="Wed, 7 Apr 2010 17:27:53 +0100"  >&lt;p&gt;This works fine ,thanks Sean &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 2 Apr 2010 10:20:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9706</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy5lr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23059</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>