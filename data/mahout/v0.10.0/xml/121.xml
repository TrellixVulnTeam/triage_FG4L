<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:27:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-121/MAHOUT-121.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-121] Speed up distance calculations for sparse vectors</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-121</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;From my mail to the Mahout mailing list.&lt;/p&gt;

&lt;p&gt;I am working on clustering a dataset which has thousands of sparse vectors. The complete dataset has few tens of thousands of feature items but each vector has only couple of hundred feature items. For this, there is an optimization in distance calculation, a link to which I found the archives of Mahout mailing list.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lingpipe-blog.com/2009/03/12/speeding-up-k-means-clustering-algebra-sparse-vectors/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://lingpipe-blog.com/2009/03/12/speeding-up-k-means-clustering-algebra-sparse-vectors/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tried out this optimization.  The test setup had 2000 document  vectors with few hundred items.  I ran canopy generation with Euclidean distance and t1, t2 values as 250 and 200.&lt;/p&gt;

&lt;p&gt;Current Canopy Generation: 28 min 15 sec.&lt;br/&gt;
Canopy Generation with distance optimization: 1 min 38 sec.&lt;/p&gt;

&lt;p&gt;I know by experience that using Integer, Double objects instead of primitives is computationally expensive. I changed the sparse vector  implementation to used primitive collections by Trove [&lt;br/&gt;
&lt;a href=&quot;http://trove4j.sourceforge.net/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://trove4j.sourceforge.net/&lt;/a&gt; ].&lt;/p&gt;

&lt;p&gt;Distance optimization with Trove: 59 sec&lt;br/&gt;
Current canopy generation with Trove: 21 min 55 sec&lt;/p&gt;

&lt;p&gt;To sum, these two optimizations reduced cluster generation time by a 97%.&lt;/p&gt;

&lt;p&gt;Currently, I have made the changes for Euclidean Distance, Canopy and KMeans.  &lt;/p&gt;

&lt;p&gt;Licensing of Trove seems to be an issue which needs to be addressed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12426103">MAHOUT-121</key>
            <summary>Speed up distance calculations for sparse vectors</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gsingers">Grant Ingersoll</assignee>
                                    <reporter username="kshashi">Shashikant Kore</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 May 2009 12:28:27 +0100</created>
                <updated>Wed, 4 Aug 2010 16:02:28 +0100</updated>
                            <resolved>Wed, 12 Aug 2009 16:20:49 +0100</resolved>
                                                    <fixVersion>0.2</fixVersion>
                                    <component>Math</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12712043" author="kshashi" created="Fri, 22 May 2009 12:45:11 +0100"  >&lt;p&gt;This is initial patch just show the idea behind optimization. Not a final patch.&lt;/p&gt;</comment>
                            <comment id="12712047" author="kshashi" created="Fri, 22 May 2009 12:47:26 +0100"  >&lt;p&gt;This patch is intended to communicate the optimization idea. Not a final patch. &lt;/p&gt;</comment>
                            <comment id="12712193" author="tdunning" created="Fri, 22 May 2009 19:23:39 +0100"  >&lt;p&gt;&amp;gt; Licensing of Trove seems to be an issue which needs to be addressed.&lt;/p&gt;

&lt;p&gt;The licensing of trove is a non-starter.&lt;/p&gt;

&lt;p&gt;Typically, however, you can limit the use to a few cases like Map&amp;lt;Integer, Double&amp;gt; and then simply re-implement or find a Apache compatible implementation.&lt;/p&gt;

&lt;p&gt;There is no magic involved in an open hash map in this kind of case.  Even just using two arrays with binary search could be acceptable.&lt;/p&gt;</comment>
                            <comment id="12712388" author="dawidweiss" created="Sat, 23 May 2009 09:52:25 +0100"  >&lt;p&gt;There is even a hash map implementation in Lucene, as far as I remember (part of string interning/ caching routine recently committed to the trunk). This could be a started. &lt;/p&gt;

&lt;p&gt;I&apos;ve been pestering Soren Bak to donate his excellent PCJ library to Apache &amp;#8211; if so, we would have the problem of primitive collections of all kinds solved.&lt;/p&gt;</comment>
                            <comment id="12717812" author="gsingers" created="Tue, 9 Jun 2009 21:29:37 +0100"  >&lt;p&gt;I&apos;ve been doing some profiling and we do indeed need a solution to the autoboxing stuff.  getQuick() and setQuick are (ironically, given their names) the big bottlenecks due to constant boxing.&lt;/p&gt;</comment>
                            <comment id="12717832" author="bmargulies" created="Tue, 9 Jun 2009 22:45:55 +0100"  >&lt;p&gt;I could make you a fast sparse vector, but I thought you wanted to wait for MTJ?&lt;/p&gt;</comment>
                            <comment id="12718026" author="kshashi" created="Wed, 10 Jun 2009 11:54:14 +0100"  >&lt;p&gt;That&apos;s right, Grant. Some simple tests showed that autoboxing can take 20x cpu and 5x memory compared to operations on primitives.  &lt;/p&gt;

&lt;p&gt;For sparse vectors, even Trove leaves some room for improvement. The input document vectors are read-only for the clustering code. In which case, Sparse vector could simply be two arrays. The sparse vectors used to generate centroid requires expandable vector. &lt;/p&gt;
</comment>
                            <comment id="12718043" author="bmargulies" created="Wed, 10 Jun 2009 12:54:48 +0100"  >&lt;p&gt;Two arrays would indeed model all the high-speed C++ sparse vectors I have met. One optimization is to allow insertion without maintaining order and then resorting for algorithms that need to do many inserts in a row without reading.&lt;/p&gt;</comment>
                            <comment id="12718966" author="srowen" created="Fri, 12 Jun 2009 21:27:56 +0100"  >&lt;p&gt;Here&apos;s a start at that last suggestion. Anyone care to see it finished? I can hack it out.&lt;/p&gt;

&lt;p&gt;public final class FastIntDouble {&lt;/p&gt;

&lt;p&gt;  private static final double DEFAULT_VALUE = 0.0;&lt;/p&gt;

&lt;p&gt;  private int[] indices;&lt;br/&gt;
  private double[] values;&lt;br/&gt;
  private int size;&lt;/p&gt;

&lt;p&gt;  public FastIntDouble(int capacity) &lt;/p&gt;
{
    indices = new int[capacity];
    values = new double[capacity];
    size = 0;
  }

&lt;p&gt;  private void growTo(int newCapacity) {&lt;br/&gt;
    if (newCapacity &amp;gt; indices.length) &lt;/p&gt;
{
      int[] newIndices = new int[newCapacity];
      System.arraycopy(indices, 0, newIndices, 0, size);
      indices = newIndices;
      double[] newValues = new double[newCapacity];
      System.arraycopy(values, 0, newValues, 0, size);
      values = newValues;
    }
&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;  private int find(int index) {&lt;br/&gt;
    int low = 0;&lt;br/&gt;
    int high = size - 1;&lt;br/&gt;
    while (low &amp;lt;= high) {&lt;br/&gt;
      int mid = (low + high) &amp;gt;&amp;gt;&amp;gt; 1;&lt;br/&gt;
      int midVal = indices&lt;span class=&quot;error&quot;&gt;&amp;#91;mid&amp;#93;&lt;/span&gt;;&lt;br/&gt;
      if (midVal &amp;lt; index) &lt;/p&gt;
{
        low = mid + 1;
      }
&lt;p&gt; else if (midVal &amp;gt; index) &lt;/p&gt;
{
        high = mid - 1;
      }
&lt;p&gt; else &lt;/p&gt;
{
        return mid;
      }
&lt;p&gt;    }&lt;br/&gt;
    return -(low + 1);&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;  public double get(int index) &lt;/p&gt;
{
    int offset = find(index);
    return offset &amp;gt;= 0 ? values[offset] : DEFAULT_VALUE;
  }

&lt;p&gt;  public void set(int index, double value) {&lt;br/&gt;
    int offset = find(index);&lt;br/&gt;
    if (offset &amp;gt;= 0) {&lt;br/&gt;
      if (value == DEFAULT_VALUE) &lt;/p&gt;
{
        System.arraycopy(indices, offset + 1, indices, offset, size - offset);
        System.arraycopy(values, offset + 1, values, offset, size - offset);
        size--;
      }
&lt;p&gt; else &lt;/p&gt;
{
        values[offset] = value;
      }
&lt;p&gt;    } else {&lt;br/&gt;
      if (value != DEFAULT_VALUE) {&lt;br/&gt;
        if (size &amp;gt;= indices.length) &lt;/p&gt;
{
          growTo(size &amp;lt;&amp;lt; 1);
        }
&lt;p&gt;        int at = -offset - 1;&lt;br/&gt;
        if (size &amp;gt; at) &lt;/p&gt;
{
          System.arraycopy(indices, at, indices, at + 1, size - at);
          System.arraycopy(values, at, values, at + 1, size - at);
        }
&lt;p&gt;        indices&lt;span class=&quot;error&quot;&gt;&amp;#91;at&amp;#93;&lt;/span&gt; = index;&lt;br/&gt;
        values&lt;span class=&quot;error&quot;&gt;&amp;#91;at&amp;#93;&lt;/span&gt; = value;&lt;br/&gt;
        size++;&lt;br/&gt;
      }&lt;br/&gt;
    }&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="12719016" author="eelstretching" created="Sat, 13 Jun 2009 00:09:54 +0100"  >&lt;p&gt;Don&apos;t forget that there is java.util.Arrays.binarySearch (and it looks like they&apos;ve improved it since the last time that I looked.)&lt;/p&gt;

&lt;p&gt;Also, don&apos;t forget Josh Bloch&apos;s point about binary search.  For sufficiently large arrays, low+high might overflow an int, which will make your binary search unhappy.&lt;/p&gt;

&lt;p&gt;Also, also, if you&apos;re going to do a lot of finds in a row, you might want to provide an iterator-returning method that returns the positions in the array one-by-one as iterating through the array once will be faster than many binary searches.&lt;/p&gt;</comment>
                            <comment id="12719094" author="srowen" created="Sat, 13 Jun 2009 08:55:26 +0100"  >&lt;p&gt;Good point on the overflow, even if it would only happen after the  vector had over a billion non-zero elements, taking 12GB+ of memory! Arrays.binarySearch() has this issue, so perhaps good to just keep a fixed version of binary search.&lt;/p&gt;

&lt;p&gt;Yes there needs to be a way to iterate over the elements directly, quickly. Thinking it best to just return the arrays, if we&apos;re going for speed.&lt;/p&gt;

&lt;p&gt;Would it be useful to take a shot at rewriting SparseVector to use this?&lt;/p&gt;</comment>
                            <comment id="12719117" author="gsingers" created="Sat, 13 Jun 2009 13:36:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;Would it be useful to take a shot at rewriting SparseVector to use this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You could do that, or an alternate implementation.  Is there any case where one wouldn&apos;t want this?  Also, I wouldn&apos;t mind a little better name than FastIntDouble.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12719118" author="gsingers" created="Sat, 13 Jun 2009 13:37:18 +0100"  >&lt;p&gt;Also, seems like we could split out the original two issues that Shashikant brought up, right?&lt;/p&gt;</comment>
                            <comment id="12719317" author="srowen" created="Sun, 14 Jun 2009 19:53:08 +0100"  >&lt;p&gt;Here is a next patch that switches to use this new class in SparseVector. Thoughts?&lt;/p&gt;

&lt;p&gt;Maybe the two classes should just be merged. Then SparseMatrix should be changed too.&lt;/p&gt;

&lt;p&gt;I haven&apos;t measured the performance change but imagine it will be significant.&lt;/p&gt;</comment>
                            <comment id="12719462" author="kshashi" created="Mon, 15 Jun 2009 09:48:55 +0100"  >&lt;p&gt;+1 Grant&apos;s suggestion that we split two issues.&lt;/p&gt;

&lt;p&gt;Sean,  Doubling the vector size looks aggressive. In a recent experiment, I ran into trouble due to such aggressive expansion.  We could optimize memory usage and Sparse Vector initialization for input document vectors by exposing some low-level APIs. When document vector is read, we already know the number of elements in it. It need not go through the iterative set() method which avoids the movement of the array elements. FastIntDouble can be initialized by two parallel arrays created by reading the sparse vector formatted string.&lt;/p&gt;

&lt;p&gt;I will try out your patch and report performance. &lt;/p&gt;</comment>
                            <comment id="12719511" author="srowen" created="Mon, 15 Jun 2009 11:37:20 +0100"  >&lt;p&gt;Agree with you on doubling the vector size, we can do something more conservative like growing 20%. Yes, also easy to add constructors that take arrays. You could also simply set the size in the constructor. The inserts then don&apos;t involve any array shuffling.&lt;/p&gt;

&lt;p&gt;If this proves a good win for performance I will work more on refining the change, and expanding it to SparseMatrix.&lt;/p&gt;</comment>
                            <comment id="12719546" author="kshashi" created="Mon, 15 Jun 2009 14:25:35 +0100"  >&lt;p&gt;Sean, &lt;/p&gt;

&lt;p&gt;Your patch has definitely improved the performance. For my test data set, it took 8m 34s to generate canopies. The trunk code has been running for 40 minutes and still only 85% of Mapper is complete. I increased the default size to 1024 and it took 5m 21s. &lt;/p&gt;

&lt;p&gt;But, this is higher than Trove&apos;s 3m 34s. The array copy operation on addition of new element to vector  seems to be the culprit. Think centroid calculation with has thousands of feature items.  This could be solved only with a hash implementation like Trove, which has (amortized) insertion and lookup time of O(1).&lt;/p&gt;
</comment>
                            <comment id="12719632" author="srowen" created="Mon, 15 Jun 2009 17:38:55 +0100"  >&lt;p&gt;That&apos;s good. I expect that, normally, vector updates are relatively infrequent. It should not take so many such edits to construct a vector, during construction for instance. What code does the work of creating the vectors, so I can add and integrate a faster mechanism there?&lt;/p&gt;

&lt;p&gt;We could switch to a hashtable implementation later if that is necessary.&lt;/p&gt;</comment>
                            <comment id="12720123" author="kshashi" created="Tue, 16 Jun 2009 14:34:45 +0100"  >&lt;p&gt;Apologies for posting incorrect results in previous comments.  I applied Sean&apos;s patch to the code which had optimization fo distance calculation.&lt;/p&gt;

&lt;p&gt;When I applied this patch to the trunk, it took 2 hr 20mins to execute. I couldn&apos;t complete the run for the trunk code as there was trouble with my machine. But it wasn&apos;t complete after 4 hours. &lt;/p&gt;

&lt;p&gt;I will re-run and post the correct results. &lt;/p&gt;</comment>
                            <comment id="12720159" author="srowen" created="Tue, 16 Jun 2009 15:40:47 +0100"  >&lt;p&gt;While you are at it, what are you running to load test? that way I can focus on optimizing construction of the vectors in that path to achieve a hopefully better result.&lt;/p&gt;</comment>
                            <comment id="12720246" author="kshashi" created="Tue, 16 Jun 2009 18:19:11 +0100"  >&lt;p&gt;I have document vectors created from some internal text.  I create canopies from those vectors.  Centroid calculation is a suspect area. &lt;/p&gt;</comment>
                            <comment id="12720469" author="gsingers" created="Wed, 17 Jun 2009 03:00:10 +0100"  >&lt;p&gt;I&apos;ve created some vectors from Wikipedia and can upload them.  I just started profiling using Canopy clustering 1000 Wikipedia docs and so far 87% of the time (after 5% map phase) is spent in getQuick() and 80% of which is Integer.valueOf().  I can run it longer, but I think it&apos;s safe to say it&apos;s the bottleneck.&lt;/p&gt;

&lt;p&gt;I&apos;ll try the patch and I&apos;ll upload the file and the params for running.&lt;/p&gt;</comment>
                            <comment id="12720470" author="gsingers" created="Wed, 17 Jun 2009 03:12:04 +0100"  >&lt;p&gt;Sparse Vector available at &lt;a href=&quot;http://people.apache.org/~gsingers/mahout/out.txt.gz&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~gsingers/mahout/out.txt.gz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ran as: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;org.apache.mahout.clustering.canopy.CanopyClusteringJob /Users/grantingersoll/projects/lucene/solr/wikipedia/part-out.txt /Users/grantingersoll/projects/lucene/solr/wikipedia/output org.apache.mahout.utils.EuclideanDistanceMeasure 1.3 1.0&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not sure if the values actually make sense, but that&apos;s what I&apos;m trying...&lt;/p&gt;</comment>
                            <comment id="12720471" author="gsingers" created="Wed, 17 Jun 2009 03:28:31 +0100"  >&lt;p&gt;Updated to trunk.  Did some profiling and the bottleneck is gone, or at least moved to other places.&lt;/p&gt;

&lt;p&gt;Haven&apos;t actually evaluated correctness, but...&lt;/p&gt;</comment>
                            <comment id="12720473" author="gsingers" created="Wed, 17 Jun 2009 03:34:02 +0100"  >&lt;p&gt;Patch, of course, also needs a unit test for the OrderedIntDoubleMapping.&lt;/p&gt;</comment>
                            <comment id="12720498" author="kshashi" created="Wed, 17 Jun 2009 06:11:40 +0100"  >&lt;p&gt;Grant, &lt;/p&gt;

&lt;p&gt;I am trying out the wikipedia vectors with the parameters you gave. It is running slow. Only 8% map completion after 18 minutes. Can you please post the performance before and after applying the OrderedIntDoubleMapping patch?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;OT&amp;#93;&lt;/span&gt; Also, was wondering how you came up with the values of t1 and t2 as 1.3 &amp;amp; 1.0. This is  voodoo for me. For the dataset I am working with has a window of 0.05 in which the result changes from 0 canopies to 3,000 canopies.&lt;/p&gt;
</comment>
                            <comment id="12720627" author="gsingers" created="Wed, 17 Jun 2009 12:17:18 +0100"  >&lt;p&gt;After the patch, it was pretty fast, but like I said, I didn&apos;t evaluate any correctness just yet.&lt;/p&gt;</comment>
                            <comment id="12720677" author="srowen" created="Wed, 17 Jun 2009 14:56:44 +0100"  >&lt;p&gt;Here&apos;s my latest patch, which incorporates a unit test, further refinements, as well as related changes we discussed on a separate thread. In fact, most of the diff is due to those other changes. The core of the change involves SparseVector and OrderedIntDoubleMapping.&lt;/p&gt;

&lt;p&gt;Is this enough of a good start to commit, and move forward with? seems like we have evidence it gives a significant performance boost. There was a question of correctness&lt;/p&gt;</comment>
                            <comment id="12720684" author="gsingers" created="Wed, 17 Jun 2009 15:20:06 +0100"  >&lt;p&gt;Presumably the tests of still pass, so there is some evidence of correctness.  &lt;/p&gt;</comment>
                            <comment id="12720693" author="gsingers" created="Wed, 17 Jun 2009 15:51:49 +0100"  >&lt;p&gt;FYI, Sean, can you generate the patch from within the trunk directory, this will make applying it easier for everyone else.&lt;/p&gt;</comment>
                            <comment id="12720694" author="gsingers" created="Wed, 17 Jun 2009 15:54:18 +0100"  >&lt;p&gt;I&apos;m getting a lot of failures when applying this patch.&lt;/p&gt;</comment>
                            <comment id="12720722" author="srowen" created="Wed, 17 Jun 2009 16:38:11 +0100"  >&lt;p&gt;Ah yes my fault. I could not get IntelliJ to change the base directory, so, just edited the patch by hand. I think that works?&lt;/p&gt;

&lt;p&gt;yes this is a diff against head, and, the unit tests pass.&lt;/p&gt;</comment>
                            <comment id="12720750" author="jeastman" created="Wed, 17 Jun 2009 17:39:09 +0100"  >&lt;p&gt;I still had problems applying the previous patch so here&apos;s another from trunk that runs all tests. I&apos;m going to stop work on &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-65&quot; title=&quot;Add Element Labels to Vectors and Matrices&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-65&quot;&gt;&lt;del&gt;MAHOUT-65&lt;/del&gt;&lt;/a&gt; until this gets stabilized.&lt;/p&gt;</comment>
                            <comment id="12720764" author="jeastman" created="Wed, 17 Jun 2009 18:07:12 +0100"  >&lt;p&gt;A bit premature perhaps. There is still an unresolved cardinality() reference in /Mahout/utils/src/test/java/org/apache/mahout/utils/vectors/lucene/LuceneIterableTest.java and the VectorTest testSparseVectorTimesX fails intermittently. AFAICT, none of the patches include /utils and that compile fails after the unit tests and packaging have succeeded.&lt;/p&gt;</comment>
                            <comment id="12720798" author="srowen" created="Wed, 17 Jun 2009 19:00:57 +0100"  >&lt;p&gt;I see, i did not even know this utils/ directory was added. I&apos;ll get it into my client and update it accordingly.&lt;/p&gt;

&lt;p&gt;I didn&apos;t see a failure in that test, but, do see the problem &amp;#8211; it uses a random number generator without a seed. I will add a seed, and see if I can find one that induces a failure.&lt;/p&gt;

&lt;p&gt;To avoid confusion... I suppose let me keep the &apos;official&apos; version of the patch for now since I need to make some fixes. It is still substantially identical to the last couple that have been posted, so, reviewing those is valid for anyone who cares.&lt;/p&gt;</comment>
                            <comment id="12720810" author="gsingers" created="Wed, 17 Jun 2009 19:21:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;I see, i did not even know this utils/ directory was added. I&apos;ll get it into my client and update it accordingly. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just this morning...  Can you tell I&apos;ve got some time for Mahout lately?  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;To avoid confusion... I suppose let me keep the &apos;official&apos; version of the patch for now since I need to make some fixes. It is still substantially identical to the last couple that have been posted, so, reviewing those is valid for anyone who cares.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;All yours, but just so you know, this is a really hot topic for me and I&apos;ve got a deadline associated with it, so I can help if need be.&lt;/p&gt;</comment>
                            <comment id="12720831" author="srowen" created="Wed, 17 Jun 2009 20:05:17 +0100"  >&lt;p&gt;One more go-round. This fixes a bug, indeed, that was revealed by the vector test in certain randomly-generated situations. I found a seed that triggered it, so, was able to make the test deterministic and also to fix it. utils/ is OK now. Will wait a beat to see if anyone&apos;s got comments &amp;#8211; aware this is holding up other changes though so will try to get this sorted tonight.&lt;/p&gt;</comment>
                            <comment id="12720839" author="jeastman" created="Wed, 17 Jun 2009 20:18:25 +0100"  >&lt;p&gt;The patch fails to install. More hand-editing?&lt;/p&gt;

&lt;p&gt;jeff-eastmans-mac-pro:Mahout jeff$ patch -p0 &amp;lt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-121&quot; title=&quot;Speed up distance calculations for sparse vectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-121&quot;&gt;&lt;del&gt;MAHOUT-121&lt;/del&gt;&lt;/a&gt;&amp;#40;2&amp;#41;.patch &lt;br/&gt;
patching file core/src/test/java/org/apache/mahout/matrix/TestOrderedIntDoubleMapping.java&lt;br/&gt;
patching file core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopy.java&lt;br/&gt;
Hunk #1 FAILED at 242.&lt;br/&gt;
Hunk #2 FAILED at 259.&lt;br/&gt;
Hunk #3 FAILED at 274.&lt;br/&gt;
Hunk #4 FAILED at 294.&lt;br/&gt;
Hunk #5 FAILED at 416.&lt;br/&gt;
5 out of 5 hunks FAILED &amp;#8211; saving rejects to file core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopy.java.rej&lt;br/&gt;
patching file core/src/test/java/org/apache/mahout/matrix/VectorTest.java&lt;br/&gt;
patching file core/src/test/java/org/apache/mahout/matrix/TestDenseVector.java&lt;br/&gt;
patching file core/src/main/java/org/apache/mahout/clustering/dirichlet/models/NormalModel.java&lt;br/&gt;
patching file core/src/main/java/org/apache/mahout/matrix/VectorView.java&lt;br/&gt;
patching file core/src/main/java/org/apache/mahout/clustering/dirichlet/models/AsymmetricSampledNormalModel.java&lt;br/&gt;
patching file core/src/main/java/org/apache/mahout/utils/ManhattanDistanceMeasure.java&lt;br/&gt;
patching file core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/SoftCluster.java&lt;br/&gt;
can&apos;t find file to patch at input line 598&lt;br/&gt;
Perhaps you used the wrong -p or --strip option?&lt;br/&gt;
The text leading up to this was:&lt;br/&gt;
--------------------------&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Index: trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/NormalScModel.java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;===================================================================&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;#8212; trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/NormalScModel.java	(revision 780473)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+++ trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/NormalScModel.java	Tue Jun 16 20:58:30 BST 2009&lt;br/&gt;
--------------------------&lt;br/&gt;
File to patch: ^C&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="12721230" author="srowen" created="Thu, 18 Jun 2009 13:39:59 +0100"  >&lt;p&gt;Not sure if my very truly last version of the patch got posted. Here it is. It is relative to the root rather than trunk/ &amp;#8211; seems my hand editing doesn&apos;t work.&lt;/p&gt;</comment>
                            <comment id="12721646" author="srowen" created="Fri, 19 Jun 2009 05:47:02 +0100"  >&lt;p&gt;Since I am not hearing objections, and cognizant that people are waiting on this, going to commit. If there are issues we can roll back or tweak from there.&lt;/p&gt;</comment>
                            <comment id="12723724" author="gsingers" created="Wed, 24 Jun 2009 21:32:48 +0100"  >&lt;p&gt;Hi Shashi,&lt;/p&gt;

&lt;p&gt;Any chance you can bring the optimization (distance calculation stuff) part of this up to date with trunk (the primitive stuff is all in)?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Grant&lt;/p&gt;</comment>
                            <comment id="12723730" author="gsingers" created="Wed, 24 Jun 2009 21:55:51 +0100"  >&lt;p&gt;Here&apos;s a YourKit snapshot of me clustering 1000 wikipedia docs.  There are a few key bottlenecks:&lt;br/&gt;
1. Distance calculation&lt;br/&gt;
2. SparseVector.setQuick&lt;br/&gt;
3. SparseVector.clone&lt;/p&gt;

&lt;p&gt;All three of these are heavily called during both Map and Reduce phases and are part of the distance calculation loops&lt;/p&gt;</comment>
                            <comment id="12723732" author="gsingers" created="Wed, 24 Jun 2009 21:56:38 +0100"  >&lt;p&gt;Note, also on that Snapshot that I uploaded that I was running w/ &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-139&quot; title=&quot;Make use of Vector Iterator capabilities where appropriate&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-139&quot;&gt;&lt;del&gt;MAHOUT-139&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12723766" author="gsingers" created="Wed, 24 Jun 2009 23:04:24 +0100"  >&lt;p&gt;Updated to trunk and incorporates Shashi&apos;s distance work.&lt;/p&gt;</comment>
                            <comment id="12723980" author="kshashi" created="Thu, 25 Jun 2009 10:48:05 +0100"  >&lt;p&gt;Grant, &lt;/p&gt;

&lt;p&gt;I was trying to verify the patch, but for some reason,  my hadoop setup refuses to run with &quot;Error reading task output&quot; message. Couldn&apos;t get it working after lots of effort. Will try it again. If you could post the performance numbers before and after the distance calculation improvement, it would be helpful to verify if those are in line with expectations.  &lt;/p&gt;</comment>
                            <comment id="12724067" author="kshashi" created="Thu, 25 Jun 2009 13:30:26 +0100"  >&lt;p&gt;I&apos;m getting inconsistent results. &lt;/p&gt;

&lt;p&gt;In one case, the current code without distance optimization generated canopies in 7m 23s and the distance-optimized code finished in 3m 13sec. &lt;/p&gt;

&lt;p&gt;I modified the distance vectors to include terms which meet certain criterai (minimum # of docs, max % of docs). Now, optimized code run in 1m 23 sec and the non-optimized  code runs in 1m45sec.&lt;/p&gt;

&lt;p&gt;Grant, have you seen this kind of behaviour?&lt;/p&gt;</comment>
                            <comment id="12724075" author="gsingers" created="Thu, 25 Jun 2009 13:58:24 +0100"  >&lt;p&gt;I haven&apos;t verified this, but intuitively, it doesn&apos;t seem all that unreasonable.  Presumably your vectors are a lot more sparse now.&lt;/p&gt;

&lt;p&gt;BTW, I&apos;ll add the min #docs, % as options to the Driver.&lt;/p&gt;</comment>
                            <comment id="12724077" author="gsingers" created="Thu, 25 Jun 2009 14:04:57 +0100"  >&lt;p&gt;Also, how many docs are you clustering on for these tests?  And have you checked out some of the utilities I&apos;ve been putting in?&lt;/p&gt;

&lt;p&gt;Can you share more about your tests so I can reproduce them?  I will put up some Wikipedia Vectors soon.&lt;/p&gt;</comment>
                            <comment id="12724084" author="kshashi" created="Thu, 25 Jun 2009 14:19:25 +0100"  >&lt;p&gt;3889 Document vectors to test performance&lt;/p&gt;</comment>
                            <comment id="12724225" author="gsingers" created="Thu, 25 Jun 2009 20:37:29 +0100"  >&lt;p&gt;I&apos;m seeing definite performance gain on this latest patch.  I&apos;m going to commit, then we can iterate.&lt;/p&gt;</comment>
                            <comment id="12724228" author="gsingers" created="Thu, 25 Jun 2009 20:38:45 +0100"  >&lt;p&gt;BTW, any objection to me removing the sqrt calculation from EuclideanDistanceMeasure?&lt;/p&gt;</comment>
                            <comment id="12724278" author="gsingers" created="Thu, 25 Jun 2009 21:47:07 +0100"  >&lt;p&gt;Committed revision 788504.&lt;/p&gt;</comment>
                            <comment id="12724517" author="kshashi" created="Fri, 26 Jun 2009 14:27:21 +0100"  >&lt;p&gt;Grant,&lt;/p&gt;

&lt;p&gt;Didn&apos;t get your question. I see, EuclideanDistanceMeasure still returns the sqrt value and other calculations are moved to SquaredEuclideanDistanceMeasure. If someone is interested in only relative measure, using SquaredEuclideanDistanceMeasure is a faster solution.  The distance value returned by EuclideanDistanceMeasure still continues to be the same. Am I missing something here?&lt;/p&gt;

</comment>
                            <comment id="12724520" author="srowen" created="Fri, 26 Jun 2009 14:33:52 +0100"  >&lt;p&gt;This may be irrelevant &amp;#8211; haven&apos;t thought it through &amp;#8211; since someone mentioned using the triangle inequality to optimize some stuff earlier, I wonder if it is a problem that a squared-distance measure no longer satisfies this inequality? That is, it is not true that the square of one side is less than the sum of squares of other two sides.&lt;/p&gt;</comment>
                            <comment id="12724548" author="gsingers" created="Fri, 26 Jun 2009 14:54:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;I see, EuclideanDistanceMeasure still returns the sqrt value and other calculations are moved to SquaredEuclideanDistanceMeasure. If someone is interested in only relative measure, using SquaredEuclideanDistanceMeasure is a faster solution. The distance value returned by EuclideanDistanceMeasure still continues to be the same. Am I missing something here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Nope, your not missing anything.  I added the SquaredEDM class yesterday per this discussion.&lt;/p&gt;</comment>
                            <comment id="12736036" author="gsingers" created="Tue, 28 Jul 2009 12:12:26 +0100"  >&lt;p&gt;Looks like we missed some opportunities for using our new distance capabilities.  Will try to get a patch out soon.&lt;/p&gt;</comment>
                            <comment id="12736403" author="gsingers" created="Wed, 29 Jul 2009 02:05:23 +0100"  >&lt;p&gt;brings back Shashi&apos;s distance change for KMeans&lt;/p&gt;</comment>
                            <comment id="12736460" author="kshashi" created="Wed, 29 Jul 2009 06:51:05 +0100"  >&lt;p&gt;Grant,&lt;/p&gt;

&lt;p&gt;The latest patch brings back the changes from my first patch. This can go in.&lt;/p&gt;</comment>
                            <comment id="12736627" author="nfantone" created="Wed, 29 Jul 2009 14:19:13 +0100"  >&lt;p&gt;Hi all - I&apos;ve just sign up to Jira!&lt;/p&gt;

&lt;p&gt;Before committing this patch, could any of you take a look to my latest mail in the Mahout mailing list (it&apos;s a bit extensive to copy/paste in here)? With some enlightenment, I could create a patch from my work and we may be able to make bigger improvements for KMeans.&lt;/p&gt;</comment>
                            <comment id="12737875" author="gsingers" created="Sat, 1 Aug 2009 13:36:22 +0100"  >&lt;p&gt;Hi Nicolas,&lt;/p&gt;

&lt;p&gt;I&apos;m getting an error applying your patch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; patch -p 0 -i ../patches/&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-121&quot; title=&quot;Speed up distance calculations for sparse vectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-121&quot;&gt;&lt;del&gt;MAHOUT-121&lt;/del&gt;&lt;/a&gt;-distance-optimization.patch --dry-run&lt;br/&gt;
patching file core/src/main/java/org/apache/mahout/clustering/kmeans/Cluster.java&lt;br/&gt;
patch: **** malformed patch at line 46: @@ -323,6 +327,10 @@&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I create my patches by going to the top directory of mahout and doing:&lt;br/&gt;
svn diff &amp;gt; ../mypatch.patch&lt;/p&gt;</comment>
                            <comment id="12737956" author="nfantone" created="Sat, 1 Aug 2009 22:57:30 +0100"  >&lt;p&gt;Um... weird. That&apos;s the way I created the patch, too. I&apos;m going to revise it on Monday at work and upload a new one. (Maybe it&apos;s just an empty or a new line that I erased from the original .java and it&apos;s not translating correctly into the patch?) &lt;/p&gt;</comment>
                            <comment id="12739712" author="gsingers" created="Wed, 5 Aug 2009 21:10:18 +0100"  >&lt;p&gt;Nicolas, any word on your update?  Otherwise I will just apply my patch&lt;/p&gt;</comment>
                            <comment id="12739835" author="nfantone" created="Thu, 6 Aug 2009 01:19:10 +0100"  >&lt;p&gt;I&apos;m terribly sorry. It was really busy these days at work, I didn&apos;t have a second to take a look at this. Tomorrow, I promise, I&apos;ll post a new patch.&lt;/p&gt;</comment>
                            <comment id="12740166" author="nfantone" created="Thu, 6 Aug 2009 18:34:30 +0100"  >&lt;p&gt;Here it is. You&apos;ll notice some lines of code are commented after applying the patch. Just ignore them.&lt;/p&gt;</comment>
                            <comment id="12740382" author="gsingers" created="Fri, 7 Aug 2009 04:34:13 +0100"  >&lt;p&gt;Nicolas,&lt;/p&gt;

&lt;p&gt;I don&apos;t get the getStd() method now.  You moved the functionality from computeCentroid, but now getStd is never called, except in DisplayKMeans, which isn&apos;t part of the main execution path.  I also am not following the commenting out of the check to see if the two vectors are the same size, but then again, my eyes are glazing over in need of sleep.&lt;/p&gt;</comment>
                            <comment id="12740420" author="kshashi" created="Fri, 7 Aug 2009 06:56:15 +0100"  >&lt;p&gt;Declaring variables out of the loop  looks like an optimization, but I suppose, compiler will do that automatically. Even if it doesn&apos;t, the performance penalty is not so significant to sacrifice the code readability (which is arguable.) I ran a simple test with million loops over float multiplication &amp;amp; runs in 10ms. Moving the declarations outside the loop didn&apos;t change the results.&lt;/p&gt;

&lt;p&gt;The floating point comparision (lengthSquared != -1) is not correct. It should be (lengthSquared &amp;lt; 0), if at all we want to remove the Double object. &lt;/p&gt;</comment>
                            <comment id="12740519" author="gsingers" created="Fri, 7 Aug 2009 12:50:18 +0100"  >&lt;blockquote&gt;&lt;p&gt;Declaring variables out of the loop looks like an optimization, but I suppose, compiler will do that automatically&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This appears to be moving it right out of the computation all together, though, as getStd (we need a better name for that!) isn&apos;t even in the computation anymore, AFAICT.&lt;/p&gt;</comment>
                            <comment id="12740527" author="srowen" created="Fri, 7 Aug 2009 13:25:59 +0100"  >&lt;p&gt;On the point of variable declaration &amp;#8211; the location of the declaration has no impact on performance. It is not somehow &apos;declared&apos; multiple times if within a loop. Pulling it out of the loop could even be very slightly slower, if it means you are forced to assign it a dummy value at initialization which is never used. There&apos;s one more benefit when referencing objects: an Object reference that exists, say, in a loop &amp;#8211; the reference goes out of scope when the loop finishes and its referent is immediately GC-able. If it&apos;s declared outside the loop, the reference exists until the larger containing block finishes. Unless you set it to null, but, that&apos;s more maintenance. It&apos;s a waste if the referent is large and not actually used anymore. This has actually bitten me in the past.&lt;/p&gt;

&lt;p&gt;So in general, in Java. declare variables as deep and late as possible. &lt;/p&gt;

&lt;p&gt;Agree with Shashikant that while using double instead of Double is nice, using -1 (really, use -1.0 &amp;#8211; double literals belong with double values) as a signal value probably isn&apos;t right here. Just say &amp;lt; 0.0.&lt;/p&gt;</comment>
                            <comment id="12740568" author="nfantone" created="Fri, 7 Aug 2009 15:33:05 +0100"  >&lt;p&gt;Thanks for the feedback, people. There are some things I&apos;d like to point out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;I don&apos;t get the getStd() method now. You moved the functionality from computeCentroid, but now getStd is never called.&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Please, feel free to contradict me here - That was the whole point: getStd() is NEVER called. I search through the entire mahout-core project and no call was found. So, why do we need to add functionality where it does not belong, and moreover, it is not needed? If there&apos;s a computeCentroid() method, then let it compute a centroid... not estimate some deviation (which isn&apos;t actually used,  anyway) hundreds of times iteratively.  If there&apos;s a real need for that particular value, then create a method that calculates it. As there was no such method, I thought it was appropriate to use getStd().&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;I also am not following the commenting out of the check to see if the two vectors are the same size&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Feel free to uncomment those lines and leave them as they once were. I realize that a size check is a needed and healthy thing, but then again, if the purpose of the &quot;optimized&quot; version of distance() is performance-gain perhaps we should consider dropping it out (there are a couple of methods in the project that already do that - check getDistanceSquared() is SparseVector).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;Declaring variables out of the loop looks like an optimization, but I suppose, compiler will do that automatically. Even if it doesn&apos;t, the performance penalty is not so significant to sacrifice the code readability (which is arguable.)&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have had this discussion dozens of times with my colleagues at the University and partners at work. Though I can accept the root of the issue at hand is kind of a myth (whether declaration inside of a loop impacts performance negatively or not), instantiation of thousands of unnecessary objects IS costly in JAVA - not to mention garbage-accumulative. At the end of the day, avoiding this kind of code-writing is, more often than not, a healthy thing to do - even if it means a decrease in readability.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;I ran a simple test with million loops over float multiplication &amp;amp; runs in 10ms. Moving the declarations outside the loop didn&apos;t change the results.&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;floats are a primitive type. Want a simple test? Use String, which also happen to be immutable. Something as straightforward as,&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;String s = new String(&quot;sample-string&quot;);&lt;/tt&gt;&lt;br/&gt;
{{for (int i = 0; i &amp;lt; 250000; i++)&lt;/p&gt;
{s += &quot;anotherString&quot;;}
&lt;p&gt;}}&lt;/p&gt;

&lt;p&gt;will take several minutes to complete thanks to the cost of instantiating a new String each iteration with a new value. Now, replace String with StringBuilder, += with append, and voil&#224;: no more instantiations, same result, few seconds.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;The floating point comparision (lengthSquared != -1) is not correct. It should be (lengthSquared &amp;lt; 0), if at all we want to remove the Double object.&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agree. You are completely right.&lt;/p&gt;</comment>
                            <comment id="12740573" author="gsingers" created="Fri, 7 Aug 2009 15:41:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;Please, feel free to contradict me here - That was the whole point: getStd() is NEVER called.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah, I see now.  We were in deed calculating it in computeCentroid lots of times, but it is only ever used for DisplayKMeans.  You are correct.&lt;/p&gt;


&lt;p&gt;As for loop unrolling, etc. it is usually best to let the compiler take care of that.  As for strings, you should never, ever use String for concatenation.  It is a horrible performance drain.  StringBuilder is definitely the way to go.  Especially be on the look out for String concats in logging statements that aren&apos;t guarded by if (log.isDebugEnabled())&lt;/p&gt;

&lt;p&gt;I will fix the lengthSquared comparison and commit.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12740576" author="gsingers" created="Fri, 7 Aug 2009 15:46:57 +0100"  >&lt;p&gt;What about the commenting out of:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (centroid.size() != v.size()) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems like if we are going to do this in this distance measure, we should do it in the other distance measure.  We could push this out a layer via documentation and require the caller to do the check, if required.  Otherwise, do we have some guarantee that the centroid and the vector are the same cardinality in all cases of calls to this method?  I think we do explicitly for the Cluster calls, but that isn&apos;t the same.&lt;/p&gt;</comment>
                            <comment id="12740577" author="srowen" created="Fri, 7 Aug 2009 15:55:49 +0100"  >&lt;p&gt;Still picking on this loops / declaration issue:&lt;/p&gt;

&lt;p&gt;Instantiating unneeded objects is indeed, obviously, a waste. But the changes in the last patch (which I think we&apos;re discussing?) does not save instantiations &amp;#8211; nor does it really add any either. I don&apos;t follow this point then.&lt;/p&gt;

&lt;p&gt;The point illustrated by the String loop example has nothing to do with how variables declared, and everything to do with the difference between String and StringBuilder. It doesn&apos;t seem to address the point previously raised.&lt;/p&gt;

&lt;p&gt;Here is a difference that doesn&apos;t matter:&lt;/p&gt;

&lt;p&gt;String s = null;&lt;br/&gt;
for (int i = 0; i &amp;lt; 250000; i++)&lt;/p&gt;
{s = &quot;anotherString: &quot; + i;}

&lt;p&gt;for (int i = 0; i &amp;lt; 250000; i++)&lt;/p&gt;
{String s = &quot;anotherString: &quot; + i;}

&lt;p&gt;In fact the first is ever so slightly worse since it sets s to null, but the value is unused. But it is worse for another reason: s continues to point to &quot;anotherString: 249999&quot; after the loop terminates, which is also pointless.&lt;/p&gt;

&lt;p&gt;Hence I would undo that part of the patch unless there is another purpose to it I missed.&lt;/p&gt;</comment>
                            <comment id="12740580" author="srowen" created="Fri, 7 Aug 2009 16:00:46 +0100"  >&lt;p&gt;And finally to Grant&apos;s point about compilers and loop unrolling, and I may be stating things people already know:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This isn&apos;t an example of unrolling is it?&lt;/li&gt;
	&lt;li&gt;javac will never perform optimizations like this, or really of any kind, given it is bound to output certain bytecode given a certain input program. So I tend to code efficiently from the get-go in Java&lt;/li&gt;
	&lt;li&gt;(But ProGuard can, I love ProGuard)&lt;/li&gt;
	&lt;li&gt;But the JIT compiler might at runtime. The theory, and I like it, is that this half of the compilation is better done by a process on the platform where the target code will run. For instance it can inline some method calls from even non-final classes, even though Java method invocation is always polymorphic, if it could detect that there doesn&apos;t happen to be any subclasses loaded in the JVM at runtime. That would not be possible at compile time.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12740587" author="nfantone" created="Fri, 7 Aug 2009 16:29:58 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The point illustrated by the String loop example has nothing to do with how variables declared, and everything to do with the difference between String and StringBuilder. It doesn&apos;t seem to address the point previously raised.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not quite right. The difference between String and StringBuilder IS EXACTLY the difference between instantiating thousands of objects and re-using just one, which is, I believe, the matter at hand here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In fact the first is ever so slightly worse since it sets s to null, but the value is unused. But it is worse for another reason: s continues to point to &quot;anotherString: 249999&quot; after the loop terminates, which is also pointless.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you create new Strings in a loop, then you&apos;ll have as many objects as iterations pointing to &quot;anotherString: 0&quot;, &quot;anotherString: 1&quot;, ..., &quot;anotherString: 121410&quot;, and so on, waiting to be gcollected - which may not even happen in the short term. Even more pointless, following your logic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hence I would undo that part of the patch unless there is another purpose to it I missed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Perhaps someone could run a profiler with and without the latest patch? I tend to think the gain in execution speed would not be significant if any at all, as some of you have stated. However, unless code readability is a priority, I see no harm in changing something that can only help performance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This isn&apos;t an example of unrolling is it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s right. It is not. It is about the cost of instatiation vs. reusability of short-lived objects.&lt;/p&gt;</comment>
                            <comment id="12740589" author="srowen" created="Fri, 7 Aug 2009 16:37:11 +0100"  >&lt;p&gt;Are we talking about the same patch? sections like this?&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+    double distance = 0.0;
+    Vector clusterCenter = null;
     for (Cluster cluster : clusters) {
-      double distance = measure.distance(point, cluster.getCenter());
-      if (nearestCluster == null || distance &amp;lt; nearestDistance) {
+      clusterCenter = cluster.getCenter();
+      distance = measure.distance(clusterCenter.getLengthSquared(), clusterCenter, point);
+      if (distance &amp;lt; nearestDistance) {
         nearestCluster = cluster;
         nearestDistance = distance;
       }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The question here is indeed whether to declare distance and clusterCenter inside or outside the loop.&lt;/p&gt;

&lt;p&gt;While I completely agree with your statements, they do not seem to pertain to this.&lt;/p&gt;

&lt;p&gt;I think we&apos;re not talking about the same thing, since you pick up on the point of creating Strings in a loop &amp;#8211; which both my examples did. That is not a difference and not germane to the point I have in mind.&lt;/p&gt;

&lt;p&gt;I am further making the point that there is not a tradeoff between readability and speed here &amp;#8211; putting the declaration outside the loop actually makes both worse. I am quite sure this should be reversed.&lt;/p&gt;</comment>
                            <comment id="12740646" author="nfantone" created="Fri, 7 Aug 2009 18:39:32 +0100"  >&lt;p&gt;Jira is hardly the place to discuss this (almost moral) issues, as this tends to be a matter of personal choice most of the time. But I feel the urge to reply: some of you have really helped me out here at work with my project. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Are we talking about the same patch? sections like this? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes we are. And while we are taking a look at that quoted piece of code, I shall mention that the declaration of distance and clusterCenter outside the loop isn&apos;t the only thing being changed in the patch. There&apos;s also an elimination of a an unnecessary boolean evaluation in the if statement. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think we&apos;re not talking about the same thing, since you pick up on the point of creating Strings in a loop - which both my examples did. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We may not. Perhaps, my String example wasn&apos;t the happiest of them all - but it certainly IS showing how costly it is in JAVA to just instantiate and initialize an object. Furthermore, I thought I gave a counterargument to what you were implying with those examples.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am further making the point that there is not a tradeoff between readability and speed here - putting the declaration outside the loop actually makes both worse.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I can tell none of my propositions were convincing enough. Maybe someone else&apos;s? &lt;br/&gt;
&lt;a href=&quot;http://weblogs.java.net/blog/ddevore/archive/2006/08/declare_variabl_1.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://weblogs.java.net/blog/ddevore/archive/2006/08/declare_variabl_1.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12740654" author="srowen" created="Fri, 7 Aug 2009 18:54:46 +0100"  >&lt;p&gt;My comments &amp;#8211; which narrowly concern where to declare variables &amp;#8211; are relevant to the patch. It is not a matter of choice or style, or morality or whatever.&lt;/p&gt;

&lt;p&gt;Your point about Strings is undeniable, but is irrelevant to this question. See my counter-example for an example which would be relevant to the point I am trying to make.&lt;/p&gt;

&lt;p&gt;This blog posts corroborates exactly what I am saying. Declaring outside the loop only incurs an extra initialization. It also makes the point that it is not the same thing to &lt;b&gt;allocate an Object&lt;/b&gt; outside the loop, versus inside. Of course &amp;#8211; it&apos;s the difference between allocating one object and many. But, that is not what is happening in your patch.&lt;/p&gt;

&lt;p&gt;I think, then, all evidence suggests the variable declaration changes should be reverted. I am making no other claims. For instance, removing the unnecessary boolean condition remains a positive change I am sure.&lt;/p&gt;</comment>
                            <comment id="12740666" author="gsingers" created="Fri, 7 Aug 2009 19:21:36 +0100"  >&lt;p&gt;The only thing I&apos;m missing at this point is the question from earlier about the removal of the size comparison, then I am ready to commit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What about the commenting out of:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (centroid.size() != v.size()) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It seems like if we are going to do this in this distance measure, we should do it in the other distance measure. We could push this out a layer via documentation and require the caller to do the check, if required. Otherwise, do we have some guarantee that the centroid and the vector are the same cardinality in all cases of calls to this method? I think we do explicitly for the Cluster calls, but that isn&apos;t the same.&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="12740681" author="nfantone" created="Fri, 7 Aug 2009 20:06:36 +0100"  >&lt;p&gt;Sean, we are definitely not following each other. Probably due to my lack of communication skills.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your point about Strings is undeniable, but is irrelevant to this question. See my counter-example for an example which would be relevant to the point I am trying to make.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How could it be irrelevant when it&apos;s the exact same point I tried to make in my patch?  There&apos;s a Vector being instantiated and allocated in every for iteration, in every task, in every reduce job, in every node of the cluster. And it is not necessary. Every time. The very same thing goes for my String example... except with Strings.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Declaring outside the loop only incurs an extra initialization.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Extra? There&apos;s only ONE initialization. If the declaration is done inside the loop, thousands of initializations are going to be done. That&apos;s thousands minus one &quot;extra&quot; initializations.&lt;/p&gt;

&lt;p&gt;Grant, maybe you should leave the size comparison for now. It won&apos;t impact speed noticeably and, as of now, KMeans is only using the optimized distance calculation for both computing convergence and emitting points. Is there anywhere else a size check is done between input vectors? I believe there isn&apos;t.&lt;/p&gt;</comment>
                            <comment id="12740684" author="srowen" created="Fri, 7 Aug 2009 20:35:33 +0100"  >&lt;p&gt;Where in the patch do you move an object allocation from inside the loop to outside? I do not see this. If I did, indeed, you would have a point. That&apos;s why we may not be talking about the same thing. All I see is moving declarations.&lt;/p&gt;

&lt;p&gt;Yes, the one extra initialization is trivial. The fact that a reference lives on outside the loop unnecessarily is also tiny, but not as tiny. But they are both negatives. I think the consensus was it also was very slightly less readable? so we have a couple small negatives &amp;#8211; how can that add up to support for a change?&lt;/p&gt;</comment>
                            <comment id="12740694" author="nfantone" created="Fri, 7 Aug 2009 21:01:15 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Where in the patch do you move an object allocation from inside the loop to outside? I do not see this. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;getDistanceSquared() in SparseVector.java - Original&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; result = 0.0;
    Iterator&amp;lt;Vector.Element&amp;gt; iter = iterateNonZero();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
      Vector.Element elt = iter.next();
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; centroidValue = v.getQuick(elt.index());
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; delta = elt.get() - centroidValue;
      result += (delta * delta) - (centroidValue * centroidValue);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;getDistanceSquared() in SparseVector.java - Patched&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  ... 
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; result = 0.0;
    Iterator&amp;lt;Vector.Element&amp;gt; iter = iterateNonZero();
    Vector.Element elt = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; centroidValue = 0.0;
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; delta = 0.0;
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
      elt = iter.next();
      centroidValue = v.getQuick(elt.index());
      delta = elt.get() - centroidValue;
      result += (delta * delta) - (centroidValue * centroidValue);
    }
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;emitPointToNearestCluster() in Cluster.java - Patched&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 ...
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; distance = 0.0;
    Vector clusterCenter = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
     &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Cluster cluster : clusters) {
      clusterCenter = cluster.getCenter();
      distance = measure.distance(clusterCenter.getLengthSquared(), clusterCenter, point);
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (distance &amp;lt; nearestDistance) {
         nearestCluster = cluster;
         nearestDistance = distance;
       }
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;emitPointToNearestCluster() in Cluster.java - From Grant patch&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     Cluster nearestCluster = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
     &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; nearestDistance = &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.MAX_VALUE;
     &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Cluster cluster : clusters) {
      Vector clusterCenter = cluster.getCenter();
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; distance = measure.distance(clusterCenter.getLengthSquared(), clusterCenter, point);
       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (nearestCluster == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || distance &amp;lt; nearestDistance) {
         nearestCluster = cluster;
         nearestDistance = distance;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And in outputPointWithClusterInfo(), which is actually the same bit of code as this last one.&lt;/p&gt;</comment>
                            <comment id="12740814" author="gsingers" created="Sat, 8 Aug 2009 02:44:31 +0100"  >&lt;p&gt;I committed an in-between version of &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-121&quot; title=&quot;Speed up distance calculations for sparse vectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-121&quot;&gt;&lt;del&gt;MAHOUT-121&lt;/del&gt;&lt;/a&gt;-new-distance-optimization and &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-121&quot; title=&quot;Speed up distance calculations for sparse vectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-121&quot;&gt;&lt;del&gt;MAHOUT-121&lt;/del&gt;&lt;/a&gt;-cluster-distance.patch. The former didn&apos;t pass tests due to not checking to see if the nearestCluster was null.  I did, however, move that check for null to the second part of the || clause, as it is the less frequent case and is likely to be short-circuited by the distance check.&lt;/p&gt;

&lt;p&gt;Committed revision 802283.&lt;/p&gt;</comment>
                            <comment id="12740854" author="srowen" created="Sat, 8 Aug 2009 09:25:09 +0100"  >&lt;p&gt;Nope, you have not avoided an object allocation in either case. You are simply moving around declarations of object references. (Does it help to note that objects are never allocated on the stack as in C++?) Therefore, I think the prior arguments apply. This very slightly hurts performance and readability and should be reversed.&lt;/p&gt;</comment>
                            <comment id="12741068" author="gsingers" created="Sun, 9 Aug 2009 12:33:15 +0100"  >&lt;blockquote&gt;&lt;p&gt;The floating point comparision (lengthSquared != -1) is not correct. It should be (lengthSquared &amp;lt; 0), if at all we want to remove the Double object.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually, this should be &amp;gt;= 0, since we are returning lengthSquared in that case (before we we&apos;re returning it if it was not null).&lt;/p&gt;</comment>
                            <comment id="12742406" author="gsingers" created="Wed, 12 Aug 2009 16:20:49 +0100"  >&lt;p&gt;I think we have this one now, resolving.&lt;/p&gt;</comment>
                            <comment id="12744973" author="kshashi" created="Wed, 19 Aug 2009 10:57:47 +0100"  >&lt;p&gt;OrderedIntDoubleMapping, the primitive hash map used in sparse vector, is not fast enough.  Compared to Trove, it is an order of magnitude slower. &lt;/p&gt;

&lt;p&gt;How can we improve the performance? &lt;/p&gt;</comment>
                            <comment id="12744977" author="kshashi" created="Wed, 19 Aug 2009 11:03:28 +0100"  >&lt;p&gt;Colt by CERN is as good as Trove.  Is it compatible with Apache License? &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://acs.lbl.gov/~hoschek/colt/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://acs.lbl.gov/~hoschek/colt/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Colt&apos;s License:  &lt;a href=&quot;http://acs.lbl.gov/~hoschek/colt/license.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://acs.lbl.gov/~hoschek/colt/license.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12744980" author="srowen" created="Wed, 19 Aug 2009 11:11:24 +0100"  >&lt;p&gt;These two implementations use a different algorithm. This implemented is the analog of TreeSet in Java Collections, whereas you are talking about an analog of HashMap.&lt;/p&gt;

&lt;p&gt;A hash is likely going to be faster for gets. I imagine it&apos;s slower when required to produce the keys/values in order. Which did you benchmark? let&apos;s make sure we are asking the right question first.&lt;/p&gt;

&lt;p&gt;Of course, if we find that in fact we far more often need fast gets than fast iteration, we do want a hash-based implementation instead. Is that the conclusion? (And could we make a new issue to continue that!)&lt;/p&gt;

&lt;p&gt;We can&apos;t use Trove of course. The parts of colt we need appear to be Apache-compatible. That seems like a fine thing to try next.&lt;/p&gt;

&lt;p&gt;If it&apos;s not suitable, we can easily roll our own primitive-based hash. We already have a long-&amp;gt;Object map implementation.&lt;/p&gt;</comment>
                            <comment id="12744991" author="kshashi" created="Wed, 19 Aug 2009 11:50:11 +0100"  >
&lt;p&gt;We need mix of iteration and map get/set. but the map operations are dominant. Hence I tested with get/set operations.  Getting iterator in case of Colt is less than 2x slower. &lt;/p&gt;

&lt;p&gt;1. Vector addition: &lt;br/&gt;
Get iterator on one vector.  &lt;br/&gt;
Iterate on the indices to get values from that vector.   &lt;br/&gt;
For the same indices, get values from current vector.&lt;br/&gt;
Set the result in the current vector. &lt;/p&gt;

&lt;p&gt;In the current implementation, &quot;get&quot; is O(log n) operation. And &quot;set&quot; involves copying the array copy operation, which is quadratic (I think).&lt;/p&gt;

&lt;p&gt;2. SparseVector getDistanceSquared()&lt;br/&gt;
Operational complexity is similar to that of vector addition, except there is no &quot;set&quot; operation.&lt;/p&gt;
</comment>
                            <comment id="12744992" author="srowen" created="Wed, 19 Aug 2009 11:52:23 +0100"  >&lt;p&gt;Exactly, sounds like this is ultimately the wrong choice given the usage profile. Delete the class and switch to Colt then?&lt;/p&gt;</comment>
                            <comment id="12744995" author="kshashi" created="Wed, 19 Aug 2009 11:58:51 +0100"  >&lt;p&gt;Trying it out...&lt;/p&gt;</comment>
                            <comment id="12745015" author="gsingers" created="Wed, 19 Aug 2009 12:56:06 +0100"  >&lt;p&gt;Let&apos;s open a new issue for this one, as this issue is really long and overloaded at this point. &lt;/p&gt;

&lt;p&gt;Solr uses Colt via a download mechanism, so we probably could use it via the POM, but not sure if we can distribute it.  &lt;/p&gt;

&lt;p&gt;FWIW, in my profiling, I think find() was the major operation.&lt;/p&gt;</comment>
                            <comment id="12745082" author="reden" created="Wed, 19 Aug 2009 16:33:08 +0100"  >&lt;p&gt;Hi guys. I&apos;m the lead developer for the Trove project. Shashi mentioned the problem you&apos;re having with Trove&apos;s license. I appreciate the interest and would like to accommodate your usage. I&apos;m going to speak to the original developer about dual-licensing.&lt;/p&gt;

&lt;p&gt;My specific question is, would the MPL be an acceptable license for usage or does it have to be APL? (Not implying that I necessarily have a problem with APL... just checking options.)&lt;/p&gt;</comment>
                            <comment id="12745097" author="gsingers" created="Wed, 19 Aug 2009 17:08:20 +0100"  >&lt;p&gt;Hi Rob,&lt;/p&gt;

&lt;p&gt;Thanks!  Here&apos;s the ASF&apos;s stance on licenses:  &lt;a href=&quot;http://apache.org/legal/resolved.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://apache.org/legal/resolved.html&lt;/a&gt;.   I think for our use case, MPL would be fine, since we are just using it as a library and not extending/deriving from it, even if ASL would be better.&lt;/p&gt;

&lt;p&gt;-Grant&lt;/p&gt;</comment>
                            <comment id="12745101" author="bmargulies" created="Wed, 19 Aug 2009 17:14:12 +0100"  >&lt;p&gt;Trove is LGPL. If it were published to maven, which is currently is not in any reliable way, I think mahout can have an optional dependency. As per the referenced, LGPL is precluded in a full dependency.&lt;/p&gt;</comment>
                            <comment id="12745118" author="gsingers" created="Wed, 19 Aug 2009 17:49:11 +0100"  >&lt;p&gt;Right, we wouldn&apos;t be able to bundle it (either as a GPL or MPL), which is a bit of a downer for Mahout.  What we would likely need to do is provide an abstraction layer that can use IntDoubleMapping if Trove is not present on the classpath.  &lt;/p&gt;

&lt;p&gt;Either that, or we do the work to improve IntDoubleMapping.&lt;/p&gt;</comment>
                            <comment id="12895162" author="eugenparaschiv" created="Wed, 4 Aug 2010 08:11:11 +0100"  >&lt;p&gt;Hi all, &lt;br/&gt;
I know that this issue is closed, but was there any resolution to the Trove dual licensing proposal? Thanks. &lt;/p&gt;</comment>
                            <comment id="12895164" author="tdunning" created="Wed, 4 Aug 2010 08:14:51 +0100"  >&lt;blockquote&gt;
&lt;p&gt;any resolution to the Trove dual licensing proposal? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;See Mahout collections.&lt;/p&gt;

&lt;p&gt;Faster than trove and liberally licensed.&lt;/p&gt;
</comment>
                            <comment id="12895284" author="reden" created="Wed, 4 Aug 2010 16:02:28 +0100"  >&lt;p&gt;Trove&apos;s licensing won&apos;t be changing. The biggest problem is that we&apos;ve had too many committers over the years and we&apos;d have to get all of their permission to change it. So, sorry I can&apos;t be more obliging.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12404768">MAHOUT-77</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12411700" name="Canopy_Wiki_1000-2009-06-24.snapshot" size="1870221" author="gsingers" created="Wed, 24 Jun 2009 21:55:51 +0100"/>
                            <attachment id="12414832" name="MAHOUT-121-cluster-distance.patch" size="1328" author="gsingers" created="Wed, 29 Jul 2009 02:05:23 +0100"/>
                            <attachment id="12415028" name="MAHOUT-121-distance-optimization.patch" size="5326" author="nfantone" created="Thu, 30 Jul 2009 16:42:21 +0100"/>
                            <attachment id="12415764" name="MAHOUT-121-new-distance-optimization.patch" size="4743" author="nfantone" created="Thu, 6 Aug 2009 18:34:30 +0100"/>
                            <attachment id="12411070" name="MAHOUT-121.patch" size="115599" author="srowen" created="Thu, 18 Jun 2009 13:39:59 +0100"/>
                            <attachment id="12410971" name="MAHOUT-121.patch" size="113280" author="srowen" created="Wed, 17 Jun 2009 20:05:17 +0100"/>
                            <attachment id="12410950" name="MAHOUT-121.patch" size="110820" author="srowen" created="Wed, 17 Jun 2009 16:38:11 +0100"/>
                            <attachment id="12410934" name="MAHOUT-121.patch" size="109263" author="srowen" created="Wed, 17 Jun 2009 14:56:44 +0100"/>
                            <attachment id="12410885" name="MAHOUT-121.patch" size="8840" author="gsingers" created="Wed, 17 Jun 2009 03:28:31 +0100"/>
                            <attachment id="12410959" name="MAHOUT-121jfe.patch" size="111477" author="jeastman" created="Wed, 17 Jun 2009 17:39:09 +0100"/>
                            <attachment id="12410596" name="Mahout1211.patch" size="9337" author="srowen" created="Sun, 14 Jun 2009 19:53:08 +0100"/>
                            <attachment id="12411814" name="doc-vector-4k" size="4968148" author="kshashi" created="Thu, 25 Jun 2009 14:19:25 +0100"/>
                            <attachment id="12411717" name="mahout-121.patch" size="16370" author="gsingers" created="Wed, 24 Jun 2009 23:04:24 +0100"/>
                            <attachment id="12408795" name="mahout-121.patch" size="21078" author="kshashi" created="Fri, 22 May 2009 12:47:26 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 22 May 2009 18:23:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9944</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy72n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23297</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>