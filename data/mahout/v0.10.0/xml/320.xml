<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:21:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-320/MAHOUT-320.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-320] Modify IntPairWritable in LDA implementation to be binary comparable to improve performance.</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-320</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Per discussion with Robin, modifying o.a.m.clustering.lda.IntPairWritable to be binary comparable will improve the performance of the comparison operations during a sort because no marshaling will need to occur to compare IntPairWritable instances.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12457933">MAHOUT-320</key>
            <summary>Modify IntPairWritable in LDA implementation to be binary comparable to improve performance.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robinanil">Robin Anil</assignee>
                                    <reporter username="drew.farris">Drew Farris</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Mar 2010 04:52:40 +0000</created>
                <updated>Sun, 31 Oct 2010 15:49:09 +0000</updated>
                            <resolved>Mon, 24 May 2010 03:33:34 +0100</resolved>
                                    <version>0.3</version>
                                    <fixVersion>0.4</fixVersion>
                                    <component>Clustering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12840459" author="drew.farris" created="Wed, 3 Mar 2010 04:54:01 +0000"  >&lt;p&gt;binary comparable implementation plus unit test for get/set, writable methods and comparator.&lt;/p&gt;</comment>
                            <comment id="12840530" author="srowen" created="Wed, 3 Mar 2010 08:22:21 +0000"  >&lt;p&gt;On a related note, as Robin mentioned, this class could be merged with Bigram, or vice versa. I don&apos;t think ankur would be too bothered &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; about replacing Bigram, but, it actually seems to be more well developed. It does binary comparison too for instance. Might this patch take the extra step of merging the two?&lt;/p&gt;</comment>
                            <comment id="12840553" author="robinanil" created="Wed, 3 Mar 2010 09:44:25 +0000"  >&lt;p&gt;This too does binary comparison right. compare by first then second&lt;/p&gt;</comment>
                            <comment id="12840560" author="srowen" created="Wed, 3 Mar 2010 10:16:44 +0000"  >&lt;p&gt;Oh what are we referring to by &apos;binary&apos;?&lt;/p&gt;

&lt;p&gt;Bigram has some bits like this that seem to be able to compare based on a byte representation &amp;#8211; assuming that&apos;s a nice optimization within Hadoop:&lt;/p&gt;

&lt;p&gt;   @Override&lt;br/&gt;
    public int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2) {&lt;br/&gt;
      int ret;&lt;br/&gt;
      try &lt;/p&gt;
{
        int firstb1 = WritableComparator.readVInt(b1, s1);
        int firstb2 = WritableComparator.readVInt(b2, s2);
        ret = firstb1 - firstb2;
      }
&lt;p&gt; catch (IOException ioe) &lt;/p&gt;
{
        throw new IllegalArgumentException(ioe);
      }
&lt;p&gt;      return ret;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;(Though we gotta fix this returning firstb1 - firstb2 thing &amp;#8211; overflow makes this result incorrect for about 1 in 16 possible pair values!)&lt;/p&gt;</comment>
                            <comment id="12840564" author="robinanil" created="Wed, 3 Mar 2010 10:21:22 +0000"  >&lt;p&gt;This was what intpairwritable does now. This patch has a faster comparison. Byte based &lt;/p&gt;</comment>
                            <comment id="12840575" author="srowen" created="Wed, 3 Mar 2010 10:59:35 +0000"  >&lt;p&gt;I can see that at the end now. How do you feel about replacing Bigram with this and moving it to a common package? Also how about using Bigram&apos;s variable-length encoding? It might be more efficient as well as avoid you writing routines to serialize an int to a byte stream.&lt;/p&gt;</comment>
                            <comment id="12840592" author="drew.farris" created="Wed, 3 Mar 2010 11:48:03 +0000"  >&lt;p&gt;The big win here is sortability of the binary form. I&apos;m not certain that IntPairWritables that used variable length encoding would be inherently sortable without converting them back to ints.&lt;/p&gt;</comment>
                            <comment id="12840593" author="srowen" created="Wed, 3 Mar 2010 11:50:55 +0000"  >&lt;p&gt;Good point. That&apos;s what Bigram is doing. Ankur any thoughts?&lt;/p&gt;

&lt;p&gt;I looove consolidation of code.&lt;/p&gt;</comment>
                            <comment id="12840601" author="ankur" created="Wed, 3 Mar 2010 12:06:54 +0000"  >&lt;p&gt;Binary comparison looks more or less the same in both the classes. Its the data serialization/serialization where Bigram scores over IntPairWritable. Bigram encodes/decodes the data in VInt format which uses zero compressed encodings for more info see o.a.h.io.WritableUtils.java. The encoding can give considerable savings when serializing huge amounts of numeric data. &lt;/p&gt;</comment>
                            <comment id="12840617" author="drew.farris" created="Wed, 3 Mar 2010 12:16:22 +0000"  >&lt;p&gt;I certainlly can&apos;t argure about the space savings. VInts are definitely more efficient in that sense. However, the conversion to/from VInts gets expensive in the sense that during the sort, Bigram is performing multiple decodes per pair that is compared. The question that remains is whether the cost of slinging the extra data around mitigates the gain from not doing those decodes in IntPairWritable.&lt;/p&gt;</comment>
                            <comment id="12840619" author="ankur" created="Wed, 3 Mar 2010 12:17:00 +0000"  >&lt;p&gt;And yes I see the issue with (firstb1 - firstb2) thing in Bigram. This definitely needs to be fixed. I don&apos;t mind replacing one with either. Just that we should be using VInt format for ser/de on the wire.&lt;/p&gt;</comment>
                            <comment id="12840620" author="robinanil" created="Wed, 3 Mar 2010 12:17:08 +0000"  >&lt;p&gt;Yeah VInt Does give savings. but the overhead i see in LDA shows that the same saving if not more can be achieved by output compression. I have just integrated the two. and moved it to common. Since there is no test for co-occurrence, I cannot verify if i dint break it or not. &lt;/p&gt;

&lt;p&gt;Ankut can you just verify as soon as i upload the patch&lt;/p&gt;</comment>
                            <comment id="12840626" author="robinanil" created="Wed, 3 Mar 2010 12:22:43 +0000"  >&lt;p&gt;Has my tweaks in LDA too along with removal of bigram&lt;/p&gt;</comment>
                            <comment id="12840629" author="robinanil" created="Wed, 3 Mar 2010 12:29:38 +0000"  >&lt;p&gt;Oops missed out the changes in LDA Tests. Here you go&lt;/p&gt;</comment>
                            <comment id="12840634" author="ankur" created="Wed, 3 Mar 2010 12:42:24 +0000"  >&lt;p&gt;I can&apos;t apply the patch cleanly. Here is what it says&lt;/p&gt;

&lt;p&gt;can&apos;t find file to patch at input line 1285&lt;br/&gt;
Perhaps you used the wrong -p or --strip option?&lt;br/&gt;
The text leading up to this was:&lt;br/&gt;
--------------------------&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Index: core/src/main/java/org/apache/mahout/common/IntPairWritable.java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;===================================================================&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;#8212; core/src/main/java/org/apache/mahout/common/IntPairWritable.java	(revision 918394)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+++ core/src/main/java/org/apache/mahout/common/IntPairWritable.java	(working copy)&lt;br/&gt;
--------------------------&lt;br/&gt;
File to patch:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="12840636" author="ankur" created="Wed, 3 Mar 2010 12:43:08 +0000"  >&lt;p&gt;Robin, Can you update your revision and create a fresh patch ?&lt;/p&gt;</comment>
                            <comment id="12840656" author="robinanil" created="Wed, 3 Mar 2010 13:36:55 +0000"  >&lt;p&gt;new patch from trunk&lt;/p&gt;</comment>
                            <comment id="12840695" author="robinanil" created="Wed, 3 Mar 2010 15:27:23 +0000"  >&lt;p&gt;Any issues or does it look good to commit ?&lt;/p&gt;</comment>
                            <comment id="12841059" author="ankur" created="Thu, 4 Mar 2010 04:46:41 +0000"  >&lt;p&gt;It still complains that it cannot find the file to patch - core/src/main/java/org/apache/mahout/common/IntPairWritable.java. Also it looks like the unti test for IntPairWritable is still lying under o.a.m.clustering.lda.&lt;/p&gt;</comment>
                            <comment id="12841065" author="robinanil" created="Thu, 4 Mar 2010 05:24:21 +0000"  >&lt;p&gt;I will commit the LDA part with IntWritable, and leave out bigram. Create another patch just for co-occurrence&lt;/p&gt;</comment>
                            <comment id="12841181" author="srowen" created="Thu, 4 Mar 2010 11:01:32 +0000"  >&lt;p&gt;After the fact here, but I&apos;m going to fix a number of small issues in IntPairWritable, and three that I think are important enough to call out. I keep seeing these kinds of subtle bugs:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;hashCode() and equals() not only must both be implemented, but must be consistent. Frequency uses &apos;pair&apos; in hashCode() but not in equals()&lt;/li&gt;
	&lt;li&gt;and you can hash doubles much faster with RandomUtils.hashDouble()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;compareTo() must be consistent with equals(). It returns 0 exactly when equals() returns true. Frequency.compareTo() can never return 0, which is never correct, even if only because this breaks symmetry&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;compareTo() that decides ordering based on two integer values should never be implemented with a subtraction, unless you&apos;re absolutely certain the following can&apos;t occur: trying to order a=Integer.MAX_VALUE and b=Integer.MIN_VALUE will put a before b, if you base it on a-b&apos;s value, since it overflows to negative.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12841187" author="srowen" created="Thu, 4 Mar 2010 11:09:42 +0000"  >&lt;p&gt;While I&apos;m here, what&apos;s the point in the &quot;^ 0x80&quot; express in get/putInt()? It flips the top bit when writing, and unflips when reading, which seems like a confusing no-op. What am I missing?&lt;/p&gt;</comment>
                            <comment id="12841220" author="drew.farris" created="Thu, 4 Mar 2010 12:45:42 +0000"  >&lt;p&gt;I haven&apos;t reviewed the round of patches, when I wrote the initial patch the &apos;^ 0x80&apos; was in there so that the byte array holding the ints would be sorted in natural int order. &lt;/p&gt;</comment>
                            <comment id="12841221" author="srowen" created="Thu, 4 Mar 2010 12:48:19 +0000"  >&lt;p&gt;I see. It&apos;s to make positive numbers negative and vice versa, in order to use WritableComparable&apos;s compare() function on bytes, which assumes values are essentially unsigned. Surely this will end in tears to store values this way. In particular it&apos;s already broken Frequency in the same class, which reads the values as unsigned ints directly.&lt;/p&gt;

&lt;p&gt;Here&apos;s my complete patch for all said items.&lt;/p&gt;</comment>
                            <comment id="12870487" author="drew.farris" created="Mon, 24 May 2010 03:33:34 +0100"  >&lt;p&gt;Looks like this one has been resolved for awhile.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12437885" name="IntPairWritable.patch" size="9253" author="srowen" created="Thu, 4 Mar 2010 12:48:19 +0000"/>
                            <attachment id="12437850" name="MAHOUT-320.patch" size="22898" author="robinanil" created="Thu, 4 Mar 2010 05:40:49 +0000"/>
                            <attachment id="12437739" name="MAHOUT-320.patch" size="56785" author="robinanil" created="Wed, 3 Mar 2010 13:36:54 +0000"/>
                            <attachment id="12437734" name="MAHOUT-320.patch" size="56785" author="robinanil" created="Wed, 3 Mar 2010 12:29:38 +0000"/>
                            <attachment id="12437732" name="MAHOUT-320.patch" size="54120" author="robinanil" created="Wed, 3 Mar 2010 12:22:43 +0000"/>
                            <attachment id="12437676" name="MAHOUT-320.patch" size="8057" author="drew.farris" created="Wed, 3 Mar 2010 04:54:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 3 Mar 2010 08:22:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9745</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy5uf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23098</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>