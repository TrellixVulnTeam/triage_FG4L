<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:16:44 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-904/MAHOUT-904.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-904] SplitInput should support randomizing the input</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-904</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;For some learning tasks, we need the input to be randomized (SGD) instead of blocks of labels all at once.  SplitInput is a useful tool for setting up train/test files but it currently doesn&apos;t support randomizing the input.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12533316">MAHOUT-904</key>
            <summary>SplitInput should support randomizing the input</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cendrillon">Raphael Cendrillon</assignee>
                                    <reporter username="gsingers">Grant Ingersoll</reporter>
                        <labels>
                            <label>MAHOUT_INTRO_CONTRIBUTE</label>
                    </labels>
                <created>Wed, 30 Nov 2011 17:04:34 +0000</created>
                <updated>Thu, 9 Feb 2012 14:01:10 +0000</updated>
                            <resolved>Mon, 2 Jan 2012 19:12:47 +0000</resolved>
                                                    <fixVersion>0.6</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13165094" author="cendrillon" created="Thu, 8 Dec 2011 08:51:21 +0000"  >&lt;p&gt;Is this still open? If so I could start to take a look.&lt;/p&gt;</comment>
                            <comment id="13165128" author="gsingers" created="Thu, 8 Dec 2011 10:10:00 +0000"  >&lt;p&gt;Go for it!&lt;/p&gt;</comment>
                            <comment id="13165948" author="cendrillon" created="Fri, 9 Dec 2011 08:51:18 +0000"  >&lt;p&gt;This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.&lt;/p&gt;

&lt;p&gt;A couple of comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;</comment>
                            <comment id="13165954" author="jiraposter@reviews.apache.org" created="Fri, 9 Dec 2011 08:55:39 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1212249 &lt;br/&gt;
  /trunk/examples/src/test/java/org/apache/mahout/classifier/bayes/SplitBayesInputTest.java 1212249 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13165956" author="jiraposter@reviews.apache.org" created="Fri, 9 Dec 2011 08:57:39 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-12-09 08:57:18.798303)&lt;/p&gt;


&lt;p&gt;Review request for Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Summary (updated)&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1212249 &lt;br/&gt;
  /trunk/examples/src/test/java/org/apache/mahout/classifier/bayes/SplitBayesInputTest.java 1212249 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13168367" author="jiraposter@reviews.apache.org" created="Tue, 13 Dec 2011 13:19:30 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/#review3876&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/#review3876&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;Thoughts:&lt;br/&gt;
this class is often run from the command line, so we should add CLI support for telling it to randomly permute.&lt;/p&gt;

&lt;p&gt;I wonder if we should make this a map-reduce job.  Perhaps we split out the existing version and leave as is and then add a new MR one that can do the permutation.  One idea there would be to generate random keys (by appending onto the existing key) and letting the shuffle effectively do the permutations.  Then, during reduce phase we simply strip off the random part of the key and output.  I don&apos;t know how bad this would hurt the shuffle, but it seems like it would work functionally anyway.&lt;/p&gt;

&lt;p&gt;Otherwise, the approach seems reasonable.  I don&apos;t know off hand if there is a better way of doing it (even though I wish there were).&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Grant&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-12-09 08:57:18, Raphael Cendrillon wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-12-09 08:57:18)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for Grant Ingersoll.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;/trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1212249 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;/trunk/examples/src/test/java/org/apache/mahout/classifier/bayes/SplitBayesInputTest.java 1212249 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Raphael&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13168399" author="jiraposter@reviews.apache.org" created="Tue, 13 Dec 2011 14:09:30 +0000"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-12-13 13:19:13, Grant Ingersoll wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Thoughts:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; this class is often run from the command line, so we should add CLI support for telling it to randomly permute.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; I wonder if we should make this a map-reduce job.  Perhaps we split out the existing version and leave as is and then add a new MR one that can do the permutation.  One idea there would be to generate random keys (by appending onto the existing key) and letting the shuffle effectively do the permutations.  Then, during reduce phase we simply strip off the random part of the key and output.  I don&apos;t know how bad this would hurt the shuffle, but it seems like it would work functionally anyway.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Otherwise, the approach seems reasonable.  I don&apos;t know off hand if there is a better way of doing it (even though I wish there were).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Separating the randomization sounds like a nice idea.  I still think that the SGD jobs need to be able to randomize within a single map as well.&lt;/p&gt;

&lt;p&gt;Permuting in the shuffle should work fine.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ted&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/#review3876&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/#review3876&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-12-09 08:57:18, Raphael Cendrillon wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-12-09 08:57:18)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for Grant Ingersoll.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;/trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1212249 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;/trunk/examples/src/test/java/org/apache/mahout/classifier/bayes/SplitBayesInputTest.java 1212249 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Raphael&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13168453" author="jiraposter@reviews.apache.org" created="Tue, 13 Dec 2011 15:43:30 +0000"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-12-13 13:19:13, Grant Ingersoll wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Thoughts:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; this class is often run from the command line, so we should add CLI support for telling it to randomly permute.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; I wonder if we should make this a map-reduce job.  Perhaps we split out the existing version and leave as is and then add a new MR one that can do the permutation.  One idea there would be to generate random keys (by appending onto the existing key) and letting the shuffle effectively do the permutations.  Then, during reduce phase we simply strip off the random part of the key and output.  I don&apos;t know how bad this would hurt the shuffle, but it seems like it would work functionally anyway.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Otherwise, the approach seems reasonable.  I don&apos;t know off hand if there is a better way of doing it (even though I wish there were).&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Ted Dunning wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Separating the randomization sounds like a nice idea.  I still think that the SGD jobs need to be able to randomize within a single map as well.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Permuting in the shuffle should work fine.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Lance had a similar suggestion. I think there are two tasks required here. One is to randomize the training examples within a split, and the other is to randomize the order of different splits. I&apos;ll update this to use map reduce to randomize the splits aswell. Lance had a good suggestion for this based on hashing/randomizing the key.&lt;/p&gt;

&lt;p&gt;Given that we will be parallelizing this, I guess each split should fit comfortably into memory? If that&apos;s the case randomization of the lines within a split can be done much more efficiently.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Raphael&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/#review3876&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/#review3876&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-12-09 08:57:18, Raphael Cendrillon wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-12-09 08:57:18)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for Grant Ingersoll.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;- the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;/trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1212249 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;/trunk/examples/src/test/java/org/apache/mahout/classifier/bayes/SplitBayesInputTest.java 1212249 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Raphael&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13168466" author="gsingers" created="Tue, 13 Dec 2011 16:02:16 +0000"  >&lt;p&gt;Note, I think we can still run all of this from the SplitInput driver.&lt;/p&gt;</comment>
                            <comment id="13170671" author="jiraposter@reviews.apache.org" created="Fri, 16 Dec 2011 01:37:30 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-12-16 01:37:06.294565)&lt;/p&gt;


&lt;p&gt;Review request for Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Rewrote as map-reduce job using downsampling and random key in mapper stage. Actual key from mapper input is preserved and recovered at reducer. Added IntVectorWritable class to support concatenation of actual key with vector.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/integration/src/main/java/org/apache/mahout/utils/RandomPermuteJob.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/test/java/org/apache/mahout/utils/TestRandomPermuteJob.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/IntVectorWritable.java PRE-CREATION &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13170677" author="cendrillon" created="Fri, 16 Dec 2011 01:48:37 +0000"  >&lt;p&gt;At the moment this is written only to handle vectors. I&apos;m having an issue extending this to cover any record type. One option is to use a GenericWritable however this could be wasteful since the classname is stored with every record. Another approach could be to use generics, however I can&apos;t seem to use generics in setMapOutputKeyClass(). I&apos;d like to do something like this:&lt;/p&gt;

&lt;p&gt;  job.setMapOutputKeyClass(PairWritable&amp;lt;IntWritable,VectorWritable&amp;gt;.class);&lt;/p&gt;

&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;</comment>
                            <comment id="13170688" author="jiraposter@reviews.apache.org" created="Fri, 16 Dec 2011 02:01:30 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-12-16 02:01:25.825802)&lt;/p&gt;


&lt;p&gt;Review request for mahout, Ted Dunning, lancenorskog, and Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/integration/src/main/java/org/apache/mahout/utils/RandomPermuteJob.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/test/java/org/apache/mahout/utils/TestRandomPermuteJob.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/IntVectorWritable.java PRE-CREATION &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13171141" author="jiraposter@reviews.apache.org" created="Fri, 16 Dec 2011 19:10:30 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-12-16 19:09:13.382909)&lt;/p&gt;


&lt;p&gt;Review request for mahout, Ted Dunning, lancenorskog, and Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Modified to accept any writable as the value (instead of just VectorWritable). This still requires the generic class PairWritable to be extended for each class of interest so that this extended class can be passed into setMapOutputValueClass(). I&apos;m not sure if this is the best approach, any suggestions would be appreciated!&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/integration/src/main/java/org/apache/mahout/utils/RandomPermuteJob.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/PairWritable.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/IntVectorWritable.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/test/java/org/apache/mahout/utils/TestRandomPermuteJob.java PRE-CREATION &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13171879" author="gsingers" created="Sun, 18 Dec 2011 15:07:23 +0000"  >&lt;p&gt;Is there a patch here for your latest?  I see the diff, but not the patch.&lt;/p&gt;</comment>
                            <comment id="13171909" author="cendrillon" created="Sun, 18 Dec 2011 17:47:05 +0000"  >&lt;p&gt;Hi Grant,&lt;/p&gt;

&lt;p&gt;The diffs on reviewboard are all absolute, so you can just save the latest revision as a patch file and apply it to trunk. I&apos;ll update the attachment here as well.&lt;/p&gt;</comment>
                            <comment id="13172007" author="gsingers" created="Mon, 19 Dec 2011 02:59:04 +0000"  >&lt;p&gt;OK.  I still just like patches &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;Couple of things: &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;We have a Pair class already, we should just make PairWritable use that and put it in the appropriate package.&lt;/li&gt;
	&lt;li&gt;I think we should try to hook this into SplitInput such that we can still have many of it&apos;s options available, just done at bigger scale.  Either that or we need a Driver for this.  Ultimately, though, we need a way to create train/test splits where the train split is randomized.&lt;/li&gt;
&lt;/ol&gt;

</comment>
                            <comment id="13172009" author="gsingers" created="Mon, 19 Dec 2011 03:00:07 +0000"  >&lt;p&gt;Adds driver, reuses Pair, not integrated into SplitInput yet.&lt;/p&gt;</comment>
                            <comment id="13172012" author="cendrillon" created="Mon, 19 Dec 2011 03:19:29 +0000"  >&lt;p&gt;Thanks Grant. I&apos;ll update to drop the Pair class in and integrate into SplitInput.&lt;/p&gt;

&lt;p&gt;By the way, did you notice the way that PairWritable needs to be extended for each object type (e.g. IntVectorWritable if the object is a Vector)?&lt;/p&gt;

&lt;p&gt;Does this seem like a reasonable approach? It would require that a class be created for each object type of interest which is somewhat painfull. However I can&apos;t see a simpler approach since setMapOutputValueClass() needs to take a class that has a default constructor (and PairWritable doesn&apos;t have a default constructor since it doesn&apos;t know how to call new for first and second since it doesn&apos;t know what class first and second belong to).&lt;/p&gt;


</comment>
                            <comment id="13172014" author="lancenorskog" created="Mon, 19 Dec 2011 03:27:34 +0000"  >&lt;p&gt;Hi-&lt;/p&gt;

&lt;p&gt;Don&apos;t see the &apos;add review&apos; button. Can it extend AbstractJob?&lt;/p&gt;</comment>
                            <comment id="13172021" author="cendrillon" created="Mon, 19 Dec 2011 03:47:10 +0000"  >&lt;p&gt;Hi Lance. Is that a general comment, or specifically for the issue regarding PairWritable/IntVectorWritable?&lt;/p&gt;</comment>
                            <comment id="13174609" author="cendrillon" created="Thu, 22 Dec 2011 04:35:50 +0000"  >&lt;p&gt;Implemented downsampling more efficiently through mapper run(), implemented random permutation through sort comparator class, added driver, integrated into SplitInput&lt;/p&gt;</comment>
                            <comment id="13174610" author="cendrillon" created="Thu, 22 Dec 2011 04:36:48 +0000"  >&lt;p&gt;Implemented downsampling more efficiently through mapper run(), implemented random permutation through sort comparator class, added driver, integrated into SplitInput&lt;/p&gt;</comment>
                            <comment id="13174611" author="jiraposter@reviews.apache.org" created="Thu, 22 Dec 2011 04:39:30 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-12-22 04:38:08.261769)&lt;/p&gt;


&lt;p&gt;Review request for mahout, Ted Dunning, lancenorskog, and Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Implemented downsampling more efficiently through mapper run(), implemented random permutation through sort comparator class, added driver, integrated into SplitInput&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1215567 &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/test/java/org/apache/mahout/utils/SplitInputTest.java 1215567 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13174837" author="gsingers" created="Thu, 22 Dec 2011 15:13:08 +0000"  >&lt;p&gt;Converts SplitInput to use AbstractJob.&lt;/p&gt;

&lt;p&gt;I think this is pretty close to being ready.  I wonder if there is more opportunity for overlap between the sequential and the m/r version, but we can iterate on that later if people want.&lt;/p&gt;</comment>
                            <comment id="13174845" author="cendrillon" created="Thu, 22 Dec 2011 15:33:30 +0000"  >&lt;p&gt;Thanks Grant. I was wondering the same thing, for example supporting randomSelectionSize in addition to randomSelectionPct. However supporting size based splits may not be quite so straightforward since the size is generally unknown if the SequenceFile is large, plus its split across mappers.&lt;/p&gt;

&lt;p&gt;I also would have liked to have the training and test outputs go to different directories (instead of just using different filename prefixes), but this is not quite so straightforward due to issues with the new API (unless I just write to the SequenceFile by hand in the reducer which raises its own issues).  I think this can be made a little neater once we move to Hadoop 0.21.&lt;/p&gt;

&lt;p&gt;Is there something else that you had in mind?&lt;/p&gt;


</comment>
                            <comment id="13174852" author="jiraposter@reviews.apache.org" created="Thu, 22 Dec 2011 15:45:30 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-12-22 15:45:05.856640)&lt;/p&gt;


&lt;p&gt;Review request for mahout, Ted Dunning, lancenorskog, and Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Grant&apos;s changes&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java 1222286 &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1222286 &lt;br/&gt;
  /trunk/integration/src/test/java/org/apache/mahout/utils/SplitInputTest.java 1222286 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13174873" author="jiraposter@reviews.apache.org" created="Thu, 22 Dec 2011 16:05:30 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-12-22 16:03:47.932528)&lt;/p&gt;


&lt;p&gt;Review request for mahout, Ted Dunning, lancenorskog, and Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Grant&apos;s changes&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java 1222286 &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1222286 &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/test/java/org/apache/mahout/utils/SplitInputTest.java 1222286 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13175252" author="gsingers" created="Fri, 23 Dec 2011 03:45:57 +0000"  >&lt;p&gt;This needs some more work, as I don&apos;t think we can assume IntWritables.  For instance, see the usage in asf-email-examples.sh which needs to use the split functionality.&lt;/p&gt;

&lt;p&gt;This patch does not fully work yet.&lt;/p&gt;</comment>
                            <comment id="13175260" author="cendrillon" created="Fri, 23 Dec 2011 04:01:22 +0000"  >&lt;p&gt;I think we can replace IntWritable with WritableComparable and it should take care of this. I&apos;ll update the patch and post shortly.&lt;/p&gt;</comment>
                            <comment id="13175408" author="srowen" created="Fri, 23 Dec 2011 12:50:50 +0000"  >&lt;p&gt;(I don&apos;t know if this is a relevant comment, but we ought to be using VarIntWritable and VarLongWritable, not IntWritable and LongWritable, for better space savings.)&lt;/p&gt;</comment>
                            <comment id="13175617" author="cendrillon" created="Fri, 23 Dec 2011 23:13:43 +0000"  >&lt;p&gt;Replaced IntWritable with WritableComparable so that any key class can be used. Added instantiation of Configuration to make sure tests pass when using SplitInputJob from within code&lt;/p&gt;</comment>
                            <comment id="13175618" author="jiraposter@reviews.apache.org" created="Fri, 23 Dec 2011 23:16:30 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3092/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-12-23 23:14:34.869723)&lt;/p&gt;


&lt;p&gt;Review request for mahout, Ted Dunning, lancenorskog, and Grant Ingersoll.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Replaced IntWritable with WritableComparable so that any key class can be used. Added instantiation of Configuration to make sure tests pass when using SplitInputJob from within code&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Early support for randomizing input in SplitInput class. This is an early start but I&apos;ve posted it up just to check if I&apos;m on the right track.  A couple of comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently the code runs through the entire file looking for the line corresponding to the random index. This has to be repeated for every line, which is slow and somewhat ugly.&lt;/li&gt;
	&lt;li&gt;the permutation indices are stored in an array. This could lead to scaling issues if the number of input lines is large. This problem may also exist with ridx in the existing code. One option is to use a linear feedback shift register to generate a permutation sequence on the fly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any suggestions would be very welcome!&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-904&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java 1221886 &lt;br/&gt;
  /trunk/examples/bin/asf-email-examples.sh 1221886 &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java 1221886 &lt;br/&gt;
  /trunk/integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java PRE-CREATION &lt;br/&gt;
  /trunk/integration/src/test/java/org/apache/mahout/utils/SplitInputTest.java 1221886 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3092/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3092/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Raphael&lt;/p&gt;
</comment>
                            <comment id="13175968" author="gsingers" created="Mon, 26 Dec 2011 16:36:00 +0000"  >&lt;p&gt;ASF examples at least run for SGD now, although the results are horrible.&lt;/p&gt;</comment>
                            <comment id="13176887" author="gsingers" created="Wed, 28 Dec 2011 23:26:57 +0000"  >&lt;p&gt;upping the cardinality seems to fix things.  Now need to try w/ more labels.&lt;/p&gt;</comment>
                            <comment id="13178509" author="hudson" created="Mon, 2 Jan 2012 18:54:58 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #1287 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1287/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1287/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-904&quot; title=&quot;SplitInput should support randomizing the input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-904&quot;&gt;&lt;del&gt;MAHOUT-904&lt;/del&gt;&lt;/a&gt;: Add randomization to split input&lt;/p&gt;

&lt;p&gt;gsingers : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1226475&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1226475&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/bin/asf-email-examples.sh&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TestASFEmail.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainASFEmail.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/SplitInput.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/SplitInputTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13178518" author="cendrillon" created="Mon, 2 Jan 2012 19:19:34 +0000"  >&lt;p&gt;Thanks Grant!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12508802" name="MAHOUT-904.patch" size="49457" author="gsingers" created="Wed, 28 Dec 2011 23:26:57 +0000"/>
                            <attachment id="12508632" name="MAHOUT-904.patch" size="49025" author="gsingers" created="Mon, 26 Dec 2011 16:36:00 +0000"/>
                            <attachment id="12508579" name="MAHOUT-904.patch" size="43948" author="cendrillon" created="Fri, 23 Dec 2011 23:13:43 +0000"/>
                            <attachment id="12508485" name="MAHOUT-904.patch" size="43519" author="gsingers" created="Fri, 23 Dec 2011 03:45:56 +0000"/>
                            <attachment id="12508397" name="MAHOUT-904.patch" size="40273" author="gsingers" created="Thu, 22 Dec 2011 15:13:08 +0000"/>
                            <attachment id="12508346" name="MAHOUT-904.patch" size="32302" author="cendrillon" created="Thu, 22 Dec 2011 04:35:50 +0000"/>
                            <attachment id="12507859" name="MAHOUT-904.patch" size="14052" author="gsingers" created="Mon, 19 Dec 2011 03:00:07 +0000"/>
                            <attachment id="12507841" name="MAHOUT-904.patch" size="11382" author="cendrillon" created="Sun, 18 Dec 2011 17:48:33 +0000"/>
                            <attachment id="12506713" name="MAHOUT-904.patch" size="8204" author="cendrillon" created="Fri, 9 Dec 2011 08:40:45 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 8 Dec 2011 08:51:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>219044</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy29b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22517</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>