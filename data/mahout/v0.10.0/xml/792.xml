<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:19:23 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-792/MAHOUT-792.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-792] Add new stochastic decomposition code</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-792</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;I have figured out some simplification for our SSVD algorithms.  This eliminates the QR decomposition and makes life easier.&lt;/p&gt;

&lt;p&gt;I will produce a patch that contains the following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a CholeskyDecomposition implementation that does pivoting (and thus rank-revealing) or not.  This should actually be useful for solution of large out-of-core least squares problems.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;an in-memory SSVD implementation that should work for matrices up to about 1/3 of available memory.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;an out-of-core SSVD threaded implementation that should work for very large matrices.  It should take time about equal to the cost of reading the input matrix 4 times and will require working disk roughly equal to the size of the input.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12519512">MAHOUT-792</key>
            <summary>Add new stochastic decomposition code</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tdunning">Ted Dunning</assignee>
                                    <reporter username="tdunning">Ted Dunning</reporter>
                        <labels>
                    </labels>
                <created>Sat, 20 Aug 2011 22:33:48 +0100</created>
                <updated>Thu, 2 May 2013 03:29:43 +0100</updated>
                            <resolved>Mon, 16 Jan 2012 06:01:26 +0000</resolved>
                                                    <fixVersion>0.6</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13088515" author="tdunning" created="Mon, 22 Aug 2011 03:47:26 +0100"  >&lt;p&gt;This is the current state.  This has an in-memory implementation and an out-of-core implementation for review.  The out-of-core implementation needs to be changed to use threads well before it is production ready.&lt;/p&gt;</comment>
                            <comment id="13088516" author="tdunning" created="Mon, 22 Aug 2011 03:48:11 +0100"  >&lt;p&gt;This presumes &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-793&quot; title=&quot;Move MurmurHash to math&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-793&quot;&gt;&lt;del&gt;MAHOUT-793&lt;/del&gt;&lt;/a&gt; and includes them in this patch.&lt;/p&gt;</comment>
                            <comment id="13088777" author="tdunning" created="Mon, 22 Aug 2011 16:49:57 +0100"  >&lt;p&gt;Github branch &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; available at git://github.com/tdunning/mahout.git&lt;/p&gt;

&lt;p&gt;That provides more details on successive changes.&lt;/p&gt;</comment>
                            <comment id="13089217" author="tdunning" created="Tue, 23 Aug 2011 03:17:55 +0100"  >&lt;p&gt;Updated with small fixes.  The tests are enough better now that I am beginning to believe that this might be correct.&lt;/p&gt;

&lt;p&gt;Github has been updated as well.&lt;/p&gt;</comment>
                            <comment id="13089635" author="dlyubimov" created="Tue, 23 Aug 2011 19:16:51 +0100"  >&lt;p&gt;a-- It looks like it affects a lot of not very relevant stuff? (GraidentMachine, AbstractClassifier files)&lt;/p&gt;

&lt;p&gt;b-- Ted, are you going to implement MR version? do you have a parallelization strategy?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13089659" author="tdunning" created="Tue, 23 Aug 2011 19:41:17 +0100"  >&lt;p&gt;On (a), the patch includes &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; since it depends on it.  When I commit that JIRA, it will be easier to read.&lt;/p&gt;

&lt;p&gt;On (b), see the paper.  Yes.&lt;/p&gt;</comment>
                            <comment id="13091902" author="dlyubimov" created="Fri, 26 Aug 2011 18:50:07 +0100"  >&lt;p&gt;This looks like a very promising shortcut for MR operationally. &lt;/p&gt;

&lt;p&gt;AFAICT, you suggest to compute Y&apos;Y and then derive R^-1 out of it and use it in another pass to derive B. Y&apos;Y is indeed operationally much easier to accumulate and produce with MR in the same projection step. &lt;/p&gt;

&lt;p&gt;One thing that i don&apos;t understand is how you are proposing to derive this R^-1. To do Cholesky on Y&apos;Y, take transpose and inverse and declare it R^-1?  &lt;/p&gt;</comment>
                            <comment id="13091927" author="dlyubimov" created="Fri, 26 Aug 2011 19:18:52 +0100"  >&lt;p&gt;more thoughts: &lt;/p&gt;

&lt;p&gt;1 &amp;#8211; it looks like this method is compressing a lot of info into k+p upper-triangular R. I guess there&apos;s more potential for rounding errors there. (I am not buying too much into rounding errors though). &lt;/p&gt;

&lt;p&gt;2 &amp;#8211; Argument of Q matrix being large is not very convincing to me. Q is m x (k+p), that is, assuming A is much wider (in terms of non-zero element average #) which it should be in order for projection method to make sense at all, it is a fraction of A. Besides, it is written in blocks by mappers, and read by mappers, so each mapper sees only one block of size say 30,000 x (k+p), which it will not be, assuming A is sufficiently wide, and assuming k+p=500, amounts to 120mb per mapper. So there&apos;s not so much actual memory pressure, that&apos;s what distributed computations are for. Same goes for dense operations, we just distribute them. &lt;/p&gt;

&lt;p&gt;3 &amp;#8211; it looks like you are writing B as output of the second MR, which is (k+p) x n. Going back to argument of a &apos;big Q&apos;, we can&apos;t assume that B would be any less. In fact, some time ago i came to conclusion that it looks like projection method would be much more efficient if input is wide rather than tall since projection compression factor would be much better for what seems to be fairly inexpensive operation (since it costs nothing to redistribute Omega which is only backed by one long number as a random gen seed, as opposed to actual long or wide bands such as B or Q).  So we can&apos;t exclude very wide inputs. &lt;/p&gt;


&lt;p&gt;Overall it looks like a great improvement. I am not convinced that it would cut processing time that much (it looks it has the same amount of proposed MR steps but it looks like all of them would require shuffle-and-sort and reduce phase, whereas with QR is a reduceless process), but it definitely reduces complexity of MR implementation and i would be very eager to try it out. Certainly all i said is the first impression  and intuition only; and in my experience intuition turns out to be wrong surprisingly often as far as benchmark guesstimates are concerned.&lt;/p&gt;</comment>
                            <comment id="13091944" author="tdunning" created="Fri, 26 Aug 2011 19:46:33 +0100"  >&lt;blockquote&gt;
&lt;p&gt;One thing that i don&apos;t understand is how you are proposing to derive this R^-1. To do Cholesky on Y&apos;Y, take transpose and inverse and declare it R^-1?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is just a notational deficiency.  The CholeskyDecomposition has solveLeft and solveRight methods that do use back or forward substitution to effectively right or left multiply by the inverse of R (or R&apos;).  I find my current naming to be confusing and think that it might be better to have the methods timesLinv, timesRinv and leftTimesLinv and leftTimesRinv or some such because that would match the actual mathematical exposition better.   If you have a good idea for naming, please suggest it.&lt;/p&gt;</comment>
                            <comment id="13092001" author="tdunning" created="Fri, 26 Aug 2011 21:24:01 +0100"  >&lt;blockquote&gt;
&lt;p&gt;1 &#8211; it looks like this method is compressing a lot of info into k+p upper-triangular R. I guess there&apos;s more potential for rounding errors there. (I am not buying too much into rounding errors though).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is absolutely true.  On the other hand, this is only really putting as much information into that matrix as we ultimately want back out (i.e. we &lt;b&gt;are&lt;/b&gt; reducing dimension here).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2 &#8211; Argument of Q matrix being large is not very convincing to me. Q is m x (k+p), that is, assuming A is much wider (in terms of non-zero element average #) which it should be in order for projection method to make sense at all, it is a fraction of A. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;But A is sparse so Y, B and Q are all about the same (storage) size as A.  In fact, if k+p &amp;gt; average number of elements per row of A, then Y, B and Q will all be &lt;b&gt;larger&lt;/b&gt; than A.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Besides, it is written in blocks by mappers, and read by mappers, so each mapper sees only one block of size say 30,000 x (k+p), which it will not be, assuming A is sufficiently wide, and assuming k+p=500, amounts to 120mb per mapper. So there&apos;s not so much actual memory pressure, that&apos;s what distributed computations are for. Same goes for dense operations, we just distribute them.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course.  But using the Cholesky trick means that Q&apos;A can be done by reading only A instead of Q and A.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3 &#8211; it looks like you are writing B as output of the second MR, which is (k+p) x n. Going back to argument of a &apos;big Q&apos;, we can&apos;t assume that B would be any less. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I completely agree.  B is too big to store all in memory and could easily be comparable to or larger than A.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In fact, some time ago i came to conclusion that it looks like projection method would be much more efficient if input is wide rather than tall since projection compression factor would be much better for what seems to be fairly inexpensive operation (since it costs nothing to redistribute Omega which is only backed by one long number as a random gen seed, as opposed to actual long or wide bands such as B or Q). So we can&apos;t exclude very wide inputs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Indeed.&lt;/p&gt;

&lt;p&gt;The common web-case could easily wind up that way.  You might have a million users exploring a billion web pages.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Overall it looks like a great improvement. I am not convinced that it would cut processing time that much (it looks it has the same amount of proposed MR steps but it looks like all of them would require shuffle-and-sort and reduce phase, whereas with QR is a reduceless process), but it definitely reduces complexity of MR implementation&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is might thought exactly.  It also decreases the memory load of in-memory implementations which is good.  But as you say later, intuition is extraordinarily dangerous for run-times.&lt;/p&gt;</comment>
                            <comment id="13092071" author="dlyubimov" created="Fri, 26 Aug 2011 22:37:56 +0100"  >&lt;blockquote&gt;&lt;p&gt;But A is sparse so Y, B and Q are all about the same (storage) size as A. In fact, if k+p &amp;gt; average number of elements per row of A, then Y, B and Q will all be larger than A.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s true. I had one guy who had millions of rows but only 10 average measurements per row. Probably ratings or something. it is not going to be efficient (cpu-wise) in these cases. &lt;/p&gt;

&lt;p&gt;But my response has always been, if you have input thinner than projection, then why even use projection? It&apos;s my understanding that the whole idea of this is to drastically reduce the input to analyze. Original paper actually never suggested to compute BB&apos; as far as i remember, it&apos;s something i did to open up the n by sacrificing rounding. In original paper, they compute SVD of B, so if B is greater than input, it would only cost more to compute SVD of one. So that&apos;s what i understood &amp;#8211; B is &lt;em&gt;supposed&lt;/em&gt; to be much less than A in original work, otherwise there&apos;s not much sense. &lt;/p&gt;</comment>
                            <comment id="13092099" author="tdunning" created="Fri, 26 Aug 2011 23:29:32 +0100"  >&lt;blockquote&gt;
&lt;p&gt;But my response has always been, if you have input thinner than projection, then why even use projection?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Because it is cheaper to process a thin dense matrix than a wide sparse one.&lt;/p&gt;

&lt;p&gt;Likewise, even if B is bigger than A, it can be much cheaper to compute the SVD of B than of A if only because the Cholesky trick works on the skinny dense case.  If the Cholesky decomposition loses some accuracy then a QR or LQ decomposition could be used the same way.&lt;/p&gt;</comment>
                            <comment id="13092404" author="dlyubimov" created="Sun, 28 Aug 2011 02:06:37 +0100"  >&lt;p&gt;Ted, &lt;br/&gt;
what&apos;s degree of stability of the CholeskyDecomposition code? I am getting test failure &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Failed tests: 
  testSingularValues(org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest): expected:&amp;lt;0.0&amp;gt; but was:&amp;lt;5250028.000000007&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13092428" author="tdunning" created="Sun, 28 Aug 2011 06:57:37 +0100"  >&lt;p&gt;It should be very good.&lt;/p&gt;

&lt;p&gt;I have a few corrections that I need to post. That might be the cause of&lt;br/&gt;
your problem.&lt;/p&gt;

&lt;p&gt;On Saturday, August 27, 2011, Dmitriy Lyubimov (JIRA) &amp;lt;jira@apache.org&amp;gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=13092404#comment-13092404&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-792?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=13092404#comment-13092404&lt;/a&gt;]&lt;br/&gt;
test failure&lt;br/&gt;
 testSingularValues(org.apache.mahout.math.ssvd.SequentialOutOfCoreSvdTest):&lt;br/&gt;
expected:&amp;lt;0.0&amp;gt; but was:&amp;lt;5250028.000000007&amp;gt;&lt;br/&gt;
eliminates the QR decomposition and makes life easier.&lt;br/&gt;
rank-revealing) or not.  This should actually be useful for solution of&lt;br/&gt;
large out-of-core least squares problems.&lt;br/&gt;
about 1/3 of available memory.&lt;br/&gt;
large matrices.  It should take time about equal to the cost of reading the&lt;br/&gt;
input matrix 4 times and will require working disk roughly equal to the size&lt;br/&gt;
of the input.&lt;/p&gt;</comment>
                            <comment id="13095251" author="hudson" created="Thu, 1 Sep 2011 13:09:07 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #1012 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1012/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1012/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - kill the cardinality array and size() for matrices.  Use rowSize() and columnSize() instead.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - Fix RTM to avoid size() and cardinality array.&lt;/p&gt;

&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164016&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164016&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/eval/InMemoryFactorizationEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/InMemoryBayesDatastore.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/discriminative/LinearTrainer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/NaiveBayesModel.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/HmmUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/MatrixWritable.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UpperTriangular.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJobTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DiagonalMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/Matrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/MatrixView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/PermutedVectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/PivotedMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomTrinaryMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractTestVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestMatrixView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseColumnMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseRowMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestVectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/als/AlternateLeastSquaresSolverTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/decomposer/SolverTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13096570" author="lancenorskog" created="Sat, 3 Sep 2011 04:49:55 +0100"  >&lt;p&gt;Please run this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) {
	  RandomTrinaryMatrix rtm = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RandomTrinaryMatrix(0, 30, 40, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
	  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row = 0; row &amp;lt; 30; row++) 
		  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; column = 0; column &amp;lt; 40; column++)
			  &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(rtm.get(row, column));	
	  rtm = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RandomTrinaryMatrix(0, 30, 40, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
	  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row = 0; row &amp;lt; 30; row++) 
		  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; column = 0; column &amp;lt; 40; column++)
			  &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(rtm.get(row, column));	
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13096733" author="tdunning" created="Sat, 3 Sep 2011 19:09:08 +0100"  >&lt;p&gt;Lance,&lt;/p&gt;

&lt;p&gt;Can you say why?  What is it that one would see here?&lt;/p&gt;
</comment>
                            <comment id="13096776" author="lancenorskog" created="Sun, 4 Sep 2011 01:29:03 +0100"  >&lt;p&gt;Yes, bad habit. The &quot;low-grade&quot; mode does not emit 0. The high-grade mode does not emit negative numbers.&lt;/p&gt;

&lt;p&gt;I&apos;m curious: what is the math behind an even split of -1,0,1? The Achlioptas math says +1/-1 or +1/-1/0/0/0 are OK. So, the low-grade mode is proven correct, just not what the comment describes &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

</comment>
                            <comment id="13102388" author="dlyubimov" created="Mon, 12 Sep 2011 01:14:21 +0100"  >&lt;p&gt;so, this is not fully committed yet? &lt;/p&gt;

&lt;p&gt;I don&apos;t see our version of CholeskyDecomposition class on the trunk (only apache-math&apos;s one). Neighter do i think i can see the SequentialOutOfCoreSVD etc. that seems to be present in the patch posted?&lt;/p&gt;</comment>
                            <comment id="13102403" author="tdunning" created="Mon, 12 Sep 2011 02:35:23 +0100"  >&lt;p&gt;No.  I was waiting for comments.  If I can find time between packing this evening I will commit.&lt;/p&gt;</comment>
                            <comment id="13114109" author="dlyubimov" created="Sun, 25 Sep 2011 02:13:20 +0100"  >&lt;p&gt;Another thing that I realized while working on &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-797&quot; title=&quot;MapReduce SSVD: provide alternative B-pipeline per B=R&amp;#39; ^{-1} Y&amp;#39;A&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-797&quot;&gt;&lt;del&gt;MAHOUT-797&lt;/del&gt;&lt;/a&gt;, is that this execution plan requires to pass 3 times over input of A instead of existing 1 pass, if we are not saving Y. (first time to comute Y&apos;Y, second time to compute B, and third time to compute U).&lt;/p&gt;

&lt;p&gt;So we either have to save Y, or incur passes over big dataset (assuming A is much densier than Y). &lt;/p&gt;

&lt;p&gt;And we we do save Y then we swap Q for Y,  which are of the same size.&lt;/p&gt;

&lt;p&gt;So.. it looks like we got to save Y... or it is not worth it.&lt;/p&gt;</comment>
                            <comment id="13114218" author="tdunning" created="Sun, 25 Sep 2011 12:17:27 +0100"  >&lt;p&gt;If you look at my comments in sd-2, you see that Y&apos;Y is computed in one pass and then in the pass where you compute Q&apos;A using Y, I just recompute Y on the fly and solve using R to get a block of Q, also on the fly.  Since we are reading blocks of A anyway in this pass, it costs nothing except a small amount of computation to avoid the storing of Y.&lt;/p&gt;
</comment>
                            <comment id="13114282" author="dlyubimov" created="Sun, 25 Sep 2011 16:58:04 +0100"  >&lt;p&gt;Yes... and that&apos;s what I mean. I was implementing it as Y-on-the-fly. But that implies full pass over A every time we need access to Y, and we need it 3 times without option to parallelize. That&apos;s why I think I need to save it.&lt;/p&gt;

&lt;p&gt;Also, I am thinking one step ahead, power iterations. In that chain, Yi is AB&apos;, and there&apos;s no way to compute that on the fly. So, for first stab at it, it would make my life easier to save Y with low degree of replication, and then use the rest of pipeline the same way regardless of i. Besides, I think that saving Y is supposed to make things more efficient, not less, with most generic cases, assuming A &amp;gt;&amp;gt; Y in volume.&lt;/p&gt;</comment>
                            <comment id="13114286" author="tdunning" created="Sun, 25 Sep 2011 17:07:36 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Yes... and that&apos;s what I mean. I was implementing it as Y-on-the-fly. But that implies full pass over A every time we need access to Y, and we need it 3 times without option to parallelize. That&apos;s why I think I need to save it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Without the power iterations, every time that Y is needed, A is also scanned.  That means that Y-on-the-fly is fine.&lt;/p&gt;

&lt;p&gt;But I think that saving Y is a fine idea.  It should usually (but surprisingly, not at all always) be smaller than A.  It is the same size as Q.&lt;/p&gt;</comment>
                            <comment id="13114287" author="tdunning" created="Sun, 25 Sep 2011 17:10:59 +0100"  >&lt;blockquote&gt;
&lt;p&gt;So we either have to save Y, or incur passes over big dataset (assuming A is much densier than Y).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think that this got mangled in the typing.  A is sparser than Y and may be larger or smaller depending on the average number of non-zero elements.  If A is binary or contains only small integers, then it could well be smaller on disk than Y if a continuous random matrix Omega is used.  If Omega contains only -1, 0, 1 (trinary values), then the values of Y should compress nearly as well as the values of A and will be dense as well so we don&apos;t have to store the indices.&lt;/p&gt;</comment>
                            <comment id="13114425" author="dlyubimov" created="Mon, 26 Sep 2011 02:11:39 +0100"  >&lt;p&gt;I like trinary matrix idea. I would like to add it as an option with time. Indeed, may save space fro specific extrasoarse cases.&lt;/p&gt;</comment>
                            <comment id="13123652" author="danbri" created="Sun, 9 Oct 2011 10:33:41 +0100"  >&lt;p&gt;Looking to try this, I tried applying the last patch per &lt;a href=&quot;https://cwiki.apache.org/MAHOUT/how-to-contribute.html#HowToContribute-Applyingapatch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/MAHOUT/how-to-contribute.html#HowToContribute-Applyingapatch&lt;/a&gt;  i.e. &apos;patch -p 0 -i &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt;.patch&apos;, and get a pile of &apos;Reversed (or previously applied) patch detected&apos; and a &apos;can&apos;t find file to patch&apos;. Is some but not all of this now committed? &lt;/p&gt;

&lt;p&gt;Per &quot;Github branch &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; available at git://github.com/tdunning/mahout.git&quot;  I&apos;m looking around &lt;a href=&quot;https://github.com/tdunning/mahout&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/mahout&lt;/a&gt; but there&apos;s no branch listed of that name.  Presumably &lt;a href=&quot;https://github.com/tdunning/mahout/tree/new-stochastic&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/mahout/tree/new-stochastic&lt;/a&gt; is the place to go?&lt;/p&gt;</comment>
                            <comment id="13123743" author="tdunning" created="Sun, 9 Oct 2011 19:04:57 +0100"  >&lt;p&gt;Yes.  The new-stochastic branch is the one to go with.  It is a little (but not much) out of date.&lt;/p&gt;
</comment>
                            <comment id="13144452" author="tdunning" created="Fri, 4 Nov 2011 23:21:51 +0000"  >&lt;p&gt;Committed this new code.&lt;/p&gt;</comment>
                            <comment id="13175175" author="tdunning" created="Thu, 22 Dec 2011 23:55:49 +0000"  >&lt;p&gt;Finally committed these.  This provides Cholesky decomposition and several in-memory implementations of SSVD.  These are deficient with respect to power iterations.&lt;/p&gt;</comment>
                            <comment id="13175254" author="hudson" created="Fri, 23 Dec 2011 03:53:36 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #1265 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1265/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1265/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - More small fixes.  Added internal exception class for CholeskyDecomp&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - Made tests use odd sizes to detect row/column confusion.  Fixed small errors in out of core SVD&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - New SSVD codes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - Copyright fixes for Cholesky&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - Additional test for QR decomposition.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - Cholesky decomposition&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - New Cholesky decomposition for SSVD update.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - Switch Cholesky to views.&lt;/p&gt;

&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222517&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222517&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvd.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/CholeskyDecomposition.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222516&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222516&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvdTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/ssvd/SequentialBigSvd.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/ssvd/SequentialBigSvdTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222515&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222515&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/ssvd&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvd.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/ssvd&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvdTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/CholeskyDecomposition.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/ssvd/SequentialBigSvd.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/CholeskyDecompositionTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/ssvd&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/ssvd/SequentialBigSvdTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222514&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222514&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/QRDecompositionTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222513&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1222513&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/CholeskyDecomposition.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/CholeskyDecompositionTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13183273" author="tdunning" created="Tue, 10 Jan 2012 13:44:20 +0000"  >&lt;p&gt;I don&apos;t think that this issue should have been closed.&lt;/p&gt;</comment>
                            <comment id="13183275" author="tdunning" created="Tue, 10 Jan 2012 13:46:35 +0000"  >&lt;p&gt;My current theory is that the problem has to do with the ordering of the result of File.listFiles.  I just committed a cleanup fix.  The cleanups were important in any case.&lt;/p&gt;

&lt;p&gt;Let&apos;s see what Jenkins has to say.&lt;/p&gt;</comment>
                            <comment id="13183827" author="tdunning" created="Wed, 11 Jan 2012 03:12:59 +0000"  >&lt;p&gt;Jenkins succeeded after this change.  Good news.&lt;/p&gt;

&lt;p&gt;I will try on an EC2 instance to see if I can.&lt;/p&gt;

&lt;p&gt;Hmm... &lt;a href=&quot;https://builds.apache.org/job/mahout-nightly/752/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/mahout-nightly/752/console&lt;/a&gt; shows the evil test still failing.&lt;/p&gt;

&lt;p&gt;Very confusing.&lt;/p&gt;</comment>
                            <comment id="13183830" author="tdunning" created="Wed, 11 Jan 2012 03:23:23 +0000"  >&lt;p&gt;This is not obviously an ubuntu portability issue.  We have failures on ubuntu4 and ubuntu5, successes on ubuntu3 and solaris1.  And then a failure on ubuntu3.&lt;/p&gt;</comment>
                            <comment id="13186623" author="tdunning" created="Sun, 15 Jan 2012 23:51:10 +0000"  >&lt;p&gt;OK.  I think I have this failing test corralled.  The problem was that the test case was reading the results and assuming the blocks in the result matrix would be sorted.  This is true on the mac and sometimes true on ubuntu.  Once it fails, it is pretty consistent.&lt;/p&gt;

&lt;p&gt;I put a sort into test and all seems well.  I replicated the failure 3 times in a row, added the sort and verified that the failure did not occur on multiple runs.  I removed the sort and the failure returned consistently.&lt;/p&gt;

&lt;p&gt;Fix is forthcoming shortly as soon as I do the same tests on ubuntu 10 as well as 11.&lt;/p&gt;</comment>
                            <comment id="13186685" author="hudson" created="Mon, 16 Jan 2012 04:36:26 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #1309 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1309/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1309/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - Forced correct block ordering in out-of-core SVD.  Hopefully addresses ubuntu test failures.  Also forced file closing.&lt;/p&gt;

&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1231800&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1231800&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvd.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvdTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13186716" author="tdunning" created="Mon, 16 Jan 2012 06:01:27 +0000"  >&lt;p&gt;Last few Jenkins runs confirm my expectation that this problem was a bug in the test case itself that is now fixed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12519510">MAHOUT-790</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12520594">MAHOUT-797</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12491300" name="MAHOUT-792.patch" size="216529" author="tdunning" created="Tue, 23 Aug 2011 03:17:55 +0100"/>
                            <attachment id="12491175" name="MAHOUT-792.patch" size="236061" author="tdunning" created="Mon, 22 Aug 2011 03:47:26 +0100"/>
                            <attachment id="12491074" name="sd-2.pdf" size="145381" author="tdunning" created="Sun, 21 Aug 2011 00:28:01 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 23 Aug 2011 18:16:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3390</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy2y7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22629</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>