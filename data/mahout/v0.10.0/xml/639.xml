<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:24:52 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-639/MAHOUT-639.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-639] Need special case to handle creating a new SequentialAccessSparseVector from a large (&gt; 1M dims) random/hashed vector</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-639</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;When trying to transpose a matrix of tfidf vectors created from text documents (ASF mail archives in this case), there is a bottleneck in the TransposeJob&apos;s reducer when Mahout creates a new SequentialAccessSparseVector from a RandomAccessSparseVector after the while loop completes:&lt;/p&gt;

&lt;p&gt;      SequentialAccessSparseVector outVector = new SequentialAccessSparseVector(tmp);&lt;/p&gt;

&lt;p&gt;For high-frequency terms (some of which occur over ~1M times in my data), the code to create a SequentialAccessSparseVector from a RandomAccessSparseVector bogs down completely .... &lt;/p&gt;

&lt;p&gt;From Jake Mannix:&lt;br/&gt;
&quot;Suspicion confirmed:&lt;/p&gt;

&lt;p&gt;  public SequentialAccessSparseVector(Vector other) {&lt;br/&gt;
    this(other.size(), other.getNumNondefaultElements());&lt;br/&gt;
    Iterator&amp;lt;Element&amp;gt; it = other.iterateNonZero();&lt;br/&gt;
    Element e;&lt;br/&gt;
    while (it.hasNext() &amp;amp;&amp;amp; (e = it.next()) != null) &lt;/p&gt;
{
      set(e.index(), e.get());
    }
&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;we iterate over the other vector (which is in random/hashed order), adding it to the sequential access vector (which always tries to stay in sequential order).  So actually, this may be &lt;b&gt;worse&lt;/b&gt; than O(n^2), but I&apos;d prefer to just not know how much worse, and instead we should fix it.&lt;/p&gt;

&lt;p&gt;Should be fairly straightforward: make an array of structs (essentially) with the index and the double, of size other.getNumNonDefaultElements() (what a horrible method name), fill it up on one iteration over the other vector, sort it in place, then make your new OrderedIntDoubleMapping out of the indexes and values (unless someone has a cleverer idea to sort a pair of two arrays at the same time, shuffling one based on the ordering criterion of the other).&quot;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12502711">MAHOUT-639</key>
            <summary>Need special case to handle creating a new SequentialAccessSparseVector from a large (&gt; 1M dims) random/hashed vector</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jake.mannix">Jake Mannix</assignee>
                                    <reporter username="thelabdude">Timothy Potter</reporter>
                        <labels>
                            <label>matrix</label>
                            <label>scalability</label>
                            <label>svd</label>
                            <label>transpose</label>
                    </labels>
                <created>Tue, 29 Mar 2011 14:12:21 +0100</created>
                <updated>Sat, 21 May 2011 04:24:14 +0100</updated>
                            <resolved>Sat, 30 Apr 2011 05:43:25 +0100</resolved>
                                    <version>0.4</version>
                    <version>0.5</version>
                                    <fixVersion>0.6</fixVersion>
                                    <component>Math</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13015338" author="jake.mannix" created="Mon, 4 Apr 2011 10:51:20 +0100"  >&lt;p&gt;Tim, did you ever check the correctness of the version you wrote for this?&lt;/p&gt;</comment>
                            <comment id="13017037" author="thelabdude" created="Thu, 7 Apr 2011 17:41:39 +0100"  >&lt;p&gt;Not the &quot;optimal&quot; way suggested by Jake, but definitely gets passed the problem by using a new internal class OrderedElement which sorts Elements by their index, thus allowing us to use Arrays.sort(). However, it does mean that we create many temporary OrderedElement objects during the copy process. Also, I&apos;m not entirely sure my test case is not going to cause the community issues since it&apos;s based on a JUnit timeout.&lt;/p&gt;

&lt;p&gt;Lastly, I also changed a few things around to make the matrixmult job more efficient which also bogged down in multiplying these large vectors in the mappers after I got passed the transpose issue.&lt;/p&gt;</comment>
                            <comment id="13017038" author="thelabdude" created="Thu, 7 Apr 2011 17:42:12 +0100"  >&lt;p&gt;see previous comment&lt;/p&gt;</comment>
                            <comment id="13027244" author="jake.mannix" created="Sat, 30 Apr 2011 01:04:04 +0100"  >&lt;p&gt;Whenever this comes up, it &lt;b&gt;kills&lt;/b&gt; performance.  This is the root cause of the issue raised today in the mailing list (&quot;LanczosSolver Very Slow&quot;).  So I&apos;m going to get this (or equivalent) committed before 0.6 goes out.&lt;/p&gt;</comment>
                            <comment id="13027278" author="jake.mannix" created="Sat, 30 Apr 2011 04:36:01 +0100"  >&lt;p&gt;Ok, Tim I think the idea of using auxiliary structs is fine.  It&apos;s not perfectly optimal, but the time complexity is the same big-O as the optimal solution (different constant, probably, and requires extra short-lived objects, true).  I was able to get it about 10% faster by not using the set() method on OrderedIntDoubleMapping, and instead making the constructor for that class package private and using it with the already-ordered int[] and double[] which can be created directly in copySortedRandomAccessSparseVector().&lt;/p&gt;

&lt;p&gt;I don&apos;t think we want a timeout based nondeterministic unit test for this, however.  That&apos;s just asking for trouble.  I think verifying all other tests work, and then actually checking this actually improves performance is enough. &lt;/p&gt;

&lt;p&gt;I&apos;ll clean this up and get it committed this weekend.&lt;/p&gt;</comment>
                            <comment id="13027295" author="hudson" created="Sat, 30 Apr 2011 07:07:37 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #786 (See &lt;a href=&quot;https://builds.apache.org/hudson/job/Mahout-Quality/786/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/Mahout-Quality/786/&lt;/a&gt;)&lt;br/&gt;
    Fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-639&quot; title=&quot;Need special case to handle creating a new SequentialAccessSparseVector from a large (&amp;gt; 1M dims) random/hashed vector&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-639&quot;&gt;&lt;del&gt;MAHOUT-639&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13027399" author="thelabdude" created="Sat, 30 Apr 2011 23:49:07 +0100"  >&lt;p&gt;Hi Jake,&lt;/p&gt;

&lt;p&gt;Agreed on the unit test timeout not being a good approach. Thanks for cleaning up the code I submitted. &lt;/p&gt;</comment>
                            <comment id="13027403" author="jake.mannix" created="Sun, 1 May 2011 00:19:06 +0100"  >&lt;p&gt;Hi Tim,&lt;/p&gt;

&lt;p&gt;  Thanks for having that timeout in there, actually - for developing / verification purposes it was a good idea.  We just can&apos;t have it in there for our continuous integration etc.  Good stuff, thanks for getting this in!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12475724" name="MAHOUT-639.patch" size="7486" author="thelabdude" created="Thu, 7 Apr 2011 17:42:12 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 4 Apr 2011 09:51:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9422</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy3vr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22780</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>