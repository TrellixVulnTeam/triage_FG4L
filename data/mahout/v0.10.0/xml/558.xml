<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:17:05 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-558/MAHOUT-558.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-558] Extend ItembasedRecommender to offer different &quot;exclusion modes&quot; when computing most similar items to a collection of input items</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-558</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;GenericItembased Recommender currently excludes all items that are not similar at least one of the input items when computing the most similar items to a collection of items. We should introduce a way to have the user decide whether he/she wants this behavior or he/she wants to have all items included that are similar to at least one of the input items, which is more useful in practice in my experience.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12492092">MAHOUT-558</key>
            <summary>Extend ItembasedRecommender to offer different &quot;exclusion modes&quot; when computing most similar items to a collection of input items</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ssc">Sebastian Schelter</assignee>
                                    <reporter username="ssc">Sebastian Schelter</reporter>
                        <labels>
                    </labels>
                <created>Sun, 5 Dec 2010 09:38:49 +0000</created>
                <updated>Sat, 21 May 2011 04:18:45 +0100</updated>
                            <resolved>Sun, 12 Dec 2010 19:23:21 +0000</resolved>
                                    <version>0.5</version>
                                    <fixVersion>0.5</fixVersion>
                                    <component>Collaborative Filtering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12966931" author="srowen" created="Sun, 5 Dec 2010 12:26:55 +0000"  >&lt;p&gt;One initial comment is, shouldn&apos;t this change affect not just MultiMostSimilarEstimator, but MostSimilarEstimator? I think it would have an analogous change in the user-based recommender too for consistency.&lt;/p&gt;

&lt;p&gt;Let me present a small example to make sure I understand. The estimated preference for some new thing X is based on the user&apos;s existing preferences for A, B and C. Right now, if X has no defined similarity (not 0, but uncomputable or undefined) to A, B or C, then X cannot be recommended &amp;#8211; there&apos;s simply no estimate.&lt;/p&gt;

&lt;p&gt;Right now, if X has a defined simiarity to &lt;b&gt;any&lt;/b&gt; of A, B or C then some estimate can be made. The undefined relations are ignored. This is, I think, a decent intepretation of the stock item-based recommender approach; it does &quot;unfairly&quot; favor obscurer items.&lt;/p&gt;

&lt;p&gt;If I read this change right, it would need for X to have a resemblance to &lt;b&gt;all&lt;/b&gt; of A, B and C to produce any estimate. That sounds like quite a strict rule in practice &amp;#8211; would it not fail to produce recommendations in many cases? Is that the intent and if so what&apos;s the real-world use case for this.&lt;/p&gt;</comment>
                            <comment id="12966968" author="ssc" created="Sun, 5 Dec 2010 15:21:35 +0000"  >&lt;p&gt;I think we misunderstand each other. When we compute similar items to A,B,C with the current trunk code than any X that is not similar to &lt;b&gt;each&lt;/b&gt; of the input items will be excluded. Say X is similar to A and B but not to C than the last summand will be NaN and thus the estimate for X will be NaN, which means not similar and X will therefore be excluded.&lt;/p&gt;

&lt;p&gt;With the patched version only the similarities of X to A and B would be considered. I agree that this favors obscure items. I initially proposed to interpret a &quot;missing&quot; similarity as 0 in this case, so that the average result would be lowered for items that have a smaller number of similarities. Should I better include this in the patch?&lt;/p&gt;

&lt;p&gt;The practical use for me would be in this scenario: If you only work with a small number of precomputed similarities per item in memory and use the current version without the patch, mostSimilarItems(...) will give you empty results for a collection of input items in most cases (from my experiences). I&apos;ve seen this behavior very often with larger shopping carts for example, and that&apos;s why I proposed to lower the conditions for items to be included in the result.&lt;/p&gt;

&lt;p&gt;I don&apos;t see how this change would affect MostSimilarEstimator.&lt;/p&gt;</comment>
                            <comment id="12966975" author="ssc" created="Sun, 5 Dec 2010 16:06:27 +0000"  >&lt;p&gt;changed average computation to not favor obscure items&lt;/p&gt;</comment>
                            <comment id="12966988" author="srowen" created="Sun, 5 Dec 2010 17:39:31 +0000"  >&lt;p&gt;I think I misread the patch since I assumed that MultiMostSImilarEstimator already has the behavior you are trying to implement. What you propose matches what MostSimilarEstimator does already. In that sense it&apos;s really a fix and I support it: ignore NaN. If that is indeed what the original patch does, I support it.&lt;/p&gt;

&lt;p&gt;While the &apos;bias&apos; here is an issue I think it is a larger task to change it across the code base. No I am not sure these should be interpreted as 0 as it makes the behavior a little &apos;stranger&apos; to me and less defensible theoretically. Therefore I like the original patch, I think.&lt;/p&gt;</comment>
                            <comment id="12967009" author="ssc" created="Sun, 5 Dec 2010 19:40:55 +0000"  >&lt;p&gt;committed the first patch.&lt;/p&gt;</comment>
                            <comment id="12967044" author="hudson" created="Sun, 5 Dec 2010 23:04:06 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #495 (See &lt;a href=&quot;https://hudson.apache.org/hudson/job/Mahout-Quality/495/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/Mahout-Quality/495/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="12967059" author="lancenorskog" created="Mon, 6 Dec 2010 01:09:03 +0000"  >&lt;p&gt;It would be good to have a common contract that all of the Recommenders either honor or throw UnsupportedOperationException. Having a zillion recommenders with their own quirks and slightly different behaviors and interpretations makes the software base unusable.&lt;/p&gt;

&lt;p&gt;For example, my bete noir: most of the user-based recommenders return the user&apos;s own pref for an item, rather than the recommender&apos;s calculated pref. Some recommenders cannot do this because they compute internal numbers based on the prefs and then toss the prefs. I am writing such a recommender and I cannot duplicate this behavior.&lt;/p&gt;

</comment>
                            <comment id="12967140" author="srowen" created="Mon, 6 Dec 2010 09:52:18 +0000"  >&lt;p&gt;There&apos;s a tension between the need to fit several algorithms into one common API, and the fact that they do have different characteristics. Making them all work exactly the same would mean jumping through a few hoops and also cutting off access to shortcuts that improve performance.&lt;/p&gt;

&lt;p&gt;One big example to me is fudging what a preference estimate means when the data model has no preference values. estimatePreference() should unusefully return 1.0 all the time, really but it doesn&apos;t, in order to be more useful in practice.&lt;/p&gt;

&lt;p&gt;That said, at the level of your example we ought to have consistent behavior. Which recommender doesn&apos;t return the known pref value? That sounds like an unintentional behavior.&lt;/p&gt;

&lt;p&gt;However I would point out that the contract is to &quot;estimate&quot; a preference &amp;#8211; nobody said what the estimate has to be!&lt;/p&gt;</comment>
                            <comment id="12968640" author="lancenorskog" created="Tue, 7 Dec 2010 09:28:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;Which recommender doesn&apos;t return the known pref value? That sounds like an unintentional behavior.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is an algorithm I&apos;m writing, not one of the existing recommenders. The original data goes through a processing stage, and the datamodel only saves the output. It does not even know which users proffered a rating.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12465341" name="MAHOUT-558-2.patch" size="8402" author="ssc" created="Sun, 5 Dec 2010 16:06:27 +0000"/>
                            <attachment id="12465335" name="MAHOUT-558.patch" size="8361" author="ssc" created="Sun, 5 Dec 2010 09:40:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 5 Dec 2010 12:26:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9504</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy4dj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22860</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>