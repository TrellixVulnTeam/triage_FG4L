<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:20:11 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-455/MAHOUT-455.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-455] NearestNUserNeighborhood problems with large Ns</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-455</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;I set a large n for NearestNUserNeighborhood, with the intention of including all users in the neighbourhood. However, I encountered the following problems:&lt;/p&gt;

&lt;p&gt;(1) If n is set to Integer.MAX_VALUE, the program crashes with the following stack trace:&lt;br/&gt;
Exception in thread &quot;main&quot; java.lang.IllegalArgumentException&lt;br/&gt;
	at java.util.PriorityQueue.&amp;lt;init&amp;gt;(PriorityQueue.java:152)&lt;br/&gt;
	at org.apache.mahout.cf.taste.impl.recommender.TopItems.getTopUsers(TopItems.java:93)&lt;br/&gt;
	at org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.getUserNeighborhood(NearestNUserNeighborhood.java:111)&lt;/p&gt;

&lt;p&gt;This is because TopItems.getTopUsers() tries to create a PriorityQueue with a capacity of Integer.MAX_VALUE + 1.&lt;/p&gt;

&lt;p&gt;(2) If n is set to a large integer value (e.g., 1 billion), it crashes with the following stack trace:&lt;br/&gt;
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space&lt;br/&gt;
	at java.util.PriorityQueue.&amp;lt;init&amp;gt;(PriorityQueue.java:153)&lt;br/&gt;
	at org.apache.mahout.cf.taste.impl.recommender.TopItems.getTopUsers(TopItems.java:93)&lt;br/&gt;
	at org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood.getUserNeighborhood(NearestNUserNeighborhood.java:111)&lt;/p&gt;

&lt;p&gt;This is due to the same reason - trying to create a PriorityQueue with size n + 1.&lt;/p&gt;

&lt;p&gt;In my opinion, this should be fixed by changing n to the number of users in the DataModel when NearestNUserNeighborhood is created, or by letting users specify n = -1 (or a similar value) when they want the user neighbourhood to include all users.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Linux&lt;/p&gt;</environment>
        <key id="12470868">MAHOUT-455</key>
            <summary>NearestNUserNeighborhood problems with large Ns</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="yanir">Yanir Seroussi</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Aug 2010 06:34:11 +0100</created>
                <updated>Sun, 31 Oct 2010 15:49:58 +0000</updated>
                            <resolved>Tue, 10 Aug 2010 18:23:10 +0100</resolved>
                                    <version>0.3</version>
                                    <fixVersion>0.4</fixVersion>
                                    <component>Collaborative Filtering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12895569" author="tdunning" created="Thu, 5 Aug 2010 07:51:11 +0100"  >&lt;p&gt;At the risk of being rude, I think that this would not fix a thing since the current behavior is correct and follows directly from first principles.&lt;/p&gt;

&lt;p&gt;The reason that the algorithm is called &quot;nearest-neighbors&quot; is because that is what it does.  The intent is to use only the nearest few neighbors.  This method has a long lineage in data-mining and the crux of it all is that &quot;nearest few&quot; part.  That is what allows it to express very complex relations by locally linear relations.&lt;/p&gt;


&lt;p&gt;If you really want to include all users, just compute the single average of all users off-line and be done with it.  This works because if you include any weighting by proximity, then  you can use a moderate number of neighbors and get the same result (i.e. the current behavior).  If your weighting does not strongly depend on distance as must be the case if all of the users are included in the sample, then you have a measure that does not depend on the user you are recommending for, that is, you have reinvented a &quot;most-popular&quot; recommendation.  If that is what you want, then you should use that and not a nearest neighbor recommender.&lt;/p&gt;

&lt;p&gt;Either way, I think that the current code isn&apos;t broken.&lt;/p&gt;
</comment>
                            <comment id="12895607" author="yanir" created="Thu, 5 Aug 2010 08:50:37 +0100"  >&lt;p&gt;With all due respect, responding in such a condescending way is indeed quite rude and discouraging. I went through the trouble of opening an account and reporting this issue, which I still think is an issue, in order to help the developers. Making your clients/customers feel like idiots is not really the way to go. However, I will take the time to explain why I still think this is a problem.&lt;/p&gt;

&lt;p&gt;First, from an API design point of view, it is well-known that APIs should &quot;throw exceptions appropriate to the abstraction&quot; (Effective Java, 2nd ed., Item 61). Since every method along the way is declared to throw TasteException (ignoring two other Effective Java guidelines: &quot;Avoid unnecessary use of checked exceptions&quot; &amp;#8211; item 59 and &quot;Favor the use of standard exceptions&quot; &amp;#8211; item 60, but never mind), it makes sense to throw exceptions that clients can understand without digging into the code.&lt;/p&gt;

&lt;p&gt;Second, it is common practice to test neighbour-based collaborative filtering systems by varying the number of neighbours. For example, Herlocker et al (1999) (&lt;a href=&quot;http://portal.acm.org/citation.cfm?id=312682&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://portal.acm.org/citation.cfm?id=312682&lt;/a&gt;) experimented with neighbourhood sizes of up to 100, while Koren (2008) (&lt;a href=&quot;http://portal.acm.org/citation.cfm?id=1401944&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://portal.acm.org/citation.cfm?id=1401944&lt;/a&gt;) tested neighbourhood sizes of up to infinity, which is exactly what I was trying to do.&lt;/p&gt;

&lt;p&gt;I think that at the very least, NearestNUserNeighborhood&apos;s constructor could throw an IllegalArgumentException if n is larger than the number of users in the DataModel. This would make the API easier to use because the exception would come from the upper level, rather than from the depths of the implementation.&lt;/p&gt;</comment>
                            <comment id="12895719" author="tdunning" created="Thu, 5 Aug 2010 17:20:17 +0100"  >&lt;p&gt;I apologize for the tone of my remark.  I normally try not to make new users feel that way in the Mahout mailing list.&lt;/p&gt;

&lt;p&gt;Thank you for the correction and for taking the trouble to file the JIRA.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think that at the very least, NearestNUserNeighborhood&apos;s constructor could throw an IllegalArgumentException if n is larger than the number of users in the DataModel. This would make the API easier to use because the exception would come from the upper level, rather than from the depths of the implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;THIS is a useful suggestion.&lt;/p&gt;</comment>
                            <comment id="12895721" author="tdunning" created="Thu, 5 Aug 2010 17:22:32 +0100"  >&lt;p&gt;Nearest neighbor stuff should throw an exception for n &amp;gt; a few thousand as Yanir suggests.&lt;/p&gt;

&lt;p&gt;Yanir, can you suggest a patch?&lt;/p&gt;</comment>
                            <comment id="12895725" author="srowen" created="Thu, 5 Aug 2010 17:35:02 +0100"  >&lt;p&gt;I agree with Ted, but the patch you&apos;re suggesting sounds just fine too.&lt;/p&gt;</comment>
                            <comment id="12896474" author="yanir" created="Mon, 9 Aug 2010 08:45:45 +0100"  >&lt;p&gt;Sorry for filing the JIRA without discussing the issue on the mailing list first, I didn&apos;t notice that this is the way it&apos;s supposed to be done.&lt;/p&gt;

&lt;p&gt;Anyway, I want to implement a fix that checks for the number of users in the dataModel that is given to the constructor, but the problem is that DataModel.getNumUsers() throws TasteException. If I change the constructors to rethrow the TasteException it will break backward compatibility, while catching the exception doesn&apos;t really make sense.&lt;br/&gt;
On a side note, I don&apos;t really see why DataModel.getNumUsers() is declared to throw TasteException, as none of its implementations throws this exception (as far as I can see), and I can&apos;t think of a case where a DataModel client will catch such an exception and do something useful with it, but I might be mistaken.&lt;/p&gt;

&lt;p&gt;Setting an arbitrary upper bound on n that is independent of the data model seems overly-restrictive to me, as any number we choose has no relation to the properties of the data model. Ted, is there a bound that you think would be suitable?&lt;/p&gt;

&lt;p&gt;By the way, I&apos;m not sure if this is the right place for discussing these issues, so I apologise in advance if I got it wrong.&lt;/p&gt;</comment>
                            <comment id="12896965" author="srowen" created="Tue, 10 Aug 2010 18:15:31 +0100"  >&lt;p&gt;It&apos;s thrown in, for example, the JDBC-based implementation. Well, not really, as it happens, since that caches the value elsewhere. But I suppose it underscores the point that an implementation could, logically, throw this exception. So the API is declared that way.&lt;/p&gt;

&lt;p&gt;I don&apos;t think adding the exception to that constructor is a big deal, I will do so. Things are still in flux and this is a very minor API change.&lt;/p&gt;

&lt;p&gt;I will just cap n at the number of users in the data model.&lt;/p&gt;</comment>
                            <comment id="12897015" author="hudson" created="Tue, 10 Aug 2010 20:33:23 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #178 (See &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/Mahout-Quality/178/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/Mahout-Quality/178/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-455&quot; title=&quot;NearestNUserNeighborhood problems with large Ns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-455&quot;&gt;&lt;del&gt;MAHOUT-455&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 Aug 2010 06:51:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9608</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy50f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22963</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>