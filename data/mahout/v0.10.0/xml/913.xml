<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:26:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-913/MAHOUT-913.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-913] Style changes / discussion</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-913</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Guys I&apos;ve still been seeing code committed that doesn&apos;t match standard Java style or a reasonable policy I can imagine. I wanted to talk about it since I&apos;ve just been silently changing it and that is not ideal.&lt;/p&gt;

&lt;p&gt;This should be easy to get right, as automated tools exist to check and fix this. I recommend IntelliJ&apos;s free Community edition. Flip on even basic inspections. A hundred things will jump out (that are already jumping out at me). Most are automatically fixable. &lt;/p&gt;

&lt;p&gt;I think that standardized, readable code invites attention, work and care: it feels like something you want to improve, and don&apos;t want to hack up.&lt;/p&gt;

&lt;p&gt;I think it helps attract committers. Strong engineering organizations wouldn&apos;t let basic style problems in the codebase, just by using automated checks. Code reviews don&apos;t begin otherwise, and then reviews focus on real issues like design. We can make a basic effort to approach that level of quality. Otherwise, people who are used to a higher standard won&apos;t be inclined to participate in the project, and will just fork.&lt;/p&gt;

&lt;p&gt;I think it&apos;s a prerequisite to fixing real design issues, TODOs, correctness problems (cloning for instance), and refactorings. This code is not near that point, and won&apos;t get there at this rate. &lt;/p&gt;

&lt;p&gt;Personally it makes we want to only support anything I&apos;ve written, and write any &quot;next generation&quot; recommender system in a new and separate venture. And I&apos;m a friendly, and maybe not the only one! So would be great to keep some focus on quality and design.&lt;/p&gt;

&lt;p&gt;Here&apos;s a patch showing all the changes I&apos;ve picked up and made with the IDE &amp;#8211; &lt;b&gt;just&lt;/b&gt; basic style issues, and just since the last 2 weeks. The issues are, among others:&lt;/p&gt;

&lt;p&gt;	&#8259;	Empty javadoc&lt;br/&gt;
	&#8259;	Redundant javadoc (&quot;@param foo the foo&quot;)&lt;br/&gt;
	&#8259;	Missing copyright headers&lt;br/&gt;
	&#8259;	Copyright headers not at top of file (sometimes after imports!)&lt;br/&gt;
	&#8259;	Very long lines (&amp;gt;&amp;gt; 120 chars)&lt;br/&gt;
	&#8259;	&quot;throws Exception&quot; not on main() or test method&lt;br/&gt;
	&#8259;	&quot;transient&quot; fields &amp;#8211; should never be used for us&lt;br/&gt;
	&#8259;	Missing @Override&lt;br/&gt;
	&#8259;	Using new Random()&lt;br/&gt;
	&#8259;	Redundant boolean expressions like &quot;foo == true&quot;&lt;br/&gt;
	&#8259;	Unused variables and parameters&lt;br/&gt;
	&#8259;	Unused imports&lt;br/&gt;
	&#8259;	Loops and conditionals without braces&lt;br/&gt;
	&#8259;	Weird literals (&quot;1d&quot;)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12533750">MAHOUT-913</key>
            <summary>Style changes / discussion</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="srowen">Sean Owen</reporter>
                        <labels>
                    </labels>
                <created>Sat, 3 Dec 2011 21:14:23 +0000</created>
                <updated>Thu, 9 Feb 2012 14:00:45 +0000</updated>
                            <resolved>Mon, 5 Dec 2011 12:33:41 +0000</resolved>
                                    <version>0.5</version>
                                    <fixVersion>0.6</fixVersion>
                                        <due>Fri, 9 Dec 2011 00:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13162221" author="tdunning" created="Sat, 3 Dec 2011 22:11:07 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I apologize for not having time to help with this myself.&lt;/p&gt;

&lt;p&gt;The only question I have about your list is the transient.  I think that the only use of this in memory has been for GSON which we eliminated.&lt;/p&gt;</comment>
                            <comment id="13162228" author="srowen" created="Sat, 3 Dec 2011 22:38:42 +0000"  >&lt;p&gt;That&apos;s right. The only usage I saw this time was on a static field, which is never serialized (GSON or otherwise) anyway.&lt;/p&gt;</comment>
                            <comment id="13162231" author="jake.mannix" created="Sat, 3 Dec 2011 23:19:52 +0000"  >&lt;p&gt;For missing license files, maybe we should set up the Rat maven plugin?&lt;/p&gt;

&lt;p&gt;So apparently a lot of this is due to me, and as such, I apologize, I&apos;ve been out of the codebase for a while, so I&apos;ve not been keeping in the same internal habits and automated checkstyle setup etc.  I would disagree that &quot;Strong engineering organizations wouldn&apos;t let basic style problems in the codebase&quot; - I&apos;ve heard this repeatedly from multiple Xooglers, who seem to think that this googly attitude is shared by everyone else in the industry.  I&apos;ve been in many companies with strong engineering culture, and not all of them have the same &lt;b&gt;level&lt;/b&gt; of dedication to code hygiene.  &lt;/p&gt;

&lt;p&gt;That having been said, we&apos;ve had much of this discussion before, and we have all agreed that in this project we would stick to the various guidelines we&apos;ve imposed, and as such, any violations on my part are a mistake and I will try to be more hygienic about it.&lt;/p&gt;

&lt;p&gt;Some specific questions on this patch.  It would probably be easier on a reviewboard review (in fact, you could have commented on many of these things in-line over at &lt;a href=&quot;https://reviews.apache.org/r/2944/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2944/&lt;/a&gt; before it was committed), but I can see if I can ask about them here.&lt;/p&gt;

&lt;p&gt;Some specifics that maybe I&apos;m not remembering the logic on:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;What is wrong with 1d?  Is it not the same as 1.0?  It&apos;s 1 as a double value, no?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Why are so many private methods converted to static in this patch?  If they&apos;re private, nobody else is using them, so why make them static?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;And TODO/FIXME comments, why are you removing these?  Seems like they leave reminders in the code for what needs work to be done...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One thing I&apos;d request: please revert too many changes in InMemoryCollapsedVariationalBayes.  There are fields and methods not being used, but they &lt;b&gt;were&lt;/b&gt;, and probably will be.  That class is a work in progress, and not necessary for &quot;scalable&quot; LDA, but is really nice for prototyping and doing things at smaller scale, and deserves some more work.  At very least, let&apos;s just comment out the unused stuff marked with a TODO and link to a JIRA, because otherwise I&apos;ll never find that stuff when I want to start working on it.&lt;/p&gt;</comment>
                            <comment id="13162232" author="srowen" created="Sat, 3 Dec 2011 23:33:40 +0000"  >&lt;p&gt;I don&apos;t know it&apos;s a level of dedication thing &amp;#8211; it&apos;s about letting the machines handle what they can, so whatever level of effort is available can go to higher level things. I firmly believe in code hygiene, broken windows and all that, but that&apos;s just my experience. I don&apos;t enjoy trying to work on most of this project as a result.&lt;/p&gt;

&lt;p&gt;(Nothing is committed yet.)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It&apos;s obvious what 1.0 is. It is the same as 1d, but I think 1d is cryptic. Likewise 1 might be used as a double, and is equivalent to 1.0, so why not be clear and write 1.0 when it&apos;s used as 1.0?&lt;/li&gt;
	&lt;li&gt;I&apos;d ask why a method that doesn&apos;t access instance state or methods not be marked as such &amp;#8211; static? (As they&apos;re private, it can&apos;t be because they may want to be overridden.) This lets it be called without an instance, which it can be. In an extremely tight loop it saves an invisible parameter passing too, but this is vanishingly small.&lt;/li&gt;
	&lt;li&gt;I only removed the TODOs I thought I addressed, let me look at them again&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;OK happy to revert those unused method/field changes.&lt;/p&gt;</comment>
                            <comment id="13162234" author="tdunning" created="Sat, 3 Dec 2011 23:43:26 +0000"  >&lt;p&gt;That usage of transient may be a substitute for an Atomic* object.&lt;/p&gt;

&lt;p&gt;Where did you see the field?&lt;/p&gt;</comment>
                            <comment id="13162236" author="srowen" created="Sat, 3 Dec 2011 23:46:13 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private transient static Logger log = LoggerFactory.getLogger(SimpleTextEncodingVectorizer.class);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&apos;s OK. Why would transient have something to do with emulating Atomic* classes? Are you thinking of volatile?&lt;/p&gt;</comment>
                            <comment id="13162238" author="tdunning" created="Sat, 3 Dec 2011 23:49:27 +0000"  >&lt;p&gt;I was thinking of volatile and this case should be marked final rather than transient.  &lt;/p&gt;</comment>
                            <comment id="13162241" author="jake.mannix" created="Sun, 4 Dec 2011 00:04:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d ask why a method that doesn&apos;t access instance state or methods not be marked as such &#8211; static? (As they&apos;re private, it can&apos;t be because they may want to be overridden.) This lets it be called without an instance, which it can be. In an extremely tight loop it saves an invisible parameter passing too, but this is vanishingly small.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I tend to avoid static except when explicitly desired/required, and don&apos;t think I recall ever seeing much use of &quot;private static&quot; in many codebases which I am familiar with.  But it doesn&apos;t really matter to me, I just doubt that I&apos;ll remember to do that intentionally, as I don&apos;t see the obvious benefit of the extra keyword.&lt;/p&gt;

&lt;p&gt;1d I&apos;ve done because it&apos;s clear that the only reason is that floating point division is desired.  1.0 does the same job, as I&apos;m probably the only person I know who always does 1d instead of 1.0.&lt;/p&gt;

&lt;p&gt;I&apos;m down with the broken window theory, yeah, I guess there are just different kinds of things which bother me, mostly around APIs and extensibility, not (most kinds of) purely stylistic stuff.  I&apos;m actually forcing myself to deal with the fact that the world has decided on the horrible vertically misaligned braces choice every day, maybe that makes me blind to other style issues.&lt;/p&gt;</comment>
                            <comment id="13162243" author="jake.mannix" created="Sun, 4 Dec 2011 00:13:07 +0000"  >&lt;p&gt;So regarding letting automated tools do their work - can you remind me / paint a picture of what you do when you&apos;re sanity checking style issues in the codebase?  We&apos;ve got a checkstyle file, so I guess I just need to reconfigure it to run automatically, and check the right reports on deprecation warnings and style violations.&lt;/p&gt;

&lt;p&gt;Couldn&apos;t we actually just put it part of the compile step?  Such that mvn compile &lt;b&gt;fails&lt;/b&gt; the build if there are violations?  Then this code would never (or almost never) sneak into the codebase?&lt;/p&gt;</comment>
                            <comment id="13162251" author="srowen" created="Sun, 4 Dec 2011 01:25:45 +0000"  >&lt;p&gt;We do have mvn checkstyle available; I think it still works, is pretty well configured, and outputs and HTML report. FindBugs is hooked up too. I hesitate to fail a compile on warnings, but you could fail a commit. And really it would have to be &lt;b&gt;new&lt;/b&gt; warnings. And some provision for exceptions. And I don&apos;t know how to do that with checkstyle, or if it&apos;s possible. Even I&apos;m not worried about that yet.&lt;/p&gt;

&lt;p&gt;Honestly I just flip on the IntelliJ code inspections and tailor them a little bit. we have a config file around here; I could post mine. The nice thing is it can fix many of these things in one go once you&apos;re viewing the analysis report. Simple refactorings are of course available (like turning a public field into a private field + getters/setters, with corresponding code changes). Even before that it&apos;ll do nice things like grey out stuff that&apos;s unused. Additional plugins like Copyright can fix headers. Some search-and-replace with regexes does more. Some bits are manual. Eclipse does some of this but doesn&apos;t have the inspections.&lt;/p&gt;</comment>
                            <comment id="13162261" author="jeastman" created="Sun, 4 Dec 2011 02:53:19 +0000"  >&lt;p&gt;+0.5 I see the value in having reasonably standard formatting and coding conventions but I&apos;m not convinced standardizing on one tool makes sense in an open source project. I also have been silently annoyed by some of the large commits which have made kind of gratuitous changes to code I&apos;ve written; making methods and fields static is one example I don&apos;t favor. I&apos;ve mentioned this mildly before but have not pushed back much because the overall effect on the code base was positive and, heck, I did not have to do the work. I do favor well written JavaDocs and the Lucene standard formatting seems to be unreasonable enough, especially given our heritage. If we could automatically pretty-print every file on commit that would be something I would support. I&apos;m just not wild about imposing a stricter set of conventions by other means. Is the situation really so grave?&lt;/p&gt;
</comment>
                            <comment id="13162310" author="ssc" created="Sun, 4 Dec 2011 07:35:10 +0000"  >&lt;p&gt;I&apos;m also in strong support of code conventions and consistent formatting. We have the issue that a lot of us only work in &quot;their corner&quot; of Mahout and different coding styles across different modules only amplify such a separation.&lt;/p&gt;

&lt;p&gt;Furthermore, as a publicly visible Apache project we should really aspire high quality, presentable code.&lt;/p&gt;

</comment>
                            <comment id="13162333" author="srowen" created="Sun, 4 Dec 2011 10:24:39 +0000"  >&lt;p&gt;I&apos;m not suggesting standardizing on a tool, no. I do think these things are easier, since they are more automatic, with IntelliJ than Eclipse. It was a suggestion to lower the effort barrier, which could contribute to the issue. I actually don&apos;t like asking people to do more work, hopefully this is the opposite of that!&lt;/p&gt;

&lt;p&gt;We may just agree to disagree on private static methods; I think a non-instance method should be declared as such, and I don&apos;t think it&apos;s quite trivial. Consensus rules though, but I thought there was mostly agreement on this particular one.&lt;/p&gt;

&lt;p&gt;Formatting is most trivial and doesn&apos;t matter per se. I think it matters in that you probably have to be good at dealing with trivial issues before you can move up the stack, and there are most definitely less trivial issues I&apos;d like to start talking about. If this is &quot;level 0&quot; (formatting) and &quot;level 1&quot; (redundant declarations), I&apos;d like to start fixing &quot;level 2&quot; (wrong clone() or equals()/hashCode() pairs) and &quot;level 3&quot; (unencapsulated fields, polymorphic methods in constructors). Those are more real problems, and if you flip on inspections you&apos;ll see there are loads of them.&lt;/p&gt;</comment>
                            <comment id="13162848" author="hudson" created="Mon, 5 Dec 2011 15:59:42 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #1225 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1225/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1225/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-913&quot; title=&quot;Style changes / discussion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-913&quot;&gt;&lt;del&gt;MAHOUT-913&lt;/del&gt;&lt;/a&gt; many small style changes&lt;/p&gt;

&lt;p&gt;srowen : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1210428&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1210428&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/TasteHadoopUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ALSUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/preparation/PreparePreferenceMatrixJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RunningAverageAndStdDev.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/knn/KnnItemBasedRecommender.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/TanimotoCoefficientSimilarity.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ResultAnalyzer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/Bagging.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/mapreduce/inmem/InMemMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/PartialBuilder.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/ref/SequentialBuilder.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0DocInferenceMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/CachingCVB0Mapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/CachingCVB0PerplexityMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/InMemoryCollapsedVariationalBayes0.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/ModelTrainer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/MemoryUtil.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/distance/MahalanobisDistanceMeasure.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/MatrixUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/HdfsBackedLanczosState.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/solver/DistributedConjugateGradientSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SparseRowBlockWritable.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/YtYJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/qr/QRFirstStep.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/Sampler.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SimpleTextEncodingVectorizer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/Vectorizer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/VectorizerConfig.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/Weight.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJobTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/data/DataLoaderTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/mapreduce/partial/PartialBuilderTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/mapreduce/partial/PartialSequentialBuilder.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/canopy/TestCanopyCreation.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/lda/TestMapReduce.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/lda/cvb/TestCVBModelTrainer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/common/distance/UserDefinedDistanceMeasure.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/graph/linkanalysis/PageRankJobTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/graph/linkanalysis/RandomWalkWithRestartJobTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/MathHelper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/decomposer/TestDistributedLanczosSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/solver/TestDistributedConjugateGradientSolverCLI.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDTestsHelper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/stats/SamplerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/EncodedVectorsFromSequenceFilesTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/email/FromEmailToDictionaryMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/email/MailToRecMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/email/MailToRecReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/email/MsgIdToDictionaryMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/hadoop/example/als/netflix/NetflixDatasetConverter.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/NewsgroupHelper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/RunLogistic.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/SGDHelper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/SGDInfo.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TestASFEmail.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TestNewsGroups.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainASFEmail.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainAdaptiveLogistic.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/Job.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDMutation.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/clustering/ClusterWriter.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/AnalyzerTransformer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/ChainTransformer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/FPGFormatter.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/IdentityFormatter.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/IdentityTransformer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/RegexConverterDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/RegexFormatter.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/RegexMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/RegexTransformer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/RegexUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/URLDecodeTransformer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/regex/RegexMapperTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/regex/RegexUtilsTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash3.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/als/AlternatingLeastSquaresSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/als/ImplicitFeedbackAlternatingLeastSquaresSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosState.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/MurmurHash3Test.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/decomposer/lanczos/TestLanczosSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/solver/TestConjugateGradientSolver.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13163310" author="lancenorskog" created="Tue, 6 Dec 2011 03:27:14 +0000"  >&lt;p&gt;Eclipse has Checkstyle &amp;amp; PMD available as add-ons. &lt;/p&gt;</comment>
                            <comment id="13163317" author="lancenorskog" created="Tue, 6 Dec 2011 03:35:11 +0000"  >&lt;p&gt;Does this break any active JIRA patches?&lt;/p&gt;</comment>
                            <comment id="13163869" author="isabel" created="Tue, 6 Dec 2011 21:28:05 +0000"  >&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/dicode/source/browse/trunk/analysis/pom.xml&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/dicode/source/browse/trunk/analysis/pom.xml&lt;/a&gt; &amp;lt;- what I did at another project to enforce correct headers (search for maven-enforcer-plugin) - it does not break the build but silently adds the headers during build time according to what you give it as header in an external file. Note that this will cause a lot of fixes on first build after adding the plugin if there are lots of headers missing.&lt;/p&gt;</comment>
                            <comment id="13165449" author="dlyubimov" created="Thu, 8 Dec 2011 19:13:41 +0000"  >&lt;p&gt;1) FWIW i always used 1d too. &lt;/p&gt;

&lt;p&gt;The reasoning is since there&apos;s no substitute for specifying 1l and 1f and it just so happens that 1.0 by default transforms into 1d but not 1f or 1l. &lt;/p&gt;

&lt;p&gt;Since you can&apos;t avoid using 1l and 1f where you need them (and you do need them esp. with in case of longs), there&apos;s no reason avoiding using 1d. In fact, using 1d is more explicit and conceptually coherent.&lt;/p&gt;

&lt;p&gt;single precision arithmetic case may be less evident these days (but still valid in case you want e.g. to save space with matrix stuff) but longs have a much stronger case. E.g. it should be evident that long a = (1&amp;lt;&amp;lt;31) and long a = (1l&amp;lt;&amp;lt;31) produce completely different results and there&apos;s no immediate substitute for 1l notation in the second case using default transformation rule such as 1.0.&lt;/p&gt;

&lt;p&gt;Am not arguing about need for uniform approach, just that 1d makes more sense to me.&lt;/p&gt;
</comment>
                            <comment id="13165466" author="srowen" created="Thu, 8 Dec 2011 19:34:26 +0000"  >&lt;p&gt;1d and 1f look like hex literals to me &amp;#8211; at the least, I&apos;d argue for 1.0d and 1.0f. They&apos;re obviously the floating point values that they are that way.&lt;/p&gt;

&lt;p&gt;Of course, if you &lt;b&gt;mean&lt;/b&gt; to use a floating-point or long literal you most certainly must use these qualifiers. No argument there, at all. (1l ought to be 1L to avoid confusion with eleven!) &apos;d&apos; is never needed to explicitly qualify a double literal.&lt;/p&gt;

&lt;p&gt;&quot;1&quot; is an int and there is no qualifier for int (right?). &quot;1L&quot; is long and needs a qualifier. &quot;1&quot; is the default not because of its precision but just because it&apos;s the more commonly used type. By symmetry I&apos;d expect conventional use to be &quot;1.0&quot; and &quot;1.0f&quot;; I actually don&apos;t know why there&apos;s a &apos;d&apos;.&lt;/p&gt;

&lt;p&gt;I&apos;d argue that convention is strongly against 1.0d; I&apos;ve not seen it used anywhere (other than Mahout), it&apos;s not in Sun&apos;s style guide, it&apos;s flagged as &quot;confusing&quot; by IntelliJ by default, etc. That&apos;s not to say it&apos;s wrong, just a statement about what is probably unsurprising for most developers.&lt;/p&gt;</comment>
                            <comment id="13165478" author="dlyubimov" created="Thu, 8 Dec 2011 19:42:06 +0000"  >&lt;p&gt;Agree on capitals. Yes capitals are better. &lt;/p&gt;

&lt;p&gt;so what&apos;s your bottom line for the entire list? &lt;/p&gt;

&lt;p&gt;1.0F for floats&lt;br/&gt;
1.0 for doubles &lt;br/&gt;
1L for longs &lt;br/&gt;
1 for ints &lt;/p&gt;

&lt;p&gt;(or perhaps &lt;/p&gt;

&lt;p&gt;1F for floats&lt;br/&gt;
1.0 for doubles &lt;br/&gt;
1L for longs &lt;br/&gt;
1 for ints &lt;br/&gt;
) ?&lt;/p&gt;

&lt;p&gt;I don&apos;t care much, I just have to know for Mahout&apos;s case.&lt;/p&gt;</comment>
                            <comment id="13165486" author="dlyubimov" created="Thu, 8 Dec 2011 19:53:00 +0000"  >&lt;p&gt;also RE: transients: &lt;/p&gt;

&lt;p&gt;Yes transients don&apos;t apply. i may have used them in Writables as markers (similar to &quot;marker interface&quot;) concept to denote fields that actually do not get serialized. &lt;/p&gt;

&lt;p&gt;Yes Writable serialization is not java serialization and transient keyword use is wrong. But perhaps some standard annotation would help as a marker, i am not sure. Comments are usually not as helpful because they are in human language istead of &quot;keyword&quot; language and don&apos;t have a standard look the eye gets used to and grabs on. So i don&apos;t know. But not to mark nonserialized fields in Writables is kind of dangerous.&lt;/p&gt;

&lt;p&gt;One may also argue that persisted objects (such as Writables) must not have a non-persisted state... But pragmatic situations suggest that would be too much of an arm twisting in certain cases (e.g. caching a frequently used knowledge derived from minimally required persisted state in an instantiated object). &lt;/p&gt;
</comment>
                            <comment id="13165496" author="srowen" created="Thu, 8 Dec 2011 20:01:31 +0000"  >&lt;p&gt;I write: 1 (int), 1.0 (double), 1L (long), 1.0f (float). (Even I don&apos;t have a view on &apos;f&apos; vs &apos;F&apos;). Just because it seems simplest.&lt;/p&gt;

&lt;p&gt;The transient I saw was on a static field, which wouldn&apos;t apply even for Serializable. Since transient only has meaning for Serializable it seems less than ideal as a marker. It is a keyword since it&apos;s supposed to have a particular effect, and if applied where it can&apos;t have that effect, looks like an error. &lt;/p&gt;

&lt;p&gt;For us I don&apos;t know of any fields in a Writable that is not serialized, so it may be a moot point at this stage to figure out how to label such a thing.&lt;/p&gt;</comment>
                            <comment id="13165611" author="dlyubimov" created="Thu, 8 Dec 2011 21:58:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;The transient I saw was on a static field&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;not me then &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I am not sure if i use non-serialized fields in Writables in Mahout at all at this point. I don&apos;t think i created many Writables in Mahout.&lt;/p&gt;

&lt;p&gt;so yes it looks like a moot point.&lt;/p&gt;

&lt;p&gt;ok 1L 1.0f. Got it.&lt;/p&gt;</comment>
                            <comment id="13167102" author="adeneche" created="Sun, 11 Dec 2011 14:32:54 +0000"  >&lt;p&gt;Sean, could you post your IntelliJ config file for the code inspection ? I am committing a patch soon, so it&apos;s better to check the style now.&lt;/p&gt;</comment>
                            <comment id="13167104" author="srowen" created="Sun, 11 Dec 2011 14:40:10 +0000"  >&lt;p&gt;My personal IJ inspections config preferences&lt;/p&gt;</comment>
                            <comment id="13167133" author="adeneche" created="Sun, 11 Dec 2011 16:40:09 +0000"  >&lt;p&gt;about javadoc, if a method has an attribute &quot;a&quot;, but I don&apos;t know how to describe it, is it best to have @param a with a missing description or have the @param missing all together ?&lt;/p&gt;

&lt;p&gt;edit: Thanks Sean for the style file&lt;/p&gt;</comment>
                            <comment id="13167136" author="srowen" created="Sun, 11 Dec 2011 16:50:57 +0000"  >&lt;p&gt;You mean it has a parameter &quot;a&quot;? I would not write an empty &quot;@param a&quot;; Javadoc already shows the name and type of all parameters. I suppose if you just can&apos;t describe it, don&apos;t write anything.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12506006" name="MAHOUT-913.patch" size="192556" author="srowen" created="Sat, 3 Dec 2011 21:16:20 +0000"/>
                            <attachment id="12506898" name="Sean.xml" size="60625" author="srowen" created="Sun, 11 Dec 2011 14:40:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 3 Dec 2011 22:11:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>219477</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy27b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22508</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>