<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:26:45 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-300/MAHOUT-300.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-300] Solve performance issues with Vector Implementations</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-300</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;AbstractVector operations like times&lt;/p&gt;

&lt;p&gt;  public Vector times(double x) {&lt;br/&gt;
    Vector result = clone();&lt;br/&gt;
    Iterator&amp;lt;Element&amp;gt; iter = iterateNonZero();&lt;br/&gt;
    while (iter.hasNext()) &lt;/p&gt;
{
      Element element = iter.next();
      int index = element.index();
      result.setQuick(index, element.get() * x);
    }
&lt;p&gt;    return result;&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;should be implemented as follows&lt;/p&gt;

&lt;p&gt; public Vector times(double x) {&lt;br/&gt;
    Vector result = clone();&lt;br/&gt;
    Iterator&amp;lt;Element&amp;gt; iter = result.iterateNonZero();&lt;br/&gt;
    while (iter.hasNext()) &lt;/p&gt;
{
      Element element = iter.next();
      element.set(element.get() * x);
    }
&lt;p&gt;    return result;&lt;br/&gt;
  }&lt;/p&gt;</description>
                <environment></environment>
        <key id="12456835">MAHOUT-300</key>
            <summary>Solve performance issues with Vector Implementations</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12457085">MAHOUT-306</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robinanil">Robin Anil</assignee>
                                    <reporter username="robinanil">Robin Anil</reporter>
                        <labels>
                    </labels>
                <created>Fri, 19 Feb 2010 20:46:25 +0000</created>
                <updated>Sat, 21 May 2011 04:24:19 +0100</updated>
                            <resolved>Mon, 22 Feb 2010 22:27:45 +0000</resolved>
                                    <version>0.3</version>
                                    <fixVersion>0.3</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12836004" author="robinanil" created="Fri, 19 Feb 2010 22:26:32 +0000"  >&lt;p&gt;To kick things off&lt;/p&gt;

&lt;p&gt;maxValue and maxValueIndex was as per done to mimick the current behavior. &lt;br/&gt;
everywhere where zero elements are skipped element.set is used&lt;/p&gt;</comment>
                            <comment id="12836053" author="tdunning" created="Fri, 19 Feb 2010 23:54:43 +0000"  >&lt;p&gt;I think that the min and max functions need to check to see if the number of non-zero elements is &amp;lt; size.  If so, then the max element is Math.max(0, max) and the min element is Math.min(0, min).  This should subsume the case where there are no elements so I would just replace hasNoElements with a counter that you can then use to compare to the size.&lt;/p&gt;</comment>
                            <comment id="12836163" author="srowen" created="Sat, 20 Feb 2010 13:09:55 +0000"  >&lt;p&gt;Tiny stuff &amp;#8211; in things like dotSelf(), you don&apos;t need to call element.get() twice. Save its value in a local. Seems trivial until you consider a million-element vector dotting itself in a tight loop. Saving billions of method calls adds up.&lt;/p&gt;

&lt;p&gt;maxValue() &amp;#8211; don&apos;t set hasNoElements every loop. Set it once according to the initial value of hasNext().&lt;/p&gt;

&lt;p&gt;Otherwise looks good and free to commit, especially if it&apos;s for 0.3.&lt;/p&gt;</comment>
                            <comment id="12836167" author="robinanil" created="Sat, 20 Feb 2010 13:49:42 +0000"  >&lt;p&gt;I removed hasNoElements check as per sean&apos;s and teds comment&lt;br/&gt;
the current fix is as follows. See the maxIndex implementation. I dont know what to do in the edge case of vector being negative valued and sparse. We could return -1 or first index of 0;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; maxValue() {
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; result = &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.NEGATIVE_INFINITY;
    Iterator&amp;lt;Element&amp;gt; iter = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.iterateNonZero();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
      Element element = iter.next();
      result = &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.max(result, element.get());
    }
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (getNumNondefaultElements() &amp;lt; size()) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.max(result, 0.0);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; maxValueIndex() {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; result = -1;
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; max = &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.NEGATIVE_INFINITY;
    Iterator&amp;lt;Element&amp;gt; iter = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.iterateNonZero();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
      Element element = iter.next();
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; tmp = element.get();
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (tmp &amp;gt; max) {
        max = tmp;
        result = element.index();
      }
    }
    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the maxElement is negative and the vector is sparse then any
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// unfilled element(0.0) could be the maxValue hence &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (getNumNondefaultElements() &amp;lt; size() &amp;amp;&amp;amp; max &amp;lt; 0.0) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1; 
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836169" author="robinanil" created="Sat, 20 Feb 2010 14:14:35 +0000"  >&lt;p&gt;An issue i found here was for empty dense vectors&lt;/p&gt;

&lt;p&gt;IterateNonZero() optimises for iterating over non zero elements hence result is still -INF&lt;br/&gt;
getNumNonDefaultElements() == size hence it returns -INF instead of zero. &lt;/p&gt;

&lt;p&gt;I guess i will have to go with a bool hasNoElements/checkedNoElements based solution&lt;/p&gt;</comment>
                            <comment id="12836238" author="tdunning" created="Sat, 20 Feb 2010 19:35:18 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I dont know what to do in the edge case of vector being negative valued and sparse. We could return -1 or first index of 0;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The rule of thumb is that this should return the same as if you copied the vector into any other implementation (such as DenseVector) and did the same operation.  Thus 0 is the correct answer.&lt;/p&gt;

&lt;p&gt;It may be that someday we will need maxNonZero, but we can do that when it comes up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An issue i found here was for empty dense vectors&lt;/p&gt;

&lt;p&gt;IterateNonZero() optimises for iterating over non zero elements hence result is still -INF&lt;br/&gt;
getNumNonDefaultElements() == size hence it returns -INF instead of zero.&lt;/p&gt;

&lt;p&gt;I guess i will have to go with a bool hasNoElements/checkedNoElements based solution&lt;br/&gt;
[ Show &#187; ]&lt;br/&gt;
Robin Anil added a comment - 20/Feb/10 02:14 PM An issue i found here was for empty dense vectors IterateNonZero() optimises for iterating over non zero elements hence result is still -INF getNumNonDefaultElements() == size hence it returns -INF instead of zero. I guess i will have to go with a bool hasNoElements/checkedNoElements based solution&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually, if size() == 0, I am happy with the result being ill-defined.  Probably the best course would be to simply throw an IllegalArgumentException or something similar to signal that asking for the max of a zero sized vector doesn&apos;t make a lot of sense. &lt;/p&gt;</comment>
                            <comment id="12836245" author="robinanil" created="Sat, 20 Feb 2010 19:58:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;It may be that someday we will need maxNonZero, but we can do that when it comes up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Then no need of all these checks. Just need to iterateAll(). It will be slow. But thats the penalty you pay to use this function(should be documented) on large sparse vector. If you just need the maxNonZero, which should use iterateNonZero. All implementations return -INF if nothing is found..&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; maxValue() {
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; result = &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.NEGATIVE_INFINITY;
    Iterator&amp;lt;Element&amp;gt; iter = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.iterateAll();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
      Element element = iter.next();
      result = &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.max(result, element.get());
    }  
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; maxValueIndex() {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; result = -1;
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; max = &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.NEGATIVE_INFINITY;
    Iterator&amp;lt;Element&amp;gt; iter = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.iterateAll();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
      Element element = iter.next();
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; tmp = element.get();
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (tmp &amp;gt; max) {
        max = tmp;
        result = element.index();
      }
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836249" author="tdunning" created="Sat, 20 Feb 2010 20:12:08 +0000"  >&lt;blockquote&gt;
&lt;p&gt;ted:    It may be that someday we will need maxNonZero, but we can do that when it comes up.&lt;/p&gt;

&lt;p&gt;Then no need of all these checks. Just need to iterateAll(). It will be slow. But thats the penalty you pay to use this function(should be documented) on large sparse vector. If you just need the maxNonZero, which should use iterateNonZero. All implementations return -INF if nothing is found..&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Quite the contrary!&lt;/p&gt;

&lt;p&gt;We need sparse implementations that do the same as iterateAll implements but much faster for sparse cases.  The difference between max and maxNonZero is definitional and both should return the same values on sparse or non-sparse versions of their inputs.  They should also both take advantage of sparseness to be as fast as possible.  And all of these cases should have semi-reasonable behavior on unreasonable inputs.&lt;/p&gt;

&lt;p&gt;max should return the largest value x in the vector such that for all values y in the vector y &amp;lt;= x.  This can be done by scanning all non-zero values explicitly and then handling all zero values in one comparison.  If there are NO values in the vector, then the result is undefined and a domain exception is warranted.&lt;/p&gt;

&lt;p&gt;maxNonZero should do the same thing, but should be applied only to non-zero values.  If there are no non-zero values, then the same domain exception needs to be raised.&lt;/p&gt;</comment>
                            <comment id="12836370" author="robinanil" created="Sun, 21 Feb 2010 13:52:33 +0000"  >&lt;p&gt;ok. Made maxValue and maxValueIndex as per your comments. Only difference in behaviour is for random access it could return any index which is zero as the max value as things are not ordered.&lt;/p&gt;

&lt;p&gt;I have modified dot and minus, a frequently used functions in distance measures and optimised them as follows&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; dot(Vector x) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (size() != x.size()) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CardinalityException(size(), x.size());
    }
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; result = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SequentialAccessSparseVector
        &amp;amp;&amp;amp; x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SequentialAccessSparseVector) {
      &lt;span class=&quot;code-comment&quot;&gt;// For sparse SeqAccVectors. &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; dot product without lookup in a linear fashion
&lt;/span&gt;      Iterator&amp;lt;Element&amp;gt; myIter = iterateNonZero();
      Iterator&amp;lt;Element&amp;gt; otherIter = x.iterateNonZero();
      Element myCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
      Element otherCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (myIter.hasNext() &amp;amp;&amp;amp; otherIter.hasNext()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (myCurrent == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) myCurrent = myIter.next();
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (otherCurrent == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) otherCurrent = otherIter.next();
        
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; myIndex = myCurrent.index();
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; otherIndex = otherCurrent.index();
        
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (myIndex &amp;lt; otherIndex) {
          &lt;span class=&quot;code-comment&quot;&gt;// due to the sparseness skipping occurs more hence checked before equality
&lt;/span&gt;          myCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (myIndex &amp;gt; otherIndex){
          otherCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;code-comment&quot;&gt;// both are equal 
&lt;/span&gt;          result += myCurrent.get() * otherCurrent.get();
          myCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
          otherCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        } 
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; RandomAccessSparseVector || &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DenseVector)
               &amp;amp;&amp;amp; (x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SequentialAccessSparseVector || x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; RandomAccessSparseVector)) {
      &lt;span class=&quot;code-comment&quot;&gt;// Try to get the speed boost associated fast/normal seq access on x and quick lookup on &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;
&lt;/span&gt;      Iterator&amp;lt;Element&amp;gt; iter = x.iterateNonZero();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
        Element element = iter.next();
        result += element.get() * getQuick(element.index());
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;code-comment&quot;&gt;// TODO: can optimize more based on the numDefaultElements in the vectors
&lt;/span&gt;      Iterator&amp;lt;Element&amp;gt; iter = iterateNonZero();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
        Element element = iter.next();
        result += element.get() * x.getQuick(element.index());
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    }
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Vector minus(Vector x) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (size() != x.size()) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CardinalityException();
    }
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; RandomAccessSparseVector || x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DenseVector) {
      Vector result = x.clone();
      Iterator&amp;lt;Element&amp;gt; iter = iterateNonZero();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
        Element e = iter.next();
        result.setQuick(e.index(), result.getQuick(e.index()) - e.get());
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;code-comment&quot;&gt;// TODO: check the numNonDefault elements to further optimize 
&lt;/span&gt;      Vector result = clone();
      Iterator&amp;lt;Element&amp;gt; iter = x.iterateNonZero();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
        Element e = iter.next();
        result.setQuick(e.index(), getQuick(e.index()) - e.get());
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    }
  }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Based on all these optimisation, the before and after picture. Note: these are same impl benchmarks seq.dot(seq) etc.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;BenchMarks                    DenseVector                   RandomAccessSparseVector      SequentialAccessSparseVector
DotProduct                                                                                                              
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 0.132436s;          sumTime = 1.354725s;          sumTime = 1.78453s;           
                              minTime = 0.0050ms;           minTime = 0.053ms;            minTime = 0.083ms;            
                              maxTime = 2.996ms;            maxTime = 54.293ms;           maxTime = 8.921ms;            
                              meanTime = 0.006621ms;        meanTime = 0.067736ms;        meanTime = 0.089226ms;        
                              stdDevTime = 0.029368ms;      stdDevTime = 0.417954ms;      stdDevTime = 0.078909ms;      
                              Speed = 151016.34 /sec        Speed = 14763.144 /sec        Speed = 11207.433 /sec        
                              Rate = 1812.1962 MB/s         Rate = 177.15773 MB/s         Rate = 134.4892 MB/s          
DotProduct                                                                                                              
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 0.127648s;          sumTime = 1.076684s;          sumTime = 0.28348s;           
                              minTime = 0.0050ms;           minTime = 0.043ms;            minTime = 0.0090ms;           
                              maxTime = 1.101ms;            maxTime = 20.54ms;            maxTime = 4.556ms;            
                              meanTime = 0.006382ms;        meanTime = 0.053834ms;        meanTime = 0.014174ms;        
                              stdDevTime = 0.015686ms;      stdDevTime = 0.207212ms;      stdDevTime = 0.067221ms;      
                              Speed = 156680.88 /sec        Speed = 18575.55 /sec         Speed = 70551.71 /sec         
                              Rate = 1880.1705 MB/s         Rate = 222.90663 MB/s         Rate = 846.6206 MB/s          

org.apache.mahout.common.distance.CosineDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 11.119366s;         sumTime = 33.521986s;         sumTime = 30.009782s;         
                              minTime = 0.522ms;            minTime = 1.552ms;            minTime = 1.426ms;            
                              maxTime = 7.088ms;            maxTime = 47.688ms;           maxTime = 19.84ms;            
                              meanTime = 0.555968ms;        meanTime = 1.676099ms;        meanTime = 1.500489ms;        
                              stdDevTime = 0.090421ms;      stdDevTime = 0.503179ms;      stdDevTime = 0.168377ms;      
                              Speed = 1798.6637 /sec        Speed = 596.62335 /sec        Speed = 666.44934 /sec        
                              Rate = 21.583965 MB/s         Rate = 7.1594806 MB/s         Rate = 7.9973927 MB/s         
org.apache.mahout.common.distance.CosineDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 1.555915s;          sumTime = 9.765366s;          sumTime = 2.130194s;          
                              minTime = 0.072ms;            minTime = 0.443ms;            minTime = 0.098ms;            
                              maxTime = 7.128ms;            maxTime = 9.95ms;             maxTime = 3.214ms;            
                              meanTime = 0.077795ms;        meanTime = 0.488268ms;        meanTime = 0.106509ms;        
                              stdDevTime = 0.059724ms;      stdDevTime = 0.163519ms;      stdDevTime = 0.046013ms;      
                              Speed = 12854.172 /sec        Speed = 2048.0544 /sec        Speed = 9388.815 /sec         
                              Rate = 154.25008 MB/s         Rate = 24.576653 MB/s         Rate = 112.665794 MB/s

org.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 4.756927s;          sumTime = 32.704616s;         sumTime = 16.252285s;         
                              minTime = 0.203ms;            minTime = 1.467ms;            minTime = 0.75ms;             
                              maxTime = 2.482ms;            maxTime = 13.63ms;            maxTime = 3.763ms;            
                              meanTime = 0.237846ms;        meanTime = 1.63523ms;         meanTime = 0.812614ms;        
                              stdDevTime = 0.083861ms;      stdDevTime = 0.357357ms;      stdDevTime = 0.095544ms;      
                              Speed = 4204.395 /sec         Speed = 611.5344 /sec         Speed = 1230.5962 /sec        
                              Rate = 50.452744 MB/s         Rate = 7.3384137 MB/s         Rate = 14.767155 MB/s         
org.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 1.590073s;          sumTime = 9.936997s;          sumTime = 2.142341s;          
                              minTime = 0.073ms;            minTime = 0.442ms;            minTime = 0.098ms;            
                              maxTime = 9.248ms;            maxTime = 13.526ms;           maxTime = 12.412ms;           
                              meanTime = 0.079503ms;        meanTime = 0.496849ms;        meanTime = 0.107117ms;        
                              stdDevTime = 0.07321ms;       stdDevTime = 0.185974ms;      stdDevTime = 0.100796ms;      
                              Speed = 12578.039 /sec        Speed = 2012.6804 /sec        Speed = 9335.582 /sec         
                              Rate = 150.93648 MB/s         Rate = 24.152166 MB/s         Rate = 112.026985 MB/s     

org.apache.mahout.common.distance.ManhattanDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 3.463162s;          sumTime = 30.782008s;         sumTime = 38.617236s;         
                              minTime = 0.133ms;            minTime = 1.289ms;            minTime = 1.749ms;            
                              maxTime = 19.493ms;           maxTime = 44.531ms;           maxTime = 13.406ms;           
                              meanTime = 0.173158ms;        meanTime = 1.5391ms;          meanTime = 1.930861ms;        
                              stdDevTime = 0.204057ms;      stdDevTime = 0.496925ms;      stdDevTime = 0.302304ms;      
                              Speed = 5775.069 /sec         Speed = 649.7302 /sec         Speed = 517.90344 /sec        
                              Rate = 69.30083 MB/s          Rate = 7.796763 MB/s          Rate = 6.214842 MB/s          
org.apache.mahout.common.distance.ManhattanDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 3.210922s;          sumTime = 26.983053s;         sumTime = 34.154993s;         
                              minTime = 0.124ms;            minTime = 1.121ms;            minTime = 1.548ms;            
                              maxTime = 20.179ms;           maxTime = 16.974ms;           maxTime = 12.913ms;           
                              meanTime = 0.160546ms;        meanTime = 1.349152ms;        meanTime = 1.707749ms;        
                              stdDevTime = 0.212426ms;      stdDevTime = 0.490706ms;      stdDevTime = 0.341319ms;      
                              Speed = 6228.74 /sec          Speed = 741.20593 /sec        Speed = 585.5659 /sec         
                              Rate = 74.74489 MB/s          Rate = 8.894472 MB/s          Rate = 7.026791 MB/s       

org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 2.108722s;          sumTime = 32.750794s;         sumTime = 16.406358s;         
                              minTime = 0.06ms;             minTime = 1.466ms;            minTime = 0.75ms;             
                              maxTime = 12.239ms;           maxTime = 106.425ms;          maxTime = 19.271ms;           
                              meanTime = 0.105436ms;        meanTime = 1.637539ms;        meanTime = 0.820317ms;        
                              stdDevTime = 0.159718ms;      stdDevTime = 0.824038ms;      stdDevTime = 0.201979ms;      
                              Speed = 9484.417 /sec         Speed = 610.6722 /sec         Speed = 1219.0396 /sec        
                              Rate = 113.81301 MB/s         Rate = 7.328067 MB/s          Rate = 14.628475 MB/s         
org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 1.57831s;           sumTime = 9.910735s;          sumTime = 2.123169s;          
                              minTime = 0.072ms;            minTime = 0.445ms;            minTime = 0.098ms;            
                              maxTime = 2.888ms;            maxTime = 5.962ms;            maxTime = 5.348ms;            
                              meanTime = 0.078915ms;        meanTime = 0.495536ms;        meanTime = 0.106158ms;        
                              stdDevTime = 0.034564ms;      stdDevTime = 0.145759ms;      stdDevTime = 0.050933ms;      
                              Speed = 12671.781 /sec        Speed = 2018.0138 /sec        Speed = 9419.881 /sec         
                              Rate = 152.06139 MB/s         Rate = 24.216167 MB/s         Rate = 113.03858 MB/s   

org.apache.mahout.common.distance.TanimotoDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 5.2595s;            sumTime = 25.087902s;         sumTime = 24.759318s;         
                              minTime = 0.246ms;            minTime = 1.149ms;            minTime = 1.118ms;            
                              maxTime = 7.092ms;            maxTime = 13.394ms;           maxTime = 7.952ms;            
                              meanTime = 0.262975ms;        meanTime = 1.254395ms;        meanTime = 1.237965ms;        
                              stdDevTime = 0.073059ms;      stdDevTime = 0.271826ms;      stdDevTime = 0.123637ms;      
                              Speed = 3802.6428 /sec        Speed = 797.19696 /sec        Speed = 807.7767 /sec         
                              Rate = 45.631714 MB/s         Rate = 9.566364 MB/s          Rate = 9.69332 MB/s  
org.apache.mahout.common.distance.TanimotoDistanceMeasure                                                                                          
                              nCalls = 20000;               nCalls = 20000;               nCalls = 20000;               
                              sumTime = 1.567412s;          sumTime = 9.751068s;          sumTime = 2.101077s;          
                              minTime = 0.072ms;            minTime = 0.442ms;            minTime = 0.098ms;            
                              maxTime = 2.575ms;            maxTime = 8.815ms;            maxTime = 2.138ms;            
                              meanTime = 0.07837ms;         meanTime = 0.487553ms;        meanTime = 0.105053ms;        
                              stdDevTime = 0.031039ms;      stdDevTime = 0.171094ms;      stdDevTime = 0.028441ms;      
                              Speed = 12759.887 /sec        Speed = 2051.0574 /sec        Speed = 9518.928 /sec         
                              Rate = 153.11865 MB/s         Rate = 24.61269 MB/s          Rate = 114.227135 MB/s        

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;


&lt;p&gt;There is no difference in Manhattan distance, as its optimised for diff impls&lt;/p&gt;</comment>
                            <comment id="12836371" author="robinanil" created="Sun, 21 Feb 2010 13:54:04 +0000"  >&lt;p&gt;diff from dir trunk/math/&lt;/p&gt;</comment>
                            <comment id="12836385" author="jake.mannix" created="Sun, 21 Feb 2010 15:42:16 +0000"  >&lt;p&gt;This output is on the Reuters collection again, or on the dense data in the VectorBenchmarks code?  The latter is artificially favoring dense data...&lt;/p&gt;</comment>
                            <comment id="12836411" author="robinanil" created="Sun, 21 Feb 2010 17:58:32 +0000"  >&lt;p&gt;Its on the artificial VectorBenchmarks. On reuters, i see similar performance gains in runtime. Its just a matter of adding the same in Vector benchmarks.  To put them into quantifiable values, it just a matter of computing the following. &lt;br/&gt;
Its just a matter of adding the following to the vector benchmarks.&lt;br/&gt;
seq.fn(sparse) sparse.fn(seq) seq.fn(dense) sparse.fn(dense) dense.fn(seq) dense.fn(sparse)&lt;/p&gt;</comment>
                            <comment id="12836412" author="robinanil" created="Sun, 21 Feb 2010 18:03:31 +0000"  >&lt;p&gt;Also please review this and confirm its fit to commit. I dont want to block 0.3. I can continue exploring other changes on 0.4&lt;/p&gt;</comment>
                            <comment id="12836433" author="tdunning" created="Sun, 21 Feb 2010 19:46:45 +0000"  >&lt;p&gt;I think that this is a cleaner style for the merge loop.  In particular, the average inner loop is much tighter.  The trick is that either iterator can take many steps per outer iteration and that whenever either iterator is stepping, you only check that iterator, its index and a constant.  In sparse vectors, this is a big win.  Even in fairly dense vectors there are just a few extra tests which the compiler may well be able to eliminate with common sub-expression analysis.  This form has the added benefit of having a simple correctness argument.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;      while (myIter.hasNext() &amp;amp;&amp;amp; otherIter.hasNext()) {
        // loop invariant: neither entry is up to date
        Iterator&amp;lt;Element&amp;gt; myIter = iterateNonZero();
        Iterator&amp;lt;Element&amp;gt; otherIter = x.iterateNonZero();

	// scan to end or equality
	while (myCurrent.index() != otherCurrent.index() &amp;amp;&amp;amp;
	          ((myIter.hasNext() &amp;amp;&amp;amp; myCurrent.index() &amp;lt; otherCurrent.index()) ||
		  (otherIter.hasNext() &amp;amp;&amp;amp; otherCurrent.index() &amp;lt; myCurrent.index()))) {
	  // invariant: both entries are current

          // catch up my side.  This will find first match, if possible by stepping myIter
          while (myIter.hasNext() &amp;amp;&amp;amp; myCurrent.index() &amp;lt; otherCurrent.index()) {
            myCurrent = myIter.next();
  	  }
          // if match, it was the first one possible

          // catch up other side.  This will find first match, if possible
  	  while (otherIter.hasNext() &amp;amp;&amp;amp; otherCurrent.index() &amp;lt; myCurrent.index()) {
  	    otherCurrent = otherIter.next();
  	  }
          // if match, it was the first one possible

	  // invariant: both entries are current
        }
	// exit: (both entries are current AND equal index AND it was first match) OR one side ran out early

	if (myCurrent.index() == otherCurrent.index()) {
	  // if equal, use it
          result += myCurrent.get() * otherCurrent.get();
        }
	// invariant: neither entry is up to date (or we will exit loop)
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836440" author="jake.mannix" created="Sun, 21 Feb 2010 20:26:54 +0000"  >&lt;p&gt;Add sparsity and incremental creation in addition to copy constructor.&lt;/p&gt;</comment>
                            <comment id="12836448" author="jake.mannix" created="Sun, 21 Feb 2010 21:24:46 +0000"  >&lt;p&gt;My previous patch forgot to include Robin&apos;s math changes.  This patch has all of his changes, plus the sparsity parameter and new &quot;incremental create&quot; statistic (to show how slow it is to build up a SequentialAccessSparseVector incrementally).&lt;/p&gt;</comment>
                            <comment id="12836449" author="jake.mannix" created="Sun, 21 Feb 2010 21:30:27 +0000"  >&lt;p&gt;Running this on my laptop, with numNonzeroElements = 1000, vector cardinality 100,000, numVectors = 100, numLoops = 100 (requires -Xmx1g).&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
INFO: 
BenchMarks                    DenseVector                   RandomAccessSparseVector      SequentialAccessSparseVector  
Clone                                                                                                                   
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 12.240903s;         sumTime = 2.40168s;           sumTime = 2.1353s;            
                              minTime = 0.425ms;            minTime = 0.065ms;            minTime = 0.065ms;            
                              maxTime = 96.625ms;           maxTime = 30.835ms;           maxTime = 25.169ms;           
                              meanTime = 1.22409ms;         meanTime = 0.240168ms;        meanTime = 0.21353ms;         
                              stdDevTime = 3.994235ms;      stdDevTime = 1.468017ms;      stdDevTime = 1.271389ms;      
                              Speed = 816.93317 /sec        Speed = 4163.752 /sec         Speed = 4683.1826 /sec        
                              Rate = 980.3198 MB/s          Rate = 4996.503 MB/s          Rate = 5619.8193 MB/s         

Create (copy)                                                                                                           
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 13.525425s;         sumTime = 1.855115s;          sumTime = 0.662937s;          
                              minTime = 0.206ms;            minTime = 0.088ms;            minTime = 0.015ms;            
                              maxTime = 99.047ms;           maxTime = 25.277ms;           maxTime = 26.974ms;           
                              meanTime = 1.352542ms;        meanTime = 0.185511ms;        meanTime = 0.066293ms;        
                              stdDevTime = 5.680836ms;      stdDevTime = 0.718719ms;      stdDevTime = 0.364231ms;      
                              Speed = 739.34827 /sec        Speed = 5390.5015 /sec        Speed = 15084.389 /sec        
                              Rate = 887.21796 MB/s         Rate = 6468.6016 MB/s         Rate = 18101.268 MB/s         

Create (incrementally)                                                                                                  
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 0.145204s;          sumTime = 0.533273s;          sumTime = 4.398924s;          
                              minTime = 0.0ms;              minTime = 0.014ms;            minTime = 0.338ms;            
                              maxTime = 2.874ms;            maxTime = 2.713ms;            maxTime = 22.045ms;           
                              meanTime = 0.01452ms;         meanTime = 0.053327ms;        meanTime = 0.439892ms;        
                              stdDevTime = 0.037578ms;      stdDevTime = 0.034625ms;      stdDevTime = 0.29153ms;       
                              Speed = 68868.625 /sec        Speed = 18752.121 /sec        Speed = 2273.2832 /sec        
                              Rate = 82642.35 MB/s          Rate = 22502.547 MB/s         Rate = 2727.94 MB/s           

DotProduct                                                                                                              
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 3.094423s;          sumTime = 1.218703s;          sumTime = 0.378118s;          
                              minTime = 0.237ms;            minTime = 0.07ms;             minTime = 0.025ms;            
                              maxTime = 5.995ms;            maxTime = 20.012ms;           maxTime = 9.925ms;            
                              meanTime = 0.309442ms;        meanTime = 0.12187ms;         meanTime = 0.037811ms;        
                              stdDevTime = 0.095079ms;      stdDevTime = 0.288768ms;      stdDevTime = 0.1183ms;        
                              Speed = 3231.62 /sec          Speed = 8205.444 /sec         Speed = 26446.77 /sec         
                              Rate = 3877.9443 MB/s         Rate = 9846.534 MB/s          Rate = 31736.123 MB/s         

org.apache.mahout.common.distance.CosineDistanceMeasure                                                                                          
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 5.9166s;            sumTime = 2.970111s;          sumTime = 0.812395s;          
                              minTime = 0.459ms;            minTime = 0.223ms;            minTime = 0.037ms;            
                              maxTime = 2.295ms;            maxTime = 9.043ms;            maxTime = 0.716ms;            
                              meanTime = 0.59166ms;         meanTime = 0.297011ms;        meanTime = 0.081239ms;        
                              stdDevTime = 0.074413ms;      stdDevTime = 0.175312ms;      stdDevTime = 0.025369ms;      
                              Speed = 1690.1599 /sec        Speed = 3366.8774 /sec        Speed = 12309.282 /sec        
                              Rate = 2028.192 MB/s          Rate = 4040.2532 MB/s         Rate = 14771.14 MB/s          

org.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                                          
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 3.43192s;           sumTime = 1.703885s;          sumTime = 1.218073s;          
                              minTime = 0.196ms;            minTime = 0.059ms;            minTime = 0.011ms;            
                              maxTime = 2.494ms;            maxTime = 6.272ms;            maxTime = 3.491ms;            
                              meanTime = 0.343192ms;        meanTime = 0.170388ms;        meanTime = 0.121807ms;        
                              stdDevTime = 0.054743ms;      stdDevTime = 0.065581ms;      stdDevTime = 0.045384ms;      
                              Speed = 2913.8206 /sec        Speed = 5868.9404 /sec        Speed = 8209.688 /sec         
                              Rate = 3496.585 MB/s          Rate = 7042.7285 MB/s         Rate = 9851.627 MB/s          

org.apache.mahout.common.distance.ManhattanDistanceMeasure                                                                                          
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 11.521895s;         sumTime = 4.10605s;           sumTime = 9.535213s;          
                              minTime = 0.734ms;            minTime = 0.251ms;            minTime = 0.661ms;            
                              maxTime = 20.341ms;           maxTime = 29.624ms;           maxTime = 11.764ms;           
                              meanTime = 1.152189ms;        meanTime = 0.410605ms;        meanTime = 0.953521ms;        
                              stdDevTime = 0.982439ms;      stdDevTime = 0.568994ms;      stdDevTime = 0.425346ms;      
                              Speed = 867.9127 /sec         Speed = 2435.4307 /sec        Speed = 1048.7443 /sec        
                              Rate = 1041.4954 MB/s         Rate = 2922.5168 MB/s         Rate = 1258.4932 MB/s         

org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure                                                                                          
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 2.952337s;          sumTime = 1.410157s;          sumTime = 1.138238s;          
                              minTime = 0.17ms;             minTime = 0.084ms;            minTime = 0.011ms;            
                              maxTime = 17.479ms;           maxTime = 7.72ms;             maxTime = 3.753ms;            
                              meanTime = 0.295233ms;        meanTime = 0.141015ms;        meanTime = 0.113823ms;        
                              stdDevTime = 0.206201ms;      stdDevTime = 0.103339ms;      stdDevTime = 0.053248ms;      
                              Speed = 3387.1472 /sec        Speed = 7091.4087 /sec        Speed = 8785.509 /sec         
                              Rate = 4064.577 MB/s          Rate = 8509.69 MB/s           Rate = 10542.611 MB/s         

org.apache.mahout.common.distance.TanimotoDistanceMeasure                                                                                          
                              nCalls = 10000;               nCalls = 10000;               nCalls = 10000;               
                              sumTime = 5.545072s;          sumTime = 2.58138s;           sumTime = 1.460984s;          
                              minTime = 0.455ms;            minTime = 0.186ms;            minTime = 0.056ms;            
                              maxTime = 17.208ms;           maxTime = 14.809ms;           maxTime = 5.938ms;            
                              meanTime = 0.554507ms;        meanTime = 0.258138ms;        meanTime = 0.146098ms;        
                              stdDevTime = 0.195172ms;      stdDevTime = 0.192851ms;      stdDevTime = 0.08797ms;       
                              Speed = 1803.4031 /sec        Speed = 3873.8967 /sec        Speed = 6844.7017 /sec        
                              Rate = 2164.0837 MB/s         Rate = 4648.6763 MB/s         Rate = 8213.643 MB/s  
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;        </comment>
                            <comment id="12836452" author="tdunning" created="Sun, 21 Feb 2010 21:44:33 +0000"  >&lt;p&gt;Huh.... some of those times are a little surprising.&lt;/p&gt;

&lt;p&gt;For DotProduct and CosineDistanceMeasure, SequentialAccessSparseVector is 3x faster than RandomAccessSparseVector and 8x faster than DenseVector.  There the world is good.&lt;/p&gt;

&lt;p&gt;But for SquaredEuclideanDistanceMeasure and TanimotoDistanceMeasure, there is little difference while for ManhattanDistanceMeasure, SequentialAccessSparseVector is slower than RandomAccessSparseVector.&lt;/p&gt;

&lt;p&gt;Is it just that for these last 3 distances the sequentiality has not been taken into account?&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;DotProduct
                             Rate = 3877.9443 MB/s         Rate = 9846.534 MB/s          Rate = 31736.123 MB/s

org.apache.mahout.common.distance.CosineDistanceMeasure
                             Speed = 1690.1599 /sec        Speed = 3366.8774 /sec        Speed = 12309.282 /sec

org.apache.mahout.common.distance.EuclideanDistanceMeasure
                             Speed = 2913.8206 /sec        Speed = 5868.9404 /sec        Speed = 8209.688 /sec

org.apache.mahout.common.distance.ManhattanDistanceMeasure
                             Speed = 867.9127 /sec         Speed = 2435.4307 /sec        Speed = 1048.7443 /sec

org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure
                             Speed = 3387.1472 /sec        Speed = 7091.4087 /sec        Speed = 8785.509 /sec

org.apache.mahout.common.distance.TanimotoDistanceMeasure
                             Speed = 1803.4031 /sec        Speed = 3873.8967 /sec        Speed = 6844.7017 /sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836456" author="jake.mannix" created="Sun, 21 Feb 2010 21:55:49 +0000"  >&lt;p&gt;Well, I&apos;ve got Robin&apos;s most recent changes in there, so I&apos;m not sure if the optimizations filtered through to all of the places in the distance measures.&lt;/p&gt;

&lt;p&gt;I also don&apos;t know if the MB/s rates are correct anymore, with sparsity.  They don&apos;t even really make sense for the sparse case, because Dense is &quot;bigger&quot;, so you can go fast, but whoop-de-doo, you can go fast over a bunch of zeroes!  Rate in terms of number of vectors processed matters though.&lt;/p&gt;</comment>
                            <comment id="12836457" author="jake.mannix" created="Sun, 21 Feb 2010 22:03:42 +0000"  >&lt;p&gt;Interestingly, for SquaredEuclideanDistanceMeasure (and EuclideanDistanceMeasure), since vectors are caching their lengthSquareds, the only computation going on in the distance measure is a dot() :&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; 
 &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; and v has a cached lengthSquared, dot product is quickest way to compute &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(lengthSquared &amp;gt;= 0 &amp;amp;&amp;amp; v &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; AbstractVector &amp;amp;&amp;amp; ((AbstractVector)v).lengthSquared &amp;gt;= 0) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; lengthSquared + v.getLengthSquared() - 2 * &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.dot(v);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the time should be nearly exactly the same for all three, in the case where it&apos;s cached.&lt;/p&gt;</comment>
                            <comment id="12836460" author="jake.mannix" created="Sun, 21 Feb 2010 22:17:16 +0000"  >&lt;p&gt;Another run, even more sparse: cardinality: 500,000, density: 100, only 50 vectors this time, because I was running out of memory, 100 loops:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;INFO: 
BenchMarks                    DenseVector                   RandomAccessSparseVector      SequentialAccessSparseVector  
Clone                                                                                                                   
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 41.899077s;         sumTime = 6.736452s;          sumTime = 6.268572s;          
                              minTime = 4.593ms;            minTime = 0.453ms;            minTime = 0.415ms;            
                              maxTime = 186.272ms;          maxTime = 183.524ms;          maxTime = 187.254ms;          
                              meanTime = 8.379815ms;        meanTime = 1.34729ms;         meanTime = 1.253714ms;        
                              stdDevTime = 11.260108ms;     stdDevTime = 4.647302ms;      stdDevTime = 4.992136ms;      
                              Speed = 119.334366 /sec       Speed = 742.23047 /sec        Speed = 797.6298 /sec         
                              Rate = -514.0831 MB/s         Rate = -3197.471 MB/s         Rate = -3436.127 MB/s         

Create (copy)                                                                                                           
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 33.213833s;         sumTime = 0.14521s;           sumTime = 0.035935s;          
                              minTime = 1.643ms;            minTime = 0.011ms;            minTime = 0.0040ms;           
                              maxTime = 139.441ms;          maxTime = 18.174ms;           maxTime = 1.431ms;            
                              meanTime = 6.642766ms;        meanTime = 0.029042ms;        meanTime = 0.007187ms;        
                              stdDevTime = 11.24469ms;      stdDevTime = 0.349996ms;      stdDevTime = 0.030313ms;      
                              Speed = 150.53969 /sec        Speed = 34432.89 /sec         Speed = 139140.11 /sec        
                              Rate = -648.5132 MB/s         Rate = -148334.2 MB/s         Rate = -599404.75 MB/s        

Create (incrementally)                                                                                                  
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 0.04538s;           sumTime = 0.035935s;          sumTime = 0.089474s;          
                              minTime = 0.0ms;              minTime = 0.0ms;              minTime = 0.0ms;              
                              maxTime = 0.172ms;            maxTime = 1.201ms;            maxTime = 0.612ms;            
                              meanTime = 0.009076ms;        meanTime = 0.007187ms;        meanTime = 0.017894ms;        
                              stdDevTime = 0.006338ms;      stdDevTime = 0.023144ms;      stdDevTime = 0.016724ms;      
                              Speed = 110180.695 /sec       Speed = 139140.11 /sec        Speed = 55882.156 /sec        
                              Rate = -474649.8 MB/s         Rate = -599404.75 MB/s        Rate = -240735.95 MB/s        

DotProduct                                                                                                              
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 5.036773s;          sumTime = 0.510658s;          sumTime = 0.063884s;          
                              minTime = 0.848ms;            minTime = 0.047ms;            minTime = 0.0020ms;           
                              maxTime = 7.558ms;            maxTime = 8.919ms;            maxTime = 0.325ms;            
                              meanTime = 1.007354ms;        meanTime = 0.102131ms;        meanTime = 0.012776ms;        
                              stdDevTime = 0.203069ms;      stdDevTime = 0.19957ms;       stdDevTime = 0.024669ms;      
                              Speed = 992.6991 /sec         Speed = 9791.289 /sec         Speed = 78266.86 /sec         
                              Rate = -4276.47 MB/s          Rate = -42180.11 MB/s         Rate = -337167.5 MB/s         

org.apache.mahout.common.distance.CosineDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 29.883311s;         sumTime = 2.141407s;          sumTime = 0.112809s;          
                              minTime = 5.362ms;            minTime = 0.362ms;            minTime = 0.015ms;            
                              maxTime = 22.912ms;           maxTime = 9.322ms;            maxTime = 14.899ms;           
                              meanTime = 5.976662ms;        meanTime = 0.428281ms;        meanTime = 0.022561ms;        
                              stdDevTime = 0.764279ms;      stdDevTime = 0.133002ms;      stdDevTime = 0.216971ms;      
                              Speed = 167.31747 /sec        Speed = 2334.9133 /sec        Speed = 44322.703 /sec        
                              Rate = -720.7906 MB/s         Rate = -10058.625 MB/s        Rate = -190938.75 MB/s        

org.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 11.211339s;         sumTime = 0.830761s;          sumTime = 0.100585s;          
                              minTime = 1.791ms;            minTime = 0.116ms;            minTime = 0.0040ms;           
                              maxTime = 5.327ms;            maxTime = 2.808ms;            maxTime = 0.235ms;            
                              meanTime = 2.242267ms;        meanTime = 0.166152ms;        meanTime = 0.020117ms;        
                              stdDevTime = 0.206909ms;      stdDevTime = 0.050465ms;      stdDevTime = 0.006688ms;      
                              Speed = 445.97705 /sec        Speed = 6018.5776 /sec        Speed = 49709.2 /sec          
                              Rate = -1921.2344 MB/s        Rate = -25927.562 MB/s        Rate = -214143.36 MB/s        

org.apache.mahout.common.distance.ManhattanDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 79.638441s;         sumTime = 10.13851s;          sumTime = 7.503073s;          
                              minTime = 13.119ms;           minTime = 1.309ms;            minTime = 0.756ms;            
                              maxTime = 42.521ms;           maxTime = 30.281ms;           maxTime = 19.813ms;           
                              meanTime = 15.927688ms;       meanTime = 2.027702ms;        meanTime = 1.500614ms;        
                              stdDevTime = 3.771848ms;      stdDevTime = 1.900016ms;      stdDevTime = 1.66222ms;       
                              Speed = 62.783752 /sec        Speed = 493.1691 /sec         Speed = 666.3936 /sec         
                              Rate = -270.4675 MB/s         Rate = -2124.534 MB/s         Rate = -2870.7717 MB/s        

org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 9.871233s;          sumTime = 0.82808s;           sumTime = 0.106835s;          
                              minTime = 1.758ms;            minTime = 0.108ms;            minTime = 0.0040ms;           
                              maxTime = 11.031ms;           maxTime = 1.151ms;            maxTime = 2.86ms;             
                              meanTime = 1.974246ms;        meanTime = 0.165616ms;        meanTime = 0.021367ms;        
                              stdDevTime = 0.254992ms;      stdDevTime = 0.044317ms;      stdDevTime = 0.04582ms;       
                              Speed = 506.52234 /sec        Speed = 6038.064 /sec         Speed = 46801.14 /sec         
                              Rate = -2182.0586 MB/s        Rate = -26011.508 MB/s        Rate = -201615.66 MB/s        

org.apache.mahout.common.distance.TanimotoDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 32.850508s;         sumTime = 2.129189s;          sumTime = 0.142919s;          
                              minTime = 5.336ms;            minTime = 0.353ms;            minTime = 0.0ms;              
                              maxTime = 68.024ms;           maxTime = 20.729ms;           maxTime = 0.407ms;            
                              meanTime = 6.570101ms;        meanTime = 0.425837ms;        meanTime = 0.028583ms;        
                              stdDevTime = 2.417741ms;      stdDevTime = 0.307561ms;      stdDevTime = 0.023598ms;      
                              Speed = 152.20465 /sec        Speed = 2348.312 /sec         Speed = 34984.848 /sec        
                              Rate = -655.6857 MB/s         Rate = -10116.345 MB/s        Rate = -150712.0 MB/s         

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836466" author="jake.mannix" created="Sun, 21 Feb 2010 22:32:23 +0000"  >&lt;p&gt;I&apos;m a little concerned about correctness though:&lt;/p&gt;

&lt;p&gt;I changed the benchmark code to reset the &quot;result&quot; value after each implementation test (so the result is then a multiple of the sum of the vec_i.dot(vec_(i+1)) for the dot test, and the sum of the min distances for the distance tests), and I get back the following, which has a little anomaly at the beginning, for Dense dot:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
INFO: DotProduct DenseVector 
sum = 763.2092807960457  

INFO: DotProduct RandomAccessSparseVector 
sum = 588.1135274394809  

INFO: DotProduct SequentialAccessSparseVector 
sum = 596.8159785621963  



INFO: org.apache.mahout.common.distance.CosineDistanceMeasure DenseVector 
minDistance = 4762.262583384831  

INFO: org.apache.mahout.common.distance.CosineDistanceMeasure RandomAccessSparseVector 
minDistance = 4762.256231037734  

INFO: org.apache.mahout.common.distance.CosineDistanceMeasure SequentialAccessSparseVector 
minDistance = 4762.076824677951  



INFO: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure DenseVector 
minDistance = 960106.3770997674  

INFO: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure RandomAccessSparseVector 
minDistance = 958642.7572087944  

INFO: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure SequentialAccessSparseVector 
minDistance = 959249.2711033518  



INFO: org.apache.mahout.common.distance.EuclideanDistanceMeasure DenseVector 
minDistance = 67835.12813051333  

INFO: org.apache.mahout.common.distance.EuclideanDistanceMeasure RandomAccessSparseVector 
minDistance = 67781.10820288945  

INFO: org.apache.mahout.common.distance.EuclideanDistanceMeasure SequentialAccessSparseVector 
minDistance = 67802.77780568038  



INFO: org.apache.mahout.common.distance.ManhattanDistanceMeasure DenseVector 
minDistance = 767471.8978953827  

INFO: org.apache.mahout.common.distance.ManhattanDistanceMeasure RandomAccessSparseVector 
minDistance = 766991.0938857986  

INFO: org.apache.mahout.common.distance.ManhattanDistanceMeasure SequentialAccessSparseVector 
minDistance = 767126.9510115242  



INFO: org.apache.mahout.common.distance.TanimotoDistanceMeasure DenseVector 
minDistance = 4781.060847329619  

INFO: org.apache.mahout.common.distance.TanimotoDistanceMeasure RandomAccessSparseVector 
minDistance = 4781.058010411256  

INFO: org.apache.mahout.common.distance.TanimotoDistanceMeasure SequentialAccessSparseVector 
minDistance = 4781.051812134896  
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836468" author="jake.mannix" created="Sun, 21 Feb 2010 22:47:30 +0000"  >&lt;p&gt;Ok, went away... probably a case of pebkac &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
org.apache.mahout.benchmark.VectorBenchmarks -vs 50000 -sp 1000 -nv 50 -l 100 -no 5
Feb 21, 2010 2:43:06 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Create (copy) DenseVector 
 
nCalls = 5000;
sumTime = 3.585996s;
minTime = 0.12ms;
maxTime = 54.331ms;
meanTime = 0.717199ms;
stdDevTime = 3.823725ms; 
Speed: 1394.3127 UnitsProcessed/sec 836.58765 MBytes/sec                                   
Feb 21, 2010 2:43:07 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Create (copy) RandomAccessSparseVector 
 
nCalls = 5000;
sumTime = 0.953957s;
minTime = 0.115ms;
maxTime = 97.032ms;
meanTime = 0.190791ms;
stdDevTime = 1.489048ms; 
Speed: 5241.326 UnitsProcessed/sec 3144.796 MBytes/sec                                   
Feb 21, 2010 2:43:08 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Create (copy) SequentialAccessSparseVector 
 
nCalls = 5000;
sumTime = 0.278149s;
minTime = 0.0090ms;
maxTime = 8.032ms;
meanTime = 0.055629ms;
stdDevTime = 0.149567ms; 
Speed: 17975.977 UnitsProcessed/sec 10785.587 MBytes/sec                                   
Feb 21, 2010 2:43:11 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Create (incrementally) DenseVector 
 
nCalls = 5000;
sumTime = 0.059921s;
minTime = 0.0040ms;
maxTime = 0.251ms;
meanTime = 0.011984ms;
stdDevTime = 0.009846ms; 
Speed: 83443.195 UnitsProcessed/sec 50065.92 MBytes/sec                                   
Feb 21, 2010 2:43:12 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Create (incrementally) RandomAccessSparseVector 
 
nCalls = 5000;
sumTime = 0.268465s;
minTime = 0.021ms;
maxTime = 3.14ms;
meanTime = 0.053693ms;
stdDevTime = 0.047671ms; 
Speed: 18624.402 UnitsProcessed/sec 11174.642 MBytes/sec                                   
Feb 21, 2010 2:43:15 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Create (incrementally) SequentialAccessSparseVector 
 
nCalls = 5000;
sumTime = 2.172348s;
minTime = 0.356ms;
maxTime = 6.754ms;
meanTime = 0.434469ms;
stdDevTime = 0.198236ms; 
Speed: 2301.657 UnitsProcessed/sec 1380.9943 MBytes/sec                                   
Feb 21, 2010 2:43:18 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Clone DenseVector 
 
nCalls = 5000;
sumTime = 3.192205s;
minTime = 0.211ms;
maxTime = 517.68ms;
meanTime = 0.638441ms;
stdDevTime = 7.573187ms; 
Speed: 1566.3154 UnitsProcessed/sec 939.78925 MBytes/sec                                   
Feb 21, 2010 2:43:18 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Clone RandomAccessSparseVector 
 
nCalls = 5000;
sumTime = 0.521343s;
minTime = 0.048ms;
maxTime = 22.281ms;
meanTime = 0.104268ms;
stdDevTime = 0.693174ms; 
Speed: 9590.614 UnitsProcessed/sec 5754.369 MBytes/sec                                   
Feb 21, 2010 2:43:19 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: Clone SequentialAccessSparseVector 
 
nCalls = 5000;
sumTime = 0.56215s;
minTime = 0.016ms;
maxTime = 20.333ms;
meanTime = 0.11243ms;
stdDevTime = 0.70505ms; 
Speed: 8894.423 UnitsProcessed/sec 5336.654 MBytes/sec                                   
Feb 21, 2010 2:43:20 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: DotProduct DenseVector 
sum = -5423.620877902339  
nCalls = 5000;
sumTime = 1.07412s;
minTime = 0.137ms;
maxTime = 13.189ms;
meanTime = 0.214824ms;
stdDevTime = 0.228647ms; 
Speed: 4654.9736 UnitsProcessed/sec 2792.9841 MBytes/sec                                   
Feb 21, 2010 2:43:21 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: DotProduct RandomAccessSparseVector 
sum = -5564.910676620138  
nCalls = 5000;
sumTime = 0.890045s;
minTime = 0.051ms;
maxTime = 316.842ms;
meanTime = 0.178009ms;
stdDevTime = 4.501319ms; 
Speed: 5617.6934 UnitsProcessed/sec 3370.6162 MBytes/sec                                   
Feb 21, 2010 2:43:21 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: DotProduct SequentialAccessSparseVector 
sum = -5233.180796033902  
nCalls = 5000;
sumTime = 0.215025s;
minTime = 0.026ms;
maxTime = 1.744ms;
meanTime = 0.043005ms;
stdDevTime = 0.084628ms; 
Speed: 23253.111 UnitsProcessed/sec 13951.867 MBytes/sec                                   
Feb 21, 2010 2:43:29 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.CosineDistanceMeasure DenseVector 
minDistance = 4475.855202291762  
nCalls = 5000;
sumTime = 7.735503s;
minTime = 1.368ms;
maxTime = 9.961ms;
meanTime = 1.5471ms;
stdDevTime = 0.198466ms; 
Speed: 646.37036 UnitsProcessed/sec 387.82224 MBytes/sec                                   
Feb 21, 2010 2:43:35 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.CosineDistanceMeasure RandomAccessSparseVector 
minDistance = 4476.713744856023  
nCalls = 5000;
sumTime = 6.548142s;
minTime = 1.175ms;
maxTime = 16.329ms;
meanTime = 1.309628ms;
stdDevTime = 0.43387ms; 
Speed: 763.5754 UnitsProcessed/sec 458.14523 MBytes/sec                                   
Feb 21, 2010 2:43:37 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.CosineDistanceMeasure SequentialAccessSparseVector 
minDistance = 4476.265335106043  
nCalls = 5000;
sumTime = 2.016846s;
minTime = 0.35ms;
maxTime = 2.509ms;
meanTime = 0.403369ms;
stdDevTime = 0.068028ms; 
Speed: 2479.1184 UnitsProcessed/sec 1487.4711 MBytes/sec                                   
Feb 21, 2010 2:43:41 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure DenseVector 
minDistance = 8484886.956608202  
nCalls = 5000;
sumTime = 3.524636s;
minTime = 0.494ms;
maxTime = 15.583ms;
meanTime = 0.704927ms;
stdDevTime = 0.299524ms; 
Speed: 1418.5862 UnitsProcessed/sec 851.15173 MBytes/sec                                   
Feb 21, 2010 2:43:44 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure RandomAccessSparseVector 
minDistance = 8511604.21909139  
nCalls = 5000;
sumTime = 2.813478s;
minTime = 0.358ms;
maxTime = 12.641ms;
meanTime = 0.562695ms;
stdDevTime = 0.390631ms; 
Speed: 1777.1598 UnitsProcessed/sec 1066.2959 MBytes/sec                                   
Feb 21, 2010 2:43:46 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure SequentialAccessSparseVector 
minDistance = 8493975.604847223  
nCalls = 5000;
sumTime = 2.581409s;
minTime = 0.107ms;
maxTime = 6.111ms;
meanTime = 0.516281ms;
stdDevTime = 0.185559ms; 
Speed: 1936.9266 UnitsProcessed/sec 1162.156 MBytes/sec                                   
Feb 21, 2010 2:43:52 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.EuclideanDistanceMeasure DenseVector 
minDistance = 195394.60246379836  
nCalls = 5000;
sumTime = 5.305836s;
minTime = 0.498ms;
maxTime = 15.373ms;
meanTime = 1.061167ms;
stdDevTime = 0.424037ms; 
Speed: 942.3585 UnitsProcessed/sec 565.41516 MBytes/sec                                   
Feb 21, 2010 2:43:55 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.EuclideanDistanceMeasure RandomAccessSparseVector 
minDistance = 195702.05210046135  
nCalls = 5000;
sumTime = 3.496844s;
minTime = 0.322ms;
maxTime = 9.142ms;
meanTime = 0.699368ms;
stdDevTime = 0.218266ms; 
Speed: 1429.8607 UnitsProcessed/sec 857.91644 MBytes/sec                                   
Feb 21, 2010 2:43:58 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.EuclideanDistanceMeasure SequentialAccessSparseVector 
minDistance = 195499.20347174452  
nCalls = 5000;
sumTime = 2.833197s;
minTime = 0.08ms;
maxTime = 1.996ms;
meanTime = 0.566639ms;
stdDevTime = 0.15453ms; 
Speed: 1764.7908 UnitsProcessed/sec 1058.8745 MBytes/sec                                   
Feb 21, 2010 2:44:12 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.ManhattanDistanceMeasure DenseVector 
minDistance = 6904798.339888407  
nCalls = 5000;
sumTime = 14.467698s;
minTime = 2.166ms;
maxTime = 18.034ms;
meanTime = 2.893539ms;
stdDevTime = 1.357886ms; 
Speed: 345.59747 UnitsProcessed/sec 207.3585 MBytes/sec                                   
Feb 21, 2010 2:44:21 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.ManhattanDistanceMeasure RandomAccessSparseVector 
minDistance = 6908061.128455167  
nCalls = 5000;
sumTime = 8.068168s;
minTime = 1.329ms;
maxTime = 40.717ms;
meanTime = 1.613633ms;
stdDevTime = 0.89013ms; 
Speed: 619.71936 UnitsProcessed/sec 371.83163 MBytes/sec                                   
Feb 21, 2010 2:44:42 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.ManhattanDistanceMeasure SequentialAccessSparseVector 
minDistance = 6909161.286918712  
nCalls = 5000;
sumTime = 21.172712s;
minTime = 3.703ms;
maxTime = 32.462ms;
meanTime = 4.234542ms;
stdDevTime = 0.84691ms; 
Speed: 236.15303 UnitsProcessed/sec 141.69182 MBytes/sec                                   
Feb 21, 2010 2:44:50 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.TanimotoDistanceMeasure DenseVector 
minDistance = 4487.889064527803  
nCalls = 5000;
sumTime = 8.488277s;
minTime = 1.402ms;
maxTime = 11.97ms;
meanTime = 1.697655ms;
stdDevTime = 0.269871ms; 
Speed: 589.04767 UnitsProcessed/sec 353.42862 MBytes/sec                                   
Feb 21, 2010 2:44:56 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.TanimotoDistanceMeasure RandomAccessSparseVector 
minDistance = 4488.320476909599  
nCalls = 5000;
sumTime = 5.47074s;
minTime = 0.977ms;
maxTime = 10.987ms;
meanTime = 1.094148ms;
stdDevTime = 0.368053ms; 
Speed: 913.9531 UnitsProcessed/sec 548.3719 MBytes/sec                                   
Feb 21, 2010 2:44:59 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: org.apache.mahout.common.distance.TanimotoDistanceMeasure SequentialAccessSparseVector 
minDistance = 4488.154156919953  
nCalls = 5000;
sumTime = 3.543727s;
minTime = 0.597ms;
maxTime = 8.928ms;
meanTime = 0.708745ms;
stdDevTime = 0.161759ms; 
Speed: 1410.9438 UnitsProcessed/sec 846.56635 MBytes/sec                                   
Feb 21, 2010 2:44:59 PM org.slf4j.impl.JCLLoggerAdapter info
INFO: 
BenchMarks                    DenseVector                   RandomAccessSparseVector      SequentialAccessSparseVector  
Clone                                                                                                                   
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 3.192205s;          sumTime = 0.521343s;          sumTime = 0.56215s;           
                              minTime = 0.211ms;            minTime = 0.048ms;            minTime = 0.016ms;            
                              maxTime = 517.68ms;           maxTime = 22.281ms;           maxTime = 20.333ms;           
                              meanTime = 0.638441ms;        meanTime = 0.104268ms;        meanTime = 0.11243ms;         
                              stdDevTime = 7.573187ms;      stdDevTime = 0.693174ms;      stdDevTime = 0.70505ms;       
                              Speed = 1566.3154 /sec        Speed = 9590.614 /sec         Speed = 8894.423 /sec         
                              Rate = 939.78925 MB/s         Rate = 5754.369 MB/s          Rate = 5336.654 MB/s          

Create (copy)                                                                                                           
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 3.585996s;          sumTime = 0.953957s;          sumTime = 0.278149s;          
                              minTime = 0.12ms;             minTime = 0.115ms;            minTime = 0.0090ms;           
                              maxTime = 54.331ms;           maxTime = 97.032ms;           maxTime = 8.032ms;            
                              meanTime = 0.717199ms;        meanTime = 0.190791ms;        meanTime = 0.055629ms;        
                              stdDevTime = 3.823725ms;      stdDevTime = 1.489048ms;      stdDevTime = 0.149567ms;      
                              Speed = 1394.3127 /sec        Speed = 5241.326 /sec         Speed = 17975.977 /sec        
                              Rate = 836.58765 MB/s         Rate = 3144.796 MB/s          Rate = 10785.587 MB/s         

Create (incrementally)                                                                                                  
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 0.059921s;          sumTime = 0.268465s;          sumTime = 2.172348s;          
                              minTime = 0.0040ms;           minTime = 0.021ms;            minTime = 0.356ms;            
                              maxTime = 0.251ms;            maxTime = 3.14ms;             maxTime = 6.754ms;            
                              meanTime = 0.011984ms;        meanTime = 0.053693ms;        meanTime = 0.434469ms;        
                              stdDevTime = 0.009846ms;      stdDevTime = 0.047671ms;      stdDevTime = 0.198236ms;      
                              Speed = 83443.195 /sec        Speed = 18624.402 /sec        Speed = 2301.657 /sec         
                              Rate = 50065.92 MB/s          Rate = 11174.642 MB/s         Rate = 1380.9943 MB/s         

DotProduct                                                                                                              
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 1.07412s;           sumTime = 0.890045s;          sumTime = 0.215025s;          
                              minTime = 0.137ms;            minTime = 0.051ms;            minTime = 0.026ms;            
                              maxTime = 13.189ms;           maxTime = 316.842ms;          maxTime = 1.744ms;            
                              meanTime = 0.214824ms;        meanTime = 0.178009ms;        meanTime = 0.043005ms;        
                              stdDevTime = 0.228647ms;      stdDevTime = 4.501319ms;      stdDevTime = 0.084628ms;      
                              Speed = 4654.9736 /sec        Speed = 5617.6934 /sec        Speed = 23253.111 /sec        
                              Rate = 2792.9841 MB/s         Rate = 3370.6162 MB/s         Rate = 13951.867 MB/s         

org.apache.mahout.common.distance.CosineDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 7.735503s;          sumTime = 6.548142s;          sumTime = 2.016846s;          
                              minTime = 1.368ms;            minTime = 1.175ms;            minTime = 0.35ms;             
                              maxTime = 9.961ms;            maxTime = 16.329ms;           maxTime = 2.509ms;            
                              meanTime = 1.5471ms;          meanTime = 1.309628ms;        meanTime = 0.403369ms;        
                              stdDevTime = 0.198466ms;      stdDevTime = 0.43387ms;       stdDevTime = 0.068028ms;      
                              Speed = 646.37036 /sec        Speed = 763.5754 /sec         Speed = 2479.1184 /sec        
                              Rate = 387.82224 MB/s         Rate = 458.14523 MB/s         Rate = 1487.4711 MB/s         

org.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 5.305836s;          sumTime = 3.496844s;          sumTime = 2.833197s;          
                              minTime = 0.498ms;            minTime = 0.322ms;            minTime = 0.08ms;             
                              maxTime = 15.373ms;           maxTime = 9.142ms;            maxTime = 1.996ms;            
                              meanTime = 1.061167ms;        meanTime = 0.699368ms;        meanTime = 0.566639ms;        
                              stdDevTime = 0.424037ms;      stdDevTime = 0.218266ms;      stdDevTime = 0.15453ms;       
                              Speed = 942.3585 /sec         Speed = 1429.8607 /sec        Speed = 1764.7908 /sec        
                              Rate = 565.41516 MB/s         Rate = 857.91644 MB/s         Rate = 1058.8745 MB/s         

org.apache.mahout.common.distance.ManhattanDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 14.467698s;         sumTime = 8.068168s;          sumTime = 21.172712s;         
                              minTime = 2.166ms;            minTime = 1.329ms;            minTime = 3.703ms;            
                              maxTime = 18.034ms;           maxTime = 40.717ms;           maxTime = 32.462ms;           
                              meanTime = 2.893539ms;        meanTime = 1.613633ms;        meanTime = 4.234542ms;        
                              stdDevTime = 1.357886ms;      stdDevTime = 0.89013ms;       stdDevTime = 0.84691ms;       
                              Speed = 345.59747 /sec        Speed = 619.71936 /sec        Speed = 236.15303 /sec        
                              Rate = 207.3585 MB/s          Rate = 371.83163 MB/s         Rate = 141.69182 MB/s         

org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 3.524636s;          sumTime = 2.813478s;          sumTime = 2.581409s;          
                              minTime = 0.494ms;            minTime = 0.358ms;            minTime = 0.107ms;            
                              maxTime = 15.583ms;           maxTime = 12.641ms;           maxTime = 6.111ms;            
                              meanTime = 0.704927ms;        meanTime = 0.562695ms;        meanTime = 0.516281ms;        
                              stdDevTime = 0.299524ms;      stdDevTime = 0.390631ms;      stdDevTime = 0.185559ms;      
                              Speed = 1418.5862 /sec        Speed = 1777.1598 /sec        Speed = 1936.9266 /sec        
                              Rate = 851.15173 MB/s         Rate = 1066.2959 MB/s         Rate = 1162.156 MB/s          

org.apache.mahout.common.distance.TanimotoDistanceMeasure                                                                                          
                              nCalls = 5000;                nCalls = 5000;                nCalls = 5000;                
                              sumTime = 8.488277s;          sumTime = 5.47074s;           sumTime = 3.543727s;          
                              minTime = 1.402ms;            minTime = 0.977ms;            minTime = 0.597ms;            
                              maxTime = 11.97ms;            maxTime = 10.987ms;           maxTime = 8.928ms;            
                              meanTime = 1.697655ms;        meanTime = 1.094148ms;        meanTime = 0.708745ms;        
                              stdDevTime = 0.269871ms;      stdDevTime = 0.368053ms;      stdDevTime = 0.161759ms;      
                              Speed = 589.04767 /sec        Speed = 913.9531 /sec         Speed = 1410.9438 /sec        
                              Rate = 353.42862 MB/s         Rate = 548.3719 MB/s          Rate = 846.56635 MB/s         



&lt;span class=&quot;code-object&quot;&gt;Process&lt;/span&gt; finished with exit code 0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836486" author="jake.mannix" created="Mon, 22 Feb 2010 01:47:42 +0000"  >&lt;p&gt;New patch, which also does cross-implementation dot checks (but not cross-impl distance checks yet) - but the results are confusing / counterintuitive.  Run for yourself and tell me why...&lt;/p&gt;</comment>
                            <comment id="12836598" author="robinanil" created="Mon, 22 Feb 2010 12:25:05 +0000"  >&lt;p&gt;We should be multiplying using sparsity instead of cardinality to calculated the speed in MB/s for Sparse and Seq and by cardinality for dense vector&lt;/p&gt;</comment>
                            <comment id="12836624" author="robinanil" created="Mon, 22 Feb 2010 13:38:32 +0000"  >&lt;p&gt;I think the irregularity is due to the sparse vector generation process where duplicate index values could get generated leaving some vectors much sparser than the sparsity value&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      Vector v = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SequentialAccessSparseVector(cardinality, sparsity); &lt;span class=&quot;code-comment&quot;&gt;// sparsity!
&lt;/span&gt;      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] indexes = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[sparsity];
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[] values = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[sparsity];
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0; j &amp;lt; sparsity; j++) {
        &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value = r.nextGaussian();
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index = sparsity &amp;lt; cardinality ? r.nextInt(cardinality) : j;
        v.set(index, value);
        indexes[j] = index;
        values[j] = value;
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;instead i suggest this&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      Vector v = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SequentialAccessSparseVector(cardinality, sparsity); &lt;span class=&quot;code-comment&quot;&gt;// sparsity!
&lt;/span&gt;      &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;[] featureSpace = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;[cardinality];
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] indexes = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[sparsity];
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[] values = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[sparsity];
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0;
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(j &amp;lt; sparsity) {
        &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value = r.nextGaussian();
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index = r.nextInt(cardinality);
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(featureSpace[index] == &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;) {
          featureSpace[index] = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
          indexes[j] = index;
          values[j++] = value;
          v.set(index, value);
        }
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836630" author="robinanil" created="Mon, 22 Feb 2010 13:56:40 +0000"  >&lt;p&gt;Ted, your loop structure seem to be slower by about 150MB/s than the null based impl. Does it need more loops before optimisations kick in ?&lt;/p&gt;</comment>
                            <comment id="12836633" author="srowen" created="Mon, 22 Feb 2010 14:02:24 +0000"  >&lt;p&gt;Tiny comment &amp;#8211; will probably be wise to use BitSet rather than boolean[], as booleans are stored as full 32 bit value &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. A 32x reduction in memory is non-trivial with cardinalities in the millions.&lt;/p&gt;</comment>
                            <comment id="12836647" author="robinanil" created="Mon, 22 Feb 2010 14:46:08 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; dot(Vector x) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (size() != x.size()) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CardinalityException(size(), x.size());
    }
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; == x) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; dotSelf();
    
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; result = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DenseVector &amp;amp;&amp;amp; x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DenseVector) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; x.size(); i++) {
        result += &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getQuick(i) * x.getQuick(i);
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    }
    &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SequentialAccessSparseVector &amp;amp;&amp;amp; x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SequentialAccessSparseVector) {
      &lt;span class=&quot;code-comment&quot;&gt;// For sparse SeqAccVectors. &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; dot product without lookup in a linear fashion
&lt;/span&gt;      Iterator&amp;lt;Element&amp;gt; myIter = iterateNonZero();
      Iterator&amp;lt;Element&amp;gt; otherIter = x.iterateNonZero();
      Element myCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
      Element otherCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (myIter.hasNext() &amp;amp;&amp;amp; otherIter.hasNext()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (myCurrent == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) myCurrent = myIter.next();
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (otherCurrent == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) otherCurrent = otherIter.next();
        
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; myIndex = myCurrent.index();
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; otherIndex = otherCurrent.index();
        
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (myIndex &amp;lt; otherIndex) {
          &lt;span class=&quot;code-comment&quot;&gt;// due to the sparseness skipping occurs more hence checked before equality
&lt;/span&gt;          myCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (myIndex &amp;gt; otherIndex){
          otherCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;code-comment&quot;&gt;// both are equal 
&lt;/span&gt;          result += myCurrent.get() * otherCurrent.get();
          myCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
          otherCurrent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        } 
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SequentialAccessSparseVector) &lt;span class=&quot;code-comment&quot;&gt;// rand.seq rand.rand dense.seq dense.rand
&lt;/span&gt;        &amp;amp;&amp;amp; (x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SequentialAccessSparseVector || x &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; RandomAccessSparseVector)) {
      &lt;span class=&quot;code-comment&quot;&gt;// Try to get the speed boost associated fast/normal seq access on x and quick lookup on &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;
&lt;/span&gt;      Iterator&amp;lt;Element&amp;gt; iter = x.iterateNonZero();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
        Element element = iter.next();
        result += element.get() * getQuick(element.index());
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;code-comment&quot;&gt;// seq.rand. seq.dense rand.dense 
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// TODO: can optimize more based on the numDefaultElements in the vectors
&lt;/span&gt;      Iterator&amp;lt;Element&amp;gt; iter = iterateNonZero();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
        Element element = iter.next();
        result += element.get() * x.getQuick(element.index());
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    }
  }
  
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; dotSelf() {
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; result = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DenseVector) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; size(); i++) {
        &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getQuick(i);
        result += value * value;
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      Iterator&amp;lt;Element&amp;gt; iter = iterateNonZero();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {
        Element element = iter.next();
        &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value = element.get();
        result += value * value;
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12836649" author="robinanil" created="Mon, 22 Feb 2010 14:50:13 +0000"  >&lt;p&gt;On dense data 1000, 1000&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;BenchMarks              DenseVector             RandSparseVector        SeqSparseVector         Dense.dot(Rand)         Dense.dot(Seq)          Rand.dot(Dense)         Rand.dot(Seq)           Seq.dot(Dense)          Seq.dot(Rand)           

DotProduct                                                                                                                                                                                                                                      
                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         
                        sum = 0.042869s;        sum = 1.139837s;        sum = 0.293336s;        sum = 0.882977s;        sum = 0.452817s;        sum = 1.330815s;        sum = 0.843993s;        sum = 0.931822s;        sum = 1.093099s;        
                        min = 0.0010ms;         min = 0.046ms;          min = 0.01ms;           min = 0.03ms;           min = 0.011ms;          min = 0.049ms;          min = 0.027ms;          min = 0.036ms;          min = 0.049ms;          
                        max = 2.717ms;          max = 21.51ms;          max = 3.156ms;          max = 25.346ms;         max = 26.567ms;         max = 14.738ms;         max = 53.265ms;         max = 9.44ms;           max = 4.017ms;          
                        mean = 0.002143ms;      mean = 0.056991ms;      mean = 0.014666ms;      mean = 0.044148ms;      mean = 0.02264ms;       mean = 0.06654ms;       mean = 0.042199ms;      mean = 0.046591ms;      mean = 0.054654ms;      
                        stdDev = 0.027798ms;    stdDev = 0.194404ms;    stdDev = 0.053138ms;    stdDev = 0.30642ms;     stdDev = 0.255753ms;    stdDev = 0.212913ms;    stdDev = 0.446643ms;    stdDev = 0.131948ms;    stdDev = 0.054681ms;    
                        Speed = 466537.6 /sec   Speed = 17546.367 /sec  Speed = 68181.195 /sec  Speed = 22650.646 /sec  Speed = 44167.953 /sec  Speed = 15028.385 /sec  Speed = 23696.877 /sec  Speed = 21463.326 /sec  Speed = 18296.604 /sec  
                        Rate = 5598.451 MB/s    Rate = 210.55641 MB/s   Rate = 818.17444 MB/s   Rate = 271.80777 MB/s   Rate = 530.01544 MB/s   Rate = 180.34062 MB/s   Rate = 284.36255 MB/s   Rate = 257.55994 MB/s   Rate = 219.55927 MB/s   
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On Sparse Data (1000, 300)&lt;br/&gt;
Dont compare the MB/s see the unit/s&lt;/p&gt;


&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;BenchMarks              DenseVector             RandSparseVector        SeqSparseVector         Dense.dot(Rand)         Dense.dot(Seq)          Rand.dot(Dense)         Rand.dot(Seq)           Seq.dot(Dense)          Seq.dot(Rand)           

DotProduct                                                                                                                                                                                                                                      
                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         
                        sum = 0.048355s;        sum = 0.569326s;        sum = 0.338478s;        sum = 0.408213s;        sum = 0.205143s;        sum = 0.469473s;        sum = 0.242953s;        sum = 0.291587s;        sum = 0.362947s;        
                        min = 0.0010ms;         min = 0.018ms;          min = 0.011ms;          min = 0.012ms;          min = 0.0040ms;         min = 0.017ms;          min = 0.01ms;           min = 0.011ms;          min = 0.014ms;          
                        max = 6.525ms;          max = 33.768ms;         max = 3.936ms;          max = 26.649ms;         max = 27.028ms;         max = 3.969ms;          max = 3.042ms;          max = 4.704ms;          max = 7.04ms;           
                        mean = 0.002417ms;      mean = 0.028466ms;      mean = 0.016923ms;      mean = 0.02041ms;       mean = 0.010257ms;      mean = 0.023473ms;      mean = 0.012147ms;      mean = 0.014579ms;      mean = 0.018147ms;      
                        stdDev = 0.062427ms;    stdDev = 0.302488ms;    stdDev = 0.059426ms;    stdDev = 0.237577ms;    stdDev = 0.222142ms;    stdDev = 0.05819ms;     stdDev = 0.026846ms;    stdDev = 0.06257ms;     stdDev = 0.06777ms;     
                        Speed = 413607.7 /sec   Speed = 35129.258 /sec  Speed = 59088.03 /sec   Speed = 48994.03 /sec   Speed = 97492.96 /sec   Speed = 42600.957 /sec  Speed = 82320.45 /sec   Speed = 68590.164 /sec  Speed = 55104.46 /sec   
                        Rate = 1488.9877 MB/s   Rate = 126.46532 MB/s   Rate = 212.7169 MB/s    Rate = 176.3785 MB/s    Rate = 350.97464 MB/s   Rate = 153.36345 MB/s   Rate = 296.3536 MB/s    Rate = 246.92456 MB/s   Rate = 198.37605 MB/s   

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836662" author="robinanil" created="Mon, 22 Feb 2010 15:22:40 +0000"  >&lt;p&gt;Increased loop by 3x to give more stability to perf values&lt;/p&gt;</comment>
                            <comment id="12836679" author="robinanil" created="Mon, 22 Feb 2010 15:54:22 +0000"  >&lt;p&gt;i found the anomaly Jake was talking about. It was due to too many instanceof checks in dot in AbstractVector. I moved the code out split as smaller check in each of overridden dot in each of the impls. The numbers just doubled, confirming my suspicion that instanceof is a heavy weight.&lt;/p&gt;</comment>
                            <comment id="12836706" author="jake.mannix" created="Mon, 22 Feb 2010 16:41:25 +0000"  >&lt;p&gt;The sparse data is odd... (-vs 500000 -sp 5000) (running with 1000, 300 is really not very sparse at all...)  &lt;/p&gt;

&lt;p&gt;I haven&apos;t applied any newer patches (just the one I submitted most recently), but I have svn upped.&lt;/p&gt;

&lt;p&gt;These results are counterintuitve.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
BenchMarks                    DenseVector                   RandomAccessSparseVector      SequentialAccessSparseVector  Dense.dot(RandomAccess)       Dense.dot(SequentialAccess)   RandomAcces.dot(Dense)        RandomAccess.dot(SequentialAccess)SequentialAccess.dot(Dense)   SequentialAccess.dot(RandomAccess)
DotProduct                                                                                                                                                                                                                                                                                                  
                              nCalls = 2500;                nCalls = 2500;                nCalls = 2500;                nCalls = 2500;                nCalls = 2500;                nCalls = 2500;                nCalls = 2500;                nCalls = 2500;                nCalls = 2500;                
                              sumTime = 3.660321s;          sumTime = 1.481516s;          sumTime = 0.448737s;          sumTime = 2.098937s;          sumTime = 0.856259s;          sumTime = 2.277742s;          sumTime = 0.607507s;          sumTime = 1.341608s;          sumTime = 0.741622s;          
                              minTime = 1.31ms;             minTime = 0.459ms;            minTime = 0.102ms;            minTime = 0.716ms;            minTime = 0.24ms;             minTime = 0.776ms;            minTime = 0.18ms;             minTime = 0.442ms;            minTime = 0.209ms;            
                              maxTime = 10.149ms;           maxTime = 36.691ms;           maxTime = 4.552ms;            maxTime = 5.437ms;            maxTime = 11.856ms;           maxTime = 8.059ms;            maxTime = 4.509ms;            maxTime = 2.136ms;            maxTime = 2.031ms;            
                              meanTime = 1.464128ms;        meanTime = 0.592606ms;        meanTime = 0.179494ms;        meanTime = 0.839574ms;        meanTime = 0.342503ms;        meanTime = 0.911096ms;        meanTime = 0.243002ms;        meanTime = 0.536643ms;        meanTime = 0.296648ms;        
                              stdDevTime = 0.329025ms;      stdDevTime = 0.852156ms;      stdDevTime = 0.234261ms;      stdDevTime = 0.179854ms;      stdDevTime = 0.286798ms;      stdDevTime = 0.268853ms;      stdDevTime = 0.115022ms;      stdDevTime = 0.171088ms;      stdDevTime = 0.115263ms;      
                              Speed = 683.0002 /sec         Speed = 1687.4606 /sec        Speed = 5571.192 /sec         Speed = 1191.0791 /sec        Speed = 2919.6772 /sec        Speed = 1097.5781 /sec        Speed = 4115.1787 /sec        Speed = 1863.4355 /sec        Speed = 3370.9895 /sec        
                              Rate = 4098.001 MB/s          Rate = 10124.764 MB/s         Rate = 33427.152 MB/s         Rate = 7146.4746 MB/s         Rate = 17518.062 MB/s         Rate = 6585.4688 MB/s         Rate = 24691.072 MB/s         Rate = 11180.613 MB/s         Rate = 20225.936 MB/s         
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836713" author="robinanil" created="Mon, 22 Feb 2010 16:46:26 +0000"  >&lt;p&gt;Can i commit the latest. If you dont have any changes pending on your end ? What ever be, we need to ensure correctness and proceed with 0.3. We are much better in terms of perf now than at the begining of this issue&lt;/p&gt;</comment>
                            <comment id="12836815" author="jake.mannix" created="Mon, 22 Feb 2010 18:29:50 +0000"  >&lt;p&gt;With these opts: -vs 500000 -sp 500 -nv 50 -l 500 -no 10&lt;/p&gt;

&lt;p&gt;Dot product looks more sensible.  &lt;/p&gt;

&lt;p&gt;Executive summary: fastest is  SequentialAccess.dot(Dense), clocking in at 69,246 units/s, which is as expected. &lt;/p&gt;

&lt;p&gt;Leaderboard for dotProduct:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Seq.dot(Den)     :  69,246 units/s
Seq.dot(Seq)     :  63,958 units/s
Seq.dot(Rnd)     :  49,638 units/s
Rnd.dot(Seq)     :  39,019 units/s
Den.dot(Seq)     :  30,337 units/s
Rnd.dot(Rnd)     :  5,320 units/s
Den.dot(Rnd)     :  5,177 units/s
Rnd.dot(Den)     :  5,101 units/s
Den.dot(Den)     :  516 units/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
INFO: DotProduct DenseVector 
sum = 48.442942s;
min = 1.554ms;
max = 32.55ms;
mean = 1.937717ms;
stdDev = 0.55081ms; 
Speed: 516.07104 UnitsProcessed/sec 3.0964262 MBytes/sec       
                            
INFO: DotProduct RandSparseVector 
sum = 4.69924s;
min = 0.116ms;
max = 24.211ms;
mean = 0.187969ms;
stdDev = 0.343685ms; 
Speed: 5320.0093 UnitsProcessed/sec 31.920053 MBytes/sec 
                                  
INFO: DotProduct SeqSparseVector 
sum = 0.390877s;
min = 0.012ms;
max = 2.698ms;
mean = 0.015635ms;
stdDev = 0.037619ms; 
Speed: 63958.742 UnitsProcessed/sec 383.7524 MBytes/sec       
                            
INFO: DotProduct Dense.dot(Rand) 
sum = 4.828592s;
min = 0.137ms;
max = 4.09ms;
mean = 0.193143ms;
stdDev = 0.052169ms; 
Speed: 5177.4927 UnitsProcessed/sec 31.064955 MBytes/sec   
                                
INFO: DotProduct Dense.dot(Seq) 
sum = 0.823286s;
min = 0.0ms;
max = 4.606ms;
mean = 0.032931ms;
stdDev = 0.03774ms; 
Speed: 30366.117 UnitsProcessed/sec 182.1967 MBytes/sec   
                                
INFO: DotProduct Rand.dot(Dense) 
sum = 4.900044s;
min = 0.14ms;
max = 3.969ms;
mean = 0.196001ms;
stdDev = 0.056772ms; 
Speed: 5101.995 UnitsProcessed/sec 30.61197 MBytes/sec    
                               
INFO: DotProduct Rand.dot(Seq) 
sum = 0.640713s;
min = 0.0ms;
max = 2.253ms;
mean = 0.025628ms;
stdDev = 0.041805ms; 
Speed: 39019.027 UnitsProcessed/sec 234.11417 MBytes/sec         
                          
INFO: DotProduct Seq.dot(Dense) 
sum = 0.361031s;
min = 0.0ms;
max = 4.63ms;
mean = 0.014441ms;
stdDev = 0.040413ms; 
Speed: 69246.13 UnitsProcessed/sec 415.47675 MBytes/sec   
                                
INFO: DotProduct Seq.dot(Rand) 
sum = 0.503642s;
min = 0.0090ms;
max = 5.203ms;
mean = 0.020145ms;
stdDev = 0.05134ms; 
Speed: 49638.434 UnitsProcessed/sec 297.8306 MBytes/sec   
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836817" author="tdunning" created="Mon, 22 Feb 2010 18:34:47 +0000"  >
&lt;p&gt;These are getting respectable!&lt;/p&gt;

&lt;p&gt;As a quick hack, the fact that dot is commutative should make it possible to get identical results for dense.dot(seq) as for seq.dot(dense).  Likewise for dense.dot(rand).&lt;/p&gt;

&lt;p&gt;A similar, but less dramatic win might come from rnd.dot(seq) being redone as seq.dot(rnd).&lt;/p&gt;</comment>
                            <comment id="12836818" author="jake.mannix" created="Mon, 22 Feb 2010 18:41:21 +0000"  >&lt;p&gt;agreed, Ted.  &lt;/p&gt;

&lt;p&gt;I&apos;m liking that we&apos;re getting 60-70k units/s on Seq.dot(Den) and Seq.dot(Seq), with vectors with 500 nonzero elements.  &lt;/p&gt;

&lt;p&gt;Since a dot requires a multiply and an add per nonzero element, this is doing 60 mflops on my laptop in my IDE, with the browser running, etc.  Not bad.&lt;/p&gt;</comment>
                            <comment id="12836819" author="robinanil" created="Mon, 22 Feb 2010 18:44:52 +0000"  >&lt;p&gt;Seq.rand and rand.seq shoudl get the same perf level now with an instanceof removed&lt;/p&gt;</comment>
                            <comment id="12836826" author="jake.mannix" created="Mon, 22 Feb 2010 18:50:59 +0000"  >&lt;p&gt;and now that my run (of three comments ago) is finally done, with dot product removed since it&apos;s already been reported.&lt;/p&gt;

&lt;p&gt;This properly demonstrates how slow it is to build up a SeqAcc vector incrementally, since it&apos;s not random-access, among other things.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
INFO: 
BenchMarks              DenseVector             RandSparseVector        SeqSparseVector                 
Clone                                                                                           
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 222.552872s;      sum = 34.923269s;       sum = 34.251326s;       
                        min = 4.598ms;          min = 0.446ms;          min = 0.4ms;            
                        max = 265.445ms;        max = 184.352ms;        max = 182.734ms;        
                        mean = 8.902114ms;      mean = 1.39693ms;       mean = 1.370053ms;      
                        stdDev = 11.676773ms;   stdDev = 4.533406ms;    stdDev = 5.002041ms;    
                        Speed = 112.33286 /sec  Speed = 715.8551 /sec   Speed = 729.89874 /sec  
                        Rate = 0.6739971 MB/s   Rate = 4.2951303 MB/s   Rate = 4.379392 MB/s    

Create (copy)                                                                                   
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 209.506424s;      sum = 1.371177s;        sum = 0.667553s;        
                        min = 1.427ms;          min = 0.0050ms;         min = 0.021ms;          
                        max = 11802.223ms;      max = 21.322ms;         max = 10.036ms;         
                        mean = 8.380256ms;      mean = 0.054847ms;      mean = 0.026702ms;      
                        stdDev = 27.862112ms;   stdDev = 0.324031ms;    stdDev = 0.130493ms;    
                        Speed = 119.32809 /sec  Speed = 18232.512 /sec  Speed = 37450.207 /sec  
                        Rate = 0.7159685 MB/s   Rate = 109.395065 MB/s  Rate = 224.70125 MB/s   

Create (incrementally)                                                                          
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 0.570172s;        sum = 0.755783s;        sum = 3.969259s;        
                        min = 0.0ms;            min = 0.0ms;            min = 0.093ms;          
                        max = 4.148ms;          max = 23.108ms;         max = 13.452ms;         
                        mean = 0.022806ms;      mean = 0.030231ms;      mean = 0.15877ms;       
                        stdDev = 0.060237ms;    stdDev = 0.196128ms;    stdDev = 0.192234ms;    
                        Speed = 43846.414 /sec  Speed = 33078.277 /sec  Speed = 6298.405 /sec   
                        Rate = 263.0785 MB/s    Rate = 198.46967 MB/s   Rate = 37.79043 MB/s    

org.apache.mahout.common.distance.CosineDistanceMeasure                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 500.69893s;       sum = 29.026116s;       sum = 3.367885s;        
                        min = 16.147ms;         min = 0.896ms;          min = 0.086ms;          
                        max = 163.619ms;        max = 10.819ms;         max = 11.731ms;         
                        mean = 20.027957ms;     mean = 1.161044ms;      mean = 0.134715ms;      
                        stdDev = 4.146275ms;    stdDev = 0.345399ms;    stdDev = 0.092807ms;    
                        Speed = 49.930202 /sec  Speed = 861.29333 /sec  Speed = 7423.056 /sec   
                        Rate = 0.2995812 MB/s   Rate = 5.16776 MB/s     Rate = 44.538334 MB/s   

org.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 501.080023s;      sum = 26.812884s;       sum = 3.649897s;        
                        min = 17.011ms;         min = 0.924ms;          min = 0.086ms;          
                        max = 120.138ms;        max = 9.692ms;          max = 13.113ms;         
                        mean = 20.0432ms;       mean = 1.072515ms;      mean = 0.145995ms;      
                        stdDev = 4.410452ms;    stdDev = 0.262769ms;    stdDev = 0.192273ms;    
                        Speed = 49.89223 /sec   Speed = 932.3876 /sec   Speed = 6849.5083 /sec  
                        Rate = 0.29935336 MB/s  Rate = 5.594325 MB/s    Rate = 41.09705 MB/s    

org.apache.mahout.common.distance.ManhattanDistanceMeasure                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 2028.848082s;     sum = 267.83595s;       sum = 225.853682s;      
                        min = 72.849ms;         min = 8.51ms;           min = 6.922ms;          
                        max = 634.243ms;        max = 440.161ms;        max = 55.592ms;         
                        mean = 81.153923ms;     mean = 10.713438ms;     mean = 9.034147ms;      
                        stdDev = 10.933123ms;   stdDev = 3.517247ms;    stdDev = 2.359102ms;    
                        Speed = 12.322264 /sec  Speed = 93.34072 /sec   Speed = 110.69113 /sec  
                        Rate = 0.07393358 MB/s  Rate = 0.5600443 MB/s   Rate = 0.6641468 MB/s   

org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 501.964767s;      sum = 26.779795s;       sum = 3.799706s;        
                        min = 16.936ms;         min = 0.92ms;           min = 0.086ms;          
                        max = 445.578ms;        max = 16.946ms;         max = 27.097ms;         
                        mean = 20.07859ms;      mean = 1.071191ms;      mean = 0.151988ms;      
                        stdDev = 4.898891ms;    stdDev = 0.308015ms;    stdDev = 0.305723ms;    
                        Speed = 49.80429 /sec   Speed = 933.5396 /sec   Speed = 6579.456 /sec   
                        Rate = 0.29882574 MB/s  Rate = 5.6012373 MB/s   Rate = 39.476734 MB/s   

org.apache.mahout.common.distance.TanimotoDistanceMeasure                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 491.263306s;      sum = 26.216746s;       sum = 3.356178s;        
                        min = 16.735ms;         min = 0.92ms;           min = 0.086ms;          
                        max = 122.37ms;         max = 11.92ms;          max = 5.274ms;          
                        mean = 19.650532ms;     mean = 1.048669ms;      mean = 0.134247ms;      
                        stdDev = 3.963278ms;    stdDev = 0.166102ms;    stdDev = 0.040766ms;    
                        Speed = 50.88921 /sec   Speed = 953.5889 /sec   Speed = 7448.9497 /sec  
                        Rate = 0.30533522 MB/s  Rate = 5.7215333 MB/s   Rate = 44.693695 MB/s   
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836839" author="robinanil" created="Mon, 22 Feb 2010 19:18:30 +0000"  >&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;seq.seq    = 46,855
rand.seq   = 37,397
seq.dense  = 36,460
seq.rand   = 34,348
dense.seq  = 25,453
rand.rand  = 5,436
dense.rand = 5,303
rand.dense = 4,754
dense.dense= 477

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836848" author="robinanil" created="Mon, 22 Feb 2010 19:36:48 +0000"  >&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;rand.rand  = 14,435
dense.rand = 9,172
rand.dense = 10,578
dense.dense= 477
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12836909" author="jake.mannix" created="Mon, 22 Feb 2010 21:21:55 +0000"  >&lt;p&gt;New benchmark additions:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;INFO: 
BenchMarks              DenseVector             RandSparseVector        SeqSparseVector         Dense.fn(Rand)          Dense.fn(Seq)           Rand.fn(Dense)          Rand.fn(Seq)            Seq.fn(Dense)           Seq.fn(Rand)            
Clone                                                                                           
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 222.609888s;      sum = 0.427272s;        sum = 32.833216s;       
                        min = 4.509ms;          min = 0.0030ms;         min = 0.381ms;          
                        max = 205.425ms;        max = 17.397ms;         max = 164.729ms;        
                        mean = 8.904395ms;      mean = 0.01709ms;       mean = 1.313328ms;      
                        stdDev = 11.839592ms;   stdDev = 0.256237ms;    stdDev = 4.730696ms;    
                        Speed = 112.30409 /sec  Speed = 58510.74 /sec   Speed = 761.424 /sec    
                        Rate = 0.6738245 MB/s   Rate = 351.06442 MB/s   Rate = 4.568544 MB/s    

Create (copy)                                                                                   
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 153.385135s;      sum = 1.316737s;        sum = 0.654021s;        
                        min = 1.291ms;          min = 0.0080ms;         min = 0.0ms;            
                        max = 149.59ms;         max = 18.778ms;         max = 8.555ms;          
                        mean = 6.135405ms;      mean = 0.052669ms;      mean = 0.02616ms;       
                        stdDev = 9.730283ms;    stdDev = 0.276396ms;    stdDev = 0.116822ms;    
                        Speed = 162.9884 /sec   Speed = 18986.328 /sec  Speed = 38225.074 /sec  
                        Rate = 0.9779304 MB/s   Rate = 113.91796 MB/s   Rate = 229.35042 MB/s   

Create (incrementally)                                                                          
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 0.556807s;        sum = 1.914268s;        sum = 4.109328s;        
                        min = 0.0ms;            min = 0.02ms;           min = 0.093ms;          
                        max = 2.523ms;          max = 184.955ms;        max = 16.624ms;         
                        mean = 0.022272ms;      mean = 0.07657ms;       mean = 0.164373ms;      
                        stdDev = 0.038841ms;    stdDev = 1.192837ms;    stdDev = 0.214126ms;    
                        Speed = 44898.863 /sec  Speed = 13059.822 /sec  Speed = 6083.72 /sec    
                        Rate = 269.39316 MB/s   Rate = 78.35893 MB/s    Rate = 36.50232 MB/s    

DotProduct                                                                                                                                                                                                                                      
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 48.730579s;       sum = 1.214007s;        sum = 0.421372s;        sum = 2.091561s;        sum = 0.883674s;        sum = 2.110771s;        sum = 0.571964s;        sum = 0.370673s;        sum = 0.624421s;        
                        min = 1.581ms;          min = 0.0040ms;         min = 0.0ms;            min = 0.036ms;          min = 0.0ms;            min = 0.033ms;          min = 0.018ms;          min = 0.0ms;            min = 0.019ms;          
                        max = 14.217ms;         max = 26.558ms;         max = 2.628ms;          max = 9.386ms;          max = 8.269ms;          max = 8.159ms;          max = 1.525ms;          max = 1.674ms;          max = 7.62ms;           
                        mean = 1.949223ms;      mean = 0.04856ms;       mean = 0.016854ms;      mean = 0.083662ms;      mean = 0.035346ms;      mean = 0.08443ms;       mean = 0.022878ms;      mean = 0.014826ms;      mean = 0.024976ms;      
                        stdDev = 0.342952ms;    stdDev = 0.216698ms;    stdDev = 0.028979ms;    stdDev = 0.070128ms;    stdDev = 0.065883ms;    stdDev = 0.064003ms;    stdDev = 0.026759ms;    stdDev = 0.034967ms;    stdDev = 0.059001ms;    
                        Speed = 513.0249 /sec   Speed = 20592.96 /sec   Speed = 59330.0 /sec    Speed = 11952.795 /sec  Speed = 28290.977 /sec  Speed = 11844.014 /sec  Speed = 43709.043 /sec  Speed = 67444.89 /sec   Speed = 40037.09 /sec   
                        Rate = 3.0781493 MB/s   Rate = 123.55776 MB/s   Rate = 355.97998 MB/s   Rate = 71.71677 MB/s    Rate = 169.74585 MB/s   Rate = 71.06408 MB/s    Rate = 262.25424 MB/s   Rate = 404.66934 MB/s   Rate = 240.22253 MB/s   

org.apache.mahout.common.distance.CosineDistanceMeasure                                                                                                                                                                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 519.610621s;      sum = 11.427173s;       sum = 3.760684s;        sum = 20.867298s;       sum = 9.421122s;        sum = 19.608871s;       sum = 5.052896s;        sum = 5.783377s;        sum = 5.489122s;        
                        min = 16.208ms;         min = 0.345ms;          min = 0.093ms;          min = 0.684ms;          min = 0.251ms;          min = 0.625ms;          min = 0.148ms;          min = 0.165ms;          min = 0.157ms;          
                        max = 626.848ms;        max = 80.046ms;         max = 29.404ms;         max = 91.928ms;         max = 35.83ms;          max = 36.961ms;         max = 3.089ms;          max = 7.846ms;          max = 10.664ms;         
                        mean = 20.784424ms;     mean = 0.457086ms;      mean = 0.150427ms;      mean = 0.834691ms;      mean = 0.376844ms;      mean = 0.784354ms;      mean = 0.202115ms;      mean = 0.231335ms;      mean = 0.219564ms;      
                        stdDev = 8.10056ms;     stdDev = 0.736416ms;    stdDev = 0.293471ms;    stdDev = 0.98559ms;     stdDev = 0.536685ms;    stdDev = 0.644877ms;    stdDev = 0.042781ms;    stdDev = 0.072166ms;    stdDev = 0.113785ms;    
                        Speed = 48.11295 /sec   Speed = 2187.7676 /sec  Speed = 6647.727 /sec   Speed = 1198.0469 /sec  Speed = 2653.6118 /sec  Speed = 1274.9332 /sec  Speed = 4947.6577 /sec  Speed = 4322.734 /sec   Speed = 4554.4624 /sec  
                        Rate = 0.2886777 MB/s   Rate = 13.126605 MB/s   Rate = 39.88636 MB/s    Rate = 7.188281 MB/s    Rate = 15.921671 MB/s   Rate = 7.6495986 MB/s   Rate = 29.685944 MB/s   Rate = 25.936403 MB/s   Rate = 27.326775 MB/s   

org.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                                                                                                                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 499.784788s;      sum = 11.288858s;       sum = 3.52738s;         sum = 19.439231s;       sum = 5.891554s;        sum = 19.720618s;       sum = 5.305099s;        sum = 7.936919s;        sum = 4.982583s;        
                        min = 16.397ms;         min = 0.351ms;          min = 0.092ms;          min = 0.619ms;          min = 0.163ms;          min = 0.685ms;          min = 0.156ms;          min = 0.253ms;          min = 0.148ms;          
                        max = 257.139ms;        max = 21.049ms;         max = 8.605ms;          max = 23.782ms;         max = 9.518ms;          max = 9.401ms;          max = 2.853ms;          max = 8.218ms;          max = 7.286ms;          
                        mean = 19.991391ms;     mean = 0.451554ms;      mean = 0.141095ms;      mean = 0.777569ms;      mean = 0.235662ms;      mean = 0.788824ms;      mean = 0.212203ms;      mean = 0.317476ms;      mean = 0.199303ms;      
                        stdDev = 4.514066ms;    stdDev = 0.332325ms;    stdDev = 0.083645ms;    stdDev = 0.373561ms;    stdDev = 0.087087ms;    stdDev = 0.209666ms;    stdDev = 0.041706ms;    stdDev = 0.086971ms;    stdDev = 0.053ms;       
                        Speed = 50.02153 /sec   Speed = 2214.573 /sec   Speed = 7087.4136 /sec  Speed = 1286.0591 /sec  Speed = 4243.363 /sec   Speed = 1267.7087 /sec  Speed = 4712.4478 /sec  Speed = 3149.837 /sec   Speed = 5017.478 /sec   
                        Rate = 0.30012918 MB/s  Rate = 13.287437 MB/s   Rate = 42.52448 MB/s    Rate = 7.7163544 MB/s   Rate = 25.460175 MB/s   Rate = 7.606252 MB/s    Rate = 28.274685 MB/s   Rate = 18.89902 MB/s    Rate = 30.104868 MB/s   

org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure                                                                                                                                                                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 508.401241s;      sum = 12.027223s;       sum = 3.69059s;         sum = 19.178181s;       sum = 6.142044s;        sum = 20.469989s;       sum = 5.401286s;        sum = 8.606827s;        sum = 5.298659s;        
                        min = 16.398ms;         min = 0.35ms;           min = 0.091ms;          min = 0.617ms;          min = 0.164ms;          min = 0.69ms;           min = 0.157ms;          min = 0.252ms;          min = 0.148ms;          
                        max = 133.55ms;         max = 23.696ms;         max = 10.698ms;         max = 18.251ms;         max = 8.108ms;          max = 10.478ms;         max = 7.638ms;          max = 14.862ms;         max = 4.461ms;          
                        mean = 20.336049ms;     mean = 0.481088ms;      mean = 0.147623ms;      mean = 0.767127ms;      mean = 0.245681ms;      mean = 0.818799ms;      mean = 0.216051ms;      mean = 0.344273ms;      mean = 0.211946ms;      
                        stdDev = 4.884008ms;    stdDev = 0.479707ms;    stdDev = 0.138958ms;    stdDev = 0.346367ms;    stdDev = 0.124146ms;    stdDev = 0.253845ms;    stdDev = 0.070431ms;    stdDev = 0.239597ms;    stdDev = 0.099821ms;    
                        Speed = 49.17376 /sec   Speed = 2078.618 /sec   Speed = 6773.985 /sec   Speed = 1303.5647 /sec  Speed = 4070.3062 /sec  Speed = 1221.3 /sec     Speed = 4628.5273 /sec  Speed = 2904.6711 /sec  Speed = 4718.1753 /sec  
                        Rate = 0.29504254 MB/s  Rate = 12.471706 MB/s   Rate = 40.643906 MB/s   Rate = 7.8213882 MB/s   Rate = 24.421835 MB/s   Rate = 7.3278003 MB/s   Rate = 27.771162 MB/s   Rate = 17.428026 MB/s   Rate = 28.30905 MB/s    

org.apache.mahout.common.distance.TanimotoDistanceMeasure                                                                                                                                                                                                                        
                        nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         nCalls = 25000;         
                        sum = 577.91672s;       sum = 10.97274s;        sum = 3.52993s;         sum = 18.45456s;        sum = 5.71744s;         sum = 23.672822s;       sum = 6.857617s;        sum = 10.690839s;       sum = 5.134141s;        
                        min = 16.289ms;         min = 0.348ms;          min = 0.092ms;          min = 0.621ms;          min = 0.163ms;          min = 0.68ms;           min = 0.16ms;           min = 0.252ms;          min = 0.149ms;          
                        max = 613.695ms;        max = 20.58ms;          max = 7.289ms;          max = 30.631ms;         max = 7.287ms;          max = 47.461ms;         max = 30.947ms;         max = 55.628ms;         max = 10.655ms;         
                        mean = 23.116668ms;     mean = 0.438909ms;      mean = 0.141197ms;      mean = 0.738182ms;      mean = 0.228697ms;      mean = 0.946912ms;      mean = 0.274304ms;      mean = 0.427633ms;      mean = 0.205365ms;      
                        stdDev = 15.463552ms;   stdDev = 0.262454ms;    stdDev = 0.069564ms;    stdDev = 0.336865ms;    stdDev = 0.102889ms;    stdDev = 0.988334ms;    stdDev = 0.4687ms;      stdDev = 0.740098ms;    stdDev = 0.102672ms;    
                        Speed = 43.25883 /sec   Speed = 2278.3735 /sec  Speed = 7082.2935 /sec  Speed = 1354.6787 /sec  Speed = 4372.5864 /sec  Speed = 1056.0634 /sec  Speed = 3645.5813 /sec  Speed = 2338.451 /sec   Speed = 4869.364 /sec   
                        Rate = 0.25955296 MB/s  Rate = 13.67024 MB/s    Rate = 42.49376 MB/s    Rate = 8.128072 MB/s    Rate = 26.235518 MB/s   Rate = 6.33638 MB/s     Rate = 21.873487 MB/s   Rate = 14.0307045 MB/s  Rate = 29.21618 MB/s    

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12436582" name="MAHOUT-300.patch" size="30858" author="robinanil" created="Mon, 22 Feb 2010 15:58:56 +0000"/>
                            <attachment id="12436579" name="MAHOUT-300.patch" size="28972" author="robinanil" created="Mon, 22 Feb 2010 15:22:40 +0000"/>
                            <attachment id="12436576" name="MAHOUT-300.patch" size="27877" author="robinanil" created="Mon, 22 Feb 2010 14:53:16 +0000"/>
                            <attachment id="12436544" name="MAHOUT-300.patch" size="24593" author="jake.mannix" created="Mon, 22 Feb 2010 01:47:42 +0000"/>
                            <attachment id="12436539" name="MAHOUT-300.patch" size="20137" author="jake.mannix" created="Sun, 21 Feb 2010 21:24:46 +0000"/>
                            <attachment id="12436536" name="MAHOUT-300.patch" size="7231" author="jake.mannix" created="Sun, 21 Feb 2010 20:26:54 +0000"/>
                            <attachment id="12436493" name="MAHOUT-300.patch" size="12886" author="robinanil" created="Sun, 21 Feb 2010 13:54:04 +0000"/>
                            <attachment id="12436438" name="MAHOUT-300.patch" size="8165" author="robinanil" created="Sat, 20 Feb 2010 16:16:05 +0000"/>
                            <attachment id="12436391" name="MAHOUT-300.patch" size="3076" author="robinanil" created="Fri, 19 Feb 2010 22:26:32 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 19 Feb 2010 23:54:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9765</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy5yv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23118</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>