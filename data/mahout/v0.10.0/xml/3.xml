<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:22:50 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-3/MAHOUT-3.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-3] Build initial canopy clustering prototype</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-3</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;I&apos;d like to reserve some namespace, specifically org.apache.mahout.clustering.canopy to use for an initial prototype of canopy clustering. I&apos;m going to start with a little unit test to get the basic algorithm sorted out, then M/R it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12388013">MAHOUT-3</key>
            <summary>Build initial canopy clustering prototype</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gsingers">Grant Ingersoll</assignee>
                                    <reporter username="jeastman">Jeff Eastman</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Feb 2008 20:56:38 +0000</created>
                <updated>Sat, 21 May 2011 04:24:02 +0100</updated>
                            <resolved>Wed, 20 Feb 2008 04:28:19 +0000</resolved>
                                                    <fixVersion>0.1</fixVersion>
                                    <component>Clustering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12566454" author="jeastman" created="Thu, 7 Feb 2008 06:11:23 +0000"  >&lt;p&gt;Here&apos;s an initial patch which introduces a couple of unit tests that implement a very basic canopy cluster, two distance measures and a Canopy class. It is not M/R ready and is just the beginning.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;src/main/java/org/apache/mahout/clustering/canopy/Canopy.java: new class&lt;br/&gt;
  (constructor): create a new Canopy with the given point&lt;br/&gt;
  (add): add another point to the Canopy&lt;br/&gt;
  (toString): return a printable representation&lt;br/&gt;
  (ptOut): return with the point&apos;s information represented&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;src/main/java/org/apache/mahout/clustering/canopy/DistanceMeasure.java: new interface&lt;br/&gt;
  (distance): single method returns the distance metric&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;src/main/java/org/apache/mahout/clustering/canopy/ManhattanDistancemeasure.java: new class&lt;br/&gt;
  (distance): single method returns the Manhattan distance metric&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;src/main/java/org/apache/mahout/clustering/canopy/EuclidianDistanceMeasure.java: new class&lt;br/&gt;
  (distance): single method returns the Euclidian distance metric&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;src/test/java/org/apache/mahout/clustering/canopy/TestCanopy.java&lt;br/&gt;
  (testOne, testTwo): new unit tests&lt;br/&gt;
  (getPoints, makeCanopy, prtCanopies): utilities&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12567392" author="jeastman" created="Sun, 10 Feb 2008 01:35:45 +0000"  >&lt;p&gt;Initial implementation of Canopy generation phase of two-phase Canopy&lt;br/&gt;
Clustering algorithm. See unit tests for the evolution of the user&lt;br/&gt;
stories leading to the working implementation.&lt;/p&gt;

&lt;p&gt;TODO: Implement the actual clustering of the original points using&lt;br/&gt;
the canopy centers produced by this implementation.&lt;/p&gt;

&lt;p&gt;TODO: Sort out the generics&lt;/p&gt;

&lt;p&gt;TODO: Allow points to be sparse, to carry payloads for use by other &lt;br/&gt;
subsystems, ...&lt;/p&gt;

&lt;p&gt;All unit tests run.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;src/main/java/org/apache/mahout/clustering/canopy&lt;/li&gt;
	&lt;li&gt;Canopy.java&lt;br/&gt;
    (addPointToCanopies): applies the distance metric to all canopies,&lt;br/&gt;
      adding the point to those that are covered&lt;br/&gt;
    (getCentroid): returns the initial centroid&lt;br/&gt;
    (getNumPoints): returns the number of points added&lt;br/&gt;
    (computeCentroid): normalizes the pointTotals with tne numPoints &lt;br/&gt;
      to return a computed centroid for the canopy&lt;br/&gt;
    (ptOut, toString, formatPoint): utilities&lt;/li&gt;
	&lt;li&gt;CanopyDriver.java&lt;br/&gt;
    (main): the main program&lt;br/&gt;
    (runJob): static used by unit tests&lt;/li&gt;
	&lt;li&gt;CanopyMapper.java&lt;br/&gt;
    (map): the map function assigns points to canopies&lt;br/&gt;
    (config): configuration provided for unit tests&lt;br/&gt;
    (configure): reads distance measure and threshold from job&lt;br/&gt;
    (close): writes the canopy centroids to the output&lt;/li&gt;
	&lt;li&gt;CanopyReducer.java&lt;br/&gt;
    (reduce): the reduce function assigns points to canopies&lt;br/&gt;
    (config): configuration provided for unit tests&lt;br/&gt;
    (configure): reads distance measure and threshold from job&lt;br/&gt;
    (close): writes the canopy centroids to the output&lt;/li&gt;
	&lt;li&gt;DistanceMeasure.java&lt;br/&gt;
    (distance): comput the distance between two points by some measure&lt;/li&gt;
	&lt;li&gt;EuclideanDistanceMeasure.java&lt;br/&gt;
   (distance): comput the distance between two points by Euclidean measure&lt;/li&gt;
	&lt;li&gt;ManhattanDistanceMeasure.java&lt;br/&gt;
   (distance): comput the distance between two points by Manhattan measure&lt;/li&gt;
	&lt;li&gt;src/test/java/org/apache/mahout/clustering/canopy&lt;/li&gt;
	&lt;li&gt;DummyOutputCollector.java&lt;br/&gt;
    (collect): collects output data&lt;br/&gt;
    (getData): returns output data for unit tests&lt;/li&gt;
	&lt;li&gt;TestCanopy.java&lt;br/&gt;
    (addPoint): overrides Canopy method to add point to a list&lt;br/&gt;
    (toString): overrides Canopy method to add point printout&lt;/li&gt;
	&lt;li&gt;TestCanopyCreation.java&lt;br/&gt;
    (setUp): uses published algorithm to initialize reference data&lt;br/&gt;
    (testReferenceManhattan, testReferenceEuclidean): validates reference data&lt;br/&gt;
    (testIterativeManhattan, testIterativeEuclidean): uses optimized&lt;br/&gt;
      algorithm and verifies result vs. reference data&lt;br/&gt;
    (testCanopyMapperManhattan, testCanopyMapperEuclidean,&lt;br/&gt;
     testCanopyReducerManhattan, testCanopyReducerEuclidean): excercises&lt;br/&gt;
      mapper and reducer with test data&lt;br/&gt;
    (testManhattanMR, testEuclideanMR): runs Hadoop jobs and verifies&lt;br/&gt;
      resulting canopy centroids&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12567506" author="gsingers" created="Mon, 11 Feb 2008 02:23:36 +0000"  >&lt;p&gt;One minor nit for your next patch:  please run the diff in the basedir  &lt;a href=&quot;https://svn.apache.org/repos/asf/lucene/mahout/trunk&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/lucene/mahout/trunk&lt;/a&gt;, as I don&apos;t have a &quot;mahout&quot; directory due to having several versions checked out.&lt;/p&gt;</comment>
                            <comment id="12567507" author="gsingers" created="Mon, 11 Feb 2008 02:52:31 +0000"  >&lt;p&gt;Couple of minor comments: &lt;/p&gt;

&lt;p&gt;I updated the build.xml to have a test target.  You might want to rename the TestCanopy helper test b/c it causes the Test** and/or **Test includes in ANT to think it is a test case.&lt;/p&gt;

&lt;p&gt;Really starting to come together.  Looks like you have a lot of good tests and good documentation.  I haven&apos;t gotten into the real substance yet, but this is definitely promising.&lt;/p&gt;</comment>
                            <comment id="12567897" author="jeastman" created="Tue, 12 Feb 2008 00:42:41 +0000"  >&lt;p&gt;Improved implementation of Canopy generation phase of two-phase Canopy&lt;br/&gt;
Clustering algorithm. See unit tests for the evolution of the user&lt;br/&gt;
stories leading to the working implementation.&lt;/p&gt;

&lt;p&gt;This implementation incorporates Ted Dunning&apos;s comments on my original approach.&lt;br/&gt;
In particular, it does not rely upon emitting data during the close() operation.&lt;br/&gt;
During the map phase, subsets of the input points are assigned to canopies&lt;br/&gt;
by each mapper and output to a combiner which then computes and outputs the&lt;br/&gt;
canopy centroids for each subset. During the reduce phase, the centroids are&lt;br/&gt;
again clustered into a final set of canopies which are output. &lt;/p&gt;

&lt;p&gt;This also incorporates Grant Ingersoll&apos;s comments on the name of the Canopy&lt;br/&gt;
subclass (now VisibleCanopy vs. TestCanopy) and the .diff file is done from&lt;br/&gt;
inside the project root.&lt;/p&gt;

&lt;p&gt;TODO: Implement the actual clustering of the original points using&lt;br/&gt;
the canopy centers produced by this implementation.&lt;/p&gt;

&lt;p&gt;TODO: Sort out the generics&lt;/p&gt;

&lt;p&gt;TODO: Allow points to be sparse, to carry payloads for use by other &lt;br/&gt;
subsystems, ...&lt;/p&gt;

&lt;p&gt;All unit tests run.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;src/main/java/org/apache/mahout/clustering/canopy&lt;/li&gt;
	&lt;li&gt;Canopy.java&lt;br/&gt;
    (configure): sets the distance measure, t1 and t2 statics for subsequent&lt;br/&gt;
      operations. Assumes all canopies created by this class loader will&lt;br/&gt;
      have the same properties.&lt;br/&gt;
    (addPointToCanopies): applies the distance metric to all canopies,&lt;br/&gt;
      adding the point to those that are covered&lt;br/&gt;
    (emitPointToCanopies): same algorithm but used by mapper to output&lt;br/&gt;
      points with canopyIds to CanopyCombiner&lt;br/&gt;
    (addPoint): add a point to the pointTotals and bump numPoints&lt;br/&gt;
    (emitPoint): output the point to the collector thence to the combiner&lt;br/&gt;
    (getCenter): returns the canopy center&lt;br/&gt;
    (getNumPoints): returns the number of points in the canopy&lt;br/&gt;
    (getCanopyId): returns the canopyId&lt;br/&gt;
    (computeCentroid): normalizes the pointTotals with tne numPoints &lt;br/&gt;
      to return a computed centroid for the canopy&lt;br/&gt;
    (formatPoint, decodePoint): encoding/decoding for points&lt;br/&gt;
    (formatCanopy, decodeCanopy): encoding/decoding for canopies&lt;br/&gt;
    (ptOut, toString): utilities&lt;/li&gt;
	&lt;li&gt;CanopyDriver.java&lt;br/&gt;
    (main): the main program&lt;br/&gt;
    (runJob): static used by unit tests&lt;/li&gt;
	&lt;li&gt;CanopyMapper.java&lt;br/&gt;
    (map): the map function assigns points to canopies outputting each&lt;br/&gt;
      point to each of its canopies&lt;br/&gt;
    (configure): reads distance measure and thresholds from job and&lt;br/&gt;
      configures Canopy.&lt;/li&gt;
	&lt;li&gt;CanopyCombiner.java&lt;br/&gt;
    (reduce): computes &amp;amp; writes the canopy centroids to the output using&lt;br/&gt;
      a single &quot;centroid&quot; key&lt;br/&gt;
    (configure): reads distance measure and thresholds from job and&lt;br/&gt;
      configures Canopy.&lt;/li&gt;
	&lt;li&gt;CanopyReducer.java&lt;br/&gt;
    (reduce): the reduce function assigns points to canopies&lt;br/&gt;
    (configure): reads distance measure and thresholds from job and&lt;br/&gt;
      configures Canopy.&lt;/li&gt;
	&lt;li&gt;DistanceMeasure.java&lt;br/&gt;
    (distance): compute the distance between two points by some measure&lt;/li&gt;
	&lt;li&gt;EuclideanDistanceMeasure.java&lt;br/&gt;
   (distance): comput the distance between two points by Euclidean measure&lt;/li&gt;
	&lt;li&gt;ManhattanDistanceMeasure.java&lt;br/&gt;
   (distance): comput the distance between two points by Manhattan measure&lt;/li&gt;
	&lt;li&gt;src/test/java/org/apache/mahout/clustering/canopy&lt;/li&gt;
	&lt;li&gt;DummyOutputCollector.java&lt;br/&gt;
    (collect): collects output data in a map&lt;br/&gt;
    (getData): returns output data for unit tests&lt;br/&gt;
    (getKeys): returns the key set&lt;br/&gt;
    (getValue): returns the value associated with the key&lt;/li&gt;
	&lt;li&gt;VisibleCanopy.java&lt;br/&gt;
    (addPoint): overrides Canopy method to add point to a list&lt;br/&gt;
    (toString): overrides Canopy method to add point printout&lt;/li&gt;
	&lt;li&gt;TestCanopyCreation.java&lt;br/&gt;
    (setUp): uses published algorithm to initialize reference data&lt;br/&gt;
    (testReferenceManhattan, testReferenceEuclidean): validates reference data&lt;br/&gt;
    (testIterativeManhattan, testIterativeEuclidean): uses optimized&lt;br/&gt;
      algorithm and verifies result vs. reference data&lt;br/&gt;
    (testCanopyMapperManhattan, testCanopyMapperEuclidean,&lt;br/&gt;
     testCanopyReducerManhattan, testCanopyReducerEuclidean): excercises&lt;br/&gt;
      mapper/combiner and reducer with test data&lt;br/&gt;
    (testManhattanMR, testEuclideanMR): runs Hadoop jobs and verifies&lt;br/&gt;
      resulting canopy centroids&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12568365" author="jeastman" created="Tue, 12 Feb 2008 23:51:06 +0000"  >&lt;p&gt;A working implementation of a Canopy Clustering algorithm. See unit tests for &lt;br/&gt;
the evolution of the user stories leading to the full implementation.&lt;/p&gt;

&lt;p&gt;This implementation incorporates Ted Dunning&apos;s comments on my original &lt;br/&gt;
approach to canopy generation. In particular, it does not rely upon emitting data &lt;br/&gt;
during the close() operation of the CanopyMapper or CanopyReducer.&lt;br/&gt;
During the map phase, subsets of the input points are assigned to canopies&lt;br/&gt;
by each mapper and output to a combiner which then computes and outputs the&lt;br/&gt;
canopy centroids for each subset. During the reduce phase, the centroids are&lt;br/&gt;
again clustered into a final set of canopies which are output. &lt;/p&gt;

&lt;p&gt;This patch also incorporates Grant Ingersoll&apos;s comments on the name of the &lt;br/&gt;
Canopy subclass (now VisibleCanopy vs. TestCanopy) and the .diff file is done &lt;br/&gt;
from inside the project root.&lt;/p&gt;

&lt;p&gt;NEW: This patch implements the actual clustering of the original points using&lt;br/&gt;
the canopy centers produced by the cluster generation phase.&lt;/p&gt;

&lt;p&gt;TODO: Sort out the generics&lt;/p&gt;

&lt;p&gt;TODO: Allow the CanopyReducer to take different (e.g. smaller) threshold values&lt;br/&gt;
so that canopy coalescing will not be so aggressive. &lt;/p&gt;

&lt;p&gt;TODO: Allow points to carry payloads for use by other subsystems, to be &lt;br/&gt;
sparse, ...&lt;/p&gt;

&lt;p&gt;All unit tests run.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;src/main/java/org/apache/mahout/clustering/canopy&lt;/li&gt;
	&lt;li&gt;Canopy.java&lt;br/&gt;
    (configure): sets the distance measure, t1 and t2 statics for subsequent&lt;br/&gt;
      operations. Assumes all canopies created by this class loader will&lt;br/&gt;
      have the same properties.&lt;br/&gt;
    (addPointToCanopies): applies the distance metric to all canopies,&lt;br/&gt;
      adding the point to those that are covered&lt;br/&gt;
    (emitPointToNewCanopies): same algorithm but used by CanopyMapper to&lt;br/&gt;
      output points with canopyIds to CanopyCombiner&lt;br/&gt;
    (emitPointToExistingCanopies): checks the distance and emits the point&lt;br/&gt;
      with each canopy definition as key. Emits the point to the closest&lt;br/&gt;
      canopy if canopy center clustering has moved the centroids so that &lt;br/&gt;
      the point is slightly outside of an existing canopy.&lt;br/&gt;
    (addPoint): add a point to the pointTotals and bump numPoints&lt;br/&gt;
    (emitPoint): output the point to the collector thence to the combiner&lt;br/&gt;
    (getCenter): returns the canopy center&lt;br/&gt;
    (getNumPoints): returns the number of points in the canopy&lt;br/&gt;
    (getCanopyId): returns the canopyId&lt;br/&gt;
    (computeCentroid): normalizes the pointTotals with tne numPoints &lt;br/&gt;
      to return a computed centroid for the canopy&lt;br/&gt;
    (formatPoint, decodePoint): encoding/decoding for points&lt;br/&gt;
    (formatCanopy, decodeCanopy): encoding/decoding for canopies&lt;br/&gt;
    (covers): returns if the point is covered by the canopy&lt;br/&gt;
    (ptOut, toString): utilities&lt;/li&gt;
	&lt;li&gt;CanopyDriver.java&lt;br/&gt;
    (main): the main program&lt;br/&gt;
    (runJob): static used by unit tests&lt;/li&gt;
	&lt;li&gt;CanopyMapper.java&lt;br/&gt;
    (map): the map function assigns points to canopies outputting each&lt;br/&gt;
      point to each of its canopies&lt;br/&gt;
    (configure): reads distance measure and thresholds from job and&lt;br/&gt;
      configures Canopy.&lt;/li&gt;
	&lt;li&gt;CanopyCombiner.java&lt;br/&gt;
    (reduce): computes &amp;amp; writes the canopy centroids to the output using&lt;br/&gt;
      a single &quot;centroid&quot; key&lt;br/&gt;
    (configure): reads distance measure and thresholds from job and&lt;br/&gt;
      configures Canopy.&lt;/li&gt;
	&lt;li&gt;CanopyReducer.java&lt;br/&gt;
    (reduce): the reduce function assigns points to canopies&lt;br/&gt;
    (configure): reads distance measure and thresholds from job and&lt;br/&gt;
      configures Canopy.&lt;/li&gt;
	&lt;li&gt;ClusterMapper.java&lt;br/&gt;
    (map): the map function assigns points to existing canopies outputting &lt;br/&gt;
      each point to each of its canopies&lt;br/&gt;
    (configure): reads distance measure and thresholds from job and&lt;br/&gt;
      configures Canopy. Also reads canopy definitions from produced by&lt;br/&gt;
      the CanopyReducer.    &lt;/li&gt;
	&lt;li&gt;ClusterDriver.java&lt;br/&gt;
    (main): the main program uses IdentityReducers&lt;br/&gt;
    (runJob): static used by unit tests&lt;/li&gt;
	&lt;li&gt;Job.java&lt;br/&gt;
    (main): the main program invokes CanopyDriver and ClusterDriver&lt;br/&gt;
    (runJob): static used by unit tests&lt;/li&gt;
	&lt;li&gt;DistanceMeasure.java&lt;br/&gt;
    (distance): compute the distance between two points by some measure&lt;/li&gt;
	&lt;li&gt;EuclideanDistanceMeasure.java&lt;br/&gt;
   (distance): comput the distance between two points by Euclidean measure&lt;/li&gt;
	&lt;li&gt;ManhattanDistanceMeasure.java&lt;br/&gt;
   (distance): comput the distance between two points by Manhattan measure&lt;/li&gt;
	&lt;li&gt;src/test/java/org/apache/mahout/clustering/canopy&lt;/li&gt;
	&lt;li&gt;DummyOutputCollector.java&lt;br/&gt;
    (collect): collects output data in a map&lt;br/&gt;
    (getData): returns output data for unit tests&lt;br/&gt;
    (getKeys): returns the key set&lt;br/&gt;
    (getValue): returns the value associated with the key&lt;/li&gt;
	&lt;li&gt;VisibleCanopy.java&lt;br/&gt;
    (addPoint): overrides Canopy method to add point to a list&lt;br/&gt;
    (toString): overrides Canopy method to add point printout&lt;/li&gt;
	&lt;li&gt;TestCanopyCreation.java&lt;br/&gt;
    (setUp): uses published algorithm to initialize reference data&lt;br/&gt;
    (testReferenceManhattan, testReferenceEuclidean): validates reference data&lt;br/&gt;
    (testIterativeManhattan, testIterativeEuclidean): uses optimized&lt;br/&gt;
      algorithm and verifies result vs. reference data&lt;br/&gt;
    (testCanopyMapperManhattan, testCanopyMapperEuclidean,&lt;br/&gt;
     testCanopyReducerManhattan, testCanopyReducerEuclidean): excercises&lt;br/&gt;
      mapper/combiner and reducer with test data&lt;br/&gt;
    (testManhattanMR, testEuclideanMR): runs Hadoop jobs and verifies&lt;br/&gt;
      resulting canopy centroids&lt;br/&gt;
    (testClusterMapperManhattan, testClusterMapperEuclidean,&lt;br/&gt;
     testClusterReducerManhattan, testClusterReducerEuclidean): excercises&lt;br/&gt;
       mapper and reducer with test data, testing clustering correctness&lt;br/&gt;
    (testClusteringManhattanMR, testClusteringEuclideanMR): runs both&lt;br/&gt;
      canopy generation and clustering to print out results&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12568384" author="gsingers" created="Wed, 13 Feb 2008 01:05:31 +0000"  >&lt;blockquote&gt;
&lt;p&gt;TODO: Allow points to carry payloads for use by other subsystems, to be&lt;br/&gt;
sparse, ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you elaborate on what you have in mind?&lt;/p&gt;</comment>
                            <comment id="12568388" author="jeastman" created="Wed, 13 Feb 2008 01:13:57 +0000"  >&lt;p&gt;Perhaps a better term would be &apos;attributes&apos;: Some application-specific string appended to the input line after the &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt; which would be used by other applications for their own purposes. For example, if I&apos;m clustering documents by their proximity in an n-d feature space, I might want their names to be passed through the clustering process. &lt;/p&gt;</comment>
                            <comment id="12568999" author="jeastman" created="Thu, 14 Feb 2008 17:02:04 +0000"  >&lt;p&gt;This patch adds &quot;payloads&quot; to the previous patch, by passing the ClusterMapper input Writable intact through to the Canopy emit method so that any additional information beyond the point definition propagates through to the output. It is actually a bit more efficient to do it this way, since the point does not need to be reformatted upon collection. I&apos;ve also added two unit tests thereof. &lt;/p&gt;

&lt;p&gt;I also added a space after the comma in the point formatting routines to make the output more human-readable.&lt;/p&gt;

&lt;p&gt;I&apos;ve run this in a larger M/R job producing 50+ clusters from thousands of points having 25+ dimensions and it seems to be ready for broader use.&lt;/p&gt;</comment>
                            <comment id="12569568" author="gsingers" created="Sat, 16 Feb 2008 14:30:29 +0000"  >&lt;p&gt;I&apos;m getting test errors when running ant test on the 3d.diff:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; ------------- Standard Error -----------------&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 08/02/16 09:14:53 INFO jvm.JvmMetrics: Initializing JVM Metrics with processName=JobTracker, sessionId=&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; java.io.IOException: apache-Mahout-0.1-dev.jar: No such file or directory&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.FileUtil.copy(FileUtil.java:142)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.FileUtil.copy(FileUtil.java:116)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.LocalFileSystem.copyFromLocalFile(LocalFileSystem.java:49)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.FileSystem.copyFromLocalFile(FileSystem.java:796)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.mapred.JobClient.submitJob(JobClient.java:493)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.mapred.JobClient.runJob(JobClient.java:753)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.mahout.clustering.canopy.CanopyDriver.runJob(CanopyDriver.java:74)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyGenManhattanMR(TestCanopyCreation.java:450)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;and:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; Testcase: testCanopyGenManhattanMR(org.apache.mahout.clustering.canopy.TestCanopyCreation): Caused an ERROR&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; output/canopies/part-00000&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; java.io.FileNotFoundException: output/canopies/part-00000&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.RawLocalFileSystem.open(RawLocalFileSystem.java:142)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker.&amp;lt;init&amp;gt;(ChecksumFileSystem.java:117)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.ChecksumFileSystem.open(ChecksumFileSystem.java:274)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.io.SequenceFile$Reader.&amp;lt;init&amp;gt;(SequenceFile.java:1356)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.io.SequenceFile$Reader.&amp;lt;init&amp;gt;(SequenceFile.java:1349)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.io.SequenceFile$Reader.&amp;lt;init&amp;gt;(SequenceFile.java:1344)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyGenManhattanMR(TestCanopyCreation.java:458)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; &lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; &lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Testcase: testCanopyGenEuclideanMR(org.apache.mahout.clustering.canopy.TestCanopyCreation): Caused an ERROR&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; output/canopies/part-00000&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; java.io.FileNotFoundException: output/canopies/part-00000&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.RawLocalFileSystem.open(RawLocalFileSystem.java:142)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker.&amp;lt;init&amp;gt;(ChecksumFileSystem.java:117)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.fs.ChecksumFileSystem.open(ChecksumFileSystem.java:274)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.io.SequenceFile$Reader.&amp;lt;init&amp;gt;(SequenceFile.java:1356)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.io.SequenceFile$Reader.&amp;lt;init&amp;gt;(SequenceFile.java:1349)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.hadoop.io.SequenceFile$Reader.&amp;lt;init&amp;gt;(SequenceFile.java:1344)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.mahout.clustering.canopy.TestCanopyCreation.testCanopyGenEuclideanMR(TestCanopyCreation.java:493)&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="12569627" author="jeastman" created="Sun, 17 Feb 2008 00:34:47 +0000"  >&lt;p&gt;This patch refactors the canopy configuration from the various mappers, combiners &amp;amp; reducers configure method into a single static configure method on Canopy. I changed the DistanceMeasure creation from explicit tests to more generic class instance creation and added a unit test thereof.  I also made DistanceMeasure extend JobConfigurable so that they can be configured. Configurability will allow me to create a WeightedManhattanDistanceMeasure outside of the mahout library. It seems making distance measures job configurable increases their versatility at no cost to the library.&lt;/p&gt;

&lt;p&gt;Finally, all unit tests still run. The build.xml test target works for me too.&lt;/p&gt;</comment>
                            <comment id="12569635" author="gsingers" created="Sun, 17 Feb 2008 02:27:16 +0000"  >&lt;p&gt;Hi Jeff,  &lt;/p&gt;

&lt;p&gt;Now I am getting compile errors.  I did &quot;ant clean test&quot; after applying the patch on an empty directory.&lt;/p&gt;

&lt;p&gt;compile-test:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;mkdir&amp;#93;&lt;/span&gt; Created dir: /Volumes/User/grantingersoll/projects/lucene/mahout/mahout-clean/build/test-classes&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 3 source files to ..../projects/lucene/mahout/mahout-clean/build/test-classes&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; ..../projects/lucene/mahout/mahout-clean/src/test/java/org/apache/mahout/clustering/canopy/TestCanopyCreation.java:780: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : class UserDefinedDistanceMeasure&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: class org.apache.mahout.clustering.canopy.TestCanopyCreation&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;         UserDefinedDistanceMeasure.class.getName(), (float) 3.1, (float) 2.1);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;         ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note:..../lucene/mahout/mahout-clean/src/test/java/org/apache/mahout/clustering/canopy/TestCanopyCreation.java uses unchecked or unsafe operations.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: Recompile with -Xlint:unchecked for details.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 1 error&lt;/p&gt;
</comment>
                            <comment id="12569702" author="gsingers" created="Sun, 17 Feb 2008 14:03:25 +0000"  >&lt;p&gt;I think you forgot to svn add UserDefinedDistanceMeasure.&lt;/p&gt;</comment>
                            <comment id="12569718" author="jeastman" created="Sun, 17 Feb 2008 17:02:06 +0000"  >&lt;p&gt;I forgot to svn add the UserDefinedDistanceMeasure before doing the last diff. This one has the class and runs all unit tests.&lt;/p&gt;</comment>
                            <comment id="12569777" author="gsingers" created="Mon, 18 Feb 2008 03:07:04 +0000"  >&lt;p&gt;Added some minor updates:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Added ASL headers on some files&lt;/li&gt;
	&lt;li&gt;The test target now requires the JAR to be built, since the setJar is being called.&lt;/li&gt;
	&lt;li&gt;Added parameter to pass in the JAR location since dist-jar does not put the jar location in the working directory by default.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&apos;s a little weird to have the JAR created before the tests are run.  Perhaps we should create something of an internal JAR in a tmp directory first for tests to use, then after the tests pass, we can create/copy the JAR to the official dist. area.&lt;/p&gt;

&lt;p&gt;Otherwise, looks good.  I will plan on committing in the next day or two.&lt;/p&gt;</comment>
                            <comment id="12570546" author="gsingers" created="Wed, 20 Feb 2008 02:32:47 +0000"  >&lt;p&gt;Jeff,&lt;/p&gt;

&lt;p&gt;I noticed in ClusterDriver in the main() that the canopies argument (args&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;) is ignored.  That seems a bit strange.  Is this just a relic from an older way of doing it?&lt;/p&gt;

&lt;p&gt;public static void main(String[] args) {&lt;br/&gt;
    String points = args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;;&lt;br/&gt;
//HERE&lt;br/&gt;
    String canopies = args&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;;&lt;br/&gt;
    String output = args&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;;&lt;br/&gt;
    String measureClassName = args&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;;&lt;br/&gt;
    float t1 = new Float(args&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;);&lt;br/&gt;
    float t2 = new Float(args&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;);&lt;br/&gt;
    String jarLocation = &quot;apache-mahout-0.1-dev.jar&quot;;&lt;br/&gt;
    if (args.length &amp;gt; 6)&lt;/p&gt;
{
      jarLocation = args[6];
    }
&lt;p&gt;    runJob(points, null, output, measureClassName, t1, t2, jarLocation);&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;I can just decrement them, if that is cool.&lt;/p&gt;</comment>
                            <comment id="12570570" author="gsingers" created="Wed, 20 Feb 2008 04:28:19 +0000"  >&lt;p&gt;Committed revision 629348.&lt;/p&gt;

&lt;p&gt;Thanks, Jeff!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12374941" name="MAHOUT-3.diff" size="13409" author="jeastman" created="Thu, 7 Feb 2008 06:11:23 +0000"/>
                            <attachment id="12375167" name="MAHOUT-3a.diff" size="40553" author="jeastman" created="Sun, 10 Feb 2008 01:35:45 +0000"/>
                            <attachment id="12375291" name="MAHOUT-3b.diff" size="46895" author="jeastman" created="Tue, 12 Feb 2008 00:42:41 +0000"/>
                            <attachment id="12375430" name="MAHOUT-3c.diff" size="65586" author="jeastman" created="Tue, 12 Feb 2008 23:51:05 +0000"/>
                            <attachment id="12375611" name="MAHOUT-3d.diff" size="68738" author="jeastman" created="Thu, 14 Feb 2008 17:02:00 +0000"/>
                            <attachment id="12375767" name="MAHOUT-3e.diff" size="69566" author="jeastman" created="Sun, 17 Feb 2008 00:34:47 +0000"/>
                            <attachment id="12375794" name="MAHOUT-3f.diff" size="70066" author="jeastman" created="Sun, 17 Feb 2008 17:02:06 +0000"/>
                            <attachment id="12375809" name="MAHOUT-3g.patch" size="78597" author="gsingers" created="Mon, 18 Feb 2008 03:07:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 11 Feb 2008 02:23:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10063</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy7sv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23415</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>