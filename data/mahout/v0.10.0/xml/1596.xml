<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:27:31 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1596/MAHOUT-1596.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1596] support for rbind() operator on DRMs</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1596</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;an R like operator, cbind(), for appending rows of second matrix below the rows of first matrix to create a new matrix.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12727536">MAHOUT-1596</key>
            <summary>support for rbind() operator on DRMs</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="avati">Anand Avati</reporter>
                        <labels>
                    </labels>
                <created>Wed, 16 Jul 2014 02:02:46 +0100</created>
                <updated>Mon, 13 Apr 2015 11:21:34 +0100</updated>
                            <resolved>Tue, 29 Jul 2014 21:26:24 +0100</resolved>
                                                    <fixVersion>0.10.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14062957" author="githubbot" created="Wed, 16 Jul 2014 02:05:14 +0100"  >&lt;p&gt;GitHub user avati opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1596&quot; title=&quot;support for rbind() operator on DRMs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1596&quot;&gt;&lt;del&gt;MAHOUT-1596&lt;/del&gt;&lt;/a&gt;: implement rbind() operator&lt;/p&gt;

&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/avati/mahout&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati/mahout&lt;/a&gt; rbind&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #30&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 5ed8d618dcca98a7c539859dfff17dbdcdcbdb08&lt;br/&gt;
Author: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;br/&gt;
Date:   2014-07-16T00:06:09Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1596&quot; title=&quot;support for rbind() operator on DRMs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1596&quot;&gt;&lt;del&gt;MAHOUT-1596&lt;/del&gt;&lt;/a&gt;: implement rbind() operator&lt;/p&gt;

&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14069021" author="githubbot" created="Mon, 21 Jul 2014 19:42:23 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#discussion_r15187205&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#discussion_r15187205&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: spark/src/main/scala/org/apache/mahout/sparkbindings/blas/RbindAB.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,77 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.sparkbindings.blas&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.log4j.Logger&lt;br/&gt;
    +import scala.reflect.ClassTag&lt;br/&gt;
    +import org.apache.mahout.sparkbindings.drm.DrmRddInput&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm.logical.OpRbind&lt;br/&gt;
    +import org.apache.spark.SparkContext._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Physical Rbind */&lt;br/&gt;
    +object RbindAB {&lt;br/&gt;
    +&lt;br/&gt;
    +  private val log = Logger.getLogger(RbindAB.getClass)&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_int&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow.asInstanceOf&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map(&lt;/p&gt;
{ case (key, vec) =&amp;gt; ((key + n1), vec) }))&lt;br/&gt;
    +&lt;br/&gt;
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;]&lt;br/&gt;
    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_long&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map({ case (key, vec) =&amp;gt; ((key + n1), vec) }
&lt;p&gt;))&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    style: (1) we don&apos;t use ( in closures, (2) we try to use -&amp;gt; here, i.e recommended style to reduce amount of punctuation: &lt;/p&gt;

&lt;p&gt;        // Adjust RHS keys&lt;br/&gt;
        val bAdjusted = b.map &lt;/p&gt;
{ case (key, vec) =&amp;gt; (key + n1) -&amp;gt; vec }

&lt;p&gt;        // dump a and b together &lt;br/&gt;
        ....&lt;/p&gt;

&lt;p&gt;    also definitely needs more comments on closures&lt;/p&gt;


</comment>
                            <comment id="14069023" author="githubbot" created="Mon, 21 Jul 2014 19:43:59 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#discussion_r15187303&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#discussion_r15187303&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: spark/src/main/scala/org/apache/mahout/sparkbindings/blas/RbindAB.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,77 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.sparkbindings.blas&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.log4j.Logger&lt;br/&gt;
    +import scala.reflect.ClassTag&lt;br/&gt;
    +import org.apache.mahout.sparkbindings.drm.DrmRddInput&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm.logical.OpRbind&lt;br/&gt;
    +import org.apache.spark.SparkContext._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Physical Rbind */&lt;br/&gt;
    +object RbindAB {&lt;br/&gt;
    +&lt;br/&gt;
    +  private val log = Logger.getLogger(RbindAB.getClass)&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_int&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow.asInstanceOf&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map(&lt;/p&gt;
{ case (key, vec) =&amp;gt; ((key + n1), vec) }))&lt;br/&gt;
    +&lt;br/&gt;
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;]&lt;br/&gt;
    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_long&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map({ case (key, vec) =&amp;gt; ((key + n1), vec) }
&lt;p&gt;))&lt;br/&gt;
    +&lt;br/&gt;
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;]&lt;br/&gt;
    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_string&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = &lt;/p&gt;
{
    +
    +    val a = srcA.asInstanceOf[DrmRddInput[String]].toDrmRdd()
    +    val b = srcB.asInstanceOf[DrmRddInput[String]].toDrmRdd()
    +    val n1 = op.A.nrow
    +
    +    val rdd = a union b
    +
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput[K]]
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  def rbindAB&lt;span class=&quot;error&quot;&gt;&amp;#91;K: ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +    if (implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;] == implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;])&lt;br/&gt;
    +      rbindAB_int(op, srcA, srcB)&lt;br/&gt;
    +    else if (implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;] == implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;])&lt;br/&gt;
    +      rbindAB_long(op, srcA, srcB)&lt;br/&gt;
    +    else if (implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;] == implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;String&amp;#93;&lt;/span&gt;])&lt;br/&gt;
    +      rbindAB_string(op, srcA, srcB)&lt;br/&gt;
    +    else&lt;br/&gt;
    +      throw new IllegalArgumentException(&quot;Unsupported Key type.&quot;)&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    There really should be only two types of routines:  (1) Int (2) everything else. &lt;/p&gt;

&lt;p&gt;    Long does not have ordering semantics (unlike int) because ordering algebraically is only important for transpositions, and since vector.set&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; only accepts an Int, there is no special significance for Long keys thru-out (i.e. log labels are bearing no special meaning compared to, say, 128 bit hashes). &lt;/p&gt;

&lt;p&gt;    Other than that, it makes sense. One thing I am not sure if union() is the best operation here, maybe there&apos;s a special opertaion that implies just dumping all partitions together without doing reshuffling, need to check with Spark API.&lt;/p&gt;</comment>
                            <comment id="14069035" author="githubbot" created="Mon, 21 Jul 2014 19:53:07 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#discussion_r15187912&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#discussion_r15187912&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: spark/src/main/scala/org/apache/mahout/sparkbindings/blas/RbindAB.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,77 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.sparkbindings.blas&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.log4j.Logger&lt;br/&gt;
    +import scala.reflect.ClassTag&lt;br/&gt;
    +import org.apache.mahout.sparkbindings.drm.DrmRddInput&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm.logical.OpRbind&lt;br/&gt;
    +import org.apache.spark.SparkContext._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Physical Rbind */&lt;br/&gt;
    +object RbindAB {&lt;br/&gt;
    +&lt;br/&gt;
    +  private val log = Logger.getLogger(RbindAB.getClass)&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_int&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow.asInstanceOf&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map(&lt;/p&gt;
{ case (key, vec) =&amp;gt; ((key + n1), vec) }))&lt;br/&gt;
    +&lt;br/&gt;
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;]&lt;br/&gt;
    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_long&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map({ case (key, vec) =&amp;gt; ((key + n1), vec) }
&lt;p&gt;))&lt;br/&gt;
    +&lt;br/&gt;
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;]&lt;br/&gt;
    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_string&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = &lt;/p&gt;
{
    +
    +    val a = srcA.asInstanceOf[DrmRddInput[String]].toDrmRdd()
    +    val b = srcB.asInstanceOf[DrmRddInput[String]].toDrmRdd()
    +    val n1 = op.A.nrow
    +
    +    val rdd = a union b
    +
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput[K]]
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  def rbindAB&lt;span class=&quot;error&quot;&gt;&amp;#91;K: ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +    if (implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;] == implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;])&lt;br/&gt;
    +      rbindAB_int(op, srcA, srcB)&lt;br/&gt;
    +    else if (implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;] == implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;])&lt;br/&gt;
    +      rbindAB_long(op, srcA, srcB)&lt;br/&gt;
    +    else if (implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;] == implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;String&amp;#93;&lt;/span&gt;])&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    i keep a nagging feeling that there got to be a better way than writing something like `implicitly[ClassTag&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;])`. The fact that it is implicitly inferrable without special context means there&apos;s a public `val` defined somewhere for it, so perhaps a better style is to refer to that val explicitly than ask the compiler to find it for us for something that is overtly general type.&lt;/p&gt;</comment>
                            <comment id="14069041" author="githubbot" created="Mon, 21 Jul 2014 19:56:40 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#discussion_r15188151&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#discussion_r15188151&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: spark/src/main/scala/org/apache/mahout/sparkbindings/blas/RbindAB.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,77 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.sparkbindings.blas&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.log4j.Logger&lt;br/&gt;
    +import scala.reflect.ClassTag&lt;br/&gt;
    +import org.apache.mahout.sparkbindings.drm.DrmRddInput&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm.logical.OpRbind&lt;br/&gt;
    +import org.apache.spark.SparkContext._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Physical Rbind */&lt;br/&gt;
    +object RbindAB {&lt;br/&gt;
    +&lt;br/&gt;
    +  private val log = Logger.getLogger(RbindAB.getClass)&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_int&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow.asInstanceOf&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map(&lt;/p&gt;
{ case (key, vec) =&amp;gt; ((key + n1), vec) }))&lt;br/&gt;
    +&lt;br/&gt;
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;]&lt;br/&gt;
    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_long&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Long&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map({ case (key, vec) =&amp;gt; ((key + n1), vec) }
&lt;p&gt;))&lt;br/&gt;
    +&lt;br/&gt;
    +    new DrmRddInput(rowWiseSrc = Some(op.ncol -&amp;gt; rdd)).asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;]&lt;br/&gt;
    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_string&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;String&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;String&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Generally, if one can use blockified representation, one probably should rather than try to de-blockify operands (i.e. `toDrmRdd()` should be last choice here). Since we are just dropping all partitions together, ideally.&lt;/p&gt;</comment>
                            <comment id="14069050" author="githubbot" created="Mon, 21 Jul 2014 20:01:36 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#discussion_r15188440&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#discussion_r15188440&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: spark/src/main/scala/org/apache/mahout/sparkbindings/blas/RbindAB.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,77 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.sparkbindings.blas&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.log4j.Logger&lt;br/&gt;
    +import scala.reflect.ClassTag&lt;br/&gt;
    +import org.apache.mahout.sparkbindings.drm.DrmRddInput&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm.logical.OpRbind&lt;br/&gt;
    +import org.apache.spark.SparkContext._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Physical Rbind */&lt;br/&gt;
    +object RbindAB {&lt;br/&gt;
    +&lt;br/&gt;
    +  private val log = Logger.getLogger(RbindAB.getClass)&lt;br/&gt;
    +&lt;br/&gt;
    +  def rbindAB_int&lt;span class=&quot;error&quot;&gt;&amp;#91;K:ClassTag&amp;#93;&lt;/span&gt;(op: OpRbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val b = srcB.asInstanceOf[DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;].toDrmRdd()&lt;br/&gt;
    +    val n1 = op.A.nrow.asInstanceOf&lt;span class=&quot;error&quot;&gt;&amp;#91;Int&amp;#93;&lt;/span&gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    val rdd = a union (b map(&lt;/p&gt;
{ case (key, vec) =&amp;gt; ((key + n1), vec) }
&lt;p&gt;))&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    hm. i wonder if we can just insert mapBlock() operator at logical layer to handle key mutations here on one of the operands and have same semantics (concatenate partitions) at the physical layer. &lt;/p&gt;

&lt;p&gt;    Generally, if we can handle a problem at logical level, we always should try to do that, since it minimizes the back-side problem.&lt;/p&gt;</comment>
                            <comment id="14069074" author="githubbot" created="Mon, 21 Jul 2014 20:17:05 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#issuecomment-49651759&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#issuecomment-49651759&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    I will look into the comments soon&lt;/p&gt;</comment>
                            <comment id="14069193" author="githubbot" created="Mon, 21 Jul 2014 21:03:56 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#issuecomment-49657713&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#issuecomment-49657713&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    sent a PR against your branch with edits. If you merge please, my commit will appear in this PR. &lt;/p&gt;</comment>
                            <comment id="14069203" author="githubbot" created="Mon, 21 Jul 2014 21:13:18 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#issuecomment-49658870&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#issuecomment-49658870&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Merged&lt;/p&gt;</comment>
                            <comment id="14069330" author="githubbot" created="Mon, 21 Jul 2014 22:31:19 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#issuecomment-49668725&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#issuecomment-49668725&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    I am (obviously) ok with this commit. Perhaps it is worth to see if there are more bugs or pitfals with this, i obviously did not do a due diligence. Maybe add a few more tests doing stuff with non-int keys.&lt;/p&gt;

&lt;p&gt;    it also (obviously) does not define behavior for cases of duplicate non-int keys, but i guess we can iron out these corner cases as we go if that&apos;s indeed a problem. &lt;/p&gt;</comment>
                            <comment id="14072552" author="githubbot" created="Thu, 24 Jul 2014 00:36:16 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30#issuecomment-49950406&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30#issuecomment-49950406&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    I will raise a PR for h2o implementation of rbind as soon as this PR and #21 get merged&lt;/p&gt;</comment>
                            <comment id="14078315" author="githubbot" created="Tue, 29 Jul 2014 21:40:13 +0100"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/30&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14078629" author="hudson" created="Wed, 30 Jul 2014 00:45:40 +0100"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2719 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2719/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2719/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1596&quot; title=&quot;support for rbind() operator on DRMs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1596&quot;&gt;&lt;del&gt;MAHOUT-1596&lt;/del&gt;&lt;/a&gt;: implement rbind() operator (dlyubimov: rev 846307d5b03ef7df6d3c890f2a291b4c11581e80)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;spark/src/main/scala/org/apache/mahout/sparkbindings/SparkEngine.scala&lt;/li&gt;
	&lt;li&gt;spark/src/main/scala/org/apache/mahout/sparkbindings/blas/RbindAB.scala&lt;/li&gt;
	&lt;li&gt;math-scala/src/main/scala/org/apache/mahout/math/drm/logical/OpRbind.scala&lt;/li&gt;
	&lt;li&gt;math-scala/src/test/scala/org/apache/mahout/math/drm/RLikeDrmOpsSuiteBase.scala&lt;/li&gt;
	&lt;li&gt;math-scala/src/main/scala/org/apache/mahout/math/drm/RLikeDrmOps.scala&lt;/li&gt;
	&lt;li&gt;math-scala/src/main/scala/org/apache/mahout/math/drm/DistributedEngine.scala&lt;/li&gt;
	&lt;li&gt;CHANGELOG&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 16 Jul 2014 01:05:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>405642</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzrnxb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>405667</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>