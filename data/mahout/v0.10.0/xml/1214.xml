<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:23:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1214/MAHOUT-1214.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1214] Improve the accuracy of the Spectral KMeans Method</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1214</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;The current implementation of the spectral KMeans algorithm (Andrew Ng. etc. NIPS 2002) in version 0.7 has two serious issues. These two incorrect implementations make it fail even for a very obvious trivial dataset. We have implemented a solution to resolve these two issues and hope to contribute back to the community.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Issue 1:&lt;br/&gt;
The EigenVerificationJob in version 0.7 does not check the orthogonality of eigenvectors, which is necessary to obtain the correct clustering results for the case of K&amp;gt;1; We have an idea and implementation to select based on cosAngle/orthogonality;&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;Issue 2:&lt;br/&gt;
The random seed initialization of KMeans algorithm is not optimal and sometimes a bad initialization will generate wrong clustering result. In this case, the selected K eigenvector actually provides a better way to initalize cluster centroids because each selected eigenvector is a relaxed indicator of the memberships of one cluster. For every selected eigenvector, we use the data point whose eigen component achieves the maximum absolute value. &lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;We have already verified our improvement on synthetic dataset and it shows that the improved version get the optimal clustering result while the current 0.7 version obtains the wrong result.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Mahout 0.7&lt;/p&gt;</environment>
        <key id="12647902">MAHOUT-1214</key>
            <summary>Improve the accuracy of the Spectral KMeans Method</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robinanil">Robin Anil</assignee>
                                    <reporter username="yiqun">Yiqun Hu</reporter>
                        <labels>
                            <label>clustering</label>
                            <label>improvement</label>
                    </labels>
                <created>Thu, 16 May 2013 08:54:09 +0100</created>
                <updated>Mon, 3 Feb 2014 08:05:59 +0000</updated>
                            <resolved>Thu, 27 Jun 2013 23:32:07 +0100</resolved>
                                    <version>0.7</version>
                                    <fixVersion>0.8</fixVersion>
                                    <component>Clustering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="13659680" author="magsol" created="Thu, 16 May 2013 17:29:29 +0100"  >&lt;p&gt;1: Examining the orthogonality of eigenvectors has to do with EigenVerificationJob, a part of the distributed Lanczos pipeline. It&apos;s used in spectral KMeans, but also elsewhere in Mahout (essentially any time the distributed Lanczos solver is used). Unless you&apos;re referring to a check that&apos;s specific to the spectral KMeans domain?&lt;/p&gt;

&lt;p&gt;2: This is an excellent point of improvement. I look forward to seeing the patch.&lt;/p&gt;</comment>
                            <comment id="13661212" author="yiqun" created="Sat, 18 May 2013 02:32:03 +0100"  >&lt;p&gt;For the orthogonality check, our proposal is sprcific to the spectral KMeans. From my current estimation, it won&apos;t affect the other usage of Lanczos solver. When I submit the patch next week, you can review it.&lt;/p&gt;</comment>
                            <comment id="13661305" author="tdunning" created="Sat, 18 May 2013 06:38:36 +0100"  >&lt;p&gt;Shannon, &lt;/p&gt;

&lt;p&gt;Wouldn&apos;t it be better to drop the Lanczos algorithm as well?&lt;/p&gt;

&lt;p&gt;What about switching to the recent ball k-means or streaming k-means algorithm?&lt;/p&gt;</comment>
                            <comment id="13661587" author="magsol" created="Sun, 19 May 2013 17:19:56 +0100"  >&lt;p&gt;Ted,&lt;/p&gt;

&lt;p&gt;I&apos;m not sure I follow. You mean use SSVD exclusively in place of Lanczos?&lt;/p&gt;

&lt;p&gt;I&apos;d love to assess performance and accuracy with ball or streaming k-means instead. That&apos;s an excellent idea.&lt;/p&gt;</comment>
                            <comment id="13661612" author="tdunning" created="Sun, 19 May 2013 19:00:58 +0100"  >&lt;blockquote&gt;
&lt;p&gt;You mean use SSVD exclusively in place of Lanczos?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  Exactly.&lt;/p&gt;</comment>
                            <comment id="13661751" author="yiqun" created="Mon, 20 May 2013 04:34:53 +0100"  >&lt;p&gt;I haven&apos;t got a chance study the ball k-means or streaming k-means algorithm. My comment is the same as Quinn: if the performance and accuracy of SSVD is verified seriously ( I mean comparing with Lanczos solver in different situations), it will be a good idea.&lt;/p&gt;</comment>
                            <comment id="13661807" author="tdunning" created="Mon, 20 May 2013 07:28:23 +0100"  >&lt;p&gt;The accuracy should be quite good if you use a single power step.&lt;/p&gt;

&lt;p&gt;You can play with the algorithm using the R version of the algorithm&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;See also Nathan Halko&apos;s dissertation and the arxiv paper on the subject &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The original JIRA issues &lt;span class=&quot;error&quot;&gt;&amp;#91;3,4&amp;#93;&lt;/span&gt; should be helpful as well.  Attached &lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; to these&lt;br/&gt;
JIRA&apos;s is a description of an early version of the algorithm that was implemented.&lt;br/&gt;
Dmitriy developed alternatives for some of the steps and implemented a power step&lt;br/&gt;
to improve accuracy &lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://cwiki.apache.org/MAHOUT/stochastic-singular-value-decomposition.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/MAHOUT/stochastic-singular-value-decomposition.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://arxiv.org/abs/0909.4061&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://arxiv.org/abs/0909.4061&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-792&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-797&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-797&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12491074/sd-2.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12491074/sd-2.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12493978/MAHOUT-797.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12493978/MAHOUT-797.pdf&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13665190" author="magsol" created="Thu, 23 May 2013 15:01:16 +0100"  >&lt;p&gt;This all looks great. With the work I did on Eigencuts this semester, there are some optimizations in the data structures I&apos;d like to test that might further help spectral kmeans&apos; performance, in addition to looking into ball kmeans, streaming kmeans, and SSVD.&lt;/p&gt;

&lt;p&gt;I still have a question to Yiqun: if you&apos;ve implemented an orthogonality check in EigenVerificationJob, how is this not something that can be applied to EigenVerificationJob in general, as opposed to only spectral kmeans?&lt;/p&gt;</comment>
                            <comment id="13675707" author="yiqun" created="Wed, 5 Jun 2013 09:38:56 +0100"  >&lt;p&gt;yes, implementing orthogonality check in EigenVerificationJob does affect the verification job in general. So if we want applying it in spectral kmeans only, maybe we have to implement a separate verification job. However, orthogonality of the returned eigen vectors should always be ensured, because I can&apos;t think of any situation in which orthogonality is not required. Correct me if I&apos;m wrong.&lt;/p&gt;</comment>
                            <comment id="13675783" author="gsingers" created="Wed, 5 Jun 2013 11:36:32 +0100"  >&lt;p&gt;Should this be in 0.8?&lt;/p&gt;</comment>
                            <comment id="13675836" author="magsol" created="Wed, 5 Jun 2013 12:54:43 +0100"  >&lt;p&gt;@Yiqun: I would suggest making this as general as possible. Don&apos;t confine it to just spectral k-means. Submit a patch and we can look it over.&lt;/p&gt;

&lt;p&gt;@Grant: Unless the patch came in today, I don&apos;t think we could have it ready for inclusion in 0.8.&lt;/p&gt;</comment>
                            <comment id="13675861" author="yiqun" created="Wed, 5 Jun 2013 13:24:38 +0100"  >&lt;p&gt;@Shannon, yep, that&apos;s what I aim for. The patch won&apos;t come in today. Initially, I make my changed based on released 0.7 version. But to generate the patch, I need to based on svn trunk version. I found a lot of change in this bleeding version, so I will integrate my change and get the patch ready for you guys to review by this week.&lt;/p&gt;

&lt;p&gt;One more question, I also have a small enhancement from end user perspective: the current input to Spectral KMeans is the affinity matrix where each record is in the format of (#row, #col, similarity). However, for our application and I believe many application, the input often is the output of a previous mapreduce job, where the pairwise similarity is computed and stored in the HDFS. Also very often, the similarity results is (#data-id1, #data-id2, similarity). A separate job to map the id to index of row and col is inconvenient for end user and sometimes difficult. So I created a simple but effective way for Spectral KMeans job to accept the affinity matrix in the format of data ids. The mapping will be done internally and the output result of clustering is also automatically mapped to data ids.&lt;br/&gt;
But it is not perfect, the affinity matrix input cannot support sparse representation (e.g. (#data1, #data2, 0) need to be explicitly written). If you have even better idea on it, just let me know. I will include this change in my patch as well as to contribute back to the community.  &lt;/p&gt;</comment>
                            <comment id="13675902" author="magsol" created="Wed, 5 Jun 2013 14:30:00 +0100"  >&lt;p&gt;Developing a better input format for spectral kmeans has been on my to-do list ever since writing the algorithm. Unfortunately, to handle any sort of raw data format, it requires n^2 pairwise comparisons which is not trivial in a Hadoop setting. &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; describes various methods of achieving an efficient MapReduce implementation for computing the affinity matrix. This is ultimately the route we should go, ideally creating it as a separate job with tunable parameters that spectral kmeans will invoke.&lt;/p&gt;

&lt;p&gt;In the meantime, we can probably put a check in the job that reads the affinity matrix to find zeros and ignore them.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5444877&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5444877&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13675924" author="gsingers" created="Wed, 5 Jun 2013 14:51:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;But to generate the patch, I need to based on svn trunk version.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you have a patch for 0.7, post it, perhaps we can help.  A half done patch is a better start than no patch.&lt;/p&gt;</comment>
                            <comment id="13675951" author="yiqun" created="Wed, 5 Jun 2013 15:13:21 +0100"  >&lt;p&gt;@Grant, okay. Then let me try to submit the patch based on 0.7 version&lt;br/&gt;
first. I think it can be done within next 24 hours.&lt;/p&gt;






&lt;p&gt;&amp;#8211; &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Yiqun Hu&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;---------------------------------------------------&lt;br/&gt;
&lt;b&gt;Tech Lead&lt;/b&gt;@*PayPal *by Day,&lt;br/&gt;
&lt;b&gt;Adjunct Falcuty&lt;/b&gt;@&lt;b&gt;UWA&lt;/b&gt; by Day,&lt;br/&gt;
&lt;b&gt;Computer Science Researcher&lt;/b&gt; by Night&lt;/p&gt;</comment>
                            <comment id="13677851" author="yiqun" created="Fri, 7 Jun 2013 07:26:58 +0100"  >&lt;p&gt;This is the patch based on the version 0.7 (the source code is checkout from tag 0.7). We have made three changes&lt;br/&gt;
1.      We fixed a bug in SpectralKMeansDriver.java (line 146)&lt;br/&gt;
LanczosState state = new LanczosState(L, overshoot, solver.getInitialVector(L));&lt;br/&gt;
2.      Given the number K of the requested eigenvectors, we add a mechanism to return the most orthogonal set of K eigenvectors. By sorting the eigenvectors by its associated eigenvalues, it starts from the eigenvector with the largest eigenvalue. Then iteratively add the most orthogonal eigenvectors in to the set;&lt;br/&gt;
related files: EigenVerificationJob.java&lt;br/&gt;
3.      Instead of initialise KMeans using random seed, we use the data point with the largest value in every selected eigenvector as the seed;&lt;br/&gt;
Related files: EigenSeedGenerator.java (new file)&lt;br/&gt;
4.      We add the support of directly using data id to represent the affinity matrix;&lt;br/&gt;
Related files: AffinityMatrixGenericInputMapper.java(new file), AffinityMatrixGenericInputReducer.java(new file) , AffinityMatrixInputJob.java&lt;/p&gt;

&lt;p&gt;We also provide a naive example to demonstrate the improvement. This is a dataset of 7 points. The affinity matrix is as follows:&lt;/p&gt;

&lt;p&gt;[ 1    0.8    0      0       0     0    0&lt;br/&gt;
 0.8    1     0      0       0     0    0&lt;br/&gt;
  0     0     1     0.9     0.7    0    0&lt;br/&gt;
  0     0    0.9     1      0.8    0    0&lt;br/&gt;
  0     0    0.7    0.8      1     0    0&lt;br/&gt;
  0     0     0      0       0     1   0.7&lt;br/&gt;
  0     0     0      0       0    0.7   1 ]&lt;/p&gt;

&lt;p&gt;You can see the cross-cluster similarities are all zero and intra-cluster similarities are very close to 1. It is very clear there are 3 clusters.&lt;/p&gt;

&lt;p&gt;The original v0.7 only support to represent this affinity matrix using the format of (#row, #col, similarity). And the output is &lt;/p&gt;

&lt;p&gt;matrix_1 result: (0.7 version)&lt;br/&gt;
kmeans.SpectralKMeansDriver: 0: 1&lt;br/&gt;
kmeans.SpectralKMeansDriver: 1: 1&lt;br/&gt;
kmeans.SpectralKMeansDriver: 2: 5&lt;br/&gt;
kmeans.SpectralKMeansDriver: 3: 5&lt;br/&gt;
kmeans.SpectralKMeansDriver: 4: 0&lt;br/&gt;
kmeans.SpectralKMeansDriver: 5: 1&lt;br/&gt;
kmeans.SpectralKMeansDriver: 6: 1&lt;/p&gt;

&lt;p&gt;You can see the clustering result is far away from correct.&lt;/p&gt;

&lt;p&gt;Our improvement can take either the format of (#row, #col, similarity) or (data1-id, data2-id, similarity). For example two types of affinity record can be supported:&lt;br/&gt;
(0, 1, 0.8) //the similarity in the first row and second column is 0.8&lt;br/&gt;
(a, b, 0.8) // the similarity between data a and data b is 0.8&lt;/p&gt;

&lt;p&gt;The output we obtain are&lt;br/&gt;
Format 1 &lt;br/&gt;
kmeans.SpectralKMeansDriver: 0: 1&lt;br/&gt;
kmeans.SpectralKMeansDriver: 1: 1&lt;br/&gt;
kmeans.SpectralKMeansDriver: 2: 0&lt;br/&gt;
kmeans.SpectralKMeansDriver: 3: 0&lt;br/&gt;
kmeans.SpectralKMeansDriver: 4: 0&lt;br/&gt;
kmeans.SpectralKMeansDriver: 5: 2&lt;br/&gt;
kmeans.SpectralKMeansDriver: 6: 2&lt;/p&gt;

&lt;p&gt;Format 2&lt;br/&gt;
kmeans.SpectralKMeansDriver: a: 1&lt;br/&gt;
kmeans.SpectralKMeansDriver: b: 1&lt;br/&gt;
kmeans.SpectralKMeansDriver: c: 0&lt;br/&gt;
kmeans.SpectralKMeansDriver: d: 0&lt;br/&gt;
kmeans.SpectralKMeansDriver: e: 0&lt;br/&gt;
kmeans.SpectralKMeansDriver: f: 2&lt;br/&gt;
kmeans.SpectralKMeansDriver: g: 2&lt;/p&gt;

&lt;p&gt;Note that in the second case user don&apos;t need to map the data to integer index. We will do it automatically. And the clustering result now is 100% correct.&lt;/p&gt;</comment>
                            <comment id="13677854" author="yiqun" created="Fri, 7 Jun 2013 07:32:59 +0100"  >&lt;p&gt;How to test it&lt;br/&gt;
1. Checkout v0.7 from SVN, download and apply the SpectralKMeans.patch;&lt;br/&gt;
2. Recomplie mahout;&lt;br/&gt;
3. Download either matrix_1 or matrix_2 and upload to HDFS (e.g. input folder)&lt;br/&gt;
4. Start spectral kmeans job&lt;br/&gt;
   bin/mahout spectralkmeans -i input -o output -d 7 -k 3 -x 100 -cd 0.001 -ow&lt;/p&gt;

&lt;p&gt;The result will be both output to console and store in output folder.&lt;/p&gt;</comment>
                            <comment id="13679327" author="robinanil" created="Mon, 10 Jun 2013 06:42:10 +0100"  >&lt;p&gt;1) I see a lot of code commented out. Make a patch with only the corrected change without any code commented out.&lt;br/&gt;
2) Please format the code using the Eclipse code formatter (see the last section of &lt;a href=&quot;https://cwiki.apache.org/confluence/display/MAHOUT/How+To+Contribute&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/confluence/display/MAHOUT/How+To+Contribute&lt;/a&gt;)&lt;br/&gt;
3) Please add your example as a junit Test. &lt;/p&gt;</comment>
                            <comment id="13679340" author="zhangda" created="Mon, 10 Jun 2013 07:42:00 +0100"  >&lt;p&gt;regarding to point 2, I notice that the project(version 0.7 branch) is not 100% following the lucene coding style. I could format the files I have modified in eclipse, but that would introduce quite a number of unnecessary discrepancies. Is that ok?&lt;/p&gt;</comment>
                            <comment id="13679346" author="robinanil" created="Mon, 10 Jun 2013 07:54:15 +0100"  >&lt;p&gt;Not at all. Please feel free to to clean up and fix things.&lt;/p&gt;

&lt;p&gt;The latest codeformatters are available in svn, use that.&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewvc/mahout/trunk/buildtools/?pathrev=1491304&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/mahout/trunk/buildtools/?pathrev=1491304&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13680392" author="gsingers" created="Tue, 11 Jun 2013 15:06:12 +0100"  >&lt;p&gt;Any update on this for applying against trunk/0.8?&lt;/p&gt;</comment>
                            <comment id="13680405" author="yiqun" created="Tue, 11 Jun 2013 15:13:21 +0100"  >&lt;p&gt;According to the 3 feedbacks from Robin, we are improving it. The formatting issue has been resolved. But we face some problem in converting our example to junit test.&lt;/p&gt;</comment>
                            <comment id="13680407" author="yiqun" created="Tue, 11 Jun 2013 15:14:49 +0100"  >&lt;p&gt;The example has been verified but not as a junit test case. If this is required, we will try to get it done by tomorrow.&lt;/p&gt;</comment>
                            <comment id="13681076" author="zhangda" created="Wed, 12 Jun 2013 10:50:05 +0100"  >&lt;p&gt;1. removed the commented out codes&lt;br/&gt;
2. used the latest formatter&lt;br/&gt;
3. add in unit tests, TestAffinityMatrixGenericInputJob.java&lt;br/&gt;
TestEigenSeedGenerator.java&lt;/p&gt;

&lt;p&gt;it&apos;s based on v0.7 branch &lt;/p&gt;</comment>
                            <comment id="13681853" author="yiqun" created="Thu, 13 Jun 2013 03:18:23 +0100"  >&lt;p&gt;@Robin, @Grant, the attached &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1214&quot; title=&quot;Improve the accuracy of the Spectral KMeans Method&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1214&quot;&gt;&lt;del&gt;MAHOUT-1214&lt;/del&gt;&lt;/a&gt;.patch has been provided and we believe it resolves all the suggestions provided by Robin and has been tested from our side. If possible, we can aim for v0.8.&lt;/p&gt;</comment>
                            <comment id="13681864" author="robinanil" created="Thu, 13 Jun 2013 03:47:37 +0100"  >&lt;p&gt;Patch doesnt apply cleanly on head. Can you sync your subversion to HEAD before making a patch.&lt;/p&gt;</comment>
                            <comment id="13681868" author="yiqun" created="Thu, 13 Jun 2013 03:53:05 +0100"  >&lt;p&gt;Do you mean the HEAD of v0.8 stream? As mentioned in the previous comments, the current patch is based on the v0.7. But @Grant suggest we supply the patch of v0.7 first. He said you guys may be able to help to integrate into v0.8 steam. We found dramatically changes occurs in v0.8. If you want us to provide the patch based on v0.8, we can do it but need more times because we need to merge and re-verify it.&lt;/p&gt;</comment>
                            <comment id="13681873" author="robinanil" created="Thu, 13 Jun 2013 04:10:57 +0100"  >&lt;p&gt;It doesn&apos;t merge properly. Grant do you know if there is an easy way to do this? Basically one has to do this merge by hand. &lt;/p&gt;

&lt;p&gt;Yinqun since you understand the code better, can you add your tests and fix the code in 0.8 to make it pass correctly? &lt;/p&gt;</comment>
                            <comment id="13681874" author="smarthi" created="Thu, 13 Jun 2013 04:11:24 +0100"  >&lt;p&gt;Please provide a patch that&apos;s based on the present HEAD codebase.&lt;/p&gt;</comment>
                            <comment id="13681877" author="smarthi" created="Thu, 13 Jun 2013 04:15:20 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=robin.anil%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;robin.anil@gmail.com&quot;&gt;Robin Anil&lt;/a&gt; it would have to be a manual merge, less of a hassle if the patch was based off of the present codebase in trunk.&lt;/p&gt;</comment>
                            <comment id="13681882" author="yiqun" created="Thu, 13 Jun 2013 04:23:57 +0100"  >&lt;p&gt;@Robin, @Suneel, we will try to generate the patch based on the present HEAD codebase today. Update you guys when we finish.&lt;/p&gt;</comment>
                            <comment id="13682108" author="gsingers" created="Thu, 13 Jun 2013 11:43:21 +0100"  >&lt;blockquote&gt;&lt;p&gt;But @Grant suggest we supply the patch of v0.7 first.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I was working under the assumption that an old patch is better than no patch.  A patch against HEAD is even better.  I think we have a few more days, so against HEAD would be great.&lt;/p&gt;</comment>
                            <comment id="13682240" author="zhangda" created="Thu, 13 Jun 2013 14:34:32 +0100"  >&lt;p&gt;hi, I finish the patch against v0.8 head today, but somehow it breaks one of the DistributedLanczosSolver unit test case. Think need a day or two to fix that. i&apos;ll keep you posted.&lt;/p&gt;</comment>
                            <comment id="13685015" author="zhangda" created="Mon, 17 Jun 2013 07:23:08 +0100"  >&lt;p&gt;patch uploaded&lt;/p&gt;</comment>
                            <comment id="13685634" author="yiqun" created="Mon, 17 Jun 2013 15:56:38 +0100"  >&lt;p&gt;@Robin, please try the newly uploaded patch based on latest HEAD. We have verified again the current HEAD and have the following observations:&lt;br/&gt;
1. Using the dummy dataset (matrix_1), the result of the HEAD codebase using LanczosSolver is far from accurate. After applying our patch, the result becomes correct;&lt;br/&gt;
2. We also try the dummy dataset using ssvd option. However, we come across errors and cannot get the results;&lt;br/&gt;
3. There is a very serious bug in the Mahout math package. The bug occurs when computing the dot product of two RandomAccessSparseVector(s). This won&apos;t affect the results of spectral kmeans. But it wastes a lot of iterations because the clusters actually already converge, but the algorithm wrongly thinks it is not yet due to the bug. We will raise another issue and try to help.&lt;/p&gt;

&lt;p&gt;I think we are good to go with this one now. Aim for 0.8 release.&lt;/p&gt;</comment>
                            <comment id="13686086" author="ssc" created="Mon, 17 Jun 2013 23:14:57 +0100"  >&lt;p&gt;Yiqun, your patch looks very good. Could you upload it to reviewboard at &lt;a href=&quot;https://reviews.apache.org/dashboard/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/dashboard/&lt;/a&gt; to make it easier to comment on it?&lt;/p&gt;

&lt;p&gt;And have you already created the bug report for the dot product you talked about? It seems to be a serious issue.&lt;/p&gt;</comment>
                            <comment id="13686298" author="yiqun" created="Tue, 18 Jun 2013 03:05:36 +0100"  >&lt;p&gt;@Schelter, I am not familiar with reviewboard. When I tried to upload my patch to review, it said&lt;br/&gt;
&quot;The file &apos;/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputJob.java&apos; (r1492519) could not be found in the repository&quot;&lt;/p&gt;</comment>
                            <comment id="13686313" author="robinanil" created="Tue, 18 Jun 2013 03:35:47 +0100"  >&lt;p&gt;Can you explain the bug in the math package. Do you have a reproducible test case?&lt;/p&gt;</comment>
                            <comment id="13686325" author="yiqun" created="Tue, 18 Jun 2013 03:53:44 +0100"  >&lt;p&gt;@Robin, That&apos;s what I try to do: create a new test case to reproduce this bug and then raise a ticket. But I can explain a little bit here. Different from v0.7, v0.8 start to use aggregate to finish the vector operation. Example is like &quot;x.aggregate(y, Functions.PLUS, Functions.MULT)&quot; for computing the dot product. The implementation of the aggregate function in AbstractVector.java uses VectorBinaryAggregate.aggregateBest. What it tries to do is find the optimal operation and do the aggregation. One of the operation is AggregateAllLoop (in VectorBinaryAggregate.java).&lt;/p&gt;

&lt;p&gt;The bug is in this place. The implmentation of aggregate function is as follows&lt;br/&gt;
@Override&lt;br/&gt;
public double aggregate(Vector x, Vector y, DoubleDoubleFunction fa, DoubleDoubleFunction fc) {&lt;br/&gt;
  double result = fc.apply(x.getQuick(0), y.getQuick(0));&lt;br/&gt;
  for (int i = 1; i &amp;lt; x.size(); ++i) &lt;/p&gt;
{
    result = fa.apply(result, fc.apply(x.getQuick(i), y.getQuick(i)));
  }
&lt;p&gt;  return result;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Notice that it loop over the index from 0 to size()-1 for the vector. In the case of the vector is a RandomAccessSparseVector (e.g. &lt;/p&gt;
{3: 0.11, 4: 0.38, 5:0.2}
&lt;p&gt;, size()=3), this aggregate function will try to access the element whose indices are &lt;/p&gt;
{0, 1, 2}
&lt;p&gt; and all values are 0.0. Because nonzero elements are not at the beginning. For our spectral kmeans example, this bug occurs when we calculate the dot product between two exactly same cluster centroids (in eigen space) and output dot prodct as 0.0, which is actually should be the norm of the centroids (1.0). This bug will occurs whenever computing the aggregate function of two sparse vector.&lt;/p&gt;

&lt;p&gt;Is it clear now?  &lt;/p&gt;</comment>
                            <comment id="13686338" author="robinanil" created="Tue, 18 Jun 2013 04:15:09 +0100"  >&lt;p&gt;size() == Cardinality which is the max size not the size of the hashmap.&lt;/p&gt;

&lt;p&gt;For vector &lt;/p&gt;
{3: 0.11, 4: 0.38, 5:0.2}
&lt;p&gt;, the cardinality has to be atleast 6&lt;/p&gt;</comment>
                            <comment id="13686341" author="zhangda" created="Tue, 18 Jun 2013 04:20:12 +0100"  >&lt;p&gt;i uploaded the patch to the reviewboard, but it has to be assigned to someone or some group as reviewer before i can publish, who am i supposed to assign to? &lt;/p&gt;</comment>
                            <comment id="13686342" author="robinanil" created="Tue, 18 Jun 2013 04:25:40 +0100"  >&lt;p&gt;Test case which shows the bug in the new AggregateBinaryFunction&lt;/p&gt;</comment>
                            <comment id="13686343" author="robinanil" created="Tue, 18 Jun 2013 04:26:24 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dfilimon&quot; class=&quot;user-hover&quot; rel=&quot;dfilimon&quot;&gt;Dan Filimon&lt;/a&gt; Can you take a look at the VectorBinaryAggregate code.&lt;/p&gt;</comment>
                            <comment id="13686349" author="robinanil" created="Tue, 18 Jun 2013 04:31:11 +0100"  >&lt;p&gt;Ignore that. That was an issue in the test. The code seems correct.&lt;/p&gt;

&lt;p&gt;Zhang, you can assign it to me.&lt;/p&gt;</comment>
                            <comment id="13686353" author="yiqun" created="Tue, 18 Jun 2013 04:39:21 +0100"  >&lt;p&gt;In our case, it is actually 3. Anyway, before raise the ticket, I will generate a test case to verify first. Since you say that the size should be the cardinality, I think we will double check the way the eigenvector are read to see if we made any mistake there such that in our case &#160;the size() equal to 3 instead of 6&lt;br/&gt;
&#8212;&lt;br/&gt;
Sent from Mailbox for iPhone&lt;/p&gt;

&lt;p&gt;On Tue, Jun 18, 2013 at 11:27 AM, Robin Anil (JIRA) &amp;lt;jira@apache.org&amp;gt;&lt;/p&gt;
</comment>
                            <comment id="13686355" author="zhangda" created="Tue, 18 Jun 2013 04:43:55 +0100"  >&lt;p&gt;thanks. Review Request #11931&lt;/p&gt;</comment>
                            <comment id="13686449" author="ssc" created="Tue, 18 Jun 2013 07:50:45 +0100"  >&lt;p&gt;we should open a new issue for the bug, dont mix it in here&lt;/p&gt;</comment>
                            <comment id="13686529" author="zhangda" created="Tue, 18 Jun 2013 10:41:54 +0100"  >&lt;p&gt;i believe the dot product is a false alarm and the problem is in our patch. let me fix it and update the patch tonight.&lt;/p&gt;</comment>
                            <comment id="13687738" author="zhangda" created="Wed, 19 Jun 2013 08:48:38 +0100"  >&lt;p&gt;updated version, same uploaded to reviewboard&lt;/p&gt;</comment>
                            <comment id="13691954" author="gsingers" created="Mon, 24 Jun 2013 14:29:03 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Any progress on this?  It is the last open issue for 0.8.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Grant&lt;/p&gt;</comment>
                            <comment id="13691969" author="yiqun" created="Mon, 24 Jun 2013 14:52:21 +0100"  >&lt;p&gt;Grant, we have addressed all review comments and uploaded the updated patch. But haven&apos;t got any reply. Can this be included in 0.8?&lt;/p&gt;</comment>
                            <comment id="13692518" author="robinanil" created="Tue, 25 Jun 2013 00:10:36 +0100"  >&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/11931/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/11931/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have actually replied to your comments. My comment still stands with respect to using a non standard input format. Grant, can you take a look as well. &lt;/p&gt;</comment>
                            <comment id="13692589" author="yiqun" created="Tue, 25 Jun 2013 00:55:20 +0100"  >&lt;p&gt;Hi, Robin,&lt;br/&gt;
We also response to your comments about why a new input format is used. Please check our response in reviewboard. Because we introduce a new support for spectralkmeans in mahout: we allow user to specify affinity between data using any data identity. We believe this support is huge for mahout users. Just imagine when you need to specify pairwise affinities of petabyte data. Asking user to map data point first and specify row/column id is inconvenient.&lt;/p&gt;

&lt;p&gt;We response the comments and wait for the further discussion. There are two options here. One, if there is a way to use standard input format to implement this support, please suggest, because we thought it is impossible. Two, if you think this support is useless, we don&apos;t mind to remove it and keep with ourselves. &lt;/p&gt;

&lt;p&gt;Again, we need discussion to move forward.&lt;/p&gt;

&lt;p&gt;Sent from my iPhone&lt;/p&gt;

</comment>
                            <comment id="13692593" author="yiqun" created="Tue, 25 Jun 2013 00:58:19 +0100"  >&lt;p&gt;Robin, just see your response. Let us digest it then response.&lt;/p&gt;</comment>
                            <comment id="13692620" author="yiqun" created="Tue, 25 Jun 2013 01:25:20 +0100"  >&lt;p&gt;Robin, I understand the philosophy of mahout. But when you said we can write a new mapreduce to finish the mapping string id to row/column. From my understanding, it does not solve the issue. In the new mapreduce, we still have to introduce the new input format as we did here. Am I right?&lt;/p&gt;

&lt;p&gt;Sent from my iPhone&lt;/p&gt;

</comment>
                            <comment id="13692777" author="zhangda" created="Tue, 25 Jun 2013 07:16:39 +0100"  >&lt;p&gt;removed the string input format, let&apos;s not include in this fix then.&lt;/p&gt;</comment>
                            <comment id="13694453" author="yiqun" created="Thu, 27 Jun 2013 04:45:01 +0100"  >&lt;p&gt;Robin, we have removed the new function of supporting string data id. So no new data format for this. Please check the new patch and see if it can be integrated in 0.8. From our side, the patches resolve all review comments and pass unit test.&lt;/p&gt;

&lt;p&gt;We can further discuss the issue about supporting string data id separately.&lt;/p&gt;</comment>
                            <comment id="13695153" author="hudson" created="Fri, 28 Jun 2013 00:14:10 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #2112 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2112/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2112/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1214&quot; title=&quot;Improve the accuracy of the Spectral KMeans Method&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1214&quot;&gt;&lt;del&gt;MAHOUT-1214&lt;/del&gt;&lt;/a&gt; Improve the accuracy of the Spectral KMeans Method(Yiqun Hu, Zhang Da) (Revision 1497591)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
robinanil : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/EigenSeedGenerator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/kmeans/TestEigenSeedGenerator.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13695167" author="yiqun" created="Fri, 28 Jun 2013 00:55:20 +0100"  >&lt;p&gt;Hi, Hudson,&lt;br/&gt;
We will take a look at the two failures of unit test. Are these two unit tests in the current HEAD stream? We run unit test on local env and didn&apos;t come across such failures.&lt;/p&gt;

&lt;p&gt;Sent from my iPhone&lt;/p&gt;

</comment>
                            <comment id="13695175" author="smarthi" created="Fri, 28 Jun 2013 01:06:05 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yiqun&quot; class=&quot;user-hover&quot; rel=&quot;yiqun&quot;&gt;Yiqun Hu&lt;/a&gt; The failures are not related to this issue or your fix. &lt;/p&gt;</comment>
                            <comment id="13695182" author="yiqun" created="Fri, 28 Jun 2013 01:15:23 +0100"  >&lt;p&gt;Oh, okay. Thanks for clarify.&lt;/p&gt;

&lt;p&gt;Sent from my iPhone&lt;/p&gt;

</comment>
                            <comment id="13695204" author="hudson" created="Fri, 28 Jun 2013 02:06:41 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #2113 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2113/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2113/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1214&quot; title=&quot;Improve the accuracy of the Spectral KMeans Method&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1214&quot;&gt;&lt;del&gt;MAHOUT-1214&lt;/del&gt;&lt;/a&gt;: Improve the accuracy of the Spectral KMeans Method - minor code cleanup (Revision 1497615)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
smarthi : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/EigenSeedGenerator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/kmeans/TestEigenSeedGenerator.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13695226" author="hudson" created="Fri, 28 Jun 2013 03:14:51 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #2114 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2114/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2114/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1214&quot; title=&quot;Improve the accuracy of the Spectral KMeans Method&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1214&quot;&gt;&lt;del&gt;MAHOUT-1214&lt;/del&gt;&lt;/a&gt;: Improve the accuracy of the Spectral KMeans Method - more minor cleanups. (Revision 1497630)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
smarthi : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/kmeans/EigenSeedGenerator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13695325" author="srowen" created="Fri, 28 Jun 2013 10:08:51 +0100"  >&lt;p&gt;Also, Hudson is not a person. It is the automated build process. &quot;He&quot; won&apos;t answer your questions.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12589559" name="MAHOUT-1214.patch" size="40086" author="zhangda" created="Tue, 25 Jun 2013 07:16:39 +0100"/>
                            <attachment id="12588282" name="MAHOUT-1214.patch" size="4073" author="robinanil" created="Tue, 18 Jun 2013 04:25:40 +0100"/>
                            <attachment id="12586670" name="matrix_1" size="361" author="yiqun" created="Fri, 7 Jun 2013 07:29:06 +0100"/>
                            <attachment id="12586671" name="matrix_2" size="361" author="yiqun" created="Fri, 7 Jun 2013 07:29:06 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 May 2013 16:29:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>328258</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzeh9r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>328602</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>