<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:24:28 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-890/MAHOUT-890.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-890] Performance issue in FPGrowth</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-890</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;I&apos;ve encountered a dataset which indicates there is probably a performance bug lurking in the FPGrowth implementation.  This set may be a bit of an unusual target for FPG - there&apos;s a relatively modest number itemsets, and many items with a Zipfy distribution.  I am attaching a patch (addSynth.patch) to add a similar dataset as core/src/test/resources/FPGsynth.dat.&lt;/p&gt;

&lt;p&gt;FPGsynth.dat can take minutes or a few hours to process, depending on how it is grouped out to machines.  If run in sequential mode, or with &quot;-g 50&quot; it will take considerable time.  Most reducers/&quot;anchor items&quot; are processed quickly, but a small number take a handful of minutes, and one or two take a long time.  If you experiment with this data, I suggest using  &apos;-s 50 -regex &quot;[ ]+&quot;&apos;. &lt;/p&gt;

&lt;p&gt;Digging into this, I&apos;ve found that the tree pruning code sometimes creates surprising trees.  One oddity I&apos;ve observed is 0-count nodes, sometimes with non-zero children.  The other is that sometimes subtrees seem to get repeated.  I&apos;m attaching a sample input file (smallexample.dat, use the whitespace regex with this one, too) and a patch which adds some logging in pruneFPTree and growthBottomUp which will print out some interesting trees when run with the smallexample.dat input.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12532076">MAHOUT-890</key>
            <summary>Performance issue in FPGrowth</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robinanil">Robin Anil</assignee>
                                    <reporter username="tcp">tom pierce</reporter>
                        <labels>
                    </labels>
                <created>Sun, 20 Nov 2011 03:39:04 +0000</created>
                <updated>Tue, 31 Mar 2015 23:49:21 +0100</updated>
                            <resolved>Tue, 17 Jan 2012 05:20:20 +0000</resolved>
                                    <version>0.6</version>
                                    <fixVersion>0.6</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13153770" author="srowen" created="Sun, 20 Nov 2011 12:17:10 +0000"  >&lt;p&gt;Do you have a suggested fix, or is it more of an observation? I didn&apos;t see a change in the patches.&lt;/p&gt;</comment>
                            <comment id="13153800" author="gsingers" created="Sun, 20 Nov 2011 13:29:49 +0000"  >&lt;p&gt;Thinking about how to test this, it sure would be nice if we could mark tests as long running or something, so they don&apos;t necessarily run every time.&lt;/p&gt;</comment>
                            <comment id="13153822" author="tcp" created="Sun, 20 Nov 2011 16:07:53 +0000"  >&lt;p&gt;There&apos;s no fix patch up there (yet); it has been difficult for me to trace through this code.  It doesn&apos;t quite line up with my reading of the papers it&apos;s based on, and it is not always clear what assumptions and guarantees callers/callees are making.&lt;/p&gt;

&lt;p&gt;I thought it would be helpful to show example cases that trigger the problem I&apos;m having; maybe someone else who knows this code better could quickly see what is wrong.  I&apos;ll probably submit a patch in a day or two with a naive &quot;straight from the paper&quot; implementation.   &lt;/p&gt;

&lt;p&gt;I love the suggestion to have a tests-long target or something similar (long-test-disable property?), especially if you can scope it to different packages.  &lt;/p&gt;
</comment>
                            <comment id="13155489" author="tcp" created="Tue, 22 Nov 2011 22:15:47 +0000"  >&lt;p&gt;I&apos;m attaching another patch which adds a second FP-Growth implementation.  This code has a few difference with the current FPG implementation.  It does not avoid creating objects or recursion, so it may be more heap/stack hungry.  It also does not output lists of top-k freq patterns for each item; instead it outputs top-k frequent patterns containing items more frequent than the current target item (note that top-k sets per item can be post-processed from this data).  The union of all per-item itemsets should be the same, and I&apos;ve included a test which demonstrates this for the retail.dat dataset.&lt;/p&gt;

&lt;p&gt;This code handles the FPGsynth.dat dataset without trouble, and I&apos;ve added a flag that lets you try out the new code by adding a &quot;-2&quot; to the commandline, in either MR or sequential mode (running &quot;mahout fpg&quot; will use the existing code by default).  I hope people will try them out against each other.&lt;/p&gt;

&lt;p&gt;If this implementation is adopted we can add some itemset pruning (per the Li paper), and we can add a post-processor to generate top-k per item patterns, if there are users relying on that functionality.  I deferred these for now, so that running the implementations side-by-side would be very straightforward.&lt;/p&gt;


</comment>
                            <comment id="13162230" author="tcp" created="Sat, 3 Dec 2011 23:18:50 +0000"  >&lt;p&gt;I&apos;ve prepared a patch which replaces the current FPTree/FPGrowth implementation, and also streamlines the mapreduce workflow a bit. I&apos;m attaching it as &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-890&quot; title=&quot;Performance issue in FPGrowth&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-890&quot;&gt;&lt;del&gt;MAHOUT-890&lt;/del&gt;&lt;/a&gt;.patch.&lt;/p&gt;

&lt;p&gt;One caveat is that sequential FPGrowth no longer mines &quot;all patterns that include item X for each item&quot;.  To duplicate this functionality, you&apos;ll need to postfilter the results.  In other words, if &lt;span class=&quot;error&quot;&gt;&amp;#91;A, B&amp;#93;&lt;/span&gt; is currently a frequent pattern, you would find it in the old results twice, once each in a list for A and B.  In the new version it will only appear in one list.  I&apos;ve updated the tests to reflect this.&lt;/p&gt;

&lt;p&gt;Based on the answer keys in some of the Parallel FPGrowth tests, the postfilter that should have been doing this fixup for the parallel version has not been  working correctly in all cases, so perhaps this functionality could be dropped or redone for both MR and sequential workflows (for example, in PFPGrowthTest.java, &lt;span class=&quot;error&quot;&gt;&amp;#91;D, A, E&amp;#93;&lt;/span&gt; is not in the answer key for A, but it is for D and E).  &lt;/p&gt;


</comment>
                            <comment id="13162239" author="gsingers" created="Sat, 3 Dec 2011 23:53:06 +0000"  >&lt;p&gt;Would it make sense to first establish tests for correctness and then consider replacing the functionality?  I haven&apos;t reviewed the patch yet, but it seems kind of drastic to replace first without actually having tests in place that establish correctness.  I realize that perhaps we have &quot;manual&quot; tests, but I think it would be better to first have unit tests in place.&lt;/p&gt;</comment>
                            <comment id="13162249" author="robinanil" created="Sun, 4 Dec 2011 01:02:20 +0000"  >&lt;p&gt;As I see from the implementation, the mining is done exactly once. This is quite drastic a deviation from earlier implementation which was mining top K patterns for each level of the tree. I understand that the reason for creating a new implementation was due to the surprising trees that you found in the old version and also because you wanted to make the code more testable. There could be things that can be replaced in a layer. If the problem was in the core-fpgrowth, we can simply replace the new fptree and fpgrowth. part. &lt;/p&gt;

&lt;p&gt;Alternately, we can check the code in under fpgrowth2 and continue the rewrite and move the functionality over bit by bit.&lt;/p&gt;

&lt;p&gt;Looking at the code, I see a lot of List&amp;lt;Integer&amp;gt; and Integer[] in the new code. In mahout we went away from the boxed versions due to performance reasons. There is an IntArray in Mahout Math which is used by the earlier code, I would suggest using that.&lt;/p&gt;
</comment>
                            <comment id="13162849" author="tcp" created="Mon, 5 Dec 2011 16:01:58 +0000"  >&lt;p&gt;Thanks for the feedback.  I agree with your thinking on tests, but I&apos;m not sure what makes the most sense here.  I have an example set where the current implementation seems to produce correct output, it just takes an unreasonable amount of time (4+ hours on a small set).  I&apos;ll be happy to provide a unit test, though.  Unit testing the tree manipulations on a smaller scale is problematic because the intent and invariants are not obvious.  &lt;/p&gt;

&lt;p&gt;For what it&apos;s worth, I actually spent more time than I&apos;d like to admit trying to understand and fix the current implementation before resorting to a rewrite.  &lt;br/&gt;
My motivation for creating an alternate implementation was that I have a real dataset (of reasonable size) where the current implementation effectively fails to complete.  I&apos;ve submitted a bug report, example data that demonstrates the long-execution problem, a toy example that can demonstrate evidence of tree-manipulation behavior that is almost certainly bad (but it is still not clear to me how to fix it), and I&apos;ve also shown a naive implementation that completes quickly on the same data.  &lt;/p&gt;

&lt;p&gt;On the topic of top-k patterns, I do not understand why it is desirable to repeatedly mine the same candidates/patterns.  The current implementation will find pattern &quot;a b c&quot; 3 times, when it could be found once and post-processed to create complete per-item lists.  It seems needlessly inefficient (especially if you don&apos;t care about per-item lists).  The way the code is structured, it is done this way even in mapreduce mode, even though the input itemsets are pruned in such a way that postprocessing is necessary anyway.  &lt;/p&gt;

&lt;p&gt;You&apos;re right that there are a lot of boxed primitives in the patch; I also didn&apos;t pack the tree into an array representation.  I aimed for simple/quick to get it working; the boxed primitives in particular should be pretty easy to eliminate.&lt;/p&gt;</comment>
                            <comment id="13165747" author="robinanil" created="Fri, 9 Dec 2011 01:49:06 +0000"  >&lt;p&gt;Would you be willing to move the patch over to fpgrowth2 and to continue to work on the rewrite as a separate version until features are migrated.?&lt;/p&gt;</comment>
                            <comment id="13166452" author="tcp" created="Fri, 9 Dec 2011 19:04:42 +0000"  >&lt;p&gt;Sure - I can do this.  I can also separate out the changes in the MR&lt;br/&gt;
logic (for example, a group file is no longer used- membership is&lt;br/&gt;
calculated on the fly) from the separate implementation.&lt;/p&gt;

&lt;p&gt;I&apos;ll make new tickets for those changes, unless I hear otherwise.&lt;/p&gt;

&lt;p&gt;Also, given that complete per-item sets were called out - should I&lt;br/&gt;
assume that&apos;ll be a showstopper because people are relying on the&lt;br/&gt;
existing functionality?  Would it be safe to only worry about the MR&lt;br/&gt;
case?&lt;/p&gt;


&lt;p&gt;On Thu, Dec 8, 2011 at 8:49 PM, Robin Anil (Commented) (JIRA)&lt;/p&gt;</comment>
                            <comment id="13166458" author="robinanil" created="Fri, 9 Dec 2011 19:10:04 +0000"  >&lt;p&gt;It wont be a complete showstopper, but that functionality is easy to replicate. If the core fpgrowth is correct, then all that is needed is to mine at each level in the tree. corresponding to a pattern. Thats is easy enough to replicate.&lt;/p&gt;</comment>
                            <comment id="13167059" author="rogerdai16" created="Sun, 11 Dec 2011 07:17:51 +0000"  >&lt;p&gt;I did not notice the replicated trees, but I met the similar problem when using mahout-0.5.&lt;br/&gt;
Some features did took much longer amount of time to mine. &lt;br/&gt;
I printed out the stack and found found that the traverBottomUp method had been invoked for many times.&lt;/p&gt;</comment>
                            <comment id="13174809" author="hammer" created="Thu, 22 Dec 2011 13:54:21 +0000"  >&lt;p&gt;What is holding up progress on this issue?&lt;/p&gt;</comment>
                            <comment id="13174819" author="gsingers" created="Thu, 22 Dec 2011 14:29:09 +0000"  >&lt;p&gt;Jeff, I haven&apos;t seen a new patch since the last round of discussions, or did I miss something?  Perhaps it&apos;s on another issue?  If so, it should be linked here.&lt;/p&gt;</comment>
                            <comment id="13174825" author="tcp" created="Thu, 22 Dec 2011 14:35:43 +0000"  >&lt;p&gt;There are patches in other issues - it would be great if they moved forward, so I could be sure I won&apos;t need to rebase later patches.&lt;/p&gt;

&lt;p&gt;See: &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-920&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-920&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-921&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-921&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-927&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/MAHOUT-927&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13177775" author="tcp" created="Fri, 30 Dec 2011 21:38:52 +0000"  >&lt;p&gt;This patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-890&quot; title=&quot;Performance issue in FPGrowth&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-890&quot;&gt;&lt;del&gt;MAHOUT-890&lt;/del&gt;&lt;/a&gt;-2) adds the new implementation (under fpgrowth2) alongside the old with a minimal number of boxed primitives in the parallel version.  This patch depends on &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-920&quot; title=&quot;Remove a mapreduce job from parallel FPGrowth workflow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-920&quot;&gt;&lt;del&gt;MAHOUT-920&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-921&quot; title=&quot;FPG uses a lot of boxed primitives - this patch eliminates a bunch of List&amp;lt;Integer&amp;gt; &quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-921&quot;&gt;&lt;del&gt;MAHOUT-921&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-927&quot; title=&quot;FPG saves a mapping from from feature to mining group, when this can be calculated on the fly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-927&quot;&gt;&lt;del&gt;MAHOUT-927&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tests are included that check the new implementation against known-good output and the existing implementation.&lt;/p&gt;

&lt;p&gt;The sequential implementation does not have a post-filter to create the complete per-item itemsets (though all the same itemsets are found - the new implementation returns de-duped sets).  Otherwise the results should be interchangeable.&lt;/p&gt;</comment>
                            <comment id="13177865" author="tcp" created="Sat, 31 Dec 2011 01:22:51 +0000"  >&lt;p&gt;I decided to add a couple tests based on the synthetic data, and found two bounds-checking issues that the retail and toy sets failed to trigger.  &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-890&quot; title=&quot;Performance issue in FPGrowth&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-890&quot;&gt;&lt;del&gt;MAHOUT-890&lt;/del&gt;&lt;/a&gt;-3 includes a fix for those, a couple extra tests, the synthetic test data, and a few less tabs.&lt;/p&gt;</comment>
                            <comment id="13186345" author="robinanil" created="Sat, 14 Jan 2012 21:21:06 +0000"  >&lt;p&gt;The Patch fails when applying. Can you send me a new one&lt;/p&gt;</comment>
                            <comment id="13186346" author="robinanil" created="Sat, 14 Jan 2012 21:24:30 +0000"  >&lt;p&gt;Strike that, it works in the order 920, 921, 927, 890-3&lt;/p&gt;</comment>
                            <comment id="13186544" author="hudson" created="Sun, 15 Jan 2012 17:58:46 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #1307 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1307/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1307/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-890&quot; title=&quot;Performance issue in FPGrowth&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-890&quot;&gt;&lt;del&gt;MAHOUT-890&lt;/del&gt;&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-920&quot; title=&quot;Remove a mapreduce job from parallel FPGrowth workflow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-920&quot;&gt;&lt;del&gt;MAHOUT-920&lt;/del&gt;&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-921&quot; title=&quot;FPG uses a lot of boxed primitives - this patch eliminates a bunch of List&amp;lt;Integer&amp;gt; &quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-921&quot;&gt;&lt;del&gt;MAHOUT-921&lt;/del&gt;&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-927&quot; title=&quot;FPG saves a mapping from from feature to mining group, when this can be calculated on the fly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-927&quot;&gt;&lt;del&gt;MAHOUT-927&lt;/del&gt;&lt;/a&gt; FpGrowth2 Implementation and fixes to existing Mapreduce classes in pfpgrowth&lt;/p&gt;

&lt;p&gt;robinanil : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1231700&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1231700&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthCombiner.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTreeIterator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthObj.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPTree.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthRetailDataTest2.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthRetailDataTestVs.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthSyntheticDataTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthTest2.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowthRetailDataTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowthRetailDataTest2.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowthRetailDataTestVs.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowthSynthDataTest2.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowthTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowthTest2.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/TransactionTreeTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/resources/FPGsynth.dat&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12534619">MAHOUT-920</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12508956" name="MAHOUT-890-2.patch" size="105344" author="tcp" created="Fri, 30 Dec 2011 21:38:52 +0000"/>
                            <attachment id="12508970" name="MAHOUT-890-3.patch" size="729714" author="tcp" created="Sat, 31 Dec 2011 01:22:51 +0000"/>
                            <attachment id="12506009" name="MAHOUT-890.patch" size="92702" author="tcp" created="Sat, 3 Dec 2011 23:20:02 +0000"/>
                            <attachment id="12504410" name="addSynth.patch" size="602003" author="tcp" created="Sun, 20 Nov 2011 03:41:00 +0000"/>
                            <attachment id="12504412" name="logtrees.patch" size="1215" author="tcp" created="Sun, 20 Nov 2011 03:41:00 +0000"/>
                            <attachment id="12504816" name="simpleFPG.patch" size="39086" author="tcp" created="Tue, 22 Nov 2011 22:16:39 +0000"/>
                            <attachment id="12504411" name="smallexample.dat" size="118" author="tcp" created="Sun, 20 Nov 2011 03:41:00 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 20 Nov 2011 12:17:10 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>217812</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy2cf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22531</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>