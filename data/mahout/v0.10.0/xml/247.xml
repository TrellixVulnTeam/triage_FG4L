<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:19:45 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-247/MAHOUT-247.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-247] GenericUserBasedRecommender.recommend causes connection leak when called for user with no preferences</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-247</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;			UserSimilarity userSimilarity = new TanimotoCoefficientSimilarity(getBooleanPrefDataModel());&lt;br/&gt;
			UserNeighborhood neighborhood = new NearestNUserNeighborhood(3, userSimilarity, getBooleanPrefDataModel());&lt;br/&gt;
			Recommender recommender = new GenericBooleanPrefUserBasedRecommender(getBooleanPrefDataModel(), neighborhood, userSimilarity);&lt;br/&gt;
                        recommender.recommend(userwithnopreferencesdata, 10);&lt;/p&gt;

&lt;p&gt;code properly throws NoSuchUserException however one of the connections is hang on LongPrimitiveIterator backed by org.apache.mahout.cf.taste.impl.model.jdbc.AbstractJDBCDataModel$ResultSetIDIterator as Exception is thrown before TopItems.getTopUsers finishes the while loop &lt;/p&gt;

&lt;p&gt;public static long[] getTopUsers(int howMany,&lt;br/&gt;
                                   LongPrimitiveIterator allUserIDs,&lt;br/&gt;
                                   Rescorer&amp;lt;Long&amp;gt; rescorer,&lt;br/&gt;
                                   Estimator&amp;lt;Long&amp;gt; estimator) throws TasteException {&lt;br/&gt;
    Queue&amp;lt;SimilarUser&amp;gt; topUsers = new PriorityQueue&amp;lt;SimilarUser&amp;gt;(howMany + 1, Collections.reverseOrder());&lt;br/&gt;
    boolean full = false;&lt;br/&gt;
    double lowestTopValue = Double.NEGATIVE_INFINITY;&lt;br/&gt;
//HERE IS THE ITERATOR&lt;br/&gt;
    while (allUserIDs.hasNext()) {&lt;br/&gt;
      long userID = allUserIDs.next();&lt;br/&gt;
      if (rescorer != null &amp;amp;&amp;amp; rescorer.isFiltered(userID)) &lt;/p&gt;
{
        continue;
      }

&lt;p&gt;//EXCEPTION THROWN HERE CAUSES THE CONNECTION LEAK&lt;br/&gt;
      double similarity = estimator.estimate(userID);&lt;br/&gt;
      double rescoredSimilarity = rescorer == null ? similarity : rescorer.rescore(userID, similarity);&lt;br/&gt;
      if (!Double.isNaN(rescoredSimilarity) &amp;amp;&amp;amp; (!full || rescoredSimilarity &amp;gt; lowestTopValue)) {&lt;br/&gt;
        topUsers.add(new SimilarUser(userID, similarity));&lt;br/&gt;
        if (full) &lt;/p&gt;
{
          topUsers.poll();
        }
&lt;p&gt; else if (topUsers.size() &amp;gt; howMany) &lt;/p&gt;
{
          full = true;
          topUsers.poll();
        }
&lt;p&gt;        lowestTopValue = topUsers.peek().getSimilarity();&lt;br/&gt;
      }&lt;br/&gt;
    }&lt;br/&gt;
    if (topUsers.isEmpty()) &lt;/p&gt;
{
      return NO_IDS;
    }
&lt;p&gt;    List&amp;lt;SimilarUser&amp;gt; sorted = new ArrayList&amp;lt;SimilarUser&amp;gt;(topUsers.size());&lt;br/&gt;
    sorted.addAll(topUsers);&lt;br/&gt;
    Collections.sort(sorted);&lt;br/&gt;
    long[] result = new long&lt;span class=&quot;error&quot;&gt;&amp;#91;sorted.size()&amp;#93;&lt;/span&gt;;&lt;br/&gt;
    int i = 0;&lt;br/&gt;
    for (SimilarUser similarUser : sorted) &lt;/p&gt;
{
      result[i++] = similarUser.getUserID();
    }
&lt;p&gt;    return result;&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;============================================================================================================&lt;br/&gt;
I currently fixed it in our application by checking first to see if user has preferences for the given dataset (user might exists and have preferences for a different dataset).&lt;/p&gt;

&lt;p&gt;However this edge case does not cause issues in some other recommenders as long as we handle the NoSuchUserException.&lt;/p&gt;

&lt;p&gt;Easy solution is to use AbstractJDBCDataModel$ResultSetIDIterator always with try/catch/finally and release the connection.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Reproducable on Win32 and Ubuntu&lt;/p&gt;</environment>
        <key id="12445530">MAHOUT-247</key>
            <summary>GenericUserBasedRecommender.recommend causes connection leak when called for user with no preferences</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="tolga_oral@us.ibm.com">Tolga Oral</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Jan 2010 17:17:21 +0000</created>
                <updated>Sat, 21 May 2011 04:23:51 +0100</updated>
                            <resolved>Fri, 15 Jan 2010 00:40:21 +0000</resolved>
                                    <version>0.2</version>
                                    <fixVersion>0.3</fixVersion>
                                    <component>Collaborative Filtering</component>
                        <due>Thu, 21 Jan 2010 00:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12800262" author="srowen" created="Thu, 14 Jan 2010 17:30:55 +0000"  >&lt;p&gt;Good one. I will review this and come up with a proper fix. The iterator needs to be &apos;closed&apos; in cases like this.&lt;/p&gt;</comment>
                            <comment id="12800466" author="srowen" created="Fri, 15 Jan 2010 00:36:00 +0000"  >&lt;p&gt;This is actually very messy to really fix &amp;#8211; LongPrimitiveIterator is used in a lot of places, and to make sure it&apos;s &quot;drained&quot; in all exception cases would make quite a mess of the code.&lt;/p&gt;

&lt;p&gt;I did add a finalize() method to the implementations which are based on a JDBC connection, to close the connection. This doesn&apos;t really fix anything but at least may get the connection closed via finalization somewhat faster.&lt;/p&gt;

&lt;p&gt;While I think it&apos;s hard to actually guarantee closing the connection immediately on all exception paths, it&apos;s relatively easy to apply fixes that would avoid the cases that would actually probably cause problems, such as the code you cite above.&lt;/p&gt;

&lt;p&gt;I think my best bet at a fix here is to apply your change and related changes in key parts of the code and leave it at that.&lt;/p&gt;</comment>
                            <comment id="12800467" author="srowen" created="Fri, 15 Jan 2010 00:40:21 +0000"  >&lt;p&gt;Tentatively resolving this after applying a fix to the most obvious case where this issue could come up. It&apos;s not truly fixed in all cases, though at the moment, I think this is all that is practical to attempt. I&apos;m open to more suggestions about how to address this.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Jan 2010 17:30:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9818</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy6an:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23171</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>