<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:27:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1583/MAHOUT-1583.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1583] cbind() operator for Scala DRMs</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1583</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Another R-like operator, cbind (stitching two matrices together). Seems to come up now and then. &lt;/p&gt;

&lt;p&gt;Just like with elementwise operations, and, perhaps some other, it will have two physical implementation paths, one is zip for identically distributed operators, and another one is full join in case they are not.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12721544">MAHOUT-1583</key>
            <summary>cbind() operator for Scala DRMs</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dlyubimov">Dmitriy Lyubimov</assignee>
                                    <reporter username="dlyubimov">Dmitriy Lyubimov</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 Jun 2014 00:09:04 +0100</created>
                <updated>Mon, 13 Apr 2015 11:20:28 +0100</updated>
                            <resolved>Mon, 7 Jul 2014 20:44:54 +0100</resolved>
                                                    <fixVersion>0.10.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14033175" author="kanjilal" created="Tue, 17 Jun 2014 00:28:22 +0100"  >&lt;p&gt;Why not combine this with 1490 and create a set of APIs around a dataframe like we were doing and add cbind to that?&lt;/p&gt;</comment>
                            <comment id="14033195" author="dlyubimov" created="Tue, 17 Jun 2014 00:47:03 +0100"  >&lt;p&gt;Hm. Because. I would say, drm and data frames are two different&lt;br/&gt;
technologies,and &quot;data frames have or do not have cbind&quot; and &quot;drm have or&lt;br/&gt;
do not have cbind&quot; at this point are conditionally independent random&lt;br/&gt;
variables.&lt;/p&gt;


&lt;p&gt;On Mon, Jun 16, 2014 at 4:30 PM, Saikat Kanjilal (JIRA) &amp;lt;jira@apache.org&amp;gt;&lt;/p&gt;
</comment>
                            <comment id="14033308" author="githubbot" created="Tue, 17 Jun 2014 02:39:48 +0100"  >&lt;p&gt;GitHub user dlyubimov opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/20&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1583&quot; title=&quot;cbind() operator for Scala DRMs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1583&quot;&gt;&lt;del&gt;MAHOUT-1583&lt;/del&gt;&lt;/a&gt; cbind() operator for Scala DRMs&lt;/p&gt;

&lt;p&gt;    This is now ready for review&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/dlyubimov/mahout&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dlyubimov/mahout&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1583&quot; title=&quot;cbind() operator for Scala DRMs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1583&quot;&gt;&lt;del&gt;MAHOUT-1583&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/20.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/20.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #20&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit d3e905b5a92735822efe717f8b7a57c80bc56478&lt;br/&gt;
Author: Dmitriy Lyubimov &amp;lt;dlyubimov@apache.org&amp;gt;&lt;br/&gt;
Date:   2014-06-17T01:09:59Z&lt;/p&gt;

&lt;p&gt;    initial writeup&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14036768" author="githubbot" created="Thu, 19 Jun 2014 01:57:37 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/20#issuecomment-46512881&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/20#issuecomment-46512881&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Could i get a &quot;nay&quot; or &quot;yay&quot; on this please?&lt;/p&gt;

&lt;p&gt;    (&quot;Nays&quot; must be accompanied with an alternative per Apache. )&lt;/p&gt;

&lt;p&gt;    thanks.&lt;/p&gt;</comment>
                            <comment id="14039798" author="githubbot" created="Sat, 21 Jun 2014 14:02:16 +0100"  >&lt;p&gt;Github user sscdotopen commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/20#discussion_r14049574&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/20#discussion_r14049574&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: spark/src/main/scala/org/apache/mahout/sparkbindings/blas/CbindAB.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,95 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.sparkbindings.blas&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.log4j.Logger&lt;br/&gt;
    +import scala.reflect.ClassTag&lt;br/&gt;
    +import org.apache.mahout.sparkbindings.drm.DrmRddInput&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm.logical.OpCbind&lt;br/&gt;
    +import org.apache.spark.SparkContext._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Physical cbind */&lt;br/&gt;
    +object CbindAB {&lt;br/&gt;
    +&lt;br/&gt;
    +  private val log = Logger.getLogger(CbindAB.getClass)&lt;br/&gt;
    +&lt;br/&gt;
    +  def cbindAB_nograph&lt;span class=&quot;error&quot;&gt;&amp;#91;K: ClassTag&amp;#93;&lt;/span&gt;(op: OpCbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.toDrmRdd()&lt;br/&gt;
    +    val b = srcB.toDrmRdd()&lt;br/&gt;
    +    val n = op.ncol&lt;br/&gt;
    +    val n1 = op.A.ncol&lt;br/&gt;
    +    val n2 = n - n1&lt;br/&gt;
    +&lt;br/&gt;
    +    // Check if A and B are identically partitioned AND keyed. if they are, then just perform zip&lt;br/&gt;
    +    // instead of join, and apply the op map-side. Otherwise, perform join and apply the op&lt;br/&gt;
    +    // reduce-side.&lt;br/&gt;
    +    val rdd = if (op.isIdenticallyPartitioned(op.A)) {&lt;br/&gt;
    +&lt;br/&gt;
    +      log.debug(&quot;applying zipped cbind()&quot;)&lt;br/&gt;
    +&lt;br/&gt;
    +      a&lt;br/&gt;
    +          .zip(b)&lt;br/&gt;
    +          .map {&lt;br/&gt;
    +        case ((keyA, vectorA), (keyB, vectorB)) =&amp;gt;&lt;br/&gt;
    +          assert(keyA == keyB, &quot;inputs are claimed identically partitioned, but they are not identically keyed&quot;)&lt;br/&gt;
    +&lt;br/&gt;
    +          val dense = vectorA.isDense &amp;amp;&amp;amp; vectorB.isDense&lt;br/&gt;
    +          val vec: Vector = if (dense) new DenseVector&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; else new SequentialAccessSparseVector&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Wouldn&apos;t it be more performant to use a RandomAccessSparseVector for the assign and change it into a SequentialAcessSparseVector later?&lt;/p&gt;</comment>
                            <comment id="14039799" author="githubbot" created="Sat, 21 Jun 2014 14:02:57 +0100"  >&lt;p&gt;Github user sscdotopen commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/20#discussion_r14049576&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/20#discussion_r14049576&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: spark/src/main/scala/org/apache/mahout/sparkbindings/blas/CbindAB.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,95 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.sparkbindings.blas&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.log4j.Logger&lt;br/&gt;
    +import scala.reflect.ClassTag&lt;br/&gt;
    +import org.apache.mahout.sparkbindings.drm.DrmRddInput&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm.logical.OpCbind&lt;br/&gt;
    +import org.apache.spark.SparkContext._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Physical cbind */&lt;br/&gt;
    +object CbindAB {&lt;br/&gt;
    +&lt;br/&gt;
    +  private val log = Logger.getLogger(CbindAB.getClass)&lt;br/&gt;
    +&lt;br/&gt;
    +  def cbindAB_nograph&lt;span class=&quot;error&quot;&gt;&amp;#91;K: ClassTag&amp;#93;&lt;/span&gt;(op: OpCbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.toDrmRdd()&lt;br/&gt;
    +    val b = srcB.toDrmRdd()&lt;br/&gt;
    +    val n = op.ncol&lt;br/&gt;
    +    val n1 = op.A.ncol&lt;br/&gt;
    +    val n2 = n - n1&lt;br/&gt;
    +&lt;br/&gt;
    +    // Check if A and B are identically partitioned AND keyed. if they are, then just perform zip&lt;br/&gt;
    +    // instead of join, and apply the op map-side. Otherwise, perform join and apply the op&lt;br/&gt;
    +    // reduce-side.&lt;br/&gt;
    +    val rdd = if (op.isIdenticallyPartitioned(op.A)) {&lt;br/&gt;
    +&lt;br/&gt;
    +      log.debug(&quot;applying zipped cbind()&quot;)&lt;br/&gt;
    +&lt;br/&gt;
    +      a&lt;br/&gt;
    +          .zip(b)&lt;br/&gt;
    +          .map &lt;/p&gt;
{
    +        case ((keyA, vectorA), (keyB, vectorB)) =&amp;gt;
    +          assert(keyA == keyB, &quot;inputs are claimed identically partitioned, but they are not identically keyed&quot;)
    +
    +          val dense = vectorA.isDense &amp;amp;&amp;amp; vectorB.isDense
    +          val vec: Vector = if (dense) new DenseVector(n) else new SequentialAccessSparseVector(n)
    +          vec(0 until n1) := vectorA
    +          vec(n1 until n) := vectorB
    +          keyA -&amp;gt; vec
    +      }
&lt;p&gt;    +    } else {&lt;br/&gt;
    +&lt;br/&gt;
    +      log.debug(&quot;applying cbind as join&quot;)&lt;br/&gt;
    +&lt;br/&gt;
    +      a&lt;br/&gt;
    +          .cogroup(b, numPartitions = a.partitions.size max b.partitions.size)&lt;br/&gt;
    +          .map {&lt;br/&gt;
    +        case (key, (vectorSeqA, vectorSeqB)) =&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +          // Generally, after co-grouping, we should not accept anything but 1 to 1 in the left and&lt;br/&gt;
    +          // the right groups. However let&apos;s be flexible here, if it does happen, recombine them into 1.&lt;br/&gt;
    +&lt;br/&gt;
    +          val vectorA = if (vectorSeqA.size &amp;lt;= 1)&lt;br/&gt;
    +            vectorSeqA.headOption.getOrElse(new RandomAccessSparseVector(n1))&lt;br/&gt;
    +          else&lt;br/&gt;
    +            (vectorSeqA.head.like() /: vectorSeqA)(_ += _)&lt;br/&gt;
    +&lt;br/&gt;
    +          val vectorB = if ( vectorSeqB.size &amp;lt;= 1)&lt;br/&gt;
    +            vectorSeqB.headOption.getOrElse(new RandomAccessSparseVector(n2))&lt;br/&gt;
    +          else&lt;br/&gt;
    +            (vectorSeqB.head.like() /: vectorSeqB)(_ += _)&lt;br/&gt;
    +&lt;br/&gt;
    +          val dense = vectorA.isDense &amp;amp;&amp;amp; vectorB.isDense&lt;br/&gt;
    +          val vec:Vector = if (dense) new DenseVector&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; else new SequentialAccessSparseVector&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    similar issue to line 56&lt;/p&gt;</comment>
                            <comment id="14039801" author="githubbot" created="Sat, 21 Jun 2014 14:03:56 +0100"  >&lt;p&gt;Github user sscdotopen commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/20#issuecomment-46753169&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/20#issuecomment-46753169&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    had two minor comments, other than that this is ready to commit IMHO&lt;/p&gt;</comment>
                            <comment id="14054084" author="githubbot" created="Mon, 7 Jul 2014 20:32:22 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/20#discussion_r14617005&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/20#discussion_r14617005&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: spark/src/main/scala/org/apache/mahout/sparkbindings/blas/CbindAB.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,95 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.sparkbindings.blas&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.log4j.Logger&lt;br/&gt;
    +import scala.reflect.ClassTag&lt;br/&gt;
    +import org.apache.mahout.sparkbindings.drm.DrmRddInput&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm.logical.OpCbind&lt;br/&gt;
    +import org.apache.spark.SparkContext._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Physical cbind */&lt;br/&gt;
    +object CbindAB {&lt;br/&gt;
    +&lt;br/&gt;
    +  private val log = Logger.getLogger(CbindAB.getClass)&lt;br/&gt;
    +&lt;br/&gt;
    +  def cbindAB_nograph&lt;span class=&quot;error&quot;&gt;&amp;#91;K: ClassTag&amp;#93;&lt;/span&gt;(op: OpCbind&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcA: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;, srcB: DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt;): DrmRddInput&lt;span class=&quot;error&quot;&gt;&amp;#91;K&amp;#93;&lt;/span&gt; = {&lt;br/&gt;
    +&lt;br/&gt;
    +    val a = srcA.toDrmRdd()&lt;br/&gt;
    +    val b = srcB.toDrmRdd()&lt;br/&gt;
    +    val n = op.ncol&lt;br/&gt;
    +    val n1 = op.A.ncol&lt;br/&gt;
    +    val n2 = n - n1&lt;br/&gt;
    +&lt;br/&gt;
    +    // Check if A and B are identically partitioned AND keyed. if they are, then just perform zip&lt;br/&gt;
    +    // instead of join, and apply the op map-side. Otherwise, perform join and apply the op&lt;br/&gt;
    +    // reduce-side.&lt;br/&gt;
    +    val rdd = if (op.isIdenticallyPartitioned(op.A)) {&lt;br/&gt;
    +&lt;br/&gt;
    +      log.debug(&quot;applying zipped cbind()&quot;)&lt;br/&gt;
    +&lt;br/&gt;
    +      a&lt;br/&gt;
    +          .zip(b)&lt;br/&gt;
    +          .map {&lt;br/&gt;
    +        case ((keyA, vectorA), (keyB, vectorB)) =&amp;gt;&lt;br/&gt;
    +          assert(keyA == keyB, &quot;inputs are claimed identically partitioned, but they are not identically keyed&quot;)&lt;br/&gt;
    +&lt;br/&gt;
    +          val dense = vectorA.isDense &amp;amp;&amp;amp; vectorB.isDense&lt;br/&gt;
    +          val vec: Vector = if (dense) new DenseVector&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; else new SequentialAccessSparseVector&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Not sure why you are saying this. If I am not misinterpreting what you are saying, neither theoretical nor practical estimate supports this. Added an assignment benchmark with and without openhash intermediary. here are the results of running it: &lt;/p&gt;

&lt;p&gt;        Testing started at 12:26 PM ...&lt;br/&gt;
        Average assignment seqSparse2seqSparse time: 29.673 ms&lt;br/&gt;
        Average assignment seqSparse2seqSparse via Random Access Sparse time: 406.510 ms&lt;/p&gt;

&lt;p&gt;    This of course assumes that we, for the most part, are having SeqSparse vectors, not RandomAccessSparse ones as payload (which we always are, unless somebody explicitly messes it up with a `mapBlock`.) &lt;/p&gt;
</comment>
                            <comment id="14054097" author="githubbot" created="Mon, 7 Jul 2014 20:42:17 +0100"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/20&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/20&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14054210" author="hudson" created="Mon, 7 Jul 2014 23:02:30 +0100"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2690 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2690/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2690/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1583&quot; title=&quot;cbind() operator for Scala DRMs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1583&quot;&gt;&lt;del&gt;MAHOUT-1583&lt;/del&gt;&lt;/a&gt;: cbind() operator for Scala DRMs (dlyubimov: rev 63cebf76e9c7746a1851841e37f5873704e086e8)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;spark/src/main/scala/org/apache/mahout/sparkbindings/SparkEngine.scala&lt;/li&gt;
	&lt;li&gt;CHANGELOG&lt;/li&gt;
	&lt;li&gt;math-scala/src/main/scala/org/apache/mahout/math/drm/logical/OpCbind.scala&lt;/li&gt;
	&lt;li&gt;math-scala/src/main/scala/org/apache/mahout/math/drm/RLikeDrmOps.scala&lt;/li&gt;
	&lt;li&gt;math-scala/src/test/scala/org/apache/mahout/math/scalabindings/MatrixOpsSuite.scala&lt;/li&gt;
	&lt;li&gt;spark/src/main/scala/org/apache/mahout/sparkbindings/blas/CbindAB.scala&lt;/li&gt;
	&lt;li&gt;spark/src/test/scala/org/apache/mahout/sparkbindings/drm/RLikeDrmOpsSuite.scala&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12681170">MAHOUT-1365</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 16 Jun 2014 23:28:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>399740</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzqo5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>399849</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>