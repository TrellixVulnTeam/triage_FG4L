<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:26:39 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-916/MAHOUT-916.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-916] Make Mahout&apos;s tests run in parallel</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-916</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Maven now supports parallel execution of tests.  We should hook this in to Mahout.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12534041">MAHOUT-916</key>
            <summary>Make Mahout&apos;s tests run in parallel</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="isabel">Isabel Drost-Fromm</assignee>
                                    <reporter username="gsingers">Grant Ingersoll</reporter>
                        <labels>
                            <label>MAHOUT_INTRO_CONTRIBUTE</label>
                    </labels>
                <created>Tue, 6 Dec 2011 15:18:27 +0000</created>
                <updated>Mon, 3 Feb 2014 08:06:21 +0000</updated>
                            <resolved>Sun, 2 Jun 2013 00:41:42 +0100</resolved>
                                                    <fixVersion>0.8</fixVersion>
                                    <component>build</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13165546" author="gsingers" created="Thu, 8 Dec 2011 20:46:35 +0000"  >&lt;p&gt;worth trying out.&lt;/p&gt;</comment>
                            <comment id="13166043" author="srowen" created="Fri, 9 Dec 2011 10:30:42 +0000"  >&lt;p&gt;The patch works for me. However it takes just about the same time for me &amp;#8211; one hour.&lt;/p&gt;

&lt;p&gt;I see this message on every test:&lt;br/&gt;
2011-12-09 10:02:26.194 java&lt;span class=&quot;error&quot;&gt;&amp;#91;10996:ad03&amp;#93;&lt;/span&gt; Unable to load realm info from SCDynamicStore&lt;br/&gt;
but I think it&apos;s unrelated:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HADOOP-7489&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HADOOP-7489&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think the config is quite right though. Is anyone seeing a speedup &amp;#8211; is it perhaps an artifact of my local environment?&lt;/p&gt;</comment>
                            <comment id="13166229" author="gsingers" created="Fri, 9 Dec 2011 15:22:28 +0000"  >&lt;p&gt;Yeah, not sure it&apos;s much savings.  One thing I wonder about is the use of &quot;balanced&quot;.  I think, in theory, the benefit of this comes from running the tests multiple times, as Maven will collect stats about what runs take longer.&lt;/p&gt;</comment>
                            <comment id="13166247" author="gsingers" created="Fri, 9 Dec 2011 15:36:35 +0000"  >&lt;p&gt;The other weird thing is even when I run this, w/ thread count of 4 per core, it barely touches the CPU. I guess I would expect that it would be pushing it more.&lt;/p&gt;</comment>
                            <comment id="13166253" author="gsingers" created="Fri, 9 Dec 2011 15:39:19 +0000"  >&lt;p&gt;On that note, I suppose it&apos;s due to the fact that thread count is per forked JVM, so you really don&apos;t see much benefit.  I wonder, if we could get back to forking only once, if we would then see some real benefit?&lt;/p&gt;</comment>
                            <comment id="13166325" author="srowen" created="Fri, 9 Dec 2011 17:18:15 +0000"  >&lt;p&gt;That is what I see. I am not even sure this is forking 4 JVMs. The &quot;perCoreThreadCount&quot; setting doesn&apos;t help either. I think there is just not quite a setting for what we want to do in this ticket.&lt;/p&gt;</comment>
                            <comment id="13399254" author="srowen" created="Fri, 22 Jun 2012 11:45:38 +0100"  >&lt;p&gt;More like &quot;CantFix&quot; &amp;#8211; we both never found any way to run in parallel that worked correcty.&lt;/p&gt;</comment>
                            <comment id="13640428" author="isabel" created="Wed, 24 Apr 2013 14:19:25 +0100"  >&lt;p&gt;Tried with the settings of our current surefire/junit configuration - works for me now.&lt;/p&gt;</comment>
                            <comment id="13640430" author="isabel" created="Wed, 24 Apr 2013 14:22:35 +0100"  >&lt;p&gt;Fix to parent pom to make tests run in parallel - currently with factor 1.5 of cores available.&lt;/p&gt;

&lt;p&gt;Comparing two runs on a machine with four cores shows all cores busy when running tests.&lt;/p&gt;

&lt;p&gt;Timings on a four core machine for a &quot;mvn clean install -o&quot; (after running the build once to get all dependencies into the local repository):&lt;/p&gt;


&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;real  18m39.195s&lt;br/&gt;
user  11m7.470s&lt;br/&gt;
sys 1m17.625s&lt;/p&gt;


&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;real  4m24.783s&lt;br/&gt;
user  10m34.304s&lt;br/&gt;
sys 1m2.660s&lt;/p&gt;</comment>
                            <comment id="13640539" author="tdunning" created="Wed, 24 Apr 2013 16:33:04 +0100"  >&lt;p&gt;That is a big improvement.&lt;/p&gt;</comment>
                            <comment id="13640575" author="tdunning" created="Wed, 24 Apr 2013 17:02:55 +0100"  >&lt;p&gt;Or not.&lt;/p&gt;

&lt;p&gt;I am running on a 16 core machine and 1.5C parallelism causes 10% of tests to fail.&lt;/p&gt;

&lt;p&gt;Even 4 way parallelism causes errors like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Running org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest
Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 3.806 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
testCreateNamed(org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest)  Time elapsed: 0.265 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
java.lang.RuntimeException: org.xml.sax.SAXParseException; lineNumber: 34; columnNumber: 105; XML document structures must start and end within the same entity.
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:253)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:288)
	at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:121)
	at org.apache.hadoop.conf.Configuration.loadResource(Configuration.java:1161)
	at org.apache.hadoop.conf.Configuration.loadResources(Configuration.java:1109)
	at org.apache.hadoop.conf.Configuration.getProps(Configuration.java:1045)
	at org.apache.hadoop.conf.Configuration.get(Configuration.java:397)
	at org.apache.hadoop.mapred.JobConf.checkAndWarnDeprecation(JobConf.java:1910)
	at org.apache.hadoop.mapred.JobConf.&amp;lt;init&amp;gt;(JobConf.java:378)
	at org.apache.hadoop.mapred.LocalJobRunner$Job.&amp;lt;init&amp;gt;(LocalJobRunner.java:150)
	at org.apache.hadoop.mapred.LocalJobRunner.submitJob(LocalJobRunner.java:437)
	at org.apache.hadoop.mapred.JobClient$2.run(JobClient.java:983)
	at org.apache.hadoop.mapred.JobClient$2.run(JobClient.java:912)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:416)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1149)
	at org.apache.hadoop.mapred.JobClient.submitJobInternal(JobClient.java:912)
	at org.apache.hadoop.mapreduce.Job.submit(Job.java:500)
	at org.apache.hadoop.mapreduce.Job.waitForCompletion(Job.java:530)
	at org.apache.mahout.vectorizer.SimpleTextEncodingVectorizer.createVectors(SimpleTextEncodingVectorizer.java:63)
	at org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFiles.run(EncodedVectorsFromSequenceFiles.java:99)
	at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:65)
	at org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFiles.main(EncodedVectorsFromSequenceFiles.java:37)
	at org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest.runTest(EncodedVectorsFromSequenceFilesTest.java:110)
	at org.apache.mahout.vectorizer.EncodedVectorsFromSequenceFilesTest.testCreateNamed(EncodedVectorsFromSequenceFilesTest.java:77)

Running org.apache.mahout.vectorizer.collocations.llr.GramKeyPartitionerTest
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13640675" author="isabel" created="Wed, 24 Apr 2013 18:25:05 +0100"  >&lt;p&gt;Seeing that as well now - not sure why I didn&apos;t run into the issues when doing the original timing. Looks like some tests are trying to modify the same test data on disk in multiple test cases. Looking closer into the failing tests now.&lt;/p&gt;</comment>
                            <comment id="13641639" author="dweiss" created="Thu, 25 Apr 2013 11:36:04 +0100"  >&lt;p&gt;I&apos;m not advocating for making the build any more complex but the runner from randomizedtesting (used in Lucene) separates the current working directory for every forked JVM so that their data don&apos;t clash with each other. Uwe also came up with a nice idea of placing a security manager on top and restricting that any writes can &lt;b&gt;only&lt;/b&gt; happen under that forked directory, not anywhere else.&lt;/p&gt;

&lt;p&gt;The upside of this is that you immediately know if something attempts to write where it&apos;s not supposed to. The downside is that the build gets a bit more complex (it&apos;s not surefire, it&apos;s a different runner). Surefire folks are pretty open to ideas though &amp;#8211; perhaps they could add an isolation like that to Surefire.&lt;/p&gt;</comment>
                            <comment id="13641790" author="isabel" created="Thu, 25 Apr 2013 14:37:36 +0100"  >&lt;p&gt;Some status in between: Setting &quot;parallel&quot; to class-level only seems to help a bit. What is causing most of the trouble are the tests for Hadoop jobs. They are supposed to write only in a separate temp directory, but at least configuration (de-)serialisation seems to cause issues (currently waiting for the hadoop source to arrive - the conference WiFi isn&apos;t quite as good as it was yesterday).&lt;/p&gt;

&lt;p&gt;@Dawid - thanks for the proposal. I&apos;ll definitely look into that - at least to figure out where exactly stuff is going wrong.&lt;/p&gt;</comment>
                            <comment id="13642654" author="isabel" created="Fri, 26 Apr 2013 08:54:52 +0100"  >&lt;p&gt;The problem is that some of our tests run in a local Hadoop cluster. Starting such a cluster automatically creates a directory /tmp/hadoop-$USER and stores the job configuration there. In multi threaded test execution this can lead to race conditions of tests trying to write to the same file at the same time.&lt;/p&gt;

&lt;p&gt;To reproduce in a single threaded setting just create /tmp/hadoop-$USER on your machine, issue a &quot;chmod 000 /tmp/hadoop-$USER&quot; and try to re-run the test suite.&lt;/p&gt;

&lt;p&gt;Setting the option &quot;mapred.local.dir&quot; to point to a test specific location avoids part of the issue. In many of our tests this can easily be added to the configuration object we hand over to the job anyway (see updated patch for an idea of what the changes for core might look like).&lt;/p&gt;

&lt;p&gt;There are issues left with some tests executing jobs via the command line interface and some data still being stored in the &quot;/tmp/hadoop-$USER&quot; directory. Will look into that later this week.&lt;/p&gt;</comment>
                            <comment id="13642686" author="dweiss" created="Fri, 26 Apr 2013 09:42:39 +0100"  >&lt;p&gt;You&apos;d have to check but I bet /tmp is based off a system property java.io.tmpdir. For Lucene this is solved by setting:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            &amp;lt;sysproperty key=&lt;span class=&quot;code-quote&quot;&gt;&quot;java.io.tmpdir&quot;&lt;/span&gt; value=&lt;span class=&quot;code-quote&quot;&gt;&quot;.&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;again - this works because randomized testing splits the cwd for each forked JVM, but perhaps you could set up a class rule on hadoop tests that would &quot;temporarily&quot;? set up a sub-tmp folder and override this property. Might work.&lt;/p&gt;
</comment>
                            <comment id="13645369" author="isabel" created="Tue, 30 Apr 2013 08:56:26 +0100"  >&lt;p&gt;Unfortunately it isn&apos;t quite as easy - Hadoop sets that system property to pass configured temporary directories to a job. The variable to set is hadoop.tmp.dir. Currently adjusting our unit tests to pass a configuration down to Hadoop jobs that includes this setting.&lt;/p&gt;

&lt;p&gt;In that process I came across a few drivers that do not pass a configuration object down to sub-jobs spawned (which means that user supplied options will not be taken into account for these sub jobs) - will open a separate issue for these.&lt;/p&gt;</comment>
                            <comment id="13645917" author="isabel" created="Tue, 30 Apr 2013 21:10:06 +0100"  >&lt;p&gt;In order to be able to run tests in parallel we need to become independent of any test global temp directories.&lt;/p&gt;</comment>
                            <comment id="13645960" author="isabel" created="Tue, 30 Apr 2013 21:49:06 +0100"  >&lt;p&gt;Updated version, note that you will also need &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1200&quot; title=&quot;Mahout tests depend on writing to /tmp/hadoop-$user&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1200&quot;&gt;&lt;del&gt;MAHOUT-1200&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1201&quot; title=&quot;Some Mahout jobs do not pass user supplied Configuration object to sub jobs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1201&quot;&gt;&lt;del&gt;MAHOUT-1201&lt;/del&gt;&lt;/a&gt; in order to make these changes work without concurrency issues.&lt;/p&gt;</comment>
                            <comment id="13645974" author="isabel" created="Tue, 30 Apr 2013 21:58:59 +0100"  >&lt;p&gt;As for runtime: At least on my machine (4 cores, ssd) the changes more than half the time needed to run a full build including tests (excluding dependency download of course).&lt;/p&gt;</comment>
                            <comment id="13672293" author="isabel" created="Sun, 2 Jun 2013 00:41:42 +0100"  >&lt;p&gt;Final comment on that one: Current number of parallel threads is set to 1.5 number of CPUs reported by your machine.&lt;/p&gt;

&lt;p&gt;That means in order to avoid swapping (that is in order to avoid having your tests run slower than when executed sequentially) the max amount of memory for each thread should be configured to be mem of your machine / (1.5 * number of cores) - this can be done in the maven surefire plugin itself. Currently each thread is configured to use 1.8 gigs if I see that correctly. Reduce if you think this is too much for your average developer&apos;s machine.&lt;/p&gt;</comment>
                            <comment id="13672305" author="hudson" created="Sun, 2 Jun 2013 03:32:01 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #2027 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2027/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2027/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-916&quot; title=&quot;Make Mahout&amp;#39;s tests run in parallel&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-916&quot;&gt;&lt;del&gt;MAHOUT-916&lt;/del&gt;&lt;/a&gt; - make mahout tests run in parallel&lt;/p&gt;

&lt;p&gt;Currently set to class parallel (method parallel fails with our tests at the&lt;br/&gt;
moment), set to run 1.5 as many test thread as the machine running them as CPUs. (Revision 1488632)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
isabel : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/pom.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13675615" author="srowen" created="Wed, 5 Jun 2013 06:09:55 +0100"  >&lt;p&gt;This makes the tests much slower for me, since on my laptop the several threads&apos; I/O is just contending for the disk head and at 20% CPU only. It also makes my laptop unusable. I&apos;d suggest 1 thread per core at most &amp;#8211; or maybe cap at 2-3 threads. &lt;/p&gt;</comment>
                            <comment id="13675616" author="smarthi" created="Wed, 5 Jun 2013 06:14:53 +0100"  >&lt;p&gt;Agree with Sean, that&apos;s been my experience too.&lt;/p&gt;</comment>
                            <comment id="13675640" author="gsingers" created="Wed, 5 Jun 2013 07:49:36 +0100"  >&lt;p&gt;Can we parameterize it?&lt;/p&gt;</comment>
                            <comment id="13675649" author="srowen" created="Wed, 5 Jun 2013 08:09:56 +0100"  >&lt;p&gt;I think the full and intended config here is:&lt;/p&gt;

&lt;p&gt;          &amp;lt;forkCount&amp;gt;X&amp;lt;/forkCount&amp;gt;&lt;br/&gt;
          &amp;lt;threadCount&amp;gt;1&amp;lt;/threadCount&amp;gt;&lt;br/&gt;
          &amp;lt;perCoreThreadCount&amp;gt;false&amp;lt;/perCoreThreadCount&amp;gt;&lt;br/&gt;
          &amp;lt;reuseForks&amp;gt;false&amp;lt;/reuseForks&amp;gt;&lt;br/&gt;
          &amp;lt;parallel&amp;gt;classes&amp;lt;/parallel&amp;gt;&lt;/p&gt;

&lt;p&gt;.. and the question is just what X is. This makes sure that a fresh JVM is used for each test class, which is necessary to fully isolate RNGs I believe.&lt;/p&gt;

&lt;p&gt;But even at X=2 I still get a system that is completely pegged on I/O once the Hadoop-related jobs start. I am not sure even the minimal parallelism is usable.&lt;br/&gt;
(I have a 2-core Intel i7 2.66GHz Macbook with 8GB RAM and a 5400rpm drive. It&apos;s not a memory issue and it&apos;s not a weak machine)&lt;/p&gt;

&lt;p&gt;Does this mirror anyone else experience?&lt;/p&gt;</comment>
                            <comment id="13675657" author="dweiss" created="Wed, 5 Jun 2013 08:16:39 +0100"  >&lt;p&gt;&amp;gt; 5400rpm drive.&lt;/p&gt;

&lt;p&gt;This is probably the performance killer. If somebody has a (decent) SSD they won&apos;t feel it.&lt;/p&gt;

&lt;p&gt;In Lucene there is a concept of &quot;user config&quot; properties where one can override the defaults and adjust them for a particular hardware (lower concurrency of tests, for example). Perhaps something like this would be applicable here &amp;#8211; don&apos;t know how to implement it in Maven though.&lt;/p&gt;</comment>
                            <comment id="13675658" author="gsingers" created="Wed, 5 Jun 2013 08:18:56 +0100"  >&lt;p&gt;They are a lot faster for me and my computer is still usable. I&apos;m on: MBP, 2.2, i7 w/ 16 GB of RAM.  So, slower machine, more memory, relatively speaking.&lt;/p&gt;</comment>
                            <comment id="13675662" author="srowen" created="Wed, 5 Jun 2013 08:26:00 +0100"  >&lt;p&gt;Then, question: is the difference between Suneel and I vs Grant and Isabel an SSD drive? I don&apos;t have one. That would certainly explain the difference I think. &lt;/p&gt;</comment>
                            <comment id="13675671" author="srowen" created="Wed, 5 Jun 2013 08:43:25 +0100"  >&lt;p&gt;After looking at this again I am pretty certain the ultimate cause is memory. There is a load of swapping going on for me, and while the jobs are generating a lot of I/O, it&apos;s swapping that is probably overwhelming the disk. An SSD would certainly do better but it isn&apos;t the issue. &lt;/p&gt;

&lt;p&gt;On a 4-core machine this is going to try to run 6 additional JVMs with max heap size of 1.8GB. Figuring 25% Java overhead an leaving a GB for everything else on the system, this needs 14.5GB to run comfortably. That seems pretty high as a default requirement.&lt;/p&gt;

&lt;p&gt;But I appear to be running all these successfully with a max heap size of 768M. That works comfortably with 8GB RAM, no meaningful swapping. How about making that revision to bring the default requirement down?&lt;/p&gt;

&lt;p&gt;In fact, if you change this to use 1 JVM per core (vs 1.5) it would also squeeze onto a 4GB / 4-core machine.&lt;/p&gt;</comment>
                            <comment id="13675672" author="gsingers" created="Wed, 5 Jun 2013 08:44:24 +0100"  >&lt;p&gt;I don&apos;t have an SSD.  Let me re-run things and see how it goes.  Maybe I&apos;m just used to Lucene&apos;s tests, which usually do peg my CPU (thanks, Dawid, for the insight on tuning them!)&lt;/p&gt;</comment>
                            <comment id="13675691" author="srowen" created="Wed, 5 Jun 2013 09:09:30 +0100"  >&lt;p&gt;Better still, it works in 512MB heap per JVM for me. Final proposed config is this:&lt;/p&gt;

&lt;p&gt;          &amp;lt;threadCount&amp;gt;1&amp;lt;/threadCount&amp;gt;&lt;br/&gt;
          &amp;lt;perCoreThreadCount&amp;gt;false&amp;lt;/perCoreThreadCount&amp;gt;&lt;br/&gt;
          &amp;lt;parallel&amp;gt;classes&amp;lt;/parallel&amp;gt;&lt;br/&gt;
          &amp;lt;argLine&amp;gt;-Xmx512m&amp;lt;/argLine&amp;gt;&lt;/p&gt;</comment>
                            <comment id="13675746" author="gsingers" created="Wed, 5 Jun 2013 10:38:11 +0100"  >&lt;p&gt;Sounds right to me.&lt;/p&gt;</comment>
                            <comment id="13675946" author="hudson" created="Wed, 5 Jun 2013 15:07:44 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #2040 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2040/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2040/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-916&quot; title=&quot;Make Mahout&amp;#39;s tests run in parallel&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-916&quot;&gt;&lt;del&gt;MAHOUT-916&lt;/del&gt;&lt;/a&gt; reduce max JVM heap during parallel tests to avoid thrashing from over-committed memory (Revision 1489827)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
srowen : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/pom.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12534049">MAHOUT-917</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12645510">MAHOUT-1200</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12581225" name="MAHOUT-916.patch" size="644" author="isabel" created="Tue, 30 Apr 2013 21:49:06 +0100"/>
                            <attachment id="12580674" name="MAHOUT-916.patch" size="47658" author="isabel" created="Fri, 26 Apr 2013 08:55:30 +0100"/>
                            <attachment id="12580283" name="MAHOUT-916.patch" size="561" author="isabel" created="Wed, 24 Apr 2013 14:22:34 +0100"/>
                            <attachment id="12506654" name="MAHOUT-916.patch" size="920" author="gsingers" created="Thu, 8 Dec 2011 20:46:35 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 9 Dec 2011 10:30:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>219767</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy26n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22505</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>