<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:21:21 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-687/MAHOUT-687.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-687] Random generator objects- slight refactor</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-687</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Problems:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The uncommons RepeatableRNG classes are the basis of RandomUtils.
	&lt;ul&gt;
		&lt;li&gt;These classes cheerfully ignore setSeed.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Some people in the project want to move off Uncommons anyway.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This patch uses the org.apache.commons.math.random.RandomGenerator classes instead of org.apache.uncommons.maths.RepeatableRNG classes.&lt;br/&gt;
.&lt;/p&gt;


</description>
                <environment></environment>
        <key id="12506247">MAHOUT-687</key>
            <summary>Random generator objects- slight refactor</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="lancenorskog">Lance Norskog</reporter>
                        <labels>
                            <label>random</label>
                            <label>rng</label>
                            <label>seed</label>
                    </labels>
                <created>Thu, 5 May 2011 06:38:44 +0100</created>
                <updated>Thu, 9 Feb 2012 14:00:52 +0000</updated>
                            <resolved>Thu, 2 Jun 2011 14:13:37 +0100</resolved>
                                    <version>0.5</version>
                                    <fixVersion>0.6</fixVersion>
                                        <due>Fri, 10 Jun 2011 00:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13029162" author="srowen" created="Thu, 5 May 2011 07:23:32 +0100"  >&lt;p&gt;Let&apos;s tease apart several things going on here.&lt;/p&gt;

&lt;p&gt;If you want setSeed() to work on MersenneTwisterRNG, that&apos;s easy with a different one-line change that makes a new generator. It&apos;s not necessarily necessary to remove the implementation.&lt;/p&gt;

&lt;p&gt;Removing Uncommons Maths is not necessarily a goal, but I&apos;d support it. But more than just MersenneTwisterRNG is used in the project, so removing it won&apos;t let you remove Uncommons Math. So this patch fails to compile. (Side note, I would only post a patch if it still makes the project compile and pass tests.)&lt;/p&gt;

&lt;p&gt;But then this patch does a bit more. It&apos;s replacing seeding based on /dev/urandom or SecureRandom with a simple increasing counter. What is the reasoning behind that?&lt;/p&gt;</comment>
                            <comment id="13029815" author="lancenorskog" created="Fri, 6 May 2011 08:57:40 +0100"  >&lt;blockquote&gt;&lt;p&gt;If you want setSeed() to work on MersenneTwisterRNG, that&apos;s easy with a different one-line change that makes a new generator.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;A deterministic random matrix or vector needs to set the seed for each multiply. This fix would create too much garbage. (Each MersenneTwister has 2500 bytes!) Once you say you need Commons MersenneTwister instead, because it has a setSeed(long), the rest of the patch ticks over.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Removing Uncommons Maths is not necessarily a goal, but I&apos;d support it. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Other chatter on the list talked about pushing uncommons out completely. One step at a time.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;It&apos;s replacing seeding based on /dev/urandom or SecureRandom with a simple increasing counter. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Oops- thought I changed that back. &lt;br/&gt;
.&lt;br/&gt;
The patch is clearly not finished. If a test fails because it relies on a deterministic result, that&apos;s easy to fix. If a test fails otherwise, probably the test does not supply enough data points for the algorithm to function. From a quick look, LogLikelihoodTest may have this problem.&lt;/p&gt;
</comment>
                            <comment id="13029989" author="tdunning" created="Fri, 6 May 2011 17:04:43 +0100"  >&lt;blockquote&gt;
&lt;p&gt;A deterministic random matrix or vector needs to set the seed for each multiply. This fix would create too much garbage. (Each MersenneTwister has 2500 bytes!) Once you say you need Commons MersenneTwister instead, because it has a setSeed(long), the rest of the patch ticks over.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;MersenneTwister is unacceptable for this usage anyway.  It takes far too much startup time.  The commons implementation just uses the long with a weak generator to build the long seed so there isn&apos;t a difference in garbage created.  Besides, this is totally ephemeral garbage that won&apos;t even survive out of newspace.&lt;/p&gt;

&lt;p&gt;A good implementation option is Murmurhash applied to row and column and salt.&lt;/p&gt;</comment>
                            <comment id="13030270" author="lancenorskog" created="Sat, 7 May 2011 05:01:59 +0100"  >&lt;p&gt;Now we&apos;re getting somewhere! &lt;/p&gt;

&lt;p&gt;Why should the default creator of a random number generator include a system call to the random seed operating system device driver?&lt;/p&gt;</comment>
                            <comment id="13030289" author="tdunning" created="Sat, 7 May 2011 08:23:22 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Why should the default creator of a random number generator include a system call to the random seed operating system device driver?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Because it provides good seeds from real physical processes?&lt;/p&gt;</comment>
                            <comment id="13030595" author="lancenorskog" created="Mon, 9 May 2011 04:53:39 +0100"  >&lt;p&gt;By popular demand, a less ambitious version. Four topics:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;SamplingLongPrimitiveIterator used one common Random which cause the unit test &quot;deterministic seed&quot; trick fail for some unknown reason. Changed class to use one Random per instance.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;RandomUtils had a private WeakHashMap out of different RandomWrappers that it built. It never used the map.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;RandomWrapper does exactly what it used to do, with one change and one addition:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;setSeed(long x) now throws UnsupportedOperationException, because all of the&lt;br/&gt;
 Uncommons RNG classes ignore setSeed(long x). Yes. All of them.&lt;/li&gt;
	&lt;li&gt;You can now pull the seed that RandomWrapper makes so that you can make another Uncommons RNG object, or use it for any purpose.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13030596" author="lancenorskog" created="Mon, 9 May 2011 04:56:06 +0100"  >&lt;p&gt;Why throw an exception instead of helping the user by making the problem go away? Because code should not &quot;help&quot;. If there&apos;s a problem, just tell me. Only I know how I want to handle the error. Don&apos;t &quot;help&quot; me- it just wastes my time.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Fail Loud&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Fail Early&lt;/b&gt;&lt;/p&gt;</comment>
                            <comment id="13030599" author="tdunning" created="Mon, 9 May 2011 05:14:50 +0100"  >&lt;blockquote&gt;
&lt;p&gt;SamplingLongPrimitiveIterator used one common Random which cause the unit test &quot;deterministic seed&quot; trick fail for some unknown reason. Changed class to use one Random per instance.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Random number generators should almost never be shared between objects for many reasons.  The two I think are most important that it makes the objects inherently thread unsafe and it makes the threads sharing the RNG&apos;s very slow due to memory synchronization.  Some RNG&apos;s aren&apos;t even thread safe themselves so sharing is a complete disaster as opposed to just bad.&lt;/p&gt;</comment>
                            <comment id="13030663" author="srowen" created="Mon, 9 May 2011 10:27:59 +0100"  >&lt;p&gt;RandomWrapper most certainly does use the map. Look at the use of INSTANCES just below it in useTestSeed() which shows its purpose. It needs to reset all of the wrappers that have been made. setSeed() may be ignored, and like I&apos;ve said there&apos;s an easy fix to that &amp;#8211; new RNG object. I don&apos;t see a need to make the setSeed() method fail.&lt;/p&gt;

&lt;p&gt;I don&apos;t have a strong opinion about sharing RNGs per se &amp;#8211; obviously correctness is vital, followed by performance, as concerns. So for example I think it&apos;s reasonable to use an RNG per iterator, yes.&lt;/p&gt;

&lt;p&gt;But at the moment I don&apos;t know that we have a determinism problem as a result of this?&lt;/p&gt;


&lt;p&gt;This patch does something different than the first patch, so I think I&apos;m losing the plot about what this is out to accomplish?&lt;/p&gt;</comment>
                            <comment id="13037126" author="tdunning" created="Fri, 20 May 2011 23:24:45 +0100"  >&lt;p&gt;Is this still useful?  I am like Sean and have lost the thrust of the patch.&lt;/p&gt;</comment>
                            <comment id="13037229" author="srowen" created="Sat, 21 May 2011 03:23:19 +0100"  >&lt;p&gt;OK, that is still not what the patch does though.&lt;br/&gt;
I think there are two good ideas in the mix here that can be committed without controversy. First, work around setSeed() behavior by instantiating a new RNG when called. Second, don&apos;t use a shared RNG in the sampling Iterator. I suggest this is the substance of what to commit in this thread.&lt;/p&gt;</comment>
                            <comment id="13037230" author="lancenorskog" created="Sat, 21 May 2011 03:23:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;Is this still useful? I am like Sean and have lost the thrust of the patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m still working on it.&lt;/p&gt;

&lt;p&gt;Ted, you mentioned wanting a MurmurHash Random class. Is this what you envisioned? (It is not finished code; see below).&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class MurmurHashRandom &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Random {
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; murmurSeed;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ByteBuffer buf;
  
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; MurmurHashRandom() {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;(0);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; MurmurHashRandom(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; seed) {
    SeedGenerator gen = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FastRandomSeedGenerator();
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bits = RandomUtils.longSeedtoBytes(gen.generateSeed());
    buf = ByteBuffer.wrap(bits);
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.murmurSeed = MurmurHash.hash64A(bits, seed);
  }
  
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; nextLong() {
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; oldSeed = murmurSeed;
    murmurSeed = MurmurHash.hash64A(buf, (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) murmurSeed);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; oldSeed;
  }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is coded against my patch, so is only here for study purposes.It&apos;s coded against the MurmurHash class in encoders.encoders.MurmurHash works in ints, not longs, so types are a bit confused in this demo code.&lt;/p&gt;</comment>
                            <comment id="13037464" author="lancenorskog" created="Sat, 21 May 2011 22:52:49 +0100"  >&lt;p&gt;The Sampling iterator never drops the first sample. &lt;br/&gt;
A minor nit: Iterator.hasNext() is not supposed to change anything, but this makes it hard to &quot;keep or drop&quot; the final sample.&lt;/p&gt;

&lt;p&gt;So, if you want to have a per-object random, that&apos;s great. It would be good to fix that everywhere as a sweep, but sweeps kill patches. Oh well.&lt;/p&gt;</comment>
                            <comment id="13037469" author="srowen" created="Sat, 21 May 2011 23:05:46 +0100"  >&lt;p&gt;I don&apos;t know what you mean &amp;#8211; it most definitely can drop the first element.&lt;br/&gt;
What hasNext() method are you referring to?&lt;br/&gt;
Yes, it&apos;s easy to make a similar change elsewhere to remove static Random instances.&lt;/p&gt;</comment>
                            <comment id="13037649" author="srowen" created="Sun, 22 May 2011 20:22:44 +0100"  >&lt;p&gt;I&apos;m assigning to me to commit, after 0.5, changes for two aspects of this discussion:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;RandomWrapper.setSeed() will now work, by instantiating a new RNG&lt;/li&gt;
	&lt;li&gt;static Random variables will be made into instance variables where possible&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13042690" author="hudson" created="Thu, 2 Jun 2011 11:34:41 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #848 (See &lt;a href=&quot;https://builds.apache.org/hudson/job/Mahout-Quality/848/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/Mahout-Quality/848/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="13042766" author="srowen" created="Thu, 2 Jun 2011 14:13:37 +0100"  >&lt;p&gt;Committed the part I referred to in comments&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12478567" name="MAHOUT-687.patch" size="5954" author="lancenorskog" created="Mon, 9 May 2011 04:47:42 +0100"/>
                            <attachment id="12478248" name="MAHOUT-687.patch" size="11510" author="lancenorskog" created="Thu, 5 May 2011 06:40:07 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 May 2011 06:23:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9375</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy3lj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22734</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>