<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:26:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1419/MAHOUT-1419.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1419] Random decision forest is excessively slow on numeric features</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1419</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Follow-up to &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1417&quot; title=&quot;Random decision forest implementation fails in Hadoop 2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1417&quot;&gt;&lt;del&gt;MAHOUT-1417&lt;/del&gt;&lt;/a&gt;. There&apos;s a customer running this and observing it take an unreasonably long time on about 2GB of data &amp;#8211; like, &amp;gt;24 hours when other RDF M/R implementations take 9 minutes. The difference is big enough to probably be considered a defect. &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1417&quot; title=&quot;Random decision forest implementation fails in Hadoop 2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1417&quot;&gt;&lt;del&gt;MAHOUT-1417&lt;/del&gt;&lt;/a&gt; got that down to about 5 hours. I am trying to further improve it.&lt;/p&gt;

&lt;p&gt;One key issue seems to be how splits are evaluated over numeric features. A split is tried for every distinct numeric value of the feature in the whole data set. Since these are floating point values, they could (and in the customer&apos;s case are) all distinct. 200K rows means 200K splits to evaluate every time a node is built on the feature.&lt;/p&gt;

&lt;p&gt;A better approach is to sample percentiles out of the feature and evaluate only those as splits. Really doing that efficiently would require a lot of rewrite. However, there are some modest changes possible which get some of the benefit, and appear to make it run about 3x faster. That is --on a data set that exhibits this problem &amp;#8211; meaning one using numeric features which are generally distinct. Which is not exotic.&lt;/p&gt;

&lt;p&gt;There are comparable but different problems with handling of categorical features, but that&apos;s for a different patch.&lt;/p&gt;

&lt;p&gt;I have a patch, but it changes behavior to some extent since it is evaluating only a sample of splits instead of every single possible one. In particular it makes the output of &quot;OptIgSplit&quot; no longer match the &quot;DefaultIgSplit&quot;. Although I think the point is that &quot;optimized&quot; may mean giving different choices of split here, which could yield differing trees. So that test probably has to go.&lt;/p&gt;

&lt;p&gt;(Along the way I found a number of micro-optimizations in this part of the code that added up to maybe a 3% speedup. And fixed an NPE too.)&lt;/p&gt;

&lt;p&gt;I will propose a patch shortly with all of this for thoughts.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12695761">MAHOUT-1419</key>
            <summary>Random decision forest is excessively slow on numeric features</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="srowen">Sean Owen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Feb 2014 19:42:24 +0000</created>
                <updated>Mon, 13 Apr 2015 11:21:31 +0100</updated>
                            <resolved>Tue, 25 Feb 2014 14:15:33 +0000</resolved>
                                    <version>0.7</version>
                    <version>0.8</version>
                    <version>0.9</version>
                                    <fixVersion>0.10.0</fixVersion>
                                    <component>Classification</component>
                        <due>Fri, 28 Feb 2014 00:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13905056" author="tdunning" created="Wed, 19 Feb 2014 02:44:46 +0000"  >&lt;p&gt;With t-digest in the OnlineSummarizer now, it is quite possible to have very accurate and quick quantile estimates.  That should allow very quick picking of splits as well.&lt;/p&gt;

&lt;p&gt;The basic idea would be to keep an OnlineSummarizer for each numerical variable.  When a split is needed, pick a random number in [0,1) and then the split point is that quantile.  If you want 10 random splits, do this 10 times.  If you want structured points like every percentile from 20 to 80 %, that is just as simple.&lt;/p&gt;

&lt;p&gt;It seems like this would be as simple as changing a loop from looping over distinct values to looping over quantile values.&lt;/p&gt;</comment>
                            <comment id="13905075" author="srowen" created="Wed, 19 Feb 2014 08:54:48 +0000"  >&lt;p&gt;The significant change is computing &apos;split points&apos; rather than considering all values as split points.&lt;/p&gt;

&lt;p&gt;For numeric features, this means taking percentiles, rather than every distinct value, which was incredibly slow for any data set with a numeric feature.&lt;/p&gt;

&lt;p&gt;Categorical split points were optimized &amp;#8211; was pointlessly allocating a count array for every datum, not every distinct category value.&lt;/p&gt;

&lt;p&gt;Handling of the count arrays and counting occurrences was unified, and simplified; there was no point in making them members as they were not reused.&lt;/p&gt;

&lt;p&gt;(There are a few micro-optimizations, such as to the entropy method.)&lt;br/&gt;
(Also fixed an NPE in BuildForest.)&lt;/p&gt;

&lt;p&gt;The tests had to change as a result. The test for equivalence between OptIgSplit and DefaultIgSplit is no longer valid, as they intentionally do not necessarily behave the same way now. The VisualizerTest now results in different values, but I verified that it&apos;s a superficial difference. The trees chosen before and after are equivalent since the decision thresholds, while different, chop up the data identically on the tiny test data sets.&lt;/p&gt;

&lt;p&gt;I end up observing a &lt;b&gt;50x&lt;/b&gt; speedup with this change. Although this is in a test that exercises only building, and on a data set that would be maximally affected by this bottleneck. &lt;/p&gt;</comment>
                            <comment id="13905395" author="srowen" created="Wed, 19 Feb 2014 13:13:08 +0000"  >&lt;p&gt;Yes you could compute summary statistics once and for all for each feature across the whole data set. That&apos;s efficient. &lt;/p&gt;

&lt;p&gt;The wrinkle is that, as you go down the tree, you&apos;re looking at a smaller subset of the data, whose percentiles for that feature may be very different from the global ones. This patch does the simplest thing, which is to recompute percentiles every time. That adapts to the data, but is more work. But hey it&apos;s already a big win and a simple change.&lt;/p&gt;

&lt;p&gt;Agree, the core change here is fairly simple &amp;#8211; just compute the split points intelligently, and then count stuff by split, then iterate over splits.&lt;/p&gt;

&lt;p&gt;Here it&apos;s not picking random percentiles but trying x different evenly spaced percentiles in order. Pretty reasonable.&lt;/p&gt;</comment>
                            <comment id="13909391" author="srowen" created="Sat, 22 Feb 2014 14:20:18 +0000"  >&lt;p&gt;I&apos;m wondering if anyone has comments on this? I can commit, but don&apos;t want to jump the gun.&lt;/p&gt;

&lt;p&gt;Obviously there&apos;s a big win available here which makes it usable for some realistic use cases. Behavior does change. There is an outside probability this introduces a new bug, although unit tests pass and the ones that changed, I verified the new behavior is correct by hand.&lt;/p&gt;</comment>
                            <comment id="13909442" author="andrew.musselman" created="Sat, 22 Feb 2014 17:02:52 +0000"  >&lt;p&gt;I&apos;ll take a look this weekend.&lt;/p&gt;</comment>
                            <comment id="13909512" author="tdunning" created="Sat, 22 Feb 2014 20:12:51 +0000"  >&lt;p&gt;I think it is worth committing.  THis has a major positive impact and decidedly low likely negatives.&lt;/p&gt;</comment>
                            <comment id="13909589" author="andrew.musselman" created="Sat, 22 Feb 2014 23:50:16 +0000"  >&lt;p&gt;Is the value of 16 for MAX_NUMERIC_SPLITS just a rule-of-thumb?&lt;/p&gt;

&lt;p&gt;It looks reasonable and is a good addition, removing the need to do bucketing by hand.  Sean, do you have any test data you could provide?&lt;/p&gt;</comment>
                            <comment id="13909727" author="srowen" created="Sun, 23 Feb 2014 09:38:22 +0000"  >&lt;p&gt;16 is entirely made up. Just a nice round number. &lt;br/&gt;
What kind of test data are you looking for, like more unit tests or an example that exercises the performance issue?&lt;/p&gt;</comment>
                            <comment id="13909803" author="andrew.musselman" created="Sun, 23 Feb 2014 16:36:04 +0000"  >&lt;p&gt;I&apos;m looking for either some example data that demonstrates the issue, or a script that generates example data.&lt;/p&gt;

&lt;p&gt;Not just for this issue, though.  I think example data or a script to generate it is as important as unit tests to try out dark corners.&lt;/p&gt;</comment>
                            <comment id="13909810" author="srowen" created="Sun, 23 Feb 2014 17:11:30 +0000"  >&lt;p&gt;The data set I have was from a customer, but, it looks like it is completely synthetically generated. It is four numeric features which look like they&apos;re random Normal(0,1) variables, and a 0/1 categorical target. For purposes of exercising the issue this is completely sufficient. I will make one and attach it here.&lt;/p&gt;</comment>
                            <comment id="13909813" author="srowen" created="Sun, 23 Feb 2014 17:34:36 +0000"  >&lt;p&gt;Hmm. The data set is about 300MB compressed, so I won&apos;t attach it here. I&apos;ll leave it up here for a few days:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/0B_hfrkaWlLi4VkNZd2k0WGJsLVk/edit?usp=sharing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://drive.google.com/file/d/0B_hfrkaWlLi4VkNZd2k0WGJsLVk/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that I&apos;m getting into Scala, I can tell you that this snippet will generate a suitable input file of as many lines as you like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
val r = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; scala.util.Random()
val pw = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; java.io.PrintWriter(&lt;span class=&quot;code-quote&quot;&gt;&quot;random.csv&quot;&lt;/span&gt;)
(1 to 10000000).foreach(e =&amp;gt; pw.println(r.nextDouble + &lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt; + r.nextDouble + &lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt; + r.nextDouble + &lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt; + r.nextDouble + &lt;span class=&quot;code-quote&quot;&gt;&quot;,&quot;&lt;/span&gt; + (&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (r.nextBoolean) 1 &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; 0)))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13909814" author="andrew.musselman" created="Sun, 23 Feb 2014 17:36:15 +0000"  >&lt;p&gt;Awesome, thank you.&lt;/p&gt;</comment>
                            <comment id="13909823" author="tdunning" created="Sun, 23 Feb 2014 18:06:58 +0000"  >&lt;p&gt;Of course, the Mahout math library facilitates this sort of thing as well:&lt;/p&gt;

&lt;p&gt;     Matrix m = new DenseMatrix(100000, 4).assign(Functions.random())&lt;/p&gt;</comment>
                            <comment id="13909835" author="andrew.musselman" created="Sun, 23 Feb 2014 18:36:16 +0000"  >&lt;p&gt;Would it make sense to add a directory for integration/data testing?  One-offs are fine but repeatability couldl help improve sanity in the long run.&lt;/p&gt;</comment>
                            <comment id="13909885" author="srowen" created="Sun, 23 Feb 2014 20:32:44 +0000"  >&lt;p&gt;Yeah you can make this kind of thing programmatically. CSV is just something the code in question easily consumes. Here&apos;s my test runner:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; lines = Files.readLines(
        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;code-quote&quot;&gt;&quot;/Users/srowen/Downloads/synth_data_1e+07_subset.csv&quot;&lt;/span&gt;), Charsets.UTF_8);
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] lineData = lines.toArray(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[lines.size()]);
    Dataset dataset = DataLoader.generateDataset(&lt;span class=&quot;code-quote&quot;&gt;&quot;N N N N L&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, lineData);
    Data data = DataLoader.loadData(dataset, lineData);

    DecisionTreeBuilder builder = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DecisionTreeBuilder();
    builder.setM(data.getDataset().nbAttributes() - 1);
    builder.setMinSplitNum(0);
    builder.setComplemented(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    Node node = builder.build(RandomUtils.getRandom(), data);
    TreeVisualizer.print(node, dataset, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;code-quote&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;Target&quot;&lt;/span&gt;});
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis() - start);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can upload this data, but, it&apos;s 300MB! Seems like too much to build into the project.&lt;/p&gt;</comment>
                            <comment id="13909900" author="andrew.musselman" created="Sun, 23 Feb 2014 21:11:00 +0000"  >&lt;p&gt;Right, big test sets shouldn&apos;t be under source control, but test scripts that generate data and test run time and results would be good.&lt;/p&gt;

&lt;p&gt;We use stuff in examples/ for this on a regular basis.&lt;/p&gt;</comment>
                            <comment id="13909903" author="srowen" created="Sun, 23 Feb 2014 21:14:59 +0000"  >&lt;p&gt;OK, what dir would you think is the right place? or, how about just a note in the javadoc? it&apos;s a few lines of example code and I don&apos;t even want to write it down as compilable code to be maintained, almost.&lt;/p&gt;</comment>
                            <comment id="13909909" author="andrew.musselman" created="Sun, 23 Feb 2014 21:30:44 +0000"  >&lt;p&gt;Maybe it&apos;s naturally another example for now, until there&apos;s consensus on how to do this type of integrationish testing?&lt;/p&gt;

&lt;p&gt;I&apos;m happy having it in the Javadoc for now, as long as we have a marker that this was something that was fixed, and here&apos;s how to confirm it&apos;s not regressed in the future.&lt;/p&gt;</comment>
                            <comment id="13909938" author="srowen" created="Sun, 23 Feb 2014 23:55:51 +0000"  >&lt;p&gt;Final patch attached. This adds the Scala snippet in the javadoc. It also fixes line separators in IgSplit, which unfortunately makes the diff hard to read, but the real diff has been evaluated already I think.&lt;/p&gt;</comment>
                            <comment id="13910067" author="andrew.musselman" created="Mon, 24 Feb 2014 07:13:27 +0000"  >&lt;p&gt;BuildForest runs for me in five minutes, with this command, on a 1.8-million-record training set:&lt;br/&gt;
~/hadoop-1.1.1/bin/hadoop jar $ME org.apache.mahout.classifier.df.mapreduce.BuildForest -DXmx10000m -Dmapred.max.split.size=1000000 -d train.csv -ds random-info -sl 7 -p -t 500 -o random-forest&lt;/p&gt;

&lt;p&gt;Looks like a big improvement; more than twice as fast with 500 trees over the unpatched version.  I saw about a ten-times improvement with 10,000 trees.  How&apos;d you see that 50x improvement?&lt;/p&gt;</comment>
                            <comment id="13910112" author="srowen" created="Mon, 24 Feb 2014 09:01:28 +0000"  >&lt;p&gt;Hmm. The example I was looking at only used 100 trees. On second look, I see the data set I have here may not be random, since the classifier achieves about 100% accuracy! This dramatically affects how deep the trees are, and, maybe that explains the difference. In any event I think I&apos;d say that the likely speed up is indeed far less than 50x, even if it&apos;s significant (2x+?). It&apos;s more about patching a case that becomes pathological.&lt;/p&gt;</comment>
                            <comment id="13910590" author="andrew.musselman" created="Mon, 24 Feb 2014 18:10:59 +0000"  >&lt;p&gt;I&apos;m in favor of this patch.&lt;/p&gt;</comment>
                            <comment id="13910786" author="andrew.musselman" created="Mon, 24 Feb 2014 20:43:39 +0000"  >&lt;p&gt;Attaching scripts to be put in examples/bin that exercise random forest, incorporating that generation script.&lt;/p&gt;

&lt;p&gt;Pending review could someone please add these, and make a patch?  I don&apos;t think I can make a patch for unversioned files.&lt;/p&gt;</comment>
                            <comment id="13910798" author="andrew.musselman" created="Mon, 24 Feb 2014 20:54:36 +0000"  >&lt;p&gt;Removing another temp file.&lt;/p&gt;</comment>
                            <comment id="13911220" author="andrew.musselman" created="Tue, 25 Feb 2014 04:13:11 +0000"  >&lt;p&gt;Need to add a line to the examples README also:&lt;br/&gt;
run-rf.sh &amp;#8211; Create some synthetic data, build a random forest, and test performance.&lt;/p&gt;</comment>
                            <comment id="13911602" author="srowen" created="Tue, 25 Feb 2014 14:15:33 +0000"  >&lt;p&gt;OK, the core patch is in. I think additional test scripts can be added separately as desired.&lt;/p&gt;</comment>
                            <comment id="13911662" author="hudson" created="Tue, 25 Feb 2014 15:28:15 +0000"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2492 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2492/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2492/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1419&quot; title=&quot;Random decision forest is excessively slow on numeric features&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1419&quot;&gt;&lt;del&gt;MAHOUT-1419&lt;/del&gt;&lt;/a&gt;: Random decision forest is excessively slow on numeric features (srowen: rev 1571704)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/CHANGELOG&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/split/OptIgSplitTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/tools/VisualizerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/df/mapreduce/BuildForest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13915554" author="andrew.musselman" created="Fri, 28 Feb 2014 08:16:06 +0000"  >&lt;p&gt;Putting Describe, Build/TestForest into props.&lt;/p&gt;</comment>
                            <comment id="13915558" author="andrew.musselman" created="Fri, 28 Feb 2014 08:29:28 +0000"  >&lt;p&gt;Fixing &quot;HOME&quot;&lt;/p&gt;</comment>
                            <comment id="13915559" author="andrew.musselman" created="Fri, 28 Feb 2014 08:30:57 +0000"  >&lt;p&gt;Adding the RF example to the readme&lt;/p&gt;</comment>
                            <comment id="13915599" author="hudson" created="Fri, 28 Feb 2014 09:35:28 +0000"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2496 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2496/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2496/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1419&quot; title=&quot;Random decision forest is excessively slow on numeric features&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1419&quot;&gt;&lt;del&gt;MAHOUT-1419&lt;/del&gt;&lt;/a&gt;: Add example shell scripts for testing Random Forests (smarthi: rev 1572878)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/examples/bin/README.txt&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/bin/create-rf-data.sh&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/bin/run-rf.sh&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/src/conf/driver.classes.default.props&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310051">
                    <name>Supercedes</name>
                                            <outwardlinks description="supercedes">
                                        <issuelink>
            <issuekey id="12535622">MAHOUT-932</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12537358">MAHOUT-943</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12630588" name="MAHOUT-1419.patch" size="18403" author="srowen" created="Sun, 23 Feb 2014 23:55:51 +0000"/>
                            <attachment id="12631696" name="README.txt" size="765" author="andrew.musselman" created="Fri, 28 Feb 2014 08:30:57 +0000"/>
                            <attachment id="12631692" name="create-rf-data.sh" size="1234" author="andrew.musselman" created="Fri, 28 Feb 2014 08:16:06 +0000"/>
                            <attachment id="12631694" name="driver.classes.default.props" size="7269" author="andrew.musselman" created="Fri, 28 Feb 2014 08:16:06 +0000"/>
                            <attachment id="12631695" name="run-rf.sh" size="3191" author="andrew.musselman" created="Fri, 28 Feb 2014 08:29:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 19 Feb 2014 02:44:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>374269</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzmclr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>374569</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>