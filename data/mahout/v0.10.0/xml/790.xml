<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:19:24 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-790/MAHOUT-790.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-790] Redundancy in Matrix API, view or get?</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-790</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;We have a bunch of redundant methods in our matrix interface.  These include things that return views of parts of the matrix:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  Matrix viewPart(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] size);
  Matrix viewPart(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rowOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rowsRequested, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; columnOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; columnsRequested);
  Vector viewRow(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row);
  Vector viewColumn(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; column);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and things that do the same but call refer to getting stuff&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  Vector getColumn(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; column);
  Vector getRow(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row);
  &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; getQuick(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; column);
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] getNumNondefaultElements();
  Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; getColumnLabelBindings();
  Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; getRowLabelBindings();
  &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; get(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; rowLabel, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; columnLabel);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To my mind, get implies a get-by-value whereas view implies get-by-reference.  As such, I would suggest that getColumn and getRow should disappear.  On the other hand, getQuick and get are both correctly named.  &lt;/p&gt;

&lt;p&gt;This raises the question of what getNumNondefaultElements really does.  I certainly can&apos;t tell just from the signature.  Is it too confusing to keep?&lt;/p&gt;

&lt;p&gt;Additionally, what do people think that getColumnLabelBindings and getRowLabelBindings return?  A mutable map?  Or an immutable one?&lt;/p&gt;

&lt;p&gt;Under the covers, viewRow and viewColumn (and the upcoming viewDiagonal) have default implementations that use MatrixVectorView, but AbstractMatrix doesn&apos;t have an implementation for getRow and getColumn. &lt;/p&gt;

&lt;p&gt;In sum, I suggest that:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getRow and getColumn go away&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the fancy fast implementations fo getRow and getColumn that exist be migrated to be over-rides of viewRow and viewColumn&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;there be a constructor for AbstractMatrix that sets the internal size things correctly.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;that the internal cardinality array in AbstractMatrix goes away to be replaced by two integers.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;viewDiagonal() and viewDiagonal(length) and viewDiagonal(row, column) and viewDiagonal(int row, column, length) be added.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will produce a patch shortly.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12519510">MAHOUT-790</key>
            <summary>Redundancy in Matrix API, view or get?</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tdunning">Ted Dunning</assignee>
                                    <reporter username="tdunning">Ted Dunning</reporter>
                        <labels>
                    </labels>
                <created>Sat, 20 Aug 2011 22:28:15 +0100</created>
                <updated>Thu, 2 May 2013 03:29:43 +0100</updated>
                            <resolved>Tue, 13 Sep 2011 10:12:43 +0100</resolved>
                                    <version>0.5</version>
                                    <fixVersion>0.6</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13088293" author="lancenorskog" created="Sun, 21 Aug 2011 01:59:22 +0100"  >&lt;p&gt;Cardinality array: definitely- it is mutable from outside. &lt;br/&gt;
    final int row; &lt;br/&gt;
    final int column;&lt;/p&gt;

&lt;p&gt;viewColumn v.s. getColumn: the question here is deep v.s. shallow copy?&lt;br/&gt;
I would go with&lt;br/&gt;
    getColumn(int column) and getColumn(int column, Vector v)&lt;br/&gt;
where getColumn(int column) is assumed to give a shallow copy.&lt;/p&gt;

&lt;p&gt;Diagonals: are they really needed now? Should there be triangular or symmetric? They have enough of their own behavior to be a separate subclass rather than some magic thing held by the main class. Example: DiagonalMatrix.invert() is a valid method, because it either blows up if there is a 0 value, or returns 1/values.&lt;/p&gt;

&lt;p&gt;getNumNondefault: this requires being able to produce the number, which is a &quot;design load&quot;. It is not used much in &quot;real code&quot;. I suspect most of those users could track/deduce the number in some other way, rather than expect the object to remember it.&lt;/p&gt;</comment>
                            <comment id="13088308" author="tdunning" created="Sun, 21 Aug 2011 04:53:10 +0100"  >&lt;blockquote&gt;
&lt;p&gt;viewColumn v.s. getColumn: the question here is deep v.s. shallow copy?&lt;br/&gt;
I would go with&lt;br/&gt;
getColumn(int column) and getColumn(int column, Vector v)&lt;br/&gt;
where getColumn(int column) is assumed to give a shallow copy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Neither of these produce a copy.  Both return references.  Your reaction is similar to mine that get implies a copy.  I don&apos;t plan to add code to create a copy so I plan to just reduce current function to a single entry point.&lt;/p&gt;</comment>
                            <comment id="13088310" author="tdunning" created="Sun, 21 Aug 2011 04:58:35 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Diagonals: are they really needed now? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It really helps some algorithms to be able to pull the primary diagonal of a matrix out as a vector.  So yes, that is needed.&lt;/p&gt;

&lt;p&gt;Regarding a DiagonalMatrix, I do have a need for that as well and will include that in the SSVD patch.  Since that is a pure addition, I don&apos;t think it needs the same level of discussion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Should there be triangular or symmetric? They have enough of their own behavior to be a separate subclass rather than some magic thing held by the main class. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Possibly.  So far, this isn&apos;t a big deal although I do have a triangular solver in my CholeskyDecomposition.  If we see some more uses, it might be worth pulling out as a separate class.&lt;/p&gt;

&lt;p&gt;I don&apos;t see that a SymmetricMatrix is an important thing yet.  Yes, there are important mathematical properties there, but these aren&apos;t necessarily something worth reflecting in the type structure.  Good use cases would change my mind.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example: DiagonalMatrix.invert() is a valid method, because it either blows up if there is a 0 value, or returns 1/values.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I prefer solve methods rather than invert methods.  It is already much too hard to cure people of trying to invert matrices.  Introducing an invert method anywhere would just make that harder.&lt;/p&gt;</comment>
                            <comment id="13088399" author="srowen" created="Sun, 21 Aug 2011 17:27:03 +0100"  >&lt;p&gt;I think that all sounds great!&lt;/p&gt;</comment>
                            <comment id="13088450" author="tdunning" created="Sun, 21 Aug 2011 21:47:42 +0100"  >&lt;p&gt;So the getRow/getColumn vs viewRow/viewColumn merge exercise is turning out good.  I have found a number of bugs that relate to the confusion between whether getRow returned a copy or not.&lt;/p&gt;

&lt;p&gt;But I am also finding that getRow is much more popular than viewRow.  My tendency is to still change the name to make clear that the result is a view.&lt;/p&gt;

&lt;p&gt;Any thoughts?&lt;/p&gt;</comment>
                            <comment id="13088451" author="tdunning" created="Sun, 21 Aug 2011 21:49:04 +0100"  >&lt;p&gt;I have also found a number of instances where from.addTo(to) is used instead of to.assign(from, Functions.PLUS).  I am changing these usages to the latter form and removing addTo as redundant?  &lt;/p&gt;

&lt;p&gt;Any comment on that change?&lt;/p&gt;</comment>
                            <comment id="13088453" author="tdunning" created="Sun, 21 Aug 2011 21:50:42 +0100"  >&lt;p&gt;I have also found an odd function called slice(int).  It seems to be used variously to describe a column or row view.  This non-specificity seems disastrous to me so I am deleting that function and replacing it with viewRow.&lt;/p&gt;

&lt;p&gt;Can somebody say what this is for?&lt;/p&gt;

&lt;p&gt;Jake?  Were you involved with this?  It seems to appear in the distributed row matrix stuff a fair bit.&lt;/p&gt;</comment>
                            <comment id="13088502" author="tdunning" created="Mon, 22 Aug 2011 02:28:13 +0100"  >&lt;p&gt;Here is a monster patch that cleans up the matrix classes as suggested.  The remaining nit is the iterator in SparseColumnMatrix.&lt;/p&gt;</comment>
                            <comment id="13088503" author="tdunning" created="Mon, 22 Aug 2011 02:28:44 +0100"  >&lt;p&gt;This build should fail for now.  The fix will be forth coming.&lt;/p&gt;</comment>
                            <comment id="13088506" author="lancenorskog" created="Mon, 22 Aug 2011 02:34:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;It really helps some algorithms to be able to pull the primary diagonal of a matrix out as a vector. So yes, that is needed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This sounds like a utility method? The different Matrix data structures may want to have different implementations of viewing it; I can see a disastrous clash between a &apos;sequential&apos; Matrix and pulling diagonals in one go. It may be one of those cases where each use of this is somewhat customized, and the surrounding code knows the matrix implementation. That is, an algorithm for sequential matrices is carefully coded around this fact, and so how it uses a diagonal will also have this profile.&lt;br/&gt;
So, static utility method and &quot;you know the problem space&quot; are the two uses for this?&lt;/p&gt;

&lt;p&gt;I go on about this because I tried to make a generic read-only Matrix and Vector, and then random sub-classes of those. This exercise showed the design tensions so I&apos;m now wary of adding more features which subclasses must consider.&lt;/p&gt;
</comment>
                            <comment id="13088508" author="lancenorskog" created="Mon, 22 Aug 2011 02:47:01 +0100"  >&lt;p&gt;While you&apos;ve got the scissors out, I would reconsider clone(). &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;clone() requires every subclass to implement its own version
	&lt;ul&gt;
		&lt;li&gt;The &quot;which class do I use for the clone()&quot; problem is handled better by like().&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13088509" author="lancenorskog" created="Mon, 22 Aug 2011 02:50:51 +0100"  >&lt;p&gt;addTo v.s. apply(Functions.PLUS)&lt;/p&gt;

&lt;p&gt;If performance is really a problem, the apply implementation can do instanceof, but keep the interface clean.&lt;/p&gt;
</comment>
                            <comment id="13088512" author="tdunning" created="Mon, 22 Aug 2011 03:16:24 +0100"  >&lt;p&gt;The diagonal support consists of a viewDiagonal method on Matrix on the one hand and a DiagonalMatrix implementation on the other.  As the name suggests viewDiagonal is a view method so it would be bad to make it read-only.  It does make certain operations like computing the determinant very simple:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  determinant = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CholeskyDecomposition(matrix).viewDiagonal().aggregate(Functions.TIMES)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or setting the diagonal of a matrix to all zeros:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; 
   m.viewDiagonal().assign(0)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The diagonal matrix is handy when reconstructing SVD&apos;s.  You get this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   u.times(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DiagonalMatrix(singularValues)).times(v.transpose())
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the DiagonalMatrix is marked as sparse, efficiency is good.&lt;/p&gt;</comment>
                            <comment id="13088513" author="tdunning" created="Mon, 22 Aug 2011 03:44:16 +0100"  >&lt;p&gt;yeah, I hate our use of clone as well.  But I am not going to change it on this pass.  I have already touched 80 files with &amp;gt; 200 changes.  That will be enough to commit cleanly.&lt;/p&gt;
</comment>
                            <comment id="13088634" author="srowen" created="Mon, 22 Aug 2011 13:00:49 +0100"  >&lt;p&gt;On clone() vs like(): there are two logical operations we might want to support here. There&apos;s an operation that gives a separate, identical copy with all the same values. There&apos;s also an operation that gives a separate, identical copy with no data or values.&lt;/p&gt;

&lt;p&gt;The first should certainly be called clone(), since that&apos;s what it is, in Java.&lt;/p&gt;

&lt;p&gt;Lance, is your objection that we simply should not have the first operation? or that you don&apos;t want to use clone() per se for some reason?&lt;br/&gt;
I don&apos;t see that either of these two has an easier time deciding what class to return, or that one or the other must or must not be implemented in subclasses. These are like any other OO method.&lt;/p&gt;

&lt;p&gt;I can imagine both are useful, and so would support keeping both. If someone has a good argument that one or the other really isn&apos;t used, that&apos;s good too. And certainly if we&apos;re finding they&apos;re implemented incorrectly, and I did find several instances of that in the past, we should fix it.&lt;/p&gt;</comment>
                            <comment id="13088760" author="tdunning" created="Mon, 22 Aug 2011 16:25:35 +0100"  >&lt;p&gt;Sean,&lt;/p&gt;

&lt;p&gt;We definitely need both operations.  The first can be expressed, however, as a.like().assign(a) so it isn&apos;t quite as necessary as it might seem.&lt;/p&gt;

&lt;p&gt;The problem with clone itself is that there are serious restrictions on how you have to do it based on Java requirements.  That makes it a royal pain some days of the week.  This may be easier after this JIRA gets resolved since the only information at AbstractMatrix level is the number of rows and columns and they are trivial to deal with.&lt;/p&gt;

&lt;p&gt;We definitely also have some bugs in our test suite in that it is assumed that like() has to return the same type of object.  That isn&apos;t really true.  For instance, m.viewPart(0,3,2,5).like() should return the same thing that m.like() returns.  But viewPart probably returns some kind of view object so these aren&apos;t the same.&lt;/p&gt;

&lt;p&gt;I can deal with those issues another day.  &lt;/p&gt;

&lt;p&gt;If we can get eyes on this monster patch, I would like to commit it shortly.  The only big issues I know about are:&lt;/p&gt;

&lt;p&gt;a) getRow and getColumn is a more common name than viewRow and viewColumn.  Does everybody promise not to be confused by the loss of getRow?&lt;/p&gt;

&lt;p&gt;b) what should the iterator of a matrix do?  Right now SparseColumnMatrix iterates over columns and everything else by rows.  Unless there is some very clear way to tell what the iteration is doing, I would like to go on record as grumpy about that.&lt;/p&gt;</comment>
                            <comment id="13088775" author="tdunning" created="Mon, 22 Aug 2011 16:49:36 +0100"  >&lt;p&gt;Github branch &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; available at git://github.com/tdunning/mahout.git&lt;/p&gt;

&lt;p&gt;That provides more details on successive changes.&lt;/p&gt;</comment>
                            <comment id="13088788" author="srowen" created="Mon, 22 Aug 2011 17:06:42 +0100"  >&lt;p&gt;I know the clone() contract well &amp;#8211; why wouldn&apos;t, as you say, like() + assign() satisfy the contract? That&apos;s why I questioned the objection that, well, every class has to implement it. I don&apos;t think so. If like() does the hard part of figuring out what class to return, this is a breeze. It would be nice to have clone() even if it can be accomplished with like() and assign() as a convenience method, to match developer expectations.&lt;/p&gt;

&lt;p&gt;I don&apos;t necessarily think m.like() and m.viewPart().like() return the same class. I &lt;b&gt;might&lt;/b&gt; well expect that m and m.viewPart() are of the same class! which would make this true.&lt;/p&gt;

&lt;p&gt;erm, in terms of actionable changes, I think I was arguing against more change rather than for more, so proceed and we can sort it later. Don&apos;t remove clone() unless it&apos;s really painful given the road you&apos;ve gone down with this patch.&lt;/p&gt;</comment>
                            <comment id="13088814" author="tdunning" created="Mon, 22 Aug 2011 17:56:49 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I don&apos;t necessarily think m.like() and m.viewPart().like() return the same class. I might well expect that m and m.viewPart() are of the same class! which would make this true.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You might expect that, but you would be wrong.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Seriously, I would expect that mostly like() should preserve isSparse, but not necessarily much else.  Much better is to have like() encode the judgement of the implementor and look below any facades to the truth of the matter.&lt;/p&gt;

&lt;p&gt;I am not touching clone for now.&lt;/p&gt;</comment>
                            <comment id="13088820" author="srowen" created="Mon, 22 Aug 2011 18:02:57 +0100"  >&lt;p&gt;I may misunderstand: Do you expect m and m.viewPart() to be the same class in an ideal world or not? I don&apos;t expect that, myself, and indeed that&apos;s not the case. So all the less would I expect that m.like() and m.viewPart().like() ought to be the same class. I thought you were suggesting they ought to be.&lt;/p&gt;

&lt;p&gt;I agree with your last point here so I think we must be agreeing.&lt;/p&gt;</comment>
                            <comment id="13089731" author="dlyubimov" created="Tue, 23 Aug 2011 21:32:35 +0100"  >&lt;p&gt;It might help to introduce interface maturity annotations (similar to what they do in Hadoop) to indicate our opinion of still-evolving apis to the user. &lt;/p&gt;

&lt;p&gt;I have tons of outside code locked to the Matrix api already. I probably would&apos;ve used it anyway even if it were marked as evolving. but we definitely have various levels of api maturity. So it might help to indicate it.&lt;/p&gt;</comment>
                            <comment id="13089775" author="tdunning" created="Tue, 23 Aug 2011 22:25:49 +0100"  >&lt;p&gt;Great idea.  I doubt it would have helped here since I thought this interface was pretty stable.&lt;/p&gt;

&lt;p&gt;Maybe it would focus our minds as we add the @stable annotation.&lt;/p&gt;</comment>
                            <comment id="13089777" author="tdunning" created="Tue, 23 Aug 2011 22:27:09 +0100"  >&lt;p&gt;So Dmitriy, how badly are the changes I am pushing going to hit you?&lt;/p&gt;

&lt;p&gt;I am about to add a merge of numCols and columnSize as well (same for numRows).&lt;/p&gt;</comment>
                            <comment id="13089789" author="dlyubimov" created="Tue, 23 Aug 2011 22:43:20 +0100"  >&lt;p&gt;Thanks, Ted. &lt;/p&gt;

&lt;p&gt;I am working off a frozen snapshot in production (just built my own private release of a suitable functionality snapshot i use), so it&apos;s no immediate problem. At some point we will refactor. No problem. But it might help in other places where i have less of idea how in flux the api is. &lt;/p&gt;</comment>
                            <comment id="13089790" author="dlyubimov" created="Tue, 23 Aug 2011 22:45:37 +0100"  >&lt;p&gt;the thing is, i like Mahout&apos;s DRM and Matrix apis very much and use them pervasively. I think they are cornerstone for everything else and for custom pipelining. It would be great if we could make them stable rather sooner than later &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="13089799" author="ssc" created="Tue, 23 Aug 2011 22:55:41 +0100"  >&lt;p&gt;I like this idea of annotating stuff very much. Maybe it would also make sense to apply that in a broader way to highlight which implementations are mature and production-ready (like most of our recommender code) and which are rather new and experimental (like the graph mining module).&lt;/p&gt;</comment>
                            <comment id="13089844" author="tdunning" created="Tue, 23 Aug 2011 23:57:59 +0100"  >&lt;p&gt;@Dmitriy,&lt;/p&gt;

&lt;p&gt;I completely agree.  We need to get the basic API&apos;s rock solid as soon as possible.&lt;/p&gt;</comment>
                            <comment id="13090113" author="lancenorskog" created="Wed, 24 Aug 2011 10:43:51 +0100"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t necessarily think m.like() and m.viewPart().like() return the same class. I might well expect that m and m.viewPart() are of the same class! which would make this true.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ouch- that twisted my head. But it does show that perhaps viewPart should be done outside of Matrix. You pick a viewer class and give it the delegate Matrix in the constructor. If it&apos;s not linear algebra, should it be in Matrix?&lt;/p&gt;</comment>
                            <comment id="13090377" author="tdunning" created="Wed, 24 Aug 2011 19:09:06 +0100"  >&lt;blockquote&gt;
&lt;p&gt;But it does show that perhaps viewPart should be done outside of Matrix.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think not.  Getting a view of a submatrix or row or column or diagonal is a fundamental operation in linear algebra. The method may delegate to a view class, but to the user, it should appear as a matrix operation.&lt;/p&gt;

&lt;p&gt;Besides, there are are kinds of matrices and vectors where the view &lt;b&gt;is&lt;/b&gt; the same type as the matrix.  For instance, for dense matrices this is often true because the dense matrix is a one-dimensional storage array combined with an offset plus row and column strides.  Any block-wise view of this keeps the same storage and has different offset and strides.&lt;/p&gt;

&lt;p&gt;On the other hand, sparse matrices do better with a view structure.&lt;/p&gt;

&lt;p&gt;In any caes, viewPart should be a method on the matrix.  It should return a matrix and preserve sparsity and maybe a few related properties, but not precise type.&lt;/p&gt;</comment>
                            <comment id="13095234" author="tdunning" created="Thu, 1 Sep 2011 12:30:32 +0100"  >&lt;p&gt;OK.  Just committed this.&lt;/p&gt;

&lt;p&gt;When you update, make sure to do &lt;span class=&quot;error&quot;&gt;&amp;#91;mvn install&amp;#93;&lt;/span&gt; in the math module to make sure that you get the update for the rest of Mahout (that threw me for a loop for a while).&lt;/p&gt;
</comment>
                            <comment id="13095236" author="tdunning" created="Thu, 1 Sep 2011 12:32:22 +0100"  >&lt;p&gt;Checked in.  We will want to make sure that Jenkins concurs that it works.&lt;/p&gt;</comment>
                            <comment id="13095252" author="hudson" created="Thu, 1 Sep 2011 13:09:07 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #1012 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1012/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1012/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - kill the cardinality array and size() for matrices.  Use rowSize() and columnSize() instead.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-792&quot; title=&quot;Add new stochastic decomposition code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-792&quot;&gt;&lt;del&gt;MAHOUT-792&lt;/del&gt;&lt;/a&gt; - Fix RTM to avoid size() and cardinality array.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - More get/view changes&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - collapse get&lt;/p&gt;
{Row,Column} to view{Row,Column}
&lt;p&gt;, kill addTo&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - Fixed copyright and license on QRDecomposition and SVDDecomposition&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - Copyright format cleanup&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - Matrix cleanups.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - Add some vector and matrix types to simplify certain manipulations.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-790&quot; title=&quot;Redundancy in Matrix API, view or get?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-790&quot;&gt;&lt;del&gt;MAHOUT-790&lt;/del&gt;&lt;/a&gt; - Add view for diagonal of a matrix.&lt;/p&gt;

&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164016&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164016&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/eval/InMemoryFactorizationEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/bayes/InMemoryBayesDatastore.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/discriminative/LinearTrainer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/NaiveBayesModel.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/HmmUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/MatrixWritable.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UpperTriangular.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJobTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DiagonalMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/Matrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/MatrixView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/PermutedVectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/PivotedMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomTrinaryMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractTestVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestMatrixView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseColumnMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseRowMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestVectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/als/AlternateLeastSquaresSolverTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/decomposer/SolverTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164015&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164015&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDAInference.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DiagonalMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/PivotedMatrix.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164014&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164014&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/eval/InMemoryFactorizationEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/AbstractVectorClassifier.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/discriminative/LinearTrainer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/NaiveBayesModel.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/WeightsMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/AbstractOnlineLogisticRegression.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/GradientMachine.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/PassiveAggressive.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/RunningSumsGaussianAccumulator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/mapreduce/VectorSumReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/GivensThinSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDPrototype.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UpperTriangular.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJobTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/discriminative/PerceptronTrainerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/discriminative/WinnowTrainerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/OnlineBaseTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/TestGaussianAccumulators.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/decomposer/TestDistributedLanczosSolverCLI.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDPrototypeTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/display/DisplayMeanShift.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/TestClusterDumper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/Algebra.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/Matrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/MatrixVectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/MatrixView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/NamedVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/Vector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/VectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/als/AlternateLeastSquaresSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestMatrixView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/decomposer/SolverTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164013&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164013&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/QRDecomposition.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164012&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164012&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSingularValueDecomposition.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164011&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164010&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164010&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/ConstantVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DiagonalMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/PermutedVectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/PivotedMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/PermutedVectorViewTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/PivotedMatrixTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164009&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1164009&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/Matrix.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13095680" author="dlyubimov" created="Fri, 2 Sep 2011 01:03:53 +0100"  >&lt;p&gt;Hm. i can&apos;t seem to make trunk to build. &lt;/p&gt;

&lt;p&gt;building math produces &lt;/p&gt;


&lt;p&gt;Results :&lt;/p&gt;

&lt;p&gt;Failed tests: &lt;br/&gt;
  testIterate(org.apache.mahout.math.TestSparseColumnMatrix): iterator: &lt;/p&gt;
{0:1.1,1:2.2}
&lt;p&gt;, randomAccess: &lt;/p&gt;
{2:5.5,1:3.3,0:1.1}
&lt;p&gt; expected:&amp;lt;&lt;/p&gt;
{0:1.1,1:2.2}
&lt;p&gt;&amp;gt; but was:&amp;lt;&lt;/p&gt;
{2:5.5,1:3.3,0:1.1}
&lt;p&gt;&amp;gt;&lt;/p&gt;</comment>
                            <comment id="13095683" author="tdunning" created="Fri, 2 Sep 2011 01:10:10 +0100"  >&lt;p&gt;Hmph... that test should have been commented out.&lt;/p&gt;

&lt;p&gt;Let me take a look.  My final merges may not have been quite right.&lt;/p&gt;

</comment>
                            <comment id="13095684" author="tdunning" created="Fri, 2 Sep 2011 01:12:10 +0100"  >&lt;p&gt;Definitely due to last minute regression.  My local history shows that this&lt;br/&gt;
changed right as I checked stuff in.&lt;/p&gt;

</comment>
                            <comment id="13095685" author="tdunning" created="Fri, 2 Sep 2011 01:13:07 +0100"  >&lt;p&gt;Lost a change.  Re-opening to commit the fix.&lt;/p&gt;</comment>
                            <comment id="13095686" author="tdunning" created="Fri, 2 Sep 2011 01:13:52 +0100"  >&lt;p&gt;Really fixed now.&lt;/p&gt;</comment>
                            <comment id="13095739" author="tdunning" created="Fri, 2 Sep 2011 04:06:16 +0100"  >&lt;p&gt;Found the missing commit.  It had other changes as well.&lt;/p&gt;

&lt;p&gt;Applied them.  Should be fixed (finally)&lt;/p&gt;</comment>
                            <comment id="13096564" author="lancenorskog" created="Sat, 3 Sep 2011 03:52:14 +0100"  >&lt;p&gt;What should happen to labels in PivotedMatrix.java? Should they point to the row number as they do now? Should they track the movements of rows &amp;amp; columns?&lt;/p&gt;</comment>
                            <comment id="13096567" author="lancenorskog" created="Sat, 3 Sep 2011 03:56:29 +0100"  >&lt;p&gt;Inverting a diagonal matrix is 1/the values in the diagonal. This is trivial if all the diagonals are non-zero, but impossible if any are 0. Should DiagonalMatrix track whether any values are 0? &lt;/p&gt;</comment>
                            <comment id="13096734" author="tdunning" created="Sat, 3 Sep 2011 19:12:12 +0100"  >&lt;p&gt;Lance, &lt;/p&gt;

&lt;p&gt;Ideally labels should follow the rows and/or columns as the matrix pivots.  Since the pivoted matrix is just a view, this should be easy to make happen.  It probably doesn&apos;t happen correctly now.&lt;/p&gt;

&lt;p&gt;Yes, the inverse of a non-zero diagonal is easy.  Commonly a diagonal matrix with zeros is truncated before inverting.  The definition of zero is an application specific thing and thus should not be included in the DM itself.&lt;/p&gt;</comment>
                            <comment id="13096779" author="lancenorskog" created="Sun, 4 Sep 2011 01:53:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;Ideally labels should follow the rows and/or columns as the matrix pivots. Since the pivoted matrix is just a view, this should be easy to make happen. It probably doesn&apos;t happen correctly now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Matrix row&amp;amp;column labels are string-&amp;gt;index maps. If you write code that knows it has a permuted matrix, it can pull the labels and the permutation lists and do the indirection. If it does not know it has a permuted matrix, it will get non-tracking outputs.&lt;/p&gt;
</comment>
                            <comment id="13103479" author="srowen" created="Tue, 13 Sep 2011 10:12:43 +0100"  >&lt;p&gt;Ted looks like you are done with this one?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12519512">MAHOUT-792</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12519516">MAHOUT-793</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12520182">MAHOUT-796</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12520594">MAHOUT-797</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12491169" name="MAHOUT-790.patch" size="201949" author="tdunning" created="Mon, 22 Aug 2011 02:28:13 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 21 Aug 2011 00:59:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9272</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy2yn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22631</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>