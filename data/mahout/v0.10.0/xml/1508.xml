<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:20:33 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1508/MAHOUT-1508.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1508] Performance problems with sparse matrices</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1508</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;I&apos;m currently working with the new Scala DSL and running into a problem with SparseMatrix and SparseRowMatrix.&lt;/p&gt;

&lt;p&gt;The problem is that they don&apos;t implement a specialized assign(Matrix other, DoubleDoubleFunction f) function, but use the implementation from AbstractMatrix which loops through all &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; possible entries. &lt;/p&gt;

&lt;p&gt;We have to fix this asap.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12707879">MAHOUT-1508</key>
            <summary>Performance problems with sparse matrices</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ssc">Sebastian Schelter</assignee>
                                    <reporter username="ssc">Sebastian Schelter</reporter>
                        <labels>
                    </labels>
                <created>Fri, 11 Apr 2014 07:01:27 +0100</created>
                <updated>Mon, 13 Apr 2015 11:19:52 +0100</updated>
                            <resolved>Sat, 12 Apr 2014 12:53:59 +0100</resolved>
                                                    <fixVersion>0.10.0</fixVersion>
                                    <component>Math</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13966279" author="ssc" created="Fri, 11 Apr 2014 07:27:17 +0100"  >&lt;p&gt;I think we should maybe completely drop SparseRowMatrix. Its very dangerous to use this implementation as it will always instantiate a Vector for each row index. This kills performance when there are only a few non-zero rows (e.g.  for outer products of sparse vectors).&lt;/p&gt;
</comment>
                            <comment id="13966657" author="dlyubimov" created="Fri, 11 Apr 2014 16:38:16 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ssc&quot; class=&quot;user-hover&quot; rel=&quot;ssc&quot;&gt;Sebastian Schelter&lt;/a&gt; i am not so sure. SRM is fastest to construct from rows and fastest to iterate over rows (since it doesn&apos;t create vector views, and vector elements in this case are co-located in memory. &lt;/p&gt;

&lt;p&gt;if x cross y doesn&apos;t have efficient representation in SRM, then maybe it shouldn&apos;t use SRM. &lt;/p&gt;

&lt;p&gt;The real problem is that we don&apos;t have in-core algebraic matrix optimizer here that would look at the expression as a whole. I am not sure we would need one, but if we had, we&apos;d be able to compute cost variations not only of the current operation, but of subsequent, too. But since we are constrainted by the cost of current operation only, we do what&apos;s fastest for the current operation (one-step greedy approach). so SRM is the fastest to wrap a bunch of rows, and so that&apos;s what blockify() uses. If subsequent operation is custom row-wise iterator, this choice is still the best. but for others, it may not &amp;#8211; but we have no way of knowing at the point we construct SRM. &lt;/p&gt;

&lt;p&gt;More likely, we might do what we did with aggregate() and assign() calls on vectors, i.e. make it operator-centric approach where operator chooses approach based on underlying matrix argument structures. in that sense we could introduce some organizational concept the same way we did for vectors. E.g. we could have methods isRowWiseLike, isColumnWiseLike, isSparseHashLike etc. etc. which would allow us to asses costs for certain iteration patterns. &lt;/p&gt;

&lt;p&gt;this would strike a middle ground between full-fledged optimizer and doing-nothing.&lt;/p&gt;</comment>
                            <comment id="13967454" author="ssc" created="Sat, 12 Apr 2014 10:26:21 +0100"  >&lt;p&gt;SparseMatrix.viewRow() only creates new objects if the requested row has no non-zero entry yet.&lt;/p&gt;</comment>
                            <comment id="13967465" author="ssc" created="Sat, 12 Apr 2014 11:28:27 +0100"  >&lt;p&gt;Dmitriy, I agree with your comment in general. I&apos;d like to propose a few minor immediate changes to help me do efficient summation of outer product matrices in &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1464&quot; title=&quot;Cooccurrence Analysis on Spark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1464&quot;&gt;&lt;del&gt;MAHOUT-1464&lt;/del&gt;&lt;/a&gt; :&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;em&gt;matrixLike()&lt;/em&gt; in our sparse vectors should return a &lt;em&gt;SparseMatrix&lt;/em&gt; not return a &lt;em&gt;SparseRowMatrix&lt;/em&gt; as its mainly used for outer products which produce many zero rows&lt;/li&gt;
	&lt;li&gt;&lt;em&gt;MatrixWritable&lt;/em&gt; should preserve the type of sparse matrix (currently it always deserializes as &lt;em&gt;SparseRowMatrix&lt;/em&gt;)&lt;/li&gt;
	&lt;li&gt;provide an optimized assign for addition in &lt;em&gt;SparseMatrix&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="13967475" author="ssc" created="Sat, 12 Apr 2014 12:20:21 +0100"  >&lt;p&gt;can someone review &lt;a href=&quot;https://reviews.apache.org/r/20282/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/20282/&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="13967494" author="hudson" created="Sat, 12 Apr 2014 13:51:55 +0100"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2563 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2563/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2563/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1508&quot; title=&quot;Performance problems with sparse matrices&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1508&quot;&gt;&lt;del&gt;MAHOUT-1508&lt;/del&gt;&lt;/a&gt;: Performance problems with sparse matrices (ssc: rev 1586851)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/CHANGELOG&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/MatrixWritable.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/MatrixWritableTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 11 Apr 2014 15:38:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>386202</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzodvr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>386467</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>