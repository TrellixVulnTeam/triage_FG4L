<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:23:57 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-165/MAHOUT-165.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-165] Using better primitives hash for sparse vector for performance gains</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-165</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;In SparseVector, we need primitives hash map for index and values. The present implementation of this hash map is not as efficient as some of the other implementations in non-Apache projects. &lt;/p&gt;

&lt;p&gt;In an experiment, I found that, for get/set operations, the primitive hash of  Colt performance an order of magnitude better than OrderedIntDoubleMapping. For iteration it is 2x slower, though. &lt;/p&gt;

&lt;p&gt;Using Colt in Sparsevector improved performance of canopy generation. For an experimental dataset, the current implementation takes 50 minutes. Using Colt, reduces this duration to 19-20 minutes. That&apos;s 60% reduction in the delay. &lt;/p&gt;
</description>
                <environment></environment>
        <key id="12433466">MAHOUT-165</key>
            <summary>Using better primitives hash for sparse vector for performance gains</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gsingers">Grant Ingersoll</assignee>
                                    <reporter username="kshashi">Shashikant Kore</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Aug 2009 14:59:54 +0100</created>
                <updated>Sun, 13 Dec 2009 23:56:44 +0000</updated>
                            <resolved>Sun, 13 Dec 2009 23:56:14 +0000</resolved>
                                    <version>0.2</version>
                                    <fixVersion>0.3</fixVersion>
                                    <component>Math</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12745060" author="kshashi" created="Wed, 19 Aug 2009 15:01:12 +0100"  >&lt;p&gt;Patch for using Colt in SparseVector&lt;/p&gt;</comment>
                            <comment id="12745064" author="srowen" created="Wed, 19 Aug 2009 15:06:26 +0100"  >&lt;p&gt;(Since I wrote that class, I feel compelled to take blame / defend it: it is &lt;b&gt;not&lt;/b&gt; a hash-based implementation. that&apos;s the issue, not the implementation per se. It was merely put in place to replace a comparable non-hash data structure. Now we know a hash is more suitable here, so this is definitely a win to change to an actual hash implementation.)&lt;/p&gt;</comment>
                            <comment id="12745176" author="tdunning" created="Wed, 19 Aug 2009 20:16:16 +0100"  >&lt;p&gt;This is an important result, although as Sean mentioned the current class is a place-holder so the results are not all that surprising.&lt;/p&gt;

&lt;p&gt;On the other hand, Colt has license issues.&lt;/p&gt;

&lt;p&gt;In contrast, MTJ does not, provides even higher performance and is in the process of being integrated into Commons Math.  That effort was being held up pending the Math 2.0 release, but 2.0 is out and so should be moving forward.  I will ping Luc about this.  He wants closer ties between Math and Mahout and I think that makes a world of sense.&lt;/p&gt;</comment>
                            <comment id="12745178" author="srowen" created="Wed, 19 Aug 2009 20:25:30 +0100"  >&lt;p&gt;Does Colt have license issues? It is all but public domain. It contains only a notice license.&lt;/p&gt;

&lt;p&gt;I&apos;d support Someone Else looking at rewriting everything to use another matrix library. Doesnt totally make sense to have our own and the abstractions are already a little creaky.&lt;/p&gt;</comment>
                            <comment id="12745405" author="kshashi" created="Thu, 20 Aug 2009 12:44:30 +0100"  >&lt;p&gt;I couldn&apos;t locate the primitive hasmap in MTJ. Or is it the case that we will be directly using the vector class from MTJ? &lt;/p&gt;

&lt;p&gt;I checked some discussion on Commons Math list about Colt. But I am not sure about the conclusion of that conversation. &lt;/p&gt;</comment>
                            <comment id="12745409" author="kshashi" created="Thu, 20 Aug 2009 12:49:59 +0100"  >&lt;p&gt;&lt;a href=&quot;http://acs.lbl.gov/~hoschek/colt/dependencies.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://acs.lbl.gov/~hoschek/colt/dependencies.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This says Colt&apos;s license is Apache style. &lt;/p&gt;

&lt;p&gt;It has some dependency on LGPL jar, but we don&apos;t need it. &lt;/p&gt;</comment>
                            <comment id="12745415" author="gsingers" created="Thu, 20 Aug 2009 13:04:56 +0100"  >&lt;p&gt;&lt;a href=&quot;http://acs.lbl.gov/~hoschek/colt-download/releases/license.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://acs.lbl.gov/~hoschek/colt-download/releases/license.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The clause for military use in HEP is unacceptable, unfortunately.  There is no way we could enforce that.  If we could use Colt w/o HEP, then we could use Colt.  Perhaps there is just a class or two from Colt that is ASL licensed that we can copy over and properly attribute and that doesn&apos;t have any dependencies on HEP?  &lt;/p&gt;</comment>
                            <comment id="12745417" author="gsingers" created="Thu, 20 Aug 2009 13:05:50 +0100"  >&lt;p&gt;Also, perhaps there is a snapshot available for MTJ in Commons Math?&lt;/p&gt;</comment>
                            <comment id="12745422" author="srowen" created="Thu, 20 Aug 2009 13:23:24 +0100"  >&lt;p&gt;Yes, surely we can simply repackage the .jar to not even include those classes and redistribute only that part which we use and can license.&lt;br/&gt;
Or as you say merely reuse the source.&lt;/p&gt;</comment>
                            <comment id="12748870" author="gsingers" created="Fri, 28 Aug 2009 17:06:15 +0100"  >&lt;p&gt;Shashi,&lt;/p&gt;

&lt;p&gt;Any thoughts on whether we can just pull out the appropriate pieces?&lt;/p&gt;</comment>
                            <comment id="12748904" author="kshashi" created="Fri, 28 Aug 2009 18:05:59 +0100"  >&lt;p&gt;I&apos;m fine with copying relevant classes from Colt or Trove. &lt;/p&gt;

&lt;p&gt;Please let me know your library of choice. I will create the patch and upload. &lt;/p&gt;
</comment>
                            <comment id="12751367" author="kshashi" created="Fri, 4 Sep 2009 09:49:10 +0100"  >&lt;p&gt;For SparseVector, I have copied relevant source from Trove. &lt;/p&gt;

&lt;p&gt;Test case for TestSparseVector failed with following error.&lt;/p&gt;

&lt;p&gt;get &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; expected:&amp;lt;0.0&amp;gt; but was:&amp;lt;-0.0&amp;gt;&lt;/p&gt;

&lt;p&gt;Also there are other failures while formatting string with Gson :&lt;br/&gt;
java.lang.IllegalStateException: Circular reference found: org.apache.mahout.matrix.trove.TIntDoubleHashMap&lt;/p&gt;

&lt;p&gt;Pointer to fix these cases will be helpful. &lt;/p&gt;</comment>
                            <comment id="12751385" author="srowen" created="Fri, 4 Sep 2009 10:27:05 +0100"  >&lt;p&gt;Wait a sec, I thought we had concluded that we &lt;b&gt;cannot&lt;/b&gt; use Trove. It was Colt that had a portion which was licensed acceptably.&lt;/p&gt;

&lt;p&gt;Are you saying these errors occur before you change? I don&apos;t see these failures in head.&lt;/p&gt;

&lt;p&gt;The first error &amp;#8211; can&apos;t tell you why it happens but can explain it more, if that&apos;s what you&apos;re asking. Zero and negative zero are actually different doubles, and they aren&apos;t ==. Somehow the computation has changed in your patch such that a result ends up zero, but negative zero actually. One might say the test should actually not compare doubles for exact equality, but for equality to the last decimal place or something. But I don&apos;t see how this change should have affected this result, period, so probably should be viewed as a problem with the patch or Trove or some funky interaction.&lt;/p&gt;

&lt;p&gt;Sounds like Gson can&apos;t serialize/deserialize the trove class correctly because of some circular reference among the instances. Dunno why that would be a problem.&lt;/p&gt;

&lt;p&gt;But I think all this is moot since we can&apos;t use Trove?&lt;/p&gt;</comment>
                            <comment id="12751398" author="kshashi" created="Fri, 4 Sep 2009 10:45:09 +0100"  >&lt;p&gt;My interpretation was Trove (and Colt) can&apos;t be distributed, but we can copy required classes. Please let me know if I am way off in that interpretation. &lt;/p&gt;

&lt;p&gt;I got the errors after applying the patch. &lt;/p&gt;
</comment>
                            <comment id="12751423" author="srowen" created="Fri, 4 Sep 2009 11:44:42 +0100"  >&lt;p&gt;While I&apos;m not a lawyer, I am all but certain there is no distinction between distributing a .jar and distributing a class &amp;#8211; in fact distributing source typically carries more restrictions. So, I am pretty sure we can&apos;t use Trove if its license is not compatible, in any form.&lt;/p&gt;

&lt;p&gt;Colt appears to license its code in two parts, and the part we need is licensed compatibly. To be completely safe with them, we&apos;d need to copy only the part that is suitably licensed. If that means repacking the .jar or copying source or whatever, is up to us.&lt;/p&gt;

&lt;p&gt;Others &amp;#8211; how&apos;s my interpretation?&lt;/p&gt;</comment>
                            <comment id="12751484" author="gsingers" created="Fri, 4 Sep 2009 15:59:21 +0100"  >&lt;p&gt;Yes, Sean is correct.  &lt;em&gt;IF&lt;/em&gt; the part of Colt we need is cern.colt* packages, as in:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Packages cern.colt* , cern.jet*, cern.clhep&lt;/p&gt;

&lt;p&gt;    Copyright (c) 1999 CERN - European Organization for Nuclear Research.&lt;/p&gt;

&lt;p&gt;    Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation. CERN makes no representations about the suitability of this software for any purpose. It is provided &quot;as is&quot; without expressed or implied warranty.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Then we can use it.  We &lt;em&gt;CANNOT&lt;/em&gt; include anything under the hep.aida package.&lt;/p&gt;</comment>
                            <comment id="12751519" author="tdunning" created="Fri, 4 Sep 2009 17:28:06 +0100"  >
&lt;p&gt;To amplify on Grant&apos;s reply:&lt;/p&gt;

&lt;p&gt;Sean is correct.  Trove is GPL and cannot be used or copied.  It is fine to do experiments with it.&lt;/p&gt;

&lt;p&gt;I need to post my patch.  It isn&apos;t usable as is, but with a little help, it could solve the problem.&lt;/p&gt;</comment>
                            <comment id="12751520" author="kshashi" created="Fri, 4 Sep 2009 17:30:58 +0100"  >&lt;p&gt;OK.  Should I copy relevant classes source from Colt or we can distribute the binary? &lt;/p&gt;

&lt;p&gt;BTW, Trove is LGPL.&lt;/p&gt;</comment>
                            <comment id="12751534" author="srowen" created="Fri, 4 Sep 2009 18:20:14 +0100"  >&lt;p&gt;I suggest we distribute in binary form. Just unpack the jar, delete the bits we can&apos;t distribute, and repack it.&lt;/p&gt;

&lt;p&gt;Yes it&apos;s LGPL but as I understand even that is problematic?&lt;/p&gt;</comment>
                            <comment id="12751677" author="tdunning" created="Sat, 5 Sep 2009 01:47:16 +0100"  >&lt;p&gt;Add bespoke implementation of HashVector and change the class structure to allow new sparse vector implementations.&lt;/p&gt;</comment>
                            <comment id="12752041" author="kshashi" created="Mon, 7 Sep 2009 09:27:31 +0100"  >&lt;p&gt;Jar for Colt after removing the LGPL code of hep.aida and the the dependent classes. The classes in colt.matrix.*  are removed as they require hep.aida.&lt;/p&gt;

&lt;p&gt;This jar will work with my first patch on this issue. &lt;/p&gt;

&lt;p&gt;PS: I am uploading this jar with license to ASF. Not sure what the correct procedure is. &lt;/p&gt;

</comment>
                            <comment id="12753583" author="kshashi" created="Thu, 10 Sep 2009 12:58:17 +0100"  >&lt;p&gt;The attached patch uses integer to double map. I was wondering if precision of float is good enough for us. That reduces the memory consumption by one-third.  (int+float instead of int+double)&lt;/p&gt;</comment>
                            <comment id="12754147" author="gsingers" created="Fri, 11 Sep 2009 15:19:26 +0100"  >&lt;p&gt;I think we will want doubles, but perhaps we can have two implementations and people can pick.&lt;/p&gt;</comment>
                            <comment id="12754154" author="tdunning" created="Fri, 11 Sep 2009 15:34:31 +0100"  >
&lt;p&gt;If we need something more than small integers, it is likely that we will need doubles.  Floats are just tooo easy to get into trouble with round-off with large numerical operations.  Even something as simple as adding up a list of numbers can be difficult without enough resolution.  Since we generally can&apos;t afford the time and effort to do detailed numerical stability analysis, we should probably stick with doubles for most floating point work.&lt;/p&gt;
</comment>
                            <comment id="12754585" author="gsingers" created="Sat, 12 Sep 2009 19:42:51 +0100"  >&lt;p&gt;Shashi,  did you try Ted&apos;s patch?  If that works is sufficient, I&apos;d prefer to use it since then we don&apos;t have to introduce another dependency.  I am trying it now.&lt;/p&gt;</comment>
                            <comment id="12754586" author="gsingers" created="Sat, 12 Sep 2009 19:43:26 +0100"  >&lt;p&gt;Ted, can you bring your patch up to date with trunk?&lt;/p&gt;</comment>
                            <comment id="12756526" author="kshashi" created="Thu, 17 Sep 2009 14:04:14 +0100"  >&lt;p&gt;Since, I couldn&apos;t apply Ted&apos;s patch to trunk, I only tested the IntDoubleHash in isolation.  Performance-wise, it is as good as Colt.&lt;/p&gt;

&lt;p&gt;But, there are other issues with the basic implementation.&lt;/p&gt;

&lt;p&gt;1. The class exposes the internal index array instead of keys. The internal array may have empty slots (marked with value -1). This is not consistent with a typical hash implementation. The side effect is extra work by the callee to only check the keys greater than zero. &lt;/p&gt;

&lt;p&gt;2. The clone() method has a bug. Instead of copying the entire index &amp;amp; value array, it only copies the count of valid values in the map. &lt;/p&gt;

&lt;p&gt;3. We don&apos;t need right now, but there is no remove() method. &lt;/p&gt;

&lt;p&gt;Of course, all these are fixable issues.  But, if we again need something similar, Colt will prove to be of great help. &lt;/p&gt;</comment>
                            <comment id="12756790" author="tdunning" created="Thu, 17 Sep 2009 22:11:27 +0100"  >&lt;blockquote&gt;&lt;p&gt;3. We don&apos;t need right now, but there is no remove() method. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;remove will be a PITA to get right.  The problem is with collisions and the double hashing.  When you remove something, you don&apos;t know what other keys may have collided with what you are removing.  That means that you need to leave a marker behind so that other searches will still view that slot as occupied.  Repeated insert/remove/insert will ultimately cause the array to resize itself.  &lt;/p&gt;

&lt;p&gt;I would propose extending the current empty index mark (-1) to include a formerly occupied mark (-2).  Then the scanning would have to be clever enough to treat empty and formerly occupied differently.&lt;/p&gt;
</comment>
                            <comment id="12757017" author="kshashi" created="Fri, 18 Sep 2009 08:06:19 +0100"  >&lt;p&gt;Colt handles the removal by explicitly keeping an array of states. It&apos;s an additional array of bytes. &lt;/p&gt;
</comment>
                            <comment id="12757022" author="srowen" created="Fri, 18 Sep 2009 08:14:50 +0100"  >&lt;p&gt;FWIW this is just what the FastIDSet and FastMap things I cobbled together do. Open addressing indeed means using a special value for empty versus formerly occupied. I think a separate array for these states is expensive &amp;#8211; just used, for example, a pointer to a dummy object instead as a special value, or null. I also included rehash() methods that could grow the array, or, merely reshuffle to free up the formerly-occupied slots.&lt;/p&gt;</comment>
                            <comment id="12760879" author="jake.mannix" created="Wed, 30 Sep 2009 11:41:36 +0100"  >&lt;p&gt;Hey Ted, I tried bringing your patch up to current trunk, but while I could get it to compile (eventually!), it&apos;s got 11 failing tests for me.  Do you have an up-to-date copy of this patch, or should I just keep hammering away at this old one until all the tests pass? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12760886" author="jake.mannix" created="Wed, 30 Sep 2009 11:58:25 +0100"  >&lt;p&gt;One test which is failing is the basic VectorTest case which checks equals() - what are we considering the contract of equals() to be on vectors?  I would normally assume the functionality in AbstractVector.equivalent() should be what equals() returns, but is this not done so we can compare while ignoring the name?  Or is there some more important reason why we say that a DenseVector and a SparseVector which are the same &quot;vector&quot; in the mathematical sense are not returning equals() as true on each other?&lt;/p&gt;

&lt;p&gt;Speaking of which, why do we have these static methods for &quot;equivalent()&quot; and &quot;strictEquivalence&quot;?  Do we need something different from &quot;equals()&quot; which is true mathematical equals (currently the functionality of equivalent())?&lt;/p&gt;</comment>
                            <comment id="12760893" author="srowen" created="Wed, 30 Sep 2009 13:05:53 +0100"  >&lt;p&gt;It&apos;s a good, important question and one I think needs attention too. (I think there used to be even a 4th such method!)&lt;/p&gt;

&lt;p&gt;equals() is tricky here since if you define equals() to include only the numeric values in the vector (which is reasonable) then you have some transitivity problems. A named vector may equals some non-named Vector implementation may equal some other named vector with different name, which implies the two named vectors with different names are equal.&lt;/p&gt;

&lt;p&gt;I believe I and conventional wisdom favor defining equals() more strictly then to avoid surprises. Therefore I would implement equals() as a call to strictEquivalence() &amp;#8211; in fact, would remove that method and make it the implementation of equals(). (In fact, equals() &lt;b&gt;must&lt;/b&gt; take account of name or else it is inconsistent with hashCode()).&lt;/p&gt;

&lt;p&gt;equivalent() then stands on its own as a usefully different method, but I don&apos;t think it necessarily should be static, for consistency. Also, equals() can then use equivalent() to check that aspect of equality rather than duplicating it.&lt;/p&gt;

&lt;p&gt;I think if we take these steps, IMHO this aspect makes much more sense and is more correct.&lt;/p&gt;</comment>
                            <comment id="12760898" author="gsingers" created="Wed, 30 Sep 2009 13:31:39 +0100"  >&lt;p&gt;There are some thoughts on equals, etc. in the archives and other JIRA issues. &lt;/p&gt;

&lt;p&gt;Here&apos;s what I recall:&lt;/p&gt;

&lt;p&gt;1. We want DenseVectors and SparseVectors with the same names to be equal in the equals() sense.  The implementations of equals in SparseVector and DenseVector are the equivalent, AFAICT, as the implementations in equals(), but for #2:&lt;br/&gt;
2. We don&apos;t just defer to strictEquivalence b/c the thinking is that we can do much faster equals comparison if we know what type of vector it is, which is why SparseVector checks to see if &quot;that&quot; is a SparseVector, otherwise deferring to equivalent (since names have already been checked).  I haven&apos;t validated whether they truly are faster.&lt;/p&gt;</comment>
                            <comment id="12760902" author="gsingers" created="Wed, 30 Sep 2009 14:02:19 +0100"  >&lt;p&gt;There are some thoughts on equals, etc. in the archives and other JIRA issues. &lt;/p&gt;

&lt;p&gt;Here&apos;s what I recall:&lt;/p&gt;

&lt;p&gt;1. We want DenseVectors and SparseVectors with the same names to be equal in the equals() sense.  The implementations of equals in SparseVector and DenseVector are the equivalent, AFAICT, as the implementations in equals(), but for #2:&lt;br/&gt;
2. We don&apos;t just defer to strictEquivalence b/c the thinking is that we can do much faster equals comparison if we know what type of vector it is, which is why SparseVector checks to see if &quot;that&quot; is a SparseVector, otherwise deferring to equivalent (since names have already been checked).  I haven&apos;t validated whether they truly are faster.&lt;/p&gt;</comment>
                            <comment id="12760956" author="srowen" created="Wed, 30 Sep 2009 17:59:42 +0100"  >&lt;p&gt;Are my conclusions sound then:&lt;/p&gt;

&lt;p&gt;We agree that equals() should be &apos;pretty strict&apos;. The conventional Java wisdom is that equals(), in fact, ought not return true for instances of differing classes, unless you really know what you&apos;re doing. I guess we do. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;If the idea behind equals() is &quot;do class-specific stuff, otherwise, check names, and use equivalent() then&quot;, then we don&apos;t need strictEquivalence() &amp;#8211; where&apos;s it used?&lt;/p&gt;

&lt;p&gt;(If I represented the logic correctly above &amp;#8211; is that as simple as we can make it? seems a touch complex)&lt;/p&gt;

&lt;p&gt;I am not sure anything is &apos;broken&apos; in practice here but I sense it could be simpler.&lt;/p&gt;</comment>
                            <comment id="12761000" author="tdunning" created="Wed, 30 Sep 2009 21:38:45 +0100"  >&lt;p&gt;&lt;br/&gt;
I will take a quick look this evening at the patch and see if I can bring it back to life.&lt;/p&gt;</comment>
                            <comment id="12761002" author="jake.mannix" created="Wed, 30 Sep 2009 21:42:41 +0100"  >&lt;p&gt;Good luck with the &quot;quick&quot; part - there seem to be a lot of changes since you made it, and lots of tests fail even after it gets compiling again!&lt;/p&gt;</comment>
                            <comment id="12761018" author="jake.mannix" created="Wed, 30 Sep 2009 22:48:23 +0100"  >&lt;p&gt;Ted, some notes on your patch: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;with the two different specialized subclasses of SparseVector (HashVector, optimized for random access, and OrderedIntDoubleVector, optimized for iteration speed) being created, it seems like utilities like the TFDFMapper and so forth should be able to chose which impl to use, instead of getting hardcoded to use on or the other.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;also, your current implementation of IntDoubleHash appears to sometimes throw &quot;java.lang.RuntimeException: Impossible confusion in IntDoubleHash&quot; exceptions sometimes, which sounds troubling. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Attached is my current attempt at reviving this patch.  Currently has failing tests.  If it&apos;s easier to just svn up your own version, feel free to ignore, but I thought applying one which already compiles might help a little.&lt;/p&gt;</comment>
                            <comment id="12761021" author="tdunning" created="Wed, 30 Sep 2009 23:06:27 +0100"  >
&lt;p&gt;THanks Jake, that could be very helpful.&lt;/p&gt;

&lt;p&gt;The throwing of &quot;Impossible confusion&quot; is done in situations where an impossible condition has been detected.  For instance, since hash tables are resized when they become partially filled, it should be impossible for the search loop to exit without finding an empty cell or a match.  When programming, I have difficulty pronouncing &quot;should&quot; so I try to detect the situation and signal it with an unchecked exception.  I usually define something like &quot;ImpossibleConditionException&quot;, but didn&apos;t in this case.  I use an unchecked exception because it is clear that the application is not going to be much able to recover from a situation that I don&apos;t think could occur.&lt;/p&gt;

&lt;p&gt;I left the hard-coding of one option or the other in place because I could see my patch extending into everything everywhere and wanted to limit the scope of the change.  You are right that we need to think about how that works.  In most cases, I think that hard-coding is fine just like hard-coding the use of an ArrayList in some application is not subject to user over-ride.  There are a few cases where this isn&apos;t try, but I think that usually that means that the vector or matrix should be passed in.  The use of like() may also be indicated.&lt;/p&gt;</comment>
                            <comment id="12761200" author="gsingers" created="Thu, 1 Oct 2009 13:40:05 +0100"  >&lt;p&gt;This gets the VectorTest testEquals to pass.  Also fixes an instanceof check in the equals of OrderedIntDoubleVector.&lt;/p&gt;

&lt;p&gt;Still a failure in VectorTest testHashCode due to the fact that the HashVector doesn&apos;t gracefully handle missing index items.&lt;/p&gt;</comment>
                            <comment id="12761201" author="gsingers" created="Thu, 1 Oct 2009 13:41:04 +0100"  >&lt;p&gt;The exception in the test is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java.lang.RuntimeException: Impossible confusion in IntDoubleHash: trying to find index 1 in (2,2.0), (0,1.0)&lt;br/&gt;
	at org.apache.mahout.matrix.IntDoubleHash.find(IntDoubleHash.java:162)&lt;br/&gt;
	at org.apache.mahout.matrix.IntDoubleHash.getInternal(IntDoubleHash.java:194)&lt;br/&gt;
	at org.apache.mahout.matrix.IntDoubleHash.get(IntDoubleHash.java:253)&lt;br/&gt;
	at org.apache.mahout.matrix.HashVector.equivalent(HashVector.java:219)&lt;br/&gt;
	at org.apache.mahout.matrix.AbstractVector.equals(AbstractVector.java:426)&lt;br/&gt;
	at org.apache.mahout.matrix.VectorTest.testHashCode(VectorTest.java:448)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think this is &quot;impossible confusion&quot;, it&apos;s just simply supposed to return a 0 when it can&apos;t find the index, right?&lt;/p&gt;</comment>
                            <comment id="12762167" author="kshashi" created="Mon, 5 Oct 2009 13:52:17 +0100"  >&lt;p&gt;I am trying out this patch. Somehow, I find it extremely slow compared to colt. &lt;/p&gt;

&lt;p&gt;I am running KMeans on 100k test vectors. With colt, all 5 iterations and clustering finished in 8 minutes. With this patch, it&apos;s been an hour and it hasn&apos;t even completed 50% of Iteration 1. (Iteration 0 was completed in 3 minutes.)   I checked kmeans.Cluster.java and verified that correct method on distance measure is called (one with 3 parameters). It is correct, and it can be verified by the quick completion of Iteration 0.&lt;/p&gt;

&lt;p&gt;I am not not able to understand this behaviour. &lt;/p&gt;
</comment>
                            <comment id="12765554" author="gsingers" created="Wed, 14 Oct 2009 14:05:56 +0100"  >&lt;p&gt;Shashi, can you share your test vectors?  Would be good to have everyone use the same for baseline.&lt;/p&gt;

&lt;p&gt;Also, I certainly can create more vectors at: &lt;a href=&quot;http://people.apache.org/~gsingers/wikipedia/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~gsingers/wikipedia/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12766231" author="gsingers" created="Thu, 15 Oct 2009 21:31:45 +0100"  >&lt;p&gt;Shashi&apos;s vectors are at:  &lt;a href=&quot;http://people.apache.org/~gsingers/mahout/vectors-test-mahout.gz&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~gsingers/mahout/vectors-test-mahout.gz&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12776748" author="jake.mannix" created="Wed, 11 Nov 2009 23:48:31 +0000"  >&lt;p&gt;&lt;b&gt;bump&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;So what is the collective vision on this now?  Shashi says that this current impl (from this patch) is pretty slow, but I was thinking that it is actually just some bugs in the IntDoubleMap based impl (mentioned above).  Has anyone looked at that other vector implementation?  Once we have this patch working, we can compare it to colt, and see how they stand up.  &lt;/p&gt;

&lt;p&gt;The question remains whether we should consider Commons-Math as our underlying linear package.  We can&apos;t really use cmath 2.0, because their api is missing some key features we need (iterators, for one thing, and they only have one sparse vector impl, based on the map, and don&apos;t also have an IntDoubleMapping based one, which is pretty key for performance of some sparse algs).  They do have lots of great solvers, but I&apos;ve been seeing a disturbing number of bugs fixed on their SVD implementation lately (I mean, fixing bugs is great, but having them in there means we don&apos;t know how many more there are), and the impls there are translated from fortran, and the code is very dense and hard for me to debug if I see a bug pop up, personally.&lt;/p&gt;

&lt;p&gt;The other option is to just get something like MTJ, but they depend on some f2j stuff, which is keeping commons-math from taking them, even though MTJ itself can be appropriately licensed.&lt;/p&gt;

&lt;p&gt;Personally, while I hate reinventing wheels, I hate even more having to depend on other libraries which don&apos;t quite have the api we need or the functionality we need, when the primitives involved are so core to much of what we want to do.  So I&apos;m more in favor of doing one of two things:  &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;use our own primitives as is, and improve them, remembering that our core competency is on &lt;b&gt;scaling&lt;/b&gt;, so optimizing for the 1000-element dense double[] vectors and 10k double[][] matrices isn&apos;t where we care as much, and most linear libraries aren&apos;t in the same mode of thinking.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;rip the unacceptably licensed parts of Colt out and use the rest for our linear routines.  The hep.aida.* packages are not needed and can be removed without losing the key functionality, and these packages are the only ones which aren&apos;t apache compatible.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thoughts?  We need to settle on at least a wrapper linear API which we&apos;ll delegate to if we&apos;re going to allow that possibility, but even that involves a bunch of decisions on what should be in that api - not all implementations can do everything, so this form of flexibility comes at a price. &lt;/p&gt;</comment>
                            <comment id="12776924" author="srowen" created="Thu, 12 Nov 2009 09:22:50 +0000"  >&lt;p&gt;IntDoubleHash right? We could look at that, but I thought the status here was that Colt worked just fine and fast. Perhaps I miss something but I don&apos;t see a remaining issue with using (part of) Colt.&lt;/p&gt;

&lt;p&gt;I somehow strongly suspect we will benefit from not reinventing a wheel here, and whatever we need can be done with Colt, plus perhaps some contributed changes, plus a custom implementation here and there.&lt;/p&gt;

&lt;p&gt;+1 for Whatever Is Needed To Use Colt?&lt;/p&gt;</comment>
                            <comment id="12776945" author="jake.mannix" created="Thu, 12 Nov 2009 10:31:45 +0000"  >&lt;p&gt;Well, I&apos;ve always had good luck with Colt, but at least Ted seemed to feel that Colt was &quot;no longer state of the art&quot;, but maybe he can chime in and elaborate.  &lt;/p&gt;</comment>
                            <comment id="12776999" author="gsingers" created="Thu, 12 Nov 2009 14:00:35 +0000"  >&lt;p&gt;Sorry, have been heads down on trying to get a release out.&lt;/p&gt;

&lt;p&gt;FWIW, in Ted&apos;s code, I suspect if we fix that funky Exception being thrown when it doesn&apos;t find an element (meaning it is 0) and return 0, performance will improve.&lt;/p&gt;

&lt;p&gt;Otherwise, I&apos;m fine w/ the stripped down version of Colt.  We have interfaces, so it isn&apos;t like we have to be married to it.&lt;/p&gt;</comment>
                            <comment id="12777050" author="tdunning" created="Thu, 12 Nov 2009 16:53:06 +0000"  >
&lt;p&gt;My issues (which I used for quite some time) were probably either remediable or irrelevant.&lt;/p&gt;

&lt;p&gt;The remediable problem was that the API was opaque for new-comers and very difficult to extend with new matrix implementations.  If we take Colt as a starting point and fix some of the extension and opacity issues, then this problem goes away.&lt;/p&gt;

&lt;p&gt;My second issue is that more modern libraries like MTJ can achieve about 4x the raw performance of Colt.  As Grant rightly points out, that probably doesn&apos;t matter to us right away since the goal here is scaling rather than raw hot-iron performance on a single box.  Moreover, as Grant also points out, we will have a pluggable interface which should allow us to switch if the commons math guys ever come around.&lt;/p&gt;
</comment>
                            <comment id="12777082" author="jake.mannix" created="Thu, 12 Nov 2009 17:40:24 +0000"  >&lt;p&gt;Ok then, let&apos;s try out Colt, unless we have a more permissive policy in here about MTJ than the c-math guys have: they didn&apos;t want MTJ because using it required either including a jar file of the output of f2j translations of some Fortran code... which is ok for us as long as it&apos;s apache-compatible, since we don&apos;t have the hard &quot;no external dependencies&quot; requirement that they have.  &lt;/p&gt;

&lt;p&gt;What Shashi wrote before was this, when he attached the modified colt jar:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Jar for Colt after removing the LGPL code of hep.aida and the the dependent classes. The classes in colt.matrix.* are removed as they require hep.aida.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I actually stripped the hep.aida.* dependencies out of even the colt.matrix.* classes in Colt on my local gitrepo, which keeps pretty much all of the functionality intact.  I can make an updated patch which has the full source code for that, so that we can include it instead of just having a jar.&lt;/p&gt;

&lt;p&gt;Do we want to try comparing both MTJ and Colt?&lt;/p&gt;

&lt;p&gt;Also: do we think our linear API is &quot;complete&quot; enough to solidify on as a wrapper for whatever is plugged in underneath?  Some of the changes which have been discussed in other tickets and on the list are&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;pulling Writable off of the interface, so that not every impl is hooked into such a coupling to Hadoop, then wrapping it with a Writable wrapper / subclass to add that functionality&lt;/li&gt;
	&lt;li&gt;the double aggregate(BinaryDoubleFunction aggregator, UnaryFunction map) and double aggregate(Vector other, BinaryDoubleFunction aggregator, BinaryDoubleFunction map) methods for abstracting away inner products and norms.  Not necessary, but very easily implemented in AbstractVector so that nobody needs to worry about these methods if they don&apos;t like programming that way.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12777089" author="tdunning" created="Thu, 12 Nov 2009 17:54:44 +0000"  >
&lt;blockquote&gt;&lt;p&gt;pulling Writable off of the interface, so that not every impl is hooked into such a coupling to Hadoop, then wrapping it with a Writable wrapper / subclass to add that functionality&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Same thing should be done with row and column labels.&lt;/p&gt;

&lt;p&gt;Not sure how to handle matrices of indefinite dimension which are probably important for some of what we do.  Perhaps just declare them as very, very large in a wrapper.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the double aggregate(BinaryDoubleFunction aggregator, UnaryFunction map) and double aggregate(Vector other, BinaryDoubleFunction aggregator, BinaryDoubleFunction map) methods for abstracting away inner products and norms.  Not necessary, but very easily implemented in AbstractVector so that nobody needs to worry about these methods if they don&apos;t like programming that way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;These are very handy function.  Row and/or column aggregator functions are also important.&lt;/p&gt;

&lt;p&gt;Colt gets a big boost in speed by testing in the implementation for special combinations of these functional constructs.  That lets it implement dot and sum with bespoke code and avoid the function call overhead (with associated risk of the JVM not in-lining enough).&lt;/p&gt;

&lt;p&gt;Another big change is that Colt makes extensive use of view semantics.  I think that this is a really good idea, but it does differ a bit from what we have done so far.&lt;/p&gt;

</comment>
                            <comment id="12778822" author="kshashi" created="Tue, 17 Nov 2009 11:09:16 +0000"  >&lt;p&gt;Not sure if voting for my own patch qualifies for good behavior. &lt;/p&gt;

&lt;p&gt;The Colt patch has extremely localized changes - only one class to be precise.  If tomorrow we want to move to something better, Colt has rather low exit barrier. Just rip off the SparseVector code and you are done.&lt;/p&gt;</comment>
                            <comment id="12778831" author="gsingers" created="Tue, 17 Nov 2009 11:52:05 +0000"  >&lt;p&gt;Yep, I think we are all agreed on Colt.  I&apos;ll get 0.2 out and then we can add it.&lt;/p&gt;</comment>
                            <comment id="12778832" author="gsingers" created="Tue, 17 Nov 2009 11:52:23 +0000"  >&lt;p&gt;Shashi, can you make sure the patch is up to date?&lt;/p&gt;</comment>
                            <comment id="12778937" author="jake.mannix" created="Tue, 17 Nov 2009 15:31:42 +0000"  >&lt;p&gt;If we&apos;re going to try out a patch which includes Colt, we really need the Colt source, properly cleaned of offending material, not just a jar, right?  &lt;/p&gt;

&lt;p&gt;Similarly, as I mentioned above, cern.colt.matrix.* classes are pretty important, and can be included if a little care is made in pulling out the hep.aida.* dependencies.  Shashi, your colt.jar doesn&apos;t have the cern.colt.matrix included, do they?&lt;/p&gt;

&lt;p&gt;If I post a patch with the entire (cleaned) source tree of colt, can we apply it?  What is the procedure for doing this kind of thing?  Are we keeping the package hierarchy intact, or should we do a swap of cern.colt to org.mahout.colt?  If this kind of thing is done, we&apos;ll want it to live in it&apos;s own maven sub-module in here, I would imagine.&lt;/p&gt;

&lt;p&gt;On the topic of dependencies, colt internally has a dependency on Doug Lea&apos;s original edu.oswego concurrent library, which is public domain, so that&apos;s ok, but should be upgraded to java.util.concurrent.  Unfortunately, not all classes in edu.oswego.concurrent have counterparts in java.util.concurrent yet: the fork/join framework doesn&apos;t make it itno core java until 1.7, and is used inside of colt... so there&apos;s a dependency on concurrent.jar... does the apache maven repo have concurrent 1.3.4 in it?  ibiblio does appears to...&lt;/p&gt;

&lt;p&gt;Sorry to make things complicated - colt has a lot more than just a SparseVector implementation, so if we&apos;re going to include it, we should make sure to get the benefit of all it has to offer.&lt;/p&gt;</comment>
                            <comment id="12778944" author="srowen" created="Tue, 17 Nov 2009 15:42:45 +0000"  >&lt;p&gt;I generally favor including stuff as an intact library rather than cracking it open and modifying it, all else equal. Because this is a first step down the road to forking, and I&apos;d hate to fork Colt without good reason.&lt;/p&gt;

&lt;p&gt;So I suppose the easiest thing is a .jar file with the unusable classes stripped out. That should be it. We don&apos;t need to remove classes that merely depend on hep.aida.*, unless a class we need depends directly or indirectly on a class that references it. Ideally that&apos;s not true; we&apos;ll see in practice. Even then, just a matter of taking those out too.&lt;/p&gt;

&lt;p&gt;We don&apos;t necessarily need source and I&apos;d favor not incorporating as source, and not modifying the package names. Yes its dependencies could be changed and updated but I&apos;d say let&apos;s not bother until there is a case for doing so. What would we do when Colt is updated, re-port the updates? We&apos;d have a fork on our hands and might as well just decide that&apos;s what we&apos;re doing.&lt;/p&gt;</comment>
                            <comment id="12778971" author="jake.mannix" created="Tue, 17 Nov 2009 16:26:22 +0000"  >&lt;p&gt;Isn&apos;t colt abandoned?  I&apos;m not in favor of cracking open libraries either, but I was under the impression that colt has not been maintained or modified since 2004.&lt;/p&gt;

&lt;p&gt;We really shouldn&apos;t include a binary jar for an abandoned distribution which people have to hunt down the source for, right?&lt;/p&gt;</comment>
                            <comment id="12778973" author="srowen" created="Tue, 17 Nov 2009 16:31:20 +0000"  >&lt;p&gt;Oh I see. Well then, sounds like a compelling reason to &apos;fork&apos;. FWIW I say go for it.&lt;/p&gt;</comment>
                            <comment id="12779033" author="jake.mannix" created="Tue, 17 Nov 2009 18:32:37 +0000"  >&lt;p&gt;So I found Wolfgang Hoschek, the author of Colt, and he confirms that it is no longer maintained, and wishes us the best of luck in taking it over for ourselves if we so desired.&lt;/p&gt;

&lt;p&gt;If we transplant it (I&apos;d rather call it a transplant than a fork, if the original trunk of the tree is dead), what&apos;s the procedure?  &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Build a jar, put it in the apache maven repository?&lt;/li&gt;
	&lt;li&gt;Include all allowed source (inside of core/source/main/java?) with original package names and no changes other than removing the hep.aida.* classes?&lt;/li&gt;
	&lt;li&gt;something else?&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12779036" author="jake.mannix" created="Tue, 17 Nov 2009 18:43:14 +0000"  >&lt;p&gt;And continuing on the topic of code adoption: Colt has no unit tests.   &lt;b&gt;eep&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;So we might need to draft up a nice effort towards writing a bunch, once we get this incorporated.&lt;/p&gt;

&lt;p&gt;I guess we can do this piece-by-piece - include the code first, but don&apos;t change any implementation to use Colt.  Then as we hook it into things, add more unit tests and verify that they work, and gradually get more test coverage over the adopted code.  We&apos;d need to label it in the documentation as &quot;no lifeguard present: for expert use only&quot; until it was better tested in this case, because once it was available, people using Mahout could conceivably just start coding using Colt primitives even if we aren&apos;t directly linking to them at first in our own classes.&lt;/p&gt;</comment>
                            <comment id="12779039" author="drew.farris" created="Tue, 17 Nov 2009 18:50:27 +0000"  >&lt;p&gt;The colt tree could also be put into a separate module that lives alongside core, util, examples, built independently as a part of the maven build &amp;#8211; optionally at first, activated via a build profile.  As some point in the future, once it is ready for prime time, it is added to the regular build and core would have a dependency on it of course.&lt;/p&gt;

&lt;p&gt;As far as package names, would it be better to map cern.colt.* to org.apache.mahout.colt.* ? &amp;#8211; that way there&apos;s no potential for the old being confused for the new in builds, etc.&lt;/p&gt;

&lt;p&gt;Would the cern.jet.* libraries be included as well?&lt;/p&gt;</comment>
                            <comment id="12779046" author="srowen" created="Tue, 17 Nov 2009 19:01:10 +0000"  >&lt;p&gt;+1 to a transplant, and rename to org.apache.mahout.colt&lt;br/&gt;
+1 to the plan to write tests as we go&lt;/p&gt;

&lt;p&gt;I&apos;m surely up for the task of straightening up the code to match the project, stuff like updating for java.util.concurrent, etc.&lt;/p&gt;</comment>
                            <comment id="12779050" author="jake.mannix" created="Tue, 17 Nov 2009 19:09:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;The colt tree could also be put into a separate module that lives alongside core, util, examples, built independently as a part of the maven build - optionally at first, activated via a build profile.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 - I like this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As far as package names, would it be better to map cern.colt.* to org.apache.mahout.colt.* ? - that way there&apos;s no potential for the old being confused for the new in builds, etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I personally think this is the way to go, but does it reduce confusion, or increase it?  People who are used to using colt will see familiar classes, but in strange places.  If we&apos;re really going to overhaul the whole library over time, this makes sense, I guess.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Would the cern.jet.* libraries be included as well?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In the vivisection I&apos;ve performed (locally) on the last updated version of Colt, the colt.jet.* packages were able to be preserved without running into any licensing or dependency problems, so I&apos;ve kept them, but they do duplicate some work we already have: there&apos;s a ton of random distributions, and stats for computing quantiles, a MersenneTwister impl, etc.&lt;/p&gt;

&lt;p&gt;We could include them at first, and then do some perf testing / api twiddling over time to see which impls we want to keep where there are duplicates?&lt;/p&gt;

&lt;p&gt;The only parts of colt which are removed are hep.aida.* and corejava.* (the latter is LGPL, but is not needed).  At the top level, what&apos;s left are cern.colt, cern.jet, and cern.clhep, but the latter can be removed also, because I&apos;m pretty sure Mahout doesn&apos;t need to know the double value of Planck&apos;s constant (besides, as a former theorist, on principle I should note that the value of hbar is definitively (double)1, with no units, in natural units).&lt;/p&gt;</comment>
                            <comment id="12779058" author="tdunning" created="Tue, 17 Nov 2009 19:18:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;The colt tree could also be put into a separate module that lives alongside core, util, examples, built independently as a part of the maven build - optionally at first, activated via a build profile.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;+1 - I like this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 as well.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As far as package names, would it be better to map cern.colt.* to org.apache.mahout.colt.* ? - that way there&apos;s no potential for the old being confused for the new in builds, etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;I personally think this is the way to go, but does it reduce confusion, or increase it? People who are used to using colt will see familiar classes, but in strange places. If we&apos;re really going to overhaul the whole library over time, this makes sense, I guess.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Absolutely.&lt;/p&gt;

&lt;p&gt;Should all code be marked deprecated until it has unit tests with a comment to say why it is deprecated?  That would give us a clear visual signal that the lifeguard has left the pool.&lt;/p&gt;</comment>
                            <comment id="12779068" author="jake.mannix" created="Tue, 17 Nov 2009 19:24:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should all code be marked deprecated until it has unit tests with a comment to say why it is deprecated? That would give us a clear visual signal that the lifeguard has left the pool.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Sounds like a good plan.&lt;/p&gt;

&lt;p&gt;So if there&apos;s going to be another submodule, for colt, I&apos;m not sure if I&apos;m qualified to do that - I&apos;m not a maven expert, so writing a new pom I could (and should, and will!) learn how to do, but it would slow down this process.&lt;/p&gt;

&lt;p&gt;Is it ok if I post a patch which has the org.apache.mahout.colt.* code just living inside of core/source/main/java, and then someone else can help out by refactoring my patch to have the right build / maven setup?  Any volunteers for that?&lt;/p&gt;</comment>
                            <comment id="12779082" author="drew.farris" created="Tue, 17 Nov 2009 19:52:15 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Is it ok if I post a patch which has the org.apache.mahout.colt.* code just living inside of core/source/main/java, and then someone else can help out by refactoring my patch to have the right build / maven setup? Any volunteers for that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I know maven well enough to do this. If you post a patch, I&apos;ll do the refactoring necessary to get it set up as a module.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Should all code be marked deprecated until it has unit tests with a comment to say why it is deprecated? That would give us a clear visual signal that the lifeguard has left the pool.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 sounds like a good idea to me. It&apos;s just a matter of adding &quot;@deprecated no unit tests..&quot; tag to each class, no?&lt;/p&gt;</comment>
                            <comment id="12779111" author="gsingers" created="Tue, 17 Nov 2009 20:34:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;So I found Wolfgang Hoschek, the author of Colt, and he confirms that it is no longer maintained, and wishes us the best of luck in taking it over for ourselves if we so desired.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I seem to recall him being a Lucene contributor in the past.  Perhaps he would be willing to donate Colt to Apache?  I don&apos;t think we can just bring in it&apos;s source and claim it as ours.  Another option is we see if he would move it over to Google Code and make some of us committers on the project.  Perhaps Commons Math is interested in it, too.&lt;/p&gt;
</comment>
                            <comment id="12779116" author="otis" created="Tue, 17 Nov 2009 20:40:01 +0000"  >&lt;p&gt;Yes, Wolfgang contributed MemoryIndex.&lt;/p&gt;</comment>
                            <comment id="12779121" author="jake.mannix" created="Tue, 17 Nov 2009 20:50:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Perhaps he would be willing to donate Colt to Apache? I don&apos;t think we can just bring in it&apos;s source and claim it as ours. Another option is we see if he would move it over to Google Code and make some of us committers on the project. Perhaps Commons Math is interested in it, too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I asked him, and he said that we can go ahead and have it, he&apos;s not maintaining it anymore.  It&apos;s Apache-licensed, so can&apos;t we take it, regardless of whether he was contactable or not, as long as we attribute him and abide by the license he put on the code:&lt;/p&gt;

&lt;p&gt;    Packages cern.colt* , cern.jet*, cern.clhep&lt;/p&gt;

&lt;p&gt;    Copyright (c) 1999 CERN - European Organization for Nuclear Research.&lt;/p&gt;

&lt;p&gt;    Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation. CERN makes no representations about the suitability of this software for any purpose. It is provided &quot;as is&quot; without expressed or implied warranty.&lt;/p&gt;

&lt;p&gt;But either way, he did say we could have it.&lt;/p&gt;

&lt;p&gt;Commons math was interested at some point, as well as being interested in MTJ, but they seem to have abandoned the idea of incorporating anyone else&apos;s primitives anytime soon, as they are not willing to break their backwards compatibility reqs until 3.0 (and since 2.0 just came out a few months ago, we&apos;re talking a looooong time).&lt;/p&gt;

&lt;p&gt;Putting it on google-code is an interesting option, it would resurrect the project, from a perspective of people outside of Mahout... I kinda like that idea.  Would it slow down our ability to use it, to do this?&lt;/p&gt;</comment>
                            <comment id="12779127" author="srowen" created="Tue, 17 Nov 2009 20:57:46 +0000"  >&lt;p&gt;Regarding @deprecated: sounds a little aggressive to me, but not against it.&lt;/p&gt;

&lt;p&gt;I also like the idea of getting it donated to Apache, since it is cleanest and consistent with the intent here &amp;#8211; to move it forward in an Apache project.&lt;/p&gt;

&lt;p&gt;But failing that, its license still allows us to include, modify, distribute the code. We&apos;d have to still note its copyright and license, of course. So it&apos;s not a blocker.&lt;/p&gt;</comment>
                            <comment id="12779132" author="jake.mannix" created="Tue, 17 Nov 2009 21:04:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;I also like the idea of getting it donated to Apache, since it is cleanest and consistent with the intent here - to move it forward in an Apache project.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, I&apos;m not sure how much of the &quot;making a whole ASF project&quot; overhead is necessary just &lt;b&gt;yet&lt;/b&gt; (given how much work goes into a new project), but at least having it live someplace like google-code would give it that option.&lt;/p&gt;</comment>
                            <comment id="12779134" author="tdunning" created="Tue, 17 Nov 2009 21:09:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;+1 sounds like a good idea to me. It&apos;s just a matter of adding &quot;@deprecated no unit tests..&quot; tag to each class, no?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Correct.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Regarding @deprecated: sounds a little aggressive to me, but not against it. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I would very much like to do it so that we have some way of keeping track which parts have been validated and tested.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;.... Perhaps Commons Math is interested in it, too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Commons math has been pretty aggressively uninterested in contributions lately.  I have been involved in some patches to make distributions and sampling more usable and much more widely available.  Jake was recently trying to help get sparse matrices to a usable state.  The result was lots of API whining and complete loss of momentum for improvement.  My own opinion is that it is not practical to contribute anything more than completely trivial items to commons-math and I say that we should go forward and not wait for them.&lt;/p&gt;</comment>
                            <comment id="12779139" author="tdunning" created="Tue, 17 Nov 2009 21:13:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Well, I&apos;m not sure how much of the &quot;making a whole ASF project&quot; overhead is necessary just yet (given how much work goes into a new project), but at least having it live someplace like google-code would give it that option.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Grant,&lt;/p&gt;

&lt;p&gt;In light of this, can you clarify your comment about Google Code?&lt;/p&gt;

&lt;p&gt;Were you really thinking of forking Colt onto Google code, then making it a TLP in Apache? &lt;/p&gt;

&lt;p&gt;Or did you imagine that forking it onto Google code would be done in order to establish provenance of the code before bringing it under mahout?&lt;/p&gt;

&lt;p&gt;Would importing it into Mahout and then budding it out at the right time be a viable alternative to that?  Can a sub-project have a sub-sub-project?  (&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; in case you didn&apos;t notice)&lt;/p&gt;

&lt;p&gt;Making Colt a TLP or a commons project is an attractive long run idea, but getting it into Mahout now is nicer.&lt;/p&gt;</comment>
                            <comment id="12779227" author="jake.mannix" created="Wed, 18 Nov 2009 00:44:48 +0000"  >&lt;p&gt;While there isn&apos;t yet a consensus on where this stuff will live, for now, so we can see what we&apos;re getting into, I&apos;ve attached a patch which includes, currently in core/src/main/java, two new packages: org.apache.mahout.colt and org.apache.mahout.jet.&lt;/p&gt;

&lt;p&gt;The only modifications I&apos;ve done to these files is removing any dependency on hep.aida.&lt;b&gt;, the LGPL&apos;ed corejava.&lt;/b&gt;, and cern.clhep physical constants stuff, and I also, ironically enough, removed an ugly &quot;&#169;&quot; symbol which at least on my system was causing javac to blow up during compile (I left the rest of the entire copyright notice intact, just without the &#169; symbol in there). &lt;/p&gt;

&lt;p&gt;I added:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * @deprecated until unit tests are in place.  Until &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; time, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; class/&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; is unsupported.
 */
@Deprecated
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in front of every public class or interface.&lt;/p&gt;

&lt;p&gt;Also, to get it to compile, I added a maven dependency on Doug Lea&apos;s concurrent jar, which it turns out is accessible in apache&apos;s maven repo.&lt;/p&gt;

&lt;p&gt;If we really want this out in google-code somewhere, I can easily package up this patch and put it somewhere else.&lt;/p&gt;</comment>
                            <comment id="12779264" author="drew.farris" created="Wed, 18 Nov 2009 02:23:30 +0000"  >&lt;p&gt;As discussed earlier I&apos;ve taken Jake&apos;s patch and moved all of the colt source into a new module under mahout.&lt;/p&gt;

&lt;p&gt;After this patch is applied, colt can be built  from the top level package adding -Pcolt to the maven invocation, e.g: &lt;tt&gt;mvn clean install -Pcolt&lt;/tt&gt;. The result is &lt;tt&gt;mahout-colt-0.3-SNAPSHOT.jar&lt;/tt&gt;, which in turn could be added as a dependency in core, but I&apos;ll leave that another patch once there&apos;s stuff in core that actually uses colt.&lt;/p&gt;

&lt;p&gt;I&apos;ve removed the concurrent dependency from the core pom added by Jake&apos;s patch. Other than that and the relocation everything else is the same as waht Jake provided.&lt;/p&gt;

</comment>
                            <comment id="12779335" author="jake.mannix" created="Wed, 18 Nov 2009 06:50:44 +0000"  >&lt;p&gt;Awesome, thanks Drew.  I noticed you didn&apos;t add a &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;lt;module&amp;gt;colt&amp;lt;/module&amp;gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; line inside of the top level pom, is this to hide it from being depended on?  I just ask because it meant that IntelliJ didn&apos;t seem to want to consider the mahout-colt submodule to be a real maven submodule without that there.&lt;/p&gt;

&lt;p&gt;So what are the next steps here?  If we drop this into Mahout now, we can take advantage of it very quickly, which would be great.  Having it be it&apos;s own maven submodule means that it should be fairly easy to pull it out of Mahout entirely later, if that is the desire, right?   Grant, what are your thoughts on this?&lt;/p&gt;

&lt;p&gt;I would love to see this package up on google-code/sourceforge/github, because then other projects could use it as well, without having to depend on Mahout.  I just don&apos;t want to slow down the process of solidifying our linear primitives here in Mahout-land.  The sooner we do that, the better.&lt;/p&gt;</comment>
                            <comment id="12779384" author="kshashi" created="Wed, 18 Nov 2009 10:07:31 +0000"  >&lt;p&gt;Here is the updated patch.&lt;/p&gt;

&lt;p&gt;The dependency on colt-1.2.jar needs to be added to core/pom.xml &lt;/p&gt;

&lt;p&gt;This patch reported following 3 failures.&lt;/p&gt;

&lt;p&gt;----------&lt;br/&gt;
testAssignUnaryFunction(org.apache.mahout.matrix.TestSparseVector)  Time elapsed: 0.006 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
junit.framework.AssertionFailedError: get &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; expected:&amp;lt;0.0&amp;gt; but was:&amp;lt;-0.0&amp;gt;&lt;br/&gt;
----------&lt;br/&gt;
testDot(org.apache.mahout.matrix.TestSparseVector)  Time elapsed: 0.001 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
junit.framework.AssertionFailedError: dot expected:&amp;lt;16.939999999999998&amp;gt; but was:&amp;lt;16.94&amp;gt;&lt;br/&gt;
----------&lt;br/&gt;
testHashCodeEquivalence(org.apache.mahout.matrix.VectorTest)  Time elapsed: 0.051 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
junit.framework.AssertionFailedError: expected:&amp;lt;-1302772127&amp;gt; but was:&amp;lt;2062521697&amp;gt;&lt;br/&gt;
----------&lt;/p&gt;

&lt;p&gt;First two look innocent. &lt;/p&gt;

&lt;p&gt;The hashcode mismatch occurs because while iterating on the non-zero elements,  sparse vector gives elements in different order than dense vector. We could sort the elements before generating hashcode. Not sure if this is the optimal solution.&lt;/p&gt;
</comment>
                            <comment id="12779398" author="jake.mannix" created="Wed, 18 Nov 2009 10:41:52 +0000"  >&lt;p&gt;Shashi, is this patch just an update of the one which Drew made earlier?  I wasn&apos;t seeing any test failures when I ran them earlier on that patch...&lt;/p&gt;

&lt;p&gt;Or is your patch the first to actually use the newly-included colt code?&lt;/p&gt;</comment>
                            <comment id="12779406" author="kshashi" created="Wed, 18 Nov 2009 10:56:56 +0000"  >&lt;p&gt;My patch is only for the changes to SparseVector. I haven&apos;t applied Drew&apos;s patch. If you wish to apply my patch on Drews patch, then you need to change the import statements from cern.colt.* to org.apache.mahout.colt.*&lt;/p&gt;
</comment>
                            <comment id="12779411" author="srowen" created="Wed, 18 Nov 2009 11:13:11 +0000"  >&lt;p&gt;+1 to making this a Mahout module. There&apos;s not much difference in making this a separate project that&apos;s Mahout-related, other than that is more work. mahout-colt shouldn&apos;t depend on mahout-core or anything, so it can still be used independently.&lt;/p&gt;

&lt;p&gt;I say commit this (with proper license attribution at the moment) so we can move forward!&lt;/p&gt;

&lt;p&gt;Sounds like Shashi&apos;s patch should then follow, using mahout-colt.&lt;/p&gt;

&lt;p&gt;The unit test failures sound like either an issue in the patch, or in the Vector.hashCode() implementation. Vector elements are ordered, so equals() must pay attention to order, therefore so must hashCode(). If that&apos;s not true it&apos;s a bug. If it&apos;s a bug, fix it in your patch.&lt;/p&gt;

&lt;p&gt;With these two, can we finally commit and close this monster issue?&lt;/p&gt;</comment>
                            <comment id="12779450" author="kshashi" created="Wed, 18 Nov 2009 13:49:26 +0000"  >&lt;p&gt;I am updating the patch to ensure hashCode() is evaluated correctly. Since hashCode() needs elements in sorted order and many other routines are OK with any order, I have added an extra method to return iterator with sorted elements. Only SparseVector handles the sorting flag. &lt;/p&gt;

&lt;p&gt;This is built on Drew&apos;s patch. So, the namespaces are changed from colt to  org.apache.mahout.colt.* &lt;/p&gt;</comment>
                            <comment id="12779451" author="drew.farris" created="Wed, 18 Nov 2009 13:49:53 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Awesome, thanks Drew. I noticed you didn&apos;t add a&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&amp;lt;module&amp;gt;colt&amp;lt;/module&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;line inside of the top level pom, is this to hide it from being depended on? I just ask because it meant that IntelliJ didn&apos;t seem to want to consider the mahout-colt submodule to be a real maven submodule without that there.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Jake, the module definition for colt is defined in the colt profile which starts on line 111. This way, we won&apos;t build colt unless the colt profile is activated using the -Pcolt argument on the command-line. I haven&apos;t switched to IntelliJ yet, but I would be surprised if there were not some option to activate certain profiles in the maven project configuration somewhere. &lt;/p&gt;</comment>
                            <comment id="12779456" author="gsingers" created="Wed, 18 Nov 2009 13:58:07 +0000"  >&lt;p&gt;All sounding pretty good.  If you don&apos;t mind, I&apos;d like to review the legal bits before committing.  I have a deadline on Thursday, but can get to it after that.&lt;/p&gt;</comment>
                            <comment id="12779496" author="srowen" created="Wed, 18 Nov 2009 15:39:15 +0000"  >&lt;p&gt;I think this deserves a bit more thought. I was actually surprised to hear iterateNonZero() doesn&apos;t iterate in order?? that is surprising. Can that be right? The argument I suppose is that some callers don&apos;t need ordering so why provide it, for efficiency reasons. If that&apos;s the thinking, then hashCode() needs to simply take account of the index, not order the elements. A consistent/correct hash code doesn&apos;t necessarily need this.&lt;/p&gt;</comment>
                            <comment id="12779591" author="jake.mannix" created="Wed, 18 Nov 2009 18:50:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think this deserves a bit more thought. I was actually surprised to hear iterateNonZero() doesn&apos;t iterate in order?? that is surprising. Can that be right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m pretty sure this is in all of the hash-based implementations I&apos;ve seen.  Nobody goes to the trouble to make it a linked hash or whatnot, because that slows down insertion (to ad a different complexity class!) and takes up more memory.&lt;/p&gt;

&lt;p&gt;In my view, there&apos;s really two different sparse vector implementations: one primarily read-only and optimized for speed of iteration (and can guarantee ordering), and another which is optimized for random-access read-write actions.  The client needs to know which action they&apos;re going to be using most and make the choice of impl based on that (and if necessary, make a switch partway through: I often build up vectors using a map-based approach, then &quot;seal&quot; them into a faster read-only form if I don&apos;t need random-access reads done on them [which is the slow read-only action on int[] / double[] vectors])&lt;/p&gt;</comment>
                            <comment id="12779642" author="srowen" created="Wed, 18 Nov 2009 20:19:23 +0000"  >&lt;p&gt;Fair enough. Then my comment is just that the hash code can be defined such that it doesn&apos;t need elements in order to be computed, so shouldn&apos;t.&lt;/p&gt;</comment>
                            <comment id="12779650" author="tdunning" created="Wed, 18 Nov 2009 20:32:08 +0000"  >
&lt;blockquote&gt;&lt;p&gt;Then my comment is just that the hash code can be defined such that it doesn&apos;t need elements in order to be computed, so shouldn&apos;t.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;java.util.AbstractMap seems to think that the sum of the hash codes of all entries is good enough.  And that is good enough for me.  Using a commutative operator gets rid of the need for ordering.&lt;/p&gt;

&lt;p&gt;I would propose basically the same thing:&lt;/p&gt;

&lt;p&gt;hashcode(Matrix) = sum_row hashcode(row)&lt;/p&gt;

&lt;p&gt;hashcode(Vector) = sum_(i,v_i) hashcode&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; + hashcode(v_i)&lt;/p&gt;

&lt;p&gt;for hashing integers, the integer itself is fine.  For doubles, doubleToLongBits provides what we need (just xor the two halves of the resulting long).&lt;/p&gt;
</comment>
                            <comment id="12779651" author="jake.mannix" created="Wed, 18 Nov 2009 20:32:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;Then my comment is just that the hash code can be defined such that it doesn&apos;t need elements in order to be computed, so shouldn&apos;t.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Totally agree. &lt;/p&gt;</comment>
                            <comment id="12781128" author="gsingers" created="Sun, 22 Nov 2009 14:14:49 +0000"  >&lt;p&gt;The Colt stuff looks good, my only concern, legally, is the name, oddly enough.  I don&apos;t think we should call it Colt.  AFAICT, that name is owned by CERN and while the license allows us to bring over the code, it doesn&apos;t give us rights to the name.&lt;/p&gt;

&lt;p&gt;This patch changes the name to matrix, adds the appropriate legal bits to NOTICE.txt and LICENSE.txt&lt;/p&gt;

&lt;p&gt;This just covers the Colt stuff, it does not apply Shashi&apos;s patch.  &lt;/p&gt;

&lt;p&gt;It seems like we should just move our Matrix (currently in core) out to this package and have core have a dependency on this module.&lt;/p&gt;</comment>
                            <comment id="12781153" author="drew.farris" created="Sun, 22 Nov 2009 16:27:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;The Colt stuff looks good, my only concern, legally, is the name, oddly enough. I don&apos;t think we should call it Colt. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 for mahout-matrix&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It seems like we should just move our Matrix (currently in core) out to this package and have core have a dependency on this module.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 yes the order of dependency makes the most sense; also makes it easy for others to reuse who are interested in only the matrix library.&lt;/p&gt;</comment>
                            <comment id="12781165" author="jake.mannix" created="Sun, 22 Nov 2009 17:15:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;+1 yes the order of dependency makes the most sense; also makes it easy for others to reuse who are interested in only the matrix library.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 from me as well.  This also makes it easier to keep decomposer decoupled - it can depend on mahout-matrix, and not need mahout-core.&lt;/p&gt;

&lt;p&gt;But what about Vector?  Vector coming out of Core and moving into another module, well, everything depends on Vector, doesn&apos;t it?  In what way does this help?&lt;/p&gt;</comment>
                            <comment id="12781169" author="srowen" created="Sun, 22 Nov 2009 17:28:46 +0000"  >&lt;p&gt;I may not have a very informed perspective on this, but I would expect Vector to live right next to Matrix. I don&apos;t see a problem with it living in the matrix library. Yes, it&apos;s core &amp;#8211; more core than core actually &amp;#8211; it&apos;s in a subset of core that&apos;s supposed to be reusable externally.&lt;/p&gt;</comment>
                            <comment id="12781171" author="jake.mannix" created="Sun, 22 Nov 2009 17:35:21 +0000"  >&lt;p&gt;Ok, I agree with this - I&apos;m just wrapping my head around the dependency tree.  So mahout-matrix contains Vector and Matrix (and all the libraries-formerly-known-as-colt), and core depends on it, and then lots of stuff depends on core and it, or just core and hence matrix by transitivity (this part I don&apos;t know how it&apos;s done in Maven).&lt;/p&gt;

&lt;p&gt;Then this allows some modules to depend on mahout-matrix but &lt;b&gt;not&lt;/b&gt; on core, which is nice, yes, it&apos;s much more reusable.&lt;/p&gt;</comment>
                            <comment id="12781427" author="gsingers" created="Mon, 23 Nov 2009 15:15:55 +0000"  >&lt;p&gt;OK, I am committing the Matrix module.  Once done, I am going to move our Matrix stuff out of core and into the Matrix module.  Then, Shashi, if you can update your patch, that would be great.  From there, refactoring Vector to not have a Writable dependency (etc.) would be great, but let&apos;s handle that on a separate issue.&lt;/p&gt;</comment>
                            <comment id="12781436" author="gsingers" created="Mon, 23 Nov 2009 15:41:56 +0000"  >&lt;p&gt;OK, I moved over the matrix module, but there still needs to be some refactoring done there, as there are currently two layers of matrix packages.&lt;/p&gt;</comment>
                            <comment id="12781438" author="gsingers" created="Mon, 23 Nov 2009 15:52:47 +0000"  >&lt;p&gt;d&apos;oh, missed the correct package names.&lt;/p&gt;</comment>
                            <comment id="12781451" author="tdunning" created="Mon, 23 Nov 2009 16:26:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;From there, refactoring Vector to not have a Writable dependency (etc.) would be great, but let&apos;s handle that on a separate issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That separate issue should also include a labeling layer as well as the Writable layer.&lt;/p&gt;</comment>
                            <comment id="12781467" author="gsingers" created="Mon, 23 Nov 2009 16:37:31 +0000"  >&lt;p&gt;OK, I committed Shashi&apos;s patch and fixed the colt package name remnants.&lt;/p&gt;</comment>
                            <comment id="12789721" author="srowen" created="Sat, 12 Dec 2009 11:45:39 +0000"  >&lt;p&gt;So this is done now right? SparseVector uses OpenIntDoubleMap now.&lt;/p&gt;</comment>
                            <comment id="12789960" author="jake.mannix" created="Sun, 13 Dec 2009 23:56:14 +0000"  >&lt;p&gt;I think we can finally close this monster.  Work continues in &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-204&quot; title=&quot;Better integration of Mahout matrix capabilities with Colt Matrix additions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-204&quot;&gt;&lt;del&gt;MAHOUT-204&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-205&quot; title=&quot;Pull Writable (and anything else hadoop dependent) out of the matrix module&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-205&quot;&gt;&lt;del&gt;MAHOUT-205&lt;/del&gt;&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-206&quot; title=&quot;Separate and clearly label different SparseVector implementations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-206&quot;&gt;&lt;del&gt;MAHOUT-206&lt;/del&gt;&lt;/a&gt;, among other places.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12441473">MAHOUT-204</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12425760" name="MAHOUT-165-colt.patch" size="3471756" author="gsingers" created="Sun, 22 Nov 2009 14:14:49 +0000"/>
                            <attachment id="12420950" name="MAHOUT-165-updated.patch" size="125188" author="jake.mannix" created="Wed, 30 Sep 2009 22:49:12 +0100"/>
                            <attachment id="12425293" name="MAHOUT-165-with-colt-module.patch" size="3464665" author="drew.farris" created="Wed, 18 Nov 2009 02:23:30 +0000"/>
                            <attachment id="12425281" name="MAHOUT-165-with-colt.patch" size="3466733" author="jake.mannix" created="Wed, 18 Nov 2009 00:44:48 +0000"/>
                            <attachment id="12418688" name="MAHOUT-165.patch" size="110829" author="tdunning" created="Sat, 5 Sep 2009 01:47:16 +0100"/>
                            <attachment id="12418785" name="colt.jar" size="301462" author="kshashi" created="Mon, 7 Sep 2009 09:27:31 +0100"/>
                            <attachment id="12425338" name="mahout-165-18nov-updated.patch" size="8819" author="kshashi" created="Wed, 18 Nov 2009 13:49:26 +0000"/>
                            <attachment id="12425327" name="mahout-165-18nov.patch" size="5491" author="kshashi" created="Wed, 18 Nov 2009 10:07:31 +0000"/>
                            <attachment id="12418604" name="mahout-165-trove.patch" size="105430" author="kshashi" created="Fri, 4 Sep 2009 09:49:10 +0100"/>
                            <attachment id="12421014" name="mahout-165.patch" size="105726" author="gsingers" created="Thu, 1 Oct 2009 13:40:05 +0100"/>
                            <attachment id="12417022" name="mahout-165.patch" size="6221" author="kshashi" created="Wed, 19 Aug 2009 15:01:12 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 19 Aug 2009 14:06:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9900</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy6sv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23253</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>