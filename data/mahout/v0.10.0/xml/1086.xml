<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:16:00 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1086/MAHOUT-1086.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1086] Mean Shift Test Now Produces 4 Clusters</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1086</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Something changed in Mahout around 9/6/12 that caused TestMeanShift.testCanopyEuclideanMRJobNoClustering to return 4 clusters rather than 3. All of the other tests using the same data still return 3 clusters. No changes were made to any of the MeanShiftCanopy classes other than 1 formatting change to the driver so I&apos;m at a loss to the cause.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12609632">MAHOUT-1086</key>
            <summary>Mean Shift Test Now Produces 4 Clusters</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jeastman">Jeff Eastman</reporter>
                        <labels>
                    </labels>
                <created>Sat, 29 Sep 2012 06:10:52 +0100</created>
                <updated>Mon, 3 Feb 2014 08:05:46 +0000</updated>
                            <resolved>Thu, 11 Oct 2012 02:18:21 +0100</resolved>
                                    <version>0.7</version>
                                    <fixVersion>0.8</fixVersion>
                                    <component>Clustering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13466360" author="tdunning" created="Sun, 30 Sep 2012 00:31:57 +0100"  >&lt;p&gt;I think that this is my issue.  According to git, it find that the first bad commit was svn@1379763 &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
9929fddbc542d43f7978cb45980ae3e8855b2278 is the first bad commit
commit 9929fddbc542d43f7978cb45980ae3e8855b2278
Author: Ted Dunning &amp;lt;tdunning@apache.org&amp;gt;
Date:   Sat Sep 1 14:03:22 2012 +0000

    MAHOUT-1063 - &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; and real attributes are handled just as any numeric attribute.
    
    git-svn-id: https:&lt;span class=&quot;code-comment&quot;&gt;//svn.apache.org/repos/asf/mahout/trunk@1379763 13f79535-47bb-0310-9956-ffa450edef68
&lt;/span&gt;
:040000 040000 199b69ff766daded3774d0e8fa64cf59199e9af1 12e47b4f7f35512604c457c2dd18e40d8d0ae34a M	integration
bisect run success
Teds-MacBook-Pro-2:mahout-2[(no branch)*]$ git bisect log
git bisect start
# bad: [fa30e5fcb8f2ed8002a6676a673494273f63e679] MAHOUT-1059 - Remove memory hungry test
git bisect bad fa30e5fcb8f2ed8002a6676a673494273f63e679
# good: [556737f074a0ad97595a6b584e99bd020c9d8b23] more getters &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a factorization (minor change)
git bisect good 556737f074a0ad97595a6b584e99bd020c9d8b23
# bad: [c91eba1ad197de6f61a010b880b6cfed671051d9] MAHOUT-1059 - Add &lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt; vector test.
git bisect bad c91eba1ad197de6f61a010b880b6cfed671051d9
# bad: [ab514d84bfc4cb0c34b5a79d63d08df5f742dba0] MAHOUT-1063 - Add test &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; ARFF integers and reals.
git bisect bad ab514d84bfc4cb0c34b5a79d63d08df5f742dba0
# bad: [9929fddbc542d43f7978cb45980ae3e8855b2278] MAHOUT-1063 - &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; and real attributes are handled just as any numeric attribute.
git bisect bad 9929fddbc542d43f7978cb45980ae3e8855b2278
Teds-MacBook-Pro-2:mahout-2[(no branch)*]$ 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will look further.&lt;/p&gt;</comment>
                            <comment id="13466361" author="tdunning" created="Sun, 30 Sep 2012 00:37:37 +0100"  >&lt;p&gt;Hmm... looks like my test script wasn&apos;t installing math so it was artificially failing.&lt;/p&gt;

&lt;p&gt;More anon.&lt;/p&gt;</comment>
                            <comment id="13466440" author="tdunning" created="Sun, 30 Sep 2012 11:35:37 +0100"  >&lt;p&gt;OK.  So this is a bit of a Heisenbug.  I am not seeing consistent failures.&lt;/p&gt;

&lt;p&gt;I am about to run again with multiple replications so that success means five clean runs or some such.&lt;/p&gt;

&lt;p&gt;Thank goodness bisection is &quot;fast&quot;.&lt;/p&gt;</comment>
                            <comment id="13466480" author="tdunning" created="Sun, 30 Sep 2012 14:47:00 +0100"  >&lt;p&gt;OK.  I seem to be able replicate the problem with &lt;/p&gt;

&lt;p&gt;    trunk@1380432 &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1059&quot; title=&quot;New matrix extensions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1059&quot;&gt;&lt;del&gt;MAHOUT-1059&lt;/del&gt;&lt;/a&gt; - Abstract the idea of a cached length&lt;br/&gt;
    1cb76f01b9b504fdf33a7ef6e30afdbd7d3842ef&lt;/p&gt;

&lt;p&gt;and not before.  This change also introduces some changes to AbstractVector that might be the issue.&lt;/p&gt;

&lt;p&gt;The changes involved have to do with whether operations on sparse matrices operated sparsely.  For instance, like()&lt;br/&gt;
used to be this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    Vector result = like().assign(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This causes a dense iteration which is wrong.  The new code does this instead:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    Vector result;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isDense()) {
      result = like().assign(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      result = like();
      Iterator&amp;lt;Element&amp;gt; i = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.iterateNonZero();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (i.hasNext()) {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Element element = i.next();
        result.setQuick(element.index(), element.get());
      }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The idea is that if the source of the data is sparse, we only need to assign the non-zero elements since we know the newly minted destination will be zero filled.&lt;/p&gt;

&lt;p&gt;My feeling is that this code is correct, but there is a more complex change later in the same diff that might have changed some results.&lt;/p&gt;

&lt;p&gt;I will isolate these changes and see if I can determine what the changes were and how they impact canopy stuff.  &lt;/p&gt;</comment>
                            <comment id="13466500" author="tdunning" created="Sun, 30 Sep 2012 16:22:39 +0100"  >&lt;p&gt;OK. I think I have the problem isolated even if I don&apos;t understand it.  In getDistanceSquared, I separate out the computation of one operand&apos;s squared length and push it back into that operand for caching.  The code is&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    Iterator&amp;lt;Element&amp;gt; it = sparseAccessed.iterateNonZero();
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; d = randomlyAccessed.getLengthSquared();
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; d2 = 0;
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; dot = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (it.hasNext()) {
      Element e = it.next();
      &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value = e.get();
      d2 += value * value;
      dot += value * randomlyAccessed.getQuick(e.index());
    }
    &lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; d &amp;gt; -1.0e-9; // round-off errors should never be too far off!
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; r1 = &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.abs(d + d2 - 2 * dot);
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; r2 = oldDistanceSquared(v);
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; error = &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.abs(r1 - r2) / r1;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (error &amp;gt; 1e-14) {
      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.err.printf(&lt;span class=&quot;code-quote&quot;&gt;&quot;Discrepancy %.3f\n&quot;&lt;/span&gt;, error);
    }
&lt;span class=&quot;code-comment&quot;&gt;//    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (sparseAccessed &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; LengthCachingVector) {
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//      ((LengthCachingVector) sparseAccessed).setLengthSquared(d2);
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//    }
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; r2;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The commented code is where the cache is updated.  If these lines are commented, the problem does not happen.  If these lines are uncommented, it does happen.  &lt;/p&gt;

&lt;p&gt;My problem here is that I can&apos;t yet understand what the problem is.  I also don&apos;t understand how this is different from what we had before.  I have also have put a test into the place that the cache is updated and don&apos;t see that saving this causes a problem.&lt;/p&gt;

&lt;p&gt;I think that we have a problem where some other code somewhere is misusing this cache.  I am going to start a wide-ranging inspection to see what is going on.  That is going to take quite a while, especially since I am unlikely to have another full day to beat on this for a while.&lt;/p&gt;</comment>
                            <comment id="13466654" author="tdunning" created="Mon, 1 Oct 2012 06:59:26 +0100"  >&lt;p&gt;OK.  The problem was round-off errors introduced by the new formulation.  The caching of squared lengths apparently changed which round-off errors occurred which triggered a change in the (excessively) sensitive clustering tests.&lt;/p&gt;

&lt;p&gt;Patch coming shortly.&lt;/p&gt;</comment>
                            <comment id="13466655" author="tdunning" created="Mon, 1 Oct 2012 07:10:08 +0100"  >&lt;p&gt;Here is a patch in git format.  I can&apos;t remember if jenkins will apply that cleanly or not.&lt;/p&gt;

&lt;p&gt;The problem was round-off errors that happened differently when the ordering of operations is different.  That ordering is changed when caching is changed and this problem comes up.&lt;/p&gt;

&lt;p&gt;The expected result of this patch is that the old error will come back (reversed).  That is, you should see&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Failed tests:   testCanopyEuclideanMRJobNoClustering(org.apache.mahout.clustering.meanshift.TestMeanShift): count expected:&amp;lt;4&amp;gt; but was:&amp;lt;3&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13472155" author="tdunning" created="Tue, 9 Oct 2012 06:46:33 +0100"  >&lt;p&gt;Here is a patch that deals with the issue as well as related issues. It includes many new tests and increases coverage generally.&lt;/p&gt;</comment>
                            <comment id="13473754" author="tdunning" created="Thu, 11 Oct 2012 02:18:21 +0100"  >&lt;p&gt;Committed this patch.  This will set up &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1091&quot; title=&quot;Bug in SequentialAccessSparseVector full iteration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1091&quot;&gt;&lt;del&gt;MAHOUT-1091&lt;/del&gt;&lt;/a&gt; for committing.&lt;/p&gt;</comment>
                            <comment id="13473820" author="hudson" created="Thu, 11 Oct 2012 05:02:13 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #1695 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1695/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1695/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1086&quot; title=&quot;Mean Shift Test Now Produces 4 Clusters&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1086&quot;&gt;&lt;del&gt;MAHOUT-1086&lt;/del&gt;&lt;/a&gt; - Deal with round-off errors in computing L_2 distances.  Add special case to get higher accuracy when vector difference is small, merge AbstractVectorTest and AbstractTestVector, fix like() bug in Centroid and WeightedVector. (Revision 1396888)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
tdunning : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1396888&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1396888&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/meanshift/TestMeanShift.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/Centroid.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DelegatingVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/LengthCachingVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/WeightedVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractTestVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractVectorTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/CentroidTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestDenseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestRandomAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSequentialAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/WeightedVectorTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12548363" name="0001-MAHOUT-1086-Deal-with-round-off-errors-in-computing-.patch" size="59776" author="tdunning" created="Tue, 9 Oct 2012 06:46:33 +0100"/>
                            <attachment id="12547195" name="0001-MAHOUT-1086-Deal-with-round-off-errors-in-computing-.patch" size="12099" author="tdunning" created="Mon, 1 Oct 2012 07:10:08 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 29 Sep 2012 23:31:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>240721</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxuzn3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4597</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>