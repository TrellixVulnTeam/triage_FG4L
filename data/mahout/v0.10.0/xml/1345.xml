<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:18:53 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1345/MAHOUT-1345.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1345] Enable randomised testing for all Mahout modules</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1345</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;When enabling randomised testing for all modules I found a few tests became unstable or even fail deterministically due to lingering threads. The attached patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;defines the randomised testing dependency in our parent pom&lt;/li&gt;
	&lt;li&gt;re-uses said dependencies in all depending modules (makes upgrading easier as the version number needs to be changed in just one place)&lt;/li&gt;
	&lt;li&gt;adds several code changes that fixed the failures due to lingering threads for me on my machine. I&apos;d greatly appreciate input a) from those who wrote the respective code and b) others who ran the tests with these changes to make sure there are no other tests that suffer from the same issues.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Warning: I touched quite a few bits and pieces I&apos;m not intimately familiar with over the last few weeks  (whenever I had a few spare minutes) - second pair of eyes needed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12672389">MAHOUT-1345</key>
            <summary>Enable randomised testing for all Mahout modules</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="smarthi">Suneel Marthi</assignee>
                                    <reporter username="isabel">Isabel Drost-Fromm</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Oct 2013 19:34:20 +0100</created>
                <updated>Mon, 3 Feb 2014 07:57:16 +0000</updated>
                            <resolved>Sun, 1 Dec 2013 17:49:41 +0000</resolved>
                                    <version>0.8</version>
                                    <fixVersion>0.9</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13787679" author="sslavic" created="Sun, 6 Oct 2013 17:54:13 +0100"  >&lt;p&gt;+1 for dependency changes, and build/tests pass locally.&lt;/p&gt;</comment>
                            <comment id="13788083" author="dweiss" created="Mon, 7 Oct 2013 12:29:12 +0100"  >&lt;p&gt;This looks good, Isabel! Just for the sake of clarity &amp;#8211; perhaps it&apos;ll be useful for others:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     executor.awaitTermination(10, TimeUnit.SECONDS);
...
     executor.shutdown();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The executors framework in Java doesn&apos;t wait for any threads it creates to die (even after the executor is shutdown) and the the test framework will check for any remaining threads right after the test is over (and fail if there are any). To add some &quot;slack time&quot; to allow any spawned threads to die, you can use ThreadLeakLingering (and I see that you already do use this in certain cases).&lt;/p&gt;

&lt;p&gt;In Lucene/Solr this is sort of handled by having a separate top-level class from which all test suites inherit, all annotations configuring the framework are defined there. &lt;/p&gt;</comment>
                            <comment id="13829606" author="smarthi" created="Fri, 22 Nov 2013 02:39:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=isabel&quot; class=&quot;user-hover&quot; rel=&quot;isabel&quot;&gt;Isabel Drost-Fromm&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sslavic&quot; class=&quot;user-hover&quot; rel=&quot;sslavic&quot;&gt;Stevo Slavic&lt;/a&gt; Applied this patch and I am now seeing random test failures. I am running on Mac OS 10.8 Mountain Lion.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 3.96 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.text.LuceneSegmentInputFormatTest
testGetSplits(org.apache.mahout.text.LuceneSegmentInputFormatTest)  Time elapsed: 3.295 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from TEST scope at testGetSplits(org.apache.mahout.text.LuceneSegmentInputFormatTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=14, name=AWT-Shutdown, state=TIMED_WAITING, group=main]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at sun.awt.AWTAutoShutdown.run(AWTAutoShutdown.java:284)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
	at __randomizedtesting.SeedInfo.seed([D01FBCB7576C7478:647C7E93467BBD35]:0)

Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.649 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.text.LuceneSegmentInputSplitTest
testGetSegmentNonExistingSegment(org.apache.mahout.text.LuceneSegmentInputSplitTest)  Time elapsed: 3.571 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from TEST scope at testGetSegmentNonExistingSegment(org.apache.mahout.text.LuceneSegmentInputSplitTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=14, name=AWT-Shutdown, state=TIMED_WAITING, group=main]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at sun.awt.AWTAutoShutdown.run(AWTAutoShutdown.java:284)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
	at __randomizedtesting.SeedInfo.seed([760C118FE5998411:31C8F60AD35952AF]:0)

Running org.apache.mahout.utils.email.MailProcessorTest
Running org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest
Running org.apache.mahout.utils.regex.RegexMapperTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.902 sec - in org.apache.mahout.utils.email.MailProcessorTest
Tests run: 3, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 6.855 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.text.LuceneSegmentRecordReaderTest
testNonExistingField(org.apache.mahout.text.LuceneSegmentRecordReaderTest)  Time elapsed: 0.955 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from TEST scope at testNonExistingField(org.apache.mahout.text.LuceneSegmentRecordReaderTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=17, name=AWT-Shutdown, state=TIMED_WAITING, group=main]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at sun.awt.AWTAutoShutdown.run(AWTAutoShutdown.java:284)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
	at __randomizedtesting.SeedInfo.seed([BAD70A9A105E6C9:F7B1E5646F3C1F87]:0)

Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.005 sec - in org.apache.mahout.text.SequenceFilesFromMailArchivesTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.007 sec - in org.apache.mahout.utils.nlp.collocations.llr.BloomTokenFilterTest
Tests run: 5, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 8.123 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest
testNewLucene2SeqConfiguration(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest)  Time elapsed: 3.33 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from TEST scope at testNewLucene2SeqConfiguration(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=14, name=AWT-Shutdown, state=TIMED_WAITING, group=main]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at sun.awt.AWTAutoShutdown.run(AWTAutoShutdown.java:284)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
	at __randomizedtesting.SeedInfo.seed([E764A6A6A163BB7D:C2C9DD1521FA15E]:0)

testRunOptionalArguments(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest)  Time elapsed: 2.256 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from TEST scope at testRunOptionalArguments(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=20, name=AWT-Shutdown, state=TIMED_WAITING, group=main]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at sun.awt.AWTAutoShutdown.run(AWTAutoShutdown.java:284)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
	at __randomizedtesting.SeedInfo.seed([E764A6A6A163BB7D:92E891124EB97769]:0)

testRunInvalidQuery(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest)  Time elapsed: 1.416 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 2 threads leaked from TEST scope at testRunInvalidQuery(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=25, name=communication thread, state=TIMED_WAITING, group=TGRP-SequenceFilesFromLuceneStorageDriverTest]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at org.apache.hadoop.mapred.Task$TaskReporter.run(Task.java:658)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
   2) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=26, name=communication thread, state=TIMED_WAITING, group=TGRP-SequenceFilesFromLuceneStorageDriverTest]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at org.apache.hadoop.mapred.Task$TaskReporter.run(Task.java:658)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
	at __randomizedtesting.SeedInfo.seed([E764A6A6A163BB7D:F45193CA73B3494C]:0)

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13829750" author="dweiss" created="Fri, 22 Nov 2013 07:17:10 +0000"  >&lt;p&gt;This means the code starts (touches) an AWT subsystem somehow and starts a background system thread. Workarounds:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;add java.awt.headless=true to junit4 sysprops:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;lt;sysproperty key=&lt;span class=&quot;code-quote&quot;&gt;&quot;java.awt.headless&quot;&lt;/span&gt; value=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;ignore this particular system thread by adding:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@@ThreadLeakFilters(defaultFilters = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;, filters = {
    QuickPatchThreadsFilter.class
})
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to all test classes where this is the case (or a subclass of all test classes). QuickPatchThreadsFilter is a custom thread filter from Lucene, but I believe default filter set also ignores AWT subsystem so just defaultFilters=true should do.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="13830217" author="smarthi" created="Fri, 22 Nov 2013 18:45:11 +0000"  >&lt;p&gt;FYI.. these failures are not random and are happening for Lucene tests (lucene2seq, LuceneIterableTest, TestClusterDumper etc..). All tests that have Lucene API calls.&lt;/p&gt;</comment>
                            <comment id="13830289" author="dweiss" created="Fri, 22 Nov 2013 20:44:19 +0000"  >&lt;p&gt;Lucene is tested with java.awt.headless=true. Might be that jmx bean or something is starting an awt thread &amp;#8211; I vaguely remember this to be the case. If you add java.awt.headless=true to your tests this won&apos;t be happening.&lt;/p&gt;</comment>
                            <comment id="13830745" author="dweiss" created="Sat, 23 Nov 2013 19:17:21 +0000"  >&lt;p&gt;I&apos;ve applied this patch to the trunk, out of curiosity. This seems to be the well known problem with Mac Java &amp;#8211; it starts an AWT thread when mx bean is loaded. I believe this has been fixed in a newer Lucene version, but I&apos;d need a Mac to actually verify this.&lt;/p&gt;</comment>
                            <comment id="13830773" author="srowen" created="Sat, 23 Nov 2013 21:04:28 +0000"  >&lt;p&gt;Calling awaitTermination before shutdown won&apos;t do anything. It is something you call after shutdown. So I think this patch has that point reversed.&lt;/p&gt;

&lt;p&gt;java.awt.headless should be set, but it already is AFAICT in the pom.&lt;/p&gt;

&lt;p&gt;There is one place where the patch moves a call to close() inside a catch block &amp;#8211; better, but better still in a finally block.&lt;/p&gt;</comment>
                            <comment id="13830784" author="smarthi" created="Sat, 23 Nov 2013 22:19:33 +0000"  >&lt;p&gt;Dawid/Sean, &lt;/p&gt;

&lt;p&gt;I updated the patch with Sean&apos;s comments and also upgraded Lucene to 4.5.1 (per Dawid&apos;s earlier comment). That seems to have done it. I am seeing this one test below (from lucene2seq) that&apos;s failing. I haven&apos;t had time to look at it yet, will do so later today. &lt;/p&gt;

&lt;p&gt;Upgrading Lucene to 4.5.1 seems to have fixed the other Lucene test failures on Mac OS 10.8.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 8.74 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest
testRunInvalidQuery(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest)  Time elapsed: 5.295 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 2 threads leaked from TEST scope at testRunInvalidQuery(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=17, name=communication thread, state=TIMED_WAITING, group=TGRP-SequenceFilesFromLuceneStorageDriverTest]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at org.apache.hadoop.mapred.Task$TaskReporter.run(Task.java:658)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
   2) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=18, name=communication thread, state=TIMED_WAITING, group=TGRP-SequenceFilesFromLuceneStorageDriverTest]
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
        at org.apache.hadoop.mapred.Task$TaskReporter.run(Task.java:658)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:695)
	at __randomizedtesting.SeedInfo.seed([1461D3656229CEF6:754E609B0F93CC7]:0)

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13830872" author="smarthi" created="Sun, 24 Nov 2013 05:42:12 +0000"  >&lt;p&gt;Attached is the updated patch from today&apos;s codebase, the patch works on Mac OS for Lucene &amp;gt;= 4.4 (from present 4.3.1).  The workaround for the failing test in my previous comment is to add &quot;-xm sequential&quot; which seems to  fix it, will work with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=frankscholten&quot; class=&quot;user-hover&quot; rel=&quot;frankscholten&quot;&gt;Frank Scholten&lt;/a&gt; later to fix that test. &lt;/p&gt;

&lt;p&gt;Guess, we will be upgrading to the latest stable version of Lucene and Solr prior to 0.9 release.&lt;/p&gt;</comment>
                            <comment id="13830978" author="frankscholten" created="Sun, 24 Nov 2013 16:51:01 +0000"  >&lt;p&gt;I applied the pacth, ran a mvn clean install on Ubuntu 13.04 and OpenJDK 1.7.0_25 and got this stacktrace:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
17:28:25 Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 79.239 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.clustering.lda.cvb.TestCVBModelTrainer
17:28:25 testInMemoryCVB0(org.apache.mahout.clustering.lda.cvb.TestCVBModelTrainer)  Time elapsed: 13.716 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
17:28:25 com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from TEST scope at testInMemoryCVB0(org.apache.mahout.clustering.lda.cvb.TestCVBModelTrainer): 
17:28:25    1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=358, name=pool-154-thread-1, state=RUNNABLE, group=TGRP-TestCVBModelTrainer]
17:28:25         at sun.misc.Unsafe.unpark(Native Method)
17:28:25         at java.util.concurrent.locks.LockSupport.unpark(LockSupport.java:152)
17:28:25         at java.util.concurrent.locks.AbstractQueuedSynchronizer.unparkSuccessor(AbstractQueuedSynchronizer.java:662)
17:28:25         at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1263)
17:28:25         at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:460)
17:28:25         at java.util.concurrent.ThreadPoolExecutor.tryTerminate(ThreadPoolExecutor.java:712)
17:28:25         at java.util.concurrent.ThreadPoolExecutor.processWorkerExit(ThreadPoolExecutor.java:1006)
17:28:25         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1163)
17:28:25         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
17:28:25         at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:724)
17:28:25 	at __randomizedtesting.SeedInfo.seed([E9C2EFFF8F543D07:7939EAE64DE10951]:0)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t know how to interpret this yet. I&apos;ll read up &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dweiss&quot; class=&quot;user-hover&quot; rel=&quot;dweiss&quot;&gt;Dawid Weiss&lt;/a&gt;&apos; code and docs on randomized testing first. Would be nice feature!&lt;/p&gt;

&lt;p&gt;A few links I am looking at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.carrotsearch.com/randomizedtesting-concept.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://labs.carrotsearch.com/randomizedtesting-concept.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/carrotsearch/randomizedtesting/tree/master/examples/maven/src/main/java/com/carrotsearch/examples/randomizedrunner&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/carrotsearch/randomizedtesting/tree/master/examples/maven/src/main/java/com/carrotsearch/examples/randomizedrunner&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13830981" author="dweiss" created="Sun, 24 Nov 2013 17:05:07 +0000"  >&lt;p&gt;Frank, this means a thread was created in the scope of a test (or suite &amp;#8211; this is configurable) and then wasn&apos;t cleaned up properly. The problem with thread pools is that they use unnamed threads by default (&quot;pool-154-thread-1&quot;); if possible it&apos;s always best to use a custom thread factory that names threads so that they can be tracked back to their source (the pool that generates them).&lt;/p&gt;

&lt;p&gt;In certain cases thread pools can be shut down and not wait for the forked threads to perish. There is little one can do about it but wait &amp;#8211; there is an annotation in rr that does just that (@@ThreadLeakLingering(linger = 2000)).&lt;/p&gt;

&lt;p&gt;If you&apos;re looking for some advanced scenarios take a look at Lucene source code (LuceneTestCase class).&lt;/p&gt;</comment>
                            <comment id="13830996" author="frankscholten" created="Sun, 24 Nov 2013 17:54:12 +0000"  >&lt;p&gt;Thanks for the clarification, Dawid!&lt;/p&gt;

&lt;p&gt;You mean like the example in &lt;a href=&quot;https://github.com/carrotsearch/randomizedtesting/blob/master/examples/maven/src/main/java/com/carrotsearch/examples/randomizedrunner/Test010Lingering.java?&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/carrotsearch/randomizedtesting/blob/master/examples/maven/src/main/java/com/carrotsearch/examples/randomizedrunner/Test010Lingering.java?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am not familiar with the CVB0 code but to me it seems the test fails because the CachingCVB0mapper starts a few threads via TopicModel and/or ModelTrainer which are not cleaned up properly. Correct?&lt;/p&gt;

&lt;p&gt;I added an ThreadLeakLingering annotation on TestCVBModelTrainer and now my build fails on org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest. I&apos;ll take a look at that one.&lt;/p&gt;

&lt;p&gt;How do you determine a good value for the linger property?&lt;/p&gt;</comment>
                            <comment id="13831014" author="frankscholten" created="Sun, 24 Nov 2013 19:08:39 +0000"  >&lt;p&gt;OK so now I reached the lucene2seq test and added a ThreadLeakLingering(linger=1000) annotation on it but I get:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
19:46:38 Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.492 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest
19:46:38 testRunInvalidQuery(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest)  Time elapsed: 2.925 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
19:46:38 com.carrotsearch.randomizedtesting.ThreadLeakError: 2 threads leaked from TEST scope at testRunInvalidQuery(org.apache.mahout.text.SequenceFilesFromLuceneStorageDriverTest): 
19:46:38    1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=23, name=communication thread, state=TIMED_WAITING, group=TGRP-SequenceFilesFromLuceneStorageDriverTest]
19:46:38         at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
19:46:38         at org.apache.hadoop.mapred.Task$TaskReporter.run(Task.java:658)
19:46:38         at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:724)
19:46:38    2) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=24, name=communication thread, state=TIMED_WAITING, group=TGRP-SequenceFilesFromLuceneStorageDriverTest]
19:46:38         at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
19:46:38         at org.apache.hadoop.mapred.Task$TaskReporter.run(Task.java:658)
19:46:38         at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:724)
19:46:38 	at __randomizedtesting.SeedInfo.seed([2D997537AD6A02A0:3EAC405B7FBAF091]:0)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two Hadoop task communication threads running. Shouldn&apos;t these be destroyed if a ThreadLeakLingering annotation is added?&lt;/p&gt;</comment>
                            <comment id="13831019" author="smarthi" created="Sun, 24 Nov 2013 19:15:03 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=frankscholten&quot; class=&quot;user-hover&quot; rel=&quot;frankscholten&quot;&gt;Frank Scholten&lt;/a&gt; ThreadLeakLingering doesn&apos;t destroy hose threads, I tried setting linger = 1000, 10000, 20000, 30000; but to no avail.  One thing I did notice though, if I remove the arg &quot;-q invalid:query&quot; and modify the subsequent assertions than this passes (in MR).  What&apos;s different with  &quot;-q invalid:query&quot;?&lt;/p&gt;</comment>
                            <comment id="13831026" author="dweiss" created="Sun, 24 Nov 2013 19:29:38 +0000"  >&lt;p&gt;There is no way to reliably &quot;kill&quot; threads in Java. You can try to interrupt them, but in general threads can catch exceptions and respin in a loop. It is the test&apos;s duty to clean up any resources it starts &amp;#8211; including shutting down any threads or thread pools it starts up.&lt;/p&gt;

&lt;p&gt;If you have suite-level initialized stuff (thread pools or resources), like BeforeClass or class rules, then detect thread leaks at the suite level (after all tests of a class are over), not in every test. This is done by declaring &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@ThreadLeakScope(Scope.SUITE)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thread lingering is meant only for those corner cases when one cannot join all threads that are to be terminated before the test is over (and in effect the thread may be still in an alive state). Thread pools are one example of when this is the case (no direct control over thread pool threads, although one can shutdown the threadpool itself).&lt;/p&gt;

&lt;p&gt;In general all this is a bit complex, but getting it to work is well worth overcoming the initial learning curve. You get a (soft, although valuable) guarantee that no test stomps over each other by leaving threads that do something in the background.&lt;/p&gt;</comment>
                            <comment id="13831042" author="frankscholten" created="Sun, 24 Nov 2013 20:30:18 +0000"  >&lt;p&gt;Aha, good to know. What happens in the &apos;invalid query&apos; test is that the initialize method of the LuceneSegmentRecordReader throws an IllegalArgument exception when creating the scorer. By that time the two map taks are already created. Suneel showed that waiting for them does not work. Is there something in the Hadoop API we can use to influence these threads somehow?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Nov 24, 2013 9:19:46 PM org.apache.hadoop.mapred.Task initialize
INFO:  Using ResourceCalculatorPlugin : org.apache.hadoop.util.LinuxResourceCalculatorPlugin@1347dad
Nov 24, 2013 9:19:46 PM org.apache.hadoop.mapred.MapTask runNewMapper
INFO: Processing split: org.apache.mahout.text.LuceneSegmentInputSplit@1649784
Nov 24, 2013 9:19:46 PM org.apache.hadoop.mapred.LocalJobRunner$Job$MapTaskRunnable run
INFO: Starting task: attempt_local1401304847_0001_m_000001_0
Nov 24, 2013 9:19:46 PM org.apache.hadoop.mapred.Task initialize
INFO:  Using ResourceCalculatorPlugin : org.apache.hadoop.util.LinuxResourceCalculatorPlugin@8a6ff9
Nov 24, 2013 9:19:46 PM org.apache.hadoop.mapred.MapTask runNewMapper
INFO: Processing split: org.apache.mahout.text.LuceneSegmentInputSplit@b413de
Nov 24, 2013 9:19:46 PM org.apache.hadoop.mapred.LocalJobRunner$Job run
INFO: Map task executor complete.
Nov 24, 2013 9:19:46 PM org.apache.hadoop.mapred.LocalJobRunner$Job run
WARNING: job_local1401304847_0001
java.lang.Exception: java.io.IOException: Could not create query scorer &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; query: invalid:query
	at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:354)
Caused by: java.io.IOException: Could not create query scorer &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; query: invalid:query
	at org.apache.mahout.text.LuceneSegmentRecordReader.initialize(LuceneSegmentRecordReader.java:72)
	at org.apache.mahout.text.LuceneSegmentInputFormat.createRecordReader(LuceneSegmentInputFormat.java:76)
	at org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.&amp;lt;init&amp;gt;(MapTask.java:488)
	at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:731)
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:364)
	at org.apache.hadoop.mapred.LocalJobRunner$Job$MapTaskRunnable.run(LocalJobRunner.java:223)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:724)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13831047" author="dweiss" created="Sun, 24 Nov 2013 20:42:52 +0000"  >&lt;p&gt;I&apos;ve no idea &amp;#8211; it&apos;s been a long time since I worked with Hadoop. I&apos;m pretty sure it should have an API to shut it down though? Anyway, if nothing else works you can also disable thread leak checking for a class or test.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@ThreadLeakScope(Scope.NONE)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13831048" author="smarthi" created="Sun, 24 Nov 2013 20:47:13 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=frankscholten&quot; class=&quot;user-hover&quot; rel=&quot;frankscholten&quot;&gt;Frank Scholten&lt;/a&gt; There is a Job.killJob() but not sure how to retrieve the Job object given the Configuration.&lt;/p&gt;

&lt;p&gt;The other option is to not invoke the MR version of this test which is what I ended up doing (add &quot;-xm sequential&quot;) flag (like what&apos;s being done for testRun()).&lt;/p&gt;</comment>
                            <comment id="13831078" author="isabel" created="Sun, 24 Nov 2013 22:41:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=frankscholten&quot; class=&quot;user-hover&quot; rel=&quot;frankscholten&quot;&gt;Frank Scholten&lt;/a&gt; Without having checked the code: You create the threads during map task initialisation? Do you ever stop them e.g. when cleanup is called?&lt;/p&gt;</comment>
                            <comment id="13831224" author="frankscholten" created="Mon, 25 Nov 2013 07:26:28 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=isabel&quot; class=&quot;user-hover&quot; rel=&quot;isabel&quot;&gt;Isabel Drost-Fromm&lt;/a&gt; The threads I am talking about are the map tasks themselves, part of the lucene2seq MR job. The initialize method of the RecordReader throws an exception due to the invalid query, which is correct because that is what we are testing. However this exception runs after the map tasks are created. A Hadoop job can be aborted by throwing an exception in the RecordReader but this does not properly clean up the map task threads before the JUnit test exits. So my question is what&apos;s the Hadoop way of cleaning up these map tasks when the RecordReader cannot continue, in this case because of an invalid query. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=smarthi&quot; class=&quot;user-hover&quot; rel=&quot;smarthi&quot;&gt;Suneel Marthi&lt;/a&gt; I see I can get the job ID via the context but dont&apos;t know how to get to the Job. On the other hand, like &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dweiss&quot; class=&quot;user-hover&quot; rel=&quot;dweiss&quot;&gt;Dawid Weiss&lt;/a&gt; said, maybe we should not check thread leaks at all in this particular testcase.&lt;/p&gt;</comment>
                            <comment id="13831226" author="dweiss" created="Mon, 25 Nov 2013 07:31:53 +0000"  >&lt;p&gt;Isn&apos;t it that Hadoop assumes it pretty much owns the JVM? If so then, ideally, you could fork a separate process to run the job and then terminate the process... although there is no API to do that from Java either (at least not until 1.8) &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Killing things is not what Java excels at.&lt;/p&gt;</comment>
                            <comment id="13834134" author="smarthi" created="Wed, 27 Nov 2013 20:53:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=isabel&quot; class=&quot;user-hover&quot; rel=&quot;isabel&quot;&gt;Isabel Drost-Fromm&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=frankscholten&quot; class=&quot;user-hover&quot; rel=&quot;frankscholten&quot;&gt;Frank Scholten&lt;/a&gt;  We can get past the last failing test by running in &apos;-xm sequential&apos; mode, otherwise is this good to go?&lt;/p&gt;</comment>
                            <comment id="13834681" author="isabel" created="Thu, 28 Nov 2013 10:02:48 +0000"  >&lt;p&gt;Fine by me.&lt;/p&gt;</comment>
                            <comment id="13834850" author="frankscholten" created="Thu, 28 Nov 2013 14:02:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=smarthi&quot; class=&quot;user-hover&quot; rel=&quot;smarthi&quot;&gt;Suneel Marthi&lt;/a&gt;] Agreed.&lt;/p&gt;</comment>
                            <comment id="13834935" author="smarthi" created="Thu, 28 Nov 2013 15:48:12 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=isabel&quot; class=&quot;user-hover&quot; rel=&quot;isabel&quot;&gt;Isabel Drost-Fromm&lt;/a&gt;  This can be committed to trunk, we have a separate JIRA to upgrade to Lucene 4.6.0 (if possible in 0.9 timelines) else we should upgrade to lucene 4.5.1 to not see failures on Mac OS.&lt;/p&gt;</comment>
                            <comment id="13836023" author="smarthi" created="Sun, 1 Dec 2013 13:13:21 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=frankscholten&quot; class=&quot;user-hover&quot; rel=&quot;frankscholten&quot;&gt;Frank Scholten&lt;/a&gt;  Is there a more recent patch then the last one from Nov 24 for this issue?&lt;/p&gt;</comment>
                            <comment id="13836034" author="frankscholten" created="Sun, 1 Dec 2013 14:24:41 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=smarthi&quot; class=&quot;user-hover&quot; rel=&quot;smarthi&quot;&gt;Suneel Marthi&lt;/a&gt; No but I will create one.&lt;/p&gt;</comment>
                            <comment id="13836035" author="frankscholten" created="Sun, 1 Dec 2013 14:30:45 +0000"  >&lt;p&gt;The current patch does not give me any build failures.&lt;/p&gt;</comment>
                            <comment id="13836078" author="smarthi" created="Sun, 1 Dec 2013 17:49:29 +0000"  >&lt;p&gt;Patch committed to trunk. Had to upgrade Lucene to 4.5.1 for the Lucene tests to pass on Mac OS.&lt;/p&gt;</comment>
                            <comment id="13836084" author="hudson" created="Sun, 1 Dec 2013 18:25:24 +0000"  >&lt;p&gt;FAILURE: Integrated in Mahout-Quality #2345 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2345/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2345/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1345&quot; title=&quot;Enable randomised testing for all Mahout modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1345&quot;&gt;&lt;del&gt;MAHOUT-1345&lt;/del&gt;&lt;/a&gt;: Enable randomised testing for all Mahout modules (smarthi: rev 1546827)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/pom.xml&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/pom.xml&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1345&quot; title=&quot;Enable randomised testing for all Mahout modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1345&quot;&gt;&lt;del&gt;MAHOUT-1345&lt;/del&gt;&lt;/a&gt;: Enable randomised testing for all Mahout modules (smarthi: rev 1546826)&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/pom.xml&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/pom.xml&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1345&quot; title=&quot;Enable randomised testing for all Mahout modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1345&quot;&gt;&lt;del&gt;MAHOUT-1345&lt;/del&gt;&lt;/a&gt;: Enable randomised testing for all Mahout modules (smarthi: rev 1546825)&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/.gitignore&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/CHANGELOG&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/CachingCVB0Mapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/CachingCVB0PerplexityMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/lucene/AnalyzerUtils.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/recommender/svd/ALSWRFactorizerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/recommender/svd/ParallelSGDFactorizerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/ModelSerializerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/ep/EvolutionaryProcessTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/HighDFWordsPrunerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/encoders/TextValueEncoderTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/pom.xml&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/NewsgroupHelper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneStorageConfiguration.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaAnalyzer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/regex/AnalyzerTransformer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/TestClusterDumper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/text/AbstractLuceneStorageTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/nlp/collocations/llr/BloomTokenFilterTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/CachedTermInfoTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/DriverTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/LuceneIterableTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/AsyncEigenVerifier.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/MahoutTestCase.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/decomposer/hebbian/TestHebbianSolver.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13836089" author="smarthi" created="Sun, 1 Dec 2013 18:49:47 +0000"  >&lt;p&gt;Following test failed in Hudson build&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 35.838 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest
testOmegaTRightMultiply(org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest)  Time elapsed: 0.192 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 5 threads leaked from TEST scope at testOmegaTRightMultiply(org.apache.mahout.math.hadoop.stochasticsvd.LocalSSVDPCASparseTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=108, name=pool-8-thread-8, state=TERMINATED, group={&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; group}]
        at (empty stack)
	at __randomizedtesting.SeedInfo.seed([784E5A6F09573D1:1727E47CFE1A98B7]:0)

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don&apos;t see the failure happen locally on my machine (Mac OS), will look at it later today. Not sure if this happens on a Ubuntu instance. &lt;/p&gt;</comment>
                            <comment id="13836092" author="dweiss" created="Sun, 1 Dec 2013 19:05:18 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=108, name=pool-8-thread-8, state=TERMINATED, group={&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; group}]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Probably a slower system &amp;#8211; the thread is in TERMINATED state but not dead yet. Add some lingering to MahoutTestCase (it also configures other stuff):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * Superclass of all Mahout test cases.
 */
@ThreadLeakScope(Scope.SUITE)
@ThreadLeakAction({Action.WARN, Action.INTERRUPT})
@ThreadLeakLingering(linger = 20000) &lt;span class=&quot;code-comment&quot;&gt;// Wait a bit longer &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; leaked threads to die.
&lt;/span&gt;@ThreadLeakZombies(Consequence.IGNORE_REMAINING_TESTS)
@TimeoutSuite(millis = 2 * TimeUnits.HOUR)
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class MahoutTestCase &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; RandomizedTest {
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13836132" author="smarthi" created="Sun, 1 Dec 2013 22:23:22 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dweiss&quot; class=&quot;user-hover&quot; rel=&quot;dweiss&quot;&gt;Dawid Weiss&lt;/a&gt;.  It does seem like a slow system, the most recent Hudson build was successful. Nevertheless will add the annotations from your previous comment to MahoutTestCase to prevent this from happening in future.&lt;/p&gt;</comment>
                            <comment id="13836143" author="smarthi" created="Sun, 1 Dec 2013 23:38:21 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dweiss&quot; class=&quot;user-hover&quot; rel=&quot;dweiss&quot;&gt;Dawid Weiss&lt;/a&gt; Added the annotations per MahoutTestCase as suggested by you.  There was another random failure reported by Hudson :&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

Tests run: 6, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.935 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! - in org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest
toyExampleImplicit(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest)  Time elapsed: 0.114 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from TEST scope at toyExampleImplicit(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizerTest): 
   1) &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;[id=49, name=pool-10-thread-4, state=RUNNABLE, group=TGRP-ALSWRFactorizerTest]
        at sun.misc.Unsafe.unpark(Native Method)
        at java.util.concurrent.locks.LockSupport.unpark(LockSupport.java:122)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.unparkSuccessor(AbstractQueuedSynchronizer.java:640)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1242)
        at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:431)
        at java.util.concurrent.ThreadPoolExecutor.workerDone(ThreadPoolExecutor.java:1023)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:922)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:662)
	at __randomizedtesting.SeedInfo.seed([A5759B90EF18631F:5EA19EC521877CAD]:0)

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hopefully, the fix suggested by you should take care of all these random failures. &lt;/p&gt;</comment>
                            <comment id="13836168" author="hudson" created="Mon, 2 Dec 2013 00:55:07 +0000"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2347 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2347/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2347/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1345&quot; title=&quot;Enable randomised testing for all Mahout modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1345&quot;&gt;&lt;del&gt;MAHOUT-1345&lt;/del&gt;&lt;/a&gt;: Added Carrot Randomized test annotations to base MahoutTestCase to avoid random Test failures (as suggested by Dawid Weiss). (smarthi: rev 1546869)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/CHANGELOG&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/pom.xml&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/MahoutTestCase.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13836172" author="smarthi" created="Mon, 2 Dec 2013 01:30:05 +0000"  >&lt;p&gt;The last fix did it. Thanks Dawid. We are good now.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12606857" name="MAHOUT-1345.diff" size="25705" author="isabel" created="Fri, 4 Oct 2013 19:35:01 +0100"/>
                            <attachment id="12615492" name="MAHOUT-1345.patch" size="26675" author="smarthi" created="Sun, 24 Nov 2013 06:15:13 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 6 Oct 2013 16:54:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>352016</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzijbr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>352304</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>