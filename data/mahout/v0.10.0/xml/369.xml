<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:22:52 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-369/MAHOUT-369.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-369] Issues with DistributedLanczosSolver output</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-369</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;DistributedLanczosSolver (line 99) claims to persist eigenVectors.numRows() vectors.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    log.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Persisting &quot;&lt;/span&gt; + eigenVectors.numRows() + &lt;span class=&quot;code-quote&quot;&gt;&quot; eigenVectors and eigenValues to: &quot;&lt;/span&gt; + outputPath);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, a few lines later (line 106) we have&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;eigenVectors.numRows() - 1; i++) {
        ...
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which only persists eigenVectors.numRows()-1 vectors.&lt;/p&gt;

&lt;p&gt;Seems like the most significant eigenvector (i.e. the one with the largest eigenvalue) is omitted... off by one bug?&lt;/p&gt;


&lt;p&gt;Also, I think it would be better if the eigenvectors are persisted in &lt;b&gt;reverse&lt;/b&gt; order, meaning the most significant vector is marked &quot;0&quot;, the 2nd most significant is marked &quot;1&quot;, etc.&lt;/p&gt;

&lt;p&gt;This, for two reasons:&lt;br/&gt;
1) When performing another PCA on the same corpus (say, with more principal componenets), corresponding eigenvalues can be easily matched and compared.  &lt;br/&gt;
2) Makes it easier to discard the least significant principal components, which for Lanczos decomposition are usually garbage.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12461399">MAHOUT-369</key>
            <summary>Issues with DistributedLanczosSolver output</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jake.mannix">Jake Mannix</assignee>
                                    <reporter username="dleshem">Danny Leshem</reporter>
                        <labels>
                            <label>DistributedLanczosSolver</label>
                            <label>decomposer</label>
                    </labels>
                <created>Wed, 7 Apr 2010 14:29:38 +0100</created>
                <updated>Sat, 21 May 2011 04:18:56 +0100</updated>
                            <resolved>Tue, 5 Apr 2011 01:24:13 +0100</resolved>
                                    <version>0.3</version>
                    <version>0.4</version>
                                    <fixVersion>0.5</fixVersion>
                                    <component>Math</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12854971" author="tdunning" created="Thu, 8 Apr 2010 17:10:16 +0100"  >&lt;p&gt;Can you create a suggested patch?&lt;/p&gt;</comment>
                            <comment id="12854992" author="srowen" created="Thu, 8 Apr 2010 17:45:40 +0100"  >&lt;p&gt;If the patch amounts to making that loop into:&lt;/p&gt;

&lt;p&gt;   for (int i = eigenVectors.numRows() - 1; i &amp;gt;= 0; i--) {&lt;/p&gt;

&lt;p&gt;Then I can commit that. But do the folks who understand this code agree it&apos;s the thing to do? seems so.&lt;/p&gt;</comment>
                            <comment id="12855014" author="jake.mannix" created="Thu, 8 Apr 2010 18:12:47 +0100"  >&lt;p&gt;Hold on that Sean, I made the loop like that for a reason.  I need to check in again and verify if/where it&apos;s wrong, but it was not an oversight, it has to do with the way the Colt code does EigenDecomposition.&lt;/p&gt;</comment>
                            <comment id="12857329" author="dleshem" created="Thu, 15 Apr 2010 15:19:10 +0100"  >&lt;p&gt;Attached is a simple patch that fixed the two issues raised.&lt;/p&gt;

&lt;p&gt;The right way to do this is to introduce a new unit-test that fails with the current version (e.g. decompose a fixed matrix and verify all its known eigenvalues are found). The attached patch has no such code.&lt;/p&gt;

&lt;p&gt;All relevant unit-tests pass (I&apos;m getting errors for a few org.apache.mahout.clustering tests, nothing related to this change though).&lt;/p&gt;

&lt;p&gt;Jake, I&apos;m doing this mostly to practice sending Mahout patches. If your original code indeed implemented the intended logic, you might want to add a unit-test that fails my patch...&lt;/p&gt;</comment>
                            <comment id="12859855" author="dleshem" created="Thu, 22 Apr 2010 16:57:55 +0100"  >&lt;p&gt;Okay, please ignore my previous patch.&lt;/p&gt;

&lt;p&gt;I think I finally understand what&apos;s going on with the code. There are two seemingly unrelated issues:&lt;/p&gt;

&lt;p&gt;1) The code returns one less eigenvector/eigenvalue than requested.&lt;/p&gt;

&lt;p&gt;LanczosSolver.java (157) returns one less eigenvector/eigenvalue than requested-&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; basis.numRows() - 1; i++) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DistributedLanczosSolver.java (106) serializes one less eigenvector than requested-&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;eigenVectors.numRows() - 1; i++) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) When asked for N eigenvectors, the code returns (serializes) the most important N-1 eigenvectors in &lt;b&gt;descending&lt;/b&gt; order (meaning, important ones are serialized first - which, other than the &quot;N-1&quot; part, is excellent!), but associates them with the bottom N-1 out of the top N most important eigenvalues in &lt;b&gt;ascending&lt;/b&gt; order (meaning, important ones are serialized last).&lt;/p&gt;

&lt;p&gt;In other words, the #1 important eigenvalue is not serialized at all, the #2 important eigenvalue is associated with the #N-1 important eigenvector, ... and finally the #N most important eigenvalue is associated with the #1 important eigenvector.&lt;/p&gt;

&lt;p&gt;Vector names changed drastically during the last few days (following Sean&apos;s patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-379&quot; title=&quot;SequentialAccessSparseVector.equals does not agree with AbstractVector.equivalent&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-379&quot;&gt;&lt;del&gt;MAHOUT-379&lt;/del&gt;&lt;/a&gt;), so issue #2 is less obvious now. Previously the eigenvalues where serialized with the vector. Now they are only mentioned in log prints.&lt;/p&gt;

&lt;p&gt;Here&apos;s some code to verify these claims. The code creates a 1000-rows 100-columns matrix. For each row, the first element is +1/-1 with equal probabilities, and the rest are +0.001/-0.001 with equal probabilities. The Elements are uncorrelated. So decomposing this matrix should reveal that the most important PC is the 100-dimensional vector (1, 0, 0, ... , 0), and it should be associated with a &lt;b&gt;much&lt;/b&gt; higher eigenvalue than the rest. To test my claims, remove the &quot;-1&quot; from the two loops mentioned above, and run the following code:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;add to TestDistributedRowMatrix.java&amp;#93;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; DistributedRowMatrix distributedMatrix(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Matrix matrix,
                                                       &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; baseTmpDir) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    baseTmpDir = TESTDATA + baseTmpDir;
    Configuration conf = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Configuration();
    FileSystem fs = FileSystem.get(conf);

    ClusteringTestUtils.writePointsToFile(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Iterable&amp;lt;VectorWritable&amp;gt;() {
      @Override
      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Iterator&amp;lt;VectorWritable&amp;gt; iterator() {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Iterator&amp;lt;MatrixSlice&amp;gt; it = matrix.iterator();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Iterator&amp;lt;VectorWritable&amp;gt;() {
          @Override
          &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; hasNext() { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; it.hasNext(); }
          @Override
          &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; VectorWritable next() {
            MatrixSlice slice = it.next();
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; VectorWritable(slice.vector());
          }
          @Override
          &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void remove() { it.remove(); }
        };
      }
    }, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;, baseTmpDir + &lt;span class=&quot;code-quote&quot;&gt;&quot;/distMatrix/part-00000&quot;&lt;/span&gt;, fs, conf);

    DistributedRowMatrix distMatrix = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DistributedRowMatrix(baseTmpDir + &lt;span class=&quot;code-quote&quot;&gt;&quot;/distMatrix&quot;&lt;/span&gt;,
                                                               baseTmpDir + &lt;span class=&quot;code-quote&quot;&gt;&quot;/tmpOut&quot;&lt;/span&gt;,
                                                               matrix.numRows(),
                                                               matrix.numCols());
    distMatrix.configure(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; JobConf(conf));

    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; distMatrix;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;add to TestDistributedLanczosSolver.java, and run the test&amp;#93;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Random rand = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Random();

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[] randomRow(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numColumns) {
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[] values = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[numColumns];

      &lt;span class=&quot;code-comment&quot;&gt;// Only the first column&apos;s value is &lt;span class=&quot;code-quote&quot;&gt;&quot;important&quot;&lt;/span&gt;. Columns are uncorrelated.
&lt;/span&gt;      values[0] = (rand.nextBoolean() ? 1 : -1);
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 1; i &amp;lt; numColumns; ++i) {
          values[i] = (rand.nextBoolean() ? 0.001 : -0.001);
      }

      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; values;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Matrix randomMatrix(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numRows, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numColumns) {
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Matrix matrix = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DenseMatrix(numRows, numColumns);
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row = 0; row &amp;lt; numRows; ++row) {
          matrix.set(row, randomRow(numColumns));
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; matrix;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testDistributedLanczosSolverSanity() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; File testData = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;code-quote&quot;&gt;&quot;testdata&quot;&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!testData.exists()) {
      testData.mkdir();
    }

    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Matrix matrix = randomMatrix(1000, 100);
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; DistributedRowMatrix distMatrix =
            TestDistributedRowMatrix.distributedMatrix(matrix, &lt;span class=&quot;code-quote&quot;&gt;&quot;testdata&quot;&lt;/span&gt;);
    distMatrix.configure(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; JobConf());

    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; DistributedLanczosSolver solver = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DistributedLanczosSolver();
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Matrix eigenVectors = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DenseMatrix(30, 100);
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;&amp;gt; eigenValues = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;&amp;gt;();
    solver.solve(distMatrix, 30, eigenVectors, eigenValues, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);

    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;--- Eigenvalues ---&quot;&lt;/span&gt;);
    printDoubleList(eigenValues);
    
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;--- Eigenvectors ---&quot;&lt;/span&gt;);
    printMatrix(eigenVectors);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void printDoubleList(List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;&amp;gt; values) {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value : values) {
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.print(value + &lt;span class=&quot;code-quote&quot;&gt;&quot;\t&quot;&lt;/span&gt;);
    }
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&quot;&quot;);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void printMatrix(Matrix matrix) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row = 0; row &amp;lt; matrix.numRows(); ++row) {
          &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; col = 0; col &amp;lt; matrix.numCols(); ++col) {
              &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.print(matrix.get(row, col) + &lt;span class=&quot;code-quote&quot;&gt;&quot;\t&quot;&lt;/span&gt;);
          }
          &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&quot;&quot;);
      }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The test does not fail the current code, but you can see what&apos;s wrong by its prints. To make this a real test, one can replace the printing with verifying that 1) the first eigenvalue is, say, at least 100 times bigger than the second; and 2) the returned eigenvectors in fact correspond to their eigenvalues. This would fail the current code.&lt;/p&gt;

&lt;p&gt;I considered submitting another patch, but I&apos;m no longer sure about the best way to fix this. However, I am positive now that this is a real issue that needs to be fixed.&lt;/p&gt;</comment>
                            <comment id="12860690" author="jake.mannix" created="Sun, 25 Apr 2010 16:10:06 +0100"  >&lt;p&gt;Danny, thanks for looking into this so carefully, I think you definitely have described what&apos;s going on in this now.  &lt;/p&gt;

&lt;p&gt;I&apos;m going to try and look at this some more in the next few days and clean it up a bit, and add in some of your suggested unit tests.&lt;/p&gt;</comment>
                            <comment id="12914001" author="srowen" created="Thu, 23 Sep 2010 13:22:05 +0100"  >&lt;p&gt;Same question &amp;#8211; commitable Jake? or needs more review and time and so for 0.5?&lt;/p&gt;</comment>
                            <comment id="12983592" author="srowen" created="Wed, 19 Jan 2011 07:48:51 +0000"  >&lt;p&gt;This one&apos;s also been on the shelf for about 4 months. Is it ready to go, or should it be archived?&lt;/p&gt;</comment>
                            <comment id="12983600" author="jake.mannix" created="Wed, 19 Jan 2011 08:12:44 +0000"  >&lt;p&gt;I haven&apos;t looked at this particular patch in ages, but let me try and check it out again, because I think this patch fixes a real problem and should get in, not archived.&lt;/p&gt;</comment>
                            <comment id="12992656" author="danny.bickson" created="Wed, 9 Feb 2011 18:54:08 +0000"  >&lt;p&gt;I just checked this patch and it is correct. There are some other minor problems.&lt;br/&gt;
1) The ordering of eigenvalues was the opposite than eigenvectors. But this the patch fixes.&lt;br/&gt;
2) The signs of the first and third eigenvectors are negative to the sign of matlab. The second eigenvalue has the correct sign.&lt;br/&gt;
3) When requesting a rank of 4, we get 3 eigenvalues... So it seems that the rank is always lower by one.&lt;/p&gt;


&lt;p&gt;I have added a test function named estLanczosSolver2() to TestLanczosSolver.java (code below).&lt;br/&gt;
To run it, you need first to comment the line: //nextVector.assign(new Scale(1 / scaleFactor));&lt;br/&gt;
in LanczosSolver.java, so it is easier to compare the results to Matlab, without the normalization.&lt;/p&gt;

&lt;p&gt;I further suggest to add an additional optional flag for avoiding normalization.&lt;/p&gt;


&lt;p&gt;The factorized matrix is: &lt;br/&gt;
&amp;gt;&amp;gt; full(A)&lt;/p&gt;

&lt;p&gt;ans =&lt;/p&gt;

&lt;p&gt;    3.1200   -3.1212   -3.0000&lt;br/&gt;
   -3.1110    1.5000    2.1212&lt;br/&gt;
   -7.0000   -8.0000   -4.0000&lt;/p&gt;


&lt;p&gt;The eigenvalues are;&lt;br/&gt;
&amp;gt;&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;a,b&amp;#93;&lt;/span&gt;=eig(full(A&apos;*A))  &lt;/p&gt;

&lt;p&gt;a =&lt;/p&gt;

&lt;p&gt;    0.2132   -0.8010   -0.5593&lt;br/&gt;
   -0.5785    0.3578   -0.7330&lt;br/&gt;
    0.7873    0.4799   -0.3871&lt;/p&gt;


&lt;p&gt;b =&lt;/p&gt;

&lt;p&gt;    0.0314         0         0&lt;br/&gt;
         0   42.6176         0&lt;br/&gt;
         0         0  131.2553&lt;/p&gt;

&lt;p&gt;Now I run the unit test testLanczosSolver2 and I get:&lt;br/&gt;
INFO: Lanczos iteration complete - now to diagonalize the tri-diagonal auxiliary matrix.&lt;br/&gt;
Feb 9, 2011 1:25:36 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 0 found with eigenvalue 131.25526355941963&lt;br/&gt;
Feb 9, 2011 1:25:36 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 1 found with eigenvalue 42.61761063477249&lt;br/&gt;
Feb 9, 2011 1:25:36 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 2 found with eigenvalue 0.03137295830779152&lt;br/&gt;
Feb 9, 2011 1:25:36 PM org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: LanczosSolver finished.&lt;/p&gt;

&lt;p&gt;As you can see the eigenvalues are correct, but when I look at the eigenvectors I see that&lt;br/&gt;
V0 (the row number zero eigenvector) = [ 0.5593 0.7330 0.387] , where in matlab we get -V0 (the third column of the matrix a above)&lt;/p&gt;

&lt;p&gt;@&lt;br/&gt;
Test&lt;br/&gt;
  public void testLanczosSolver2() throws Exception {&lt;br/&gt;
    int numRows = 3; int numCols = 3;&lt;br/&gt;
    int numColumns = 3;&lt;br/&gt;
    SparseRowMatrix m = new SparseRowMatrix(new int[]&lt;/p&gt;
{numRows, numCols}
&lt;p&gt;);&lt;br/&gt;
    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;3.1200   -3.1212   -3.0000&lt;br/&gt;
          -3.1110    1.5000    2.1212&lt;br/&gt;
          -7.0000   -8.0000   -4.0000&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     */&lt;br/&gt;
    m.set(0,0,3.12);&lt;br/&gt;
    m.set(0,1,-3.12121);&lt;br/&gt;
    m.set(0,2,-3);&lt;br/&gt;
    m.set(1,0,-3.111);&lt;br/&gt;
    m.set(1,1,1.5);&lt;br/&gt;
    m.set(1,2,2.12122);&lt;br/&gt;
    m.set(2,0,-7);&lt;br/&gt;
    m.set(2,1,-8);&lt;br/&gt;
    m.set(2,2,-4);&lt;/p&gt;

&lt;p&gt;    int rank = 4;&lt;br/&gt;
    Matrix eigens = new DenseMatrix(rank, numColumns);&lt;br/&gt;
    long time = timeLanczos(m, eigens, rank, false);&lt;br/&gt;
    assertTrue(&quot;Lanczos taking too long!  Are you in the debugger? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;, time &amp;lt; 10000);&lt;br/&gt;
    //assertOrthonormal(eigens);&lt;br/&gt;
    //assertEigen(eigens, m, 0.1, false);&lt;br/&gt;
  }&lt;/p&gt;


&lt;p&gt;Best, &lt;/p&gt;

&lt;p&gt;Danny Bickson&lt;/p&gt;</comment>
                            <comment id="13000929" author="derekocallaghan" created="Tue, 1 Mar 2011 16:04:12 +0000"  >&lt;p&gt;Hi Danny,&lt;/p&gt;

&lt;p&gt;I&apos;ve tried out your testLanczosSolver2() test, but I get different output to yours as the eigenvalues are in the reverse order to what you got, i.e. (I&apos;ve added a line to LanczosSolver to also print the realEigen eigenvector):&lt;/p&gt;

&lt;p&gt;INFO: Lanczos iteration complete - now to diagonalize the tri-diagonal auxiliary matrix.&lt;br/&gt;
01-Mar-2011 15:56:56 org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 0 found with eigenvalue 0.0&lt;br/&gt;
01-Mar-2011 15:56:56 org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 0 - &lt;/p&gt;
{0:0.5593439330819562,1:0.7330112630790516,2:0.3870773213760546}
&lt;p&gt;01-Mar-2011 15:56:56 org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 1 found with eigenvalue 0.03137295830774178&lt;br/&gt;
01-Mar-2011 15:56:56 org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 1 - &lt;/p&gt;
{0:-0.8010370751145115,1:0.35784374789842055,2:0.47988275274487646}
&lt;p&gt;01-Mar-2011 15:56:56 org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 2 found with eigenvalue 42.617610634772475&lt;br/&gt;
01-Mar-2011 15:56:56 org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: Eigenvector 2 - &lt;/p&gt;
{0:-0.21324626331168514,1:0.5784827916967494,2:-0.7873269275811279}
&lt;p&gt;01-Mar-2011 15:56:56 org.slf4j.impl.JCLLoggerAdapter info&lt;br/&gt;
INFO: LanczosSolver finished.&lt;/p&gt;

&lt;p&gt;When I debug, I see that eigenVals contains &lt;span class=&quot;error&quot;&gt;&amp;#91;0.0, 0.03137295830774178, 42.617610634772475, 131.25526355941963&amp;#93;&lt;/span&gt;. I wanted to check if you&apos;d made a change to LanczosSolver to reverse the order of the eigenvalues, before you generated the test output in your last comment? I don&apos;t see any changes to this file in the patch file attached here.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Derek&lt;/p&gt;</comment>
                            <comment id="13014986" author="srowen" created="Sat, 2 Apr 2011 11:19:51 +0100"  >&lt;p&gt;I&apos;d like to commit the patch. Danny seems confident it&apos;s the right change and Jake felt it was probably right. Derek suggests maybe there is more that needs to go into the patch. Danny could you confirm whether these are all the changes that are necessary?&lt;/p&gt;</comment>
                            <comment id="13015044" author="dlyubimov" created="Sat, 2 Apr 2011 17:14:44 +0100"  >&lt;p&gt;Are the issues with eigenvalue accuracy resolved? &lt;/p&gt;</comment>
                            <comment id="13015331" author="jake.mannix" created="Mon, 4 Apr 2011 10:39:44 +0100"  >&lt;p&gt;Patch addresses inconsistency mentioned by Danny.  Might need some cleanup, but otherwise incorporates his suggestions as well as adds a more thorough consistency check between COLT&apos;s old EigenvalueDecompositionImpl, and the Lanczos impl in here.  For certain problems, they should yield the same answers!&lt;/p&gt;</comment>
                            <comment id="13015332" author="jake.mannix" created="Mon, 4 Apr 2011 10:41:08 +0100"  >&lt;p&gt;Patch might need some cleanup, but it should be basically there.&lt;/p&gt;</comment>
                            <comment id="13015343" author="srowen" created="Mon, 4 Apr 2011 10:59:46 +0100"  >&lt;p&gt;LGTM, noting that the patch flips around some imports and that could be removed.&lt;br/&gt;
I am sure you&apos;re clear to commit as you see fit or you can leave it to me to take care of.&lt;/p&gt;</comment>
                            <comment id="13015467" author="jake.mannix" created="Mon, 4 Apr 2011 16:42:39 +0100"  >&lt;p&gt;I&apos;ll fix those imports, and add some comments on what has changed / what is being done now.&lt;/p&gt;

&lt;p&gt;There are some more improvements which are necessary, but this is strictly better than was what was there before, so I&apos;ll commit this as soon as I can (after adding said comments, to be fleshed out on the list/wiki further).&lt;/p&gt;</comment>
                            <comment id="13015699" author="jake.mannix" created="Tue, 5 Apr 2011 01:17:19 +0100"  >&lt;p&gt;Ok, fixed the import * crap (from bad IDE settings), and renamed a magic constant in the test to be a bit more readable, and fixed a few things in tests which were broken (tests had been written to &lt;b&gt;assume&lt;/b&gt; you get back one less than the number of eigenvectors requested).  Committing now!&lt;/p&gt;</comment>
                            <comment id="13015700" author="jake.mannix" created="Tue, 5 Apr 2011 01:24:13 +0100"  >&lt;p&gt;Committed revision 1088831.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12441827" name="ASF.LICENSE.NOT.GRANTED--MAHOUT-369.patch" size="1652" author="dleshem" created="Thu, 15 Apr 2010 15:19:10 +0100"/>
                            <attachment id="12475343" name="MAHOUT-369.diff" size="23558" author="jake.mannix" created="Mon, 4 Apr 2011 10:39:44 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 8 Apr 2010 16:10:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9695</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy5jj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23049</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>