<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:16:49 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-34/MAHOUT-34.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-34] Iterator interface for Vectors</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-34</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Implemented an Iterator interface for the Vector classes. Was necessary for porting from Float[] used in some parts of the code.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12393720">MAHOUT-34</key>
            <summary>Iterator interface for Vectors</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="karl.wettin">Karl Wettin</assignee>
                                    <reporter username="samee.zahur">Samee Zahur</reporter>
                        <labels>
                    </labels>
                <created>Fri, 11 Apr 2008 06:46:14 +0100</created>
                <updated>Thu, 21 Aug 2008 16:39:29 +0100</updated>
                            <resolved>Sat, 12 Apr 2008 17:44:02 +0100</resolved>
                                                    <fixVersion>0.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12587854" author="samee.zahur" created="Fri, 11 Apr 2008 06:49:00 +0100"  >&lt;p&gt;Complete with comments and unit tests. If you get any ideas for improvement, please suggest here.&lt;/p&gt;

&lt;p&gt;Samee&lt;/p&gt;</comment>
                            <comment id="12587857" author="samee.zahur" created="Fri, 11 Apr 2008 07:00:15 +0100"  >&lt;p&gt;This issue was created in response to &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-20&quot; title=&quot;Migrate Canopy and KMeans Implementations to Vectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-20&quot;&gt;&lt;del&gt;MAHOUT-20&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12588019" author="karl.wettin" created="Fri, 11 Apr 2008 17:42:40 +0100"  >&lt;p&gt;Thanks Samee, this looks nice. I&apos;ve actually been needing this too and was looking at implementing it my self.&lt;/p&gt;

&lt;p&gt;However&lt;/p&gt;

&lt;p&gt;VectorPair in TestVectorIterator.java:113 is missing.&lt;/p&gt;

&lt;p&gt;@Override in AbstractVector.java:123 doesn&apos;t really override anything, it implements it. Compilers might throw an error there.&lt;/p&gt;</comment>
                            <comment id="12588030" author="samee.zahur" created="Fri, 11 Apr 2008 18:05:50 +0100"  >&lt;p&gt;Sorry missed that VectorPair - forgot to add it under svn.&lt;/p&gt;</comment>
                            <comment id="12588033" author="karl.wettin" created="Fri, 11 Apr 2008 18:12:10 +0100"  >&lt;p&gt;VectorPairIterator? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12588034" author="samee.zahur" created="Fri, 11 Apr 2008 18:12:45 +0100"  >&lt;p&gt;The 2nd patch (attachment uploaded) has VectorPair included.&lt;/p&gt;

&lt;p&gt;And Override, although not a big issue, is something I use with this understanding:&lt;/p&gt;

&lt;p&gt;If I ever add a new method to an interface, the compiler can help me add it to every subclass by generating appropriate errors and pointing me to those missing places. However, if I remove a function from an interface, the compiler can no longer help me. I&apos;ll have to manully find the subclasses implementing that method and see if it should be removed. So for me, the @Override annotation gives the compiler a mechanism to complain if that method is missing from the interfaces/superclass, like the overrides keyword in C# and other languages. This is why I always use @Override even if I am just implementing a method, as long as a superclass/interface names it. If that&apos;s not what the annotation was designed for, I&apos;ll remove it.&lt;/p&gt;

&lt;p&gt;Samee&lt;/p&gt;</comment>
                            <comment id="12588050" author="samee.zahur" created="Fri, 11 Apr 2008 18:42:30 +0100"  >&lt;p&gt;Hate it when I keep doing this!!!! Argghhh!!&lt;/p&gt;

&lt;p&gt;Patch version 3 up.&lt;/p&gt;</comment>
                            <comment id="12588093" author="karl.wettin" created="Fri, 11 Apr 2008 20:53:02 +0100"  >&lt;blockquote&gt;
&lt;p&gt;And Override, although not a big issue, is something I use with this understanding:&lt;/p&gt;

&lt;p&gt;If I ever add a new method to an interface, the compiler can help me add it to every subclass by generating appropriate errors and pointing me to those missing places. However, if I remove a function from an interface, the compiler can no longer help me. I&apos;ll have to manully find the subclasses implementing that method and see if it should be removed. So for me, the @Override annotation gives the compiler a mechanism to complain if that method is missing from the interfaces/superclass, like the overrides keyword in C# and other languages. This is why I always use @Override even if I am just implementing a method, as long as a superclass/interface names it. If that&apos;s not what the annotation was designed for, I&apos;ll remove it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is exactly how JDK1.6 works. JDK1.5 that Mahout use allows @Override in generalized super classes but not too much in the polymorphic scope.&lt;/p&gt;

&lt;p&gt;I.e. @Override is not valid for a top level interface method implementations, nor in interfaces that extend other interfaces.&lt;/p&gt;

&lt;p&gt;Or at least, that is how I understand the situation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5008260&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5008260&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12588104" author="karl.wettin" created="Fri, 11 Apr 2008 21:31:05 +0100"  >&lt;p&gt;I understand what VectorPair does, but I&apos;m not sure if there is any other use case than the test case? I want to refactor VectorPair, VectorPairElement and VectorPairIterator as static inner classes of the test, or alternatively introduce some sort of more generic ArrayIterator in the utillity package. &lt;/p&gt;

&lt;p&gt;Does that makes sense?&lt;/p&gt;</comment>
                            <comment id="12588174" author="karl.wettin" created="Sat, 12 Apr 2008 00:52:43 +0100"  >&lt;p&gt;I&apos;m also thinking we should perhaps re-use the Element instance in iterator.next? Iterator a matrix of 5000 instance with 40000 features each would be instantiating 200,000,000 Elements. I&apos;m sure the JVM pools that, but we can always help it.&lt;/p&gt;

&lt;p&gt;I thinks it&apos;s OK if it is a documented caveat.&lt;/p&gt;</comment>
                            <comment id="12588182" author="samee.zahur" created="Sat, 12 Apr 2008 02:26:54 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I.e. @Override is not valid for a top level interface method implementations, nor in interfaces that extend other interfaces.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks for the pointers, and more importantly, thanks for repeatedly going through my codes like this. So do you want me to submit another patch with @Overrides removed from those places?&lt;/p&gt;
</comment>
                            <comment id="12588184" author="samee.zahur" created="Sat, 12 Apr 2008 03:01:52 +0100"  >&lt;p&gt;Well the reason I added VectorPair is that I was going through the &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-20&quot; title=&quot;Migrate Canopy and KMeans Implementations to Vectors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-20&quot;&gt;&lt;del&gt;MAHOUT-20&lt;/del&gt;&lt;/a&gt; codes and sought to remove every single for loop there &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/tongue.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;m not sure what you mean by &quot;static inner classes of the test&quot; but yes, the thought of putting VectorPairElement and VectorPairIterator as inner classes to VectorPair did occur to me. At the time, I guess I just wanted to keep each file short and simple. And the thing is I really didn&apos;t see anything gained by making VectorPairElement inner. As for VectorPairIterator, we can simply make it a package private rather than inner, as users are supposed to access it as Iterator&amp;lt;VectorPairElement&amp;gt; anyway. That&apos;s pretty much all the factoring I could come up with.&lt;/p&gt;

&lt;p&gt;And yes, in fact more generic solutions are possible. But the most elegant ones I could come up with entailed modifying the Vector interface by making it use Java generics, like java.lang do. Presently the Vectors are tied down to Double values (might even be useful if we need complex-valued vectors later). That would allow the users to use a more or less uniform interface, and might even allow the &quot;Element&quot; class to be factored out. Problems with such a change might be:&lt;/p&gt;

&lt;p&gt;The Iterator logics used in each (VectorPair, SparseVector, DenseVector) are quite distinct and hard to specify from a generic class given that Java do not support the kind of template specialization features of C++. But still, I guess doable by implementing a generic interface by concrete classes. Would enable the users to write codes like:&lt;/p&gt;

&lt;p&gt;VectorIterator&amp;lt;Double&amp;gt; it = sparsevec.iterator();&lt;br/&gt;
VectorIterator&amp;lt;Complex&amp;gt; jt = cmplxdensevec.iterator();&lt;br/&gt;
VectorIterator&amp;lt;Pair&amp;lt;Double,Complex&amp;gt;&amp;gt; kt = Vector.pairiterator(sparsevec,cmplxdensevec);&lt;/p&gt;

&lt;p&gt;Could design it this way if you want me to. But is there any specific redundancy in these Iterator classes that you have in mind? And do bear in mind this would probably mean changing the Vector interface to a generic one - meaning other classes that depend on it will have to be tweaked accordingly (probably just by simply replacing Vector by Vector&amp;lt;Double&amp;gt;). This is why I opted in for the simpler designs here.&lt;/p&gt;</comment>
                            <comment id="12588185" author="samee.zahur" created="Sat, 12 Apr 2008 03:08:03 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;m also thinking we should perhaps re-use the Element instance in iterator.next?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, this is specially true when we go through the codes of DenseVector. But the case I came up was this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Element sum;
&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; first=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(Element e : vec) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(first) {
  sum=e;
  first=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
  }&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; sum.set(e.get()+sum.get()); 
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &apos;else&apos; part above, if we reuse elements, both sum and e are actually referring to the same object, and if vector size is more than 2, sum will always just hold 2*lastelement rather than the intended value. These kind of errors might be harder to detect in more complicated cases.&lt;/p&gt;</comment>
                            <comment id="12588235" author="karl.wettin" created="Sat, 12 Apr 2008 14:37:41 +0100"  >&lt;p&gt;I&apos;ll clean up the patch a bit and pop it here later today. It will most probably be committed today or tomorrow as I my self need the iterator right now for Tanimoto distance in &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-19&quot; title=&quot;Hierarchial clusterer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-19&quot;&gt;&lt;del&gt;MAHOUT-19&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I think it is worth to continue discussing how to improve the Iterator code though. It might jst be me that like preemptive optimization. Have to benchmark and try some.&lt;/p&gt;</comment>
                            <comment id="12588271" author="karl.wettin" created="Sat, 12 Apr 2008 17:21:21 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m also thinking we should perhaps re-use the Element instance in iterator.next?&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;Yes, this is specially true when we go through the codes of DenseVector. But the case I came up was this:&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Element sum;
&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; first=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(Element e : vec) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(first) {
  sum=e;
  first=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
  }&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; sum.set(e.get()+sum.get()); 
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;In the &apos;else&apos; part above, if we reuse elements, both sum and e are actually referring to the same object, and if vector size is more than 2, sum will always just hold 2*lastelement rather than the intended value. These kind of errors might be harder to detect in more complicated cases.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If this turns out to be a big performance issue people we just need to tell people that this is the way it is and that code should instead be implemented like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; firstIndex = -1;
&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; sum = 0f;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(Element e : vec) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(firstIndex == -1)  {
    firstIndex = e.index();
  }
  sum += e.get();
}
vec.set(firstIndex, sum);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If people have a hard time with that we could implement the iterator as an ad hoc class, similar to TermEnum and TermDocs classes of Lucene to really point out what&apos;s going on. But that would cripple the nice and compact Iterable code.&lt;/p&gt;</comment>
                            <comment id="12588275" author="karl.wettin" created="Sat, 12 Apr 2008 17:44:02 +0100"  >&lt;p&gt;Committed revision 647469, thanks Samee!&lt;/p&gt;

&lt;p&gt;The only change to the patch was &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;//@Override JDK 1.6&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; in two places, and I removed an author tag in there too.&lt;/p&gt;</comment>
                            <comment id="12588497" author="karl.wettin" created="Mon, 14 Apr 2008 08:15:08 +0100"  >&lt;p&gt;VectorView#iterator was an eternal loop. Fixed and committed.&lt;/p&gt;

&lt;p&gt;I managed to write &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-26&quot; title=&quot;Matrix implementation bug fix and little addition&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-26&quot;&gt;&lt;del&gt;MAHOUT-26&lt;/del&gt;&lt;/a&gt; in the svn commend by misstake.&lt;/p&gt;


</comment>
                            <comment id="12589790" author="karl.wettin" created="Thu, 17 Apr 2008 01:46:42 +0100"  >&lt;p&gt;I just committed a bug fix in VectorView.Iterator, the index was off by offset positions. Also added some more tests.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12392676">MAHOUT-20</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12379941" name="VectorIterator.3.patch.bz2" size="4291" author="samee.zahur" created="Fri, 11 Apr 2008 18:45:59 +0100"/>
                            <attachment id="12379933" name="VectorIterator.patch.2.tar.bz2" size="4109" author="samee.zahur" created="Fri, 11 Apr 2008 18:05:50 +0100"/>
                            <attachment id="12379903" name="VectorIterator.patch.tar.bz2" size="3551" author="samee.zahur" created="Fri, 11 Apr 2008 06:49:00 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 11 Apr 2008 16:42:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10032</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy7lz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23384</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>