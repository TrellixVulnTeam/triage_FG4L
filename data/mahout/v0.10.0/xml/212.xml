<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:24:57 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-212/MAHOUT-212.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-212] Need random sampler for use in reducers</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-212</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>
&lt;p&gt;For a variety of mining algorithms, it helps to have a uniform way to only process a sub-set of the records in a reducer.&lt;/p&gt;

&lt;p&gt;As such, I have written a simple generic sampler that filters an Iterator returning a fair sample of at most a specified size.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12442600">MAHOUT-212</key>
            <summary>Need random sampler for use in reducers</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="srowen">Sean Owen</assignee>
                                    <reporter username="tdunning">Ted Dunning</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Dec 2009 05:22:49 +0000</created>
                <updated>Sat, 21 May 2011 04:24:19 +0100</updated>
                            <resolved>Thu, 10 Dec 2009 19:12:25 +0000</resolved>
                                    <version>0.2</version>
                                    <fixVersion>0.3</fixVersion>
                                    <component>Integration</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12786786" author="tdunning" created="Mon, 7 Dec 2009 05:25:17 +0000"  >
&lt;p&gt;Code plus test cases.&lt;/p&gt;

&lt;p&gt;Ready for use.  I think.&lt;/p&gt;</comment>
                            <comment id="12786787" author="tdunning" created="Mon, 7 Dec 2009 05:26:31 +0000"  >&lt;p&gt;Hmm... didn&apos;t get asked for where the patch file was when marking the bug as patch available. &lt;/p&gt;</comment>
                            <comment id="12786806" author="srowen" created="Mon, 7 Dec 2009 07:33:27 +0000"  >&lt;p&gt;This kinda already existed as SamplingIterator &amp;#8211; does that do the same thing? could these be merged then, pulling the class into a common location and combining aspects of both?&lt;/p&gt;</comment>
                            <comment id="12786820" author="tdunning" created="Mon, 7 Dec 2009 08:31:38 +0000"  >
&lt;p&gt;Kinda existed, but SamplingIterator takes a sample rate which can&apos;t be known if you don&apos;t know the total size.  The FixedSizeSampler just takes a desired size and gives you exactly that many.&lt;/p&gt;

&lt;p&gt;Merging them makes sense from the point of view of a user, but there is little in common between the implementations.&lt;/p&gt;</comment>
                            <comment id="12786841" author="srowen" created="Mon, 7 Dec 2009 09:55:43 +0000"  >&lt;p&gt;Sure, understood. How about putting them in the same place, and making them be named / look / act similarly? That brings me to a number of comments on the patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I had suggested we not use both org.apache.mahout.common and org.apache.mahout.utils as the &quot;common stuff&quot; package, since that&apos;s redundant. We sort of standardized on common, but, retained utils for various reasons. I think this belongs in core/ and under .common&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The Random shouldn&apos;t be instance variable right, and should be obtained from RandomUtils?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It&apos;s not necessary to keep the original Iterator since as you show, you really must sample it all upfront as you do. In this sense it&apos;s almost not properly a class that should produce an Iterator, but a List, but, I like the tidiness of an Iterator wrapper.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Consider providing an Iterable counterpart for easy use with foreach loops, like I did with SamplingIterable&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Name it something ending with Iterator since it&apos;s an Iterator? FixedSizeSampleIterator?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Are methods like copyInput() necessarily public, and is there a need to set the generator?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Very picky, usually see test cases end in TestCase&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;If you agree with these but don&apos;t care t implement, I can do so.&lt;/p&gt;</comment>
                            <comment id="12787020" author="tdunning" created="Mon, 7 Dec 2009 18:08:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;I had suggested we not use both org.apache.mahout.common and org.apache.mahout.utils as the &quot;common stuff&quot; package, since that&apos;s redundant. We sort of standardized on common, but, retained utils for various reasons. I think this belongs in core/ and under .common&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds good.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The Random shouldn&apos;t be instance variable right, and should be obtained from RandomUtils?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like having it be injectable for testing purposes.  As long as it exhibits the same interface as j.u.Random, we should be fine.  There may be a better interface from RandomUtils.  Feel free to suggest one, but I really do want to keep the injectability of the generator.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;s not necessary to keep the original Iterator since as you show, you really must sample it all upfront as you do. In this sense it&apos;s almost not properly a class that should produce an Iterator, but a List, but, I like the tidiness of an Iterator wrapper.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a point I waffled on.  The real question here is whether we care about the corner case where we don&apos;t read anything from the iterator.  I went slightly nuts and decided I did care to optimize that point, but you make a strong counter argument that the class could be simpler if copyInput were called from the constructor.  That would simplify testing as well.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Consider providing an Iterable counterpart for easy use with foreach loops, like I did with SamplingIterable&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Quite doable.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Name it something ending with Iterator since it&apos;s an Iterator? FixedSizeSampleIterator?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Also a fine idea.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Are methods like copyInput() necessarily public, and is there a need to set the generator?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;They could be package level.  I merely exposed it to be able to do more detailed testing.  This adds weight to your argument about keeping the original iterator.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Very picky, usually see test cases end in TestCase&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I usually see test cases that start or end with Test.  It is an old convention from many ant builds that required regexes.  I don&apos;t much care except that I would have a small preference for making abstract tests end in TestCase in order to distinguish them from concrete tests.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you agree with these but don&apos;t care t implement, I can do so.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let me take one more crack.&lt;/p&gt;</comment>
                            <comment id="12787033" author="srowen" created="Mon, 7 Dec 2009 18:28:51 +0000"  >&lt;p&gt;Yeah test injection was the idea behind using RandomUtils, since it will return a generator that uses the same seed every time when set in test mode. The unit tests do (should) set it globally as such, to make sure the results are deterministic. Yes the returned generator is a MersenneTwisterRNG which just extends Random.&lt;/p&gt;

&lt;p&gt;Yes anything for testing should probably be package-private.&lt;/p&gt;

&lt;p&gt;(I&apos;d also suggest making the instance fields private here? not sure there&apos;s a big case for extension, at least, one that isn&apos;t perhaps better answered with explicit getters)&lt;/p&gt;

&lt;p&gt;I dont&apos; care about the test naming convention.&lt;/p&gt;

&lt;p&gt;Once this is in place I&apos;ll put my similar Iterator next to it.&lt;/p&gt;</comment>
                            <comment id="12787143" author="tdunning" created="Mon, 7 Dec 2009 21:58:04 +0000"  >
&lt;p&gt;Here is another patch.  I moved SamplingIterator and Iterable.  I moved to eager sampling and simplified code and test cases as a result.  In the end, there is no additional functionality from an Iterable (it just wraps the Iterator in a way that it returns that same iterator) so I left it out.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sean&amp;gt;   The Random shouldn&apos;t be instance variable right, and should be obtained from RandomUtils?&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;ted&amp;gt; I like having it be injectable for testing purposes. As long as it exhibits the same interface as j.u.Random, we should be fine. There may be a better interface from RandomUtils. Feel free to suggest one, but I really do want to keep the injectability of the generator.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I switched to use RandomUtils, but I still think it is a poor form of injection.  Most notably, we can&apos;t inject faults using this approach, only a standard test sequence.  Besides, I hate global variables ( which is what a static class like this is ).  For these tests, those issues don&apos;t matter so I switched.&lt;/p&gt;


</comment>
                            <comment id="12787144" author="tdunning" created="Mon, 7 Dec 2009 21:58:40 +0000"  >&lt;p&gt;Here is the actual patch.&lt;/p&gt;</comment>
                            <comment id="12787157" author="srowen" created="Mon, 7 Dec 2009 22:11:13 +0000"  >&lt;p&gt;What&apos;s the idea behind the Entry class? I am not seeing how that originalIndex is used.&lt;/p&gt;

&lt;p&gt;Random generator = RandomUtils.getRandom();&lt;br/&gt;
This can be a private static final member.&lt;/p&gt;

&lt;p&gt;The existing SamplingIterator could use the DelegatingIterator class too if you like.&lt;/p&gt;


&lt;p&gt;I take the general point about injection but at some level a component isn&apos;t meaningfully injectable. What kind of fault would you inject in a Random? testing what happens when it returns a value outside the interval or an Error maybe but is that reasonable. What flexibility would it meaningfully provide, at least in comparison to the extra method and new possible error scenarios.&lt;/p&gt;

&lt;p&gt;statics have their place and this instance seems like a fine example to me. It&apos;s one of the few cases where I really do need to make sure every instance in the whole program works a certain way.&lt;/p&gt;</comment>
                            <comment id="12787169" author="tdunning" created="Mon, 7 Dec 2009 22:26:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;What&apos;s the idea behind the Entry class? I am not seeing how that originalIndex is used.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It allows sorting of the results according the original ordering of the data elements.  The originalIndex is used in the comparison function.  Since we have to keep the original index to do this sort I needed a handy way to glue the index to the value.  My preference would have been a side array and a sort function that returns a permutation.  That would have allowed my two classes to merge completely with very little overhead.  Sorts that return permutations are commonly found in R or Matlab, but (to my knowledge) not in Java.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Random generator = RandomUtils.getRandom();&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This can be a private static final member.&lt;/p&gt;

&lt;p&gt;It should actually be a local after making the change you suggested.  Sorry I missed that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The existing SamplingIterator could use the DelegatingIterator class too if you like.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;After you, Gaston!&lt;/p&gt;

&lt;p&gt;(seriously, my tiny window of time for coding just closed.  Feel free to take this and do anything you like) &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I take the general point about injection but at some level a component isn&apos;t meaningfully injectable. What kind of fault would you inject in a Random? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have had a few cases where very rare, but legal, values from a generator would cause a fault.  It was easiest to provide a mock generator to stimulate these corners.  &lt;/p&gt;

&lt;p&gt;As a concrete example, an exponential distribution can be generated using -log(u) where u is a random variable from (0, 1].  But most random number generators generator doubles from [0, 1) so the sampling should really be done using -log(1-u).  It is reasonable to inject a generator that returns a 0 to make sure that the edge condition is handled well.&lt;/p&gt;

&lt;p&gt;What I would suggest is that if this is or becmes important, we can add a method to truly inject a generator.  It isn&apos;t important here so I left it out.&lt;/p&gt;
</comment>
                            <comment id="12788056" author="srowen" created="Wed, 9 Dec 2009 12:10:32 +0000"  >&lt;p&gt;In case you&apos;re waiting on comment from me, as far as I am concerned you can submit.&lt;/p&gt;</comment>
                            <comment id="12788262" author="tdunning" created="Wed, 9 Dec 2009 19:43:40 +0000"  >
&lt;p&gt;I am snowed under and won&apos;t get to this for at least a week.  Feel free to commit.&lt;/p&gt;</comment>
                            <comment id="12788759" author="srowen" created="Thu, 10 Dec 2009 15:56:42 +0000"  >&lt;p&gt;Ted I&apos;ve gone big on this and collapsed a lot more iterator related things into this package, and tried to unify a little. It&apos;ll probably break any dependencies you have on it, but not badly. What say?&lt;/p&gt;</comment>
                            <comment id="12788839" author="tdunning" created="Thu, 10 Dec 2009 18:52:49 +0000"  >
&lt;p&gt;Awesome.  Thanks.&lt;/p&gt;

&lt;p&gt;I have no dependencies.  I simply wrote this to help you and anybody else with the cooccurrence stuff (you mentioned delaying the sampling until later).&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12427609" name="MAHOUT-212-C.patch" size="28758" author="srowen" created="Thu, 10 Dec 2009 15:56:42 +0000"/>
                            <attachment id="12427242" name="MAHOUT-212-b.patch" size="18706" author="tdunning" created="Mon, 7 Dec 2009 21:58:40 +0000"/>
                            <attachment id="12427138" name="MAHOUT-212.patch" size="9107" author="tdunning" created="Mon, 7 Dec 2009 05:26:31 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 7 Dec 2009 07:33:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9853</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy6in:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23207</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>