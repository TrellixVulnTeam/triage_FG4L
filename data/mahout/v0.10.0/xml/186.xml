<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:20:30 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-186/MAHOUT-186.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-186] Classifier PriorityQueue returns erroneous results</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-186</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;A simple test fails &lt;/p&gt;

&lt;p&gt;import org.apache.hadoop.util.PriorityQueue;&lt;br/&gt;
PriorityQueue&amp;lt;ClassifierResult&amp;gt; queue = new ClassifierResultPriorityQueue(3);&lt;br/&gt;
    queue.insert(new ClassifierResult(&quot;label1&quot;, 5));&lt;br/&gt;
    queue.insert(new ClassifierResult(&quot;label2&quot;, 4));&lt;br/&gt;
    queue.insert(new ClassifierResult(&quot;label3&quot;, 3));&lt;br/&gt;
    queue.insert(new ClassifierResult(&quot;label4&quot;, 2));&lt;br/&gt;
    queue.insert(new ClassifierResult(&quot;label5&quot;, 1));&lt;/p&gt;

&lt;p&gt;    assertEquals(&quot;Incorrect Size&quot;, 3, queue.size());&lt;br/&gt;
    log.info(queue.pop().toString());&lt;br/&gt;
    log.info(queue.pop().toString());&lt;br/&gt;
    log.info(queue.pop().toString());&lt;/p&gt;

&lt;p&gt;09/10/07 16:58:39 INFO common.ClassifierResultPriorityQueueTest: ClassifierResult&lt;/p&gt;
{category=&apos;label3&apos;, score=3.0}
&lt;p&gt;09/10/07 16:58:39 INFO common.ClassifierResultPriorityQueueTest: ClassifierResult&lt;/p&gt;
{category=&apos;label4&apos;, score=2.0}
&lt;p&gt;09/10/07 16:58:39 INFO common.ClassifierResultPriorityQueueTest: ClassifierResult&lt;/p&gt;
{category=&apos;label5&apos;, score=1.0}

&lt;p&gt;Expected label1 and label2 at the top&lt;/p&gt;</description>
                <environment></environment>
        <key id="12437501">MAHOUT-186</key>
            <summary>Classifier PriorityQueue returns erroneous results</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robinanil">Robin Anil</assignee>
                                    <reporter username="robinanil">Robin Anil</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Oct 2009 13:32:09 +0100</created>
                <updated>Mon, 19 Oct 2009 01:06:57 +0100</updated>
                            <resolved>Mon, 19 Oct 2009 01:06:01 +0100</resolved>
                                    <version>0.1</version>
                    <version>0.2</version>
                                    <fixVersion>0.2</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12763031" author="robinanil" created="Wed, 7 Oct 2009 13:34:46 +0100"  >&lt;p&gt;Fix:&lt;br/&gt;
Added PriorityQueue Test. &lt;/p&gt;

&lt;p&gt;Used java.util.PriorityQueue instead of the org.apache.hadoop.util.PriorityQueue&lt;/p&gt;
</comment>
                            <comment id="12763035" author="srowen" created="Wed, 7 Oct 2009 13:40:12 +0100"  >&lt;p&gt;Not sure what&apos;s up with the hadoop class, but sure makes sense to use the standard PriorityQueue class. why do we need a custom subclass at all? seems like this can be done with a regular PriorityQueue, a Comparator, and use of the standard PriorityQueue methods. That is, do we need getTopResults(), for example.&lt;/p&gt;</comment>
                            <comment id="12763036" author="robinanil" created="Wed, 7 Oct 2009 13:48:06 +0100"  >&lt;p&gt;well i want to get the data in the descending order.&lt;/p&gt;

&lt;p&gt;if i keep a descending priorityQueue i cant get the least element without polling the entire queue&lt;br/&gt;
if i keep an ascending priorityqueue, I wont be able to get the reverse iterator without doing the getTopResults()&lt;/p&gt;

</comment>
                            <comment id="12763124" author="tdunning" created="Wed, 7 Oct 2009 17:55:16 +0100"  >
&lt;p&gt;I don&apos;t quite understand the last comment, but generally if you want the top n items in descending order, you keep a descending queue as you say in order to make insertion efficient.  It is generally good to cache the score of the least element to speed comparisons even a little bit more.&lt;/p&gt;

&lt;p&gt;Then when you want the results, you can just fill a list in reverse order &lt;/p&gt;

&lt;p&gt;or just do this:&lt;/p&gt;

&lt;p&gt;        List r = new ArrayList(priorityQueue);&lt;br/&gt;
        Collections.reverse(r);&lt;/p&gt;

&lt;p&gt;Since this is pretty simple, I think I misunderstood the question.&lt;/p&gt;</comment>
                            <comment id="12763145" author="robinanil" created="Wed, 7 Oct 2009 18:25:57 +0100"  >&lt;p&gt;new List(priorityQueue) i believe doesnt keep the order of the priorityQueue as the toArray and Iterator both returns data in random order. So you need to keep polling the top of the heap isn&apos;t it?&lt;/p&gt;</comment>
                            <comment id="12763162" author="srowen" created="Wed, 7 Oct 2009 19:07:40 +0100"  >&lt;p&gt;I will make up an alternate patch that either shows what I mean or shows me I&apos;m wrong. My central question is, what requires a custom subclass of PriorityQueue? I understand that the &quot;new List()&quot; thing doesn&apos;t give the items in order but that doesn&apos;t imply a subclass is needed.&lt;/p&gt;</comment>
                            <comment id="12763172" author="tdunning" created="Wed, 7 Oct 2009 19:23:54 +0100"  >&lt;p&gt;You are right that I should code up an example before speaking.  But it does seem that, against all odds, that what I was suggesting works.&lt;/p&gt;

&lt;p&gt;Here is a test case that illustrates what I meant.  I am still not sure what everybody is saying:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;package com.infovell.logging.test;

import junit.framework.TestCase;

import java.util.PriorityQueue;
import java.util.Random;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class FooTest extends TestCase {
    public void testQueue() {
        PriorityQueue&amp;lt;Double&amp;gt; pq = new PriorityQueue&amp;lt;Double&amp;gt;(10);
        Random gen = new Random(123L);
        for (int i = 0; i &amp;lt; 1000; i++) {
            double x = gen.nextDouble();
            if (pq.size() &amp;lt; 10 || x &amp;gt; pq.peek()) {
                pq.add(x);
                while (pq.size() &amp;gt; 10) {
                    pq.remove();
                }
            }
        }

        List&amp;lt;Double&amp;gt; r = new ArrayList&amp;lt;Double&amp;gt;(pq);
        Collections.reverse(r);
        System.out.printf(&quot;%s\n&quot;, r);
        assertEquals(0.994991252160446, r.get(0), 1e-7);
        assertEquals(0.9881699208527764, r.get(9), 1e-7);
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12763387" author="srowen" created="Thu, 8 Oct 2009 08:09:17 +0100"  >&lt;p&gt;I think I agree, if you&apos;re suggesting this is probably simplifiable. Attached is an alternate patch which I believe does the same thing (tests pass at least). I think it&apos;s not necessary to use intermediate collections in several places here.&lt;/p&gt;</comment>
                            <comment id="12763491" author="robinanil" created="Thu, 8 Oct 2009 14:24:11 +0100"  >&lt;p&gt;Reply to Ted&lt;/p&gt;

&lt;p&gt;I ran the code, and this is the result&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0.994991252160446, 0.9945536151314497, 0.999376415169616, 0.9968475047260047, 0.9984130174646184, 0.9912339517865715, 0.9941739318651063, 0.9916439528089621, 0.9908988967772393, 0.9881699208527764&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The data shows this, which is clearly not sorted&lt;br/&gt;
dec, inc, dec, inc, dec, inc, dec, dec, dec.&lt;/p&gt;</comment>
                            <comment id="12767168" author="robinanil" created="Mon, 19 Oct 2009 01:06:01 +0100"  >&lt;p&gt;Committed sean&apos;s patch.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12421601" name="MAHOUT-186.patch" size="9735" author="srowen" created="Thu, 8 Oct 2009 08:09:30 +0100"/>
                            <attachment id="12421523" name="MAHOUT-186.patch" size="8275" author="robinanil" created="Wed, 7 Oct 2009 13:34:46 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 7 Oct 2009 12:40:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9879</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy6o7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23232</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>