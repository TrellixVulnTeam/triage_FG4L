<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:25:50 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-677/MAHOUT-677.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-677] The SimpleCsvExamples didn&apos;t really parsed the double correctly with the FastLine and FastLineReader</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-677</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;The FastLineReader in SimpleCsvExamples.java try to parse the line quickly through parse the bytes directly from the stream without the cost of copy Strings. But it didn&apos;t parse the line correctly and will get all double values as zero in fast parsing mode&lt;/p&gt;</description>
                <environment></environment>
        <key id="12504785">MAHOUT-677</key>
            <summary>The SimpleCsvExamples didn&apos;t really parsed the double correctly with the FastLine and FastLineReader</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tdunning">Ted Dunning</assignee>
                                    <reporter username="xuwenhao">Stanley Xu</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 Apr 2011 13:13:18 +0100</created>
                <updated>Sat, 21 May 2011 04:19:02 +0100</updated>
                            <resolved>Wed, 20 Apr 2011 17:57:12 +0100</resolved>
                                    <version>0.5</version>
                                    <fixVersion>0.5</fixVersion>
                                    <component>Examples</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                    <timeoriginalestimate seconds="7200">2h</timeoriginalestimate>
                            <timeestimate seconds="7200">2h</timeestimate>
                                        <comments>
                            <comment id="13022090" author="xuwenhao" created="Wed, 20 Apr 2011 13:14:52 +0100"  >&lt;p&gt;I wrote a patch on the code. Just two lines change.&lt;/p&gt;</comment>
                            <comment id="13022096" author="srowen" created="Wed, 20 Apr 2011 13:42:08 +0100"  >&lt;p&gt;Yes that seems like a bug. I also wonder why the code is parsing doubles when the generated input are ints?&lt;/p&gt;

&lt;p&gt;The fast version won&apos;t fail if the input is malformed (values like &quot;foo&quot; or &quot;2.3&quot;), and does make an assumption about character encoding, but I suppose that&apos;s the point of this optimization. But if you&apos;re assuming the you know what the input is like, exactly, can you assume a binary input format and avoid parsing altogether?&lt;/p&gt;

&lt;p&gt;Or... is this really just a proof of concept that could be just as well removed? I don&apos;t see usages.&lt;/p&gt;</comment>
                            <comment id="13022098" author="xuwenhao" created="Wed, 20 Apr 2011 13:49:38 +0100"  >&lt;p&gt;Hi Sean,&lt;/p&gt;

&lt;p&gt;The code is a proof that you could optimize the time spent on parsing the inputs. This optimization is required for sequential algorithm like SGD. Because for SGD, most of the time was spent on parsing and hashing the features, it is mentioned in Chapter 16.3.4 in Mahout in Action. And per our test, more than 80% of the time was spent on parsing the inputs and put it into a Vector, and the training only cost about 10% of the time and the IO cost another 10%. So I will say that the optimization could be thought as &quot;required&quot;.&lt;/p&gt;

&lt;p&gt;The fast mode should be used in the generated text by the SimpleCsvExamples.java which is an integer. I guess why they use double is that they didn&apos;t have a Vector implementation that use a int array to save the content.&lt;/p&gt;</comment>
                            <comment id="13022121" author="srowen" created="Wed, 20 Apr 2011 14:38:07 +0100"  >&lt;p&gt;I can optimize the parsing about 10x more: don&apos;t parse from text! My question is whether the use cases this approach is for are simply better suited to binary input, since it is even faster, results in less I/O, and has no gotchas. Is the idea that you are accepting CSV from an external source or system? in which case I wonder if it&apos;s a good idea to silently mis-parse numbers that aren&apos;t ints.&lt;/p&gt;

&lt;p&gt;I was also just wondering out loud whether it&apos;s better to remove this example rather than try to fix forward, as it&apos;s not an example of using Mahout per se.&lt;/p&gt;</comment>
                            <comment id="13022152" author="xuwenhao" created="Wed, 20 Apr 2011 15:28:01 +0100"  >&lt;p&gt;Hi Sean,&lt;/p&gt;

&lt;p&gt;First, most of the time spent is not on IO or even parsing, but spent on copy a String over and over, which is also mentioned in your book &amp;lt;Mahout In Action&amp;gt;, and I reproduced the same result by a test. The code cost most of the time is :&lt;br/&gt;
encoder&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.addToVector(x.get&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, v);&lt;/p&gt;

&lt;p&gt;Which copied a String once and have to generate the hashCode once again I guess. So what should be avoid is the conversion to a String in parsing the data actually for SGD algorithm.&lt;/p&gt;

&lt;p&gt;I agreed that the performance could be optimized more by a customized binary input format. But I thought the example here is good enough since it proved the idea and easy to read. Using a customized binary format might make the code or data hard to read, and a binary protocol like Thrift is even slower while parsing the data comparing to a customized parser by pure text per my experience.&lt;/p&gt;

&lt;p&gt;Anyway,  it is your call, why don&apos;t you ask the author of the Chapter 16.3.4 of &amp;lt;Mahout In Action&amp;gt; to decide you guys need a better example or just use the patch here?&lt;/p&gt;</comment>
                            <comment id="13022166" author="srowen" created="Wed, 20 Apr 2011 16:20:00 +0100"  >&lt;p&gt;(If it&apos;s just reading ints, I was thinking just write 4-byte ints. That&apos;s got to be the fastest of all.)&lt;/p&gt;

&lt;p&gt;The author would be Ted, really his call. If it&apos;s more of an example for the book, it could be attached to the book. If it stays that&apos;s cool too, just need to have a think about fixing/documenting the issues raised here.&lt;/p&gt;

&lt;p&gt;You&apos;ve raised a different an interesting point about performance though. You find that the slow-down is actually in addToVector, where it converts a String to byte[]? The thing is, the corresponding line in the &quot;fast&quot; version skips this step and adds null.&lt;/p&gt;

&lt;p&gt;Indeed, also passing null in the &quot;normal&quot; version makes it twice as fast for me. It&apos;s still twice as slow as the &quot;fast&quot; version though. But I do wonder whether the example deserves a bit more attention. I may not know what I&apos;m doing. Is that a difference that shouldn&apos;t exist between the two benchmarks?&lt;/p&gt;</comment>
                            <comment id="13022174" author="xuwenhao" created="Wed, 20 Apr 2011 16:33:27 +0100"  >&lt;p&gt;Hi Sean,&lt;/p&gt;

&lt;p&gt;I thought Ted knew the slow-down comes from the addToVector. Since he said &quot;Doing all of the allocations involved in such a copy-heavy programming style costs quite a bit, and lots of people focus on reducing allocation costs by re-using data structures extensively. The fact is, however, that the real cost is not so much the cost of allocation, but the cost of copying the data over and over. An additional cost is due to the fact that constructing a new String object in Java involves creating the hash- code for each new string. Computation of the hash code costs almost as much as copying the data.&quot; in the book page 252.&lt;/p&gt;

&lt;p&gt;And even didn&apos;t count the cost of String copy and hashCode, the fast version still has improvements in IO and text parsing. &lt;/p&gt;

&lt;p&gt;But I thought your idea of use total binary input would be really helpful in real production mode, since the SGD algorithm is really blazing fast, any performance improvement in the feature parse, hashing, encoding would improve the overall performance a lot.&lt;/p&gt;</comment>
                            <comment id="13022178" author="srowen" created="Wed, 20 Apr 2011 16:39:23 +0100"  >&lt;p&gt;(Why don&apos;t I stop talking here since it&apos;s not my code... I&apos;ll commit the fix since it looks clear and let Ted chime in as needed otherwise.)&lt;/p&gt;</comment>
                            <comment id="13022544" author="hudson" created="Thu, 21 Apr 2011 00:44:05 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #765 (See &lt;a href=&quot;https://builds.apache.org/hudson/job/Mahout-Quality/765/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/Mahout-Quality/765/&lt;/a&gt;)&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12476884" name="simplecsvexamplebugfix.diff" size="975" author="xuwenhao" created="Wed, 20 Apr 2011 13:14:52 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 Apr 2011 12:42:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9385</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy3nr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22744</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>