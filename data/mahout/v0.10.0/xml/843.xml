<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:27:00 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-843/MAHOUT-843.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-843] Top Down Clustering</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-843</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Top Down Clustering works in multiple steps. The first step is to find comparative bigger clusters. The second step is to cluster the bigger chunks into meaningful clusters. This can performance while clustering big amount of data. And, it also removes the dependency of providing input clusters/numbers to the clustering algorithm.&lt;/p&gt;

&lt;p&gt;The &quot;big&quot; is a relative term, as well as the smaller &quot;meaningful&quot; terms. So, the control of this &quot;bigger&quot; and &quot;smaller/meaningful&quot; clusters will be controlled by the user.&lt;/p&gt;

&lt;p&gt;Which clustering algorithm to be used in the top level and which to use in the bottom level can also be selected by the user. Initially, it can be done for only one/few clustering algorithms, and later, option can be provided to use all the algorithms ( which suits the case ). &lt;/p&gt;</description>
                <environment></environment>
        <key id="12527312">MAHOUT-843</key>
            <summary>Top Down Clustering</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jeastman">Jeff Eastman</assignee>
                                    <reporter username="paritoshranjan">Paritosh Ranjan</reporter>
                        <labels>
                            <label>clustering</label>
                            <label>patch</label>
                    </labels>
                <created>Sat, 15 Oct 2011 20:27:05 +0100</created>
                <updated>Thu, 9 Feb 2012 14:01:06 +0000</updated>
                            <resolved>Sat, 10 Dec 2011 19:23:55 +0000</resolved>
                                    <version>0.6</version>
                                    <fixVersion>0.6</fixVersion>
                                    <component>Clustering</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13128265" author="paritoshranjan" created="Sat, 15 Oct 2011 20:34:32 +0100"  >&lt;p&gt;I am trying to implement top down clustering. I have read the concept from the book Mahout in action. This patch is just for providing feedback on the line of thought to implement it. &lt;/p&gt;

&lt;p&gt;I think that this Top Down Clustering should be flexible and the user should be able to use different clustering algorithms for first and second level of clustering with parameters that suits the user.&lt;/p&gt;

&lt;p&gt;The patch demonstrates the idea. What is left to code, in the patch, is to arrange clustered output from first level clustering algorithm in a directory structure and provide each directory ( clustered points ) to the second level clustering algorithm.&lt;/p&gt;

&lt;p&gt;Please don&apos;t consider this patch as the final patch. I am submitting this for feedback, and would welcome suggestions to improve it.&lt;/p&gt;</comment>
                            <comment id="13128364" author="paritoshranjan" created="Sun, 16 Oct 2011 08:53:59 +0100"  >&lt;p&gt;After doing the top level clustering, the output is of the form of &quot;clusterid, vectorid&quot;. The problem is, that, the bottom level clustering would need input as a directory of points. So, the points belonging to different clusters should be in different directories.&lt;/p&gt;

&lt;p&gt;This can be done as a post processing step ( after runClustering ). Or it can also be done in the MapReduce Step, if its already known that it is a topdown clustering. &lt;/p&gt;

&lt;p&gt;The MapReduce approach will need some change in all clustering algorithm. But, it will give better performance. The postProcessing approach will not touch any clustering algorithm, but, it will just be an extra step.&lt;/p&gt;

&lt;p&gt;To start with, I am beginning with, the post processing step. As, this will make this patcha a completely clean patch, which could not have any regression. &lt;/p&gt;

&lt;p&gt;Any ideas/suggestions on  how to approach this problem?&lt;/p&gt;</comment>
                            <comment id="13129033" author="jeastman" created="Mon, 17 Oct 2011 18:46:58 +0100"  >&lt;p&gt;I can&apos;t get the patch to do anything. It runs ok, but does not add any of the files. I&apos;m left reading over the original patch file in a browser which is not that great. &lt;/p&gt;

&lt;p&gt;What I get from looking at the patch is you are building a ClusterConfig for the top level clustering step and also for the bottom level clustering step. These capture the various parameters for each clustering algorithm. Then, the driver gets an executor from each config that knows how to invoke the top and bottom clustering steps. On the surface, that seems to be a workable approach.&lt;/p&gt;

&lt;p&gt;All this is pure Java though and there is no CLI interface. This seems like the really challenging part, as each of the clustering configs will need a complete set of CLI arguments (e.g. /bin/mahout topdownclustering &amp;lt;top configs&amp;gt; &amp;lt;bottom configs&amp;gt;). For any given combination of top/bottom configs you are going to need a different CLI argument list. Since top and bottom may be the same algorithm but with different parameters (e.g. t1-top, t1-bottom), or different algorithms with overlapping argument names (e.g. dm-top, dm-bottom), I can&apos;t think of a good way to approach this, can you?&lt;/p&gt;

&lt;p&gt;Isn&apos;t this something that could also be done with a set of shell scripts?&lt;/p&gt;</comment>
                            <comment id="13129052" author="jeastman" created="Mon, 17 Oct 2011 19:09:38 +0100"  >&lt;p&gt;Figured out why the patch doesn&apos;t do what I expected: it is done from inside mahout/core rather than from the top level mahout directory as is customary. The files were added but not in the source tree where they show up with svn st. Looking at the code now in Eclipse, my original comments still apply.&lt;/p&gt;</comment>
                            <comment id="13129059" author="jeastman" created="Mon, 17 Oct 2011 19:19:55 +0100"  >&lt;p&gt;+1 for postprocessing the clustered points into different input directories rather than patching all the clustering algorithms &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. It will be interesting to see how the rest of the bottom code for runClustering develops, as only the top clustering is implemented.&lt;/p&gt;</comment>
                            <comment id="13129062" author="paritoshranjan" created="Mon, 17 Oct 2011 19:23:27 +0100"  >&lt;p&gt;I did not know that. Will do it from parent directory from now onwards. Thanks for letting me know.&lt;/p&gt;

&lt;p&gt;Yes, the code does not work yet because I still need to group points belonging to a similar cluster in their respective directories, and give each cluster directory as the input to the bottom level clustering. I am working on that part and upload a working patch soon. &lt;/p&gt;

&lt;p&gt;One option can be to let the user cluster it manually &lt;/p&gt;

&lt;p&gt;/bin/mahout toplevelclustering &amp;lt;cluster-config&amp;gt;&lt;br/&gt;
/bin/mahout bottomlevelclustering &amp;lt;coluter-config&amp;gt;&lt;/p&gt;

&lt;p&gt;Then we get rid of the duplicate looking arguments. As the only difference would be in input directory of bottom level clustering, which can be derived from input based on whether its a top level or a bottom level clustering ( as the output directory of top level clustering will be controlled by the code).&lt;/p&gt;</comment>
                            <comment id="13129078" author="jeastman" created="Mon, 17 Oct 2011 19:47:43 +0100"  >&lt;p&gt;Ok, but how is this better than using the existing jobs? &lt;/p&gt;

&lt;p&gt;bin/mahout canopy &amp;lt;...&amp;gt;&lt;br/&gt;
bin/mahout separateclusters &amp;lt;...&amp;gt; // your new postprocessor job&lt;br/&gt;
for i in &amp;lt;separateclusters output&amp;gt; do&lt;br/&gt;
  bin/mahout kmeans &amp;lt;...&amp;gt;&lt;br/&gt;
  done&lt;/p&gt;

&lt;p&gt;There is a bit of global argument coupling needed between the -o of canopy and the -i of separateclusters, also between the -o of separateclusters and the -i of kmeans. Are there any other argument couplings? It seems to me that the new postprocessor would be a useful addition to Mahout and the user would then be responsible for wiring the three steps together. Can you think of a way to improve upon this?&lt;/p&gt;

&lt;p&gt;This problem also seems to be similar to the Mahout recommender code: all done by plugging existing Java classes together in a program which is specific for each problem domain/application. There is no CLI for doing this because of the same sorts of issues we are discussing here.&lt;/p&gt;</comment>
                            <comment id="13143296" author="paritoshranjan" created="Thu, 3 Nov 2011 16:37:48 +0000"  >&lt;p&gt;This patch implements TopDownClustering. The class to use it is @TopDownClusteringDriver.&lt;/p&gt;

&lt;p&gt;Top Level Clustering can be done by implementations of @TopLevelClusterConfig and bottom level clustering can be done by all implementations of @BottomLevelClusterConfig which are marker interfaces.&lt;/p&gt;

&lt;p&gt;The concept is, to use different implementations of @ClusterConfig to specify parameters of different clustering algorithms. These @ClusterConfig implementations are passed as parameters specifying top level clustering configuration and bottom level clustering configuration.&lt;/p&gt;

&lt;p&gt;The top level clustering output is post processed using @TopLevelClusterOutputPostProcessor which groups the vectors of similar clusters together. All of these clusters are further processed by bottom level clustering.&lt;/p&gt;

&lt;p&gt;There is a specific implementation of @ClusterExecutor associated with each implementation of @ClusterConfig which uses the cluster config parameters to execute the specific algorithm.&lt;/p&gt;

&lt;p&gt;The output of top level clustering is kept in &amp;lt;output path&amp;gt;/topLevelCluster and the output of bottom level clustering is kept in &amp;lt;output path&amp;gt;/bottomLevelCluster.&lt;/p&gt;

&lt;p&gt;The post processed output of top level cluster is kept in &amp;lt;output path&amp;gt;/topLevelCluster/topLevelClusterPostProcessed/clusterId. &lt;/p&gt;

&lt;p&gt;Both the top and bottom level cluster use the clusterId as the name of the clusters produced.&lt;/p&gt;

&lt;p&gt;I have added javadocs whereever it felt necessary so it would also help you guide through the code. I have tested using @CanopyClusterConfig as top and bottom level cluster config and it works.The other configs should work out of box.&lt;/p&gt;</comment>
                            <comment id="13143362" author="jeastman" created="Thu, 3 Nov 2011 17:38:02 +0000"  >&lt;p&gt;This patch looks like a refinement of the earlier patch. Writing a Java driver to orchestrate top-down clustering given the Config and Postprocessor instances seems a useful experiment. What is needed to move this patch closer to trunk is: 1) some unit tests of the Java classes, 2) a command line interface. This last requirement is where I get back to my earlier question above: &quot;how is this better than using the existing &lt;span class=&quot;error&quot;&gt;&amp;#91;CLI&amp;#93;&lt;/span&gt; jobs &lt;span class=&quot;error&quot;&gt;&amp;#91;in a shell script&amp;#93;&lt;/span&gt;?&quot;&lt;/p&gt;

&lt;p&gt;To use the Java classes for top clusterer A and bottom clusterer B one needs to provide all of the arguments for A and B. Given all the different flavors of A and B which could be chosen, it still seems really complicated to define a single CLI which can provide all the permutations. Do you have a strategy for this?&lt;/p&gt;

&lt;p&gt;I do think the postprocessor to split the clusteredPointsA into directories so that multiple invocations of B can proceed is useful and I would suggest focusing on that as a stand-alone CLI method first. This would be a minimal first step and save the combinatoric explosion of A,B CLI arguments needed to encapsulate the whole process. With some unit tests and an example script or two, I could see that in trunk very soon.&lt;/p&gt;</comment>
                            <comment id="13143395" author="paritoshranjan" created="Thu, 3 Nov 2011 18:10:43 +0000"  >&lt;p&gt;To answer &quot;To use the Java classes for top clusterer A and bottom clusterer B one needs to provide all of the arguments for A and B.&quot; I would say that that&apos;s needed as the user gets absolute control on the top and bottom level clustering.&lt;/p&gt;

&lt;p&gt;An alternative, to let it be used in a very simple way, would be, to ask for bottom level cluster configs, and a magnitude parameter, which will just increase the magnitude of the bottom level clustering algorithm by magnitude times e.g. t1 = t1*10, or vice versa.&lt;/p&gt;

&lt;p&gt;I will add the Junit test cases soon.&lt;/p&gt;</comment>
                            <comment id="13143405" author="jeastman" created="Thu, 3 Nov 2011 18:19:41 +0000"  >&lt;p&gt;You&apos;ve not said how you plan to do a CLI for this, and why the Java classes are an improvement over using the existing CLI calls in a script?&lt;/p&gt;

&lt;p&gt;I don&apos;t think a multiplier approach will be workable. In general you need to provide all the A and B arguments, for every combination of A and B including A = B. I believe by instantiating the requisite config and executor classes you can make it work, but the CLI is a big part of the Mahout API.&lt;/p&gt;

&lt;p&gt;Bring on the unit tests.&lt;/p&gt;</comment>
                            <comment id="13143417" author="paritoshranjan" created="Thu, 3 Nov 2011 18:28:27 +0000"  >&lt;p&gt;I use Java API and not CLI&apos;s so I don&apos;t have much idea about that. Would appreciate if someone more familiar with CLI&apos;s can create it. &lt;br/&gt;
If you still feel that the patch can be useful, then, I can add the Junit tests and submit it.&lt;/p&gt;</comment>
                            <comment id="13143430" author="jeastman" created="Thu, 3 Nov 2011 18:43:24 +0000"  >&lt;p&gt;Well, passing off the hardest part of the problem to &quot;someone more familiar&quot; is guaranteed to make this patch sit in limbo. Right now the Java class approach is an interesting experiment. To complete the feature submission, you really need to address the CLI too. Or at least find that somebody to help you get it done. A half-done feature won&apos;t get committed; we are actually moving to remove such features from trunk to get ready for a 1.0 release next year.&lt;/p&gt;

&lt;p&gt;You still have not said why you believe the Java approach is better than using the existing CLIs in a script with your postprocessor. &lt;/p&gt;

&lt;p&gt;FWIW, I think the postprocessor, by itself, with a CLI, JavaDocs, an example script and Unit tests is you best path to a submission which will pass muster.&lt;/p&gt;</comment>
                            <comment id="13143694" author="paritoshranjan" created="Fri, 4 Nov 2011 02:25:22 +0000"  >&lt;p&gt;I don&apos;t see much of a &quot;comparison&quot; between a Java Approach and a CLI. I see these two as separate means to perform the same task. I think Mahout provides both ways to accomplish most of the tasks. So, to me, this question is like &quot;Why KMeansDriver is better than CLI to do KMeans&quot;, which I think depends on the way user wants to use it.&lt;/p&gt;

&lt;p&gt;So, I don&apos;t see the reason of questioning the Java API. This helps the user to accomplish top down clustering, with different clustering algorithms, without getting into its intricacies.&lt;/p&gt;

&lt;p&gt;I also don&apos;t think that creating a CLI would be the hardest part of the feature. So, I can create the CLI with top-bottom parameters for TopDownClustering all together. Because I think that many parameters to run Clustering are common to most of the algorithms, so its not going to be that complicated and complex. But, does creating this CLI and writing the Junit Tests complete the feature?&lt;/p&gt;

&lt;p&gt;Writing a CLI which does clustering, post processing, and again clustering makes sense as it helps reducing parameters. But, still, why agains the Java API?&lt;/p&gt;</comment>
                            <comment id="13144731" author="paritoshranjan" created="Sat, 5 Nov 2011 16:05:55 +0000"  >&lt;p&gt;Jeff, I analyzed the CLI creation mechanism. And also the shell script mechanism. Both are achievable and there is not much difference in my view.&lt;/p&gt;

&lt;p&gt;The only advantage that I can think of by using top-bottom config parameters in CLI is that, it remains immune to the internal implementation of top down clustering. This makes it similar to other clustering CLI&apos;s. If we use shell script, then we write logic in it ( Iterate on top level clusters ). If the internal implementation of the algorithm changes, then the shell script will be affected.&lt;/p&gt;

&lt;p&gt;The advantage with shell script is that, it makes CLI creation easier. Provided, the user is writing the shell script. Else, the shell script would also need arguments to define top and bottom level clustering parameters. If the user writes the shell script, then we make life tough for him ( a little ). ( Question : Who will provide the shell script, Mahout, or the user ).&lt;/p&gt;

&lt;p&gt;Another advantage of exposing post processor as a CLI is that, it enables Mahout to group points of similar clusters together after clustering, which is not available in Mahout yet.&lt;/p&gt;

&lt;p&gt;Based on this analysis, which approach do you suggest?&lt;/p&gt;</comment>
                            <comment id="13145680" author="jeastman" created="Mon, 7 Nov 2011 18:31:07 +0000"  >&lt;p&gt;Paritosh,&lt;br/&gt;
Top-down Clustering involves running a top driver A which produces clustered points as output. Then a postprocessing job moves each of the k cluster&apos;s points into a separate folder which is given as input to each of the k bottom clustering drivers B. Given the existence of the postprocessing job then a user can elect to code it entirely in Java or write a shell script to use the CLI for each of the three steps.&lt;/p&gt;

&lt;p&gt;Though your postprocessor is still sequential and will not scale to large datasets, I see creating a CLI for a M/R version of this as being the smallest incremental change to Mahout which will facilitate top-down clustering. Since each choice of A and B clustering algorithms carries its own set of parameters, I see this as making an overall CLI to bundle the entire top-down process as problematic.&lt;/p&gt;

&lt;p&gt;I can see you approach in the pure Java implementation is creating config and executor classes which bundle up the top and bottom cluster driver parameters and then orchestrate the top-down clustering process. Then, in the middle, the postprocessor is run to set up the bottom clustering folders. This is not a complicated pattern for users to do manually: configure A and run it; run the postprocessor; then configure B and run it against each of the bottom level input dictionaries.&lt;/p&gt;

&lt;p&gt;From a minimalize perspective, all we really need is a scalable postprocessor with Java driver &amp;amp; CLI and an example shell script that shows how to do top-down with one particular set of A and B.&lt;/p&gt;
</comment>
                            <comment id="13146065" author="paritoshranjan" created="Tue, 8 Nov 2011 03:45:54 +0000"  >&lt;p&gt;Ok. I agree that implementing the post processor will be the smallest step which will make top down clustering work. Though the user will have to manually code some part of it. &lt;/p&gt;

&lt;p&gt;If we see this post processor as the smallest step towards implementing the top down clustering, and considering we are following incremental development ( which I have guessed from your comments ), can you tell what all would we need for a full fledged top down clustering, in incremental order?&lt;/p&gt;

&lt;p&gt;I have added the CLI to the post processor. The CLI asks for the output path given to the cluster driver and then post processes it. Is it ok?&lt;/p&gt;

&lt;p&gt;Would add some Junit Tests and submit the patch.&lt;/p&gt;
</comment>
                            <comment id="13146427" author="paritoshranjan" created="Tue, 8 Nov 2011 17:43:09 +0000"  >&lt;p&gt;Hi Jeff, I have added the patch which has the CLI and Junit test for PathDirectory and ClusterOutputPostProcessor. These two classes combine the post processor, along with TopDownClusteringPathConstants.&lt;/p&gt;

&lt;p&gt;I have tried to mirror a test case from TestKMeansClustering and running the post processor on it. My dev env is having trouble running Mahout test cases ( its windows, though I am having cygwin, still it creates problem ). So, I would also appreciate your help in adding some meaningful assertions in test cases. &lt;/p&gt;

&lt;p&gt;This is also my first attempt at creating the CLI, so please help if I did something wrong there. &lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13147210" author="jeastman" created="Wed, 9 Nov 2011 18:32:31 +0000"  >&lt;p&gt;I&apos;ve downloaded and installed your latest patch and it mostly passed (1 hunk failed in src/conf/driver/classes.props). I tried running the ClusteredOutputPostProcessorTest and it failed with an IOException: wrong value class at ClusterOutputPostProcessor line 94.&lt;/p&gt;

&lt;p&gt;Looking at your unit test, I&apos;d suggest simplifying it a lot:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Use the sequential version of Canopy to create your top clusteredPoints directory. It writes the same files as the mapreduce version and runs a lot faster during a build.&lt;/li&gt;
	&lt;li&gt;Skip the k-means step as it adds no value when testing the postprocessor. The canopy clusteredPoints are all you need.&lt;/li&gt;
	&lt;li&gt;Get your sequential version of postProcessor working and verify that the points output to the respective input directories for the bottom clustering are correct.&lt;/li&gt;
	&lt;li&gt;Run a bottom clustering canopy job if you want to prove you got the input file directories right in the previous step, but make it sequential too&lt;/li&gt;
	&lt;li&gt;Delete the SpectralKMeans stuff. It uses an affinity matrix as input and not a list of input vectors. It also won&apos;t produce clusteredPoints like the other algos. I&apos;d concentrate on Canopy, KMeans, FuzzyK, MeanShift and Dirichlet which all behave similarly.&lt;/li&gt;
	&lt;li&gt;Make a new small patch with just the postprocessor stuff in it.&lt;/li&gt;
	&lt;li&gt;Write a small shell script to invoke the canopy top, the postprocessor and the canopy bottom using the CLIs for both. Maybe have a couple of flavors using different top/bottom combinations.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;From a minimalist point of view, this would make a reasonable Mahout submission to enable hierarchical clustering&lt;/p&gt;</comment>
                            <comment id="13147228" author="jeastman" created="Wed, 9 Nov 2011 19:19:28 +0000"  >&lt;p&gt;After completing the above, I&apos;d recommend creating a mapreduce version of the postprocessor. If you have TBs of vectors to cluster you will be most unhappy with the performance of the sequential version. I have some ideas on how to do this:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mapper reads clusteredPoints output and emits each VectorWritable to its clusterId&lt;/li&gt;
	&lt;li&gt;Driver needs to set numReducers to be the number of clusters present in the clusteredPoints. You can compute this by reading the clusters-*-final directory and counting the clusters.&lt;/li&gt;
	&lt;li&gt;Each reducer will receive all the VW points for a single cluster and will output a part file with key=clusterId value= 
{VW points}&lt;/li&gt;
	&lt;li&gt;Subsequent driver code needs to move each part-r-xxx file into its own directory so the bottom clustering job can take that as input. This will likely be a whopping large file so make sure it is splittable (I think sequenceFiles are already).&lt;/li&gt;
	&lt;li&gt;Implement -xm option on your postprocessor driver so that it can run either sequentially or mapreduce. Both should produce the same results.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13147229" author="paritoshranjan" created="Wed, 9 Nov 2011 19:20:52 +0000"  >&lt;p&gt;Thanks for your inputs Jeff. I will try to provide the patch according to your suggestions soon.&lt;/p&gt;</comment>
                            <comment id="13147884" author="paritoshranjan" created="Thu, 10 Nov 2011 18:24:14 +0000"  >&lt;p&gt;I have added the Junit test as suggested by you. The output processor is running properly. Which is also evident from the Junit Test.&lt;/p&gt;

&lt;p&gt;Regarding the bottom level clustering through Canopy Clustering. Through Junit test, I have found that, CanopyDriver is reopening SequenceFile.Writer on the clustered files. Since SequenceFile.Writer does not support appending data after reopening Writer, so, the data is being overridden over there.&lt;/p&gt;

&lt;p&gt;This overwriting issue is present only in the sequential version of clusterData. clusterDataSeq method overwrites it. I used the Java API on hadoop cluster and it worked fine, which uses clusterDataMR.&lt;/p&gt;</comment>
                            <comment id="13147971" author="jeastman" created="Thu, 10 Nov 2011 19:57:55 +0000"  >&lt;p&gt;I applied the patch and had the same conflicts with src/conf/driver.classes.props. There remain a number of unresolved external references which make me unable to run the test. Suggest you need to add at least the TopDownClusteringPathConstants to the patch, maybe more. &lt;/p&gt;

&lt;p&gt;Can you be more explicit about what is happening in the sequential Canopy overwrite case?&lt;/p&gt;

&lt;p&gt;Suggest you need to do an svn up before making your next patch file to pick up all the other changes that have happened in the interim.&lt;/p&gt;</comment>
                            <comment id="13148248" author="paritoshranjan" created="Fri, 11 Nov 2011 04:09:48 +0000"  >&lt;p&gt;I have taken all incoming changes and created the patch. Also added TopDownClusteringPathConstants. Can&apos;t see any other external reference.&lt;/p&gt;

&lt;p&gt;The clusterDataMR and clusterDataSeq, both overwrite the points in clusteredPoints when the input file provided has more than one paths, which is the case in the input of bottom level cluster. &lt;/p&gt;

&lt;p&gt;The test case does top level clustering, asserts cluster output processor, both of which works fine. Then it is asserting bottom level clustering which shows the problem. Only one point is written(overridden) in one cluster. This can be seen while debugging clusterDataSeq.&lt;/p&gt;</comment>
                            <comment id="13148296" author="paritoshranjan" created="Fri, 11 Nov 2011 06:26:45 +0000"  >&lt;p&gt;Made some changes in the test case. Please use this latest patch.&lt;/p&gt;</comment>
                            <comment id="13150323" author="paritoshranjan" created="Tue, 15 Nov 2011 09:16:50 +0000"  >&lt;p&gt;Jeff, I was analyzing the idea of the MapReduce version of the PostProcessor. I have a query on the solution you have proposed. &lt;/p&gt;

&lt;p&gt;As you said &quot;Each reducer will receive all the VW points for a single cluster and will output a part file with key=clusterId value= &lt;/p&gt;
{VW points}
&lt;p&gt;&quot;. &lt;/p&gt;

&lt;p&gt;What will happen if the number of reducers available is less than the number of clusters? Then, I think, each reducer will get more than once cluster&apos;s vectors. Please correct me if I am wrong.&lt;/p&gt;</comment>
                            <comment id="13150569" author="jeastman" created="Tue, 15 Nov 2011 16:03:43 +0000"  >&lt;p&gt;You are correct. This is why the number of reducers needs to be &amp;gt;= the number of clusters. Note the postprocessor then needs to move each part file into its own directory for the bottom clustering to use. I think the bottom clusterer can be given a single (likely huge) part file but we need to make sure this can be split automatically by Hadoop or the large file needs to be broken up into multiple smaller files (by another MR job).&lt;/p&gt;</comment>
                            <comment id="13150640" author="paritoshranjan" created="Tue, 15 Nov 2011 18:00:19 +0000"  >&lt;p&gt;The output will be incorrect if the number of reducers &amp;lt; number of clusters. I think the job should fail in this case. What do you suggest?&lt;/p&gt;

&lt;p&gt;I think the sequence files are already broken in different parts. But still, we can keep an eye on this.&lt;/p&gt;

&lt;p&gt;Meanwhile, did you get chance to analyze the patch for cluster output processor.&lt;/p&gt;</comment>
                            <comment id="13150678" author="jeastman" created="Tue, 15 Nov 2011 19:00:57 +0000"  >&lt;p&gt;Actually, I&apos;d suggest loading the clusters-n-final clusters to count the number of reducers required rather than making it an argument and then failing if it is wrong. &lt;/p&gt;

&lt;p&gt;On the patch, it loads and the tests all run. I&apos;ve not dug into it beyond that yet.&lt;/p&gt;</comment>
                            <comment id="13150882" author="jeastman" created="Tue, 15 Nov 2011 23:27:23 +0000"  >&lt;p&gt;I&apos;ve had some time to poke around in the code and single-step through the test execution. It seems to work as advertised but I had a difficult time reading the code and I&apos;m concerned that the implementation has some performance challenges. Much of this involves personal style so take it with a grain of salt:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The code is very fine grain, with many small methods. Usually I&apos;m faced with the opposite - huge methods that need to be decomposed - but here the smallness works against readability. Consider distributeVectors() which calls putVectorsInRespectiveClusters() which calls findClusterAndAddVector() which calls addVectorToItsClusterFile() which calls writeVectorToCluster(). These small methods are only called in a single place and could be inlined to provide more context for how the point is finally written.&lt;/li&gt;
	&lt;li&gt;The ClusterOutputPostProcessor has a number of private fields which are initialized and used within this method chain rather than passing needed values in as method arguments. If I&apos;m stopped in the debugger as I am now, it is challenging for me to identify where and how a particular field was initialized because it is not visible in the stack frames of the call chain.&lt;/li&gt;
	&lt;li&gt;WriteVectorToCluster() creates a SequenceFile.Writer for each point, then appends to it syncs it and closes it. The path for the output file is passed in two levels. Seems to me that will thrash the GC and I&apos;d consider passing the writer down instead of the path so you only open/append/sync/close one for each cluster.&lt;/li&gt;
	&lt;li&gt;Minor now, but the run method has one -i argument which is immediately assigned to clusterOutputToBeProcessed. And the inputWriter is actually writing output. Seems backwards. I&apos;d suggest adding a -o argument so callers have full control over where the points come from and where they get written.&lt;/li&gt;
	&lt;li&gt;Finally, I&apos;d also suggest adding a -ci argument so that the clusters can be read in the beginning. This will facilitate setting numReducers later and would allow you to create all the output writers at the beginning rather than lazily as they are encountered.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All this aside however, it seems to work and is a good step forward. Once the mapreduce version gets fleshed out you will likely want to refactor the whole thing anyway. &lt;/p&gt;</comment>
                            <comment id="13150883" author="jeastman" created="Tue, 15 Nov 2011 23:27:24 +0000"  >&lt;p&gt;I&apos;ve had some time to poke around in the code and single-step through the test execution. It seems to work as advertised but I had a difficult time reading the code and I&apos;m concerned that the implementation has some performance challenges. Much of this involves personal style so take it with a grain of salt:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The code is very fine grain, with many small methods. Usually I&apos;m faced with the opposite - huge methods that need to be decomposed - but here the smallness works against readability. Consider distributeVectors() which calls putVectorsInRespectiveClusters() which calls findClusterAndAddVector() which calls addVectorToItsClusterFile() which calls writeVectorToCluster(). These small methods are only called in a single place and could be inlined to provide more context for how the point is finally written.&lt;/li&gt;
	&lt;li&gt;The ClusterOutputPostProcessor has a number of private fields which are initialized and used within this method chain rather than passing needed values in as method arguments. If I&apos;m stopped in the debugger as I am now, it is challenging for me to identify where and how a particular field was initialized because it is not visible in the stack frames of the call chain.&lt;/li&gt;
	&lt;li&gt;WriteVectorToCluster() creates a SequenceFile.Writer for each point, then appends to it syncs it and closes it. The path for the output file is passed in two levels. Seems to me that will thrash the GC and I&apos;d consider passing the writer down instead of the path so you only open/append/sync/close one for each cluster.&lt;/li&gt;
	&lt;li&gt;Minor now, but the run method has one -i argument which is immediately assigned to clusterOutputToBeProcessed. And the inputWriter is actually writing output. Seems backwards. I&apos;d suggest adding a -o argument so callers have full control over where the points come from and where they get written.&lt;/li&gt;
	&lt;li&gt;Finally, I&apos;d also suggest adding a -ci argument so that the clusters can be read in the beginning. This will facilitate setting numReducers later and would allow you to create all the output writers at the beginning rather than lazily as they are encountered.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All this aside however, it seems to work and is a good step forward. Once the mapreduce version gets fleshed out you will likely want to refactor the whole thing anyway. &lt;/p&gt;</comment>
                            <comment id="13152124" author="paritoshranjan" created="Thu, 17 Nov 2011 16:27:27 +0000"  >&lt;p&gt;Hi Jeff, &lt;/p&gt;

&lt;p&gt;I was working on the MapReduce version of the post processor and the solution you proposed is shaping up. Looks like a really cool solution. &lt;/p&gt;

&lt;p&gt;I have a doubt regarding calculation of number of clusters. I think you want to count the number of centroids produced in the final directory. Am I correct? If yes, then, is this final directory produced in all the algorithms we want to support, as you mentioned &quot;Canopy, KMeans, FuzzyK, MeanShift and Dirichlet&quot;. If I have some misconception, then please help to clarify that.&lt;/p&gt;

&lt;p&gt;I was also looking into the refactoring that you suggested. &lt;br/&gt;
-I will make the code more readable. So, the method naming problem would be solved. &lt;br/&gt;
-Instead of opening and closing SequenceFile.Writer, I can keep them in a map, for each clusterId, and reuse it. In the end, we can close all of them together Will this solve the issue?&lt;br/&gt;
-Regarding the private fields stuff. I will say that, it looks better to me as a code point of view. It might be difficult to debug, but I think too many variables in a method does not account for clean code. I will suggest to keep it the way it is now. What do you suggest?&lt;/p&gt;</comment>
                            <comment id="13152215" author="jeastman" created="Thu, 17 Nov 2011 18:47:42 +0000"  >&lt;p&gt;All the clustering algorithms you mention write their Clusters to clusters-n-final, so if you load them from that directory you will get the correct counts to set numReducers with.&lt;/p&gt;

&lt;p&gt;I&apos;m not hung up at all on the style issues I suggested. I think you are making the most important improvements and that should suffice.&lt;/p&gt;

&lt;p&gt;Looking forward to seeing the mapreduce version.&lt;/p&gt;</comment>
                            <comment id="13152883" author="paritoshranjan" created="Fri, 18 Nov 2011 14:05:55 +0000"  >&lt;p&gt;I am doing Canopy Clustering and I just get clusters-0 	directory. There is no clusters-n-final. Is this the expected behavior or am I doing something wrong?&lt;/p&gt;</comment>
                            <comment id="13152968" author="jeastman" created="Fri, 18 Nov 2011 17:03:45 +0000"  >&lt;p&gt;You are correct. Canopy writes to clusters-0 only. The iterative algorithms rename their last clusters-n directory to clusters-n-final to make accessing the final clusters simpler. Canopy could easily be adjusted to write to clusters-0-final if that makes things easier.&lt;/p&gt;</comment>
                            <comment id="13153046" author="paritoshranjan" created="Fri, 18 Nov 2011 18:59:11 +0000"  >&lt;p&gt;If it can be done easily, then I think we should do it. Can you do that? Then it will make the ClusterCountReader&apos;s code consistent. The MapReduce version is working properly and splitting clusters into respective part files. If you can commit the Canopy code, then I will be able to create the patch.&lt;/p&gt;

&lt;p&gt;I was also thinking of not moving these part files into their respective directories. I think it can be avoided as reduction in this processing step will increase performance. And, the files are already separated, so the bottom clustering will be anyway able to use them. What do you suggest?&lt;/p&gt;</comment>
                            <comment id="13153117" author="paritoshranjan" created="Fri, 18 Nov 2011 20:58:48 +0000"  >&lt;p&gt;Implemented MapReduce version of Post Processor.&lt;/p&gt;

&lt;p&gt;Improved readability of the code as per suggestions. &lt;/p&gt;

&lt;p&gt;Added output option and sequential/mapreduce execution option.&lt;/p&gt;

&lt;p&gt;Keeping SequenceFile.Writer in Map and closing them in end which has improved performance. This has also fixed the problem mentioned earlier that &quot;The clusterData is overriding points&quot;. The test case of ClusterOutputProcessor demonstrates top down clustering.&lt;/p&gt;

&lt;p&gt;Reading clusters from cluster-*-final directory. So, Canopy Clustering would need a fix as discussed above.&lt;/p&gt;
</comment>
                            <comment id="13153509" author="paritoshranjan" created="Sat, 19 Nov 2011 15:00:51 +0000"  >&lt;p&gt;Added test case for ClusterCountReader. Improved assertions of top down clustering.&lt;/p&gt;

&lt;p&gt;Tested Cluster Output post processor for sequential as well as MapReduce using K-Means algorithm. Works fine. &lt;/p&gt;

&lt;p&gt;I have not moved the part files to specific directories yet. Waiting for your suggestion on that. To me, it looks like keeping the clusters in the part files itself is not a problem. As it will save a processing step and increase performance. &lt;/p&gt;</comment>
                            <comment id="13153829" author="paritoshranjan" created="Sun, 20 Nov 2011 16:43:05 +0000"  >&lt;p&gt;Able to move part files into their respective directories, without any performance issues by using FileSystem.rename(Path,Path) to move files.&lt;/p&gt;

&lt;p&gt;Writing canopy clusters to clusters-0-final. &lt;/p&gt;

&lt;p&gt;The sequential and mapreduce are giving the same results, in same format.&lt;/p&gt;

&lt;p&gt;I think its done.&lt;/p&gt;</comment>
                            <comment id="13154871" author="paritoshranjan" created="Tue, 22 Nov 2011 04:46:00 +0000"  >&lt;p&gt;Hi Jeff,&lt;/p&gt;

&lt;p&gt;Did you get any chance to analyze the patch.&lt;/p&gt;</comment>
                            <comment id="13156028" author="paritoshranjan" created="Wed, 23 Nov 2011 18:26:36 +0000"  >&lt;p&gt;How to Contribute page talks about gentle reminders after few days of submitting patch. So, it is one of them &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                            <comment id="13157179" author="paritoshranjan" created="Fri, 25 Nov 2011 14:49:40 +0000"  >&lt;p&gt;Another friendly reminder &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, as suggested on how to contribute page. &lt;/p&gt;

&lt;p&gt;I think Jeff is a bit busy nowadays.&lt;/p&gt;

&lt;p&gt;The latest patch has all the suggestions made by Jeff incorporated, it works as desired, and is ready to be committed. It is also simple to review if you just read the discussions.&lt;/p&gt;

&lt;p&gt;So, anyone having any idea about clustering can review it. Or, I wait.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. It has been quite some time.&lt;/p&gt;</comment>
                            <comment id="13159884" author="paritoshranjan" created="Wed, 30 Nov 2011 07:50:59 +0000"  >&lt;p&gt;Another reminder to review this patch.&lt;/p&gt;</comment>
                            <comment id="13162195" author="jeastman" created="Sat, 3 Dec 2011 18:32:42 +0000"  >&lt;p&gt;Sorry, I was moving to Denver. I will review this patch next.&lt;/p&gt;</comment>
                            <comment id="13162548" author="jeastman" created="Mon, 5 Dec 2011 01:15:02 +0000"  >&lt;p&gt;The patch installs cleanly and its unit tests run. But a full mvn install fails the K-means unit test, likely because of the clusters-0-final change in Canopy. There are some JavaDocs in need of completion and I don&apos;t see how the execution mode can ever be set in the driver. Otherwise it is looking pretty reasonable and is almost ready to commit. Could you add a wiki page about it too?&lt;/p&gt;</comment>
                            <comment id="13162840" author="paritoshranjan" created="Mon, 5 Dec 2011 15:50:49 +0000"  >&lt;p&gt;Hi Jeff,&lt;/p&gt;

&lt;p&gt;I have started adding the content in wiki page &lt;a href=&quot;https://cwiki.apache.org/MAHOUT/top-down-clustering.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/MAHOUT/top-down-clustering.html&lt;/a&gt;. Is the location fine?&lt;/p&gt;

&lt;p&gt;The execution mode you are talking about is the sequential/mapreduce version. Correct? If yes, then there is a paramter for that. The sequential or the mapreduce version is executed based on that.&lt;/p&gt;

&lt;p&gt;Do I need to fix the KMeansTests and the Javadocs? If yes, would you like to specify some methods where the javadocs are not good, or, I will just have a second look on them and try to make them better. Can you also provide the class names where the tests are failing ( because I skip tests to build Mahout, as I use windows).&lt;/p&gt;</comment>
                            <comment id="13162984" author="jeastman" created="Mon, 5 Dec 2011 19:56:38 +0000"  >&lt;p&gt;The wiki page looks like a good start. If you could include an example using the post processor it would help others to understand how to use it.&lt;/p&gt;

&lt;p&gt;The driver run() method adds -i and -o options but does not add the -xm option &lt;/p&gt;

&lt;p&gt;addOption(DefaultOptionCreator.methodOption().create());&lt;/p&gt;

&lt;p&gt;thus the subsequent getOption(DefaultOptionCreator.METHOD_OPTION) will always return null and sequential execution cannot be enabled. &lt;/p&gt;

&lt;p&gt;I&apos;d like to see all the public methods, at least, have useful JavaDocs. When I look at the ClusterOutputPostProcessorDriver, there are several methods with incomplete JavaDoc comments. The 3 TODO indicators are a place to start, but many of the other methods in the patch do not include descriptions of the method arguments. In Eclipse, and I guess in IntelliJ, you can have the IDE flag these situations.&lt;/p&gt;

&lt;p&gt;The k-means unit test which is failing is testKMeansWithCanopyClusterId, which fails because it is looking for &quot;clusters-0&quot; and not &quot;clusters-0-final&quot;. There are also other unit tests which fail for the same reasons. I can fix them all before I commit the patch, but have you considered doing your development in a Linux VM on your Windows box? It is good practice to always run a full clean build before committing, since little changes like &quot;-final&quot; have a way of breaking lots of other code. &lt;/p&gt;</comment>
                            <comment id="13164173" author="paritoshranjan" created="Wed, 7 Dec 2011 06:10:28 +0000"  >&lt;p&gt;Added option for xm.&lt;/p&gt;

&lt;p&gt;Revisited all Javadocs. All public methods have proper javadocs now. Private method have javadocs as per need.&lt;/p&gt;

&lt;p&gt;Revisited failing tests which were happening due to clusters-0-final change. Fixed all which I can find. Please fix others before committing, if you are able to find more.&lt;/p&gt;

&lt;p&gt;Thanks for the help for addOption...xm. I was not able to figure that out &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                            <comment id="13164418" author="paritoshranjan" created="Wed, 7 Dec 2011 14:24:15 +0000"  >&lt;p&gt;Also completed the wiki page, &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cwiki.apache.org/MAHOUT/top-down-clustering.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://cwiki.apache.org/MAHOUT/top-down-clustering.html&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13164664" author="jeastman" created="Wed, 7 Dec 2011 20:10:33 +0000"  >&lt;p&gt;Patch looks ready to commit but I am currently blocked running a full build because an unrelated test (TestDistributedRowMatrix.testTranspose) is failing. I want to make sure that all the tests run before I commit.&lt;/p&gt;

&lt;p&gt;On the wiki, I&apos;d like to see a description and example using the CLI interface too. Also, top-down clustering is not limited to top- and bottom- clusterings; you might have an arbitrary number of middle- clusterings in general. Finally, could you look at the organization and formatting of the other clustering algorithms and adopt some similar conventions?&lt;/p&gt;
</comment>
                            <comment id="13164980" author="paritoshranjan" created="Thu, 8 Dec 2011 04:21:29 +0000"  >&lt;p&gt;I will do that.&lt;/p&gt;</comment>
                            <comment id="13165014" author="hudson" created="Thu, 8 Dec 2011 05:56:32 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #1236 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1236/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1236/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-843&quot; title=&quot;Top Down Clustering&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-843&quot;&gt;&lt;del&gt;MAHOUT-843&lt;/del&gt;&lt;/a&gt;: Final patch plus some integration fixes. All tests run&lt;/p&gt;

&lt;p&gt;jeastman : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1211715&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1211715&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/canopy/CanopyDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown/PathDirectory.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown/TopDownClusteringPathConstants.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/canopy/TestCanopyCreation.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/kmeans/TestKmeansClustering.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/topdown&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/topdown/PathDirectoryTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/topdown/postprocessor&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReaderTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/TestClusterDumper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/TestClusterEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/src/conf/clusterpp.props&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/src/conf/driver.classes.props&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13165859" author="paritoshranjan" created="Fri, 9 Dec 2011 05:29:06 +0000"  >&lt;p&gt;I took code update. In clusterpp.props the code is written twice. To me, it looks like an error while committing. If not, please ignore.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;The following parameters must be specified&lt;br/&gt;
#i|input = /path/to/initial/cluster/output&lt;br/&gt;
#o|output = /path/to/output&lt;/li&gt;
&lt;/ol&gt;



&lt;ol&gt;
	&lt;li&gt;The following parameters must be specified&lt;br/&gt;
#i|input = /path/to/initial/cluster/output&lt;br/&gt;
#o|output = /path/to/output&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13166646" author="jeastman" created="Fri, 9 Dec 2011 23:03:58 +0000"  >&lt;p&gt;I fixed the duplication.&lt;/p&gt;

&lt;p&gt;On the wiki page,it states that &quot;So, all clustering algorithms available in Mahout, other than the MinHash Clustering algorithm ( which is a &quot;Bottom Up&quot; Clustering Algorithm ), are suitable...). I don&apos;t believe this is true. Seems to me that any clustering algorithm should be usable in either/any step. Any clustering algorithm which operates upon Vectors and produces WeightedVectorWritables can be used. Isn&apos;t that the real criteria?&lt;/p&gt;

&lt;p&gt;Finally, it would be nice to see a CLI example &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13166788" author="paritoshranjan" created="Sat, 10 Dec 2011 04:22:34 +0000"  >&lt;p&gt;Ah, Its a mistake. I meant to write MeanShiftClustering, which is actually a bottom up clustering. But yes, it can also be used, so, leaving the choice of clustering algorithm to the user would be the best thing. I will update the wiki.&lt;/p&gt;

&lt;p&gt;Since I have not used CLI yet, I will have to learn how to use it and then I will update the wiki. It might take few days. But I will update it for sure.&lt;/p&gt;

&lt;p&gt;Few questions,&lt;/p&gt;

&lt;p&gt;Is there any need to work on the Java API for top down clustering as I proposed earlier ( with ClusterConfigs and ClusterExecutors )? I don&apos;t see much use of that now. As the user can pretty easily do top-middle-middle-...-middle-bottom clustering. I hope you will agree too.&lt;/p&gt;

&lt;p&gt;Secondly, what other things are in &quot;to be implemented&quot; bucket of Clustering. I have some time in hand and I would like to contribute more to Mahout. So, it would be really helpful if you can guide me towards other things that needs to be done. I won&apos;t mind looking into a new thing also which might involve some reading/analysis/homework.&lt;/p&gt;</comment>
                            <comment id="13166871" author="hudson" created="Sat, 10 Dec 2011 14:14:18 +0000"  >&lt;p&gt;Integrated in Mahout-Quality #1242 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/1242/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/1242/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-843&quot; title=&quot;Top Down Clustering&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-843&quot;&gt;&lt;del&gt;MAHOUT-843&lt;/del&gt;&lt;/a&gt;: removing redundant lines&lt;/p&gt;

&lt;p&gt;jeastman : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1212533&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1212533&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/src/conf/clusterpp.props&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13166950" author="jeastman" created="Sat, 10 Dec 2011 19:21:46 +0000"  >&lt;p&gt;The CLI is an important interface, since it enables scripting approaches to use of Mahout. As Windows users don&apos;t do much command line execution I can see that might take some study. CygWin has a pretty decent *UX capability and should prove usable. I will work on developing a CLI example using the post processor too so we can compare notes.&lt;/p&gt;

&lt;p&gt;I agree with your assessment that your initial ClusterConfigs and ClusterExecutors code is now unnecessary. I think it was a useful experiment which resulted in your factoring out the cluster output post processor and the result is modular and clean.&lt;/p&gt;

&lt;p&gt;In terms of our &quot;to be implemented&quot; clustering code I have an idea: The outlier pruning in &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-825&quot; title=&quot;Canopies grouping records outside t1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-825&quot;&gt;&lt;del&gt;MAHOUT-825&lt;/del&gt;&lt;/a&gt; could be factored out of Canopy into another post processor instead of extending all of the other clustering algorithms with this capability. This should be a low hanging fruit for you after your top-down post processor work and would be a place where more sophisticated outlier rejection algorithms could be embedded later.&lt;/p&gt;

&lt;p&gt;We are targeting for a 0.6 code freeze at the end of December and any testing of the clustering code you can do in the interim would be beneficial. Heading into 0.7, I want to return to the classification/clustering convergence which has not gotten many of my cycles in quite a while. Take a look at ClusterClassifier, ClusteringPolicy and ClusterIterator. They use a pluggable framework to converge all of the iterative clustering algorithms (those which process all the input vectors in each iteration and which write their state in clusters-n) with the classification APIs. Given your work with ClusterConfigs and ClusterExecutors you might find this interesting.&lt;/p&gt;

&lt;p&gt;I&apos;m going to close this issue now and will look forward to continuing our conversations on other issues. &lt;/p&gt;</comment>
                            <comment id="13166951" author="jeastman" created="Sat, 10 Dec 2011 19:23:55 +0000"  >&lt;p&gt;Closing this after successful development&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12502175" name="MAHOUT-843-patch" size="69177" author="paritoshranjan" created="Thu, 3 Nov 2011 16:37:48 +0000"/>
                            <attachment id="12503266" name="MAHOUT-843-patch-only-postprocessor" size="27822" author="paritoshranjan" created="Thu, 10 Nov 2011 18:24:14 +0000"/>
                            <attachment id="12506403" name="MAHOUT-843-patch-only-postprocessor-final" size="56485" author="paritoshranjan" created="Wed, 7 Dec 2011 06:10:28 +0000"/>
                            <attachment id="12503335" name="MAHOUT-843-patch-only-postprocessor-v1" size="29407" author="paritoshranjan" created="Fri, 11 Nov 2011 04:09:48 +0000"/>
                            <attachment id="12503345" name="MAHOUT-843-patch-only-postprocessor-v2" size="29388" author="paritoshranjan" created="Fri, 11 Nov 2011 06:26:45 +0000"/>
                            <attachment id="12504267" name="MAHOUT-843-patch-only-postprocessor-v3" size="42719" author="paritoshranjan" created="Fri, 18 Nov 2011 20:58:47 +0000"/>
                            <attachment id="12504366" name="MAHOUT-843-patch-only-postprocessor-v4" size="48114" author="paritoshranjan" created="Sat, 19 Nov 2011 15:00:51 +0000"/>
                            <attachment id="12504432" name="MAHOUT-843-patch-only-postprocessor-v5" size="55413" author="paritoshranjan" created="Sun, 20 Nov 2011 16:43:05 +0000"/>
                            <attachment id="12502935" name="MAHOUT-843-patch-v1" size="83769" author="paritoshranjan" created="Tue, 8 Nov 2011 17:43:09 +0000"/>
                            <attachment id="12499157" name="Top-Down-Clustering-patch" size="19472" author="paritoshranjan" created="Sat, 15 Oct 2011 20:34:31 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 17 Oct 2011 17:46:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>86724</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy2mv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22578</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>