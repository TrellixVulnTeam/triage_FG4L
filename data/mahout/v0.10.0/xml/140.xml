<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:15:30 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-140/MAHOUT-140.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-140] In-memory mapreduce Random Forests</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-140</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Each mapper is responsible for growing a number of trees with a whole copy of the dataset loaded in memory, it uses the reference implementation&apos;s code to build each tree and estimate the oob error.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12429080">MAHOUT-140</key>
            <summary>In-memory mapreduce Random Forests</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="adeneche">Deneche A. Hakim</assignee>
                                    <reporter username="adeneche">Deneche A. Hakim</reporter>
                        <labels>
                    </labels>
                <created>Mon, 29 Jun 2009 12:29:52 +0100</created>
                <updated>Wed, 18 Nov 2009 14:05:55 +0000</updated>
                            <resolved>Tue, 29 Sep 2009 08:24:44 +0100</resolved>
                                    <version>0.2</version>
                                    <fixVersion>0.2</fixVersion>
                                    <component>Classification</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12725134" author="adeneche" created="Mon, 29 Jun 2009 12:34:51 +0100"  >&lt;p&gt;Work in progress...&lt;/p&gt;

&lt;p&gt;A working implementation, I tested it on a two-ubuntu-cluster but more tests are needed. There is a known issue when the number of maps is high, I&apos;ll try to solve it in the next patch.&lt;/p&gt;

&lt;p&gt;The main limitation of this implementation is that each mapper loads a copy of the data in memory, and because I don&apos;t know how to actually share the data between the mappers of the same slave node, this means that is you launch simultaneously N maps per cluster node, you&apos;ll get N copies of the data in each node&apos;s memory !!!&lt;/p&gt;</comment>
                            <comment id="12725137" author="adeneche" created="Mon, 29 Jun 2009 12:44:19 +0100"  >&lt;p&gt;org.apache.mahout.rf.mapred&lt;/p&gt;

&lt;p&gt;To make it simple, &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-122&quot; title=&quot;Random Forests Reference Implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-122&quot;&gt;&lt;del&gt;MAHOUT-122&lt;/del&gt;&lt;/a&gt; (ref. implementation) is also included in this patch.&lt;/p&gt;

&lt;p&gt;In-memory mapreduce implementation RandomForests, each mapper is responsible for growing a number of trees with a whole copy of the dataset loaded in memory, it uses the reference implementation&apos;s code to build each tree and estimate the oob error.&lt;/p&gt;

&lt;p&gt;There is no need for input data, the dataset is distributed to the slave nodes using the DistributedCache. A custom InputFormat (InMemInputFormat) is configured with desired number of trees and generates a number of InputSplits (InMemInputSplit) equal to the configured number of maps (mapred.map.tasks).&lt;/p&gt;

&lt;p&gt;There is no need for a reducer, each map outputs (InMemOutput) the trees it built and, for each tree, the labels the tree predicted for each oob instance. This step has to be done in the mapper because only there we know which instances are oob.&lt;/p&gt;

&lt;p&gt;The main program (InMemBuilder) is responsible for configuring and launching the job. At the end of the job it parses the output files and builds the corresponding RandomForest, and for each tree predictions it calls (if available) a PredictionCallback that allows the caller to compute any error needed.&lt;/p&gt;

&lt;p&gt;To test this implementation I added BuildForest that takes simple parameters and can build a forest, with the Kdd dataset, using either the sequential (reference) or mapreduce implementation. The basic usage is as follows: &lt;/p&gt;

&lt;p&gt;hadoop jar mahout-core-....job org.apache.mahout.rf.mapred.examples.BuildForest &lt;span class=&quot;error&quot;&gt;&amp;#91;MR&amp;#93;&lt;/span&gt; path m nbtrees&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;MR      : use the mapreduce implementation&lt;/li&gt;
	&lt;li&gt;path    : path to the Kdd dataset&lt;/li&gt;
	&lt;li&gt;m       : number of variables to select at each tree-node&lt;/li&gt;
	&lt;li&gt;nbtrees : size of the forest&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BuildForest implements the Tool interface, so you&apos;ll be able to pass Hadoop parameters.&lt;/p&gt;

&lt;p&gt;I did a small experiment on my two-nodes (ubuntu) cluster and got a x2 speedup, but there is a lot of random going around, and my cluster is weird (1 node is 2x faster than the other), I shall do more tests this coming week.&lt;/p&gt;

&lt;p&gt;PS: I also added a package.htm in org.apache.mahout.rf.mapred that contains this description&lt;/p&gt;</comment>
                            <comment id="12730061" author="adeneche" created="Sun, 12 Jul 2009 10:42:59 +0100"  >&lt;p&gt;&lt;b&gt;Changes&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The oob error estimation has been rewritten to become much more faster&lt;/li&gt;
	&lt;li&gt;BuildForest has an optional argument &apos;-o&apos; to use the optimized IG calculations&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I tested the implementation on Amazon EC2:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;on a 1 small instance cluster (1 master + 1 slave), building 50 trees with KDD10% takes 44m 45s&lt;/li&gt;
	&lt;li&gt;on a 10 small instances cluster (1 master + 10 slaves), building 50 trees with KDD10% takes 7m 50s&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;b&gt;what&apos;s next&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Although many improvements are possible, the actual InMem implementation does a good job. I shall start coding the other mapreduce variant where each mapper uses only the subset of data available to grow the trees&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12730128" author="tdunning" created="Sun, 12 Jul 2009 19:48:44 +0100"  >&lt;p&gt;These results look &lt;b&gt;really&lt;/b&gt; promising.&lt;/p&gt;

&lt;p&gt;But I am  curious about how to interpret these numbers.  It appears that you get decent speed-up with a larger cluster (5x speedup with 10x nodes).&lt;/p&gt;

&lt;p&gt;But these numbers don&apos;t seem to show speedup over the results that you gave in &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-122&quot; title=&quot;Random Forests Reference Implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-122&quot;&gt;&lt;del&gt;MAHOUT-122&lt;/del&gt;&lt;/a&gt; where a single node seemed to be able to build 50 trees on 5% of the data in &amp;lt;10m.&lt;/p&gt;

&lt;p&gt;My guess is that the comparison I am making is invalid.&lt;/p&gt;

&lt;p&gt;Can you clarify how things look so far?  This seems like it ought to be much more promising than what I am saying.  I don&apos;t understand how your small cluster here could be slower than the reference implementation.&lt;/p&gt;

&lt;p&gt;A second question is why you don&apos;t see perfect speedup with an increasing cluster.  Do you have any insight into how the time breaks down between hadoop MR startup, data cache loading, tree building, oob error estimation and storing output?&lt;/p&gt;</comment>
                            <comment id="12730292" author="adeneche" created="Mon, 13 Jul 2009 12:15:54 +0100"  >&lt;blockquote&gt;&lt;p&gt;But these numbers don&apos;t seem to show speedup over the results that you gave in &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-122&quot; title=&quot;Random Forests Reference Implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-122&quot;&gt;&lt;del&gt;MAHOUT-122&lt;/del&gt;&lt;/a&gt; where a single node seemed to be able to build 50 trees on 5% of the data in &amp;lt;10m.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;My guess is that the comparison I am making is invalid.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;Can you clarify how things look so far? This seems like it ought to be much more promising than what I am saying. I don&apos;t understand how your small cluster here could be slower than the reference implementation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I noticed too that running BuildForest on my laptop is faster than EC2, I suspect that my laptop&apos;s CPU is faster than the EC2 instance that I used (m1.small). To be sure I run the sequential version, which allow the use of a specific seed thus being repeatable, and got the following results:&lt;/p&gt;

&lt;p&gt;the program uses the reference implementation to build 50 trees with Kdd10%, selecting 1 random variable at each tree-node, starting with seed=1, estimating the o-o-b error and using the optimized IG code&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Instance &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; build time &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; my laptop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 9m 14s 978 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1 m1.small &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 28m 59s 510 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1 c1.medium &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 11m 35s 286 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;The m1.small is, indeed, slower than my laptop but still the reference implementation running on this instance takes only 29m compared to 45m when using the mapred implementation. But because the mapred implementation does not accept seed values, for now, the comparison between the sequential and sequential implementations will be difficult.&lt;/p&gt;

&lt;p&gt;I&apos;m thinking of a way to make the mapred implementation use specific seeds: the main program passes a specific seed value (user parameter) to InMemInputFormat, this seed is used to instantiate a Random object used to generate a different seed for each InputSplit (mapper). This way I can make the reference implementation use the same scheme, given desired the number of mappers, and thus be able to compare between the two implementations. What do you think of this scheme ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A second question is why you don&apos;t see perfect speedup with an increasing cluster. Do you have any insight into how the time breaks down between hadoop MR startup, data cache loading, tree building, oob error estimation and storing output?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I noticed that loading the data can take some time and because all the mappers do the loading, the loading time is always the same wherever you use a small or a large cluster. I also noticed that the compression is activated when using hadoop on EC2 and it also takes some time to initialize after the mappers finish their work. But I need to run more tests and collect more info to be able to answer your question.&lt;/p&gt;</comment>
                            <comment id="12732922" author="adeneche" created="Sat, 18 Jul 2009 19:09:17 +0100"  >&lt;ul&gt;
	&lt;li&gt;First of all I implemented the &lt;b&gt;in-mem-sequential&lt;/b&gt; builder which simulates the execution of many mappers in a sequential manner. I also implemented the seed generation scheme for the &lt;b&gt;in-mem-mapred&lt;/b&gt; implementation, passing the same seed to the &lt;b&gt;in-mem-mapred&lt;/b&gt; and &lt;b&gt;in-mem-sequential&lt;/b&gt; implementations generates the same trees with the same output, this should make the comparison easier.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;on a 10 instances cluster (ec2 c1.medium) building 200 trees with KDD10% with a seed=1 gives :
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; in-mem-sequential &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; in-mem-mapred &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0h 52m 38s 665 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0h 13m 3s 691 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;its a 4x speedup, I don&apos;t know if I should expect a higher speedup, so I run some more tests to try and find what takes most of the time.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I noticed that speculative execution was turned on, passing (-Dmapred.map.tasks.speculative.execution=false) gives:
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; in-mem-mapred&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0h 12m 46s 150 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;it doesn&apos;t seem to be the cause of the slowdown.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;How much time does the output takes, this includes computing the oob estimate and outputing the trees and the oob predictions ? I added a special job parameter (debug.mahout.rf.output) when false the mappers don&apos;t compute the oob estimates and don&apos;t output anything, they just prepare the bags and build the trees. The result is:
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; in-mem-mapred&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0h 12m 35s 557 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;actually the output doesn&apos;t seem to make much time&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;How much time does launching and configuring the MR take, this includes loading the data in all the nodes ? running the &lt;b&gt;in-mem-mapred&lt;/b&gt; with just 10 trees, thus 1 tree per map, gives:
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; in-mem-mapred&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0h 1m 36s 335 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Starting up the MR doesn&apos;t seem to take a lot of time, actually it seems that building the trees &lt;b&gt;is&lt;/b&gt; what takes most of the time&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Because I&apos;m running a number of maps equal to the number of cluster-nodes, if one maps take 100 minutes and all other maps take only 1 minute, the job still takes 100 minutes to finish. I added a special job parameter (debug.mahout.rf.single.seed), when true all mappers use the same seed thus they all behave similarly. The results are:
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; in-mem-sequential &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; in-mem-mapred &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0h 40m 39s 829 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 0h 9m 30s 577 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In the &lt;b&gt;in-mem-sequential&lt;/b&gt; implementation, each 20 trees take about 4 minutes to be built, but in the &lt;b&gt;in-mem-mapred&lt;/b&gt; implementation, each map takes 9 minutes to build 20 trees. It looks like building a single tree in a sequential manner is &lt;b&gt;2x faster&lt;/b&gt; than building the same tree with the cluster !!! I don&apos;t have a lot of experience with clusters, is it normal ??? may be 10 instances is just too small to get a good speedup, or may be there is a bug hiding somewhere (I can hear it walking in the code when the moon...)&lt;/p&gt;</comment>
                            <comment id="12732984" author="adeneche" created="Sun, 19 Jul 2009 11:19:21 +0100"  >&lt;p&gt;&lt;b&gt;Changes&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;InMemBuilder can now use a seed to be repeatable&lt;/li&gt;
	&lt;li&gt;InMemSequentialBuilder simulates InMemBuilder in a sequential manner, outside of Hadoop&lt;/li&gt;
	&lt;li&gt;Arranged many classes to be simpler, and added one or to tests&lt;/li&gt;
	&lt;li&gt;BuildForest splitted in two:
	&lt;ul&gt;
		&lt;li&gt;rf.mapred.examples.BuildForest: can launch both the &lt;b&gt;in-mem-mapred&lt;/b&gt; and &lt;b&gt;in-mem-sequential&lt;/b&gt; builders&lt;/li&gt;
		&lt;li&gt;rf.ref.examples.BuildForest: uses the sequential builder&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12754667" author="adeneche" created="Sun, 13 Sep 2009 07:30:40 +0100"  >&lt;ul&gt;
	&lt;li&gt;Will be committed as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-145&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;MAHOUT-145&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;For now two implementations are available, one that uses Hadoop 0.20.0 API and one that don&apos;t use it. Later only one implementation should remain&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12760517" author="adeneche" created="Tue, 29 Sep 2009 08:20:37 +0100"  >&lt;p&gt;committed patch&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12426196">MAHOUT-122</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12413946" name="inmem_July19_patch.diff" size="233958" author="adeneche" created="Sun, 19 Jul 2009 11:19:21 +0100"/>
                            <attachment id="12420765" name="inmem_Sep29.patch" size="84520" author="adeneche" created="Tue, 29 Sep 2009 08:20:37 +0100"/>
                            <attachment id="12413225" name="mapred_jul12.diff" size="194705" author="adeneche" created="Sun, 12 Jul 2009 10:42:59 +0100"/>
                            <attachment id="12412063" name="mapred_patch.diff" size="171046" author="adeneche" created="Mon, 29 Jun 2009 12:44:19 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 12 Jul 2009 18:48:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9925</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hxy6yf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23278</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>