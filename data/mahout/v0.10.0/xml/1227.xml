<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:18:19 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1227/MAHOUT-1227.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1227] Vector.iterateNonZero() is super-clumsy to use: add Iterable&lt;Element&gt; allNonZero()</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1227</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Currently, our codebase is littered with the following:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Iterator&amp;lt;Element&amp;gt; it = vector.iterateNonZero();
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (it.hasNext()) {
  Element e = it.next();
  ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;wouldn&apos;t it be nice to be able to do:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Element e : vector.allNonZero()) {
  ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;instead?&lt;/p&gt;

&lt;p&gt;I propose adding an Iterable&amp;lt;Element&amp;gt; allNonZero() which allow this syntactic sugar.  To make it symmetric with iterateAll, let&apos;s also add Iterable&amp;lt;Element&amp;gt; all(), and implement the simply in AbstractVector.&lt;/p&gt;

&lt;p&gt;The first diff adding this is very non-invasive - new methods added to interface, implemented in the three classes from which all Vector implementations derive (AbstractVector, NamedVector, and DelegatingVector).  User code should just work, unless they&apos;ve implemented their own vector without subclassing one of these three (yikes).&lt;/p&gt;

&lt;p&gt;Next diff, which is more invasive, would remove &quot;extends Iterable&amp;lt;Element&amp;gt;&quot; from Vector, because using the foreach of a Vector itself is very rarely what the caller really means to do (it&apos;s the all-iterator, very bad for the more common sparse use case).  To achieve the same effect, the caller chooses between vector.all() and vector.allNonZero(), and then they&apos;re being crystal clear what they mean.&lt;/p&gt;

&lt;p&gt;Lastly, I&apos;d propose we make iterateAll() and iterateAllNonZero() protected methods on AbstractVector, so that we are forced to remove all the clumsy places where we do Iterator&amp;lt;Element&amp;gt; it = ... all throughout the codebase.  I suspect there will be very few places left that really want the raw iterator, but if there are any, it can be gotten by calling vector.(all/allNonZero).iterator()&lt;/p&gt;

&lt;p&gt;(feature-request/api fix suggestion idea courtesy of Andy Schlaikjer, formalized as a proposal and posted up here by me, Jake Mannix)&lt;/p&gt;</description>
                <environment>&lt;p&gt;all&lt;/p&gt;</environment>
        <key id="12649163">MAHOUT-1227</key>
            <summary>Vector.iterateNonZero() is super-clumsy to use: add Iterable&lt;Element&gt; allNonZero()</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jake.mannix">Jake Mannix</assignee>
                                    <reporter username="hazen">Andy Schlaikjer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 May 2013 19:53:46 +0100</created>
                <updated>Mon, 3 Feb 2014 08:06:08 +0000</updated>
                            <resolved>Fri, 24 May 2013 18:25:04 +0100</resolved>
                                                    <fixVersion>0.8</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13665492" author="jake.mannix" created="Thu, 23 May 2013 19:56:51 +0100"  >&lt;p&gt;initial, non-invasive additional methods.&lt;/p&gt;</comment>
                            <comment id="13665655" author="tdunning" created="Thu, 23 May 2013 21:50:48 +0100"  >&lt;p&gt;This can even be simpler in the all() case.  All we need to do is advertise the Iterable interface whereever we have an iterator.&lt;/p&gt;

&lt;p&gt;And for the allNonZero, I would prefer the name nonZeros.  It reads slightly better.&lt;/p&gt;</comment>
                            <comment id="13665657" author="tdunning" created="Thu, 23 May 2013 21:51:51 +0100"  >&lt;p&gt;Never mind.  I see the rest of your comment.&lt;/p&gt;

&lt;p&gt;I still like iterating through the vector or matrix without a method.  Preference, I think.&lt;/p&gt;</comment>
                            <comment id="13665667" author="jake.mannix" created="Thu, 23 May 2013 21:59:14 +0100"  >&lt;p&gt;You like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Element e : vector) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;more than &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Element e : vector.all()) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;you mean?&lt;/p&gt;</comment>
                            <comment id="13665671" author="jake.mannix" created="Thu, 23 May 2013 22:03:33 +0100"  >&lt;p&gt;because if so, we currently allow that, and I&apos;m saying this is &lt;b&gt;dangerous&lt;/b&gt; - people see that Vector implement Iterable&amp;lt;Element&amp;gt; and they&apos;re like, great, I can just do the first thing I listed right there.  But that&apos;s the &lt;b&gt;all&lt;/b&gt; iterator - almost never what you want to do (I&apos;m going through the code right now for every case where we iterate over vectors in the entire codebase, and probably 5% or less of the time do we really use iterator() instead of iterateNonZero()), and making it explicit: &quot;do you really want the Element e : v.all() ?&quot;  &lt;/p&gt;

&lt;p&gt;It&apos;s a &lt;b&gt;tiny&lt;/b&gt; bit more verbose, but not much, and is super clear for this uncommon case.&lt;/p&gt;</comment>
                            <comment id="13665680" author="jake.mannix" created="Thu, 23 May 2013 22:17:11 +0100"  >&lt;p&gt;in fact, as I dig through all the cases, I think I&apos;ve found two cases so far where we do &quot;for (Element e : v)&quot; when we really don&apos;t want to be iterating over all, but really only want v.nonZeroes().&lt;/p&gt;

&lt;p&gt;For instance:  MinHashMapper:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void map(Text item, VectorWritable features, Context context) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException {
    Vector featureVector = features.get();
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (featureVector.size() &amp;lt; minVectorSize) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
    &lt;span class=&quot;code-comment&quot;&gt;// Initialize the minhash values to highest
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; numHashFunctions; i++) {
      minHashValues[i] = &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MAX_VALUE;
    }

    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; numHashFunctions; i++) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Vector.Element ele : featureVector) {
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; value = (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) ele.get();
        bytesToHash[0] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) (value &amp;gt;&amp;gt; 24);
        bytesToHash[1] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) (value &amp;gt;&amp;gt; 16);
        bytesToHash[2] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) (value &amp;gt;&amp;gt; 8);
        bytesToHash[3] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) value;
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; hashIndex = hashFunction[i].hash(bytesToHash);
        &lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; our &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; hash value is less than the old one, replace the old one
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (minHashValues[i] &amp;gt; hashIndex) {
          minHashValues[i] = hashIndex;
        }
      }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It works this way, sure, but if you&apos;re minhashing a sparse vector of cardinality 10^9, you&apos;re going to be very sad about the performance here.&lt;/p&gt;</comment>
                            <comment id="13665684" author="jake.mannix" created="Thu, 23 May 2013 22:25:08 +0100"  >&lt;p&gt;Another case I&apos;m not sure about is in your code, Ted:&lt;/p&gt;

&lt;p&gt;ModelDissector, line 174: do you really want to look for the largest values including zeros:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Weight(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; feature, Vector weights, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; n) {
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.feature = feature;
      &lt;span class=&quot;code-comment&quot;&gt;// pick out the weight with the largest abs value, but don&apos;t forget the sign
&lt;/span&gt;      Queue&amp;lt;Category&amp;gt; biggest = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PriorityQueue&amp;lt;Category&amp;gt;(n + 1, Ordering.natural());
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Vector.Element element : weights) {
        biggest.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Category(element.index(), element.get()));
        &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (biggest.size() &amp;gt; n) {
          biggest.poll();
        }
      }
      categories = Lists.newArrayList(biggest);
      Collections.sort(categories, Ordering.natural().reverse());
      value = categories.get(0).weight;
      maxIndex = categories.get(0).index;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13665708" author="smarthi" created="Thu, 23 May 2013 22:38:39 +0100"  >&lt;p&gt;The code in MinhashMapper should  be calling featureVector.iterateNonZero() and that&apos;s a bug. There is a jira and a patch for this - see Mahout-1052.&lt;/p&gt;
</comment>
                            <comment id="13665712" author="jake.mannix" created="Thu, 23 May 2013 22:42:29 +0100"  >&lt;p&gt;ah good to know.  It&apos;ll get fixed with this patch, once this patch is done, if &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1052&quot; title=&quot;Add an option to MinHashDriver that specifies the dimension of vector to hash (indexes or values)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1052&quot;&gt;&lt;del&gt;MAHOUT-1052&lt;/del&gt;&lt;/a&gt; doesn&apos;t get done first.&lt;/p&gt;

&lt;p&gt;See, I knew there was a reason to force our users (and ourselves!) to be explicit about whether you iterate all or just nonzeroes. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13665811" author="jake.mannix" created="Fri, 24 May 2013 00:01:17 +0100"  >&lt;p&gt;egads, we Matrix (which extends VectorIterable) has &lt;b&gt;both&lt;/b&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Iterator&amp;lt;MatrixSlice&amp;gt; iterator&amp;lt;MatrixSlice&amp;gt;();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;and&lt;/b&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Iterator&amp;lt;MatrixSlice&amp;gt; iterateAll();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and the former simply delegates to the latter by default?&lt;/p&gt;

&lt;p&gt;Perhaps this is less prone to error, but for consistency&apos;s sake, and syntactic sugar, we should just change these to:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Iterable&amp;lt;MatrixSlice&amp;gt; allRows();
Iterable&amp;lt;MatrixSlice&amp;gt; allNonZeroRows();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(not for this patch, this is getting big enough)&lt;/p&gt;</comment>
                            <comment id="13665821" author="jake.mannix" created="Fri, 24 May 2013 00:20:53 +0100"  >&lt;p&gt;Ok, this diff is big.  Actually removes iterator() and iterateNonZero() from the Vector interface, and refactors all the places where this needs to be replaced with all().iterator(), nonZeroes().iterator(), or a foreach loop.&lt;/p&gt;

&lt;p&gt;Tests are running in the background now, they&apos;ll be taking a while.&lt;/p&gt;</comment>
                            <comment id="13665945" author="jake.mannix" created="Fri, 24 May 2013 02:54:13 +0100"  >&lt;p&gt;Tests pass for diff at &lt;a href=&quot;https://reviews.apache.org/r/11359/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/11359/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13666421" author="jake.mannix" created="Fri, 24 May 2013 17:16:37 +0100"  >&lt;p&gt;Committing this in about an hour unless I hear any objections.&lt;/p&gt;</comment>
                            <comment id="13666483" author="jake.mannix" created="Fri, 24 May 2013 18:25:04 +0100"  >&lt;p&gt;Committed revision 1486122.&lt;/p&gt;</comment>
                            <comment id="13666951" author="hudson" created="Sat, 25 May 2013 04:37:18 +0100"  >&lt;p&gt;Integrated in Mahout-Quality #2014 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2014/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2014/&lt;/a&gt;)&lt;br/&gt;
    Removes Iterable and iterateNonZero() from Vector interface, replaces with two Iterable-returning methods fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1227&quot; title=&quot;Vector.iterateNonZero() is super-clumsy to use: add Iterable&amp;lt;Element&amp;gt; allNonZero()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1227&quot;&gt;&lt;del&gt;MAHOUT-1227&lt;/del&gt;&lt;/a&gt; (Revision 1486122)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
jmannix : &lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1486122&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;amp;view=rev&amp;amp;rev=1486122&lt;/a&gt;&lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ALS.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/PredictionMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/UserVectorSplitterMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/preparation/ToItemVectorsMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/ItemSimilarityJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/discriminative/WinnowTrainer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/test/TestNaiveBayesDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/naivebayes/training/StandardThetaTrainer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/AbstractOnlineLogisticRegression.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/ModelDissector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/dirichlet/models/GaussianCluster.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/iterator/CIMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/iterator/ClusterIterator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/MinHashMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/UnitVectorizerJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsAffinityCutsJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/distance/WeightedEuclideanDistanceMeasure.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/distance/WeightedManhattanDistanceMeasure.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/common/mapreduce/TransposeMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/VectorWritable.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/RowSimilarityJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/Vectors.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/measures/EuclideanDistanceSimilarity.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/measures/PearsonCorrelationSimilarity.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/ABtDenseOutJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/ABtJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/Omega.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UpperTriangular.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/YtYJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/qr/QRFirstStep.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/neighborhood/HashedVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/math/stats/GlobalOnlineAuc.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/term/TermDocumentCountMapper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFPartialVectorReducer.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJobTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/recommender/svd/ALSWRFactorizerTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/naivebayes/NaiveBayesTestBase.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegressionTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/minhash/TestMinHashClustering.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/spectral/common/TestAffinityMatrixInputJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/spectral/eigencuts/TestEigencutsAffinityCutsJob.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/MathHelper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/stochasticsvd/LocalSSVDSolverDenseTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/stochasticsvd/LocalSSVDSolverSparseSequentialTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/encoders/WordLikeValueEncoderTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmClusterEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/clustering/AbstractClusterWriter.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/integration/src/test/java/org/apache/mahout/clustering/dirichlet/TestL1ModelClustering.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DelegatingVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/FileBasedMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/FileBasedSparseBinaryMatrix.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/NamedVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/PermutedVectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/Vector.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/VectorBinaryAggregate.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/VectorBinaryAssign.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/VectorView.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/WeightedVectorComparator.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/als/AlternatingLeastSquaresSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/main/java/org/apache/mahout/math/als/ImplicitFeedbackAlternatingLeastSquaresSolver.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractVectorTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java&lt;/li&gt;
	&lt;li&gt;/mahout/trunk/math/src/test/java/org/apache/mahout/math/solver/EigenDecompositionTest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12584614" name="MAHOUT-1227-big.diff" size="125564" author="jake.mannix" created="Fri, 24 May 2013 00:20:53 +0100"/>
                            <attachment id="12584551" name="MAHOUT-1227.diff" size="2797" author="jake.mannix" created="Thu, 23 May 2013 19:56:51 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 23 May 2013 18:56:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>329490</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzeosv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>329825</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>