<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 04:20:23 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MAHOUT-1500/MAHOUT-1500.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MAHOUT-1500] H2O integration</title>
                <link>https://issues.apache.org/jira/browse/MAHOUT-1500</link>
                <project id="12310751" key="MAHOUT">Mahout</project>
                    <description>&lt;p&gt;Provide H2O backend for the Mahout DSL&lt;/p&gt;</description>
                <environment></environment>
        <key id="12705861">MAHOUT-1500</key>
            <summary>H2O integration</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="Andrew_Palumbo">Andrew Palumbo</assignee>
                                    <reporter username="avati">Anand Avati</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Apr 2014 08:02:51 +0100</created>
                <updated>Mon, 13 Apr 2015 11:21:12 +0100</updated>
                            <resolved>Sat, 6 Sep 2014 00:33:47 +0100</resolved>
                                                    <fixVersion>0.10.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="13956180" author="ssc" created="Tue, 1 Apr 2014 08:12:54 +0100"  >&lt;p&gt;Hi Anand, &lt;br/&gt;
great to see this being started. Could you provide a short description how you see the integration coming into place?&lt;/p&gt;

&lt;p&gt;I&apos;d like to get the big picture and understand which pieces of h2o and its algorithms you wish to move to mahout and which not.&lt;/p&gt;</comment>
                            <comment id="13956194" author="avati" created="Tue, 1 Apr 2014 08:41:36 +0100"  >&lt;p&gt;Sebastian, at this point I am exploring things (mostly digging around the internals of Mahout to understand what are the possible points of integration). At a high level, the thinking is that Mahout will be &quot;depending&quot; on h2o (like how it &quot;depends on&quot; Spark), and there will be enough infrastructure implementations (like Matrix, Vector, possibly Job) which would allow for existing algorithms to be easily refactored to use H2O in place of (or along with), say, Hadoop/MR and/or DistributedRowMatrix etc.&lt;/p&gt;

&lt;p&gt;As I said, very much open to hear feedback and thoughts on integration patterns.&lt;/p&gt;</comment>
                            <comment id="13956246" author="dlyubimov" created="Tue, 1 Apr 2014 09:32:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;out will be &quot;depending&quot; on h2o (like how it &quot;depends on&quot; Spark), and there will be enough infrastructure implementations (like Matrix, Vector, possibly Job) which would allow for existing algorithms to be easily refactored to use H2O in place of (or along with), say, Hadoop/MR and/or DistributedRowMatrix etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;@Anand: Mahout does not &quot;depend on spark&quot; at the Matrix and Vector API. Instead, integration with Spark is on physical plan operator layer and a completely separate logical layer matrix representation (DrmLike, etc) in order to cleanly separate &quot;shared mem&quot; and &quot;shared nothing&quot; use cases. And of course, no Spark actual dependencies ever sip into mahout-math module. We actually spent a lot of effort to unmarry that module from even Hadoop dependencies, IIRC.  I expect it to stay the same.&lt;/p&gt;

&lt;p&gt;o.a.m.math.Matrix and Vector API are reserved for in-core operations only, and all algorithms around it are built assuming &quot;shared memory&quot; model (i.e. they don&apos;t see it as a problem to iterate over all non-zeros in a single thread). Dumping &quot;shared nothing&quot; and &quot;shared mem&quot; use cases into single api in my not so humble opinion makes no sense to me (unless the proposal is to work towards &quot;unholy mess&quot;  architectural standards.) &lt;/p&gt;

&lt;p&gt;This would be confusing to devs to no end. No algorithm IMO can be written to be completely agnostic of &quot;shared-mem&quot; vs. &quot;shared nothing&quot; issues. I.e. distributed functional stuff will be able of course to work in a single machine, but this simply amounts to logic &quot;write everything as if it is distributed using FP&quot;, so this is not the answer.&lt;/p&gt;

&lt;p&gt;So  -1 on this. This is not nearly the same as how Spark was integrated.&lt;/p&gt;

&lt;p&gt;My suggestion is to either integrate with linear algebra optimizer at physical layer (which it seems to be quite impossible to me today because of h2o programming model), absent of which i&apos;d suggest to start on completely yet-another set of &quot;shared-nothing&quot; api just like it was done for Spark. Of course, we&apos;d be incoherent here once again, which is why i&apos;d not like even this &amp;#8211; this might as well be a happily standalone or contrib project with no common parts.&lt;/p&gt;

&lt;p&gt;Messing with Job API is less objectionable I guess, since Job is a shared-nothing api to begin with; however, you are providing too few details to make a sensible opinion on this, so -0 on this at this point.&lt;/p&gt;</comment>
                            <comment id="13956254" author="avati" created="Tue, 1 Apr 2014 09:39:42 +0100"  >&lt;p&gt;@Dmitry: When I said &quot;depends on&quot;, I was only replying to the question from Sebastian &amp;#8211; &quot;I&apos;d like to get the big picture and understand which pieces of h2o and its algorithms you wish to move to mahout and which not&quot; &amp;#8211; implying that no pieces of h2o was planned to be &quot;moved&quot;, but have a project level &quot;dependency&quot; (in maven build, and distribution etc.) &amp;#8211; just like how the Spark bindings work was done. Hope that clarifies.&lt;/p&gt;</comment>
                            <comment id="13956256" author="dlyubimov" created="Tue, 1 Apr 2014 09:41:36 +0100"  >&lt;p&gt;PS. Spark integration provides identical &lt;em&gt;intersection of some algebraic operators&lt;/em&gt; (such as slicing, multiplication, elementwise, summaries etc.etc.) in Scala, which amounts to single domain-specific semantics, but they diverge significantly in the operations that govern lifecycle, persistence and functional programming.&lt;/p&gt;</comment>
                            <comment id="13956259" author="dlyubimov" created="Tue, 1 Apr 2014 09:43:54 +0100"  >&lt;blockquote&gt;&lt;p&gt;... mplying that no pieces of h2o was planned to be &quot;moved&quot;, but have a project level &quot;dependency&quot; (in maven build, and distribution etc.) &#8211; just like how the Spark bindings work was done. Hope that clarifies.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. i understood that. I actually don&apos;t object that. But if you try to read again, you&apos;d see that&apos;s not what i was objecting in your explanation.&lt;/p&gt;

&lt;p&gt;Jira is usually N-way discussion, but if you don&apos;t like me quoting your answers to specific comments, i object to this approach specifically &amp;#8211;  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Start with providing implementations of AbstractMatrix and AbstractVector, and more as we make progress.&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13956282" author="dlyubimov" created="Tue, 1 Apr 2014 10:08:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;o.a.m.math.Matrix and Vector API are reserved for in-core operations only, and all algorithms around it are built assuming &quot;shared memory&quot; model&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In particular, to that end, the cost-optimized approach for in-core math vector operations written by Robin assumes in-core only cost models. It absolutely isn&apos;t compatible with any notion of a distributed vector, and messing with these cost optimizations is the last thing i&apos;d like to suggest here. Not to mention outer user block algorithms. &lt;/p&gt;

&lt;p&gt;Which is a strong argument as to why those two approaches to cost optimization (in-core vs. distributed) should really be kept strictly apart in two separate wards with cotton blankets on the walls and under 24hr monitoring.&lt;/p&gt;</comment>
                            <comment id="13956283" author="avati" created="Tue, 1 Apr 2014 10:09:16 +0100"  >&lt;p&gt;Thanks for your feedback, Dmitry.&lt;/p&gt;

&lt;p&gt;Now it seems to me (with my limited exploring of Mahout) that it might actually be viable to provide a &quot;hadoop alternative&quot; in the form of an alternate implementation of DistributedRowMatrix (instead of AbstractMatrix) and AbstractJob (by internally using h2o&apos;s Frame/Vec and MRTask2 APIs), and thereby allow for a runtime choice of Hadoop vs H2O. This seems like a reasonable first step?&lt;/p&gt;</comment>
                            <comment id="13956824" author="dlyubimov" created="Tue, 1 Apr 2014 18:55:58 +0100"  >&lt;blockquote&gt;&lt;p&gt;Now it seems to me (with my limited exploring of Mahout) that it might actually be viable to provide a &quot;hadoop alternative&quot; in the form of an alternate implementation of DistributedRowMatrix (instead of AbstractMatrix) &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes that&apos;s what i meant. On Scala side, this is done by introducing mix-ins DrmLike, RLikeOps, RLikeDrmOps, RLikeVectorOps etc.etc. On java side, working with mix-ins (functionality-filled traits) is of course not easy, but the important point is that it should be an alternative hierarchy with an identical intersection of optimized linalg operators (operator-oriented semantics in linear algebra). &lt;/p&gt;

&lt;p&gt;I. e. assumption is that to the end user (developer) it is more important that notation&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
a dot b
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;means exactly the same regardless of whether a and b in-core or distributed; but it matters significantly less whether a and b descend from different hierarchies (e.g. Matrix or DRM), as long as operator dot(A,B) is defined for all possible type combinations (sparse, dense, distributed).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;and AbstractJob (by internally using h2o&apos;s Frame/Vec and MRTask2 APIs), and thereby allow for a runtime choice of Hadoop vs H2O. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I care significantly less about Job api and Hadoop MR in particular. It is my belief they are non-essential to the math user and therefore should be avoided altogether (and such notion is eliminated in Spark Bindings)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This seems like a reasonable first step?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes &amp;#8211; with caveat that logical mix-ins for distributed and in-core already exists in Scala and Spark Bindings. Like i said, ideally mapping this logical layer into a particular physical layer seems to be an indefinitely better architecture to me, than creating yet-another logical layer specific to a particular back. However, i see that it would be hard to converge on that, or at least i don&apos;t see how. I will extract an architecture slide from my talk and post a link to illustrate the idea a bit later.&lt;/p&gt;</comment>
                            <comment id="13956841" author="dlyubimov" created="Tue, 1 Apr 2014 19:15:22 +0100"  >&lt;p&gt;link to component stack in Bindings &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12638098/BindingsStack.jpg&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12638098/BindingsStack.jpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;illustrating how logical level for distributed matrix is unified accross engines.&lt;/p&gt;</comment>
                            <comment id="13956860" author="avati" created="Tue, 1 Apr 2014 19:30:01 +0100"  >&lt;p&gt;Dmitry, I am trying to fit that diagram with the source code.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What is the &quot;Algebraic DSL&quot;? Is that the one which came with the scala bindings (with &quot;%*%&quot; operator etc.)?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Today, what distinguishes &quot;Logical translation layer&quot; vs &quot;Physical translation layer&quot; in the code? What parts of the code is considered to be the &quot;Logical translation layer&quot;?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is the selection of &quot;physical translation layer&quot; a run-time decision?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Just trying to make sure I don&apos;t make wrong assumptions.&lt;/p&gt;</comment>
                            <comment id="13956898" author="dlyubimov" created="Tue, 1 Apr 2014 19:52:38 +0100"  >&lt;blockquote&gt;&lt;p&gt;What is the &quot;Algebraic DSL&quot;? Is that the one which came with the scala bindings (with &quot;%*%&quot; operator etc.)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are two sets of operators &amp;#8211; for mahout-math (in-core), i call it scala bindings and it is in the math-scala. It doesn&apos;t do much actually but just providing a syntactic sugar for passing off things to in-core cost-based optimizers (where they are implemented). &lt;/p&gt;

&lt;p&gt;The second set of DSL is for (looking identically to in-core set of operators)  is for distributed stuff. (on diagram those two are not visually separated other than there&apos;s just part of it over in-core and part of it over distributed optimizer).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Today, what distinguishes &quot;Logical translation layer&quot; vs &quot;Physical translation layer&quot; in the code? What parts of the code is considered to be the &quot;Logical translation layer&quot;? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well you need to keep in perspective that distributed optimizer part was done in like 3 days and it is now fairly tightly bound to spark code so separation at this point is not very clean until we introduce another engine (which is coming). Obviously at the time of introducing second engine, this needs to be abstracted in a separate module without spark dependencies.&lt;/p&gt;

&lt;p&gt;Logical translation is everything in drm.plan (operators implementing DrmLike[] ). &lt;br/&gt;
Physical translation to Spark is CheckpointedDrm, CheckpointAction and everything in blas package (actual spark specific support for physical plan after optimization run). &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is the selection of &quot;physical translation layer&quot; a run-time decision?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yes it is run time optimizer action based on operand types, geometry (size), orientation and partitioning. (very similar in fact to what happens in Pig graph, except such graph rewrites are much more elegant in Scala).&lt;/p&gt;
</comment>
                            <comment id="13956908" author="dlyubimov" created="Tue, 1 Apr 2014 20:04:46 +0100"  >&lt;p&gt;PS in java/MR world, DRM also already has representation, it is DistributedRowMatrix class, and it is also totally separate hierarchy from in-core hierarchy of things. However, it doesn&apos;t have a notion of optimizer and algebraic expression checkpoints, so it was not coherently usable for that approach.&lt;/p&gt;</comment>
                            <comment id="13957216" author="dlyubimov" created="Wed, 2 Apr 2014 02:09:30 +0100"  >&lt;p&gt;@Anand, Bottom line, the core of AbstractMatrix and Vector is elementwise iterators and direct element accessors. Lacking closure(functional) programming, they don&apos;t work for the distributed stuff. &lt;/p&gt;

&lt;p&gt;There are two ways with such approach: either declare core abstractions unsupported in distributed implementation, which just proves AbstractMatrix and Vector are not good abstractions for that work. (why would one need an abstraction, if its major and core contracts are all of a sudden declared optional or deprecated). &lt;/p&gt;

&lt;p&gt;Truth to be told, there is some Matrix api that uses FP &amp;#8211; two major things are aggregate() and assign(). However, this still doesn&apos;t get us anywhere in a sense that we should support &lt;em&gt;all&lt;/em&gt; core contracts, not just assign() and aggregate().&lt;/p&gt;

&lt;p&gt;Another way of going about it is to heavily refactor core abstraction in favor of functional support, while deprecating or eliminating direct access. I call this &quot;nuclear option&quot;. Because it sends ripple effects not only thru Mahout, but thru any 3rd party code that uses mahout-math. (in my case specifically). It will force people reconsider using mahout because of stability issues in the areas where it was promised to be stable.&lt;/p&gt;

&lt;p&gt;Extending DistributedRowMatrix api.. I kind of dubious about it as well, since it is also unusable without major FP infusion, and frankly kind of ancient.&lt;/p&gt;

&lt;p&gt;More likely, a completely new FP-laced distributed Matrix representation is desired. SparkBindings went that path and created FP-laced DRM api. But this is entirely Scala side abstraction, with Scala function literals etc. So if you are looking to create a java distributed matrix abstraction, this is not going to be useful at all either.&lt;/p&gt;

&lt;p&gt;So more likely, you need a completely new FP-oriented java API interface. Something like X2OMatrix.java. This will fragment project even further, but all marketing fluff excluding, that&apos;s the only realistic option i see that might work. &lt;/p&gt;

&lt;p&gt;I would also question (kinda) the wisdom of a standalone distributed vector abstraction. On Hadoop side and spark side this abstraction is completely bypassed (it is assumed that real vector will always fit into single machine memory). In situations where vector might be formed as a result of distributed operation (e.g. A %*% x) the result is simply a distributed single-column matrix, from which the column can be always collected in front end via collection/slicing api. &lt;/p&gt;

</comment>
                            <comment id="13962017" author="dlyubimov" created="Mon, 7 Apr 2014 17:59:43 +0100"  >&lt;p&gt;After reviewing the newly announced &lt;a href=&quot;https://github.com/tdunning/h2o-matrix&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/h2o-matrix&lt;/a&gt; and making a willful conjecture that it is what this issue is about (since it is still not explicitly confirmed on this Jira), I am changing my vote to -0. &lt;/p&gt;

&lt;p&gt;Here are components of my vote.&lt;/p&gt;

&lt;p&gt;(1) +1 Do-ocracy &amp;#8211; those who willing do things, and (what is especially important in our case) provide continued support for it, deserve componential +1 to begin with.&lt;br/&gt;
(2) Big +1 on using h20 as external dependency. I don&apos;t think we want to be in business of creating, maintaining, or merging with distributed execution engines, we should be just translating high level ML semantics to them.&lt;br/&gt;
(3) +0 in-core API stability: This work must not change or deprecate in-core API contracts thus forcing existing mahout-math users to do unreasonable migration and refactoring steps and/or experience performance decline. Mahout-math is one of the few still very valuable components, this is important. (Current state of the things do not introduce such changes). &lt;br/&gt;
(4) +0 in-core API augmentation. This work must not create API duplication (alternatives to existing contracts) or augmented API contracts that are either not adequately backed by the existing multitude of in-core matrix types or do not make sense for in-core structures.  (Current state of the things does not introduce such changes). &lt;br/&gt;
(5)  -1 I still maintain that major Matrix and Vector in-core contracts do not provide adequate basis, nor are a good fit for for building shared-nothing generic environment. Thus, further partitioning of Matrix and Vector contract sets is required If distributed structures must share same hierarchy base with in-core ones. However, doing so will contradict positions (3) and (4)  above.  Which is why i maintain that the least painful way to address those is to create a separate hierarchy base for H20Matrix which would intersect some of high-level algebraic contracts with in-core contracts while bearing identical semantics.&lt;/p&gt;


&lt;p&gt;This concern seems to be shared even by the authors of the code, if I am not misinterpreting the meaning of the comments here.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;&quot;H2OMatrix.java&quot;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// Single-element accessors.  Calling these likely indicates a huge performance bug.
&lt;/span&gt;  @Override &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; getQuick(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; column) { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; _fr.vecs()[column].at(row); }
  @Override &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setQuick(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; column, &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value) { _fr.vecs()[column].set(row,value); _fr.vecs()[column].
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I reserve the right to change my vote if components of my vote are affected by future changes. &lt;br/&gt;
I will not raise objections or add points based on performance.&lt;/p&gt;</comment>
                            <comment id="13982237" author="ssc" created="Sun, 27 Apr 2014 09:01:48 +0100"  >&lt;p&gt;What&apos;s the status here?&lt;/p&gt;</comment>
                            <comment id="13982250" author="tdunning" created="Sun, 27 Apr 2014 09:31:03 +0100"  >&lt;p&gt;The h2o integration work has been progressing nicely.  It is located at &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tdunning/h2o-matrix&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/tdunning/h2o-matrix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rationale for doing the work externally is largely the non-technical opposition from Dmitriy.&lt;/p&gt;

&lt;p&gt;The current status is that a reasonably performance implementation of the basic java math API which is sufficient for coding up a basic k-means.  This work will be progressing to integration within the Scala DSL as well as basic implementations of other algorithms such as SSVD.&lt;/p&gt;

&lt;p&gt;Once basic integration with the Scala DSL works sufficiently for the test piece algorithms, it will make sense to bring this work back into Mahout.&lt;/p&gt;

&lt;p&gt;So far, communications have been handled by direct email.  This is somewhat unsatisfactory in that the discussions are not publicly visible.  I expect that as soon as the work comes back into Mahout itself, this issue will resolve itself.&lt;/p&gt;</comment>
                            <comment id="13982481" author="dlyubimov" created="Sun, 27 Apr 2014 22:41:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;The rationale for doing the work externally is largely the non-technical opposition from Dmitriy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure what is not technical in my previous post. Or pretty much any post attached to this jira on my behalf. &lt;/p&gt;

&lt;p&gt;I am glad some github code is finally officially confirmed to be tied to this very M-1500 issue for the first time.&lt;/p&gt;

&lt;p&gt;However, i very much don&apos;t want to get pulled into discussion on height measurements of moral grounds here. Which is why it is the last time i post on this issue, since it obviously became pretty toxic for me to touch since desire to discredit-by-spin of my position has become so palpable. &lt;/p&gt;

&lt;p&gt;I have measured technical merit of those arguments given to me so far, privately or publicly, while consciously pushing objectivity levers of mine into their extreme &quot;max&quot; position; and unfortunately i don&apos;t think i found much substance to overcome the problems i have already reported. &lt;b&gt;But this is just a matter of opinion. And i already gave 0 vote on this. So i don&apos;t see why you would want to do anything different w.r.t. submitting this work for further review with people on this forum&lt;/b&gt; based solely on my arguments &amp;#8211; even if i have been privy to some additional information about this development before it was announced. I am not significant from the progress of this work point of view. My arguments might be of some value though. &lt;/p&gt;

&lt;p&gt;So, for the last time, to recap what it was.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;(A) critique of the idea of having anything blockwise-distributed under Matrix api as it exists today&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;As i mentioned above, the x2o-matrix code itself refers to core contracts as &quot;performance bug&quot; ( here we mean in-core abstraction of element-wise direct access, element-wise and vector-wise iterators, and in-core optimizer specific contracts). If implementation cannot satisfy core contracts of abstraction, it follows directly that the abstraction is not useful for the implementation. In other words, if the algorithms using abstraction need to pay attention to what actual implementation class actually lies underneath, then again, abstraction has failed by definition. &lt;/p&gt;

&lt;p&gt;Concerns like that could be allayed in some (not common) cases by declaring operations optionally supported (e.g. as in ByteBuffer$array()). However, in such situations optional contract is planned in the very first place rather than by alteration, as it would likely break existing users of the abstaction. &lt;/p&gt;

&lt;p&gt;Optional contracts also do not cover so numerous and so core-concern contracts as suggested by this &quot;performance bug&quot; qualifier (like i said, 95% of current Mahout code is using elementwise or vector-wise iterators whenever Matrix or Vector type is involved). So I don&apos;t consider declaring optional support for the family of those in-core contracts of Matrix and Vector a reconciliation path for this design problem.  &lt;/p&gt;

&lt;p&gt;And I haven&apos;t heard any solid technical rebuttal to this from OOA point of view that would somehow vindicate this design in my mind.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;End-of-critique. Alternatives&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;&lt;b&gt;(B)&lt;/b&gt; Alternaltively, suppose we really wanted to go this way (i.e. marry something like &quot;h2o-ized variation of DistributedRowMatrix&quot; with AbstractMatrix using common mix-ins), then ideally solid design would imply  re-working Matrix apis in order to split them further to separate into finer classes of concerns than those that exist today: algebraic ops, incore optimizer ops, and  element-wise access concerns for in-core and distributed models (i.e stuff like getQuick, setQuick and Iterable vs. mapBlock). &lt;/p&gt;

&lt;p&gt;And then we would say that we have some mix-in (interface) that addresses all algebraic ops regardless of whether it is distributed or in-core backing.&lt;/p&gt;

&lt;p&gt;This sounds kind of right, doesn&apos;t it.&lt;/p&gt;

&lt;p&gt;However, this brings us back to the  issue of destabilizing in-core Matrix api, splitting interfaces into hair, and hence sending ripple effects of code refactoring throughout, perhaps even beyond Mahout codebase. &lt;/p&gt;

&lt;p&gt;This cost in my opinion is not sufficiently outweighed by benefits of having some common in-core and distributed algebraic mix-ins among distributed and in-core stuff. Instead, algebraic operator-centric approach in my experience turned out much more cleaner pragmatically from distributed optimizer point of view,  and resulted in much cleaner separation of in-core and distributed math concerns even in the end-user algorithms. &lt;/p&gt;

&lt;p&gt;Further on, even purely algebraic stuff is unlikely to be totally common (e.g. slice operators for vectors and elements are not supported in distributed stuff &amp;#8211; instead, mapBlock operator is implied there to get access to  in-core iterators of the blocks; in-place operators are generally bad for distributed plans too). This means even further split of API which at first seemed to be fairly same for both in-core and distributed stuff. That&apos;s my pragmatical net remainder of the Spark bindings work.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;(C)&lt;/b&gt; Another angle of attack on x2o integration IMO would be plugging x2o engines  into optimizer, which this work (M-1500) doesn&apos;t target. I rate possibility of this happening as quite tepid at the moment, because x2o programming model is not rich enough to provide things like zipping identically distributed datasets, very general shuffle model (e.g. many-to-many shuffle), advanced partition management (shuffless resplit-coalesce), and so on. I am not even sure if there&apos;s a clear concept of combiner type operation.  That observation leaves very bleak prospects for physical layer realization of the DRMLike scala stuff using H2O.&lt;/p&gt;

&lt;p&gt;So when &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tdunning&quot; class=&quot;user-hover&quot; rel=&quot;tdunning&quot;&gt;Ted Dunning&lt;/a&gt; speaks of DSL integration, he most probably speaks of Scala bindings, not distributed DSL bindings. So this will create further fragmentation of approaches and goes against &quot;write once, run anywhere&quot; concept there. More likely, with this approach there would be &quot;write once for H2O&quot; and &quot;write once for everything else&quot;. Which is not end of the world, but it doesn&apos;t sound appealing and it certainly doesn&apos;t seem to imply coherent H20 integration &amp;#8211; not coherent with distributed algebra bindings, anyway.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;(D)&lt;/b&gt; And yet a third thought i probably have not yet said in this jira: I think the best path for any sort of benefits from x20 integration would be borrowing the compression techniques for columnar in-core data frame blocks, that&apos;s where x2o strength is said to be above anything else.  But at this point my understanding no one has any intention to work this angle either.&lt;/p&gt;

&lt;p&gt;I am not supportive of A and B as explained. &lt;br/&gt;
I am dubious about but not i am not sufficiently qualified to judge on C alternative.&lt;br/&gt;
I am supportive of alternative D.&lt;/p&gt;

&lt;p&gt;Thank you for reading till the end.&lt;/p&gt;

&lt;p&gt;-d&lt;/p&gt;</comment>
                            <comment id="13982497" author="tdunning" created="Sun, 27 Apr 2014 23:50:38 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dlieu.7%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;dlieu.7@gmail.com&quot;&gt;Dmitriy Lyubimov&lt;/a&gt;&apos;s comments have several incorrect statements which lead to incorrect conclusions.&lt;/p&gt;

&lt;p&gt;These statements are both explicit and implicit and include in paraphrased form:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;A comment about a &quot;performance bug&quot; means that h2o can&apos;t implement the Matrix API&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This means that use of some operations may have impacts on performance that could be surprisingly large to some programmers.  The comment is intended to warn implementors that these impacts could be large enough to essentially prevent benefit from parallel computation.  As such, their use would thwart some of the purpose of using a parallel system.  The reference to a &quot;performance bug&quot; does not imply that the operations do not work and, indeed, their availability might be handy during initial implementation of algorithms.&lt;/p&gt;

&lt;p&gt;Section (A) makes points about validity of abstractions due to the requirements to modify existing code, but that really doesn&apos;t apply since that isn&apos;t the purpose of the current work.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;It is the intent of the h2o support of the Matrix API that all codes that use the Matrix API should run and get parallel speedup&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is explicitly not a goal of the current effort.  The goal of the current effort is to use a well understood and stable Mahout API to experiment with implementation techniques for parallel algorithms that are based on h2o.  It is a premise of this effort that the operations used in these hand built implementations will have roughly similar execution patterns as will equivalent programs that use the Scala bindings or the distributed DSL bindings.  That premise is unlikely to be massively incorrect and thus the current effort is useful in terms of determining good h2o idioms for implementing matrix code.&lt;/p&gt;

&lt;p&gt;The pattern of usage of the matrix API by other Mahout codes is completely irrelevant to this effort.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The h2o system is not rich enough in capabilities to support things like zipping identically distributed data sets.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is simply incorrect and is based on lack of knowledge of the h2o system.  The h2o primitives are different from Spark primitives.  That means that different idioms have to be used to generate similar results, but it doesn&apos;t mean that h2o lacks these capabilities.  In particular, the discord between what &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dlieu.7%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;dlieu.7@gmail.com&quot;&gt;Dmitriy Lyubimov&lt;/a&gt; thinks that h2o can do and what it can do is large enough that the entire section (C) in his comments is essentially vacuous since it is based entirely on false premises.&lt;/p&gt;

&lt;p&gt;The current results indicate that there considerable promise for h2o in terms of these capabilities.  More work is indicated.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;the current work would require massive revamping of the current Mahout Matrix API.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The current work is a technical exploration of convenient and efficient implementation techniques.  It has no implications whatsoever regarding the refactoring of the Mahout Matrix API.  The current work does have implications relative to any h2o shim layers that might ultimately be necessary, but that has nothing to do with the current Mahout in-core API&apos;s.  Section (B) is thus also moot.&lt;/p&gt;

&lt;p&gt;The emotional tenor of &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dlieu.7%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;dlieu.7@gmail.com&quot;&gt;Dmitriy Lyubimov&lt;/a&gt;&apos;s comments are exactly what is encouraging the h2o work to be done a bit apart.  It simply isn&apos;t efficient to have to answer so many off-topic points whenever any reports on work in progress are given.&lt;/p&gt;



</comment>
                            <comment id="13982714" author="dlyubimov" created="Mon, 28 Apr 2014 03:38:02 +0100"  >&lt;blockquote&gt;&lt;p&gt;These statements are both explicit and implicit and include in paraphrased form:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A comment about a &quot;performance bug&quot; means that h2o can&apos;t implement the Matrix API&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;The reference to a &quot;performance bug&quot; does not imply that the operations do not work and, indeed, their availability might be handy during initial implementation of algorithms.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Paraphrasing me means admitting i did not say that. I am well aware that these APIs in question are &lt;em&gt;naively&lt;/em&gt; supported. When a person takes an iterator (regardless of what one iterates over) it is expected as a general rule that would be a O&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; iteration. Using it for O(1) is not a general rule (in fact, i don&apos;t know example of that over entire current codebase). &lt;/p&gt;

&lt;p&gt;So thus we established two things here: &lt;br/&gt;
(1) abstraction is not useful for general rule. O&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;br/&gt;
(2) abstraction may be useful for non-general rule O(1). &lt;/p&gt;

&lt;p&gt;So according to general rule, this abstraction is not useful. Saying that general rule can be overturned by special case is a fallacy in retorics called &quot;special pleading&quot;, i.e. arguing against general rule based on an exception.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;entire section (C) in his comments is essentially vacuous since it is based entirely on false premises&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Proposal (C) actually stated the proposal (implement optimizer plugin for h20) and also argumentation why it may be difficult. I am not sure what is moot &amp;#8211; the proposal, or why it is unfeasible. Either way, it is based on my discussion with h20 team and their own admittance(including dev list) that programming model is not where it needs be. If they know that these goodies are provided as primitives they never stated so. I was actually very hopeful and positive about it in the beginning that there were. You are the first person on record on the topic that advertises H20 as rich programming model. If so, that&apos;s wonderful, i would be happy to re-examine my proposal C myself. That said, i already admitted I should not be considered an expert on the exact set of capabilities there. My point with proposal (C) was that giving physical layer translation for h20 things is viewed as  more consistent integration path, but not so much why it is unfeasible. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The emotional tenor of Dmitriy Lyubimov&apos;s comments are exactly what is encouraging the h2o work to be done a bit apart. It simply isn&apos;t efficient to have to answer so many off-topic points whenever any reports on work in progress are given.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this has been the off-topic here. &lt;/p&gt;

&lt;p&gt;Calling my comments &quot;emotional&quot; or &quot;non-technical&quot;, or &lt;em&gt;loosely&lt;/em&gt; paraphrasing me. &lt;/p&gt;

&lt;p&gt;It is also a well known rhetorical fallacy &amp;#8211; attacking opponent&apos;s character or expertise with hope he or she would go into defending it while distracting from the actual issue at hand.  Which allows to mount even further similar attacks. &lt;/p&gt;

&lt;p&gt;But it wouldn&apos;t matter even if I  ate children for dinner, discussion of my character (or expertise) is totally irrelevant to this Jira or strength argumentation of whomever. Rhethorics would argue this actually makes your position look weaker, making people think the rest of your argumentation base is weaker than it is. &lt;/p&gt;

&lt;p&gt;Anyway, I just wanted to make it clear that I don&apos;t see it as reasonable to use my name as any sort of pretext to do (or not to do) things as opposed that they are normally done in Apache. I am also willing to make it easier since I will not return to this jira and will not vote negatively on it. &lt;/p&gt;

&lt;p&gt;Actually quite opposite, i have always had and will encourage to bring things more forward for people to look at, not being clear on intent was what has been causing so much confusion about this all in the first place.&lt;/p&gt;
</comment>
                            <comment id="13984369" author="kanjilal" created="Tue, 29 Apr 2014 16:03:49 +0100"  >&lt;p&gt;Anand,&lt;br/&gt;
Just following up to make sure I understand, is there a concrete deliverable for this or is this more of an exploration with some discussion topics to be resolved through the dev mailing list?  In the above comments I see this as more of an exploration and yet I also read that there is work being done offline(in a fork perhaps) to get h2o integrated?&lt;/p&gt;</comment>
                            <comment id="14036013" author="githubbot" created="Wed, 18 Jun 2014 18:43:18 +0100"  >&lt;p&gt;GitHub user dlyubimov opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt; H20&lt;/p&gt;

&lt;p&gt;    Creating a PR to just to be able to (re-)view what current state of diff is against master in this work.&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/avati/mahout&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati/mahout&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #21&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit bb23a8b45250379e3c89e0a64325b144cd2aa2e7&lt;br/&gt;
Author: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;br/&gt;
Date:   2014-05-20T02:58:59Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: Implement H2O backend for Mahout Scala DSL&lt;/p&gt;

&lt;p&gt;    Barebone only, no logic yet. Compiles, tests fail with NotImplementedError&lt;/p&gt;

&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;p&gt;commit 5b3c852a2abb677accbce4e0c6dd605e585f0a04&lt;br/&gt;
Author: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;br/&gt;
Date:   2014-06-12T00:07:10Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: Implement non algebraic parts of H2O bindings&lt;/p&gt;

&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;p&gt;commit 757a95fcce2afae14df4c5859c75fb4b8896df15&lt;br/&gt;
Author: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;br/&gt;
Date:   2014-06-17T01:30:13Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: Implement Linear Algebra ops in H2O backend&lt;/p&gt;

&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14036018" author="githubbot" created="Wed, 18 Jun 2014 18:47:08 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r13929215&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r13929215&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/test/scala/org/apache/mahout/math/decompositions/MathSuite.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,212 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.math.decompositions&lt;br/&gt;
    +&lt;br/&gt;
    +import org.scalatest.&lt;/p&gt;
{Matchers, FunSuite}
&lt;p&gt;    +import org.apache.mahout.h2obindings.test.MahoutLocalContext&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import drm._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import RLikeDrmOps._&lt;br/&gt;
    +import org.apache.mahout.h2obindings._&lt;br/&gt;
    +import org.apache.mahout.common.RandomUtils&lt;br/&gt;
    +import scala.math._&lt;br/&gt;
    +&lt;br/&gt;
    +class MathSuite extends FunSuite with Matchers with MahoutLocalContext {&lt;br/&gt;
    +&lt;br/&gt;
    +  test(&quot;thin distributed qr&quot;) &lt;/p&gt;
{
    +
    +    val inCoreA = dense(
    +      (1, 2, 3, 4),
    +      (2, 3, 4, 5),
    +      (3, -4, 5, 6),
    +      (4, 5, 6, 7),
    +      (8, 6, 7, 8)
    +    )
    +
    +    val A = drmParallelize(inCoreA, numPartitions = 2)
    +    val (drmQ, inCoreR) = dqrThin(A, checkRankDeficiency = false)
    +
    +    // Assert optimizer still knows Q and A are identically partitioned
    +    drmQ.partitioningTag should equal(A.partitioningTag)
    +
    +//    drmQ.rdd.partitions.size should be(A.rdd.partitions.size)
    +
    +    // Should also be zippable
    +//    drmQ.rdd.zip(other = A.rdd)
    +
    +    val inCoreQ = drmQ.collect
    +
    +    printf(&quot;A=\n%s\n&quot;, inCoreA)
    +    printf(&quot;Q=\n%s\n&quot;, inCoreQ)
    +    printf(&quot;R=\n%s\n&quot;, inCoreR)
    +
    +    val (qControl, rControl) = qr(inCoreA)
    +    printf(&quot;qControl=\n%s\n&quot;, qControl)
    +    printf(&quot;rControl=\n%s\n&quot;, rControl)
    +
    +    // Validate with Cholesky
    +    val ch = chol(inCoreA.t %*% inCoreA)
    +    printf(&quot;A&apos;A=\n%s\n&quot;, inCoreA.t %*% inCoreA)
    +    printf(&quot;L:\n%s\n&quot;, ch.getL)
    +
    +    val rControl2 = (ch.getL cloned).t
    +    val qControl2 = ch.solveRight(inCoreA)
    +    printf(&quot;qControl2=\n%s\n&quot;, qControl2)
    +    printf(&quot;rControl2=\n%s\n&quot;, rControl2)
    +
    +    // Housholder approach seems to be a little bit more stable
    +    (rControl - inCoreR).norm should be &amp;lt; 1E-5
    +    (qControl - inCoreQ).norm should be &amp;lt; 1E-5
    +
    +    // Assert identicity with in-core Cholesky-based -- this should be tighter.
    +    (rControl2 - inCoreR).norm should be &amp;lt; 1E-10
    +    (qControl2 - inCoreQ).norm should be &amp;lt; 1E-10
    +
    +    // Assert orhtogonality:
    +    // (a) Q[,j] dot Q[,j] == 1.0 for all j
    +    // (b) Q[,i] dot Q[,j] == 0.0 for all i != j
    +    for (col &amp;lt;- 0 until inCoreQ.ncol)
    +      ((inCoreQ(::, col) dot inCoreQ(::, col)) - 1.0).abs should be &amp;lt; 1e-10
    +    for (col1 &amp;lt;- 0 until inCoreQ.ncol - 1; col2 &amp;lt;- col1 + 1 until inCoreQ.ncol)
    +      (inCoreQ(::, col1) dot inCoreQ(::, col2)).abs should be &amp;lt; 1e-10
    +
    +
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;dssvd - the naive-est - q=0&quot;) &lt;/p&gt;
{
    +    dssvdNaive(q = 0)
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;ddsvd - naive - q=1&quot;) &lt;/p&gt;
{
    +    dssvdNaive(q = 1)
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;ddsvd - naive - q=2&quot;) &lt;/p&gt;
{
    +    dssvdNaive(q = 2)
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +&lt;br/&gt;
    +  def dssvdNaive(q: Int) &lt;/p&gt;
{
    +    val inCoreA = dense(
    +      (1, 2, 3, 4),
    +      (2, 3, 4, 5),
    +      (3, -4, 5, 6),
    +      (4, 5, 6, 7),
    +      (8, 6, 7, 8)
    +    )
    +    val drmA = drmParallelize(inCoreA, numPartitions = 2)
    +
    +    val (drmU, drmV, s) = dssvd(drmA, k = 4, q = q)
    +    val (inCoreU, inCoreV) = (drmU.collect, drmV.collect)
    +
    +    printf(&quot;U:\n%s\n&quot;, inCoreU)
    +    printf(&quot;V:\n%s\n&quot;, inCoreV)
    +    printf(&quot;Sigma:\n%s\n&quot;, s)
    +
    +    (inCoreA - (inCoreU %*%: diagv(s)) %*% inCoreV.t).norm should be &amp;lt; 1E-5
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;dspca&quot;) &lt;/p&gt;
{
    +
    +    val rnd = RandomUtils.getRandom
    +
    +    // Number of points
    +    val m = 500
    +    // Length of actual spectrum
    +    val spectrumLen = 40
    +
    +    val spectrum = dvec((0 until spectrumLen).map(x =&amp;gt; 300.0 * exp(-x) max 1e-3))
    +    printf(&quot;spectrum:%s\n&quot;, spectrum)
    +
    +    val (u, _) = qr(new SparseRowMatrix(m, spectrumLen) :=
    +        ((r, c, v) =&amp;gt; if (rnd.nextDouble() &amp;lt; 0.2) 0 else rnd.nextDouble() + 5.0))
    +
    +    // PCA Rotation matrix -- should also be orthonormal.
    +    val (tr, _) = qr(Matrices.symmetricUniformView(spectrumLen, spectrumLen, rnd.nextInt) - 10.0)
    +
    +    val input = (u %*%: diagv(spectrum)) %*% tr.t
    +    val drmInput = drmParallelize(m = input, numPartitions = 2)
    +
    +    // Calculate just first 10 principal factors and reduce dimensionality.
    +    // Since we assert just validity of the s-pca, not stochastic error, we bump p parameter to
    +    // ensure to zero stochastic error and assert only functional correctness of the method&apos;s pca-
    +    // specific additions.
    +    val k = 10
    +
    +    // Calculate just first 10 principal factors and reduce dimensionality.
    +    var (drmPCA, _, s) = dspca(A = drmInput, k = 10, p = spectrumLen, q = 1)
    +    // Un-normalized pca data:
    +    drmPCA = drmPCA %*% diagv(s)
    +
    +    val pca = drmPCA.checkpoint(CacheHint.NONE).collect
    +
    +    // Of course, once we calculated the pca, the spectrum is going to be different since our originally
    +    // generated input was not centered. So here, we&apos;d just brute-solve pca to verify
    +    val xi = input.colMeans()
    +    for (r &amp;lt;- 0 until input.nrow) input(r, ::) -= xi
    +    var (pcaControl, _, sControl) = svd(m = input)
    +    pcaControl = (pcaControl %*%: diagv(sControl))(::, 0 until k)
    +
    +    printf(&quot;pca:\n%s\n&quot;, pca(0 until 10, 0 until 10))
    +    printf(&quot;pcaControl:\n%s\n&quot;, pcaControl(0 until 10, 0 until 10))
    +
    +    (pca(0 until 10, 0 until 10).norm - pcaControl(0 until 10, 0 until 10).norm).abs should be &amp;lt; 1E-5
    +
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;als&quot;) &lt;/p&gt;
{
    +
    +    val rnd = RandomUtils.getRandom
    +
    +    // Number of points
    +    val m = 500
    +    val n = 500
    +
    +    // Length of actual spectrum
    +    val spectrumLen = 40
    +
    +    // Create singluar values with decay
    +    val spectrum = dvec((0 until spectrumLen).map(x =&amp;gt; 300.0 * exp(-x) max 1e-3))
    +    printf(&quot;spectrum:%s\n&quot;, spectrum)
    +
    +    // Create A as an ideal input
    +    val inCoreA = (qr(Matrices.symmetricUniformView(m, spectrumLen, 1234))._1 %*%: diagv(spectrum)) %*%
    +        qr(Matrices.symmetricUniformView(n, spectrumLen, 2345))._1.t
    +    val drmA = drmParallelize(inCoreA, numPartitions = 2)
    +
    +    // Decompose using ALS
    +    val (drmU, drmV, rmse) = als(drmInput = drmA, k = 20).toTuple
    +    val inCoreU = drmU.collect
    +    val inCoreV = drmV.collect
    +
    +    val predict = inCoreU %*% inCoreV.t
    +
    +    printf(&quot;Control block:\n%s\n&quot;, inCoreA(0 until 3, 0 until 3))
    +    printf(&quot;ALS factorized approximation block:\n%s\n&quot;, predict(0 until 3, 0 until 3))
    +
    +    val err = (inCoreA - predict).norm
    +    printf (&quot;norm of residuals %f\n&quot;,err)
    +    printf (&quot;train iteration rmses: %s\n&quot;, rmse)
    +
    +    err should be &amp;lt; 1e-2
    +
    +  }
&lt;p&gt;    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    I think if all these tests are passing, this would be an incredibly cool step forward in this issue..&lt;/p&gt;</comment>
                            <comment id="14039440" author="githubbot" created="Fri, 20 Jun 2014 23:08:34 +0100"  >&lt;p&gt;Github user avati commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r14043524&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r14043524&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/test/scala/org/apache/mahout/math/decompositions/MathSuite.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,212 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.math.decompositions&lt;br/&gt;
    +&lt;br/&gt;
    +import org.scalatest.&lt;/p&gt;
{Matchers, FunSuite}
&lt;p&gt;    +import org.apache.mahout.h2obindings.test.MahoutLocalContext&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import drm._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import RLikeDrmOps._&lt;br/&gt;
    +import org.apache.mahout.h2obindings._&lt;br/&gt;
    +import org.apache.mahout.common.RandomUtils&lt;br/&gt;
    +import scala.math._&lt;br/&gt;
    +&lt;br/&gt;
    +class MathSuite extends FunSuite with Matchers with MahoutLocalContext {&lt;br/&gt;
    +&lt;br/&gt;
    +  test(&quot;thin distributed qr&quot;) &lt;/p&gt;
{
    +
    +    val inCoreA = dense(
    +      (1, 2, 3, 4),
    +      (2, 3, 4, 5),
    +      (3, -4, 5, 6),
    +      (4, 5, 6, 7),
    +      (8, 6, 7, 8)
    +    )
    +
    +    val A = drmParallelize(inCoreA, numPartitions = 2)
    +    val (drmQ, inCoreR) = dqrThin(A, checkRankDeficiency = false)
    +
    +    // Assert optimizer still knows Q and A are identically partitioned
    +    drmQ.partitioningTag should equal(A.partitioningTag)
    +
    +//    drmQ.rdd.partitions.size should be(A.rdd.partitions.size)
    +
    +    // Should also be zippable
    +//    drmQ.rdd.zip(other = A.rdd)
    +
    +    val inCoreQ = drmQ.collect
    +
    +    printf(&quot;A=\n%s\n&quot;, inCoreA)
    +    printf(&quot;Q=\n%s\n&quot;, inCoreQ)
    +    printf(&quot;R=\n%s\n&quot;, inCoreR)
    +
    +    val (qControl, rControl) = qr(inCoreA)
    +    printf(&quot;qControl=\n%s\n&quot;, qControl)
    +    printf(&quot;rControl=\n%s\n&quot;, rControl)
    +
    +    // Validate with Cholesky
    +    val ch = chol(inCoreA.t %*% inCoreA)
    +    printf(&quot;A&apos;A=\n%s\n&quot;, inCoreA.t %*% inCoreA)
    +    printf(&quot;L:\n%s\n&quot;, ch.getL)
    +
    +    val rControl2 = (ch.getL cloned).t
    +    val qControl2 = ch.solveRight(inCoreA)
    +    printf(&quot;qControl2=\n%s\n&quot;, qControl2)
    +    printf(&quot;rControl2=\n%s\n&quot;, rControl2)
    +
    +    // Housholder approach seems to be a little bit more stable
    +    (rControl - inCoreR).norm should be &amp;lt; 1E-5
    +    (qControl - inCoreQ).norm should be &amp;lt; 1E-5
    +
    +    // Assert identicity with in-core Cholesky-based -- this should be tighter.
    +    (rControl2 - inCoreR).norm should be &amp;lt; 1E-10
    +    (qControl2 - inCoreQ).norm should be &amp;lt; 1E-10
    +
    +    // Assert orhtogonality:
    +    // (a) Q[,j] dot Q[,j] == 1.0 for all j
    +    // (b) Q[,i] dot Q[,j] == 0.0 for all i != j
    +    for (col &amp;lt;- 0 until inCoreQ.ncol)
    +      ((inCoreQ(::, col) dot inCoreQ(::, col)) - 1.0).abs should be &amp;lt; 1e-10
    +    for (col1 &amp;lt;- 0 until inCoreQ.ncol - 1; col2 &amp;lt;- col1 + 1 until inCoreQ.ncol)
    +      (inCoreQ(::, col1) dot inCoreQ(::, col2)).abs should be &amp;lt; 1e-10
    +
    +
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;dssvd - the naive-est - q=0&quot;) &lt;/p&gt;
{
    +    dssvdNaive(q = 0)
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;ddsvd - naive - q=1&quot;) &lt;/p&gt;
{
    +    dssvdNaive(q = 1)
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;ddsvd - naive - q=2&quot;) &lt;/p&gt;
{
    +    dssvdNaive(q = 2)
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +&lt;br/&gt;
    +  def dssvdNaive(q: Int) &lt;/p&gt;
{
    +    val inCoreA = dense(
    +      (1, 2, 3, 4),
    +      (2, 3, 4, 5),
    +      (3, -4, 5, 6),
    +      (4, 5, 6, 7),
    +      (8, 6, 7, 8)
    +    )
    +    val drmA = drmParallelize(inCoreA, numPartitions = 2)
    +
    +    val (drmU, drmV, s) = dssvd(drmA, k = 4, q = q)
    +    val (inCoreU, inCoreV) = (drmU.collect, drmV.collect)
    +
    +    printf(&quot;U:\n%s\n&quot;, inCoreU)
    +    printf(&quot;V:\n%s\n&quot;, inCoreV)
    +    printf(&quot;Sigma:\n%s\n&quot;, s)
    +
    +    (inCoreA - (inCoreU %*%: diagv(s)) %*% inCoreV.t).norm should be &amp;lt; 1E-5
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;dspca&quot;) &lt;/p&gt;
{
    +
    +    val rnd = RandomUtils.getRandom
    +
    +    // Number of points
    +    val m = 500
    +    // Length of actual spectrum
    +    val spectrumLen = 40
    +
    +    val spectrum = dvec((0 until spectrumLen).map(x =&amp;gt; 300.0 * exp(-x) max 1e-3))
    +    printf(&quot;spectrum:%s\n&quot;, spectrum)
    +
    +    val (u, _) = qr(new SparseRowMatrix(m, spectrumLen) :=
    +        ((r, c, v) =&amp;gt; if (rnd.nextDouble() &amp;lt; 0.2) 0 else rnd.nextDouble() + 5.0))
    +
    +    // PCA Rotation matrix -- should also be orthonormal.
    +    val (tr, _) = qr(Matrices.symmetricUniformView(spectrumLen, spectrumLen, rnd.nextInt) - 10.0)
    +
    +    val input = (u %*%: diagv(spectrum)) %*% tr.t
    +    val drmInput = drmParallelize(m = input, numPartitions = 2)
    +
    +    // Calculate just first 10 principal factors and reduce dimensionality.
    +    // Since we assert just validity of the s-pca, not stochastic error, we bump p parameter to
    +    // ensure to zero stochastic error and assert only functional correctness of the method&apos;s pca-
    +    // specific additions.
    +    val k = 10
    +
    +    // Calculate just first 10 principal factors and reduce dimensionality.
    +    var (drmPCA, _, s) = dspca(A = drmInput, k = 10, p = spectrumLen, q = 1)
    +    // Un-normalized pca data:
    +    drmPCA = drmPCA %*% diagv(s)
    +
    +    val pca = drmPCA.checkpoint(CacheHint.NONE).collect
    +
    +    // Of course, once we calculated the pca, the spectrum is going to be different since our originally
    +    // generated input was not centered. So here, we&apos;d just brute-solve pca to verify
    +    val xi = input.colMeans()
    +    for (r &amp;lt;- 0 until input.nrow) input(r, ::) -= xi
    +    var (pcaControl, _, sControl) = svd(m = input)
    +    pcaControl = (pcaControl %*%: diagv(sControl))(::, 0 until k)
    +
    +    printf(&quot;pca:\n%s\n&quot;, pca(0 until 10, 0 until 10))
    +    printf(&quot;pcaControl:\n%s\n&quot;, pcaControl(0 until 10, 0 until 10))
    +
    +    (pca(0 until 10, 0 until 10).norm - pcaControl(0 until 10, 0 until 10).norm).abs should be &amp;lt; 1E-5
    +
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  test(&quot;als&quot;) &lt;/p&gt;
{
    +
    +    val rnd = RandomUtils.getRandom
    +
    +    // Number of points
    +    val m = 500
    +    val n = 500
    +
    +    // Length of actual spectrum
    +    val spectrumLen = 40
    +
    +    // Create singluar values with decay
    +    val spectrum = dvec((0 until spectrumLen).map(x =&amp;gt; 300.0 * exp(-x) max 1e-3))
    +    printf(&quot;spectrum:%s\n&quot;, spectrum)
    +
    +    // Create A as an ideal input
    +    val inCoreA = (qr(Matrices.symmetricUniformView(m, spectrumLen, 1234))._1 %*%: diagv(spectrum)) %*%
    +        qr(Matrices.symmetricUniformView(n, spectrumLen, 2345))._1.t
    +    val drmA = drmParallelize(inCoreA, numPartitions = 2)
    +
    +    // Decompose using ALS
    +    val (drmU, drmV, rmse) = als(drmInput = drmA, k = 20).toTuple
    +    val inCoreU = drmU.collect
    +    val inCoreV = drmV.collect
    +
    +    val predict = inCoreU %*% inCoreV.t
    +
    +    printf(&quot;Control block:\n%s\n&quot;, inCoreA(0 until 3, 0 until 3))
    +    printf(&quot;ALS factorized approximation block:\n%s\n&quot;, predict(0 until 3, 0 until 3))
    +
    +    val err = (inCoreA - predict).norm
    +    printf (&quot;norm of residuals %f\n&quot;,err)
    +    printf (&quot;train iteration rmses: %s\n&quot;, rmse)
    +
    +    err should be &amp;lt; 1e-2
    +
    +  }
&lt;p&gt;    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    With the latest git-push, all these tests are passing&lt;/p&gt;</comment>
                            <comment id="14039447" author="githubbot" created="Fri, 20 Jun 2014 23:14:09 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-46732343&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-46732343&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Getting much closer to completion. Things which still do not work:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;seqfile format parser to read/write off HDFS&lt;/li&gt;
	&lt;li&gt;String key support in DRM (int and long works)&lt;/li&gt;
	&lt;li&gt;Fill in implementation of Par() (currently it is a passthrough)&lt;/li&gt;
	&lt;li&gt;more test cases&lt;/li&gt;
	&lt;li&gt;more code comments&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Except the above, the integration is basically working. I have some more performance enhancement changes in mind, but they will happen later. All remaining items are highlighted with /* XXX: */ code comment.&lt;/p&gt;

&lt;p&gt;    I will soon provide details on how others who are interested can run and test this. In the mean time, considering the above caveats, code review and comments are welcome.&lt;/p&gt;</comment>
                            <comment id="14058589" author="githubbot" created="Fri, 11 Jul 2014 10:42:45 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48712178&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48712178&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    All the points in the previous comments are now completed. This PR is ready for final review.&lt;/p&gt;</comment>
                            <comment id="14058934" author="githubbot" created="Fri, 11 Jul 2014 17:08:23 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48749896&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48749896&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Are the scalatests implemented in the Spark module that covers math-scala code implemented here somewhere? I&apos;d vote against merge untils those are in all in place and passing.&lt;/p&gt;

&lt;p&gt;    The cf stuff has a rather major bug the I&apos;m working on so I wouldn&apos;t move this into math-scala just yet, although it would make an interesting speed comparison once completed. The cf changes will require DSL additions that will be under separate review. Don&apos;t have a pr number yet.&lt;/p&gt;

&lt;p&gt;    Also I may have missed it but there should be clear instructions for how to build this and run it.  This is like a heart transplant. Before you release the patient make sure all systems are working correctly, the DSL is not the whole body. There should at least be some end-to-end pipelines in examples that anyone can run from a local installation.&lt;/p&gt;

&lt;p&gt;    Beyond these details I have a bigger issue with merging this. Now every time the DSL is changed it may break things in h20 specific code. It already does in cf for instance but I&apos;ve signed up to fix those fro spark. No committer has signed up to fix code in both Spark and H2O. IMO this is untenable. &lt;/p&gt;

&lt;p&gt;    To solve this the entire data prep pipeline must be virtualized to run on either engine so the tests for things like CF and ItemSimilarity (and the multitude of others to come) pass and are engine independent. As it stands any DSL change that breaks the build will have to rely on a contributor&apos;s fix. Even if one of you guys was made a committer we will have this problem where a needed change breaks one or the other engine specific code. Unless 99% of the entire pipeline is engine neutral the build will be unmaintainable.&lt;/p&gt;

&lt;p&gt;    Crudely speaking this means doing away with all references to a SparkContext and any use of it. So it&apos;s not just a matter of reproducing the spark module but reducing the need for one. Making it so small that breakages in one or the other engines code will be infrequent. &lt;/p&gt;

&lt;p&gt;    I raised this red flag long ago but in the heat of other issues it seemed minor, but I don&apos;t think it can be ignored anymore.&lt;/p&gt;</comment>
                            <comment id="14058966" author="githubbot" created="Fri, 11 Jul 2014 17:35:39 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48753061&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48753061&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;gt;&lt;br/&gt;
    &amp;gt; Are the scalatests implemented in the Spark module that covers math-scala&lt;br/&gt;
    &amp;gt; code implemented here somewhere? I&apos;d vote against merge untils those are in&lt;br/&gt;
    &amp;gt; all in place and passing.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    Yes, those were the first tests to pass. You can find them in&lt;br/&gt;
    h2o/src/test/org/apache/mahout/math/.&lt;/p&gt;

&lt;p&gt;    Also I may have missed it but there should be clear instructions for how to&lt;br/&gt;
    &amp;gt; build this and run it. This is like a heart transplant. Before you release&lt;br/&gt;
    &amp;gt; the patient make sure all systems are working correctly, the DSL is not the&lt;br/&gt;
    &amp;gt; whole body. There should at least be some end-to-end pipelines in examples&lt;br/&gt;
    &amp;gt; that anyone can run from a local installation.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    As mentioned in the email, there is a somewhat simple &quot;how to build and&lt;br/&gt;
    test&quot; for both local and distributed mode in h2o/README.md. Larger&lt;br/&gt;
    end-to-end pipelines and examples are TBD.&lt;/p&gt;</comment>
                            <comment id="14058986" author="githubbot" created="Fri, 11 Jul 2014 17:49:04 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48754615&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48754615&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    The test issue is with the tests in the spark module that actually test stuff in the math-scala module. Remember our discussion about splitting impl from test for cf? There are several things that cannot be tested without the engine in place.&lt;/p&gt;

&lt;p&gt;    I will be vocal about objecting to TBD for pipelines. The build will be unmaintainable unless the spark module is reduced to trivial and tiny bits. Any change to the DSL could break things I do not know how to fix and really don&apos;t want to sign up for--namely h2o specific TBD stuff.&lt;/p&gt;</comment>
                            <comment id="14059029" author="githubbot" created="Fri, 11 Jul 2014 18:17:50 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48757859&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48757859&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;gt; The test issue is with the tests in the spark module that actually test&lt;br/&gt;
    &amp;gt; stuff in the math-scala module. Remember our discussion about splitting&lt;br/&gt;
    &amp;gt; impl from test for cf? There are several things that cannot be tested&lt;br/&gt;
    &amp;gt; without the engine in place.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    I think we are talking about the same tests here. Please compare for&lt;br/&gt;
    yourself -&lt;br/&gt;
    &lt;a href=&quot;https://github.com/avati/mahout/blob/MAHOUT-1500/h2o/src/test/scala/org/apache/mahout/math/decompositions/MathSuite.scala&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati/mahout/blob/MAHOUT-1500/h2o/src/test/scala/org/apache/mahout/math/decompositions/MathSuite.scala&lt;/a&gt;&lt;br/&gt;
    and&lt;br/&gt;
    &lt;a href=&quot;https://github.com/avati/mahout/blob/MAHOUT-1500/spark/src/test/scala/org/apache/mahout/math/decompositions/MathSuite.scala&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati/mahout/blob/MAHOUT-1500/spark/src/test/scala/org/apache/mahout/math/decompositions/MathSuite.scala&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14059083" author="githubbot" created="Fri, 11 Jul 2014 18:46:34 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48761123&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48761123&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Exactly, thanks. I see you&apos;ve done the same for CF also great.&lt;/p&gt;

&lt;p&gt;    But this illustrates the problem. I need to change 50% of the tests in CF cooccurrence because they were not catching a bug. Now the tests live in two places h2o and spark. And unless I change the tests in both places the build will break. The files look virtually identical except for the imports, which is good. If that&apos;s true, I wonder if we could we use a Scala macro to keep the code all in one file? We might be able to take the same code and produce two artifacts that are both run at build time. That would reduce the load on devs for this kind of thing. &lt;/p&gt;

&lt;p&gt;    However currently almost all IO code is spark specific. You must have re-implemented drm.writeDrm for h2o.  Until this is *&lt;b&gt;not&lt;/b&gt;* a re-implementation but is engine neutral we are going to have a growing problem. I am the only person currently working in spark specific land and only Dmitriy and Sebastian are writing for V2. When other committers get past the Scala barrier and start committing similar stuff they will immediately face this. &lt;/p&gt;

&lt;p&gt;    BTW I am very interested in seeing how h2o ItemSimilarityDriver compares to an h2o version. IMO this is the kind of motivation we have to see. If you implemented the driver or the reader/writers we could compare speed on h2o and spark. we have a large enough dataset to make it interesting.&lt;/p&gt;</comment>
                            <comment id="14059110" author="githubbot" created="Fri, 11 Jul 2014 19:00:51 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48762753&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48762753&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    On Fri, Jul 11, 2014 at 10:46 AM, Pat Ferrel &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
    wrote:&lt;/p&gt;

&lt;p&gt;    &amp;gt; Exactly, thanks. I see you&apos;ve done the same for CF also great.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; But this illustrates the problem. I need to change 50% of the tests in CF&lt;br/&gt;
    &amp;gt; cooccurrence because they were not catching a bug. Now the tests live in&lt;br/&gt;
    &amp;gt; two places h2o and spark. And unless I change the tests in both places the&lt;br/&gt;
    &amp;gt; build will break. The files look virtually identical except for the&lt;br/&gt;
    &amp;gt; imports, which is good. If that&apos;s true, I wonder if we could we use a Scala&lt;br/&gt;
    &amp;gt; macro to keep the code all in one file? We might be able to take the same&lt;br/&gt;
    &amp;gt; code and produce two artifacts that are both run at build time. That would&lt;br/&gt;
    &amp;gt; reduce the load on devs for this kind of thing.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    As we discussed on another email thread, I&apos;m independently working on how&lt;br/&gt;
    to move tests back into math-scala. That effort should address this concern&lt;br/&gt;
    I think?&lt;/p&gt;

&lt;p&gt;     However currently almost all IO code is spark specific. You must have&lt;br/&gt;
    &amp;gt; re-implemented drm.writeDrm for h2o. Until this is &lt;b&gt;not&lt;/b&gt; a&lt;br/&gt;
    &amp;gt; re-implementation but is engine neutral we are going to have a growing&lt;br/&gt;
    &amp;gt; problem.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    Why is this a problem? drm.writeDrm() accepts an engine neutral path, like&lt;br/&gt;
    &quot;hdfs://..&quot; or &quot;file://...&quot; and the content of what gets written is the&lt;br/&gt;
    well defined sequencefile format no matter what the runtime backend is. And&lt;br/&gt;
    as long as the path and file content are engine neutral, why should&lt;br/&gt;
    pipeline code worry how the IO implementation is done? Again, am I missing&lt;br/&gt;
    something?&lt;/p&gt;</comment>
                            <comment id="14059159" author="githubbot" created="Fri, 11 Jul 2014 19:33:29 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48766569&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48766569&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Look at #28. Just spent 30 mins doing quick refactoring, should help you with test independence. Every  engine should run some common asserts which are included in the `*SuiteBase` traits&lt;/p&gt;</comment>
                            <comment id="14059183" author="githubbot" created="Fri, 11 Jul 2014 19:46:14 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48767998&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48767998&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    So you don&apos;t see how changing the drm API or storage format will now break code in two places written for two different engines? If I make the change to drm I can fix spark breakage but not h2o. This bit of code is extremely stable and super simple for spark so may be a bad example but new code will not be so stable just the opposite. For each new IO operation (SparkContext dependent)  or engine tuning (SparkConf dependent) we will grow the problem. The core will become untouchable or breakage will happen in places one engineer will not be able to fix.&lt;/p&gt;

&lt;p&gt;    This is a real issue, I need to change code in math-scala today, already have but it isn&apos;t pushed. Who knows what that will break in h2o implementations? I will be changing cooccurrence tests, so have to make them in two places. Maybe I can do that but when they diverge further than this example I won&apos;t be able to.&lt;/p&gt;

&lt;p&gt;    You guys need to address these issues as if you were supporting two engines for all Mahout code or you will never see what Mahout committers problems will be.&lt;/p&gt;</comment>
                            <comment id="14059204" author="githubbot" created="Fri, 11 Jul 2014 19:58:47 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48769459&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48769459&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @pferrel  (in case you are talking to me) sorry don&apos;t have time to read the whole discussion. if you can point me to concrete places in the code  what you think is needed to be done and why, i may be able to try to figure it. But as for as h20 issue, independent tests have nothing really new that @avati hasn&apos;t already done (except he cut-and-pasted them, and now he needs just to remove all cut-and-paste and just pull in a trait form math-scala).&lt;/p&gt;</comment>
                            <comment id="14059226" author="githubbot" created="Fri, 11 Jul 2014 20:20:59 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-48771908&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-48771908&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    On Fri, Jul 11, 2014 at 11:46 AM, Pat Ferrel &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
    wrote:&lt;/p&gt;

&lt;p&gt;    &amp;gt; So you don&apos;t see how changing the drm API or storage format will now break&lt;br/&gt;
    &amp;gt; code in two places written for two different engines?&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    Changing DRM API? Yes, of course - that is the nature of the beast of&lt;br/&gt;
    supporting multiple implementations behind a single abstraction. Change in&lt;br/&gt;
    abstraction API will need corresponding change in all backends. That&apos;s the&lt;br/&gt;
    reason why APIs must be designed carefully so that future changes to them&lt;br/&gt;
    are estimated to be most minimum. I don&apos;t see how this by itself qualifies&lt;br/&gt;
    as an objection.&lt;/p&gt;

&lt;p&gt;    Storage format? Neither spark nor h2o is defining any storage formats. The&lt;br/&gt;
    current APIs read and write to sequence files whose formats are very well&lt;br/&gt;
    defined and standardized. As far the they both read and write that common&lt;br/&gt;
    format from engine neutral locations, I don&apos;t see any problems at all.&lt;/p&gt;

&lt;p&gt;    If I make the change to drm I can fix spark breakage but not h2o. This bit&lt;br/&gt;
    &amp;gt; of code is extremely stable and super simple for spark so may be a bad&lt;br/&gt;
    &amp;gt; example but new code will not be so stable just the opposite. For each new&lt;br/&gt;
    &amp;gt; IO operation (SparkContext dependent) or engine tuning (SparkConf&lt;br/&gt;
    &amp;gt; dependent) we will grow the problem. The core will become untouchable or&lt;br/&gt;
    &amp;gt; breakage will happen in places one engineer will not be able to fix.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    Can you please provide a more concrete example for both &quot;make change do&lt;br/&gt;
    drm&quot; and &quot;new IO operation (SparkContext dependent)&quot;? It is hard for me to&lt;br/&gt;
    visualize the problems you are foreseeing without more specifics.&lt;/p&gt;

&lt;p&gt;    This is a real issue, I need to change code in math-scala today, already&lt;br/&gt;
    &amp;gt; have but it isn&apos;t pushed. Who knows what that will break in h2o&lt;br/&gt;
    &amp;gt; implementations? I will be changing cooccurrence tests, so have to make&lt;br/&gt;
    &amp;gt; them in two places. Maybe I can do that but when they diverge further than&lt;br/&gt;
    &amp;gt; this example I won&apos;t be able to.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    Well, as long as you are fixing a bug in cf logic, that should be engine&lt;br/&gt;
    independent. However if you are adding a new DRM API or modifying an&lt;br/&gt;
    existing DRM API - that will need corresponding changes in all the engines.&lt;br/&gt;
    There&apos;s no getting around that. That&apos;s something we all have to live with,&lt;br/&gt;
    no matter what project it is.&lt;/p&gt;


&lt;p&gt;    &amp;gt; You guys need to address these issues as if you were supporting two&lt;br/&gt;
    &amp;gt; engines for all Mahout code or you will never see what Mahout committers&lt;br/&gt;
    &amp;gt; problems will be.&lt;br/&gt;
    &amp;gt;&lt;/p&gt;

&lt;p&gt;    As I said before, please provide a concrete example of what the issues are.&lt;br/&gt;
    I don&apos;t know &lt;b&gt;what&lt;/b&gt; to fix yet.&lt;/p&gt;

&lt;p&gt;    Thanks&lt;/p&gt;</comment>
                            <comment id="14061051" author="githubbot" created="Mon, 14 Jul 2014 20:12:04 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/28#issuecomment-48945841&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/28#issuecomment-48945841&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @dlyubimov do you intend to merge this soon? I plan to rebase &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt; on top of this.&lt;/p&gt;</comment>
                            <comment id="14069502" author="githubbot" created="Tue, 22 Jul 2014 00:25:39 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49679780&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49679780&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Please note this PR is fully &quot;working&quot; now that #29 and #28 are merged. Please consider this for merge.&lt;/p&gt;</comment>
                            <comment id="14069514" author="githubbot" created="Tue, 22 Jul 2014 00:37:15 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15203732&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15203732&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/test/scala/org/apache/mahout/math/decompositions/MathSuite.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,212 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.math.decompositions&lt;br/&gt;
    +&lt;br/&gt;
    +import org.scalatest.&lt;/p&gt;
{Matchers, FunSuite}
&lt;p&gt;    +import org.apache.mahout.h2obindings.test.MahoutLocalContext&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import drm._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import RLikeDrmOps._&lt;br/&gt;
    +import org.apache.mahout.h2obindings._&lt;br/&gt;
    +import org.apache.mahout.common.RandomUtils&lt;br/&gt;
    +import scala.math._&lt;br/&gt;
    +&lt;br/&gt;
    +class MathSuite extends FunSuite with Matchers with MahoutLocalContext {&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    hm. i though this is not part of distributed decompositions suite and has been moved out to math-scala?&lt;/p&gt;</comment>
                            <comment id="14069515" author="githubbot" created="Tue, 22 Jul 2014 00:37:38 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49680647&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49680647&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    will it merge with rbind() code?&lt;/p&gt;</comment>
                            <comment id="14069517" author="githubbot" created="Tue, 22 Jul 2014 00:40:38 +0100"  >&lt;p&gt;Github user avati commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15203859&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15203859&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/test/scala/org/apache/mahout/math/decompositions/MathSuite.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,212 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.math.decompositions&lt;br/&gt;
    +&lt;br/&gt;
    +import org.scalatest.&lt;/p&gt;
{Matchers, FunSuite}
&lt;p&gt;    +import org.apache.mahout.h2obindings.test.MahoutLocalContext&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import drm._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import RLikeDrmOps._&lt;br/&gt;
    +import org.apache.mahout.h2obindings._&lt;br/&gt;
    +import org.apache.mahout.common.RandomUtils&lt;br/&gt;
    +import scala.math._&lt;br/&gt;
    +&lt;br/&gt;
    +class MathSuite extends FunSuite with Matchers with MahoutLocalContext {&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Ah, I forgot to git-rm this. Let me do that right away.&lt;/p&gt;</comment>
                            <comment id="14069521" author="githubbot" created="Tue, 22 Jul 2014 00:41:28 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49680913&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49680913&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    rbind() is not yet added, I wasn&apos;t even sure if the DRM api would be accepted before I implemented for H2O. I plan to submit a separate PR for rbind().&lt;/p&gt;</comment>
                            <comment id="14069527" author="githubbot" created="Tue, 22 Jul 2014 00:45:22 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49681182&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49681182&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Removed MathSuite. Re-ran mvn test and everything is passing.&lt;/p&gt;</comment>
                            <comment id="14069531" author="githubbot" created="Tue, 22 Jul 2014 00:49:23 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49681458&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49681458&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;        rbind() is not yet added, I wasn&apos;t even sure if the DRM api would be accepted before I&lt;br/&gt;
        implemented for H2O. I plan to submit a separate PR for rbind().&lt;/p&gt;

&lt;p&gt;    ok. contingent on this promise, +1 on merging.&lt;/p&gt;

&lt;p&gt;    given magnitude of this review, i suggest 2 more votes/reviewers. Additional non-binding reviews/sign-offs from 0xdata members are also IMO desirable.&lt;/p&gt;

&lt;p&gt;    And IMO we need to resolve whatever concerns Pat may have with this PR. &lt;/p&gt;</comment>
                            <comment id="14069540" author="githubbot" created="Tue, 22 Jul 2014 00:55:22 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49681859&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49681859&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    On Mon, Jul 21, 2014 at 4:49 PM, Dmitriy Lyubimov &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
    wrote:&lt;/p&gt;

&lt;p&gt;    &amp;gt; rbind() is not yet added, I wasn&apos;t even sure if the DRM api would be accepted before I&lt;br/&gt;
    &amp;gt; implemented for H2O. I plan to submit a separate PR for rbind().&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; ok. contingent on this promise, +1 on merging.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; given magnitude of this review, i suggest 2 more votes/reviewers.&lt;br/&gt;
    &amp;gt; Additional non-binding reviews/sign-offs from 0xdata members are also IMO&lt;br/&gt;
    &amp;gt; desirable.&lt;br/&gt;
    &amp;gt;&lt;/p&gt;

&lt;p&gt;    I will ping 0xdata members.&lt;/p&gt;

&lt;p&gt;    And IMO we need to resolve whatever concerns Pat may have with this PR.&lt;br/&gt;
    &amp;gt;&lt;/p&gt;

&lt;p&gt;    I assumed the concerns were resolved on the dev@ email list (ref: &quot;Call for&lt;br/&gt;
    vote on integrating h2o&quot;)&lt;/p&gt;</comment>
                            <comment id="14069550" author="githubbot" created="Tue, 22 Jul 2014 00:58:57 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49682101&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49682101&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    I would like @pferrel to sign off here &lt;/p&gt;</comment>
                            <comment id="14069590" author="githubbot" created="Tue, 22 Jul 2014 01:31:33 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49684400&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49684400&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Call me the loyal opposition. I&apos;d rather merge math with h2o than h2o with Mahout but will bow to the majority and I count the vote at 2 to one (me).&lt;/p&gt;</comment>
                            <comment id="14069611" author="githubbot" created="Tue, 22 Jul 2014 01:44:21 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49685224&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49685224&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    On Mon, Jul 21, 2014 at 5:31 PM, Pat Ferrel &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
    wrote:&lt;/p&gt;

&lt;p&gt;    &amp;gt; Call me the loyal opposition. I&apos;d rather merge math with h2o than h2o with&lt;br/&gt;
    &amp;gt; Mahout but will bow to the majority and I count the vote at 2 to one (me).&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    is it +0? &lt;a href=&quot;http://www.apache.org/foundation/voting.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/foundation/voting.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    There is a subtle danger that introducing new DRMLike operations will then&lt;br/&gt;
    require H20 symmetric implementation. So if there&apos;s a lot still expected,&lt;br/&gt;
    i&apos;d say -0 is validated. It is important that &lt;em&gt;you&lt;/em&gt; tell us that, because&lt;br/&gt;
    as it stands you are the only one working on a method at the moment. (well&lt;br/&gt;
    i do some internally as well, but my additions are strictly minor, i don&apos;t&lt;br/&gt;
    need anything earth shattering).&lt;/p&gt;



&lt;p&gt;    &amp;gt; &#8212;&lt;br/&gt;
    &amp;gt; Reply to this email directly or view it on GitHub&lt;br/&gt;
    &amp;gt; &amp;lt;&lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49684400&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49684400&lt;/a&gt;&amp;gt;.&lt;br/&gt;
    &amp;gt;&lt;/p&gt;</comment>
                            <comment id="14069624" author="githubbot" created="Tue, 22 Jul 2014 01:54:35 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49685806&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49685806&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    FYI, I am volunteering to keep h2obindings up to date as new DRM api are&lt;br/&gt;
    added. I Dont think any R like or MATLAB like operators are fundamentally&lt;br/&gt;
    impossible on h2o back end.&lt;/p&gt;</comment>
                            <comment id="14070250" author="githubbot" created="Tue, 22 Jul 2014 14:32:56 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49738832&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49738832&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    If you are asking me if there is likelihood of significant additions to the DSL or core operations that will require &quot;symmetric&quot; implementations in two engines, the answer is yes. Look at Ted&apos;s wishlist. To get cooccurrence data prep working has brought up two issues and this is one of the simplest algos.&lt;/p&gt;</comment>
                            <comment id="14070426" author="githubbot" created="Tue, 22 Jul 2014 17:04:20 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49760146&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49760146&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    We already discussed this till exhaustion on the mailing list about this&lt;br/&gt;
    model, advantages and how it has been working successfully in other&lt;br/&gt;
    projects. We even agreed if new api is added, then just add an empty stub&lt;br/&gt;
    in h2o bindings which throws unimpl. I am also volunteering to keep the&lt;br/&gt;
    bindings up to date.&lt;/p&gt;

&lt;p&gt;    If you still do not feel like working together again, I shall rest my case&lt;br/&gt;
    at this.&lt;/p&gt;</comment>
                            <comment id="14070783" author="githubbot" created="Tue, 22 Jul 2014 20:51:41 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49791289&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49791289&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Don&apos;t overreact here. Dmitriy asked a question so I answered it. I have no intention of further debate on this. I wouldn&apos;t block this if I could. It would take a lot more committers making a fuss to do that and I don&apos;t see it. I&apos;ll be happy to live with the majority view and try to constructively keep the project on track.&lt;/p&gt;</comment>
                            <comment id="14070931" author="githubbot" created="Tue, 22 Jul 2014 22:27:09 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49803586&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49803586&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @avati Anand, i would like to try and squeeze #33 ahead of this. &lt;/p&gt;

&lt;p&gt;    #33 changes DrmLike by adding a new lazy evaluation to plans (canHaveMissingRows) to track potentially missing row condition thruout DAGs if it ever was (lazily) detected in the original sources.&lt;/p&gt;

&lt;p&gt;    it also fixes A+1 case on spark side. Spark side is fairly agnostic of other engines, it really up to them if they would allow missing implied rows or not. Spark engine chooses to allow that and perform lazy evaluation whenever required.&lt;/p&gt;</comment>
                            <comment id="14071091" author="githubbot" created="Wed, 23 Jul 2014 00:07:54 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49813616&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49813616&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Hi @avati, is there something Java 1.7 specific in the dependencies here? I&apos;m getting a test failure in the h2o module:&lt;/p&gt;

&lt;p&gt;    Discovery starting.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;RUN ABORTED ***&lt;br/&gt;
      java.lang.UnsupportedClassVersionError: water/MRTask : Unsupported major.minor version 51.0&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="14071096" author="githubbot" created="Wed, 23 Jul 2014 00:09:40 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49813755&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49813755&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    some of the byte code classes are of higher version than the JRE you are&lt;br/&gt;
    running on. I suppose, yes, there are some 1.7 specific dependency jars&lt;br/&gt;
    there&lt;/p&gt;


&lt;p&gt;    On Tue, Jul 22, 2014 at 4:07 PM, Andrew Palumbo &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
    wrote:&lt;/p&gt;

&lt;p&gt;    &amp;gt; Hi @avati &amp;lt;&lt;a href=&quot;https://github.com/avati&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati&lt;/a&gt;&amp;gt;, is there something Java 1.7&lt;br/&gt;
    &amp;gt; specific in the dependencies here? I&apos;m getting a test failure in the h2o&lt;br/&gt;
    &amp;gt; module:&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; Discovery starting.&lt;br/&gt;
    &amp;gt; *** RUN ABORTED ***&lt;br/&gt;
    &amp;gt; java.lang.UnsupportedClassVersionError: water/MRTask : Unsupported&lt;br/&gt;
    &amp;gt; major.minor version 51.0&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; &#8212;&lt;br/&gt;
    &amp;gt; Reply to this email directly or view it on GitHub&lt;br/&gt;
    &amp;gt; &amp;lt;&lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49813616&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49813616&lt;/a&gt;&amp;gt;.&lt;br/&gt;
    &amp;gt;&lt;/p&gt;</comment>
                            <comment id="14071101" author="githubbot" created="Wed, 23 Jul 2014 00:12:35 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49813969&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49813969&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Andrew - I think have been testing on Java 1.7 (can&apos;t say for sure until i&lt;br/&gt;
    get to my workstation).&lt;/p&gt;


&lt;p&gt;    On Tue, Jul 22, 2014 at 4:07 PM, Andrew Palumbo &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
    wrote:&lt;/p&gt;

&lt;p&gt;    &amp;gt; Hi @avati &amp;lt;&lt;a href=&quot;https://github.com/avati&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati&lt;/a&gt;&amp;gt;, is there something Java 1.7&lt;br/&gt;
    &amp;gt; specific in the dependencies here? I&apos;m getting a test failure in the h2o&lt;br/&gt;
    &amp;gt; module:&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; Discovery starting.&lt;br/&gt;
    &amp;gt; *** RUN ABORTED ***&lt;br/&gt;
    &amp;gt; java.lang.UnsupportedClassVersionError: water/MRTask : Unsupported&lt;br/&gt;
    &amp;gt; major.minor version 51.0&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; &#8212;&lt;br/&gt;
    &amp;gt; Reply to this email directly or view it on GitHub&lt;br/&gt;
    &amp;gt; &amp;lt;&lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49813616&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49813616&lt;/a&gt;&amp;gt;.&lt;br/&gt;
    &amp;gt;&lt;/p&gt;</comment>
                            <comment id="14071124" author="githubbot" created="Wed, 23 Jul 2014 00:40:36 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49816008&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49816008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @andrewpalumbo  - yes, please use 1.7 JRE. Please let me know how your testing goes.&lt;/p&gt;</comment>
                            <comment id="14071154" author="githubbot" created="Wed, 23 Jul 2014 01:09:36 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49817944&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49817944&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Willdo.  I&apos;ve been running 1.6 on this machine because I think that&apos;s what we&apos;re officially stuck at. &lt;/p&gt;</comment>
                            <comment id="14071882" author="githubbot" created="Wed, 23 Jul 2014 16:57:30 +0100"  >&lt;p&gt;Github user cliffclick commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49894450&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49894450&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    This is a very basic port, focused on correctness &amp;amp; completeness, with no effort for performance.&lt;br/&gt;
    Expectation Setting: There&apos;s easy 2x to 10x speedups in most of the operator inner loops.  The HDFS sequence-file reader/writers are single-threaded-single-node; H2O&apos;s internal CSV reader will be easily 100x faster.&lt;br/&gt;
    Performance work should be in later commits.&lt;/p&gt;

&lt;p&gt;    Minor comments:&lt;br/&gt;
    Lots of places, esp reduce() calls, could/should call ArrayUtils.add(this,that) instead of a loop over the arrays being added.&lt;/p&gt;

&lt;p&gt;    H2OHelper.empty_frame looks a ton like it should call &quot;Vec.makeZero()&quot; in a loop instead of hand rolling Vecs of zeros; there&apos;s a version which will take a hand-rolled layout.  This call probably should move into Frame class directly.&lt;/p&gt;

&lt;p&gt;    The technique for row-labeling seems... awkward at best.  Or at least I&apos;m reading that to be the purpose of using Tuple2.  I think this design needs more exploring - e.g. insert a row-column in front of the &quot;normal&quot; Frame columns, and teach the follow-on code to skip 1st column.  Note that many datasets have non-numeric cols (e.g. name, address) that cannot participate in math ops, and so most H2O algos already carry forward a notion of a set of columns being worked on.&lt;/p&gt;

&lt;p&gt;    Cliff&lt;/p&gt;
</comment>
                            <comment id="14071920" author="githubbot" created="Wed, 23 Jul 2014 17:33:41 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49899401&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49899401&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Thanks for the comments @cliffclick . I&apos;ll work on ArrayUtils and Vec.makeZero() usage.&lt;/p&gt;

&lt;p&gt;    Regarding row labeling, I wanted to keep the operator inner-loop free of if() and else to skip first row optionally (i.e keep the inner loop focussed on just the math.) However, now that I think, it should be possible to filter out the label vec optionally even before entering MRTask, and have both the matrix and row labels within the same Frame.&lt;/p&gt;

&lt;p&gt;    I&apos;ll work on these comments and re-post. Thanks!&lt;/p&gt;
</comment>
                            <comment id="14072492" author="githubbot" created="Wed, 23 Jul 2014 23:47:32 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49946698&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49946698&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @cliffclick I have updated with review comments. Note that even though I did away with Tuple2, I am using a new H2ODrm in place. Having the optional row in the same Frame made things very confusing for a reviewer to instantly identify if a given Frame was with row labels or without. H2ODrm has potential future uses (extra members) as well.&lt;/p&gt;

&lt;p&gt;    I have also made the drmfromHdfs() api fall back to H2O parser (csv etc) if a given file is not a sequence file format. So this opens up the possibility to tweak the job pipeline to use csv files instead of seqfiles and gain in performance and compression.&lt;/p&gt;</comment>
                            <comment id="14072526" author="githubbot" created="Thu, 24 Jul 2014 00:13:40 +0100"  >&lt;p&gt;Github user cliffclick commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-49948794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-49948794&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Looks good to me.&lt;/p&gt;
</comment>
                            <comment id="14076365" author="githubbot" created="Mon, 28 Jul 2014 17:43:05 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50363968&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50363968&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Ping. Requesting some review/merge attention from the committers.&lt;/p&gt;</comment>
                            <comment id="14078279" author="githubbot" created="Tue, 29 Jul 2014 21:08:33 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50531008&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50531008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Implemented canHaveMissingRows(). All tests are passing. Please let me know if anything else required for merge.&lt;/p&gt;</comment>
                            <comment id="14078595" author="githubbot" created="Wed, 30 Jul 2014 00:24:28 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50553289&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50553289&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @dlyubimov Thanks for merging #30. I have now added Rbind operator and refreshed the PR. All tests are passing. Let me know if this is sufficient for merge.&lt;/p&gt;</comment>
                            <comment id="14078616" author="githubbot" created="Wed, 30 Jul 2014 00:38:41 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50554340&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50554340&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    As i indicated, i am waiting on 2 more votes.  We had what i have no choice&lt;br/&gt;
    but interpret as +0 from Pat, and +1 from me.&lt;/p&gt;


&lt;p&gt;    On Tue, Jul 29, 2014 at 4:24 PM, Anand Avati &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
    wrote:&lt;/p&gt;

&lt;p&gt;    &amp;gt; @dlyubimov &amp;lt;&lt;a href=&quot;https://github.com/dlyubimov&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/dlyubimov&lt;/a&gt;&amp;gt; Thanks for merging #30&lt;br/&gt;
    &amp;gt; &amp;lt;&lt;a href=&quot;https://github.com/apache/mahout/pull/30&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/30&lt;/a&gt;&amp;gt;. I have now added Rbind&lt;br/&gt;
    &amp;gt; operator and refreshed the PR. All tests are passing. Let me know if this&lt;br/&gt;
    &amp;gt; is sufficient for merge.&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; &#8212;&lt;br/&gt;
    &amp;gt; Reply to this email directly or view it on GitHub&lt;br/&gt;
    &amp;gt; &amp;lt;&lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50553289&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50553289&lt;/a&gt;&amp;gt;.&lt;br/&gt;
    &amp;gt;&lt;/p&gt;</comment>
                            <comment id="14078867" author="githubbot" created="Wed, 30 Jul 2014 05:23:45 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50572257&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50572257&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    All tests are passing for me now running Java 1.7&lt;/p&gt;</comment>
                            <comment id="14079333" author="githubbot" created="Wed, 30 Jul 2014 15:53:52 +0100"  >&lt;p&gt;Github user gcapan commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50625655&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50625655&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Tests pass for me for various profiles, and the code looks good. I am a supporter of engine-agnostic architecture and separation of actual algorithms from backends, and multiple backends (in addition both Spark and H2O being very promising platforms) would force us implement generic solutions for data preprocessing, vectorization, machine learning and big data mining. In summary, my vote is +1 for that contribution. &lt;/p&gt;

&lt;p&gt;    PS: Not H2O specific, but wanted to add here: I believe the next step should be standardizing minimal Matrix I/O capability (i.e. a couple file formats other than &lt;span class=&quot;error&quot;&gt;&amp;#91;row_id, VectorWritable&amp;#93;&lt;/span&gt; SequenceFiles) required for a distributed computation engine, and adding data frame like structures those allow text columns.  &lt;/p&gt;</comment>
                            <comment id="14079641" author="githubbot" created="Wed, 30 Jul 2014 18:56:10 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50654169&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50654169&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    (1) No review from most vocal backers? &lt;/p&gt;

&lt;p&gt;    (2) m-1500 is unassigned. Whoever wishes to commit this issue, please take over m-1500 and continue. &lt;/p&gt;</comment>
                            <comment id="14079796" author="githubbot" created="Wed, 30 Jul 2014 20:12:26 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50664882&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50664882&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    So to be clear, this will require 1.7 on all machines from now on? Not just build and running h2o?&lt;/p&gt;</comment>
                            <comment id="14079807" author="githubbot" created="Wed, 30 Jul 2014 20:18:32 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50665695&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50665695&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;gt; So to be clear, this will require 1.7 on all machines from now on? Not&lt;br/&gt;
    &amp;gt; just build and running h2o?&lt;br/&gt;
    &amp;gt;&lt;/p&gt;

&lt;p&gt;    It requires 1.7 only if you are running h2o (because h2o-core artifact is a&lt;br/&gt;
    1.7 binary). You can build in 1.6 with/without h2obindings.&lt;/p&gt;</comment>
                            <comment id="14079834" author="githubbot" created="Wed, 30 Jul 2014 20:39:59 +0100"  >&lt;p&gt;Github user pferrel commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50668509&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50668509&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    cool, BTW I read Ted and Suneel as +1 in the email thread&lt;/p&gt;</comment>
                            <comment id="14080504" author="tdunning" created="Thu, 31 Jul 2014 06:12:39 +0100"  >
&lt;p&gt;I am out of town but will get on this when I get back. Connectivity is too bad here to use seriously. &lt;/p&gt;

&lt;p&gt;Sent from my iPhone&lt;/p&gt;
</comment>
                            <comment id="14080505" author="tdunning" created="Thu, 31 Jul 2014 06:14:39 +0100"  >
&lt;p&gt;I plan to vote +1 unless is see something horrible.  I can&apos;t believe I will. &lt;/p&gt;

&lt;p&gt;I don&apos;t understand why we need three votes here in any case. &lt;/p&gt;

&lt;p&gt;Sent from my iPhone&lt;/p&gt;
</comment>
                            <comment id="14081055" author="pferrel" created="Thu, 31 Jul 2014 17:17:52 +0100"  >&lt;p&gt;Even without a vote someone needs to self-assign this issue, merge, and close it. Dmitriy has said he won&apos;t. &lt;/p&gt;</comment>
                            <comment id="14081093" author="dlyubimov" created="Thu, 31 Jul 2014 17:43:19 +0100"  >&lt;p&gt;The reason additional review on github is needed is because i only spent ~5 minutes eyeballing less than 10% of the code which spawned 5 or so notes and subsequent fixes. In that sense, help is needed. Surely, benefits of cross peer code review should really require no specific justification. This is code review on github (which is our reviewboard replacement) &amp;#8211; you just need to look at the code, poke it if possible, leave suggestions, or just say &quot;ship it&quot;. I know, reviewboard was pain to use, but github PRs are so easy, so there&apos;s practically no pretext left not to do it as much as possible.&lt;/p&gt;

&lt;p&gt;Which begs the question. All these people who apparently said &quot;ship it&quot; on github, excluding 0xdata review,  produced exactly 0 code notes. Either  review were even more superficial than mine, or it is the most impeccable code patch in the history of the project. &lt;/p&gt;</comment>
                            <comment id="14081103" author="githubbot" created="Thu, 31 Jul 2014 17:53:00 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15654236&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15654236&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/ABt.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,63 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.H2OHelper;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +&lt;br/&gt;
    +public class ABt {&lt;br/&gt;
    +  /* Calculate AB&apos; */&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Well one fundamental thing that i surely missed is that this module&apos;s physical operators are written in java wheres all tests and apis are in scala. So the maven module is fragmented between java and scala code. Something i was intentionally tried to avoid (either module is 100% java, or 100% scala).&lt;/p&gt;

&lt;p&gt;    I suppose it is not going to stop it from committing now, but it just shows how superficial my initial review was.&lt;/p&gt;</comment>
                            <comment id="14081111" author="githubbot" created="Thu, 31 Jul 2014 17:57:45 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15654554&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15654554&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtB.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,66 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.H2OHelper;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +&lt;br/&gt;
    +public class AtB {&lt;br/&gt;
    +  /* Calculate A&apos;B */&lt;br/&gt;
    +  public static H2ODrm AtB(H2ODrm DrmA, H2ODrm DrmB) {&lt;br/&gt;
    +    final Frame A = DrmA.frame;&lt;br/&gt;
    +    final Frame B = DrmB.frame;&lt;br/&gt;
    +&lt;br/&gt;
    +    /* First create an empty frame of the required dimensions */&lt;br/&gt;
    +    Frame AtB = H2OHelper.empty_frame(A.numCols(), B.numCols(), -1, -1);&lt;br/&gt;
    +&lt;br/&gt;
    +    /* Execute MRTask on the new Frame, and fill each cell (initially 0) by&lt;br/&gt;
    +       computing appropriate values from A and B.&lt;br/&gt;
    +&lt;br/&gt;
    +       chks.length == B.numCols()&lt;br/&gt;
    +    */&lt;br/&gt;
    +    new MRTask() {&lt;br/&gt;
    +      public void map(Chunk chks[]) {&lt;br/&gt;
    +        int chunk_size = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.len();&lt;br/&gt;
    +        long start = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.start();&lt;br/&gt;
    +        long A_rows = A.numRows();&lt;br/&gt;
    +        Vec A_vecs[] = A.vecs();&lt;br/&gt;
    +        Vec B_vecs[] = B.vecs();&lt;br/&gt;
    +&lt;br/&gt;
    +        for (int c = 0; c &amp;lt; chks.length; c++) {&lt;br/&gt;
    +          for (int r = 0; r &amp;lt; chunk_size; r++) {&lt;br/&gt;
    +            double v = 0;&lt;br/&gt;
    +            for (long i = 0; i &amp;lt; A_rows; i++) {&lt;br/&gt;
    +              v += (A_vecs&lt;span class=&quot;error&quot;&gt;&amp;#91;(int)(start+r)&amp;#93;&lt;/span&gt;.at&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; * B_vecs&lt;span class=&quot;error&quot;&gt;&amp;#91;c&amp;#93;&lt;/span&gt;.at&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;);&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Here and elsewhere. Operator spacing style. please use autoformatting features in idea.&lt;/p&gt;</comment>
                            <comment id="14081112" author="githubbot" created="Thu, 31 Jul 2014 17:58:48 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15654625&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15654625&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/Atx.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,76 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.math.Vector;&lt;br/&gt;
    +import org.apache.mahout.math.DenseVector;&lt;br/&gt;
    +import org.apache.mahout.math.Matrix;&lt;br/&gt;
    +import org.apache.mahout.math.DenseMatrix;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.H2OHelper;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2OBCast;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +import water.util.ArrayUtils;&lt;br/&gt;
    +&lt;br/&gt;
    +public class Atx {&lt;br/&gt;
    +  /* Calculate A&apos;x (where x is an in-core Vector) */&lt;br/&gt;
    +  public static H2ODrm Atx(H2ODrm DrmA, Vector x) {&lt;br/&gt;
    +    Frame A = DrmA.frame;&lt;br/&gt;
    +    final H2OBCast&amp;lt;Vector&amp;gt; bx = new H2OBCast&amp;lt;Vector&amp;gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;;&lt;br/&gt;
    +&lt;br/&gt;
    +    /* A&apos;x is computed into _atx[] with an MRTask on A (with&lt;br/&gt;
    +       x available as a Broadcast&lt;br/&gt;
    +&lt;br/&gt;
    +       x.size() == A.numRows()&lt;br/&gt;
    +       _atx.length == chks.length == A.numCols()&lt;br/&gt;
    +    */&lt;br/&gt;
    +    class MRTaskAtx extends MRTask&amp;lt;MRTaskAtx&amp;gt; {&lt;br/&gt;
    +      double _atx[];&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Mahout doesn&apos;t use underline prefixes for class attributes. We follow standard Sun style conventions as far as java code is concerned.&lt;/p&gt;</comment>
                            <comment id="14081114" author="githubbot" created="Thu, 31 Jul 2014 18:00:05 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15654715&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15654715&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/RowRange.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,83 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import scala.collection.immutable.Range;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +import water.parser.ValueString;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +public class RowRange {&lt;br/&gt;
    +  /* Filter operation */&lt;br/&gt;
    +  public static H2ODrm RowRange(H2ODrm DrmA, final Range R) {&lt;br/&gt;
    +    Frame A = DrmA.frame;&lt;br/&gt;
    +    Vec keys = DrmA.keys;&lt;br/&gt;
    +&lt;br/&gt;
    +    /* Run a filtering MRTask on A. If row number falls within R.start() and&lt;br/&gt;
    +       R.end(), then the row makes it into the output&lt;br/&gt;
    +    */&lt;br/&gt;
    +    Frame Arr = new MRTask() {&lt;br/&gt;
    +        public void map(Chunk chks[], NewChunk ncs[]) {&lt;br/&gt;
    +          int chunk_size = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.len();&lt;br/&gt;
    +          long chunk_start = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.start();&lt;br/&gt;
    +&lt;br/&gt;
    +          /* First check if the entire chunk even overlaps with R */&lt;br/&gt;
    +          if (chunk_start &amp;gt; R.end() || (chunk_start + chunk_size) &amp;lt; R.start())&lt;br/&gt;
    +            return;&lt;br/&gt;
    +&lt;br/&gt;
    +          /* This chunk overlaps, filter out just the overlapping rows */&lt;br/&gt;
    +          for (int r = 0; r &amp;lt; chunk_size; r++) {&lt;br/&gt;
    +            if (!R.contains (chunk_start + r))&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    spacing&lt;/p&gt;</comment>
                            <comment id="14081120" author="githubbot" created="Thu, 31 Jul 2014 18:04:38 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15654963&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15654963&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/test/scala/org/apache/mahout/math/decompositions/DistributedDecompositionsSuite.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,34 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.math.decompositions&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.math._&lt;br/&gt;
    +import drm._&lt;br/&gt;
    +import scalabindings._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import RLikeDrmOps._&lt;br/&gt;
    +import org.apache.mahout.h2obindings._&lt;br/&gt;
    +import org.apache.mahout.common.RandomUtils&lt;br/&gt;
    +import scala.math._&lt;br/&gt;
    +import org.scalatest.&lt;/p&gt;
{Matchers, FunSuite}
&lt;p&gt;    +import org.apache.mahout.h2obindings.test.DistributedH2OSuite&lt;br/&gt;
    +&lt;br/&gt;
    +class DistributedDecompositionsSuite extends FunSuite with DistributedH2OSuite with DistributedDecompositionsSuiteBase {&lt;br/&gt;
    +&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    empty body should not be specified with {}&lt;/p&gt;</comment>
                            <comment id="14081123" author="githubbot" created="Thu, 31 Jul 2014 18:05:43 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15655025&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15655025&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/test/scala/org/apache/mahout/h2obindings/ops/AtASuite.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,50 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops&lt;br/&gt;
    +&lt;br/&gt;
    +import org.scalatest.FunSuite&lt;br/&gt;
    +import org.apache.mahout.h2obindings.test.DistributedH2OSuite&lt;br/&gt;
    +import org.apache.mahout.math.scalabindings._&lt;br/&gt;
    +import org.apache.mahout.math.drm._&lt;br/&gt;
    +import org.apache.mahout.h2obindings._&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import RLikeDrmOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Tests for &lt;/p&gt;
{@link XtX}
&lt;p&gt; */&lt;br/&gt;
    +class AtASuite extends FunSuite with DistributedH2OSuite {&lt;br/&gt;
    +&lt;br/&gt;
    +  test(&quot;AtA slim&quot;) &lt;/p&gt;
{
    +
    +    val inCoreA = dense((1, 2), (2, 3))
    +    val drmA = drmParallelize(inCoreA)
    +
    +    val M = drmA.t %*% drmA
    +    val inCoreAtA = M.collect
    +    println(inCoreAtA)
    +
    +    val expectedAtA = inCoreA.t %*% inCoreA
    +    println(expectedAtA)
    +
    +    assert(expectedAtA === inCoreAtA)
    +
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    remove extra line&lt;/p&gt;</comment>
                            <comment id="14081125" author="githubbot" created="Thu, 31 Jul 2014 18:06:06 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15655056&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15655056&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/test/scala/org/apache/mahout/h2obindings/ops/AtSuite.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,46 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + * Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + * contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + * this work for additional information regarding copyright ownership.&lt;br/&gt;
    + * The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + * (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + * the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + * Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + * See the License for the specific language governing permissions and&lt;br/&gt;
    + * limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops&lt;br/&gt;
    +&lt;br/&gt;
    +import org.scalatest.FunSuite&lt;br/&gt;
    +import org.apache.mahout.h2obindings.test.DistributedH2OSuite&lt;br/&gt;
    +import org.apache.mahout.math.scalabindings._&lt;br/&gt;
    +import org.apache.mahout.math.drm._&lt;br/&gt;
    +import org.apache.mahout.h2obindings._&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm._&lt;br/&gt;
    +import RLikeOps._&lt;br/&gt;
    +import RLikeDrmOps._&lt;br/&gt;
    +import org.apache.mahout.math.drm._&lt;br/&gt;
    +&lt;br/&gt;
    +/** Tests for A&apos; algorithms */&lt;br/&gt;
    +class AtSuite extends FunSuite with DistributedH2OSuite {&lt;br/&gt;
    +&lt;br/&gt;
    +  test(&quot;At&quot;) {&lt;br/&gt;
    +    val inCoreA = dense((1, 2, 3), (2, 3, 4), (3, 4, 5))&lt;br/&gt;
    +    val A = drmParallelize(m = inCoreA, numPartitions = 2)&lt;br/&gt;
    +&lt;br/&gt;
    +    val AtDrm = A.t&lt;br/&gt;
    +    val inCoreAt = AtDrm.collect&lt;br/&gt;
    +    val inCoreControlAt = inCoreA.t&lt;br/&gt;
    +&lt;br/&gt;
    +    println(inCoreAt)&lt;br/&gt;
    +    assert((inCoreAt - inCoreControlAt).norm &amp;lt; 1E-5)&lt;br/&gt;
    +&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    remove extra line please (probably in prototype of this test, too)&lt;/p&gt;</comment>
                            <comment id="14081128" author="githubbot" created="Thu, 31 Jul 2014 18:07:57 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15655171&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15655171&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: pom.xml &amp;#8212;&lt;br/&gt;
    @@ -110,6 +110,7 @@&lt;br/&gt;
         &amp;lt;scala.major&amp;gt;2.10&amp;lt;/scala.major&amp;gt;&lt;br/&gt;
         &amp;lt;scala.version&amp;gt;2.10.3&amp;lt;/scala.version&amp;gt;&lt;br/&gt;
         &amp;lt;spark.version&amp;gt;0.9.1&amp;lt;/spark.version&amp;gt;&lt;br/&gt;
    +    &amp;lt;h2o.version&amp;gt;0.1.1-SNAPSHOT&amp;lt;/h2o.version&amp;gt;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    This -SNAPSHOT dependency should be fixed ASAP. &lt;/p&gt;

&lt;p&gt;    First, we cannot even release with snapshot dependencies. Second, the artifact commit level is undefined with snapshots, may cause problems for people trying to compile later and having different commit levels of this artifact in the cache. &lt;/p&gt;</comment>
                            <comment id="14081171" author="githubbot" created="Thu, 31 Jul 2014 18:38:25 +0100"  >&lt;p&gt;Github user dlyubimov commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r15657066&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r15657066&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewScalar.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,68 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.H2OHelper;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +&lt;br/&gt;
    +public class AewScalar {&lt;br/&gt;
    +  /* Element-wise DRM-DRM operations */&lt;br/&gt;
    +  public static H2ODrm AewScalar(H2ODrm DrmA, final double s, final String op) {&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    here and elsewhere: camel case for variables is standard in Sun  style conventions, i.e. `drmA`, not `DrmA`&lt;/p&gt;</comment>
                            <comment id="14081200" author="githubbot" created="Thu, 31 Jul 2014 19:04:08 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50795818&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50795818&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Is there a code style doc used by mahout? I dont use idea (just emacs)&lt;/p&gt;</comment>
                            <comment id="14081226" author="githubbot" created="Thu, 31 Jul 2014 19:20:18 +0100"  >&lt;p&gt;Github user dlyubimov commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50797941&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50797941&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    there used to be a guide on old website... but i guess it got axed. it&lt;br/&gt;
    basically said it is Sun style + 120 character line width constraint. I&lt;br/&gt;
    think there also were templates for Eclipse somewhere.&lt;/p&gt;

&lt;p&gt;    There&apos;s also checkstyle maven plugin tuned up to report those (i remember&lt;br/&gt;
    people were making me to run it and make sure every one of those went away)&lt;br/&gt;
    but my take the checkstyle currently is tuned very aggressively. My minimum&lt;br/&gt;
    hygiene thing is line width, indentations, naming convention and operator&lt;br/&gt;
    spacing (out of which, IDE can take care of everything). With Sean&apos;s&lt;br/&gt;
    departure, out standards on style are nowhere where they used to be.&lt;/p&gt;

&lt;p&gt;    in scala, style is still evolving, but I pushed a few things in particular.&lt;br/&gt;
    Baseline is to follow the Spark code style (and btw they are very strict&lt;br/&gt;
    about it; e..g they insist that i write comments which are starting with&lt;br/&gt;
    capital letter and aligned at 100th character on the right, which IDE&lt;br/&gt;
    cannot do automatically). We also were discussing closure styles elsewhere.&lt;/p&gt;


&lt;p&gt;    On Thu, Jul 31, 2014 at 11:04 AM, Anand Avati &amp;lt;notifications@github.com&amp;gt;&lt;br/&gt;
    wrote:&lt;/p&gt;

&lt;p&gt;    &amp;gt; Is there a code style doc used by mahout? I dont use idea (just emacs)&lt;br/&gt;
    &amp;gt;&lt;br/&gt;
    &amp;gt; &#8212;&lt;br/&gt;
    &amp;gt; Reply to this email directly or view it on GitHub&lt;br/&gt;
    &amp;gt; &amp;lt;&lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50795818&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50795818&lt;/a&gt;&amp;gt;.&lt;br/&gt;
    &amp;gt;&lt;/p&gt;</comment>
                            <comment id="14081255" author="githubbot" created="Thu, 31 Jul 2014 19:40:50 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50800742&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50800742&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Where can I find the Sun coding style? Is it this - &lt;a href=&quot;http://www.oracle.com/technetwork/java/codeconventions-150003.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.oracle.com/technetwork/java/codeconventions-150003.pdf&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="14081270" author="githubbot" created="Thu, 31 Jul 2014 19:54:39 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50802726&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50802726&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    There&apos;s a link to sun coding conventions on the how to contribute page:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;http://mahout.apache.org/developers/how-to-contribute.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mahout.apache.org/developers/how-to-contribute.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    From the &quot;conventions&quot; link under &quot;making changes&quot; #4.&lt;/p&gt;


&lt;p&gt;    Sent from my Verizon Wireless 4G LTE smartphone&lt;/p&gt;

&lt;p&gt;    &amp;lt;div&amp;gt;-------- Original message --------&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;From: Anand Avati &amp;lt;notifications@github.com&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;Date:07/31/2014  2:40 PM  (GMT-05:00) &amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;To: apache/mahout &amp;lt;mahout@noreply.github.com&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;Cc: Andrew Palumbo &amp;lt;ap.dev@outlook.com&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;Subject: Re: &lt;span class=&quot;error&quot;&gt;&amp;#91;mahout&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt; H20  (#21) &amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&lt;br/&gt;
    &amp;lt;/div&amp;gt;Where can I find the Sun coding style? Is it this - &lt;a href=&quot;http://www.oracle.com/technetwork/java/codeconventions-150003.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.oracle.com/technetwork/java/codeconventions-150003.pdf&lt;/a&gt; ?&lt;/p&gt;

&lt;p&gt;    &#8212;&lt;br/&gt;
    Reply to this email directly or view it on GitHub.&lt;/p&gt;</comment>
                            <comment id="14081895" author="githubbot" created="Fri, 1 Aug 2014 05:30:37 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-50847925&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-50847925&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @dlyubimov the previous batch of commits address the review comments. Dependency on h2o-core SNAPSHOT is replaced with a published RELEASE, and all the code changes have been done.&lt;/p&gt;</comment>
                            <comment id="14093179" author="githubbot" created="Mon, 11 Aug 2014 20:15:51 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-51826713&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-51826713&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    ping.&lt;/p&gt;

&lt;p&gt;    Any progress?&lt;/p&gt;</comment>
                            <comment id="14093246" author="githubbot" created="Mon, 11 Aug 2014 21:24:11 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-51835301&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-51835301&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    resolved pom.xml merge conflict (spark/scala version update)&lt;/p&gt;</comment>
                            <comment id="14097921" author="githubbot" created="Fri, 15 Aug 2014 00:47:59 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274064&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274064&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/RowRange.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,83 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import scala.collection.immutable.Range;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +import water.parser.ValueString;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +public class RowRange {&lt;br/&gt;
    +  /* Filter operation */&lt;br/&gt;
    +  public static H2ODrm RowRange(H2ODrm drmA, final Range R) {&lt;br/&gt;
    +    Frame A = drmA.frame;&lt;br/&gt;
    +    Vec keys = drmA.keys;&lt;br/&gt;
    +&lt;br/&gt;
    +    /* Run a filtering MRTask on A. If row number falls within R.start() and&lt;br/&gt;
    +       R.end(), then the row makes it into the output&lt;br/&gt;
    +    */&lt;br/&gt;
    +    Frame Arr = new MRTask() {&lt;br/&gt;
    +        public void map(Chunk chks[], NewChunk ncs[]) {&lt;br/&gt;
    +          int chunk_size = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.len();&lt;br/&gt;
    +          long chunk_start = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.start();&lt;br/&gt;
    +&lt;br/&gt;
    +          /* First check if the entire chunk even overlaps with R */&lt;br/&gt;
    +          if (chunk_start &amp;gt; R.end() || (chunk_start + chunk_size) &amp;lt; R.start())&lt;br/&gt;
    +            return;&lt;br/&gt;
    +&lt;br/&gt;
    +          /* This chunk overlaps, filter out just the overlapping rows */&lt;br/&gt;
    +          for (int r = 0; r &amp;lt; chunk_size; r++) {&lt;br/&gt;
    +            if (!R.contains(chunk_start + r))&lt;br/&gt;
    +              continue;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    if statment needs braces&lt;/p&gt;</comment>
                            <comment id="14097922" author="githubbot" created="Fri, 15 Aug 2014 00:49:14 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274105&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274105&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/RowRange.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,83 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import scala.collection.immutable.Range;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +import water.parser.ValueString;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +public class RowRange {&lt;br/&gt;
    +  /* Filter operation */&lt;br/&gt;
    +  public static H2ODrm RowRange(H2ODrm drmA, final Range R) {&lt;br/&gt;
    +    Frame A = drmA.frame;&lt;br/&gt;
    +    Vec keys = drmA.keys;&lt;br/&gt;
    +&lt;br/&gt;
    +    /* Run a filtering MRTask on A. If row number falls within R.start() and&lt;br/&gt;
    +       R.end(), then the row makes it into the output&lt;br/&gt;
    +    */&lt;br/&gt;
    +    Frame Arr = new MRTask() {&lt;br/&gt;
    +        public void map(Chunk chks[], NewChunk ncs[]) {&lt;br/&gt;
    +          int chunk_size = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.len();&lt;br/&gt;
    +          long chunk_start = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.start();&lt;br/&gt;
    +&lt;br/&gt;
    +          /* First check if the entire chunk even overlaps with R */&lt;br/&gt;
    +          if (chunk_start &amp;gt; R.end() || (chunk_start + chunk_size) &amp;lt; R.start())&lt;br/&gt;
    +            return;&lt;br/&gt;
    +&lt;br/&gt;
    +          /* This chunk overlaps, filter out just the overlapping rows */&lt;br/&gt;
    +          for (int r = 0; r &amp;lt; chunk_size; r++) &lt;/p&gt;
{
    +            if (!R.contains(chunk_start + r))
    +              continue;
    +
    +            for (int c = 0; c &amp;lt; chks.length; c++)
    +              ncs[c].addNum(chks[c].at0(r));
    +          }
&lt;p&gt;    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    for loop needs braces&lt;/p&gt;</comment>
                            <comment id="14097923" author="githubbot" created="Fri, 15 Aug 2014 00:49:45 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274130&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274130&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/RowRange.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,83 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import scala.collection.immutable.Range;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +import water.parser.ValueString;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +public class RowRange {&lt;br/&gt;
    +  /* Filter operation */&lt;br/&gt;
    +  public static H2ODrm RowRange(H2ODrm drmA, final Range R) {&lt;br/&gt;
    +    Frame A = drmA.frame;&lt;br/&gt;
    +    Vec keys = drmA.keys;&lt;br/&gt;
    +&lt;br/&gt;
    +    /* Run a filtering MRTask on A. If row number falls within R.start() and&lt;br/&gt;
    +       R.end(), then the row makes it into the output&lt;br/&gt;
    +    */&lt;br/&gt;
    +    Frame Arr = new MRTask() {&lt;br/&gt;
    +        public void map(Chunk chks[], NewChunk ncs[]) {&lt;br/&gt;
    +          int chunk_size = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.len();&lt;br/&gt;
    +          long chunk_start = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.start();&lt;br/&gt;
    +&lt;br/&gt;
    +          /* First check if the entire chunk even overlaps with R */&lt;br/&gt;
    +          if (chunk_start &amp;gt; R.end() || (chunk_start + chunk_size) &amp;lt; R.start())&lt;br/&gt;
    +            return;&lt;br/&gt;
    +&lt;br/&gt;
    +          /* This chunk overlaps, filter out just the overlapping rows */&lt;br/&gt;
    +          for (int r = 0; r &amp;lt; chunk_size; r++) &lt;/p&gt;
{
    +            if (!R.contains(chunk_start + r))
    +              continue;
    +
    +            for (int c = 0; c &amp;lt; chks.length; c++)
    +              ncs[c].addNum(chks[c].at0(r));
    +          }
&lt;p&gt;    +        }&lt;br/&gt;
    +      }.doAll(A.numCols(), A).outputFrame(null, null);&lt;br/&gt;
    +&lt;br/&gt;
    +    Vec Vrr = (keys == null) ? null : new MRTask() {&lt;br/&gt;
    +        /* This is a String keyed DRM. Do the same thing as above,&lt;br/&gt;
    +           but this time just one column of Strings.&lt;br/&gt;
    +        */&lt;br/&gt;
    +        public void map(Chunk chk, NewChunk nc) {&lt;br/&gt;
    +          int chunk_size = chk.len();&lt;br/&gt;
    +          long chunk_start = chk.start();&lt;br/&gt;
    +          ValueString vstr = new ValueString();&lt;br/&gt;
    +&lt;br/&gt;
    +          if (chunk_start &amp;gt; R.end() || (chunk_start + chunk_size) &amp;lt; R.start())&lt;br/&gt;
    +            return;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    if statement needs braces&lt;/p&gt;</comment>
                            <comment id="14097926" author="githubbot" created="Fri, 15 Aug 2014 00:51:15 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274188&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274188&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/RowRange.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,83 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import scala.collection.immutable.Range;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +import water.parser.ValueString;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +public class RowRange {&lt;br/&gt;
    +  /* Filter operation */&lt;br/&gt;
    +  public static H2ODrm RowRange(H2ODrm drmA, final Range R) {&lt;br/&gt;
    +    Frame A = drmA.frame;&lt;br/&gt;
    +    Vec keys = drmA.keys;&lt;br/&gt;
    +&lt;br/&gt;
    +    /* Run a filtering MRTask on A. If row number falls within R.start() and&lt;br/&gt;
    +       R.end(), then the row makes it into the output&lt;br/&gt;
    +    */&lt;br/&gt;
    +    Frame Arr = new MRTask() {&lt;br/&gt;
    +        public void map(Chunk chks[], NewChunk ncs[]) {&lt;br/&gt;
    +          int chunk_size = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.len();&lt;br/&gt;
    +          long chunk_start = chks&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.start();&lt;br/&gt;
    +&lt;br/&gt;
    +          /* First check if the entire chunk even overlaps with R */&lt;br/&gt;
    +          if (chunk_start &amp;gt; R.end() || (chunk_start + chunk_size) &amp;lt; R.start())&lt;br/&gt;
    +            return;&lt;br/&gt;
    +&lt;br/&gt;
    +          /* This chunk overlaps, filter out just the overlapping rows */&lt;br/&gt;
    +          for (int r = 0; r &amp;lt; chunk_size; r++) &lt;/p&gt;
{
    +            if (!R.contains(chunk_start + r))
    +              continue;
    +
    +            for (int c = 0; c &amp;lt; chks.length; c++)
    +              ncs[c].addNum(chks[c].at0(r));
    +          }
&lt;p&gt;    +        }&lt;br/&gt;
    +      }.doAll(A.numCols(), A).outputFrame(null, null);&lt;br/&gt;
    +&lt;br/&gt;
    +    Vec Vrr = (keys == null) ? null : new MRTask() {&lt;br/&gt;
    +        /* This is a String keyed DRM. Do the same thing as above,&lt;br/&gt;
    +           but this time just one column of Strings.&lt;br/&gt;
    +        */&lt;br/&gt;
    +        public void map(Chunk chk, NewChunk nc) {&lt;br/&gt;
    +          int chunk_size = chk.len();&lt;br/&gt;
    +          long chunk_start = chk.start();&lt;br/&gt;
    +          ValueString vstr = new ValueString();&lt;br/&gt;
    +&lt;br/&gt;
    +          if (chunk_start &amp;gt; R.end() || (chunk_start + chunk_size) &amp;lt; R.start())&lt;br/&gt;
    +            return;&lt;br/&gt;
    +&lt;br/&gt;
    +          for (int r = 0; r &amp;lt; chunk_size; r++) {&lt;br/&gt;
    +            if (!R.contains(chunk_start + r))&lt;br/&gt;
    +              continue;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    if statement needs braces... a few more occurences i believe as well in other files &lt;/p&gt;</comment>
                            <comment id="14097929" author="githubbot" created="Fri, 15 Aug 2014 00:54:08 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274291&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274291&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/Cbind.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,94 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.H2OHelper;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +public class Cbind {&lt;br/&gt;
    +  /* R&apos;s cbind like operator, on drmA and drmB */&lt;br/&gt;
    +  public static H2ODrm Cbind(H2ODrm drmA, H2ODrm drmB) &lt;/p&gt;
{
    +    Frame fra = drmA.frame;
    +    Vec keysa = drmA.keys;
    +    Frame frb = drmB.frame;
    +    Vec keysb = drmB.keys;
    +
    +    /* If A and B are similarly partitioned, .. */
    +    if (fra.anyVec().group() == frb.anyVec().group())
    +      /* .. then, do a light weight zip() */
    +      return zip(fra, keysa, frb, keysb);
    +    else
    +      /* .. else, do a heavy weight join() which involves moving data over the wire */
    +      return join(fra, keysa, frb, keysb);
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  /* Light weight zip(), no data movement */&lt;br/&gt;
    +  private static H2ODrm zip(final Frame fra, final Vec keysa, final Frame frb, final Vec keysb) {&lt;br/&gt;
    +    /* Create a new Vec[] to hold the concatenated list of A and B&apos;s column vectors */&lt;br/&gt;
    +    Vec vecs[] = new Vec&lt;span class=&quot;error&quot;&gt;&amp;#91;fra.vecs().length + frb.vecs().length&amp;#93;&lt;/span&gt;;&lt;br/&gt;
    +    int d = 0;&lt;br/&gt;
    +    /* fill A&apos;s column vectors */&lt;br/&gt;
    +    for (Vec vfra : fra.vecs())&lt;br/&gt;
    +      vecs&lt;span class=&quot;error&quot;&gt;&amp;#91;d++&amp;#93;&lt;/span&gt; = vfra;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    for loop needs braces ... here and in a few other places&lt;/p&gt;</comment>
                            <comment id="14097930" author="githubbot" created="Fri, 15 Aug 2014 00:55:03 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274324&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274324&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/drm/H2OBCast.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,93 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.drm;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.math.drm.BCast;&lt;br/&gt;
    +import org.apache.mahout.math.Matrix;&lt;br/&gt;
    +import org.apache.mahout.math.Vector;&lt;br/&gt;
    +import org.apache.mahout.math.MatrixWritable;&lt;br/&gt;
    +import org.apache.mahout.math.VectorWritable;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.hadoop.io.Writable;&lt;br/&gt;
    +&lt;br/&gt;
    +import java.io.Serializable;&lt;br/&gt;
    +import java.io.ByteArrayOutputStream;&lt;br/&gt;
    +import java.io.ByteArrayInputStream;&lt;br/&gt;
    +import java.io.ObjectOutputStream;&lt;br/&gt;
    +import java.io.ObjectInputStream;&lt;br/&gt;
    +&lt;br/&gt;
    +/* Handle Matrix and Vector separately so that we can live with&lt;br/&gt;
    +   just importing MatrixWritable and VectorWritable.&lt;br/&gt;
    +*/&lt;br/&gt;
    +&lt;br/&gt;
    +public class H2OBCast&amp;lt;T&amp;gt; implements BCast&amp;lt;T&amp;gt;, Serializable {&lt;br/&gt;
    +  transient T obj;&lt;br/&gt;
    +  byte buf[];&lt;br/&gt;
    +  boolean is_matrix;&lt;br/&gt;
    +&lt;br/&gt;
    +  public H2OBCast(T o) {&lt;br/&gt;
    +    obj = o;&lt;br/&gt;
    +&lt;br/&gt;
    +    if (o instanceof Matrix) &lt;/p&gt;
{
    +      buf = serialize(new MatrixWritable((Matrix)o));
    +      is_matrix = true;
    +    }
&lt;p&gt; else if (o instanceof Vector) &lt;/p&gt;
{
    +      buf = serialize(new VectorWritable((Vector)o));
    +    }
&lt;p&gt; else &lt;/p&gt;
{
    +      throw new IllegalArgumentException(&quot;Only Matrix or Vector supported for now&quot;);
    +    }
&lt;p&gt;    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  public T value() &lt;/p&gt;
{
    +    if (obj == null)
    +      obj = deserialize(buf);
    +    return obj;
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  private byte[] serialize(Writable w) {&lt;br/&gt;
    +    ByteArrayOutputStream bos = new ByteArrayOutputStream();&lt;br/&gt;
    +    try &lt;/p&gt;
{
    +      ObjectOutputStream oos = new ObjectOutputStream(bos);
    +      w.write(oos);
    +      oos.close();
    +    }
&lt;p&gt; catch (java.io.IOException e) &lt;/p&gt;
{
    +      return null;
    +    }
&lt;p&gt;    +    return bos.toByteArray();&lt;br/&gt;
    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  private T deserialize(byte buf[]) {&lt;br/&gt;
    +    T ret = null;&lt;br/&gt;
    +    ByteArrayInputStream bis = new ByteArrayInputStream(buf);&lt;br/&gt;
    +    try {&lt;br/&gt;
    +      ObjectInputStream ois = new ObjectInputStream(bis);&lt;br/&gt;
    +      if (is_matrix) &lt;/p&gt;
{
    +        MatrixWritable w = new MatrixWritable();
    +        w.readFields(ois);
    +        ret = (T) w.get();
    +      }
&lt;p&gt; else &lt;/p&gt;
{
    +        VectorWritable w = new VectorWritable();
    +        w.readFields(ois);
    +        ret = (T) w.get();
    +      }
&lt;p&gt;    +    } catch (java.io.IOException e) {&lt;br/&gt;
    +      System.out.println(&quot;Caught exception: &quot; + e);&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    indentation after catch&lt;/p&gt;</comment>
                            <comment id="14097932" author="githubbot" created="Fri, 15 Aug 2014 00:56:03 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274365&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274365&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/drm/H2OBCast.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,93 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.drm;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.math.drm.BCast;&lt;br/&gt;
    +import org.apache.mahout.math.Matrix;&lt;br/&gt;
    +import org.apache.mahout.math.Vector;&lt;br/&gt;
    +import org.apache.mahout.math.MatrixWritable;&lt;br/&gt;
    +import org.apache.mahout.math.VectorWritable;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.hadoop.io.Writable;&lt;br/&gt;
    +&lt;br/&gt;
    +import java.io.Serializable;&lt;br/&gt;
    +import java.io.ByteArrayOutputStream;&lt;br/&gt;
    +import java.io.ByteArrayInputStream;&lt;br/&gt;
    +import java.io.ObjectOutputStream;&lt;br/&gt;
    +import java.io.ObjectInputStream;&lt;br/&gt;
    +&lt;br/&gt;
    +/* Handle Matrix and Vector separately so that we can live with&lt;br/&gt;
    +   just importing MatrixWritable and VectorWritable.&lt;br/&gt;
    +*/&lt;br/&gt;
    +&lt;br/&gt;
    +public class H2OBCast&amp;lt;T&amp;gt; implements BCast&amp;lt;T&amp;gt;, Serializable {&lt;br/&gt;
    +  transient T obj;&lt;br/&gt;
    +  byte buf[];&lt;br/&gt;
    +  boolean is_matrix;&lt;br/&gt;
    +&lt;br/&gt;
    +  public H2OBCast(T o) {&lt;br/&gt;
    +    obj = o;&lt;br/&gt;
    +&lt;br/&gt;
    +    if (o instanceof Matrix) &lt;/p&gt;
{
    +      buf = serialize(new MatrixWritable((Matrix)o));
    +      is_matrix = true;
    +    }
&lt;p&gt; else if (o instanceof Vector) &lt;/p&gt;
{
    +      buf = serialize(new VectorWritable((Vector)o));
    +    }
&lt;p&gt; else &lt;/p&gt;
{
    +      throw new IllegalArgumentException(&quot;Only Matrix or Vector supported for now&quot;);
    +    }
&lt;p&gt;    +  }&lt;br/&gt;
    +&lt;br/&gt;
    +  public T value() &lt;/p&gt;
{
    +    if (obj == null)
    +      obj = deserialize(buf);
    +    return obj;
    +  }
&lt;p&gt;    +&lt;br/&gt;
    +  private byte[] serialize(Writable w) {&lt;br/&gt;
    +    ByteArrayOutputStream bos = new ByteArrayOutputStream();&lt;br/&gt;
    +    try &lt;/p&gt;
{
    +      ObjectOutputStream oos = new ObjectOutputStream(bos);
    +      w.write(oos);
    +      oos.close();
    +    }
&lt;p&gt; catch (java.io.IOException e) {&lt;br/&gt;
    +      return null;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    indentation after catch here and a few more as well&lt;/p&gt;</comment>
                            <comment id="14097938" author="githubbot" created="Fri, 15 Aug 2014 00:58:04 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274418&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274418&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/pom.xml &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,252 @@&lt;br/&gt;
    +&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +&amp;lt;!--&lt;br/&gt;
    + Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + this work for additional information regarding copyright ownership.&lt;br/&gt;
    + The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + the License.  You may obtain a copy of the License at&lt;br/&gt;
    +&lt;br/&gt;
    +     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    +&lt;br/&gt;
    + Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + See the License for the specific language governing permissions and&lt;br/&gt;
    + limitations under the License.&lt;br/&gt;
    +--&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
    +         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/maven-v4_0_0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/maven-v4_0_0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
    +  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;parent&amp;gt;&lt;br/&gt;
    +    &amp;lt;groupId&amp;gt;org.apache.mahout&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +    &amp;lt;artifactId&amp;gt;mahout&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
    +    &amp;lt;relativePath&amp;gt;../pom.xml&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
    +  &amp;lt;/parent&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;artifactId&amp;gt;mahout-h2o&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +  &amp;lt;name&amp;gt;Mahout H2O backend&amp;lt;/name&amp;gt;&lt;br/&gt;
    +  &amp;lt;description&amp;gt;&lt;br/&gt;
    +    H2O Backend for Mahout DSL&lt;br/&gt;
    +  &amp;lt;/description&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;repositories&amp;gt;&lt;br/&gt;
    +    &amp;lt;repository&amp;gt;&lt;br/&gt;
    +      &amp;lt;id&amp;gt;oss.sonatype.org&amp;lt;/id&amp;gt;&lt;br/&gt;
    +      &amp;lt;url&amp;gt;&lt;a href=&quot;http://oss.sonatype.org/content/repositories&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://oss.sonatype.org/content/repositories&lt;/a&gt;&amp;lt;/url&amp;gt;&lt;br/&gt;
    +      &amp;lt;releases&amp;gt;&lt;br/&gt;
    +        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br/&gt;
    +      &amp;lt;/releases&amp;gt;&lt;br/&gt;
    +      &amp;lt;snapshots&amp;gt;&lt;br/&gt;
    +        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br/&gt;
    +      &amp;lt;/snapshots&amp;gt;&lt;br/&gt;
    +    &amp;lt;/repository&amp;gt;&lt;br/&gt;
    +  &amp;lt;/repositories&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;!-- this is needed for scalatest plugin until they publish it to central --&amp;gt;&lt;br/&gt;
    +  &amp;lt;pluginRepositories&amp;gt;&lt;br/&gt;
    +    &amp;lt;pluginRepository&amp;gt;&lt;br/&gt;
    +      &amp;lt;id&amp;gt;sonatype&amp;lt;/id&amp;gt;&lt;br/&gt;
    +      &amp;lt;url&amp;gt;&lt;a href=&quot;https://oss.sonatype.org/content/groups/public&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://oss.sonatype.org/content/groups/public&lt;/a&gt;&amp;lt;/url&amp;gt;&lt;br/&gt;
    +      &amp;lt;releases&amp;gt;&lt;br/&gt;
    +        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br/&gt;
    +      &amp;lt;/releases&amp;gt;&lt;br/&gt;
    +    &amp;lt;/pluginRepository&amp;gt;&lt;br/&gt;
    +  &amp;lt;/pluginRepositories&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;build&amp;gt;&lt;br/&gt;
    +    &amp;lt;defaultGoal&amp;gt;install&amp;lt;/defaultGoal&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    &amp;lt;plugins&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +        &amp;lt;executions&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;id&amp;gt;add-source&amp;lt;/id&amp;gt;&lt;br/&gt;
    +            &amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;add-source&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +            &amp;lt;configuration&amp;gt;&lt;br/&gt;
    +              &amp;lt;sources&amp;gt;&lt;br/&gt;
    +                &amp;lt;source&amp;gt;$&lt;/p&gt;
{project.build.directory}/generated-sources/mahout&amp;lt;/source&amp;gt;&lt;br/&gt;
    +              &amp;lt;/sources&amp;gt;&lt;br/&gt;
    +            &amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;id&amp;gt;add-test-source&amp;lt;/id&amp;gt;&lt;br/&gt;
    +            &amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;add-test-source&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +            &amp;lt;configuration&amp;gt;&lt;br/&gt;
    +              &amp;lt;sources&amp;gt;&lt;br/&gt;
    +                &amp;lt;source&amp;gt;${project.build.directory}
&lt;p&gt;/generated-test-sources/mahout&amp;lt;/source&amp;gt;&lt;br/&gt;
    +              &amp;lt;/sources&amp;gt;&lt;br/&gt;
    +            &amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +        &amp;lt;/executions&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;!-- create test jar so other modules can reuse the math test utility classes. --&amp;gt;&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +        &amp;lt;executions&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;test-jar&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +            &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +        &amp;lt;/executions&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +	&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +	&amp;lt;configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;descriptorRefs&amp;gt;&lt;br/&gt;
    +            &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;&lt;br/&gt;
    +          &amp;lt;/descriptorRefs&amp;gt;&lt;br/&gt;
    +          &amp;lt;archive&amp;gt;&lt;br/&gt;
    +            &amp;lt;manifest&amp;gt;&lt;br/&gt;
    +              &amp;lt;mainClass&amp;gt;water.H2O&amp;lt;/mainClass&amp;gt;&lt;br/&gt;
    +            &amp;lt;/manifest&amp;gt;&lt;br/&gt;
    +          &amp;lt;/archive&amp;gt;&lt;br/&gt;
    +	&amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +	&amp;lt;executions&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +	&amp;lt;/executions&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;maven-source-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;groupId&amp;gt;org.scala-tools&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;maven-scala-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +        &amp;lt;executions&amp;gt;&lt;br/&gt;
    +	  &amp;lt;execution&amp;gt;&lt;br/&gt;
    +	    &amp;lt;id&amp;gt;scala-compile-first&amp;lt;/id&amp;gt;&lt;br/&gt;
    +	    &amp;lt;phase&amp;gt;process-resources&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +	    &amp;lt;goals&amp;gt;&lt;br/&gt;
    +	      &amp;lt;goal&amp;gt;add-source&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +	      &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +	    &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +	  &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;testCompile&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +        &amp;lt;/executions&amp;gt;&lt;br/&gt;
    +        &amp;lt;configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;sourceDir&amp;gt;src/main/scala&amp;lt;/sourceDir&amp;gt;&lt;br/&gt;
    +          &amp;lt;jvmArgs&amp;gt;&lt;br/&gt;
    +            &amp;lt;jvmArg&amp;gt;-Xms64m&amp;lt;/jvmArg&amp;gt;&lt;br/&gt;
    +            &amp;lt;jvmArg&amp;gt;-Xmx1024m&amp;lt;/jvmArg&amp;gt;&lt;br/&gt;
    +          &amp;lt;/jvmArgs&amp;gt;&lt;br/&gt;
    +        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;!--this is what scalatest recommends to do to enable scala tests --&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;!-- disable surefire --&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;plugin&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;version&amp;gt;2.7&amp;lt;/version&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;configuration&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;skipTests&amp;gt;true&amp;lt;/skipTests&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;/configuration&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;/plugin&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-- enable scalatest --&amp;gt;&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;groupId&amp;gt;org.scalatest&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;scalatest-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +        &amp;lt;version&amp;gt;1.0-M2&amp;lt;/version&amp;gt;&lt;br/&gt;
    +        &amp;lt;configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;reportsDirectory&amp;gt;$&lt;/p&gt;
{project.build.directory}
&lt;p&gt;/scalatest-reports&amp;lt;/reportsDirectory&amp;gt;&lt;br/&gt;
    +          &amp;lt;junitxml&amp;gt;.&amp;lt;/junitxml&amp;gt;&lt;br/&gt;
    +          &amp;lt;filereports&amp;gt;WDF TestSuite.txt&amp;lt;/filereports&amp;gt;&lt;br/&gt;
    +        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +        &amp;lt;executions&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;id&amp;gt;test&amp;lt;/id&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;test&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +        &amp;lt;/executions&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    &amp;lt;/plugins&amp;gt;&lt;br/&gt;
    +  &amp;lt;/build&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;dependencies&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    &amp;lt;dependency&amp;gt;&lt;br/&gt;
    +      &amp;lt;groupId&amp;gt;org.apache.mahout&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +      &amp;lt;artifactId&amp;gt;mahout-math-scala&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    need to update this to new mahout-math-scala artifact name&lt;/p&gt;</comment>
                            <comment id="14097940" author="githubbot" created="Fri, 15 Aug 2014 00:58:45 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274443&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274443&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/pom.xml &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,252 @@&lt;br/&gt;
    +&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +&amp;lt;!--&lt;br/&gt;
    + Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + this work for additional information regarding copyright ownership.&lt;br/&gt;
    + The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + the License.  You may obtain a copy of the License at&lt;br/&gt;
    +&lt;br/&gt;
    +     &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    +&lt;br/&gt;
    + Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + See the License for the specific language governing permissions and&lt;br/&gt;
    + limitations under the License.&lt;br/&gt;
    +--&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;
    +         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &lt;a href=&quot;http://maven.apache.org/maven-v4_0_0.xsd&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://maven.apache.org/maven-v4_0_0.xsd&lt;/a&gt;&quot;&amp;gt;&lt;br/&gt;
    +  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;parent&amp;gt;&lt;br/&gt;
    +    &amp;lt;groupId&amp;gt;org.apache.mahout&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +    &amp;lt;artifactId&amp;gt;mahout&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br/&gt;
    +    &amp;lt;relativePath&amp;gt;../pom.xml&amp;lt;/relativePath&amp;gt;&lt;br/&gt;
    +  &amp;lt;/parent&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;artifactId&amp;gt;mahout-h2o&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +  &amp;lt;name&amp;gt;Mahout H2O backend&amp;lt;/name&amp;gt;&lt;br/&gt;
    +  &amp;lt;description&amp;gt;&lt;br/&gt;
    +    H2O Backend for Mahout DSL&lt;br/&gt;
    +  &amp;lt;/description&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;repositories&amp;gt;&lt;br/&gt;
    +    &amp;lt;repository&amp;gt;&lt;br/&gt;
    +      &amp;lt;id&amp;gt;oss.sonatype.org&amp;lt;/id&amp;gt;&lt;br/&gt;
    +      &amp;lt;url&amp;gt;&lt;a href=&quot;http://oss.sonatype.org/content/repositories&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://oss.sonatype.org/content/repositories&lt;/a&gt;&amp;lt;/url&amp;gt;&lt;br/&gt;
    +      &amp;lt;releases&amp;gt;&lt;br/&gt;
    +        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br/&gt;
    +      &amp;lt;/releases&amp;gt;&lt;br/&gt;
    +      &amp;lt;snapshots&amp;gt;&lt;br/&gt;
    +        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br/&gt;
    +      &amp;lt;/snapshots&amp;gt;&lt;br/&gt;
    +    &amp;lt;/repository&amp;gt;&lt;br/&gt;
    +  &amp;lt;/repositories&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;!-- this is needed for scalatest plugin until they publish it to central --&amp;gt;&lt;br/&gt;
    +  &amp;lt;pluginRepositories&amp;gt;&lt;br/&gt;
    +    &amp;lt;pluginRepository&amp;gt;&lt;br/&gt;
    +      &amp;lt;id&amp;gt;sonatype&amp;lt;/id&amp;gt;&lt;br/&gt;
    +      &amp;lt;url&amp;gt;&lt;a href=&quot;https://oss.sonatype.org/content/groups/public&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://oss.sonatype.org/content/groups/public&lt;/a&gt;&amp;lt;/url&amp;gt;&lt;br/&gt;
    +      &amp;lt;releases&amp;gt;&lt;br/&gt;
    +        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br/&gt;
    +      &amp;lt;/releases&amp;gt;&lt;br/&gt;
    +    &amp;lt;/pluginRepository&amp;gt;&lt;br/&gt;
    +  &amp;lt;/pluginRepositories&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;build&amp;gt;&lt;br/&gt;
    +    &amp;lt;defaultGoal&amp;gt;install&amp;lt;/defaultGoal&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    &amp;lt;plugins&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +        &amp;lt;executions&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;id&amp;gt;add-source&amp;lt;/id&amp;gt;&lt;br/&gt;
    +            &amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;add-source&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +            &amp;lt;configuration&amp;gt;&lt;br/&gt;
    +              &amp;lt;sources&amp;gt;&lt;br/&gt;
    +                &amp;lt;source&amp;gt;$&lt;/p&gt;
{project.build.directory}/generated-sources/mahout&amp;lt;/source&amp;gt;&lt;br/&gt;
    +              &amp;lt;/sources&amp;gt;&lt;br/&gt;
    +            &amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;id&amp;gt;add-test-source&amp;lt;/id&amp;gt;&lt;br/&gt;
    +            &amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;add-test-source&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +            &amp;lt;configuration&amp;gt;&lt;br/&gt;
    +              &amp;lt;sources&amp;gt;&lt;br/&gt;
    +                &amp;lt;source&amp;gt;${project.build.directory}
&lt;p&gt;/generated-test-sources/mahout&amp;lt;/source&amp;gt;&lt;br/&gt;
    +              &amp;lt;/sources&amp;gt;&lt;br/&gt;
    +            &amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +        &amp;lt;/executions&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;!-- create test jar so other modules can reuse the math test utility classes. --&amp;gt;&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +        &amp;lt;executions&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;test-jar&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +            &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +        &amp;lt;/executions&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +	&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +	&amp;lt;configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;descriptorRefs&amp;gt;&lt;br/&gt;
    +            &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;&lt;br/&gt;
    +          &amp;lt;/descriptorRefs&amp;gt;&lt;br/&gt;
    +          &amp;lt;archive&amp;gt;&lt;br/&gt;
    +            &amp;lt;manifest&amp;gt;&lt;br/&gt;
    +              &amp;lt;mainClass&amp;gt;water.H2O&amp;lt;/mainClass&amp;gt;&lt;br/&gt;
    +            &amp;lt;/manifest&amp;gt;&lt;br/&gt;
    +          &amp;lt;/archive&amp;gt;&lt;br/&gt;
    +	&amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +	&amp;lt;executions&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +	&amp;lt;/executions&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;maven-source-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;groupId&amp;gt;org.scala-tools&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;maven-scala-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +        &amp;lt;executions&amp;gt;&lt;br/&gt;
    +	  &amp;lt;execution&amp;gt;&lt;br/&gt;
    +	    &amp;lt;id&amp;gt;scala-compile-first&amp;lt;/id&amp;gt;&lt;br/&gt;
    +	    &amp;lt;phase&amp;gt;process-resources&amp;lt;/phase&amp;gt;&lt;br/&gt;
    +	    &amp;lt;goals&amp;gt;&lt;br/&gt;
    +	      &amp;lt;goal&amp;gt;add-source&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +	      &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +	    &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +	  &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;testCompile&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +        &amp;lt;/executions&amp;gt;&lt;br/&gt;
    +        &amp;lt;configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;sourceDir&amp;gt;src/main/scala&amp;lt;/sourceDir&amp;gt;&lt;br/&gt;
    +          &amp;lt;jvmArgs&amp;gt;&lt;br/&gt;
    +            &amp;lt;jvmArg&amp;gt;-Xms64m&amp;lt;/jvmArg&amp;gt;&lt;br/&gt;
    +            &amp;lt;jvmArg&amp;gt;-Xmx1024m&amp;lt;/jvmArg&amp;gt;&lt;br/&gt;
    +          &amp;lt;/jvmArgs&amp;gt;&lt;br/&gt;
    +        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;!--this is what scalatest recommends to do to enable scala tests --&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +      &amp;lt;!-- disable surefire --&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;plugin&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;version&amp;gt;2.7&amp;lt;/version&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;configuration&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;skipTests&amp;gt;true&amp;lt;/skipTests&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;/configuration&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-&lt;del&gt;&amp;lt;/plugin&amp;gt;&lt;/del&gt;-&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-- enable scalatest --&amp;gt;&lt;br/&gt;
    +      &amp;lt;plugin&amp;gt;&lt;br/&gt;
    +        &amp;lt;groupId&amp;gt;org.scalatest&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +        &amp;lt;artifactId&amp;gt;scalatest-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +        &amp;lt;version&amp;gt;1.0-M2&amp;lt;/version&amp;gt;&lt;br/&gt;
    +        &amp;lt;configuration&amp;gt;&lt;br/&gt;
    +          &amp;lt;reportsDirectory&amp;gt;$&lt;/p&gt;
{project.build.directory}
&lt;p&gt;/scalatest-reports&amp;lt;/reportsDirectory&amp;gt;&lt;br/&gt;
    +          &amp;lt;junitxml&amp;gt;.&amp;lt;/junitxml&amp;gt;&lt;br/&gt;
    +          &amp;lt;filereports&amp;gt;WDF TestSuite.txt&amp;lt;/filereports&amp;gt;&lt;br/&gt;
    +        &amp;lt;/configuration&amp;gt;&lt;br/&gt;
    +        &amp;lt;executions&amp;gt;&lt;br/&gt;
    +          &amp;lt;execution&amp;gt;&lt;br/&gt;
    +            &amp;lt;id&amp;gt;test&amp;lt;/id&amp;gt;&lt;br/&gt;
    +            &amp;lt;goals&amp;gt;&lt;br/&gt;
    +              &amp;lt;goal&amp;gt;test&amp;lt;/goal&amp;gt;&lt;br/&gt;
    +            &amp;lt;/goals&amp;gt;&lt;br/&gt;
    +          &amp;lt;/execution&amp;gt;&lt;br/&gt;
    +        &amp;lt;/executions&amp;gt;&lt;br/&gt;
    +      &amp;lt;/plugin&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    &amp;lt;/plugins&amp;gt;&lt;br/&gt;
    +  &amp;lt;/build&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  &amp;lt;dependencies&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    &amp;lt;dependency&amp;gt;&lt;br/&gt;
    +      &amp;lt;groupId&amp;gt;org.apache.mahout&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +      &amp;lt;artifactId&amp;gt;mahout-math-scala&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +      &amp;lt;version&amp;gt;$&lt;/p&gt;
{project.version}&amp;lt;/version&amp;gt;&lt;br/&gt;
    +    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +    &amp;lt;dependency&amp;gt;&lt;br/&gt;
    +      &amp;lt;!-- for MatrixWritable and VectorWritable --&amp;gt;&lt;br/&gt;
    +      &amp;lt;groupId&amp;gt;org.apache.mahout&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +      &amp;lt;artifactId&amp;gt;mahout-mrlegacy&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +      &amp;lt;version&amp;gt;${project.version}
&lt;p&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;
    +    &amp;lt;/dependency&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +   &amp;lt;dependency&amp;gt;&lt;br/&gt;
    +      &amp;lt;groupId&amp;gt;org.apache.mahout&amp;lt;/groupId&amp;gt;&lt;br/&gt;
    +      &amp;lt;artifactId&amp;gt;mahout-math-scala&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
    +      &amp;lt;classifier&amp;gt;tests&amp;lt;/classifier&amp;gt;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    need to update to new mahout-math-scala artifact name&lt;/p&gt;</comment>
                            <comment id="14097942" author="githubbot" created="Fri, 15 Aug 2014 01:01:30 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16274540&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16274540&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/test/scala/org/apache/mahout/h2obindings/test/LoggerConfiguration.scala &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,13 @@&lt;br/&gt;
    +package org.apache.mahout.h2obindings.test&lt;br/&gt;
    +&lt;br/&gt;
    +import org.scalatest.Suite&lt;br/&gt;
    +import org.apache.log4j.&lt;/p&gt;
{Level, Logger, BasicConfigurator}
&lt;p&gt;    +&lt;br/&gt;
    +trait LoggerConfiguration extends org.apache.mahout.test.LoggerConfiguration {&lt;br/&gt;
    +  this: Suite =&amp;gt;&lt;br/&gt;
    +&lt;br/&gt;
    +  override protected def beforeAll(): Unit = {&lt;br/&gt;
    +    super.beforeAll()&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    need to update this to:&lt;/p&gt;

&lt;p&gt;        override protected def beforeAll(configMap: ConfigMap) {&lt;br/&gt;
        super.beforeAll(configMap)&lt;/p&gt;</comment>
                            <comment id="14097960" author="githubbot" created="Fri, 15 Aug 2014 01:12:51 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-52261287&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-52261287&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    As far as I can tell, this is just waiting to be merged.  The vote has passed in favor of merging.  I&apos;ve been looking at this a bit over the past week.  I wrote some simple tests for Naive Bayes from M-1493 on top of this and found that it integrated very easily (as far as writing tests in Math-Scala and then extending them in h2o and spark test suites).&lt;/p&gt;

&lt;p&gt;    I&apos;m not familiar with the inner workings of h2o and am new to scala and the DSL, but the code looks good to me. From what I can see there are a couple of more (very minor) style points that i&apos;ve noticed (see above comments).  And a couple of updates that need to be made to get this working against the current master.&lt;/p&gt;

&lt;p&gt;    My issue has been with the Java 1.7 h2o-core artifact.  I&apos;ve brought it up a couple of times, and it seems that its not as much of a problem as I&apos;d originally thought.  I am still a little concerned with tests will fail for someone running 1.6. Is there a way to get a 1.6 artifact in here?   Please someone let me know if I&apos;m being overly cautious here.  &lt;/p&gt;

&lt;p&gt;    Long story short- looks good to me:  +1 from me on merging if we can get that artifact issue solved (or if it is really a non-issue). &lt;/p&gt;

&lt;p&gt;    Looking back at the email archive over the past few months, I do share many of the concerns that have been brought up,  Especially regarding documentation of spark/h20 supported algorithms, and think that we need to get that up quickly.&lt;/p&gt;

&lt;p&gt;    Someone with a better working knowledge of h2o and scala/DSL may want to assign this and review it further and merge. If its just a question simply of needing someone to assign this to and merging it, I can do it. &lt;/p&gt;
</comment>
                            <comment id="14099865" author="githubbot" created="Sun, 17 Aug 2014 03:59:44 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-52412203&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-52412203&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Addressed review comments from Andrew, except the comment on indentation of catch. Even though indentation around catch is not like &quot;Java standard&quot;, it is consistent with the rest of Mahout code&apos;s style. Let me know if you still want to change it only in h2o module.&lt;/p&gt;</comment>
                            <comment id="14104801" author="githubbot" created="Thu, 21 Aug 2014 00:37:33 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-52860273&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-52860273&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    PING.&lt;/p&gt;

&lt;p&gt;    Requesting some attention to this PR.&lt;/p&gt;</comment>
                            <comment id="14109877" author="githubbot" created="Mon, 25 Aug 2014 23:30:19 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-53345246&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-53345246&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    The latest push makes this PR runtime compatible with Java 1.6 (depends on h2o-core 0.1.5 which starts Java6 backward compat)&lt;/p&gt;</comment>
                            <comment id="14110087" author="githubbot" created="Tue, 26 Aug 2014 01:51:43 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-53359715&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-53359715&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Looks good- All my tests pass here with 1.6 and 1.7.&lt;/p&gt;</comment>
                            <comment id="14110833" author="pferrel" created="Tue, 26 Aug 2014 16:32:28 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Andrew_Palumbo&quot; class=&quot;user-hover&quot; rel=&quot;Andrew_Palumbo&quot;&gt;Andrew Palumbo&lt;/a&gt; are you planning to assign this to yourself and do the merge? &lt;/p&gt;</comment>
                            <comment id="14110929" author="andrew_palumbo" created="Tue, 26 Aug 2014 17:41:06 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=pferrel&quot; class=&quot;user-hover&quot; rel=&quot;pferrel&quot;&gt;Pat Ferrel&lt;/a&gt; I do have a couple comments for anand, and need to look it over again - but yes- I can merge it.   I could use some guidance though as far as pushing a new module.  If someone could look over the h20/pom.xml &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avati/mahout/blob/MAHOUT-1500/h2o/pom.xml&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati/mahout/blob/MAHOUT-1500/h2o/pom.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for me I&apos;d appreciate it.  &lt;/p&gt;</comment>
                            <comment id="14110966" author="githubbot" created="Tue, 26 Aug 2014 18:14:00 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-53455542&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-53455542&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @avati - it looks like some of your changes from Dmitriy&apos;s style reviews have made it back into this branch could you please update those?     &lt;/p&gt;</comment>
                            <comment id="14111186" author="githubbot" created="Tue, 26 Aug 2014 20:36:10 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-53476236&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-53476236&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @andrewpalumbo re-applied the commit. Not sure how it got missed! Thanks for pointing..&lt;/p&gt;</comment>
                            <comment id="14111257" author="githubbot" created="Tue, 26 Aug 2014 21:22:11 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16739580&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16739580&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewScalar.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,68 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.H2OHelper;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +&lt;br/&gt;
    +public class AewScalar {&lt;br/&gt;
    +  /* Element-wise DRM-DRM operations */&lt;br/&gt;
    +  public static H2ODrm AewScalar(H2ODrm DrmA, final double s, final String op) {&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Possibly one more commit missing?&lt;/p&gt;</comment>
                            <comment id="14111312" author="githubbot" created="Tue, 26 Aug 2014 21:48:04 +0100"  >&lt;p&gt;Github user avati commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#discussion_r16741328&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#discussion_r16741328&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewScalar.java &amp;#8212;&lt;br/&gt;
    @@ -0,0 +1,68 @@&lt;br/&gt;
    +/*&lt;br/&gt;
    + *  Licensed to the Apache Software Foundation (ASF) under one or more&lt;br/&gt;
    + *  contributor license agreements.  See the NOTICE file distributed with&lt;br/&gt;
    + *  this work for additional information regarding copyright ownership.&lt;br/&gt;
    + *  The ASF licenses this file to You under the Apache License, Version 2.0&lt;br/&gt;
    + *  (the &quot;License&quot;); you may not use this file except in compliance with&lt;br/&gt;
    + *  the License.  You may obtain a copy of the License at&lt;br/&gt;
    + *&lt;br/&gt;
    + *      &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
    + *&lt;br/&gt;
    + *  Unless required by applicable law or agreed to in writing, software&lt;br/&gt;
    + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;br/&gt;
    + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;br/&gt;
    + *  See the License for the specific language governing permissions and&lt;br/&gt;
    + *  limitations under the License.&lt;br/&gt;
    + */&lt;br/&gt;
    +&lt;br/&gt;
    +package org.apache.mahout.h2obindings.ops;&lt;br/&gt;
    +&lt;br/&gt;
    +import org.apache.mahout.h2obindings.H2OHelper;&lt;br/&gt;
    +import org.apache.mahout.h2obindings.drm.H2ODrm;&lt;br/&gt;
    +&lt;br/&gt;
    +import water.MRTask;&lt;br/&gt;
    +import water.fvec.Frame;&lt;br/&gt;
    +import water.fvec.Vec;&lt;br/&gt;
    +import water.fvec.Chunk;&lt;br/&gt;
    +import water.fvec.NewChunk;&lt;br/&gt;
    +&lt;br/&gt;
    +public class AewScalar {&lt;br/&gt;
    +  /* Element-wise DRM-DRM operations */&lt;br/&gt;
    +  public static H2ODrm AewScalar(H2ODrm DrmA, final double s, final String op) {&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    Oops, pushed the camelcase styling as well. Looks like I had accidentally overwrote a couple of commits when switching between workstation and laptop.&lt;/p&gt;</comment>
                            <comment id="14111343" author="githubbot" created="Tue, 26 Aug 2014 22:08:45 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21#issuecomment-53492639&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21#issuecomment-53492639&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Tests pass in distributed mode for me.  Could someone please double check the h2o/pom.xml for me?  I&apos;m not sure if there&apos;s anything that needs to be added to not break the nightly build.    &lt;/p&gt;</comment>
                            <comment id="14111390" author="andrew_palumbo" created="Tue, 26 Aug 2014 22:44:32 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=pferrel&quot; class=&quot;user-hover&quot; rel=&quot;pferrel&quot;&gt;Pat Ferrel&lt;/a&gt; barring any problems with the h20/pom.xml,  I think this is good to go.  I&apos;d like to merge it.   I&apos;m unable to assign JIRA issues.  Could you assign this to me?  &lt;/p&gt;</comment>
                            <comment id="14111468" author="tdunning" created="Tue, 26 Aug 2014 23:25:01 +0100"  >&lt;p&gt;Andrew,&lt;/p&gt;

&lt;p&gt;Go ahead and do the merge without the assignment.  I can&apos;t assign this to you for some JIRA config reason.  I successfully assigned this to me, though, so I will chase down the config problem.&lt;/p&gt;</comment>
                            <comment id="14111500" author="andrew_palumbo" created="Tue, 26 Aug 2014 23:49:35 +0100"  >&lt;p&gt;thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tdunning&quot; class=&quot;user-hover&quot; rel=&quot;tdunning&quot;&gt;Ted Dunning&lt;/a&gt;- It looks like its assigned to me now and i can change the assignee.   Any thoughts on the h20/pom.xml?   I only ask because I kind of remember the nightly build breaking around the time that the spark module was added, and having to run `mvn clean package install` for a few days while it was fixed. I&apos;m not sure if this had anything to do with adding a new module or not- just wanted to double check.&lt;/p&gt;

&lt;p&gt;Appreciate it!&lt;/p&gt;</comment>
                            <comment id="14111687" author="avati" created="Wed, 27 Aug 2014 02:04:44 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Andrew_Palumbo&quot; class=&quot;user-hover&quot; rel=&quot;Andrew_Palumbo&quot;&gt;Andrew Palumbo&lt;/a&gt;, is it not possible to do a mock run to verify that definitively?&lt;/p&gt;</comment>
                            <comment id="14111691" author="avati" created="Wed, 27 Aug 2014 02:11:39 +0100"  >&lt;p&gt;Or optimistically merge, and fix up if things break with a specific error?&lt;/p&gt;</comment>
                            <comment id="14111856" author="tdunning" created="Wed, 27 Aug 2014 05:56:58 +0100"  >&lt;p&gt;&lt;br/&gt;
optimism seems warranted.  Worst case is a revert.&lt;/p&gt;</comment>
                            <comment id="14112235" author="andrew_palumbo" created="Wed, 27 Aug 2014 14:18:06 +0100"  >&lt;p&gt;sounds good.&lt;/p&gt;</comment>
                            <comment id="14112396" author="githubbot" created="Wed, 27 Aug 2014 17:26:59 +0100"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/21&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/21&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14112451" author="hudson" created="Wed, 27 Aug 2014 18:03:39 +0100"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2763 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2763/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2763/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: H2O Integration (Anand Avati via apalumbo) closes apache/mahout#21 (ap.dev: rev f870a630291bd9d623b32c21f087ba19e69eb1fc)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/package.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/ops/MapBlockHelper.scala&lt;/li&gt;
	&lt;li&gt;h2o/pom.xml&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtB.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/At.java&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/drm/DrmLikeOpsSuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/drm/H2ODrm.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Ax.java&lt;/li&gt;
	&lt;li&gt;CHANGELOG&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/test/DistributedH2OSuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OHdfs.java&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/math/decompositions/DistributedDecompositionsSuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/drm/DrmLikeSuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Par.java&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/test/LoggerConfiguration.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/drm/RLikeDrmOpsSuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OContext.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtA.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/MapBlock.java&lt;/li&gt;
	&lt;li&gt;bin/mahout&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewB.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/RowRange.java&lt;/li&gt;
	&lt;li&gt;pom.xml&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/H2ODistributedContext.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OHelper.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/drm/H2OBCast.java&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/ops/ABtSuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OBlockMatrix.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/drm/CheckpointedDrmH2O.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/H2OEngine.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/ops/AewBSuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Cbind.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Atx.java&lt;/li&gt;
	&lt;li&gt;h2o/README.md&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewScalar.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/TimesRightMatrix.java&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/ops/AtSuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/ABt.java&lt;/li&gt;
	&lt;li&gt;h2o/src/test/scala/org/apache/mahout/h2obindings/ops/AtASuite.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Rbind.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14112766" author="hudson" created="Wed, 27 Aug 2014 21:21:51 +0100"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2765 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2765/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2765/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: H2O Integration - style revisions (ap.dev: rev c96498680df551f2cbd2a4735d9408044a0c7bc3)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Cbind.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/TimesRightMatrix.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewScalar.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/H2OEngine.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/drm/CheckpointedDrmH2O.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewB.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtB.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/At.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/ABt.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Atx.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OHdfs.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OHelper.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtA.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Par.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Rbind.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14112893" author="andrew_palumbo" created="Wed, 27 Aug 2014 22:31:59 +0100"  >&lt;p&gt;Merged, and everything looks good!&lt;/p&gt;

&lt;p&gt;I&apos;m trying to clean up some high priority warnings right now that jenkins is complaining about. &lt;/p&gt;

&lt;p&gt;java style issues eg: Method names should not start with capital letters:&lt;/p&gt;

&lt;p&gt;public static H2ODrm At(H2ODrm drmA) &lt;br/&gt;
public static H2ODrm AtA(H2ODrm drmA) &lt;/p&gt;

&lt;p&gt;etc..  &lt;/p&gt;

&lt;p&gt;any thoughts on a naming convention here?&lt;/p&gt;</comment>
                            <comment id="14112937" author="avati" created="Wed, 27 Aug 2014 23:09:24 +0100"  >&lt;p&gt;One option might be to rename all operator methods with a generic name, like &quot;exec&quot; (as done in the Spark module) and just have operator specific class name.&lt;/p&gt;

&lt;p&gt;I will create a PR with that change, unless someone has a different suggestion&lt;/p&gt;</comment>
                            <comment id="14112953" author="andrew_palumbo" created="Wed, 27 Aug 2014 23:22:08 +0100"  >&lt;p&gt;thanks anand- also need to change method names with underscores- I got most of them but didn&apos;t go through TimesRightMatrix.java.&lt;/p&gt;</comment>
                            <comment id="14112987" author="githubbot" created="Wed, 27 Aug 2014 23:43:20 +0100"  >&lt;p&gt;GitHub user avati opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/48&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/48&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: function name fixes&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rename operators to &quot;exec&quot;&lt;/li&gt;
	&lt;li&gt;remove underscore from method names&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/avati/mahout&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati/mahout&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;a&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/48.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/48.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #48&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit ae766d34d4475f5ea5d9faddf861158587929b7f&lt;br/&gt;
Author: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;br/&gt;
Date:   2014-08-27T22:35:33Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: rename operator methods per standards&lt;/p&gt;

&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;p&gt;commit b6e8f31be71c1a2a5d0ee0c7f86b7050b18e2fdc&lt;br/&gt;
Author: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;br/&gt;
Date:   2014-08-27T22:39:14Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: remove underscore in method names&lt;/p&gt;

&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14114117" author="githubbot" created="Thu, 28 Aug 2014 19:24:42 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/48#issuecomment-53772200&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/48#issuecomment-53772200&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @andrewpalumbo - does this look good?&lt;/p&gt;</comment>
                            <comment id="14114252" author="githubbot" created="Thu, 28 Aug 2014 21:02:21 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/48#issuecomment-53788269&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/48#issuecomment-53788269&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Looks good anand, thanks.&lt;/p&gt;</comment>
                            <comment id="14114256" author="githubbot" created="Thu, 28 Aug 2014 21:06:52 +0100"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/48&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/48&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14114316" author="hudson" created="Thu, 28 Aug 2014 21:43:58 +0100"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2769 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2769/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2769/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: H2O Integration - more style revisions closes apache/mahout#48 (ap.dev: rev 03a5bb61ed56daccd207d7a255956e21612cf995)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/TimesRightMatrix.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/RowRange.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/At.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/H2OEngine.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewB.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtB.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtA.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Cbind.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Ax.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/ABt.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Atx.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewScalar.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Rbind.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14114383" author="andrew_palumbo" created="Thu, 28 Aug 2014 22:30:37 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=avati&quot; class=&quot;user-hover&quot; rel=&quot;avati&quot;&gt;Anand Avati&lt;/a&gt;- Looks good!  Thanks for cleaning that up.  I think that the only thing left to do is add in some java/scaladoc comments and we can close this up.&lt;/p&gt;</comment>
                            <comment id="14120441" author="githubbot" created="Wed, 3 Sep 2014 21:59:09 +0100"  >&lt;p&gt;GitHub user avati opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: Code cleanup&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add javadoc and scaladoc comments.&lt;/li&gt;
	&lt;li&gt;Fix code comment style per standards.&lt;/li&gt;
	&lt;li&gt;Fix some more camelCase naming.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/avati/mahout&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/avati/mahout&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;doc&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #50&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit fdacd68c86b4b26e0d9affac500f35840ac99e8d&lt;br/&gt;
Author: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;br/&gt;
Date:   2014-09-03T01:04:10Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: Code cleanup&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add javadoc and scaladoc comments.&lt;/li&gt;
	&lt;li&gt;Fix code comment style per standards.&lt;/li&gt;
	&lt;li&gt;Fix some more camelCase naming.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Signed-off-by: Anand Avati &amp;lt;avati@redhat.com&amp;gt;&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="14120447" author="githubbot" created="Wed, 3 Sep 2014 22:02:33 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50#issuecomment-54366692&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50#issuecomment-54366692&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @andrewpalumbo - Added scaladoc and javadoc comments. I have also included some variable renaming to replace underscore with camelcasing in the same commit (because the javadoc had to use the right parameter name etc.)&lt;/p&gt;</comment>
                            <comment id="14122952" author="githubbot" created="Fri, 5 Sep 2014 14:47:12 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50#issuecomment-54626604&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50#issuecomment-54626604&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @avati thanks! &lt;/p&gt;</comment>
                            <comment id="14123181" author="githubbot" created="Fri, 5 Sep 2014 18:17:05 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50#discussion_r17184390&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50#discussion_r17184390&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/H2OContext.java &amp;#8212;&lt;br/&gt;
    @@ -19,13 +19,21 @@&lt;/p&gt;

&lt;p&gt;     import water.H2O;&lt;/p&gt;

&lt;p&gt;    +/**&lt;br/&gt;
    + * Context to an H2O Cloud.&lt;br/&gt;
    + */&lt;br/&gt;
     public class H2OContext {&lt;br/&gt;
    +  /** Stores the name of the H2O Cloud. Typically a free form string. */&lt;br/&gt;
       String masterURL;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    @avati - is there any need to store the masterURL?  i dont see any usage of it.  &lt;/p&gt;</comment>
                            <comment id="14123407" author="githubbot" created="Fri, 5 Sep 2014 20:09:26 +0100"  >&lt;p&gt;Github user avati commented on a diff in the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50#discussion_r17191513&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50#discussion_r17191513&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &amp;#8212; Diff: h2o/src/main/java/org/apache/mahout/h2obindings/H2OContext.java &amp;#8212;&lt;br/&gt;
    @@ -19,13 +19,21 @@&lt;/p&gt;

&lt;p&gt;     import water.H2O;&lt;/p&gt;

&lt;p&gt;    +/**&lt;br/&gt;
    + * Context to an H2O Cloud.&lt;br/&gt;
    + */&lt;br/&gt;
     public class H2OContext {&lt;br/&gt;
    +  /** Stores the name of the H2O Cloud. Typically a free form string. */&lt;br/&gt;
       String masterURL;&lt;br/&gt;
    &amp;#8212; End diff &amp;#8211;&lt;/p&gt;

&lt;p&gt;    @andrewpalumbo - probably no use of storing. I think I wasn&apos;t sure about that while coding. Let me remove it.&lt;/p&gt;</comment>
                            <comment id="14123411" author="githubbot" created="Fri, 5 Sep 2014 20:11:11 +0100"  >&lt;p&gt;Github user andrewpalumbo commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50#issuecomment-54668342&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50#issuecomment-54668342&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @avati - Don&apos;t worry about it- I&apos;ve already made some changes- i&apos;ll just take it out.  Thx.&lt;/p&gt;</comment>
                            <comment id="14123426" author="githubbot" created="Fri, 5 Sep 2014 20:24:44 +0100"  >&lt;p&gt;Github user avati commented on the pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50#issuecomment-54669875&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50#issuecomment-54669875&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    @andrewpalumbo OK thanks&lt;/p&gt;</comment>
                            <comment id="14123547" author="githubbot" created="Fri, 5 Sep 2014 21:45:45 +0100"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/mahout/pull/50&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/mahout/pull/50&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14123561" author="andrew_palumbo" created="Fri, 5 Sep 2014 21:56:52 +0100"  >&lt;p&gt;thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=avati&quot; class=&quot;user-hover&quot; rel=&quot;avati&quot;&gt;Anand Avati&lt;/a&gt; commited 1500doc with a few revisions.&lt;/p&gt;</comment>
                            <comment id="14123585" author="hudson" created="Fri, 5 Sep 2014 22:11:42 +0100"  >&lt;p&gt;SUCCESS: Integrated in Mahout-Quality #2781 (See &lt;a href=&quot;https://builds.apache.org/job/Mahout-Quality/2781/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Mahout-Quality/2781/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/MAHOUT-1500&quot; title=&quot;H2O integration&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MAHOUT-1500&quot;&gt;&lt;del&gt;MAHOUT-1500&lt;/del&gt;&lt;/a&gt;: Code cleanup and javadocs closes apache/mahout#50 (ap.dev: rev 2d1b0bf632724ceb091035582274201269cfe3e3)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Par.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OBlockMatrix.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/drm/H2OBCast.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/H2OEngine.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Rbind.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Ax.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OHelper.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/RowRange.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Cbind.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtA.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/At.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/scala/org/apache/mahout/h2obindings/drm/CheckpointedDrmH2O.scala&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OHdfs.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/ABt.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewScalar.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/drm/H2ODrm.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/TimesRightMatrix.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/MapBlock.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/H2OContext.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AewB.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/AtB.java&lt;/li&gt;
	&lt;li&gt;h2o/src/main/java/org/apache/mahout/h2obindings/ops/Atx.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14123798" author="andrew_palumbo" created="Sat, 6 Sep 2014 00:31:29 +0100"  >&lt;p&gt;Looks good Anand,  we&apos;ll probably want to update the scaladocs in the future, but I think this is done for now.&lt;/p&gt;</comment>
                            <comment id="14123800" author="andrew_palumbo" created="Sat, 6 Sep 2014 00:33:47 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=avati&quot; class=&quot;user-hover&quot; rel=&quot;avati&quot;&gt;Anand Avati&lt;/a&gt; Thanks alot for the great contribution!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Apr 2014 07:12:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>384185</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzo1hj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>384453</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>