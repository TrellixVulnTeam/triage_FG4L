org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel.KDDCupDataModel(File,boolean,double)
org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper.setup(Mapper.Context)
org.apache.mahout.cf.taste.hadoop.als.SolveImplicitFeedbackMapper.createSharedInstance(Context)
org.apache.mahout.cf.taste.hadoop.similarity.item.ItemSimilarityJob.MostSimilarItemPairsMapper.setup(Context)
org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator.SamplingLongPrimitiveIterator(RandomWrapper,LongPrimitiveIterator,double)
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.changeDatum(double)
org.apache.mahout.cf.taste.impl.common.WeightedRunningAverage.changeDatum(double,double)
org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator.evaluate(RecommenderBuilder,DataModelBuilder,DataModel,double,double)
org.apache.mahout.cf.taste.impl.eval.GenericRecommenderIRStatsEvaluator.evaluate(RecommenderBuilder,DataModelBuilder,DataModel,IDRescorer,int,double,double)
org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl.IRStatisticsImpl(double,double,double,double,double)
org.apache.mahout.cf.taste.impl.model.cassandra.CassandraDataModel.CassandraDataModel(String,int,String)
org.apache.mahout.cf.taste.impl.model.mongodb.MongoDBDataModel.checkData(String,Iterable<List<String>>,List<String>,String,boolean)
org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy.SamplingCandidateItemsStrategy(int,int,int,int,int)
org.apache.mahout.cf.taste.impl.recommender.TopItems.getTopItems(int,LongPrimitiveIterator,IDRescorer,Estimator<Long>,Long)
org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity.ItemItemSimilarity.ItemItemSimilarity(long,long,double)
org.apache.mahout.cf.taste.impl.similarity.GenericUserSimilarity.UserUserSimilarity.UserUserSimilarity(long,long,double)
org.apache.mahout.classifier.df.data.DataConverter.convert(CharSequence)
org.apache.mahout.classifier.df.data.DataLoader.generateDataset(CharSequence,boolean,FileSystem,Path)
org.apache.mahout.classifier.df.data.DataLoader.generateDataset(CharSequence,boolean,String[])
org.apache.mahout.classifier.df.data.DataLoader.loadData(Dataset,FileSystem,Path)
org.apache.mahout.classifier.df.data.DataLoader.loadData(Dataset,String[])
org.apache.mahout.classifier.df.data.DataLoader.parseString(Attribute[],Set<String>[],String,CharSequence,boolean)
org.apache.mahout.classifier.df.data.Dataset.valueOf(int,String)
org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper.configure(Long,int,int,int)
org.apache.mahout.classifier.df.mapreduce.partial.TreeID.TreeID()
org.apache.mahout.classifier.df.mapreduce.partial.TreeID.TreeID(int,int)
org.apache.mahout.clustering.kmeans.RandomSeedGenerator.buildRandom(Configuration,Path,Path,int,DistanceMeasure)
org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver.configureOptionsForWorkers(Configuration,int,int,float,int,float,boolean,boolean,float,int,String,String,int,int,String,boolean)
org.apache.mahout.common.iterator.SamplingIterator.SamplingIterator(RandomWrapper,Iterator<?extendsT>,T,double)
org.apache.mahout.math.als.AlternatingLeastSquaresSolver.addLambdaTimesNuiTimesE(Matrix,double,int)
org.apache.mahout.math.als.AlternatingLeastSquaresSolver.createMiIi(Iterable<Vector>,Vector,int)
org.apache.mahout.math.als.AlternatingLeastSquaresSolver.createRiIiMaybeTransposed(Vector)
org.apache.mahout.math.als.AlternatingLeastSquaresSolver.solve(Iterable<Vector>,Vector,Vector,double,int)
org.apache.mahout.math.als.AlternatingLeastSquaresSolver.solve(Matrix,Matrix)
org.apache.mahout.math.CholeskyDecomposition.CholeskyDecomposition(Matrix,boolean)
org.apache.mahout.math.neighborhood.BruteSearch.search(Vector,int)
org.apache.mahout.math.neighborhood.FastProjectionSearch.FastProjectionSearch(DistanceMeasure,int,int)
org.apache.mahout.math.neighborhood.ProjectionSearch.ProjectionSearch(DistanceMeasure,int,int)
org.apache.mahout.math.neighborhood.SearchQualityTest.StripWeight.apply(WeightedThing<Vector>,Vector)
org.apache.mahout.math.random.ChineseRestaurant.ChineseRestaurant(double,double)
org.apache.mahout.math.random.Empirical.Empirical(boolean,boolean,int,double)
org.apache.mahout.math.Varint.readUnsignedVarInt(DataInput)
org.apache.mahout.math.Varint.readUnsignedVarLong(DataInput)
org.apache.mahout.utils.SplitInput.validate()
org.apache.mahout.utils.vectors.lucene.LuceneIterator.LuceneIterator(IndexReader,String,String,TermInfo,Weight,double)
org.apache.mahout.utils.vectors.lucene.LuceneIterator.LuceneIterator(IndexReader,String,String,TermInfo,Weight,double,double)
