org.apache.mahout.clustering.TestClusterDumper.testKmeansDSVD()
org.apache.mahout.clustering.TestClusterDumper.testKmeansDSVD2()
org.apache.mahout.math.decomposer.lanczos.LanczosSolver.solve(VectorIterable,int,Matrix,List<Double>,Double,boolean)
org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver.testEigenvalueCheck()
org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver.testLanczosSolver()
org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver.testLanczosSolverSymmetric()
org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver.timeLanczos(Matrix,Matrix,int,boolean)
org.apache.mahout.math.decomposer.SolverTest.assertEigen(Matrix,VectorIterable,int,double,boolean)
org.apache.mahout.math.decomposer.SolverTest.randomHierarchicalMatrix(int,int,boolean)
org.apache.mahout.math.decomposer.SolverTest.randomHierarchicalSymmetricMatrix(int)
org.apache.mahout.math.decomposer.SolverTest.randomSequentialAccessSparseMatrix(int,int,int,int,double)
org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.serializeOutput(Matrix,List<Double>,Double,Path)
org.apache.mahout.math.hadoop.decomposer.EigenVector.EigenVector(DenseVector,double,double,int)
org.apache.mahout.math.hadoop.decomposer.EigenVector.EigenVector(Vector,double,double,int)
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.pruneEigens.compare(Map.Entry<MatrixSlice,EigenStatus>,MatrixSlice,EigenStatus,Map.Entry<MatrixSlice,EigenStatus>,MatrixSlice,EigenStatus)
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.pruneEigens(Map<MatrixSlice,EigenStatus>,MatrixSlice,EigenStatus)
org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob.saveCleanEigens(Configuration,Collection<Map.Entry<MatrixSlice,EigenStatus>>,Map.Entry<MatrixSlice,EigenStatus>,MatrixSlice,EigenStatus)
org.apache.mahout.math.hadoop.decomposer.TestDistributedLanczosSolverCLI.testDistributedLanczosSolverCLI()
org.apache.mahout.math.matrix.DoubleMatrix1D.assign(DoubleMatrix1D)
org.apache.mahout.math.matrix.DoubleMatrix1D.toVector()
org.apache.mahout.math.matrix.impl.SparseDoubleMatrix1D.SparseDoubleMatrix1D(int,AbstractIntDoubleMap,int,int)
org.apache.mahout.math.matrix.impl.SparseDoubleMatrix1D.toVector.apply(int,double)
org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition.cdiv(double,double,double,double)
org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition.EigenvalueDecomposition(double[][])
org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition.EigenvalueDecomposition(DoubleMatrix2D)
org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition.EigenvalueDecomposition(Matrix)
org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition.isSymmetric(double[][])
org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition.toArray(DoubleMatrix2D)
org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition.toArray(Matrix)
org.apache.mahout.math.matrix.linalg.Property.checkSquare(AbstractMatrix2D)
org.apache.mahout.math.matrix.linalg.Property.checkSquare(Matrix)
