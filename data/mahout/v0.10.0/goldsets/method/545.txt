org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.AdaptiveLogisticRegression()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.AdaptiveLogisticRegression(int,int,PriorFunction)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.auc()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.close()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.getBest()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.getBuffer()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.getEp()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.getSeed()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.numFeatures()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setAucEvaluator(OnlineAuc)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setBest(State<Wrapper,CrossFoldLearner>,Wrapper,CrossFoldLearner)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setBest(State<Wrapper>,Wrapper)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setEp(EvolutionaryProcess<Wrapper,CrossFoldLearner>,Wrapper,CrossFoldLearner)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setEp(EvolutionaryProcess<Wrapper>,Wrapper)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setInterval(int)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setInterval(int,int)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setSeed(State<Wrapper,CrossFoldLearner>,Wrapper,CrossFoldLearner)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setSeed(State<Wrapper>,Wrapper)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.setupOptimizer(int)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.TrainingExample.getGroupKey()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.TrainingExample.TrainingExample()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.trainWithBufferedExamples()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.trainWithBufferedExamples.apply(Payload<CrossFoldLearner>,CrossFoldLearner,double[])
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.trainWithBufferedExamples.apply(Wrapper,double[])
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.freeze(State<Wrapper,CrossFoldLearner>,Wrapper,CrossFoldLearner)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.freeze(State<Wrapper>,Wrapper)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.readFields(DataInput)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.setMappings(State<Wrapper,CrossFoldLearner>,Wrapper,CrossFoldLearner)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.setMappings(State<Wrapper>,Wrapper)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.update(double[])
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.Wrapper()
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.Wrapper(int,int,PriorFunction)
org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper.write(DataOutput)
org.apache.mahout.classifier.sgd.CrossFoldLearner.setPrior(PriorFunction)
org.apache.mahout.classifier.sgd.ElasticBandPrior.ElasticBandPrior(double)
org.apache.mahout.classifier.sgd.ElasticBandPrior.logP(double)
org.apache.mahout.classifier.sgd.L2.L2()
org.apache.mahout.classifier.sgd.L2.L2(double)
org.apache.mahout.classifier.sgd.ModelSerializer.AdaptiveLogisticRegressionTypeAdapter.deserialize(JsonElement,Type,JsonDeserializationContext)
org.apache.mahout.classifier.sgd.ModelSerializer.AdaptiveLogisticRegressionTypeAdapter.serialize(AdaptiveLogisticRegression,Type,JsonSerializationContext)
org.apache.mahout.classifier.sgd.ModelSerializer.asArray(JsonObject,String)
org.apache.mahout.classifier.sgd.ModelSerializer.EvolutionaryProcessTypeAdapter.serialize(EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>,AdaptiveLogisticRegression.Wrapper,Type,JsonSerializationContext)
org.apache.mahout.classifier.sgd.ModelSerializer.EvolutionaryProcessTypeAdapter.serialize(EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper,CrossFoldLearner>,AdaptiveLogisticRegression.Wrapper,CrossFoldLearner,Type,JsonSerializationContext)
org.apache.mahout.classifier.sgd.ModelSerializer.$GenericMethodDeclaration$()
org.apache.mahout.classifier.sgd.ModelSerializer.loadJsonFrom(Reader,Class<?extendsAbstractVectorClassifier>,AbstractVectorClassifier)
org.apache.mahout.classifier.sgd.ModelSerializer.loadJsonFrom(Reader,Class<T>,T)
org.apache.mahout.classifier.sgd.ModelSerializer.main(String[])
org.apache.mahout.classifier.sgd.ModelSerializer.readBinary(InputStream,Class<T>,T)
org.apache.mahout.classifier.sgd.ModelSerializer.StateTypeAdapter.serialize(State<AdaptiveLogisticRegression.Wrapper>,AdaptiveLogisticRegression.Wrapper,Type,JsonSerializationContext)
org.apache.mahout.classifier.sgd.ModelSerializer.StateTypeAdapter.serialize(State<AdaptiveLogisticRegression.Wrapper,CrossFoldLearner>,AdaptiveLogisticRegression.Wrapper,CrossFoldLearner,Type,JsonSerializationContext)
org.apache.mahout.classifier.sgd.ModelSerializerTest.adaptiveLogisticRegressionRoundTrip()
org.apache.mahout.classifier.sgd.ModelSerializerTest.crossFoldLearnerRoundTrip()
org.apache.mahout.classifier.sgd.ModelSerializerTest.onlineAucRoundtrip()
org.apache.mahout.classifier.sgd.ModelSerializerTest.onlineLogisticRegressionRoundTrip()
org.apache.mahout.classifier.sgd.ModelSerializerTest.roundTrip(T,Class<T>,T)
org.apache.mahout.classifier.sgd.ModelSerializerTest.testMappingDeserialization()
org.apache.mahout.classifier.sgd.ModelSerializerTest.testSoftLimitDeserialization()
org.apache.mahout.classifier.sgd.ModelSerializer.VectorTypeAdapter.createInstance(Type)
org.apache.mahout.classifier.sgd.ModelSerializer.writeBinary(String,AdaptiveLogisticRegression)
org.apache.mahout.classifier.sgd.ModelSerializer.writeBinary(String,CrossFoldLearner)
org.apache.mahout.classifier.sgd.ModelSerializer.writeBinary(String,OnlineLogisticRegression)
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.copy()
org.apache.mahout.classifier.sgd.OnlineLogisticRegression.OnlineLogisticRegression()
org.apache.mahout.classifier.sgd.PolymorphicWritable.read(DataInput,Class<?extendsT>,T)
org.apache.mahout.classifier.sgd.PolymorphicWritable.write(DataOutput,T)
org.apache.mahout.classifier.sgd.TPrior.TPrior(double)
org.apache.mahout.ep.EvolutionaryProcess.add(State<T>,T)
org.apache.mahout.ep.EvolutionaryProcess.add(State<T,U>,T,U)
org.apache.mahout.ep.EvolutionaryProcess.EarlyTerminationException.EarlyTerminationException(String)
org.apache.mahout.ep.EvolutionaryProcess.EvolutionaryProcess(int,int,State<T>,T)
org.apache.mahout.ep.EvolutionaryProcess.EvolutionaryProcess(int,int,State<T,U>,T,U)
org.apache.mahout.ep.EvolutionaryProcess.getPopulation()
org.apache.mahout.ep.EvolutionaryProcess.getPopulationSize()
org.apache.mahout.ep.EvolutionaryProcess.initializePopulation(int,State<T>,T)
org.apache.mahout.ep.EvolutionaryProcess.initializePopulation(int,State<T,U>,T,U)
org.apache.mahout.ep.EvolutionaryProcess.mutatePopulation(int)
org.apache.mahout.ep.EvolutionaryProcess.parallelDo.call()
org.apache.mahout.ep.EvolutionaryProcess.parallelDo(Function<Payload<U>>,Payload<U>,U)
org.apache.mahout.ep.EvolutionaryProcess.parallelDo(Function<T>,T)
org.apache.mahout.ep.EvolutionaryProcessTest.testConverges()
org.apache.mahout.ep.EvolutionaryProcessTest.testConverges.apply(Foo,double[])
org.apache.mahout.ep.EvolutionaryProcessTest.testConverges.apply(Payload<Double>,Double,double[])
org.apache.mahout.ep.Mapping.Exponential.Exponential()
org.apache.mahout.ep.Mapping.Exponential.Exponential(double)
org.apache.mahout.ep.Mapping.Identity.Identity()
org.apache.mahout.ep.Mapping.LogLimit.LogLimit()
org.apache.mahout.ep.Mapping.LogLimit.LogLimit(double,double)
org.apache.mahout.ep.Mapping.Mapping()
org.apache.mahout.ep.Mapping.SoftLimit.apply(double)
org.apache.mahout.ep.Mapping.SoftLimit.SoftLimit()
org.apache.mahout.ep.Mapping.SoftLimit.SoftLimit(double,double,double)
org.apache.mahout.ep.State.compareTo(State<T>,T)
org.apache.mahout.ep.State.compareTo(State<T,U>,T,U)
org.apache.mahout.ep.State.equals(Object)
org.apache.mahout.ep.State.getPayload()
org.apache.mahout.ep.State.getStep()
org.apache.mahout.ep.State.getValue()
org.apache.mahout.ep.State.mutate()
org.apache.mahout.ep.State.State()
org.apache.mahout.ep.State.toString()
org.apache.mahout.ep.ThreadedEvolutionaryProcess.EvalTask.EvalTask(Function,State<?>)
org.apache.mahout.ep.ThreadedEvolutionaryProcess.EvalTask.EvalTask(Function,State<?,?>)
org.apache.mahout.ep.ThreadedEvolutionaryProcess.optimize(Function,int,long,int)
org.apache.mahout.ep.ThreadedEvolutionaryProcess.setMap(int,Mapping)
org.apache.mahout.ep.ThreadedEvolutionaryProcess.ThreadedEvolutionaryProcess(int)
org.apache.mahout.math.MatrixWritable.MatrixWritable()
org.apache.mahout.math.MatrixWritable.readMatrix(DataInput)
org.apache.mahout.math.MatrixWritable.writeMatrix(DataOutput,Matrix)
org.apache.mahout.math.SparseMatrix.SparseMatrix(int[])
org.apache.mahout.math.SparseMatrix.SparseMatrix(int,int)
org.apache.mahout.math.stats.GlobalOnlineAuc.addSample(int,double)
org.apache.mahout.math.stats.GlobalOnlineAuc.addSample(int,String,double)
org.apache.mahout.math.stats.GlobalOnlineAuc.GlobalOnlineAuc()
org.apache.mahout.math.stats.GlobalOnlineAuc.setWindowSize(int)
org.apache.mahout.math.VectorWritable.readVector(DataInput)
org.apache.mahout.math.VectorWritable.writeVector(DataOutput,Vector)
org.apache.mahout.math.VectorWritable.writeVector(DataOutput,Vector,boolean)
