<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:07:39 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4845/DERBY-4845.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4845] Improve the dependency tracking for our build targets</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4845</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby is supposed to have an incremental build. That is, if you change a file, then the following command should recompile the file:&lt;/p&gt;

&lt;p&gt;   ant all&lt;/p&gt;

&lt;p&gt;There are several places in the graph of Derby build targets where this is not true. If you change a file in certain packages, a subsequent &quot;ant all&quot; won&apos;t notice the change. This issue is a place where we can track these bugs.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12477235">DERBY-4845</key>
            <summary>Improve the dependency tracking for our build targets</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Wed, 13 Oct 2010 14:34:42 +0100</created>
                <updated>Thu, 18 Jul 2013 10:45:41 +0100</updated>
                                            <version>10.8.1.2</version>
                                                    <component>Build tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12921074" author="dagw" created="Thu, 14 Oct 2010 19:45:28 +0100"  >&lt;p&gt;I have noticed that this is the case for package iapi/util/*.java. There may be others.&lt;/p&gt;</comment>
                            <comment id="12921619" author="dagw" created="Sat, 16 Oct 2010 03:07:50 +0100"  >&lt;p&gt;Committed a small fix to the build file for package iapi/util/ which makes &quot;ant all&quot; pick up changes in files: svn1023167&lt;/p&gt;</comment>
                            <comment id="12921694" author="knutanders" created="Sat, 16 Oct 2010 15:11:54 +0100"  >&lt;p&gt;I used the attached script to find out which files were not picked up by an incremental build. Here&apos;s what I found:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Modifications to this file are detected by incremental builds, but it will be compiled using another build target than what&apos;s used by full builds. Full builds will compile against Java 1.4.2 libraries, whereas incremental builds will compile against the JSR-169 stubs. Incremental builds fail because the class calls ResultSet.getBigDecimal(int), which is not part of JSR-169.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;java/engine/org/apache/derby/jdbc/EmbedXAResource.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/jdbc/JDBC.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/transaction/TransactionControl.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/transaction/TransactionListener.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/security/SecurityUtil.java&lt;/li&gt;
	&lt;li&gt;java/drda/org/apache/derby/mbeans/drda/NetworkServerMBean.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Modifications to these files are not detected by incremental builds.&lt;/p&gt;

&lt;p&gt;In addition, none of the files under java/demo/localcal and java/demo/scores are picked up by incremental builds, but they are not compiled by full builds either.&lt;/p&gt;</comment>
                            <comment id="12921735" author="knutanders" created="Sat, 16 Oct 2010 19:56:36 +0100"  >&lt;p&gt;Here&apos;s a patch for the issue with tools/i18n/LocalizedResource.java.&lt;/p&gt;

&lt;p&gt;M       java/tools/build.xml&lt;/p&gt;

&lt;p&gt;The classes in impl/tools depend on the classes in iapi/tools, but there are no dependencies the other way around. Therefore, turn around the order of the targets and build iapi before impl. This change ensures that LocalizedResource.java is always compiled against the JSR-169 libraries, so it will now fail to compile both in full builds and in incremental builds.&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java&lt;/p&gt;

&lt;p&gt;Call getObject() instead of getBigDecimal() when retrieving the value of a DECIMAL column. Since getObject() is part of JSR-169, this will make the class compilable again. getObject() returns a java.math.BigDecimal, so there should be no change for the embedded driver and the client driver. The JSR-169 driver throws an exception when getObject() is called on a DECIMAL column, but LocalizedResource already does introspection to find out if it&apos;s safe to retrieve BigDecimal values. On JSR-169 it&apos;ll fall back to getString() as it did before.&lt;/p&gt;</comment>
                            <comment id="12921977" author="knutanders" created="Mon, 18 Oct 2010 07:43:36 +0100"  >&lt;p&gt;Tests ran cleanly with tools-i18n.diff. Committed revision 1023662.&lt;/p&gt;</comment>
                            <comment id="12922760" author="dagw" created="Tue, 19 Oct 2010 23:35:06 +0100"  >&lt;p&gt;Thanks, Knut! Another build anomaly I noticed:&lt;br/&gt;
a) ant clobber&lt;br/&gt;
b) introduce a syntax error to a file in org.apache.derby.iapi.util, e.g. ByteArray.java&lt;br/&gt;
c) ant all, build stops&lt;br/&gt;
d) correct error&lt;br/&gt;
e) ant all now fails with this error:&lt;br/&gt;
C:\cygwin\home\dag\java\sb\sb1\generated\java\org\apache\derby\impl\sql\compile\SQLParser.java:25: package org.apache.derby.iapi.sql does not exist&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; import org.apache.derby.iapi.sql.Statement;&lt;/p&gt;

&lt;p&gt;f) ant clobber all makes all ok again&lt;/p&gt;</comment>
                            <comment id="12928271" author="rhillegas" created="Thu, 4 Nov 2010 16:40:30 +0000"  >&lt;p&gt;Attaching derby-4845-01-aa-removeParserPrep.diff. This patch cleans up an asymmetry in the generation of Derby&apos;s grammars. Committed at subversion revision 1031069.&lt;/p&gt;

&lt;p&gt;This patch should fix certain situations in which you see the following:&lt;/p&gt;

&lt;p&gt;1) You build the codeline from scratch.&lt;/p&gt;

&lt;p&gt;2) But the build dies on a compile-time error.&lt;/p&gt;

&lt;p&gt;3) You fix the compile-time error and try &quot;ant all&quot; without doing a clobber, hoping for an incremental finish to the interrupted build.&lt;/p&gt;

&lt;p&gt;4) But now the build dies on unsatisfied references in the generated grammars.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      java/tools/org/apache/derby/impl/tools/build.xml&lt;/p&gt;

&lt;p&gt;Make the tools build depend on generation of the ij grammar the same way that the sql interpreter build depends on generation of the sql grammar.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      build.xml&lt;/p&gt;

&lt;p&gt;Stop generating the grammars before they are really needed.&lt;/p&gt;</comment>
                            <comment id="12928319" author="rhillegas" created="Thu, 4 Nov 2010 19:38:33 +0000"  >&lt;p&gt;Attaching derby-4845-02-aa-flipUtilsAndTypes.diff. This patch fixes a build dependency problem which surfaced when I sync&apos;d with the head of the trunk. Committed at subversion revision 1031174.&lt;/p&gt;

&lt;p&gt;I think that the problem was caused by some submission which made the compilation of ...iapi.util start compiling what&apos;s in iapi.types. That latter directory has a special build target which compiles SqlXmlUtil with a special classpath which includes xercesImpl.jar. You can&apos;t just compile the contents of iapi.types with the ordinary jdk1.4 classpath.&lt;/p&gt;

&lt;p&gt;The solution was to flip the order in which we compile ...iapi.util and ...iapi.types. Now we compile ...iapi.types first.&lt;/p&gt;

&lt;p&gt;Hopefully this patch doesn&apos;t destabilize someone else&apos;s build.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/build.xml&lt;/p&gt;</comment>
                            <comment id="12998479" author="knutanders" created="Wed, 23 Feb 2011 18:09:06 +0000"  >&lt;p&gt;One improvement we could make, is changing the ant javac targets so that they don&apos;t compile java files that are not explicitly added to the list of files to compile. The way to do this is described here: &lt;a href=&quot;http://ant.apache.org/manual/Tasks/javac.html#srcdirnote&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://ant.apache.org/manual/Tasks/javac.html#srcdirnote&lt;/a&gt; (basically, just add sourcepath=&quot;&quot; to the javac targets). If we take that approach, the build will fail when it comes across a dependency that we haven&apos;t specified in the build script.&lt;/p&gt;</comment>
                            <comment id="13138222" author="knutanders" created="Fri, 28 Oct 2011 12:06:02 +0100"  >&lt;p&gt;One thing that&apos;s causing problems for the dependency tracking is that we compile the impl classes in the engine before we build the iapi classes. Since the impl classes depend on the iapi classes, most of the iapi classes will already have been built when the iapi build target is invoked. Building iapi before impl is the right way to do it, but that doesn&apos;t work currently because of some ugly dependencies from iapi to impl that have snuck in and cause some impl classes to be built using the wrong classpath if built that way.&lt;/p&gt;

&lt;p&gt;It may be a good, incremental improvement if we remove the dependencies from iapi to impl, and then make iapi being built before impl. Once that&apos;s done, we can set sourcepath=&quot;&quot; on the iapi target (see previous comment) to prevent accidental reintroduction of dependencies on impl classes.&lt;/p&gt;

&lt;p&gt;The iapi classes currently have many dependencies on implementation classes. Here are three patches that remove some of the dependencies:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;d4585-iapi-statementnode.diff:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The implementation class StatementNode is used in the signatures of methods in the TriggerDescriptor and DataDictionary iapi interfaces. The patch changes the signatures to use the iapi interface Visitable instead of StatementNode. In some cases that&apos;s specific enough. In other cases, the impl classes that use these methods need to cast the return value to StatementNode now. Actually, most callers of the methods already cast the return value to StatementNode (which suggests that the a less specific interface has been used in the signature before too) or to sub-classes of StatementNode, and didn&apos;t need to be changed.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;d4845-iapi-resultsetstatistics.diff:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To apply this patch, first run: svn mv java/engine/org/apache/derby/impl/sql/execute/rts/ResultSetStatistics.java java/engine/org/apache/derby/iapi/sql/execute/ResultSetStatistics.java&lt;/p&gt;

&lt;p&gt;The interface ResultSetStatistics lives in the impl sub-tree. However, it is used in the signature of the iapi interface ResultSetStatisticsFactory. It is also the parent of the iapi interface XPLAINVisitor. This suggests that the interface really belongs in iapi and not in impl. The patch moves the interface to iapi and updates import statements to point to the new location.&lt;/p&gt;

&lt;p&gt;d4845-iapi-dependablefinder.diff:&lt;/p&gt;

&lt;p&gt;The impl classes DDdependableFinder and DDColumnDependableFinder are instantiated directly by the iapi class TupleDescriptor and many of its sub-classes. Since the DD* classes are specific to the data dictionary implementation, the patch adds creator methods to the DataDictionary interface and moves the actual creation of these instances into DataDictionaryImpl. Then we don&apos;t need to reference these two implementation classes from iapi classes.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with these three patches.&lt;/p&gt;</comment>
                            <comment id="13142120" author="knutanders" created="Wed, 2 Nov 2011 13:05:21 +0000"  >&lt;p&gt;Committed d4845-iapi-resultsetstatistics.diff with revision 1196542.&lt;br/&gt;
Committed d4845-iapi-statementnode.diff with revision 1196560.&lt;br/&gt;
Committed d4845-iapi-dependablefinder.diff with revision 1196562.&lt;/p&gt;</comment>
                            <comment id="13143908" author="knutanders" created="Fri, 4 Nov 2011 10:52:24 +0000"  >&lt;p&gt;The NodeFactory class depends on the implementation classes QueryTreeNode, ResultColumnList and ResultSetNode. There&apos;s even a comment saying that these classes shouldn&apos;t have been used there:&lt;/p&gt;

&lt;p&gt;/* Strictly speaking we shouldn&apos;t import classes under the impl hierarchy here&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;but this is work in progress.&lt;/li&gt;
	&lt;li&gt;manish - Wed Mar 28 13:05:19 PST 2001&lt;br/&gt;
 */&lt;br/&gt;
import  org.apache.derby.impl.sql.compile.QueryTreeNode;&lt;br/&gt;
import org.apache.derby.impl.sql.compile.ResultColumnList;&lt;br/&gt;
import org.apache.derby.impl.sql.compile.ResultSetNode;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The proper fix is to get rid of NodeFactory completely (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;), but that&apos;s a bigger task. For now, we can make some smaller changes to remove its dependencies on impl classes.&lt;/p&gt;

&lt;p&gt;The attached patch (d4845-iapi-slimmer-nodefactory.diff) is a first step. It moves the method mapTableAsVTI() into FromBaseTable, the only class that ever calls that method. Similarly, it moves getCreateAliasNode() into the parser (according to the code comments, it was carved out of the parser in order to support ALTER PUBLICATION, which isn&apos;t supported by Derby).&lt;/p&gt;

&lt;p&gt;By moving these methods out of NodeFactory and into the impl classes that use them, the dependencies on ResultColumnList and ResultSetNode go away.&lt;/p&gt;

&lt;p&gt;All the regression tests passed with the patch.&lt;/p&gt;

&lt;p&gt;(One small change in the patch that may look unrelated, is the signature change for MethodCallNode.addParms(). Now it accepts java.util.List instead of java.util.Vector. This was done so that we didn&apos;t have to move the emptyVector field from NodeFactory to FromBaseTable. With the signature change, we could use Collections.EMPTY_LIST instead, and simply remove the emptyVector field from NodeFactory instead of moving it into FromBaseTable.)&lt;/p&gt;</comment>
                            <comment id="13145332" author="knutanders" created="Mon, 7 Nov 2011 10:52:34 +0000"  >&lt;p&gt;Committed d4845-iapi-slimmer-nodefactory.diff with revision 1198695.&lt;/p&gt;</comment>
                            <comment id="13145538" author="knutanders" created="Mon, 7 Nov 2011 14:56:30 +0000"  >&lt;p&gt;The previous commit removed references to ResultColumnList and ResultSetNode from NodeFactory, but it still references the impl class QueryTreeNode, which is the return type for the getNode() methods.&lt;/p&gt;

&lt;p&gt;To avoid exposing the impl class through iapi, I&apos;ve added a Node interface that QueryTreeNode implements and made the getNode() methods return Node instead of QueryTreeNode. See the attached d4845-iapi-nodefactory-getnode.diff patch.&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13146169" author="knutanders" created="Tue, 8 Nov 2011 08:54:30 +0000"  >&lt;p&gt;Committed revision 1199160.&lt;/p&gt;</comment>
                            <comment id="13146401" author="knutanders" created="Tue, 8 Nov 2011 17:04:25 +0000"  >&lt;p&gt;Attaching patch d4845-iapi-unused-imports.diff which removes unused imports in some of the iapi classes. The unused imports included classes in the impl package and caused unnecessary compile-time dependencies on impl from the iapi package.&lt;/p&gt;

&lt;p&gt;Committed revision 1199348.&lt;/p&gt;</comment>
                            <comment id="13146432" author="knutanders" created="Tue, 8 Nov 2011 17:47:52 +0000"  >&lt;p&gt;DataDictionaryImpl has a public boolean field called readOnlyUpgrade. This field is accessed directly, also from iapi code which needs to cast the data dictionary instance to DataDictionaryImpl.&lt;/p&gt;

&lt;p&gt;The attached patch d4845-iapi-readOnlyUpgrade.diff adds a method called isReadOnlyUpgrade() to the DataDictionary interface so that we don&apos;t need to cast the instance to the implementation class in order to access the field.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13147573" author="knutanders" created="Thu, 10 Nov 2011 09:17:16 +0000"  >&lt;p&gt;Committed d4845-iapi-readOnlyUpgrade.diff with revision 1200232.&lt;/p&gt;</comment>
                            <comment id="13147662" author="knutanders" created="Thu, 10 Nov 2011 13:13:03 +0000"  >&lt;p&gt;The previous commit broke the build for those who have&lt;br/&gt;
jsr169compile.classpath configured:&lt;br/&gt;
&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/201111.mbox/%3C20111110092611.21938.qmail%40tyr72%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/201111.mbox/%3C20111110092611.21938.qmail%40tyr72%3E&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason seems to be that dependencies on Java SE has sneaked into&lt;br/&gt;
code that&apos;s supposed to work on CDC/Foundation Profile. It didn&apos;t use&lt;br/&gt;
to fail at compile time before because the classes were compiled by a&lt;br/&gt;
different target than intended. When we removed some implicit build&lt;br/&gt;
dependencies in the previous patch, these classes ended up being&lt;br/&gt;
compiled using the intended target, which used a stricter compile&lt;br/&gt;
classpath than the implicit target used before.&lt;/p&gt;

&lt;p&gt;This problem could also be seen before the previous commit, by&lt;br/&gt;
touching java/engine/org/apache/derby/impl/db/SlaveDatabase.java and&lt;br/&gt;
doing an incremental build on an otherwise fully compiled source tree.&lt;br/&gt;
This is exactly the kind of problems we want to fix in this JIRA&lt;br/&gt;
issue.&lt;/p&gt;

&lt;p&gt;I think this isn&apos;t just a build problem, but also a run-time problem&lt;br/&gt;
on CDC/FP. For example, the following code raises a&lt;br/&gt;
java.lang.NoClassDefFoundError with Derby 10.8.2.2 on Oracle Java ME&lt;br/&gt;
Embedded Client:&lt;/p&gt;

&lt;p&gt;EmbeddedSimpleDataSource ds = new EmbeddedSimpleDataSource();&lt;br/&gt;
ds.setDatabaseName(&quot;wombat&quot;);&lt;br/&gt;
ds.setCreateDatabase(&quot;create&quot;);&lt;br/&gt;
ds.getConnection().close();&lt;/p&gt;

&lt;p&gt;ds.setCreateDatabase(null);&lt;br/&gt;
ds.setDatabaseName(null);&lt;br/&gt;
ds.setShutdownDatabase(&quot;shutdown&quot;);&lt;br/&gt;
ds.setConnectionAttributes(&quot;deregister=true&quot;);&lt;br/&gt;
ds.getConnection();&lt;/p&gt;

&lt;p&gt;When the attached patch is applied, it changes to the expected&lt;br/&gt;
exception: java.sql.SQLException: Derby system shutdown.&lt;/p&gt;

&lt;p&gt;Here&apos;s a description of the changes in d4845-buildbreak.diff:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/db/SlaveDatabase.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This class is supposed to be compiled against CDC/FP libraries (and&lt;br/&gt;
now it actually is), but it references java.sql.Driver and&lt;br/&gt;
java.sql.DriverManager, which are not available on that platform. The&lt;br/&gt;
patch changes the code to use InternalDriver to shut down the&lt;br/&gt;
database. (The original code didn&apos;t cause any run-time failures on&lt;br/&gt;
CDC/FP because it the code is wrapped in a try/catch that ignores all&lt;br/&gt;
exceptions.)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/reference/Limits.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;DataDictionaryImpl imported LOBStoredProcedure in order to get a&lt;br/&gt;
constant. Since LOBStoredProcedure is not supposed to work on CDC/FP,&lt;br/&gt;
whereas DataDictionaryImpl is, DataDictionaryImpl shouldn&apos;t reference&lt;br/&gt;
it directly. The patch moves the constants to the Limits interface so&lt;br/&gt;
that DataDictionaryImpl doesn&apos;t have to import LOBStoredProcedure.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;java/engine/org/apache/derby/jdbc/AutoloadedDriver.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/jdbc/InternalDriver.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;InternalDriver calls AutoloadedDriver.setDeregister(), but it should&lt;br/&gt;
not reference code that only works on Java SE, since it is supposed to&lt;br/&gt;
work on CDC/FP. The patch moves the methods setDeregister() and&lt;br/&gt;
getDeregister() to InternalDriver and lets AutoloadedDriver fetch this&lt;br/&gt;
info from InternalDriver instead.&lt;/p&gt;


&lt;p&gt;The build works again with jsr169compile.classpath set when the patch&lt;br/&gt;
is applied. No problems were found when running suites.All and&lt;br/&gt;
derbyall.&lt;/p&gt;

&lt;p&gt;Committed revision 1200293.&lt;/p&gt;</comment>
                            <comment id="13155037" author="knutanders" created="Tue, 22 Nov 2011 11:46:02 +0000"  >&lt;p&gt;The impl.jdbc.Util class is used by many of the brokered JDBC objects in the iapi.jdbc package. The attached patch, d4845-iapi-stmt-isClosed.diff, removes one usage in BrokeredStatement.isClosed(). That method currently throws a not implemented exception and uses the Util class to generate the exception. The patch instead implements the method in BrokeredStatement and removes the more or less identical overrides in BrokeredStatement40, BrokeredPreparedStatement40 and BrokeredCallableStatement40.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;

&lt;p&gt;Committed revision 1204934.&lt;/p&gt;</comment>
                            <comment id="13155154" author="knutanders" created="Tue, 22 Nov 2011 14:10:04 +0000"  >&lt;p&gt;BrokeredConnection40 imports EmbedConnection40 in order to be able to call some JDBC 4.1 methods. Typically, we would have added the methods to the EngineConnection interface so that we didn&apos;t have to reference the implementation class directly. The problem with these methods was that they had java.util.concurrent.Executor in their signatures, so they couldn&apos;t be put into the EngineConnection interface (because it has to be compilable against the CDC/FP libraries, which don&apos;t have the Executor interface).&lt;/p&gt;

&lt;p&gt;The attached patch, d4845-iapi-brokered-connection.diff, adds a new interface (EngineConnection40) which contains these methods. BrokeredConnection40 and EmbedConnection40 implement the interface. This makes it possible to access the methods from BrokeredConnection40 without casting the underlying connection instance to the implementation class EmbedConnection40.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13155500" author="knutanders" created="Tue, 22 Nov 2011 22:31:56 +0000"  >&lt;p&gt;Committed d4845-iapi-brokered-connection.diff to trunk with revision 1205195.&lt;/p&gt;

&lt;p&gt;Attaching another patch, d4845-iapi-brokered-callable-stmt.diff, which fixes a similar dependency in BrokeredCallableStatement40 by introducing an EngineCallableStatement40 interface and making EmbedCallableStatement40 implement that interface. All regression tests ran cleanly.&lt;/p&gt;</comment>
                            <comment id="13155834" author="knutanders" created="Wed, 23 Nov 2011 12:27:33 +0000"  >&lt;p&gt;Committed d4845-iapi-brokered-callable-stmt.diff to trunk with revision 1205378.&lt;/p&gt;</comment>
                            <comment id="13155976" author="knutanders" created="Wed, 23 Nov 2011 17:29:38 +0000"  >&lt;p&gt;As mentioned in an earlier comment, the impl.jdbc.Util class is used by many of the brokered JDBC objects in the iapi.jdbc package to generate SQLExceptions.&lt;/p&gt;

&lt;p&gt;The attached patch, d4845-iapi-exception-util.diff, makes them stop using the Util class. This is done by creating an iapi interface that SQLExceptionFactory implements, and accessing SQLExceptionFactory through that interface instead of through the Util class.&lt;/p&gt;

&lt;p&gt;All the regression tests passed with the patch.&lt;/p&gt;</comment>
                            <comment id="13156598" author="knutanders" created="Thu, 24 Nov 2011 08:50:16 +0000"  >&lt;p&gt;Committed d4845-iapi-exception-util.diff to trunk with revision 1205753.&lt;/p&gt;</comment>
                            <comment id="13174733" author="knutanders" created="Thu, 22 Dec 2011 10:13:11 +0000"  >&lt;p&gt;d4845-jsr169-nonoptional.diff addresses another issue in the build scripts. Earlier, the JSR-169 specific parts were optional, but now they&apos;re always built. However, the build scripts still model the old world, by compiling the mandatory parts first and the (previously) optional parts last. This adds to the complexity of the scripts, and also causes some redundancies (because some of the previously optional targets are now dependencies of the mandatory targets, but the optional targets are still invoked explicitly later in the build process).&lt;/p&gt;

&lt;p&gt;The patch merges the optional targets with the non-optional ones, so that they get compiled in one go. It also removes the target that rewrites modules.properties for J2ME support, since that information could now be hard-coded in modules.properties.&lt;/p&gt;

&lt;p&gt;I ran the regression tests successfully on both Java 6 and phoneME.&lt;/p&gt;</comment>
                            <comment id="13174738" author="knutanders" created="Thu, 22 Dec 2011 10:19:09 +0000"  >&lt;p&gt;Committed d4845-jsr169-nonoptional.diff with revision 1222151.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12370669">DERBY-2741</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12389357">DERBY-3450</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12477150">DERBY-4841</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12457337" name="check-build.ksh" size="621" author="knutanders" created="Sat, 16 Oct 2010 15:11:54 +0100"/>
                            <attachment id="12503204" name="d4845-buildbreak.diff" size="13013" author="knutanders" created="Thu, 10 Nov 2011 13:13:03 +0000"/>
                            <attachment id="12504819" name="d4845-iapi-brokered-callable-stmt.diff" size="5995" author="knutanders" created="Tue, 22 Nov 2011 22:31:56 +0000"/>
                            <attachment id="12504747" name="d4845-iapi-brokered-connection.diff" size="6935" author="knutanders" created="Tue, 22 Nov 2011 14:10:04 +0000"/>
                            <attachment id="12501274" name="d4845-iapi-dependablefinder.diff" size="11285" author="knutanders" created="Fri, 28 Oct 2011 12:06:02 +0100"/>
                            <attachment id="12504895" name="d4845-iapi-exception-util.diff" size="24859" author="knutanders" created="Wed, 23 Nov 2011 17:29:37 +0000"/>
                            <attachment id="12502758" name="d4845-iapi-nodefactory-getnode.diff" size="23132" author="knutanders" created="Mon, 7 Nov 2011 14:56:30 +0000"/>
                            <attachment id="12502939" name="d4845-iapi-readOnlyUpgrade.diff" size="5901" author="knutanders" created="Tue, 8 Nov 2011 17:47:52 +0000"/>
                            <attachment id="12501273" name="d4845-iapi-resultsetstatistics.diff" size="24455" author="knutanders" created="Fri, 28 Oct 2011 12:06:02 +0100"/>
                            <attachment id="12502382" name="d4845-iapi-slimmer-nodefactory.diff" size="19420" author="knutanders" created="Fri, 4 Nov 2011 10:52:22 +0000"/>
                            <attachment id="12501272" name="d4845-iapi-statementnode.diff" size="14690" author="knutanders" created="Fri, 28 Oct 2011 12:06:02 +0100"/>
                            <attachment id="12504727" name="d4845-iapi-stmt-isClosed.diff" size="5997" author="knutanders" created="Tue, 22 Nov 2011 11:46:02 +0000"/>
                            <attachment id="12502929" name="d4845-iapi-unused-imports.diff" size="3218" author="knutanders" created="Tue, 8 Nov 2011 17:04:25 +0000"/>
                            <attachment id="12508369" name="d4845-jsr169-nonoptional.diff" size="8734" author="knutanders" created="Thu, 22 Dec 2011 10:13:11 +0000"/>
                            <attachment id="12458826" name="derby-4845-01-aa-removeParserPrep" size="969" author="rhillegas" created="Thu, 4 Nov 2010 16:40:30 +0000"/>
                            <attachment id="12458840" name="derby-4845-02-aa-flipUtilsAndTypes.diff" size="757" author="rhillegas" created="Thu, 4 Nov 2010 19:38:33 +0000"/>
                            <attachment id="12457348" name="tools-i18n.diff" size="1365" author="knutanders" created="Sat, 16 Oct 2010 19:56:36 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>17.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Oct 2010 18:45:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24491</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ecf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36142</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>