<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:43:16 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5955/DERBY-5955.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5955] Prepare Derby to run with Compact Profiles (JEP 161)</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5955</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;While waiting for a Java module system (aka project Jigsaw), it has been decided to define a few subsets of the Java SE Platform Specification, cf JEP 161 ( &lt;a href=&quot;http://openjdk.java.net/jeps/161&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjdk.java.net/jeps/161&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;A quote from the JEP: &quot;More broadly, this feature is intended to enable the migration of applications currently built on top of the Java ME Connected Device Configuration (CDC) to appropriate Profiles of the Java SE Platform, part of the long-term effort to converge CDC with Java SE.&quot;&lt;/p&gt;

&lt;p&gt;It would be good if we make Derby to run on such limited profiles. The current proposal places JDBC in Compact Profile 2 (cf. link above), while other libraries used by Derby, e.g. javax.naming (JNDI) are in Profile 3 (larger).&lt;/p&gt;

&lt;p&gt;It would be good if Derby could run on the smallest posible platform, i.e. Profile 2, but that will probably involve some changes to make Derby gracefully limit functionality when some libraries are missing.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12612248">DERBY-5955</key>
            <summary>Prepare Derby to run with Compact Profiles (JEP 161)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Oct 2012 16:56:06 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:22 +0000</updated>
                            <resolved>Wed, 30 Jan 2013 03:53:06 +0000</resolved>
                                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>JDBC</component>
                    <component>Services</component>
                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13495901" author="dagw" created="Tue, 13 Nov 2012 03:35:24 +0000"  >&lt;p&gt;I have run an initial set of tests using Java 8 with CP2. This profile has java.sql and javax.sql, except javax.sql.rowset.&lt;br/&gt;
The first issue I see is that the Derby data sources are implemented with JNDI, which is not included in CP2.&lt;br/&gt;
The EmbeddedSimpleDataSource which was constructed for CD can be used for embedded. Both the XA and connection pooling &lt;br/&gt;
interfaces are in java.sqlx, so it would be nice if we could provide Non JNDI dependent implementations of those too. I&apos;ll have a look to see how hard it would be to factor out JNDI and use it only if it is available (with a JRE &amp;gt;= CP3).&lt;/p&gt;</comment>
                            <comment id="13505497" author="dagw" created="Wed, 28 Nov 2012 14:41:12 +0000"  >&lt;p&gt;Uploading an experimental &quot;monster&quot; proof-of-concept patch.  The main thrust is as follows:&lt;/p&gt;

&lt;p&gt;Refactor the data source heierachies for client and embedded to allow variants that do no require JNDI. These data source have class names starting with &quot;NonJNDI&quot; followed by the usual data source class names, e.g.  &quot;NonJNDIClientXADataSource40&quot;. I used the &quot;40&quot; suffix to classify the class on a par with other JDBC 4.1 classes, there is no &quot;NonJNDIClientXADataSource&quot;.  Please also see the attached class diagrams (*.png).&lt;/p&gt;

&lt;p&gt;To avoid redundant code for the client, I have hoisted more code up into data source base class ClientBaseDataSource. For embedded, I have introduced a similar &quot;EmbeddedBaseDataSource&quot; to allow the old data source classes and the new non-JNDI classes to share implementation code.&lt;/p&gt;

&lt;p&gt;I have introduced interfaces corresponding to plain, XA and connection pooling data sources to allow the tests and user code, and also implementation code in places to avoid excessive casting, e.g.  &quot;ClientDSI&quot;, &quot;ClientConnectionPoolDSI&quot; etc.&lt;/p&gt;

&lt;p&gt;The patch also revamps the data source serialization tests, which haven&apos;t been update since release 10.3 by adding 10_10*.ser data files. Btw, these do not follow the usual &quot;generate from source&quot;, see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5997&quot; title=&quot;Data source serialization tests use checked in binaries instead of using the normal upgrade test framework&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5997&quot;&gt;&lt;del&gt;DERBY-5997&lt;/del&gt;&lt;/a&gt;. Until such time as that is fixed, this patch requires the binary bundle I attach (&quot;derby-5955-ser.zip&quot;; unzip in the directory java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/) to this issue to run the regressions correctly.&lt;/p&gt;

&lt;p&gt;Much of the other changes are in implementation to avoid using the &quot;JNDI-full&quot; classes verbatim in the code without reflection, as this breaks on a Non-JNDI platform.&lt;/p&gt;

&lt;p&gt;Furthermore, the engine, drivers and tests have been modified to detect the absence of JNDI and do the right thing.&lt;/p&gt;

&lt;p&gt;ij also had data source dependencies so some changes there, as well as changes to generate Javadoc for the new classes.&lt;/p&gt;

&lt;p&gt;With the present changes, all regressions ran ok on Java SE 5 and 7, as well as with my build of the JEP 161 Java 8 repository &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. The latter exercises the new &quot;non-JNDI&quot; code.&lt;/p&gt;

&lt;p&gt;Going forward, I&apos;d like to produces smaller patches for review and commit, all the while while keeping the standard SE regression tests running without error. The regressions under JEP 161 Java 8 will only work fully when all the pieces have been committed, though. Does this sound like an acceptable plan?&lt;/p&gt;

&lt;p&gt;At this point I&apos;d like feed-back on my general approach.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://hg.openjdk.java.net/jdk8/profiles&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hg.openjdk.java.net/jdk8/profiles&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13505858" author="mamtas" created="Wed, 28 Nov 2012 20:03:27 +0000"  >&lt;p&gt;Hi Dag, thanks for taking on this big task. If possible, it will be helpful if you can provided a class diagram for embedded and client data sources as they exist in trunk today. It will make it easier to see the changes .Also, I was wondering what tool did you use to create the class diagram? Thanks&lt;/p&gt;</comment>
                            <comment id="13505995" author="dagw" created="Wed, 28 Nov 2012 22:39:10 +0000"  >&lt;p&gt;Good idea, Mamta! I&apos;ll make diagrams for the old ones and upload them. As for tool, I used a hack: a combination of my own parser to extract Java implements/extends info from the all the Derby classes, then Emacs Lisp to select a subset of those dependencies using a regular expression on the class name and convert the data into the &quot;.dot&quot; source file format of Graphviz (&lt;a href=&quot;http://www.graphviz.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.graphviz.org&lt;/a&gt;), which generated the diagrams.&lt;/p&gt;</comment>
                            <comment id="13506413" author="dagw" created="Thu, 29 Nov 2012 11:28:50 +0000"  >&lt;p&gt;Uploaded the ds class graphs without the patch: &quot;old-*.png&quot;.&lt;/p&gt;</comment>
                            <comment id="13506418" author="dagw" created="Thu, 29 Nov 2012 11:48:12 +0000"  >&lt;p&gt;Note that while ReferenceableDataSource is no longer a base class of the embedded data sources (in the new embedded diagram), it still exists as a factory class whose purpose it is to reconstruct a Derby embedded-driver data source object from a JNDI data source reference.&lt;/p&gt;</comment>
                            <comment id="13506474" author="rhillegas" created="Thu, 29 Nov 2012 13:50:26 +0000"  >&lt;p&gt;Thanks, Dag. This looks very promising. The graphs are very helpful. It would also be useful to see what the public api javadoc would look like with this solution. Could you generate that javadoc? It would be a useful starting point for a discussion about how these classes would be used by a CP2-limited application vs. a CP3-requiring application. Thanks!&lt;/p&gt;</comment>
                            <comment id="13510475" author="dagw" created="Wed, 5 Dec 2012 13:46:02 +0000"  >&lt;p&gt;Thanks, Rick! uploading the API javadocs.&lt;/p&gt;</comment>
                            <comment id="13510500" author="rhillegas" created="Wed, 5 Dec 2012 14:25:39 +0000"  >&lt;p&gt;Thanks, Dag. The javadoc is very helpful. This is my understanding of how an application would use these DataSources:&lt;/p&gt;

&lt;p&gt;1) If the application wants to run with JNDI, then the application would use the same DataSources which are used in 10.9.&lt;/p&gt;

&lt;p&gt;2) If the application wants to run on the small CP2 profile, then the application would use the corresponding NonJNDI* DataSources instead.&lt;/p&gt;

&lt;p&gt;It would probably be useful to touch up the header javadoc for all of the DataSources in order to make it clear which environment they should be used in. Thanks!&lt;/p&gt;</comment>
                            <comment id="13510694" author="rhillegas" created="Wed, 5 Dec 2012 19:15:08 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Here are some further thoughts about the new public api introduced by this patch:&lt;/p&gt;

&lt;p&gt;1) There are no interfaces in the 10.9 public api for the jdbc package. I see that you are introducing several interfaces in that package. Do those interfaces need to be part of the public api?&lt;/p&gt;

&lt;p&gt;2) Similar question: You have introduced a new EmbeddedBaseDataSource class. Does this class need to be part of the public api?&lt;/p&gt;

&lt;p&gt;3) EmbeddedConnectionPoolDataSource, EmbeddedDataSource, EmbeddedXADataSource, EmbeddedConnectionPoolDataSource40, EmbeddedDataSource40, and EmbeddedXADataSource40 no longer implement ObjectFactory. That is a change to the public api which should be easy to fix.&lt;/p&gt;

&lt;p&gt;4) The inheritance hierarchy has been changed for several classes. The changes involve removing classes which were NOT part of the public api and inserting new classes which probably don&apos;t need to be part of the public api. These changes could affect code which crawls up the hierarchy via, for instance, calls to super(). In order for this to affect applications, however, they would have to crawl up the hierarchy through classes which are not part of the public api. I do not think it is likely that anyone does this. And if they do, I think your warranty is violated when you crawl into classes which are not part of the public api. This issue is probably worth a release note but I don&apos;t think that it is a significant change to the public api.&lt;/p&gt;

&lt;p&gt;5) ClientBaseDataSource no longer implements javax.naming.Referenceable. In my opinion, this is the most serious change to the public api. This is an abstract class, so no one can directly instantiate one of these things. However, someone writing a test framework might use this abstraction in order to factor out tests which should be run against different Derby DataSources. Such a framework might be interested in the fact that ClientBaseDataSource implements Referenceable.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;


&lt;p&gt;Here is a more detailed analysis of the changes to the public javadoc introduced by this patch:&lt;/p&gt;

&lt;p&gt;------ JDBC 3.0 DataSources --------------&lt;/p&gt;

&lt;p&gt;ClientBaseDataSource&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No longer implements javax.naming.Referenceable. This is the most serious change to Derby&apos;s public api.&lt;/li&gt;
	&lt;li&gt;Now implements some additional interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ClientConnectionPoolDataSource&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ClientDataSource&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ClientXADataSource&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbeddedConnectionPoolDataSource&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No longer descends from ReferenceableDataSource. But that class is not part of the public api so this is not a serious change to the public api.&lt;/li&gt;
	&lt;li&gt;No longer implements ObjectFactory. That is an easily fixed change to the public api.&lt;/li&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbeddedDataSource&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No longer descends from ReferenceableDataSource. But that class is not part of the public api so this is not a serious change to the public api.&lt;/li&gt;
	&lt;li&gt;Now descends from new class EmbeddedBaseDataSource.&lt;/li&gt;
	&lt;li&gt;No longer implements ObjectFactory. That is an easily fixed change to the public api.&lt;/li&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbeddedSimpleDataSource&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No changes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbeddedXADataSource&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No longer descends from ReferenceableDataSource. But that class is not part of the public api so this is not a serious change to the public api.&lt;/li&gt;
	&lt;li&gt;Now descends from new class EmbeddedBaseDataSource.&lt;/li&gt;
	&lt;li&gt;No longer implements ObjectFactory. That is an easily fixed change to the public api.&lt;/li&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;------ JDBC 4.0 DataSources --------------&lt;/p&gt;

&lt;p&gt;ClientConnectionPoolDataSource40&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ClientDataSource40&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ClientXADataSource40&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;EmbeddedConnectionPoolDataSource40&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No longer descends from ReferenceableDataSource. But that class is not part of the public api so this is not a serious change to the public api.&lt;/li&gt;
	&lt;li&gt;Now descends from new class EmbeddedBaseDataSource.&lt;/li&gt;
	&lt;li&gt;No longer implements ObjectFactory. That is an easily fixed change to the public api.&lt;/li&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbeddedDataSource40&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No longer descends from ReferenceableDataSource. But that class is not part of the public api so this is not a serious change to the public api.&lt;/li&gt;
	&lt;li&gt;Now descends from new class EmbeddedBaseDataSource.&lt;/li&gt;
	&lt;li&gt;No longer implements ObjectFactory. That is an easily fixed change to the public api.&lt;/li&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbeddedXADataSource40&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No longer descends from ReferenceableDataSource. But that class is not part of the public api so this is not a serious change to the public api.&lt;/li&gt;
	&lt;li&gt;Now descends from new class EmbeddedBaseDataSource.&lt;/li&gt;
	&lt;li&gt;No longer implements ObjectFactory. That is an easily fixed change to the public api.&lt;/li&gt;
	&lt;li&gt;Now implements some new interfaces.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13512106" author="dagw" created="Thu, 6 Dec 2012 20:54:38 +0000"  >&lt;p&gt;Thanks, Rick. Here are some comments, in-lined between your points.&lt;/p&gt;

&lt;p&gt;&amp;gt; 1) There are no interfaces in the 10.9 public api for the jdbc package. I see that you are introducing several interfaces in that package. Do those interfaces need to be part of the public API?&lt;/p&gt;

&lt;p&gt;Probably not. I use them on an application level in the tests to avoid having the code have to decide at compile-time whether it will run with JNDI or not, cf my use of Class.forName there to create the data sources. The interface allows type-safe calls to the setters and getters, which would otherwise need to be called via reflection. But for user code this flexibility may not be strictly needed, what do you think? It may not carry its weight... See e.g. this section of the test J2EEDataSourceTest#testClientDSConnectionAttributes:&lt;/p&gt;

&lt;p&gt;  // now with ConnectionPoolDataSource&lt;br/&gt;
  ClientConnectionPoolDSI cpds;&lt;/p&gt;

&lt;p&gt;  if (JDBC.vmSupportsNonJNDI()) &lt;/p&gt;
{
    cpds = (ClientConnectionPoolDSI)Class.forName(&quot;org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40&quot;).newInstance();
  }
&lt;p&gt; else &lt;/p&gt;
{
    cpds = (ClientConnectionPoolDSI)Class.forName(&quot;org.apache.derby.jdbc.ClientConnectionPoolDataSource&quot;).newInstance();
  }

&lt;p&gt;  cpds.setPortNumber(TestConfiguration.getCurrent().getPort());&lt;/p&gt;



&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 2) Similar question: You have introduced a new EmbeddedBaseDataSource class. Does this class need to be part of the public api?&lt;/p&gt;

&lt;p&gt;No, I don&apos;t think it needs to be. ReferenceableDataSource wasn&apos;t part of the API either (which currently implement the getters and setters, e.g. setUser/getUser).&lt;/p&gt;

&lt;p&gt;But note that ClientBaseDataSource &lt;b&gt;is&lt;/b&gt; part of the public API, so I included EmbeddedBaseDataSource by analogy. Comment?&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 3) EmbeddedConnectionPoolDataSource, EmbeddedDataSource, EmbeddedXADataSource, EmbeddedConnectionPoolDataSource40, EmbeddedDataSource40, and EmbeddedXADataSource40 no longer implement ObjectFactory. That is a change to the public api which should be easy to fix.&lt;/p&gt;

&lt;p&gt;Yes, but ReferenceableDataSource still implements it. It&apos;s just not inherited by the DSes anymore.&lt;br/&gt;
And the JNDI-full DSes still implement Referenceable. Isn&apos;t that sufficient? Not quite sure what you mean by &quot;should be easy to fix&quot;...&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 4) The inheritance hierarchy has been changed for several classes. The changes involve removing classes which were NOT part of the public api and inserting new classes which probably don&apos;t need to be part of the public api. These changes could affect code which crawls up the hierarchy via, for instance, calls to super(). In order for this to affect applications, however, they would have to crawl up the hierarchy through classes which are not part of the public api. I do not think it is likely that anyone does this. And if they do, I think your warranty is violated when you crawl into classes which are not part of the public api. This issue is probably worth a release note but I don&apos;t think that it is a significant change to the public api.&lt;/p&gt;

&lt;p&gt;OK, agreed.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 5) ClientBaseDataSource no longer implements javax.naming.Referenceable. In my opinion, this is the most serious change to the public api. This is an abstract class, so no one can directly instantiate one of these things. However, someone writing a test framework might use this abstraction in order to factor out tests which should be run against different Derby DataSources. Such a framework might be interested in the fact that ClientBaseDataSource implements Referenceable.&lt;/p&gt;

&lt;p&gt;OK. Any suggestions?&lt;/p&gt;
</comment>
                            <comment id="13526319" author="knutanders" created="Fri, 7 Dec 2012 11:10:45 +0000"  >&lt;p&gt;Sounds like the interfaces are useful enough for making our internals cleaner, so we could keep them, but leave them out of the published API. It&apos;s easier to add the interfaces to the published API later if we find that they are useful to applications, than it is to remove them. So the safe option is to wait and not add them to the published API just yet. Same reasoning could be used about EmbeddedBaseDataSource.&lt;/p&gt;

&lt;p&gt;I&apos;d prefer the DSI part of the interface names to be spelled out, though, as the &quot;I&quot; in the abbreviation could just as well stand for &quot;Implementation&quot;.&lt;/p&gt;

&lt;p&gt;As to ReferenceableDataSource and ObjectFactory, if we&apos;re worried that the existing full DataSources no longer implement them, couldn&apos;t we reinsert that class between EmbeddedBaseDataSource and EmbeddedDataSource in the inheritance graph? It looks as if that would preserve the original shape of the full DataSource implementations and not introduce any JNDI dependencies in the non-JNDI variants.&lt;/p&gt;</comment>
                            <comment id="13526393" author="rhillegas" created="Fri, 7 Dec 2012 13:49:39 +0000"  >&lt;p&gt;Thanks for the responses, Dag and Knut. Some further thoughts:&lt;/p&gt;

&lt;p&gt;(1) &amp;amp; (2): I agree with what Knut says.&lt;/p&gt;

&lt;p&gt;(3) &amp;amp; (4): What Knut says should work. Maybe all you may have to do is move ReferenceableDataSource.getObjectInstance() into EmbeddedDataSource, and move ReferenceableDataSource.getReference() into ClientDataSource.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13529421" author="dagw" created="Tue, 11 Dec 2012 23:06:44 +0000"  >&lt;p&gt;Uploaded a revised version including new javadocs incorporating the suggestions from Knut and Rick.&lt;/p&gt;

&lt;p&gt;It was indeed possible re re-inject ReferenceableDataSource between the two EmbeddedBaseDataSource and EmbeddedDataSource, I just had to explicitly specify the correct SerialVersionUID for it (it used the default which now changes due to an additional ancestor).&lt;/p&gt;

&lt;p&gt;The interfaces have been renamed (no abbrev) and removed for the API.&lt;/p&gt;

&lt;p&gt;Rerunning regressions on both SE and JEP 161 platforms.&lt;/p&gt;

&lt;p&gt;If this looks generally like an OK approach, I&apos;ll start making and committing smaller patches as per the plan I outlined above.&lt;/p&gt;</comment>
                            <comment id="13529910" author="dagw" created="Wed, 12 Dec 2012 12:24:59 +0000"  >&lt;p&gt;Uploading a generated html-overview of the API diff changes in the org.apache.derby.jdbc package. It should make it easy to see what has changed. Just unzip and point your browser to the resulting directory.&lt;/p&gt;</comment>
                            <comment id="13529926" author="dagw" created="Wed, 12 Dec 2012 12:54:09 +0000"  >&lt;p&gt;Note: on the point of putting ReferenceableDataSource back where above EmbeddedDataSource: this is only a ds factory for embedded, the client uses its own: ClientDataSourceFactory which is &lt;b&gt;not&lt;/b&gt; part of the ds inheritance hierarchy (sensibly IMHO).&lt;/p&gt;</comment>
                            <comment id="13531854" author="dagw" created="Fri, 14 Dec 2012 00:35:57 +0000"  >&lt;p&gt;Attaching derby-5955-embed-restructure-01, a cleaned up part of the p-o-c patch, for review with a view to commit it.&lt;/p&gt;

&lt;p&gt;Running regressions on Java SE (the regressions on JEP 161 Java 8 will wait till I&apos;m done with committing most or all all installments).&lt;/p&gt;

&lt;p&gt;This patch adds no new functionality, just refactors the embedded data sources to get the hierarchy ready for the non-jndi extensions (for the embedded driver).&lt;/p&gt;</comment>
                            <comment id="13532626" author="dagw" created="Fri, 14 Dec 2012 20:19:46 +0000"  >&lt;p&gt;Regressions ran cleanly.&lt;/p&gt;</comment>
                            <comment id="13532652" author="dagw" created="Fri, 14 Dec 2012 20:56:14 +0000"  >&lt;p&gt;Uploading version 2 of the &quot;derby-5955-embed-restructure&quot; patch to correct a Javadoc issue (prematurely referencing the NonJNDI data sources); that will follow later.&lt;/p&gt;</comment>
                            <comment id="13533877" author="knutanders" created="Mon, 17 Dec 2012 12:22:19 +0000"  >&lt;p&gt;The version 2 patch seems to preserve the original functionality and interfaces, as far as I can tell, and I think the new hierarchy is better structured, so it looks like a net improvement to me.&lt;/p&gt;

&lt;p&gt;There seems to be one added piece of functionality in the patch: EmbeddedSimpleDataSource now implements the setAttributesAsPassword() method supported by the other embedded data sources. But that looks like an improvement too.&lt;/p&gt;

&lt;p&gt;Some minor comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There&apos;s some odd formatting. Most of it because already poorly formatted code was moved (like the equals() method moved from EmbeddedDataSource to EmbeddedBaseDataSource). And in EmbeddedDataSourceInterface the indentation alternates between 3 and 4. I see you&apos;ve already removed tabs from the copied/moved code. Maybe you can take it one step further and tell your favourite IDE to reformat the entire EmbeddedBaseDataSource and EmbeddedDataSourceInterface files? Since those are new files, reformatting them won&apos;t make archeology any harder.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A static field STRING_ARG is added to EmbeddedDataSource, but it&apos;s never used.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some code is added to the JDBCDataSource test in order to preserve stack trace and exception chain in case of failure. Would a call to BaseTestCase.fail(String,Throwable) do the same trick?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13538125" author="rhillegas" created="Fri, 21 Dec 2012 15:14:49 +0000"  >&lt;p&gt;The revised published api looks good to me. Thanks.&lt;/p&gt;</comment>
                            <comment id="13538680" author="dagw" created="Sat, 22 Dec 2012 05:51:26 +0000"  >&lt;p&gt;Thanks, Knut and Rick for the reviews. I&apos;ll spin a reworked version and commit that.&lt;/p&gt;</comment>
                            <comment id="13541052" author="dagw" created="Sun, 30 Dec 2012 08:13:52 +0000"  >&lt;p&gt;Uploading patch *-embed-restructure-03, addressing Knut&apos;s comments. Will commit after regressions.&lt;/p&gt;</comment>
                            <comment id="13541249" author="dagw" created="Mon, 31 Dec 2012 03:57:56 +0000"  >&lt;p&gt;Uploading patch &quot;*-embed-restructure-04&quot;; relative to version 03 it removes the changes to EmbedSimpleDataSource. &lt;span class=&quot;error&quot;&gt;&amp;#91;Those changes were part of an earlier effort to upgrade ESDS to be the vehicle for JEP 161 - I since changed course and restructured the main data sources to make the JEP 161 offering more functionally capable.&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13541253" author="dagw" created="Mon, 31 Dec 2012 04:02:07 +0000"  >&lt;p&gt;Committed  &quot;*-embed-restructure-04&quot; as svn 1427045.&lt;/p&gt;</comment>
                            <comment id="13541309" author="dagw" created="Mon, 31 Dec 2012 07:04:34 +0000"  >&lt;p&gt;Committed follow-up patch derby-5955-embed-restructure-followup: Some white space changes plus a missed fix to EmbeddedDataSource40 which was in the original proof-of-concept patch but fell through the cracks in the committed patch derby-5955-embed-restructure-04.&lt;/p&gt;</comment>
                            <comment id="13542003" author="dagw" created="Wed, 2 Jan 2013 05:20:39 +0000"  >&lt;p&gt;Uploading patch derby-5955-client-restructure-01. This patch restructures the data source hierarchy of the client driver with the same aim as for the embedded driver; to prepare for data sources that are not dependent on JNDI.&lt;/p&gt;

&lt;p&gt;Patch details:&lt;/p&gt;

&lt;p&gt;A   ClientDataSourceInterface&lt;br/&gt;
A   ClientConnectionPoolDataSourceInterface&lt;br/&gt;
A   ClientXADataSourceInterface&lt;/p&gt;

&lt;p&gt;The patch adds three new interfaces allowing the common parts of the data sources to be declared there.&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/jdbc/ClientBaseDataSource.java&lt;/p&gt;

&lt;p&gt;The base implementation, ClientBaseDataSource is analogous to EmbeddedBaseDataSource. It no longer implements Referenceable, that is moved to ClientDataSource.  The basic getConnection method is hoisted up into ClientBaseDataSource, as are minion methods for pooled connections and XA connections. Constants are moved to ClientDataSourceInterface. Both the latter changes makes those resources available to new data sources (not yet introduced in this patch) not inheriting ClientDataSource; with its JNDI dependence.&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java&lt;br/&gt;
M       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java&lt;br/&gt;
M       java/client/org/apache/derby/client/ClientXAConnection.java&lt;br/&gt;
M       java/client/org/apache/derby/client/ClientXAConnection40.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Configuration.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Connection.java&lt;br/&gt;
M       java/client/org/apache/derby/jdbc/ClientDriver.java&lt;/p&gt;

&lt;p&gt;Smaller changes to accomodate the new hierarchy.&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/LogWriter.java&lt;/p&gt;

&lt;p&gt;Smaller changes to accomodate the new hierarchy plus LogWriter#getAttributes it no longer uses Reference#getAll to get at the data source&apos;s attributes, but now uses bean inspection to avoid presuming the data source has implements Referenceable. &lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java&lt;/p&gt;

&lt;p&gt;Now uses the minion connection methods and implements the new ClientConnectionPoolDataSourceInterface.&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java&lt;br/&gt;
M       java/client/org/apache/derby/jdbc/ClientDataSource40.java&lt;br/&gt;
M       java/client/org/apache/derby/jdbc/ClientXADataSource40.java&lt;/p&gt;

&lt;p&gt;These now implement javax.sql.*DataSource to get compile-time check that they actually implement the 4.1 extensions; added a missing explicit serialVersionUID chosen to be the old default value (otherwise serialization would break with the new hierachy changes).&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/jdbc/ClientDataSource.java&lt;/p&gt;

&lt;p&gt;Now implements Referenceable itself instead of through ClientBaseDataSource.&lt;br/&gt;
Now inherits basic connection methods from ClientBaseDataSource instead of implementing them itself.&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/jdbc/ClientXADataSource.java&lt;/p&gt;

&lt;p&gt;Now implements ClientXADataSourceInterface; hoisted its connection logic up to ClientBaseDataSource.&lt;/p&gt;

&lt;p&gt;M       tools/jar/dnc.properties&lt;br/&gt;
M       java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java&lt;br/&gt;
M       java/client/org/apache/derby/client/net/NetConnection.java&lt;br/&gt;
M       java/client/org/apache/derby/client/net/NetConnection40.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/J2EEDataSource.java&lt;/p&gt;

&lt;p&gt;Trivial changes&lt;/p&gt;

&lt;p&gt;Running regressions, please review.&lt;/p&gt;</comment>
                            <comment id="13544542" author="dagw" created="Sat, 5 Jan 2013 03:01:42 +0000"  >&lt;p&gt;Regressions ran without error. I plan to commit this Tuesday morning if no objections arise.&lt;/p&gt;</comment>
                            <comment id="13545904" author="knutanders" created="Mon, 7 Jan 2013 14:11:58 +0000"  >&lt;p&gt;The client patch changes ClientBaseDataSource (which is part of the public API) so that it doesn&apos;t implement javax.naming.Referenceable anymore. Rick expressed concern about that API change in an earlier comment, and I can&apos;t see that we reached consensus on that issue. In order to preserve the old API, we&apos;d probably have to add a (non-public) parent class of ClientBaseDataSource with all the functionality of ClientBaseDataSource except the Referencable methods.&lt;/p&gt;

&lt;p&gt;Would it be possible to make LogWriter and ClientDataSource share the code that fetches all the bean properties of the data source?&lt;/p&gt;

&lt;p&gt;Apart from the above comments, I think the patch looks like a good cleanup.&lt;/p&gt;</comment>
                            <comment id="13546455" author="dagw" created="Tue, 8 Jan 2013 00:42:02 +0000"  >&lt;p&gt;Thanks, Knut. Yes, that&apos;s right, similar concerns apply here as to the API change on ClientBaseDataSource. I agreed with Rick on this and changed the embedded structure accordingly. So, I guess we&apos;d better err on the side of caution here and introduce another base class as you suggest. I&apos;ll look into the sharing issue to see if we can remove that redundancy.&lt;/p&gt;</comment>
                            <comment id="13546657" author="dagw" created="Tue, 8 Jan 2013 06:41:59 +0000"  >&lt;p&gt;Uploading version 02, introducing a new root class, ClientBaseDataSourceRoot to allow ClientBaseDataSource to get its &quot;implements Referenceable&quot; status back. Also refactored the beans &quot;getProperties&quot; methods into one, located in ClientBaseDataSourceRoot, specializations left in LogWriter#getProperties and ClientBaseDataSource#addBeanProperties repectively (usage sites).&lt;/p&gt;

&lt;p&gt;Rerunning regressions. &lt;span class=&quot;error&quot;&gt;&amp;#91;Update: all passed.&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13546785" author="knutanders" created="Tue, 8 Jan 2013 11:04:28 +0000"  >&lt;p&gt;Thanks, Dag. Version 02 looks good to me. Minor nit: The patch makes addBeanProperties() static and adds a parameter so that a reference to this could be passed to it. It might be simpler to keep the method non-static and let it access this directly.&lt;/p&gt;</comment>
                            <comment id="13547513" author="dagw" created="Wed, 9 Jan 2013 01:27:17 +0000"  >&lt;p&gt;Thanks, Knut. Agreed. I committed derby-5955-client-restructure-02, but with a slight modification as shown in derby-5955-client-restructure-02-delta.diff. Svn rev. 1430648.&lt;/p&gt;</comment>
                            <comment id="13549404" author="dagw" created="Thu, 10 Jan 2013 07:30:47 +0000"  >&lt;p&gt;Attaching patch derby-5955-new-non-jndi-ds-01. This introduces the six (three for each driver) new data sources that are not dependent on JNDI.&lt;/p&gt;

&lt;p&gt;Details:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java&lt;/p&gt;

&lt;p&gt;This includes a small sanity check by adding a test case to be run even on full Java SE. &lt;/p&gt;

&lt;p&gt;Adaptations of tests to make them run on a compact profile 2 JRE will follow later. The focus here is the new sources of the data source classes.&lt;/p&gt;

&lt;p&gt;Also it adds changes to the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/info/JVMInfo.java&lt;/p&gt;

&lt;p&gt;Add utility method to determine if JNDI is available.&lt;/p&gt;

&lt;p&gt;M       java/drda/org/apache/derby/impl/drda/XADatabase.java&lt;/p&gt;

&lt;p&gt;Make this class fall back to using the non-jndi version if running without JNDI.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/modules.properties&lt;/p&gt;

&lt;p&gt;Remove the requirement that JNDI classes be present for Derby to boot.&lt;/p&gt;

&lt;p&gt;M       tools/jar/dnc.properties&lt;/p&gt;

&lt;p&gt;Add new data sources to client jar.&lt;/p&gt;

&lt;p&gt;M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;Add new data sources to embedded jar&lt;/p&gt;

&lt;p&gt;M       tools/javadoc/publishedapi_jdbc4.ant&lt;/p&gt;

&lt;p&gt;Add new data source classes to published API.&lt;/p&gt;

&lt;p&gt;Running regressions.&lt;/p&gt;</comment>
                            <comment id="13550777" author="dagw" created="Fri, 11 Jan 2013 03:20:25 +0000"  >&lt;p&gt;Regressions ran ok modulo &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6038&quot; title=&quot;Intermittent failure in LangProcedureTest: cannot drop table because of open ResultSet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6038&quot;&gt;&lt;del&gt;DERBY-6038&lt;/del&gt;&lt;/a&gt; which is unrelated.&lt;/p&gt;</comment>
                            <comment id="13550993" author="knutanders" created="Fri, 11 Jan 2013 09:05:38 +0000"  >&lt;p&gt;The structure of the patch looks fine to me. Some small comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DataSourceTest now attempts to create a NonJNDIEmbeddedDataSource40 in one of the test cases. Does this work on Java 5, or do we need logic to skip it?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Naming of the new classes: Would it make sense to drop the NonJNDI prefix and instead follow the pattern of the JSR-169 DataSource by calling them simple data sources? Like EmbeddedSimpleDataSource40, EmbeddedSimpleConnectionPoolDataSource40, etc. By using &quot;simple&quot; we indicate that the data sources only have the minimal set of features, which may be clearer and more maintainable than enumerating the features that are left out. Feel free to check in the patch with the current names, though, as the names can be changed easily later if we find better ones.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13551796" author="dagw" created="Sat, 12 Jan 2013 04:09:17 +0000"  >&lt;p&gt;You are right it will fail on Java 5 due to class load format, thanks. I&apos;ve changed the patch (version 02 uploaded) to guard against too old JVM.&lt;/p&gt;

&lt;p&gt;While I agree with you that it would be better to have a more generic name for the reduced functionality data sources, e.g. &quot;simple&quot;, I&apos;m slightly worried that &quot;overloading&quot; the current EmbeddedSimpleDataSource naming with a different kind of &quot;simple&quot; in EmbeddedSimpleDataSource40. But maybe that&apos;s OK, since presumably we wouldn&apos;t see the JSR-169 one need to upgrade to &quot;*40&quot; status and won&apos;t have a naming clash later?&lt;/p&gt;

&lt;p&gt;Another option is to use another kind of naming hint, e.g. a &quot;Basic-&quot; prefix BasicEmbeddedDataSource40, BasicEmbeddedConnectionPoolDataSource40 etc.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="13551800" author="dagw" created="Sat, 12 Jan 2013 04:18:09 +0000"  >&lt;p&gt;Committed patch derby-5955-new-non-jndi-ds-02 as svn 1432380.&lt;/p&gt;</comment>
                            <comment id="13552291" author="knutanders" created="Sun, 13 Jan 2013 19:41:17 +0000"  >&lt;p&gt;Thanks Dag. I think a &quot;Basic&quot; prefix would be fine. That prefix describes what the data sources are in a positive way, and it would allow us to preserve &quot;simple&quot; for data sources that implement less than required by the full JDBC specification.&lt;/p&gt;</comment>
                            <comment id="13553347" author="dagw" created="Tue, 15 Jan 2013 00:42:24 +0000"  >&lt;p&gt;Uploading patch derby-5955-add-cp2-to-jars.diff. This changes the top level build.xml to add a new attribute to MANIFEST.MF in Derby&apos;s jar files:&lt;/p&gt;

&lt;p&gt;Profile: compact2&lt;/p&gt;

&lt;p&gt;This will ensure that if Derby is ever attempted run on a less capable platform, i.e. compact1, java will issue an error informing the user that Derby requires at least compact2 level.&lt;/p&gt;

&lt;p&gt;Cf. this quite in &lt;a href=&quot;http://openjdk.java.net/jeps/161:&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjdk.java.net/jeps/161:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&quot;jar &#8212; The JAR-file manifest specification will be extended with a new attribute which can be used to specify the minimum Profile required by the code in a JAR file.&quot;&lt;/p&gt;

&lt;p&gt;In the current code line, the format used is the one shown above.&lt;/p&gt;</comment>
                            <comment id="13553388" author="dagw" created="Tue, 15 Jan 2013 01:37:59 +0000"  >&lt;p&gt;Uploading patch derby-5955-make-tests-run-01. This patch only makes changes to the tests to make them run on a platform with Profile == compact2.&lt;/p&gt;

&lt;p&gt;I have verified these changes make the regressions run without error on my early build of the JEP 161 codeline (with patch derby-5955-add-cp2-to-jars) and also that the tests still run ok on an ordinary Java SE platform.&lt;/p&gt;

&lt;p&gt;There is, however, one little product change: ij has undocumented functionality to support script based testing of XA, cf xaHelper#getXADataSource. This code has now been changed to work even when JNDI is absent by using the new data sources.&lt;/p&gt;

&lt;p&gt;The tests for serailizable data sources introduce new binary checked in lobs, so to test this patch you need to either generate the new lobs yourself (cd to directory java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources, then run org.apache.derbyTesting.functionTests.testData.serializedDataSources.SerializeDataSources with no arguments. this will produce the new lobs containing serialized data sources at level 10_10), or you can download the zip bundle I attach, &quot;derby-5955-ser-b.zip&quot; and unzip it from the top level in the repo. See also &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5997&quot; title=&quot;Data source serialization tests use checked in binaries instead of using the normal upgrade test framework&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5997&quot;&gt;&lt;del&gt;DERBY-5997&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;I don&apos;t expect people to build and test Java 8 with the new profiles code; please check the patch for correctness as to existing tests not being broken by this patch. Thanks!&lt;/p&gt;
</comment>
                            <comment id="13553507" author="dagw" created="Tue, 15 Jan 2013 05:30:47 +0000"  >&lt;p&gt;Patch details:&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/ClientConnectionPoolDataSource-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/ClientConnectionPoolDataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/ClientDataSource-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/ClientDataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/ClientXADataSource-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/ClientXADataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/EmbeddedConnectionPoolDataSource-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/EmbeddedConnectionPoolDataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/EmbeddedDataSource-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/EmbeddedDataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/EmbeddedXADataSource-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/EmbeddedXADataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/NonJNDIClientConnectionPoolDataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/NonJNDIClientDataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/NonJNDIClientXADataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/NonJNDIEmbeddedConnectionPoolDataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/NonJNDIEmbeddedDataSource40-10_10_1_0.ser&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/NonJNDIEmbeddedXADataSource40-10_10_1_0.ser&lt;/p&gt;

&lt;p&gt;New serialized data source for Derby 10_10, including such for the new data sources. These are binary files and not visible in the patch diff file. See attached file derby-5955-ser-b.zip.&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java&lt;/p&gt;

&lt;p&gt;Updated versions which knows about the new release and also non-jndi data source (so it doesn&apos;t try to get a naming reference on deserializing).&lt;br/&gt;
It also produces and tests versions for the JDCB &amp;gt;= 4.0 level data sources which were skipped before, e.g. &quot;ClientDataSource40-10_10_1_0.ser&quot;.&lt;/p&gt;




&lt;p&gt;M       java/testing/org/apache/derbyTesting/junit/Derby.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/JDBC.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/JDBCClient.java&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java&lt;/p&gt;

&lt;p&gt;Add functionality to make tests run also on the new data sources, including reflection for both kinds of data sources to avoid a) execution on compact profile platform top gag on classes requiring JNDI, and b) to avoid a Java 5 SE run to gag on the class format of the compact platform data source classes (all of which have suffix *40). Note also the heavy use of the new ds interfaces here.&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java&lt;/p&gt;

&lt;p&gt;Skip this test for non-JNDI data sources since &quot;Reference&quot; in the name here is javax.naming.Reference (part of JNDI).&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java&lt;/p&gt;

&lt;p&gt;Skip.&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java&lt;/p&gt;

&lt;p&gt;Adapt to failure under CP2; can&apos;t load authenticate with LDAP if no JNDI.&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/impl/tools/ij/ij.jj&lt;br/&gt;
M       java/tools/org/apache/derby/impl/tools/ij/xaHelper.java&lt;/p&gt;

&lt;p&gt;Changes to ij&apos;s xa capability to support the new data sources also.&lt;/p&gt;</comment>
                            <comment id="13553825" author="knutanders" created="Tue, 15 Jan 2013 14:04:55 +0000"  >&lt;p&gt;My comments to the make-tests-run-01 patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The patch seems to add the svn:executable property to the serialized data files. Is that needed?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;m assuming the XADataSource created by ij is only used internally and never returned to the user? And that ij doesn&apos;t need the JNDI functionality? If so, maybe it should always attempt to use the non-JNDI variant, so that it doesn&apos;t load javax.naming classes unnecessarily?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In SerializeDataSources.java: Might be clearer to change if (!(dsClassName.indexOf(&quot;NonJNDI&quot;) &amp;gt; 0)) ---&amp;gt; if (!dsClassName.contains(&quot;NonJNDI&quot;))&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The name of the JDBC.vmSupportsNonJNDI() method is a bit misleading, as it returns false for some platforms that do support the NonJNDI data source (for example, Java 7). Having a vmSupportsJNDI() method instead might be less confusing.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In Wrapper41DataSource, we first check for instanceof NonJNDIEmbeddedDataSource40 and then NonJNDIEmbeddedConnectionPoolDataSource40 and NonJNDIEmbeddedXADataSource40. Since the latter two classes extend NonJNDIEmbeddedDataSource40, only the first check will ever succeed. So I think the _nonJNDIecpds and _nonJNDIexads fields can be removed. And ditto for the non-JNDI client data sources.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13554323" author="rhillegas" created="Tue, 15 Jan 2013 20:54:05 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Thanks for all of this great work. A big +1 to what you&apos;ve done so far.&lt;/p&gt;

&lt;p&gt;Since you&apos;re working on tests now, I assume you&apos;re basically done with restructuring the DataSources in the product. I have built the javadoc and looked at the DataSource public api. It looks to me like the correct classes are included in the public api. In addition, it looks like the DataSources implement the expected interfaces. I see that you&apos;ve introduced a number of interfaces which don&apos;t appear in the public api. It&apos;s too bad that they are still mentioned by the interface lists for the included DataSources--but I don&apos;t know how to make the cruft disappear from those lists.&lt;/p&gt;

&lt;p&gt;When you come up for air, it would be good to give users guidance about which DataSource best fits their environment. I think these are the environments we can expect:&lt;/p&gt;

&lt;p&gt;o Embedded application running on CDC/FP 1.1&lt;br/&gt;
o Embedded application running on Java 5.&lt;br/&gt;
o Embedded application running on Java 6 and 7&lt;br/&gt;
o Embedded application running on full Java 8&lt;br/&gt;
o Embedded application running on CP2, the small device configuration for Java 8.&lt;br/&gt;
o Client/server application running on Java 5.&lt;br/&gt;
o Client/server application running on Java 6 and 7&lt;br/&gt;
o Client/server application running on full Java 8&lt;br/&gt;
o Client/server application running on CP2, the small device configuration for Java 8.&lt;/p&gt;

&lt;p&gt;The following adjustments to the public api documentation make sense to me:&lt;/p&gt;

&lt;p&gt;o Adjust the wording of the lead sentence in the javadoc header for every DataSource, indicating which of the above environments it fits. The first sentence appears in the package overview, in the generated table of classes included in the package.&lt;/p&gt;

&lt;p&gt;o Adjust the package overview html, adding the new DataSources to the list of DataSources. Probably you will need 2 more blocks of DataSources, parallel to the existing 2 blocks.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13554700" author="dagw" created="Wed, 16 Jan 2013 03:16:12 +0000"  >&lt;p&gt;Thanks, Knut and Rick!&lt;/p&gt;

&lt;p&gt;Uploading a new patch revision; derby-5955-make-tests-run-02. I ran this on full Java SE 1.5 to check any issues with JDBC 3/4 in the modified tests, I had to make one change to accommodate for that (DataSourceSerializationTest#deSerializeDs). I also refreshed my JEP-161 source repo and build with the latest sources of Java 8 CP2 and ran the the regression tests without errors (with the addition of derby-5955-add-cp2-to-jars).&lt;/p&gt;

&lt;p&gt;Addressed Knut&apos;s code comments as follows:&lt;/p&gt;

&lt;p&gt;&amp;gt; - The patch seems to add the svn:executable property to the serialized&lt;br/&gt;
&amp;gt;   data files. Is that needed?&lt;/p&gt;

&lt;p&gt;No, they appeared automatically when I added them. I found I had to remove the property explicitly; done.&lt;/p&gt;

&lt;p&gt;&amp;gt; - I&apos;m assuming the XADataSource created by ij is only used internally&lt;br/&gt;
&amp;gt;   and never returned to the user? And that ij doesn&apos;t need the JNDI&lt;br/&gt;
&amp;gt;   functionality? If so, maybe it should always attempt to use the&lt;br/&gt;
&amp;gt;   non-JNDI variant, so that it doesn&apos;t load javax.naming classes&lt;br/&gt;
&amp;gt;   unnecessarily?&lt;/p&gt;

&lt;p&gt;True and true. I think I&apos;ll keep the differentiation: since this functionality is used for testing the data sources, I fear it could as an (unpleasant) surprise that ij used the less capable data source on a full SE platform. They do share much of the code, but..&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; - In SerializeDataSources.java: Might be clearer to change if&lt;br/&gt;
&amp;gt;   (!(dsClassName.indexOf(&quot;NonJNDI&quot;) &amp;gt; 0)) ---&amp;gt; if&lt;br/&gt;
&amp;gt;   (!dsClassName.contains(&quot;NonJNDI&quot;))&lt;/p&gt;

&lt;p&gt;Agreed, done.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; - The name of the JDBC.vmSupportsNonJNDI() method is a bit misleading,&lt;br/&gt;
&amp;gt;   as it returns false for some platforms that do support the NonJNDI&lt;br/&gt;
&amp;gt;   data source (for example, Java 7). Having a vmSupportsJNDI() method&lt;br/&gt;
&amp;gt;   instead might be less confusing.&lt;/p&gt;

&lt;p&gt;This method pattern is a bit murky; there is precedence for using the &quot;supports&amp;lt;Feature&amp;gt;&quot; methods both ways here; JDBC.vmSupportJSR169 is exclusive; i.e. more capable runtimes return false.  JDBC.vmSupportJDBC3 is inclusive; i.e. more capable runtimes return true. I agree in the inclusive semantics are more intuitive.&lt;/p&gt;

&lt;p&gt;I can change this, but then I&apos;d need to add a guard at usage sites to make sure we don&apos;t use JDBC 4 level non-JNDI data sources under JDBC3 level runtimes too (CDC/JSR169). I&apos;ll think a bit about the best way to do this.&lt;/p&gt;

&lt;p&gt;&amp;gt; - In Wrapper41DataSource, we first check for instanceof&lt;br/&gt;
&amp;gt;   NonJNDIEmbeddedDataSource40 and then&lt;br/&gt;
&amp;gt;   NonJNDIEmbeddedConnectionPoolDataSource40 and&lt;br/&gt;
&amp;gt;   NonJNDIEmbeddedXADataSource40. Since the latter two classes extend&lt;br/&gt;
&amp;gt;   NonJNDIEmbeddedDataSource40, only the first check will ever&lt;br/&gt;
&amp;gt;   succeed. So I think the _nonJNDIecpds and _nonJNDIexads fields can&lt;br/&gt;
&amp;gt;   be removed. And ditto for the non-JNDI client data sources.&lt;/p&gt;

&lt;p&gt;Correct, fixed, thanks! The new data sources are different from the old ones in this respect.&lt;/p&gt;

&lt;p&gt;Rick, I&apos;ll address the Javadoc changes you propose in a follow up patch.&lt;/p&gt;</comment>
                            <comment id="13554836" author="kristwaa" created="Wed, 16 Jan 2013 08:18:41 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Thanks for working on this &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I haven&apos;t followed the work closely, but does your work affect &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4719&quot; title=&quot;Define consistent Derby data source behavior&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4719&quot;&gt;DERBY-4719&lt;/a&gt; in any way?&lt;/p&gt;</comment>
                            <comment id="13555810" author="dagw" created="Thu, 17 Jan 2013 03:36:11 +0000"  >&lt;p&gt;Hi Kristian, thanks for alerting me. No, I don&apos;t think so. These regression tests run as before on both Java SE and on CP2, and as far as I can se I haven&apos;t undone any of your code from your patches in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4719&quot; title=&quot;Define consistent Derby data source behavior&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4719&quot;&gt;DERBY-4719&lt;/a&gt; or &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4067&quot; title=&quot;ClientConnectionPoolDataSource.getPooledConnection and ClientXADataSource.getXAConnection ignore connection attributes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4067&quot;&gt;&lt;del&gt;DERBY-4067&lt;/del&gt;&lt;/a&gt;, even though the code has changed location, e.g. the guts you added to getXAConnection has now moved to ClientBaseDataSourceRoot#getXAConnectionMinion, so it is shareable between tol &quot;old&quot; DSes and the new ones. &lt;/p&gt;



</comment>
                            <comment id="13555998" author="kristwaa" created="Thu, 17 Jan 2013 08:59:53 +0000"  >&lt;p&gt;Thanks, Dag.&lt;/p&gt;

&lt;p&gt;I wasn&apos;t worried about you undoing my patches, I was just wondering if the situation had changed because of your changes &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; From what I gather, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4719&quot; title=&quot;Define consistent Derby data source behavior&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4719&quot;&gt;DERBY-4719&lt;/a&gt; still describe existing problems (albeit of low severity).&lt;br/&gt;
In any case, it is good that the newly introduced data sources don&apos;t bring in yet another set of quirks and behaviors.&lt;/p&gt;</comment>
                            <comment id="13557041" author="dagw" created="Fri, 18 Jan 2013 08:10:15 +0000"  >&lt;p&gt;Attaching a new version of the tests patch, &quot;derby-5955-make-tests-run-03.diff&quot;, which makes the following change:&lt;/p&gt;

&lt;p&gt;refactor JDBC#supportsNonJNDI to #supportsJNDI&lt;/p&gt;

&lt;p&gt;It turned out there was few if any cases causing problems for the semantics change, so the positive formulation is better.&lt;/p&gt;

&lt;p&gt;Rerunning regressions.&lt;/p&gt;</comment>
                            <comment id="13558625" author="knutanders" created="Mon, 21 Jan 2013 08:53:13 +0000"  >&lt;p&gt;Thanks, Dag. The changes in the make-tests-run-03 patch look good to me. Some further comments and questions:&lt;/p&gt;

&lt;p&gt;DataSourceSerializationTest.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Would it make sense to test the non-JNDI data sources also if the JVM does support JNDI? Then those who run tests in environments that do support JNDI might notice earlier if they&apos;ve broken the non-JNDI data sources.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think this check is too broad and unintentionally disables testing of JDBC 4 data sources on platforms that support JDBC 4 (vmSupportsJDBC3() returns true in JDBC 4 environments):&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        if (JDBC.vmSupportsJDBC3() &amp;amp;&amp;amp; className.contains(&quot;40&quot;)) &lt;/p&gt;
{
            // Running old Java, bail out if JDBC4
            return;
        }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some JNDI code in deSerializeDs() had to be rewritten using reflection to prevent the JVM from trying to load JNDI classes even if the code was never executed. Out of curiosity, do you know what makes reflection necessary in this code and not in, for example, Wrapper41DataSource, which accesses the JNDI data sources without reflection?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13559340" author="dagw" created="Tue, 22 Jan 2013 03:18:02 +0000"  >&lt;p&gt;Thanks, Knut. Re 1): Yes, but it would require some biggish changes to the way the data sources are selected in the current tests, which use TestConfiguration#getJDBCClient which in turn return the &quot;suitable&quot; data sources for the current configuration, which for a full SE would be the JNDI full ones. I&apos;ll see if there is a way to finesse this in (some) of the most important tests.&lt;/p&gt;

&lt;p&gt;Re 2): Ah yes, thanks, a gotcha. In this case the inclusive semantics hold. I think I want to rename #vmSupportsJSR169 to #vmSupportsOnlyJSR169 to make this difference clear.&lt;/p&gt;

&lt;p&gt;Re 3): It could be I inserted too much reflection here, I&apos;ll check.&lt;/p&gt;</comment>
                            <comment id="13559461" author="knutanders" created="Tue, 22 Jan 2013 07:51:09 +0000"  >&lt;p&gt;Thanks, Dag. Re 1): I was referring to DataSourceSerializationTest, which has code similar to this in many test cases:&lt;/p&gt;

&lt;p&gt;+        if (JDBC.vmSupportsJNDI()) &lt;/p&gt;
{
+            final String EMBEDDED_CLASS = &quot;EmbeddedDataSource&quot;;
+            deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);
+            deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);
+            deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);
+            deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);
+            deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0);
+            deSerializeDs(EMBEDDED_CLASS + _40Suffix, VERSION_10_10_1_0);
+        }
&lt;p&gt; else &lt;/p&gt;
{
+            final String EMBEDDED_CLASS = &quot;NonJNDIEmbeddedDataSource40&quot;;
+            deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0);
+        }

&lt;p&gt;I was thinking that it might work in JNDI environment if the else branch was made unconditional. It&apos;s not that simple in other tests, so I&apos;m not suggesting that we run all DataSource tests with both variants on platforms supporting JNDI. Just that we have some minimal sanity checking if it doesn&apos;t require too much effort.&lt;/p&gt;</comment>
                            <comment id="13561385" author="dagw" created="Thu, 24 Jan 2013 03:09:35 +0000"  >&lt;p&gt;Right, that&apos;s an easy fix, I&apos;ll do that.&lt;/p&gt;

&lt;p&gt;Re: 3) I think it is because in DataSourceSerializationTest, we explicit reference JNDI itself, cf. &lt;/p&gt;

&lt;p&gt;Method getFactoryClassName =&lt;br/&gt;
        Class.forName(&quot;javax.naming.Reference&quot;).getMethod(&lt;br/&gt;
               &quot;getFactoryClassName&quot;, null);&lt;/p&gt;

&lt;p&gt;whereas in Wrapper41DataSource we only reference other Derby classes dependent on JNDI. Probably it depends on how aggressively the classloader loads missing, but known, classes.&lt;/p&gt;

&lt;p&gt;Regressions passed on CP2 with patch make-tests-run-03. For the record, I changed from building CP2 as 64 bits JRE (Linux), to a 32 bits JRE, as the early access versions of Java 8 VM had an issue with metaspace overflow in lang._Suite.&lt;/p&gt;</comment>
                            <comment id="13561621" author="dagw" created="Thu, 24 Jan 2013 13:40:30 +0000"  >&lt;p&gt;Committed patch derby-5955-add-cp2-to-jars at svn 1437995.&lt;/p&gt;</comment>
                            <comment id="13561669" author="dagw" created="Thu, 24 Jan 2013 15:11:44 +0000"  >&lt;p&gt;Committed patch make-tests-run-03 as svn 1438035, including changes as suggested in Knut&apos;s item 1) above.&lt;/p&gt;</comment>
                            <comment id="13564999" author="dagw" created="Tue, 29 Jan 2013 02:25:03 +0000"  >&lt;p&gt;Uploading derby-5955-rename, which changes the prefix of the new data sources from &quot;NonJNDI&quot; to &quot;Basic&quot;, cf. earlier discussion on this issue.&lt;/p&gt;</comment>
                            <comment id="13565099" author="dagw" created="Tue, 29 Jan 2013 05:46:14 +0000"  >&lt;p&gt;Uploading patch derby-5955-javadoc which builds on derby-5955-rename. (You need to apply the rename patch before attempting to apply the javadoc one).&lt;/p&gt;

&lt;p&gt;The patch updates the Javadoc as suggested by Rick, plus moves the ClientDriver to jdbc3 docs only, and adding ClientDriver40 to the jdbc4 docs. I also removed the class ClientBaseDataSource from the Javadoc; do we need it?&lt;/p&gt;</comment>
                            <comment id="13565387" author="rhillegas" created="Tue, 29 Jan 2013 14:06:36 +0000"  >&lt;p&gt;Thanks for the patches, Dag. I resync&apos;d my subversion client to the head of trunk and tried to apply derby-5955-rename. I bailed out after I got this error:&lt;/p&gt;

&lt;p&gt;The next patch would delete the file a/java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,&lt;br/&gt;
which does not exist!  Assume -R? &lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I think that it&apos;s ok to remove ClientBaseDataSource from the public api. There shouldn&apos;t be a backward compatibility problem as long as the class itself hangs around. I might feel differently if the meaning of its constants were documented...but the constants are declared without any header comments and no-one has complained about this in seven years.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13566131" author="dagw" created="Wed, 30 Jan 2013 03:52:07 +0000"  >&lt;p&gt;Thanks, Rick. I guess the patch application failed due to the data source rename operation. Committed derby-5955-rename as svn 1440262 and derby-5955-javadoc as svn 1440264. I am resolving this issue since all planned work is done, except documentation. I am removing the &quot;release note needed&quot; flag since existing APIs are not affected.&lt;/p&gt;</comment>
                            <comment id="13567796" author="rhillegas" created="Thu, 31 Jan 2013 16:53:30 +0000"  >&lt;p&gt;Thanks for checking in those changes, Dag. Some comments on the public api javadoc:&lt;/p&gt;


&lt;p&gt;--------------------------------&lt;/p&gt;

&lt;p&gt;ClientConnectionPoolDataSource&lt;br/&gt;
ClientDataSource&lt;br/&gt;
ClientXADataSource&lt;br/&gt;
EmbeddedConnectionPoolDataSource&lt;br/&gt;
EmbeddedDataSource&lt;br/&gt;
EmbeddedXADataSource&lt;/p&gt;

&lt;p&gt; &quot;Java SE 7 og higher&quot; -&amp;gt; &quot;Java SE 7 or higher&quot;&lt;/p&gt;


&lt;p&gt;--------------------------------&lt;/p&gt;

&lt;p&gt;ClientConnectionPoolDataSource40&lt;br/&gt;
ClientDataSource40&lt;br/&gt;
ClientXADataSource40&lt;br/&gt;
EmbeddedConnectionPoolDataSource40&lt;br/&gt;
EmbeddedDataSource40&lt;br/&gt;
EmbeddedXADataSource40&lt;/p&gt;

&lt;p&gt;Replace &quot;running on full Java SE 7, corresponding to JDBC 4.1.&quot; onward with this:&lt;/p&gt;

&lt;p&gt;&quot;running on the following platforms:&lt;/p&gt;

&lt;p&gt;o JDBC 4.1 - Java SE 7&lt;br/&gt;
o JDBC 4.2 - full Java SE 8&lt;/p&gt;

&lt;p&gt;Use $alternativeCP2DataSource if your application runs on Java 8 compact profile 2.&lt;/p&gt;

&lt;p&gt;Use $alternativeJDBC4.0DataSource if your application runs on the following platforms:&lt;/p&gt;

&lt;p&gt;o JDBC 4.0 - Java SE 6&lt;br/&gt;
o JDBC 3.0 - J2SE 5.0&quot;&lt;/p&gt;



&lt;p&gt;--------------------------------&lt;/p&gt;

&lt;p&gt;I think that the above changes will fix the package overview for the jdbc4 version of org.apache.derby.jdbc. Right now the jdbc 4 DataSources only say that they are appropriate for Java SE 7. After the above changes, those DataSources should indicate that they are also appropriate for Java SE 8.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13568486" author="dagw" created="Fri, 1 Feb 2013 05:04:42 +0000"  >&lt;p&gt;Thanks, Rick. Attaching patch derby-5955-javadoc-followup to include the improved wording for JDBC 4.2/Java 8.&lt;/p&gt;</comment>
                            <comment id="13568547" author="dagw" created="Fri, 1 Feb 2013 07:45:08 +0000"  >&lt;p&gt;Committed the javadoc followup patch at svn r1441327.&lt;/p&gt;</comment>
                            <comment id="13568737" author="rhillegas" created="Fri, 1 Feb 2013 13:31:13 +0000"  >&lt;p&gt;Thanks, Dag. These changes look good. One additional refinement might be possible:&lt;/p&gt;

&lt;p&gt;In the overview page for the JDBC4 version of org.apache.derby.jdbc, the summaries for the old datasources are formatted oddly and contain too much information. I believe this is caused by the fact that the summary table is generated by the javadoc tool. For each class it makes a summary comment consisting of everything in the class header comment up to the first period. I think the summaries for these classes would look more like the summaries for the other classes if the first period were put after the phrase &quot;full Java SE 8&quot;. Then there&apos;s the odd formatting of the list which is included in the summary comment: the two lines of the list are appended and it&apos;s hard to parse sense out of the result. I don&apos;t know how to get a readable summary line and preserve the original list. You might consider collapsing the list into the preceding sentence in order to make the summary more readable. Thanks.&lt;/p&gt;</comment>
                            <comment id="13569732" author="dagw" created="Sun, 3 Feb 2013 07:58:30 +0000"  >&lt;p&gt;Thanks, Rick, I agree it is a bit hard to read. Attached javadoc followup patch #2, committed as svn 1441869.&lt;/p&gt;</comment>
                            <comment id="13570350" author="rhillegas" created="Mon, 4 Feb 2013 16:08:12 +0000"  >&lt;p&gt;Thanks, Dag. These changes look good to me.&lt;/p&gt;</comment>
                            <comment id="13773209" author="jira-bot" created="Fri, 20 Sep 2013 18:23:53 +0100"  >&lt;p&gt;Commit 1525061 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=myrna&quot; class=&quot;user-hover&quot; rel=&quot;myrna&quot;&gt;Myrna van Lunteren&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1525061&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1525061&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6338&quot; title=&quot;Remove Profile attribute from jar file manifests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6338&quot;&gt;&lt;del&gt;DERBY-6338&lt;/del&gt;&lt;/a&gt;; Remove Profile attribute from jar file manifests&lt;br/&gt;
  removing the Profile=compact2 lines added with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5955&quot; title=&quot;Prepare Derby to run with Compact Profiles (JEP 161)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5955&quot;&gt;&lt;del&gt;DERBY-5955&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14284790" author="myrna" created="Wed, 21 Jan 2015 00:23:22 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12635577">DERBY-6100</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12635322">DERBY-6098</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12667172">DERBY-6338</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12629835">DERBY-6059</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12560555" name="apidiff.zip" size="268374" author="dagw" created="Wed, 12 Dec 2012 12:24:59 +0000"/>
                            <attachment id="12555159" name="client-graph.png" size="144336" author="dagw" created="Wed, 28 Nov 2012 14:41:12 +0000"/>
                            <attachment id="12564824" name="derby-5955-add-cp2-to-jars.diff" size="3051" author="dagw" created="Tue, 15 Jan 2013 00:42:24 +0000"/>
                            <attachment id="12562882" name="derby-5955-client-restructure-01.diff" size="83848" author="dagw" created="Wed, 2 Jan 2013 05:20:39 +0000"/>
                            <attachment id="12562883" name="derby-5955-client-restructure-01.stat" size="1699" author="dagw" created="Wed, 2 Jan 2013 05:20:39 +0000"/>
                            <attachment id="12563865" name="derby-5955-client-restructure-02-delta.diff" size="638" author="dagw" created="Wed, 9 Jan 2013 01:27:17 +0000"/>
                            <attachment id="12563710" name="derby-5955-client-restructure-02.diff" size="188325" author="dagw" created="Tue, 8 Jan 2013 06:41:59 +0000"/>
                            <attachment id="12563711" name="derby-5955-client-restructure-02.stat" size="2153" author="dagw" created="Tue, 8 Jan 2013 06:41:59 +0000"/>
                            <attachment id="12560887" name="derby-5955-embed-restructure-01.diff" size="85980" author="dagw" created="Fri, 14 Dec 2012 00:42:35 +0000"/>
                            <attachment id="12560882" name="derby-5955-embed-restructure-01.stat" size="1454" author="dagw" created="Fri, 14 Dec 2012 00:35:57 +0000"/>
                            <attachment id="12561024" name="derby-5955-embed-restructure-02.diff" size="85754" author="dagw" created="Fri, 14 Dec 2012 20:56:14 +0000"/>
                            <attachment id="12561025" name="derby-5955-embed-restructure-02.stat" size="1388" author="dagw" created="Fri, 14 Dec 2012 20:56:14 +0000"/>
                            <attachment id="12562706" name="derby-5955-embed-restructure-03.diff" size="86596" author="dagw" created="Sun, 30 Dec 2012 08:13:52 +0000"/>
                            <attachment id="12562707" name="derby-5955-embed-restructure-03.stat" size="1388" author="dagw" created="Sun, 30 Dec 2012 08:13:52 +0000"/>
                            <attachment id="12562749" name="derby-5955-embed-restructure-04.diff" size="82807" author="dagw" created="Mon, 31 Dec 2012 03:57:56 +0000"/>
                            <attachment id="12562750" name="derby-5955-embed-restructure-04.stat" size="1316" author="dagw" created="Mon, 31 Dec 2012 03:57:56 +0000"/>
                            <attachment id="12562768" name="derby-5955-embed-restructure-followup.diff" size="2761" author="dagw" created="Mon, 31 Dec 2012 07:04:34 +0000"/>
                            <attachment id="12562769" name="derby-5955-embed-restructure-followup.stat" size="203" author="dagw" created="Mon, 31 Dec 2012 07:04:34 +0000"/>
                            <attachment id="12567758" name="derby-5955-javadoc-followup-2.diff" size="4011" author="dagw" created="Sun, 3 Feb 2013 07:58:30 +0000"/>
                            <attachment id="12567518" name="derby-5955-javadoc-followup.diff" size="11748" author="dagw" created="Fri, 1 Feb 2013 05:04:42 +0000"/>
                            <attachment id="12566910" name="derby-5955-javadoc.diff" size="25404" author="dagw" created="Tue, 29 Jan 2013 05:46:14 +0000"/>
                            <attachment id="12566911" name="derby-5955-javadoc.status" size="2260" author="dagw" created="Tue, 29 Jan 2013 05:46:14 +0000"/>
                            <attachment id="12564835" name="derby-5955-make-tests-run-01.diff" size="108407" author="dagw" created="Tue, 15 Jan 2013 01:37:59 +0000"/>
                            <attachment id="12564836" name="derby-5955-make-tests-run-01.stat" size="4687" author="dagw" created="Tue, 15 Jan 2013 01:37:59 +0000"/>
                            <attachment id="12565066" name="derby-5955-make-tests-run-02.diff" size="105548" author="dagw" created="Wed, 16 Jan 2013 03:16:12 +0000"/>
                            <attachment id="12565067" name="derby-5955-make-tests-run-02.stat" size="4687" author="dagw" created="Wed, 16 Jan 2013 03:16:12 +0000"/>
                            <attachment id="12565450" name="derby-5955-make-tests-run-03.diff" size="90499" author="dagw" created="Fri, 18 Jan 2013 08:10:15 +0000"/>
                            <attachment id="12564129" name="derby-5955-new-non-jndi-ds-01.diff" size="30697" author="dagw" created="Thu, 10 Jan 2013 07:30:47 +0000"/>
                            <attachment id="12564130" name="derby-5955-new-non-jndi-ds-01.stat" size="951" author="dagw" created="Thu, 10 Jan 2013 07:30:47 +0000"/>
                            <attachment id="12564549" name="derby-5955-new-non-jndi-ds-02.diff" size="30763" author="dagw" created="Sat, 12 Jan 2013 04:10:30 +0000"/>
                            <attachment id="12564550" name="derby-5955-new-non-jndi-ds-02.stat" size="951" author="dagw" created="Sat, 12 Jan 2013 04:10:30 +0000"/>
                            <attachment id="12560469" name="derby-5955-proof-of-concept-2.diff" size="312740" author="dagw" created="Tue, 11 Dec 2012 23:06:44 +0000"/>
                            <attachment id="12560470" name="derby-5955-proof-of-concept-2.stat" size="8816" author="dagw" created="Tue, 11 Dec 2012 23:06:44 +0000"/>
                            <attachment id="12555156" name="derby-5955-proof-of-concept.diff" size="309986" author="dagw" created="Wed, 28 Nov 2012 14:41:12 +0000"/>
                            <attachment id="12555157" name="derby-5955-proof-of-concept.stat" size="8727" author="dagw" created="Wed, 28 Nov 2012 14:41:12 +0000"/>
                            <attachment id="12566888" name="derby-5955-rename.diff" size="82084" author="dagw" created="Tue, 29 Jan 2013 02:25:03 +0000"/>
                            <attachment id="12564838" name="derby-5955-ser-b.zip" size="16478" author="dagw" created="Tue, 15 Jan 2013 01:38:44 +0000"/>
                            <attachment id="12555160" name="derby-5955-ser.zip" size="30420" author="dagw" created="Wed, 28 Nov 2012 14:45:23 +0000"/>
                            <attachment id="12555158" name="embedded-graph.png" size="184239" author="dagw" created="Wed, 28 Nov 2012 14:41:12 +0000"/>
                            <attachment id="12555342" name="old-client-graph.png" size="73638" author="dagw" created="Thu, 29 Nov 2012 11:28:50 +0000"/>
                            <attachment id="12555343" name="old-embedded-graph.png" size="72950" author="dagw" created="Thu, 29 Nov 2012 11:28:50 +0000"/>
                            <attachment id="12560471" name="publishedapi.zip" size="505065" author="dagw" created="Tue, 11 Dec 2012 23:06:44 +0000"/>
                            <attachment id="12556098" name="publishedapi.zip" size="571498" author="dagw" created="Wed, 5 Dec 2012 13:46:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>43.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 28 Nov 2012 20:03:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>249326</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy41g7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>57391</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>