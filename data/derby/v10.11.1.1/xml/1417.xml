<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:40:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1417/DERBY-1417.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1417] Add new, lengthless overloads to the streaming api</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1417</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The JDBC4 Expert Group has approved a new set of overloads for the streaming methods. These overloads do not take a length argument. Here are the new overloads:&lt;/p&gt;

&lt;p&gt;PreparedStatement.setAsciiStream(int parameterIndex, java.io.InputStream x)&lt;br/&gt;
PreparedStatement.setBinaryStream(int parameterIndex, java.io.InputStream x)&lt;br/&gt;
PreparedStatement.setCharacterStream(int parameterIndex, java.io.Reader reader)&lt;br/&gt;
PreparedStatement.setNCharacterStream(int parameterIndex, java.io.Reader reader)&lt;br/&gt;
PreparedStatement.setBlob(int parameterIndex, java.io.InputStream inputStream)&lt;br/&gt;
PreparedStatement.setClob(int parameterIndex, java.io.Reader reader)&lt;br/&gt;
PreparedStatement.setNClob(int parameterIndex, java.io.Reader reader)&lt;br/&gt;
CallableStatement.setAsciiStream(java.lang.String parameterName, java.io.InputStream x)&lt;br/&gt;
CallableStatement.setBinaryStream(java.lang.String parameterName, java.io.InputStream x)&lt;br/&gt;
CallableStatement.setCharacterStream(java.lang.String parameterName, java.io.Reader reader)&lt;br/&gt;
CallableStatement.setNCharacterStream(java.lang.String parameterName, java.io.Reader reader)&lt;br/&gt;
CallableStatement.setBlob(java.lang.String parameterName, java.io.InputStream inputStream)&lt;br/&gt;
CallableStatement.setClob(java.lang.String parameterName, java.io.Reader reader)&lt;br/&gt;
CallableStatement.setNClob(java.lang.String parameterName, java.io.Reader reader)&lt;br/&gt;
ResultSet.updateAsciiStream(int columnIndex, java.io.InputStream x)&lt;br/&gt;
ResultSet.updateAsciiStream(java.lang.String columnLabel, java.io.InputStream x)&lt;br/&gt;
ResultSet.updateBinaryStream(int columnIndex, java.io.InputStream x)&lt;br/&gt;
ResultSet.updateBinaryStream(java.lang.String columnLabel, java.io.InputStream x, int length)&lt;br/&gt;
ResultSet.updateCharacterStream(int columnIndex, java.io.Reader x)&lt;br/&gt;
ResultSet.updateCharacterStream(java.lang.String columnLabel, java.io.Reader x)&lt;br/&gt;
ResultSet.updateNCharacterStream(int columnIndex, java.io.Reader x)&lt;br/&gt;
ResultSet.updateNCharacterStream(java.lang.String columnLabel, java.io.Reader x)  &lt;br/&gt;
ResultSet.updateBlob(int columnIndex, java.io.InputStream inputStream)&lt;br/&gt;
ResultSet.updateBlob(java.lang.String columnLabel, java.io.InputStream inputStream)&lt;br/&gt;
ResultSet.updateClob(int columnIndex, java.io.Reader reader)&lt;br/&gt;
ResultSet.updateClob(java.lang.String columnLabel, java.io.Reader reader)&lt;br/&gt;
ResultSet.updateNClob(int columnIndex, java.io.Reader reader)&lt;br/&gt;
ResultSet.updateNClob(java.lang.String columnLabel, java.io.Reader reader)&lt;/p&gt;

&lt;p&gt;We should add these new overloads soon so that the build will not break when this methods turn up in a published Mustang build.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12344445">DERBY-1417</key>
            <summary>Add new, lengthless overloads to the streaming api</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Jun 2006 23:36:37 +0100</created>
                <updated>Wed, 1 Jul 2009 01:34:45 +0100</updated>
                            <resolved>Tue, 29 Aug 2006 08:09:41 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12416352" author="rhillegas" created="Thu, 15 Jun 2006 23:46:46 +0100"  >&lt;p&gt;Corrected the set of overloads.&lt;/p&gt;</comment>
                            <comment id="12416354" author="rhillegas" created="Thu, 15 Jun 2006 23:56:01 +0100"  >&lt;p&gt;Attaching derby-1417-01-castsInTests.diff. This patch adds some casts to some jdbc4 tests so that they will continue to compile when the new streaming overloads turn up in a future build of jdk1.6. Thanks to Ole and Narayanan for analyzing the problem and to Kristian for supplying the patch. The patch successfully compiles using mustang build 87 for the JDBC4 support. The jdbc4 tests pass without any new diffs. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java\testing\org\apache\derbyTesting\functionTests\tests\jdbc4\TestPreparedStatementMethods.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\jdbc4\CallableStatementTest.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\jdbc4\ResultSetTest.java&lt;/p&gt;

&lt;p&gt;Committed at subversion revision 414624.&lt;/p&gt;</comment>
                            <comment id="12418207" author="kristwaa" created="Wed, 28 Jun 2006 17:35:28 +0100"  >&lt;p&gt;&apos;derby-1417-1a-notImplemented.diff&apos; adds a number of new lengthless streaming overloads that Derby will not support. All methods added by the patch throws not-implemented exceptions. We don&apos;t support them because we either don&apos;t support the data type or because we don&apos;t yet support named parameters in CallableStatement.&lt;br/&gt;
I feel that, after a review, the patch is safe to apply even though I have not  yet submitted any tests for it because:&lt;br/&gt;
 a) Only new methods are added.&lt;br/&gt;
 b) They all throw not-implemented exceptions.&lt;br/&gt;
 c) Mostly JDBC4 specific classes are affected.&lt;/p&gt;

&lt;p&gt;I will add tests, but have to wait until the signatures have made it into Mustang (I do have some tests already, but here I use the specific implementation classes, not the interfaces).&lt;/p&gt;

&lt;p&gt;The following methods have been added, both for the embedded and the client driver:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;CallableStatement&amp;#93;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;void setAsciiStream(String parameterName, InputStream x)&lt;/li&gt;
	&lt;li&gt;void setBinaryStream(String parameterName, InputStream x)&lt;/li&gt;
	&lt;li&gt;void setBlob(String parameterName, InputStream inputStream)&lt;/li&gt;
	&lt;li&gt;void setCharacterStream(String parameterName, Reader reader)&lt;/li&gt;
	&lt;li&gt;void setClob(String parameterName, Reader reader)&lt;/li&gt;
	&lt;li&gt;void setNCharacterStream(String parameterName, Reader value)&lt;/li&gt;
	&lt;li&gt;void setNClob(String parameterName, Reader reader)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;PreparedStatement&amp;#93;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;void setNCharacterStream(int parameterIndex, Reader value)&lt;/li&gt;
	&lt;li&gt;void setNClob(int parameterIndex, Reader reader)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;ResultSet&amp;#93;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;void updateNCharacterStream(int columIndex, Reader x)&lt;/li&gt;
	&lt;li&gt;void updateNCharacterStream(String columnName, Reader value)&lt;/li&gt;
	&lt;li&gt;void updateNClob(int columIndex, Reader reader)&lt;/li&gt;
	&lt;li&gt;void updateNClob(String columName, Reader reader)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In addition to the new methods added, I added a class comment to EmbedResultSet40.java and moved two methods within that file.&lt;/p&gt;

&lt;p&gt;Note that I have added the not-implemented methods in the JDBC 40 specific classes (where available), while I intend to push the methods we do support to the superclass(es) - ie. CallableStatement.java instead of CallableStatement40.java.&lt;br/&gt;
I plan to implement the remaining methods, and they will be adressed in separate patches.&lt;br/&gt;
I have run the jdbc40 suite without failures.&lt;/p&gt;

&lt;p&gt;This partial patch is ready for review.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12418243" author="knutanders" created="Wed, 28 Jun 2006 21:38:26 +0100"  >&lt;p&gt;Committed &apos;derby-1417-1a-notImplemented.diff&apos; into trunk with revision 417753.&lt;/p&gt;</comment>
                            <comment id="12419527" author="kristwaa" created="Thu, 6 Jul 2006 21:57:34 +0100"  >&lt;p&gt;&apos;derby-1417-2a-rstest-refactor.diff&apos; refactors and rewrites parts of jdbc4/ResultSetTest.junit.&lt;br/&gt;
A few utility methods have been introduced, and a TestSetup-class (anonymous) was used to create the table once. This was done because the previous implementation could cause other tests to fail if one test failed.&lt;/p&gt;

&lt;p&gt;The utility methods follow a pattern that will also be used by a number of tests written for the new lengthless overloads.&lt;/p&gt;

&lt;p&gt;I have run jdbc4/ResultSetTest.junit and the jdbc40 suite (embedded &amp;amp; DerbyNetClient) without failures. No failures before refactoring, no failures afterwards. Please review/commit.&lt;/p&gt;</comment>
                            <comment id="12419567" author="kristwaa" created="Fri, 7 Jul 2006 00:46:49 +0100"  >&lt;p&gt;&apos;derby-1417-2a-rstest-refactor.diff&apos; ready for review/commit.&lt;/p&gt;</comment>
                            <comment id="12420034" author="knutanders" created="Mon, 10 Jul 2006 19:41:03 +0100"  >&lt;p&gt;derby-1417-2a-rstest-refactor.diff looks good. Committed revision 420497.&lt;/p&gt;</comment>
                            <comment id="12420647" author="kristwaa" created="Wed, 12 Jul 2006 23:49:13 +0100"  >&lt;p&gt;&apos;derby-1417-3a-embimpl-and-tests.diff&apos; provides tests and implementations for the following methods on the embedded side:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ResultSet&amp;#93;&lt;/span&gt;&lt;br/&gt;
  public void updateAsciiStream(int columnIndex, InputStream x)&lt;br/&gt;
  public void updateBinaryStream(int columnIndex, InputStream x)&lt;br/&gt;
  public void updateCharacterStream(int columnIndex, Reader x)&lt;br/&gt;
  public void updateAsciiStream(String columnName, InputStream x)&lt;br/&gt;
  public void updateBinaryStream(String columnName, InputStream x)&lt;br/&gt;
  public void updateCharacterStream(String columnName, Reader reader)&lt;br/&gt;
  public void updateBlob(int columnIndex, InputStream x)&lt;br/&gt;
  public void updateBlob(String columnName, InputStream x)&lt;br/&gt;
  public void updateClob(int columnIndex, Reader x)&lt;br/&gt;
  public void updateClob(String columnName, Reader x)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;PreparedStatement&amp;#93;&lt;/span&gt;&lt;br/&gt;
  public void setBinaryStream(int parameterIndex, InputStream x)&lt;br/&gt;
  public void setAsciiStream(int parameterIndex, InputStream x)&lt;br/&gt;
  public void setCharacterStream(int parameterIndex, Reader reader)&lt;br/&gt;
  public void setClob(int parameterIndex, Reader reader)&lt;br/&gt;
  public void setBlob(int parameterIndex, InputStream inputStream)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;IMPORTANT&lt;/b&gt;: This patch must be built with Mustang build 91 for the tests to compile!&lt;/p&gt;

&lt;p&gt;Some of the tests are temporarily disabled for the client driver. These will be enabed when the client implementation is submitted.&lt;/p&gt;

&lt;p&gt;I made some changes to ReaderToUTF8Stream, and to the setXXXStreamInteral-methods. I would appreciate if someone had a look at them.&lt;/p&gt;

&lt;p&gt;Derbyall ran cleanly minus the &apos;dynamic&apos; JDBC 4 tests (VerifySignatures, ClosedObjects, UnsupportedVetter).&lt;br/&gt;
I plan to do some additional testing with large LOBs, and will report back on this. These tests will not run as part of any suite (due to time and memory requirements), but I might submit the code for inclusion anyway.&lt;/p&gt;


&lt;p&gt;To the committers: Please do not commit this before Mustang build 91 is out!&lt;br/&gt;
(must be available at &lt;a href=&quot;http://download.java.net/jdk6/binaries/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/jdk6/binaries/&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="12421610" author="knutanders" created="Mon, 17 Jul 2006 14:14:15 +0100"  >&lt;p&gt;Hi Kristian,&lt;/p&gt;

&lt;p&gt;I have reviewed your patch. The code changes look good and derbyall&lt;br/&gt;
runs cleanly on Sun JVM 1.5.0. I ran the jdbc40 tests, and they&lt;br/&gt;
complain because some of the methods are missing from&lt;br/&gt;
EmbedCallableStatement40 (they should only throw not supported). Also,&lt;br/&gt;
they report that many methods are missing from the Brokered* classes,&lt;br/&gt;
but I guess you will add them in a later patch?&lt;/p&gt;

&lt;p&gt;When I run &apos;ant javadoc&apos;, I see these warnings:&lt;/p&gt;

&lt;p&gt;EmbedResultSet.java:2957: warning - @param argument &quot;parameterIndex&quot; is not a parameter name.&lt;br/&gt;
EmbedResultSet.java:4778: warning - @param argument &quot;columnLabel&quot; is not a parameter name.&lt;br/&gt;
EmbedResultSet.java:4830: warning - @param argument &quot;x&quot; is not a parameter name.&lt;br/&gt;
EmbedResultSet.java:4888: warning - @param argument &quot;inputStream&quot; is not a parameter name.&lt;br/&gt;
EmbedResultSet.java:4944: warning - @param argument &quot;inputStream&quot; is not a parameter name.&lt;br/&gt;
EmbedResultSet.java:5004: warning - @param argument &quot;reader&quot; is not a parameter name.&lt;br/&gt;
EmbedResultSet.java:5062: warning - @param argument &quot;reader&quot; is not a parameter name.&lt;/p&gt;

&lt;p&gt;Some more comments/questions:&lt;/p&gt;

&lt;p&gt;EmbedResultSet.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;javadocs for for updateAsciiStream(), updateBinaryStream(),&lt;br/&gt;
    updateCharacterStream(), updateBlob() and updateClob() say&lt;br/&gt;
    &quot;@throws SQLFeatureNotSupportedException if the JDBC driver does&lt;br/&gt;
    not support this method&quot;. Since Derby does support these methods,&lt;br/&gt;
    that sentence could be removed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;line exceeding 80 characters in updateCharacterStreamInternal()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the update* methods start with a switch on colType. Could the&lt;br/&gt;
    switch be replaced with a call to&lt;br/&gt;
    DataTypeDescriptor.isJDBCTypeEquivalent() or factored out somehow?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbedPreparedStatement.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I feel that the names of the new assert*Conditions methods are a&lt;br/&gt;
    little confusing. When I read &quot;assert&quot;, I first thought they were&lt;br/&gt;
    used for asserting certain conditions in debug/sane builds. What&lt;br/&gt;
    about renaming them to check*Conditions?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;javadocs contain &quot;@throws SQLFeatureNotSupportedException&quot; for&lt;br/&gt;
    methods that are implemented&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;line exceeding 80 characters in setBlob(int,Blob)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertBlobConditions() and assertClobConditions() have a comment&lt;br/&gt;
    about DB2 compliance. Since the behaviour it refers to (only allow&lt;br/&gt;
    setBlob() on BLOB columns and setClob() on CLOB columns) seems to&lt;br/&gt;
    be exactly as specified by the JDBC spec, I think referring to DB2&lt;br/&gt;
    confuses more than it clarifies.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ReaderToUTF8Stream.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The constructor can throw an IllegalArgumentException, but it is&lt;br/&gt;
    not caught anywhere, so it will propagate up to the application as&lt;br/&gt;
    an IllegalArgumentException, not as an SQLException. Since this&lt;br/&gt;
    exceptional situation only happens if there is a bug in Derby,&lt;br/&gt;
    perhaps SanityManager.ASSERT could be used instead?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Tests:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the new assertEquals() methods could be useful to have in&lt;br/&gt;
    BaseTestCase&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think it would be good to test that removal of trailing blanks&lt;br/&gt;
    in clobs is handled correctly&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12421611" author="kristwaa" created="Mon, 17 Jul 2006 14:14:22 +0100"  >&lt;p&gt;Truncation of trailing blanks for length less Clobs will be added as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12421709" author="kristwaa" created="Mon, 17 Jul 2006 20:58:05 +0100"  >&lt;p&gt;Thanks for the review Knut Anders!&lt;br/&gt;
My replies follow the order of the questions in your comment.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I forgot to duplicate the methods from PreparedStatement40 in&lt;br/&gt;
   EmbedCallableStatement40 (no inheritance here). I have added them in the&lt;br/&gt;
   new patch. I followed the &quot;policy&quot; of keeping unimplemented methods in the&lt;br/&gt;
   JDBC40 specific classes. I still get 21 failures in VerifySignatures, but&lt;br/&gt;
   all are in the Brokered* classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Brokered* methods will be added in a follow-up patch (I feel this patch is&lt;br/&gt;
   already too big). Since no JDBC4 tests are picking up these missing methods&lt;br/&gt;
   except for the dynamic ones (VerifySignatures, UnsupportedVetter,&lt;br/&gt;
   ClosedObjects), I think maybe we should run more of our tests with&lt;br/&gt;
   XA/pooled connections. Does anyone else feel the same?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I have fixed the JavaDoc errors.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbedResultSet.java:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed &quot;@throws SQLFeatureNotSupported&quot; in JavaDoc.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Shortened long line.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Yes, the switch can be factored out. I decided to put this on hold, as I&apos;m&lt;br/&gt;
   not sure what is the best approach. It makes sense to factor out the&lt;br/&gt;
   occurences where only the type is checked, and no other action is taken&lt;br/&gt;
   based on the type. This is typical for the ResultSet.updateX methods, but&lt;br/&gt;
   not for ResultSet.getXStream methods. Not sure if&lt;br/&gt;
   DataTypeDescriptor.isJDBCTypeEquivalent() can be used as it is, for&lt;br/&gt;
   instance it does not know anything about Types.BLOB.&lt;br/&gt;
   The common mechanism should/could also be used across different classes,&lt;br/&gt;
   for instance in both EmbedResultSet and EmbedPreparedStatement. So, where&lt;br/&gt;
   should it be placed?&lt;br/&gt;
   Feel free to add a Jira to track this.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;EmbedPreparedStatement.java:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ok. Names changed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed &quot;@throws SQLFeatureNotSupported&quot; in JavaDoc.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Shortened long line.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I removed the comments about DB2 compliance (these were already present&lt;br/&gt;
   before my patch).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ReaderToUTF8Stream.java:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Was not sure how to handle this. I guess only getting this with debug/sane&lt;br/&gt;
   builds is good enough. I replaced the exception with a&lt;br/&gt;
   SanityManager.DEBUG block.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Tests:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I added &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1524&quot; title=&quot;Add assertEquals overloads for InputStream and Reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1524&quot;&gt;&lt;del&gt;DERBY-1524&lt;/del&gt;&lt;/a&gt; for the assertEquals-overloads (a sub-task of 1122).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This will be added as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt;. Might have to do something on the&lt;br/&gt;
   client side also.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In addition to the comments from the review, I changed the following (not&lt;br/&gt;
related to my patch):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Modified EmbedResultSet.updateAsciiStream(int,InputStream,long) to use&lt;br/&gt;
   updateCharacterStreamInternal instead of updateCharacterStream to avoid&lt;br/&gt;
   duplicate checks.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed blank line at the end of EmbedResultSet.java.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Corrected spelling error in PreparedStatementTest: Inerted -&amp;gt; Inserted&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I reran suite jdbc4. Only saw 3 expected failures: ClosedObjectTest,&lt;br/&gt;
UnsupportedVetter and VerifySignatures.&lt;br/&gt;
&apos;derby-1417-3b-embimpl-and-tests.diff&apos; is ready for more review and/or commit.&lt;/p&gt;</comment>
                            <comment id="12421819" author="knutanders" created="Tue, 18 Jul 2006 10:37:07 +0100"  >&lt;p&gt;Thank you for addressing my comments, Kristian. I am happy with the&lt;br/&gt;
changes and have committed the 3b patch into trunk with revision&lt;br/&gt;
422995.&lt;/p&gt;

&lt;p&gt;As to your questions, yes, I definitely think it would be a good idea&lt;br/&gt;
to run more of the tests with xa/pooled connections. I believe Anurag&lt;br/&gt;
submitted a patch which made it simpler to run the existing JUnit&lt;br/&gt;
tests with XAConnection. It would be great if we could use that&lt;br/&gt;
functionality to get better test coverage.&lt;/p&gt;

&lt;p&gt;I think the best place for the common type compatibility checks would&lt;br/&gt;
be in DataTypeDescriptor. For instance, isCharacterStreamCompatible()&lt;br/&gt;
and isBinaryStreamCompatible(). I will file a JIRA for it.&lt;/p&gt;</comment>
                            <comment id="12421842" author="kristwaa" created="Tue, 18 Jul 2006 12:23:54 +0100"  >&lt;p&gt;&apos;derby-1417-4a-disable-psTestsDnc.diff&apos; disables 5 tests in jdbc4/PreparedStatementTest for DerbyNetClient.&lt;br/&gt;
This error must have slipped off the table and crawled under the carpet... Sorry for the noise. The tests will be enabled again when the client-side implementation is done.&lt;/p&gt;

&lt;p&gt;Please commit this as soon as possible, to stop the test from failing in the nightly runs. Thanks.&lt;/p&gt;</comment>
                            <comment id="12421855" author="knutanders" created="Tue, 18 Jul 2006 13:19:25 +0100"  >&lt;p&gt;Committed the 4a patch into trunk with revision 423068. (I changed one line before committing because the patch disabled one test case that would actually work with the client driver.)&lt;/p&gt;</comment>
                            <comment id="12422112" author="kristwaa" created="Wed, 19 Jul 2006 14:02:41 +0100"  >&lt;p&gt;&apos;derby-1417-5a-brokered.diff&apos; adds the new overloads to the iapi/jdbc/Brokered*-classes.&lt;br/&gt;
The jdbc4 suite now runs without failure under embedded. Note that there will still be failures when running under DerbyNetClient.&lt;br/&gt;
Comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Note the method duplication in BrokeredCallableStatement40.&lt;/li&gt;
	&lt;li&gt;I have not added JavaDoc for methods that are not implemented.&lt;/li&gt;
	&lt;li&gt;I updated the UnsupportedVetter-test with the new methods we don&apos;t support;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;methods with named parameters in CallableStatement&lt;/li&gt;
	&lt;li&gt;methods for unsupported datatypes in Prepared-/CallableStatement and ResultSet.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Patch is ready for review.&lt;/p&gt;</comment>
                            <comment id="12422350" author="knutanders" created="Thu, 20 Jul 2006 07:49:19 +0100"  >&lt;p&gt;Committed the 5a patch into trunk with revision 423807.&lt;/p&gt;</comment>
                            <comment id="12423386" author="kristwaa" created="Tue, 25 Jul 2006 17:47:22 +0100"  >&lt;p&gt;&apos;derby-1417-6a-clientimpl.diff&apos; adds the client side implementations of the length less overloads.&lt;br/&gt;
I had to make some changes &quot;here and there&quot; to get this working, and I remind people that this is a somewhat temporarily implementation due to the fact that we do not (yet) support streaming of data with unknown length.&lt;br/&gt;
Therefore, streams used for input are exhausted and materialized in memory before they are sent from the client to the server.&lt;/p&gt;

&lt;p&gt;This is the last patch adding new JDBC 4 methods, but there will be at least one more follow-up patch for the embedded driver (to fix OutOfMemoryError), and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt; should be completed as well.&lt;/p&gt;

&lt;p&gt;Comments to the patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;LOBs are materialized when execute* is called (in &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob.length()).&lt;/li&gt;
	&lt;li&gt;I renamed and generalized the existing class UTF32BEEncodedInputStream to reuse code. It now delivers InputStreams with UTF8 or UTF16 encoding and is used to create a stream from a reader.&lt;/li&gt;
	&lt;li&gt;I continued to use the encoding &quot;US-ASCII&quot; over &quot;ISO-8859-1&quot; to be consistent. This will be handled by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1519&quot; title=&quot;&amp;#39;setAsciiStream&amp;#39; uses different encodings for embedded and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1519&quot;&gt;&lt;del&gt;DERBY-1519&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;I added ByteArrayCombinerStream (and a test) to reduce memory usage on the client.&lt;/li&gt;
	&lt;li&gt;I enabled tests temporarily disabled for DerbyNetClient.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I ran suite jdbc4 without failures. Because I&apos;m running a bit short of time, I post the patch before my derbyalls are finished. I will add the results tomorrow.&lt;br/&gt;
Patch is ready for review.&lt;/p&gt;

&lt;p&gt;For the committer: I did a &apos;svn rename&apos; on UTF32BEEncodedInputStream. I think it should be handled by the diff, but keep an extra eye on it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12423462" author="rhillegas" created="Tue, 25 Jul 2006 22:18:31 +0100"  >&lt;p&gt;1) The patch tool objects when I try to apply this fix:&lt;/p&gt;

&lt;p&gt;patching file java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java&lt;br/&gt;
patching file java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java&lt;br/&gt;
patching file java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ByteArrayCombinerStreamTest.java&lt;br/&gt;
patching file java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ByteArrayCombinerStreamTest_app.properti&lt;br/&gt;
es&lt;br/&gt;
patching file java/testing/org/apache/derbyTesting/functionTests/suites/derbynetclientmats.runall&lt;br/&gt;
can&apos;t find file to patch at input line 429&lt;br/&gt;
Perhaps you used the wrong -p or --strip option?&lt;br/&gt;
The text leading up to this was:&lt;br/&gt;
--------------------------&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Index: java/client/org/apache/derby/client/net/EncodedInputStream.java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;===================================================================&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;#8212; java/client/org/apache/derby/client/net/EncodedInputStream.java    (revision 424971)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+++ java/client/org/apache/derby/client/net/EncodedInputStream.java    (working copy)&lt;br/&gt;
--------------------------&lt;br/&gt;
File to patch:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;2) In addition, it looks like we&apos;re missing the copyright boilerplate in ByteArrayCombinerStreamTest.java and ByteArrayCombinerStream.java.&lt;/p&gt;</comment>
                            <comment id="12423598" author="naka" created="Wed, 26 Jul 2006 11:06:09 +0100"  >&lt;p&gt;I notice the problem that buffer size of EncodedInputStream does not suit for all encoding, especially UTF-8.&lt;br/&gt;
UTF-8 needs three bytes for a character which is out of ISO-8859-1.&lt;/p&gt;

&lt;p&gt;This is reason why I limit the encoding to UTF32BE in UTF32BEEncodedInputStream.&lt;/p&gt;

&lt;p&gt;If you intend to share the class to multiple encodins, &lt;br/&gt;
I think you should create subclass of each encodings inherited from EncodedInputStream which contaiins hard-coded size of buffer and encoding identifier.&lt;/p&gt;</comment>
                            <comment id="12423610" author="kristwaa" created="Wed, 26 Jul 2006 11:43:27 +0100"  >&lt;p&gt;Hi Tomohito,&lt;/p&gt;

&lt;p&gt;Are you talking about the buffer for the PublicBufferOutputStream (which is a subclass of ByteArrayOutputStream)?&lt;br/&gt;
I agree it might not be optimal, but ByteArrayOutputStream grows the buffer as needed. If we are reading chars outside ISO-8859-1, the ByteArrayOutputStream would have to double its internal buffer once for every 1024 characters we read (from 2048 bytes to 4096 bytes).&lt;br/&gt;
My take on this, is that a separate Jira should be logged for this issue if it is worth optimizing/analyzing.&lt;/p&gt;

&lt;p&gt;Also, I was very confused by the naming of the file UTF32BEEncodedInputStream and its comments. I found that it actually used the encoding UnicodeBigUnmarked, which is the Java name for UTF-16BE. But the name and the comments claimed UTF-32BE was used.&lt;/p&gt;

&lt;p&gt;As for the subclasses, I thought about this, but decided not to do it, since the class is completely internal. If we do it, however, we can make the one for UnicodeBigUnmarked package private, and the UTF8 one public, since the latter one is the only one used outside the client/net package. I also thought about ways to restrict the available encodings, but again, this is an internal class and we should be able to choose only standard encodings (always available in Java). I mentioned this in the class comment. If you feel strongly about this, I can make 3 classes (please let me know).&lt;/p&gt;


&lt;p&gt;Thanks for looking at the patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;BTW: My derbyalls showed a lot of unrelated errors (I got 18 total with 1.6), so I need time to study the results before I post anything. However,  with 1.4 I only got a few known issues.&lt;/p&gt;</comment>
                            <comment id="12423644" author="kristwaa" created="Wed, 26 Jul 2006 14:27:19 +0100"  >&lt;p&gt;&apos;derby-1417-6b-clientimpl.diff&apos; deprecates 6a.&lt;br/&gt;
Changes:&lt;br/&gt;
 1) Add missing license to two files.&lt;br/&gt;
 2) Added static factory methods to EncodedInputStream for UTF-8- and UTF-16BE-streams.&lt;br/&gt;
     Set byte buffer size to 3 and 2 times size of char buffer, respectively.&lt;br/&gt;
     &apos;createUTF8Stream&apos; is public, &apos;createUTF16BEStream&apos; is package private.&lt;br/&gt;
     I made class &apos;EncodedInputStream&apos; public final, and its constructor private.&lt;br/&gt;
 3) Updated two classes (Request and Clob) to use the new static methods.&lt;/p&gt;

&lt;p&gt;When applying patch, do a &apos;svn rename java/client/org/apache/derby/client/net/UTF32BEEncodedInputStream.java java/client/org/apache/derby/client/net/EncodedInputStream.java&apos; first. Just press ENTER (answer no) at the two prompts when running the patch tool.&lt;/p&gt;</comment>
                            <comment id="12423674" author="kristwaa" created="Wed, 26 Jul 2006 16:50:24 +0100"  >&lt;p&gt;&apos;derby-1417-6c-clientimpl.diff&apos; deprecates 6b.&lt;br/&gt;
Added both size of the character buffer and the initial size of the byte buffer to the constructor of EncodedInputStream.&lt;br/&gt;
Made the required changes elsewhere due to this addition.&lt;/p&gt;

&lt;p&gt;Suite jdbc40 ran without failures, and all failures seen during derbyall (17 in total) have been verified to be caused by other issues (15 because of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1578&quot; title=&quot;A number of tests fail due to rework on toString() method of SQLException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1578&quot;&gt;&lt;del&gt;DERBY-1578&lt;/del&gt;&lt;/a&gt; and 1 because of local environment errors and 1 has already been fixed in trunk).&lt;/p&gt;

&lt;p&gt;The &apos;svn rename&apos; command must still be run before the patch is applied.&lt;/p&gt;</comment>
                            <comment id="12423829" author="knutanders" created="Thu, 27 Jul 2006 13:55:10 +0100"  >&lt;p&gt;Hi Kristian,&lt;/p&gt;

&lt;p&gt;I have had a look at your patch, and I have a couple of comments and&lt;br/&gt;
questions:&lt;/p&gt;

&lt;p&gt;  1) I believe using Lob.materializeStream() to get the length of a&lt;br/&gt;
     Clob is not correct. sqlLength_ is set to the number of bytes&lt;br/&gt;
     (UTF-8 encoded), not the number characters. I wrote a small test&lt;br/&gt;
     that called ResultSet.updateClob(int,Reader) and getClob() to get&lt;br/&gt;
     it back, and Clob.length() returned more than the number of&lt;br/&gt;
     characters when there were one or more non-ascii characters.&lt;/p&gt;

&lt;p&gt;  2) EncodedInputStream uses &quot;UTF8&quot; and &quot;UnicodeBigUnmarked&quot; as&lt;br/&gt;
     encodings. These names are not necessarily understood by all&lt;br/&gt;
     JVMs. However, &quot;UTF-8&quot; and &quot;UTF-16BE&quot; (for which UTF8 and&lt;br/&gt;
     UnicodeBigUnmarked are aliases) must be supported by all JVMs, so&lt;br/&gt;
     it is probably better to use those names.&lt;/p&gt;

&lt;p&gt;  3) Clob&apos;s constructor checks whether the supplied encoding is&lt;br/&gt;
     UnicodeBigUnmarked, but I didn&apos;t find that it was called with&lt;br/&gt;
     this encoding anywhere in the code. Could that part be removed?&lt;/p&gt;

&lt;p&gt;  4) Clob&apos;s constructor checks whether the supplied encoding is&lt;br/&gt;
     US-ASCII, UTF-8 or UnicodeBigUnmarked, but if it&apos;s neither of&lt;br/&gt;
     those, no error is signalled. Wouldn&apos;t it be appropriate to throw&lt;br/&gt;
     some kind of SQLException? If so, SQLState.UNSUPPORTED_ENCODING&lt;br/&gt;
     sounds like a good choice.&lt;/p&gt;

&lt;p&gt;  5) In ByteArrayCombinerStream, I think it would be good to convert&lt;br/&gt;
     the comments which describe the instance variables to&lt;br/&gt;
     javadoc. Also, the method description seems to be missing from&lt;br/&gt;
     the constructor and read(byte[],int,int).&lt;/p&gt;

&lt;p&gt;  6) ByteArrayCombinerStreamTest is a subclass of BaseJDBCTestCase,&lt;br/&gt;
     but it&apos;s not a JDBC test. Shouldn&apos;t it have been a direct&lt;br/&gt;
     subclass of BaseTestCase?&lt;/p&gt;

&lt;p&gt;  7) (minor) I have noticed in the svn log that there is an ongoing&lt;br/&gt;
     clean-up of the JUnit tests. Among other things, setUp and&lt;br/&gt;
     tearDown methods have been made protected instead of&lt;br/&gt;
     public. Maybe setUp and tearDown in ByteArrayCombinerStreamTest&lt;br/&gt;
     should be made protected too?&lt;/p&gt;

&lt;p&gt;  8) (very minor) The condition in the while clause in&lt;br/&gt;
     ByteArrayCombinerStream.read(byte[],int,int) tests that (read !=&lt;br/&gt;
     length). I feel the code would be easier to read if the test was&lt;br/&gt;
     (read &amp;lt; length) since that would tell the reader that the read&lt;br/&gt;
     variable is increasing in the loop. Also, it wouldn&apos;t go into an&lt;br/&gt;
     infinite loop if there&apos;s an off-by-one error.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12424055" author="knutanders" created="Fri, 28 Jul 2006 11:21:01 +0100"  >&lt;p&gt;I did some investigation on the existing Clob implementation on the&lt;br/&gt;
client. It might be relevant to the work on this issue. Here&apos;s a&lt;br/&gt;
summary of my findings:&lt;/p&gt;

&lt;p&gt;There are three methods which return the length of the Clob:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;length() which is supposed to return the length in characters&lt;/li&gt;
	&lt;li&gt;getByteLength() which is supposed to return the length in bytes&lt;br/&gt;
    for whatever the underlying encoding is&lt;/li&gt;
	&lt;li&gt;getUTF8Length() which is supposed to return the length of the Clob&lt;br/&gt;
    if it is UTF-8 encoded&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;length() and getByteLength() always return the same value, but what&lt;br/&gt;
they return is not consistent.&lt;/p&gt;

&lt;p&gt;getUTF8Length() only works if the Clob object was created with the&lt;br/&gt;
constructor that takes a string parameter.&lt;/p&gt;

&lt;p&gt;If the Clob was created with the constructor that takes a Reader,&lt;br/&gt;
length() and getByteLength() return the length in characters. These&lt;br/&gt;
clobs are sent UTF-16BE encoded over DRDA, hence their length in bytes&lt;br/&gt;
is actually twice their length in characters. getUTF8Length() will&lt;br/&gt;
throw a NullPointerException (as will position() and getSubString()).&lt;/p&gt;

&lt;p&gt;If the Clob was created with the InputStream constructor, the encoding&lt;br/&gt;
has to be specified explicitly. Three encodings are supported:&lt;br/&gt;
US-ASCII, UTF-8 and UnicodeBigUnmarked (aka UTF-16BE). (In all cases,&lt;br/&gt;
getUTF8Length(), position() and getSubString() will throw a&lt;br/&gt;
NullPointerException.)&lt;/p&gt;

&lt;p&gt;US-ASCII is used when a user calls PreparedStatement.setAsciiStream()&lt;br/&gt;
or ResultSet.updateAsciiStream(). In this case length() and&lt;br/&gt;
getByteLength() both return the length in bytes, which is equal to the&lt;br/&gt;
length in characters.&lt;/p&gt;

&lt;p&gt;UTF-8 is only used internally in NetStatementRequest when sending&lt;br/&gt;
VARCHARs or LONGVARCHARs that are more than 32767/3 characters&lt;br/&gt;
long. In this case length() and getByteLength() both return the number&lt;br/&gt;
of bytes needed to represent the string in UTF-8. These Clob objects&lt;br/&gt;
are never exposed to the user.&lt;/p&gt;

&lt;p&gt;UnicodeBigUnmarked is never passed to the constructor, but if it were,&lt;br/&gt;
length() and getByteLength() would return the length in characters.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Since the return value of the length() method already is inconsistent,&lt;br/&gt;
I don&apos;t think the patch for lengthless overloads actually makes the&lt;br/&gt;
situation much worse. Considering that no other methods work correctly&lt;br/&gt;
on these objects anyway (see for instance &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1599&quot; title=&quot;Clob.getSubString() throws NullPointerException when created by updatable result set&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1599&quot;&gt;DERBY-1599&lt;/a&gt;), I think fixing&lt;br/&gt;
that issue could be done as a separate task.&lt;/p&gt;</comment>
                            <comment id="12424072" author="kristwaa" created="Fri, 28 Jul 2006 12:35:52 +0100"  >&lt;p&gt;Thanks for the review Knut Anders.&lt;br/&gt;
I have uploaded revision d of patch 6.&lt;br/&gt;
See my comments and answers below.&lt;/p&gt;

&lt;p&gt;  1) You see this bug because you are able to access the Clob-object&lt;br/&gt;
     being used for input to the database. This is a shortcut taken in&lt;br/&gt;
     my implementation, based on the (faulty) assumption that the&lt;br/&gt;
     Clob-object is never passed to the user. Internally, the number of&lt;br/&gt;
     bytes are used. See comment at the bottom.&lt;/p&gt;

&lt;p&gt;  2) Fixed. The list of supported encodings is found either in the&lt;br/&gt;
     package summary for java.lang (JDK &amp;lt; 1.4), or in the JavaDoc for&lt;br/&gt;
     java.nio.Charset.&lt;/p&gt;

&lt;p&gt;  3) I have removed it from the constructor I added (which was a copy of&lt;br/&gt;
     the existing one), but left it as it is in the constructor that was&lt;br/&gt;
     already there. I think that change belong in a separate&lt;br/&gt;
     cleanup-patch.&lt;br/&gt;
     Note that I also removed the block for UTF-8 encoding, as this is&lt;br/&gt;
     never used for length less Clobs (encoding is always US-ASCII when&lt;br/&gt;
     passing an InputStream - set-/updateAsciiStream). I left the&lt;br/&gt;
     encoding argument for now, along with the check. This is handy&lt;br/&gt;
     when/if we change to ISO-8859-1. Besides from that, the encoding&lt;br/&gt;
     argument could be removed from this constructor&lt;br/&gt;
     (Agent,InputStream,String).&lt;/p&gt;

&lt;p&gt;  4) Fixed this for the constructor I added. Again I suggest a separate&lt;br/&gt;
     cleanup-patch for the other constructor.&lt;/p&gt;

&lt;p&gt;  5) Fixed.&lt;/p&gt;

&lt;p&gt;  6) Fixed. I also removed an unused import.&lt;/p&gt;

&lt;p&gt;  7) Fixed (deleted setUp and tearDown).&lt;/p&gt;

&lt;p&gt;  8) Changed.&lt;/p&gt;

&lt;p&gt;As you can see, I have chosen not to address some of your comments on the&lt;br/&gt;
code that is not directly related to my patch. I don&apos;t want to mix other&lt;br/&gt;
bug fixes and improvements with my patch for this issue. One of the main&lt;br/&gt;
reasons for this, is that the faulty assumption that a Clob used for&lt;br/&gt;
input is not passed to the user is used for the whole implementation, not&lt;br/&gt;
just mine.&lt;/p&gt;

&lt;p&gt;In my opinion, Clob is ready for a cleanup/rewrite and this should be&lt;br/&gt;
done separately from this issue.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12424535" author="rhillegas" created="Mon, 31 Jul 2006 14:20:57 +0100"  >&lt;p&gt;Hi Kristian: Thanks for addressing the concerns raised by Tomohito and Knut Anders. I agree that this patch should not be muddied by an overhaul of our Clob implementation and that you should log a separate JIRA to track the Clob defects identified by this discussion. I have run derbyall under 1.6 and 1.4 against jar files generated from this patch. The results are clean modulo the expected diffs in the 1.6 run. Committed at subversion revision 427112.&lt;/p&gt;</comment>
                            <comment id="12424885" author="kristwaa" created="Tue, 1 Aug 2006 15:48:31 +0100"  >&lt;p&gt;&apos;derby-1417-7a-clientborderfix.diff&apos; fixes bugs in the client-side implementation. The bugs caused Derby to hang if the size of the data was the same as the internal buffer, and there was also a bug that could cause an ArrayIndexOutOfBoundException.&lt;/p&gt;

&lt;p&gt;Comments:&lt;br/&gt;
1) I have added more tests for ByteArrayCombinerStream, and also done some whitespace changes here.&lt;br/&gt;
2) Added comments to ByteArrayCombinerStream.&lt;br/&gt;
3) Made ByteArrayCombinerStream throw IllegalArgumentException for negative lengths and if there is not enough data for the length specified (detected in constructor). As this is an internal class, I hope this is acceptable. If not, I would like to know how these exeptional situations should be handled.&lt;/p&gt;

&lt;p&gt;I ran tests with Blob sizes of 1K, 32K, 65K, 10M, 100M and 2G with the client. Tests for 100M and 2G fails badly, and Derby hangs due to an OutOfMemoryError on the server. The situation is somewhat improved by the patch &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt;.diff&apos;, but I still get ugly crashes, like broken communications pipe. I have not looked these problems.&lt;/p&gt;

&lt;p&gt;I ran the jdbc40 suite without failures. I will add more tests soon, but need to coordinate with other work (might add tests one of the several existing tests).&lt;/p&gt;

&lt;p&gt;The patch is ready for review/commit.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12424900" author="rhillegas" created="Tue, 1 Aug 2006 16:30:49 +0100"  >&lt;p&gt;Thanks for these bug fixes, Kristian. My only questions about the IllegalArgumentException would be:&lt;/p&gt;

&lt;p&gt;a) How would a user trip across this?&lt;br/&gt;
b) What would the user see?&lt;/p&gt;

&lt;p&gt;Thanks for including a test case for this exception.&lt;/p&gt;</comment>
                            <comment id="12425048" author="kristwaa" created="Tue, 1 Aug 2006 23:49:39 +0100"  >&lt;p&gt;Thanks for looking at the patch, Rick &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I added the test case mostly to demonstrate the expected behavior.&lt;/p&gt;

&lt;p&gt;a) The user should never trip across this at all. If it is thrown, it must be because of  a programming error in Derby. Currently, the byte arrays passed in are read from a user/application stream, and the bytes are counted as they are read.&lt;/p&gt;

&lt;p&gt;b) The user would see something ugly... For the non-debug version, replace the linenumbers with &quot;Unknown Source&quot;. The error is constructed.&lt;br/&gt;
1) testSetClobLengthless(org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest)java.lang.IllegalArgumentException: Length cannot be negative: -37&lt;br/&gt;
        at org.apache.derby.client.am.ByteArrayCombinerStream.&amp;lt;init&amp;gt;(ByteArrayCombinerStream.java:78)&lt;br/&gt;
        at org.apache.derby.client.am.Lob.materializeStream(Lob.java:164)&lt;br/&gt;
        at org.apache.derby.client.am.Clob.materializeStream(Clob.java:833)&lt;br/&gt;
        at org.apache.derby.client.am.Clob.length(Clob.java:216)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(NetStatementRequest.java:1232)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(NetStatementRequest.java:520)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:139)&lt;br/&gt;
        at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:171)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.writeExecute(PreparedStatement.java:1543)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:1789)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeX(PreparedStatement.java:1347)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatement.java:1332)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetClobLengthless(PreparedStatementTest.java:375)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.BaseTestCase.runBare(Unknown Source)&lt;/p&gt;

&lt;p&gt;I realize this does not look good, but it should not happen. I don&apos;t feel like making these two exceptions checked, or just ignore the error conditions (as the previous implementation did).&lt;br/&gt;
Does anyone have opinions?&lt;br/&gt;
Are there guidelines to follow?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12425219" author="rhillegas" created="Wed, 2 Aug 2006 13:51:34 +0100"  >&lt;p&gt;Thanks for the explanation, Kristian. Committed at subversion revision 427969.&lt;/p&gt;</comment>
                            <comment id="12427068" author="kristwaa" created="Thu, 10 Aug 2006 02:07:52 +0100"  >&lt;p&gt;&apos;derby-1417-8a-enableblobstreaming.diff&apos; enables streaming of BLOBs.&lt;br/&gt;
This patch is small, several related changes are made as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt;. The patch is &quot;kind of&quot; independent. Before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt; is committed, it might be possible to get some minor incorrect behavior. There are no existing tests that provoke these situations, they will be added as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A committer might choose to hold off the commit until &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt; is in. Derbyall ran without failures, and the patch only affects tests streaming to BLOB columns.&lt;/p&gt;

&lt;p&gt;Patch ready for review/commit.&lt;/p&gt;</comment>
                            <comment id="12430163" author="knutanders" created="Thu, 24 Aug 2006 06:53:56 +0100"  >&lt;p&gt;Hi Kristian, I tried to run derbyall with the 8a patch and the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt;. I see this error:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;End:   TestQueryObject jdk1.6.0-rc jdbc40:jdbc40 2006-08-24 00:50:02 ***
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;Diff file jdbc40/jdbc40/PreparedStatementTest.diff&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
			&lt;li&gt;Start: PreparedStatementTest jdk1.6.0-rc jdbc40:jdbc40 2006-08-24 00:51:29 ***&lt;br/&gt;
0 add&lt;br/&gt;
&amp;gt; ................................F.........&lt;br/&gt;
&amp;gt; There was 1 failure:&lt;br/&gt;
&amp;gt; 1) testSetBinaryStreamLengthLessOnBlobTooLong(org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&amp;lt;...CL30&amp;gt; but was:&amp;lt;...SDA4&amp;gt;&lt;br/&gt;
&amp;gt; FAILURES!!!&lt;br/&gt;
&amp;gt; Tests run: 82,  Failures: 1,  Errors: 0&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   PreparedStatementTest jdk1.6.0-rc jdbc40:jdbc40 2006-08-24 00:51:34 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12430205" author="kristwaa" created="Thu, 24 Aug 2006 10:35:15 +0100"  >&lt;p&gt;Hi Knut Anders,&lt;/p&gt;

&lt;p&gt;Seems like I have forgotten to change the SQL state in the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt; (step two). Let me briefly explain why the SQL state changes when patch 8a is applied. Note that the test itself was added in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt; (step one).&lt;/p&gt;

&lt;p&gt;The changes in step one added new functionality to the streaming classes. Simply put, they are now able to throw the appropariate exceptions when the stream are not the way they should be (too long, too short, truncation error). These exceptions are specific, but because the stream is passed down into the store, they are wrapped in a generic error message: XSDA4 - An unexpected exception was thrown.&lt;/p&gt;

&lt;p&gt;Before step two was applied, the streams were never passed down to the store, but instead materialized when SQLBlob.setWidth was called. This method has a check, which throws an exception with SQL state XCL30 - An IOException was thrown when reading a &apos;&apos;&lt;/p&gt;
{0}
&lt;p&gt;&apos;&apos; from an InputStream.&lt;/p&gt;

&lt;p&gt;The state of the error reporting when reading from streams is not optimal. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1657&quot; title=&quot;Align error reporting in the client driver and embedded driver for streaming errors through the JDBC API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1657&quot;&gt;DERBY-1657&lt;/a&gt; are created to track improvements.&lt;/p&gt;

&lt;p&gt;As soon as step one has been committed (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt;), I will upload a new patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt; that also changes the SQL state in the test.&lt;br/&gt;
I can&apos;t do it right now, because the code I need to change has not yet been committed. Committing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1473&quot; title=&quot;Add cut-off and truncation logic to streaming classes in the embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1473&quot;&gt;&lt;del&gt;DERBY-1473&lt;/del&gt;&lt;/a&gt; first should be okay.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12430769" author="knutanders" created="Sat, 26 Aug 2006 19:17:34 +0100"  >&lt;p&gt;Hi Kristian,&lt;/p&gt;

&lt;p&gt;I am not completely comfortable with the 8a patch. It might be the&lt;br/&gt;
case that all callers of SQLBlob.getLength() will work correctly if a&lt;br/&gt;
negative value is returned, but I have a feeling that it will work by&lt;br/&gt;
accident, not by design, and that it might fail later because of&lt;br/&gt;
changes in other parts of the code.&lt;/p&gt;

&lt;p&gt;My two main objections are&lt;/p&gt;

&lt;p&gt;  1) SQLBlob.getLength() breaks the contract of&lt;br/&gt;
     DataValueDescriptor.getLength() and SQLBinary.getLength() as the&lt;br/&gt;
     length in bytes is not returned for parameters set with one of&lt;br/&gt;
     the length-less streaming methods.&lt;/p&gt;

&lt;p&gt;  2) There will be an inconsistency between the return values from&lt;br/&gt;
     SQLBlob.getLength() and SQLClob.getLength(). SQLBlob will return&lt;br/&gt;
     a negative value when a length-less method has been used, SQLClob&lt;br/&gt;
     will materialize the stream and return a non-negative value.&lt;/p&gt;

&lt;p&gt;I propose a slightly different approach:&lt;/p&gt;

&lt;p&gt;  a) Don&apos;t make any changes to getLength().&lt;/p&gt;

&lt;p&gt;  b) Add a new method (say getLengthIfAvailable()) to the&lt;br/&gt;
     DataValueDescriptor interface, with a javadoc similar to&lt;/p&gt;

&lt;p&gt;     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Returns the same value as getLength() if there is a simple and&lt;/li&gt;
	&lt;li&gt;resource-friendly way to find the value. If a call to&lt;/li&gt;
	&lt;li&gt;getLength() would require heavy work (for instance,&lt;/li&gt;
	&lt;li&gt;materializing a stream to get its length), this method is&lt;/li&gt;
	&lt;li&gt;allowed to return a negative value indicating that.&lt;br/&gt;
      */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  c) Add a default implementation of the method in DataType. The&lt;br/&gt;
     default implementation could just forward calls to the&lt;br/&gt;
     getLength() method.&lt;/p&gt;

&lt;p&gt;  d) Override the method in SQLBlob (should be equal to the&lt;br/&gt;
     getLength() method you added).&lt;/p&gt;

&lt;p&gt;  e) Identify all calls to getLength() which would cause a binary&lt;br/&gt;
     stream to be materialized, check if they would work correctly&lt;br/&gt;
     with a negative value (fix them if they wouldn&apos;t), and replace&lt;br/&gt;
     the call to getLength() with a call to getLengthIfAvailable().&lt;/p&gt;

&lt;p&gt;I believe this approach is safer. The calls to getLengthIfAvailable()&lt;br/&gt;
make it explicit in the code that a negative value can be returned and&lt;br/&gt;
must be handled. Also, if there is a call to getLength() that has been&lt;br/&gt;
overlooked and that won&apos;t work with negative values, it will still&lt;br/&gt;
work as before, materializing the stream and returning the correct&lt;br/&gt;
length.&lt;/p&gt;</comment>
                            <comment id="12431014" author="kristwaa" created="Mon, 28 Aug 2006 17:58:35 +0100"  >&lt;p&gt;Knut Anders,&lt;/p&gt;

&lt;p&gt;Your worries make sense. However, I think there is an easier solution. Since the only place that has to be changed to enable blob streaming is SQLBlob.setWidth, I have modified it accordingly. No changes are done to code elsewhere, and if getLength is called the stream will be materialized as before this patch. This can be handled as/if it is detected, and we might reconsider your solution.&lt;/p&gt;

&lt;p&gt;The new, and hopefully last patch, is &apos;derby-1417-9a-blobstream-newapproach.diff&apos;. It implements a different approach and deprecates revision 8a. I also updated the single test that was failing to an incorrect SQL state in the test (see comment from 24/Aug/06 02:35 AM above).&lt;/p&gt;

&lt;p&gt;I ran derbyall with JDK 1.6, and the only test failing was TestQueryObject (awaiting bugfix in the JDK?).&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12431146" author="knutanders" created="Tue, 29 Aug 2006 07:04:15 +0100"  >&lt;p&gt;Thanks Kristian, your latest patch addresses all my concerns. I have verified that inserting a 100MB blob (-Xmx64M) without your fix gives OutOfMemoryError, and that it succeeds with your fix. Derbyall didn&apos;t show any regressions. I added a small comment in SQLBlob.setWidth() before committing.&lt;/p&gt;

&lt;p&gt;Committed into trunk with revision 437976.&lt;br/&gt;
Committed into 10.2 with revision 437980.&lt;/p&gt;</comment>
                            <comment id="12431156" author="kristwaa" created="Tue, 29 Aug 2006 08:09:41 +0100"  >&lt;p&gt;Resolving this. I don&apos;t expect to do more on work on this, and plan to close the issue in a few days.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12345285">DERBY-1471</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12346951">DERBY-1615</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12345343">DERBY-1473</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12335508" name="derby-1417-01-castsInTests.diff" size="3481" author="rhillegas" created="Thu, 15 Jun 2006 23:56:01 +0100"/>
                            <attachment id="12336061" name="derby-1417-1a-notImplemented.diff" size="11214" author="kristwaa" created="Wed, 28 Jun 2006 17:35:28 +0100"/>
                            <attachment id="12336062" name="derby-1417-1a-notImplemented.stat" size="516" author="kristwaa" created="Wed, 28 Jun 2006 17:35:28 +0100"/>
                            <attachment id="12336439" name="derby-1417-2a-rstest-refactor.diff" size="36038" author="kristwaa" created="Thu, 6 Jul 2006 21:57:34 +0100"/>
                            <attachment id="12336746" name="derby-1417-3a-embimpl-and-tests.diff" size="91530" author="kristwaa" created="Wed, 12 Jul 2006 23:49:13 +0100"/>
                            <attachment id="12336747" name="derby-1417-3a-embimpl-and-tests.stat" size="463" author="kristwaa" created="Wed, 12 Jul 2006 23:49:13 +0100"/>
                            <attachment id="12337057" name="derby-1417-3b-embimpl-and-tests.diff" size="92119" author="kristwaa" created="Mon, 17 Jul 2006 20:58:05 +0100"/>
                            <attachment id="12337058" name="derby-1417-3b-embimpl-and-tests.stat" size="539" author="kristwaa" created="Mon, 17 Jul 2006 20:58:05 +0100"/>
                            <attachment id="12337091" name="derby-1417-4a-disable-psTestsDnc.diff" size="2055" author="kristwaa" created="Tue, 18 Jul 2006 12:23:54 +0100"/>
                            <attachment id="12337165" name="derby-1417-5a-brokered.diff" size="19070" author="kristwaa" created="Wed, 19 Jul 2006 14:02:41 +0100"/>
                            <attachment id="12337166" name="derby-1417-5a-brokered.stat" size="317" author="kristwaa" created="Wed, 19 Jul 2006 14:02:41 +0100"/>
                            <attachment id="12337479" name="derby-1417-6a-clientimpl.diff" size="75403" author="kristwaa" created="Tue, 25 Jul 2006 17:47:22 +0100"/>
                            <attachment id="12337480" name="derby-1417-6a-clientimpl.stat" size="1284" author="kristwaa" created="Tue, 25 Jul 2006 17:47:22 +0100"/>
                            <attachment id="12337558" name="derby-1417-6b-clientimpl.diff" size="78317" author="kristwaa" created="Wed, 26 Jul 2006 14:27:19 +0100"/>
                            <attachment id="12337576" name="derby-1417-6c-clientimpl.diff" size="79185" author="kristwaa" created="Wed, 26 Jul 2006 16:50:24 +0100"/>
                            <attachment id="12337702" name="derby-1417-6d-clientimpl.diff" size="78756" author="kristwaa" created="Fri, 28 Jul 2006 12:35:52 +0100"/>
                            <attachment id="12337903" name="derby-1417-7a-clientborderfix.diff" size="12478" author="kristwaa" created="Tue, 1 Aug 2006 15:48:31 +0100"/>
                            <attachment id="12337904" name="derby-1417-7a-clientborderfix.stat" size="302" author="kristwaa" created="Tue, 1 Aug 2006 15:48:31 +0100"/>
                            <attachment id="12338533" name="derby-1417-8a-enableblobstreaming.diff" size="2022" author="kristwaa" created="Thu, 10 Aug 2006 02:07:52 +0100"/>
                            <attachment id="12338534" name="derby-1417-8a-enableblobstreaming.stat" size="197" author="kristwaa" created="Thu, 10 Aug 2006 02:07:52 +0100"/>
                            <attachment id="12339705" name="derby-1417-9a-blobstream-newapproach.diff" size="1552" author="kristwaa" created="Mon, 28 Aug 2006 17:58:35 +0100"/>
                            <attachment id="12339706" name="derby-1417-9a-blobstream-newapproach.stat" size="223" author="kristwaa" created="Mon, 28 Aug 2006 17:58:35 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 28 Jun 2006 16:35:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29985</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0sn3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38458</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>