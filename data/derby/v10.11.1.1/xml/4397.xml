<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:55:09 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4397/DERBY-4397.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4397] Allow ORDER BY in subqueries</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4397</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;SQL 2008 allows ORDER BY to be specified in subqueries. In conjunction with OFFSET/FETCH and/or ROW_NUMBER&lt;br/&gt;
meaningful subqueries with row ordering may be formulated. Cf. MySQL&apos;s LIMIT may be used in subqueries as well.&lt;br/&gt;
Note that OFFSET/FETCH is currently not allowed in subqueries, either.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12437331">DERBY-4397</key>
            <summary>Allow ORDER BY in subqueries</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Oct 2009 00:59:20 +0100</created>
                <updated>Mon, 3 Dec 2012 13:27:56 +0000</updated>
                            <resolved>Thu, 28 Jan 2010 16:00:14 +0000</resolved>
                                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12762483" author="dagw" created="Tue, 6 Oct 2009 03:03:03 +0100"  >&lt;p&gt;Attaching a first rev of a functional spec for this issue.&lt;/p&gt;</comment>
                            <comment id="12762908" author="knutanders" created="Wed, 7 Oct 2009 08:13:26 +0100"  >&lt;p&gt;Thanks for writing the spec, Dag. It generally looks good, but I have a couple of questions:&lt;/p&gt;

&lt;p&gt;1) If I read the syntax copied from the spec correctly, this query should be allowed:&lt;/p&gt;

&lt;p&gt;SELECT * FROM T1 ORDER BY X UNION SELECT * FROM T2 ORDER BY Y&lt;/p&gt;

&lt;p&gt;With the suggested changes to the grammar, I think this query is not allowed unless it&apos;s rewritten with parentheses around the sub-queries:&lt;/p&gt;

&lt;p&gt;(SELECT * FROM T1 ORDER BY X) UNION (SELECT * FROM T2 ORDER BY Y)&lt;/p&gt;

&lt;p&gt;2) Do you think this issue will address &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt;? If so, it would be good to mention in the spec how INSERT INTO ... SELECT ... ORDER BY is supposed to behave (in particular with respect to identity columns).&lt;/p&gt;

&lt;p&gt;3) The spec mentions that ORDER BY in a sub-select can probably be ignored if there&apos;s no windowing or offset/fetch on the same query level. I think that&apos;s true (perhaps with the exception if INSERT INTO, see (2)). However, I think the ORDER BY can be ignored even if there is a windowing clause, since the windowing should be applied before the ORDER BY (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4069&quot; title=&quot;Wrong behavior when ROW_NUMBER is combined with ORDER BY&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4069&quot;&gt;&lt;del&gt;DERBY-4069&lt;/del&gt;&lt;/a&gt;) and would therefore not guarantee that for instance row numbers have the same ordering as the ORDER BY columns.&lt;/p&gt;

&lt;p&gt;4) The spec says that a release note is needed. Are you aware of any backwards-compatibility issues that require special mentioning, or is it sufficient to put it in the list of new features?&lt;/p&gt;</comment>
                            <comment id="12763111" author="rhillegas" created="Wed, 7 Oct 2009 17:24:48 +0100"  >&lt;p&gt;Thanks for the great spec, Dag. Other than some very minor typos, I have only one comment, related to Knut&apos;s observation above under (2):&lt;/p&gt;

&lt;p&gt;It would be good to know, either way, whether this work will affect &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt;. If this does enable INSERT ... SELECT ... ORDER BY, then it would be good to mention this somewhere in the user guides.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12763309" author="dagw" created="Thu, 8 Oct 2009 00:52:42 +0100"  >&lt;p&gt;Thanks for looking at this, Knut, Rick.&lt;br/&gt;
@Knut&lt;br/&gt;
Re 1), I can&apos;t see that ORDER BY should be allowed before a UNION without a (), can you explain how you reach that conclusion? It seems to me that what comes before the UNION must eventually come from a &amp;lt;query primary&amp;gt; which is either a table name or a (parenthesized)  subquery..&lt;/p&gt;

&lt;p&gt;2) I hope  so, I agree that in an INSERT context, an ORDER BY in the subquery should not be ignored in the presence of identity columns.&lt;br/&gt;
3) Yes that is correct, I was thinking of the case where the ORDER BY is inside a subquery and the containing query contains a window. Btw, hat case may be covered by an ORDER BY inside the window specification (equivalently?) when we support that.&lt;br/&gt;
4) I am not aware of any such backwards-compatibility issues at this point. I added this as a reminder to self to check it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;@Rick&lt;br/&gt;
Good point about the user guide for INSERT. Will add a note on that.&lt;/p&gt;</comment>
                            <comment id="12763310" author="dagw" created="Thu, 8 Oct 2009 00:57:34 +0100"  >&lt;p&gt;Uploaded rev 2. of the specification based on comments from Knut and Rick.&lt;/p&gt;</comment>
                            <comment id="12763386" author="knutanders" created="Thu, 8 Oct 2009 08:03:51 +0100"  >&lt;p&gt;Regarding 1), you&apos;re of course right, I somehow managed to misread the syntax.&lt;/p&gt;</comment>
                            <comment id="12778369" author="dagw" created="Mon, 16 Nov 2009 15:17:58 +0000"  >&lt;p&gt;Uploading an experimental patch (derby-4397-insert-from-exists) which&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;incorporates the revamped patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;adds ORDER BY to FromSubqueries&lt;/li&gt;
	&lt;li&gt;adds ORDER BY to EXISTS/NOT EXISTS subqueries&lt;/li&gt;
	&lt;li&gt;adds test cases to the above as OrderByInSubqueries&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The patch is by no means complete; only some subqueries are yet allowed (parser blocks others),&lt;br/&gt;
but the general approach should hopefully extend to the other kinds, since the code added to&lt;br/&gt;
SubqueryNode is pretty generic. I just wanted to post this early in case anybody has input on the general approach taken. &lt;/p&gt;</comment>
                            <comment id="12778371" author="dagw" created="Mon, 16 Nov 2009 15:27:15 +0000"  >&lt;p&gt;Attaching rev. 3 of specification (added SQL standard&apos;s feature numbers).&lt;/p&gt;</comment>
                            <comment id="12780333" author="dagw" created="Thu, 19 Nov 2009 23:44:29 +0000"  >&lt;p&gt;Uploading derby-4397-all-subqueries. This patch opens up for ORDER BY in all subqueries as per the spec.&lt;br/&gt;
A previous version of this passed the regression tests. This is still early&lt;br/&gt;
days; I need to do a write-up and add more tests. Feel free to take this for a test drive&lt;br/&gt;
and shoot holes in it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                            <comment id="12780336" author="dagw" created="Thu, 19 Nov 2009 23:56:32 +0000"  >&lt;p&gt;Uploading a minor revision of the spec.&lt;/p&gt;</comment>
                            <comment id="12784359" author="dagw" created="Tue, 1 Dec 2009 19:29:51 +0000"  >&lt;p&gt;Uploading a tentatively complete version of this patch,&lt;br/&gt;
derby-4397-1. After &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4442&quot; title=&quot;Evaluation of default value and identity in an INSERT result set evaluated too early.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4442&quot;&gt;&lt;del&gt;DERBY-4442&lt;/del&gt;&lt;/a&gt; and the other cleanups in the INSERT&lt;br/&gt;
area went in, this patch now also solves &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt;, including the&lt;br/&gt;
expected ordering of identity columns.&lt;/p&gt;

&lt;p&gt;Additionally, the INSERT cleanup has made it possible to simplify the&lt;br/&gt;
patch is several places compared with the earlier versions. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;When this patch goes in, we should be ready to start work on allowing&lt;br/&gt;
FETCH/OFFSET in subqueries as well. Please review.&lt;/p&gt;



&lt;p&gt;Patch details:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Wire in syntax for ORDER BY, cf. the specification document.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java&lt;/p&gt;

&lt;p&gt;Add code to pull up and bind ORDER BY on a &quot;from&quot; subquery and finally&lt;br/&gt;
push it down to underlying result set as part of preprocess.&lt;/p&gt;

&lt;p&gt;Change a call to RCL.size to be RCL.visibleSize, to account for the fact&lt;br/&gt;
that there may now be extra columns pulled up due to ORDER BY.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java&lt;/p&gt;

&lt;p&gt;Add code to pull up and bind ORDER BY on a from subquery and finally&lt;br/&gt;
push it down to result set as part of preprocess. &lt;/p&gt;

&lt;p&gt;We also forbid flattening of a subquery if we have an ORDER BY on it.&lt;/p&gt;

&lt;p&gt;The parser transiently uses SubqueryNode before replacing it with a&lt;br/&gt;
FromSubquery node so I added a getter method to retrive the order by&lt;br/&gt;
list to be used in that replacement.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;/p&gt;

&lt;p&gt;Add code to pull up and bind ORDER BY on a from subquery and finally&lt;br/&gt;
push it down to result set as part of preprocess. For the push, see&lt;br/&gt;
also comments for NormalizeResultSetNode and ProjectRestrictNode.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/p&gt;

&lt;p&gt;Add logic to fetch the ORDER BY list when we parse parse a view text.&lt;br/&gt;
Next, hand it on to the fromSubquery being constructed for the view.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;/p&gt;

&lt;p&gt;Replace call to size with visibleSize, see above. Add default&lt;br/&gt;
implementation of new RSN method setOrderBy needed by parser for&lt;br/&gt;
primaries to receive an ORDER BY list.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/OrderByNode.java&lt;/p&gt;

&lt;p&gt;Adds logic in the generate method to poke the order by list&apos;s result&lt;br/&gt;
set number into OrderByNode&apos;s result set number.&lt;br/&gt;
We need to take note of result set number if ORDER BY is used in a&lt;br/&gt;
subquery for the case where a PRN is inserted in top of the select&apos;s&lt;br/&gt;
PRN to project away a sort column that is not part of the select&lt;br/&gt;
list, e.g.&lt;/p&gt;

&lt;p&gt;    select * from (select i from t order by j desc) s&lt;/p&gt;

&lt;p&gt;If the resultSetNumber is not correctly set in our resultColumns,&lt;br/&gt;
code generation for the PRN above us will fail when calling&lt;br/&gt;
resultColumns.generateCore -&amp;gt; VCN.generateExpression, cf. the Sanity&lt;br/&gt;
assert in VCN.generateExpression on sourceResultSetNumber &amp;gt;= 0.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/SelectNode.java&lt;/p&gt;

&lt;p&gt;Let flattenableInFromSubquery return false if we have an ORDER BY on a&lt;br/&gt;
subquery select. Also modify the way the PRN is added if we have an&lt;br/&gt;
ORDER BY on a subquery, so that references into the Selects RCL (made&lt;br/&gt;
from above us in the query tree) will not be voided by our adding a&lt;br/&gt;
PRN. The method is the same as used in other instance of this phase&lt;br/&gt;
problem: reuse the same RCL for the PRN and make a new one for the&lt;br/&gt;
select node, cf. for example &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4450&quot; title=&quot;GROUP BY in an IN-subquery inside HAVING clause whose select list is subset of group by columns, gives NPE&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4450&quot;&gt;&lt;del&gt;DERBY-4450&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java&lt;/p&gt;

&lt;p&gt;Add pushOrderBylist to push through to underlying result set, so it&lt;br/&gt;
will work when pushed from InsertNode, which sometimes may have an&lt;br/&gt;
intervening NormalizeResultSetNode and/or ProjectRestrictNode node&lt;br/&gt;
over the real result set to be ordered when we get to preprocess time.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/OrderByList.java&lt;/p&gt;

&lt;p&gt;Add code to remember generated result set number, see changes comments&lt;br/&gt;
for OrderByNode.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java&lt;/p&gt;

&lt;p&gt;Add code to hold an ORDER BY list for a view query.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/p&gt;

&lt;p&gt;Replace instances of size with visibleSize, see above.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java&lt;/p&gt;

&lt;p&gt;Trivial fix to printSubNode to make it safer for use in intermediate&lt;br/&gt;
stages of processing.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;/p&gt;

&lt;p&gt;Added a missing printSubNodes and made a method static.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;/p&gt;

&lt;p&gt;Added a debug utility method, stackPrint which prints current run-time&lt;br/&gt;
stack trace on derby.log. Yes, I know, not really part of this patch,&lt;br/&gt;
but I was too lazy to make a separate issue for it.. feel free to kick&lt;br/&gt;
me.&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByInSubqueries.java&lt;/p&gt;

&lt;p&gt;Tests for this feature.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/orderby.sql&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/orderby.out&lt;/p&gt;

&lt;p&gt;Make negative tests positive (order by in subqueries now allowed).&lt;/p&gt;</comment>
                            <comment id="12784587" author="dagw" created="Wed, 2 Dec 2009 01:59:41 +0000"  >&lt;p&gt;Regressions passed with the latest patch.&lt;/p&gt;</comment>
                            <comment id="12784603" author="bryanpendleton" created="Wed, 2 Dec 2009 03:13:31 +0000"  >&lt;p&gt;Dag, thank you very much for working on this project. I think this will be a great new&lt;br/&gt;
feature, and it will be very nice to resolve &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt; as well, since it has been requested&lt;br/&gt;
by a number of users.&lt;/p&gt;

&lt;p&gt;I read through the patch and it looks very thorough and complete; the code was&lt;br/&gt;
clear and well-commented.&lt;/p&gt;

&lt;p&gt;I think we should file a sub-task of this issue to update the documentation for&lt;br/&gt;
query flattening, to add the new restriction that a sub-query with an ORDER BY&lt;br/&gt;
cannot be flattened.&lt;/p&gt;</comment>
                            <comment id="12785042" author="dagw" created="Wed, 2 Dec 2009 22:54:14 +0000"  >&lt;p&gt;Thanks for looking at the patch, Bryan! I upload a new version (5.0) of the specification which adds the doc item you suggest. I will file a JIRA for the docs in due course.&lt;/p&gt;</comment>
                            <comment id="12792174" author="dagw" created="Thu, 17 Dec 2009 22:23:09 +0000"  >&lt;p&gt;Committed derby-4397-2 as svn 891952. This version of the patch&lt;br/&gt;
is the same as #1, except some cleanup in the new test, OrderByInSubqueries.&lt;br/&gt;
I am not totally comfortable with the level of testing for this feature yet, but I will probably need to get OFFSET/FETCH in subqueries working before I can tease out&lt;br/&gt;
more bugs, so I chose to commit this patch now.&lt;/p&gt;</comment>
                            <comment id="12798382" author="dagw" created="Sat, 9 Jan 2010 18:00:24 +0000"  >&lt;p&gt;Found that sort avoidance fails in a FromSubquery:&lt;br/&gt;
If this query avoids sorting due to an index on i:&lt;/p&gt;

&lt;p&gt;   select i from t order by i&lt;/p&gt;

&lt;p&gt;one would expect this to avoid it as well:&lt;/p&gt;

&lt;p&gt;   select * from (select i from t order by i) t&lt;/p&gt;

&lt;p&gt;but I see that sorting is performed in the latter case. It would be nice to make it work in the latter case as well..&lt;/p&gt;</comment>
                            <comment id="12798383" author="dagw" created="Sat, 9 Jan 2010 18:04:57 +0000"  >&lt;p&gt;The issue is that OrderByList.sortRequired will force sorting if it does not find a column reference in the OrderByColumn&apos;s result column&apos;s expression tree, cf. code ca line 477 in OrderByList.java.&lt;br/&gt;
In the latter query, I notice that at this point in the code, we have a VirtualColumnNode instead.&lt;/p&gt;</comment>
                            <comment id="12798386" author="dagw" created="Sat, 9 Jan 2010 18:20:17 +0000"  >&lt;p&gt;The reason we see a VirtualColumnNode in the OrderByColumn is that FromSubquery changes the result column list of its subquery &lt;b&gt;after&lt;/b&gt; we have bound the order by list, cf. this comment in the code:&lt;/p&gt;

&lt;p&gt;    /* Now that we&apos;ve bound the expressions in the subquery, we&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;can propagate the subquery&apos;s RCL up to the FromSubquery.&lt;/li&gt;
	&lt;li&gt;Get the subquery&apos;s RCL, assign shallow copy back to&lt;/li&gt;
	&lt;li&gt;it and create new VirtualColumnNodes for the original&apos;s&lt;/li&gt;
	&lt;li&gt;ResultColumn.expressions.&lt;br/&gt;
     :&lt;br/&gt;
     */&lt;br/&gt;
    subquery.setResultColumns(subqueryRCL.copyListAndObjects());&lt;br/&gt;
    subqueryRCL.genVirtualColumnNodes(subquery, subquery.getResultColumns());&lt;br/&gt;
    resultColumns = subqueryRCL;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;that is, the result column list that was used when binding the order by list has now been moved up one level and been given an additional level of VCNs.&lt;/p&gt;

&lt;p&gt;I find I can avoid this problem by either:&lt;/p&gt;

&lt;p&gt;  a) moving the binding of the order by list til after this step, or&lt;br/&gt;
  b) construct a new RCL for the FromSubquery and leave the old one alone.&lt;/p&gt;

&lt;p&gt;a) is the safer option; I don&apos;t know if b) will have any negative side effects, but will run the regressions to see if anything pops. A priori I would prefer b) since it seems a more direct solution.&lt;/p&gt;</comment>
                            <comment id="12798501" author="bryanpendleton" created="Sun, 10 Jan 2010 16:37:14 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Did you investigate making the code in OrderByList.sortRequired smarter? It seems like it&apos;s trying&lt;br/&gt;
to figure out whether we are ordering by an expression, or by a simple column reference, and the&lt;br/&gt;
VirtualColumnNode confuses it and makes it go into the &quot;sorting by an expression&quot; scenario.&lt;/p&gt;

&lt;p&gt;If you add some code to OrderByList.sortRequired to check for the presence of a VirtualColumnNode,&lt;br/&gt;
and then to fetch the column reference from the virtual colum&apos;s result column, does that help any?&lt;/p&gt;</comment>
                            <comment id="12798625" author="dagw" created="Mon, 11 Jan 2010 09:35:03 +0000"  >&lt;p&gt;Thanks for looking at this, Bryan! No, I didn&apos;t try to make sortRequired go through VirtualColumnNode, since&lt;br/&gt;
I think its presence was an accident in this particular case, cf. the rewrite I mention above. Now, there may now (after adding order by in subqueries) be other use cases where going through the VCN would be valid, so I&apos;ll have a look.&lt;br/&gt;
Even with the above suggested fix, I still need to solve the redundant sort incurred in this silly query:&lt;/p&gt;

&lt;p&gt;   select * from (select i from t order by i) t order by i&lt;/p&gt;

&lt;p&gt;The outer order by doesn&apos;t yet get the fact the the subquery already has done the job. Maybe your idea can help solve this case. Btw, solution b) above did not set off any regression errors, so it seems safe.&lt;/p&gt;</comment>
                            <comment id="12799722" author="dagw" created="Wed, 13 Jan 2010 12:42:53 +0000"  >&lt;p&gt;Uploading derby-4397-sortavoidance-a, a patch which makes sort avoidance work in the case described above, using solution b, which passed regressions. A test case is added to verify this (OrderByAndOffsetFetchInSubqueries#testSelectSubqueriesSortAvoidance).&lt;/p&gt;

&lt;p&gt;It does not yet avoid sorting in the case,&lt;/p&gt;

&lt;p&gt;   select * from (select i from t order by i) t order by i &lt;/p&gt;

&lt;p&gt;presumably because the outer order by doesn&apos;t make use of the fact that the subquery is already sorted on that column. Without the inner &quot;order by&quot;, the subquery is flattened and no sorting is performed. Is the flattening a prerequisite for the optimizer to handle such cases?&lt;br/&gt;
The query&lt;/p&gt;

&lt;p&gt;        select * from (select i from t offset 0 rows) t order by i &lt;/p&gt;

&lt;p&gt;currently stops flattening from happening, and it also incurs an unneccecary sort (there is an index on i here)&lt;/p&gt;</comment>
                            <comment id="12800663" author="dagw" created="Fri, 15 Jan 2010 10:54:07 +0000"  >&lt;p&gt;Committed patch derby-4397-sortavoidance-a as svn 899588.&lt;/p&gt;</comment>
                            <comment id="12802256" author="dagw" created="Tue, 19 Jan 2010 13:43:54 +0000"  >&lt;p&gt;I have done some investigation regarding my question above &quot;Is the&lt;br/&gt;
flattening a prerequisite for the optimizer to handle such cases?&quot;.&lt;/p&gt;

&lt;p&gt;If anyone is familiar with how the optimizer works, I would appreciate&lt;br/&gt;
any comments, since this is pretty much unknown code to me.&lt;/p&gt;

&lt;p&gt;It seems that information about ordering of result sets from&lt;br/&gt;
subqueries is lost/not used by the outer query if the subquery can not&lt;br/&gt;
be flattened. The following example query also gets an unnecessary&lt;br/&gt;
sort:&lt;/p&gt;

&lt;p&gt;(A) select * from (select distinct i, (select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from sys.systables) as j from t) t order by i&lt;/p&gt;

&lt;p&gt;Here the nested &quot;select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot; in the select list stops flattening&lt;br/&gt;
from happening, cf. SelectNode#flattenableInFromSubquery ca line 1379.&lt;br/&gt;
So the tree structure is somewhat similar to what we had in the query&lt;/p&gt;

&lt;p&gt;(B) select * from (select i from t offset 0 rows) t order by i&lt;/p&gt;

&lt;p&gt;when optimization starts, so I thought it would be useful to look at&lt;br/&gt;
its optimization (query A):&lt;/p&gt;

&lt;p&gt;The from subquery is optimized separately as far as I can tell (I will&lt;br/&gt;
ignore the SELECT subquery, I only introduced it to prevent&lt;br/&gt;
flattening).&lt;/p&gt;

&lt;p&gt;The DISTINCT is optimized away since there is an index on i (in&lt;br/&gt;
optimization of the subquery). The ORDER BY in the outer query leads&lt;br/&gt;
to a sort, though. From looking at the code this is to be expected, I&lt;br/&gt;
think:&lt;/p&gt;

&lt;p&gt;The check done in SelectNode calls orderByList.getSortNeeded() which&lt;br/&gt;
will return true unless orderByList.sortNotNeeded has been&lt;br/&gt;
called. This call is only made by the optimizer if it has found a&lt;br/&gt;
SORT_AVOIDANCE_PLAN. The criterion for finding a sort avoidance plan&lt;br/&gt;
hinges on the call to requiredRowOrdering.sortRequired&lt;br/&gt;
(i.e. OrderByList.sortRequired) in&lt;br/&gt;
OptimizerImpl.getNextDecoratedPermutation ca line 1799. If&lt;br/&gt;
sortRequired does not return RequiredRowOrdering.NOTHING_REQUIRED, a&lt;br/&gt;
sort will be necessary. That check fails to detect that nothing is&lt;br/&gt;
required since the referenced columns table number is not in the table&lt;br/&gt;
map provided. I think this is since the column stems from the&lt;br/&gt;
subquery.&lt;/p&gt;

&lt;p&gt;Note that if the an &quot;order by i&quot; is added to the inner query, this&lt;br/&gt;
will be handled correctly and optimized away, but the outer ORDER BY&lt;br/&gt;
still leads so sorting.&lt;/p&gt;

&lt;p&gt;In sum, it seems to me that the information about any row ordering in&lt;br/&gt;
the unflattened subquery is not transmitted up to the optimization of&lt;br/&gt;
the outer query. If this conclusion is correct, we would need a new&lt;br/&gt;
mechanism to convey the missing information to the upper optimizer in&lt;br/&gt;
the presence of unflattened &quot;from subqueries&quot;.&lt;/p&gt;</comment>
                            <comment id="12802291" author="dagw" created="Tue, 19 Jan 2010 15:00:14 +0000"  >&lt;p&gt;Uploading a new revision of the specification (adds syntax changes for view creation).&lt;/p&gt;</comment>
                            <comment id="12805970" author="dagw" created="Thu, 28 Jan 2010 16:00:14 +0000"  >&lt;p&gt;Resolving this issue; further optimization if deemed necessary later, will be handled in new a new issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12464192">DERBY-4649</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12437333">DERBY-4398</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12445932">DERBY-4518</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="27482">DERBY-4</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12618560">DERBY-6006</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12426569" name="derby-4397-1.diff" size="55856" author="dagw" created="Tue, 1 Dec 2009 19:29:51 +0000"/>
                            <attachment id="12426570" name="derby-4397-1.stat" size="1413" author="dagw" created="Tue, 1 Dec 2009 19:29:51 +0000"/>
                            <attachment id="12428354" name="derby-4397-2.diff" size="51472" author="dagw" created="Thu, 17 Dec 2009 22:23:09 +0000"/>
                            <attachment id="12428355" name="derby-4397-2.stat" size="1432" author="dagw" created="Thu, 17 Dec 2009 22:23:09 +0000"/>
                            <attachment id="12425545" name="derby-4397-all-subqueries.diff" size="71929" author="dagw" created="Thu, 19 Nov 2009 23:44:29 +0000"/>
                            <attachment id="12425546" name="derby-4397-all-subqueries.stat" size="1813" author="dagw" created="Thu, 19 Nov 2009 23:44:29 +0000"/>
                            <attachment id="12425070" name="derby-4397-insert-from-exists.diff" size="60483" author="dagw" created="Mon, 16 Nov 2009 15:17:58 +0000"/>
                            <attachment id="12425071" name="derby-4397-insert-from-exists.stat" size="1580" author="dagw" created="Mon, 16 Nov 2009 15:17:58 +0000"/>
                            <attachment id="12430126" name="derby-4397-sortavoidance-a.diff" size="3308" author="dagw" created="Wed, 13 Jan 2010 12:42:53 +0000"/>
                            <attachment id="12430127" name="derby-4397-sortavoidance-a.stat" size="181" author="dagw" created="Wed, 13 Jan 2010 12:42:53 +0000"/>
                            <attachment id="12430751" name="orderBySpec.html" size="10805" author="dagw" created="Tue, 19 Jan 2010 16:22:29 +0000"/>
                            <attachment id="12426709" name="orderBySpec.html" size="10209" author="dagw" created="Wed, 2 Dec 2009 22:54:14 +0000"/>
                            <attachment id="12425547" name="orderBySpec.html" size="9922" author="dagw" created="Thu, 19 Nov 2009 23:56:32 +0000"/>
                            <attachment id="12425072" name="orderBySpec.html" size="9723" author="dagw" created="Mon, 16 Nov 2009 15:27:15 +0000"/>
                            <attachment id="12421590" name="orderBySpec.html" size="9087" author="dagw" created="Thu, 8 Oct 2009 00:58:43 +0100"/>
                            <attachment id="12421375" name="orderBySpec.html" size="8867" author="dagw" created="Tue, 6 Oct 2009 03:03:03 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 7 Oct 2009 07:13:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31221</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0qbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38081</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>