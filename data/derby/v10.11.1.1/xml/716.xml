<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:43:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-716/DERBY-716.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-716] Re-enable VTIs</title>
                <link>https://issues.apache.org/jira/browse/DERBY-716</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Cloudscape used to expose Virtual Table Interfaces, by which any class which implemented ResultSet could be included in a query&apos;s FROM list. Derby still exposes a number of these VTIs as diagnostic tools. However, Derby now prevents customers from declaring their own VTIs. The parser raises an error if a VTI&apos;s package isn&apos;t one of the Derby diagnostic packages.&lt;/p&gt;

&lt;p&gt;This is a very powerful feature which customers can use to solve many problems. We should discuss the reasons that it was disabled and come up with a plan for putting this power back into our customers&apos; hands.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12325788">DERBY-716</key>
            <summary>Re-enable VTIs</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Nov 2005 09:13:56 +0000</created>
                <updated>Fri, 21 Jan 2011 18:17:14 +0000</updated>
                            <resolved>Wed, 16 Jan 2008 14:38:50 +0000</resolved>
                                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12357981" author="rhillegas" created="Sat, 19 Nov 2005 00:55:04 +0000"  >&lt;p&gt;This feature is supported by other databases, including DB2 (see &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/db2help/index.jsp?topic=/com.ibm.db2.udb.doc/ad/c0011177.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://publib.boulder.ibm.com/infocenter/db2help/index.jsp?topic=/com.ibm.db2.udb.doc/ad/c0011177.htm&lt;/a&gt;) and Microsoft SQL Server (see &lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_create_7r1l.asp&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_create_7r1l.asp&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;These databases largely hew to the ANSI 2003 solution:&lt;/p&gt;

&lt;p&gt;1) Declare a function which returns a table&lt;br/&gt;
2) Invoke the function in your query&apos;s FROM list&lt;/p&gt;

&lt;p&gt;The ANSI syntax for declaring VTI-returning functions is defined in Part 2, section 11.50, under the &amp;lt;returns table type&amp;gt; production. It allows you to specify a table signature in the RETURNS clause of the function declaration:&lt;/p&gt;

&lt;p&gt;CREATE FUNCTION functionName ...&lt;br/&gt;
RETURNS TABLE( [ [ columnName, columnDatatype ] &lt;span class=&quot;error&quot;&gt;&amp;#91;, columnName columnDatatype &amp;#93;&lt;/span&gt;* ]  )&lt;/p&gt;

&lt;p&gt;The ANSI syntax for querying a VTI is defined in Part 2, section 7.6 under the &amp;lt;table function derived table&amp;gt; production. It allows a FROM list element to be a function invocation wrapped by a TABLE constructor:&lt;/p&gt;

&lt;p&gt;SELECT *&lt;br/&gt;
FROM TABLE( functionName( args ... ) )&lt;/p&gt;

&lt;p&gt;This differs from the Cloudscape approach, which was to declare the VTI on the fly at query time using a constructor. The ANSI approach seems simple, powerful, and elegant enough. Here&apos;s a sketch of what we could do:&lt;/p&gt;

&lt;p&gt;1) Enhance the CREATE FUNCTION syntax to support the RETURNS TABLE clause.&lt;br/&gt;
2) Enhance query specifications to allow TABLE( functionName( args ... )  ) in the FROM list&lt;br/&gt;
3) Expose template ResultSet and ResultSetMetaData implementations which customers can extend. We currently have versions of these in org.apache.derby.vti.VTITemplate.&lt;br/&gt;
4) Raise a query-execution-time exception if a) the java function does not return a ResultSet, or b) the VTI&apos;s ResultSetMetaData does not match the signature declared by CREATE FUNCTION.&lt;/p&gt;
</comment>
                            <comment id="12438229" author="djd" created="Wed, 27 Sep 2006 22:32:08 +0100"  >&lt;p&gt;I think the syntax of the RETURNS TABLE clause above is incorrect, I don&apos;t believe the column definitions are optional.&lt;/p&gt;

&lt;p&gt;Implementing a table function in Java using ResultsSet is non-standard, here are some notes on the official standard Java mapping:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/JavaTableFunctions&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JavaTableFunctions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I do think the ResultSet/PreparedStatement mechanism is much more elegant and powerful though.&lt;/p&gt;

&lt;p&gt;I don&apos;t believe Derby should provide templates for ResultSet and other JDBC classes for VTIs, it&apos;s a pain to support those with multiple JDBC versions, and nowadays IDE&apos;s provide easy mechanisms to create all the methods of an interface for a given class.&lt;/p&gt;</comment>
                            <comment id="12476013" author="rhillegas" created="Mon, 26 Feb 2007 21:53:25 +0000"  >&lt;p&gt;Thanks for helping work through the details here. You are, of course, correct that the column definitions are mandatory.&lt;/p&gt;

&lt;p&gt;I looked at the &lt;a href=&quot;http://wiki.apache.org/db-derby/JavaTableFunctions&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JavaTableFunctions&lt;/a&gt; wiki page. It seems to describe the layout and behavior of functions which return ARRAY datatypes. I do not understand how this applies to functions which return TABLE types. The SQL Standard sections on user-defined-routines are very long and, at least for me, hard to read. Still, as I read the SQL Standard, the return type of a table function is equivalent to a MULTISET datatype, not an ARRAY type. That, at least, is how I read Part 2, Section 11.50, Syntax Rule 4.&lt;/p&gt;

&lt;p&gt;Could you point me at the chapter and verse which leads you to believe that Java TABLE functions should be implemented as ARRAY returning functions?&lt;/p&gt;</comment>
                            <comment id="12476155" author="djd" created="Tue, 27 Feb 2007 12:41:37 +0000"  >&lt;p&gt;I don&apos;t understand the comment about ARRAY returning functions, what in the wiki page leads you to believe it describes functions returning ARRAY datatypes?&lt;/p&gt;</comment>
                            <comment id="12476186" author="chdh@inventec.ch" created="Tue, 27 Feb 2007 14:47:16 +0000"  >&lt;p&gt;Rick, do you mean the array arguments that are used for the OUT parameters, e.g. &quot;double[] cost&quot;?&lt;/p&gt;

&lt;p&gt;You have to look at SQL/Part 13 (SQL/JRT), sections 8.5 (Execution of array-returning functions) and 8.6 (Java routine signature determination). Not only at Part 2 (Foundation)) Section 11.50 (SQL-invoked routine)..&lt;/p&gt;</comment>
                            <comment id="12476187" author="rhillegas" created="Tue, 27 Feb 2007 14:48:16 +0000"  >&lt;p&gt;Thanks, Dan. I think what has me confused here is the wiki page&apos;s reference to Part 13, section 8.5. That section deals with ARRAY types. I see that 8.6 addresses the case of MULTISET return types. My reading (of Part 13, Section 9.8, syntax rule 12 and Part 13, Section  8.6) is that the routine resolution on the wiki page addresses the case when PARAMETER STYLE JAVA is specified.&lt;/p&gt;

&lt;p&gt;My itch is to re-enable the ResultSet style VTIs, which you agree are elegant and powerful. Here&apos;s a proposal:&lt;/p&gt;

&lt;p&gt;1) We introduce a new kind of parameter style, say PARAMETER STYLE DERBY. We can sand down the name of this style later on.&lt;/p&gt;

&lt;p&gt;2) For a first rev, the customer must specify PARAMETER STYLE DERBY when they declare a table-returning function.These methods resolve to static methods which return ResultSets.&lt;/p&gt;

&lt;p&gt;3) Later on, someone who has the itch can implement PARAMETER STYLE JAVA and the kinds of method signatures described in the wiki page.&lt;/p&gt;

&lt;p&gt;4) Perhaps someone can contribute some machinery which will wrap DERBY-style methods inside JAVA-style ones and vice-versa.&lt;/p&gt;

&lt;p&gt;I think this proposal&lt;/p&gt;

&lt;p&gt;A) Enables a powerful programming model which distinguishes Derby&lt;/p&gt;

&lt;p&gt;B) Nevertheless allows later implementation of the ANSI method-style for people who are interested in migrating table-functions to/from other databases.&lt;/p&gt;</comment>
                            <comment id="12476192" author="rhillegas" created="Tue, 27 Feb 2007 15:05:54 +0000"  >&lt;p&gt;Thanks, Christian. I think I&apos;m more or less tracking now.&lt;/p&gt;</comment>
                            <comment id="12476195" author="chdh@inventec.ch" created="Tue, 27 Feb 2007 15:19:08 +0000"  >&lt;p&gt;Part 2 section 9.15 (Execution of multiset-returning functions) Rule 6 states: &quot;The General Rules of Subclause 9.14 (Execution of array-returning functions) are applied...&quot;.&lt;br/&gt;
Therefore Part 13 section 8.5 (Execution of array-returning functions), which modifies Part 1 section 9.14, indirectly also applies to functions returning MULTISETs.&lt;/p&gt;</comment>
                            <comment id="12488116" author="rhillegas" created="Wed, 11 Apr 2007 17:45:54 +0100"  >&lt;p&gt;Attaching a first rev of a functional spec for this feature. I would be grateful for your feedback.&lt;/p&gt;</comment>
                            <comment id="12488829" author="djd" created="Sat, 14 Apr 2007 02:02:12 +0100"  >&lt;p&gt;Using ResultSet as the api to implement table functions can be somewhat awkward. When this VTI functionality was implemented in Cloudscape, ResultSet&apos;s were somewhat simple, forward only, read-only and only JDBC 1.2. Now ResultSet&apos;s need to support updates, deletes, inserts and scrolling. This means that even a simple table function must implement a large number of methods even if (I think) in the simplest case only four may be required (constructor, next, getXXX and close). While one can try to create a template that has most of the non-required methods (as Cloudscape did), this becomes a major pain if one needs to support multiple JDBC environments, JDBC 3, 4 and JSR 169. In fact using ResultSet means that the application developer will have a hard time implementing a solution in a JDBC version agnostic way.&lt;br/&gt;
Also using ResultSet means that the application developer ends up implementing a class that doesn&apos;t really implement the defined contract of ResultSet, just the subset specific to Derby&apos;s functional tables, doesn&apos;t seem to be a ideal postion to be in for an app developer.&lt;/p&gt;

&lt;p&gt;I&apos;ve been struggling with these issues while looking at the way Derby uses VTIs (ResultSets) for triggers, currently the implementation uses classes that are not in JSR169 but needs to because the code is compiled against JDBC 3. It just seems to work, but may fail on some J2ME VM&apos;s that have stricter class loading policies.&lt;/p&gt;

&lt;p&gt;Contrast this with the standard mechanism for writing table functions in Java that just use a single static Java method, much easier for an application developer to work with, portable to multiple JDBC versions and easier to understand (a single working method rather than 139 methods (in JDBC 3) and most of them not used).&lt;/p&gt;

&lt;p&gt;While the current Derby internal vti is quite powerful the SQL standard provides for much of the same functionality  through SQL/MED, e.g. pushing predicates, providing optimizer costs etc.&lt;/p&gt;

&lt;p&gt;Thus I have reservations about introducing a non-standard feature into Derby and especially a non-standard feature that exposes a un-friendly api onto the application developer.&lt;/p&gt;

&lt;p&gt;I do think that Java table functions or wrappers (for updates as well) would be a great addition to Derby, I just think that the api should be clean and easy especially if it&apos;s not standard based.&lt;/p&gt;

&lt;p&gt;I also have some questions on the details in the spec if the ResultSet approach is taken, but here&apos;s one on the SQL. Why is the SQL for SELECT changing? Derby already supports bultin table functions, so what needs to change here?&lt;/p&gt;
</comment>
                            <comment id="12488968" author="chdh@inventec.ch" created="Sun, 15 Apr 2007 22:58:44 +0100"  >&lt;p&gt;In H2 (&lt;a href=&quot;http://www.h2database.com&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.h2database.com&lt;/a&gt;) there is a class called SimpleResultSet (&lt;a href=&quot;http://www.h2database.com/javadoc/org/h2/tools/SimpleResultSet.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.h2database.com/javadoc/org/h2/tools/SimpleResultSet.html&lt;/a&gt;) which makes it easy to implement a simple stored procedure that returns a Resultset.&lt;br/&gt;
Example (from &lt;a href=&quot;http://www.h2database.com/html/features.html#user_defined_functions)::&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.h2database.com/html/features.html#user_defined_functions)::&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;public static ResultSet simpleResultSet() throws SQLException {&lt;br/&gt;
    SimpleResultSet rs = new SimpleResultSet();&lt;br/&gt;
    rs.addColumn(&quot;ID&quot;, Types.INTEGER, 10, 0);&lt;br/&gt;
    rs.addColumn(&quot;NAME&quot;, Types.VARCHAR, 255, 0);&lt;br/&gt;
    rs.addRow(new Object[] &lt;/p&gt;
{ new Integer(0), &quot;Hello&quot; }
&lt;p&gt;);&lt;br/&gt;
    rs.addRow(new Object[] &lt;/p&gt;
{ new Integer(1), &quot;World&quot; }
&lt;p&gt;);&lt;br/&gt;
    return rs;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;And the interface SimpleRowSource (&lt;a href=&quot;http://www.h2database.com/javadoc/org/h2/tools/SimpleRowSource.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.h2database.com/javadoc/org/h2/tools/SimpleRowSource.html&lt;/a&gt;) can be used together with SimpleResultSet. to create rows on demand for dynamic result sets &lt;/p&gt;</comment>
                            <comment id="12489204" author="rhillegas" created="Mon, 16 Apr 2007 20:28:22 +0100"  >&lt;p&gt;Thanks for your feedback, Dan and Christian.&lt;/p&gt;

&lt;p&gt;I agree that ResultSet has become very large. It is, however, the tabular interface defined by the JDBC standard. In a previous conversation (which I can&apos;t cite more specifically), I was persuaded that modern IDEs are very good at stubbing out these big interfaces. The H2 template which Christian cites is very interesting. If we think that stubbing out this interface for all platforms is too onerous, we could consider supplying a JDBC4 template in a demo directory-&lt;del&gt;the user could prune that template back to a JSR169 compliant form if necessary. We could even provide templates for all the JDBC levels we support&lt;/del&gt;-that does not seem like a lot of work for us.&lt;/p&gt;

&lt;p&gt;I think that, over the long haul, we will want both the api which Dan suggests and the ResultSet api. I can see good use-cases for both.&lt;/p&gt;

&lt;p&gt;I don&apos;t know how to map the SQL/MED model onto table functions. It seems to me that chapter 9 of the SQL Standard (SQL/MED) defines an interface to foreign servers. These seem to be entire SQL servers complete with their own authentication schemes and SQL interpreters. The optimizer interface in chapter 9 applies, I believe, to &quot;foreign tables&quot; (defined in section 4.10.1 of that chapter) and not to the &quot;derived tables&quot; returned by table functions. I am having a hard time mapping the SQL/MED model onto table functions:&lt;/p&gt;

&lt;p&gt;1) SQL/MED seems to assume a handshake with a wrapper interface, a gateway which wraps the external server. Getting one&apos;s hands on one of these gateways implies a lot of machinery that is not  present for table functions.&lt;/p&gt;

&lt;p&gt;2) The SQL/MED optimizer calls seem to assume that the external data source can be repositioned with repeatable-read behavior. This is probably true if you are talking to an external relational server but I don&apos;t think you can assume that is generally true for table functions. VTICosting lets you override this assumption.&lt;/p&gt;

&lt;p&gt;3) The SQL/MED predicate pushing is indeed powerful. However, it again assumes that you are dealing with a gateway which wraps a SQL interpreter.&lt;/p&gt;

&lt;p&gt;I&apos;m eager to see alternative optimizer apis, though. At the very least, they will help us think through the issues. Maybe you could explain in greater detail how you would map this &quot;foreign table&quot; model onto table functions.&lt;/p&gt;

&lt;p&gt;Thanks for pointing out that the FROM clause already handles table functions provided that they are the diagnostic VTIs. I could not find this syntax documented in the FROM clause section of the Reference Manual but, now that you point it out, I see that it is mentioned in the section of that manual titled &quot;SYSCS_DIAG diagnostic tables and functions&quot;. This is good news because it is another chunk of work which has been done already.&lt;/p&gt;</comment>
                            <comment id="12490111" author="djd" created="Thu, 19 Apr 2007 18:04:22 +0100"  >
&lt;p&gt;Rick &amp;gt; If we think that stubbing out this interface for all platforms is too onerous, we could consider supplying a JDBC4 template in a demo directory-&lt;del&gt;the user could prune that template back to a JSR169 compliant form if necessary. We could even provide templates for all the JDBC levels we support&lt;/del&gt;-that does not seem like a lot of work for us.&lt;/p&gt;

&lt;p&gt;It&apos;s not that it&apos;s a lot of work for anyone, it moves to a model where an application that wants to support multiple JDBC environments has two unpleasant choices:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;have a Java class with multiple versions (doesn&apos;t fit well into the Java development model)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;have different versions of the SQL schema for different platforms (different create function statements that point to different java classes)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Maybe that&apos;s not a huge concern, Derby could just say it has the facility to present a JDBC ResultSet as a virtual table and it&apos;s the user&apos;s problem if they want to support multiple environments.&lt;/p&gt;</comment>
                            <comment id="12490115" author="djd" created="Thu, 19 Apr 2007 18:15:19 +0100"  >&lt;p&gt;Some comments on the spec:&lt;/p&gt;

&lt;p&gt;I think the parameter style should be more specific than &quot;DERBY&quot;, say &quot;DERBY_JDBC_RESULT_SET&quot;, there may be other Derby specific types that could be added here, e.g. RSS.&lt;/p&gt;

&lt;p&gt;&quot;When you issue a query against a Table Function, Derby constructs a ResultSetMetaData for the result, based on the column names and datatypes you declared when you initially created the Table Function.&quot;&lt;br/&gt;
  Not sure what this is really trying to say. Why would Derby create a ResultSetMetaData based upon the functions shape, what is this used for?&lt;/p&gt;

&lt;p&gt;I don&apos;t see from the functional specification how VTICosting is tied in? What does the app developer do?&lt;/p&gt;

&lt;p&gt;How about the Pushable interface, that&apos;s useful existing functionality as well?&lt;/p&gt;

</comment>
                            <comment id="12490135" author="rhillegas" created="Thu, 19 Apr 2007 19:41:27 +0100"  >&lt;p&gt;Dan&amp;gt; It&apos;s not that it&apos;s a lot of work for anyone, it moves to a model where an application that wants to support multiple JDBC environments has two unpleasant choices: &lt;/p&gt;

&lt;p&gt;I think that &#216;ystein ran some experiments using Derby 10.1 (supporting JDBC3) on Java 6 (which defines JDBC4). I think that Derby&apos;s JDBC3 ResultSets worked fine on Java 6 because the testing application never called JDBC4-specific methods. I&apos;m cautiously hopeful that an application which needs to run on multiple VM revs can succeed as long as it codes to the least-common denominator.&lt;/p&gt;

&lt;p&gt;I don&apos;t have any experience trying to run the same code on Java SE and Java ME. I have only very limited experience trying to code an application to run both places. My limited experience suggests that most people in this situation will end up writing a portablitliy layer, or even two implementations because desktop users will refuse to live with the limitations imposed by by the small-device environment.&lt;/p&gt;</comment>
                            <comment id="12490163" author="rhillegas" created="Thu, 19 Apr 2007 21:27:29 +0100"  >&lt;p&gt;Thanks again for the feedback, Dan.&lt;/p&gt;

&lt;p&gt;Dan&amp;gt; I think the parameter style should be more specific than &quot;DERBY&quot;, say &quot;DERBY_JDBC_RESULT_SET&quot;, there may be other Derby specific types that could be added here, e.g. RSS.&lt;/p&gt;

&lt;p&gt;Sounds good to me. Maybe something shorter like DERBY_JDBC.&lt;/p&gt;

&lt;p&gt;Dan &amp;gt;&quot;When you issue a query against a Table Function, Derby constructs a ResultSetMetaData for the result, based on the column names and datatypes you declared when you initially created the Table Dan &amp;gt;Function.&quot;&lt;br/&gt;
Dan &amp;gt;  Not sure what this is really trying to say. Why would Derby create a ResultSetMetaData based upon the functions shape, what is this used for?&lt;/p&gt;

&lt;p&gt;I will clarify this in the next rev of the spec. Here&apos;s the point I was trying to make. Please let me know if this is still confusing: The user will write a VTI, say myVTI. When the user issues &quot;select * from TABLE( myVTI( ... ) )&quot;, Derby will hand back a ResultSet, say an EmbedResultSet20. The original CREATE FUNCTION statement determines the shape of the metadata returned by EmbedResultSet20 regardless of the shape of the metadata returned by myVTI.getResultSetMetaData().&lt;/p&gt;

&lt;p&gt;Dan &amp;gt;I don&apos;t see from the functional specification how VTICosting is tied in? What does the app developer do?&lt;/p&gt;

&lt;p&gt;Thanks, I will explain this in the next rev of the spec.&lt;/p&gt;

&lt;p&gt;Dan &amp;gt; How about the Pushable interface, that&apos;s useful existing functionality as well?&lt;/p&gt;

&lt;p&gt;I don&apos;t see any implementations of Pushable in the Derby diagnostic VTIs. Was this interface ever really used or is it, like VTIEnvironment, part of someone&apos;s future plans?&lt;/p&gt;

&lt;p&gt;In any event, I was only spec&apos;ing read-only table functions, that is, ones that implement ResultSet. From its javadoc, Pushable seems to apply to read-write VTIs that implement PreparedStatement.&lt;/p&gt;</comment>
                            <comment id="12491734" author="army" created="Wed, 25 Apr 2007 20:06:01 +0100"  >&lt;p&gt;I took a look at the functional spec for this issue and had the following questions.  Apologies in advance for anything painfully obvious that I may have missed...&lt;/p&gt;

&lt;p&gt;Under the &quot;New SELECT Syntax&quot; section:&lt;br/&gt;
-------------------------------------------&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Syntax for &quot;TableFunctionInvocation&quot; is missing parentheses that are required according to SQL 2003 7.6 &amp;lt;table function derived table&amp;gt;.  Need a left paren before &quot;function-name&quot; and a right paren at the end of the line.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   I think the example at the end of this section needs to be updated, as well.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;Value - A Value is an expression which could appear as a column in a standalone VALUES&lt;br/&gt;
    statement. That is, it is built out of literals, &apos;?&apos; parameters, and function calls.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; A standalone VALUES clause can include other types of expressions, as well.  For example:&lt;/p&gt;

&lt;p&gt;     ij&amp;gt; values (select distinct 2 from sys.systables);&lt;/p&gt;

&lt;p&gt; Would this kind of expression be allowed within a TableFunctionInvocation? I&apos;m assuming not, but just thought I&apos;d ask.  Note that such an expression is &lt;b&gt;not&lt;/b&gt; currently allowed with the SYSCS_DIAG table functions (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2152&quot; title=&quot;Support diagnostic vti tables that take parameters, such as SpaceTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2152&quot;&gt;&lt;del&gt;DERBY-2152&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt; Also, what does &quot;function calls&quot; mean here?  Is this just referring to the SQL functions supported by Derby?  Or are we talking about JDBC escape functions and/or other user-defined functions (&quot;CREATE FUNCTION&quot;) as well?&lt;/p&gt;

&lt;p&gt;Under &quot;System Tables&quot;:&lt;br/&gt;
----------------------------&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;Each column in the returned table is represented by a row in SYSCOLUMNS just as each&lt;br/&gt;
    function parameter is.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; It&apos;s not clear to me why we need to store information about the function parameters in SYSCOLUMNS.  The Derby documentation says that SYSCOLUMNS &quot;Describes the columns within all tables in the current database.&quot;  I&apos;m not sure how function parameter info fits that description.  Can you elaborate on this?&lt;/p&gt;

&lt;p&gt; Note that based on some simple testing it would appear that we do &lt;b&gt;not&lt;/b&gt; include info about parameters for other Derby functions.  Ex:&lt;/p&gt;

&lt;p&gt;    ij version 10.3&lt;br/&gt;
    ij&amp;gt; connect &apos;dbdb;create=true&apos;;&lt;br/&gt;
    ij&amp;gt; select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from sys.syscolumns;&lt;br/&gt;
    1&lt;br/&gt;
    -----------&lt;br/&gt;
    119&lt;/p&gt;

&lt;p&gt;    1 row selected&lt;br/&gt;
    ij&amp;gt; create function myf (i int, vc varchar(200)) returns integer&lt;br/&gt;
        parameter style java language java external name &apos;hmm.myFunction&apos;;&lt;br/&gt;
    0 rows inserted/updated/deleted&lt;br/&gt;
    ij&amp;gt; select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from sys.syscolumns;&lt;br/&gt;
    1&lt;br/&gt;
    -----------&lt;br/&gt;
    119&lt;/p&gt;

&lt;p&gt;    1 row selected&lt;/p&gt;

&lt;p&gt; We can see that no rows are added for the function parameters &quot;i&quot; nor for &quot;vc&quot;.  And that seems fine since information about the parameters is, as the spec says, available from the DBMD.getFunctionColumns() method.  So what is the need for having rows in SYSCOLUMNS for parameters defined in a table function?&lt;/p&gt;

&lt;p&gt; And going one step further, it even seems odd to me to keep the return columns themselves in SYSCOLUMNs.  For one thing, a table function is ultimately a &lt;b&gt;function&lt;/b&gt;, not a &lt;b&gt;table&lt;/b&gt;, and hence doesn&apos;t fall into the category of &quot;all tables in the current database&quot;.  The argument here may be that the function ultimately &lt;em&gt;returns&lt;/em&gt; a table, and that the resultant table &lt;em&gt;does&lt;/em&gt; fit the description of &quot;all tables in the current database&quot;. But in that case I think it&apos;s worth mentioning that the result is a &lt;b&gt;derived&lt;/b&gt; table and is therefore neither persistent (the function is persistent but the table is not) nor referenceable outside of a specific query.  So it seems odd to me to add rows for such a table into SYSCOLUMNS.&lt;/p&gt;

&lt;p&gt; But it&apos;s quite possible I&apos;m missing something obvious, so feel free to correct me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Under &quot;Type System&quot;&lt;br/&gt;
------------------------&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;We introduce a new Derby type RowMultisetImpl. This is the return type of Table Functions.&lt;br/&gt;
   A RowMultisetImpl  contains all of the column names in the returned table as well as their&lt;br/&gt;
   datatypes.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Okay, sorry for the really dumb question, but...how does this new type fit into the picture?&lt;/p&gt;

&lt;p&gt; From the spec the only use I can see is that this is what will be returned from a call to the proposed &quot;getReturnType()&quot; method on RoutineAliasInfo.&lt;/p&gt;

&lt;p&gt; In particular, I&apos;m wondering if this is something the user will see, or is this just internal to Derby?  If it&apos;s internal to Derby then what is the need for this type here? The reason I ask is that we already have diagnostic table functions working in Derby (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1852&quot; title=&quot;Wrong results: duplicate rows returned for nested UNIONs when they should be eliminated.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1852&quot;&gt;&lt;del&gt;DERBY-1852&lt;/del&gt;&lt;/a&gt;) and those functions do not depend on any new types; so what is it about the proposed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-716&quot; title=&quot;Re-enable VTIs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-716&quot;&gt;&lt;del&gt;DERBY-716&lt;/del&gt;&lt;/a&gt; changes that require the new RowMultisetImpl type?  Is this related to the fact that we want the table function to map to a static Java method (which is different from the diagnostic VTIs)?&lt;/p&gt;

&lt;p&gt; Also, it&apos;s not immediately clear to me why we need a new Formatable id for this type.  My underlying assumption here is that a formatable id is only required for serialization of the object (typically for writing/reading to/from disk).  This is based on the following javadoc from iapi/services/io/StoredFormatIds:&lt;/p&gt;

&lt;p&gt;    A format id identifies a stored form of an object for the&lt;br/&gt;
    purposes of locating a class which can read the stored form and&lt;br/&gt;
    reconstruct the object using the java.io.Externalizable interface.&lt;/p&gt;

&lt;p&gt;So can you envision any places where we would need to store/reconstruct a RowMultisetImpl via (de-)serialization? It seems like if we want to store the derived table result persistently we would just create an actual table and then select into it.  Which is, for example, exactly what the example shown in the &quot;New SELECT Syntax&quot; section shows:&lt;/p&gt;

&lt;p&gt;    INSERT INTO employees&lt;br/&gt;
      SELECT s.*&lt;br/&gt;
        FROM TABLE (externalEmployees(&apos;jdbc:mysql://localhost/hr&apos;)) s;&lt;/p&gt;

&lt;p&gt;Or as an alternate example, Derby currently supports the following:&lt;/p&gt;

&lt;p&gt;   ij&amp;gt; create table st as select * from&lt;br/&gt;
          table (syscs_diag.space_table(&apos;T1&apos;)) s with no data;&lt;/p&gt;

&lt;p&gt;   ij&amp;gt; insert into st select * from table (syscs_diag.space_table(&apos;T1&apos;)) s;&lt;/p&gt;

&lt;p&gt;There are of course other internal reasons to serialize an object, ex. iapi/types/SqlXmlUtil is serialized (and therefore needs a format id) because it used as a &quot;saved object&quot;.  Do you foresee a scenario where this could happen with user-defined table functions?&lt;/p&gt;</comment>
                            <comment id="12492109" author="rhillegas" created="Thu, 26 Apr 2007 21:45:31 +0100"  >&lt;p&gt;Thanks for the great feedback, Army. Your comments will help simplify the next rev of this spec.&lt;/p&gt;

&lt;p&gt;&amp;gt; Under the &quot;New SELECT Syntax&quot; section: &lt;/p&gt;

&lt;p&gt;You are correct: I left out the parentheses needed by the TABLE constructor in both the syntax description and the example.&lt;/p&gt;

&lt;p&gt;&amp;gt; A standalone VALUES clause can include other types of expressions, as well. For example: &lt;/p&gt;

&lt;p&gt;Function Table invocations will support the same spectrum of expressions that currently work with the diagnostic VTIs. I will reword this section.&lt;/p&gt;

&lt;p&gt;&amp;gt; Under &quot;Type System&quot; &lt;/p&gt;

&lt;p&gt;Yes, I think we need a new datatype for Function Tables, which will be returned by the corresponding RoutineAliasInfo.getReturnType() method. This returned datatype, in turn, can be used:&lt;/p&gt;

&lt;p&gt;1) by the GetProcedureColumns diagnostic vti, which decodes the RoutineAliasInfo on behalf of java.sql.DatabaseMetaData.getFunctionColumns()&lt;/p&gt;

&lt;p&gt;2) by our bind() logic in order to determine the names and types of columns in the derived table&lt;/p&gt;

&lt;p&gt;Because this datatype is part of RoutineAliasInfo, it will be serialized to SYSALIASES.ALIASINFO.and that is why it has its own Formatable id.&lt;/p&gt;

&lt;p&gt;You are, of course, correct that this is mostly an internal, implementation detail. This new datatype will only appear to users accidentally since it is part of the contents of SYSALIASES.ALIASINFO, which users can select and display. We won&apos;t be documenting this in the user guides. I will explain this better in the next rev of the spec.&lt;/p&gt;

&lt;p&gt;This particular implementation seems like a fairly straightforward way to deliver (1) and (2). If you have another idea how to implement (1) and (2), please let me know.&lt;/p&gt;</comment>
                            <comment id="12492110" author="rhillegas" created="Thu, 26 Apr 2007 21:49:01 +0100"  >&lt;p&gt;Continuing with Army&apos;s feedback:&lt;/p&gt;

&lt;p&gt;&amp;gt; Under &quot;System Tables&quot;: &lt;/p&gt;

&lt;p&gt;You are correct. We don&apos;t currently use SYSCOLUMNS to describe the parameters and return types of functions and procedures. I can rip out this section and spare myself this chunk of work. Thanks.&lt;/p&gt;</comment>
                            <comment id="12492366" author="rhillegas" created="Fri, 27 Apr 2007 19:49:16 +0100"  >&lt;p&gt;Attaching second rev of the functional spec, incorporating recent feedback.&lt;/p&gt;</comment>
                            <comment id="12493405" author="army" created="Thu, 3 May 2007 17:01:28 +0100"  >&lt;p&gt;Thank you for answering my previous questions, Rick, and for incorporating my feedback into the second version of the spec.  I took a look at the latest spec and I have the following questions...&lt;/p&gt;

&lt;p&gt;1) Under &quot;Additional SELECT Syntax&quot;&lt;/p&gt;

&lt;p&gt;  &quot;Value - A Value is an expression which could appear as an argument in the invocation&lt;br/&gt;
   of one of the diagnostic VTI functions. This includes literals and &apos;?&apos; parameters.&quot;&lt;/p&gt;

&lt;p&gt;I wonder if it wouldn&apos;t be better to just explicitly state what is allowed here, instead of referencing the diagnostic VTIs?  I.e. &quot;Value&quot; can be any expression which evaluates to a single value whose corresponding JDBC type equals the JDBC equivalent of the relevant function parameter&apos;s declared SQL type.&lt;/p&gt;

&lt;p&gt;That&apos;s a mouthful (you&apos;ll probably want to wordsmith it a bit), but as an example:&lt;/p&gt;

&lt;p&gt;  CREATE FUNCTION externalEmployees (LAST_NAME VARCHAR(50))&lt;br/&gt;
    RETURNS TABLE ...&lt;/p&gt;

&lt;p&gt;The function parameter &quot;LAST_NAME&quot; has a declared SQL type of VARCHAR.  The JDBC equivalent to this type is String.  Call this PARAM_JDBC_TYPE.  Then when calling the function:&lt;/p&gt;

&lt;p&gt;  SELECT * FROM TABLE (externalEmployees( &amp;lt;Value&amp;gt; )) as EMP&lt;/p&gt;

&lt;p&gt;&amp;lt;Value&amp;gt; can be any expression that evaluates to a type whose JDBC equivalent is PARAM_JDBC_TYPE.  One exception here may be LOBs; I don&apos;t think Derby allows passing of LOBs as function parameters?&lt;/p&gt;

&lt;p&gt;In this case PARAM_JDBC_TYPE is &quot;String&quot;, so &amp;lt;Value&amp;gt; can be any character expression.  And yes, this includes literals and &apos;?&apos; parameters.&lt;/p&gt;

&lt;p&gt;Note that something like:&lt;/p&gt;

&lt;p&gt;  SELECT * FROM TABLE (externalEmployees(SELECT DISTINCT &apos;hi&apos; FROM SYS.SYSTABLES)) as EMP&lt;/p&gt;

&lt;p&gt;would not work because the subquery returns &quot;a result set with a single row&quot;, which is not the same as &quot;a single value&quot;.&lt;/p&gt;

&lt;p&gt;2) Under &quot;Appendix E: Sample VTI&quot;&lt;/p&gt;

&lt;p&gt;It&apos;s great to have an example, so thank you for putting this together.  Some initial comments...&lt;/p&gt;

&lt;p&gt; A &amp;#8211; The javadoc for the class includes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;3) When you are done siphoning out the rows you need, release the&lt;/li&gt;
	&lt;li&gt;connection to the external database:&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;EmployeeTable.close();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; I don&apos;t quite understand who the &quot;you&quot; is in this sentence?  It sounds like it&apos;s referring to the user, but it seems odd to me to expect that the user is responsible for explicitly calling &quot;close&quot; on the VTI class.&lt;/p&gt;

&lt;p&gt; Is the assumption here that an application will typically execute code such as:&lt;/p&gt;

&lt;p&gt;    ResultSet rs = conn.createStatement().executeQuery(&lt;br/&gt;
        &quot;select * from TABLE (employeeTable()) emps&quot;);&lt;/p&gt;

&lt;p&gt;    while (rs.next())&lt;/p&gt;
    {
       ...
    }

&lt;p&gt;    rs.close();&lt;br/&gt;
    EmployeeTable.close();&lt;/p&gt;

&lt;p&gt; If this is not what you had in mind, can you perhaps include an example program that would call the EmployeeTable VTI, process results, and then clean up?&lt;/p&gt;

&lt;p&gt; Intuitively I would expect that a call to &quot;rs.close()&quot; internally leads Derby to call &quot;close()&quot; on the VTI class, sparing the user the need to do so.  Which brings me to my next question...&lt;/p&gt;

&lt;p&gt; B &amp;#8211; What is &quot;rs&quot; in the following:&lt;/p&gt;

&lt;p&gt;    ResultSet rs = conn.createStatement().executeQuery(&lt;br/&gt;
        &quot;select * from TABLE (employeeTable()) emps&quot;);&lt;/p&gt;

&lt;p&gt; Is it:&lt;/p&gt;

&lt;p&gt;   a) The exact same ResultSet object that is returned from EmployeeTable.read()&lt;br/&gt;
   b) A Derby ResultSet that somehow wraps the the EmployeeTable VTI&lt;br/&gt;
   c) A Derby ResultSet that somehow wraps the ResultSet returned from EmployeeTable.read()&lt;br/&gt;
   d) Something else entirely?&lt;/p&gt;

&lt;p&gt; If it&apos;s &quot;a&quot; then the user/app would indeed be responsible for calling EmployeeTable.close() explicitly, which seems odd.  If it&apos;s &quot;b&quot; then Derby can internally propagate &quot;rs.close()&quot; to EmployeeTable.close(), but would not have direct access to the underlying result set (or would it?).  If it&apos;s &quot;c&quot; then Derby has more control over the behavior of the result set and can propagate calls on &quot;rs&quot; to the underlying (user-defined) ResultSet--but Derby would not be able to call methods on the VTI itself (such as EmployeeTable.close()).  Can you say which of these, if any, correlates to your plans for VTIs?&lt;/p&gt;

&lt;p&gt;Thanks for your patience as I try to wrap my head around this...&lt;/p&gt;</comment>
                            <comment id="12493419" author="djd" created="Thu, 3 May 2007 17:38:07 +0100"  >&lt;p&gt;Why is the VTIEnvironment class being removed from the VTICosting interface? Does it cause issues in some way?&lt;/p&gt;

&lt;p&gt;The separation of the creation of the VTICosting object from the creation of the VTI class means that the costing cannot take into&lt;br/&gt;
account the parameters being passed to the table function. Thus it might be hard for an application developer to have any meaningful&lt;br/&gt;
costing information, defeating the whole purpose of the interface.&lt;/p&gt;

&lt;p&gt;It also limits the any class to supporting just one static method that returns a ResultSet, unless they can all share the same exact costing information.&lt;/p&gt;</comment>
                            <comment id="12493469" author="rhillegas" created="Thu, 3 May 2007 20:25:39 +0100"  >&lt;p&gt;Thanks for the continued feedback, Army.&lt;/p&gt;

&lt;p&gt;&amp;gt; 1) Under &quot;Additional SELECT Syntax&quot; &lt;/p&gt;

&lt;p&gt;I welcome additional ideas about how to wordsmith this. I&apos;m trying to accomplish the following:&lt;/p&gt;

&lt;p&gt;a) Indicate that I&apos;m not planning to support any syntax that doesn&apos;t currently work for the diagnostic vtis--at the same time, I&apos;m not planning to disable anything that is useful and already implemented.&lt;/p&gt;

&lt;p&gt;b) Sketch what can be said about this in the user manuals.&lt;/p&gt;

&lt;p&gt;I think I have accomplished (a) but I agree that (b) is a bit fuzzy. To me, the wording that you suggest doesn&apos;t cover the following case:&lt;/p&gt;

&lt;p&gt;select s.schemaName, t.tableName&lt;br/&gt;
from sys.sysschemas s, sys.systables t&lt;br/&gt;
where t.schemaid=s.schemaid&lt;br/&gt;
and exists&lt;br/&gt;
(&lt;br/&gt;
   select vti.*&lt;br/&gt;
   from table ( syscs_diag.space_table( s.schemaName, t.tableName ) ) as vti&lt;br/&gt;
   where vti.numfreepages &amp;gt; 100&lt;br/&gt;
);&lt;/p&gt;

&lt;p&gt;Here the arguments to the VTI constructor are variables in the context of the outer query block but constants in the context of the inner block. What do you think of something like the following: &quot;Table Function arguments must resolve to expressions which are evaluated once in the context of their query block. This includes literals and ? parameters but may also include the return values of function calls as well as correlated references to columns in outer query blocks.&quot;&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) Under &quot;Appendix E: Sample VTI&quot; &lt;/p&gt;

&lt;p&gt;I am sorry that this is so confusing. In my example, I am admitedly waving my hands over the complexity of managing connections to an external database. This is not how someone would really write this VTI. In additon to the awkwardness of closing down the whole VTI, this example is simply not re-entrant: If two different connections tried to use this VTI, they would trip over one another. Writing a bullet-proof VTI like this requires some work, which I think someone will want to do (and hopefully donate to the community). I&apos;m not taking on that task as part of writing this functional spec. I will add some words to note that I&apos;m waving my hands here.&lt;/p&gt;</comment>
                            <comment id="12493498" author="army" created="Thu, 3 May 2007 21:15:24 +0100"  >&lt;p&gt;&amp;gt; To me, the wording that you suggest doesn&apos;t cover the following case: &lt;/p&gt;

&lt;p&gt;Can you explain more about why the example is not covered?  Is it because of my use of the term &quot;single value&quot;?  If so, we could take that part out:&lt;/p&gt;

&lt;p&gt;  Let P&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; be the i-th declared parameter for some table function.  Let A&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; be the i-th argument&lt;br/&gt;
  passed to the table function when it is called.&lt;/p&gt;

&lt;p&gt;  A table function argument A&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; can be any expression whose corresponding JDBC type is the same&lt;br/&gt;
  as the JDBC type which corresponds to the SQL type of the function&apos;s declared parameter P&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;In the example you give, &quot;s.schemaName&quot; and &quot;t.tableName&quot; are simply expressions (in this case, column references) whose corresponding JDBC type is String, hence they are fine (because the JDBC type of the SPACE_TABLE parameters is String, too).&lt;/p&gt;

&lt;p&gt;&amp;gt; What do you think of something like the following: &quot;Table Function&lt;br/&gt;
&amp;gt; arguments must resolve to expressions which are evaluated once in the&lt;br/&gt;
&amp;gt; context of their query block. This includes literals and ? parameters&lt;br/&gt;
&amp;gt; but may also include the return values of function calls as well as&lt;br/&gt;
&amp;gt; correlated references to columns in outer query blocks.&lt;/p&gt;

&lt;p&gt;This seems too concentrated on the idea of &quot;evaluated once&quot;.  The important thing here isn&apos;t how many times the expression is evaluated for a given query; it&apos;s that the expression&apos;s datatype match the datatype of the declared function parameter.  Sorry if my previous suggestion made it seem otherwise...&lt;/p&gt;

&lt;p&gt;&amp;gt; I will add some words to note that I&apos;m waving my hands here.&lt;/p&gt;

&lt;p&gt;On the one hand I agree, having a solid example is not the goal of the spec.  On the other hand, if we can&apos;t come up with a solid example, I wonder how complete/appropriate any proposed solution will end up being?  If we cannot get a good use case of how this feature might be used, it makes it hard to know whether or not the design is going to be a good one.&lt;/p&gt;

&lt;p&gt;An example doesn&apos;t have to do anything complex like reference an external database.  It could just be something really simple that, for example, creates a 2-d array of strings and returns that as a ResultSet.  Proof of concept is what I&apos;m hoping for.  As it is, I can&apos;t get a good feel for how the proposed VTIs are actually supposed to be created work from a user perspective...&lt;/p&gt;</comment>
                            <comment id="12493503" author="djd" created="Thu, 3 May 2007 21:27:07 +0100"  >&lt;p&gt;&amp;gt; A table function argument A&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; can be any expression whose corresponding JDBC type is the same&lt;br/&gt;
&amp;gt; as the JDBC type which corresponds to the SQL type of the function&apos;s declared parameter P&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;. &lt;/p&gt;

&lt;p&gt;Why is JDBC being mentioned here? Parameters for table functions are declared as SQL types&lt;br/&gt;
and table functions are executed in SQL statements. There is no relationship to JDBC.&lt;/p&gt;

&lt;p&gt;JDBC only defines the mapping of the declared parameter type to the Java type, it does not affect&lt;br/&gt;
the SQL compilation/binding.&lt;/p&gt;</comment>
                            <comment id="12493506" author="army" created="Thu, 3 May 2007 21:34:52 +0100"  >&lt;p&gt;Oops, thanks.  Meant &quot;Java type&quot; in all of these cases, not &quot;JDBC type&quot;.&lt;/p&gt;</comment>
                            <comment id="12493517" author="djd" created="Thu, 3 May 2007 21:47:37 +0100"  >&lt;p&gt;Still not sure &quot;Java type&quot; is correct. Is that really the rule for deciding if the arguments can be mapped to the parameter type?&lt;/p&gt;

&lt;p&gt;For regular (non-table) functions and procedures the check is made to see if type of the SQL argument can be stored in the&lt;br/&gt;
type of the SQL parameter (defined in the routine&apos;s CREATE statement). Maybe checking the java types would lead to the&lt;br/&gt;
same answer, but logically it&apos;s a check of SQL types only.&lt;/p&gt;

&lt;p&gt;Table functions should follow the same logic as regular functions.&lt;/p&gt;

&lt;p&gt;See this check in StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;						if (! getTypeCompiler(parameterTypeId).storable(argumentTypeId, getClassFactory()))&lt;br/&gt;
								throw StandardException.newException(SQLState.LANG_NOT_STORABLE, &lt;br/&gt;
									parameterTypeId.getSQLTypeName(),&lt;br/&gt;
									argumentTypeId.getSQLTypeName() );&lt;/p&gt;</comment>
                            <comment id="12493525" author="rhillegas" created="Thu, 3 May 2007 22:07:48 +0100"  >&lt;p&gt;Thanks for the continued feedback, Dan.&lt;/p&gt;

&lt;p&gt;&amp;gt; Why is the VTIEnvironment class being removed from the VTICosting interface? Does it cause issues in some way?&lt;/p&gt;

&lt;p&gt;I had a couple issues with this class:&lt;/p&gt;

&lt;p&gt;1) I don&apos;t know what to tell users who want to exploit this argument in their costing logic. The javadoc is not very helpful. In addition I couldn&apos;t find any explanation of this class in the Cloudscape 3.5 documentation which I consulted: There the class is mentioned as having been added for future expansion, but the methods are not explained. I could not find any examples of its actually being used by our diagnostic VTIs.&lt;/p&gt;

&lt;p&gt;2) One of the methods in this class, isCompileTime(), seems geared toward the old Cloudscape VTIs, which were instantiated twice: at compile-time in order to bind() against the signature of the ResultSet, and at run-time in order to actually loop through the rows. This doesn&apos;t fit the ANSI scheme in which the bind() time information is declared when you CREATE the Function Table.&lt;/p&gt;

&lt;p&gt;&amp;gt; The separation of the creation of the VTICosting object from the creation of the VTI class means that the costing cannot take into&lt;br/&gt;
&amp;gt; account the parameters being passed to the table function. Thus it might be hard for an application developer to have any meaningful&lt;br/&gt;
&amp;gt; costing information, defeating the whole purpose of the interface.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; It also limits the any class to supporting just one static method that returns a ResultSet, unless they can all share the same exact costing information.&lt;/p&gt;

&lt;p&gt;I&apos;m not happy with the flexibility of VTICosting and I welcome brainstorming on this topic.&lt;/p&gt;

&lt;p&gt;The signature of the VTICosting instantiator is a tricky issue. Consider the example in my reply to Army above. Here the arguments to the VTI are not known until run time. In fact, they change as the query runs and the VTI is re-instantiated for each row in the outer query block. In this case, what would be the signature of the VTICosting instantiator?&lt;/p&gt;

&lt;p&gt;For the moment, let&apos;s not worry about where we find the VTICosting instantiator. This could be a constructor in the Function Table&apos;s class, a distinctively named static method in that class, some other class or method bound to the Function Table via a system procedure, etc..&lt;/p&gt;

&lt;p&gt;Instead, let&apos;s focus on the signature of the VTICosting instantiator. Here are some possibilities:&lt;/p&gt;

&lt;p&gt;A) A 0-arg signature. This is essentially what the current spec proposes.&lt;/p&gt;

&lt;p&gt;B) Some Derby interface like VTIEnvironment. The interface would have to be documented extensively.&lt;/p&gt;

&lt;p&gt;C) The same signature as the Function Table itself. We would substitute conventional defaults for arguments which could not be computed at bind() time--like ? parameters and correlated column references from outer query blocks.&lt;/p&gt;

&lt;p&gt;D) A leading prefix of the Function Table&apos;s signature. Here we would raise an exception if one of the leading arguments could not be computed at bind() time.&lt;/p&gt;

&lt;p&gt;What are your thoughts?&lt;/p&gt;</comment>
                            <comment id="12493529" author="rhillegas" created="Thu, 3 May 2007 22:26:54 +0100"  >&lt;p&gt;Thanks, Dan and Army, for the continued discussion of the parameters to Function Tables.&lt;/p&gt;

&lt;p&gt;Army and I seem to be concerned about different issues here. I am not concerned about the type resolution of arguments to the Function Tables. This seems to me to be exactly the same resolution logic which applies to existing (non-table) functions. I am not proposing to change that logic. If the user guides don&apos;t adequately describe the type resolution of function arguments, then that is another issue and it is someone else&apos;s itch.&lt;/p&gt;

&lt;p&gt;I am concerned about the fact that certain expressions can appear in the arguments to non-table functions but those expressions can not appear in the arguments to Function Tables. For instance,&lt;/p&gt;

&lt;p&gt;select *&lt;br/&gt;
from T, TABLE( foo( T.a ) )&lt;br/&gt;
where bar( T.a ) = 3;&lt;/p&gt;

&lt;p&gt;Here the expression T.a is a legal argument to bar() but not to foo().&lt;/p&gt;

&lt;p&gt;I hope we are not talking past one another.&lt;/p&gt;</comment>
                            <comment id="12493538" author="djd" created="Thu, 3 May 2007 23:08:12 +0100"  >&lt;p&gt;VTIEnvironment was (is?) meant to be a general purpose class that provides some control over &amp;amp; information for virtual tables, it was meant to be applicable to more than costing, despite it&apos;s class javadoc. see how it is used on the other interfaces that are applicable to virtual tables. Keeping the class may allow future expansion, removing it would hinder future expansion.&lt;/p&gt;

&lt;p&gt;isCompileTime() may provide useful state information if use of this class is expanded in the future, though it may be ok to remove the method, since it could be added back to the class at any time. Removing the class from the methods passed to VTICosting would make it harder to add back in the future.&lt;/p&gt;</comment>
                            <comment id="12493550" author="rhillegas" created="Thu, 3 May 2007 23:56:02 +0100"  >&lt;p&gt;I searched the Derby codeline for all of the method names in VTIEnvironment. They do not appear to be invoked anywhere although they are declared in the VTIEnvironment interface itself and in FromVTI and in VTIResultSet.&lt;/p&gt;

&lt;p&gt;There may be some value in exposing a vacuous VTIEnvironment interface, which has no methods in it but which would be a placeholder for future expansion. I don&apos;t see the value in retaining the existing, unused methods.&lt;/p&gt;

&lt;p&gt;The unused getSharedState() and setSharedState() methods suggest that the whole thing might be replaced with a Hashtable.&lt;/p&gt;</comment>
                            <comment id="12493551" author="army" created="Thu, 3 May 2007 23:58:02 +0100"  >&lt;p&gt;Dan&amp;gt; Maybe checking the java types would lead to the same answer, but logically it&apos;s a check of&lt;br/&gt;
Dan&amp;gt; SQL types only. Table functions should follow the same logic as regular functions. &lt;/p&gt;

&lt;p&gt;Okay.&lt;/p&gt;

&lt;p&gt;Rick&amp;gt; I hope we are not talking past one another.&lt;/p&gt;

&lt;p&gt;Oops, I think we were.&lt;/p&gt;

&lt;p&gt;Thank you both for clarifying...&lt;/p&gt;</comment>
                            <comment id="12493553" author="rhillegas" created="Fri, 4 May 2007 00:03:07 +0100"  >&lt;p&gt;Maybe the VTICosting instantiator could have a signature like this and it would be up to the implementation to throw a SQLException if there isn&apos;t enough information to cost the VTI:&lt;/p&gt;

&lt;p&gt;public static VTICosting getVTICosting&lt;br/&gt;
(&lt;br/&gt;
   String schemaName,                 // table function&apos;s schema as declared at CREATE FUNCTION time&lt;br/&gt;
   String tableFunctionName,       // table function&apos;s name as declared at CREATE FUNCTION time&lt;br/&gt;
   HashMap functionArguments   // key = arg name from CREATE FUNCTION, value = bind() time value, possibly null if bind() can&apos;t figure it out&lt;br/&gt;
)&lt;br/&gt;
   throws SQLException;&lt;/p&gt;</comment>
                            <comment id="12493697" author="rhillegas" created="Fri, 4 May 2007 15:05:42 +0100"  >&lt;p&gt;Thanks for helping me puzzle through the usage of VTIEnvironment, Dan. How does the following sound:&lt;/p&gt;

&lt;p&gt;1) Leave the VTIEnvironment arguments in the VTICosting methods.&lt;/p&gt;

&lt;p&gt;2) Remove isCompileTime() from VTIEnvironment.&lt;/p&gt;

&lt;p&gt;3) Beef up the javadoc for VTIEnvironment:&lt;/p&gt;

&lt;p&gt; a) Note that it is information used only by user-written costing logic.&lt;br/&gt;
 b) It allows user-written costing methods to share information with each other.&lt;br/&gt;
 c) Its lifetime is the lifetime of a statement plan in Derby&apos;s statement cache. If the invoking statement has to be recompiled, then the VTIEnvironment variable can be used to share information across re-compilations.&lt;/p&gt;

&lt;p&gt;If we are going to use VTIEnvironment, then I think the user guides should give an example of how to exploit this variable.&lt;/p&gt;</comment>
                            <comment id="12496998" author="rhillegas" created="Fri, 18 May 2007 20:02:15 +0100"  >&lt;p&gt;Attaching 3rd rev of the functional spec. This incorporates feedback from Army and Dan.&lt;/p&gt;

&lt;p&gt;Notably, I have restored the VTIEnvironment argument to the signatures of the VTICosting methods. I think that we could use VTIEnvironment to carry the function-invocation args whose values are known at optimize() time. This deserves more discussion and would be, I think, a related, follow-on JIRA.&lt;/p&gt;</comment>
                            <comment id="12511158" author="rhillegas" created="Mon, 9 Jul 2007 16:30:50 +0100"  >&lt;p&gt;Attaching a patch which adds basic support for Derby-style Table Functions. This patch allows you to declare user-defined Table Functions and to invoke them in simple SELECT statements. I&apos;ve included a JUnit test for this functionality. The existing regression tests pass cleanly for me.&lt;/p&gt;

&lt;p&gt;A description of the contents of this patch follows:&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(1) Created a new datatype, RowMultiSetImpl, to represent the return type of a Table Function.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/TypeId.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/DTSClassInfo.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/TypeDescriptor.java&lt;br/&gt;
A      java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java&lt;/p&gt;



&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(2) Added new syntax for declaring Derby-style Table Functions.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M      java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;/p&gt;

&lt;p&gt;Factored out the check for builtin VTIs so that the parser can know whether to build nodes for a constructor-based VTI or a static-method-based VTI.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/AliasDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java&lt;/p&gt;

&lt;p&gt;Parser support for Table Function DDL.&lt;/p&gt;


&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(3) Supported the invocation of  Table Functions in simple SELECTs.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/VTIDeferModPolicy.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/p&gt;

&lt;p&gt;Moved some bind() logic from NewInvocationNode into its superclass, MethodCallNode. The previous scheme allowed the invocation of VTIs which are constructors. The new scheme also allows the invocation of VTIs which are static methods.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/p&gt;

&lt;p&gt;Factored out some code which builds ResultColumns. The newly factored-out method is used to bind() the shape of the return value of a Table Function.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;Don&apos;t try to cast returned ResultSets.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java&lt;/p&gt;

&lt;p&gt;Accounted for the fact that the returned columns of Table Functions are nullable according to the SQL standard.&lt;/p&gt;


&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(4) Added new error messages.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;


&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(5) Added a JUnit test for this functionality.&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringArrayVTI.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/junit/BaseTestCase.java&lt;/p&gt;</comment>
                            <comment id="12511533" author="rhillegas" created="Tue, 10 Jul 2007 19:43:42 +0100"  >&lt;p&gt;Committed derby-716-01-basic-aa.diff at subversion revision 555032. I merged again today. All of the regression tests ran cleanly for me except for the wisconsin test. That test shows the following diff. It shows this diff even in a clean subversion client without my patch:&lt;/p&gt;

&lt;p&gt;28712a28713&lt;br/&gt;
&amp;gt; 0&lt;br/&gt;
28715a28717&lt;br/&gt;
&amp;gt; 0&lt;br/&gt;
Test Failed.&lt;/p&gt;</comment>
                            <comment id="12511554" author="djd" created="Tue, 10 Jul 2007 21:05:24 +0100"  >&lt;p&gt;Is there a need to add isRowMultiSet() to TypeDescriptor? It looks out of place in that interface.&lt;br/&gt;
All the other isXXXX() methods are on TypeId, and in fact the DataTypeDescriptor.isRowMultiSet() just calls the TypeId method.&lt;br/&gt;
Also the TypeDescriptorImpl version just returns false which looks wrong, or an indication the method should not be on TypeDescriptor.&lt;/p&gt;</comment>
                            <comment id="12511566" author="rhillegas" created="Tue, 10 Jul 2007 21:40:21 +0100"  >&lt;p&gt;Thanks for taking a look at this patch, Dan. I think that isRowMultiSet() could be removed from TypeDescriptor. It&apos;s in there so that AliasDescriptor doesn&apos;t have to cast a TypeDescriptor to DataTypeDescriptor. I&apos;m comfortable with that cast and agree that isRowMutliSet() looks awkward in TypeDescriptorImpl.&lt;/p&gt;</comment>
                            <comment id="12511568" author="djd" created="Tue, 10 Jul 2007 21:51:24 +0100"  >&lt;p&gt;I see that isRowMultiSet is used to indicate the function is a table function. Would it not be clearer to have an explict state in RoutineAliasInfo that the function is a table function, rather than overloading the return type to indicate this?&lt;/p&gt;

&lt;p&gt;Also look at &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2917&quot; title=&quot;Refactor DataTypeDescriptor and TypeDescriptor to result in cleaner code.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2917&quot;&gt;DERBY-2917&lt;/a&gt;, I&apos;m trying to separate TypeDescriptor  &amp;amp; DataTypeDescriptor, thus the cast you didn&apos;t want to add won&apos;t be valid soon.&lt;/p&gt;</comment>
                            <comment id="12511570" author="djd" created="Tue, 10 Jul 2007 21:57:59 +0100"  >&lt;p&gt;I see the type system details in the functional spec, but it&apos;s lacking some details. With a multiset type&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What infomation will be stored in TypeDescriptorImpl, e.g. scale, precision, type name etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;how does code access the types  &amp;amp; names in the  multiset?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12511576" author="rhillegas" created="Tue, 10 Jul 2007 22:35:17 +0100"  >&lt;p&gt;Hi Dan. I have added a comment to derby-2917. Thanks for tackling that project. I am very interested in this conversation. Unfortunately, tomorrow is my last day before I go on vacation (and then a conference) for two and a half weeks. So, please don&apos;t be put off by my impending radio-silence.&lt;/p&gt;

&lt;p&gt;&amp;gt; I see that isRowMultiSet is used to indicate the function is a table function. Would it not be clearer to have an explict state in RoutineAliasInfo that the function is a table function, rather than overloading the return type to indicate this? &lt;/p&gt;

&lt;p&gt;It seemed to me that a Table Function was just a function which returned a Row Multi Set. I think it would certainly be reasonable to add an isTableFunction() method to RoutineAliasInfo. However, to avoid duplicating state, I think that that method would just turn around and inspect the return type to see if it were a Row Multi Set.&lt;/p&gt;

&lt;p&gt;&amp;gt; - What infomation will be stored in TypeDescriptorImpl, e.g. scale, precision, type name etc. &lt;/p&gt;

&lt;p&gt;I&apos;m not sure that a TypeDescriptorImpl would ever be built for a Row Multi Set as part of implementing Table Functions. The return type is never used at runtime and is only briefly inspected at compilation time in order to build the shape of the returned Table. I think you have created derby-2917 because it seems to you, too, that it&apos;s hard to understand how behavior is divided between the types in the catalog package and the types which actually are persisted to the catalogs.&lt;/p&gt;

&lt;p&gt;&amp;gt; how does code access the types &amp;amp; names in the multiset? &lt;/p&gt;

&lt;p&gt;This is done in FromVTI.createResultColumnsForTableFunction().&lt;/p&gt;

</comment>
                            <comment id="12518473" author="rhillegas" created="Wed, 8 Aug 2007 16:31:35 +0100"  >&lt;p&gt;Attaching derby-716-02-DatabaseMetaData-aa.diff. This patch adds TableFunction support to our implementation of DatabaseMetaData.getFunctions() and getFunctionColumns(). Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java&lt;/p&gt;

&lt;p&gt;Add a new method so that metadata queries can determine whether a function is a TableFunction.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/metadata.properties&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/GetProcedureColumns.java&lt;/p&gt;

&lt;p&gt;Amend the queries and the dbproc which provide the results for getFunctions() and getFunctionColumns().&lt;/p&gt;


&lt;p&gt;M      java/shared/org/apache/derby/shared/common/reference/JDBC40Translation.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/junit/JDBC.java&lt;/p&gt;

&lt;p&gt;Regrssion tests.&lt;/p&gt;


&lt;p&gt;The regression tests ran cleanly for me under Java 6 except for the outstanding orphaned ResultSet problem in ProcedureInTriggerTest. That test runs cleanly standalone. This is the same regression test behavior seen in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2983&quot; title=&quot;The ResultSet returned by DatabaseMetaData.getFunctions() does not contain a required column named FUNCTION_TYPE.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2983&quot;&gt;&lt;del&gt;DERBY-2983&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

</comment>
                            <comment id="12518717" author="rhillegas" created="Thu, 9 Aug 2007 14:59:04 +0100"  >&lt;p&gt;Committed derby-716-02-DatabaseMetaData-aa.diff at subversion revision 564208.&lt;/p&gt;</comment>
                            <comment id="12519088" author="rhillegas" created="Fri, 10 Aug 2007 19:47:33 +0100"  >&lt;p&gt;Lance Andersen, JDBC spec lead, tells me that for a Table Function, DatabaseMetaData.getFunctionColumns() should not return a first row which describes the overall shape of the returned ResultSet, that is the ROW MULTISET. I will change the output of this metadata function accordingly.&lt;/p&gt;</comment>
                            <comment id="12519167" author="rhillegas" created="Sat, 11 Aug 2007 00:35:35 +0100"  >&lt;p&gt;Committed derby-03-DatabaseMetaData-aa.diff at subversion revision 564800. This removes the summary row 0 (describing the whole ROW MULTISET) from the ResultSet returned by DatabaseMetaData.getFunctionColumns() as Lance said is required. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/GetProcedureColumns.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java&lt;/p&gt;</comment>
                            <comment id="12525268" author="rhillegas" created="Thu, 6 Sep 2007 02:20:43 +0100"  >&lt;p&gt;Attaching derby-716-Optimizer-aa.diff. This is the work described in the functional spec section titled &quot;Optimizer Support&quot;. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/p&gt;

&lt;p&gt;Adds optimizer support for Derby Style Table Functions.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;Adds a new error message.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringArrayVTI.java&lt;/p&gt;

&lt;p&gt;Adds test cases for this work.&lt;/p&gt;</comment>
                            <comment id="12525424" author="rhillegas" created="Thu, 6 Sep 2007 14:58:35 +0100"  >&lt;p&gt;Regression tests passed cleanly on this patch except for the testTriggerNegative heisenbug documented in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1585&quot; title=&quot;derbylang/procedureInTrigger: not able to create trigger due to an open ResultSet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1585&quot;&gt;&lt;del&gt;DERBY-1585&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12526174" author="rhillegas" created="Mon, 10 Sep 2007 16:11:06 +0100"  >&lt;p&gt;Committed derby-716-04-Optimizer-aa.diff at subversion revision 574276.&lt;/p&gt;</comment>
                            <comment id="12526474" author="rhillegas" created="Tue, 11 Sep 2007 15:58:59 +0100"  >&lt;p&gt;Attaching derby-716-05-PublicAPI-aa.diff. This exposes VTICosting and VTIEnvironment in Derby&apos;s public API as described in the &quot;Public API&quot;  section of the functional spec.&lt;/p&gt;</comment>
                            <comment id="12526630" author="djd" created="Wed, 12 Sep 2007 00:23:18 +0100"  >&lt;p&gt;In the squeezeString() method in TableFunctionsTest this method call is made:&lt;/p&gt;

&lt;p&gt; new String( bytes );&lt;/p&gt;

&lt;p&gt;That constructor for String is platform dependent, thus this test will most likely fail on platforms that have a different default encoding.&lt;/p&gt;

&lt;p&gt;See:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/AvoidNonPortableMethods&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/AvoidNonPortableMethods&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12526786" author="rhillegas" created="Wed, 12 Sep 2007 14:16:39 +0100"  >&lt;p&gt;Thanks for pointing this out, Dan. I&apos;ll take a look at this.&lt;/p&gt;</comment>
                            <comment id="12526788" author="rhillegas" created="Wed, 12 Sep 2007 14:21:06 +0100"  >&lt;p&gt;Committed derby-716-05-PublicAPI-aa.diff at subversion revision 574945.&lt;/p&gt;</comment>
                            <comment id="12526798" author="rhillegas" created="Wed, 12 Sep 2007 14:51:31 +0100"  >&lt;p&gt;Attaching derby-716-06-TestEncoding-aa.diff. This makes TableFunctionTest create strings from byte arrays using UTF8 encoding.&lt;/p&gt;</comment>
                            <comment id="12526894" author="rhillegas" created="Wed, 12 Sep 2007 21:08:46 +0100"  >&lt;p&gt;Committed derby-716-06-TestEncoding-aa.diff at subversion revision 575060.&lt;/p&gt;</comment>
                            <comment id="12527159" author="rhillegas" created="Thu, 13 Sep 2007 17:30:44 +0100"  >&lt;p&gt;Attaching derby-716-07-dblook-aa.diff. This patch changes the type name returned by the RowMultiSetImpl class. The type name has been changed so that dblook will emit re-playable DDL for Table Functions. The type name has been changed from &apos;ROW( col1 type1, ... ) MULTISET&apos; to &apos;TABLE( &quot;COL1&quot; type1, ... )&apos;. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java&lt;/p&gt;

&lt;p&gt;Changes the type name.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java&lt;/p&gt;

&lt;p&gt;Adjusts this test to account for the new type name.&lt;/p&gt;
</comment>
                            <comment id="12527487" author="rhillegas" created="Fri, 14 Sep 2007 13:38:55 +0100"  >&lt;p&gt;Committed derby-716-07-dblook-aa.diff at subversion revision 575660.&lt;/p&gt;</comment>
                            <comment id="12529671" author="rhillegas" created="Sat, 22 Sep 2007 15:57:36 +0100"  >&lt;p&gt;Attaching derby-716-08-upgrade-aa.diff. This prevents table functions from being created after soft-upgrade. Added a unit test to verify this behavior. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Reject table function creation if we have only soft-upgraded.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java&lt;/p&gt;

&lt;p&gt;Verify correct upgrade behavior.&lt;/p&gt;

&lt;p&gt;Committed at subversion revision 578452.&lt;/p&gt;</comment>
                            <comment id="12529787" author="knutanders" created="Mon, 24 Sep 2007 08:06:42 +0100"  >&lt;p&gt;In this part of the patch&lt;/p&gt;

&lt;p&gt;@@ -10136,6 +10136,8 @@&lt;br/&gt;
 	    ( &amp;lt;COMMA&amp;gt; functionTableReturnColumn( names, types ) ) *&lt;br/&gt;
 	&amp;lt;RIGHT_PAREN&amp;gt;&lt;br/&gt;
 	{&lt;br/&gt;
+        checkVersion( DataDictionary.DD_VERSION_DERBY_10_4, &quot;table functions&quot;);&lt;br/&gt;
+&lt;br/&gt;
 		columnCount = names.size();&lt;br/&gt;
 		nameArray = new String[ columnCount ];&lt;br/&gt;
 		names.toArray( nameArray );&lt;/p&gt;

&lt;p&gt;would it be better to replace &quot;table functions&quot; with &quot;CREATE FUNCTION ... RETURNS TABLE&quot;? I think this would look better in the message since it puts quotes around the string (Use of &apos;&lt;/p&gt;
{0}
&lt;p&gt;&apos; requires database to be upgraded from...). It would also look better in the localized messages since the SQL keywords are the same in all locales, whereas the term &quot;table functions&quot; would need to be translated.&lt;/p&gt;</comment>
                            <comment id="12529866" author="rhillegas" created="Mon, 24 Sep 2007 15:18:59 +0100"  >&lt;p&gt;Thanks for raising this localization issue, Knut. I like your proposal for changing the error message. I have committed that change at subversion revision 578822. I&apos;ve attached the change as derby-716-09-upgradeLocalization-aa.diff. It touches one file:&lt;/p&gt;

&lt;p&gt;sqlgrammar.jj&lt;/p&gt;</comment>
                            <comment id="12533472" author="rhillegas" created="Tue, 9 Oct 2007 20:51:20 +0100"  >&lt;p&gt;I am recording here my understanding of the collation associated with string columns in the rows returned by Table Functions. The rules which I think apply are in the SQL Standard, part 2. The DDL for Table Functions is described in section 11.50. There the declaration of the types of the returned columns are governed by the same &amp;lt;data type&amp;gt; production which is used for columns in ordinary tables. The &amp;lt;data type&amp;gt; production is described in section 6.1. I therefore believe that the same rules apply for determining the collation of columns in ordinary tables and in the rowsets returned by Table Functions. For Derby this means that if a territory-based collation has been declared for the database, then all string columns returned by Table Functions must have territory-based collation. In databases which DO NOT have a territory-based collation, the collation of string columns returned by Table Functions must be the basic collation.&lt;/p&gt;</comment>
                            <comment id="12533774" author="rhillegas" created="Wed, 10 Oct 2007 16:34:41 +0100"  >&lt;p&gt;Attaching derby-716-10-datatypesCollation-aa.diff. This adds tests verifying the following:&lt;/p&gt;

&lt;p&gt;1) Make sure that Derby calls the expected getXXX() method for each legal datatype in the rowset returned by a table function.&lt;/p&gt;

&lt;p&gt;2) Make sure that string columns in the returned rowset have the expected collation (described in the previous comment).&lt;/p&gt;

&lt;p&gt;The second test uncovered a bug: we were always applying BASIC collation to string columns in the returned rowsets. This patch fixes that bug.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java&lt;br/&gt;
M java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java&lt;/p&gt;

&lt;p&gt;Fix for the collation bug.&lt;/p&gt;

&lt;p&gt;M java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java&lt;br/&gt;
M java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringArrayVTI.java&lt;/p&gt;

&lt;p&gt;New tests.&lt;/p&gt;</comment>
                            <comment id="12535757" author="rhillegas" created="Wed, 17 Oct 2007 22:40:19 +0100"  >&lt;p&gt;Committed derby-716-10-datatypesCollation-aa.diff at subversion revision 585710.&lt;/p&gt;</comment>
                            <comment id="12536839" author="rhillegas" created="Mon, 22 Oct 2007 22:19:05 +0100"  >&lt;p&gt;Attaching derby-716-11-subqueries-aa.diff. This adds a test case to TableFunctionTest, verifying that user-written table functions behave correctly when invoked in subqueries with correlated references to outer query blocks.&lt;/p&gt;</comment>
                            <comment id="12536989" author="rhillegas" created="Tue, 23 Oct 2007 13:59:00 +0100"  >&lt;p&gt;Committed derby-716-11-subqueries-aa.diff at subversion revision 587491.&lt;/p&gt;</comment>
                            <comment id="12559466" author="dyret" created="Wed, 16 Jan 2008 12:13:53 +0000"  >&lt;p&gt;Hi Rick, can we resolve/close this now? As you probably have seen, I have closed the sub-issues.&lt;/p&gt;</comment>
                            <comment id="12559520" author="rhillegas" created="Wed, 16 Jan 2008 14:38:50 +0000"  >&lt;p&gt;Closing this issue because I&apos;ve finished the work I planned to do on this and the issue has been dormant for a couple months.&lt;/p&gt;</comment>
                            <comment id="12589073" author="rhillegas" created="Tue, 15 Apr 2008 14:23:56 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3616&quot; title=&quot;TableFunctionTest fails under Ubuntu 7.10&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3616&quot;&gt;&lt;del&gt;DERBY-3616&lt;/del&gt;&lt;/a&gt; was fixed by hand-rolling an encoding of byte arrays to strings. Knut points out that we may be able to use an existing encoding. This may be useful to consider along with Dan&apos;s other ideas for improving the implementation.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12380720">DERBY-3135</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12380799">DERBY-3138</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12378210">DERBY-3072</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12391489">DERBY-3545</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12393097">DERBY-3595</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12393843">DERBY-3616</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12347352">DERBY-1651</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12380267">DERBY-3129</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12361420" name="derby-716-01-basic-aa.diff" size="112853" author="rhillegas" created="Mon, 9 Jul 2007 16:30:49 +0100"/>
                            <attachment id="12363413" name="derby-716-02-DatabaseMetaData-aa.diff" size="37176" author="rhillegas" created="Wed, 8 Aug 2007 16:31:35 +0100"/>
                            <attachment id="12363640" name="derby-716-03-DatabaseMetaData-aa.diff" size="3219" author="rhillegas" created="Sat, 11 Aug 2007 00:35:35 +0100"/>
                            <attachment id="12365228" name="derby-716-04-Optimizer-aa.diff" size="18000" author="rhillegas" created="Thu, 6 Sep 2007 02:20:43 +0100"/>
                            <attachment id="12365564" name="derby-716-05-PublicAPI-aa.diff" size="10773" author="rhillegas" created="Tue, 11 Sep 2007 15:58:59 +0100"/>
                            <attachment id="12365638" name="derby-716-06-TestEncoding-aa.diff" size="1187" author="rhillegas" created="Wed, 12 Sep 2007 14:51:31 +0100"/>
                            <attachment id="12365747" name="derby-716-07-dblook-aa.diff" size="3238" author="rhillegas" created="Thu, 13 Sep 2007 17:31:42 +0100"/>
                            <attachment id="12366406" name="derby-716-08-upgrade-aa.diff" size="2644" author="rhillegas" created="Sat, 22 Sep 2007 15:57:36 +0100"/>
                            <attachment id="12366465" name="derby-716-09-upgradeLocalization-aa.diff" size="655" author="rhillegas" created="Mon, 24 Sep 2007 15:18:59 +0100"/>
                            <attachment id="12367487" name="derby-716-10-datatypesCollation-aa.diff" size="23076" author="rhillegas" created="Wed, 10 Oct 2007 16:34:41 +0100"/>
                            <attachment id="12368171" name="derby-716-11-subqueries-aa.diff" size="4391" author="rhillegas" created="Mon, 22 Oct 2007 22:19:05 +0100"/>
                            <attachment id="12357655" name="functionTables.html" size="41961" author="rhillegas" created="Fri, 18 May 2007 20:02:14 +0100"/>
                            <attachment id="12356428" name="functionTables.html" size="52443" author="rhillegas" created="Fri, 27 Apr 2007 19:49:16 +0100"/>
                            <attachment id="12355350" name="functionTables.html" size="46023" author="rhillegas" created="Wed, 11 Apr 2007 17:45:54 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 27 Sep 2006 21:32:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29673</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0jxj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37047</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>