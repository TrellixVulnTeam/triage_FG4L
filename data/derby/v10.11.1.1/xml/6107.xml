<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:45:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6107/DERBY-6107.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6107] Investigate why setting a login timeout causes NativeAuthenticationServiceTest to fail when run in a suite</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6107</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6094&quot; title=&quot;Derby ignores DriverManager.setLoginTimeout()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6094&quot;&gt;&lt;del&gt;DERBY-6094&lt;/del&gt;&lt;/a&gt; for the details of this problem.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12636772">DERBY-6107</key>
            <summary>Investigate why setting a login timeout causes NativeAuthenticationServiceTest to fail when run in a suite</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Mar 2013 13:16:18 +0000</created>
                <updated>Thu, 19 Jun 2014 12:22:14 +0100</updated>
                            <resolved>Mon, 31 Mar 2014 12:43:08 +0100</resolved>
                                    <version>10.10.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13923319" author="myrna" created="Fri, 7 Mar 2014 00:34:50 +0000"  >&lt;p&gt;I modified the lang._Suite from trunk (10.11 alpha updated to svn 1574634) to have just these 3 tests:&lt;br/&gt;
        suite.addTest(HalfCreatedDatabaseTest.suite());&lt;br/&gt;
        suite.addTest(NativeAuthenticationServiceTest.suite());&lt;br/&gt;
        suite.addTest(Derby5652.suite());&lt;br/&gt;
Then I ran (with sane classes):&lt;br/&gt;
$ java -Dderby.tests.trace=true -Dderby.tests.login.timeout=10 junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.lang._Suite &amp;gt; runsmlste.out 2&amp;gt;&amp;amp;1&lt;/p&gt;

&lt;p&gt;All passed.&lt;br/&gt;
I will try it with the full suite (i.e. no modifications).&lt;/p&gt;</comment>
                            <comment id="13923461" author="myrna" created="Fri, 7 Mar 2014 02:49:28 +0000"  >&lt;p&gt;I ran the full lang._Suite unchanged, with sane classes, and -Dderby.tests.login.timeout=10, but NativeAuthenticationServiceTest did not fail.&lt;/p&gt;

&lt;p&gt;I did see the following 2 failures:&lt;br/&gt;
1) test_02_simpleSelects(org.apache.derbyTesting.functionTests.tests.lang.NewOptimizerOverridesTest)java.security.AccessControlException: Access denied (java.lang.RuntimePermission accessDeclaredMembers)&lt;br/&gt;
....&lt;br/&gt;
 2) test_03_offsetFetch(org.apache.derbyTesting.functionTests.tests.lang.NewOptimizerOverridesTest)java.security.AccessControlException: Access denied (java.lang.RuntimePermission accessDeclaredMembers)&lt;br/&gt;
...&lt;br/&gt;
Which maybe means we should do something about adding this permission in the lang/resultSetReader.policy for running with classes, but seems unrelated to this issue.&lt;/p&gt;

&lt;p&gt;Rick, shall I resolve this as Cannot Reproduce, or shall we leave it open until you have nothing else to do?&lt;/p&gt;</comment>
                            <comment id="13930468" author="myrna" created="Tue, 11 Mar 2014 15:37:59 +0000"  >&lt;p&gt;Going ahead and marking this as cannot reproduce.&lt;/p&gt;</comment>
                            <comment id="13937545" author="knutanders" created="Mon, 17 Mar 2014 08:31:53 +0000"  >&lt;p&gt;This issue still reproduces in my environment. Note that some of the test cases in NativeAuthenticationServiceTest are disabled on Windows. With JDK 7u51 on Linux, I see this failure when I run lang._Suite with derby.tests.login.timeout=10:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.sql.SQLSyntaxErrorException: Authentication cannot be performed because the credentials database &apos;classpath:nast&apos; does not exist.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:95)
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
        at org.apache.derby.impl.jdbc.authentication.NativeAuthenticationServiceImpl.authenticateUser(NativeAuthenticationServiceImpl.java:330)
        at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.authenticate(AuthenticationServiceBase.java:252)
        at org.apache.derby.impl.jdbc.EmbedConnection.checkUserCredentials(EmbedConnection.java:1302)
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:426)
        at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)
        at org.apache.derby.jdbc.InternalDriver$LoginCallable.call(InternalDriver.java:387)
        at org.apache.derby.jdbc.InternalDriver$LoginCallable.call(InternalDriver.java:363)
        at java.util.concurrent.FutureTask.run(FutureTask.java:262)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:744)
Caused by: ERROR 4251I: Authentication cannot be performed because the credentials database &apos;classpath:nast&apos; does not exist.
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
        at org.apache.derby.impl.jdbc.authentication.NativeAuthenticationServiceImpl.authenticateRemotely(NativeAuthenticationServiceImpl.java:438)
        at org.apache.derby.impl.jdbc.authentication.NativeAuthenticationServiceImpl.authenticateUser(NativeAuthenticationServiceImpl.java:321)
        ... 10 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13937980" author="myrna" created="Mon, 17 Mar 2014 16:19:15 +0000"  >&lt;p&gt;Thanks for that experiment, I&apos;ll take another look...&lt;/p&gt;</comment>
                            <comment id="13940047" author="myrna" created="Wed, 19 Mar 2014 01:18:52 +0000"  >&lt;p&gt;On Linux, even with a jvm &amp;lt; 7u51, (ibm 1.7 sr6) I also got failures in NativeAuthenticationTest when run with -Dderby.tests.login.timeout=10. &lt;br/&gt;
If that test is the only one in the _Suite, there is no such failure.&lt;br/&gt;
I blundered about going with the idea that there was one previous test that would mess this up, but it seems more tricky than that. Here&apos;s what I found so far:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There are no failures if the suite consists of:&lt;br/&gt;
        suite.addTest(OrderByAndOffsetFetchInSubqueries.suite());&lt;br/&gt;
        suite.addTest(Derby5005Test.suite());&lt;br/&gt;
        suite.addTest(OLAPTest.suite());&lt;br/&gt;
        suite.addTest(NativeAuthenticationServiceTest.suite());&lt;/li&gt;
	&lt;li&gt;But there are 2 failures if any of the following tests are run first:&lt;br/&gt;
        suite.addTest(DBOAccessTest.suite());&lt;br/&gt;
        suite.addTest(HalfCreatedDatabaseTest.suite());&lt;/li&gt;
	&lt;li&gt;And there are 4 failures if the following test is run first:&lt;br/&gt;
        suite.addTest(AutoIncrementTest.suite());&lt;br/&gt;
        suite.addTest(SequenceGeneratorTest.suite());&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Not sure if this information tells us anything useful.&lt;/p&gt;</comment>
                            <comment id="13940428" author="rhillegas" created="Wed, 19 Mar 2014 12:22:35 +0000"  >&lt;p&gt;Thanks for running those experiments, Myrna. The tests which don&apos;t interfere with NativeAuthenticationServiceTest all have very simple decoration: just a CleanDatabaseTestSetup as the outermost decorator. But that is also true for one of the tests which does interfere (AutoIncrementTest). Of the interfering tests, AutoIncrementTest has the simplest decoration. Studying its interference with NativeAuthenticationServiceTest may be easiest. Thanks.&lt;/p&gt;</comment>
                            <comment id="13940456" author="knutanders" created="Wed, 19 Mar 2014 13:23:24 +0000"  >&lt;p&gt;Here&apos;s one theory: The credentials database seems to be made available in the context class loader of the test thread and is accessed using the classpath subsubprotocol. When login timeout is enabled, getConnection() will delegate the work to a thread from a pool. If the test runs separately, the thread pool is probably empty, and a new thread is created in order to process the getConnection() call. Presumably, this thread inherits the context class loader of the current thread, and it therefore is able to access the credentials database. However, if the thread pool is not empty when the test runs, the getConnection() call is processed in a thread created by an earlier test, which probably doesn&apos;t have the context class loader set up to access the credentials database.&lt;/p&gt;</comment>
                            <comment id="13940504" author="myrna" created="Wed, 19 Mar 2014 14:30:32 +0000"  >&lt;p&gt;Knut, how would the login timeout affect that scenario?&lt;/p&gt;</comment>
                            <comment id="13940550" author="knutanders" created="Wed, 19 Mar 2014 15:05:38 +0000"  >&lt;p&gt;The thread pool is only used if the login timeout is enabled. So without the login timeout, the credentials database will always be accessed in the main junit thread.&lt;/p&gt;</comment>
                            <comment id="13943064" author="knutanders" created="Fri, 21 Mar 2014 13:58:18 +0000"  >&lt;p&gt;The java.util.concurrent.Executors class has a method called privilegedCallableUsingCurrentClassLoader() that might help in this case. If we wrap the task using that method before we give it to the thread pool, it will set the current class loader of the cached thread before executing the task (and reset it when the task is done). I&apos;ll give that a try.&lt;/p&gt;</comment>
                            <comment id="13944923" author="knutanders" created="Mon, 24 Mar 2014 11:02:24 +0000"  >&lt;p&gt;I tried wrapping the callable in InternalDriver.timeLogin() using said helper method in Executors, like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; LoginCallable callable = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LoginCallable(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, url, info);

Future&amp;lt;EmbedConnection&amp;gt; task = _executorPool.submit(
    AccessController.doPrivileged(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PrivilegedAction&amp;lt;Callable&amp;lt;EmbedConnection&amp;gt;&amp;gt;() {
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Callable&amp;lt;EmbedConnection&amp;gt; run() {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Executors.privilegedCallableUsingCurrentClassLoader(callable);
        }
    }));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That made the test pass in my environment.&lt;/p&gt;

&lt;p&gt;This only works if derby.jar has been granted the runtime permissions getClassLoader and setContextClassLoader. Those permissions are currently listed as optional permissions. If we go for this approach, we&apos;d either need to make them required permissions (at least required when using login timeout), or have a reasonable fallback strategy if the permissions have not been granted.&lt;/p&gt;

&lt;p&gt;One possible fallback strategy might be to set the keep alive time for InternalDriver&apos;s thread pool to 0. That would cause every submitted task to spawn a new thread, so they would never end up executing in a thread whose context class loader was inherited from a thread that submitted an earlier task. That means you won&apos;t get the benefit of reusing threads from the thread pool if you don&apos;t have those permissions, but at least it will behave correctly.&lt;/p&gt;

&lt;p&gt;Or maybe, for simplicity, we should just set the keep alive time to 0 unconditionally, and skip the use of Executors.privilegedCallableUsingCurrentClassLoader(), so that we wouldn&apos;t have two different code paths depending on whether or not the permissions have been granted. In most cases I would suppose the getConnection() call isn&apos;t very performance critical, so it might not be worth the extra complexity to optimize it.&lt;/p&gt;</comment>
                            <comment id="13944982" author="rhillegas" created="Mon, 24 Mar 2014 12:58:28 +0000"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;Thanks for thinking so deeply about this issue and for running those experiments. I don&apos;t think I understand the problem well enough to give any advice yet. I have a couple questions:&lt;/p&gt;

&lt;p&gt;1) How would this problem occur in production? Would it only surface if you are accessing a database in a jar file on the classpath and you have enabled login timeouts and then later on you switch to using NATIVE authentication after having run without it for a while?&lt;/p&gt;

&lt;p&gt;2) I don&apos;t understand the implications of granting getClassLoader and setContextClassLoader permissions, but my sense is that those are very serious permissions. Note that Derby calls getClassLoader() in several places but, so far, the context has been sufficient to not trip a security exception.&lt;/p&gt;

&lt;p&gt;3) Also, I can&apos;t find where we list those permissons as optional permissions. Can you point me at that advice?&lt;/p&gt;

&lt;p&gt;4) I think that threads are fairly lightweight. But memory could be exhausted by a sufficiently large number of even very lightweight objects. Setting the keep alive timeout to 0 may create a new opportunity for a DDoS attack. But maybe that&apos;s red herring because the same attack might exhaust some other resource even if the keep alive timeout weren&apos;t set to 0.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13945134" author="knutanders" created="Mon, 24 Mar 2014 14:09:30 +0000"  >&lt;p&gt;Hi Rick. Thanks for your comments. Here are my responses:&lt;/p&gt;

&lt;p&gt;1) One does not have to use NATIVE authentication. It is enough to access a database on the classpath with login timeouts enabled. This could result in threads not finding databases that are in their context class loader, or threads being able to access databases that are private to other threads. There could be other scenarios as well, but I&apos;m not aware of any other functionality that depends on the context class loader of the thread that calls getConnection().&lt;/p&gt;

&lt;p&gt;2) Derby&apos;s current calls to getContextClassLoader() and setContextClassLoader() are wrapped in try/catch blocks, and SecurityExceptions are silently ignored, so one wouldn&apos;t notice if they failed. Those calls were added to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3745&quot; title=&quot;Derby can leak classloaders in an app server environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3745&quot;&gt;&lt;del&gt;DERBY-3745&lt;/del&gt;&lt;/a&gt;, which could cause class loader leaks because Derby&apos;s daemon threads would hold on to the context class loader of the application thread that happened to boot the engine. The SecurityExceptions are ignored for backwards compatibility so that existing applications that don&apos;t suffer from the class loader leak aren&apos;t affected.&lt;/p&gt;

&lt;p&gt;3) They are mentioned in the Developer&apos;s Guide, Running Derby under a security manager, Granting permissions to Derby, in the optional section: &lt;a href=&quot;http://db.apache.org/derby/docs/10.10/devguide/cdevbabejgjd.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.10/devguide/cdevbabejgjd.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) The total number of threads at any given time will not be greater if the keep alive timeout is set to 0. On the contrary, since idle threads are not kept around for a while in the pool, the memory footprint will typically be smaller if the keep alive timeout is 0. With timeout 0, the number of threads in the pool will be equal to the number of callers currently waiting for getConnection() to return. With the default, non-zero timeout, the number of threads in the pool will be equal to the number of callers currently waiting for getConnection() to return &lt;b&gt;plus&lt;/b&gt; the number of idle threads that haven&apos;t yet timed out.&lt;/p&gt;</comment>
                            <comment id="13945177" author="rhillegas" created="Mon, 24 Mar 2014 14:47:32 +0000"  >&lt;p&gt;Thanks for that extra explanation, Knut. So it sounds as though setting the keepAlive time to 0 will just cause DriverManager.getConnection() to incur the cost of starting a Thread when login timeouts are enabled. That doesn&apos;t sound like an intolerable expense for implementing login timeouts. I prefer that expense to granting the extra permissions. And I vote for less complexity: always set the keepAlive time to 0. Thanks.&lt;/p&gt;</comment>
                            <comment id="13945647" author="knutanders" created="Mon, 24 Mar 2014 20:26:42 +0000"  >&lt;p&gt;Thanks, Rick. That&apos;s the approach I&apos;m leaning towards too. We can always optimize later if necessary.&lt;/p&gt;

&lt;p&gt;I suspect a regression test case for this issue is likely to hit &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2162&quot; title=&quot;Shutting down a database loaded from a jar file via the classpath and URLClassLoader  leaves an open file reference to the jar file containing the database.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2162&quot;&gt;&lt;del&gt;DERBY-2162&lt;/del&gt;&lt;/a&gt;/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5618&quot; title=&quot;On Windows, orderly engine shutdown does not release the file handle on a jar file containing a database which was booted using the classpath subprotocol&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5618&quot;&gt;&lt;del&gt;DERBY-5618&lt;/del&gt;&lt;/a&gt;, so I&apos;ll see if I can find a solution for them first.&lt;/p&gt;</comment>
                            <comment id="13950752" author="knutanders" created="Fri, 28 Mar 2014 14:11:30 +0000"  >&lt;p&gt;Attaching d6107-1a.diff which fixes the bug by disabling caching of threads used for timed logins. It also adds a test to DatabaseClassLoadingTest to verify the fix.&lt;/p&gt;</comment>
                            <comment id="13955113" author="jira-bot" created="Mon, 31 Mar 2014 12:42:32 +0100"  >&lt;p&gt;Commit 1583304 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1583304&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1583304&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6107&quot; title=&quot;Investigate why setting a login timeout causes NativeAuthenticationServiceTest to fail when run in a suite&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6107&quot;&gt;&lt;del&gt;DERBY-6107&lt;/del&gt;&lt;/a&gt;: Connection to classpath database fails when login timeout is set&lt;/p&gt;

&lt;p&gt;Don&apos;t cache threads used for connecting to the database when a login&lt;br/&gt;
timeout is set, to prevent that the connection attempt uses the wrong&lt;br/&gt;
context class loader.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12634415">DERBY-6094</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12721691">DERBY-6619</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12637404" name="d6107-1a.diff" size="11371" author="knutanders" created="Fri, 28 Mar 2014 14:11:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 7 Mar 2014 00:34:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>317264</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzclfb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>317605</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>