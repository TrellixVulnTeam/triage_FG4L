<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:40:15 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4331/DERBY-4331.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4331] Join returns results in wrong order</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4331</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;In Derby 10.5.2.0, the query below started returning results in wrong order (note the ORDER BY clause). Derby 10.5.1.1 gives the expected ordering.&lt;/p&gt;

&lt;p&gt;ij&amp;gt; SELECT CS.ID&lt;br/&gt;
FROM&lt;br/&gt;
    CHANGESETS CS, FILECHANGES FC, REPOSITORIES R, FILES F, AUTHORS A&lt;br/&gt;
WHERE&lt;br/&gt;
    R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND&lt;br/&gt;
    CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND F.ID = FC.FILE AND&lt;br/&gt;
    A.ID = CS.AUTHOR AND&lt;br/&gt;
    EXISTS (&lt;br/&gt;
        SELECT 1&lt;br/&gt;
        FROM FILES F2&lt;br/&gt;
        WHERE&lt;br/&gt;
            F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND&lt;br/&gt;
            F2.PATH LIKE &apos;/%&apos; ESCAPE &apos;#&apos;)&lt;br/&gt;
ORDER BY CS.ID DESC;&lt;br/&gt;
ID         &lt;br/&gt;
-----------&lt;br/&gt;
1          &lt;br/&gt;
2          &lt;br/&gt;
3          &lt;br/&gt;
2          &lt;br/&gt;
2          &lt;br/&gt;
3          &lt;/p&gt;

&lt;p&gt;6 rows selected&lt;/p&gt;</description>
                <environment></environment>
        <key id="12431975">DERBY-4331</key>
            <summary>Join returns results in wrong order</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mikem">Mike Matrigali</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Sun, 2 Aug 2009 00:12:58 +0100</created>
                <updated>Sat, 18 May 2013 10:16:13 +0100</updated>
                            <resolved>Wed, 12 Aug 2009 17:21:39 +0100</resolved>
                                    <version>10.1.3.3</version>
                    <version>10.2.2.1</version>
                    <version>10.3.3.1</version>
                    <version>10.4.2.1</version>
                    <version>10.5.2.0</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.1.3.3</fixVersion>
                    <fixVersion>10.2.2.1</fixVersion>
                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.3.0</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12737967" author="knutanders" created="Sun, 2 Aug 2009 00:15:42 +0100"  >&lt;p&gt;Attached a script that creates a sample database and executes the problematic query.&lt;/p&gt;</comment>
                            <comment id="12738078" author="lilywei" created="Sun, 2 Aug 2009 14:28:25 +0100"  >&lt;p&gt;I try the same query without subquery and the result is order. &lt;br/&gt;
ij&amp;gt; SELECT CS.ID&lt;br/&gt;
FROM&lt;br/&gt;
    CHANGESETS CS, FILECHANGES FC, REPOSITORIES R, FILES F, AUTHORS A&lt;br/&gt;
    WHERE&lt;br/&gt;
        R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND&lt;br/&gt;
        F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND&lt;br/&gt;
            CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND F.ID = FC.FILE AND&lt;/p&gt;

&lt;p&gt;                A.ID = CS.AUTHOR ORDER BY CS.ID DESC;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
1&lt;/p&gt;

&lt;p&gt;6 rows selected&lt;/p&gt;

&lt;p&gt;Hopefully, this will narrow the join logic a little bit. &lt;/p&gt;</comment>
                            <comment id="12738084" author="knutanders" created="Sun, 2 Aug 2009 15:57:40 +0100"  >&lt;p&gt;Calling SYSCS_UTIL.SYSCS_UPDATE_STATISTICS on the tables involved also makes the result come out in the right order, so it seems like the bug only appears when a certain plan is chosen.&lt;/p&gt;

&lt;p&gt;The problem does not occur when I revert to revision 783167, but it does occur with revision 783168, which suggests that it was triggered by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12738088" author="kmarsden" created="Sun, 2 Aug 2009 16:15:51 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; was fixed with 10.5.2.0 but did not show up on the release notes because it is still open.  The change was backported to the 10.1 branch, so updating the affects version for this issue.&lt;/p&gt;</comment>
                            <comment id="12738424" author="kmarsden" created="Mon, 3 Aug 2009 17:46:05 +0100"  >&lt;p&gt;One thing I don&apos;t understand about this regression is the description of the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; made it sound like it was making sort avoidance less likely.&lt;br/&gt;
&quot; The decision for avoiding sorting should also include relationship between the optimizables in a given join order &quot;&lt;/p&gt;

&lt;p&gt;so how did that cause a new sort avoidance problem?&lt;/p&gt;

&lt;p&gt;The comments also say:&lt;br/&gt;
&quot;I think this patch is also improving the existing queries to include a better path than what it was picking up before.&quot;&lt;/p&gt;

&lt;p&gt;Is it a change in plan that is causing the regression, perhaps choosing a plan that had always ordered incorrectly?&lt;/p&gt;</comment>
                            <comment id="12738435" author="mikem" created="Mon, 3 Aug 2009 18:12:02 +0100"  >&lt;p&gt;If anyone has time, what would be useful is the smallest test case possible with a set of optimizer hints that forces the bad result.  This will help in understanding exactly what is going on. &lt;/p&gt;

&lt;p&gt;If I remember correctly, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; basically eliminated sort avoidance plans when marching through&lt;br/&gt;
the all the plans.  It turned out that some of the plans it eliminated actually did return the correct order but&lt;br/&gt;
just through luck.  So the question with this bug, which is obviously affected by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; is did &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; just happen to eliinate some &quot;lucky&quot; plans, and push it to an existing bug or did it somehow&lt;br/&gt;
now mark a plan we previously skipped as valid.  If the repro had a fixed join plan that showed bad sort&lt;br/&gt;
now and good sort before we could more easily tell what the regression is.  &lt;/p&gt;</comment>
                            <comment id="12738479" author="mikem" created="Mon, 3 Aug 2009 19:23:41 +0100"  >&lt;p&gt;here is the query plan from the bad sort results query, gotten by adding derby.language.logQueryPlan=true&lt;br/&gt;
to derby.properties.  Posting now, have not read through it yet - but first thing to notice is that there&lt;br/&gt;
is not any sort node so as assumed the problem is not a sorter bug - but some sort of sort avoidance&lt;br/&gt;
plan bug:&lt;br/&gt;
2009-08-03 18:09:06.296 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 259), (SESSIONID = 3), SELECT CS.ID^M&lt;br/&gt;
FROM^M&lt;br/&gt;
    CHANGESETS CS, FILECHANGES FC, REPOSITORIES R, FILES F, AUTHORS A^M&lt;br/&gt;
WHERE^M&lt;br/&gt;
    R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND ^M&lt;br/&gt;
    F.REPOSITORY  = R.ID                                            AND ^M&lt;br/&gt;
    A.REPOSITORY  = R.ID                                            AND^M&lt;br/&gt;
    CS.REPOSITORY = R.ID                                            AND ^M&lt;br/&gt;
    CS.ID         = FC.CHANGESET                                    AND ^M&lt;br/&gt;
    F.ID          = FC.FILE                                         AND^M&lt;br/&gt;
    A.ID          = CS.AUTHOR                                       AND^M&lt;br/&gt;
    EXISTS (^M&lt;br/&gt;
        SELECT 1^M&lt;br/&gt;
        FROM FILES F2^M&lt;br/&gt;
        WHERE^M&lt;br/&gt;
            F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND^M&lt;br/&gt;
            F2.PATH LIKE &apos;/%&apos; ESCAPE &apos;#&apos;)^M&lt;br/&gt;
ORDER BY CS.ID DESC ******* Project-Restrict ResultSet (18):&lt;br/&gt;
Number of opens = 1&lt;br/&gt;
Rows seen = 6&lt;br/&gt;
Rows filtered = 0&lt;br/&gt;
restriction = false&lt;br/&gt;
projection = true&lt;br/&gt;
    constructor time (milliseconds) = 0&lt;br/&gt;
    open time (milliseconds) = 0&lt;br/&gt;
    next time (milliseconds) = 0&lt;br/&gt;
    close time (milliseconds) = 0&lt;br/&gt;
    restriction time (milliseconds) = 0&lt;br/&gt;
    projection time (milliseconds) = 0&lt;br/&gt;
    optimizer estimated row count:            0.01&lt;br/&gt;
    optimizer estimated cost:          157.72&lt;/p&gt;

&lt;p&gt;Source result set:&lt;br/&gt;
    Nested Loop Exists Join ResultSet:&lt;br/&gt;
    Number of opens = 1&lt;br/&gt;
    Rows seen from the left = 6&lt;br/&gt;
    Rows seen from the right = 6&lt;br/&gt;
    Rows filtered = 0&lt;br/&gt;
    Rows returned = 6&lt;br/&gt;
        constructor time (milliseconds) = 0&lt;br/&gt;
        open time (milliseconds) = 0&lt;br/&gt;
        next time (milliseconds) = 0&lt;br/&gt;
        close time (milliseconds) = 0&lt;br/&gt;
        optimizer estimated row count:            0.01&lt;br/&gt;
        optimizer estimated cost:          157.72&lt;/p&gt;

&lt;p&gt;    Left result set:&lt;br/&gt;
        Nested Loop Join ResultSet:&lt;br/&gt;
        Number of opens = 1&lt;br/&gt;
        Rows seen from the left = 6&lt;br/&gt;
        Rows seen from the right = 6&lt;br/&gt;
        Rows filtered = 0&lt;br/&gt;
        Rows returned = 6&lt;br/&gt;
            constructor time (milliseconds) = 0&lt;br/&gt;
            open time (milliseconds) = 0&lt;br/&gt;
            next time (milliseconds) = 0&lt;br/&gt;
            close time (milliseconds) = 0&lt;br/&gt;
            optimizer estimated row count:            0.01&lt;br/&gt;
            optimizer estimated cost:          157.10&lt;/p&gt;

&lt;p&gt;        Left result set:&lt;br/&gt;
            Nested Loop Join ResultSet:&lt;br/&gt;
            Number of opens = 1&lt;br/&gt;
            Rows seen from the left = 16&lt;br/&gt;
            Rows seen from the right = 6&lt;br/&gt;
            Rows filtered = 0&lt;br/&gt;
            Rows returned = 6&lt;br/&gt;
                constructor time (milliseconds) = 0&lt;br/&gt;
                open time (milliseconds) = 0&lt;br/&gt;
                next time (milliseconds) = 0&lt;br/&gt;
                close time (milliseconds) = 0&lt;br/&gt;
                optimizer estimated row count:            0.02&lt;br/&gt;
                optimizer estimated cost:          155.23&lt;/p&gt;

&lt;p&gt;            Left result set:&lt;br/&gt;
                Nested Loop Join ResultSet:&lt;br/&gt;
                Number of opens = 1&lt;br/&gt;
                Rows seen from the left = 4&lt;br/&gt;
                Rows seen from the right = 16&lt;br/&gt;
                Rows filtered = 0&lt;br/&gt;
                Rows returned = 16&lt;br/&gt;
                    constructor time (milliseconds) = 0&lt;br/&gt;
                    open time (milliseconds) = 0&lt;br/&gt;
                    next time (milliseconds) = 0&lt;br/&gt;
                    close time (milliseconds) = 0&lt;br/&gt;
                    optimizer estimated row count:            0.20&lt;br/&gt;
                    optimizer estimated cost:          154.53&lt;/p&gt;

&lt;p&gt;                Left result set:&lt;br/&gt;
                    Nested Loop Join ResultSet:&lt;br/&gt;
                    Number of opens = 1&lt;br/&gt;
                    Rows seen from the left = 1&lt;br/&gt;
                    Rows seen from the right = 4&lt;br/&gt;
                    Rows filtered = 0&lt;br/&gt;
                    Rows returned = 4&lt;br/&gt;
                        constructor time (milliseconds) = 0&lt;br/&gt;
                        open time (milliseconds) = 0&lt;br/&gt;
                        next time (milliseconds) = 0&lt;br/&gt;
                        close time (milliseconds) = 0&lt;br/&gt;
                        optimizer estimated row count:            0.22&lt;br/&gt;
                        optimizer estimated cost:          146.81&lt;/p&gt;

&lt;p&gt;                    Left result set:&lt;br/&gt;
                        Index Row to Base Row ResultSet for REPOSITORIES:&lt;br/&gt;
                        Number of opens = 1&lt;br/&gt;
                        Rows seen = 1&lt;br/&gt;
                        Columns accessed from heap = &lt;/p&gt;
{0}
&lt;p&gt;                            constructor time (milliseconds) = 0&lt;br/&gt;
                            open time (milliseconds) = 0&lt;br/&gt;
                            next time (milliseconds) = 0&lt;br/&gt;
                            close time (milliseconds) = 0&lt;br/&gt;
                            optimizer estimated row count:            1.00&lt;br/&gt;
                            optimizer estimated cost:          135.64&lt;/p&gt;

&lt;p&gt;                            Index Scan ResultSet for REPOSITORIES using constraint SQL090803110642671 at read committed isolation level using share ro&lt;br/&gt;
w locking chosen by the optimizer&lt;br/&gt;
                            Number of opens = 1&lt;br/&gt;
                            Rows seen = 1&lt;br/&gt;
                            Rows filtered = 0&lt;br/&gt;
                            Fetch Size = 1&lt;br/&gt;
                                constructor time (milliseconds) = 0&lt;br/&gt;
                                open time (milliseconds) = 0&lt;br/&gt;
                                next time (milliseconds) = 0&lt;br/&gt;
                                close time (milliseconds) = 0&lt;br/&gt;
                                next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                            scan information:&lt;br/&gt;
                                Bit set of columns fetched=All&lt;br/&gt;
                                Number of columns fetched=2&lt;br/&gt;
                                Number of deleted rows visited=0&lt;br/&gt;
                                Number of pages visited=1&lt;br/&gt;
                                Number of rows qualified=1&lt;br/&gt;
                                Number of rows visited=1&lt;br/&gt;
                                Scan type=btree&lt;br/&gt;
                                Tree height=-1&lt;br/&gt;
                                start position:&lt;br/&gt;
    &amp;gt;= on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                                stop position:&lt;br/&gt;
    &amp;gt; on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                                qualifiers:&lt;br/&gt;
None&lt;br/&gt;
                                optimizer estimated row count:            1.00&lt;br/&gt;
                                optimizer estimated cost:          135.64&lt;/p&gt;

&lt;p&gt;                    Right result set:&lt;br/&gt;
                        Index Row to Base Row ResultSet for FILES:&lt;br/&gt;
                        Number of opens = 1&lt;br/&gt;
                        Rows seen = 4&lt;br/&gt;
                        Columns accessed from heap = &lt;/p&gt;
{0, 1, 2}
&lt;p&gt;                            constructor time (milliseconds) = 0&lt;br/&gt;
                            open time (milliseconds) = 0&lt;br/&gt;
                            next time (milliseconds) = 0&lt;br/&gt;
                            close time (milliseconds) = 0&lt;br/&gt;
                            optimizer estimated row count:            0.22&lt;br/&gt;
                            optimizer estimated cost:           11.17&lt;/p&gt;

&lt;p&gt;                            Index Scan ResultSet for FILES using constraint SQL090803110643012 at read committed isolation level using share row locki&lt;br/&gt;
ng chosen by the optimizer&lt;br/&gt;
                            Number of opens = 1&lt;br/&gt;
                            Rows seen = 4&lt;br/&gt;
                            Rows filtered = 0&lt;br/&gt;
                            Fetch Size = 1&lt;br/&gt;
                                constructor time (milliseconds) = 0&lt;br/&gt;
                                open time (milliseconds) = 0&lt;br/&gt;
                                next time (milliseconds) = 0&lt;br/&gt;
                                close time (milliseconds) = 0&lt;br/&gt;
                                next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                            scan information:&lt;br/&gt;
                                Bit set of columns fetched=All&lt;br/&gt;
                                Number of columns fetched=3&lt;br/&gt;
                                Number of deleted rows visited=0&lt;br/&gt;
                                Number of pages visited=1&lt;br/&gt;
                                Number of rows qualified=4&lt;br/&gt;
                                Number of rows visited=4&lt;br/&gt;
                                Scan type=btree&lt;br/&gt;
                                Tree height=1&lt;br/&gt;
                                start position:&lt;br/&gt;
    &amp;gt;= on first 2 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0 1&lt;br/&gt;
                                stop position:&lt;br/&gt;
    &amp;gt;= on first 2 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0 1&lt;br/&gt;
                                qualifiers:&lt;br/&gt;
None&lt;br/&gt;
                                optimizer estimated row count:            0.22&lt;br/&gt;
                                optimizer estimated cost:           11.17&lt;/p&gt;


&lt;p&gt;                Right result set:&lt;br/&gt;
                    Index Row to Base Row ResultSet for FILES:&lt;br/&gt;
                    Number of opens = 4&lt;br/&gt;
                    Rows seen = 16&lt;br/&gt;
                    Columns accessed from heap = &lt;/p&gt;
{0, 2}&lt;br/&gt;
                        constructor time (milliseconds) = 0&lt;br/&gt;
                        open time (milliseconds) = 0&lt;br/&gt;
                        next time (milliseconds) = 0&lt;br/&gt;
                        close time (milliseconds) = 0&lt;br/&gt;
                        optimizer estimated row count:            0.20&lt;br/&gt;
                        optimizer estimated cost:            7.72&lt;br/&gt;
&lt;br/&gt;
                        Index Scan ResultSet for FILES using constraint SQL090803110643012 at read committed isolation level using share row locking c&lt;br/&gt;
hosen by the optimizer&lt;br/&gt;
                        Number of opens = 4&lt;br/&gt;
                        Rows seen = 16&lt;br/&gt;
                        Rows filtered = 0&lt;br/&gt;
                        Fetch Size = 1&lt;br/&gt;
                            constructor time (milliseconds) = 0&lt;br/&gt;
                            open time (milliseconds) = 0&lt;br/&gt;
                            next time (milliseconds) = 0&lt;br/&gt;
                            close time (milliseconds) = 0&lt;br/&gt;
                            next time in milliseconds/row = 0&lt;br/&gt;
&lt;br/&gt;
                        scan information:&lt;br/&gt;
                            Bit set of columns fetched={0, 2}
&lt;p&gt;                            Number of columns fetched=2&lt;br/&gt;
                            Number of deleted rows visited=0&lt;br/&gt;
                            Number of pages visited=4&lt;br/&gt;
                            Number of rows qualified=16&lt;br/&gt;
                            Number of rows visited=16&lt;br/&gt;
                            Scan type=btree&lt;br/&gt;
                            Tree height=1&lt;br/&gt;
                            start position:&lt;br/&gt;
    &amp;gt;= on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                            stop position:&lt;br/&gt;
    &amp;gt; on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                            qualifiers:&lt;br/&gt;
Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; Id: 0&lt;br/&gt;
Operator: =&lt;br/&gt;
Ordered nulls: false&lt;br/&gt;
Unknown return value: false&lt;br/&gt;
Negate comparison result: false&lt;/p&gt;

&lt;p&gt;                            optimizer estimated row count:            0.20&lt;br/&gt;
                            optimizer estimated cost:            7.72&lt;br/&gt;
            Right result set:&lt;br/&gt;
                Index Scan ResultSet for FILECHANGES using constraint SQL090803110644463 at read committed isolation level using instantaneous share r&lt;br/&gt;
ow locking chosen by the optimizer&lt;br/&gt;
                Number of opens = 16&lt;br/&gt;
                Rows seen = 6&lt;br/&gt;
                Rows filtered = 0&lt;br/&gt;
                Fetch Size = 16&lt;br/&gt;
                    constructor time (milliseconds) = 0&lt;br/&gt;
                    open time (milliseconds) = 0&lt;br/&gt;
                    next time (milliseconds) = 0&lt;br/&gt;
                    close time (milliseconds) = 0&lt;br/&gt;
                    next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                scan information:&lt;br/&gt;
                    Bit set of columns fetched=&lt;/p&gt;
{0, 1}&lt;br/&gt;
                    Number of columns fetched=2&lt;br/&gt;
                    Number of deleted rows visited=0&lt;br/&gt;
                    Number of pages visited=16&lt;br/&gt;
                    Number of rows qualified=6&lt;br/&gt;
                    Number of rows visited=36&lt;br/&gt;
                    Scan type=btree&lt;br/&gt;
                    Tree height=1&lt;br/&gt;
                    start position:&lt;br/&gt;
    &amp;gt;= on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                    stop position:&lt;br/&gt;
    &amp;gt; on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                    qualifiers:&lt;br/&gt;
Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; Id: 0&lt;br/&gt;
Operator: =&lt;br/&gt;
Ordered nulls: false&lt;br/&gt;
Unknown return value: false&lt;br/&gt;
Negate comparison result: false&lt;br/&gt;
&lt;br/&gt;
                    optimizer estimated row count:            0.02&lt;br/&gt;
                    optimizer estimated cost:            0.70&lt;br/&gt;
        Right result set:&lt;br/&gt;
            Index Row to Base Row ResultSet for AUTHORS:&lt;br/&gt;
            Number of opens = 6&lt;br/&gt;
            Rows seen = 6&lt;br/&gt;
            Columns accessed from heap = {0, 1}
&lt;p&gt;                constructor time (milliseconds) = 0&lt;br/&gt;
                open time (milliseconds) = 0&lt;br/&gt;
                next time (milliseconds) = 0&lt;br/&gt;
                close time (milliseconds) = 0&lt;br/&gt;
                optimizer estimated row count:            0.01&lt;br/&gt;
                optimizer estimated cost:            1.87&lt;/p&gt;

&lt;p&gt;                Index Scan ResultSet for AUTHORS using constraint SQL090803110643392 at read committed isolation level using share row locking chosen&lt;br/&gt;
by the optimizer&lt;br/&gt;
                Number of opens = 6&lt;br/&gt;
                Rows seen = 6&lt;br/&gt;
                Rows filtered = 0&lt;br/&gt;
                Fetch Size = 1&lt;br/&gt;
                    constructor time (milliseconds) = 0&lt;br/&gt;
                    open time (milliseconds) = 0&lt;br/&gt;
                    next time (milliseconds) = 0&lt;br/&gt;
                    close time (milliseconds) = 0&lt;br/&gt;
                    next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                scan information:&lt;br/&gt;
                    Bit set of columns fetched=&lt;/p&gt;
{0, 2}
&lt;p&gt;                    Number of columns fetched=2&lt;br/&gt;
                    Number of deleted rows visited=0&lt;br/&gt;
                    Number of pages visited=6&lt;br/&gt;
                    Number of rows qualified=6&lt;br/&gt;
                    Number of rows visited=6&lt;br/&gt;
                    Scan type=btree&lt;br/&gt;
                    Tree height=1&lt;br/&gt;
                    start position:&lt;br/&gt;
    &amp;gt;= on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                    stop position:&lt;br/&gt;
    &amp;gt; on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                    qualifiers:&lt;br/&gt;
Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; Id: 0&lt;br/&gt;
Operator: =&lt;br/&gt;
Ordered nulls: false&lt;br/&gt;
Unknown return value: false&lt;br/&gt;
Negate comparison result: false&lt;/p&gt;

&lt;p&gt;                    optimizer estimated row count:            0.01&lt;br/&gt;
                    optimizer estimated cost:            1.87&lt;/p&gt;

&lt;p&gt;    Right result set:&lt;br/&gt;
        Project-Restrict ResultSet (17):&lt;br/&gt;
        Number of opens = 6&lt;br/&gt;
        Rows seen = 6&lt;br/&gt;
        Rows filtered = 0&lt;br/&gt;
        restriction = true&lt;br/&gt;
        projection = true&lt;br/&gt;
            constructor time (milliseconds) = 0&lt;br/&gt;
            open time (milliseconds) = 0&lt;br/&gt;
            next time (milliseconds) = 0&lt;br/&gt;
            close time (milliseconds) = 0&lt;br/&gt;
            restriction time (milliseconds) = 0&lt;br/&gt;
            projection time (milliseconds) = 0&lt;br/&gt;
            optimizer estimated row count:            0.01&lt;br/&gt;
            optimizer estimated cost:            0.62&lt;/p&gt;

&lt;p&gt;        Source result set:&lt;br/&gt;
            Index Row to Base Row ResultSet for CHANGESETS:&lt;br/&gt;
            Number of opens = 6&lt;br/&gt;
            Rows seen = 6&lt;br/&gt;
            Columns accessed from heap = &lt;/p&gt;
{1, 3}
&lt;p&gt;                constructor time (milliseconds) = 0&lt;br/&gt;
                open time (milliseconds) = 0&lt;br/&gt;
                next time (milliseconds) = 0&lt;br/&gt;
                close time (milliseconds) = 0&lt;br/&gt;
                optimizer estimated row count:            0.01&lt;br/&gt;
                optimizer estimated cost:            0.62&lt;/p&gt;

&lt;p&gt;                Index Scan ResultSet for CHANGESETS using constraint SQL090803110643850 at read committed isolation level using share row locking chos&lt;br/&gt;
en by the optimizer&lt;br/&gt;
                Number of opens = 6&lt;br/&gt;
                Rows seen = 6&lt;br/&gt;
                Rows filtered = 0&lt;br/&gt;
                Fetch Size = 1&lt;br/&gt;
                    constructor time (milliseconds) = 0&lt;br/&gt;
                    open time (milliseconds) = 0&lt;br/&gt;
                    next time (milliseconds) = 0&lt;br/&gt;
                    close time (milliseconds) = 0&lt;br/&gt;
                    next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                scan information:&lt;br/&gt;
                    Bit set of columns fetched=All&lt;br/&gt;
                    Number of columns fetched=2&lt;br/&gt;
                    Number of deleted rows visited=0&lt;br/&gt;
                    Number of pages visited=6&lt;br/&gt;
                    Number of rows qualified=6&lt;br/&gt;
                    Number of rows visited=6&lt;br/&gt;
                    Scan type=btree&lt;br/&gt;
                    Tree height=1&lt;br/&gt;
                    start position:&lt;br/&gt;
    &amp;gt;= on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                    stop position:&lt;br/&gt;
    &amp;gt; on first 1 column(s).&lt;br/&gt;
    Ordered null semantics on the following columns:&lt;br/&gt;
0&lt;br/&gt;
                    qualifiers:&lt;br/&gt;
None&lt;br/&gt;
                    optimizer estimated row count:            0.01&lt;br/&gt;
                    optimizer estimated cost:            0.62&lt;/p&gt;</comment>
                            <comment id="12738483" author="mamtas" created="Mon, 3 Aug 2009 19:31:22 +0100"  >&lt;p&gt;I will start looking at this bug. It will be great if the query can be made simpler and/or use optimizer overrides to make it always break so the debugger does not go through many iterations through the optimizer. I will post more info as I am progress.&lt;/p&gt;</comment>
                            <comment id="12738536" author="mikem" created="Mon, 3 Aug 2009 20:51:27 +0100"  >&lt;p&gt;I added names to all the constraints/primary keys to the original repro.sql script to make it easier to understand what is going on when looking at query plans.&lt;/p&gt;</comment>
                            <comment id="12738541" author="mikem" created="Mon, 3 Aug 2009 20:55:07 +0100"  >&lt;p&gt;Here is query plan for bad sort result as generated by repro2.sql&lt;/p&gt;</comment>
                            <comment id="12738591" author="mamtas" created="Mon, 3 Aug 2009 22:12:15 +0100"  >&lt;p&gt;Wanted to share that if the same query is run with the optimizer ovreride of join order fixed, the query does not give incorrect results. The query plan at this time is as follows&lt;br/&gt;
Statement Name:&lt;br/&gt;
        null&lt;br/&gt;
Statement Text:&lt;br/&gt;
        SELECT CS.ID&lt;br/&gt;
FROM  --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
    CHANGESETS CS, FILECHANGES FC, REPOSITORIES R, FILES F, AUTHORS A&lt;br/&gt;
WHERE&lt;br/&gt;
    R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND&lt;br/&gt;
    F.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    A.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    CS.REPOSITORY = R.ID                                            AND&lt;br/&gt;
    CS.ID         = FC.CHANGESET                                    AND&lt;br/&gt;
    F.ID          = FC.FILE                                         AND&lt;br/&gt;
    A.ID          = CS.AUTHOR                                       AND&lt;br/&gt;
    EXISTS (&lt;br/&gt;
        SELECT 1&lt;br/&gt;
        FROM FILES F2&lt;br/&gt;
        WHERE&lt;br/&gt;
            F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND&lt;br/&gt;
            F2.PATH LIKE &apos;/%&apos; ESCAPE &apos;#&apos;)&lt;br/&gt;
ORDER BY CS.ID DESC&lt;br/&gt;
Parse Time: 0&lt;br/&gt;
Bind Time: 0&lt;br/&gt;
Optimize Time: 0&lt;br/&gt;
Generate Time: 0&lt;br/&gt;
Compile Time: 0&lt;br/&gt;
Execute Time: 0&lt;br/&gt;
Begin Compilation Timestamp : null&lt;br/&gt;
End Compilation Timestamp : null&lt;br/&gt;
Begin Execution Timestamp : null&lt;br/&gt;
End Execution Timestamp : null&lt;br/&gt;
Statement Execution Plan Text:&lt;br/&gt;
Sort ResultSet:&lt;br/&gt;
Number of opens = 1&lt;br/&gt;
Rows input = 6&lt;br/&gt;
Rows returned = 6&lt;br/&gt;
Eliminate duplicates = false&lt;br/&gt;
In sorted order = false&lt;br/&gt;
Sort information:&lt;br/&gt;
        Number of rows input=6&lt;br/&gt;
        Number of rows output=6&lt;br/&gt;
        Sort type=internal&lt;br/&gt;
        constructor time (milliseconds) = 0&lt;br/&gt;
        open time (milliseconds) = 0&lt;br/&gt;
        next time (milliseconds) = 0&lt;br/&gt;
        close time (milliseconds) = 0&lt;br/&gt;
        optimizer estimated row count:            0.08&lt;br/&gt;
        optimizer estimated cost:          553.68&lt;/p&gt;

&lt;p&gt;Source result set:&lt;br/&gt;
        Project-Restrict ResultSet (20):&lt;br/&gt;
        Number of opens = 1&lt;br/&gt;
        Rows seen = 6&lt;br/&gt;
        Rows filtered = 0&lt;br/&gt;
        restriction = false&lt;br/&gt;
        projection = true&lt;br/&gt;
                constructor time (milliseconds) = 0&lt;br/&gt;
                open time (milliseconds) = 0&lt;br/&gt;
                next time (milliseconds) = 0&lt;br/&gt;
                close time (milliseconds) = 0&lt;br/&gt;
                restriction time (milliseconds) = 0&lt;br/&gt;
                projection time (milliseconds) = 0&lt;br/&gt;
                optimizer estimated row count:            0.08&lt;br/&gt;
                optimizer estimated cost:          553.68&lt;/p&gt;

&lt;p&gt;        Source result set:&lt;br/&gt;
                User supplied optimizer overrides for join are &lt;/p&gt;
{ joinOrder=FIXED }&lt;br/&gt;
                Nested Loop Join ResultSet:&lt;br/&gt;
                Number of opens = 1&lt;br/&gt;
                Rows seen from the left = 6&lt;br/&gt;
                Rows seen from the right = 6&lt;br/&gt;
                Rows filtered = 0&lt;br/&gt;
                Rows returned = 6&lt;br/&gt;
                        constructor time (milliseconds) = 0&lt;br/&gt;
                        open time (milliseconds) = 0&lt;br/&gt;
                        next time (milliseconds) = 0&lt;br/&gt;
                        close time (milliseconds) = 0&lt;br/&gt;
                        optimizer estimated row count:            0.08&lt;br/&gt;
                        optimizer estimated cost:          553.68&lt;br/&gt;
&lt;br/&gt;
                Left result set:&lt;br/&gt;
                        User supplied optimizer overrides for join are { joinOrder=FIXED }
&lt;p&gt;                        Nested Loop Join ResultSet:&lt;br/&gt;
                        Number of opens = 1&lt;br/&gt;
                        Rows seen from the left = 6&lt;br/&gt;
                        Rows seen from the right = 6&lt;br/&gt;
                        Rows filtered = 0&lt;br/&gt;
                        Rows returned = 6&lt;br/&gt;
                                constructor time (milliseconds) = 0&lt;br/&gt;
                                open time (milliseconds) = 0&lt;br/&gt;
                                next time (milliseconds) = 0&lt;br/&gt;
                                close time (milliseconds) = 0&lt;br/&gt;
                                optimizer estimated row count:            0.36&lt;br/&gt;
                                optimizer estimated cost:          546.94&lt;/p&gt;

&lt;p&gt;                        Left result set:&lt;br/&gt;
                                User supplied optimizer overrides for join are &lt;/p&gt;
{ joinOrder=FIXED }&lt;br/&gt;
                                Nested Loop Exists Join ResultSet:&lt;br/&gt;
                                Number of opens = 1&lt;br/&gt;
                                Rows seen from the left = 6&lt;br/&gt;
                                Rows seen from the right = 6&lt;br/&gt;
                                Rows filtered = 0&lt;br/&gt;
                                Rows returned = 6&lt;br/&gt;
                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                        open time (milliseconds) = 0&lt;br/&gt;
                                        next time (milliseconds) = 0&lt;br/&gt;
                                        close time (milliseconds) = 0&lt;br/&gt;
                                        optimizer estimated row count:  0.60&lt;br/&gt;
                                        optimizer estimated cost:          475.57&lt;br/&gt;
&lt;br/&gt;
                                Left result set:&lt;br/&gt;
                                        User supplied optimizer overrides for join are { joinOrder=FIXED }
&lt;p&gt;                                        Nested Loop Exists Join ResultSet:&lt;br/&gt;
                                        Number of opens = 1&lt;br/&gt;
                                        Rows seen from the left = 6&lt;br/&gt;
                                        Rows seen from the right = 6&lt;br/&gt;
                                        Rows filtered = 0&lt;br/&gt;
                                        Rows returned = 6&lt;br/&gt;
                                                constructor time (milliseconds)= 0&lt;br/&gt;
                                                open time (milliseconds) = 0&lt;br/&gt;
                                                next time (milliseconds) = 0&lt;br/&gt;
                                                close time (milliseconds) = 0&lt;br/&gt;
                                                optimizer estimated row count:          0.60&lt;br/&gt;
                                                optimizer estimated cost:   454.07&lt;/p&gt;

&lt;p&gt;                                        Left result set:&lt;br/&gt;
                                                User supplied optimizer overrides for join are &lt;/p&gt;
{ joinOrder=FIXED }
&lt;p&gt;                                                Hash Join ResultSet:&lt;br/&gt;
                                                Number of opens = 1&lt;br/&gt;
                                                Rows seen from the left = 3&lt;br/&gt;
                                                Rows seen from the right = 6&lt;br/&gt;
                                                Rows filtered = 0&lt;br/&gt;
                                                Rows returned = 6&lt;br/&gt;
                                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                                        open time (milliseconds) = 0&lt;br/&gt;
                                                        next time (milliseconds) = 0&lt;br/&gt;
                                                        close time (milliseconds) = 0&lt;br/&gt;
                                                        optimizer estimated rowcount:            0.60&lt;br/&gt;
                                                        optimizer estimated cost:          372.68&lt;/p&gt;

&lt;p&gt;                                                Left result set:&lt;br/&gt;
                                                        Table Scan ResultSet for CHANGESETS at read committed isolation level using instantaneous share row locking chosen by the optimizer&lt;br/&gt;
                                                        Number of opens = 1&lt;br/&gt;
                                                        Rows seen = 3&lt;br/&gt;
                                                        Rows filtered = 0&lt;br/&gt;
                                                        Fetch Size = 16&lt;br/&gt;
                                                                constructor time (milliseconds) = 0&lt;br/&gt;
                                                                open time (milliseconds) = 0&lt;br/&gt;
                                                                next time (milliseconds) = 0&lt;br/&gt;
                                                                close time (milliseconds) = 0&lt;br/&gt;
                                                                next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                                                        scan information:&lt;br/&gt;
                                                                Bit set of columns fetched=&lt;/p&gt;
{0, 1, 3}
&lt;p&gt;                                                                Number of columns fetched=3&lt;br/&gt;
                                                                Number of pagesvisited=1&lt;br/&gt;
                                                                Number of rows qualified=3&lt;br/&gt;
                                                                Number of rows visited=3&lt;br/&gt;
                                                                Scan type=heap&lt;br/&gt;
                                                                start position:&lt;br/&gt;
null                                                            stop position:&lt;br/&gt;
null                                                            qualifiers:&lt;br/&gt;
None&lt;br/&gt;
                                                                optimizer estimated row count:            8.00&lt;br/&gt;
                                                                optimizer estimated cost:          351.84&lt;/p&gt;

&lt;p&gt;                                                Right result set:&lt;br/&gt;
                                                        Hash Scan ResultSet for FILECHANGES using constraint FILECHANGES_FILE_CHANGESET at read committed isolation level using instantaneous share row locking:&lt;br/&gt;
                                                        Number of opens = 3&lt;br/&gt;
                                                        Hash table size = 3&lt;br/&gt;
                                                        Hash key is column number 1&lt;br/&gt;
                                                        Rows seen = 6&lt;br/&gt;
                                                        Rows filtered = 0&lt;br/&gt;
                                                                constructor time (milliseconds) = 0&lt;br/&gt;
                                                                open time (milliseconds) = 0&lt;br/&gt;
                                                                next time (milliseconds) = 0&lt;br/&gt;
                                                                close time (milliseconds) = 0&lt;br/&gt;
                                                                next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                                                        scan information:&lt;br/&gt;
                                                                Bit set of columns fetched=&lt;/p&gt;
{0, 1}&lt;br/&gt;
                                                                Number of columns fetched=2&lt;br/&gt;
                                                                Number of deleted rows visited=0&lt;br/&gt;
                                                                Number of pagesvisited=1&lt;br/&gt;
                                                                Number of rows qualified=6&lt;br/&gt;
                                                                Number of rows visited=6&lt;br/&gt;
                                                                Scan type=btree&lt;br/&gt;
                                                                Tree height=1&lt;br/&gt;
                                                                start position:&lt;br/&gt;
&lt;br/&gt;
        None&lt;br/&gt;
                                                                stop position:&lt;br/&gt;
        None&lt;br/&gt;
                                                                scan qualifiers:&lt;br/&gt;
&lt;br/&gt;
None&lt;br/&gt;
                                                                next qualifiers:&lt;br/&gt;
&lt;br/&gt;
Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; Id: 1&lt;br/&gt;
Operator: =&lt;br/&gt;
Ordered nulls: false&lt;br/&gt;
Unknown return value: false&lt;br/&gt;
Negate comparison result: false&lt;br/&gt;
&lt;br/&gt;
                                                                optimizer estimated row count:            0.60&lt;br/&gt;
                                                                optimizer estimated cost:           20.84&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
                                        Right result set:&lt;br/&gt;
                                                Project-Restrict ResultSet (10):&lt;br/&gt;
&lt;br/&gt;
                                                Number of opens = 6&lt;br/&gt;
                                                Rows seen = 6&lt;br/&gt;
                                                Rows filtered = 0&lt;br/&gt;
                                                restriction = true&lt;br/&gt;
                                                projection = true&lt;br/&gt;
                                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                                        open time (milliseconds) = 0&lt;br/&gt;
                                                        next time (milliseconds) = 0&lt;br/&gt;
                                                        close time (milliseconds) = 0&lt;br/&gt;
                                                        restriction time (milliseconds) = 0&lt;br/&gt;
                                                        projection time (milliseconds) = 0&lt;br/&gt;
                                                        optimizer estimated rowcount:            0.60&lt;br/&gt;
                                                        optimizer estimated cost:           81.39&lt;br/&gt;
&lt;br/&gt;
                                                Source result set:&lt;br/&gt;
                                                        Index Row to Base Row ResultSet for REPOSITORIES:&lt;br/&gt;
                                                        Number of opens = 6&lt;br/&gt;
                                                        Rows seen = 6&lt;br/&gt;
                                                        Columns accessed from heap = {1}&lt;br/&gt;
                                                                constructor time (milliseconds) = 0&lt;br/&gt;
                                                                open time (milliseconds) = 0&lt;br/&gt;
                                                                next time (milliseconds) = 0&lt;br/&gt;
                                                                close time (milliseconds) = 0&lt;br/&gt;
                                                                optimizer estimated row count:            0.60&lt;br/&gt;
                                                                optimizer estimated cost:           81.39&lt;br/&gt;
&lt;br/&gt;
                                                                Index Scan ResultSet for REPOSITORIES using constraint REPOSITORIES_PRIMARY_ID at read committed isolation level using share row locking chosen by the optimizer&lt;br/&gt;
                                                                Number of opens= 6&lt;br/&gt;
                                                                Rows seen = 6&lt;br/&gt;
                                                                Rows filtered =0&lt;br/&gt;
                                                                Fetch Size = 1&lt;br/&gt;
                                                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                                                        open time (milliseconds) = 0&lt;br/&gt;
                                                                        next time (milliseconds) = 0&lt;br/&gt;
                                                                        close time (milliseconds) = 0&lt;br/&gt;
                                                                        next time in milliseconds/row = 0&lt;br/&gt;
&lt;br/&gt;
                                                                scan information:&lt;br/&gt;
                                                                        Bit set of columns fetched=All&lt;br/&gt;
                                                                        Number of columns fetched=2&lt;br/&gt;
                                                                        Number of deleted rows visited=0&lt;br/&gt;
                                                                        Number of pages visited=6&lt;br/&gt;
                                                                        Number of rows qualified=6&lt;br/&gt;
                                                                        Number of rows visited=6&lt;br/&gt;
                                                                        Scan type=btree&lt;br/&gt;
                                                                        Tree height=1&lt;br/&gt;
                                                                        start position:&lt;br/&gt;
        &amp;gt;= on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                                                        stop position:&lt;br/&gt;
        &amp;gt; on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                                                        qualifiers:&lt;br/&gt;
None&lt;br/&gt;
                                                                        optimizer estimated row count:            0.60&lt;br/&gt;
                                                                        optimizer estimated cost:           81.39&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
                                Right result set:&lt;br/&gt;
                                        Project-Restrict ResultSet (13):&lt;br/&gt;
                                        Number of opens = 6&lt;br/&gt;
                                        Rows seen = 6&lt;br/&gt;
                                        Rows filtered = 0&lt;br/&gt;
                                        restriction = true&lt;br/&gt;
                                        projection = true&lt;br/&gt;
                                                constructor time (milliseconds)= 0&lt;br/&gt;
                                                open time (milliseconds) = 0&lt;br/&gt;
                                                next time (milliseconds) = 0&lt;br/&gt;
                                                close time (milliseconds) = 0&lt;br/&gt;
                                                restriction time (milliseconds)= 0&lt;br/&gt;
                                                projection time (milliseconds) = 0&lt;br/&gt;
                                                optimizer estimated row count:          0.60&lt;br/&gt;
                                                optimizer estimated cost:    21.50&lt;br/&gt;
&lt;br/&gt;
                                        Source result set:&lt;br/&gt;
                                                Index Row to Base Row ResultSet for FILES:&lt;br/&gt;
                                                Number of opens = 6&lt;br/&gt;
                                                Rows seen = 6&lt;br/&gt;
                                                Columns accessed from heap = {2}&lt;br/&gt;
&lt;br/&gt;
                                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                                        open time (milliseconds) = 0&lt;br/&gt;
                                                        next time (milliseconds) = 0&lt;br/&gt;
                                                        close time (milliseconds) = 0&lt;br/&gt;
                                                        optimizer estimated rowcount:            0.60&lt;br/&gt;
                                                        optimizer estimated cost:           21.50&lt;br/&gt;
&lt;br/&gt;
                                                        Index Scan ResultSet for FILES using constraint FILES_PRIMARY_ID at read committed isolation level using share row locking chosen by the optimizer&lt;br/&gt;
                                                        Number of opens = 6&lt;br/&gt;
                                                        Rows seen = 6&lt;br/&gt;
                                                        Rows filtered = 0&lt;br/&gt;
                                                        Fetch Size = 1&lt;br/&gt;
                                                                constructor time (milliseconds) = 0&lt;br/&gt;
                                                                open time (milliseconds) = 0&lt;br/&gt;
                                                                next time (milliseconds) = 0&lt;br/&gt;
                                                                close time (milliseconds) = 0&lt;br/&gt;
                                                                next time in milliseconds/row = 0&lt;br/&gt;
&lt;br/&gt;
                                                        scan information:&lt;br/&gt;
                                                                Bit set of columns fetched=All&lt;br/&gt;
                                                                Number of columns fetched=2&lt;br/&gt;
                                                                Number of deleted rows visited=0&lt;br/&gt;
                                                                Number of pages visited=6&lt;br/&gt;
                                                                Number of rows qualified=6&lt;br/&gt;
                                                                Number of rows visited=6&lt;br/&gt;
                                                                Scan type=btree&lt;br/&gt;
                                                                Tree height=1&lt;br/&gt;
                                                                start position:&lt;br/&gt;
&lt;br/&gt;
        &amp;gt;= on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                                                stop position:        &amp;gt; on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                                                qualifiers:None&lt;br/&gt;
                                                                optimizer estimated row count:            0.60&lt;br/&gt;
                                                                optimizer estimated cost:           21.50&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
                        Right result set:&lt;br/&gt;
                                Project-Restrict ResultSet (16):&lt;br/&gt;
                                Number of opens = 6&lt;br/&gt;
                                Rows seen = 6&lt;br/&gt;
                                Rows filtered = 0&lt;br/&gt;
                                restriction = true&lt;br/&gt;
                                projection = true&lt;br/&gt;
                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                        open time (milliseconds) = 0&lt;br/&gt;
                                        next time (milliseconds) = 0&lt;br/&gt;
                                        close time (milliseconds) = 0&lt;br/&gt;
                                        restriction time (milliseconds) = 0&lt;br/&gt;
                                        projection time (milliseconds) = 0&lt;br/&gt;
                                        optimizer estimated row count:  0.36&lt;br/&gt;
                                        optimizer estimated cost:           71.37&lt;br/&gt;
&lt;br/&gt;
                                Source result set:&lt;br/&gt;
                                        Index Row to Base Row ResultSet for AUTHORS:&lt;br/&gt;
                                        Number of opens = 6&lt;br/&gt;
                                        Rows seen = 6&lt;br/&gt;
                                        Columns accessed from heap = {0, 1}
&lt;p&gt;                                                constructor time (milliseconds)= 0&lt;br/&gt;
                                                open time (milliseconds) = 0&lt;br/&gt;
                                                next time (milliseconds) = 0&lt;br/&gt;
                                                close time (milliseconds) = 0&lt;br/&gt;
                                                optimizer estimated row count:          0.36&lt;br/&gt;
                                                optimizer estimated cost:    71.37&lt;/p&gt;

&lt;p&gt;                                                Index Scan ResultSet for AUTHORS using constraint AUTHORS_REPOSITORY_NAME at read committed isolation level using instantaneous share row locking chosen by the optimizer&lt;br/&gt;
                                                Number of opens = 6&lt;br/&gt;
                                                Rows seen = 6&lt;br/&gt;
                                                Rows filtered = 0&lt;br/&gt;
                                                Fetch Size = 16&lt;br/&gt;
                                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                                        open time (milliseconds) = 0&lt;br/&gt;
                                                        next time (milliseconds) = 0&lt;br/&gt;
                                                        close time (milliseconds) = 0&lt;br/&gt;
                                                        next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                                                scan information:&lt;br/&gt;
                                                        Bit set of columns fetched=&lt;/p&gt;
{0, 2}
&lt;p&gt;                                                        Number of columns fetched=2&lt;br/&gt;
                                                        Number of deleted rows visited=0&lt;br/&gt;
                                                        Number of pages visited=6&lt;br/&gt;
                                                        Number of rows qualified=6&lt;br/&gt;
                                                        Number of rows visited=6&lt;/p&gt;

&lt;p&gt;                                                        Scan type=btree&lt;br/&gt;
                                                        Tree height=1&lt;br/&gt;
                                                        start position:&lt;br/&gt;
        &amp;gt;= on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                                        stop position:&lt;br/&gt;
        &amp;gt; on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                                        qualifiers:&lt;br/&gt;
Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; Id: 0&lt;br/&gt;
Operator: =&lt;br/&gt;
Ordered nulls: false&lt;br/&gt;
Unknown return value: false&lt;br/&gt;
Negate comparison result: false&lt;/p&gt;

&lt;p&gt;                                                        optimizer estimated rowcount:            0.36&lt;br/&gt;
                                                        optimizer estimated cost:           71.37&lt;/p&gt;



&lt;p&gt;                Right result set:&lt;br/&gt;
                        Project-Restrict ResultSet (19):&lt;br/&gt;
                        Number of opens = 6&lt;br/&gt;
                        Rows seen = 24&lt;br/&gt;
                        Rows filtered = 18&lt;br/&gt;
                        restriction = true&lt;br/&gt;
                        projection = true&lt;br/&gt;
                                constructor time (milliseconds) = 0&lt;br/&gt;
                                open time (milliseconds) = 0&lt;br/&gt;
                                next time (milliseconds) = 0&lt;br/&gt;
                                close time (milliseconds) = 0&lt;br/&gt;
                                restriction time (milliseconds) = 0&lt;br/&gt;
                                projection time (milliseconds) = 0&lt;br/&gt;
                                optimizer estimated row count:            0.08&lt;br/&gt;
                                optimizer estimated cost:            6.73&lt;/p&gt;

&lt;p&gt;                        Source result set:&lt;br/&gt;
                                Index Row to Base Row ResultSet for FILES:&lt;br/&gt;
                                Number of opens = 6&lt;br/&gt;
                                Rows seen = 24&lt;br/&gt;
                                Columns accessed from heap = &lt;/p&gt;
{0, 1, 2}
&lt;p&gt;                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                        open time (milliseconds) = 0&lt;br/&gt;
                                        next time (milliseconds) = 0&lt;br/&gt;
                                        close time (milliseconds) = 0&lt;br/&gt;
                                        optimizer estimated row count:  0.08&lt;br/&gt;
                                        optimizer estimated cost:            6.73&lt;/p&gt;

&lt;p&gt;                                        Index Scan ResultSet for FILES using constraint FILES_REPOSITORY_PATH at read committed isolation level using instantaneous share row locking chosen by the optimizer&lt;br/&gt;
                                        Number of opens = 6&lt;br/&gt;
                                        Rows seen = 24&lt;br/&gt;
                                        Rows filtered = 0&lt;br/&gt;
                                        Fetch Size = 16&lt;br/&gt;
                                                constructor time (milliseconds)= 0&lt;br/&gt;
                                                open time (milliseconds) = 0&lt;br/&gt;
                                                next time (milliseconds) = 0&lt;br/&gt;
                                                close time (milliseconds) = 0&lt;br/&gt;
                                                next time in milliseconds/row =0&lt;/p&gt;

&lt;p&gt;                                        scan information:&lt;br/&gt;
                                                Bit set of columns fetched=All&lt;br/&gt;
                                                Number of columns fetched=3&lt;br/&gt;
                                                Number of deleted rows visited=0&lt;/p&gt;

&lt;p&gt;                                                Number of pages visited=6&lt;br/&gt;
                                                Number of rows qualified=24&lt;br/&gt;
                                                Number of rows visited=24&lt;br/&gt;
                                                Scan type=btree&lt;br/&gt;
                                                Tree height=1&lt;br/&gt;
                                                start position:&lt;br/&gt;
        &amp;gt;= on first 2 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0 1&lt;br/&gt;
                                                stop position:&lt;br/&gt;
        &amp;gt;= on first 2 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:&lt;br/&gt;
0 1&lt;br/&gt;
                                                qualifiers:&lt;br/&gt;
Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; Id: 0&lt;br/&gt;
Operator: =&lt;br/&gt;
Ordered nulls: false&lt;br/&gt;
Unknown return value: false&lt;br/&gt;
Negate comparison result: false&lt;/p&gt;

&lt;p&gt;                                                optimizer estimated row count: 0.08&lt;br/&gt;
                                                optimizer estimated cost: 6.73&lt;/p&gt;</comment>
                            <comment id="12738603" author="mamtas" created="Mon, 3 Aug 2009 22:21:13 +0100"  >&lt;p&gt;BTW, just an FYI, that I am doing my research on this bug in 10.5 codeline.&lt;/p&gt;</comment>
                            <comment id="12738608" author="kmarsden" created="Mon, 3 Aug 2009 22:25:32 +0100"  >&lt;p&gt;Fix affect versions. updated wrong issue.&lt;/p&gt;</comment>
                            <comment id="12738631" author="mamtas" created="Mon, 3 Aug 2009 23:03:04 +0100"  >&lt;p&gt;The following updated query is still pretty involved but it consistently reproduces the wrong results and will go through very limited iteration of optimizer code because of all the optimizer overrides. Ideal will be if the following query can be made simpler with fewer number of tables.&lt;br/&gt;
SELECT CS.ID&lt;br/&gt;
FROM  --DERBY-PROPERTIES joinOrder=FIXED &lt;br/&gt;
    REPOSITORIES R &amp;#8211; DERBY-PROPERTIES constraint=REPOSITORIES_PATH &lt;br/&gt;
, FILES F &amp;#8211; DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
, FILECHANGES FC &amp;#8211; DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
, AUTHORS A &amp;#8211; DERBY-PROPERTIES constraint=AUTHORS_REPOSITORY_NAME&lt;br/&gt;
, CHANGESETS CS &amp;#8211; DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID &lt;br/&gt;
WHERE&lt;br/&gt;
    R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND &lt;br/&gt;
    F.REPOSITORY  = R.ID                                            AND &lt;br/&gt;
    A.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    CS.REPOSITORY = R.ID                                            AND &lt;br/&gt;
    CS.ID         = FC.CHANGESET                                    AND &lt;br/&gt;
    F.ID          = FC.FILE                                         AND&lt;br/&gt;
    A.ID          = CS.AUTHOR                                       AND&lt;br/&gt;
    EXISTS (&lt;br/&gt;
        SELECT 1&lt;br/&gt;
        FROM FILES F2&lt;br/&gt;
        WHERE&lt;br/&gt;
            F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND&lt;br/&gt;
            F2.PATH LIKE &apos;/%&apos; ESCAPE &apos;#&apos;)&lt;br/&gt;
ORDER BY CS.ID DESC;&lt;/p&gt;</comment>
                            <comment id="12738633" author="mikem" created="Mon, 3 Aug 2009 23:07:06 +0100"  >&lt;p&gt;i have been looking at the query plan and have more questions than answers.  &lt;/p&gt;

&lt;p&gt;One strange thing is that the bad query plan does not use the descending&lt;br/&gt;
index at all.  With &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; the usual problem was that an index that&lt;br/&gt;
would naturally satisfy a sort avoidance plan was used but in some part of the &lt;br/&gt;
join order which actually didn&apos;t result in the row ordering being correct.  &lt;/p&gt;

&lt;p&gt;The plan looks like it does some sort of query transformation, maybe flatten but not sure if that is right term.  The EXISTS subquery I think is making it hard to &lt;br/&gt;
control the plan with hints, but am not sure.  If anyone can figure out a rewrite that reproduces the bug without the subquery that would help also.&lt;/p&gt;

&lt;p&gt;I tried the following query thinking just the existence of the subquery might be&lt;br/&gt;
enough, but it got correct ordered results:&lt;br/&gt;
SELECT CS.ID&lt;br/&gt;
FROM&lt;br/&gt;
    CHANGESETS CS, FILECHANGES FC, REPOSITORIES R, FILES F, AUTHORS A&lt;br/&gt;
WHERE&lt;br/&gt;
    R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND&lt;br/&gt;
    F.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    A.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    CS.REPOSITORY = R.ID                                            AND&lt;br/&gt;
    CS.ID         = FC.CHANGESET                                    AND&lt;br/&gt;
    F.ID          = FC.FILE                                         AND&lt;br/&gt;
    A.ID          = CS.AUTHOR                                       AND&lt;br/&gt;
    EXISTS (&lt;br/&gt;
        SELECT 1&lt;br/&gt;
        FROM FILES F2&lt;br/&gt;
        WHERE&lt;br/&gt;
            F2.REPOSITORY = 1)&lt;br/&gt;
ORDER BY CS.ID DESC;&lt;/p&gt;</comment>
                            <comment id="12738684" author="mikem" created="Tue, 4 Aug 2009 00:38:58 +0100"  >&lt;p&gt;Here is a fixed order join query that repro&apos;s on trunk but does not repro on 10.5 before the 3926&lt;br/&gt;
changes.  I  shuffled the order of the tables in the from list to match order in the attached &lt;br/&gt;
plan where the bug reproduced - nothing else is changed.:&lt;br/&gt;
SELECT CS.ID&lt;br/&gt;
FROM  --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
    REPOSITORIES R, FILES F, FILECHANGES FC, AUTHORS A, CHANGESETS CS&lt;br/&gt;
WHERE&lt;br/&gt;
    R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND&lt;br/&gt;
    F.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    A.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    CS.REPOSITORY = R.ID                                            AND&lt;br/&gt;
    CS.ID         = FC.CHANGESET                                    AND&lt;br/&gt;
    F.ID          = FC.FILE                                         AND&lt;br/&gt;
    A.ID          = CS.AUTHOR                                       AND&lt;br/&gt;
    EXISTS (&lt;br/&gt;
        SELECT 1&lt;br/&gt;
        FROM FILES F2&lt;br/&gt;
        WHERE&lt;br/&gt;
            F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND&lt;br/&gt;
            F2.PATH LIKE &apos;/%&apos; ESCAPE &apos;#&apos;)&lt;br/&gt;
ORDER BY CS.ID DESC;&lt;/p&gt;</comment>
                            <comment id="12738690" author="mikem" created="Tue, 4 Aug 2009 01:00:05 +0100"  >&lt;p&gt;This query also gets out of order rows in trunk but not in 10.5 before 3629 change.  It fixes the indexes used also:&lt;br/&gt;
SELECT CS.ID&lt;br/&gt;
FROM  --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
      REPOSITORIES R  --DERBY-PROPERTIES constraint=REPOSITORIES_PATH&lt;br/&gt;
    , FILES        F  --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    , FILECHANGES  FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
    , AUTHORS      A  --DERBY-PROPERTIES constraint=AUTHORS_REPOSITORY_NAME&lt;br/&gt;
    , CHANGESETS   CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
    R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND&lt;br/&gt;
    F.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    A.REPOSITORY  = R.ID                                            AND&lt;br/&gt;
    CS.REPOSITORY = R.ID                                            AND&lt;br/&gt;
    CS.ID         = FC.CHANGESET                                    AND&lt;br/&gt;
    F.ID          = FC.FILE                                         AND&lt;br/&gt;
    A.ID          = CS.AUTHOR                                       AND&lt;br/&gt;
    EXISTS (&lt;br/&gt;
        SELECT 1&lt;br/&gt;
        FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
        WHERE&lt;br/&gt;
            F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND&lt;br/&gt;
            F2.PATH LIKE &apos;/%&apos; ESCAPE &apos;#&apos;)&lt;br/&gt;
ORDER BY CS.ID DESC;&lt;/p&gt;</comment>
                            <comment id="12738717" author="lilywei" created="Tue, 4 Aug 2009 01:56:40 +0100"  >&lt;p&gt;This query is just an existence of a easier subquery that failed on trunk but gives correct order on svn 783167:&lt;br/&gt;
ij&amp;gt; SELECT CS.ID&lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
      REPOSITORIES R --DERBY-PROPERTIES constraint=REPOSITORIES_PATH&lt;br/&gt;
     , FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
     , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
     , AUTHORS A --DERBY-PROPERTIES constraint=AUTHORS_REPOSITORY_NAME&lt;br/&gt;
     , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
 R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND&lt;br/&gt;
 F.REPOSITORY = R.ID AND&lt;br/&gt;
 A.REPOSITORY = R.ID AND&lt;br/&gt;
 CS.REPOSITORY = R.ID AND&lt;br/&gt;
 CS.ID = FC.CHANGESET AND&lt;br/&gt;
 F.ID = FC.FILE AND&lt;br/&gt;
 A.ID = CS.AUTHOR AND&lt;br/&gt;
 EXISTS (&lt;br/&gt;
   SELECT 1&lt;br/&gt;
    FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    WHERE&lt;br/&gt;
           F2.ID = FC.FILE&lt;br/&gt;
           )&lt;br/&gt;
 ORDER BY CS.ID DESC;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
3&lt;/p&gt;

&lt;p&gt;6 rows selected&lt;/p&gt;

&lt;p&gt;Thanks, Lily&lt;/p&gt;</comment>
                            <comment id="12738785" author="lilywei" created="Tue, 4 Aug 2009 04:19:38 +0100"  >&lt;p&gt;Taking out Author table from previous query still not ordering in trunk but works 10.5 (783167)&lt;br/&gt;
ij&amp;gt; SELECT CS.ID&lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
      REPOSITORIES R --DERBY-PROPERTIES constraint=REPOSITORIES_PATH&lt;br/&gt;
     , FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
     , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
     , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
 R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND&lt;br/&gt;
 F.REPOSITORY = R.ID AND&lt;br/&gt;
 CS.REPOSITORY = R.ID AND&lt;br/&gt;
 CS.ID = FC.CHANGESET AND&lt;br/&gt;
 F.ID = FC.FILE AND&lt;br/&gt;
 EXISTS (&lt;br/&gt;
   SELECT 1&lt;br/&gt;
    FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    WHERE&lt;br/&gt;
           F2.ID = FC.FILE)&lt;br/&gt;
 ORDER BY CS.ID DESC;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
3&lt;/p&gt;

&lt;p&gt;If take out of &apos;CS.ID = FC.CHANGESET&apos; from where cause constraint, the query will perform order by on both trunk and 10.5(783167)&lt;br/&gt;
ij&amp;gt; SELECT CS.ID&lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
      REPOSITORIES R --DERBY-PROPERTIES constraint=REPOSITORIES_PATH&lt;br/&gt;
     , FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
     , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
     , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
 R.PATH = &apos;/var/tmp/source5923202038296723704opengrok/mercurial&apos; AND&lt;br/&gt;
 F.REPOSITORY = R.ID AND&lt;br/&gt;
 CS.REPOSITORY = R.ID AND&lt;br/&gt;
 F.ID = FC.FILE AND&lt;br/&gt;
 EXISTS (&lt;br/&gt;
   SELECT 1&lt;br/&gt;
    FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    WHERE&lt;br/&gt;
           F2.ID = FC.FILE)&lt;br/&gt;
 ORDER BY CS.ID DESC;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
1&lt;br/&gt;
1&lt;br/&gt;
1&lt;br/&gt;
1&lt;br/&gt;
1&lt;br/&gt;
1&lt;/p&gt;

&lt;p&gt;18 rows selected&lt;/p&gt;

&lt;p&gt;I cannot really tell what is the difference between the two path. However, the value -1 for Tree height on the first query seems odd to me. &lt;br/&gt;
The derby.log for the first query is on notorderby4331.zip and the second query is on orderby4331.zip.&lt;br/&gt;
(The below capture from derby.log on notorderby4331.zip)&lt;br/&gt;
                                                User supplied optimizer overrides on REPOSITORIES are &lt;/p&gt;
{ index=SQL090803170751640 }&lt;br/&gt;
                                                Index Scan ResultSet for REPOSITORIES using constraint REPOSITORIES_PATH at read committed isolation level using share row locking chosen by the optimizer&lt;br/&gt;
                                                Number of opens = 1&lt;br/&gt;
                                                Rows seen = 1&lt;br/&gt;
                                                Rows filtered = 0&lt;br/&gt;
                                                Fetch Size = 1&lt;br/&gt;
                                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                                        open time (milliseconds) = 0&lt;br/&gt;
                                                        next time (milliseconds) = 0&lt;br/&gt;
                                                        close time (milliseconds) = 0&lt;br/&gt;
                                                        next time in milliseconds/row = 0&lt;br/&gt;
&lt;br/&gt;
                                                scan information:&lt;br/&gt;
                                                        Bit set of columns fetched=All&lt;br/&gt;
                                                        Number of columns fetched=2&lt;br/&gt;
                                                        Number of deleted rows visited=0&lt;br/&gt;
                                                        Number of pages visited=1&lt;br/&gt;
                                                        Number of rows qualified=1&lt;br/&gt;
                                                        Number of rows visited=1&lt;br/&gt;
                                                        Scan type=btree&lt;br/&gt;
                                                        Tree height=-1               &amp;lt;&amp;lt;&amp;lt;==== -1 is an odd value&lt;br/&gt;
                                                        start position:&lt;br/&gt;
        &amp;gt;= on first 1 column(s).&lt;br/&gt;
&lt;br/&gt;
(The below capture from derby.log on orderby4331.zip)&lt;br/&gt;
                                                        User supplied optimizer overrides on REPOSITORIES are { index=SQL090803170751640 }
&lt;p&gt;                                                        Index Scan ResultSet for REPOSITORIES using constraint REPOSITORIES_PATH at read committed isolation level using share row locking chosen by the optimizer&lt;br/&gt;
                                                        Number of opens = 1&lt;br/&gt;
                                                        Rows seen = 1&lt;br/&gt;
                                                        Rows filtered = 0&lt;br/&gt;
                                                        Fetch Size = 1&lt;br/&gt;
                                                                constructor time (milliseconds) = 0&lt;br/&gt;
                                                                open time (milliseconds) = 0&lt;br/&gt;
                                                                next time (milliseconds) = 0&lt;br/&gt;
                                                                close time (milliseconds) = 0&lt;br/&gt;
                                                                next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                                                        scan information:&lt;br/&gt;
                                                                Bit set of columns fetched=All&lt;br/&gt;
                                                                Number of columns fetched=2&lt;br/&gt;
                                                                Number of deleted rows visited=0&lt;br/&gt;
                                                                Number of pages visited=1&lt;br/&gt;
                                                                Number of rows qualified=1&lt;br/&gt;
                                                                Number of rows visited=1&lt;br/&gt;
                                                                Scan type=btree&lt;br/&gt;
                                                                Tree height=1   &amp;lt;&amp;lt;&amp;lt;==== not -1 value&lt;br/&gt;
                                                                start position:&lt;br/&gt;
        &amp;gt;= on first 1 column(s).&lt;/p&gt;

&lt;p&gt;Hope this info is helpful. Thanks, Lily&lt;/p&gt;</comment>
                            <comment id="12738814" author="mamtas" created="Tue, 4 Aug 2009 05:35:03 +0100"  >&lt;p&gt;The following query also seems to give wrong results on 10.5 codeline. It has tables REPOSITORIES and AUTHORS missing compared to the original query. I will try it without the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; to see if it passes there.&lt;/p&gt;

&lt;p&gt;SELECT CS.ID&lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
    FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
    , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
 CS.ID = FC.CHANGESET AND&lt;br/&gt;
 F.ID = FC.FILE AND&lt;br/&gt;
 EXISTS (&lt;br/&gt;
  SELECT 1&lt;br/&gt;
   FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
   WHERE&lt;br/&gt;
          F2.ID = FC.FILE)&lt;br/&gt;
 ORDER BY CS.ID DESC;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
3&lt;/p&gt;

&lt;p&gt;6 rows selected&lt;/p&gt;</comment>
                            <comment id="12738826" author="mamtas" created="Tue, 4 Aug 2009 06:11:51 +0100"  >&lt;p&gt;The above query works fine prior to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; change but fails with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; in the codeline. The results of the query above prior to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; changes are as follows&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
1&lt;/p&gt;

&lt;p&gt;6 rows selected&lt;/p&gt;</comment>
                            <comment id="12738839" author="mamtas" created="Tue, 4 Aug 2009 06:36:27 +0100"  >&lt;p&gt;Attaching a new simpler script, createDBsimpler.txt,  to create the db which will have only the tables used by the query below&lt;/p&gt;

&lt;p&gt;SELECT CS.ID &lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED &lt;br/&gt;
    FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH &lt;br/&gt;
    , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET &lt;br/&gt;
    , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID &lt;br/&gt;
WHERE &lt;br/&gt;
 CS.ID = FC.CHANGESET AND &lt;br/&gt;
 F.ID = FC.FILE AND &lt;br/&gt;
 EXISTS ( &lt;br/&gt;
  SELECT 1 &lt;br/&gt;
   FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH &lt;br/&gt;
   WHERE &lt;br/&gt;
          F2.ID = FC.FILE) &lt;br/&gt;
 ORDER BY CS.ID DESC; &lt;/p&gt;</comment>
                            <comment id="12738848" author="mamtas" created="Tue, 4 Aug 2009 07:04:03 +0100"  >&lt;p&gt;I have simplified the db creation just a little bit more removing the unnecessary columns from the tables. The new create db script is createDBsimplerVer2.txt and the query that goes along with that db is&lt;/p&gt;

&lt;p&gt;SELECT CS.ID&lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
    FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
    , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
 CS.ID = FC.CHANGESET AND&lt;br/&gt;
 F.ID = FC.FILE AND&lt;br/&gt;
 EXISTS (&lt;br/&gt;
  SELECT 1&lt;br/&gt;
   FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
   WHERE&lt;br/&gt;
          F2.ID = FC.FILE)&lt;br/&gt;
 ORDER BY CS.ID DESC;&lt;/p&gt;</comment>
                            <comment id="12738862" author="mamtas" created="Tue, 4 Aug 2009 07:37:59 +0100"  >&lt;p&gt;The query plan for the query below is as follows&lt;br/&gt;
SELECT CS.ID &lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED &lt;br/&gt;
    FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH &lt;br/&gt;
    , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET &lt;br/&gt;
    , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID &lt;br/&gt;
WHERE &lt;br/&gt;
 CS.ID = FC.CHANGESET AND &lt;br/&gt;
 F.ID = FC.FILE AND &lt;br/&gt;
 EXISTS ( &lt;br/&gt;
  SELECT 1 &lt;br/&gt;
   FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH &lt;br/&gt;
   WHERE &lt;br/&gt;
          F2.ID = FC.FILE) &lt;br/&gt;
 ORDER BY CS.ID DESC; &lt;/p&gt;


&lt;p&gt;Statement Name:&lt;br/&gt;
        null&lt;br/&gt;
Statement Text:&lt;br/&gt;
        SELECT CS.ID&lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
    FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
    , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
 CS.ID = FC.CHANGESET AND&lt;br/&gt;
 F.ID = FC.FILE AND&lt;br/&gt;
 EXISTS (&lt;br/&gt;
  SELECT 1&lt;br/&gt;
   FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
   WHERE&lt;br/&gt;
          F2.ID = FC.FILE)&lt;br/&gt;
 ORDER BY CS.ID DESC&lt;br/&gt;
Parse Time: 0&lt;br/&gt;
Bind Time: 0&lt;br/&gt;
Optimize Time: 0&lt;br/&gt;
Generate Time: 0&lt;br/&gt;
Compile Time: 0&lt;br/&gt;
Execute Time: 0&lt;br/&gt;
Begin Compilation Timestamp : null&lt;br/&gt;
End Compilation Timestamp : null&lt;br/&gt;
Begin Execution Timestamp : null&lt;br/&gt;
End Execution Timestamp : null&lt;br/&gt;
Statement Execution Plan Text:&lt;br/&gt;
Project-Restrict ResultSet (11):&lt;br/&gt;
Number of opens = 1&lt;br/&gt;
Rows seen = 6&lt;br/&gt;
Rows filtered = 0&lt;br/&gt;
restriction = false&lt;br/&gt;
projection = true&lt;br/&gt;
        constructor time (milliseconds) = 0&lt;br/&gt;
        open time (milliseconds) = 0&lt;br/&gt;
        next time (milliseconds) = 0&lt;br/&gt;
        close time (milliseconds) = 0&lt;br/&gt;
        restriction time (milliseconds) = 0&lt;br/&gt;
        projection time (milliseconds) = 0&lt;br/&gt;
        optimizer estimated row count:            2.67&lt;br/&gt;
        optimizer estimated cost:         2330.17&lt;/p&gt;

&lt;p&gt;Source result set:&lt;br/&gt;
        User supplied optimizer overrides for join are &lt;/p&gt;
{ joinOrder=FIXED }&lt;br/&gt;
        Nested Loop Join ResultSet:&lt;br/&gt;
        Number of opens = 1&lt;br/&gt;
        Rows seen from the left = 6&lt;br/&gt;
        Rows seen from the right = 6&lt;br/&gt;
        Rows filtered = 0&lt;br/&gt;
        Rows returned = 6&lt;br/&gt;
                constructor time (milliseconds) = 0&lt;br/&gt;
                open time (milliseconds) = 0&lt;br/&gt;
                next time (milliseconds) = 0&lt;br/&gt;
                close time (milliseconds) = 0&lt;br/&gt;
                optimizer estimated row count:            2.67&lt;br/&gt;
                optimizer estimated cost:         2330.17&lt;br/&gt;
&lt;br/&gt;
        Left result set:&lt;br/&gt;
                User supplied optimizer overrides for join are { joinOrder=FIXED}&lt;br/&gt;
                Nested Loop Exists Join ResultSet:&lt;br/&gt;
                Number of opens = 1&lt;br/&gt;
                Rows seen from the left = 6&lt;br/&gt;
                Rows seen from the right = 6&lt;br/&gt;
                Rows filtered = 0&lt;br/&gt;
                Rows returned = 6&lt;br/&gt;
                        constructor time (milliseconds) = 0&lt;br/&gt;
                        open time (milliseconds) = 0&lt;br/&gt;
                        next time (milliseconds) = 0&lt;br/&gt;
                        close time (milliseconds) = 0&lt;br/&gt;
                        optimizer estimated row count:            6.00&lt;br/&gt;
                        optimizer estimated cost:          357.23&lt;br/&gt;
&lt;br/&gt;
                Left result set:&lt;br/&gt;
                        User supplied optimizer overrides for join are { joinOrder=FIXED }
&lt;p&gt;                        Nested Loop Join ResultSet:&lt;br/&gt;
                        Number of opens = 1&lt;br/&gt;
                        Rows seen from the left = 4&lt;br/&gt;
                        Rows seen from the right = 6&lt;br/&gt;
                        Rows filtered = 0&lt;br/&gt;
                        Rows returned = 6&lt;br/&gt;
                                constructor time (milliseconds) = 0&lt;br/&gt;
                                open time (milliseconds) = 0&lt;br/&gt;
                                next time (milliseconds) = 0&lt;br/&gt;
                                close time (milliseconds) = 0&lt;br/&gt;
                                optimizer estimated row count:            6.00&lt;br/&gt;
                                optimizer estimated cost:          347.80&lt;/p&gt;

&lt;p&gt;                        Left result set:&lt;br/&gt;
                                Index Row to Base Row ResultSet for FILES:&lt;br/&gt;
                                Number of opens = 1&lt;br/&gt;
                                Rows seen = 4&lt;br/&gt;
                                Columns accessed from heap = &lt;/p&gt;
{0}&lt;br/&gt;
                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                        open time (milliseconds) = 0&lt;br/&gt;
                                        next time (milliseconds) = 0&lt;br/&gt;
                                        close time (milliseconds) = 0&lt;br/&gt;
                                        optimizer estimated row count:  9.00&lt;br/&gt;
                                        optimizer estimated cost:          328.82&lt;br/&gt;
&lt;br/&gt;
                                        User supplied optimizer overrides on FILES are { index=SQL090803230333481 }&lt;br/&gt;
                                        Index Scan ResultSet for FILES using constraint FILES_REPOSITORY_PATH at read committed isolation level using share row locking chosen by the optimizer&lt;br/&gt;
                                        Number of opens = 1&lt;br/&gt;
                                        Rows seen = 4&lt;br/&gt;
                                        Rows filtered = 0&lt;br/&gt;
                                        Fetch Size = 1&lt;br/&gt;
                                                constructor time (milliseconds)= 0&lt;br/&gt;
                                                open time (milliseconds) = 0&lt;br/&gt;
                                                next time (milliseconds) = 0&lt;br/&gt;
                                                close time (milliseconds) = 0&lt;br/&gt;
                                                next time in milliseconds/row =0&lt;br/&gt;
&lt;br/&gt;
                                        scan information:&lt;br/&gt;
                                                Bit set of columns fetched={2}&lt;br/&gt;
                                                Number of columns fetched=1&lt;br/&gt;
                                                Number of deleted rows visited=0&lt;br/&gt;
&lt;br/&gt;
                                                Number of pages visited=1&lt;br/&gt;
                                                Number of rows qualified=4&lt;br/&gt;
                                                Number of rows visited=4&lt;br/&gt;
                                                Scan type=btree&lt;br/&gt;
                                                Tree height=-1&lt;br/&gt;
                                                start position:&lt;br/&gt;
        None&lt;br/&gt;
                                                stop position:&lt;br/&gt;
        None&lt;br/&gt;
                                                qualifiers:&lt;br/&gt;
None&lt;br/&gt;
                                                optimizer estimated row count:          9.00&lt;br/&gt;
                                                optimizer estimated cost:   328.82&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
                        Right result set:&lt;br/&gt;
                                User supplied optimizer overrides on FILECHANGES are { index=SQL090803230334101 }&lt;br/&gt;
                                Index Scan ResultSet for FILECHANGES using constraint FILECHANGES_FILE_CHANGESET at read committed isolation level using instantaneous share row locking chosen by the optimizer&lt;br/&gt;
                                Number of opens = 4&lt;br/&gt;
                                Rows seen = 6&lt;br/&gt;
                                Rows filtered = 0&lt;br/&gt;
                                Fetch Size = 16&lt;br/&gt;
                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                        open time (milliseconds) = 0&lt;br/&gt;
                                        next time (milliseconds) = 0&lt;br/&gt;
                                        close time (milliseconds) = 0&lt;br/&gt;
                                        next time in milliseconds/row = 0&lt;br/&gt;
&lt;br/&gt;
                                scan information:&lt;br/&gt;
                                        Bit set of columns fetched={0, 1}&lt;br/&gt;
                                        Number of columns fetched=2&lt;br/&gt;
                                        Number of deleted rows visited=0&lt;br/&gt;
                                        Number of pages visited=4&lt;br/&gt;
                                        Number of rows qualified=6&lt;br/&gt;
                                        Number of rows visited=9&lt;br/&gt;
                                        Scan type=btree&lt;br/&gt;
                                        Tree height=1&lt;br/&gt;
                                        start position:&lt;br/&gt;
        &amp;gt;= on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                        stop position:&lt;br/&gt;
        &amp;gt; on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                        qualifiers:None&lt;br/&gt;
                                        optimizer estimated row count:  6.00&lt;br/&gt;
                                        optimizer estimated cost:           18.97&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
                Right result set:&lt;br/&gt;
                        User supplied optimizer overrides on CHANGESETS are { index=SQL090803230333820 }&lt;br/&gt;
                        Index Scan ResultSet for CHANGESETS using constraint CHANGESETS_PRIMARY_ID at read committed isolation level using share row locking chosen by the optimizer&lt;br/&gt;
                        Number of opens = 6&lt;br/&gt;
                        Rows seen = 6&lt;br/&gt;
                        Rows filtered = 0&lt;br/&gt;
                        Fetch Size = 1&lt;br/&gt;
                                constructor time (milliseconds) = 0&lt;br/&gt;
                                open time (milliseconds) = 0&lt;br/&gt;
                                next time (milliseconds) = 0&lt;br/&gt;
                                close time (milliseconds) = 0&lt;br/&gt;
                                next time in milliseconds/row = 0&lt;br/&gt;
&lt;br/&gt;
                        scan information:&lt;br/&gt;
                                Bit set of columns fetched={0}
&lt;p&gt;                                Number of columns fetched=1&lt;br/&gt;
                                Number of deleted rows visited=0&lt;br/&gt;
                                Number of pages visited=6&lt;br/&gt;
                                Number of rows qualified=6&lt;br/&gt;
                                Number of rows visited=6&lt;br/&gt;
                                Scan type=btree&lt;br/&gt;
                                Tree height=1&lt;br/&gt;
                                start position:&lt;br/&gt;
        &amp;gt;= on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                stop position:&lt;br/&gt;
        &amp;gt; on first 1 column(s).&lt;br/&gt;
        Ordered null semantics on the following columns:0&lt;br/&gt;
                                qualifiers:None&lt;br/&gt;
                                optimizer estimated row count:            6.00&lt;br/&gt;
                                optimizer estimated cost:            9.43&lt;/p&gt;


&lt;p&gt;        Right result set:&lt;br/&gt;
                Project-Restrict ResultSet (10):&lt;br/&gt;
                Number of opens = 6&lt;br/&gt;
                Rows seen = 24&lt;br/&gt;
                Rows filtered = 18&lt;br/&gt;
                restriction = true&lt;br/&gt;
                projection = true&lt;br/&gt;
                        constructor time (milliseconds) = 0&lt;br/&gt;
                        open time (milliseconds) = 0&lt;br/&gt;
                        next time (milliseconds) = 0&lt;br/&gt;
                        close time (milliseconds) = 0&lt;br/&gt;
                        restriction time (milliseconds) = 0&lt;br/&gt;
                        projection time (milliseconds) = 0&lt;br/&gt;
                        optimizer estimated row count:            2.67&lt;br/&gt;
                        optimizer estimated cost:         1972.94&lt;/p&gt;

&lt;p&gt;                Source result set:&lt;br/&gt;
                        Index Row to Base Row ResultSet for FILES:&lt;br/&gt;
                        Number of opens = 6&lt;br/&gt;
                        Rows seen = 24&lt;br/&gt;
                        Columns accessed from heap = &lt;/p&gt;
{0}
&lt;p&gt;                                constructor time (milliseconds) = 0&lt;br/&gt;
                                open time (milliseconds) = 0&lt;br/&gt;
                                next time (milliseconds) = 0&lt;br/&gt;
                                close time (milliseconds) = 0&lt;br/&gt;
                                optimizer estimated row count:            2.67&lt;br/&gt;
                                optimizer estimated cost:         1972.94&lt;/p&gt;

&lt;p&gt;                                User supplied optimizer overrides on FILES are &lt;/p&gt;
{ index=SQL090803230333481 }
&lt;p&gt;                                Index Scan ResultSet for FILES using constraint FILES_REPOSITORY_PATH at read committed isolation level using share row locking chosen by the optimizer&lt;br/&gt;
                                Number of opens = 6&lt;br/&gt;
                                Rows seen = 24&lt;br/&gt;
                                Rows filtered = 0&lt;br/&gt;
                                Fetch Size = 1&lt;br/&gt;
                                        constructor time (milliseconds) = 0&lt;br/&gt;
                                        open time (milliseconds) = 0&lt;br/&gt;
                                        next time (milliseconds) = 0&lt;br/&gt;
                                        close time (milliseconds) = 0&lt;br/&gt;
                                        next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;                                scan information:&lt;br/&gt;
                                        Bit set of columns fetched=&lt;/p&gt;
{2}
&lt;p&gt;                                        Number of columns fetched=1&lt;br/&gt;
                                        Number of deleted rows visited=0&lt;br/&gt;
                                        Number of pages visited=6&lt;br/&gt;
                                        Number of rows qualified=24&lt;br/&gt;
                                        Number of rows visited=24&lt;br/&gt;
                                        Scan type=btree&lt;br/&gt;
                                        Tree height=1&lt;br/&gt;
                                        start position:        None&lt;br/&gt;
                                        stop position:        None&lt;br/&gt;
                                        qualifiers:None&lt;br/&gt;
                                        optimizer estimated row count:  2.67&lt;br/&gt;
                                        optimizer estimated cost:         1972.94&lt;/p&gt;</comment>
                            <comment id="12739234" author="mikem" created="Wed, 5 Aug 2009 00:12:21 +0100"  >&lt;p&gt;I am not sure if just running update statistics will fix this problem for any set of data.  For this&lt;br/&gt;
query it does look like changing the order by clause to include an extra column will work around&lt;br/&gt;
this bug:&lt;/p&gt;

&lt;p&gt;ORDER BY CS.ID, CS.REPOSITORY;&lt;/p&gt;</comment>
                            <comment id="12739236" author="mikem" created="Wed, 5 Aug 2009 00:13:39 +0100"  >&lt;p&gt;the bug is not specific to the desc order by, the following query also gives wrong ordered results:&lt;br/&gt;
ij(C1)&amp;gt; SELECT&lt;br/&gt;
    CS.ID&lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
      FILES       F  --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
    , CHANGESETS  CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
    CS.ID = FC.CHANGESET AND&lt;br/&gt;
    F.ID  = FC.FILE      AND&lt;br/&gt;
    EXISTS (&lt;br/&gt;
        SELECT 1&lt;br/&gt;
            FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
        WHERE&lt;br/&gt;
            F2.ID = FC.FILE)&lt;br/&gt;
    ORDER BY CS.ID;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
3&lt;/p&gt;</comment>
                            <comment id="12739329" author="mamtas" created="Wed, 5 Aug 2009 05:15:39 +0100"  >&lt;p&gt;Following query gets rid of EXISTS clause and still runs into the incorrect order by result. Much easier to debug.&lt;/p&gt;

&lt;p&gt;SELECT CS.ID&lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
    FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH&lt;br/&gt;
    , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET&lt;br/&gt;
    , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID&lt;br/&gt;
WHERE&lt;br/&gt;
 CS.ID = FC.CHANGESET AND&lt;br/&gt;
 F.ID = FC.FILE &lt;br/&gt;
 ORDER BY CS.ID DESC;&lt;/p&gt;</comment>
                            <comment id="12739672" author="mikem" created="Wed, 5 Aug 2009 19:51:52 +0100"  >&lt;p&gt;I am still investigating, but as this seems time critical am posting some incomplete information.&lt;/p&gt;

&lt;p&gt;I have been debugging and talking to mamta about this issue.  I now do believe part of &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; should be backed out as the logic is incomplete, I don&apos;t believe the fix for this is&lt;br/&gt;
simple and it would be better to get all the code lines into a safer state and put off the complete&lt;br/&gt;
fix for later.  But I believe we only need to backout part of the fix.&lt;/p&gt;

&lt;p&gt;The fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; addressed 2 issues:&lt;br/&gt;
1) The code incorrectly assumed if a query plan resulted in for example &quot;always sorted on a&quot;, &lt;br/&gt;
     &quot;always sorted on b&quot;  where &quot;always sorted&quot; meant something like a=5, that then one could&lt;br/&gt;
     assume the query was also just sorted on b.  This was only true if a was a single row result  &lt;br/&gt;
     set.  I believe this code is working fine.&lt;/p&gt;

&lt;p&gt;2) When the fix went in we noticed a few queries in wisconsin were not doing sort avoidance any&lt;br/&gt;
    more .  See 23/Apr/09 01:13 PM &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; comment by mamta.  To this end code was &lt;br/&gt;
    added to do some tricky stuff with join equivalent analysis.  This part of the fix is localized to &lt;br/&gt;
    a single file mamta and I have looked at it and it does not do the right work.  It does not handle&lt;br/&gt;
    desc indexes or desc ordery by properly and can incorrectly assume that a query ordered&lt;br/&gt;
    on a, b, c satisfies and order by c.   I have just tried just backing out this change and &lt;br/&gt;
    all the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4331&quot; title=&quot;Join returns results in wrong order&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4331&quot;&gt;&lt;del&gt;DERBY-4331&lt;/del&gt;&lt;/a&gt; cases I tried worked, all the test cases specific for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; worked,&lt;br/&gt;
   and as expected I got wisconsin diffs that I am analysing.  I have not had time to run full tests.&lt;/p&gt;

&lt;p&gt;I will post a patch with just this change if anyone else wants to experiment. &lt;/p&gt;</comment>
                            <comment id="12739675" author="mikem" created="Wed, 5 Aug 2009 19:58:03 +0100"  >&lt;p&gt;This is a patch file based off of trunk.&lt;/p&gt;

&lt;p&gt;not fully tested patch file.  This patch just gets rid of the FromBaseTable.java changes&lt;br/&gt;
to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt;, it leaves every thing else.&lt;/p&gt;

&lt;p&gt;So far my testing shows:&lt;br/&gt;
postives: fixes all run test cases of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4331&quot; title=&quot;Join returns results in wrong order&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4331&quot;&gt;&lt;del&gt;DERBY-4331&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
negatives: Causes some diffs in wisconsin, probably the known cases where we &lt;br/&gt;
                  don&apos;t do sort avoidance anymore - but still get correct sorting.&lt;br/&gt;
unknown: no full test run done yet.&lt;/p&gt;</comment>
                            <comment id="12739682" author="rhillegas" created="Wed, 5 Aug 2009 20:16:01 +0100"  >&lt;p&gt;Thanks, Mike. I can confirm that your derby4331_do_not_commit.diff patch produces correct results from the d3926_repro.sql script attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; repro  and from the repro2.sql script attached to this JIRA&lt;/p&gt;</comment>
                            <comment id="12739698" author="mamtas" created="Wed, 5 Aug 2009 20:38:02 +0100"  >&lt;p&gt;Mike and I have been talking about different possibilities for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4331&quot; title=&quot;Join returns results in wrong order&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4331&quot;&gt;&lt;del&gt;DERBY-4331&lt;/del&gt;&lt;/a&gt;/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; given the time critical nature of it. We decided that we will investigate the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; to see what can be backed out and at the same time debug the reason beind &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4331&quot; title=&quot;Join returns results in wrong order&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4331&quot;&gt;&lt;del&gt;DERBY-4331&lt;/del&gt;&lt;/a&gt; failure. I will write the information I have collected over last couple days on the reason behind the bug &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4331&quot; title=&quot;Join returns results in wrong order&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4331&quot;&gt;&lt;del&gt;DERBY-4331&lt;/del&gt;&lt;/a&gt; and apossible fix for it but first would like to comment on Mike&apos;s proposal about backing out some of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; changes&lt;/p&gt;

&lt;p&gt;I agree with the partial backout of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt;. The code proposed for backout was written to cover additional queries so that we can avoid sorting for them if possible but from what I recall, it was not needed for fixing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt;. So it should be safe to backout part of the change w/o impacting any queries negatively. It will be good to do full tests before we commit those changes though.&lt;/p&gt;</comment>
                            <comment id="12739709" author="mikem" created="Wed, 5 Aug 2009 21:03:19 +0100"  >&lt;p&gt;here is the diff file from the wisconsin diffs.  I am working through it, but it is taking&lt;br/&gt;
time.  A lot of the diffs are that the new plan picks a different order which is also&lt;br/&gt;
a valid sort avoidance plan, they are the of the form where we have TABLE1 with&lt;br/&gt;
INDEX1(id) and TABLE2 with INDEX2(id) and query of form:&lt;br/&gt;
select xxx&lt;br/&gt;
where&lt;br/&gt;
TABLE1.id = TABLE2.id&lt;br/&gt;
order by TABLE1.id&lt;/p&gt;

&lt;p&gt;prior to backing out equijoin stuff we would often pick INDEX2 as left most using the equijoin logic, but now without it we instead find plan using INDEX1 as left most.  No&lt;br/&gt;
loss in performance as both provide a valid sort avoidance plan - just a lot of diffs.&lt;/p&gt;</comment>
                            <comment id="12739715" author="mikem" created="Wed, 5 Aug 2009 21:14:26 +0100"  >&lt;p&gt;my plan for this fix is going to be the proposed patch along with adding the new test cases for 4331 to the test suite.  I am running full set of tests against trunk now and analysing the wisconsin diffs.&lt;br/&gt;
I&apos;ve posted the wisconsin diffs which as is the case for query plan diffs are quite extensive &lt;br/&gt;
(15k lines) - but so far nothing surprising.&lt;/p&gt;

&lt;p&gt;If all goes well I would first check into trunk and then subsequently would like to backport to 10.5 and then hopefully  a new 10.5 apache release could be made (along with whatever we are allowed to do to make it unlikely apache users will use the previous one).&lt;/p&gt;

&lt;p&gt;I plan on checking in even if there are a few cases where we use to do sort avoidance and now&lt;br/&gt;
we don&apos;t.  If I do this I would file a new JIRA issue outlining these cases, which could be addressed&lt;br/&gt;
later.  Note these would only represent performance enhancements, the queries would be returning&lt;br/&gt;
correct results.&lt;/p&gt;

&lt;p&gt;I would appreciate it if anyone thinks this is a bad idea to let me know sooner than later.&lt;/p&gt;</comment>
                            <comment id="12739718" author="kmarsden" created="Wed, 5 Aug 2009 21:21:34 +0100"  >&lt;p&gt;Put this in two unrelated issues. Not sure if there is a problem with my browser or the driver.  I think probably the latter.  Hopefully got it right this time.&lt;/p&gt;

&lt;p&gt;As a matter of bookkeeping, if all of the wisconsin diffs are deemed acceptable and other tests and reviews pass, I think we should do the partial backout as a resolution of this issue. Then both &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4331&quot; title=&quot;Join returns results in wrong order&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4331&quot;&gt;&lt;del&gt;DERBY-4331&lt;/del&gt;&lt;/a&gt; can be resolved and a new issue opened for any follow up sort avoidance optimizations.&lt;/p&gt;</comment>
                            <comment id="12739757" author="mamtas" created="Wed, 5 Aug 2009 22:15:21 +0100"  >&lt;p&gt;i am attaching a patch for additional junits tests which were collected from this jira entry. Mike, can you please run the test on your codeline to see if works fine?&lt;/p&gt;</comment>
                            <comment id="12739810" author="mikem" created="Thu, 6 Aug 2009 00:14:29 +0100"  >&lt;p&gt;Still have not finished running tests (all of the junit tests passed, waiting on old&lt;br/&gt;
harness tests), derby_4331_patch_2.diff is the current state of the patch.  It includes the new tests that mamta contributed (I had to make a few minor changes to get the queries to run correctly).  &lt;/p&gt;

&lt;p&gt;It also includes an update to the wisconsin tests and master.  I worked through the&lt;br/&gt;
diffs and there were only 2 queries that previous to this patch that produced a &lt;br/&gt;
sort avoidance plan and that now don&apos;t.  I have filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4339&quot; title=&quot;improve sort avoidance algorithm to include equijoin relationships&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4339&quot;&gt;DERBY-4339&lt;/a&gt; to note these &lt;br/&gt;
2 queries:&lt;br/&gt;
select * from --DERBY-PROPERTIES joinOrder=FIXED&lt;br/&gt;
TENKTUP2, TENKTUP1&lt;br/&gt;
where TENKTUP1.unique1 = TENKTUP2.unique1&lt;br/&gt;
and TENKTUP2.unique1 &amp;lt; 2500&lt;br/&gt;
order by TENKTUP1.unique1&apos;; &lt;br/&gt;
select * from TENKTUP1, TENKTUP2&lt;br/&gt;
where TENKTUP1.unique1 = TENKTUP2.unique1&lt;br/&gt;
order by TENKTUP1.unique1 = TENKTUP2.unique1 &lt;/p&gt;

&lt;p&gt;All the other diffs were changes to the plans where the optimizer just choose &lt;br/&gt;
different ways to provide a sort avoidance plan with the available indexes.&lt;/p&gt;</comment>
                            <comment id="12739816" author="mikem" created="Thu, 6 Aug 2009 00:19:32 +0100"  >&lt;p&gt;proposed patch will stop sort avoidance on the types of queries described in &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4339&quot; title=&quot;improve sort avoidance algorithm to include equijoin relationships&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4339&quot;&gt;DERBY-4339&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12739858" author="lilywei" created="Thu, 6 Aug 2009 02:28:17 +0100"  >&lt;p&gt;I only run tests again repro2.sql and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3926&quot; title=&quot;Incorrect ORDER BY caused by index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3926&quot;&gt;&lt;del&gt;DERBY-3926&lt;/del&gt;&lt;/a&gt; and both result are correct. Nothing feels better when correct result returns. Thanks!!!&lt;/p&gt;</comment>
                            <comment id="12740149" author="mamtas" created="Thu, 6 Aug 2009 17:52:12 +0100"  >&lt;p&gt;The bug behind the query below is as follows&lt;br/&gt;
SELECT CS.ID &lt;br/&gt;
FROM --DERBY-PROPERTIES joinOrder=FIXED &lt;br/&gt;
    FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH &lt;br/&gt;
    , FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET &lt;br/&gt;
    , CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID &lt;br/&gt;
WHERE &lt;br/&gt;
 CS.ID = FC.CHANGESET AND &lt;br/&gt;
 F.ID = FC.FILE &lt;br/&gt;
 ORDER BY CS.ID DESC; &lt;/p&gt;

&lt;p&gt;Optimizer while considering any join order collects the sorting provided by that join order. For instance, for the query above, optimizer will first start with &lt;span class=&quot;error&quot;&gt;&amp;#91;F, -1, -1&amp;#93;&lt;/span&gt; as the join order and for this join order,  it knows that it can guarantee row ordering on FILES.REPOSITORY AND FILE.PATH. Next in the join order will be &lt;span class=&quot;error&quot;&gt;&amp;#91;F, FC, -1&amp;#93;&lt;/span&gt; and now available sorting is F.REPOSITORY, F.PATH, FC.FILE and FC.CHANGESET. The important thing to notice here is that the sorting available at any point is in the order collected by optimizer and this piece of information was not being considered by the code removed by Mike from FromBaseTable. This behavior can be seen when optimizer is considering the join order &lt;span class=&quot;error&quot;&gt;&amp;#91;F, FC, CS&amp;#93;&lt;/span&gt;. While considering this join order, the removed code from FromBaseTable kicks in for the predicate CS.ID=FC.CHANGESET. The removed code looks at equijoin CS.ID=FC.CHANGESET and it looks at the available ordering so far and sees FC.CHANGESET in there and incorrectly concludes that required sorting is available on CS.ID indirectly through FC.CHANGSET. It fails to take into account that FC.CHANGSET is in the 4th position in the ordering. The rows returned from &lt;span class=&quot;error&quot;&gt;&amp;#91;F, FC, -1&amp;#93;&lt;/span&gt; are ordered F.REPOSITORY, F.PATH, FC.FILE and FC.CHANGSET and not just FC.CHANGESET. Because the code incorrectly decides that required sorting is available, it decides to avoid the sorting for the given query. &lt;br/&gt;
The result of the query above without Mike&apos;s changes are as follows&lt;br/&gt;
ID &lt;br/&gt;
----------- &lt;br/&gt;
1 &lt;br/&gt;
2 &lt;br/&gt;
3 &lt;br/&gt;
2 &lt;br/&gt;
2 &lt;br/&gt;
3 &lt;br/&gt;
As we can see from above that FC.CHANGSET is sorted for every row selected from the outermost table F. &lt;br/&gt;
a)The first row in the result above is for the first row qualified from F&lt;br/&gt;
b)The next 2 rows in the result above are for the second qualified row from F&lt;br/&gt;
c) the 4th row in the result above is for the 3rd qualified row from F &lt;br/&gt;
d)and last 2 rows in the result above are for the 4th qualified row from F. &lt;/p&gt;

&lt;p&gt;If the outermost optimizable F was only one row resultset, we could safely assume that the required ordering is provided by indexes being considered for &lt;span class=&quot;error&quot;&gt;&amp;#91;F, FC, -1&amp;#93;&lt;/span&gt; but that is not the case. &lt;/p&gt;

&lt;p&gt;In future, if we ever decide to enhance sort avoidance code to qualify more queries for sort avoidance, we should consider the position of the sorted columns in available sorting list of columns and then decide if the query is pre-ordered on required ordering.&lt;/p&gt;</comment>
                            <comment id="12740202" author="mikem" created="Thu, 6 Aug 2009 19:57:20 +0100"  >&lt;p&gt;updating affects version, it is affected by a fix that has been backported all the way to 10.1 branch.&lt;br/&gt;
As tests pass I plan to backport all the way.  Waiting now on the end of my 10.5 tests run.&lt;/p&gt;</comment>
                            <comment id="12740248" author="mikem" created="Thu, 6 Aug 2009 22:01:16 +0100"  >&lt;p&gt;I&apos;ve backported fix to 10.5 branch with svn checkin #801817&lt;br/&gt;
All tests passed for me on a 10.5 client, XP, ibm16 jvm.&lt;/p&gt;
</comment>
                            <comment id="12742432" author="mikem" created="Wed, 12 Aug 2009 17:21:39 +0100"  >&lt;p&gt;fix has been made in trunk and backported to 10.5, 10.4, 10.3, 10.2 and 10.1 branches.&lt;/p&gt;</comment>
                            <comment id="12745404" author="knutanders" created="Thu, 20 Aug 2009 12:43:31 +0100"  >&lt;p&gt;Updated fix versions to match the versions on the branches.&lt;/p&gt;</comment>
                            <comment id="12745406" author="knutanders" created="Thu, 20 Aug 2009 12:47:14 +0100"  >&lt;p&gt;Updated affects versions similarly.&lt;/p&gt;</comment>
                            <comment id="12745407" author="knutanders" created="Thu, 20 Aug 2009 12:49:11 +0100"  >&lt;p&gt;Verified that the problem is fixed on trunk and 10.5.3.0 RC. Closing.&lt;/p&gt;

&lt;p&gt;Thanks for the quick fix!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12640488">DERBY-6148</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12407399">DERBY-3926</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12432330">DERBY-4339</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12415667" name="DERBY4331_additionalTests_diff.txt" size="14178" author="mamtas" created="Wed, 5 Aug 2009 22:15:21 +0100"/>
                            <attachment id="12415459" name="createDBsimpler.txt" size="1556" author="mamtas" created="Tue, 4 Aug 2009 06:36:27 +0100"/>
                            <attachment id="12415462" name="createDBsimplerVer2.txt" size="1134" author="mamtas" created="Tue, 4 Aug 2009 07:04:03 +0100"/>
                            <attachment id="12415643" name="derby4331_do_not_commit.diff" size="3665" author="mikem" created="Wed, 5 Aug 2009 19:58:03 +0100"/>
                            <attachment id="12415676" name="derby_4331_patch_2.diff" size="56768" author="mikem" created="Thu, 6 Aug 2009 00:14:29 +0100"/>
                            <attachment id="12415443" name="notorderby4331.zip" size="2497" author="lilywei" created="Tue, 4 Aug 2009 04:19:31 +0100"/>
                            <attachment id="12415444" name="orderby4331.zip" size="2613" author="lilywei" created="Tue, 4 Aug 2009 04:19:38 +0100"/>
                            <attachment id="12415254" name="repro.sql" size="2466" author="knutanders" created="Sun, 2 Aug 2009 00:15:42 +0100"/>
                            <attachment id="12415395" name="repro2.sql" size="3178" author="mikem" created="Mon, 3 Aug 2009 20:51:27 +0100"/>
                            <attachment id="12415398" name="repro2_qryplan.txt" size="12952" author="mikem" created="Mon, 3 Aug 2009 20:55:06 +0100"/>
                            <attachment id="12415649" name="wisconsin.diff" size="535566" author="mikem" created="Wed, 5 Aug 2009 21:03:19 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 2 Aug 2009 13:28:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24190</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ruf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38329</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>