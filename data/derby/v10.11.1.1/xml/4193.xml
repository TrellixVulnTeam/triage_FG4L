<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:18:56 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4193/DERBY-4193.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4193] ASSERT FAILED Scan position already saved with multi-threaded insert/update/delete </title>
                <link>https://issues.apache.org/jira/browse/DERBY-4193</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The attached program ScanPosSaved.java produces the error below, fairly quickly.  &lt;br/&gt;
The program has three threads, one doing inserts into a table with an identity column, one updating the row with the maximum id, one deleting the row with the maximum id.&lt;/p&gt;

&lt;p&gt;To reproduce, run &amp;gt;java ScanPosSaved  and &amp;lt;ctrl&amp;gt; &amp;lt;c&amp;gt; out of the program after you get the error.&lt;/p&gt;

&lt;p&gt;I saw this 10.5 and trunk sane builds but did not see it on 10.4.  With the insane build of 10.5.1.1 (RC2) I did not see any symptoms right away, so don&apos;t know how serious an issue this is for insane builds.&lt;/p&gt;


&lt;p&gt;org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Scan position already saved&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.BTreeScan.savePositionAndReleasePage(BTreeScan.java:2148)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.BTreeScan.savePositionAndReleasePage(BTreeScan.java:2212)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.BTreeRowPosition.saveMeAndReleasePage(BTreeRowPosition.java:128)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:295)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:599)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:105)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(BTreeMaxScan.java:347)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMax(BTreeMaxScan.java:434)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.btree.index.B2I.fetchMaxOnBTree(B2I.java:739)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.RAMTransaction.fetchMaxOnBtree(RAMTransaction.java:1078)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.openCore(LastIndexKeyResultSet.java:189)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.openCore(ScalarAggregateResultSet.java:133)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:245)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(EmbedStatement.java:152)&lt;/p&gt;

&lt;p&gt;	at ScanPosSaved.updateOperation(ScanPosSaved.java:62)&lt;/p&gt;

&lt;p&gt;	at ScanPosSaved$3.run(ScanPosSaved.java:17)&lt;/p&gt;


&lt;p&gt;I discovered this when trying to get a smaller repro for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4181&quot; title=&quot;SQLState.LANG_IGNORE_MISSING_INDEX_ROW_DURING_DELETE during NsTest run &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4181&quot;&gt;&lt;del&gt;DERBY-4181&lt;/del&gt;&lt;/a&gt;, but I think it is a different issue, because it reproduces on multiple jvms and does not reproduce on 10.4.  The assertion was added with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2991&quot; title=&quot;Index split deadlock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2991&quot;&gt;&lt;del&gt;DERBY-2991&lt;/del&gt;&lt;/a&gt;.  Knut could you perhaps assess how serious this is?&lt;/p&gt;


</description>
                <environment>Windows XP, IBM 1.6 SR6, Sun  1.6.0_01-b06</environment>
        <key id="12423957">DERBY-4193</key>
            <summary>ASSERT FAILED Scan position already saved with multi-threaded insert/update/delete </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Apr 2009 00:57:49 +0100</created>
                <updated>Wed, 12 Jan 2011 22:24:25 +0000</updated>
                            <resolved>Wed, 6 May 2009 12:21:21 +0100</resolved>
                                    <version>10.5.1.1</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.5.2.0</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12703455" author="kmarsden" created="Tue, 28 Apr 2009 01:16:27 +0100"  >&lt;p&gt;Correcting typo in previous repro.  I was actually passing the same connection into two threads.  The issue still reproduces with this corrected.&lt;/p&gt;
</comment>
                            <comment id="12703624" author="knutanders" created="Tue, 28 Apr 2009 13:37:45 +0100"  >&lt;p&gt;I think the assert is harmless, in the sense that nothing bad should happen in non-debug builds. It basically indicates that the last time we saved the position of this scan, we didn&apos;t subsequently use it to reposition the scan, so in this case I think it just means that we saved the position unnecessarily.&lt;/p&gt;

&lt;p&gt;The code that fails tries to save the position of a max scan because it has to wait in order to obtain the lock on the rightmost row in an index. In this case it won&apos;t use the saved position when it wakes up, instead it performs a new search from the root of the B-tree to find the rightmost row again (which is possibly a different row now). In the repro, the max scan needs to wait a second time to lock the rightmost row because a new row has become the rightmost one, and it&apos;s still locked exclusively.&lt;/p&gt;

&lt;p&gt;Since the locking of the last row is performed the same way as one would do previous key locking (the comment above it actually says &quot;backward scan initial positioning will request a previous key lock for initial positioning&quot;), I believe that it would be correct to replace the call to lockScanRow() with a call to lockNonScanPreviousRow(). Previous key locking will not save the position when it needs to wait, so the assert failure will go away, and the logic in BTreeMaxScan.positionAtStartPosition() will also be simpler as it doesn&apos;t need to decrement/increment pos.current_slot before/after the lock call.&lt;/p&gt;

&lt;p&gt;I think there may be similar problems in&lt;/p&gt;

&lt;p&gt;  BTreeScan.positionAtStartForForwardScan()&lt;br/&gt;
  BTreeScan.positionAtStartForBackwardScan()&lt;br/&gt;
  BTreeMaxScan.fetchMax()&lt;/p&gt;</comment>
                            <comment id="12703626" author="knutanders" created="Tue, 28 Apr 2009 13:44:30 +0100"  >&lt;p&gt;The attached patch adds a test case to IndexSplitDeadlockTest that fails most of the time (there is a race for a lock, so that it sometimes doesn&apos;t fail) with the assert failure reported by Kathey.&lt;/p&gt;

&lt;p&gt;The patch also changes BTreeMaxScan.positionAtStartPosition() so that it uses lockNonScanPreviousRow() instead of lockScanRow(). This change makes both IndexSplitDeadlockTest and ScanPosSaved run without errors.&lt;/p&gt;</comment>
                            <comment id="12703761" author="kmarsden" created="Tue, 28 Apr 2009 18:36:24 +0100"  >&lt;p&gt;Thanks Knut for the quick fix.  I ran the program for 2 hours with the patch and got no errors and checked consistency and it was fine.  &lt;/p&gt;</comment>
                            <comment id="12703770" author="mikem" created="Tue, 28 Apr 2009 19:06:39 +0100"  >&lt;p&gt;I believe your proposed change may result in a change in behavior for isolation levels which don&apos;t &lt;br/&gt;
require previous key locking.  In particular if you use previous key locking code it may not get a lock&lt;br/&gt;
at all for some isolation levels.  I am not sure how important it is, but the difference I think is:&lt;br/&gt;
current code: It loops using the &quot;fast&quot; search until it can get a lock on the last row in the last leaf page while holding latch and not waiting on lock.&lt;br/&gt;
change:  in some isolation levels may not get lock in the position code, and instead will fail to get lock&lt;br/&gt;
                 in fetchMax() code and give up earlier on the &quot;fast&quot; search in case where there is competition&lt;br/&gt;
                 for the lock.&lt;/p&gt;

&lt;p&gt;Reading through the comments in the code, I believe they are misleading.  I think they came from a&lt;br/&gt;
cut/paste of some prototype backward scan code and actually don&apos;t apply to the specific max scan case.&lt;/p&gt;</comment>
                            <comment id="12703773" author="mikem" created="Tue, 28 Apr 2009 19:09:16 +0100"  >&lt;p&gt;Here is an updated version of BTreeMaxScan.java I would like to check into the trunk, it just has comment changes.  I believe this better describes the intent of the code.  I believe the old comments about previous key locking did not apply to the max scan.&lt;/p&gt;</comment>
                            <comment id="12704146" author="knutanders" created="Wed, 29 Apr 2009 16:11:30 +0100"  >&lt;p&gt;The suggested changes to the comments look like improvements to me. +1 to commit.&lt;/p&gt;

&lt;p&gt;(I noticed that you added a RESOLVE comment in some code that you don&apos;t think will ever be called. I came to the same conclusion when I wrote tests for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2991&quot; title=&quot;Index split deadlock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2991&quot;&gt;&lt;del&gt;DERBY-2991&lt;/del&gt;&lt;/a&gt; and added a comment about it in IndexSplitDeadlockTest. So we should probably just remove that code.)&lt;/p&gt;

&lt;p&gt;As to the changed behaviour, I haven&apos;t been able to see any. I tried a simple SELECT MAX(X) FROM T, and observed this both with and without the patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;read uncommitted: no locks obtained in position or in fetchMax (IS obtained before position)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;read committed: zero duration row lock on last row obtained &lt;b&gt;both&lt;/b&gt; in position and fetchMax (and IS before position)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;repeatable read and serializable: no locks in position/fetchMax (already had S on table)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think that whether or not previous key locking should be used, is determined by the lockScanRow() method as it decides whether it should call lockNonScanPreviousRow(), and it&apos;s not determined by lockNonScanPreviousRow() itself. So my understanding of the code is that if lockScanRow() would have obtained a lock, so will lockNonScanPreviousRow().&lt;/p&gt;

&lt;p&gt;And isn&apos;t this lock really a range lock, like the previous key locks? It&apos;s not just protecting the row containing the max value, but really the range starting with that row, so that no higher values can be inserted while the lock is held.&lt;/p&gt;</comment>
                            <comment id="12704623" author="knutanders" created="Thu, 30 Apr 2009 13:53:32 +0100"  >&lt;p&gt;An alternative to using lockNonScan* methods for the problematic cases is to add a flag to lockScanRow() to state whether or not the position should be saved if the latch is released. See the attached patch.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to write some test cases that trigger the assert from the other methods mentioned above.&lt;/p&gt;</comment>
                            <comment id="12704682" author="mikem" created="Thu, 30 Apr 2009 17:14:34 +0100"  >&lt;p&gt;i prefer the use of lockScanRow, so your most recent suggestion seems better.  The code already does some special case code on the btree position in the cases I think you are going after - I wonder&lt;br/&gt;
if there should just be new routine on BTreeRowPosition to clear the state if you are intending to &lt;br/&gt;
re-search the tree.  maybe .init() does the job?&lt;/p&gt;

&lt;p&gt;Would the following work (or something like it)?:&lt;br/&gt;
old btreemax code:&lt;br/&gt;
if (latch_released)&lt;/p&gt;
{
    // lost latch on pos.current_leaf, search the tree again.
    pos.current_leaf = null;
    continue;
}
&lt;p&gt;new?:&lt;br/&gt;
if (latch_released)&lt;/p&gt;
{
    // lost latch on pos.current_leaf, search the tree again - will not use current position
    pos.init();
    continue;
}</comment>
                            <comment id="12705577" author="knutanders" created="Mon, 4 May 2009 13:47:11 +0100"  >&lt;p&gt;Thanks, Mike. pos.init() should do the trick. In the 1c patch I&apos;ve addressed the four cases I identified as problematic the following way:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;BTreeMaxScan.positionAtStartPosition and BTreeScan.positionAtStartForForwardScan:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;use pos.init() to clear the saved position&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;BTreeScan.positionAtStartForBackwardScan:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;this method is never used, as far as I can see, so I removed it instead of fixing it&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;BTreeMaxScan.fetchMax:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;not a problem in this method because it calls positionAtDoneScan() before it restarts the scan from the beginning, so the position will be cleared in the code as it is now&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I also added a test case for the forward scan case. Like the max scan test, it does not fail consistently, but it fails in most cases in my environment without the fix.&lt;/p&gt;

&lt;p&gt;The regression tests are running now.&lt;/p&gt;</comment>
                            <comment id="12705638" author="knutanders" created="Mon, 4 May 2009 17:09:20 +0100"  >&lt;p&gt;All regression tests passed.&lt;/p&gt;</comment>
                            <comment id="12706340" author="knutanders" created="Wed, 6 May 2009 09:04:57 +0100"  >&lt;p&gt;Committed revision 772090.&lt;br/&gt;
I&apos;ll also back-port the fix to 10.5.&lt;/p&gt;</comment>
                            <comment id="12706382" author="knutanders" created="Wed, 6 May 2009 12:21:21 +0100"  >&lt;p&gt;Merged to 10.5 and committed revision 772146.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12406586" name="ScanPosSaved.java" size="2387" author="kmarsden" created="Tue, 28 Apr 2009 01:16:27 +0100"/>
                            <attachment id="12406581" name="ScanPosSaved.java" size="2387" author="kmarsden" created="Tue, 28 Apr 2009 00:58:32 +0100"/>
                            <attachment id="12406669" name="btreemaxscancomments.diff" size="8346" author="mikem" created="Tue, 28 Apr 2009 19:09:16 +0100"/>
                            <attachment id="12406637" name="d4193-1a.diff" size="6271" author="knutanders" created="Tue, 28 Apr 2009 13:44:30 +0100"/>
                            <attachment id="12406921" name="d4193-1b.diff" size="17242" author="knutanders" created="Thu, 30 Apr 2009 13:53:32 +0100"/>
                            <attachment id="12407149" name="d4193-1c.diff" size="16003" author="knutanders" created="Mon, 4 May 2009 13:47:11 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 28 Apr 2009 12:37:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24091</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0o0f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37708</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>