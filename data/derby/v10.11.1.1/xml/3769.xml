<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:52:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3769/DERBY-3769.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3769] Make LOBStoredProcedure on the server side smarter about the read buffer size</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3769</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby has a max length for VARBINARY and VARCHAR, which is 32&apos;672 bytes or characters (see Limits.DB2_VARCHAR_MAXWIDTH).&lt;br/&gt;
When working with LOBs represented by locators, using a read buffer larger than the max value causes the server to process far more data than necessary.&lt;/p&gt;

&lt;p&gt;Say the read buffer is 33&apos;000 bytes, and these bytes are requested by the client. This requests ends up in LOBStoredProcedure.BLOBGETBYTES.&lt;br/&gt;
Assume the stream position is 64&apos;000, and this is where we want to read from. The following happens:&lt;br/&gt;
 a) BLOBGETBYTES instructs EmbedBlob to read 33&apos;000 bytes, advancing the stream position to 97&apos;000.&lt;br/&gt;
 b) Derby fetches/receives the 33&apos;000 bytes, but can only send 32&apos;672. The rest of the data (328 bytes) is discarded.&lt;br/&gt;
 c) The client receives the 32&apos;672 bytes, recalculates the position and length arguments and sends another request.&lt;br/&gt;
 d) BLOBGETBYTES(locator, 96672, 328) is executed. EmbedBlob detects that the stream position has advanced too far, so it resets the stream to position zero and skips/reads until position 96&apos;672 has been reached.&lt;br/&gt;
 e) The remaining 328 bytes are sent to the client.&lt;/p&gt;

&lt;p&gt;This issue deals with points b) and d), by avoiding the need to reset the stream.&lt;/p&gt;

&lt;p&gt;Points a) and e) are also problematic if a large number of bytes are going to be read, say hundreds of megabytes, but that&apos;s another issue.&lt;/p&gt;

&lt;p&gt;It is unfortunate that using 32 K (32 * 1024) as the buffer size is almost the worst case; 32&apos;768 - 32&apos;672 = 96 bytes.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12399902">DERBY-3769</key>
            <summary>Make LOBStoredProcedure on the server side smarter about the read buffer size</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 Jul 2008 14:24:04 +0100</created>
                <updated>Fri, 7 May 2010 10:09:45 +0100</updated>
                            <resolved>Fri, 7 May 2010 10:09:45 +0100</resolved>
                                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12612094" author="kristwaa" created="Wed, 9 Jul 2008 14:26:45 +0100"  >&lt;p&gt;This issue can be fixed in the client, in the server or on both sides by adjusting the amount of requested data.&lt;br/&gt;
There are advantages to doing it on both sides, for instance that new clients will behave better with older servers, but I think it is the server that knows best how much data can be sent so I plan to implement the fix there.&lt;/p&gt;

&lt;p&gt;Opinions?&lt;/p&gt;</comment>
                            <comment id="12612129" author="kristwaa" created="Wed, 9 Jul 2008 15:46:26 +0100"  >&lt;p&gt;&apos;derby-3769-1a-buffer_size_adjustment.diff&apos; adjusts the buffer size according to the max size for VARCHAR/VARBINARY.&lt;/p&gt;

&lt;p&gt;Regression tests ran cleanly.&lt;br/&gt;
Patch ready for review, also awaiting comments on the general approach.&lt;/p&gt;</comment>
                            <comment id="12612455" author="knutanders" created="Thu, 10 Jul 2008 13:19:25 +0100"  >&lt;p&gt;I think it is correct to fix this on the server side only. If we want the fix on the client side, we need to give the client knowledge about maximum sizes for different server versions (not a big issue right now, since the max varchar/varbinary size hasn&apos;t changed) which sounds like unnecessary complexity if it only fixes performance issues with the combination of old server and new client.&lt;/p&gt;

&lt;p&gt;I think the fix looks good. I checked the code in CallableLocatorProcedures, and it seems to correctly request more data if the string is truncated, so the fix should be fine. You may consider the following cosmetic changes:&lt;/p&gt;

&lt;p&gt;1) Instead of using Limits.DB2_VARCHAR_MAXWIDTH, we could have a dedicated constant (CLOBGETSUBSTRING_RETURN_LENGTH, or something) that we used both when we declared the stored procedures (in DataDictionaryImpl) and to truncate the return value in the procedures. This way it is easier to keep them consistent if we at some point change the definition of the procedures.&lt;/p&gt;

&lt;p&gt;2) The javadoc comments have paragraphs marked as implementation notes which say that the length may be shorter than specified. I don&apos;t think these aren&apos;t actually implementation notes, but crucial points of the API that anyone programming against these procedures should be aware of.&lt;/p&gt;

&lt;p&gt;3) The comments say that the length may be shorter because of client/server communication. I believe it is more correct to say that the length may be shorter than specified because the stored procedure returns a VARCHAR (or VARBINARY) and can therefore not return strings whose length exceed the max length for the data type.&lt;/p&gt;

&lt;p&gt;4) Typo in javadoc for BLOBGETBYTES: smallar -&amp;gt; smaller&lt;/p&gt;</comment>
                            <comment id="12613291" author="kristwaa" created="Mon, 14 Jul 2008 12:13:50 +0100"  >&lt;p&gt;Patch 1b addresses Knut Anders&apos; comments.&lt;/p&gt;

&lt;p&gt;Knut Anders wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I checked the code in CallableLocatorProcedures, and it seems to correctly request more data if the string is truncated, so the fix should be fine.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Yes, truncation is what happens currently, although at a different place in the code.&lt;/p&gt;

&lt;p&gt;Actions taken for the comments:&lt;br/&gt;
1) Introduced LOBStoredProcedure.MAX_RETURN_LENGTH and a comment.&lt;/p&gt;

&lt;p&gt;2) You are correct. Removed implementation notes, commented the len argument.&lt;/p&gt;

&lt;p&gt;3) Comments rewritten.&lt;/p&gt;

&lt;p&gt;4) Typo fixed.&lt;/p&gt;


&lt;p&gt;Patch 1b ready for review.&lt;/p&gt;</comment>
                            <comment id="12613582" author="knutanders" created="Tue, 15 Jul 2008 12:12:03 +0100"  >&lt;p&gt;Patch 1b looks good to me. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12613608" author="kristwaa" created="Tue, 15 Jul 2008 14:32:44 +0100"  >&lt;p&gt;Thanks for looking at the patch Knut Anders.&lt;/p&gt;

&lt;p&gt;Committed 1b to trunk with revision 676912.&lt;br/&gt;
Awaiting test run results before backporting.&lt;/p&gt;</comment>
                            <comment id="12614297" author="kristwaa" created="Thu, 17 Jul 2008 12:13:50 +0100"  >&lt;p&gt;Backported to 10.4 with revision 677557.&lt;br/&gt;
There are some JavaDoc conflicts for 10.3, but I think the fix can easily be ported if someone wishes to do so.&lt;/p&gt;</comment>
                            <comment id="12615161" author="kristwaa" created="Mon, 21 Jul 2008 08:44:31 +0100"  >&lt;p&gt;Closing issue.&lt;br/&gt;
Note that points a) and e) in the list above haven&apos;t been resolved. It&apos;s not a bug, but a possible optimization (one could say it&apos;s a client side buffer adjustment) avoiding a round-trip to fetch a few bytes. Instead of adjusting the fetch buffer one could also consider prefetching.&lt;/p&gt;</comment>
                            <comment id="12620261" author="kristwaa" created="Wed, 6 Aug 2008 15:14:52 +0100"  >&lt;p&gt;The fix isn&apos;t sufficient for Clob.&lt;/p&gt;

&lt;p&gt;Currently the buffer threshold is expressed in characters, but it seems it has to be expressed in bytes. Since we are transferring data over the line as UTF-8 (is this always the case?), a solution might be to always assume 3 bytes per character. The fix would then be to introduce a separate threshold for Clobs:&lt;br/&gt;
  MAX_CLOB_RETURN_LENGTH = MAX_RETURN_LENGTH / 3&lt;/p&gt;

&lt;p&gt;The buffer size will be too small for most cases (i.e. when the Clob contains characters than can be represented by ASCII). In my opinion, that is an acceptable tradeoff compared to resetting the Clob stream and skipping data frequently on the server (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3766&quot; title=&quot;EmbedBlob.setPosition is highly ineffective for streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3766&quot;&gt;&lt;del&gt;DERBY-3766&lt;/del&gt;&lt;/a&gt;).&lt;br/&gt;
I&apos;m sure a more sophisticated optimization can be implemented later.&lt;/p&gt;</comment>
                            <comment id="12637452" author="kristwaa" created="Tue, 7 Oct 2008 13:15:03 +0100"  >&lt;p&gt;Patch 2a adjusts the maximum return size in characters for the CLOB stored procedure to 10890 (DB2_VARCHAR_MAXWIDTH / 3). This potentially results in anything from 10890 to 10890*3 bytes to be returned to the client in one round-trip, depending on the bytes per char ratio (determined by the modified UTF8 encoding).&lt;/p&gt;

&lt;p&gt;Even though this fix isn&apos;t optimal, the advantages outweigh the disadvantages in my opinion.&lt;br/&gt;
I did a simple test, where I used a 32K buffer size in the client code to retrieve a 32M chars long CLOB consisting of CJK chars (3 bytes per char).&lt;br/&gt;
With the fix the it took around 17 seconds, without it took almost 3400 seconds! In both cases a patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3825&quot; title=&quot;StoreStreamClob.getReader(charPos) performs poorly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3825&quot;&gt;&lt;del&gt;DERBY-3825&lt;/del&gt;&lt;/a&gt; was applied.&lt;br/&gt;
I also did a test with a 32MB CLOB containing ASCII characters, where I saw a performance reduction of around 3% (test run on a LAN, performance reduction will increase with higher latency networks).&lt;/p&gt;

&lt;p&gt;If you want to test performance yourself, you must first apply the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3825&quot; title=&quot;StoreStreamClob.getReader(charPos) performs poorly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3825&quot;&gt;&lt;del&gt;DERBY-3825&lt;/del&gt;&lt;/a&gt; (2a). The problems are described under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3766&quot; title=&quot;EmbedBlob.setPosition is highly ineffective for streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3766&quot;&gt;&lt;del&gt;DERBY-3766&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12637453" author="kristwaa" created="Tue, 7 Oct 2008 13:16:05 +0100"  >&lt;p&gt;Given the changes are very isolated and simple, I do plan to backport patch 2a to 10.4.&lt;/p&gt;</comment>
                            <comment id="12639001" author="knutanders" created="Mon, 13 Oct 2008 11:00:21 +0100"  >&lt;p&gt;Patch 2a looks like a reasonable short-term fix to this problem. In the longer term, we may consider other ways to do it more efficiently for CLOBs with a small number of multi-byte characters.&lt;/p&gt;</comment>
                            <comment id="12641817" author="kristwaa" created="Wed, 22 Oct 2008 14:28:24 +0100"  >&lt;p&gt;I wrote a test that inserts 10 Clobs (separate step) and then reads them back with a configurable buffer size.&lt;br/&gt;
For the configurations that finish quickly, I ran the test twice for warmup and then once for &quot;benchmark&quot;. The server was restarted between different configurations, but the data was not re-inserted.&lt;/p&gt;

&lt;p&gt;Insert params: 10 clobs, 10 MB each, content is latin or cjk looping alphabet.&lt;br/&gt;
Server started with Xmx512M. The times below is the time it takes for the transfer of 10 Clobs. The variance in the test is observable.&lt;/p&gt;

&lt;p&gt;Derby 10.5 (insane):&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;   32768            32000            10890&lt;br/&gt;
---------------------------------------------------------&lt;br/&gt;
no fix, latin &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  10 532            8 558           10 718&lt;br/&gt;
fixed, latin  &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  12 631           11 178           10 441&lt;br/&gt;
no fix, cjk   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;lt;unfeasible&amp;gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &amp;lt;unfeasible&amp;gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;     20 540&lt;br/&gt;
fixed, cjk    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  21 916           20 634           19 870&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; It took 250719 ms to transfer one Clob (cold db). Estimated time for 10 iterations would then be around 2 500 000 ms, around 120 times slower than for a buffer size of 10890 chars.&lt;/p&gt;

&lt;p&gt;Derby 10.4 (insane)&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;    32768           32000           10890&lt;br/&gt;
--------------------------------------------------------&lt;br/&gt;
no fix, latin &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1 308 170&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;      672 746       1 632 230&lt;br/&gt;
fixed, latin  &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2 099 400&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;    1 610 080&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;    1 602 490&lt;br/&gt;
no fix, cjk   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4 667 548       3 575 390&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;    3 514 560&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;&lt;br/&gt;
fixed, cjk    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5 629 730&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;    4 337 090&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;    4 237 650&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; Estimated time, average of the two first iterations multiplied by ten.&lt;/p&gt;

&lt;p&gt;So, what we&apos;re seeing here are the effects of three issues;&lt;br/&gt;
 a) Unconditional reset of the stream for each request (buffer size).&lt;br/&gt;
 b) Extra (unnecessary) reset of the stream for each request (buffer size).&lt;br/&gt;
 c) Increased number of round-trips due to increased number of request (smaller buffer size).&lt;/p&gt;

&lt;p&gt;a) is fixed (for StoreStreamClob) with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3825&quot; title=&quot;StoreStreamClob.getReader(charPos) performs poorly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3825&quot;&gt;&lt;del&gt;DERBY-3825&lt;/del&gt;&lt;/a&gt;, and b) is addressed by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3769&quot; title=&quot;Make LOBStoredProcedure on the server side smarter about the read buffer size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3769&quot;&gt;&lt;del&gt;DERBY-3769&lt;/del&gt;&lt;/a&gt;. c) comes as a consequence of a user decision (buffer size) and the fact that we don&apos;t have any kind of prefetching for this request.&lt;br/&gt;
The performance can be characterized by the number of stream resets and the number of round-trips. For some data the current fixes reduce one and increases the other, resulting in sub-optimal performance.&lt;/p&gt;

&lt;p&gt;As can be seen, the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3769&quot; title=&quot;Make LOBStoredProcedure on the server side smarter about the read buffer size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3769&quot;&gt;&lt;del&gt;DERBY-3769&lt;/del&gt;&lt;/a&gt; has a severely negative effect without the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3825&quot; title=&quot;StoreStreamClob.getReader(charPos) performs poorly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3825&quot;&gt;&lt;del&gt;DERBY-3825&lt;/del&gt;&lt;/a&gt;. This is caused by the increased number of stream resets required.&lt;br/&gt;
It can also be seen that though the simple buffer size fix improves performance significantly where a too large buffer causes stream resets, it also hurts performance for Clobs containing only 1 byte character encodings. Nevertheless, I will commit the current patch 2a and create a separate Jira for the optimization with the following justification:&lt;br/&gt;
 a) Performance improvement is huge for Clobs with 2 or 3 byte characters.&lt;br/&gt;
 b) Performance reduction for Clobs with 1 byte characters is modest (around 0% - 25%).&lt;br/&gt;
 c) It only affects the client driver.&lt;br/&gt;
 d) There are several more optimal solutions, but they partly depend on other patches and implementation choices.&lt;/p&gt;

&lt;p&gt;I would prefer to handle the most critical problems first and then optimize at a later time. Also note the dramatic performance improvement due to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3825&quot; title=&quot;StoreStreamClob.getReader(charPos) performs poorly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3825&quot;&gt;&lt;del&gt;DERBY-3825&lt;/del&gt;&lt;/a&gt;. Compared to this, the performance reduction is very small.&lt;/p&gt;</comment>
                            <comment id="12641885" author="kristwaa" created="Wed, 22 Oct 2008 16:22:06 +0100"  >&lt;p&gt;Committed patch 2b to trunk with revision 707097.&lt;br/&gt;
I will backport the issue together with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3825&quot; title=&quot;StoreStreamClob.getReader(charPos) performs poorly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3825&quot;&gt;&lt;del&gt;DERBY-3825&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only changes between patches 2a and 2b are JavaDoc modifications/additions.&lt;/p&gt;</comment>
                            <comment id="12641886" author="kristwaa" created="Wed, 22 Oct 2008 16:23:13 +0100"  >&lt;p&gt;Note also &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3918&quot; title=&quot;Improve transfer buffer utilization for Clobs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3918&quot;&gt;DERBY-3918&lt;/a&gt;, which tracks the optimization task.&lt;/p&gt;</comment>
                            <comment id="12645181" author="kristwaa" created="Wed, 5 Nov 2008 10:12:09 +0000"  >&lt;p&gt;Backported patch 2b to 10.4 with revision 711548.&lt;/p&gt;</comment>
                            <comment id="12655591" author="kristwaa" created="Thu, 11 Dec 2008 10:07:27 +0000"  >&lt;p&gt;Closing this issue.&lt;/p&gt;

&lt;p&gt;Note that the solution should be optimized (tracked by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3918&quot; title=&quot;Improve transfer buffer utilization for Clobs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3918&quot;&gt;DERBY-3918&lt;/a&gt;), because it is hurting the (probably) most common use case the most - Clobs with ASCII data only.&lt;/p&gt;</comment>
                            <comment id="12706088" author="rhillegas" created="Tue, 5 May 2009 17:37:38 +0100"  >&lt;p&gt;Re-opening this issue pending resolution of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4214&quot; title=&quot;Inconsistent metadata for CLOBGETSUBSTRING, depending on your upgrade trajectory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4214&quot;&gt;&lt;del&gt;DERBY-4214&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12865093" author="kristwaa" created="Fri, 7 May 2010 10:09:45 +0100"  >&lt;p&gt;Re-closing the issue, as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4214&quot; title=&quot;Inconsistent metadata for CLOBGETSUBSTRING, depending on your upgrade trajectory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4214&quot;&gt;&lt;del&gt;DERBY-4214&lt;/del&gt;&lt;/a&gt; has been resolved.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12399881">DERBY-3766</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12424615">DERBY-4214</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12406999">DERBY-3918</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12385633" name="derby-3769-1a-buffer_size_adjustment.diff" size="3806" author="kristwaa" created="Wed, 9 Jul 2008 15:46:26 +0100"/>
                            <attachment id="12385972" name="derby-3769-1b-buffer_size_adjustment.diff" size="6497" author="kristwaa" created="Mon, 14 Jul 2008 12:13:50 +0100"/>
                            <attachment id="12391625" name="derby-3769-2a-clob_buffer_size_adjustment.diff" size="3428" author="kristwaa" created="Tue, 7 Oct 2008 13:15:03 +0100"/>
                            <attachment id="12392661" name="derby-3769-2b-clob_buffer_size_adjustment.diff" size="4539" author="kristwaa" created="Wed, 22 Oct 2008 16:22:06 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 10 Jul 2008 12:19:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30993</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0qfr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38101</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>