<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:23:45 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3652/DERBY-3652.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3652] Derby does not follow the SQL Standard when trying to map SQL routines to Java methods.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3652</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I have only tested this in the 10.5 trunk. However, I suspect that this affects all previous releases of Derby as well.&lt;/p&gt;

&lt;p&gt;In resolving method signatures for function/procedure invocations, the SQL standard makes the following definitions in part 13, section 4.5 (parameter mapping). These definitions, in turn, refer to tables B-1 and B-3 in JDBC 3.0 Specification, Final Release, October 2001 (&lt;span class=&quot;error&quot;&gt;&amp;#91;JDBC&amp;#93;&lt;/span&gt;).&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Simply mappable - This refers to the correspondence of SQL and Java types described in &lt;span class=&quot;error&quot;&gt;&amp;#91;JDBC&amp;#93;&lt;/span&gt; table B-1. This is the table which defines the mapping of SQL types to Java primitives.&lt;/li&gt;
	&lt;li&gt;Object mappable - This refers to the correspondence of SQL and Java types described in &lt;span class=&quot;error&quot;&gt;&amp;#91;JDBC&amp;#93;&lt;/span&gt; table B-3. This is the table which defines the mapping of SQL types to Java wrapper objects.&lt;/li&gt;
	&lt;li&gt;Output mappable - For OUT and INOUT parameters, this refers to a single element array whose cell is simply mappable or object mappable. E.g. Integer[] or float[].&lt;/li&gt;
	&lt;li&gt;Mappable - This means simply, object, or output mappable.&lt;/li&gt;
	&lt;li&gt;Result set mappable - This means a single element array whose cell is a type which implements either java.sql.ResultSet or sqlj.runtime.ResultSetIterator.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Putting all of this together, section 4.5 continues:&lt;/p&gt;

&lt;p&gt;    &quot;A Java method with M parameters is mappable (to SQL) if and only if, for some N, 0 (zero) &amp;lt;= N &amp;lt;= M, the data types of the first N parameters are mappable, the last M - N parameters are result set mappable, and the result type is either simply mappable, object mappable, or void.&quot;&lt;/p&gt;

&lt;p&gt;Section 8.6 gives more detailed rules, but they are hard to follow. According to section 8.6, when resolving a routine invocation, Derby should expect to find one and only one static mappable method with the expected external name (Java class + method name).&lt;/p&gt;

&lt;p&gt;I believe that this is a fair description of the rules. This, at least, is what some other databases appear to do. See, for instance, &lt;a href=&quot;http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.ase_15.0.java/html/java/java126.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.ase_15.0.java/html/java/java126.htm&lt;/a&gt; and &lt;a href=&quot;http://www.service-architecture.com/database/articles/mapping_sql_and_java_data_types.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.service-architecture.com/database/articles/mapping_sql_and_java_data_types.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We do not have a regression test which verifies that Derby applies the SQL standard resolution rules. There may be several divergences from the standard. This JIRA is a place to track those discrepancies. Here is one that I have noticed:&lt;/p&gt;

&lt;p&gt;The following SQL signature&lt;/p&gt;

&lt;p&gt;( a int ) returns int&lt;/p&gt;

&lt;p&gt;should be mappable to any of the following Java signatures&lt;/p&gt;

&lt;p&gt;public static int f( int a )&lt;br/&gt;
public static int f( Integer a )&lt;br/&gt;
public static Integer f( int a )&lt;br/&gt;
public static Integer f( Integer a )&lt;/p&gt;

&lt;p&gt;However, I observe that Derby is only able to resolve the first and third signatures (the ones with primitive arguments). I will attach a test case showing this problem.&lt;/p&gt;

&lt;p&gt;I will also attach an html table summarizing the simply and object mappable rules.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12395004">DERBY-3652</key>
            <summary>Derby does not follow the SQL Standard when trying to map SQL routines to Java methods.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Apr 2008 20:27:07 +0100</created>
                <updated>Tue, 25 Jun 2013 10:01:52 +0100</updated>
                            <resolved>Sat, 13 Oct 2012 19:09:42 +0100</resolved>
                                    <version>10.5.1.1</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12593086" author="rhillegas" created="Tue, 29 Apr 2008 20:29:47 +0100"  >&lt;p&gt;Attaching SignatureMapping.html. This summarizes the simply mappable and object mappable rules.&lt;/p&gt;</comment>
                            <comment id="12593088" author="rhillegas" created="Tue, 29 Apr 2008 20:34:06 +0100"  >&lt;p&gt;Attaching a Java class (SignatureProblems.java) and sql script (signatureProblems.sql) which show the following problem:&lt;/p&gt;

&lt;p&gt;The following SQL signature&lt;/p&gt;

&lt;p&gt;( a int ) returns int&lt;/p&gt;

&lt;p&gt;should be mappable to any of the following Java signatures&lt;/p&gt;

&lt;p&gt;public static int f( int a )&lt;br/&gt;
public static int f( Integer a )&lt;br/&gt;
public static Integer f( int a )&lt;br/&gt;
public static Integer f( Integer a )&lt;/p&gt;

&lt;p&gt;However, I observe that Derby is only able to resolve the first and third signatures (the ones with primitive arguments). &lt;/p&gt;</comment>
                            <comment id="12593595" author="rhillegas" created="Thu, 1 May 2008 18:45:57 +0100"  >&lt;p&gt;Attaching derby-3652-01-aa-mixTypesOnFirstPass.diff. This makes a one line change to ClassInspector, which lets the attached problem case run correctly. I have not run regression tests yet. If this turns out to be the solution, we will need to add some more regression test cases.&lt;/p&gt;

&lt;p&gt;The changed line (in the method resolver) used to remove methods from consideration which had wrapper arguments rather than primitive arguments. According to the header comment on resolveMethod(), those methods were supposed to be considered during a second pass through the methods--but this check in the first pass effectively excluded these methods from later consideration. This logic is very tricky and not very well documented. I have changed a boolean argument from false to true. The meaning of this argument is &quot;consider matching wrappers as well as primitives&quot;. If I make this change, then the argument could actually be removed because the affected method would then always be called with the argument set to true. This change, however small, makes me uneasy. I will write some more tests to see if this change breaks anything obvious. However, it would be great if this tricky code could be explained by someone who has been through it before.&lt;/p&gt;</comment>
                            <comment id="12593806" author="rhillegas" created="Fri, 2 May 2008 17:18:29 +0100"  >&lt;p&gt;Attaching new version of SignatureMapping.html. The previous version located BigDecimal in the wrong package.&lt;/p&gt;</comment>
                            <comment id="12593836" author="rhillegas" created="Fri, 2 May 2008 19:07:12 +0100"  >&lt;p&gt;Attaching second rev of patch, derby-3652-01-ab-mixTypesOnFirstPass.diff. Again, no new tests yet. This version passes the regression tests. The first version failed because the database metadata inspection of indexes ended up relying on there being only one qualifying overload of IndexDescriptorImpl.getKeyColumnPosition(). Unfortunately, there are two which qualify under the ANSI method resolution rules, resulting in an ambiguity:&lt;/p&gt;

&lt;p&gt;public int getKeyColumnPosition(int heapColumnPosition)&lt;br/&gt;
public java.lang.Integer getKeyColumnPosition(java.lang.Integer heapColumnPosition)&lt;/p&gt;

&lt;p&gt;That is, internal Derby code relies on non-ANSI method resolution rules. Two approaches to this problem occurred to me:&lt;/p&gt;

&lt;p&gt;1) Rework the internal Derby methods to remove the ambiguities.&lt;/p&gt;

&lt;p&gt;2) Make the method resolver sensitive to whether it is resolving an internal Derby method--user written procedures and functions are not allowed to bind to internal Derby methods.&lt;/p&gt;

&lt;p&gt;I thought that (1) was a bit more straightforward but also more likely to have edge cases which we don&apos;t test for today. I opted for (2) as the less risky alternative.&lt;/p&gt;</comment>
                            <comment id="12593838" author="djd" created="Fri, 2 May 2008 19:15:32 +0100"  >&lt;p&gt;I would advise approach 1) I would guess there is no path to call the methods with the Integer signature.&lt;/p&gt;</comment>
                            <comment id="12593850" author="rhillegas" created="Fri, 2 May 2008 20:08:57 +0100"  >&lt;p&gt;Thanks for the feedback, Dan. Attaching a third rev of this patch, derby-3652-01-ac-mixTypesOnFirstPass.diff. This rev returns to the strategy of the first patch (always allowing the mixing of primitives with wrappers) but removes the Integer overload of IndexDescriptor.getKeyColumnPosition(). This involved adjusting a couple more files. Here are the contents of this third rev of the patch:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;Always allow mixing of primitives with wrappers when resolving method calls.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/IndexRowGenerator.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/IndexDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java&lt;/p&gt;

&lt;p&gt;Remove the Integer overload of IndexDescriptor.getKeyColumnPosition()&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java&lt;/p&gt;

&lt;p&gt;This is the beginning of a collection of methods which we can use to test our Ansi compliance.&lt;/p&gt;

&lt;p&gt;I&apos;m running regression tests now.&lt;/p&gt;</comment>
                            <comment id="12593906" author="rhillegas" created="Fri, 2 May 2008 22:52:56 +0100"  >&lt;p&gt;The regression tests pass with the third rev of the patch too.&lt;/p&gt;</comment>
                            <comment id="12595154" author="thomanie" created="Thu, 8 May 2008 09:45:09 +0100"  >&lt;p&gt;Even though it does not have &quot;patch available&quot; checked, I went ahead and tested the third patch.&lt;/p&gt;

&lt;p&gt;Regression tests run sucessfully for me as well, and the patch fixes the broken behavior for int/Integer mapping. I extended the attached SignatureProblems.java and accompanying sql script with double/Double mapping - which still work with the patch applied.&lt;/p&gt;

&lt;p&gt;+1 to commit the third patch as is, and follow up later with a proper test case.&lt;/p&gt;</comment>
                            <comment id="12595289" author="rhillegas" created="Thu, 8 May 2008 16:41:13 +0100"  >&lt;p&gt;Thanks for test-driving the patch, Thomas. I am still working on a systematic regression test for this behavior but I&apos;m back-logged because of Java One this week.&lt;/p&gt;</comment>
                            <comment id="12597576" author="rhillegas" created="Fri, 16 May 2008 19:47:33 +0100"  >&lt;p&gt;Attaching a set of files which demonstrate another violation of the ANSI signature matching rules: derby-3652-badmatches.diff and badsignatures.sql. To demonstrate the problems, first apply the diff file to your subversion client. This will add a test class AnsiSignatures which defines some user-coded methods. The diff file also adds a diagnostic line to ClassLister which prints out the signatures of methods that Derby manages to match. After applying this patch, run the sql script in order to demonstrate the problems.&lt;/p&gt;

&lt;p&gt;Briefly, this is the non-ANSI behavior which Derby currently supports:&lt;/p&gt;

&lt;p&gt;For routine arguments,&lt;/p&gt;

&lt;p&gt;  SQL smallint matches Java int&lt;br/&gt;
  SQL integer matches Java long&lt;br/&gt;
  SQL bigint matches Java float&lt;br/&gt;
  SQL real matches Java double&lt;/p&gt;</comment>
                            <comment id="12597588" author="rhillegas" created="Fri, 16 May 2008 20:34:50 +0100"  >&lt;p&gt;Marking the &quot;Existing Application Impact&quot; and &quot;Release Note Needed&quot; boxes.&lt;/p&gt;

&lt;p&gt;Fixing signature matching may affect existing applications as follows:&lt;/p&gt;

&lt;p&gt;1) Routines which previously failed to match may now successfully match user methods. I believe there is only a low probability that this will break existing applications.&lt;/p&gt;

&lt;p&gt;2) Routines which previously matched one user overload may now match another. I think the probability that this will break existing applications is greater but still low. However, the consequences of this change may be subtle mistakes which are not noticed for a long time.&lt;/p&gt;

&lt;p&gt;3) Routines which previously matched a user method may now not match at all. I think it is probable that this will break some existing applications.&lt;/p&gt;

&lt;p&gt;4) Routines which previously matched a single user method may now match more than one method and so raise an error. This situation has turned up in Derby&apos;s own code. I think it is probable that this will break some existing applications.&lt;/p&gt;

&lt;p&gt;The workaround for these problems is to recode affected applications to conform to the SQL standard behavior.&lt;/p&gt;

&lt;p&gt;I feel that these discrepancies are analogous to the following other kinds of fixes:&lt;/p&gt;

&lt;p&gt;(1) is similar to fixing a query which used to raise an exception but now succeeds.&lt;/p&gt;

&lt;p&gt;(2) is similar to fixing a query so that it now returns a different set of results.&lt;/p&gt;

&lt;p&gt;(3) and (4) are similar to fixing a syntax error which had allowed or even forced users to write illegal SQL.&lt;/p&gt;</comment>
                            <comment id="12597593" author="rhillegas" created="Fri, 16 May 2008 20:59:11 +0100"  >&lt;p&gt;Attaching a new rev of the patch for making it possible to mix primitives with wrapper types: derby-3652-01-ad-mixTypeOnFirstPass.diff. This is the same approach as the previous patch and, in addition, this version adds regression tests. Many of the tests have been commented out because of other bugs in signature matching which need to be fixed. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;This is the change to signature matching, making it possible to mix primitives and wrappers per the ANSI spec.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/IndexDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/IndexRowGenerator.java&lt;/p&gt;

&lt;p&gt;These edits remove the extra overload of getKeyColumnPosition() which caused a signature ambiguity under the ANSI rules.&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java&lt;/p&gt;

&lt;p&gt;These edits add a new set of regression tests (many commented out) to verify that the ANSI rules are applied.&lt;/p&gt;

&lt;p&gt;The new tests run cleanly for me standalone. I am now running the full regression suites. If the tests pass, I am inclined to commit this patch and move on to fixing other bugs in signature matching.&lt;/p&gt;</comment>
                            <comment id="12597708" author="thomanie" created="Sat, 17 May 2008 06:02:09 +0100"  >&lt;p&gt;Changes look ok, and regression tests pass. &lt;br/&gt;
+1 to commit.&lt;/p&gt;</comment>
                            <comment id="12597943" author="rhillegas" created="Mon, 19 May 2008 14:17:09 +0100"  >&lt;p&gt;Thanks for running the tests, Thomas. I saw one problem when I ran the tests:&lt;/p&gt;

&lt;p&gt;1) testAttributeAccumulatedConnectionCount(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)java.security.PrivilegedActionException: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-0119-f43a-1ef1-ffffe1d7aa3e&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getAttribute(MBeanTest.java:379)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeAccumulatedConnectionCount(NetworkServerMBeanTest.java:93)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:103)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-0119-f43a-1ef1-ffffe1d7aa3e&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1010)&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:627)&lt;br/&gt;
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:659)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest$4.run(MBeanTest.java:382)&lt;br/&gt;
	... 41 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 8062,  Failures: 0,  Errors: 1&lt;/p&gt;

&lt;p&gt;When I re-ran NetworkServerMBeanTest standalone, it passed. Since the tests ran cleanly for Thomas, I&apos;m inclined to believe that there is an instability in NetworkServerMBeanTest  that is not related to this patch.&lt;/p&gt;</comment>
                            <comment id="12597945" author="rhillegas" created="Mon, 19 May 2008 14:19:09 +0100"  >&lt;p&gt;Committed derby-3652-01-ad-mixTypeOnFirstPass.diff at subversion revision 657819.&lt;/p&gt;</comment>
                            <comment id="12598004" author="rhillegas" created="Mon, 19 May 2008 18:14:02 +0100"  >&lt;p&gt;Attaching derby-3652-02-aa-dontWidenExceptForSmallint.diff. This removes code which was matching small numeric args to bigger Java types. For instance, SQL INTEGER was able to match Java long. I removed this bad matching logic for INTEGER, BIGINT, REAL, and DOUBLE.&lt;/p&gt;

&lt;p&gt;When I removed the corresponding logic for SMALLINT, method resolution broke when CleanDatabaseTestSetup tried to call the system procedure SYSCS_INPLACE_COMPRESS_TABLE. According to the Reference Manual, the numeric arguments of this procedure are typed as SMALLINT. According to the ANSI rules, those args can match Java args of type short or java.lang.Integer. The Java signature for that method, however, presents int as the type of its numeric args. I think that the solution may be to redeclare the signatures of various Java methods in SystemProcedures so that they will match, under the ANSI rules, with the signatures described in the Reference Manual.&lt;/p&gt;

&lt;p&gt;In addition, the logic in ClassInspector.classConvertableFromTo() looks like it may match SQL character types to Java numeric types. This would violate the ANSI rules too. This needs to be looked into later.&lt;/p&gt;

&lt;p&gt;The signature test runs cleanly for me standalone. I will run the complete regression suites and see what breaks. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;Changes  ClassInspector.classConvertableFromTo() to not match smaller numeric types to larger numeric types.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;/p&gt;

&lt;p&gt;Uncommented most of the tests for signatures which are not supposed to find any matches.&lt;/p&gt;</comment>
                            <comment id="12598079" author="rhillegas" created="Mon, 19 May 2008 21:21:41 +0100"  >&lt;p&gt;Attaching second rev of the patch which prevents small numerics from matching larger numerics: derby-3652-02-ab-dontWidenExceptForSmalllint.diff. This revised patch fixes three tests which mistakenly registered Thread.sleep() as taking an int argument. To match under the ANSI rules, the argument should be declared as bigint instead. Touches the following additional files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/closed.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/store/lockTableVti.sql&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/store/onlineBackupTest2.sql&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/lockTableVti.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/onlineBackupTest2.out&lt;/p&gt;</comment>
                            <comment id="12598286" author="rhillegas" created="Tue, 20 May 2008 14:13:19 +0100"  >&lt;p&gt;Committed derby-3562-02-ab-dontWidenExceptForSmallint.diff at subversion revision 658232. The regression tests ran cleanly for me on this one.&lt;/p&gt;</comment>
                            <comment id="12598314" author="rhillegas" created="Tue, 20 May 2008 15:57:04 +0100"  >&lt;p&gt;Attaching derby-3652-03-aa-dontWidenSmallint.diff. This fixes type matching so that SQL SMALLINT only matches Java short and Integer per the ANSI spec. The signature test runs cleanly standalone. I am running the full regression suites now. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;This is the fix to limit the types that SMALLINT matches.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Changes the Java signatures of various system procedures. A number of these procedures use numeric arguments to encode BOOLEAN values. According to the Reference Manual, those arguments are declared to be SMALLINTs. However, for many of those procedures, the corresponding Java arguments are ints rather than shorts. This patches changes those ints to shorts.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;/p&gt;

&lt;p&gt;Uncomments several more tests. Two tests remain commented out because there are some situations involving SMALLINTs, where Derby wrongly finds a single matching signature instead of raising an exception complaining that more than one candidate matches.&lt;/p&gt;
</comment>
                            <comment id="12598377" author="rhillegas" created="Tue, 20 May 2008 19:13:35 +0100"  >&lt;p&gt;Attaching new version of previous patch: derby-3652-03-ab-dontWidenSmallint.diff. This changes the int argument to a smallint argument in the SYSCS_COMPRESS_TABLE system procedure, bringing it into agreement with what&apos;s documented in the Reference Manual.&lt;/p&gt;</comment>
                            <comment id="12598442" author="rhillegas" created="Tue, 20 May 2008 21:06:23 +0100"  >&lt;p&gt;Attaching a third version of  SignatureMapping.html. This clarifies the following ANSI behavior:&lt;/p&gt;

&lt;p&gt;1) First the interpreter should check for ambiguous parameter signatures. The interpreter should raise an error if more than 1 Java method has a matching signature--regardless of the return type.&lt;/p&gt;

&lt;p&gt;2) If there is only one candidate with a matching parameter signature, then the interpreter goes on to verify that the return type is mappable.&lt;/p&gt;

&lt;p&gt;This gives rise to the following behavior. Given this SQL declaration:&lt;/p&gt;

&lt;p&gt;  f( a int ) returns bigint&lt;/p&gt;

&lt;p&gt;and these two Java methods:&lt;/p&gt;

&lt;p&gt;  public static long f( int a ) &lt;/p&gt;
{...}&lt;br/&gt;
  public static int f( int a ) {...}

&lt;p&gt;Derby should object to the ambiguity of the signatures even though there is only one method which matches on both parameters and return type.&lt;/p&gt;</comment>
                            <comment id="12598461" author="rhillegas" created="Tue, 20 May 2008 21:58:18 +0100"  >&lt;p&gt;Committed derby-3652-03-ab-dontWidenSmallint.diff at subversion revision 658427. Regression tests passed cleanly for me.&lt;/p&gt;</comment>
                            <comment id="12598637" author="rhillegas" created="Wed, 21 May 2008 14:02:43 +0100"  >&lt;p&gt;Attaching derby-3652-04-11-deprecateJavaRules.diff. This removes a large chunk of code from ClassInspector.resolveMethod(). That chunk of code was responsible for applying Java signature matching rules to find a &quot;best fit&quot; signature. The ANSI signature matching rules have no concept of a &quot;best fit&quot;. Instead, the ANSI rules require that we raise an ambiguity exception if two signatures match. This is clarified in version 3 of the SignatureMapping.html summary. I am running regression tests now.&lt;/p&gt;</comment>
                            <comment id="12598688" author="rhillegas" created="Wed, 21 May 2008 16:42:57 +0100"  >&lt;p&gt;Regression tests ran cleanly for me. Committed derby-3652-04-aa-deprecateJavaRules.diff at subversion revision 658730.&lt;/p&gt;</comment>
                            <comment id="12598699" author="rhillegas" created="Wed, 21 May 2008 17:12:27 +0100"  >&lt;p&gt;Attaching derby-3652-05-aa-moreTests.diff, which I have committed at subversion revision 658736. This adds some more test cases and expands the existing test cases with more signatures. The test runs cleanly for me and since no other code is involved, I felt it was safe to commit this one. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java&lt;/p&gt;

&lt;p&gt;I have commented out one signature, however, because it discloses an additional bug which needs to be fixed:&lt;/p&gt;

&lt;p&gt;The following SQL declaration&lt;/p&gt;

&lt;p&gt;f( a varchar(10) ) returns varchar( 10 )&lt;/p&gt;

&lt;p&gt;correctly matches&lt;/p&gt;

&lt;p&gt;public static String f( String a ) &lt;/p&gt;
{ ... }&lt;br/&gt;
&lt;br/&gt;
but also incorrectly matches&lt;br/&gt;
&lt;br/&gt;
public static String f( Object a ) { ... }</comment>
                            <comment id="12598710" author="rhillegas" created="Wed, 21 May 2008 17:43:28 +0100"  >&lt;p&gt;Attaching derby-3652-06-aa-dontWidenString.diff. This fixes the bug described in the previous comment. This prevents String from being widened to Object during signature resolution. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;This prevents String from being widened to Object.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java&lt;/p&gt;

&lt;p&gt;This re-instates the problem signature which was commented-out in the previous patch.&lt;/p&gt;

&lt;p&gt;The signature test runs cleanly for me standalone. I am now running the regression suites.&lt;/p&gt;</comment>
                            <comment id="12598763" author="rhillegas" created="Wed, 21 May 2008 20:30:27 +0100"  >&lt;p&gt;Committed derby-3652-06-aa-dontWidenString.diff at subversion revision 658822. The tests ran cleanly for me except for an error in NetworkServerMBeanTest. The error does not recur when I run that test standalone. I believe there is an instability in this test:&lt;/p&gt;

&lt;p&gt;1) testAttributeAccumulatedConnectionCount(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)java.security.PrivilegedActionException: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-011a-0cdb-4f56-ffffe1d7aa3e&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getAttribute(MBeanTest.java:379)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeAccumulatedConnectionCount(NetworkServerMBeanTest.java:93)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:103)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-011a-0cdb-4f56-ffffe1d7aa3e&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1010)&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:627)&lt;br/&gt;
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:659)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest$4.run(MBeanTest.java:382)&lt;br/&gt;
	... 41 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 8079,  Failures: 0,  Errors: 1&lt;/p&gt;</comment>
                            <comment id="12599946" author="dagw" created="Tue, 27 May 2008 03:40:57 +0100"  >&lt;p&gt;I notice that AnsiSignatures.java have entries for the (wrapped)  Short type, but Short does not appear&lt;br/&gt;
in the mapping table. Are those entries redundant? The test ran OK even if I removed them..&lt;/p&gt;
</comment>
                            <comment id="12600152" author="rhillegas" created="Tue, 27 May 2008 16:15:21 +0100"  >&lt;p&gt;Thanks for looking at these patches, Dag. The signatures with Short args and return types are supposed to raise an alarm in the future in case someone changes the resolution logic so that Java Short becomes matchable to some SQL type.&lt;/p&gt;</comment>
                            <comment id="12600154" author="rhillegas" created="Tue, 27 May 2008 16:22:40 +0100"  >&lt;p&gt;Attaching derby-3652-07-aa-dontWidenBigDecimal.diff. This prevents the following illegal match, which used to be allowed:&lt;/p&gt;

&lt;p&gt;f( a numeric ) returns numeric&lt;/p&gt;

&lt;p&gt;used to match&lt;/p&gt;

&lt;p&gt;public static BigDecimal( Object a )&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;Prevents SQL NUMERIC from mapping to Java Object.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;/p&gt;

&lt;p&gt;Adds some test cases for NUMERIC.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java&lt;/p&gt;

&lt;p&gt;Adds some signatures to support the NUMERIC test cases. Also changes some existing methods (which don&apos;t match) so that they unilaterally return -1. This helps clarify what the expected mismatches are.&lt;/p&gt;</comment>
                            <comment id="12600224" author="rhillegas" created="Tue, 27 May 2008 19:08:45 +0100"  >&lt;p&gt;Tests ran cleanly for me. Committed derby-3652-07-aa-dontWidenBigDecimal at subversion revision 660630.&lt;/p&gt;</comment>
                            <comment id="12600634" author="rhillegas" created="Wed, 28 May 2008 23:32:53 +0100"  >&lt;p&gt;Attaching derby-3652-08-aa-dontWidenAtAll.diff. This completely removes the widening logic, which violates the ANSI rules. With this patch, I get a clean test run of AnsiSignaturesTest on a small device platform (phoneme_advanced_mr2-b34) and on a Java 5 platform. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;Removes the widening logic.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;/p&gt;

&lt;p&gt;Does not run the BigDecimal test on J2ME platforms since that test triggers bug &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3697&quot; title=&quot;Compiler exception when invoking a routine with  NUMERIC argument on J2ME&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3697&quot;&gt;&lt;del&gt;DERBY-3697&lt;/del&gt;&lt;/a&gt; on small device platforms.&lt;/p&gt;</comment>
                            <comment id="12600915" author="rhillegas" created="Thu, 29 May 2008 21:39:39 +0100"  >&lt;p&gt;Tests ran cleanly for me on Java 5. I also ran AnsiSignatureTest and RoutineTest on a Java ME platform and they passed cleanly with this patch. I&apos;m cautiously hopeful that this patch will fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3697&quot; title=&quot;Compiler exception when invoking a routine with  NUMERIC argument on J2ME&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3697&quot;&gt;&lt;del&gt;DERBY-3697&lt;/del&gt;&lt;/a&gt;. Committed derby-3652-08-aa-dontWidenAtAll.diff at subversion revision 661469.&lt;/p&gt;</comment>
                            <comment id="12603138" author="rhillegas" created="Fri, 6 Jun 2008 19:58:06 +0100"  >&lt;p&gt;Attaching derby-3652-09-aa-mixedTypes.diff. This adds two more test cases for signatures which mix types. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java&lt;/p&gt;

&lt;p&gt;These tests passed cleanly for me on Java 5 and on phoneME. Committed at subversion revision 664081.&lt;/p&gt;</comment>
                            <comment id="12607227" author="rhillegas" created="Mon, 23 Jun 2008 14:43:23 +0100"  >&lt;p&gt;Attaching derby-3652-10-aa-SignatureChecker.diff. This creates a lint tool, SignatureChecker and puts it in derbytools.jar. The tool walks all of the user-coded functions and procedures which have been registered in a database and verifies whether they can be matched to Java methods. I have successfully run the tool on Java 5 and on Java ME.&lt;/p&gt;

&lt;p&gt;I think that the tool is useful just by itself because it gives customers a test-time check for signature mismatches. That seems to me to be an improvement over the run-time checks which customers rely on today.&lt;/p&gt;

&lt;p&gt;I also think it would be good to recommend that customers run this tool on their databases (in soft-upgrade mode) to help verify that their routines have not been orphaned by enforcement of the ANSI signature checking rules.&lt;/p&gt;

&lt;p&gt;Here&apos;s the usage diagnostic in English:&lt;/p&gt;

&lt;p&gt;&quot;Usage if running on J2SE:&lt;/p&gt;

&lt;p&gt; 	java org.apache.derby.tools.SignatureChecker  CONNECTION_URL_TO_DATABASE&lt;/p&gt;

&lt;p&gt;Usage if running on J2ME:&lt;/p&gt;

&lt;p&gt; 	java org.apache.derby.tools.SignatureChecker DATABASE_NAME&quot;&lt;/p&gt;

&lt;p&gt;You can also run it using the derbyrun shortcut. E.g.:&lt;/p&gt;

&lt;p&gt;       java -jar trunk/jars/sane/derbyrun.jar SignatureChecker &quot;jdbc:derby:derby10.5&quot; &lt;/p&gt;

&lt;p&gt;Here&apos;s what a sample run looks like:&lt;/p&gt;

&lt;p&gt;Found a matching method for: &quot;APP&quot;.&quot;DOINSERT&quot;(  )&lt;br/&gt;
Found a matching method for: &quot;APP&quot;.&quot;DOINSERTANDCOMMIT&quot;(  )&lt;br/&gt;
Found a matching method for: &quot;APP&quot;.&quot;APPENDFOOANDBAR&quot;(  VARCHAR  )&lt;br/&gt;
Unresolvable routine: &quot;APP&quot;.&quot;IDONTEXIST&quot;(  VARCHAR ,  INTEGER  ). Detailed reason: No method was found that matched the method call z.iDontExist(java.lang.String, int), tried all combinations of object and primitive types and any possible type conversion for any  parameters the method call may have. The method might exist but it is not public and/or static, or the parameter types are not method invocation convertible.&lt;br/&gt;
Found a matching method for: &quot;APP&quot;.&quot;RUNDDL&quot;(  VARCHAR  )&lt;br/&gt;
Unresolvable routine: &quot;APP&quot;.&quot;TABFUNCDOESNTEXIST&quot;(  VARCHAR ,  BIGINT  ). Detailed reason: No method was found that matched the method call org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.appendFooAndBar(java.lang.String, long), tried all combinations of object and primitive types and any possible type conversion for any  parameters the method call may have. The method might exist but it is not public and/or static, or the parameter types are not method invocation convertible.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;A      java/tools/org/apache/derby/tools/SignatureChecker.java&lt;/p&gt;

&lt;p&gt;The guts of the tool. Various lookups are indirected through reflection so that the tool can be agnostic about whether it is running on J2SE or J2ME. In particular, the function-lookup logic depends on reflection--because the appropriate DatabaseMetaData methods don&apos;t appear in the JDBC interface until Java 6, even though implementations of the methods appear in our JSR169 client.&lt;/p&gt;

&lt;p&gt;M      java/tools/org/apache/derby/iapi/tools/run.java&lt;/p&gt;

&lt;p&gt;Wires the new tool into the derbyrun logic.&lt;/p&gt;

&lt;p&gt;M      java/tools/org/apache/derby/loc/toolsmessages.properties&lt;/p&gt;

&lt;p&gt;New localizable diagnostics.&lt;/p&gt;

&lt;p&gt;M      tools/jar/tools.properties&lt;/p&gt;

&lt;p&gt;Wires the tool into derbytools.jar.&lt;/p&gt;

</comment>
                            <comment id="12607271" author="rhillegas" created="Mon, 23 Jun 2008 16:54:34 +0100"  >&lt;p&gt;Attaching derby-3652-11-aa-binaryTests.diff. This adds some tests for BINARY, VARBINARY, and LONGVARBINARY parameters and return types. The tests ran cleanly for me under Java 5 and phoneME. Committed at subversion revision 670660. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;/p&gt;

&lt;p&gt;New test cases.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java&lt;/p&gt;

&lt;p&gt;Java methods which stand behind the new tests.&lt;/p&gt;

</comment>
                            <comment id="12608572" author="rhillegas" created="Thu, 26 Jun 2008 21:30:07 +0100"  >&lt;p&gt;Checked in the signature matching lint tool. Committed derby-2652-10-aa-SignatureChecker.diff at subversion revision 672019.&lt;/p&gt;</comment>
                            <comment id="12608581" author="rhillegas" created="Thu, 26 Jun 2008 22:04:04 +0100"  >&lt;p&gt;Attaching derby-3652-12-aa-charAndLongvarchar.diff. This patch adds some test cases for char and long varchar types. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java&lt;/p&gt;

&lt;p&gt;The signature mathing test ran cleanly for me on Java 5 and on PhoneME. Committed at subversion revision 672029.&lt;/p&gt;</comment>
                            <comment id="12608842" author="rhillegas" created="Fri, 27 Jun 2008 18:03:44 +0100"  >&lt;p&gt;Attaching derby-3652-13-aa-decimalDateTimestamp.diff. This adds signature matching tests for DECIMAL, DATE, TIME, and TIMESTAMP types. The signature matching test runs cleanly for me on Java 5 and on PhoneME. Committed at subversion revision 672323.&lt;/p&gt;</comment>
                            <comment id="12609240" author="rhillegas" created="Mon, 30 Jun 2008 15:36:03 +0100"  >&lt;p&gt;Attaching derby-3652-14-aa-blobClobTests.diff. This patch adds more Blob/Clob overloads for existing signatures and adds tests for functions which return Blob and Clob. These new tests, however, are commented out because they raise errors. I will log a separate bug to track those errors. With this patch, the signature matching test runs cleanly for me on Java 5 and PhoneME. Committed at subversion revision 672781.&lt;/p&gt;</comment>
                            <comment id="12678067" author="rhillegas" created="Mon, 2 Mar 2009 19:19:52 +0000"  >&lt;p&gt;Attaching a release note for this JIRA. The release note explains that signature matching now conforms to the SQL Standard. The note also introduces the SignatureChecker lint tool, which you can use to find user-defined routines which don&apos;t match Java methods.&lt;/p&gt;

&lt;p&gt;This issue still needs user documentation. I will file a new JIRA for that. Before writing that documentation, we should be clear on whether the LOB argument work (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4066&quot; title=&quot;Allow functions/procedures to take Blob/Clob arguments&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4066&quot;&gt;&lt;del&gt;DERBY-4066&lt;/del&gt;&lt;/a&gt;) is going to make it into 10.5.&lt;/p&gt;</comment>
                            <comment id="12679261" author="rhillegas" created="Thu, 5 Mar 2009 17:57:45 +0000"  >&lt;p&gt;Resolving this issue so that it will turn up in filters used to create the 10.5 release notes. More work still needs to be done in JIRAs linked to this issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12345532">DERBY-1483</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12390464">DERBY-3511</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12396926">DERBY-3694</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12399289">DERBY-3744</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12415386">DERBY-4068</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12530728">DERBY-5497</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12399112">DERBY-3737</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12415949">DERBY-4078</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12359485">DERBY-2201</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12397027">DERBY-3697</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12494619">DERBY-4958</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12415237">DERBY-4066</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12382410" name="SignatureMapping.html" size="7220" author="rhillegas" created="Tue, 20 May 2008 21:06:23 +0100"/>
                            <attachment id="12381320" name="SignatureMapping.html" size="6243" author="rhillegas" created="Fri, 2 May 2008 17:18:29 +0100"/>
                            <attachment id="12381132" name="SignatureMapping.html" size="6243" author="rhillegas" created="Tue, 29 Apr 2008 20:29:47 +0100"/>
                            <attachment id="12381134" name="SignatureProblems.java" size="395" author="rhillegas" created="Tue, 29 Apr 2008 20:34:06 +0100"/>
                            <attachment id="12382203" name="badsignatures.sql" size="2325" author="rhillegas" created="Fri, 16 May 2008 19:47:33 +0100"/>
                            <attachment id="12381259" name="derby-3652-01-aa-mixTypesOnFirstPass.diff" size="689" author="rhillegas" created="Thu, 1 May 2008 18:45:57 +0100"/>
                            <attachment id="12381327" name="derby-3652-01-ab-mixTypesOnFirstPass.diff" size="2418" author="rhillegas" created="Fri, 2 May 2008 19:07:11 +0100"/>
                            <attachment id="12381335" name="derby-3652-01-ac-mixTypesOnFirstPass.diff" size="10764" author="rhillegas" created="Fri, 2 May 2008 20:08:57 +0100"/>
                            <attachment id="12382209" name="derby-3652-01-ad-mixTypesOnFirstPass.diff" size="39041" author="rhillegas" created="Fri, 16 May 2008 20:59:11 +0100"/>
                            <attachment id="12382315" name="derby-3652-02-aa-dontWidenExceptForSmalllint.diff" size="4134" author="rhillegas" created="Mon, 19 May 2008 18:14:02 +0100"/>
                            <attachment id="12382329" name="derby-3652-02-ab-dontWidenExceptForSmalllint.diff" size="40125" author="rhillegas" created="Mon, 19 May 2008 21:21:41 +0100"/>
                            <attachment id="12382386" name="derby-3652-03-aa-dontWidenSmallint.diff" size="6311" author="rhillegas" created="Tue, 20 May 2008 15:57:04 +0100"/>
                            <attachment id="12382398" name="derby-3652-03-ab-dontWidenSmallint.diff" size="6512" author="rhillegas" created="Tue, 20 May 2008 19:13:35 +0100"/>
                            <attachment id="12382459" name="derby-3652-04-aa-deprecateJavaRules.diff" size="4880" author="rhillegas" created="Wed, 21 May 2008 14:02:43 +0100"/>
                            <attachment id="12382488" name="derby-3652-05-aa-moreTests.diff" size="32822" author="rhillegas" created="Wed, 21 May 2008 17:12:27 +0100"/>
                            <attachment id="12382492" name="derby-3652-06-aa-dontWidenString.diff" size="2313" author="rhillegas" created="Wed, 21 May 2008 17:43:28 +0100"/>
                            <attachment id="12382850" name="derby-3652-07-aa-dontWidenBigDecimal.diff" size="43056" author="rhillegas" created="Tue, 27 May 2008 16:22:40 +0100"/>
                            <attachment id="12382979" name="derby-3652-08-aa-dontWidenAtAll.diff" size="2943" author="rhillegas" created="Wed, 28 May 2008 23:32:53 +0100"/>
                            <attachment id="12383581" name="derby-3652-09-aa-mixedTypes.diff" size="2429" author="rhillegas" created="Fri, 6 Jun 2008 19:58:05 +0100"/>
                            <attachment id="12384494" name="derby-3652-10-aa-SignatureChecker.diff" size="23896" author="rhillegas" created="Mon, 23 Jun 2008 14:43:23 +0100"/>
                            <attachment id="12384504" name="derby-3652-11-aa-binaryTests.diff" size="8560" author="rhillegas" created="Mon, 23 Jun 2008 16:54:34 +0100"/>
                            <attachment id="12384791" name="derby-3652-12-aa-charAndLongvarchar.diff" size="4118" author="rhillegas" created="Thu, 26 Jun 2008 22:04:04 +0100"/>
                            <attachment id="12384850" name="derby-3652-13-aa-decimalDateTimeTimestamp.diff" size="37845" author="rhillegas" created="Fri, 27 Jun 2008 18:03:44 +0100"/>
                            <attachment id="12384957" name="derby-3652-14-aa-blobClobTests.diff" size="28755" author="rhillegas" created="Mon, 30 Jun 2008 15:36:03 +0100"/>
                            <attachment id="12382202" name="derby-3652-badmatches.diff" size="16247" author="rhillegas" created="Fri, 16 May 2008 19:47:33 +0100"/>
                            <attachment id="12401255" name="releaseNote.html" size="6591" author="rhillegas" created="Mon, 2 Mar 2009 19:19:52 +0000"/>
                            <attachment id="12381135" name="signatureProblems.sql" size="1000" author="rhillegas" created="Tue, 29 Apr 2008 20:34:06 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 2 May 2008 18:15:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23771</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0elj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36183</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>