<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:44:46 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3898/DERBY-3898.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3898] Blob.setBytes differs between embedded and client driver when the specified length is invalid</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3898</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Blob.setBytes behaves differently with the embedded driver and the client driver.&lt;br/&gt;
Assume a 1 byte array and a specified length of 2: Blob.setBytes(1, new byte[] &lt;/p&gt;
{0x69}
&lt;p&gt;, 0, 2)&lt;br/&gt;
Embedded: IndexOutOfBoundsException (from java.io.RandomAccessFile.writeBytes or System.arraycopy)&lt;br/&gt;
Client: succeeds, returns insertion count 1&lt;/p&gt;

&lt;p&gt;The behavior should be made consistent, but what is the correct behavior?&lt;/p&gt;

&lt;p&gt;From the Blob.setBytes JavaDoc:&lt;br/&gt;
&quot;Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes written. Writing starts at position pos in the BLOB  value; len bytes from the given byte array are written. The array of bytes will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached while writing the array of bytes, then the length of the Blob value will be increased to accomodate the extra bytes.&quot;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12405641">DERBY-3898</key>
            <summary>Blob.setBytes differs between embedded and client driver when the specified length is invalid</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yunlee">Yun Lee</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                            <label>BLOB</label>
                    </labels>
                <created>Thu, 2 Oct 2008 17:32:39 +0100</created>
                <updated>Mon, 29 Nov 2010 14:21:37 +0000</updated>
                            <resolved>Wed, 11 Aug 2010 18:04:58 +0100</resolved>
                                    <version>10.3.3.0</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.7.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12636507" author="dagw" created="Fri, 3 Oct 2008 02:01:17 +0100"  >&lt;p&gt;I would say Embedded is correct, taking System.arraycopy as an example of Java &quot;style&quot; in this&lt;br/&gt;
respect (leniency of &quot;array copy&quot; methods, of which setBytes is an instance). &lt;br/&gt;
Looking at Arrays#fill, it is similarly restrictive. &lt;/p&gt;</comment>
                            <comment id="12644108" author="kmarsden" created="Thu, 30 Oct 2008 21:07:34 +0000"  >&lt;p&gt;I found that DB2 with JCC does not throw an exception.  I am curious how other databases behave.  I am attaching a program to try in case someone else has access to another db and wants to try.&lt;/p&gt;</comment>
                            <comment id="12644282" author="knutanders" created="Fri, 31 Oct 2008 13:19:14 +0000"  >&lt;p&gt;MySQL (Connector/J 5.1.7) throws an IndexOutOfBoundsException.&lt;br/&gt;
PostgreSQL (JDBC4 Driver, Version 8.3-603) succeeds and returns 2 (two bytes are inserted, the extra byte is 0).&lt;/p&gt;</comment>
                            <comment id="12726916" author="kristwaa" created="Fri, 3 Jul 2009 12:48:01 +0100"  >&lt;p&gt;Triaged July 3, 2009: Assigned normal urgency. Marked as Newcomer, as I think this is easy to fix once the correct behavior has been determined.&lt;/p&gt;</comment>
                            <comment id="12728772" author="kmarsden" created="Wed, 8 Jul 2009 17:32:32 +0100"  >&lt;p&gt;Changing to normal urgency as comments say that was the intent for triage for 10.5.2&lt;/p&gt;</comment>
                            <comment id="12886709" author="yunlee" created="Fri, 9 Jul 2010 13:41:27 +0100"  >&lt;p&gt;When run org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest against Revision 962387, I have 7 errors on testFreeandMethodsAfterCallingFree(), testGetBinaryStreamLongLastByte(), testGetBinaryStreamLongDrain(), testSetBytesReturnValueLargeStateChange(), testLockingAfterFree(), testLockingAfterFreeWithRR() and testLockingAfterFreeWithDirtyReads(). They all are in NetworkServer mode, and throw the identifical java.lang.NoSuchMethodError: org.apache.derby.client.net.NetStatem&lt;br/&gt;
entRequest.writeScalarStream(ZZIILjava/io/InputStream;ZI)V. &lt;/p&gt;

&lt;p&gt;exception snippet is below:&lt;br/&gt;
4) testGetBinaryStreamLongLastByte(org.apache.derbyTesting.functionTests.tests.j&lt;br/&gt;
dbc4.BlobTest)java.lang.NoSuchMethodError: org.apache.derby.client.net.NetStatem&lt;br/&gt;
entRequest.writeScalarStream(ZZIILjava/io/InputStream;ZI)V&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.buildEXTDTA(NetStatem&lt;br/&gt;
entRequest.java:983)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetState&lt;br/&gt;
mentRequest.java:152)&lt;br/&gt;
        at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPre&lt;br/&gt;
paredStatement.java:178)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.writeExecute(PreparedSta&lt;br/&gt;
tement.java:1787)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStat&lt;br/&gt;
ement.java:2017)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeX(PreparedStateme&lt;br/&gt;
nt.java:1580)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatemen&lt;br/&gt;
t.java:1565)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testGetBin&lt;br/&gt;
aryStreamLongLastByte(BlobTest.java:451)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;/p&gt;


&lt;p&gt;But I have found writeScalarStream() method in NetStatementRequest actually. Is it OK on your computor, please?&lt;/p&gt;</comment>
                            <comment id="12886712" author="yunlee" created="Fri, 9 Jul 2010 13:51:05 +0100"  >&lt;p&gt;In derby-3898-testcase.patch, I have added 7 test cases in BlobTest.java to test the boundary of setBytes() method, each of them run in both Embed and NetworkServer modes. For the current revision, I get 2 erors and 1 failure. It suggests that there are 3 differences between embedded and client driver, 2 of them are about length, and the third is about offset. In particular, it works like below:&lt;/p&gt;

&lt;p&gt;a.&lt;br/&gt;
public void testSetBytesWithTooLongLength() throws SQLException {&lt;br/&gt;
        Blob blob = getConnection().createBlob();&lt;/p&gt;

&lt;p&gt;        try{&lt;br/&gt;
            blob.setBytes(1, new byte[] &lt;/p&gt;
{0x69}, 0, 2);&lt;br/&gt;
            fail(&quot;IndexOutOfBoundsException should be thrown out for &quot; +&lt;br/&gt;
                    &quot;wrong argument for Blob.setBytes()!&quot;);&lt;br/&gt;
        } catch (IndexOutOfBoundsException e) {
            assertTrue(true);
        }&lt;br/&gt;
    }&lt;br/&gt;
   This is what this issue is talking about. It has been agrred that &quot;Embedded is correct&quot; as it throws a IndexOutOfBoundsException by System.arrayCopy(). However, should it be wrapped into a SQLException with SQLState.BLOB_LENGTH_TOO_LONG to provide exact info.&lt;br/&gt;
&lt;br/&gt;
b.&lt;br/&gt;
public void testSetBytesWithNonPositiveLength() throws SQLException {&lt;br/&gt;
        Blob blob = getConnection().createBlob();&lt;br/&gt;
        &lt;br/&gt;
        try{&lt;br/&gt;
            blob.setBytes(1, new byte[] {0x69}
&lt;p&gt;, 0, -1);&lt;br/&gt;
        } catch (SQLException sqle) &lt;/p&gt;
{
            assertSQLState(&quot;XJ071&quot;, sqle);
        }
&lt;p&gt;    }&lt;br/&gt;
It passes in NetworkServer mode, but fails in Embed mode by throwing an ArrayIndexOutOfBoundsException. Obviously, in both modes Blob.setByets() has catch the nonpositive length, but it doesn&apos;t give a consistent exception. Maybe it&apos;s best to also throw out a SQLException. in Embed mode.&lt;/p&gt;

&lt;p&gt;c.&lt;br/&gt;
public void testSetBytesWithInvalidOffset() throws SQLException {&lt;br/&gt;
        Blob blob = getConnection().createBlob();&lt;/p&gt;

&lt;p&gt;        try {&lt;br/&gt;
            blob.setBytes(1, new byte[] &lt;/p&gt;
{0xb}, -1, 1);&lt;br/&gt;
        } catch (SQLException sqle) {
            assertSQLState(&quot;XJ078&quot;, sqle);
        }&lt;br/&gt;
        &lt;br/&gt;
        try {&lt;br/&gt;
            blob.setBytes(1, new byte[] {0xb}
&lt;p&gt;, 2, 1);&lt;br/&gt;
        } catch (SQLException sqle) &lt;/p&gt;
{
            assertSQLState(&quot;XJ078&quot;, sqle);
        }&lt;br/&gt;
        &lt;br/&gt;
        try {&lt;br/&gt;
            blob.setBytes(1, new byte[] {0xb, 0xe}, Integer.MAX_VALUE, 1);&lt;br/&gt;
        } catch (SQLException sqle) {
            assertSQLState(&quot;XJ078&quot;, sqle);
        }
&lt;p&gt;    }&lt;br/&gt;
As b., c. passes in NetworkServer mode, but fails in Embed mode by throwing an ArrayIndexOutOfBoundsException. Obviously, in both modes Blob.setByets() has catch the nonpositive length, but it doesn&apos;t give a consistent exception. Maybe it&apos;s best to also throw out a SQLException in Embed mode.&lt;/p&gt;

&lt;p&gt;Should we create two new issues for b. and c. and provide the same patch for 3 of them? And welcome to enrich relative test cases before patch available!&lt;/p&gt;</comment>
                            <comment id="12887727" author="kristwaa" created="Tue, 13 Jul 2010 13:09:00 +0100"  >&lt;p&gt;Hi Yun,&lt;/p&gt;

&lt;p&gt;I&apos;m really not sure what to say here. Both approaches have merit:&lt;br/&gt;
 o ArrayIndexOutOfBounds : well known pattern from Java, may simplify the input validation code in Derby&lt;br/&gt;
 o SQLException : follows JDBC pattern, higher chance that the exception will be caught and dealt with&lt;/p&gt;

&lt;p&gt;Since the problem in this case isn&apos;t really database related, I&apos;m leaning towards AIOOB (as Dag commented too). Funnily enough, the embedded driver is throwing an SQLException, catching it and then throwing an AIOOB.&lt;br/&gt;
If anyone else has opinions it would be nice if you share them now such that we can allow Yun to continue work on this issue.&lt;/p&gt;

&lt;p&gt;When it comes to the test code, I have the following comments:&lt;br/&gt;
 a) I don&apos;t see the point of statements like &apos;assertTrue(true)&apos;. Why not simply add a comment?&lt;br/&gt;
 b) For tests like the one below, you should add a fail() statement in case the setBytes-method doesn&apos;t throw an exception.&lt;/p&gt;

&lt;p&gt;+        try {&lt;br/&gt;
+            blob.setBytes(1, new byte[] &lt;/p&gt;
{0xb}
&lt;p&gt;, -1, 1);&lt;br/&gt;
+        } catch (SQLException sqle) &lt;/p&gt;
{
+            assertSQLState(&quot;XJ078&quot;, sqle);
+        }

&lt;p&gt; c) If the tests don&apos;t use any API methods from JDBC 4, we usually add them to jdbcapi instead of jdbc4. That way, the tests are run also when the JDK version is 1.4 or 1.5. Are there any suitable existing test classes in jdbcapi?&lt;/p&gt;

&lt;p&gt;I think the problems you had with NoSuchMethod errors were caused by a bad build. Some times it is good to run &apos;ant clobber&apos; (or &apos;ant clobber all buildjars&apos;) to recompile all classes.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12888321" author="yunlee" created="Wed, 14 Jul 2010 13:48:14 +0100"  >&lt;p&gt;Thanks for your comment, Kristian.&lt;/p&gt;

&lt;p&gt;NoSuchMethod errors have dissappeared after clean and rebuild.&lt;/p&gt;

&lt;p&gt;I agree with your opinion on test code, and will provide a new patch for them.&lt;/p&gt;

&lt;p&gt;org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest is used to test the JDBC 4.0 specific &amp;lt;code&amp;gt;Blob&amp;lt;/code&amp;gt; methods, it does be not suitable to place the additional boundary test cases for setBytes(). Is it OK to use the test class org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest.java? Now BlobSetMethodsTest has only two test case for Blob.setBytes(), and it only uses a JDBC4 specific mothod Connection.createBlob() , maybe BlobSetMethodsTest can be changed to use only JDBC3 API and  moved into package org.apache.derbyTesting.functionTests.tests.jdbcapi, and insert additional test cases into it?&lt;/p&gt;

&lt;p&gt;Others&apos; opinions on choice between SQLException and AIOOB is welcome! Thanks!&lt;/p&gt;</comment>
                            <comment id="12896352" author="yunlee" created="Sun, 8 Aug 2010 14:40:48 +0100"  >&lt;p&gt;In the new patch, BlobSetBytesBoundaryTest.java has been added to run Boundary tests for Blob.setBytes(). &lt;/p&gt;

&lt;p&gt;Overall boundary check has been done in Blob.setBytes() and EmbedBlob.setBytes().Now they can perform accordingly, not only for too big length, but also for offset and pos.&lt;/p&gt;

&lt;p&gt;I have run relative tests, they were all OK. Please check it, thanks!&lt;/p&gt;</comment>
                            <comment id="12897340" author="myrna" created="Wed, 11 Aug 2010 18:03:52 +0100"  >&lt;p&gt;switching off patch available - I commetted the latest patch with revision 984472.&lt;/p&gt;</comment>
                            <comment id="12897341" author="myrna" created="Wed, 11 Aug 2010 18:04:58 +0100"  >&lt;p&gt;Setting to resolved, but leave this for Kristian (as reporter of the bug) to confirm &amp;amp; close.&lt;br/&gt;
Does this need to get backported?&lt;/p&gt;</comment>
                            <comment id="12899351" author="knutanders" created="Tue, 17 Aug 2010 10:06:42 +0100"  >&lt;p&gt;One small corner case: The patch checks whether (len + offset &amp;gt; bytes.length) is true to detect if the sum of len and offset exceeds the length of the byte buffer. However, if the sum of len and offset is greater than Integer.MAX_VALUE, (len + offset) will overflow and return a negative result. Since a negative value will not be considered greater than bytes.length, the check will fail to detect that the sum is too big.&lt;/p&gt;

&lt;p&gt;Example that shows the bug:&lt;/p&gt;

&lt;p&gt;    blob.setBytes(1, new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;100&amp;#93;&lt;/span&gt;, 10, Integer.MAX_VALUE);&lt;/p&gt;

&lt;p&gt;The above statement will fail with an IndexOutOfBoundsException on the embedded driver. On the client driver, no error is raised at all. The expected result is an SQLException.&lt;/p&gt;

&lt;p&gt;I&apos;ve attached a patch which fixes the problem by changing (len + offset &amp;gt; bytes.length) to (len &amp;gt; bytes.length - offset). Since we know at this point in the code that both bytes.length and offset are non-negative, we also know that (bytes.length - offset) cannot overflow. The patch also adds a test case for the bug.&lt;/p&gt;</comment>
                            <comment id="12899362" author="knutanders" created="Tue, 17 Aug 2010 11:07:59 +0100"  >&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="12899366" author="knutanders" created="Tue, 17 Aug 2010 11:20:53 +0100"  >&lt;p&gt;One other small issue. BlobSetBytesBoundaryTest was added to the list of tests that are not run on Java ME. I successfully ran the test on phoneME, so I assume that was unintentional. The attached patch (enable-javame.diff) adds the test to the jdbcapi suite also on Java ME. Committed revision 986260.&lt;/p&gt;</comment>
                            <comment id="12899372" author="yunlee" created="Tue, 17 Aug 2010 12:04:04 +0100"  >&lt;p&gt;That&apos;s right, thanks, Knut.&lt;/p&gt;</comment>
                            <comment id="12899429" author="knutanders" created="Tue, 17 Aug 2010 15:58:50 +0100"  >&lt;p&gt;Committed overflow.diff with revision 986345.&lt;/p&gt;</comment>
                            <comment id="12928571" author="kristwaa" created="Fri, 5 Nov 2010 12:15:56 +0000"  >&lt;p&gt;As an invalid length must be specified to trigger this difference between the drivers, backporting it is not justified for me.&lt;br/&gt;
If anyone else want to do so, feel free to reopen the issue and do the work.&lt;/p&gt;

&lt;p&gt;Closing issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="32841">DERBY-310</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12461296">DERBY-4609</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12393105" name="Derby3898.java" size="1204" author="kmarsden" created="Thu, 30 Oct 2008 21:07:34 +0000"/>
                            <attachment id="12451516" name="derby-3898-1.patch" size="13090" author="yunlee" created="Sun, 8 Aug 2010 14:40:48 +0100"/>
                            <attachment id="12451515" name="derby-3898-1.stat" size="383" author="yunlee" created="Sun, 8 Aug 2010 14:40:48 +0100"/>
                            <attachment id="12449083" name="derby-3898-testcase.patch" size="3137" author="yunlee" created="Fri, 9 Jul 2010 13:51:05 +0100"/>
                            <attachment id="12449082" name="derby-3898-testcase.stat" size="84" author="yunlee" created="Fri, 9 Jul 2010 13:51:05 +0100"/>
                            <attachment id="12452273" name="enable-javame.diff" size="927" author="knutanders" created="Tue, 17 Aug 2010 11:20:53 +0100"/>
                            <attachment id="12452270" name="overflow.diff" size="2128" author="knutanders" created="Tue, 17 Aug 2010 10:06:42 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Oct 2008 01:01:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23908</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0osf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37834</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>