<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:15:39 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1559/DERBY-1559.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1559] when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1559</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When streaming a BLOB from the Network Client to the Network Server, the Network server currently read all the data from the stream and put it into a byte array.&lt;br/&gt;
The blob data is then inserted into the DB by using&lt;br/&gt;
PreparedStatement.setBytes(..)&lt;/p&gt;

&lt;p&gt;and later&lt;/p&gt;

&lt;p&gt;PreparedStatement.execute()&lt;/p&gt;

&lt;p&gt;To avoid OutOfMemoryError if the size of the Blob is &amp;gt; than total memory in the VM, we could make the network server create a stream which reads data when doing PreparedStatement.execute().  The DB will then stream the BLOB data directly from the network inputstream into the disk.&lt;/p&gt;

&lt;p&gt;I intent to make a patch which does this if there is only one EXTDTA object (BLOB) sent from the client in the statement, as it will simplify the implementation. Later this can be improved  further to include CLOBs, and possibly to include the cases where there are multiple EXTDTA objects.&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;br/&gt;
CLOBs are more complex, as there need to be some character encoding. This can be achieved by using a InputStreamReader,  and use PreparedStatement.setCharacterStream(..). However the size of the stream is not necessarily the same as the size of the raw binary data, and to do this for CLOBs, I would need the embedded prepared statements to support the new setCharacterStream() overloads in JDBC4 (which do not include a length atribute)&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
Multiple EXTDATA objects are also more complex, since one would need to have fully read the previous object ,before it is possible to read the next.&lt;br/&gt;
&amp;#8211;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12346417">DERBY-1559</key>
            <summary>when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12314092">DERBY-550</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="andreask">Andreas Korneliussen</assignee>
                                    <reporter username="andreask">Andreas Korneliussen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 21 Jul 2006 13:05:22 +0100</created>
                <updated>Mon, 4 Sep 2006 13:04:24 +0100</updated>
                            <resolved>Mon, 4 Sep 2006 13:04:07 +0100</resolved>
                                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.2.2.0</fixVersion>
                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12423844" author="andreask" created="Thu, 27 Jul 2006 15:27:32 +0100"  >&lt;p&gt;Attached is a patch which does the following:&lt;/p&gt;

&lt;p&gt;EXTDTAReaderInputStream: this is a new class which is a subclass of InputStream. It is capable of reading EXTDTA from the network using the DDMReader.&lt;/p&gt;

&lt;p&gt;DDMReader: added helper methods to create EXTDTAReaderInputStream and to let it fetch more data&lt;/p&gt;

&lt;p&gt;DRDAConnThread: &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;When handling a EXCSQLSTT request DRDAConnThread will do an execute of the statement right after calling readAndSetAllExtParams(..). This is because the call to stmt.execute() will start the stream of the LOB data.  readAndSetExtParam (..) is implemented so that it will only do streaming of LOB on the last EXTDTA parameter, otherwise it will use the old mechanism of streaming all and creating a byte-array.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Using this patch, I have successfully inserted a 1GB blob streamed from the Network client to the Network server, running the Network server with 64MB of max heap space. I have also run derbyall with this patch, with no failures.&lt;/p&gt;</comment>
                            <comment id="12423866" author="naka" created="Thu, 27 Jul 2006 16:59:02 +0100"  >&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;, it was suggested that Engine itself takes more amount of memory in the case ps.setBytes was called than in the case ps.setBinaryStream was called.&lt;br/&gt;
Then, there are room to improve memory usage in multiple EXDTA, just by calling ps.setBinaryStream with ByteArrayInputStream object which interfaces byte[] paramBytes, instead of ps.setBytes.&lt;/p&gt;

&lt;p&gt;However, interfacing byte array via ByteArrayInputStream is a temporary measure before multiple EXTDTA are streamed. Then, multiple EXDTA streaming is prefered, if we could achieve it ...&lt;/p&gt;
</comment>
                            <comment id="12423868" author="andreask" created="Thu, 27 Jul 2006 17:08:55 +0100"  >&lt;p&gt;Thanks&lt;br/&gt;
I will update the patch to follow the approach suggested in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; when receiving multiple EXTDTA.&lt;/p&gt;</comment>
                            <comment id="12428076" author="andreask" created="Tue, 15 Aug 2006 09:55:56 +0100"  >&lt;p&gt;Attached is an updated patch which preserves the changes in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; when receiving multiple EXTDTA objects.&lt;/p&gt;</comment>
                            <comment id="12428150" author="naka" created="Tue, 15 Aug 2006 16:09:18 +0100"  >&lt;p&gt;I measured the execution of BlobOutOfMem.java with the patch of  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt;v2.diff.&lt;/p&gt;

&lt;p&gt;I attach the chart of it.&lt;br/&gt;
As the chart tolds,memory less than 64m was needed in Network Server to execute BlobOutOfMmem.java with the patch.&lt;/p&gt;</comment>
                            <comment id="12429000" author="andreask" created="Fri, 18 Aug 2006 14:19:23 +0100"  >&lt;p&gt;I will consider committing the patch next week, unless anyone objects.&lt;/p&gt;</comment>
                            <comment id="12429384" author="naka" created="Mon, 21 Aug 2006 11:49:40 +0100"  >&lt;p&gt;Hello,  Andreas.&lt;/p&gt;

&lt;p&gt;Discussion in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; resulted to the answer that we need to solve &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; &lt;br/&gt;
before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; will cause difference in compatibility of types and &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;, which is the issue around difference in compatibility of types between Network and Embedded ,is required to be solved in order to accept that difference.&lt;/p&gt;

&lt;p&gt;Now it is not completely decided extent of modification in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; and I will post my plan in soon.&lt;br/&gt;
If you have some opinion for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;, please comment it.&lt;/p&gt;</comment>
                            <comment id="12429394" author="andreask" created="Mon, 21 Aug 2006 12:32:59 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; caused conflicts with this patch during development. Now, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; will cause conflicts with it. I think this patch is bigger, and more complex than the patches in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;, so it is probably better to commit this patch first, then update, resolve conflicts, and commit the patch in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Is that ok ?&lt;/p&gt;</comment>
                            <comment id="12429403" author="naka" created="Mon, 21 Aug 2006 13:13:11 +0100"  >&lt;p&gt;Well.....&lt;/p&gt;

&lt;p&gt;If &lt;b&gt;you&lt;/b&gt; don&apos;t think the difference of DerbyNetClient/parameterMapping.out is critically harmful,&lt;br/&gt;
which was introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; before, I think it is OK for you to commit &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It is your judgement....&lt;/p&gt;

&lt;p&gt;The background is that &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; also would require the difference of DerbyNetClient/parameterMapping.out and &lt;br/&gt;
committing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; will strengthen the difference.&lt;/p&gt;

&lt;p&gt;If you think difference of DerbyNetClient/parameterMapping.out is critically harmful, &lt;br/&gt;
please do not commit patch of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; and wait for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
Otherwise you would make unexpected reason for a problem against your will.&lt;/p&gt;

&lt;p&gt;However opinion for that difference may differ betweeen people...&lt;br/&gt;
Then I left judge for you.&lt;/p&gt;

&lt;p&gt;At least for me, through discussion in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;, think already applied difference in DerbyNetClient/parameterMapping.out is unfinished and much more difference is needed.&lt;br/&gt;
and think it should be rollbacked and applied in once if possible.&lt;/p&gt;</comment>
                            <comment id="12429406" author="andreask" created="Mon, 21 Aug 2006 13:30:59 +0100"  >&lt;p&gt;I will wait for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; being fixed, to avoid the risk.&lt;/p&gt;</comment>
                            <comment id="12429735" author="naka" created="Tue, 22 Aug 2006 16:03:01 +0100"  >&lt;p&gt;I rollbacked &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1513&quot; title=&quot;Trial 1 for DERBY-550&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1513&quot;&gt;&lt;del&gt;DERBY-1513&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
I think it will make a conflict on this issue.&lt;/p&gt;

&lt;p&gt;Please take your attention for it.&lt;/p&gt;</comment>
                            <comment id="12430023" author="andreask" created="Wed, 23 Aug 2006 15:56:40 +0100"  >&lt;p&gt;Attached is an updated patch were the conflicts from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; has been resolved.&lt;/p&gt;

&lt;p&gt;Additionally, to avoid the failures in jdbcapi/parameterMapping, I have modified the code so that it does only use setBinaryStream if it is a BLOB columns, otherwise it continues to use setBytes.&lt;/p&gt;

&lt;p&gt;I have also done some memory profiling, were the code inserts one BLOB of size 64 MB streamed from the network client. &lt;/p&gt;

&lt;p&gt;The results are:&lt;br/&gt;
Without any changes: max memory usage 350 MB&lt;/p&gt;

&lt;p&gt;With a special patch were setBytes was replaced by setBinaryStream: 176 MB&lt;/p&gt;

&lt;p&gt;With this patch: 40 MB.&lt;/p&gt;</comment>
                            <comment id="12430034" author="naka" created="Wed, 23 Aug 2006 16:49:56 +0100"  >&lt;p&gt;I think of committing your v3 patch and filing new issue that there remains room to improve memory usage,&lt;br/&gt;
 only if we finish &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; and remove use of setBytes.&lt;/p&gt;
</comment>
                            <comment id="12430147" author="bryanpendleton" created="Thu, 24 Aug 2006 03:07:21 +0100"  >&lt;p&gt;Hi Andreas, I read your patch and I think it looks quite good. &lt;/p&gt;

&lt;p&gt;I worry about potentially losing valuable information from the DRDAProtocolException&lt;br/&gt;
instance when we catch it and transform it into an IOException.&lt;/p&gt;

&lt;p&gt;Two possible ideas:&lt;br/&gt;
1) Use initCause() to embed the DRDAProtocolException into the IOException,&lt;br/&gt;
although maybe that&apos;s off limits because it&apos;s a 1.4 feature?&lt;br/&gt;
2) Before throwing the IOException, inside the catch block for the DRDAProtocolException,&lt;br/&gt;
log the full DRDAProtocolException somewhere. This might mean that when you&lt;br/&gt;
construct an EXTDTAReaderInputStream instance, you pass it some sort of&lt;br/&gt;
callback hook that gives it access to the Network Server&apos;s error log / console.&lt;/p&gt;</comment>
                            <comment id="12430265" author="andreask" created="Thu, 24 Aug 2006 16:12:36 +0100"  >&lt;p&gt;Thanks for reviewing the patch. Attached is a patch where I try to address the issue w.r.t preserving the information in the DRDAProtocolException, if thrown during streaming. The DRDAProtocolException will be logged from the DDMReader, which has access to the DRDAConnThread, before being thrown again. &lt;/p&gt;

&lt;p&gt;I have also considered some other options, like making DRDAProtocolException inherit from IOException or make a new IOException subclass, which is able to preserve the stack trace from the cause (in JDK 1.3). I did not do that, since&lt;br/&gt;
1. by making DRDAProtocolException inherit from IOException, I would proably need to go through all code and check for catching of IOException (which then would also catch DRDAProtocolException)&lt;br/&gt;
2. since we probably soon will stop supporting 1.3, I did not create a new IOException subclass.&lt;/p&gt;

&lt;p&gt;(ironically DRDAProtocolException seems to usually be thrown as a consequence of an IOException)&lt;/p&gt;</comment>
                            <comment id="12430363" author="bryanpendleton" created="Fri, 25 Aug 2006 00:46:19 +0100"  >&lt;p&gt;Thanks Andreas. I fear I was perhaps a little vague in my previous comment.&lt;/p&gt;

&lt;p&gt;The code I was concerned about was the code in EXTDTAReaderInputStream.java that looks like:&lt;/p&gt;

&lt;p&gt; } catch (DRDAProtocolException e) &lt;/p&gt;
{
            throw new IOException(e.getMessage());
 }

&lt;p&gt;which is a pattern that occurs in several places in that class.&lt;/p&gt;

&lt;p&gt;I was concerned that all the information we were extracting from the exception object &quot;e&quot;&lt;br/&gt;
was the getMessage() string, and were hence losing the stack trace of where exactly&lt;br/&gt;
the original DRDAProtocolException was thrown.&lt;/p&gt;

&lt;p&gt;I was suggesting that we might change that code into:&lt;/p&gt;

&lt;p&gt; } catch (DRDAProtocolException e) &lt;/p&gt;
{
            throw new IOException(e.getMessage(), e);
 }

&lt;p&gt;so that exception &apos;e&apos; would be recorded as the &quot;cause&quot; of the new IOException,&lt;br/&gt;
but this would require using the new JDK 1.4 version of the constructor, so&lt;br/&gt;
instead we might try to figure out some other way to capture the stack trace&lt;br/&gt;
information from the exception &quot;e&quot;.&lt;/p&gt;

&lt;p&gt;Does my comment make more sense now?&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="12430431" author="andreask" created="Fri, 25 Aug 2006 08:55:27 +0100"  >&lt;p&gt;Hi,&lt;br/&gt;
I thought I had addressed the comment by capturing the stack trace in DDMReader.readLobContiniationStream(). That is the only call that EXTDTAReaderInputStream makes, which can throw DRDAProtocolException.&lt;/p&gt;</comment>
                            <comment id="12430516" author="bryanpendleton" created="Fri, 25 Aug 2006 15:19:29 +0100"  >&lt;p&gt;Yes, I understand now. I was just looking at the new class in a static fashion, and not&lt;br/&gt;
really understanding where the DRDAProtocolException was coming from. Thanks for the clarification.&lt;/p&gt;

&lt;p&gt;Now your other comment &lt;/p&gt;

&lt;p&gt;&amp;gt; (ironically DRDAProtocolException seems to usually be thrown as a consequence of an IOException)&lt;/p&gt;

&lt;p&gt;makes a lot more sense, too.&lt;/p&gt;

&lt;p&gt;One last thought, then: does it make any sense to have DDMReader.readLobContinuationString&lt;br/&gt;
throw an IOException rather than a DRDAProtocolException?&lt;/p&gt;

&lt;p&gt;Then you wouldn&apos;t need any try/catch blocks in EXTDTAReaderInputStream at all, but could just&lt;br/&gt;
allow the IOExceptions to escape upward to wherever they will be caught higher up in the stack.&lt;/p&gt;</comment>
                            <comment id="12430519" author="andreask" created="Fri, 25 Aug 2006 15:29:06 +0100"  >&lt;p&gt;&amp;gt; One last thought, then: does it make any sense to have DDMReader.readLobContinuationString&lt;br/&gt;
&amp;gt; throw an IOException rather than a DRDAProtocolException?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Then you wouldn&apos;t need any try/catch blocks in EXTDTAReaderInputStream at all, but could just&lt;br/&gt;
&amp;gt; allow the IOExceptions to escape upward to wherever they will be caught higher up in the stack.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;Yes, that makes sense. I will try that out.&lt;br/&gt;
Thanks.,&lt;/p&gt;

&lt;p&gt;Andreas&lt;/p&gt;</comment>
                            <comment id="12430964" author="andreask" created="Mon, 28 Aug 2006 11:51:10 +0100"  >&lt;p&gt;Attached patch makes DDMReader handle the DRDAProtocolException, and throws IOException from it, instead of doing it from the stream class.&lt;/p&gt;</comment>
                            <comment id="12430983" author="bryanpendleton" created="Mon, 28 Aug 2006 15:17:41 +0100"  >&lt;p&gt;Thanks Andreas! The v5 patch fully addresses my concern about the exception &lt;br/&gt;
signatures in EXTDTAReaderInputStream. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12431227" author="andreask" created="Tue, 29 Aug 2006 12:41:59 +0100"  >&lt;p&gt;Thanks for the review.&lt;br/&gt;
I will run some tests, and then commit the patch on the trunk.&lt;/p&gt;</comment>
                            <comment id="12431263" author="andreask" created="Tue, 29 Aug 2006 15:54:40 +0100"  >&lt;p&gt;Found a bug while testing the patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt;v5.diff:&lt;/p&gt;

&lt;p&gt;In case of an DRDAProtoclException while doing the streaming of the data, the DDMReader.readLOBContinuationStream(.) method called agent.handleException(..).  This will cause the connection to be rolled back from within the stream (within an execute statement), and the engine throws an exception:&lt;/p&gt;

&lt;p&gt;Execution failed because of Permanent Agent Error: SVRCOD = 40; RDBNAM = /export/home/tmp/db/bigdb2;create=true; diagnostic msg  = Cannot issue rollback in a nested connection when there is a pending operation in the parent connection.&lt;br/&gt;
org.apache.derby.impl.drda.DRDAProtocolException: Execution failed because of Permanent Agent Error: SVRCOD = 40; RDBNAM = /exp ort/home/tmp/db/bigdb2;create=true; diagnostic msg = Cannot issue rollback in a nested connection when there is a pending opera tion in the parent connection.&lt;/p&gt;

&lt;p&gt;The side-effect of this error is quite severe, since it seems that the connection will never be rolled back.&lt;/p&gt;

&lt;p&gt;The attached patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt;v6.diff addresses this by having DDMReader.readLOBContinuationStream(.)  only log the exception.  The connection will be rolled back later by DRDAConnectionThread when the exception comes out from statement.execute().&lt;/p&gt;</comment>
                            <comment id="12431577" author="andreask" created="Wed, 30 Aug 2006 14:04:11 +0100"  >&lt;p&gt;Committed revision 438478 at trunk.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12346905">DERBY-1610</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12337636" name="DERBY-1559.diff" size="18244" author="andreask" created="Thu, 27 Jul 2006 15:27:32 +0100"/>
                            <attachment id="12337637" name="DERBY-1559.stat" size="262" author="andreask" created="Thu, 27 Jul 2006 15:27:32 +0100"/>
                            <attachment id="12338869" name="DERBY-1559v2.diff" size="18234" author="andreask" created="Tue, 15 Aug 2006 09:55:56 +0100"/>
                            <attachment id="12339416" name="DERBY-1559v3.diff" size="18248" author="andreask" created="Wed, 23 Aug 2006 15:56:40 +0100"/>
                            <attachment id="12339497" name="DERBY-1559v4.diff" size="18631" author="andreask" created="Thu, 24 Aug 2006 16:12:36 +0100"/>
                            <attachment id="12339689" name="DERBY-1559v5.diff" size="18256" author="andreask" created="Mon, 28 Aug 2006 11:51:10 +0100"/>
                            <attachment id="12339780" name="DERBY-1559v6.diff" size="18007" author="andreask" created="Tue, 29 Aug 2006 15:54:40 +0100"/>
                            <attachment id="12338898" name="serverMemoryUsage.xls" size="2731008" author="naka" created="Tue, 15 Aug 2006 16:09:18 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 27 Jul 2006 15:59:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30053</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy14pb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40412</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>