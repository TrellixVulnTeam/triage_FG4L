<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:34:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2118/DERBY-2118.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2118] Change some boundary checks in ArrayInputStream to ASSERTs to improve performance</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2118</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Profiling shows that a significant amount of CPU is spent doing boundary checking in ArrayInputStream.setPosition() and ArrayInputStream.setLimit(). These checks appear to be there to detect error conditions, so it seems more appropriate to make them ASSERTs. Especially since they are so expensive.&lt;/p&gt;

&lt;p&gt;DTrace analysis seems to confirm that these methods get called very frequently:&lt;/p&gt;

&lt;p&gt;Knut Anders Hatlen wrote the following in a message on derby-dev:&lt;/p&gt;

&lt;p&gt;FYI, I just ran the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1961&quot; title=&quot;Investigate resource usage for different types of load on an in-memory database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1961&quot;&gt;&lt;del&gt;DERBY-1961&lt;/del&gt;&lt;/a&gt; test clients and traced them with a&lt;br/&gt;
DTrace script that printed how often each method was called. For the&lt;br/&gt;
join client, ArrayInputStream.setPosition() was the most frequently&lt;br/&gt;
called method (43837.7 calls/tx). For the single-record select client,&lt;br/&gt;
it was third (58.4 calls/tx), only beaten by Object.&amp;lt;init&amp;gt;() and&lt;br/&gt;
DDMWriter.ensureLength(). I think this means that setPosition() is the&lt;br/&gt;
engine method that is most frequently called, at least in read-mostly&lt;br/&gt;
transactions.  ArrayInputStream.setLimit() also appeared near the top&lt;br/&gt;
of the list. See &lt;a href=&quot;http://wiki.apache.org/db-derby/Derby1961MethodCalls&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/Derby1961MethodCalls&lt;/a&gt;&lt;br/&gt;
for the details.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12357003">DERBY-2118</key>
            <summary>Change some boundary checks in ArrayInputStream to ASSERTs to improve performance</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dyret">Dyre Tjeldvoll</assignee>
                                    <reporter username="dyret">Dyre Tjeldvoll</reporter>
                        <labels>
                    </labels>
                <created>Mon, 27 Nov 2006 10:01:08 +0000</created>
                <updated>Mon, 29 Jun 2009 15:22:34 +0100</updated>
                            <resolved>Fri, 1 Jun 2007 11:55:50 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12453602" author="dyret" created="Mon, 27 Nov 2006 14:07:29 +0000"  >&lt;p&gt;I have attached a patch for this. Ran derbyall and suites.All without problems.&lt;/p&gt;</comment>
                            <comment id="12453604" author="dyret" created="Mon, 27 Nov 2006 14:15:58 +0000"  >&lt;p&gt;Adding new version of the patch since the first contained an unintended white-space change&lt;/p&gt;</comment>
                            <comment id="12453649" author="mikem" created="Mon, 27 Nov 2006 17:04:32 +0000"  >&lt;p&gt;I am definitely not comfortable with the change to the setPosition() routine.  If the class is using &quot;limit&quot; checking to &lt;br/&gt;
pass a data structure to another module while limiting access to the structure then the checking in setPosition is not&lt;br/&gt;
error checking - reading to &quot;end of file&quot; may be valid.&lt;br/&gt;
It effectively means that in the&lt;br/&gt;
released product the implementation provides no limit checking at all, which could be surprising to someone&lt;br/&gt;
who called setLimit().&lt;br/&gt;
It may be that all uses of this interface do not need limit checking, and unfortunately derby&lt;br/&gt;
does not have 100% code coverage so just running all the tests can&apos;t tell this (also important to run all tests SANE/INSANE&lt;br/&gt;
with this type of change).&lt;/p&gt;

&lt;p&gt;There should be big comments and possibly additional ASSERTS with this implementation.  If limits are not needed&lt;br/&gt;
maybe all set limit interfaces should throw exceptions?  If there is a need for sometimes checking and sometimes not, &lt;br/&gt;
maybe there should be &quot;uncheckecked&quot; and &quot;checked&quot; interfaces.  &lt;/p&gt;

&lt;p&gt;Again I am not sure without checking if this is the implementation that store uses, but in the case of store limits are used&lt;br/&gt;
for non-error cases.  For instance one way an object can read itself from a page is that store passes it a stream and it&lt;br/&gt;
reads itself, and store places a limit on the stream so that it only reads the data it is &quot;allowed&quot; to read and does not go&lt;br/&gt;
past it&apos;s end.  Now most datatypes know their length but the current store interface does not require that - a valid implementation can stream into the page with no length and stream out until it gets end of file.  This use to be the case for&lt;br/&gt;
at least some long binary and some long char and user defined types.    I am also not sure at all of all the uses of this class,&lt;br/&gt;
and whether they need limit checking or not.&lt;/p&gt;

&lt;p&gt;Off hand I can&apos;t think of a non-error case for the setLimit case.&lt;/p&gt;</comment>
                            <comment id="12453774" author="djd" created="Tue, 28 Nov 2006 01:36:24 +0000"  >&lt;p&gt;I&apos;m also close to -1 on this change. The setLimit() call comes from Limit which prescribes its api, and the modified implementation does not fulfill its contract.&lt;/p&gt;

&lt;p&gt;The discussion on the list has:&lt;/p&gt;

&lt;p&gt;&amp;gt; I have noticed that two methods, setPosition(int) and setLimit(int)&lt;br/&gt;
&amp;gt; seem to use more CPU than what I find &quot;reasonable&quot; given what they&apos;re&lt;br/&gt;
&amp;gt; supposed to do. Together they use 4.5% of user CPU and 1.5% of system&lt;br/&gt;
&amp;gt; CPU. &lt;/p&gt;

&lt;p&gt;Are there updated numbers for the same tests with the patch applied?&lt;/p&gt;

&lt;p&gt;Also how can these methods take up 1.5% of system time, since they are just modifying instance fields, isn&apos;t that all user code?&lt;/p&gt;</comment>
                            <comment id="12453862" author="dyret" created="Tue, 28 Nov 2006 10:29:57 +0000"  >&lt;p&gt;I&apos;m taking the hint, and removing the patch available flag. If someone else has ideas about how to optimize this part of the code&lt;br/&gt;
I&apos;d love to hear about it.&lt;/p&gt;

&lt;p&gt;Wrt. system cpu: I think that&apos;s strange too, but that is what the profiler says. Maybe it is wrong. (it attributes the system cpu (and most of the user cpu too) to the byte code line doing getfield #11, which I think is ArrayInputStream.end&lt;/p&gt;</comment>
                            <comment id="12453889" author="dyret" created="Tue, 28 Nov 2006 11:43:44 +0000"  >&lt;p&gt;The requested performance numbers:&lt;/p&gt;

&lt;p&gt;Average of ten 100 sec runs on trunk vs average of ten 100 sec runs with patch:&lt;/p&gt;

&lt;p&gt;Select:&lt;br/&gt;
dt136804@siv04~$ fstat select_bln479573.log select_ASSERT479573.log |dc&lt;br/&gt;
bln:&lt;br/&gt;
23099.613&lt;br/&gt;
exp:&lt;br/&gt;
23516.291&lt;br/&gt;
%chg:&lt;br/&gt;
1.803&lt;br/&gt;
f(1,18):&lt;br/&gt;
10.741&lt;/p&gt;

&lt;p&gt;Join:&lt;br/&gt;
dt136804@siv04~$ fstat join_bln479573.log join_ASSERT479573.log |dc&lt;br/&gt;
bln:&lt;br/&gt;
89.448&lt;br/&gt;
exp:&lt;br/&gt;
91.268&lt;br/&gt;
%chg:&lt;br/&gt;
2.034&lt;br/&gt;
f(1,18):&lt;br/&gt;
5.345&lt;/p&gt;

&lt;p&gt;Inlining setPosition (not setLimit) without any check (join load only):&lt;br/&gt;
dt136804@siv04~$ fstat join_bln479573.log join_inline479573.log |dc&lt;br/&gt;
bln:&lt;br/&gt;
89.448&lt;br/&gt;
exp:&lt;br/&gt;
92.469&lt;br/&gt;
%chg:&lt;br/&gt;
3.377&lt;br/&gt;
f(1,18):&lt;br/&gt;
16.313&lt;/p&gt;</comment>
                            <comment id="12453903" author="dyret" created="Tue, 28 Nov 2006 12:30:08 +0000"  >&lt;p&gt;Sorry, I guess I should have been a bit more verbose. The script used wasn&apos;t really written with publication in mind. Here is a legend for the previous comment:&lt;/p&gt;

&lt;p&gt;bln = baseline = unmodified trunk&lt;br/&gt;
exp = experiment = with patch&lt;br/&gt;
%chg = percent change from trunk to patch (positive number means performance increase)&lt;/p&gt;

&lt;p&gt;f(n,m) = value of the f (Fisher) statistic with n and m degrees of freedom, which basically gives a measure of how likely it is that the two averages actually are the same (that the observed difference is due to variance in the samples). In the back of any statistics book you&apos;ll find a table which tells you that the critical values for f(1,18) is 4.41 for alpha=0.05 and 8.29 for alpha=0.01. Which in turn means that if f &amp;gt; 4.41, then the probability of the means being different is greater than 0.95, and that if f &amp;gt; 8.29 the probability is greater than 0.99&lt;/p&gt;</comment>
                            <comment id="12454332" author="djd" created="Wed, 29 Nov 2006 14:52:10 +0000"  >&lt;p&gt;Just an FYI - with similar changes and the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1961&quot; title=&quot;Investigate resource usage for different types of load on an in-memory database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1961&quot;&gt;&lt;del&gt;DERBY-1961&lt;/del&gt;&lt;/a&gt; test program and Sun&apos;s 1.5 JRE on Linux I was seeing possibly 1-2% improvement, almost lost in the noise. Just switching to IBM&apos;s 1.5 JRE improved the numbers by &lt;b&gt;41%&lt;/b&gt; compared to the Sun JRE with the base (no patch). Thus it would be good to see the effect of these changes (or similar improvements) on multiple JREs to see how different JITs handle the code. I&apos;ll re-run the tests on the IBM JRE to see how much the changes effect the performance, maybe that JIT already does a good enough job.&lt;/p&gt;</comment>
                            <comment id="12454334" author="djd" created="Wed, 29 Nov 2006 14:59:21 +0000"  >&lt;p&gt;patch d2018_clearlimit_cleanup_diff.txt&lt;/p&gt;

&lt;p&gt;Patch which improves the clearLimit() method by removing the possibility that the byte array is ever null.&lt;br/&gt;
Instead of using null when creating an empty ArrayInputStream an empty array is used instead.&lt;br/&gt;
Remove some unused methods.&lt;br/&gt;
Change some callers of the 2-arg setLimit() to the 1-arg setLimit() as it is more efficient.&lt;br/&gt;
Fix a bug where setData() would not reset the position to zero (previously it was unmodified at a potentially invalid position)&lt;/p&gt;

&lt;p&gt;I believe this provides a small improvement (~1%), fixes a bug and does not change the behaviour of the class.&lt;/p&gt;

&lt;p&gt;I have not run any tests on this change.&lt;/p&gt;</comment>
                            <comment id="12454402" author="dyret" created="Wed, 29 Nov 2006 18:38:04 +0000"  >&lt;p&gt;Thank you for providing the patch. For what it is worth: I ran same test on your patch and these are the numbers that I see:&lt;br/&gt;
bln:&lt;br/&gt;
23049.178&lt;br/&gt;
exp:&lt;br/&gt;
23381.489&lt;br/&gt;
%chg:&lt;br/&gt;
1.441&lt;br/&gt;
f(1,18):&lt;br/&gt;
5.598&lt;/p&gt;

&lt;p&gt;All tests are run like this:&lt;br/&gt;
/usr/local/java/jdk1.6/bin/java -Dderby.storage.pageCacheSize=12500 TestClient -d org.apache.derby.jdbc.EmbeddedDriver -u &apos;jdbc:derby:/tmp/tdb;create=true;territory=en_US&apos; -a select -r 100 -c 1&lt;/p&gt;

&lt;p&gt;So if the tests pass, I would like to see this change committed.&lt;/p&gt;</comment>
                            <comment id="12454431" author="dyret" created="Wed, 29 Nov 2006 20:36:27 +0000"  >&lt;p&gt;I have attached the flat profile listing from my profiler (Sun Studio11 collect/analyzer) from a run with Dan&apos;s clearLimit-patch. Maybe if others also see the numbers they can propose other performance improvements.&lt;/p&gt;</comment>
                            <comment id="12455445" author="djd" created="Mon, 4 Dec 2006 23:05:49 +0000"  >&lt;p&gt;The tests pass for the clearLimit() changes and I performance changes for the select test ranging from -0.70% to +2.44%.&lt;br/&gt;
Sometimes I seem to have trouble getting consistent numbers out of the test from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1961&quot; title=&quot;Investigate resource usage for different types of load on an in-memory database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1961&quot;&gt;&lt;del&gt;DERBY-1961&lt;/del&gt;&lt;/a&gt;, even with an idle machine.&lt;/p&gt;</comment>
                            <comment id="12455546" author="dyret" created="Tue, 5 Dec 2006 08:39:46 +0000"  >&lt;p&gt;I have also seen much variation when running the test client, but I don&apos;t think this is specific to the client from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1961&quot; title=&quot;Investigate resource usage for different types of load on an in-memory database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1961&quot;&gt;&lt;del&gt;DERBY-1961&lt;/del&gt;&lt;/a&gt;. I have observed similar variation with all cpu-bound java programs I have tried to benchmark. But if anything can be done to the client to make the results more consistent, I think  that would be worth looking into. &lt;/p&gt;</comment>
                            <comment id="12467596" author="fuzzylogic" created="Thu, 25 Jan 2007 20:38:23 +0000"  >&lt;p&gt;Unsetting Fix Version on unassigned issues.&lt;/p&gt;</comment>
                            <comment id="12483905" author="knutanders" created="Sun, 25 Mar 2007 07:15:26 +0100"  >&lt;p&gt;Dan&apos;s excellent cleanup patch seems to have been forgotten, so I took the liberty to commit it (rev 522167). I made one small change before committing it: instead of a defining a static final EMPTY = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, I made ArrayInputStream&apos;s no-arg constructor call ReuseFactory.getZeroLenByteArray().&lt;/p&gt;</comment>
                            <comment id="12488158" author="knutanders" created="Wed, 11 Apr 2007 20:36:39 +0100"  >&lt;p&gt;I noticed that the 2-arg setLimit() returns an integer which is discarded by all callers. setlimit.diff makes the method void. It also makes the method more compact by merging two range checks. No tests have been run yet.&lt;/p&gt;</comment>
                            <comment id="12488294" author="knutanders" created="Thu, 12 Apr 2007 09:22:04 +0100"  >&lt;p&gt;The tests ran cleanly. Committed setlimit.diff with revision 527830.&lt;/p&gt;</comment>
                            <comment id="12500536" author="myrna" created="Fri, 1 Jun 2007 01:11:59 +0100"  >&lt;p&gt;Changes went in. Can this be closed?&lt;/p&gt;</comment>
                            <comment id="12500666" author="myrna" created="Fri, 1 Jun 2007 11:55:50 +0100"  >&lt;p&gt;Assigning to Dyre, although this is an example of open-source team work, with Dyre, Dan, and Knut Anders contributing...&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12346055" name="cleanup_flat_profile.txt" size="86810" author="dyret" created="Wed, 29 Nov 2006 20:36:27 +0000"/>
                            <attachment id="12346033" name="d2018_clearlimit_cleanup_diff.txt" size="4480" author="djd" created="Wed, 29 Nov 2006 14:59:21 +0000"/>
                            <attachment id="12345840" name="derby-2118.diff" size="1761" author="" created="Mon, 27 Nov 2006 14:05:53 +0000"/>
                            <attachment id="12345841" name="derby-2118.stat" size="457" author="" created="Mon, 27 Nov 2006 14:05:53 +0000"/>
                            <attachment id="12345842" name="derby-2118.v2.diff" size="1631" author="dyret" created="Mon, 27 Nov 2006 14:15:58 +0000"/>
                            <attachment id="12355363" name="setlimit.diff" size="1094" author="knutanders" created="Wed, 11 Apr 2007 20:36:38 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 27 Nov 2006 17:04:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30281</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wlz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39101</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>