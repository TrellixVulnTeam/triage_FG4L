<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:42:36 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3424/DERBY-3424.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3424] Add an MBean that an application can register to change the state of Derby&apos;s JMX management</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3424</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;JMX in Derby was originally proposed as a mechanism to configure Derby replacing or enhancing the system properties which tend to be static in nature. Thus it is somewhat ironic that jmx is enabled with a static system property derby.system.jmx.&lt;/p&gt;

&lt;p&gt;I propose to add a public mbean that allows the state Derby&apos;s JMX management to be changed. This bean is not automatically registered by Derby if derby.system.jmx is false, but instead can be registered by an application. I believe this could occur at any time so that JMX could be enabled on a running application, possibly by a remote client.&lt;/p&gt;

&lt;p&gt;This standard Mbean (o.a.d.mbeans.Management &amp;amp; ManagementMBean) would have these operations &amp;amp; attribute:&lt;/p&gt;

&lt;p&gt;    public boolean isManagementActive();&lt;br/&gt;
    public void startManagement(); &lt;br/&gt;
    public void stopManagement();&lt;/p&gt;

&lt;p&gt;If Derby is not booted within the jvm then the operations would be no-ops.&lt;/p&gt;

&lt;p&gt;If derby.system.jmx is true then Derby will itself register an mbean that implements ManagementMBean to allow dynamic control of the visibility of Derby&apos;s mbeans.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12388783">DERBY-3424</key>
            <summary>Add an MBean that an application can register to change the state of Derby&apos;s JMX management</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="djd">Daniel John Debrunner</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                    </labels>
                <created>Fri, 15 Feb 2008 16:55:34 +0000</created>
                <updated>Thu, 24 Sep 2009 00:55:36 +0100</updated>
                            <resolved>Thu, 24 Sep 2009 00:55:36 +0100</resolved>
                                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>JMX</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12569713" author="johnemb" created="Sun, 17 Feb 2008 16:19:05 +0000"  >&lt;p&gt;Interesting approach. So I guess the plan is to allow remote JMX clients to enable Derby-JMX at runtime by doing something like this?&lt;/p&gt;

&lt;p&gt;    JMXServiceURL url = new JMXServiceURL(&lt;br/&gt;
                &quot;service:jmx:rmi:///jndi/rmi://&quot; + HOSTNAME + &quot;:&quot; + JMXPORT +&quot;/jmxrmi&quot;);&lt;br/&gt;
    JMXConnector jmxc = JMXConnectorFactory.connect(url, null);&lt;br/&gt;
    MBeanServerConnection mbeanServerConn = jmxc.getMBeanServerConnection();&lt;br/&gt;
    ObjectName mgmtObjName = new ObjectName(&quot;org.apache.derby&quot;, &quot;type&quot;, &quot;Management&quot;);&lt;br/&gt;
    ObjectInstance mgmtObj = mbeanServerConn.createMBean(&quot;org.apache.derby.mbeans.Management&quot;, mgmtObjName);&lt;/p&gt;

&lt;p&gt;(and then invoke operations on that MBean).&lt;/p&gt;

&lt;p&gt;With the current code line, I get an&lt;/p&gt;

&lt;p&gt;    Exception in thread &quot;main&quot; javax.management.ReflectionException: The MBean class could not be loaded by the default loader repository&lt;/p&gt;

&lt;p&gt;I assume some special handling of class loaders/loading is needed on the server-side as long as we&apos;re using the platform MBeanServer... any thoughts on this?&lt;/p&gt;

&lt;p&gt;An admin can probably control access to this feature by using a security policy file, but are there any specific plans within the 10.4 timeframe with regards to security &amp;amp; this feature?&lt;/p&gt;</comment>
                            <comment id="12569768" author="djd" created="Mon, 18 Feb 2008 00:44:15 +0000"  >&lt;p&gt;Thinking about security one approach may to be to add a permission specific to Derby that controls the ability to start and stop the management service. This could then be granted to a JMXPrincipal to control access to Derby&apos;s jmx monitoring.&lt;/p&gt;

&lt;p&gt;I&apos;ve been experimenting with running derby under a security manager with jmx but haven&apos;t managed to get a remote user to log in using jconsole yet. I can log in remotely if there is no security manager, but not with a security manager. I can connect using jconsole locally (via the process id) when the security manager is enabled and see Derby&apos;s mbeans.&lt;/p&gt;</comment>
                            <comment id="12569811" author="johnemb" created="Mon, 18 Feb 2008 09:07:59 +0000"  >&lt;p&gt;By &quot;log in&quot;, do you mean connect to the MBean server? (Or are you experimenting with authentication/authorization?)&lt;/p&gt;

&lt;p&gt;I am able to access Derby&apos;s MBeans remotely when using a custom policy file including the permissions outlined in the funcSpec attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;. By specifying the following properties:&lt;/p&gt;

&lt;p&gt;-Dderby.system.jmx=true&lt;br/&gt;
-Dcom.sun.management.jmxremote.port=8005&lt;br/&gt;
-Dcom.sun.management.jmxremote.authenticate=false&lt;br/&gt;
-Dcom.sun.management.jmxremote.ssl=false&lt;/p&gt;

&lt;p&gt;I can connect using JConsole by specifying &amp;lt;remoteHost&amp;gt;:8005 in the connection dialog, or by using the URL&lt;br/&gt;
service:jmx:rmi:///jndi/rmi://&amp;lt;remoteHost&amp;gt;:8005/jmxrmi.&lt;/p&gt;</comment>
                            <comment id="12569918" author="johnemb" created="Mon, 18 Feb 2008 14:57:19 +0000"  >&lt;p&gt;Here&apos;s a summary of my current understanding of (parts of) this feature from reading the code that is committed so far. &lt;br/&gt;
Please correct me if I&apos;m wrong: &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Derby&apos;s Management Service is booted regardless of the value of&lt;br/&gt;
    derby.system.jmx.&lt;/li&gt;
	&lt;li&gt;If the VM does not support JMX (meaning: platform management), an&lt;br/&gt;
    &quot;empty&quot; Management service is booted instead of the &quot;real&quot; one.&lt;/li&gt;
	&lt;li&gt;If the value of derby.system.jmx is true, all the current MBeans are&lt;br/&gt;
    registered with both the platform MBeanServer and Derby&apos;s Management &lt;br/&gt;
    service, and will be available to JMX clients. &lt;/li&gt;
	&lt;li&gt;Otherwise (derby.system.jmx is non-true), all the current MBeans except&lt;br/&gt;
    the ManagementMBean are &quot;registered&quot; with Derby&apos;s Management service, &lt;br/&gt;
    but are not registered with the MBeanServer, and will thus not be &lt;br/&gt;
    available to JMX clients.&lt;/li&gt;
	&lt;li&gt;To enable Derby-JMX at runtime, the JMX client has to create and&lt;br/&gt;
    register the ManagementMBean with the MBean server, and then invoke&lt;br/&gt;
    the startManagement() operation. &lt;/li&gt;
	&lt;li&gt;Then the MBeans &quot;registered&quot; with Derby&apos;s management service are also&lt;br/&gt;
      automatically registered with the MBean server. This currently only&lt;br/&gt;
      includes the VersionMBean.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some questions/comments:&lt;/p&gt;

&lt;p&gt; 1) Can the Management Service (module) be stopped (I guess this means &lt;br/&gt;
    permanently disabled) by the user? If so, how?&lt;/p&gt;

&lt;p&gt; 2) How may/will MBeans such as the JDBCMBean (which are normally &lt;br/&gt;
    registered e.g. at driver boot time) be registered if JMX management&lt;br/&gt;
    is disabled at startup of Derby, but enabled later by using the &lt;br/&gt;
    ManagementMBean?&lt;/p&gt;

&lt;p&gt; 3) It is slightly confusing that the term &quot;registered&quot; is used both&lt;br/&gt;
    for MBeans registered with JMX (the MBean server) and for MBeans &lt;br/&gt;
    instantiated and stored with Derby&apos;s Management service. The code needs&lt;br/&gt;
    to be commented carefully in order to avoid misunderstandings. So far &lt;br/&gt;
    so good, but I wonder if this might become a problem when more code is &lt;br/&gt;
    added?&lt;/p&gt;

&lt;p&gt; 4) In jmxUnregister(), there is a TODO item for error handling, which is &lt;br/&gt;
    fair enough. Is the associated comment is still valid? If so, I need &lt;br/&gt;
    some help understanding what &quot;shutdown&quot; means in this context:&lt;/p&gt;

&lt;p&gt;    } catch (PrivilegedActionException pae) {&lt;br/&gt;
        // TODO - this is called on shutdown where&lt;br/&gt;
        // we don&apos;t really care about errors.&lt;/p&gt;</comment>
                            <comment id="12569939" author="djd" created="Mon, 18 Feb 2008 16:41:56 +0000"  >&lt;p&gt;By log in I meant connect to the jmx of the remote jvm using jconsole. I was using jmx authentication and a security manager on the remote jvm (the one running Derby).&lt;br/&gt;
Apart from the permissions in the spec additional permissions need to be granted to JMXPrincipals, this works but is very general:&lt;/p&gt;

&lt;p&gt; grant principal javax.management.remote.JMXPrincipal * &lt;/p&gt;
{
  permission javax.management.MBeanPermission &quot;*&quot;, &quot;*&quot;;
}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;One can fine tune the MBeanPermission settings to allow only certain operations on certain beans and obviously different permissions for different users.&lt;br/&gt;
Every action on an mbean implictly requires an MBeanPermission  permission.&lt;/p&gt;

&lt;p&gt;I also discovered on the server side one can use -Djava.security.debug=access to produce a log of access permissions, which helps in setting up any policy file.&lt;/p&gt;</comment>
                            <comment id="12569947" author="djd" created="Mon, 18 Feb 2008 17:00:15 +0000"  >&lt;p&gt;&amp;gt; - To enable Derby-JMX at runtime, the JMX client has to create and register the ManagementMBean with the MBean server, and then invoke the startManagement() operation. &lt;/p&gt;

&lt;p&gt;or invoke startManagement() on the ManagementMBean if Derby registered it with the platform mbean server&lt;/p&gt;

&lt;p&gt;&amp;gt;  - If the value of derby.system.jmx is true, all the current MBeans are registered with both the platform MBeanServer &lt;/p&gt;

&lt;p&gt;If Derby can not find the platform MBeanServer then the mbeans will no be registered with the platform MBeanServer. (e.g. Derby does not have the permission to start the platform server and it is not running).&lt;br/&gt;
Also Derby may not be able to register specific beans (due to permissions) with the platform mbean server, those will remain registered with Derby&apos;s management service but not with jmx.&lt;/p&gt;

&lt;p&gt;&amp;gt;     - Then the MBeans &quot;registered&quot; with Derby&apos;s management service are also automatically registered with the MBean server. This currently only includes the VersionMBean.&lt;/p&gt;

&lt;p&gt;No for the last sentence,currently the JDBC mbean will also register as well as the VersionMBean, but this is not hardcoded into Derby&apos;s management service, it&apos;s just a factor of which mbeans have been registered with Derby&apos;s management service.&lt;/p&gt;

&lt;p&gt;A1) No Derby&apos;s management service cannot be stopped, I don&apos;t see a use case for this.&lt;/p&gt;

&lt;p&gt;A2) It&apos;s in the working code, JMXManagementService maintains a collection of mbeans that have been registered with it. When its active state changes it either registers in or unregisters from the plaform mbean server the mbeans in its collection.&lt;/p&gt;

&lt;p&gt;A3) Please feel free to suggest a better term. Note that only in the implementation of Derby&apos;s api is there two uses, the ManagementService api has a single use, just register and unregister, the implementation can do what it wants with the beans.&lt;/p&gt;

&lt;p&gt;A4) I&apos;ll clean up the comment.&lt;/p&gt;

&lt;p&gt;Thanks for the comments.&lt;/p&gt;</comment>
                            <comment id="12569960" author="johnemb" created="Mon, 18 Feb 2008 17:43:06 +0000"  >&lt;p&gt;Thanks for the details!&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;     - Then the MBeans &quot;registered&quot; with Derby&apos;s management service are also automatically registered with the MBean server. This currently only includes the VersionMBean.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; No for the last sentence,currently the JDBC mbean will also register as well as the VersionMBean, but this is not hardcoded into Derby&apos;s management service, it&apos;s just a factor of which mbeans have been registered with Derby&apos;s management service.&lt;/p&gt;

&lt;p&gt;(see also A2))&lt;/p&gt;

&lt;p&gt;Ah, I think I understand this now. Even if Derby is started with JMX management disabled, the MBeans (except the ManagementMBean) are automatically registered in Derby&apos;s Management service at boot time (or whenever they are scheduled to be created) and therefore available (and registerable with the MBeanServer) once management is enabled dynamically.&lt;/p&gt;</comment>
                            <comment id="12570069" author="djd" created="Tue, 19 Feb 2008 00:59:18 +0000"  >&lt;p&gt;John, thanks for providing the example code to try and register the Management bean from a remote client, saved me having to figure it out! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I found the problem was simply the class o.a.d.mbeans.Management was not being added to derby.jar.&lt;/p&gt;

&lt;p&gt;Here&apos;s an expanded version of your code snippet, it adds providing a user name and password for jmx and invoking the startManagement method. It also changes the domain and key properties the MBean is registered in, since the MBean is being registered by an application it should probably not be in Derby&apos;s domain.&lt;/p&gt;

&lt;p&gt;JMXServiceURL url = new JMXServiceURL(&lt;br/&gt;
                    &quot;service:jmx:rmi:///jndi/rmi://&quot; + &quot;localhost&quot; + &quot;:&quot; + 1999 +&quot;/jmxrmi&quot;);&lt;/p&gt;

&lt;p&gt;HashMap&amp;lt;String,String[]&amp;gt; env = new HashMap&amp;lt;String,String[]&amp;gt;(); &lt;br/&gt;
String[] credentials = new String[] &lt;/p&gt;
{ &quot;username&quot;, &quot;password&quot; }
&lt;p&gt;; &lt;br/&gt;
env.put(&quot;jmx.remote.credentials&quot;, credentials); &lt;/p&gt;

&lt;p&gt;JMXConnector jmxc = JMXConnectorFactory.connect(url, env);&lt;br/&gt;
MBeanServerConnection mbeanServerConn = jmxc.getMBeanServerConnection();&lt;br/&gt;
ObjectName mgmtObjName = new ObjectName(&quot;com.myapp.mydomain&quot;, &quot;type&quot;, &quot;DerbyManagement&quot;);&lt;br/&gt;
ObjectInstance mgmtObj = mbeanServerConn.createMBean(&quot;org.apache.derby.mbeans.Management&quot;, mgmtObjName);&lt;/p&gt;

&lt;p&gt;mbeanServerConn.invoke(mgmtObj.getObjectName(), &quot;startManagement&quot;, new Object&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, new String&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;);&lt;/p&gt;

&lt;p&gt;Just here for reference, it&apos;s hard to find examples on the web that show authentication working with JMX.&lt;/p&gt;

&lt;p&gt;With this I was able to create the bean from the remote client and invoke it to start Derby&apos;s JMX management even though derby.system.jmx was false initially.&lt;/p&gt;</comment>
                            <comment id="12570172" author="johnemb" created="Tue, 19 Feb 2008 11:02:14 +0000"  >&lt;p&gt;The commit of rev 628943 fixed the issue with class loading. I&apos;m glad it was as simple as that! I successfully tried enabling, disabling, re-enabling etc. of Derby&apos;s JMX management, and it seemed to work well.&lt;/p&gt;

&lt;p&gt;Regarding the object name of the Management MBean, it is in any case up to the client application to define which domain it wants to use. I think, however, that if we are to document an example of doing this, we could just as well use &quot;org.apache.derby&quot; as the domain (and &quot;type=Management&quot; as its only key property). Otherwise the user will see two MBeans representing the management bean, providing the same functionality (at least until &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3429&quot; title=&quot;Remove system property derby.system.jmx&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3429&quot;&gt;&lt;del&gt;DERBY-3429&lt;/del&gt;&lt;/a&gt; is implemented).&lt;/p&gt;

&lt;p&gt;The javadoc for javax.management.ObjectName says:&lt;/p&gt;

&lt;p&gt;&quot;a useful convention is to begin the domain name with the reverse DNS name of the organization that specifies the MBeans, followed by a period and a string whose interpretation is determined by that organization.&quot;&lt;/p&gt;

&lt;p&gt;I was thinking that &quot;specifies the MBeans&quot; means providing the code defining the MBean (interface/class), but I could be wrong. No big deal, though.&lt;/p&gt;</comment>
                            <comment id="12571969" author="dibyendumajumdar" created="Sun, 24 Feb 2008 21:51:52 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Can the Management class be placed in o.a.d.iapi.services.monitor, instead of o.a.d.mbeans ?&lt;br/&gt;
I am looking at this purely from module dependency point of view. I am trying to untangle a cyclical dependency between a.o.d.iapi.services.info, a.o.d.iapi.services.monitor, and a.o.d.mbeans. The info package depends upon mbeans. monitor package depends upon info. And because of the Management class, the mbeans package depends upon monitor.&lt;br/&gt;
By moving the Management class into the monitor package, this cycle will be broken.&lt;/p&gt;

&lt;p&gt;Is this possible? &lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="12571982" author="djd" created="Sun, 24 Feb 2008 23:19:48 +0000"  >&lt;p&gt;The Management class (mbean) needs to remain in mbeans as it is part of the public api.&lt;/p&gt;

&lt;p&gt;Not sure of a solution here, one might be to move the Version mbean out of info, but it seems a logical place for it.&lt;br/&gt;
Is there a list of the logical package groupings you are planning to provide, e.g. should info and monitor be in the same logical bundle?&lt;/p&gt;</comment>
                            <comment id="12571990" author="dibyendumajumdar" created="Mon, 25 Feb 2008 00:05:22 +0000"  >&lt;p&gt;Moving Version out of info would be a solution. Any reason why Version can&apos;t live in o.a.d.mbeans?&lt;/p&gt;

&lt;p&gt;Even if I group info/monitor into one bundle, there will still be cyclical dependency between this and mbeans unless we move Version out of info.&lt;br/&gt;
At present, I am simply placing each package in its own bundle ... helps when there are complex dependencies. Do not know yet what ultimately would be best grouping of modules. Initially I wanted to group by layers - services, store, language, jdbc, network, with each layer depending on those below. Hopefully I can get to this goal once the dependencies are more manageable at the module level.&lt;/p&gt;</comment>
                            <comment id="12571991" author="dibyendumajumdar" created="Mon, 25 Feb 2008 00:11:40 +0000"  >&lt;p&gt;Actually, grouping by layer probably won&apos;t work anyway, as we would need more granularity to enable bundles to be loaded by execution environment.&lt;/p&gt;</comment>
                            <comment id="12572001" author="djd" created="Mon, 25 Feb 2008 02:16:09 +0000"  >&lt;p&gt;Two reasons for Version not being in mbeans:&lt;/p&gt;

&lt;p&gt; 1) For MBeans registered by Derby we are only exposing the interface to applications, ie. interface classes in o.a.d.mbeans ending in MBean.&lt;br/&gt;
  The implementation class remains hidden.&lt;/p&gt;

&lt;p&gt; 2) It would require ProductVersionHolder to be referenced from mbeans, which is not part of the public api.&lt;/p&gt;</comment>
                            <comment id="12572331" author="dibyendumajumdar" created="Tue, 26 Feb 2008 01:10:00 +0000"  >&lt;p&gt;How about o.a.d.iapi.services.info.mbean as the package for VersionMBean?&lt;/p&gt;
</comment>
                            <comment id="12758319" author="myrna" created="Tue, 22 Sep 2009 18:49:12 +0100"  >&lt;p&gt;No activity has been seen on this improvement for 15 months.&lt;br/&gt;
Functionality has been available since 10.4.&lt;br/&gt;
I don&apos;t see a list of remaining tasks.&lt;br/&gt;
Can this be closed?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12344126">DERBY-1387</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 17 Feb 2008 16:19:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30844</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0rrb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38315</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>