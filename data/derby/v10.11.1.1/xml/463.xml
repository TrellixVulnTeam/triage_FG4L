<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:51:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-463/DERBY-463.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-463] Successive writes to a java.sql.Blob.setBinaryStream(long) seem to reset the file pointer</title>
                <link>https://issues.apache.org/jira/browse/DERBY-463</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I have a table&lt;br/&gt;
PEOPLE(SEQ_ID INT NOT NULL PRIMARY KEY, PICTURE BLOB).&lt;/p&gt;

&lt;p&gt;A row is inserted; both values are not NULL.&lt;/p&gt;

&lt;p&gt;From inside a JDBC program, I select the Blob for update.&lt;br/&gt;
I then get the Blob output stream with a call to&lt;br/&gt;
  Blob.setBinaryStream(long)&lt;br/&gt;
To this stream I write several times with&lt;br/&gt;
  OutputStream.write(byte[], int, int)&lt;br/&gt;
I close the stream, update the selected row with the new Blob and commit.&lt;/p&gt;

&lt;p&gt;The new value of the Blob now is exactly the value of the last content of the byte[],&lt;br/&gt;
and it is like the previous calls to write() have never taken place, or as if the file pointer&lt;br/&gt;
of the output stream has been reset between the calls.&lt;/p&gt;

&lt;p&gt;A sample program follows; the size of the input file &quot;picture.jpg&quot; is 23237, the length&lt;br/&gt;
of the Blob after the program has run is 23237 % 1024 = 709&lt;/p&gt;

&lt;p&gt;------------ sample program -------------&lt;br/&gt;
import java.sql.*;&lt;/p&gt;

&lt;p&gt;class TestApp {&lt;br/&gt;
   private TestApp() {}&lt;/p&gt;

&lt;p&gt;   public static void main(String[] args)&lt;br/&gt;
         throws ClassNotFoundException, SQLException, java.io.IOException {&lt;br/&gt;
      // try to load JDBC driver&lt;br/&gt;
      Class.forName(&quot;com.ibm.db2.jcc.DB2Driver&quot;);&lt;/p&gt;

&lt;p&gt;      // open the input file&lt;br/&gt;
      java.io.InputStream instream = new java.io.FileInputStream(&quot;picture.jpg&quot;);&lt;/p&gt;

&lt;p&gt;      // login to database&lt;br/&gt;
      Connection conn = DriverManager.getConnection(&lt;br/&gt;
            &quot;jdbc:derby:net://dbtuxe/testdb&quot;, &quot;laurenz&quot;, &quot;apassword&quot;);&lt;br/&gt;
      conn.setAutoCommit(false);&lt;/p&gt;

&lt;p&gt;      // select Blob for update&lt;br/&gt;
      PreparedStatement stmt = conn.prepareStatement(&lt;br/&gt;
            &quot;SELECT PICTURE FROM PEOPLE WHERE SEQ_ID=? FOR UPDATE OF PICTURE&quot;);&lt;br/&gt;
      stmt.setInt(1, 1);&lt;br/&gt;
      ResultSet rs = stmt.executeQuery();&lt;/p&gt;

&lt;p&gt;      // get Blob output stream&lt;br/&gt;
      rs.next();&lt;br/&gt;
      Blob blob = rs.getBlob(1);&lt;br/&gt;
      java.io.OutputStream outstream = blob.setBinaryStream(1l);&lt;/p&gt;

&lt;p&gt;      // copy the input file to the Blob in chunks of 1K&lt;br/&gt;
      byte[] buf = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;1024&amp;#93;&lt;/span&gt;;&lt;br/&gt;
      int count;&lt;br/&gt;
      while (-1 != (count = instream.read(buf))) &lt;/p&gt;
{
         outstream.write(buf, 0, count);
         System.out.println(&quot;Written &quot; + count + &quot; bytes to Blob&quot;);
      }

&lt;p&gt;      // close streams&lt;br/&gt;
      instream.close();&lt;br/&gt;
      outstream.close();&lt;/p&gt;

&lt;p&gt;      // update Blob with new value&lt;br/&gt;
      String cursor = rs.getCursorName();&lt;br/&gt;
      PreparedStatement stmt2 = conn.prepareStatement(&lt;br/&gt;
            &quot;UPDATE PEOPLE SET PICTURE=? WHERE CURRENT OF &quot; + cursor);&lt;br/&gt;
      stmt2.setBlob(1, blob);&lt;br/&gt;
      stmt2.executeUpdate();&lt;/p&gt;

&lt;p&gt;      // clean up&lt;br/&gt;
      stmt2.close();&lt;br/&gt;
      stmt.close();&lt;br/&gt;
      conn.commit();&lt;br/&gt;
      conn.close();&lt;br/&gt;
   }&lt;br/&gt;
}&lt;/p&gt;</description>
                <environment>Sun java full version &amp;quot;1.4.2_05-b04&amp;quot;&lt;br/&gt;
Linux x86&lt;br/&gt;
Derby is run in network server mode</environment>
        <key id="12312313">DERBY-463</key>
            <summary>Successive writes to a java.sql.Blob.setBinaryStream(long) seem to reset the file pointer</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="fernanda">Fernanda Pizzorno</assignee>
                                    <reporter username="laurenz">Laurenz Albe</reporter>
                        <labels>
                    </labels>
                <created>Fri, 15 Jul 2005 22:50:21 +0100</created>
                <updated>Thu, 18 May 2006 06:36:48 +0100</updated>
                            <resolved>Mon, 16 Jan 2006 17:13:45 +0000</resolved>
                                    <version>10.0.2.1</version>
                                    <fixVersion>10.1.3.1</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12318880" author="fernanda" created="Tue, 16 Aug 2005 22:30:19 +0100"  >&lt;p&gt;Change method write (byte[], int, int) in java/client/org/apache/derby/client/am/BlobOutputStream.java. offset_ was not being incremented.&lt;/p&gt;</comment>
                            <comment id="12318896" author="laurenz" created="Wed, 17 Aug 2005 00:06:55 +0100"  >&lt;p&gt;While you are at it:&lt;/p&gt;

&lt;p&gt;In my program there is a line of code:&lt;br/&gt;
  java.io.OutputStream outstream = blob.setBinaryStream(1l);&lt;/p&gt;

&lt;p&gt;My original attempt was with blob.setBinaryStream(0l), as it should be in my opinion,&lt;br/&gt;
but then the first byte written to the Blob does not get written, i.e. the resulting Blob is one byte&lt;br/&gt;
short. By trial and error I found that it works when I use 1 instead of 0.&lt;/p&gt;

&lt;p&gt;Is that also a bug or is that intended?&lt;/p&gt;</comment>
                            <comment id="12318899" author="fernanda" created="Wed, 17 Aug 2005 00:46:54 +0100"  >&lt;p&gt;It also surprised me that it would start form 1, but it is intended to be so that the first byte is 1 and not 0.&lt;/p&gt;</comment>
                            <comment id="12319005" author="bakksjo" created="Wed, 17 Aug 2005 21:29:03 +0100"  >&lt;p&gt;The bugfix looks ok.&lt;/p&gt;

&lt;p&gt;My comments do not concern the fix, but the patch itself:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;BlobOutputStream.java: The System.arraycopy() line&apos;s diff is just a different ordering of subtraction and addition - same behaviour as before.&lt;/li&gt;
	&lt;li&gt;blobclob4BLOB.java: A blank line removed, and an added javadoc header without a function - should probably go into blobSetBinaryStream.java?&lt;/li&gt;
	&lt;li&gt;blobSetBinaryStream.java:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;No newline at end of file&lt;/li&gt;
	&lt;li&gt;The &apos;isDerbyNet&apos; variable seems to be unused&lt;/li&gt;
	&lt;li&gt;Do you need the &apos;startJBMS()&apos; and &apos;setAutoCommit()&apos; calls after the call to testBlob1() in main()?&lt;br/&gt;
...and maybe this is a little picky, but:&lt;/li&gt;
	&lt;li&gt;Some lines are not properly indented in main().&lt;/li&gt;
	&lt;li&gt;Some typos in the string literals: &quot;setBinaryStram&quot;, &quot;mutiple&quot; (don&apos;t forget to update the master file also).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You will usually catch things such ac unnecessary diffs yourself by looking closely at the patch before submitting it. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12319387" author="bakksjo" created="Sat, 20 Aug 2005 00:25:53 +0100"  >&lt;p&gt;Committed revision 233487.&lt;/p&gt;</comment>
                            <comment id="12319413" author="bandaram" created="Sat, 20 Aug 2005 04:57:25 +0100"  >&lt;p&gt;I wonder if similar problem exists if write(int) method is used, instead of write(b[], int, int) method. It seems the offset is not incremented in this case either. Looking at ClobOutputStream.java, does this need patching too?&lt;/p&gt;</comment>
                            <comment id="12320114" author="fernanda" created="Fri, 26 Aug 2005 19:10:31 +0100"  >&lt;p&gt;Check if clobs have a similar problem, and extend the test to use both write(byte[], int, int) and write(int).&lt;/p&gt;</comment>
                            <comment id="12322917" author="fernanda" created="Thu, 8 Sep 2005 18:57:30 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The test blobSetBinaryStreams.java was only testing the write(byte[], int, int) method for blobs. I have extendedit so that it would use both write(byte[], int, int) and write(int) for both blobs and clobs. Since it was not a blob specific test, I have renamed it to lobStreams.java.&lt;/li&gt;
	&lt;li&gt;Similar problems as the one fixed in the previous patch (the offset was not being incremented) existed in write(int) (for clobs and blobs) and write(byte[], int, int) (for clobs). These problems have now been fixed.&lt;/li&gt;
	&lt;li&gt;I have run derbyall successfully, except for store/encryptionKey.sql that failed, but I don&apos;t think it was related to my patch.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12356622" author="fernanda" created="Thu, 3 Nov 2005 01:12:26 +0000"  >&lt;p&gt;On the 08/Sep/05 I attached a new patch for this issue containing a fix for Clobs (write(byte[], int, int) and write(int)) and blobs (write(int)). I forgot to ask someone to review the patch. So could someone please review it?&lt;/p&gt;</comment>
                            <comment id="12356735" author="bandaram" created="Fri, 4 Nov 2005 11:22:57 +0000"  >&lt;p&gt;Submitted this patch. Thanks for addressing my review comments and fixing other API calls too. I do like your new test!&lt;/p&gt;

&lt;p&gt;Looks like you haven&apos;t signed an ICLA with Apache... I would advise considering this step as your patches are getting bigger ...!&lt;/p&gt;

&lt;p&gt;Sending        java\client\org\apache\derby\client\am\BlobOutputStream.java&lt;br/&gt;
Sending        java\client\org\apache\derby\client\am\ClobOutputStream.java&lt;br/&gt;
Deleting       java\testing\org\apache\derbyTesting\functionTests\master\blobSetBinaryStream.out&lt;br/&gt;
Adding         java\testing\org\apache\derbyTesting\functionTests\master\lobStreams.out&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\suites\derbynetclientmats.runall&lt;br/&gt;
Deleting       java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\blobSetBinaryStream.java&lt;br/&gt;
Deleting       java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\blobSetBinaryStream_app.properties&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\build.xml&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\copyfiles.ant&lt;br/&gt;
Adding         java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\lobStreams.java&lt;br/&gt;
Adding         java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\lobStreams_app.properties&lt;br/&gt;
Transmitting file data ........&lt;br/&gt;
Committed revision 330687.&lt;/p&gt;</comment>
                            <comment id="12356737" author="skambha" created="Fri, 4 Nov 2005 11:45:24 +0000"  >&lt;p&gt;I have one comment on this fix.&lt;/p&gt;

&lt;p&gt;In ClobOutputStream.java &lt;br/&gt;
     public void write(int b) throws java.io.IOException {&lt;br/&gt;
+        byte[] newByte = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;;&lt;br/&gt;
+        newByte&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = (byte)b;&lt;/p&gt;

&lt;p&gt;I think it is incorrect to cast int to a byte. This will lead to incorrect results for unicode characters whose value is greater than a byte. &lt;/p&gt;
</comment>
                            <comment id="12356742" author="djd" created="Fri, 4 Nov 2005 12:39:38 +0000"  >&lt;p&gt;Sunitha, I don&apos;t think that is a problem because the api for OutputStream.write(int b) is that it is a write of a byte, the top 24 bits are discarded.&lt;/p&gt;

&lt;p&gt;There is a different serious problem with the class, nothing to do with this patch, it&apos;s an existing problem.&lt;br/&gt;
The code use String(byte[]) to create a string from a byte array. This uses the default platform encoding, which is typically not required&lt;br/&gt;
behaviour. Since this class is used for Clob.setAsciiStream I assume the encoding should be ascii based.&lt;br/&gt;
Though the performance of this class  looks terrible if write(int) is used,  at least five objects created for eveny byte written!&lt;/p&gt;

&lt;p&gt;In fact this class and the client Clob have code like this everywhere, as the Clob is updated:&lt;/p&gt;

&lt;p&gt;        clob_.string_ = clob_.string_.concat(new String(newByte));&lt;br/&gt;
        clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);&lt;br/&gt;
        clob_.unicodeStream_ = new java.io.StringBufferInputStream(clob_.string_);&lt;br/&gt;
        clob_.characterStream_ = new java.io.StringReader(clob_.string_);&lt;/p&gt;

&lt;p&gt;Would probably be better to create most of those objects on demand, rather than on every modification. I mean if the CLOB is modified&lt;br/&gt;
but the application never retrieives the ascii  or character streams, what was the benefit of creating them?&lt;/p&gt;
</comment>
                            <comment id="12361448" author="bandaram" created="Sat, 31 Dec 2005 06:37:26 +0000"  >&lt;p&gt;Looks like this patch has been committed for sometime... Fernanda, can you resolve the defect and after confirming the fix, can you also close the bug?&lt;/p&gt;</comment>
                            <comment id="12411999" author="deepa" created="Tue, 16 May 2006 23:37:14 +0100"  >&lt;p&gt;Attaching &apos;derby-463-v10.1.diff&apos; which ports this fix to 10.1 branch. This port is required to merge and test &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-683&quot; title=&quot;Use correct encoding for ClobOutputStream on client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-683&quot;&gt;&lt;del&gt;DERBY-683&lt;/del&gt;&lt;/a&gt;. A direct merge was not possible. Hence created a patch for v10.1.&lt;/p&gt;

&lt;p&gt;With this patch, I ran derbyall in v10.1 with Sun jdk 1.4.2 on Windows XP. Please take a look at this patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="12412000" author="deepa" created="Tue, 16 May 2006 23:40:21 +0100"  >&lt;p&gt;Add fix version - 10.1.3&lt;/p&gt;</comment>
                            <comment id="12412251" author="fuzzylogic" created="Thu, 18 May 2006 06:36:48 +0100"  >&lt;p&gt;Committed to 10.1 with revision 407391.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12312778" name="DERBY-463.diff" size="30476" author="fernanda" created="Thu, 8 Sep 2005 18:57:29 +0100"/>
                            <attachment id="12311844" name="DERBY-463.diff" size="11551" author="fernanda" created="Fri, 19 Aug 2005 20:33:25 +0100"/>
                            <attachment id="12312779" name="DERBY-463.stat" size="954" author="fernanda" created="Thu, 8 Sep 2005 18:57:30 +0100"/>
                            <attachment id="12311845" name="DERBY-463.stat" size="784" author="fernanda" created="Fri, 19 Aug 2005 20:33:51 +0100"/>
                            <attachment id="12334193" name="derby-463-v10.1.diff" size="23932" author="deepa" created="Tue, 16 May 2006 23:37:14 +0100"/>
                            <attachment id="12334194" name="derby-463-v10.1.status" size="669" author="deepa" created="Tue, 16 May 2006 23:37:14 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 16 Aug 2005 21:30:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21968</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy16f3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40690</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>