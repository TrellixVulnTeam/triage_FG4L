<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:50:30 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-728/DERBY-728.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-728] Unable to create databases whose name containg Chinese characters through the client driver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-728</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Trying to create a database with the following URL (note the Chinese character in the database name):&lt;/p&gt;

&lt;p&gt;jdbc:derby://localhost:1527/\u4e10;create=true&lt;/p&gt;

&lt;p&gt;throws the following exception:&lt;/p&gt;

&lt;p&gt;----&lt;del&gt;%&amp;lt;&lt;/del&gt;----&lt;br/&gt;
Exception in thread &quot;main&quot; org.apache.derby.client.am.SqlException: Unicode string can&apos;t convert to Ebcdic string&lt;br/&gt;
        at org.apache.derby.client.net.EbcdicCcsidManager.convertFromUCS2(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.Request.writeScalarPaddedString(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnectionRequest.buildRDBNAM(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnectionRequest.buildACCSEC(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnectionRequest.writeAccessSecurity(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.writeServerAttributesAndKeyExchange(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowServerAttributesAndKeyExchange(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowUSRIDONLconnect(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowConnect(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.ClientDriver.connect(Unknown Source)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:525)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:193)&lt;br/&gt;
        at jdbctest.Main.main(Main.java:33)&lt;br/&gt;
----&lt;del&gt;%&amp;lt;&lt;/del&gt;----&lt;/p&gt;

&lt;p&gt;It&apos;s possible, however, to create databases using the embedded driver, using an URL like:&lt;/p&gt;

&lt;p&gt;jdbc:derby:\u4e10;create=true&lt;/p&gt;

&lt;p&gt;Tested with both 10.1.1.0 and 10.1.2.1 with the same result.&lt;/p&gt;

&lt;p&gt;Complete code to reproduce the bug:&lt;/p&gt;

&lt;p&gt;----&lt;del&gt;%&amp;lt;&lt;/del&gt;----&lt;br/&gt;
public static void main(String[] args) throws Exception &lt;/p&gt;
{
    Class.forName(&quot;org.apache.derby.jdbc.ClientDriver&quot;);
    Connection conn = DriverManager.getConnection(&quot;jdbc:derby://localhost:1527/\u4e10;create=true&quot;);
}
&lt;p&gt;----&lt;del&gt;%&amp;lt;&lt;/del&gt;----&lt;/p&gt;</description>
                <environment>Debian unstable, LInux 2.6.14.2, libc 2.3.5-6</environment>
        <key id="12326016">DERBY-728</key>
            <summary>Unable to create databases whose name containg Chinese characters through the client driver</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="espinha">Tiago R. Espinha</assignee>
                                    <reporter username="andrei.badea">Andrei Badea</reporter>
                        <labels>
                            <label>gsoc</label>
                            <label>mentor</label>
                    </labels>
                <created>Fri, 25 Nov 2005 01:20:03 +0000</created>
                <updated>Thu, 2 May 2013 03:29:33 +0100</updated>
                            <resolved>Tue, 9 Nov 2010 14:54:29 +0000</resolved>
                                    <version>10.1.2.1</version>
                                    <fixVersion>10.7.1.1</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                                                            <comments>
                            <comment id="12361802" author="rhillegas" created="Thu, 5 Jan 2006 09:35:11 +0000"  >&lt;p&gt;Quite likely, some common bug underlies this problem and Derby-708.&lt;/p&gt;</comment>
                            <comment id="12437472" author="bernt" created="Mon, 25 Sep 2006 08:06:39 +0100"  >&lt;p&gt;This is not related to Derby-708. This works in the embedded driver, but the path is encoded in EBCDIC (default DRDA encoding) between network client and server, and thus a character set equivalent to ISO-8859-1 is supported. This does &lt;b&gt;not&lt;/b&gt; include chinese characters.&lt;/p&gt;</comment>
                            <comment id="12475210" author="myrna" created="Fri, 23 Feb 2007 00:22:16 +0000"  >&lt;p&gt;I ran into another occurrence of this while looking at the tests databasePermissions.java and databasePermissions_net.java. The &apos;embedded&apos; version is made to run some subcases using Greek characters as username and password, networkserver/derbynetclient doesn&apos;t. &lt;br/&gt;
When you attempt to modify this so network server uses the user name and password strings with non-ascii (Greek, in this case) characters you bump into the same error (22005.S.3 / CANT_CONVERT_UNICODE_TO_EBCDIC) in org.apache.derby.client.net.EbcdicCcsidManager.convertFromUCS2. &lt;/p&gt;


</comment>
                            <comment id="12650339" author="kmarsden" created="Mon, 24 Nov 2008 21:49:26 +0000"  >&lt;p&gt;Bernt said in this issue:&lt;br/&gt;
&quot;... the path is encoded in EBCDIC (default DRDA encoding) between network client and server, and thus a character set equivalent to ISO-8859-1 is supported. This does &lt;b&gt;not&lt;/b&gt; include chinese characters.&quot;&lt;/p&gt;

&lt;p&gt;Are we locked into EBCDIC for this initial negotiation?  I believe for data transfer etc, we use UTF-8.  Could we change future versions to use UTF-8 for negotiating the databasename, user and password, or would that be in violation of the standard?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12652169" author="kmarsden" created="Mon, 1 Dec 2008 21:49:37 +0000"  >&lt;p&gt;I did a quick prototype of Network server/client  using a UTF8CcsidManager and was able to connect to the chinese database, but I don&apos;t see how we could implement this change and maintain compatibility with earlier versions.  All of the exchange of server attributes is done in the CCSID manager  encoding so we couldn&apos;t negotiate which CcsidManager to use.  Are we just stuck until version 11 or does someone have an idea how to manage this?&lt;/p&gt;
</comment>
                            <comment id="12652176" author="mamtas" created="Mon, 1 Dec 2008 22:04:42 +0000"  >&lt;p&gt;I was wondering that until we have a long term solution in version 11, should we provide support for this in earlier versions by having a property which can be used to indiciate UTF8 rather than EBCDIC? Just a suggestion.&lt;/p&gt;</comment>
                            <comment id="12652189" author="kmarsden" created="Mon, 1 Dec 2008 22:45:38 +0000"  >&lt;p&gt;I know in general the community has avoided such properties, but perhaps it is justified in this case since there seems to be no other alternative.  For client we would need to use a system property, since there is no derby.properties file for the client side.  It seems a little messy to me, but the upside is that it would be a change that we could backport, so users could benefit immediately.&lt;/p&gt;
</comment>
                            <comment id="12652356" author="kmarsden" created="Tue, 2 Dec 2008 13:19:05 +0000"  >&lt;p&gt;I noticed in the drda spec:&lt;br/&gt;
4.3.1.13 CCSID Manager&lt;br/&gt;
The CCSIDMGR allows the specification of a single-byte character set CCSID to be associated&lt;br/&gt;
with character typed parameters on DDM command and DDM reply messages. The CCSID&lt;br/&gt;
manager level of the application requester is sent on the EXCSAT command and specifies the&lt;br/&gt;
CCSID that the application requester will use when sending character command parameters.&lt;/p&gt;

&lt;p&gt;So on the one hand it looks like there is the facility to specify a CCSID to use. I think it would be 1208 for UTF-8, but it explicitly says it should be a single-byte character set, so perhaps using UTF-8 is not in compliance with DRDA. But later in an  example it mentions a server with CCSID 1208.&lt;/p&gt;

&lt;p&gt;4.3.5.2 Examples&lt;br/&gt;
Below is a simple example of intermediate server processing. The example assumes that each&lt;br/&gt;
server has a different CCSID, indicated in the diagram generically as ebcdic, unicode, or ascii. In&lt;br/&gt;
the figure, the upstream requester has an EBCDIC CCSID (such as CCSID 37), the intermediate&lt;br/&gt;
server has a Unicode CCSID (such as CCSID 1208)...&lt;/p&gt;

&lt;p&gt;So I am not totally sure whether it is legal or not.&lt;/p&gt;

</comment>
                            <comment id="12652641" author="stan" created="Wed, 3 Dec 2008 01:18:12 +0000"  >&lt;p&gt;Here&apos;s a possible workaround for this problem that bypasses DRDA compliance issues.  It&apos;s not elegant but makes it possible to address this issue without changing the DRDA protocol.  The idea is supporting database path aliases as a property.  This may have other benefits / uses as well.  Your thoughts please.&lt;/p&gt;

&lt;p&gt;   Idea:&lt;br/&gt;
I know that some databases &lt;span class=&quot;error&quot;&gt;&amp;#91;maybe even DB2? DB2 uses DRDA and does not encounter this problem&amp;#93;&lt;/span&gt; store location (host / port / path / name &lt;span class=&quot;error&quot;&gt;&amp;#91;or alias&amp;#93;&lt;/span&gt;) information in a file.  Could we implement something similar (database names/aliases) using derby properties that can be read by Network server from the derby.properties file to resolve database names on the connection URL?  For the server-side you would only,  I think, need to specify the absolute or relative path to the database.  &lt;/p&gt;

&lt;p&gt;This seems innocuous enough a feature that we could backport to the older codelines to resolve this issue?  It would only impact existing implementations that chose to set the property.&lt;/p&gt;

&lt;p&gt;It struck me that something like what is done for the USER property might work well: &lt;br/&gt;
	derby.dbalias.myDbAlias=&amp;lt;Yada-Path&amp;gt;/realDbName&lt;br/&gt;
And the connection URL would list only &apos;myDbAlias&apos;??  I guess this would have to override derby.system.home and be overridded if the conneciton URL looked like a PATH?  There are probably other issues I have not thought of.&lt;/p&gt;</comment>
                            <comment id="12652913" author="kmarsden" created="Wed, 3 Dec 2008 19:26:06 +0000"  >&lt;p&gt;The Properties javadoc says of load ...&lt;/p&gt;

&lt;p&gt;&quot;the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes  ; only a single &apos;u&apos; character is allowed in an escape sequence.&quot;&lt;/p&gt;

&lt;p&gt;So users should be able to specify  Chinese characters in the properties file with some effort.  So, this might be an option if we can&apos;t find a DRDA solution. I would be interested to hear from users whether this a workable option.  I can imagine the characters being in an install path and as part of the install the application would need to generate a derby.properties file with the aliases which might be a pain, but I am just speculating on usage.&lt;/p&gt;




</comment>
                            <comment id="12655228" author="dyret" created="Wed, 10 Dec 2008 14:40:10 +0000"  >&lt;p&gt;Just one quick comment here. I once started looking at this issue and I i got some way towards a solution. My impression from looking at the DRDA spec is that it may not be THEORETICALLY possible (because of limitations such as those mentioned by Kathey), but in PRACTICE there should be possible to extend Derby&apos;s driver to use a different encoding and fall back to the old behavior when connected to an old server. It should be simple to make the server compatible with the new Derby client, old Derby client, DB2 client or the ODBC client. &lt;/p&gt;

&lt;p&gt;I think I still have the work that I did on this lying around. I can try to make a patch of it, but I can&apos;t guarantee that the patch can be made against the latest trunk. That patch would by no means be a polished solution, but could perhaps be a starting point...&lt;/p&gt;
</comment>
                            <comment id="12655235" author="dyret" created="Wed, 10 Dec 2008 14:59:38 +0000"  >&lt;p&gt;Here is a patch containing the work I had in my sandbox. It is made against&lt;br/&gt;
rev 660997. Updating to the current trunk produced one conflict in DRDAConnThread.java that dodn&apos;t look too bad but I&apos;m not sure how to resolve it...&lt;/p&gt;</comment>
                            <comment id="12655236" author="kmarsden" created="Wed, 10 Dec 2008 15:03:03 +0000"  >&lt;p&gt;Thanks Dyre,&lt;/p&gt;

&lt;p&gt;I would be very interested to see your work on this issue.&lt;/p&gt;

&lt;p&gt;I too am working on a prototype to negotiate the encoding in the MGRLVLS during EXCSAT and am having good results connecting old server with new client and new server with old client.  It ends up that the local DRDA experts are working on a preliminary ACR to do this.  I should be able to post my  prototype and the details of the ACR in January. &lt;/p&gt;
</comment>
                            <comment id="12655962" author="dyret" created="Fri, 12 Dec 2008 10:34:28 +0000"  >&lt;p&gt;Hi Kathey, &lt;/p&gt;

&lt;p&gt;my work on this issue should be in the patch. When working on it, I didn&apos;t really aim for a minimal solution, so it may be possible to achieve this with less work than what my patch suggests.&lt;/p&gt;

&lt;p&gt;Based on what I can remember it seems like you are on the right track. Once the negotiating is working you just need to go through the code to find all the places where it is assumed that a given string length will fit in the same number of bytes. That isn&apos;t too bad as I recall, but there are some sticky points where a string, encoded in the negotiated charset, should be placed in DRDA fields which are specified with a fixed BYTE size, and should be padded to the correct size with space chars. This is simple as long as you can rely on the space character fitting in one byte, but when supporting encodings such as UCS-2 where space is two bytes, you can no longer use Arrays.fill() directly...&lt;/p&gt;

&lt;p&gt;I also think there is a DRDA field where you are supposed to fill in the client&apos;s ip-address (or part of it) as a string in the negotiated charset, and that the number of bytes you can use is not enough to encode in UCS-2. But I think I concluded that this field is not used for anything important, so deviating from the spec here should not be a problem... &lt;/p&gt;</comment>
                            <comment id="12661713" author="kmarsden" created="Wed, 7 Jan 2009 21:21:12 +0000"  >&lt;p&gt;I have been talking with the local DRDA experts and found out that they are working on a new DRDA ACR for a UNICODEMGR which I think can help us with this issue.  The  short summary is this:&lt;/p&gt;

&lt;p&gt;EXCSAT and ACCSEC are always sent EBCDIC.  As part of the MGRLVL exchange,  client sends UNICODEMGR 1208 which means that it is requesting all additional DDM parameters will be exchanged in code page 1208.  The server responds with UNICODEMGR 1208 if it can accommodate the request.  Otherwise it responds with UNICODEMGR 0 and all DDM parameters will continue to be exchanged in EBCDIC.&lt;/p&gt;

&lt;p&gt;One problem with this approach is that ACCSEC currently has an RDBNAM parameter which we treat as required (the spec lists it as optional) and that has to be sent EBCDIC.  So, my proposal is that we use the UNICODEMGR and we send  RDBNAM on ACCSEC &lt;b&gt;only if&lt;/b&gt;  the EBCDIC conversion can be done.   If the conversion can&apos;t be done, we send no RDBNAM on ACCSEC.  Then we change the server to use the RDBNAM sent with the unicode  SECCHK instead of the one sent on ACCSEC.   (Currently we just verify that the SECCHK RDBNAM is the same as the one that was sent on ACCSEC.)&lt;/p&gt;

&lt;p&gt;For an old client working with a new server, there will be no regression and the error message on sending a database name with international characters will be the same as currently listed in &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a new client working with a old server, this will mean that  all the cases that currently pass will still pass, but if a nonconvertible database name is sent (e,g, one with Chinese &lt;br/&gt;
characters) , the server will send back a SYNTAXRM and the &lt;br/&gt;
server console will show:&lt;br/&gt;
  = 2110; Error Code Value = e. Plaintext connection attempt &lt;br/&gt;
from an SSL enabled client?&lt;br/&gt;
org.apache.derby.impl.drda.DRDAProtocolException: Execution &lt;br/&gt;
failed because of a Distributed Protocol Error:  DRDA_Proto_&lt;br/&gt;
SYNTAXRM; CODPNT arg  = 2110; Error Code Value = e. Plaintext &lt;br/&gt;
connection attempt from an SSL enabled client?&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.impl.drda.DRDAConnThread.throwSyntaxrm(DRDAConn&lt;br/&gt;
Thread.java:513)&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.impl.drda.DRDAConnThread.missingCodePoint(DRDAC&lt;br/&gt;
onnThread.java:543)&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.impl.drda.DRDAConnThread.parseACCSEC(DRDAConnTh&lt;br/&gt;
read.java:1948)&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDACo&lt;br/&gt;
nnThread.java:943)&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.jav&lt;br/&gt;
a:290)&lt;/p&gt;


&lt;p&gt;The client could intercept the SYNTAXRM and  knowing it was unable to convert the RDBNAM to EBCDIC could throw the same message it does now.  The only regression  would be that users attempting to send an invalid database name would now see the server side protocol error occur. I think it  is an acceptable regression, since it won&apos;t cause any working  cases to fail even with mixed revision server/client and it will enable us to move forward and have internationalized  database name, user and password.  &lt;/p&gt;

&lt;p&gt;I prototyped the change and it all seemed to work ok.  I&apos;ll attach the prototype patch.&lt;/p&gt;

&lt;p&gt;I  would like to implement as much as possible of this for 10.5, but since approval of the ACR by opengroup won&apos;t happen by the time we release 10.5, I propose to make the implementation dependent on a client system property derby.drda.unicodemgr=true.  This would be false by default but could be switch to true in a maintenance release once opengroup approval occurs. Currently the hope is to have the ACR available publicly by the end of January.  Then I would need Rick&apos;s help to try to push it through opengroup since he is our opengroup rep.  I don&apos;t know how long that takes.&lt;/p&gt;

</comment>
                            <comment id="12661729" author="kmarsden" created="Wed, 7 Jan 2009 21:55:59 +0000"  >&lt;p&gt;Attaching prototype of changes.  This patch is &lt;b&gt;not&lt;/b&gt; for commit. The prototype implements UNICODEMGR manager level to negotiate DDM parameter encoding.  There are some places where performance degredation could occur which need to be addressed and some other issues in comments in the code.  The prototype implementation adds a UTF8CcsidManager to client and server and switches the ccsidmgr in the DDMReader and DDMWriter based on the negotiated encoding.  Probably that is not the clearest implementation since the new thing is called a UNICODEMGR not a CCSIDMANAGER, but this was the quickest way to implement the prototype.   I haven&apos;t thought of a better way to do it yet but am open to suggestions.&lt;/p&gt;


&lt;p&gt;The actual implementation will be in subtasks of this issue.  &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Remove required RDBNAM from ACCSEC&lt;/li&gt;
	&lt;li&gt;Client should only send RDBNAM on ACCSEC if EBCDIC conversion is possible.&lt;/li&gt;
	&lt;li&gt;Accomidate length delimited DRDA strings where string length does not equal byte length.&lt;/li&gt;
	&lt;li&gt;Implement UNICODEMGR support.  Perhaps this can be broken up into subtasks but hopefully won&apos;t be too big ones the other three are done.&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12665886" author="kmarsden" created="Wed, 21 Jan 2009 17:37:38 +0000"  >&lt;p&gt;In the reproduction for this issue there is a Chinese character \u4e10.  I&apos;d like to know if anyone knows the meaning of this character before I put it in a bunch of tests.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;

</comment>
                            <comment id="12666535" author="knutanders" created="Fri, 23 Jan 2009 12:56:25 +0000"  >&lt;p&gt;According to &lt;a href=&quot;http://translate.google.com&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://translate.google.com&lt;/a&gt; it means &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;Formal&amp;#93;&lt;/span&gt; a beggar&quot;, but I don&apos;t speak Chinese, so I really can&apos;t say.&lt;/p&gt;</comment>
                            <comment id="12668631" author="myrna" created="Thu, 29 Jan 2009 22:10:31 +0000"  >&lt;p&gt;I also found some web sites that indicate something like that, I think it&apos;s safe enough to use in tests.&lt;/p&gt;</comment>
                            <comment id="12699421" author="kmarsden" created="Wed, 15 Apr 2009 23:34:55 +0100"  >&lt;p&gt;Attached is ACR7007: a proposed change to the DRDA spec for UNICODEMGR, which will allow us to implement a fix for  this issue.  The ACR was developed within IBM with plans to present it to opengroup for approval.  The authors said I could post it here so Derby could benefit and provide comments.  Ultimately IBM will submit this to opengroup for incorporation in the spec.  &lt;/p&gt;

&lt;p&gt;Please take a look and post any comments to this issue. Rick may be especially interested as our representative at opengroup.&lt;/p&gt;</comment>
                            <comment id="12699554" author="espinha" created="Thu, 16 Apr 2009 07:57:13 +0100"  >&lt;p&gt;At the risk of pointing out the obvious, I tested this on the 10.5 RC1 using ij and the issue does not arise.&lt;/p&gt;

&lt;p&gt;Interestingly enough, the folder that is created for the database seems to have the Unicode representation of the character and is just called: u4e10&lt;/p&gt;

&lt;p&gt;I&apos;m just wondering whether it isn&apos;t somehow assuming the u4e10 as a string literal rather than a Unicode character.&lt;/p&gt;</comment>
                            <comment id="12699684" author="kmarsden" created="Thu, 16 Apr 2009 13:52:24 +0100"  >&lt;p&gt;Tiago said:&lt;br/&gt;
&amp;gt;I&apos;m just wondering whether it isn&apos;t somehow assuming the u4e10 as a string literal &amp;gt;rather than a Unicode character. &lt;/p&gt;

&lt;p&gt;Yes, ij doesn&apos;t support escaped unicode characters. You have to use a java program, e.g.&lt;br/&gt;
Connection  conn = DriverManager.getConnection(&quot;jdbc:derby://localhost:1527/\u4e10;create=true&quot;);&lt;/p&gt;</comment>
                            <comment id="12700281" author="rhillegas" created="Fri, 17 Apr 2009 19:52:15 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;Thanks for attaching the proposed change to Volume 1 of the DRDA spec. It got me thinking about SQL identifiers. It seems from the changes to chapters 6 and 7 on page 5 that DRDA still thinks that sql identifiers are limited to 255 bytes. I don&apos;t know where this limitation actually surfaces. It doesn&apos;t surface in the simple test I have attached (BigTableName) which pokes and peeks a table whose schema name and table name are each 128 unicode characters long, represented in utf-8 as 384 bytes apiece.&lt;/p&gt;

&lt;p&gt;But it may prevent us from extending our DRDA or SQL support in the future. The maximum length of a SQL identifier is 128 unicode characters, according to part 2 of the 2008 SQL Standard, section 5.2 (&amp;lt;token&amp;gt; and &amp;lt;separator&amp;gt;), syntax rule (13). Derby supports this maximum length. At two bytes per Java character, this works out to 256 bytes, not 255. Since each unicode character can potentially expand to 4 bytes in UTF-8 encoding, the maximum length of a UTF-8 encoded identifier is 512 bytes. I believe that DRDA&apos;s sql identifiers should be at least 256 bytes long and probably 512 bytes.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12700286" author="kmarsden" created="Fri, 17 Apr 2009 20:02:16 +0100"  >&lt;p&gt;Thank you Rick for looking at this.&lt;/p&gt;

&lt;p&gt;I too am concerned about the  DRDA 255 byte character string limit.  I had thought of it especially in terms of this feature as users may have much longer paths for database name. I think this general limit extension needs to be addressed as a different ACR.    I think we should open a separate issue for it and pursue it as a separate ACR with opengroup.&lt;/p&gt;
</comment>
                            <comment id="12734177" author="kmarsden" created="Wed, 22 Jul 2009 17:08:48 +0100"  >&lt;p&gt;Unassigning this issue.  I have not had time to focus on it and don&apos;t want to prevent someone else from picking it up.&lt;/p&gt;

&lt;p&gt;I think the spec proposal is complete and the prototype is based on that and seems to work ok.  The hardest part seems to be &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4009&quot; title=&quot;Accommodate  length delimited DRDA strings where character  length does not equal byte length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4009&quot;&gt;&lt;del&gt;DERBY-4009&lt;/del&gt;&lt;/a&gt; to check the byte length limitations because we need to perform the check before we send and currently we do the byte conversion at a pretty low level during the send.  The prototype doesn&apos;t have the checks.&lt;/p&gt;

&lt;p&gt;Another issue regarding this change may whether to implement it before it officially gets into the spec.  I was thinking maybe the initial implementation could be based on a property which would be made the default when the ACR is accepted,. On the other hand there are no user interfaces affected, so maybe it would be ok to go ahead and implement it.  We have I think implemented some protocol  extensions for setQueryTimeout and session caching that are Derby specific, but I may be wrong on that.  This may also be a non-issue at the current rate of progress.&lt;/p&gt;

&lt;p&gt;Anyway, please feel free to pick up on this issue. I will provide any assistance I can.&lt;/p&gt;
</comment>
                            <comment id="12834517" author="kmarsden" created="Tue, 16 Feb 2010 22:24:33 +0000"  >&lt;p&gt;I wanted to mention that this ACR 7007 has enterered the opengroup fast track process for review.  Rick is the Derby representative at opengroup.   Hopefully Rick and the entire opengroup review team will find the ACR in good order and we can implement &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt; to the new specification.&lt;/p&gt;</comment>
                            <comment id="12844376" author="kmarsden" created="Fri, 12 Mar 2010 05:43:16 +0000"  >&lt;p&gt;I marked this issue with labels mentor and gsoc.  I would be willing to mentor  a returning student in this project, but think it is probably not a good starting project for someone just joining derby.&lt;/p&gt;</comment>
                            <comment id="12867328" author="kmarsden" created="Fri, 14 May 2010 01:13:30 +0100"  >&lt;p&gt;I was recently discussing UNICODEMGR implementation with some engineers working on other database products.  The topic of the encoding for embedded character data in PRDDTA and CRRTKN came up.  The fields themselves are architected in DRDA as BYTSTRDR - Byte String, but do contain character data.  The question was whether the character data should be UNICODE  if UNICODEMGR was being used or should remain EBCDIC.  I was asked how it will be in Derby&apos;s implemenation. I think it should be UNICODE. It just makes more sense (to me)  and is how the current code will work, but should be limited to single byte characters.   Let me know if you have a different opinion or better ideas.&lt;/p&gt;</comment>
                            <comment id="12867548" author="dagw" created="Fri, 14 May 2010 17:22:14 +0100"  >&lt;p&gt;I am probably garbling this, since I don&apos;t have the DRDA context in my head, but how would this help create database names with Chinese characters? AFAIK they are encoded in Unicode with 3 bytes (UTF-8), not single bytes..&lt;/p&gt;</comment>
                            <comment id="12868713" author="espinha" created="Tue, 18 May 2010 17:31:38 +0100"  >&lt;p&gt;@ Kathey:&lt;br/&gt;
I do agree with you, if the UNICODE format is chosen, it should be used to all subsequent exchanges of data. If DRDA specifies this field as byte string, then I suppose the encoding is left to the discretion of the implementation.&lt;/p&gt;

&lt;p&gt;@ Dag:&lt;br/&gt;
In actual fact it wouldn&apos;t help the database names but I think for matters of coherence, if the UNICODE format is agreed upon between the parties, then it should be used for all cases.&lt;/p&gt;</comment>
                            <comment id="12868784" author="knutanders" created="Tue, 18 May 2010 19:48:32 +0100"  >&lt;p&gt;Where does the single-byte character restriction come from? If the standard just says these objects contain byte strings, I&apos;d assume we are allowed to encode multi-byte characters in them too.&lt;/p&gt;</comment>
                            <comment id="12873444" author="espinha" created="Sun, 30 May 2010 16:26:44 +0100"  >&lt;p&gt;I&apos;ve had a talk with Kathey about how to approach this issue and here&apos;s a summary of what was discussed.&lt;/p&gt;

&lt;p&gt;Essentially Kathey explained to me what she implemented in the derby-728_proto_diff.txt prototype. Based on this, we decided that I will first be addressing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4009&quot; title=&quot;Accommodate  length delimited DRDA strings where character  length does not equal byte length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4009&quot;&gt;&lt;del&gt;DERBY-4009&lt;/del&gt;&lt;/a&gt; which is a pre-requisite for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt;. After that I will be implementing an UTF8CcsidManager on the server side and respective tests. Finally I will be adding the code for the manager level negotiation (UNICODEMGR introduces a new manager level)  and for the switching between the two CcsidManagers.&lt;/p&gt;</comment>
                            <comment id="12876356" author="espinha" created="Mon, 7 Jun 2010 19:33:17 +0100"  >&lt;p&gt;This is my first patch for this issue.&lt;/p&gt;

&lt;p&gt;Kathey, we talked about putting in place that setDatabaseName() method as one functional patch. However, that has already been checked-in.&lt;/p&gt;

&lt;p&gt;As such, what this patch does is set the dbname and shortDbName fields to private. Being protected meant that there were classes that could bypass the setDatabaseName() and set the name directly to the attribute.&lt;/p&gt;

&lt;p&gt;This is usually a bad idea so I encapsulated the fields with getters and setters to enforce the setDatabaseName() method.&lt;/p&gt;

&lt;p&gt;I will be running regressions today.&lt;/p&gt;</comment>
                            <comment id="12876785" author="espinha" created="Tue, 8 Jun 2010 20:58:41 +0100"  >&lt;p&gt;The regressions ran without issues for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt;_p1.diff.&lt;/p&gt;</comment>
                            <comment id="12877191" author="espinha" created="Wed, 9 Jun 2010 21:33:26 +0100"  >&lt;p&gt;I need to brainstorm a bit here regarding the Utf8CcsidManager class that I have.&lt;/p&gt;

&lt;p&gt;There&apos;s one thing that I didn&apos;t implement because of a detail regarding the following method:&lt;br/&gt;
public String convertToUCS2(byte[] sourceBytes, int offset, int numToConvert) { }&lt;/p&gt;

&lt;p&gt;So far we had this method on the EbcdicCcsidManager and then it&apos;s fine because EBCDIC only uses one byte per character at all times. So the offset parameter always works in a consistent way, that is to say that if offset is 5, we are not only getting 5 sourceBytes but also getting exactly 5 characters.&lt;/p&gt;

&lt;p&gt;However, when we come to an Utf8CcsidManager, this offset might land straight in the middle of a character; then if we cut a character in half byte-wise, we will end with a totally different character.&lt;/p&gt;

&lt;p&gt;Is it acceptable to consider offset as a number of characters rather than a number of bytes? It works both ways in EBCDIC but for UTF8 it would mean converting the sourceBytes to a String, offsetting it character-wise, and then convert the &#171;offsetted&#187; String to UCS2.&lt;/p&gt;

&lt;p&gt;Any other ideas anyone might have?&lt;/p&gt;</comment>
                            <comment id="12877196" author="kmarsden" created="Wed, 9 Jun 2010 21:45:02 +0100"  >&lt;p&gt;I think from a practical perspective, at least for the server,  the length passed is always going to be on a character border.&lt;/p&gt;

&lt;p&gt;I only looked at the server code, but see the only place where it is ultimately called is from DDMReader.readString();&lt;/p&gt;

&lt;p&gt;protected String readString () throws DRDAProtocolException&lt;/p&gt;
	{
		return readString((int)ddmScalarLen);
	}

&lt;p&gt;ddmScalarLen is what was sent from the client as the actual length of the ddm object, so the length should be good.&lt;/p&gt;

&lt;p&gt;I think it would be good enough to document  this assumption in the javadoc of the method.&lt;/p&gt;

&lt;p&gt;We could not convert the sourceBytes because the buffer that is being passed is not all data, the rest of it (after offset ++ numToConvert bytes) is just the rest of the empty buffer.&lt;/p&gt;

</comment>
                            <comment id="12878786" author="espinha" created="Mon, 14 Jun 2010 23:51:54 +0100"  >&lt;p&gt;Here is the list of changes checked in by patch #2:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Utf8CcsidManager.java is rolled in for the server - This CCSID manager is not yet really used in practice. Instances are created but no real live code refers to it yet. I&apos;m still unsure about this implementation and this code might change, but I needed to have a draft in place to proceed further.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Both DDMWriter and DDMReader now have three CCSID manager attributes. These two classes have one instance of each of the available managers (UTF-8 and EBCDIC) and a reference to the current enabled one (already part of the existing implementation).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These two classes also no longer receive a CCSID manager in their constructor. Instead, they default to EBCDIC and whenever required we can setUtf8Ccsid() or revert to EBCDIC by doing setEbcdicCcsid().&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The DRDAConnThread.java class has also lost its own ccsidManager and will be using the one from its instance of DDMWriter. This class now initializes its DRDAStrings within the initialize() method, as it is only then that we have a DDMWriter available.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Finally, the tests ProtocolTest and TestProto have also been changed to accommodate the constructor changes in DDMWriter and DDMReader.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;I will be running regressions tonight. Provided that all goes well and there are no objections to this patch, it is ready for commit.&lt;/p&gt;</comment>
                            <comment id="12878788" author="espinha" created="Mon, 14 Jun 2010 23:55:50 +0100"  >&lt;p&gt;I forgot to mention but this patch aims at laying foundation for the dual CCSID manager possibility but the goal is to not break any of the current code. As I mentioned, the UTF-8 CCSID manager isn&apos;t yet being used by live code despite being in place and all going well, the EBCDIC will be the default even after the patch, without anything breaking.&lt;/p&gt;</comment>
                            <comment id="12878957" author="espinha" created="Tue, 15 Jun 2010 13:26:35 +0100"  >&lt;p&gt;The regressions ran with no failures or errors.&lt;/p&gt;</comment>
                            <comment id="12879525" author="espinha" created="Wed, 16 Jun 2010 22:51:27 +0100"  >&lt;p&gt;I&apos;m submitting two patches.&lt;/p&gt;

&lt;p&gt;The first is a new version of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt;_p2.diff which adds the proper ASF header to my Utf8CcsidManager.&lt;/p&gt;

&lt;p&gt;The second checks-in a test for the Utf8CcsidManager class and hooks it to the derbynet suite.&lt;/p&gt;

&lt;p&gt;I&apos;ll be running regressions again tonight.&lt;/p&gt;</comment>
                            <comment id="12879868" author="espinha" created="Thu, 17 Jun 2010 18:51:25 +0100"  >&lt;p&gt;The regressions ran with no failures using both p2 patches.&lt;/p&gt;</comment>
                            <comment id="12880329" author="kmarsden" created="Fri, 18 Jun 2010 22:20:20 +0100"  >&lt;p&gt;Thanks Tiago for the patch,  I think the naming of the methods is a bit confusing in the CCSidManger classes the method for example, public String convertToUCS2(byte[] sourceBytes) should probably just be convertToJavaString as as best I can tell that is what it is trying to do.  So  instead of:&lt;/p&gt;

&lt;p&gt;String sourceString = new String(sourceBytes,&quot;UTF-8&quot;);&lt;br/&gt;
           return new String(sourceString.getBytes(&quot;UTF-16&quot;),&quot;UTF-16&quot;);&lt;/p&gt;

&lt;p&gt;I think you could just return sourceString, unless I am missing something entirely.&lt;/p&gt;

&lt;p&gt;  I don&apos;t see that the   CcsidManger numToCharRepresentation  is being used anywhere. Could that just be removed?&lt;/p&gt;

</comment>
                            <comment id="12880357" author="espinha" created="Sat, 19 Jun 2010 00:04:42 +0100"  >&lt;p&gt;Here are two refreshed patches after discussing the above issue with Kathey on IRC. We agreed that the convertToUCS2 method should actually be called convertToJavaString as we have no real requirement to have UCS2 Strings. As long as they are Java Strings, it should be fine as they won&apos;t be sent over the network (not in UCS2 anyway).&lt;/p&gt;

&lt;p&gt;With this change, the conversion in the Utf8CcsidManager also changes slightly in this patch.&lt;/p&gt;

&lt;p&gt;I&apos;ve also removed a leftover comment that shouldn&apos;t have stayed there.&lt;/p&gt;

&lt;p&gt;It needs to be said that the naming change should also happen in the client&apos;s CcsidManager classes, but I will keep this task for when I do the client changes.&lt;/p&gt;

&lt;p&gt;I&apos;ll be running regressions again tonight and post the results in the morning.&lt;/p&gt;</comment>
                            <comment id="12880564" author="espinha" created="Sat, 19 Jun 2010 23:55:44 +0100"  >&lt;p&gt;The regressions failed for the last patch. Do NOT commit. The failure was as follows:&lt;/p&gt;

&lt;p&gt;There was 1 failure:&lt;br/&gt;
1) testBootLock(org.apache.derbyTesting.functionTests.tests.store.BootLockTest)j&lt;br/&gt;
unit.framework.AssertionFailedError: Minion did not start or boot db in 60 secon&lt;br/&gt;
ds.&lt;br/&gt;
----Minion&apos;s stderr:&lt;br/&gt;
Exception in thread &quot;main&quot; java.lang.NumberFormatException: For input string: &quot;&quot;&lt;br/&gt;
        at java.lang.NumberFormatException.forInputString(NumberFormatException.&lt;br/&gt;
java:48)        at java.lang.Integer.parseInt(Integer.java:470) at java.lang.Int&lt;br/&gt;
eger.valueOf(Integer.java:528)  at java.lang.Integer.decode(Integer.java:958)at&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.store.BootLockMinion.main(BootLockMi&lt;br/&gt;
nion.java:42)&lt;br/&gt;
----Minion&apos;s stderr ended&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.BootLockTest.waitFo&lt;br/&gt;
rMinionBoot(BootLockTest.java:217)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.BootLockTest.testBo&lt;br/&gt;
otLock(BootLockTest.java:130)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.&lt;br/&gt;
java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces&lt;br/&gt;
sorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 1,  Failures: 1,  Errors: 0&lt;/p&gt;

&lt;p&gt;It is consistent by running the test by itself. I will be analysing the issue and submitting another patch soon.&lt;/p&gt;</comment>
                            <comment id="12880569" author="espinha" created="Sun, 20 Jun 2010 00:06:40 +0100"  >&lt;p&gt;It seems these errors come from Kathey&apos;s r956075 and are unrelated to my patches. Kathey can you confirm this please?&lt;/p&gt;</comment>
                            <comment id="12881487" author="kmarsden" created="Wed, 23 Jun 2010 01:36:31 +0100"  >&lt;p&gt;Hi Tiago. I think it would be good to change the convertFromUCS2 methods to convertFromJavaString and I wonder about this method which I think should be called &lt;br/&gt;
convertToChar&lt;/p&gt;

&lt;p&gt;public char convertToUCS2Char(byte sourceByte) &lt;/p&gt;
{
        return (char) sourceByte;
    }


&lt;p&gt;For this one should the source byte be in UTF-8 , if so I think a straight cast might be a problem, depending on the default encoding.  Is it needed? I don&apos;t see it in EbcdicCcsidManager.&lt;/p&gt;



</comment>
                            <comment id="12881869" author="espinha" created="Wed, 23 Jun 2010 21:48:33 +0100"  >&lt;p&gt;I&apos;m attaching two new p2 patches as per Kathey&apos;s comments.&lt;/p&gt;

&lt;p&gt;The convertFromUCS2 methods should indeed be convertFromJavaString as that is what it in fact does. These functions will convert any string to UTF-8 as long as it is a valid Java String.&lt;/p&gt;

&lt;p&gt;I&apos;ve also removed convertToUCS2Char() as this was an artifact that I saw in Kathey&apos;s prototype and decided to keep. I&apos;m removing it for now and coming back to it later on if it becomes necessary. By then I expect to have a better understanding of why it is necessary.&lt;/p&gt;

&lt;p&gt;I will be running regressions again tonight.&lt;/p&gt;</comment>
                            <comment id="12882151" author="espinha" created="Thu, 24 Jun 2010 14:29:06 +0100"  >&lt;p&gt;The regressions ran without failures. I believe the patches are now ready to commit.&lt;/p&gt;</comment>
                            <comment id="12882185" author="kmarsden" created="Thu, 24 Jun 2010 16:20:04 +0100"  >&lt;p&gt;Hi Tiago,&lt;/p&gt;

&lt;p&gt;I committed the patch, but then noticed the test names probably ought to be changed too.&lt;br/&gt;
testConvertFromUCS2 used 0 ms .&lt;br/&gt;
testConvertToUCS2 used 0 ms&lt;br/&gt;
Time: 0.593&lt;/p&gt;</comment>
                            <comment id="12882288" author="espinha" created="Thu, 24 Jun 2010 20:07:28 +0100"  >&lt;p&gt;You&apos;re right Kathey, I overlooked this. It should be safe to commit straight away, it&apos;s just a name change.&lt;/p&gt;</comment>
                            <comment id="12883046" author="mikem" created="Mon, 28 Jun 2010 08:05:44 +0100"  >&lt;p&gt;It looks like the new file (Utf8CcsidManager.java) is causing problems with insane builds.  When using SanityManager routines you should always surround the call with a:&lt;br/&gt;
if (SanityManager.DEBUG)&lt;br/&gt;
    SanityManager.THROWASSERT(...&lt;/p&gt;

&lt;p&gt;This is so that when a release jar is built with sane=false no SanityManager code is included.&lt;/p&gt;</comment>
                            <comment id="12883342" author="espinha" created="Tue, 29 Jun 2010 00:02:28 +0100"  >&lt;p&gt;I&apos;m attaching two patches to this issue.&lt;/p&gt;

&lt;p&gt;The first, DERBY_728_p2_sanity.diff aims at fixing an issue with sanity. I was making calls to the SanityManager without a check to verify that the DEBUG was enabled. A question that remains open is: what do we do with the exception on a sane build? Is it ok to muffle it and only deal with it on insane mode?&lt;/p&gt;


&lt;p&gt;The second patch, DERBY_728_p3.diff, should in principle enable UTF-8 support in the server. I&apos;m not sure I&apos;ve missed something but I&apos;ll post a short explanation of what I&apos;ve done:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;CodePoint.java&lt;br/&gt;
Inserted the new code point for UNICODEMGR (0x1C08) as per the ACR and added it to the MGR_CODEPOINTS array.&lt;br/&gt;
&amp;#8211;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;NetworkServerControlImpl.java&lt;br/&gt;
Set the minimum manager level for the UNICODEMGR in synch with the MGR_CODEPOINTS array.&lt;br/&gt;
&amp;#8211;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;AppRequester.java&lt;br/&gt;
Set the minimum manager level for the UNICODEMGR in synch with the MGR_CODEPOINTS array.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Also added a convenience method that tells us whether the AppRequester depicted by this class supports or not UTF8. This relies on the manager level for UNICODEMGR being greater or equal to 1208. If the requester does not support UTF8, we won&apos;t get a UNICODEMGR manager level on the EXCSAT and as such UNICODEMGR will be set to 0 (which means this convenience method will return false).&lt;br/&gt;
&amp;#8211;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DRDAConnThread.java&lt;br/&gt;
When dealing with the ACCSEC code point and after we send the ACCSECRD reply we check whether the appRequester supports UTF8 and if it does, we enable it through the switchToUtf8() method &lt;span class=&quot;error&quot;&gt;&amp;#91;also part of the patch&amp;#93;&lt;/span&gt;. If it doesn&apos;t, make sure it goes back to EBCDIC, to make sure we aren&apos;t in UTF8 from the previous connection.&lt;br/&gt;
&amp;#8211;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m not sure how I&apos;d go about testing this as a client would have to support UTF-8 as well to be able to test it and this is still just the server side implementation. It will be a good test though to see if all regressions pass tonight; tomorrow, provided that this patch seems to be ok, I will do testing with older clients and see what the outcome is.&lt;/p&gt;</comment>
                            <comment id="12883448" author="espinha" created="Tue, 29 Jun 2010 08:38:49 +0100"  >&lt;p&gt;Regressions passed with no failures; I think it&apos;s safe to apply at least patch p2_sanity to fix the sanity issues.&lt;/p&gt;

&lt;p&gt;Testing older clients today.&lt;/p&gt;</comment>
                            <comment id="12883689" author="kmarsden" created="Tue, 29 Jun 2010 21:43:37 +0100"  >&lt;p&gt;Hi Tiago,&lt;/p&gt;

&lt;p&gt;The only comment I have on the code change is for AppRequester.supportsUtf8Ccsid(), I think == 1208 might be more appropriate than &amp;gt;= and perhaps a static constant would be good.&lt;/p&gt;

&lt;p&gt;For testing, I think you can use the ProtocolTest  to test if multi byte characters can be used in database name, userid and password, hopefully escaped unicode characters will work in protocol.tests.&lt;/p&gt;

&lt;p&gt;I committed the sanity manager patch. I think it is fine to just ignore for insane builds, because we don&apos;t think it can happen and if it did the NPE that would result would be pretty easy to track.&lt;/p&gt;

&lt;p&gt;It&apos;s great to see us so close on the server side!&lt;/p&gt;


&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12930150" author="espinha" created="Tue, 9 Nov 2010 14:54:29 +0000"  >&lt;p&gt;This feature has made it to the 10.7.1 release so unless bugs are found, I&apos;m taking this issue as resolved and I&apos;m closing it.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12475553">DERBY-4827</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="32841">DERBY-310</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12360734">DERBY-2251</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12474035">DERBY-4799</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12459231">DERBY-4584</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12474527">DERBY-4805</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12405588" name="ACR7007.pdf" size="883782" author="kmarsden" created="Wed, 15 Apr 2009 23:34:55 +0100"/>
                            <attachment id="12405796" name="BigTableName.java" size="3713" author="rhillegas" created="Fri, 17 Apr 2009 19:52:15 +0100"/>
                            <attachment id="12446508" name="DERBY-728_p1.diff" size="11816" author="espinha" created="Mon, 7 Jun 2010 19:33:17 +0100"/>
                            <attachment id="12447975" name="DERBY-728_p2-test.diff" size="1216" author="espinha" created="Thu, 24 Jun 2010 20:07:28 +0100"/>
                            <attachment id="12447880" name="DERBY-728_p2-test.diff" size="5533" author="espinha" created="Wed, 23 Jun 2010 21:48:33 +0100"/>
                            <attachment id="12447505" name="DERBY-728_p2-test.diff" size="6147" author="espinha" created="Sat, 19 Jun 2010 00:04:42 +0100"/>
                            <attachment id="12447278" name="DERBY-728_p2-test.diff" size="6135" author="espinha" created="Wed, 16 Jun 2010 22:51:27 +0100"/>
                            <attachment id="12447879" name="DERBY-728_p2.diff" size="18831" author="espinha" created="Wed, 23 Jun 2010 21:48:33 +0100"/>
                            <attachment id="12447504" name="DERBY-728_p2.diff" size="16375" author="espinha" created="Sat, 19 Jun 2010 00:04:42 +0100"/>
                            <attachment id="12447277" name="DERBY-728_p2.diff" size="14336" author="espinha" created="Wed, 16 Jun 2010 22:51:27 +0100"/>
                            <attachment id="12447081" name="DERBY-728_p2.diff" size="13434" author="espinha" created="Mon, 14 Jun 2010 23:51:54 +0100"/>
                            <attachment id="12448252" name="DERBY_728_p2_sanity.diff" size="1696" author="espinha" created="Tue, 29 Jun 2010 00:02:28 +0100"/>
                            <attachment id="12448253" name="DERBY_728_p3.diff" size="3638" author="espinha" created="Tue, 29 Jun 2010 00:02:28 +0100"/>
                            <attachment id="12395740" name="derby-728-startingpoint.diff" size="190166" author="dyret" created="Wed, 10 Dec 2008 14:59:38 +0000"/>
                            <attachment id="12397333" name="derby-728_proto_diff.txt" size="34750" author="kmarsden" created="Wed, 7 Jan 2009 21:55:59 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12411902">DERBY-4004</subtask>
                            <subtask id="12411968">DERBY-4008</subtask>
                            <subtask id="12411969">DERBY-4009</subtask>
                            <subtask id="12469536">DERBY-4746</subtask>
                            <subtask id="12470520">DERBY-4757</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 Jan 2006 09:35:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22116</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0jn3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37000</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>