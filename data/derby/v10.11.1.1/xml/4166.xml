<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:23:06 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4166/DERBY-4166.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4166] improvements to the mailjdbc test</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4166</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When recently working with the mailjdbc system test org.apache.derbyTesting.system.mailjdbc on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4152&quot; title=&quot;mailjdbc test database  grows very fast with 10.5&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4152&quot;&gt;&lt;del&gt;DERBY-4152&lt;/del&gt;&lt;/a&gt; I noticed some potential improvements that might be good for the test.  We should probably hold off on these improvements however until the root cause of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4152&quot; title=&quot;mailjdbc test database  grows very fast with 10.5&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4152&quot;&gt;&lt;del&gt;DERBY-4152&lt;/del&gt;&lt;/a&gt; is established, however, so we don&apos;t muddy the waters with that issue by changing the test.&lt;/p&gt;


&lt;p&gt;1) DbTasks.moveToFolders may throw an IllegalArgumentException.&lt;br/&gt;
  There is a line:  message_id = Rn.nextInt(count - 1);&lt;br/&gt;
  if count is 1 the argument to nextInt() might be 0 which is not allowed.  I hit this once but lost the stack trace, but it is apparent that when there is only one row in the table this can occur.&lt;/p&gt;


&lt;p&gt;2) Allow/implement multiple attachments per message and cleanup DbTasks.insertMail() logic.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Remove the attach_id column from INBOX to allow multiple attachments.&lt;br/&gt;
   -Make the attachment insert part of the message for loop in insertMail.&lt;br/&gt;
   Use getGeneratedKeys() to get the id of the inserted message.&lt;br/&gt;
   When attachments are inserted, insert (1-4) attachments and give them a corresponding attach_id from 1-4.&lt;br/&gt;
This will allow for removal of the select statements used to determine id and attach_id.  I&apos;ll file another issue for these improvements if folks agree that they are sensible.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A detailed description of the current implementation of insertMail is described at &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12405685/insertMailSummary.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12405685/insertMailSummary.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) DbTasks.databaseSize calculation is wrong. It doesn&apos;t match du -sk. The method does not recurse into subdirectories and includes the length() on directory files which is undefined accourding to the file.length() javadoc.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12423051">DERBY-4166</key>
            <summary>improvements to the mailjdbc test</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lilywei">Lily Wei</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Apr 2009 22:16:28 +0100</created>
                <updated>Tue, 11 May 2010 00:59:58 +0100</updated>
                            <resolved>Tue, 11 May 2010 00:59:58 +0100</resolved>
                                    <version>10.6.1.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12700282" author="kmarsden" created="Fri, 17 Apr 2009 19:52:31 +0100"  >&lt;p&gt;Here is the stack trace from the IllegalArgumentException&lt;br/&gt;
java.lang.IllegalArgumentException&lt;br/&gt;
        at java.util.Random.nextInt(Random.java:231)&lt;br/&gt;
        at org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.moveToFolders(DbTasks.java:363)&lt;br/&gt;
        at org.apache.derbyTesting.system.mailjdbc.tasks.Browse.moveToFolders(Browse.java:82)&lt;br/&gt;
        at org.apache.derbyTesting.system.mailjdbc.tasks.Browse.run(Browse.java:50)&lt;/p&gt;
</comment>
                            <comment id="12727551" author="lilywei" created="Mon, 6 Jul 2009 15:36:45 +0100"  >&lt;p&gt;Change the test to reflect the following points:&lt;br/&gt;
1. Take out attach_id column from INBOX table. Add to_delete column to ATTACH table. Change the logic for insert into attach table. Right now, it will try to insert a attachment for each unique id in INBOX. We will mark rows that will be deleted by  DeleteMailByUser(). After all the mails have been deleted from one of the thread, SYSCS_UTILS.SYSCS_INPLACE_COMPRESS_TABLE should reclaim space. &lt;br/&gt;
2. Change calculation of database size.&lt;br/&gt;
3. Add some queries to Statements.java&lt;br/&gt;
4. Change log info to achieve easier to read goal&lt;br/&gt;
5. Use user REFRESH instead of BACKUP on backup thread to avoid Derby-4295 issue&lt;br/&gt;
6. line: message_id = Rn.nextInt(count - 1) had been changed.&lt;/p&gt;

&lt;p&gt;Potential issues:&lt;br/&gt;
The number of blob insert does not reflect the rows had been deleted from ATTACH table. &lt;br/&gt;
The log to track space has been return to O.S. is not very intuitive from the log information.&lt;/p&gt;</comment>
                            <comment id="12729393" author="kmarsden" created="Thu, 9 Jul 2009 20:39:46 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think an argument like &quot;samedb&quot; would be better than upgrade, since sometimes you would want to resume with the same database without upgrade.&lt;/li&gt;
	&lt;li&gt;In DbTasks.java jdbcLoad we should add javadoc describing the parameters including the new one . I think a boolean useExistingdb would be better than upgrade, since it might be used on the same branch without upgrade.&lt;/li&gt;
	&lt;li&gt;I think for the useExistingdb option I think we should not attempt to run the schema.sql script.&lt;/li&gt;
	&lt;li&gt;I think instead of adding to_delete to the attach table for deletion we should maybe try just having a trigger that deletes from the attach table when we delete the mail from the inbox.&lt;/li&gt;
	&lt;li&gt;I think your database size method looks good but take out the commented old code.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12732341" author="kmarsden" created="Fri, 17 Jul 2009 05:51:55 +0100"  >&lt;p&gt;I committed the part of Lily&apos;s patch that changes the backup user to the database owner to work around &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4295&quot; title=&quot;SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE cannot be executed after granting permission for execute. &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4295&quot;&gt;DERBY-4295&lt;/a&gt;.  I think since we are changing a system test we should break up the patch into as small as possible increments so it will be easy to track any behavior changes. Next could be the change to allow resumption with the same database, then the database size method, then fixing the insert logic to avoid primary key exception, then adding delete cascade for the attachments.  I am sure some changes will need to be bundled but as much as possible we should break them up. I don&apos;t mind multiple patches.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;
</comment>
                            <comment id="12732368" author="lilywei" created="Fri, 17 Jul 2009 07:31:39 +0100"  >&lt;p&gt;Thanks Kathey for commit the patch. This is the part of patch that change to allow resumption with the same database. This patch also relate to Derby-4203. The new syntax is in the README.txt. The diff is from directory 10.5&amp;lt;directory&amp;gt;/org/apache/derbyTesting/system/mailjdbc.&lt;/p&gt;</comment>
                            <comment id="12732593" author="kmarsden" created="Fri, 17 Jul 2009 17:17:57 +0100"  >&lt;p&gt;Hi  Lily. &lt;/p&gt;

&lt;p&gt;Visual inspection of the patch looks fine except a typo in the instructions which has &quot;the same database as twice:&lt;br/&gt;
If you want to use the same database as the same database as previous run.&lt;/p&gt;


&lt;p&gt;Can you make a new patch with this small change and &lt;br/&gt;
1) Do svn diff from the top of the tree. If you want to include only specific files in your work space you can just specify those on the command line.&lt;br/&gt;
2) Attach the patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4203&quot; title=&quot;Change mailjdbc and sstest system tests to be able to restart with the existing database instead of creating a new one so they can be used for upgrade testing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4203&quot;&gt;&lt;del&gt;DERBY-4203&lt;/del&gt;&lt;/a&gt; instead. I think it makes more sense to put it with that issue.&lt;/p&gt;</comment>
                            <comment id="12732620" author="lilywei" created="Fri, 17 Jul 2009 18:28:35 +0100"  >&lt;p&gt;Thanks Kathey for reviewing this. I attach another patch on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4203&quot; title=&quot;Change mailjdbc and sstest system tests to be able to restart with the existing database instead of creating a new one so they can be used for upgrade testing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4203&quot;&gt;&lt;del&gt;DERBY-4203&lt;/del&gt;&lt;/a&gt;. The next step should be change the database size method.&lt;/p&gt;</comment>
                            <comment id="12732697" author="lilywei" created="Fri, 17 Jul 2009 20:42:29 +0100"  >&lt;p&gt;The is purpose database size calculate function change. Instead of only calculate database size base on &amp;lt;database dir&amp;gt;/seg0. We calculate every files under &amp;lt;database dir&amp;gt;. I am putting the change to 10.5 in case we can use it in 10.5.2.0 testing.&lt;/p&gt;</comment>
                            <comment id="12732840" author="kmarsden" created="Sat, 18 Jul 2009 05:40:37 +0100"  >&lt;p&gt;Thanks Lily. I committed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4166&quot; title=&quot;improvements to the mailjdbc test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4166&quot;&gt;&lt;del&gt;DERBY-4166&lt;/del&gt;&lt;/a&gt;-databasesize.diff to trunk and 10.5.&lt;/p&gt;</comment>
                            <comment id="12733650" author="lilywei" created="Tue, 21 Jul 2009 15:47:35 +0100"  >&lt;p&gt;Thanks Kathey for the helping me review the change and submit the changes.&lt;br/&gt;
The attach file &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4166&quot; title=&quot;improvements to the mailjdbc test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4166&quot;&gt;&lt;del&gt;DERBY-4166&lt;/del&gt;&lt;/a&gt;-schemachange.diff is to attempt to fix the insert logic to avoid primary key exception and continue using delete cascade and improve the insert logic for REFRESH.ATTACH with new schema. There are a lot of logging changes. When reviewing the test performance, these log info help me to understand what is going on.&lt;/p&gt;</comment>
                            <comment id="12735148" author="kmarsden" created="Fri, 24 Jul 2009 21:26:03 +0100"  >&lt;p&gt;Thanks Lily for the patch. &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In schema.sql there is a small space/tab issue at:&lt;br/&gt;
		     attach_id bigint generated always as identity (start with 1, increment by 1),&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in DbTasks.deleteMailByThread there is a count_att which I think is not used.&lt;/li&gt;
	&lt;li&gt;In insertMail I think the code to insert the attachements should be included in the loop to insert the mail in the INBOX and should not require a select from INBOX after the .  In general we want.&lt;br/&gt;
		int num = Rn.nextInt(10 - 1);&lt;br/&gt;
			for (int i = 0; i &amp;lt; num; i++) {&lt;br/&gt;
                             //insert mail to INBOX &lt;br/&gt;
                             ... code looks fine&lt;br/&gt;
                              // get the id. with insertFirst.getGeneratedKeys()&lt;br/&gt;
                                .. need to add                    &lt;br/&gt;
                             // insert attachments  for approximately 1 in 10 mails&lt;br/&gt;
                             if  (i == Rn.nextInt(10 -1)) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {                              // insert from 1 to 5 attachments                              num_attatch - Rn.nextInt(5-1);                              for (int j = 0; j &amp;lt; num_attach;j++) {
                                    // insert the attachment  using the id you got from getGeneratedKeys()
                                }                               }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12735306" author="lilywei" created="Sat, 25 Jul 2009 19:15:49 +0100"  >&lt;p&gt;Thanks Kathey for looking at the patch. &lt;br/&gt;
-the space/tab issue in schema.sql has been taking care of&lt;br/&gt;
-count_att is delete fom DbTasks.deleteMailByThread&lt;br/&gt;
-change the logic in Insert mail so&lt;br/&gt;
it will &lt;br/&gt;
nt num = Rn.nextInt(10 - 1); &lt;br/&gt;
for (int i = 0; i &amp;lt; num; i++) { &lt;br/&gt;
                             //insert mail to INBOX &lt;br/&gt;
                             // get the id from select id from REFRESH.INBOX  (stmt1)&lt;br/&gt;
                             // insert attachments for approximately 1 in 10 mails &lt;br/&gt;
                             while (i == Rn.nextInt(10 -1)) { &lt;br/&gt;
                             int num_attatch = Rn.nextInt(5-1); &lt;br/&gt;
                              for (int j = 0; j &amp;lt; num_attach;j++) &lt;/p&gt;
{ 
                                    // insert the attachment using the id from stmt1
                                }
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Test run fine for a day. However, I am seeing deadlock error now.&lt;br/&gt;
Within the day, delete thread hold lock on table inbox which will cascade delete table attach. Also, insert thread will hold lock on inbox for getting the id and holding lock for attach for inserting row to attach. The time the test takes to delete row from tables is usually less than a second. However, the time it takes to insert to inbox and attach can be varying from 0.x second to 16 sec. &lt;/p&gt;

&lt;p&gt;To avoid the deadlock, I can:&lt;br/&gt;
1. Sleep more before delete thread gets call&lt;br/&gt;
2. Look at while inserting less than 10 rows to each table on total of two tables can takes up to 16 seconds.&lt;br/&gt;
3. Put id in a array so insert into attach does not hold lock for table inbox and table attach&lt;br/&gt;
4. Open for more suggestion.&lt;/p&gt;

&lt;p&gt;2009-07-25 07:43:56.494 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;Refresh Thread,5,main&amp;#93;&lt;/span&gt; (XID = 131869), (SESSI&lt;br/&gt;
ONID = 3), (DATABASE = mailsdb), (DRDAID = null), Cleanup action starting^M&lt;br/&gt;
2009-07-25 07:43:56.494 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;Refresh Thread,5,main&amp;#93;&lt;/span&gt; (XID = 131869), (SESSI&lt;br/&gt;
ONID = 3), (DATABASE = mailsdb), (DRDAID = null), Failed Statement is: delete fr&lt;br/&gt;
om REFRESH.INBOX where to_delete = 1^M&lt;br/&gt;
ERROR 40001: A lock could not be obtained due to a deadlock, cycle of locks and&lt;br/&gt;
waiters is:&lt;br/&gt;
Lock : ROW, INBOX, (1,623)&lt;br/&gt;
  Waiting XID : &lt;/p&gt;
{131869, X} , REFRESH, delete from REFRESH.INBOX where to_delete&lt;br/&gt;
 = 1&lt;br/&gt;
  Granted XID : {131737, X}&lt;br/&gt;
Lock : ROW, INBOX, (1,613)&lt;br/&gt;
  Waiting XID : {131737, X} , BROWSE, update REFRESH.INBOX set to_delete = ? whe&lt;br/&gt;
re id = ?&lt;br/&gt;
  Granted XID : {131869, X}
&lt;p&gt;. The selected victim is XID : 131869.^M&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardEx&lt;br/&gt;
ception.java:303)^M&lt;br/&gt;
        at org.apache.derby.impl.services.locks.Deadlock.buildException(Deadlock&lt;br/&gt;
.java:390)^M&lt;br/&gt;
        at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(Con&lt;br/&gt;
currentLockSet.java:613)^M&lt;br/&gt;
        at org.apache.derby.impl.services.locks.AbstractPool.lockObject(Abstract&lt;br/&gt;
Pool.java:119)^M&lt;br/&gt;
        at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(Concur&lt;br/&gt;
rentPool.java:28)^M&lt;br/&gt;
        at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(R&lt;br/&gt;
owLocking3.java:248)^M&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapCo&lt;br/&gt;
ntroller.java:504)^M&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapCo&lt;br/&gt;
ntroller.java:638)^M&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRow&lt;br/&gt;
OnPage(B2IRowLocking3.java:309)^M&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockSc&lt;br/&gt;
anRow(B2IRowLocking3.java:599)^M&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockSc&lt;br/&gt;
anRow(B2IRowLockingRR.java:105)^M&lt;br/&gt;
TreeForwardScan.java:305)^M&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeSca&lt;br/&gt;
n.java:1503)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.TableScanResultSet.getNextRowCore(T&lt;br/&gt;
ableScanResultSet.java:680)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextR&lt;br/&gt;
owCore(IndexRowToBaseRowResultSet.java:373)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRow&lt;br/&gt;
Core(ProjectRestrictResultSet.java:256)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DM&lt;br/&gt;
LWriteResultSet.java:127)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows&lt;br/&gt;
(DeleteResultSet.java:335)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.collectAffec&lt;br/&gt;
tedRows(DeleteCascadeResultSet.java:185)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.open(DeleteC&lt;br/&gt;
ascadeResultSet.java:120)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Generi&lt;br/&gt;
cPreparedStatement.java:416)^M&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPre&lt;br/&gt;
paredStatement.java:297)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedState&lt;br/&gt;
ment.java:1235)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Em&lt;br/&gt;
bedPreparedStatement.java:1675)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Embed&lt;br/&gt;
PreparedStatement.java:302)^M&lt;br/&gt;
        at org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.deleteMailByThr&lt;br/&gt;
ead(DbTasks.java:330)^M&lt;br/&gt;
        at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.deleteMailByRef&lt;br/&gt;
resh(Refresh.java:105)^M&lt;br/&gt;
        at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.doWork(Refresh.&lt;br/&gt;
java:83)^M&lt;br/&gt;
        at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.run(Refresh.jav&lt;br/&gt;
a:51)^M&lt;/p&gt;

&lt;p&gt;I got 4 deadlock error from one day run.&lt;/p&gt;</comment>
                            <comment id="12735310" author="kmarsden" created="Sat, 25 Jul 2009 19:39:44 +0100"  >&lt;p&gt;Lily in the schemachange2 patch I still see the attachments in a separate loop from the mail and we still have the SELECT ID from REFRESH.INBOX which may be causing the deadlock.  Did getGeneratedKeys() not work to get the id if you keep the attachment insert in the loop?   I think if we do that and commit after completing the full insert of each mail into INBOX and ATTACH we shouldn&apos;t see timeouts or deadlocks.  &lt;/p&gt;</comment>
                            <comment id="12735320" author="kmarsden" created="Sat, 25 Jul 2009 22:03:20 +0100"  >&lt;p&gt;Lily said in an email&lt;br/&gt;
&amp;gt; Yes, it is schemachange2. I need the same Id in attach table because it is a foreign key of inbox. I don&apos;t know how getGeneratedKeys work. Does it get the same key in inbox?&lt;/p&gt;

&lt;p&gt;Yes. getGeneratedKeys() will get the id that was just inserted into the inbox identity column, so you don&apos;t have to query the table to get it. See&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#getGeneratedKeys(&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#getGeneratedKeys(&lt;/a&gt;)&lt;br/&gt;
and&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/docs/dev/ref/crefjavstateautogen.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/dev/ref/crefjavstateautogen.html&lt;/a&gt;&lt;br/&gt;
for information&lt;br/&gt;
and the test AugoGenJDBC30Test for examples.&lt;/p&gt;


&lt;p&gt;Lily also said:&lt;br/&gt;
&amp;gt;Since delete thread will delete data in inbox table, the id in inbox table will keep changing as test run.&lt;/p&gt;

&lt;p&gt;I have not studied the delete logic carefully, but will take a look. It should be able to accommodate the approach I described for the inserts without deadlocks.&lt;/p&gt;

&lt;p&gt; Because we will be inserting each  email content and attachments as a single transaction, the delete thread should not consider it for deletion until the insert is complete and the id we get with getGeneratedKeys() should still be valid when we insert the attachments.&lt;/p&gt;

</comment>
                            <comment id="12735394" author="lilywei" created="Sun, 26 Jul 2009 17:54:53 +0100"  >&lt;p&gt;Thanks Kathey for helping me with the patch.&lt;br/&gt;
I change insertMail() to use the getGeneratedKeys() to get the id as suggested. Also, insert the attachements should be included in the loop to insert the mail in the INBOX. The test should have 1/10 percentage to insert attach emails. I was expecting I don&apos;t see any deadlock error after this change. However, I still get deadlock on Refresh thread while deleteMailbyRefresh() query and Browse thread deleteMailbyUSer() are waiting for lock by Refresh thread insertMail().&lt;br/&gt;
I close and open connection at two places in the Refresh thread. First, when insertMail() get interrupted  in Refresh thread. Second, when DeleteMailbyRefresh() get Exception from test run. After running the tests for more than 10 hours, this patch is running without a problem on embedded server. &lt;/p&gt;</comment>
                            <comment id="12735780" author="kmarsden" created="Mon, 27 Jul 2009 22:19:02 +0100"  >&lt;p&gt;I took a quick look at the patch and I think we are getting very close.  I have to go over the insert logic again in some detail to post some comments but was wondering  about this:&lt;br/&gt;
&amp;gt;I close and open connection at two places in the Refresh thread. First, when insertMail() get interrupted in Refresh thread. Second, when DeleteMailbyRefresh() get Exception from test run.&lt;/p&gt;

&lt;p&gt;I think that it should suffice to just rollback() at these points instead of closing and reopening the connection. Does just a rollback()  eliminate the deadlocks and timeouts?&lt;/p&gt;</comment>
                            <comment id="12735932" author="lilywei" created="Tue, 28 Jul 2009 06:13:04 +0100"  >&lt;p&gt;I was hoping rollback will take care of the deadlock problem. However, with rollback, close connection and reopen connection, the mailjdbc embedded test still has deadlock error after 16 hours. I fix some Rn.nextInt issue for attach_id on line 200 for DbTasks.java. for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4166&quot; title=&quot;improvements to the mailjdbc test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4166&quot;&gt;&lt;del&gt;DERBY-4166&lt;/del&gt;&lt;/a&gt;-schemachange4.diff. When insert is taking longer than 10 seconds, the tests will run into the situation of deadlock. I think we are very close too. I am still thinking doing more on mailjdbc side to avoid deadlock situation.  Interrupt Refresh thread still happens, InsertMail method did not fail.&lt;/p&gt;</comment>
                            <comment id="12838979" author="lilywei" created="Fri, 26 Feb 2010 18:47:43 +0000"  >&lt;p&gt;Hi:&lt;br/&gt;
   After take out select from Refresh thread, rearrange reading mail message then attachment from Browse thread, add sleep time for Refresh thread, Browse thread and Purge thread.&lt;br/&gt;
With long sleep time for Purge thread, we no long has to delete row from REFRESH.INBOX using&lt;br/&gt;
&quot;delete from REFRESH.INBOX where (values &lt;/p&gt;
{fn TIMESTAMPDIFF(SQL_TSI_DAY,  date,CURRENT_TIMESTAMP)}
&lt;p&gt;)&amp;gt;1&quot; Hence, no deadlock issue introduce by mailjdbc test.&lt;/p&gt;

&lt;p&gt;   I was able to run mailjdbc test for more than 11 hours now without any issues.&lt;/p&gt;

&lt;p&gt;   I am attaching the patch for review. I believe the original intent for interrupt is for the potential deadlock issue. If we truly want to stress test the system for its scale rather than handle deadlock situation, I believe this fix should be okay. I am open for any further approach. &lt;/p&gt;

&lt;p&gt;  I also attach derby.log just for reference.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Lily&lt;/p&gt;</comment>
                            <comment id="12839058" author="lilywei" created="Fri, 26 Feb 2010 22:45:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4166&quot; title=&quot;improvements to the mailjdbc test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4166&quot;&gt;&lt;del&gt;DERBY-4166&lt;/del&gt;&lt;/a&gt;-schemachange3.diff was a used name. Attach &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4166&quot; title=&quot;improvements to the mailjdbc test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4166&quot;&gt;&lt;del&gt;DERBY-4166&lt;/del&gt;&lt;/a&gt;-schemachange5.diff for the version that does not have deadlock and it can run more than 14 hours.&lt;/p&gt;</comment>
                            <comment id="12839939" author="lilywei" created="Tue, 2 Mar 2010 00:42:28 +0000"  >&lt;p&gt;1. Change the number of row delete by Purge thread. Now, the test usually maintain between 10 - 56 rows during test duration. I had run &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4166&quot; title=&quot;improvements to the mailjdbc test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4166&quot;&gt;&lt;del&gt;DERBY-4166&lt;/del&gt;&lt;/a&gt;-schemachange6.diff for more than 11 hours and everything is running smooth. I run it with embedded mode and network server mode. &lt;br/&gt;
2. The test is ready for review and suggestion for changes.&lt;/p&gt;</comment>
                            <comment id="12841555" author="lilywei" created="Thu, 4 Mar 2010 21:59:34 +0000"  >&lt;p&gt;Compare to the previous patch. There is a issue on movetoFolder method on DbTasks.java.&lt;br/&gt;
Where we can get 0 from select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from REFRESH.INBOX and cause an Exception. This new patch fix that minor issue. The patch is ready for review.&lt;/p&gt;</comment>
                            <comment id="12843313" author="kmarsden" created="Tue, 9 Mar 2010 21:47:03 +0000"  >&lt;p&gt;Hi Lily,&lt;/p&gt;

&lt;p&gt;I committed to the 7 patch and think it is a good incremental improvement. I am a bit concerned about extending the timeouts as a way to avoid the deadlocks.  I think there is still some problem with the test logic that is causing the deadlocks and hope we can reduce the sleeps later.  For a stress test, too much sleep time just means less testing each day in the stress test.&lt;/p&gt;

&lt;p&gt;I think we can close this one, but I think we should make a new issue to reduce the timeouts and eliminate the deadlocks and also track down why the compress is needed to reclaim space used by the test, since it seemed to be something different than &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4055&quot; title=&quot;Space may not be reclaimed if  row locks are not available after three retries &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4055&quot;&gt;DERBY-4055&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12865990" author="lilywei" created="Tue, 11 May 2010 00:59:58 +0100"  >&lt;p&gt;The test is good improvement from before. I am closing this bug and tracking down the issue to reduce the timeouts and eliminate the deadlocks. Also, track down why the compress is needed to reclaim space used by the test.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12413865" name="DERBY-4166-databasesize.diff" size="1855" author="lilywei" created="Fri, 17 Jul 2009 20:42:29 +0100"/>
                            <attachment id="12414105" name="DERBY-4166-schemachange.diff" size="17563" author="lilywei" created="Tue, 21 Jul 2009 15:47:35 +0100"/>
                            <attachment id="12414519" name="DERBY-4166-schemachange2.diff" size="19130" author="lilywei" created="Sat, 25 Jul 2009 19:15:49 +0100"/>
                            <attachment id="12437224" name="DERBY-4166-schemachange3.diff" size="31078" author="lilywei" created="Fri, 26 Feb 2010 18:47:42 +0000"/>
                            <attachment id="12414557" name="DERBY-4166-schemachange3.diff" size="21772" author="lilywei" created="Sun, 26 Jul 2009 17:54:53 +0100"/>
                            <attachment id="12414711" name="DERBY-4166-schemachange4.diff" size="22416" author="lilywei" created="Tue, 28 Jul 2009 06:13:04 +0100"/>
                            <attachment id="12437264" name="DERBY-4166-schemachange5.diff" size="31078" author="lilywei" created="Fri, 26 Feb 2010 22:45:20 +0000"/>
                            <attachment id="12437546" name="DERBY-4166-schemachange6.diff" size="31528" author="lilywei" created="Tue, 2 Mar 2010 00:42:28 +0000"/>
                            <attachment id="12437933" name="DERBY-4166-schemachange7.diff" size="31784" author="lilywei" created="Thu, 4 Mar 2010 21:59:34 +0000"/>
                            <attachment id="12413779" name="Derby-4166-samedb.diff" size="4005" author="lilywei" created="Fri, 17 Jul 2009 07:31:39 +0100"/>
                            <attachment id="12412615" name="Derby-4166.diff" size="18452" author="lilywei" created="Mon, 6 Jul 2009 15:36:45 +0100"/>
                            <attachment id="12437225" name="derby.log" size="672" author="lilywei" created="Fri, 26 Feb 2010 18:47:43 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 6 Jul 2009 14:36:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31150</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0qcn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38087</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>