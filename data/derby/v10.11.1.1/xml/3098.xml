<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:44:32 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3098/DERBY-3098.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3098] LOB locks are not released after free().</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3098</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When getBlob/getClob is called on the ResultSet, the current row is&lt;br/&gt;
locked if the JDBC driver does not cache the entire LOB value in&lt;br/&gt;
memory.  This is done to prevent the Blob/Clob object from being&lt;br/&gt;
changed.  Until now, this lock has been held to the end of the&lt;br/&gt;
transaction.&lt;/p&gt;

&lt;p&gt;JDBC4 introduced free() methods for the Blob/Clob class.  The locking&lt;br/&gt;
should be changed so that the locks is releases when the Blob/Clob&lt;br/&gt;
object is freed.&lt;/p&gt;
</description>
                <environment>Any</environment>
        <key id="12379542">DERBY-3098</key>
            <summary>LOB locks are not released after free().</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="oysteing">&#216;ystein Gr&#248;vlen</assignee>
                                    <reporter username="oysteing">&#216;ystein Gr&#248;vlen</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Oct 2007 08:41:59 +0100</created>
                <updated>Thu, 2 May 2013 03:29:09 +0100</updated>
                            <resolved>Mon, 15 Oct 2007 14:59:02 +0100</resolved>
                                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.2.1</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12532035" author="oysteing" created="Wed, 3 Oct 2007 09:11:30 +0100"  >&lt;p&gt;The attached patch, derby-3098fix.diff, fixes the locking.  This patch&lt;br/&gt;
is not intended for commit since tests should be added first.&lt;/p&gt;

&lt;p&gt;Explanation of the patch: By using READ COMMITTED instead of&lt;br/&gt;
REPEATABLE READ the locking will not be associated with the&lt;br/&gt;
transaction, but with the BaseContainerHandle. Since we use a handle&lt;br/&gt;
that we get from reopening the container, we get control over when the&lt;br/&gt;
locks are released.  The is closed when the stream is closed, or at&lt;br/&gt;
the end of the transaction at the latest.  (During termination of the&lt;br/&gt;
transaction, close will be called on all container handles).&lt;/p&gt;

&lt;p&gt;I have also updated the comments to reflect this new implementation.&lt;br/&gt;
I must admit I did not quite understand the discussion in the comment&lt;br/&gt;
around using the isolation level of the container, but given my&lt;br/&gt;
proposed solution, that discussion does not relevant, and I have&lt;br/&gt;
deleted it from the comments.&lt;/p&gt;

&lt;p&gt;I plan to add the following tests:&lt;/p&gt;

&lt;p&gt;1. Check that lock on row is released at free() if isolation level of&lt;br/&gt;
   transaction is READ COMMITTED.&lt;br/&gt;
2. Check that lock on row is not released at free() if isolation level&lt;br/&gt;
   of transaction is REPEATABLE READ.&lt;br/&gt;
3. Check that lock on row is released when transaction commits.&lt;/p&gt;

&lt;p&gt;Please, speak up, if you think more tests are necessary.&lt;/p&gt;
</comment>
                            <comment id="12532065" author="knutanders" created="Wed, 3 Oct 2007 12:50:38 +0100"  >&lt;p&gt;Hi &#216;ystein,&lt;/p&gt;

&lt;p&gt;The patch looks correct to me and the test plan also sounds good. I&apos;m just wondering how this works when the transaction isolation level is READ UNCOMMITTED. Will a reader have to wait if another transaction has locked a large lob exclusively, but not if the lob is small?&lt;/p&gt;</comment>
                            <comment id="12532111" author="oysteing" created="Wed, 3 Oct 2007 14:49:36 +0100"  >&lt;p&gt;My testing so far shows that the patch solves the problem for Blob, but it does not appear to do so for Clob.&lt;/p&gt;

&lt;p&gt;When I run a simple test program that does getClob, it does not seem like OverflowInputStream is involved.&lt;br/&gt;
I will further investigate where the paths differ, but if anybody has an idea why Blob and Clob are handled differently, I welcome any ideas you may have.&lt;/p&gt;</comment>
                            <comment id="12532113" author="oysteing" created="Wed, 3 Oct 2007 15:03:47 +0100"  >&lt;p&gt;To Knut Anders question of READ UNCOMMITTED.  I have not tested it&lt;br/&gt;
yet, but I will add tests for that, too.&lt;/p&gt;

&lt;p&gt;I assume we also for READ_UNCOMMITTED want the record of the Blob to&lt;br/&gt;
be locked since the Blob object should be stable regardless of&lt;br/&gt;
isolation level.  (I think this illustrate that locking the record is&lt;br/&gt;
not the best solution for guaranteeing stability, but creating a new&lt;br/&gt;
mechanism that allow more concurrency will be much more work.  More&lt;br/&gt;
work than I am willing to put into this.)&lt;/p&gt;</comment>
                            <comment id="12532123" author="oysteing" created="Wed, 3 Oct 2007 15:24:19 +0100"  >&lt;p&gt;I was wrong about Clob not using OverflowInputStream.  It does.  (I&lt;br/&gt;
had an error in my test program so that it was fetching a Clob that&lt;br/&gt;
was not large enough for OverflowInputStream to come into play.)&lt;/p&gt;

&lt;p&gt;The problem I have is that locks are not released after free() for&lt;br/&gt;
Clob.  I think the problem is that it is obtaining two sets of locks,&lt;br/&gt;
but only releasing one set.  My theory is that in the EmbedClob constructor,&lt;br/&gt;
both &lt;br/&gt;
     ((Resetable) storeStream).initStream();&lt;br/&gt;
and&lt;br/&gt;
     this.clob = new StoreStreamClob(storeStream, this);&lt;br/&gt;
causes locks to be set.&lt;/p&gt;</comment>
                            <comment id="12532415" author="oysteing" created="Thu, 4 Oct 2007 13:59:29 +0100"  >&lt;p&gt;Attached is new patch, derby-3098fix+tests.diff, that fixes the double&lt;br/&gt;
locking problem for Clobs and add tests.&lt;/p&gt;

&lt;p&gt;EmbedClob no longer explicity initializes the stream since it will be&lt;br/&gt;
done when the StoreStreamClob object is created.  I also added a check&lt;br/&gt;
in OverflowInputStream to ensure that should a stream be initialized&lt;br/&gt;
several times, locking will only be peformed the first time.&lt;/p&gt;

&lt;p&gt;Tests has also been added. (Since free() is a JDBC 4 method, most test&lt;br/&gt;
cases had to be added to the JDBC 4 test suite, but I also added a&lt;br/&gt;
test case to BlobClob4Blob to check that locks are released at commit&lt;br/&gt;
if free() is not called.)&lt;/p&gt;

&lt;p&gt;With this patch, jdbc4/ClobTest will fail with client/server since it&lt;br/&gt;
turns out that when Clob.free() is called on the client, this is not&lt;br/&gt;
propagated to the server, and the server-side Clob is not freed until&lt;br/&gt;
commit.  I will file a separate issue for that.&lt;/p&gt;
</comment>
                            <comment id="12532611" author="oysteing" created="Fri, 5 Oct 2007 10:46:55 +0100"  >&lt;p&gt;Until &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3107&quot; title=&quot;On client, Clob.free() does not release locators.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3107&quot;&gt;&lt;del&gt;DERBY-3107&lt;/del&gt;&lt;/a&gt; is fixed, ClobTest will fail in client/server.&lt;/p&gt;</comment>
                            <comment id="12534845" author="oysteing" created="Mon, 15 Oct 2007 14:08:32 +0100"  >&lt;p&gt;Committed patch, derby-3098fix+tests.diff, as revision 584777.  &lt;br/&gt;
Junit All and derbyall ran without errors.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedClob.java&lt;br/&gt;
Only initialize storeStream once.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java&lt;br/&gt;
Do not lock for entire duration anymore, but until corresponding&lt;br/&gt;
BaseContainerHandle has been closed.  Also, make sure that locking&lt;br/&gt;
only happens once.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java&lt;br/&gt;
Add tests to test locking of Blob after free() for different isolation&lt;br/&gt;
levels.  Also, moved code from setUp that is only relevant to one test&lt;br/&gt;
case to that specific test case.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java&lt;br/&gt;
Add tests to test locking of Blob after free() for different isolation&lt;br/&gt;
levels.  Also, moved code from setUp that is only relevant to one test&lt;br/&gt;
case to that specific test case.&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java&lt;br/&gt;
Test that locks on Blob/Clob are released when transaction commits.&lt;/p&gt;</comment>
                            <comment id="12534849" author="oysteing" created="Mon, 15 Oct 2007 14:59:01 +0100"  >&lt;p&gt;Merged patch, derby-3098fix+tests.diff, to 10.3 branch as revision 584791.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12379740">DERBY-3107</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12372921">DERBY-2892</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12367066" name="derby-3098fix+tests.diff" size="24399" author="oysteing" created="Thu, 4 Oct 2007 13:59:29 +0100"/>
                            <attachment id="12366982" name="derby-3098fix.diff" size="3750" author="oysteing" created="Wed, 3 Oct 2007 09:11:30 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 3 Oct 2007 11:50:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23430</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy10sv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39780</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>