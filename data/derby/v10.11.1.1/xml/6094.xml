<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:30:23 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6094/DERBY-6094.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6094] Derby ignores DriverManager.setLoginTimeout()</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6094</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;If you set a login timeout using the DriverManager, Derby ignores the setting. I will attach a test case which shows this.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12634415">DERBY-6094</key>
            <summary>Derby ignores DriverManager.setLoginTimeout()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Wed, 27 Feb 2013 14:41:41 +0000</created>
                <updated>Mon, 24 Mar 2014 23:15:01 +0000</updated>
                            <resolved>Wed, 13 Mar 2013 13:18:09 +0000</resolved>
                                    <version>10.10.1.1</version>
                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13588394" author="rhillegas" created="Wed, 27 Feb 2013 14:44:08 +0000"  >&lt;p&gt;Attaching LoginTimeoutTest, a program which shows this problem. The test installs a user authenticator which takes 5 seconds to do its job. If you set the login timeout to 1 second and try to connect to Derby, you will get a Derby connection after 5 seconds.&lt;/p&gt;</comment>
                            <comment id="13588396" author="rhillegas" created="Wed, 27 Feb 2013 14:46:18 +0000"  >&lt;p&gt;Linking to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6000&quot; title=&quot;Implement support for JDBC 4.2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6000&quot;&gt;&lt;del&gt;DERBY-6000&lt;/del&gt;&lt;/a&gt; because this issue was discovered while buddy-testing the JDBC 4.2 support: &lt;a href=&quot;http://wiki.apache.org/db-derby/TenTenOneBuddyTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/TenTenOneBuddyTesting&lt;/a&gt;. Also linking to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2026&quot; title=&quot;Setting a login timeout in client driver can lead to query timeout&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2026&quot;&gt;&lt;del&gt;DERBY-2026&lt;/del&gt;&lt;/a&gt; because Dag posed a question there about whether we even test DriverManager.setLoginTimeout(). Apparently we don&apos;t.&lt;/p&gt;</comment>
                            <comment id="13588550" author="rhillegas" created="Wed, 27 Feb 2013 17:41:15 +0000"  >&lt;p&gt;In private email, JDBC spec lead Lance Andersen confirms that the Driver implementation (not the DriverManager itself) is responsible for enforcing login timeouts.&lt;/p&gt;</comment>
                            <comment id="13590527" author="rhillegas" created="Fri, 1 Mar 2013 13:58:20 +0000"  >&lt;p&gt;Attaching a new version of LoginTimeoutTest, correcting a bug which caused it to always set the login timeout to 1 second.&lt;/p&gt;</comment>
                            <comment id="13590896" author="rhillegas" created="Fri, 1 Mar 2013 20:08:45 +0000"  >&lt;p&gt;Attaching a new version of LoginTimeoutTest. This version shows what Derby does in the following situations:&lt;/p&gt;

&lt;p&gt;1) An embedded app tries to connect after calling DriverManager.setLoginTimeout() on the embedded VM.&lt;/p&gt;

&lt;p&gt;2) A client app tries to connect after someone called DriverManager.setLoginTimeout() on the server VM.&lt;/p&gt;

&lt;p&gt;3) A client app tries to connect after calling DriverManager.setLoginTimeout() on the client VM.&lt;/p&gt;

&lt;p&gt;I believe that in all 3 situations, sluggish logins should result in java.sql.SQLTimeoutException. The behavior right now is:&lt;/p&gt;

&lt;p&gt;(1) and (2): no exception&lt;/p&gt;

&lt;p&gt;(3): a java.sql.SQLNonTransientConnectionException&lt;/p&gt;

&lt;p&gt;I have coded a candidate solution, but I want to run a battery of tests before submitting it for community review.&lt;/p&gt;</comment>
                            <comment id="13593850" author="rhillegas" created="Tue, 5 Mar 2013 20:08:43 +0000"  >&lt;p&gt;Attaching a new version of LoginTimeoutTest. This version shows the login timeout behavior of Derby&apos;s DataSources also.&lt;/p&gt;</comment>
                            <comment id="13595535" author="dagw" created="Thu, 7 Mar 2013 04:26:05 +0000"  >&lt;p&gt;Good tests. Minor: comment say 5 seconds sleep, code says 2.&lt;/p&gt;

&lt;p&gt;I don&apos;t quite understand this result:&lt;/p&gt;

&lt;p&gt;Stopping server...&lt;br/&gt;
Starting server with timeout 10&lt;br/&gt;
:&lt;br/&gt;
Setting timeout 10 on local connector&lt;br/&gt;
    Testing derby6094.Derby6094$DriverManagerConnector( jdbc:derby://localhost:8246/memory:db1 )&lt;br/&gt;
        java.sql.SQLNonTransientConnectionException: SQLState = 08001. Message = java.net.ConnectException : \&lt;br/&gt;
             Error connecting to server localhost on port 8246 with message Connection refused: connect.&lt;br/&gt;
        Experiment took 1030 milliseconds.&lt;/p&gt;

&lt;p&gt;If both the client and the server side timeout is 10 seconds (I presume only the client side one sets any actual timeout: on the socket) and the authenticator sleeps only 2 (or 5) seconds, why the failure?&lt;/p&gt;

&lt;p&gt;Another question: You fork a server, but the test has unused code for starting the server via the API in the same VM. Have you seen a difference in behavior there?&lt;/p&gt;</comment>
                            <comment id="13595880" author="rhillegas" created="Thu, 7 Mar 2013 13:51:19 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Thanks for taking a look at the LoginTimeoutTest repro. Attaching a new version of the repro which fixes that typo you found.&lt;/p&gt;

&lt;p&gt;I agree that the result you are seeing is odd. I don&apos;t see that result myself. This is a warning to me: when I turn this code into a regression test, it may be plagued by heisenbugs like our other timing-sensitive network tests. This is the result I see:&lt;/p&gt;

&lt;p&gt;Stopping server...&lt;br/&gt;
Starting server with timeout 10&lt;/p&gt;

&lt;p&gt;Setting timeout 1 on local connector&lt;br/&gt;
    Testing LoginTimeoutTest$DriverManagerConnector( jdbc:derby://localhost:8246/memory:db1 )&lt;br/&gt;
        java.sql.SQLNonTransientConnectionException: SQLState = 08006. Message = A communications error has been detected: Read timed out.&lt;br/&gt;
        Experiment took 1040 milliseconds.&lt;br/&gt;
Setting timeout 10 on local connector&lt;br/&gt;
    Testing LoginTimeoutTest$DriverManagerConnector( jdbc:derby://localhost:8246/memory:db1 )&lt;br/&gt;
        Ha! Got a org.apache.derby.client.net.NetConnection40&lt;br/&gt;
        Experiment took 4010 milliseconds.&lt;/p&gt;

&lt;p&gt;Note that when I ran the experiment, the odd test case succeeded (as expected), but it took 4 seconds rather than the authentication sleep time of 2 seconds. That is because Derby does double authentication when you create a database. I don&apos;t understand why you are seeing a &quot;connection refused&quot; error after 1 second when you run that experiment. A socket timeout ought to be reported as such, as you can see from the immediately preceding experiment on my machine. So it seems that you are seeing some other communications failure. Are your results reproducible?&lt;/p&gt;

&lt;p&gt;It&apos;s true that an earlier rev of the test ran the server in the same VM as the client. I thought that would make the test run faster because I wouldn&apos;t have to keep bouncing the server. But I abandoned that approach early on because it didn&apos;t test the case where the client and server set different timeouts.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13596044" author="rhillegas" created="Thu, 7 Mar 2013 16:47:16 +0000"  >&lt;p&gt;Attaching derby-6094-01-ac-enforceDriverManagerLoginTimeout.diff. This is the first rev of a patch to fix this issue. The new regression test is vacuous and needs to be beefed up with the actual test cases from the repro. I am attaching this patch because I would like to get advice and early feedback from the community.&lt;/p&gt;

&lt;p&gt;At a high level, the patch does the following:&lt;/p&gt;

&lt;p&gt;1) Enforces login timeouts on the embedded driver and data sources.&lt;/p&gt;

&lt;p&gt;2) Makes client-side login timeouts conform to the JDBC 4.2 spec. That is, makes them raise SQLTimeoutException rather than the less refined SQLTransientException.&lt;/p&gt;

&lt;p&gt;3) Adds a debug flag so that JUnit tests can be run with login timeouts set.&lt;/p&gt;

&lt;p&gt;I would like the community&apos;s feedback on the following issues:&lt;/p&gt;

&lt;p&gt;A) Login timeouts are NOT implemented for CDC/FP 1.1. This is because I used java.util.concurrent classes to implement login timeouts and those classes are not available on CDC/FP 1.1. I think that it should be possible to implement login timeouts using the Thread support in FP 1.1, but I think that the java.util.concurrent approach is going to be easier to understand and maintain and likely to be more robust. If someone cares about login timeouts on CDC/FP 1.1, please speak up. We can log another JIRA for adding that feature. Note that I&apos;m not volunteering to do that work: it&apos;s not an important platform to me.&lt;/p&gt;

&lt;p&gt;B) I am not sure what to do about Thread interrupts incurred during a timed login attempt. I would like advice from the experts on Derby interrupt handling. The attached patch simply wraps the interrupt exception in a SQLException. But maybe the right thing to do is to retry the login attempt until the timer expires. Or something else. I tripped across this problem while running InterruptResilienceTest with login timeouts. When I run that test like this...&lt;/p&gt;

&lt;p&gt;java -Dderby.tests.login.timeout=10 junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest&lt;/p&gt;

&lt;p&gt;...I get errors in testRAFReadWriteMultipleThreads. It looks to me like the following is happening: A WorkerThread catches an interrupted lock exception, which it expects will happen from time to time. The WorkerThread then goes on to create a new connection but gets another interrupt before the login timeout expires.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/build/org/apache/derbyBuild/splitmessages.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/SQLExceptionFactory40.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java&lt;/p&gt;

&lt;p&gt;New SQLState for login timeouts. This is wrapped in a SQLTimeoutException on Java 6 and higher.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/jdbc/InternalDriver.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/Driver169.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/Driver20.java&lt;/p&gt;

&lt;p&gt;The guts of (1). This is where the java.util.concurrent classes are used to enforce login timeouts for the embedded driver.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/db/SlaveDatabase.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/tools/RollBackWrappingWhenFailOnImportTest.java&lt;/p&gt;

&lt;p&gt;The changes to the embedded driver resulted in an api change which percolated through the classes above.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/net/NetConnection.java&lt;/p&gt;

&lt;p&gt;This is the enforcement of (2), the raising of SQLTimeoutException on the client when the login timeout expires.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/TestConfiguration.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/Connector.java&lt;/p&gt;

&lt;p&gt;The changes for (3). Adds a new debug flag: derby.tests.login.timeout. You can set this to an integer, the length in seconds of the login timeout which you want to apply to all connection attempts. I have run the full JUnit suite with this flag set to 10. The tests run cleanly except for the following problems:&lt;/p&gt;

&lt;p&gt;i) The errors in InterruptResilienceTest described above.&lt;/p&gt;

&lt;p&gt;ii) I had to comment out NativeAuthenticationServiceTest. By itself, this test runs fine with derby.tests.login.timeout=10. However, when running the full JUnit suite with derby.tests.login.timeout=10, NativeAuthenticationServiceTest fails and its failure then chokes the rest of the suite. I need to investigate what&apos;s going on here.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java&lt;/p&gt;

&lt;p&gt;This is the shell of a new test which will contain the cases from the repro.&lt;/p&gt;</comment>
                            <comment id="13597322" author="rhillegas" created="Fri, 8 Mar 2013 17:39:18 +0000"  >&lt;p&gt;Attaching derby-6094-01-ad-enforceDriverManagerLoginTimeout.diff. This version of the patch beefs up LoginTimeoutTest with test cases from the repro. I&apos;m running tests now. If the tests pass, I plan to commit this version.&lt;/p&gt;

&lt;p&gt;I&apos;m still interested in the community&apos;s advice about how thread interrupts should interact with login timeouts.&lt;/p&gt;

&lt;p&gt;I&apos;ve also looked into the failures in NativeAuthenticationServiceTest which appear when you put it in a suite with another test and set derby.tests.login.timeout=10. I&apos;m fairly certain that this is a test design defect but I haven&apos;t gotten to the bottom of it yet.&lt;/p&gt;



&lt;p&gt;Touches the following additional file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/junit/JDBCClient.java&lt;/p&gt;

&lt;p&gt;Made the DERBYNETCLIENT constant public so that LoginTimeoutTest can use it.&lt;/p&gt;</comment>
                            <comment id="13597489" author="rhillegas" created="Fri, 8 Mar 2013 20:02:55 +0000"  >&lt;p&gt;Attaching derby-6094-01-ae-enforceDriverManagerLoginTimeout.diff. This third rev of the patch changes LoginTimeoutTest to use the singleUseDatabaseDecorator rather than CleanDatabaseTestSetup. For some reason, CleanDatabaseTestSetup results in errors when LoginTimeoutTest is run in a suite alongside other JUnit tests. Re-running the JUnit tests...&lt;/p&gt;</comment>
                            <comment id="13597615" author="rhillegas" created="Fri, 8 Mar 2013 22:05:41 +0000"  >&lt;p&gt;JUnit tests passed cleanly for me on derby-6094-01-ae-enforceDriverManagerLoginTimeout.diff. Committed at subversion revision 1454600.&lt;/p&gt;</comment>
                            <comment id="13598157" author="dagw" created="Sun, 10 Mar 2013 04:35:10 +0000"  >&lt;p&gt;Thanks, Rick. For the record, the odd results I saw was due to pilot error (NetBeans doesn&apos;t pass the active class path to the server subprocess, to it never got started). I&apos;ll have a look at the interrupts issue.&lt;/p&gt;</comment>
                            <comment id="13598174" author="dagw" created="Sun, 10 Mar 2013 06:26:08 +0000"  >&lt;p&gt;Currently, when Derby sees an interrupt, it does one of two things: a) if it is at a reasonable point to stop execution, e.g. waiting for a lock, or between statements in a batch, it will return control to the user with an exception b) if it is not in such a point of execution, it will make a note, but proceed, but possibly throw later, cf. point a).  In both cases the interrupt flag remains set when the user regains control (i.e the JDBC call returns).&lt;/p&gt;

&lt;p&gt;I think in a login situation, we would only want to stop execution of the login if it is safe (as in in we wouldn&apos;t lose resources or cause internal inconsistencies). I see you use the Future class to carry out the login using an upper time bound corresponding to the login timeout. I don&apos;t know how the execution of the asynchronous task would be stopped in such a case. Would it be safe (necessarily)?&lt;/p&gt;

&lt;p&gt;If the Future#get method throws an interrupt exception, we could retry but with a shorter timeout, I guess (after noting and clearing the flag as per our common approach). Since we already have a mechanism for stopping if login takes too long I don&apos;t see the need for having interrupts as a mechanism to stop it.&lt;/p&gt;</comment>
                            <comment id="13598177" author="knutanders" created="Sun, 10 Mar 2013 07:21:25 +0000"  >&lt;p&gt;The new test failed in the latest nightly test cycle:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://download.java.net/javadesktop/derby/javadb-5573775-report/javadb-5573775-3606706-details.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/javadesktop/derby/javadb-5573775-report/javadb-5573775-3606706-details.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;junit.framework.AssertionFailedError: Should have been able to connect!&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.tryTimeout(LoginTimeoutTest.java:290)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.tryTimeout(LoginTimeoutTest.java:277)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.vetConnector(LoginTimeoutTest.java:266)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.testBasic(LoginTimeoutTest.java:255)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        (...)&lt;/p&gt;</comment>
                            <comment id="13598207" author="dagw" created="Sun, 10 Mar 2013 11:07:40 +0000"  >&lt;p&gt;Uploading a modified Driver20.java suggesting how we could handle interrupts seen in the util.concurrent calls. Basically, the code retries the connect until the timeout has happened or success, reestablish the interrupt flag on exit. This also makes InterruptResilienceTest work in my environment.&lt;/p&gt;</comment>
                            <comment id="13598781" author="rhillegas" created="Mon, 11 Mar 2013 12:49:35 +0000"  >&lt;p&gt;Thanks, Dag. The change to Driver20 looks good to me. I suppose that in an interrupt-intensive application, this change could result in login timeouts lasting up to twice the time which the application specifies. In such an environment, timing is likely to be throw off a lot. I don&apos;t think this needs to be sanded down further. Thanks.&lt;/p&gt;</comment>
                            <comment id="13598845" author="rhillegas" created="Mon, 11 Mar 2013 14:20:32 +0000"  >&lt;p&gt;Attaching derby-6094-02-aa-createDBFirst.diff. Hopefully, this will fix the failure in LoginTimeoutTest seen on Linux. Committed at subversion revision 1455156.&lt;/p&gt;

&lt;p&gt;I ran the LoginTimeoutTest on Java 7 on Linux running inside VirtualBox on Mac OSX. The test failed for me there. For some reason, database creation takes a long time in that environment. This caused an initial connection attempt to fail on a login timeout when the test expected the connection attempt to succeed. I have changed the test in order to remove this source of heisenbugs. Now the test creates the database before trying to test timeouts.&lt;/p&gt;

&lt;p&gt;While I was in there, I also added some more defensive logic to make the test cleanup after itself when an unexpected error occurs.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/BaseTestCase.java&lt;/p&gt;</comment>
                            <comment id="13598872" author="rhillegas" created="Mon, 11 Mar 2013 15:04:51 +0000"  >&lt;p&gt;Attaching derby-6094-03-aa-retryOnInterrupt.diff. This patch applies Dag&apos;s suggested changes. I am running tests now.&lt;/p&gt;

&lt;p&gt;I also added a login timeout to the InterruptResilienceTest. That forces the new logic to be excercised.&lt;/p&gt;

&lt;p&gt;With the new logic, I have successfully run InterruptResilienceTest and LoginTimeoutTest on Mac OSX and on Linux on top of VirtualBox on top of Mac OSX.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/jdbc/Driver20.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java&lt;/p&gt;</comment>
                            <comment id="13598948" author="knutanders" created="Mon, 11 Mar 2013 16:25:09 +0000"  >&lt;p&gt;Thanks for fixing the test instability, Rick.&lt;/p&gt;

&lt;p&gt;Two small nits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The new connection that&apos;s used to ensure the database is created, should probably be closed after use (connections created with openDefaultConnection() aren&apos;t automatically closed by the framework).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The new minion failWithTrace() duplicates the functionality in BaseTestCase.fail(String msg, Throwable t), except the latter will make the original stack trace available to the JUnit machinery, not just print it to the console.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13598974" author="rhillegas" created="Mon, 11 Mar 2013 16:51:14 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6094-03-aa-retryOnInterrupt.diff. Committed at subversion revision 1455230.&lt;/p&gt;</comment>
                            <comment id="13598999" author="rhillegas" created="Mon, 11 Mar 2013 17:08:09 +0000"  >&lt;p&gt;Thanks for the quick review, Knut. Attaching derby-6094-04-aa-testCleanup.diff. This patch makes the changes Knut suggested. The patched test runs cleanly for me on Mac OSX and on Linux on VirtualBox on Mac OSX. Committed at subversion revision 1455238.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java&lt;/p&gt;</comment>
                            <comment id="13601127" author="rhillegas" created="Wed, 13 Mar 2013 13:18:09 +0000"  >&lt;p&gt;I believe the work on this issue is done. I have logged a follow-on issue, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6107&quot; title=&quot;Investigate why setting a login timeout causes NativeAuthenticationServiceTest to fail when run in a suite&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6107&quot;&gt;&lt;del&gt;DERBY-6107&lt;/del&gt;&lt;/a&gt;, to investigate why setting a login timeout causes NativeAuthenticationServiceTest to fail when run inside a larger suite.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12354444">DERBY-2026</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12616758">DERBY-6000</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12636772">DERBY-6107</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12642023">DERBY-6167</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12638364">DERBY-6122</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12572958" name="Driver20.java" size="13018" author="dagw" created="Sun, 10 Mar 2013 11:07:40 +0000"/>
                            <attachment id="12572157" name="LoginTimeoutTest.java" size="9389" author="rhillegas" created="Tue, 5 Mar 2013 20:08:43 +0000"/>
                            <attachment id="12571640" name="LoginTimeoutTest.java" size="5719" author="rhillegas" created="Fri, 1 Mar 2013 20:08:45 +0000"/>
                            <attachment id="12571580" name="LoginTimeoutTest.java" size="1886" author="rhillegas" created="Fri, 1 Mar 2013 13:58:20 +0000"/>
                            <attachment id="12571200" name="LoginTimeoutTest.java" size="1880" author="rhillegas" created="Wed, 27 Feb 2013 14:44:08 +0000"/>
                            <attachment id="12572554" name="derby-6094-01-ac-enforceDriverManagerLoginTimeout.diff" size="33751" author="rhillegas" created="Thu, 7 Mar 2013 16:47:16 +0000"/>
                            <attachment id="12572785" name="derby-6094-01-ad-enforceDriverManagerLoginTimeout.diff" size="44898" author="rhillegas" created="Fri, 8 Mar 2013 17:39:18 +0000"/>
                            <attachment id="12572813" name="derby-6094-01-ae-enforceDriverManagerLoginTimeout.diff" size="44925" author="rhillegas" created="Fri, 8 Mar 2013 20:02:55 +0000"/>
                            <attachment id="12573093" name="derby-6094-02-aa-createDBFirst.diff" size="7679" author="rhillegas" created="Mon, 11 Mar 2013 14:20:32 +0000"/>
                            <attachment id="12573098" name="derby-6094-03-aa-retryOnInterrupt.diff" size="4945" author="rhillegas" created="Mon, 11 Mar 2013 15:04:51 +0000"/>
                            <attachment id="12573121" name="derby-6094-04-aa-testCleanup.diff" size="2573" author="rhillegas" created="Mon, 11 Mar 2013 17:08:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10367"><![CDATA[Deviation from standard]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 7 Mar 2013 04:26:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>314908</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzc6wv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315252</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>