<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:38:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2109/DERBY-2109.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2109] System privileges</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2109</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Add mechanisms for controlling system-level privileges in Derby. See the related email discussion at &lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.db.derby.devel/33151&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://article.gmane.org/gmane.comp.apache.db.derby.devel/33151&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The 10.2 GRANT/REVOKE work was a big step forward in making Derby more  secure in a client/server configuration. I&apos;d like to plug more client/server security holes in 10.3. In particular, I&apos;d like to focus on  authorization issues which the ANSI spec doesn&apos;t address.&lt;/p&gt;

&lt;p&gt;Here are the important issues which came out of the email discussion.&lt;/p&gt;

&lt;p&gt;Missing privileges that are above the level of a single database:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Create Database&lt;/li&gt;
	&lt;li&gt;Shutdown all databases&lt;/li&gt;
	&lt;li&gt;Shutdown System&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Missing privileges specific to a particular database:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Shutdown that Database&lt;/li&gt;
	&lt;li&gt;Encrypt that database&lt;/li&gt;
	&lt;li&gt;Upgrade database&lt;/li&gt;
	&lt;li&gt;Create (in that Database) Java Plugins (currently  Functions/Procedures, but someday Aggregates and VTIs)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Note that 10.2 gave us GRANT/REVOKE control over the following  database-specific issues, via granting execute privilege to system  procedures:&lt;/p&gt;

&lt;p&gt;Jar Handling&lt;br/&gt;
Backup Routines&lt;br/&gt;
Admin Routines&lt;br/&gt;
Import/Export&lt;br/&gt;
Property Handling&lt;br/&gt;
Check Table&lt;/p&gt;

&lt;p&gt;In addition, since 10.0, the privilege of connecting to a database has been controlled by two properties (derby.database.fullAccessUsers and derby.database.defaultConnectionMode) as described in the security section of the Developer&apos;s Guide (see &lt;a href=&quot;http://db.apache.org/derby/docs/10.2/devguide/cdevcsecure865818.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.2/devguide/cdevcsecure865818.html&lt;/a&gt;).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12356374">DERBY-2109</key>
            <summary>System privileges</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Wed, 22 Nov 2006 15:57:47 +0000</created>
                <updated>Tue, 20 Dec 2011 20:57:17 +0000</updated>
                                            <version>10.3.1.4</version>
                                                    <component>Network Server</component>
                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                                                            <comments>
                            <comment id="12451997" author="rhillegas" created="Wed, 22 Nov 2006 17:28:05 +0000"  >&lt;p&gt;Added &quot;Boot all database&quot; as a system privilege based on Dag&apos;s feedback on the email thread. &quot;Encrypt database&quot; is already included in the list, based on feedback from Francois.&lt;/p&gt;</comment>
                            <comment id="12451998" author="rhillegas" created="Wed, 22 Nov 2006 17:29:51 +0000"  >&lt;p&gt;Added &quot;Upgrade database&quot; also per Dag&apos;s comments.&lt;/p&gt;</comment>
                            <comment id="12453719" author="djd" created="Mon, 27 Nov 2006 22:12:11 +0000"  >&lt;p&gt;Boot all databases is not a security issue for a client/server configuration. There is no mechanism for a client to enable or disable it.&lt;/p&gt;</comment>
                            <comment id="12453727" author="rhillegas" created="Mon, 27 Nov 2006 22:27:17 +0000"  >&lt;p&gt;Removed &quot;Boot all databases&quot; from system-wide list based on Dan&apos;s comment.&lt;/p&gt;</comment>
                            <comment id="12457469" author="rhillegas" created="Mon, 11 Dec 2006 20:35:12 +0000"  >&lt;p&gt;Attaching first rev of a functional spec for this feature. This spec incorporates feedback from the discussion on derby-dev:&lt;/p&gt;

&lt;p&gt;o Proposes using Java security mechanism to enforce system-wide privileges&lt;/p&gt;

&lt;p&gt;o Proposes restricting database-wide privileges to the Database Owner&lt;/p&gt;

&lt;p&gt;Would appreciate your continued feedback. Thanks.&lt;/p&gt;</comment>
                            <comment id="12457498" author="djd" created="Mon, 11 Dec 2006 22:33:34 +0000"  >&lt;p&gt;I don&apos;t think the &quot;plugin&quot; privilege is a system privilege since (as described in systemPrivs.html) it is restricting the ability to perform a database operation. I also think that the &quot;plugin&quot; privilege as described of being the privilege of being able to call CREATE FUNCTION or PROCEDURE is not the correct approach. The actual issue is being able to create a Java routine that maps to a class name not stored in a jar file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200611.mbox/%3c456C88DC.8080009@apache.org%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200611.mbox/%3c456C88DC.8080009@apache.org%3e&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12457499" author="davidvc" created="Mon, 11 Dec 2006 22:38:20 +0000"  >&lt;p&gt;Hi, Rick, nicely done!  Here are my comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I like the use of Java security for system privileges&lt;/li&gt;
	&lt;li&gt;I think the system-wide permissions defined in the DerbyPermissions class can be a little more descriptive, so that they are clear without having to refer to documentation:&lt;br/&gt;
    o &quot;create-plugin&quot; rather than just &quot;plugin&quot;&lt;br/&gt;
    o &quot;shutdown-engine&quot; rather than just &quot;shutdown&quot; (could be confused with permission to shut down a db)&lt;br/&gt;
    o &quot;create-database&quot; rather than just &quot;create&quot; (create what?)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&quot;We don&apos;t see why anyone other than the database owner would need to shutdown, upgrade or encrypt that database.&quot;  Hm, why not?  Why wouldn&apos;t I want to grant that privilege to others besides myself?  I always get nervous when someone says &quot;I can&apos;t see why anyone would ever want to do this.&quot;  I would rather we explicitly say we&apos;re not doing this for &lt;b&gt;now&lt;/b&gt;, but not make hardcoded assumptions that can leak their way into our code...&lt;/p&gt;

&lt;p&gt;Similarly, &quot;It&apos;s hard to imagine why you would want to grant more than one person the power to shut down the engine.&quot;  Hm, there&apos;s that phrase again &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  I would prefer to think of &quot;system administrator&quot; as a &lt;b&gt;role&lt;/b&gt; rather than a &lt;b&gt;person&lt;/b&gt;.  And it seems reasonable to me that you may want to grant more than one person system administrator rights.  At a minimum our architecture shouldn&apos;t assume only one system administrator per database engine.&lt;/p&gt;

&lt;p&gt;&quot;there is no way to change ownership of a database&quot; - is this a hardcoded fact of the Derby architecture, or is it something that&apos;s just not supported right now but could be enabled in the future?  Also, please clarify you mean an operating system account when you say &quot;it may be prudent to create a special account for this.&apos;&lt;/p&gt;

&lt;p&gt;What does &apos;???&apos; mean for &quot;Documentation.&quot;  It would be good for you to describe what documentation changes/additions will be needed for this feature.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;

</comment>
                            <comment id="12457508" author="djd" created="Mon, 11 Dec 2006 23:19:06 +0000"  >&lt;p&gt;Rick thanks for writing this up and looking &amp;amp; proposing how to use the Java SecurityManager.&lt;/p&gt;

&lt;p&gt;I would not have the fake concept of a &quot; System Administrator &quot;. With descriptions like this it&apos;s better to be precise in the functional specification, maybe the user documentation could explain it in more detail using the concept of a System Administrator.&lt;br/&gt;
e.g. in the functional spec replace sentances like this:&lt;/p&gt;

&lt;p&gt;If the engine runs under a SecurityManager, then only a System Administrator can halt the engine.&lt;/p&gt;

&lt;p&gt;with the technially correct version of:&lt;/p&gt;

&lt;p&gt;If the engine runs under a SecurityManager, then the shutdownEngine  DerbyPermission is required.&lt;/p&gt;

&lt;p&gt;Since I assume since these are Java permissions that they can be granted to code as well as Principles or are they restricted in some way? E.g. can I grant shutdown engine to all code?&lt;/p&gt;

&lt;p&gt;I would not use DerbyPermission for the class name, the class name should describe permissions it is covering, maybe&lt;br/&gt;
 org.apache.derby.security.SystemPermission ?&lt;/p&gt;

&lt;p&gt;The code should not assume the Princple implementation is DerbyPrinciple, seems like it would be useful to be able&lt;br/&gt;
to use other implementations of Principle. E.g. the existing UserAuthenticator class could be expanded to have a new method&lt;br/&gt;
  public Principle getPrinciple(String userName)&lt;br/&gt;
allowing use of existing implementations such as X500Principal or the Principle implementation returned from an LDAP setup.&lt;/p&gt;

&lt;p&gt;Similar naming concerns for DerbyPrinciple, the class is already in the derby namespace so it should be obvious that it&apos;s a Derby user, I think it&apos;s really something like:&lt;br/&gt;
   org.apache.derby.authentication.DatabasePrinciple ??&lt;/p&gt;</comment>
                            <comment id="12457509" author="djd" created="Mon, 11 Dec 2006 23:41:29 +0000"  >&lt;p&gt;Could you add the reasons why Derby will require the &quot;doAsPrivileged&quot; permission and not just the &quot;&quot;doAs&quot; permission?&lt;/p&gt;

&lt;p&gt;J2ME/CDC/Foundation 1.0 doesn&apos;t support the javax.security.auth.AuthPermission (or any javax.security class),&lt;br/&gt;
any thoughts on what the functionality will be in J2ME?&lt;/p&gt;
</comment>
                            <comment id="12457515" author="rhillegas" created="Tue, 12 Dec 2006 00:03:34 +0000"  >&lt;p&gt;Thanks Dan and David for your quick feedback. I will incorporate your suggestions into the next rev of the spec:&lt;/p&gt;

&lt;p&gt;1) Improve the package, class, and privilege names as suggested.&lt;/p&gt;

&lt;p&gt;2) Avoid talking about what I can&apos;t imagine.&lt;/p&gt;

&lt;p&gt;3) Say a bit more about database ownership: I don&apos;t see any architectural problem with changing the ownership; if someone wants to build this add-on feature, they can.&lt;/p&gt;

&lt;p&gt;4) Replace the &apos;???&apos; with a sentence or two stating that I haven&apos;t identified all the bits of documentation which need to be changed but that this is something we need to do before closing this issue.&lt;/p&gt;

&lt;p&gt;5) Avoid creating the impression that there is an architecturally significant System Administrator role.&lt;/p&gt;

&lt;p&gt;6) I believe it is correct that you can grant the system permissons to code as well as users. I will clarify this.&lt;/p&gt;

&lt;p&gt;7) I like the flexibility of adding a getPrinciple() method to UserAuthenticator. One question: do our stability conventions let us change an old customer-implemented interface in this way?&lt;/p&gt;

&lt;p&gt;Dan, could you say something more about how you think we should sand-down the plugin privilege:&lt;/p&gt;

&lt;p&gt;8a) I agree that one of the problems is the ability to invoke code outside the jar files supplied with the application. But I think there are other issues. For instance, there may be publicly accessible methods in the application jar files which should not be called without setting up some context.&lt;/p&gt;

&lt;p&gt;8b) Are you saying that you think this privilege should be scoped per database rather than per system? If so, do you think we should invent GRANT/REVOKE syntax for this? Or add a database-scoped Java permission which can be granted in the policy file?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12457903" author="rhillegas" created="Tue, 12 Dec 2006 22:06:39 +0000"  >&lt;p&gt;Dan, here are some responses to your last set of questions yesterday:&lt;/p&gt;

&lt;p&gt;1) Why doAsPrivileged() rather than doAs(): The first method is the one which is recommended for server environments (search for doAsPrivileged in the following webpage: &lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/guide/security/jaas/JAASRefGuide.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/guide/security/jaas/JAASRefGuide.html&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;2) J2ME/CDC/Foundation 1.0: The system-wide privileges seem to be important at the server site for client-server configurations. I don&apos;t see J2ME/CDC as a server platform. Would it be acceptable to say that system-wide privileges are only meaningful on the larger, client-server platforms?&lt;/p&gt;</comment>
                            <comment id="12457941" author="djd" created="Tue, 12 Dec 2006 23:28:15 +0000"  >&lt;p&gt;doAsPrivileged() vs. doAs()&lt;br/&gt;
  Thanks for the link to the JAAS reference, I think a better technical justification is needed than &quot;it&apos;s recommended&quot;, especially since I don&apos;t see any such recommendation, I only see a comment saying one example where it might be useful is for servers.&lt;/p&gt;

&lt;p&gt;Maybe you could walk through an example when the call stack looks like:&lt;/p&gt;

&lt;p&gt;    framework code -calling&amp;gt;&amp;gt; application code -calling&amp;gt;&amp;gt; Derby code&lt;/p&gt;

&lt;p&gt;and the application code is requesting a create database and the policy file is setup to allow rick to perform create database and the connection request is made as rick.&lt;br/&gt;
Why in this case is doAsPrivileged() required or better than doAs?&lt;/p&gt;</comment>
                            <comment id="12458110" author="oysteing" created="Wed, 13 Dec 2006 13:26:05 +0000"  >&lt;p&gt;Thanks for taking on this work Rick.  I think it is very important&lt;br/&gt;
improve such security issues in order to have a good story with&lt;br/&gt;
respect to deployment of a Derby network server.  Here are my&lt;br/&gt;
comments/questions to the document:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I think my biggest concern with the proposed scheme for&lt;br/&gt;
     system-wide privileges is that it seems to fall into the same&lt;br/&gt;
     category as Derby&apos;s static properties.  That is, you will have to&lt;br/&gt;
     restart the server in order for changes to take effect.  While&lt;br/&gt;
     this is OK as a starting point, how difficult will it be to&lt;br/&gt;
     extend this to allow privileges to be granted and revoked without&lt;br/&gt;
     having to restart the server?  Does the Java security framework&lt;br/&gt;
     have any support for run-time changes?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;While it may be true that the Java Security framework might be&lt;br/&gt;
     familiar to users who currently use the Security Manager, I am&lt;br/&gt;
     not sure that is the case for the average users that would like&lt;br/&gt;
     to use system privileges.  I think a lot more people will be more&lt;br/&gt;
     concerned about applications shutting down the server by&lt;br/&gt;
     accident, than that applications may write stuff where they&lt;br/&gt;
     should not.  Your proposal is not particulary familiar to DBA&apos;s&lt;br/&gt;
     that have experience from other RDBMS like MySQL, Postgres,&lt;br/&gt;
     Oracle, or DB2.  However, you can argue that the familiarity&lt;br/&gt;
     issue is much larger with the way Derby does user management so&lt;br/&gt;
     that this does not add much to the existing problem. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I do not understand why plugins are a system-wide features.  Are&lt;br/&gt;
     we not talking about objects that are local to a specific&lt;br/&gt;
     database?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I miss a rationale for how you ended up with three&lt;br/&gt;
     database-specific features.  What are particular to them compared&lt;br/&gt;
     to other features like those listed in Appendix A? &lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;As others, I react to statements like &quot;We don&apos;t see why anyone&lt;br/&gt;
     other than the database owner would need to ...&quot;.  I can see many&lt;br/&gt;
     reasons to the contrary.  I guess want you mean is &quot;We think it&lt;br/&gt;
     is an acceptable restriction that only the database owner is&lt;br/&gt;
     allowed to ...&quot;.  I think the whole problem here is that database&lt;br/&gt;
     owner is really a role and not a particular person, and that we&lt;br/&gt;
     need to be able to define roles in order to make this really&lt;br/&gt;
     usable.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;You say that the above can be solved by creating special accounts&lt;br/&gt;
     for the system/database administrator roles.  At the same time we&lt;br/&gt;
     advertising the usefulness of pluggable user authentication.  I&lt;br/&gt;
     do not feel these stories fit well together.  You may have&lt;br/&gt;
     limited freedom to create specific users if you depend on&lt;br/&gt;
     external user authentication.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;While all database-specific privileges is lumped into one&lt;br/&gt;
     user/role, the system administrator privileges can be specified&lt;br/&gt;
     one by one.  Is there any particular reason for the finer&lt;br/&gt;
     granularity for system privileges?&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12458129" author="dagw" created="Wed, 13 Dec 2006 14:07:38 +0000"  >&lt;p&gt;&#216;ystein:&lt;br/&gt;
&amp;gt; I miss a rationale for how you ended up with three&lt;br/&gt;
&amp;gt; database-specific features. What are particular to them compared&lt;br/&gt;
&amp;gt; to other features like those listed in Appendix A?&lt;/p&gt;

&lt;p&gt;I think the reason is that these can all be controlled via execute&lt;br/&gt;
privileges on existing system procedures, whereas, the three new ones&lt;br/&gt;
are done via getConnection and are not currently protectable. It would&lt;br/&gt;
be nice to call this out earlier in the write-up - it is mentioned in the&lt;br/&gt;
beginning of appendix A.&lt;/p&gt;
</comment>
                            <comment id="12458243" author="djd" created="Wed, 13 Dec 2006 19:32:36 +0000"  >&lt;p&gt;I added a wiki page about Java routine security, writing it all out helped my thoughts on the issues.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/JavaRoutineSecurity&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JavaRoutineSecurity&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taking Rick&apos;s idea of treating the CLASSPATH token as a pseudo jar, SYS.CLASSPATH, a little further I think the security issues can be aligned with the standard grant/revoke USAGE on a jar file, thus not requiring any special apis. See the wiki page for details.&lt;/p&gt;

&lt;p&gt;I also think that Java routine security should be a seprate Jira issue to this one which is for System priviliges.&lt;/p&gt;</comment>
                            <comment id="12458313" author="rhillegas" created="Thu, 14 Dec 2006 00:00:59 +0000"  >&lt;p&gt;Thanks for your comments, &#216;ystein. A couple responses follow:&lt;/p&gt;

&lt;p&gt;1) Dynamically changing the policy file. The policy file can be dynamically reloaded after you edit it and without restarting the VM. Some code has to call java.security.Policy.getPolicy().refresh(). This requires granting that code the following permission:&lt;/p&gt;

&lt;p&gt;  java.security.SecurityPermission &quot;getPolicy&quot;&lt;/p&gt;

&lt;p&gt;Thanks for broaching this topic. We could always reload the policy file just before checking for a system privilege and then advise the user to grant derby.jar the above permission.&lt;/p&gt;

&lt;p&gt;2) Unfamiliar api. Oracle, DB2, Postgres, and MySQL all handle system privileges in different ways. Picking one of these models would still result in an api that&apos;s unfamiliar to many people. That said, these databases do tend to use GRANT/REVOKE for system privileges, albeit each in its own peculiar fashion. I agree that GRANT/REVOKE is an easier model to learn than Java Security. I think however, that the complexity of Java Security is borne by the derby-dev developer, not by the customer. Creating a policy file is very easy and our user documentation gives simple examples which the naive user can just crib. With adequate user documentation, I think this approach would be straightforward for the customer.&lt;/p&gt;

&lt;p&gt;3) Plugin scope. I think that you and Dan agree that &quot;plugin&quot; is a database-specific, not a system-wide privilege. My first reaction (still recorded in the description block for this JIRA) also listed &quot;plugin&quot; as a database-wide privilege. I can argue the issue both ways. On the one hand, the &quot;plugin&quot; power potentially gives the user the ability to expose/exploit code which has system-wide effects. On the other hand, the affected objects (jars, functions, procedures) are all scoped to the database level. I am happy to treat &quot;plugin&quot; as a database-specific privilege.&lt;/p&gt;

&lt;p&gt;4) Appendix A issue. I believe that Dag answered this one. Thanks, Dag!&lt;/p&gt;

&lt;p&gt;5) My imagination deficit. As I said to David, I will reword these sentences.&lt;/p&gt;

&lt;p&gt;6) User management and role migration. I suspect that the introduction of SQL roles will help address your concerns about database-specific privileges: we should be able to introduce a DB_OWNER role. In addition, as the spec notes, a follow-on usability feature could introduce the power to change the owner of a database. I think we&apos;re in better shape for system-wide privileges managed by Java security. Here the system administrator can edit the policy file as necessary.&lt;/p&gt;

&lt;p&gt;7) Granularity of system-wide privileges. I see no problem in starting out lumping all the database-specific privileges together and letting the database owner hoard them. They are all privileges which a database owner would want. The two system-wide privileges belong to different roles: shutdownEngine belongs to the system administrator and createDatabase belongs to the various database owners. That is the motivation for the granularity of system-wide privileges.&lt;/p&gt;


</comment>
                            <comment id="12458331" author="djd" created="Thu, 14 Dec 2006 01:08:49 +0000"  >&lt;p&gt;&quot;The two system-wide privileges belong to different roles: &lt;span class=&quot;error&quot;&gt;&amp;#91;snip&amp;#93;&lt;/span&gt; ... and createDatabase belongs to the various database owners.&quot;&lt;/p&gt;

&lt;p&gt;That comment would seem to imply that create database permission needs to have a path associated with it.&lt;/p&gt;

&lt;p&gt;permission org.apache.derby.security.SystemPermission &quot;$&lt;/p&gt;
{derby.system.home}
&lt;p&gt;$&lt;/p&gt;
{/}
&lt;p&gt;fred&quot;  &quot;createDatabase&quot; ;&lt;/p&gt;

&lt;p&gt;providing control over where each user can create databases.&lt;/p&gt;
</comment>
                            <comment id="12458333" author="djd" created="Thu, 14 Dec 2006 01:17:17 +0000"  >&lt;p&gt;&quot; We could always reload the policy file just before checking for a system privilege and then advise the user to grant derby.jar the above permission. &quot;&lt;/p&gt;

&lt;p&gt;Not sure that&apos;s a good idea, seems like the refresh policy should be an explict operation, not called on every security operation just because it might have changed. Such an approach could allow some form of denial of service attack because a failed attempt to do something still would call refresh, thus repeated calls to the disallowed operation would still have a potential effect on the VM. Possibly stalling it as the policy file is reparsed.&lt;/p&gt;
</comment>
                            <comment id="12458530" author="oysteing" created="Thu, 14 Dec 2006 15:59:21 +0000"  >&lt;p&gt;Rick Hillegas (JIRA) wrote:&lt;br/&gt;
&amp;gt;     [ &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-2109?page=comments#action_12458313&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-2109?page=comments#action_12458313&lt;/a&gt; ] &lt;br/&gt;
&amp;gt;             &lt;br/&gt;
&amp;gt; Rick Hillegas commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;:&lt;br/&gt;
&amp;gt; --------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Thanks for your comments, &#216;ystein. A couple responses follow:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; 1) Dynamically changing the policy file. The policy file can be&lt;br/&gt;
&amp;gt;    dynamically reloaded after you edit it and without restarting the&lt;br/&gt;
&amp;gt;    VM. Some code has to call&lt;br/&gt;
&amp;gt;    java.security.Policy.getPolicy().refresh(). This requires&lt;br/&gt;
&amp;gt;    granting that code the following permission:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;   java.security.SecurityPermission &quot;getPolicy&quot;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Thanks for broaching this topic. We could always reload the policy&lt;br/&gt;
&amp;gt; file just before checking for a system privilege and then advise the&lt;br/&gt;
&amp;gt; user to grant derby.jar the above permission.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;Good, and I agree with Dan that a command for explicit reloading is&lt;br/&gt;
probably best.&lt;/p&gt;


&lt;p&gt;&amp;gt; 2) Unfamiliar api. Oracle, DB2, Postgres, and MySQL all handle&lt;br/&gt;
&amp;gt;    system privileges in different ways. Picking one of these models&lt;br/&gt;
&amp;gt;    would still result in an api that&apos;s unfamiliar to many&lt;br/&gt;
&amp;gt;    people. That said, these databases do tend to use GRANT/REVOKE&lt;br/&gt;
&amp;gt;    for system privileges, albeit each in its own peculiar fashion. I&lt;br/&gt;
&amp;gt;    agree that GRANT/REVOKE is an easier model to learn than Java&lt;br/&gt;
&amp;gt;    Security. I think however, that the complexity of Java Security&lt;br/&gt;
&amp;gt;    is borne by the derby-dev developer, not by the&lt;br/&gt;
&amp;gt;    customer. Creating a policy file is very easy and our user&lt;br/&gt;
&amp;gt;    documentation gives simple examples which the naive user can just&lt;br/&gt;
&amp;gt;    crib. With adequate user documentation, I think this approach&lt;br/&gt;
&amp;gt;    would be straightforward for the customer.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I guess most people should be able to manage the editing of files etc.&lt;br/&gt;
I foresee that some users will be a bit confused about the location of&lt;br/&gt;
such files, but that is a more general issue.&lt;/p&gt;

&lt;p&gt;&amp;gt; 3) Plugin scope. I think that you and Dan agree that &quot;plugin&quot; is a&lt;br/&gt;
&amp;gt;    database-specific, not a system-wide privilege. My first reaction&lt;br/&gt;
&amp;gt;    (still recorded in the description block for this JIRA) also&lt;br/&gt;
&amp;gt;    listed &quot;plugin&quot; as a database-wide privilege. I can argue the&lt;br/&gt;
&amp;gt;    issue both ways. On the one hand, the &quot;plugin&quot; power potentially&lt;br/&gt;
&amp;gt;    gives the user the ability to expose/exploit code which has&lt;br/&gt;
&amp;gt;    system-wide effects. On the other hand, the affected objects&lt;br/&gt;
&amp;gt;    (jars, functions, procedures) are all scoped to the database&lt;br/&gt;
&amp;gt;    level. I am happy to treat &quot;plugin&quot; as a database-specific&lt;br/&gt;
&amp;gt;    privilege.&lt;/p&gt;

&lt;p&gt;I see your point, but I do not think many organizations will find it&lt;br/&gt;
practical to deny database owners to be able to create plugins.&lt;br/&gt;
Hence, you might as well make it a database-specific feature.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 4) Appendix A issue. I believe that Dag answered this one. Thanks, Dag!&lt;/p&gt;

&lt;p&gt;Yes, and his answer made me realize that restore is missing from this&lt;br/&gt;
spec.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 5) My imagination deficit. As I said to David, I will reword these sentences.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;Great.&lt;/p&gt;

&lt;p&gt;&amp;gt; 6) User management and role migration. I suspect that the&lt;br/&gt;
&amp;gt;    introduction of SQL roles will help address your concerns about&lt;br/&gt;
&amp;gt;    database-specific privileges: we should be able to introduce a&lt;br/&gt;
&amp;gt;    DB_OWNER role. In addition, as the spec notes, a follow-on&lt;br/&gt;
&amp;gt;    usability feature could introduce the power to change the owner&lt;br/&gt;
&amp;gt;    of a database. I think we&apos;re in better shape for system-wide&lt;br/&gt;
&amp;gt;    privileges managed by Java security. Here the system&lt;br/&gt;
&amp;gt;    administrator can edit the policy file as necessary.&lt;/p&gt;

&lt;p&gt;I agree. We need provide roles in order make this really usable.&lt;/p&gt;

&lt;p&gt;&amp;gt; 7) Granularity of system-wide privileges. I see no problem in&lt;br/&gt;
&amp;gt;    starting out lumping all the database-specific privileges&lt;br/&gt;
&amp;gt;    together and letting the database owner hoard them. They are all&lt;br/&gt;
&amp;gt;    privileges which a database owner would want. The two system-wide&lt;br/&gt;
&amp;gt;    privileges belong to different roles: shutdownEngine belongs to&lt;br/&gt;
&amp;gt;    the system administrator and createDatabase belongs to the&lt;br/&gt;
&amp;gt;    various database owners. That is the motivation for the&lt;br/&gt;
&amp;gt;    granularity of system-wide privileges.&lt;/p&gt;

&lt;p&gt;In other words, for createDatabase you provide the list of potential&lt;br/&gt;
database owners.  But then in order to allow one person to create one&lt;br/&gt;
database in one specific place, you allow him to create as many&lt;br/&gt;
databases he wants wherever he likes.  An alternative could be to only&lt;br/&gt;
allow System Administrators to create databases, and provide a way to&lt;br/&gt;
specify database owner when you create the database.&lt;/p&gt;</comment>
                            <comment id="12458563" author="djd" created="Thu, 14 Dec 2006 17:35:04 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; 3) Plugin scope. I think that you and Dan agree that &quot;plugin&quot; is a&lt;br/&gt;
&amp;gt;&amp;gt;    database-specific, not a system-wide privilege. My first reaction&lt;br/&gt;
&amp;gt;&amp;gt;    (still recorded in the description block for this JIRA) also&lt;br/&gt;
&amp;gt;&amp;gt;    listed &quot;plugin&quot; as a database-wide privilege. I can argue the&lt;br/&gt;
&amp;gt;&amp;gt;    issue both ways. On the one hand, the &quot;plugin&quot; power potentially&lt;br/&gt;
&amp;gt;&amp;gt;    gives the user the ability to expose/exploit code which has&lt;br/&gt;
&amp;gt;&amp;gt;    system-wide effects. On the other hand, the affected objects&lt;br/&gt;
&amp;gt;&amp;gt;    (jars, functions, procedures) are all scoped to the database&lt;br/&gt;
&amp;gt;&amp;gt;    level. I am happy to treat &quot;plugin&quot; as a database-specific&lt;br/&gt;
&amp;gt;&amp;gt;    privilege.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I see your point, but I do not think many organizations will find it&lt;br/&gt;
&amp;gt; practical to deny database owners to be able to create plugins.&lt;br/&gt;
&amp;gt; Hence, you might as well make it a database-specific feature.&lt;/p&gt;

&lt;p&gt;I would actually say you aleady have the system level ability, because the actions of any java code is controlled by the installed security manager and policy which is set at a system level. Thus the ability to create Java routines should be controlled at the datbaase level and the ultimate power of those routines is controlled at the system level.&lt;/p&gt;</comment>
                            <comment id="12458573" author="rhillegas" created="Thu, 14 Dec 2006 18:44:28 +0000"  >&lt;p&gt;I do not understand the need to qualify createDatabase privilege with a list of databases which the user is allowed to create. This is not how other vendors manage this privilege. DB2, Oracle, and Postgres all have a generic createDatabase privilege. If you have this privilege, then you can create as many databases as you want. I think that the DB2 documentation is most clear about the danger associated with this privilege. This is discussed in the DB2 SQL Reference manual, volume 1, in the section on &quot;Authorization and privileges&quot;. For DB2, the ability to create databases is a superpower granted to the SYSCTL role and the point is to control who can consume system resources, including the power to consume disk space. In general, whether you can consume disk space is a consequence of the ability to create a database and is not refined by how many databases you can create.&lt;/p&gt;

&lt;p&gt;I don&apos;t understand what additional security hole is plugged by qualifying the createDatabase privilege with a list of database names. I recommend that we follow the lead of these other vendors and implement this as a general privilege whose purpose is to control the power to consume disk space.&lt;/p&gt;</comment>
                            <comment id="12458577" author="djd" created="Thu, 14 Dec 2006 18:54:15 +0000"  >&lt;p&gt;The permission would not be the names of databases that one can create, but instead locations where databases can be created.&lt;br/&gt;
This has been requested in the past. If one wanted to match the other databases then the path could be very liberal.&lt;br/&gt;
Thus we can match existing databases and optionally provide a better security model because Java allows it.&lt;/p&gt;</comment>
                            <comment id="12458877" author="rhillegas" created="Fri, 15 Dec 2006 18:40:28 +0000"  >&lt;p&gt;I would like to continue the discussion of using doAsPrivileged() vs. doAs(). I ran the following experiments. For more detail on the code, please refer to the example code in Appendix B of the attached functional spec.&lt;/p&gt;

&lt;p&gt;EXPERIMENT 1:&lt;/p&gt;

&lt;p&gt;a) I separated the ShutdownAction into its own class. This is the PrivilegedExceptionAction which actually calls checkPermission(). I put this class in jarfile jar_A along with the custom Principal and Permssion classes.&lt;/p&gt;

&lt;p&gt;b) I put the entry point class in its own jar file jar_B. This class called the ShutdownAction using both doAs() and doAsPrivileged()&lt;/p&gt;

&lt;p&gt;c) I created a policy file which did the following:&lt;/p&gt;

&lt;p&gt;  i) gave jarfile_B the privileges doAs and doAsPrivileged&lt;/p&gt;

&lt;p&gt;  ii) gave Shutdown privilege to one distinguished Principal&lt;/p&gt;

&lt;p&gt;I observed the following:&lt;/p&gt;

&lt;p&gt;I) Calling doAs() failed for all Principals. That is, checkPermission() always reported that the Shutdown privilege was not granted. This is because code from jarfile_B was at the top of the stack but jarfile_B did not have Shutdown privilege.&lt;/p&gt;

&lt;p&gt;II) Calling doAsPrivileged() functioned correctly: It verified that the distinguished Principal had the Shutdown privilege and that no-one else did. This is because the call to doAsPrivileged() passed in a null AccessControlContext. This essentially told the security subsystem to not bother checking permissions for stack frames above the caller.&lt;/p&gt;


&lt;p&gt;EXPERIMENT 2&lt;/p&gt;

&lt;p&gt;This was the same as the previous experiment except that the policy file gave Shutdown privilege to jarfile_B. I observed the following:&lt;/p&gt;

&lt;p&gt;I) doAs() now functioned correctly. The checkPermission() call verified that only the distinguished Principal had Shutdown privilege.&lt;/p&gt;

&lt;p&gt;II) doAsPrivileged() continued to function correctly as in the previous experiment.&lt;/p&gt;

&lt;p&gt;This suggested that if we wanted to use doAs(), then we would need to split derby.jar into 2 ProtectionDomains. The outer ProtectionDomain would have to be granted Shutdown privilege. Code in the inner ProtectionDomain would be run as a PrivilegedExceptionAction under the identity of the authenticated authorizationId. This inner domain would not be granted a blanket Shutdown privilege--this is what would allow checkPermission to distinguish the privileges of Principals who were trusted with Shutdown power.&lt;/p&gt;


&lt;p&gt;EXPERIMENT 3&lt;/p&gt;

&lt;p&gt;Here I tried to model an application embedding Derby. This was identical to the previous experiment with the following additions:&lt;/p&gt;

&lt;p&gt;d) A thin entry point (main class) was created and put in its own jarfile_C. All that this class did was call the entry point in jarfile_B.&lt;/p&gt;

&lt;p&gt;e) The policy file was enhanced to grant doAs and doAsPrivileged to jarfile_C.&lt;/p&gt;

&lt;p&gt;This experiment behaved like the first experiment. That is:&lt;/p&gt;

&lt;p&gt;I) doAs() failed always because the outermost ProtectionDomain, jarfile_C, did not have Shutdown privilege.&lt;/p&gt;

&lt;p&gt;II) doAsPrivileged() correctly detected that only the distinguished Principal had Shutdown privilege. This is because doAsPrivileged() threw away all of the outer ProtectionDomains, including the untrusted jarfile_C domain.&lt;/p&gt;


&lt;p&gt;CONCLUSIONS&lt;/p&gt;

&lt;p&gt;1) Using Java Security to police engineShutdown and createDatabase will mean that additional privileges (doAs or doAsPrivileged) must be granted not just to derby.jar but to all ProtectionDomains above Derby on the call stack.&lt;/p&gt;

&lt;p&gt;2) Using doAs means that we will have to factor derby.jar into two ProtectionDomains.&lt;/p&gt;




</comment>
                            <comment id="12459413" author="dagw" created="Mon, 18 Dec 2006 17:33:15 +0000"  >&lt;p&gt;&amp;gt; CONCLUSIONS&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; 1) Using Java Security to police engineShutdown and createDatabase&lt;br/&gt;
&amp;gt;    will mean that additional privileges (doAs or doAsPrivileged) must&lt;br/&gt;
&amp;gt;    be granted not just to derby.jar but to all ProtectionDomains above&lt;br/&gt;
&amp;gt;    Derby on the call stack.&lt;/p&gt;

&lt;p&gt;Can&apos;t this be avoided by running authentication and&lt;br/&gt;
doAs/doAsPrivileged inside a plain doPrivileged&apos;s PrivilegedAction? Then we&lt;br/&gt;
just need to allow derby.jar the &quot;doAs/doAsPrivileged&quot; permission? Or&lt;br/&gt;
is there something special about these permissions?&lt;/p&gt;</comment>
                            <comment id="12461785" author="rhillegas" created="Tue, 2 Jan 2007 18:39:14 +0000"  >&lt;p&gt;Thanks, Dag. You are right. If the Subject.doAsPrivileged() call itself is run under an AccessController.doPrivileged() call, then you don&apos;t need to grant &quot;doAsPrivileged&quot; permission to the customer code. This makes the policy file simpler. All you need is:&lt;/p&gt;

&lt;p&gt;1) to grant &quot;doAsPrivleged&quot; permission to derby.jar&lt;/p&gt;

&lt;p&gt;2) to grant specific privleges (like Shutdown) to specific Principals.&lt;/p&gt;</comment>
                            <comment id="12463429" author="rhillegas" created="Tue, 9 Jan 2007 23:09:56 +0000"  >&lt;p&gt;I have attached a second rev of the functional spec for system privileges. This rev attempts to address the feedback on the first rev. Major changes between the revs are summarized in the introductory table of versions. I would appreciate the community&apos;s continued feedback.&lt;/p&gt;</comment>
                            <comment id="12463435" author="djd" created="Wed, 10 Jan 2007 00:09:11 +0000"  >&lt;p&gt;Thanks for incorporating the various comments into the new spec, it&apos;s looking better, a few comments.&lt;/p&gt;

&lt;p&gt;Java convention would have the target names for the permissions being &quot;shutdownEngine&quot; and &quot;createDatabase&quot;&lt;/p&gt;

&lt;p&gt;&quot;org.apache.derby.security.FilePermission - This class extends the JRE&apos;s FilePermission.&quot;&lt;br/&gt;
     java.io.FilePermission is final. &lt;/p&gt;

&lt;p&gt;Seems strange to have these system permissions split across two classes, also databases are not restricted to files, so why &quot;FilePermission&quot;?&lt;/p&gt;

&lt;p&gt;Is this spec meant to cover &amp;amp; define the work for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt;? In some cases it seems to be (e.g. section on Network Server) but doesn&apos;t completely describe the changes required by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;
</comment>
                            <comment id="12463439" author="rhillegas" created="Wed, 10 Jan 2007 00:53:48 +0000"  >&lt;p&gt;Thanks for the quick feedback, Dan. A couple responses follow:&lt;/p&gt;

&lt;p&gt;1) The camel-case permission names you suggest are fine by me.&lt;/p&gt;

&lt;p&gt;2) You&apos;re right, FilePermission is final so it can&apos;t be extended directly. The intention was to re-use its implies() logic, but that can be done via other means.&lt;/p&gt;

&lt;p&gt;3) I split the Derby permission into 2 classes due to an inordinate fondness for modelling this on java.security.BasicPermission. I can abandon this attachment to BasicPermission in favor of something like this:&lt;/p&gt;

&lt;p&gt;    permission org.apache.derby.security.SystemPermission &quot;shutdownEngine&quot;;&lt;br/&gt;
    permission org.apache.derby.security.SystemPermission &quot;$&lt;/p&gt;
{derby.system.home}
&lt;p&gt;$&lt;/p&gt;
{/}
&lt;p&gt;accountingDBA&quot; &quot;createDatabase&quot;;&lt;/p&gt;

&lt;p&gt;4) This spec does not cover and define the work for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt;. A separate spec has to be written for that JIRA. For the moment, let&apos;s imagine a spec for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt; which follows the outlines of the wiki page linked from that issue. This spec (for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;) then adds a delta on top of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt;: the addition of the Derby SystemPermissions to the Basic policy.&lt;/p&gt;</comment>
                            <comment id="12463459" author="djd" created="Wed, 10 Jan 2007 04:49:12 +0000"  >&lt;p&gt;Rick Hillegas (JIRA) wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt; 3) I split the Derby permission into 2 classes due to an inordinate fondness for modelling this on java.security.BasicPermission. I can abandon this attachment to BasicPermission in favor of something like this:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;     permission org.apache.derby.security.SystemPermission &quot;shutdownEngine&quot;;&lt;br/&gt;
&amp;gt;     permission org.apache.derby.security.SystemPermission &quot;$&lt;/p&gt;
{derby.system.home}
&lt;p&gt;$&lt;/p&gt;
{/}
&lt;p&gt;accountingDBA&quot; &quot;createDatabase&quot;;&lt;/p&gt;

&lt;p&gt;Once you mention BasicPermission the split makes sense (ie. shutdownEngine does not have an action), so adding more text around this in the functional spec would be good. More along technical lines than &quot;a fondness for&quot; though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Seems like the permission class for &quot;createDatabase&quot; should be DatabasePermission, I could see this in the future being expanded to have additional actions of &quot;shutdown&quot;, &quot;drop&quot;, &quot;encrypt&quot; etc. Then of course the &quot;createDatabase&quot; action could be &quot;create&quot;.&lt;/p&gt;

&lt;p&gt;&amp;gt; 4) This spec does not cover and define the work for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt;. A separate spec has to be written for that JIRA. For the moment, let&apos;s imagine a spec for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt; which follows the outlines of the wiki page linked from that issue. This spec (for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;) then adds a delta on top of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt;: the addition of the Derby SystemPermissions to the Basic policy.&lt;/p&gt;

&lt;p&gt;Ok - I think I get it. You writing this assuming that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt; is done and doesn&apos;t control system shutdown or database creation,  and then this spec describes how that basic policy would be changed by these permissions. Right? Just hadn&apos;t thought of that order. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;One issue I see in the network server section is that it assumes a mapping between the Java (OS) user name and the database user name. This would be a first for Derby, no where else is such an assumption made.&lt;br/&gt;
I.e. $&lt;/p&gt;
{user.name}
&lt;p&gt; is never used elsewhere in the code.&lt;br/&gt;
Not sure of the implications of this, or if there is a better user name to grant shutdown system to for the basic policy.&lt;/p&gt;</comment>
                            <comment id="12463462" author="djd" created="Wed, 10 Jan 2007 05:06:38 +0000"  >&lt;p&gt;Daniel John Debrunner (JIRA) wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt; Seems like the permission class for &quot;createDatabase&quot; should be DatabasePermission, I could see this in the future being expanded to have additional actions of &quot;shutdown&quot;, &quot;drop&quot;, &quot;encrypt&quot; etc. Then of course the &quot;createDatabase&quot; action could be &quot;create&quot;.&lt;/p&gt;

&lt;p&gt;Just to add to this, it would be wise to define the format for the database location carefully to ensure the model works for future enhancments, such as the ability to limit shutdown of a database in a jar file, or creation of some non-file based database.&lt;/p&gt;

&lt;p&gt;In the spec it says:&lt;br/&gt;
&quot;The directoryLocation argument has the format of a directory reference in a declaration of a FilePermission  permission. &quot;&lt;/p&gt;

&lt;p&gt;Databases can be more than files though, should the target for this permission be in the format of a database name from a JDBC URL or DataSource databaseName property?&lt;/p&gt;</comment>
                            <comment id="12463639" author="rhillegas" created="Wed, 10 Jan 2007 17:31:56 +0000"  >&lt;p&gt;Daniel John Debrunner (JIRA) wrote: &lt;/p&gt;

&lt;p&gt;&amp;gt;Ok - I think I get it. You writing this assuming that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2196&quot; title=&quot;Run standalone network server with security manager by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2196&quot;&gt;&lt;del&gt;DERBY-2196&lt;/del&gt;&lt;/a&gt; is done and doesn&apos;t control system shutdown or database creation, and then this spec describes how that basic policy would be changed by t&amp;gt;hese permissions. Right? Just hadn&apos;t thought of that order. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Right, that&apos;s what was in my brain area.&lt;/p&gt;

&lt;p&gt;&amp;gt;One issue I see in the network server section is that it assumes a mapping between the Java (OS) user name and the database user name. This would be a first for Derby, no where else is such an &amp;gt;assumption made.&lt;br/&gt;
I&amp;gt;.e. $&lt;/p&gt;
{user.name} is never used elsewhere in the code.&lt;br/&gt;
&amp;gt;Not sure of the implications of this, or if there is a better user name to grant shutdown system to for the basic policy.&lt;br/&gt;
&lt;br/&gt;
Freewheeling some other alternatives which have various drawbacks:&lt;br/&gt;
&lt;br/&gt;
1) The Basic policy could grant shutdownEngine to everyone. Seems insecure.&lt;br/&gt;
&lt;br/&gt;
2) We could add an optional argument to the server startup command, letting the customer specify the userName of a Principal who should have shutdownEngine power. This would not be useful if the customer had their own Principal implementation.&lt;br/&gt;
&lt;br/&gt;
3) We could add another method to UserAuthenticator. That method would return an array of Principals who should have shutdownEngine power. If using the builtin UserAuthenticator, this would default to just the DatabasePrincipal named ${user.name}
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Your issue also made me realize that the spec needs to say something about what the Basic policy should be for createDatabase privilege. Here are some suggestions:&lt;/p&gt;

&lt;p&gt;A) This could be the same user(s) who have shutdownEngine privilege.&lt;/p&gt;

&lt;p&gt;B) This could be granted to everyone.&lt;/p&gt;
</comment>
                            <comment id="12463724" author="rhillegas" created="Wed, 10 Jan 2007 21:19:59 +0000"  >&lt;p&gt;Daniel John Debrunner (JIRA) wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt;Just to add to this, it would be wise to define the format for the database location carefully to ensure the model works for future enhancments, such as the ability to limit shutdown of a database in a jar file, &amp;gt;or creation of some non-file based database.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
I&amp;gt;n the spec it says:&lt;br/&gt;
&quot;&amp;gt;The directoryLocation argument has the format of a directory reference in a declaration of a FilePermission permission. &quot;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;Databases can be more than files though, should the target for this permission be in the format of a database name from a JDBC URL or DataSource databaseName property?&lt;/p&gt;

&lt;p&gt;Maybe we could require that the database location be unambiguously qualified by one of the subsubprotocols which we recognize on URLs:&lt;/p&gt;

&lt;p&gt;   classpath:&lt;br/&gt;
   directory:&lt;br/&gt;
   jar:&lt;/p&gt;

&lt;p&gt;So, for instance, in this first rev:&lt;/p&gt;

&lt;p&gt;    permission org.apache.derby.security.DatabasePermission &quot;directory:$&lt;/p&gt;
{derby.system.home}
&lt;p&gt;$&lt;/p&gt;
{/}
&lt;p&gt;accountingDBA&quot; &quot;create&quot;;&lt;/p&gt;

&lt;p&gt;and in some later rev when we support other kinds of DatabasePermissions:&lt;/p&gt;

&lt;p&gt;    permission org.apache.derby.security.DatabasePermission &quot;jar:/maps/USmaps&quot; &quot;shutdown&quot;;&lt;/p&gt;

&lt;p&gt;and if we added a new subsubprotocol for in-memory databases:&lt;/p&gt;

&lt;p&gt;    permission org.apache.derby.security.DatabasePermission &quot;memory:/users/fred/-&quot; &quot;create&quot;;&lt;/p&gt;

</comment>
                            <comment id="12463921" author="djd" created="Thu, 11 Jan 2007 15:53:17 +0000"  >&lt;p&gt;Rick wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt; Maybe we could require that the database location be unambiguously qualified by one of the subsubprotocols which we recognize on URLs:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;    classpath:&lt;br/&gt;
&amp;gt;    directory:&lt;br/&gt;
&amp;gt;    jar:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; So, for instance, in this first rev:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;     permission org.apache.derby.security.DatabasePermission &quot;directory:$&lt;/p&gt;
{derby.system.home}
&lt;p&gt;$&lt;/p&gt;
{/}
&lt;p&gt;accountingDBA&quot; &quot;create&quot;;&lt;/p&gt;

&lt;p&gt;That&apos;s possible though it would be good to see if the disambiguating rules that are used for database name could also be used for database location, though as a first step requiring &quot;directory:&quot; would be ok and forward compatible.&lt;/p&gt;

&lt;p&gt;If the format of database location is to follow database name (with extensions) then it&apos;s important to note that the separator for database names is always forward slash since they are part of a URL syntax (JDBC URL). Though your example has a variable with a file system name in it, (and others such as user.dir and user.home would be useful) which can contain a different separator, it does seem this is a useful feature. So the spec should account for this.&lt;/p&gt;

&lt;p&gt;We should also support relative names, as in database name, thus your example could be re-written as:&lt;/p&gt;

&lt;p&gt;permission org.apache.derby.security.DatabasePermission &quot;directory:accountingDBA/*&quot; &quot;create&quot;;&lt;/p&gt;

&lt;p&gt;The extensions to the database format are the use of &apos;/-&apos;, the functional spec describes it but the description is inconsistent compared to existing use in the policy file. I believe that the correct usage should be:&lt;/p&gt;

&lt;p&gt; directory:name     - defines that specific single database identified by name&lt;br/&gt;
 directory:name/*   - defines permission on any database in the folder described by name&lt;br/&gt;
 directory:name/-   - defines permission on any database in the folder or sub-folder of the folder described by name&lt;/p&gt;

&lt;p&gt;I think this is more flexible, e.g. the future ability to grant shutdown database to a single database, and matches FilePermission which you are intending to use to imlement it.&lt;/p&gt;

&lt;p&gt;So a quick summary would be I believe consistency with existing practices is very important, I think it will reduce the number of errors in setting up policy files by users, which are tricky things.&lt;/p&gt;



</comment>
                            <comment id="12463931" author="djd" created="Thu, 11 Jan 2007 16:26:33 +0000"  >&lt;p&gt;The functional spec says:&lt;br/&gt;
--------&lt;br/&gt;
We add a new method to Derby&apos;s org.apache.derby.authentication.UserAuthenticator interface. This expands Derby&apos;s pluggable authentication logic to allow the customer to map authenticationIDs to custom Principals:&lt;/p&gt;

&lt;p&gt;    public Principal getPrincipal( String userName ) throws SQLException;&lt;br/&gt;
---------&lt;/p&gt;

&lt;p&gt;I&apos;ve been thinking more about this call.&lt;/p&gt;

&lt;p&gt;Investigating how Principles are used, e.g. in the Subject class, a Subject (which is the object passed to doAsPrivileged) can contain more than one Principle. Thus to me it seems the getPrinciple() should have the flexiblity to return any number of Principles, so the return type should be a Set (see Subject) and thus can contain zero or more Principles. This then starts to get into the ability to support roles, e.g. an implementation could return three principles,&lt;br/&gt;
   DatabasePrincipal(&quot;SYSTEM ADMIN&quot;}&lt;br/&gt;
   DatabasePrinciple(&quot;ACCOUNTING_DBA&quot;}&lt;br/&gt;
   X500Principal(&quot;cn=Alice&quot;)&lt;/p&gt;

&lt;p&gt;and then this allows indirection between a specific user and a role.&lt;/p&gt;

&lt;p&gt;Then thinking about implementing this interface I think  the proposed api has two issues:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if the authentication information is stored elsewhere (e.g. ldap) then getPrinciple() cannot work since no password is available&lt;/li&gt;
	&lt;li&gt;it requires a double trip to the authentication store (e.g. two ldap calls)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thus it seems to me the api should really be:&lt;/p&gt;

&lt;p&gt; 	public Set authenticateUserWithPrinciples(String userName,&lt;br/&gt;
								 String userPassword,&lt;br/&gt;
								 String databaseName,&lt;br/&gt;
								 Properties info&lt;br/&gt;
								)&lt;/p&gt;

&lt;p&gt;     or (I think I prefer this one)&lt;/p&gt;

&lt;p&gt;        // passing in a DatabasePrinciple, implementations can choose to included in the returned set or not.&lt;br/&gt;
 	public Set authenticateUser(DatabasePrinciple user,&lt;br/&gt;
								 String userPassword,&lt;br/&gt;
								 String databaseName,&lt;br/&gt;
								 Properties info&lt;br/&gt;
								)&lt;/p&gt;

&lt;p&gt;The maybe if the authenticateUser() that returns a Set returns null the existing old method is used.&lt;/p&gt;

&lt;p&gt;Related to this, the functional spec does not specify what the Principle will be with the two builtin authentication schemes, BUILTIN and LDAP.&lt;br/&gt;
I assume for BUILTIN it will be DatabasePrinciple with the user&apos;s identifier, but what should it be with LDAP? Is there a standard Principle (e..g X500Principle) returned though the api we use to perform LDAP lookups?&lt;/p&gt;



</comment>
                            <comment id="12464229" author="rhillegas" created="Fri, 12 Jan 2007 16:06:55 +0000"  >&lt;p&gt;Thanks for helping me puzzle through these issues, Dan. Here are some more thoughts triggered by your last comments:&lt;/p&gt;

&lt;p&gt;I think we need to be cautious as we start talking about roles. As I understand the javadoc, a Subject is a set of identities (that is, a set of Principals). A role, however, is a set of privileges--at least that&apos;s how ANSI models it. I think we will get into trouble if we mix these concepts together. That&apos;s one thought.&lt;/p&gt;

&lt;p&gt;Here&apos;s another: The idea that a person (a Subject) has multiple identities is very thought-provoking. Each of these identities may be granted permissions to perform work in some domain where that identity makes sense. Permissions are not granted to Subjects. They are granted to identities (Principals). So if you operate in multiple domains, you may need to be granted permissions as multiple Principals.&lt;/p&gt;

&lt;p&gt;I think that when a person connects to Derby (and passes authentication), they get a database identity, which is essentially their authorizationID. This database identity is in addition to whatever other identities they may have in the external authentication system. The external identities may be useful some day--for instance, the policy file may want to grant network permissions to these identities so that they can do work inside customer-written dbprocs. However, for our purposes today, it makes sense to me that Derby-specific permissions should be granted to database identities, that is, to DatabasePrincipals.&lt;/p&gt;

&lt;p&gt;So I&apos;m wondering whether we need, right now, to beef up UserAuthenticator with a getPrincipal() or new authenticatUser() overload. We may need to do that in the future to help customers grant identity-conscious permissions to dbprocs. But it&apos;s not clear to me that we need this machinery now.&lt;/p&gt;</comment>
                            <comment id="12464260" author="djd" created="Fri, 12 Jan 2007 17:21:58 +0000"  >&lt;p&gt;I agree that supporting a more flexible Principle scheme could be added later, I don&apos;t think I see any issues with having a database login always having a DatabasePrinciple associated with it. I think for forwards compatibility that will be required, i.e. in the future methods in UserAuthenticator may be able to add Principles to the Subject, but will not be able to remove the DatabasePrinciple. I do think that Derby&apos;s internal implementation should not be relying on DatabasePrinciple, e.g. all fields, variables, parameters  etc. are declared as Principle and DatabasePrinciple should only appear when the actual instance is created using new DatabsaePrinciple.&lt;/p&gt;

&lt;p&gt;A few new thoughts did come out of your comment:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;with Java routines this spec does not indicate that the routine will run with the Subject set to one including the DatabasePrinciple. I don&apos;t think it needs to but it is a direction that may be required in the future. This would allow database user based granting on permissions in Java routines which might be useful since the only way to grant java permissions to code in installed jar files is to sign the jar and grant permissions to the signer.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;related to the last point, the visibility of the current Subject containing its DatabasePrinciple, might be clear to state that currently there is no visibility to user code of the Subject containing its DatabasePrinciple.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Derby supports multiple databases within a system and per-database authentication. This means that ALICE in one database can be a different identity to ALICE in another database. DatabasePrinciple does not account for this. This may have the potential to be a security hole, though maybe not with the limited set of permissions today. Basic idea would be.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     ALICE has some permissions that FRED does not have.&lt;br/&gt;
     FRED only has permission to create databases&lt;/p&gt;

&lt;p&gt;     FRED can create a database with BUILTIN authentication and a user ALICE to pick up any permissions granted to ALICE.&lt;/p&gt;

&lt;p&gt;It might be ok with the proposed changes because the identity is also authenticated in that specific domain, e.g. I assume to be ALICE to shutdown an engine or create a database one must be authenticated against the system authentication. Thus the ALICE from FRED&apos;s database would not be able to log into take advantage of the shutdown engine granted to the real ALICE.&lt;/p&gt;

&lt;p&gt;The problems come when the policy file contains entries that are not linked to database authentication, e.g. to allow specific actions in routines, e.g. grant permission to ALICE to read &apos;/etc/password&apos;, that could be hijacked by FRED&apos;s ALICE if the routine was run as the DatabasePrinciple(FRED).&lt;/p&gt;

&lt;p&gt;I think this needs some thought, possible paths are: not an issue, DatabasePrinciple with database location path or good documentation the scope of DatabasePrinciple.&lt;/p&gt;</comment>
                            <comment id="12465306" author="rhillegas" created="Tue, 16 Jan 2007 22:02:39 +0000"  >&lt;p&gt;I agree that a DatabasePrincipal should encode both the database name and the authorization id inside that database. It is interesting that the same authorization id can have different credentials depending on the connected database.&lt;/p&gt;

&lt;p&gt;I don&apos;t know what the terms-of-art here are, but for the rest of this discussion, I&apos;m going to use the following nomenclature:&lt;/p&gt;

&lt;p&gt;systemWideID - This is a user name that is authenticated with databaseName = null.&lt;/p&gt;

&lt;p&gt;databaseScopedID - This is a user name that is authenticated with a non-null databaseName.&lt;/p&gt;

&lt;p&gt;It is interesting that we authenticate the user twice when creating a database. First we authenticate with a systemWideID. If that succeeds, we create the database and mark that authorization id as the database owner. Then we re-authenticate the user as a databaseScopedID, using the same credentials. Clearly this assumes that at bootstrap time, the same credentials will work for the systemWideID and the databaseScopedID.&lt;/p&gt;

&lt;p&gt;The policy file syntax for Principals is a little limited. That is, you&apos;re only allowed to declare one argument to your Principal&apos;s constructor. This means that we have to glue together the authorization id and database name. Maybe we can model this on the names used for KerberosPrincipal. Those names are of the form userName@realm. I don&apos;t know if the @ is going to be a nuisance. Any separator we choose will have escaping problems and @ may be particularly annoying to customers who want their authorization ids to be email addresses. But here&apos;s what it would look like:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;this is a systemWideID&lt;br/&gt;
grant principal org.apache.derby.authentication.DatabasePrincipal &quot;fred&quot; ...&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;this is a databaseScopedID&lt;br/&gt;
grant principal org.apache.derby.authentication.DatabasePrincipal &quot;fred@fredsDB&quot; ...&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;this systemWideID is an email address&lt;br/&gt;
grant principal org.apache.derby.authentication.DatabasePrincipal &quot;fred@@comcast.net&quot; ...&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;this databaseScopedID is an email address&lt;br/&gt;
grant principal org.apache.derby.authentication.DatabasePrincipal &quot;fred@@comcast.net@fredsDB&quot; ...&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I think that the create-database privilege should be granted to systemWideIDs for the following reasons:&lt;/p&gt;

&lt;p&gt;1) The actual database creation today depends on whether we can authenticate the systemWideID, not the databaseScopedID.&lt;/p&gt;

&lt;p&gt;2) This is a generic privilege which is not bound to a particular database name.&lt;/p&gt;

&lt;p&gt;I think that the engine-shutdown privilege is also a systemWideID. So for this first release, I think we only need systemWideIDs--although the user guides should explain the implications of escaping @.&lt;/p&gt;</comment>
                            <comment id="12467609" author="fuzzylogic" created="Thu, 25 Jan 2007 20:38:27 +0000"  >&lt;p&gt;Unsetting Fix Version on unassigned issues.&lt;/p&gt;</comment>
                            <comment id="12467840" author="rhillegas" created="Fri, 26 Jan 2007 15:07:50 +0000"  >&lt;p&gt;Attaching 3rd rev of the functional spec. Thanks to everyone for sticking with this spec process and making this spec better. Your continued feedback is appreciated.&lt;/p&gt;</comment>
                            <comment id="12467898" author="fuzzylogic" created="Fri, 26 Jan 2007 20:07:38 +0000"  >&lt;p&gt;Hi Rick, thanks for the extra information regarding why Principals cannot use multiple string constructors in the policy file. I like the backslash escaping for principals included in the spec better than the others that were proposed earlier. &lt;/p&gt;

&lt;p&gt;What is the expected behavior if a policy file has a grant block to a principal name that contains two unescaped @ symbols? Will these just be ignored?&lt;/p&gt;</comment>
                            <comment id="12467905" author="rhillegas" created="Fri, 26 Jan 2007 20:25:34 +0000"  >&lt;p&gt;Thanks for the quick feedback, Andrew. I think that two unescaped @ symbols should result in a syntax error. So, for instance, the following would be illegal:&lt;/p&gt;

&lt;p&gt;DatabasePrincipal &quot;foo@bar@wibble&quot;&lt;/p&gt;

&lt;p&gt;DatabasePrincipal &quot;foo@@bar wibble&quot;&lt;/p&gt;

&lt;p&gt;Unless someone objects strongly, I will update the spec to say this.&lt;/p&gt;</comment>
                            <comment id="12467923" author="djd" created="Fri, 26 Jan 2007 21:26:12 +0000"  >&lt;p&gt;These two sentences jump out at me:&lt;/p&gt;

&lt;p&gt; &quot;The Release Notes and user guides will advise the customer that this should probably be customized.&quot;&lt;br/&gt;
 &quot;Again the Release Notes and user guides will advise the customer to restrict these grants.&quot;&lt;/p&gt;

&lt;p&gt;This is basically saying that we provide a &quot;Basic policy&quot; but we recommend against its use.&lt;br/&gt;
So this overall work is adding three policies, &quot;basic&quot;, &quot;custom&quot; and &quot;open&quot;, but the functional specifications are written to say one should use the custom policy and the other two are not recommended. That just seems strange, why go to all this bother since the custom policy can be done today, with no changes. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Maybe we need to add a property for system authorization that specifies the default system administrator?&lt;/p&gt;

&lt;p&gt;derby.system.defaultAdministrator&lt;/p&gt;

&lt;p&gt;then the policy file could use DatabasePrinciple &quot;$&lt;/p&gt;
{derby.system.defaultAdministrator}
&lt;p&gt;&quot; rather than being wide open.&lt;br/&gt;
Maybe if derby.system.defaultAdministrator was not set it would default to &quot;*&quot;. Another choice to to require  the -u/-p arguments when starting the network server on the command line. Then the default user would be that matching -u.&lt;br/&gt;
Then the basic policy could be useful by itself.&lt;/p&gt;

&lt;p&gt;Though the functional spec says:&lt;br/&gt;
 &quot;The Basic policy file grants this permission to everyone.&quot;&lt;br/&gt;
maybe the &quot;everyone&quot; is misleading here, as really its every user successfully authenticated against System authentication.&lt;/p&gt;
</comment>
                            <comment id="12485166" author="rhillegas" created="Thu, 29 Mar 2007 13:47:26 +0100"  >&lt;p&gt;Attaching new rev of the functional spec, which makes these changs:&lt;/p&gt;

&lt;p&gt;1) renames the policy-reloading system procedure&lt;/p&gt;

&lt;p&gt;2) separates the Template policy from the Basic policy&lt;/p&gt;</comment>
                            <comment id="12485212" author="scotsmatrix" created="Thu, 29 Mar 2007 16:17:33 +0100"  >&lt;p&gt;Rick - This is a really detailed spec. Thank you for including the sections on Documentation and Release Notes.&lt;br/&gt;
It is also especially useful to have the grant/revoke examples.&lt;br/&gt;
The new name of the system procedure seems fine (from a doc standpoint &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;br/&gt;
We try to limit names to 50 characters.&lt;/p&gt;</comment>
                            <comment id="12486029" author="rhillegas" created="Mon, 2 Apr 2007 15:48:28 +0100"  >&lt;p&gt;Hi Dan,&lt;/p&gt;

&lt;p&gt;Sorry for not responding to your January 26 comment sooner. I just noticed it.&lt;/p&gt;

&lt;p&gt;I think it would be fine to add a derby.system.defaultAdministrator property, default it to *, and grant the shutdown privilege to DatabasePrincipal &quot;$&lt;/p&gt;
{derby.system.defaultAdministrator}
&lt;p&gt;&quot;.&lt;/p&gt;</comment>
                            <comment id="12501637" author="mzaun" created="Tue, 5 Jun 2007 19:00:20 +0100"  >&lt;p&gt;I&apos;ve been looking into the System Privileges for a while and would like to publish some base classes required by this feature (my first derby patch) for review and discussion.&lt;/p&gt;

&lt;p&gt;While DatabasePrincipal and SystemPermission were more or less straight forward, there are a few finepoints with DatabasePermission (for instance, the use of canonicalized path names) which I&apos;ve tried to document by comments inline.&lt;/p&gt;

&lt;p&gt;SystemPrivilegesPermissionTest is an extensive unit test class with positive and negative tests cases on the features of the System- and DatabasePermission classes; this junit test uses a local policy file.&lt;/p&gt;

&lt;p&gt;This suggested patch just provides the base classes and does not yet include the integration with the rest of derby.&lt;/p&gt;</comment>
                            <comment id="12501681" author="myrna" created="Tue, 5 Jun 2007 21:05:33 +0100"  >&lt;p&gt;I think this can be marked patch available - for review.&lt;/p&gt;</comment>
                            <comment id="12501966" author="rhillegas" created="Wed, 6 Jun 2007 16:57:43 +0100"  >&lt;p&gt;Thanks for this impressive patch, Martin. The Principal and Permissions classes look very polished to me. Hopefully, your next submission will be a little smaller: smaller patches are easier for the community to digest. I have committed this first increment, with the following changes, at subversion revision 544870:&lt;/p&gt;

&lt;p&gt;1) I commented out what looked like diagnostic scaffolding to me: a System.out.println() in DatabasePermission.implies(). If this was actually a useful piece of code, please explain.&lt;/p&gt;

&lt;p&gt;2) I commented out the running of the SystemPrivilegesPermissionTest in the junit _Suite. This is because the test has some problems, which I describe below and which  you can address in a later submission.&lt;/p&gt;

&lt;p&gt;With these changes, the regression tests ran cleanly for me.&lt;/p&gt;

&lt;p&gt;Here are the problems which I saw in SystemPrivilegesPermissionTest:&lt;/p&gt;

&lt;p&gt;A) Right now, the test can only be run against the classtree, not against the jar files. This is because your Principal and Permissions classes are not pulled into derby.jar yet. They will be pulled into derby.jar when you actually reference these classes in the engine code. That is because the jar builder only includes classes that can be reached by following class references, starting at some distinguished entry points.&lt;/p&gt;

&lt;p&gt;B) When I ran this test standalone, I saw the following failure:&lt;/p&gt;

&lt;p&gt;.F&lt;br/&gt;
Time: 0.425&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
1) testSystemPrivileges(org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest)junit.framework.AssertionFailedError: expected IOException&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.checkDatabasePermission(SystemPrivilegesPermissionTest.java:295)&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.execute(SystemPrivilegesPermissionTest.java:193)&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.testSystemPrivileges(SystemPrivilegesPermissionTest.java:184)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 1,  Failures: 1,  Errors: 0&lt;/p&gt;</comment>
                            <comment id="12502606" author="dagw" created="Fri, 8 Jun 2007 03:05:47 +0100"  >&lt;p&gt;I saw some Javadoc warnings, e.g.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; /export/home/tmp/derby/sb/sb1/java/engine/org/apache/derby/security/DatabasePermission.java:54: warning - Tag @see: missing &apos;#&apos;: &quot;DatabasePermission(String,String)&quot;&lt;br/&gt;
etc.&lt;/p&gt;</comment>
                            <comment id="12502813" author="kristwaa" created="Fri, 8 Jun 2007 15:12:29 +0100"  >&lt;p&gt;&apos;derby-2109-03-javadoc-see-tags.diff&apos; fixes some JavaDoc warnings (@see tags).&lt;/p&gt;

&lt;p&gt;Committed to trunk with revision 545514.&lt;/p&gt;</comment>
                            <comment id="12502818" author="kristwaa" created="Fri, 8 Jun 2007 15:15:32 +0100"  >&lt;p&gt;I just noticed that the 02 patch was uploaded without granting the license to ASF.&lt;br/&gt;
Maybe that should be done?&lt;/p&gt;</comment>
                            <comment id="12503864" author="mzaun" created="Tue, 12 Jun 2007 15:02:24 +0100"  >&lt;p&gt;This patch adds support for the handling of special characters DatabasePrincipals names.&lt;/p&gt;</comment>
                            <comment id="12503865" author="mzaun" created="Tue, 12 Jun 2007 15:03:54 +0100"  >&lt;p&gt;Re-attaching the first patch with ASF license grant.&lt;/p&gt;</comment>
                            <comment id="12503876" author="mzaun" created="Tue, 12 Jun 2007 16:03:52 +0100"  >&lt;p&gt;Re-attaching &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-04.diff (was incomplete).&lt;/p&gt;</comment>
                            <comment id="12504055" author="rhillegas" created="Wed, 13 Jun 2007 01:13:32 +0100"  >&lt;p&gt;Thanks for the patch, Martin. The system privilege test runs with the same error I was seeing before. You might want to sand down the error message in parsePrincipalName(): I think it should say that &quot;name&quot; rather than &quot;action&quot; shouldn&apos;t be null. Committed at subversion revision 546683.&lt;/p&gt;</comment>
                            <comment id="12532431" author="mzaun" created="Thu, 4 Oct 2007 14:45:54 +0100"  >&lt;p&gt;The attached document and patch is a 1st cut of the integration, and hence enforcement, of System Privileges. This patch has gotten somewhat larger that I&apos;d initially anticipated and most likely needs further discussion.&lt;/p&gt;

&lt;p&gt;Please start with the document SystemPrivilegesTestCases.html, which expands on the Functional Specification and is meant for future inclusion into the spec.  There&apos;s a bit of a deviation from the spec with regard to the case where no user credentials (username and password) are given by the user, but the server&apos;s Policy has a general grant for System Privileges, for instance, by a &quot;wildcard&quot; clause (DatabasePrinciple &quot;*&quot;).  For this particular case allowing the requested operation (Engine Shutdown, Create Database) appears justified and has the advantage of backward compatibility.  Note that explicit user credentials can be easily enforced by removing/restricting the &quot;wildcard&quot; grants in the server.policy.  This is the implemented behaviour by the patch.  Which has the benefit that the function tests, which generally don&apos;t provide credentials (for shutdown, for instance), pass &amp;#8211; due to the &quot;wildcard&quot; grant in the default server.policy.  A stricter semantics that always required explicit user credentials (when running under a SecurityManager), would require changes to the junit test framework (provide user credentials in teardown(), for instance).  However, this point about a given default identity may need further discussion.&lt;/p&gt;

&lt;p&gt;With regard, to design decisions made for this patch: There&apos;s a question where to put the checks that enforce System Privileges, whether to do them in services.monitor.BaseMonitor, for instance, or rather in the jdbc layer (InternalDriver, EmbedConnection). The embedded driver (as an outer layer) appears to be the better choice: there&apos;s a shutdown service, with which the checks should probably not interfere, and the right exception types are all there in the driver.  In addition, NetworkServerControl needs to perform a privilege check before the shutdown URL is passed to the driver.&lt;/p&gt;

&lt;p&gt;Looking forward to your comments,&lt;br/&gt;
Martin&lt;/p&gt;</comment>
                            <comment id="12532434" author="mzaun" created="Thu, 4 Oct 2007 14:57:23 +0100"  >&lt;p&gt;The attached patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-06 addresses some issues with the unit test for System Privileges, described in Rick Hillegas&apos;s comments above: The unit test should now run from the classes directory as well as the jar files and on all Operating Systems (there was a platform dependency, an attempt to provoke a non-canonicalizable filename error failed on Unix). In addition, a few unit test code cleanups.&lt;/p&gt;

&lt;p&gt;Also, the unit test&apos;s policy file now contains all necessary grants.&lt;/p&gt;

&lt;p&gt;Finally, junit.SecurityManagerSetup needed a small fix to refresh the Policies after a new SecurityManager has been installed (otherwise, the old Policies stay in effect).&lt;/p&gt;

&lt;p&gt;Your comments appreciated,&lt;br/&gt;
Martin&lt;/p&gt;</comment>
                            <comment id="12532556" author="rhillegas" created="Fri, 5 Oct 2007 01:56:07 +0100"  >&lt;p&gt;Thanks for the patch and SystemPrivilegesTestCases.html, Martin. I will take a look at these in detail. Here&apos;s something that jumped out at me: could you break up the &quot;no credentials&quot; row into two rows like the other rows for credential settings? That would help me reason about the completeness of that table. Thanks!&lt;/p&gt;</comment>
                            <comment id="12532742" author="rhillegas" created="Fri, 5 Oct 2007 19:04:06 +0100"  >&lt;p&gt;Hi Martin,&lt;/p&gt;

&lt;p&gt;It looks like you&apos;ve attached two patches, 05 and 06. It looks like 05 holds the product code and 06 holds the tests. I&apos;m going to apply 05 first, then 06 and take the test for a drive. Does this sound right? Are these patches submitted for evaluation and discussion or are you asking that we commit them? Thanks.&lt;/p&gt;</comment>
                            <comment id="12532743" author="rhillegas" created="Fri, 5 Oct 2007 19:12:21 +0100"  >&lt;p&gt;Hi Martin,&lt;/p&gt;

&lt;p&gt;I&apos;m having trouble applying the patches as I described. After I apply 05, I get the following error trying to apply 06:&lt;/p&gt;

&lt;p&gt;mainline (1.5) &amp;gt; svn_patch ~/junk/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-05.diff &lt;br/&gt;
patching file java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java&lt;br/&gt;
Reversed (or previously applied) patch detected!  Assume -R? &lt;span class=&quot;error&quot;&gt;&amp;#91;n&amp;#93;&lt;/span&gt;   C-c C-c&lt;/p&gt;

&lt;p&gt;Maybe you could supply a composite patch? I am going to wait for more guidance from you before I review these patches. Thanks.&lt;/p&gt;</comment>
                            <comment id="12532805" author="mzaun" created="Sat, 6 Oct 2007 01:47:40 +0100"  >
&lt;p&gt;Hi Rick,&lt;br/&gt;
I could not reproduce that patch issues you reported: I checked out a clean trunk, downloaded and applied patch 05 (patch -p0 &amp;lt; &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-05.diff), then -06; no problems during patch and build. These two patches should be independent from each other, and a quick look didn&apos;t reveal any overlapping code to me.&lt;/p&gt;

&lt;p&gt;However, as a cross-check, I&apos;ve attached a combined patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-05and06.diff (from the freshly patched trunk) and hope this one works better.&lt;/p&gt;

&lt;p&gt;About the patches&apos; status, yes, I consider patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-05.diff, which contains the System Privileges enforcement code, ready for discussion (expecting questions), and&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-06.diff, which contains some System Privileges unit test fixes, ready for commital (or discussion if there are any questions). The unit test (suite) runs fine in my freshly patched and build trunk:&lt;br/&gt;
  java -cp &quot;jars/sane/derbynet.jar;jars/sane/derby.jar;tools/java/junit.jar;jars/sane/derbyTesting.jar;&quot; junit.textui.TestRunner org.apache.derbyTesting.unitTests.junit._Suite&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you find the unit test&apos;s two println()s unecessary, please, feel free to remove them:&lt;br/&gt;
  testing System Privileges ...&lt;br/&gt;
  testing System Privileges: done.&lt;/p&gt;

&lt;p&gt;About the SystemPrivilegesTestCases.html document, I&apos;ll break out the &quot;invalid credentials&quot; case into two lines with a few updates (right after my return in a week).&lt;/p&gt;

&lt;p&gt;Thanks for your comments so far, Martin&lt;/p&gt;</comment>
                            <comment id="12532878" author="knutanders" created="Sat, 6 Oct 2007 15:33:17 +0100"  >&lt;p&gt;Rick, it might just be a typo, but &quot;svn_patch ~/junk/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-05.diff &quot; as you mentioned above will reapply patch 05 instead of applying patch 06.&lt;/p&gt;</comment>
                            <comment id="12533146" author="rhillegas" created="Mon, 8 Oct 2007 16:22:50 +0100"  >&lt;p&gt;Thanks for the combined patch, Martin. This is really beautiful code showcasing some nice design patterns. I have a couple comments:&lt;/p&gt;

&lt;p&gt;1) EmbeddConnection and InternalDriver:&lt;/p&gt;

&lt;p&gt;The construction of the Subject is a bit involved and this code is&lt;br/&gt;
duplicated for the createDB and shutdownEngine checks. I think it&lt;br/&gt;
would be better if this construction of the Subject were abstracted&lt;br/&gt;
out into a shareable piece of code.&lt;/p&gt;

&lt;p&gt;2) NetworkServerControlImpl:&lt;/p&gt;

&lt;p&gt;I think that there is no need to invent the concept of a default&lt;br/&gt;
password for the APP account. I think it would be better to default&lt;br/&gt;
passwordArg to &quot;&quot; or null.&lt;/p&gt;

&lt;p&gt;init() and checkShutdownPrivileges()&lt;/p&gt;

&lt;p&gt;I notice that init() always sets the user and password properties but&lt;br/&gt;
checkShutdownPrivileges() only sets them if the are not null. What is&lt;br/&gt;
the reason for this asymmetry?&lt;/p&gt;

&lt;p&gt;3) server.policy&lt;/p&gt;

&lt;p&gt;I would expand the comment to punch up the message that these are&lt;br/&gt;
broad privileges which we encourage the user to narrow. Also, you will&lt;br/&gt;
want to make corresponding changes to&lt;br/&gt;
java/drda/org/apache/derby/drda/template.policy&lt;/p&gt;

&lt;p&gt;4) derby_tests.policy&lt;/p&gt;

&lt;p&gt;As a bit of defensive coding, you may want to make corresponding&lt;br/&gt;
changes to the other policy files used by the regression tests.&lt;/p&gt;

&lt;p&gt;5) SystemPrivilegesPermissionTest&lt;/p&gt;

&lt;p&gt;I would convert the System.out.println() diagnostics to println()&lt;br/&gt;
calls. That way you will see this output when you turn on debugging,&lt;br/&gt;
but the printout won&apos;t show up for ordinary regression test runs.&lt;/p&gt;

&lt;p&gt;6) I think that 05 and 06 must be committed together. 05 wires in the&lt;br/&gt;
references which are necessary to pull the new permission and&lt;br/&gt;
principal classes into the jar files. Without these references, the&lt;br/&gt;
new regression tests will fail if run against jar files.&lt;/p&gt;

</comment>
                            <comment id="12549038" author="mzaun" created="Thu, 6 Dec 2007 13:46:05 +0000"  >&lt;p&gt;The attached &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-07 patch replaces &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-05and06.&lt;/p&gt;

&lt;p&gt;I addressed all of Rick&apos;s comments, except for 2) (default user identity for NetworkServerControl), which turned out to be non-trivial.  I&apos;ll add a detailed comment specifically on this issue along with an update to SystemPrivilegesTestCases.html.&lt;/p&gt;

&lt;p&gt;Also, the patch contains fixes to the test suites and now passes junit-all and derbyall on both the derby jar files and the classes directory.&lt;/p&gt;

&lt;p&gt;Please, review, test, and comment.&lt;/p&gt;</comment>
                            <comment id="12549039" author="mzaun" created="Thu, 6 Dec 2007 13:48:30 +0000"  >&lt;p&gt;Reattached &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-07 files with ASF inclusion grant. &lt;/p&gt;</comment>
                            <comment id="12549512" author="rhillegas" created="Fri, 7 Dec 2007 18:42:33 +0000"  >&lt;p&gt;Hi Martin,&lt;/p&gt;

&lt;p&gt;Thanks for the even better next rev of the patch. Once again, the code is beautiful. I have a couple comments:&lt;/p&gt;

&lt;p&gt;1) EmbedConnection: It looks to me as though the CREATE DATABASE&lt;br/&gt;
privilege will not be enforced if the user is creating the database&lt;br/&gt;
from a backup copy using the &quot;createFrom&quot; URL attribute. I think this&lt;br/&gt;
is fine and the functional spec doesn&apos;t address this issue. As an&lt;br/&gt;
add-on effort we may want to consider if we want to restrict the&lt;br/&gt;
ability to create a database from a backup copy. This may be a new&lt;br/&gt;
database privilege (&quot;createFrom&quot; instead of &quot;create&quot;) or it may be the&lt;br/&gt;
same privilege. In any event, the topic is worth some thought&lt;br/&gt;
regardless of whether we address it in 10.4.&lt;/p&gt;

&lt;p&gt;2) SecurityUtil: There seems to be a fair amount of code shared&lt;br/&gt;
between checkShutdownPermission() and&lt;br/&gt;
checkDatabaseCreatePermission(). In a small, future patch there&apos;s an&lt;br/&gt;
opportunity to factor this shared code into a common routine, say,&lt;/p&gt;

&lt;p&gt;   checkUserHasPermission( String user, Permission permission )&lt;/p&gt;

&lt;p&gt;3) NetworkServerControlImpl:&lt;/p&gt;

&lt;p&gt;    a) I notice at line 858 that user and&lt;br/&gt;
    password properties are unconditionally stuffed into a Properties&lt;br/&gt;
    object without checking whether they are null. In contrast, at line 1026&lt;br/&gt;
    these properties (in other Properties objects) are guarded by null&lt;br/&gt;
    checking. I think that a NullPointerException will be raised if the&lt;br/&gt;
    values are null. Are we sure that the username and password will&lt;br/&gt;
    always be non-null at line 858?&lt;/p&gt;

&lt;p&gt;    b) processCommands(): I notice that the protocol includes&lt;br/&gt;
    optional username/password arguments now. I just want to confirm&lt;br/&gt;
    that the protocol won&apos;t do something silly if username or password&lt;br/&gt;
    is null or if password is specified but username isn&apos;t.&lt;/p&gt;


</comment>
                            <comment id="12549564" author="rhillegas" created="Fri, 7 Dec 2007 21:30:09 +0000"  >&lt;p&gt;After applying this patch, the regression tests run cleanly for me except for a diff in outerjoin.sql. That regression was not introduced by this patch--I also see the diff in a clean client newly cut from the mainline:&lt;/p&gt;

&lt;p&gt;MasterFileName = master/outerjoin.out&lt;br/&gt;
1737 del&lt;br/&gt;
&amp;lt; Empty right rows returned = 1&lt;br/&gt;
1737a1737&lt;br/&gt;
&amp;gt; Empty right rows returned = 0&lt;br/&gt;
Test Failed.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;End:   outerjoin jdk1.5.0_07 2007-12-07 13:26:01 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12549622" author="rhillegas" created="Sat, 8 Dec 2007 00:48:26 +0000"  >&lt;p&gt;The regression tests also pass for me when run against the classpath rather than the jars--modulo the outerjoin.sql problem noted above.&lt;/p&gt;</comment>
                            <comment id="12557673" author="mzaun" created="Thu, 10 Jan 2008 15:47:59 +0000"  >&lt;p&gt;Rick,&lt;br/&gt;
thanks for your comments, I&apos;ve incorporated 1), 2), and 3.a) and verified 3.b) and attached a new patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-08 replacing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-07.  I&apos;d very much appreciate if you could give some scrutiny to the new document SystemPrivilegesBehaviour.html (replacing deleted SystemPrivilegesTestCases.html).&lt;/p&gt;

&lt;p&gt;Developers,&lt;br/&gt;
with the latest patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-08, I consider the work on System Privileges becoming ready for integration.&lt;/p&gt;

&lt;p&gt;By the specification of this feature, there will be some incompatibilities once integrated. For instance, users will have to provide credentials to &quot;NetworkServerCommand shutdown&quot; when running with authentication.  Users with customized server.policy files will have to add a couple of permissions (when running with Authentication and SecurityManager).&lt;/p&gt;

&lt;p&gt;The user-visible changes with System Privileges and the error messages in case of failures are summarized and described by attached document SystemPrivilegesBehaviour.html.  Please, have a close look and provide feedback.&lt;/p&gt;

&lt;p&gt;Thanks! Martin&lt;/p&gt;</comment>
                            <comment id="12558050" author="rhillegas" created="Fri, 11 Jan 2008 18:11:43 +0000"  >&lt;p&gt;Hi, Martin. Thanks for the patch and the improved description of the compatibility issues. I am running the tests now.&lt;/p&gt;

&lt;p&gt;I don&apos;t want to commit this work  until the community agrees on how we want to handle the compatibility issues you have noted. I believe that we will need a community discussion and a release note.&lt;/p&gt;

&lt;p&gt;Before starting a community discussion, I would like to make sure that I understand what the non-backward-compatible cases are. This is my understanding. Please correct me as necessary.&lt;/p&gt;

&lt;p&gt;The non-backward-compatible cases arise for customers who do BOTH of the following:&lt;/p&gt;

&lt;p&gt;A) Run with Authorization turned on&lt;/p&gt;

&lt;p&gt;B) Run with a Java Security Manager&lt;/p&gt;

&lt;p&gt;For these customers, the non-backward-compatible cases are:&lt;/p&gt;

&lt;p&gt;1) If the customer has written their own policy file, then the customer will need to add some more permissions to it. These permissions are needed in order to create databases and shutdown the engine.&lt;/p&gt;

&lt;p&gt;2) If the customer shuts down the network server via NetworkServerControl, then the customer will need to supply credentials to the shutdown command.&lt;/p&gt;

&lt;p&gt;Does this sound right? If not, could you summarize the situation better?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12558065" author="djd" created="Fri, 11 Jan 2008 18:46:43 +0000"  >&lt;p&gt;Can the specification clarify what SystemPermission &quot;shutdownEngine&quot; gives permission to do?&lt;/p&gt;

&lt;p&gt;From the name I would think it controls the permission to shutdown the Derby embedded database engine, but later in the spec it says shutting down the network server requires this permission. Is that just because shutting down the network server will shutdown the engine?&lt;/p&gt;

&lt;p&gt;I thought that shutting down the network server and database engine were independent operations, thus shouldn&apos;t there be two permissions, shutdownEngine and shutdownServer?&lt;/p&gt;</comment>
                            <comment id="12558090" author="rhillegas" created="Fri, 11 Jan 2008 19:54:56 +0000"  >&lt;p&gt;Hi Dan. The spec describes only one shutdown permission, shutdownEngine. If you have this privilege, then you can shutdown the engine and you can shutdown the network server too.&lt;/p&gt;

&lt;p&gt;As a follow-on patch or effort, we could add a separate shutdownServer permission. If we did this, then I think that it would make sense that shutdownServer =&amp;gt; shutdownEngine. I am unable to think of a reason that one would want someone to have the ability to shutdown the VM but not the engine. At first blush, it ought to be possible to implement this relationship via Permission.implies().&lt;/p&gt;

&lt;p&gt;The following cases arise:&lt;/p&gt;

&lt;p&gt;1) Neither permission is granted. Neither the server nor the engine can be brought down gracefully.&lt;/p&gt;

&lt;p&gt;2) Only shutdownEngine is granted. The engine can be brought down gracefully but the server cannot be.&lt;/p&gt;

&lt;p&gt;3) Only shutdownServer is granted. Both the engine and the server can be brought down gracefully.&lt;/p&gt;

&lt;p&gt;4) Both shutdownServer and shutdownEngine are granted. Both the engine and the server can be brought down gracefully.&lt;/p&gt;

&lt;p&gt;(1) and (2) seem like mistakes to me. (3) and (4) look very similar to one another.&lt;/p&gt;

&lt;p&gt;Creating a separate shutdownServer permission allows one to have a user who enjoys the permission to shutdown the engine but not the server. I would like to understand the difference between the ServerAdministrator and EngineAdmistrator roles. What use-cases are supported by the additional role?&lt;/p&gt;

&lt;p&gt;Here are some approaches which we could take in follow-on patches and efforts:&lt;/p&gt;

&lt;p&gt;1) Rename the shutdownEngine permission to just shutdown. That would correspond better with the behavior described in the spec and implemented in this patch.&lt;/p&gt;

&lt;p&gt;2) Either in 10.4 or a later release, implement a separate shutdownEngine permission if the use-cases seem compelling. The behavior would be shutdown =&amp;gt; shutdownEngine.&lt;/p&gt;</comment>
                            <comment id="12558097" author="mzaun" created="Fri, 11 Jan 2008 20:07:34 +0000"  >
&lt;p&gt;Rick,&lt;br/&gt;
thanks for the summary on the backward compatibility issues, which only arise, as you&apos;ve correctly described, under both, A) and B).&lt;br/&gt;
For 100% completeness, I&apos;d have two technical additions:&lt;/p&gt;

&lt;p&gt;&amp;gt; Rick Hillegas wrote:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; The non-backward-compatible cases arise for customers who do BOTH of the following:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; A) Run with Authorization turned on&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; B) Run with a Java Security Manager&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; For these customers, the non-backward-compatible cases are:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; 1) If the customer has written their own policy file, then the customer will need to add some more permissions to it. These permissions are needed in order to create databases and shutdown the engine.&lt;/p&gt;

&lt;p&gt;...and to run the security checks themselves (which require an AuthPermission, a PropertyPermission, and a FilePermission &amp;#8211; see template.policy).&lt;/p&gt;

&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt; 2) If the customer shuts down the network server via NetworkServerControl, then the customer will need to supply credentials to the shutdown command.&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;... and&lt;br/&gt;
3) If the customer shuts down the engine via a connection URL with &quot;shutdown=true;&quot;, then the customer will also need to supply credentials, i.e., user/password attributes in the URL.&lt;/p&gt;

&lt;p&gt;&amp;gt; Does this sound right? If not, could you summarize the situation better? &lt;/p&gt;

&lt;p&gt;Good summary.  Thanks, Martin&lt;/p&gt;</comment>
                            <comment id="12558098" author="rhillegas" created="Fri, 11 Jan 2008 20:15:58 +0000"  >&lt;p&gt;Thanks Martin,&lt;/p&gt;

&lt;p&gt;Just to clarify, the additional case (3) is true today isn&apos;t it? Today if Authorization is turned on, then you must pass valid credentials in order to shutdown the engine via an URL? So (3) would not be an additional backward-compatibility case, just a continuation of current behavior?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12558103" author="mzaun" created="Fri, 11 Jan 2008 20:29:06 +0000"  >
&lt;p&gt;Rick,&lt;/p&gt;

&lt;p&gt;&amp;gt;Just to clarify, the additional case (3) is true today isn&apos;t it? Today if Authorization is turned on, then you must pass valid credentials in order to shutdown the engine via an URL? So (3) would not be an additional backward-compatibility case, just a continuation of current behavior? &lt;/p&gt;

&lt;p&gt;&quot;Yes&quot; to all three questions &amp;#8211; I overlooked that 3) is not newly introduced but already there.&lt;/p&gt;

&lt;p&gt;Thanks, Martin&lt;/p&gt;</comment>
                            <comment id="12558108" author="djd" created="Fri, 11 Jan 2008 20:33:23 +0000"  >&lt;p&gt;For the shutdown issue I thinking of the situation where the application is using the embedded mode but supports an optional client/server mode for debugging/reporting etc. In that case a user may want to start and stop the server without stopping the embedded engine. Thus they may have permission to stop the server but not to stop the engine.&lt;/p&gt;</comment>
                            <comment id="12558110" author="djd" created="Fri, 11 Jan 2008 20:34:26 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; 1) If the customer has written their own policy file, then the customer will need to add some more permissions to it. These permissions are needed in order to create databases and shutdown the engine.&lt;/p&gt;

&lt;p&gt;&amp;gt; ...and to run the security checks themselves&lt;/p&gt;

&lt;p&gt;What does &quot;run the security checks themselves&quot; mean here?&lt;/p&gt;</comment>
                            <comment id="12558117" author="mzaun" created="Fri, 11 Jan 2008 20:45:06 +0000"  >
&lt;p&gt;I just noticed that a few diffs to 4 derbyall &quot;master output&quot; files were missing from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-08.  They reflect the changed &quot;usage&quot; message printed by NetworkServerControl for &quot;shutdown&quot; (new user/password arguments).&lt;/p&gt;

&lt;p&gt;Please find attached &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-08_addendum, which complements &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-08.  With the additional patch, entire derbyall passes in my workspace.&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12558120" author="rhillegas" created="Fri, 11 Jan 2008 20:48:04 +0000"  >&lt;p&gt;Hi Dan,&lt;/p&gt;

&lt;p&gt;Martin attached a document called SystemPrivilegesBehaviour.html. In that document in the section titled &quot;Policy File&quot;, there are two blocks of permissions. The first block of permission are needed in order to run the doAsPrivileged() method (that is, to run as a particular DatabasePrincipal) and to canonicalize file names on behalf of the createDatabase checks. I believe that this is what Martin means by &quot;run the security checks themselves&quot;.&lt;/p&gt;</comment>
                            <comment id="12558125" author="mzaun" created="Fri, 11 Jan 2008 21:06:49 +0000"  >
&lt;p&gt;&amp;gt; I believe that this is what Martin means by &quot;run the security checks themselves&quot;.&lt;/p&gt;

&lt;p&gt;Correct. The code implementing the autherization checks needs to&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;run a doAsPrivileged (hence the javax.security.auth.AuthPermission)&lt;/li&gt;
	&lt;li&gt;resolve relative path names (hence the java.util.PropertyPermission), and&lt;/li&gt;
	&lt;li&gt;canonicalize path names (hence the java.io.FilePermission).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These permissions are only needed on derby.jar.  See SystemPrivilegesBehaviour.html.&lt;/p&gt;

&lt;p&gt;Thanks, Martin&lt;/p&gt;</comment>
                            <comment id="12558128" author="djd" created="Fri, 11 Jan 2008 21:12:59 +0000"  >&lt;p&gt;&amp;gt; &amp;gt; I believe that this is what Martin means by &quot;run the security checks themselves&quot;.&lt;/p&gt;

&lt;p&gt;&amp;gt; Correct. The code implementing the autherization checks needs to &lt;/p&gt;

&lt;p&gt;Just to confirm, &quot;the code&quot; here means Derby code, not code written by the user, right?&lt;br/&gt;
It&apos;s just the &quot;themselves&quot; seems to imply the user now has to write code to implement Derby security checks.&lt;/p&gt;</comment>
                            <comment id="12558134" author="mzaun" created="Fri, 11 Jan 2008 21:29:38 +0000"  >&lt;p&gt;&amp;gt;Just to confirm, &quot;the code&quot; here means Derby code, not code written by the user, right?&lt;/p&gt;

&lt;p&gt;Correct.&lt;/p&gt;

&lt;p&gt;&amp;gt; It&apos;s just the &quot;themselves&quot; seems to imply the user now has to write code to implement Derby security checks.&lt;/p&gt;

&lt;p&gt;My language wasn&apos;t clear.&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12558586" author="johnemb" created="Mon, 14 Jan 2008 12:31:26 +0000"  >&lt;p&gt;This is confusing. Are you (Rick/Martin) mixing authentication with authorization in the most recent comments to this issue? If not, please help me understand what kind of Authorization we are talking about here:&lt;/p&gt;

&lt;p&gt;&amp;#8212; --- &amp;#8212;&lt;br/&gt;
&amp;gt; The non-backward-compatible cases arise for customers who do BOTH of the following:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; A) Run with Authorization turned on&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; B) Run with a Java Security Manager&lt;br/&gt;
&amp;#8212; --- &amp;#8212;&lt;br/&gt;
&amp;gt;&amp;gt; Just to clarify, the additional case (3) is true today isn&apos;t it? Today if Authorization is turned on, then you must pass valid credentials in order to shutdown the engine via an URL? So (3) would not be an additional backward-compatibility case, just a continuation of current behavior? &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; &quot;Yes&quot; to all three questions &amp;#8211; I overlooked that 3) is not newly introduced but already there.&lt;br/&gt;
&amp;#8212; --- &amp;#8212;&lt;/p&gt;

&lt;p&gt;I think that the case mentioned above is true if authentication is turned on, regardless of any settings for authorization.&lt;/p&gt;

&lt;p&gt;Regarding the SystemPrivilegesBehaviour.html document: I find it very useful in understanding the implications of these changes, especially the table with all the combinations of configurations. I find the second bullet under the &quot;Changes&quot; heading a bit unclear, though:&lt;/p&gt;

&lt;p&gt;&amp;#8212; ---&lt;br/&gt;
(...users must)  &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;have autherization by the used Java Policy for engine shutdown and/or create database.
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;&amp;#8212;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think I know what is meant, but please correct me if I&apos;m wrong:&lt;br/&gt;
(users must) be authorized by the used Java Security Policy to perform engine shutdown and/or create a database.&lt;/p&gt;</comment>
                            <comment id="12558602" author="rhillegas" created="Mon, 14 Jan 2008 13:54:23 +0000"  >&lt;p&gt;Hi John,&lt;/p&gt;

&lt;p&gt;&amp;gt;This is confusing. Are you (Rick/Martin) mixing authentication with authorization in the most recent comments to this issue? If not, please help me understand what kind of Authorization we are talking &amp;gt;about here:&lt;/p&gt;

&lt;p&gt;You are right. When I wrote above on January 11 &quot;A) Run with Authorization turned on &quot;, I meant &quot;Run with Authentication turned on&quot;. Martin describes the situation correctly in SystemPrivilegesBehaviour.html.&lt;/p&gt;


&lt;p&gt;&amp;gt;I think I know what is meant, but please correct me if I&apos;m wrong:&lt;br/&gt;
&amp;gt;(users must) be authorized by the used Java Security Policy to perform engine shutdown and/or create a database.&lt;/p&gt;

&lt;p&gt;Yes. If you are BOTH running with Authentication turned on and with a Java Security manager, then you need to be authorized by the security policy to shutdown the engine and create databases.&lt;/p&gt;</comment>
                            <comment id="12558643" author="rhillegas" created="Mon, 14 Jan 2008 15:56:39 +0000"  >&lt;p&gt;I have run the regression tests against &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-08 with its addendum. The tests ran cleanly for me.&lt;/p&gt;</comment>
                            <comment id="12558703" author="djd" created="Mon, 14 Jan 2008 18:15:26 +0000"  >&lt;p&gt;With the class DatabasePrincipal, a user name of &quot;*&quot; corresponds to all users. Is this use of * come from any existing practice? In SQL authorization the identifier PUBLIC is used to represent all users. Would it make more sense to use the SQL practice here?&lt;/p&gt;

&lt;p&gt;Given that the representation of user identifiers can cause confusion (see &lt;a href=&quot;http://wiki.apache.org/db-derby/UserIdentifiers&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/UserIdentifiers&lt;/a&gt;) it would be good if the DatabasePrincipal javadoc and the functional spec indicated how  it (with examples) handles user name (in the code and the policy file). It looks like user names would  be entered in their normal form in the policy file unless they include one of the special characters *, \ and @. What about if the user name includes a double quote?&lt;/p&gt;

&lt;p&gt;It&apos;s also worth noting that policy file and the DatabasePrincipal are using back-slash as an escape, thus a normalized user name of  eve* would have to eve&lt;br class=&quot;atl-forced-newline&quot; /&gt;* in the policy file (I think). A single back-slash in the user name would be four backslashes in the policy file.&lt;/p&gt;

&lt;p&gt;In DatabasePrincipal at line 80 there is a comment that the &quot;general rule&quot; is to have english only messages for &quot;internal coding errors&quot;. &lt;br/&gt;
  First - where does this general rule come from, I&apos;ve never heard of it for Derby.&lt;br/&gt;
  Second - many of the english only messages are not internal coding errors, but configuration errors in the policy file.&lt;/p&gt;

&lt;p&gt;Also several of the messages in DatabsaePrinicpal refer to &quot;action&quot; when I think they mean name.&lt;/p&gt;</comment>
                            <comment id="12558724" author="djd" created="Mon, 14 Jan 2008 18:53:05 +0000"  >&lt;p&gt;I think the patch has some issues with name handling:&lt;/p&gt;

&lt;p&gt;EmbedConnection takes the user name from the connection request and passes it into SecurityUtil.checkDatabaseCreatePermission.&lt;br/&gt;
That method takes the name and passes it into the constructor for DatabasePrincipal.&lt;/p&gt;

&lt;p&gt;The problem is that the rules for the format of the name in DatabasePrincipal do not match the format of the name for connection requests, this is due to the special escaping that happens in DatabasePrincipal to cope with the special characters *, @ and \.&lt;/p&gt;
</comment>
                            <comment id="12558785" author="rhillegas" created="Mon, 14 Jan 2008 21:06:21 +0000"  >&lt;p&gt;Hi Dan,&lt;/p&gt;

&lt;p&gt;&amp;gt;With the class DatabasePrincipal, a user name of &quot;*&quot; corresponds to all users. Is this use of * come from any existing practice? In SQL authorization the identifier PUBLIC is used to represent all users. &amp;gt;Would it make more sense to use the SQL practice here? &lt;/p&gt;

&lt;p&gt;I&apos;m not sure that we can use PUBLIC as a username wildcard. My cursory reading of the SQL standard suggests that any delimited identifier can be a valid user name and authorization id. This includes &quot;PUBLIC&quot;, &quot;TABLE&quot;, &quot;GRANT&quot;, etc.. I can see that Derby treats the delimited identifier &quot;PUBLIC&quot; as equivalent to the keyword PUBLIC in GRANT statements--but is this correct?&lt;/p&gt;

&lt;p&gt;Can you  point me at a clause in the spec which forbids the use of &quot;PUBLIC&quot; as a user name?&lt;/p&gt;</comment>
                            <comment id="12558812" author="djd" created="Mon, 14 Jan 2008 22:13:44 +0000"  >&lt;p&gt;5.4 SR 20) No &amp;lt;authorization identifier&amp;gt; shall specify &quot;PUBLIC&quot;.&lt;/p&gt;</comment>
                            <comment id="12559046" author="johnemb" created="Tue, 15 Jan 2008 12:59:33 +0000"  >&lt;p&gt;Dan commented:&lt;br/&gt;
&amp;gt; With the class DatabasePrincipal, a user name of &quot;*&quot; corresponds to all users. Is this use of * come from any existing practice? In SQL authorization the identifier PUBLIC is used to represent all users. Would it make more sense to use the SQL practice here?&lt;/p&gt;

&lt;p&gt;At first glance I found it intuitive that the wildcard for &quot;all principal names&quot; is &quot;*&quot;, since a number of Permissions in a Java Security Policy file already accept * as a wildcard (e.g. for host names, property names, file paths, etc.). I don&apos;t know much about existing practice with regards to principal wildcards, but I found this &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;&quot;The principal_class_name may be set to the wildcard value, *, which allows it to match any Principal class. In addition, the principal_name may also be set to the wildcard value, *, allowing it to match any Principal name. When setting the principal_class_name or principal_name to *, do not surround the * with quotes. Also, if you specify a wildcard principal class, you must also specify a wildcard principal name.&quot;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;: &lt;a href=&quot;http://download.java.net/jdk7/docs/technotes/guides/security/PolicyFiles.html#FileSyntax&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/jdk7/docs/technotes/guides/security/PolicyFiles.html#FileSyntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, I tried using a customized policy file with the latest patch, and from what I could see, using &lt;/p&gt;

&lt;p&gt;grant principal org.apache.derby.authentication.DatabasePrincipal * {&lt;/p&gt;

&lt;p&gt;is, from a user&apos;s perspective, equivalent to&lt;/p&gt;

&lt;p&gt;grant principal org.apache.derby.authentication.DatabasePrincipal &quot;*&quot; {&lt;/p&gt;

&lt;p&gt;So, even if the wildcard in our implementation is changed to &quot;PUBLIC&quot; or something else, it seems that users can still use the generic wildcard * (no quotes) to specify &quot;all users&quot; (correct me if I&apos;m wrong).&lt;/p&gt;

&lt;p&gt;Other than that, I agree with Dan&apos;s comment about the need to specify how the various forms of user names are handled (preferably in the user documentation as well, not only in the funcSpec). The current handling/presentation/usage of user names in Derby is IMHO already quite confusing, if not a mess, so it would be good not to add too many extra variables into the mix.&lt;/p&gt;

&lt;p&gt;Finally, I would like to mention that I have done some (basic) manual experiments using Derby with the latest patches for this issue applied, and have found no issues so far.&lt;/p&gt;</comment>
                            <comment id="12559092" author="djd" created="Tue, 15 Jan 2008 15:51:30 +0000"  >&lt;p&gt;Thanks John, but is that wildcard value specific to Java 7? The only text I can find in J2SE 5 and JDK 6 is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The principal field is optional in that, if it is omitted, it signifies &quot;any principals&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Either way, it seems there are already mechanisms to specify all users, thus we don&apos;t want to introduce another way of specifying all users by having a quoted *.&lt;br/&gt;
Supporting PUBLIC as a DatabasePrincal name to represent all users could be a follow on change. It might make it clearer for folks used to SQL authorization.&lt;/p&gt;</comment>
                            <comment id="12559246" author="johnemb" created="Tue, 15 Jan 2008 21:48:38 +0000"  >&lt;p&gt;I have found the wildcard value of * for principal_name mentioned only in the JDK7 docs, but I tried it on Sun&apos;s JVMs 1.4.2 and 1.5.0, and it worked the same way, as described. Not sure if we can/should rely on that or not, and I don&apos;t know if other vendors do the same thing.&lt;/p&gt;</comment>
                            <comment id="12559260" author="djd" created="Tue, 15 Jan 2008 22:42:04 +0000"  >&lt;p&gt;Rick wrote:&lt;br/&gt;
&amp;gt; 1) Rename the shutdownEngine permission to just shutdown. That would correspond better with the behavior described in the spec and implemented in this patch.&lt;br/&gt;
&amp;gt; 2) Either in 10.4 or a later release, implement a separate shutdownEngine permission if the use-cases seem compelling. The behavior would be shutdown =&amp;gt; shutdownEngine. &lt;/p&gt;

&lt;p&gt;I think these are good ideas, namely rename the permission to shutdown and then optionally later add in more specific shutdown permissions.&lt;/p&gt;</comment>
                            <comment id="12559261" author="mzaun" created="Tue, 15 Jan 2008 22:42:36 +0000"  >&lt;p&gt;Attached is an upated version of the SystemPrivilegesBehaviour.html extending the description of the user-visible changes and the backward compatibility issues, which was incomplete.&lt;/p&gt;

&lt;p&gt;By the functional spec and the implementation, this JIRA addresses two issues, which could have been separated:&lt;br/&gt;
a) authentication: extend NetworkServerControl to support user credentials&lt;br/&gt;
b) authorization: introduce checks for EngineShutdown/CreateDatabase System Privileges&lt;/p&gt;

&lt;p&gt;The reason it came about is because b) requires a) (but not vice versa).&lt;/p&gt;

&lt;p&gt;The backward compatibility issues with a) and b) are separate as now highlighted in the SystemPrivilegesBehaviour document.&lt;br/&gt;
(Also, see the &quot;Compatibility issue for 10.4&quot; discussion on derby-dev.)&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12559833" author="mzaun" created="Thu, 17 Jan 2008 06:53:56 +0000"  >
&lt;p&gt;Hi Dan,&lt;br/&gt;
thanks for the pointer and your comments on the rules for User Identifiers.&lt;/p&gt;

&lt;p&gt;&amp;gt; Daniel John Debrunner wrote:&lt;br/&gt;
&amp;gt; Given that the representation of user identifiers can cause confusion (see &lt;a href=&quot;http://wiki.apache.org/db-derby/UserIdentifiers&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/UserIdentifiers&lt;/a&gt;) it would be good if the DatabasePrincipal javadoc and the functional spec indicated how it (with examples) handles user name (in the code and the policy file). &lt;/p&gt;

&lt;p&gt;I see: we need to document some extra rules for user names in policy files, because&lt;br/&gt;
a) we&apos;re bound to the policy file syntax, i.e., the name argument to DatabasePrincipal needs to be a Java String literal in double quotes (in contrast to the use of identifiers in SQL) and&lt;br/&gt;
b) the functional spec introduces the special characters *, @, and \, which otherwise are ordinary characters in user identifiers.&lt;/p&gt;

&lt;p&gt;So, I agree it&apos;s of importance to document this in the javadoc, functional spec, the above wiki page, and also as comments in server.policy and template.policy.&lt;/p&gt;

&lt;p&gt;I&apos;ll update my patch (javadocs, policy files) with more comments and can also add some examples to the User Identifiers wiki page when we have agreement.&lt;/p&gt;

&lt;p&gt;Before replying to your detailed comments, let me try to backtrack and summarize the cases:&lt;/p&gt;

&lt;p&gt;1) Non-delimited user identifiers:&lt;br/&gt;
1.1) I understand the User Identifier document as saying that identifiers are case-INsensitive unless delimited by double-quotes.&lt;br/&gt;
1.2) The policy file syntax requires the argument to DatabasePrincipal to be a Java String literal, i.e., enclosed in double-quotes.&lt;br/&gt;
1.3) The enclosing double-quotes imposed by the policy file syntax shouldn&apos;t count towards the user name, since they&apos;re mandated by Java (consistent with the examples in the User Identifiers document), e.g., DatabasePrincipal &quot;eve&quot; displays a non-delimited identifier.&lt;br/&gt;
1.4) According to the rules, non-delimited user names in policy files may be written all-uppper, -lower, or mixed case but are to be interpreted case-INsensitively, e.g., DatabasePrincipal &quot;eVe&quot; and DatabasePrincipal &quot;EVE&quot; both mean the same for authentication and authorization purposes, &lt;br/&gt;
1.5) The current patch does not yet perform the authorization checks for non-delimited user names on their normal form &amp;#8211; but it shouldn&apos;t be too difficult to add this once we have agreement.&lt;/p&gt;

&lt;p&gt;2) Delimited user identifiers:&lt;br/&gt;
2.1) Users can form a delimited identifier in policy files by putting escaped double-quotes into the String literal (consistent with the examples in the User Identifiers document), e.g., DatabasePrincipal &quot;\&quot;eVe\&quot;&quot; displays a delimited identifier.&lt;br/&gt;
2.2) Those delimited user names are to be interpreted case-sensitively for authentication and authorization purposes.&lt;br/&gt;
2.3)  I&apos;ve tested that the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt; patch works with delimited identifiers in policy files and authenticated user names and handles them case-sensitively.  So, all seems to be done here.&lt;/p&gt;

&lt;p&gt;3) User identifiers with special System Privileges characters *, @, or \:&lt;br/&gt;
3.1) According to the functional spec, these special characters need to be escaped when they&apos;re just part of a DatabasePrincipal user name.&lt;br/&gt;
3.2) By the Java syntax, the backslash character itself needs to be escaped, e.g., a grant for user M@rtin reads DatabasePrincipal &quot;M&lt;br class=&quot;atl-forced-newline&quot; /&gt;@rtin&quot;.&lt;br/&gt;
3.3) This means that within the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt; autherization checks, all special characters in authenticated user names need to be escaped by \ before they&apos;re matched against the DatabasePrincipal.&lt;br/&gt;
3.4) The published patch does not yet apply that escaping of special characters, as you&apos;ve rightfully pointed out, but I&apos;ve successfully tested a quick fix already (see below).&lt;/p&gt;

&lt;p&gt;&amp;gt; It looks like user names would be entered in their normal form in the policy file unless they include one of the special characters *, \ and @. &lt;/p&gt;

&lt;p&gt;I don&apos;t follow: What&apos;s the issue with special characters in normal forms?&lt;br/&gt;
For example, we should be able to support all of these:&lt;/p&gt;

&lt;p&gt;a) all feasible, all denote the same user:&lt;br/&gt;
    DatabasePrincipal &quot;M&lt;br class=&quot;atl-forced-newline&quot; /&gt;@rtin&quot;&lt;br/&gt;
    DatabasePrincipal &quot;m&lt;br class=&quot;atl-forced-newline&quot; /&gt;@rtin&quot;&lt;br/&gt;
    DatabasePrincipal &quot;M&lt;br class=&quot;atl-forced-newline&quot; /&gt;@RTIN&quot;&lt;/p&gt;

&lt;p&gt;b) all feasible, but each denotes a different user:&lt;br/&gt;
    DatabasePrincipal &quot;\&quot;M\\@rtin\&quot;&quot;&lt;br/&gt;
    DatabasePrincipal &quot;\&quot;m\\@rtin\&quot;&quot;&lt;br/&gt;
    DatabasePrincipal &quot;\&quot;M\\@RTIN\&quot;&quot;&lt;/p&gt;

&lt;p&gt;&amp;gt; What about if the user name includes a double quote?&lt;/p&gt;

&lt;p&gt;Works, see 2.3) above.&lt;/p&gt;

&lt;p&gt;&amp;gt; It&apos;s also worth noting that policy file and the DatabasePrincipal are using back-slash as an escape, thus a normalized user name of eve* would have to eve&lt;br class=&quot;atl-forced-newline&quot; /&gt;* in the policy file (I think).&lt;/p&gt;

&lt;p&gt;Correct. Also see 3.2) above.&lt;/p&gt;

&lt;p&gt;&amp;gt; A single back-slash in the user name would be four backslashes in the policy file.&lt;/p&gt;

&lt;p&gt;Correct.  For instance, user M\rtin would receive a policy grant as DatabasePrincipal &quot;M\\\\rtin&quot;&lt;/p&gt;

&lt;p&gt;&amp;gt; I think the patch has some issues with name handling:&lt;br/&gt;
&amp;gt; EmbedConnection takes the user name from the connection request and passes it into SecurityUtil.checkDatabaseCreatePermission.&lt;br/&gt;
&amp;gt; That method takes the name and passes it into the constructor for DatabasePrincipal.&lt;br/&gt;
&amp;gt; The problem is that the rules for the format of the name in DatabasePrincipal do not match the format of the name for connection requests, this is due to the special escaping that happens in DatabasePrincipal to cope with the special characters *, @ and \. &lt;/p&gt;

&lt;p&gt;Good catch. I&apos;ve tested a quick fix, see 3.4) above, which I&apos;ll publish soon.&lt;/p&gt;

&lt;p&gt;The best place to perform the escaping of special System Privileges characters is within the method&lt;br/&gt;
    org.apache.derby.security.SecurityUtil.createDatabasePrincipalsSubject(String user)&lt;br/&gt;
right before the DatabasePricipal is instantiated with the user name.  That way, the escaping is done for all authorization checks (Rick, thanks for having suggested that small code refactorization!) and the modified user name stays local.&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12559853" author="mzaun" created="Thu, 17 Jan 2008 08:03:21 +0000"  >
&lt;p&gt;&amp;gt; John H. Embretsen wrote:&lt;br/&gt;
&amp;gt; I have found the wildcard value of * for principal_name mentioned only in the JDK7 docs, but I tried it on Sun&apos;s JVMs 1.4.2 and 1.5.0, and it worked the same way, as described. Not sure if we can/should rely on that or not, and I don&apos;t know if other vendors do the same thing.&lt;/p&gt;

&lt;p&gt;The javadocs of a 1.4 Sun JDK class&lt;br/&gt;
  &lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/guide/security/jaas/spec/com/sun/security/auth/PolicyFile.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/guide/security/jaas/spec/com/sun/security/auth/PolicyFile.html&lt;/a&gt;&lt;br/&gt;
has a paragraph explicitly describing the use of * (recommended without double-quotes) as wildcard for Principal names and classes (but that class has been deprecated for other reasons).&lt;/p&gt;

&lt;p&gt;But the general concept of &quot;*&quot; as wildcard character in policy files is documented:&lt;br/&gt;
  &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/security/PolicyFiles.html#Examples&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/guide/security/PolicyFiles.html#Examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; Daniel John Debrunner wrote:&lt;br/&gt;
&amp;gt; Either way, it seems there are already mechanisms to specify all users, thus we don&apos;t want to introduce another way of specifying all users by having a quoted *.&lt;br/&gt;
&amp;gt; Supporting PUBLIC as a DatabasePrincal name to represent all users could be a follow on change. It might make it clearer for folks used to SQL authorization.&lt;/p&gt;

&lt;p&gt;One can argue that with System Privileges (server shutdown, create database) we&apos;re in the realm of Java Security, not SQL authorization, controlled by Java policy (file) permissions in contrast to grants/revokes.&lt;/p&gt;

&lt;p&gt;If we feel that we&apos;re at the intersection of SQL and Java Security and that we want to please users with either background &amp;#8211; we can easily support both, PUBLIC and * as wildcard characters.  Of course, allowing both rather adds to the documentation.&lt;/p&gt;</comment>
                            <comment id="12559979" author="djd" created="Thu, 17 Jan 2008 16:33:01 +0000"  >&lt;p&gt;With the format of user name for DatabasePrincipal we are heading towards a non-standard format of user name and one that becomes hard to read with delimited identifiers. I wonder if a better approach would be to use a standard here, namely X500 and have DatabasePrincipal extend javax.security.auth.x500.X500Principal.&lt;/p&gt;

&lt;p&gt;The UID component could represent the Derby user name and in the future DC (domain component) could represent the database.&lt;/p&gt;</comment>
                            <comment id="12559995" author="djd" created="Thu, 17 Jan 2008 17:06:22 +0000"  >&lt;p&gt;&amp;gt; 1) Non-delimited user identifiers:&lt;br/&gt;
&amp;gt; 1.1) I understand the User Identifier document as saying that identifiers are case-INsensitive unless delimited by double-quotes.&lt;/p&gt;

&lt;p&gt;This is where it gets somewhat complicated, that&apos;s not a blanket true statement. A user name can be submitted to Derby in a number of contexts, in some of those contexts unquoted input is case-insensitive, in others it is not.&lt;/p&gt;

&lt;p&gt;Examples of case insensitive:&lt;br/&gt;
    Regular SQL identifiers&lt;br/&gt;
    user property in a JDBC connection request&lt;/p&gt;

&lt;p&gt;Examples of case sensitive:&lt;br/&gt;
    SQL value passed to a procedure expecting a user name&lt;br/&gt;
    SQL value representing a user name in a system table&lt;/p&gt;

&lt;p&gt;I was originally assuming that a user name in a policy file would be case-sensitive, thus&lt;br/&gt;
   grant DatabasePrincipal &quot;eve&quot;, DatabasePrinicpal &quot;EVE&quot;&lt;br/&gt;
would grant the permissions to two different users.&lt;/p&gt;

&lt;p&gt;However that may not be consistent with the usual way to input user names to Derby, which seems on the whole to use the rules for SQL identifiers.&lt;/p&gt;
</comment>
                            <comment id="12560512" author="rhillegas" created="Fri, 18 Jan 2008 19:26:10 +0000"  >&lt;p&gt;I would like to share some thoughts about the case-sensitivity of DatabasePrincipals. It seems to me that there are at least three concepts of identity in play here:&lt;/p&gt;

&lt;p&gt;1) UserName - This is what is passed to the authentication service as part of credentials checking.&lt;/p&gt;

&lt;p&gt;2) AuthorizationID - This is the owner of a schema and the grantor and grantee of fine-grained SQL privileges via the GRANT/REVOKE commands&lt;/p&gt;

&lt;p&gt;3) DatabasePrincipal - This is the recipient of shutdown and createDatabase privileges&lt;/p&gt;

&lt;p&gt;UserName and AuthorizationID are not the same thing. Unfortunately, the spec attached to this issue says that they are the same thing. That&apos;s just a mistake and it needs to be cleaned up.&lt;/p&gt;

&lt;p&gt;To illustrate the difference between UserNames and AuthorizationIDs, consider the following: From the point of view of the authentication service, the following are all distinct UserNames:&lt;/p&gt;

&lt;p&gt;Edward&lt;br/&gt;
EdWard&lt;br/&gt;
EDWARD&lt;br/&gt;
&quot;Edward&quot;&lt;br/&gt;
&quot;EdWard&quot;&lt;/p&gt;

&lt;p&gt;These, however, map to only 3 distinct AuthorizationIDs:&lt;/p&gt;

&lt;p&gt;Edward = EdWard = EDWARD&lt;br/&gt;
&quot;Edward&quot;&lt;br/&gt;
&quot;EdWard&quot;&lt;/p&gt;

&lt;p&gt;The practical consequence of this is that Edward and EdWard will authenticate with different credentials but will be thrown into the same schema and will be able to view and edit one another&apos;s data. That is, the following two connection URLs authenticate with different credentials but are thrown into the same schema and are treated by GRANT/REVOKE as the same person:&lt;/p&gt;

&lt;p&gt;  connect &apos;jdbc:derby:mydb;user=Edward;password=EdwardPassword&apos;;&lt;br/&gt;
  connect &apos;jdbc:derby:mydb;user=EdWard;password=EdWardPassword&apos;;&lt;/p&gt;

&lt;p&gt;Derby&apos;s solution to this problem is to tell the customer that they need to add two new users to their authentication system: &quot;Edward&quot; and &quot;EdWard&quot; so that Derby can disambiguate these users. This is frustrating to customers who want to integrate Derby applications into company-wide processes which rely on a single, organization-wide authentication scheme.&lt;/p&gt;

&lt;p&gt;I suspect that this behavior goes back to the introduction of CREATE SCHEMA long before Derby was open-sourced.&lt;/p&gt;

&lt;p&gt;I think it would be unfortunate if we added yet another concept of identity. So it makes sense to me that a DatabasePrincipal represents either a UserName or an AuthorizationID. But which one?&lt;/p&gt;

&lt;p&gt;AuthorizationID seems like a good fit once you are operating inside a database. I have reservations about using it at the system-wide level where there are no schemas or GRANT/REVOKE privileges.&lt;/p&gt;

&lt;p&gt;I also have misgivings about the following scenario:&lt;/p&gt;

&lt;p&gt;A) There is a system administrator with UserName Edward.&lt;/p&gt;

&lt;p&gt;B) Many applications run in the system, including a Payroll application which has a user named EdWard.&lt;/p&gt;

&lt;p&gt;C) I want to grant shutdown privilege to Edward but not to EdWard.&lt;/p&gt;

&lt;p&gt;I am wondering whether we should abandon the idea of using the policy file to control database-specific privileges (other than createDatabase itself). This would mean that in the future we plan to use GRANT/REVOKE extensions to manage privileges once you are inside a database. The policy file would then only be used for system-wide privileges where you do not have a database context. If we went down this path, then we would get rid of the @ syntax and many of the escaping cases which are proving to be so confusing. In this world, a DatabasePrincipal would correspond to a system-wide UserName.&lt;/p&gt;</comment>
                            <comment id="12560525" author="djd" created="Fri, 18 Jan 2008 19:57:34 +0000"  >&lt;p&gt;Rick - good points with the clarification of user name &amp;amp; authentication id, though for this:&lt;/p&gt;

&lt;p&gt;&amp;gt; The practical consequence of this is that Edward and EdWard will authenticate with different credentials&lt;/p&gt;

&lt;p&gt;I think this is a bug in the BUILTIN authentication scheme, not a design of the authentication system. The documentation for UserAuthenticator.authenticateUser kind of states this, but could be clearer. It applies case sensitivity to authorization identifiers when it really means user names.&lt;/p&gt;

&lt;p&gt;&amp;gt; Derby&apos;s solution to this problem is to tell the customer that they need to add two new users to their authentication system: &quot;Edward&quot; and &quot;EdWard&quot; so that Derby can disambiguate these users. This is frustrating to customers who want to integrate Derby applications into company-wide processes which rely on a single, organization-wide authentication scheme. &lt;/p&gt;

&lt;p&gt;I think that&apos;s one solution, but not the most optimal. The best solution would be to implement your own UserAuthenicator which translates from the user name format to the format expected by the company wide authentication scheme. Ideally Derby&apos;s LDAP authentication would have a builtin option (if not the default)  to do this, e.g. always authenticate against the LDAP server using the authorization identifier.&lt;/p&gt;

&lt;p&gt;&amp;gt; In this world, a DatabasePrincipal would correspond to a system-wide UserName.&lt;/p&gt;

&lt;p&gt;and then it would make sense to rename the class to be SystemPrincipal.&lt;/p&gt;
</comment>
                            <comment id="12560541" author="rhillegas" created="Fri, 18 Jan 2008 20:56:58 +0000"  >&lt;p&gt;The wildcarded Principal name is only needed for the case that we want to grant privileges to principals of the form *@databaseName (or PUBLIC@databaseName). If we agree that we aren&apos;t going to use the policy file to regulate privileges at the database level, then the existing policy file syntax will cover the remaining wildcard case (the system-wide wildcard) as John and Martin have pointed out:&lt;/p&gt;

&lt;p&gt;grant &lt;/p&gt;
{
  // grant any user to shutdown the engine
  permission org.apache.derby.security.SystemPermission &quot;shutdownEngine&quot;;

  // grant any user to create databases anywhere
  // (to succeed actual locations require additional file permission grants)
  permission org.apache.derby.security.DatabasePermission &quot;directory:&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;, &quot;create&quot;;
}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;By eliminating the two special characters, * and @, we eliminate most of the escaping cases. And we don&apos;t need to specify PUBLIC in the policy file. If SystemPrincipal represents a system-wide UserName, then I think we clear up a lot of the confusion.&lt;/p&gt;</comment>
                            <comment id="12561045" author="rhillegas" created="Mon, 21 Jan 2008 16:05:35 +0000"  >&lt;p&gt;Based on the recent discussions, I propose to change the functional spec as follows--unless there are strong objections:&lt;/p&gt;

&lt;p&gt;1) Change the &quot;shutdownEngine&quot; privilege to be just &quot;shutdown&quot;. This is a better match for the behavior of this privilege, which controls the ability to shutdown both the server and the engine. In the future, someone can add a shutdownEngine privilege with the behavior that shutdown =&amp;gt; shutdownEngine.&lt;/p&gt;

&lt;p&gt;2) Change the name of the Principal class from DatabasePrincipal to SystemPrincipal. This class will describe system-wide Principals. This eliminates the need for the special @ syntax. Wildcarding can be accomplished as John and Martin have described, so there is no need for the special * or PUBLIC syntax. In the future, we can introduce a DatabasePrincipal if use cases for this arise. We introduce no additional escaping cases on top of the escaping syntax defined for the policy file.&lt;/p&gt;

&lt;p&gt;3) Clarify that a SystemPrincipal represents a UserName. It is therefore case-sensitive.&lt;/p&gt;</comment>
                            <comment id="12561047" author="djd" created="Mon, 21 Jan 2008 16:18:19 +0000"  >&lt;p&gt;&amp;gt; 3) Clarify that a SystemPrincipal represents a UserName. It is therefore case-sensitive.&lt;/p&gt;

&lt;p&gt;Do you mean authorization identifier instead of UserName since it&apos;s authorization identifiers that are case sensitive?&lt;/p&gt;

&lt;p&gt;Or did you mean &quot;follows the rules for SQL identifiers&quot; instead of &quot;case-sensitive&quot;, since some user names are folded to upper case (and therefore appear case-insensitive) and some are stripped of their delimiting quotes (and hence appear case-sensitive). Ie. the rules are more compilcated than just case sensitivity.&lt;/p&gt;</comment>
                            <comment id="12561053" author="rhillegas" created="Mon, 21 Jan 2008 16:39:51 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; 3) Clarify that a SystemPrincipal represents a UserName. It is therefore case-sensitive.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;Do you mean authorization identifier instead of UserName since it&apos;s authorization identifiers that are case sensitive?&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;Or did you mean &quot;follows the rules for SQL identifiers&quot; instead of &quot;case-sensitive&quot;, since some user names are folded to upper case (and therefore appear case-insensitive) and some are stripped of their &amp;gt;delimiting quotes (and hence appear case-sensitive). Ie. the rules are more compilcated than just case sensitivity.&lt;/p&gt;

&lt;p&gt;Here I&apos;m following up on my musings about the three concepts of identity which I see in play here:&lt;/p&gt;

&lt;p&gt;1) UserName &amp;#8211; this is part of the credentials passed to the authentication service. This could be case-sensitive or case-insensitive depending on the rules of the authentication service.&lt;/p&gt;

&lt;p&gt;2) AuthorizationID &amp;#8211; this is the SQL concept of identity. This is case-insensitive unless double-quoted.&lt;/p&gt;

&lt;p&gt;3) SystemPrincipal &amp;#8211; I think that we would like to map this onto either (1) or (2). I think that (1) is a better fit than (2). At the system level there is no SQL context and the behavior/sobjects being controlled are not SQL behaviors/objects.&lt;/p&gt;</comment>
                            <comment id="12561074" author="rhillegas" created="Mon, 21 Jan 2008 17:22:59 +0000"  >&lt;p&gt;Just to clarify that username/password credentials are case-sensitive, I ran the following experiment: I created my own UserAuthenticator implementation, wired it into derby.properties, and then connected. The custom UserAuthenticator printed out the arguments which Derby passed to it. Those arguments are case sensitive, so it is up to the UserAuthenticator to determine the rules it wants to enforce.&lt;/p&gt;

&lt;p&gt;Here is my custom UserAuthenticator:&lt;/p&gt;

&lt;p&gt;import org.apache.derby.authentication.UserAuthenticator;&lt;/p&gt;

&lt;p&gt;import java.util.Properties;&lt;br/&gt;
import java.sql.SQLException;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Dummy authenticator. All users are legal&lt;br/&gt;
  *&lt;/li&gt;
	&lt;li&gt;@see org.apache.derby.authentication.UserAuthenticator&lt;br/&gt;
  */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;public class DummyAuthenticator implements UserAuthenticator&lt;br/&gt;
{&lt;br/&gt;
    public DummyAuthenticator() {}&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Authenticate the passed-in user&apos;s credentials.&lt;/li&gt;
	&lt;li&gt;A more complex class could make calls&lt;/li&gt;
	&lt;li&gt;to any external users directory.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param userName               The user&apos;s name&lt;/li&gt;
	&lt;li&gt;@param userPassword           The user&apos;s password&lt;/li&gt;
	&lt;li&gt;@param databaseName           The database&lt;/li&gt;
	&lt;li&gt;@param infoAdditional jdbc connection info.&lt;/li&gt;
	&lt;li&gt;@exception SQLException on failure&lt;br/&gt;
     */&lt;br/&gt;
    public boolean authenticateUser(String userName,&lt;br/&gt;
     String userPassword,&lt;br/&gt;
     String databaseName,&lt;br/&gt;
     Properties info)&lt;br/&gt;
       throws SQLException 
    {
        System.out.println( &quot;userName = &quot; + userName + &quot;\nuserPassword = &quot; + userPassword + &quot;\ndatabaseName = &quot; + databaseName );
        System.out.println( &quot;info = &quot; + info );

        return true;
    }
&lt;p&gt;}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here is my derby.properties:&lt;/p&gt;

&lt;p&gt;derby.connection.requireAuthentication=true&lt;br/&gt;
derby.authentication.provider=DummyAuthenticator&lt;/p&gt;

&lt;p&gt;And here is an ij script showing how this behaves at run-time:&lt;/p&gt;

&lt;p&gt;ij version 10.4&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:derby10.4;user=myHumbleSelf;password=myHumblePassword&apos;;&lt;br/&gt;
userName = myHumbleSelf&lt;br/&gt;
userPassword = myHumblePassword&lt;br/&gt;
databaseName = derby10.4&lt;br/&gt;
info = &lt;/p&gt;
{user=myHumbleSelf, password=myHumblePassword}
&lt;p&gt;ij&amp;gt; select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from sys.systables;&lt;br/&gt;
1          &lt;br/&gt;
-----------&lt;br/&gt;
24         &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; userName = null&lt;br/&gt;
userPassword = null&lt;br/&gt;
databaseName = null&lt;br/&gt;
info = &lt;/p&gt;
{shutdown=true}</comment>
                            <comment id="12561076" author="djd" created="Mon, 21 Jan 2008 17:34:21 +0000"  >&lt;p&gt;Rick wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) AuthorizationID &amp;#8211; this is the SQL concept of identity. This is case-insensitive unless double-quoted. &lt;/p&gt;

&lt;p&gt;We seem to be using the same terms for slightly different concepts.&lt;/p&gt;

&lt;p&gt;I believe I&apos;m using authorization identifier in the way that the SQL standard defines it. This would be a case-sensitive value that defines a unique identity in the sql system (database). Thus an authorization identifier is never double quoted, contradicting your statement 2).&lt;/p&gt;

&lt;p&gt;A UserName is a representation of an authorization identifier using the SQL rules for regular and delimited identifiers and thus has the case folding rules etc.&lt;/p&gt;

&lt;p&gt;In SQL this behaviour, mapping UserName to authorization identifier is defined by the standard.&lt;/p&gt;

&lt;p&gt;In Java code and Java property files Derby chose to use SQL identifier rules (ie. UserName) as the representation of an authorization identifier. Looking back this maybe was a poor choice, a direct representation of the authorization identifier might have been better, (ie. jdbc:derby:cs;user=fred and jdbc:derby:cs;user=FRED would connect as different authorization ids, today they map to the same authorization id). So if we want to be consistent with other Java uses, the policy file should probably use UserName, however using authorization identifier might be clearer.&lt;/p&gt;

&lt;p&gt;&amp;gt; 1) UserName &amp;#8211; this is part of the credentials passed to the authentication service. This could be case-sensitive or case-insensitive depending on the rules of the authentication service.&lt;/p&gt;

&lt;p&gt;I think the last sentence is incorrect. The rules of UserName are set by Derby, not an arbitrary implementation of the authentication service.&lt;br/&gt;
As above, the rules for how UserName map to a unique identity follows the rules of SQL identifiers, and thus UserNames of FRED and fred always map to the same unique identity FRED. However, I&apos;m not sure you agree with this, since you are promoting authorization identifier as a SQL only concept. That may be a valid approach, but I think you need to clearly state the rules for that, and then we can discuss if having two different models (one for database and one for system) adds any benefit or adds complication. The rules would need to state how UserName maps to a unique identity in a system context.&lt;/p&gt;


</comment>
                            <comment id="12561080" author="djd" created="Mon, 21 Jan 2008 17:47:28 +0000"  >&lt;p&gt;Rick Hillegas (JIRA) wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt; Those arguments are case sensitive, so it is up to the UserAuthenticator to determine the rules it wants to enforce.&lt;/p&gt;

&lt;p&gt;But is such a class honouring the UserAuthenticator api when it does that? The description for authenticateUser states that an unquoted user name is treated as a &quot;case-insensitive authorization identifier&quot; by Derby&apos;s authorization system. While this is technically incorrect, (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3334&quot; title=&quot;UserAuthenticator class needs to define its handling of user name more clearly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3334&quot;&gt;DERBY-3334&lt;/a&gt;), the intention behind the text is to follow SQL identifier rules for converting the parameter userName to a unique authorization identifier within Derby. This can be seen by the fact this mapping will be followed:&lt;/p&gt;

&lt;p&gt;   userName (in authenticateUser) &amp;#8211; VALUES CURRENT_USER&lt;/p&gt;

&lt;p&gt;   myHumbleSelf         &amp;#8211; MYHUMBLESELF&lt;br/&gt;
   MYHUMBLESELF    &amp;#8211; MYHUMBLESELF&lt;br/&gt;
   &quot;myHumbleSelf&quot;      &amp;#8211; myHumbleSelf&lt;/p&gt;</comment>
                            <comment id="12561086" author="rhillegas" created="Mon, 21 Jan 2008 18:21:35 +0000"  >&lt;p&gt;Thanks for the continued discussion, Dan. I agree that we seem to be talking past one another.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 2) AuthorizationID &amp;#8211; this is the SQL concept of identity. This is case-insensitive unless double-quoted.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;We seem to be using the same terms for slightly different concepts.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;I believe I&apos;m using authorization identifier in the way that the SQL standard defines it. This would be a case-sensitive value that defines a unique identity in the sql system (database). Thus an authorization identifier is never double &amp;gt;quoted, contradicting your statement 2).&lt;/p&gt;

&lt;p&gt;I think the relevant section of the SQL spec is part 2 section 5.4 (names and identifiers). In that section &amp;lt;authorization identifier&amp;gt; can resolve to be a &amp;lt;user identifier&amp;gt; which in turn can resolve to an &amp;lt;identifier&amp;gt; which in turn can resolve to a &amp;lt;regular identifier&amp;gt; or a &amp;lt;delimited identifier&amp;gt;. The &amp;lt;regular identifier&amp;gt; is uppercased to a normalized value regardless of its original casing and the &amp;lt;delimited identifer&amp;gt; is quoted and is not uppercased. This is what I mean by &quot;This is case-insensitive unless double-quoted&quot;.&lt;/p&gt;

&lt;p&gt;I think the disconnect here is that the authorization identifier can be referenced in two ways. When it is used in a SQL statement and resolves to a &amp;lt;regular identifier&amp;gt;, it is normalized to uppercase and so, as I would put it, it is case-insensitive. When it is referenced in the form stored in the system catalogs, it is case-sensitive.&lt;/p&gt;

&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt;A UserName is a representation of an authorization identifier using the SQL rules for regular and delimited identifiers and thus has the case folding rules etc.&lt;/p&gt;

&lt;p&gt;The term UserName is a word I invented for this discussion. But it pretty much corresponds to userName as used in the javadoc for UserAuthenticator.&lt;/p&gt;

&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt;In SQL this behaviour, mapping UserName to authorization identifier is defined by the standard.&lt;/p&gt;

&lt;p&gt;This is where I am not tracking you. The term UserName does not occur in the SQL standard as far as I know. It is a term which I thought I invented in order to bring some precision to this discussion. But I don&apos;t seem to have succeeded. Can you refer me to the section of the SQL standard which defines this term (or a related term)? That will help me propose some new language which we can agree on.&lt;/p&gt;

&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt;In Java code and Java property files Derby chose to use SQL identifier rules (ie. UserName) as the representation of an authorization identifier. Looking back this maybe was a poor choice, a direct representation of the authorization i&amp;gt;dentifier might have been better, (ie. jdbc:derby:cs;user=fred and jdbc:derby:cs;user=FRED would connect as different authorization ids, today they map to the same authorization id). So if we want to be consistent with other Java us&amp;gt;es, the policy file should probably use UserName, however using authorization identifier might be clearer.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; 1) UserName &amp;#8211; this is part of the credentials passed to the authentication service. This could be case-sensitive or case-insensitive depending on the rules of the authentication service.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;I think the last sentence is incorrect. The rules of UserName are set by Derby, not an arbitrary implementation of the authentication service.&lt;br/&gt;
&amp;gt;As above, the rules for how UserName map to a unique identity follows the rules of SQL identifiers, and thus UserNames of FRED and fred always map to the same unique identity FRED. However, I&apos;m not sure you agree with this, sinc&amp;gt;e you are promoting authorization identifier as a SQL only concept. That may be a valid approach, but I think you need to clearly state the rules for that, and then we can discuss if having two different models (one for database and o&amp;gt;ne for system) adds any benefit or adds complication. The rules would need to state how UserName maps to a unique identity in a system context. &lt;/p&gt;

&lt;p&gt;Ha! Once we can agree on some terms, I can take another crack at stating the rules.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12561087" author="djd" created="Mon, 21 Jan 2008 18:22:45 +0000"  >&lt;p&gt;On the current patch itself I have some questions:&lt;/p&gt;

&lt;p&gt;1) Since J2ME/CDC/Foundation does not support some of the security classes used, how is this being handled? Seems like it isn&apos;t at the moment. I think a new abstract method is needed in InternalDriver called shutdownCheck() is needed that would do nothing in J2ME but call the checks (through SecurityUtil in J2SE.&lt;/p&gt;

&lt;p&gt;2) Any thought on backwards compatibility for the network shutdown command in terms of the DRDA protocol? Seems like the on-wire format for the shutdown command has changed by adding in the user and password fields. What happens if an old version of Derby tries to shutdown a 10.4 server?&lt;/p&gt;

&lt;p&gt;3) I&apos;d like to see more comments around the use of doAsPrivileged (e.g. why is this needed rather than doAs, why pass in a null ACC&lt;br/&gt;
and the nesting of doAsPrivileged in a doPrivileged call (why is this needed). I&apos;m not sure that the code is using these correctly and given this is security code we need to understand why one is used instead of the other, rather than a comment like &quot;doAs is not strong enough&quot; (in the test).&lt;br/&gt;
My gut feeling is that doAsPrivileged is correct for the network server shutdown only, seems like doAs is needed in the embedded calls if this piece of the functional spec is to be true:&lt;br/&gt;
  Because we use Java Security to model system privileges, the shutdownEngine and create privileges can be granted to code as well as to users.&lt;/p&gt;</comment>
                            <comment id="12561090" author="rhillegas" created="Mon, 21 Jan 2008 18:42:43 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; Those arguments are case sensitive, so it is up to the UserAuthenticator to determine the rules it wants to enforce.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;But is such a class honouring the UserAuthenticator api when it does that? The description for authenticateUser states that an unquoted user name is treated as a &quot;case-insensitive authorization i&amp;gt;dentifier&quot; by Derby&apos;s authorization system. While this is technically incorrect, (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3334&quot; title=&quot;UserAuthenticator class needs to define its handling of user name more clearly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3334&quot;&gt;DERBY-3334&lt;/a&gt;), the intention behind the text is to follow SQL identifier rules for converting the parameter userName to a &amp;gt;unique authorization identifier within Derby. This can be seen by the fact this mapping will be followed:&lt;/p&gt;

&lt;p&gt;The javadoc for UserAuthenticator states the rules for mapping the userName onto the value of SYSSCHEMAS.AUTHORIZATIONID. Indirectly, it warns the customer that Edward and EdWard will be thrown into the same schema even though the company-wide authentication service recognizes these two names as different individuals with different credentials. However, the javadoc should probably punch up the significance of this behavior.&lt;/p&gt;

&lt;p&gt;In the Developer&apos;s Guide section titled &quot;Example of setting a user-defined class&quot;, the sampe code shows a user-supplied authenticator which treats userName as a case-sensitive string. In that example, Edward and EdWard have separate credentials.&lt;/p&gt;

&lt;p&gt;At least as far as I can see, the surrounding sections of the Developer&apos;s Guide do not explain that Edward and EdWard will be thrown into the same schema. Probably, we should state this explicitly.&lt;/p&gt;</comment>
                            <comment id="12561092" author="djd" created="Mon, 21 Jan 2008 18:52:44 +0000"  >&lt;p&gt;Right I was seeing authorization identifier as a value that resulted from applying the rules of section 5.2/5.4 to the identifiers, but strictly speaking that&apos;s not true. Then as Dag points out we are really talking about user identifier for authentication, though possibly authorization identifier for authorization.&lt;/p&gt;

&lt;p&gt;So I think we can agree that a user has a unique identity, can we call this UID? This corresponds to what is stored in the system tables.&lt;/p&gt;

&lt;p&gt;So a user identifier is a mechanism of representing a UID in a SQL statement using SQL regular or delimited identifiers. Section 5.2/5.4 provides the rules for this mapping.&lt;/p&gt;

&lt;p&gt;Derby&apos;s Java code and property files use the same syntax rules as SQL&apos;s user identifier to represent a UID.&lt;/p&gt;

&lt;p&gt;So the concept of UserName and user identifier are actually the same, so we should drop UserName and use user identifier.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;so that&amp;#39;s what I meant by the SQL standard defined the rules from user name to authorization identifier - which is really user identifier to UID&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;authorization identifier is defined by the SQL spec and can represent a user identifier or a role name.&lt;/p&gt;

&lt;p&gt;So if SystemPrincipal represents a user then its input format should be that of a user identifier. I think if we ever wanted to add role support to the policy file then a RolePrincipal would be clearer than having roles and users mixed in the same Principal class.&lt;/p&gt;


&lt;p&gt;Rick I think you seem to be saying that a system authentication implementation could treat regular user identifiers of fred and FRED as different. This then contradicts the very definition of user identifier, so it would need a new set of terms to describe this. This seems to go against the existing definitions.&lt;/p&gt;</comment>
                            <comment id="12561099" author="djd" created="Mon, 21 Jan 2008 19:15:58 +0000"  >&lt;p&gt;&amp;gt; The javadoc for UserAuthenticator states the rules for mapping the userName onto the value of SYSSCHEMAS.AUTHORIZATIONID.&lt;/p&gt;

&lt;p&gt;Which version (svn revision) are you looking at? I don&apos;t see the words  SYSSCHEMAS or AUTHORIZATIONID in the javadoc at all.&lt;/p&gt;

&lt;p&gt;I do see this text in the section on stating how the userName is handled&lt;/p&gt;

&lt;p&gt;  &quot;... within the Derby user authorization system&quot;&lt;/p&gt;

&lt;p&gt;revision 613345&lt;/p&gt;

&lt;p&gt;That&apos;s doesn&apos;t state it&apos;s only for database authorization.&lt;/p&gt;

&lt;p&gt;&amp;gt; However, the javadoc should probably punch up the significance of this behavior. &lt;br/&gt;
I entered &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3334&quot; title=&quot;UserAuthenticator class needs to define its handling of user name more clearly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3334&quot;&gt;DERBY-3334&lt;/a&gt; to make this clearer.&lt;/p&gt;

&lt;p&gt;Note the introduction to MyAuthenticationSchemeImpl says &quot;very simple example&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
It agrees with the discussion a few pages later&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/docs/dev/devguide/cdevcsecure24458.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/dev/devguide/cdevcsecure24458.html&lt;/a&gt;&lt;br/&gt;
that says if the external scheme is case-sensitive (as in MyAuthenticationSchemeImpl) then you must always log in with a user name that maps to the value defined in the external scheme.&lt;br/&gt;
It remains silent on what to do if the external schema has different identities that map to the same SQL identity, as you say that could be improved.&lt;/p&gt;

&lt;p&gt;Later on in that page it says when talking about delimited identifiers:&lt;br/&gt;
  &quot;(Derby knows to remove the double quotes when passing the name to the external authentication system.)&quot;&lt;br/&gt;
I don&apos;t believe that&apos;s true, at least it contradicts UserAuthenticator&apos;s documentation.&lt;/p&gt;</comment>
                            <comment id="12561104" author="djd" created="Mon, 21 Jan 2008 19:26:45 +0000"  >&lt;p&gt;Just to add to the confusion, the derby documentation uses authorization identifier in most cases to mean UID. I think that is what was driving my line of thinking to use authorization identifier when I really meant the UID.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://db.apache.org/derby/docs/dev/devguide/cdevcsecure37241.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/dev/devguide/cdevcsecure37241.html&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12561118" author="rhillegas" created="Mon, 21 Jan 2008 20:31:26 +0000"  >&lt;p&gt;&amp;gt;So I think we can agree that a user has a unique identity, can we call this UID? This corresponds to what is stored in the system tables. &lt;/p&gt;

&lt;p&gt;I&apos;m afraid that when I read these words, they sound like this to me: &quot;A person has a unigue identity, a UID, which is stored in the system tables.&quot; I don&apos;t agree with this. Two persons (Edward and EdWard in my example) end up with the same identity. The identity is not unique. That&apos;s a problem.&lt;/p&gt;

&lt;p&gt;As a practical matter, I don&apos;t think that we can please everyone:&lt;/p&gt;

&lt;p&gt;1) A customer whose authentication service enforces the case sensitivity of usernames is probably going to want to grant privileges to case-sensitive names. This customer is not going to be happy if the payroll clerk EdWard gets the shutdown privilege intended for the system administrator Edward.&lt;/p&gt;

&lt;p&gt;2) On the other hand, a customer whose authentication service treats Edward and EdWard as the same username is not going to want to have to grant shutdown privilege to every casing combination.&lt;/p&gt;

&lt;p&gt;Maybe we could add a userNamesAreCaseSensitive() method to UserAuthenticator or create a CaseSensitiveUserAuthenticator interface to extend UserAuthenticator? Given a case-sensitive UserAuthenticator, we would not have to throw Edward and EdWard into the same schema. The default behavior would be the current behavior. And the default behavior for SystemPrincipal would be, as Dan suggests, that usernames are case-insensitive.&lt;/p&gt;

&lt;p&gt;This distinction could be added later on. I don&apos;t see that we have to support case-sensitive usernames in 10.4.&lt;/p&gt;</comment>
                            <comment id="12561380" author="djd" created="Tue, 22 Jan 2008 17:09:19 +0000"  >&lt;p&gt;&amp;gt; So I think we can agree that a user has a unique identity, can we call this UID? This corresponds to what is stored in the system tables.&lt;/p&gt;

&lt;p&gt;An alternate way of stating this is:&lt;br/&gt;
    an user identifier has a canonical representation which defines uniqueness within Derby&apos;s authorization schemes. When storing the user identifier for a user Derby uses the canonical representation.&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;the canonical representation seems to be also called the common normal form or CNF in the SQL standard&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="12561409" author="djd" created="Tue, 22 Jan 2008 18:44:45 +0000"  >&lt;p&gt;&amp;gt; Maybe we could add a userNamesAreCaseSensitive() method to UserAuthenticator or create a CaseSensitiveUserAuthenticator interface to extend UserAuthenticator? Given a case-sensitive UserAuthenticator, we would not have to throw Edward and EdWard into the same schema. The default behavior would be the current behavior. And the default behavior for SystemPrincipal would be, as Dan suggests, that usernames are case-insensitive. &lt;br/&gt;
----------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3335&quot; title=&quot;Allow UserAuthenticator.authenticateUser to work with authorization identifiers and not user name.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3335&quot;&gt;DERBY-3335&lt;/a&gt; proposes a mechanism for an authentication implementation to get the canonical user identifier of the provided user name without changing any api. That&apos;s not exactly what you are proposing, I think you are proposing a new way of providing a user name to Derby in Java/JDBC where the user name provided has to match the canonical representation of a user identifier. Obviously in SQL (e.g. GRANT) such user names would have to be delimited.&lt;br/&gt;
Obviously such a change applies to more than authentication, connection level authorization would need to follow the same scheme, the mapping of the provided user name to the SQL user identifier etc.&lt;/p&gt;

&lt;p&gt;I have the feeling that this might confuse the user name situation more that simplify it. Now a client application needs to know how a specific database is treating user names before it can format a connection request. Currently there is a single rule of how user names in Java map to SQL user identifiers.&lt;/p&gt;

&lt;p&gt;If such a feature can be delayed until there is some actual need for it, then I think it just resolves to a simple choice:&lt;br/&gt;
  A) name for SystemPrincipal is a user identifier (supports regular and delimited identifiers) and thus matches all other places where a user name is specified in a Java/JDBC context.&lt;/p&gt;

&lt;p&gt;  B) name  for SystemPrincipal is the canonical representation of an user identifier, which leads to easier to read policy files but does not match existing Java/JDBC practice.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;edit: be consistent with user identifier&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="12561537" author="rhillegas" created="Wed, 23 Jan 2008 00:48:53 +0000"  >&lt;p&gt;&amp;gt;If such a feature can be delayed until there is some actual need for it, then I think it just resolves to a simple choice:&lt;br/&gt;
&amp;gt;  A) name for SystemPrincipal is a user identifier (supports regular and delimited identifiers) and thus matches all other places where a user name is specified in a Java/JDBC context.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; B) name for SystemPrincipal is the canonical representation of an user identifier, which leads to easier to read policy files but does not match existing Java/JDBC practice. &lt;/p&gt;

&lt;p&gt;I&apos;m afraid I don&apos;t understand what you are saying here. I am suggesting the following. The following policy file declarations result in the same SystemPrincipal:&lt;/p&gt;

&lt;p&gt;SystemPrincipal &quot;Edward&quot;&lt;/p&gt;

&lt;p&gt;SystemPrincipal &quot;EdWard&quot;&lt;/p&gt;

&lt;p&gt;SystemPrincipal &quot;\&quot;EDWARD\&quot;&quot;&lt;/p&gt;

&lt;p&gt;All of the following SystemPrincipals are different:&lt;/p&gt;

&lt;p&gt;SystemPrincipal &quot;Edward&quot;&lt;/p&gt;

&lt;p&gt;SystemPrincipal &quot;\&quot;Edward\&quot;&quot;&lt;/p&gt;

&lt;p&gt;SystemPrincipal &quot;\&quot;EdWard\&quot;&quot;&lt;/p&gt;</comment>
                            <comment id="12561538" author="djd" created="Wed, 23 Jan 2008 00:55:47 +0000"  >&lt;p&gt;That&apos;s the same as A.&lt;/p&gt;

&lt;p&gt;A) name for SystemPrincipal is a user identifier (supports regular and delimited identifiers) and thus matches all other places where a user name is specified in a Java/JDBC context. &lt;/p&gt;</comment>
                            <comment id="12566583" author="mzaun" created="Thu, 7 Feb 2008 13:17:03 +0000"  >
&lt;p&gt;Please, find attached the updated patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-09, which reflects most changes and comments made since the previous version (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-08):&lt;/p&gt;

&lt;p&gt;1) Renamed class DatabasePrincipal to SystemPrincipal and permission &quot;shutdownEngine&quot; to &quot;shutdown&quot;.&lt;/p&gt;

&lt;p&gt;2) Changed SystemPrincipal for the handling of user names:&lt;/p&gt;

&lt;p&gt;    2.1) I verified with both Sun&apos;s and IBM&apos;s JDK (1.5) that the wildcard syntax for policy files, which isn&apos;t that well described in the official Java documentation, is supported:&lt;br/&gt;
        a) grant principal * * &lt;/p&gt;
{ ... }&lt;br/&gt;
          which is the same as:&lt;br/&gt;
&lt;br/&gt;
        b) grant { ... }
&lt;p&gt;          which grants permissions to any user represented by any principal class&lt;/p&gt;

&lt;p&gt;        c) grant principal org.apache.derby.authentication.SystemPrincipal * &lt;/p&gt;
{ ... }&lt;br/&gt;
          which is with both JDKs the same as:&lt;br/&gt;
&lt;br/&gt;
        d) grant principal org.apache.derby.authentication.SystemPrincipal &quot;WILDCARD_PRINCIPAL_NAME&quot; { ... }
&lt;p&gt;          which grants permissions to any declared SystemPrincipal user&lt;/p&gt;

&lt;p&gt;    2.2) removed support for our special characters *, @, and \, as was suggested.&lt;/p&gt;

&lt;p&gt;    2.3) changed the server.policy, template.policy etc. for the new wildcard syntax SystemPrincipal * &lt;/p&gt;
{ ... }&lt;br/&gt;
&lt;br/&gt;
    2.4) changed code and javadoc to reflect that the rules for Authorization Ids, as described in the UserIdentifiers document, apply to SystemPrincipal names.&lt;br/&gt;
&lt;br/&gt;
          I think this feature is only partially complete:&lt;br/&gt;
&lt;br/&gt;
          a) the policy&lt;br/&gt;
                 grant SystemPrincipal &quot;EVE&quot; { ... }
&lt;p&gt;              now matches user names EVE, eVe, or eve &amp;#8211; as it should.&lt;/p&gt;

&lt;p&gt;          b) as of now, the policy&lt;br/&gt;
                 grant SystemPrincipal &quot;eve&quot; &lt;/p&gt;
{ ... }&lt;br/&gt;
              only matches user name eve, not EVE or eVe, so, admins have to declare the policy grants using NORMALIZED names if they want case-insensitive matching of names &amp;#8211; I understand we don&apos;t want this restriction.  This issue requires somewhat more investigation, the Java Security Runtime seems to be doing unexpected things.&lt;br/&gt;
&lt;br/&gt;
          c) the policy &lt;br/&gt;
                 grant SystemPrincipal &quot;\&quot;eve\&quot;&quot; { ... }
&lt;p&gt;              only matches user name eve, not EVE or eVe &amp;#8211; as it should.&lt;/p&gt;

&lt;p&gt;3) removed misleading comments in SystemPrincipal, SystemPermission, and DatabasePermission about the non-localization of RuntimeException messages.&lt;/p&gt;

&lt;p&gt;4) removed a backward compatibility issue when running with Java Security but without Authentication.  Under this configuration, users now don&apos;t have to change their customized policy files, as it was intended from the beginning.&lt;/p&gt;

&lt;p&gt;    There is an implementation question, though: how to find out that we&apos;re running effectively without Authentication?  &lt;/p&gt;

&lt;p&gt;    Some code in EmbedConnection tests for instanceof NoneAuthenticationServiceImpl:&lt;br/&gt;
		// If authentication is not on, we have to raise a warning if sqlAuthorization is ON&lt;br/&gt;
		// Since NoneAuthenticationService is the default for Derby, it should be ok to refer&lt;br/&gt;
		// to its implementation here, since it will always be present.&lt;br/&gt;
		if (authenticationService instanceof NoneAuthenticationServiceImpl)&lt;br/&gt;
			usingNoneAuth = true;&lt;/p&gt;

&lt;p&gt;    However, I thought this somewhat fragile and decided to test in SecurityUtil for the property &quot;derby.connection.requireAuthentication&quot;, which I found to be a neccessary condition:&lt;br/&gt;
        // for backward compatibility skip check for create-db authorization&lt;br/&gt;
        // if we run without Authentication but with a SecurityManager;&lt;br/&gt;
        // otherwise, users would have to extend any customized policies&lt;br/&gt;
        final String reqAuthKey = Property.REQUIRE_AUTHENTICATION_PARAMETER;&lt;br/&gt;
        final String reqAuthValue = PropertyUtil.getSystemProperty(reqAuthKey);&lt;br/&gt;
        if (!Boolean.valueOf(reqAuthValue).booleanValue()) &lt;/p&gt;
{
            return;
        }

&lt;p&gt;    Please, let me know your thoughts.&lt;/p&gt;

&lt;p&gt;5) addressed a backward compatibility issue with the NetworkServerControl protocol where the shutdown command had been changed to transmit the user credentials.  As Dan had pointed out, older NSC clients would raise exceptions when trying to shut down a newer server.  I&apos;ve incremented the protocol&apos;s version number for a clean, early failure with an indicative error message.&lt;/p&gt;

&lt;p&gt;    I don&apos;t think requiring current NSC clients for a new server is a major restriction since the socket connections are local to the machine anyway.&lt;/p&gt;

&lt;p&gt;6) I&apos;m still looking into another comment by Dan on the Authorization checks in SecurityUtil, which employ a fresh (=null) AccessControlContext with Subject.doAsPrivileged() instead of storing/maintaining a ACC or using the current thread&apos;s AccessControlContext (as with Subject.doAs()).&lt;/p&gt;

&lt;p&gt;Thanks, Martin&lt;/p&gt;</comment>
                            <comment id="12566594" author="mzaun" created="Thu, 7 Feb 2008 13:48:31 +0000"  >
&lt;p&gt;Rick, Dan,&lt;/p&gt;

&lt;p&gt;for the latest patch, I wanted toupdate and recap the backward compatibility issues we&apos;d discussed earlier on derby-dev:&lt;/p&gt;

&lt;p&gt;1) Customers running no Authentication and no Java Security: No compatibility issues.&lt;/p&gt;

&lt;p&gt;2) Customers running just with Java Security but no Authentication:  No compatibility issues.&lt;br/&gt;
    The issue Dan pointed out should have been addressed by the latest patch.&lt;/p&gt;

&lt;p&gt;3) Customers running just with Authentication but no Java Security:&lt;br/&gt;
    a) Must provide valid credentials when using NetworkServerControl to shutdown the server.&lt;/p&gt;

&lt;p&gt;4) Customers running with BOTH Authentication and Java Security:&lt;br/&gt;
    a) Must provide valid credentials when using NetworkServerControl to shutdown the server.&lt;br/&gt;
    b) Must add additional privileges to the Java Security policy file  unless the default policy file is used.&lt;/p&gt;

&lt;p&gt;    4.1) Customers with BOTH Authentication and Java Security AND a user by the name &quot;WILDCARD_PRINCIPAL_NAME&quot; cannot grant System Privileges specific to this user!&lt;br/&gt;
            (since this is the reserved wildcard name used by the Java Security Runtime)&lt;/p&gt;

&lt;p&gt;5) Customers with &amp;lt;10.4 NetworkServerControl clients cannot shutdown a 10.4 server (due to a protocol change).&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Martin&lt;/p&gt;</comment>
                            <comment id="12566663" author="djd" created="Thu, 7 Feb 2008 16:12:51 +0000"  >&lt;p&gt;&amp;gt; I understand we don&apos;t want this restriction. This issue requires somewhat more investigation, the Java Security Runtime seems to be doing unexpected things. &lt;/p&gt;

&lt;p&gt;I wonder if this is due to SystemPrincipal.getName() not returning the defined string format of SystemPrincipal?&lt;/p&gt;</comment>
                            <comment id="12566683" author="djd" created="Thu, 7 Feb 2008 16:47:59 +0000"  >&lt;p&gt;Some comments on the patch, thanks for working on it and addressing the issues:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SecurityUtil should be moved out of the o.a.d.security package since it is not part of the external api, how about o.a.d.iapi.security?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Since the format of the directory path in the create database permission matches FilePermission&apos;s format, why not use FilePermission to evaluate it rather than repeating the logic?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;gt;2) Customers running just with Java Security but no Authentication: No compatibility issues.&lt;br/&gt;
&amp;gt; The issue Dan pointed out should have been addressed by the latest patch. &lt;/p&gt;

&lt;p&gt;I pointed out that it didn&apos;t match the spec, but I believe that the previous behaviour was correct. I don&apos;t think any other java security check is not enforced if there is a security manager, and I think it&apos;s required in order to support being able to grant the shutdown permission to code and Principals that are not SystemPrinicpals as described in the spec.&lt;/p&gt;</comment>
                            <comment id="12567109" author="rhillegas" created="Fri, 8 Feb 2008 17:18:21 +0000"  >&lt;p&gt;Hi Martin,&lt;/p&gt;

&lt;p&gt;I have applied the 09 patch and run the regression tests. I am seeing 7 instances of the following error:&lt;/p&gt;

&lt;p&gt;1) testSystemShutdown(org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;XJ015&amp;#93;&lt;/span&gt;&amp;gt; but was:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;08004&amp;#93;&lt;/span&gt;&amp;gt;&lt;/p&gt;
</comment>
                            <comment id="12568655" author="mzaun" created="Wed, 13 Feb 2008 18:22:53 +0000"  >
&lt;p&gt;Just a quick update:&lt;br/&gt;
a) I&apos;m able to reproduce the AuthenticationTest failures and are working on it.&lt;br/&gt;
b) Per derby-dev discussion &quot;JMX meeting system authorization (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt; &amp;amp; 1387)&quot;, I&apos;ve made the System Privileges checks only dependent upon the presence of a SecurityManager, not upon Authentication.&lt;br/&gt;
c) I&apos;m debugging a described issue with the normalization of names (non-normalized names in policy files not properly matched by authorization checks).&lt;br/&gt;
Hope to have these issues resolved soon and will propose another patch update then.&lt;br/&gt;
Martin&lt;/p&gt;</comment>
                            <comment id="12572199" author="djd" created="Mon, 25 Feb 2008 19:59:54 +0000"  >&lt;p&gt;Is a new version of the patch likely soon? Some of the SecuirtyUtil code is useful for JMX. If not, I&apos;ll extract the useful code and create SecurityUtil in o.a.d.iapi.security.&lt;/p&gt;</comment>
                            <comment id="12572278" author="djd" created="Mon, 25 Feb 2008 22:29:54 +0000"  >&lt;p&gt;With the additional system permissions proposed in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3462&quot; title=&quot;Require new permissions in o.a.d.security.SystemPermission to allow control to Derby&amp;#39;s JMX management and to ensure information is not leaked through JMX&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3462&quot;&gt;&lt;del&gt;DERBY-3462&lt;/del&gt;&lt;/a&gt; I wonder if it makes sense to change the style of names &amp;amp; actions in SystemPermission.&lt;/p&gt;

&lt;p&gt;Today a &quot;shutdown&quot; name is proposed and potential for future &quot;shutdownEngine&quot; and &quot;shutdownServer&quot; with no actions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3462&quot; title=&quot;Require new permissions in o.a.d.security.SystemPermission to allow control to Derby&amp;#39;s JMX management and to ensure information is not leaked through JMX&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3462&quot;&gt;&lt;del&gt;DERBY-3462&lt;/del&gt;&lt;/a&gt; is proposing names of jmxControl, serverControl, engineControl etc also with no actions.&lt;/p&gt;

&lt;p&gt;Looking at the standard Permission class it seems the name is meant to represent an object that the permission applies to and action represent actions on that object.&lt;br/&gt;
Thus it would seem to make more sense and be consistent with other Permissions to have:&lt;/p&gt;

&lt;p&gt; name=server   action=control | monitor | shutdown&lt;br/&gt;
 name=engine  action=control | monitor | shutdown&lt;br/&gt;
 name=jmx        action=control&lt;/p&gt;

&lt;p&gt;Not sure what the current &quot;shutdown&quot; would map to (note it is an action, but defined as a name), it could be:&lt;/p&gt;

&lt;p&gt; name=&quot;system&quot;  action=&quot;shutdown&quot;  =&amp;gt; implies engine,shutdown &amp;amp; server,shutdown&lt;/p&gt;

&lt;p&gt;This could be changed after any updated patch is applied, but would need to be done before any release.&lt;/p&gt;</comment>
                            <comment id="12572978" author="mzaun" created="Wed, 27 Feb 2008 17:04:06 +0000"  >&lt;p&gt;Please find attached patch update &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-10 (replacing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-09):&lt;/p&gt;

&lt;p&gt;a) Fixed AuthenticationTest (and other) failures; junit-all and derbyall run fine with the patch on my machine.&lt;/p&gt;

&lt;p&gt;b) Made the System Privileges checks only dependent upon the presence of a SecurityManager, not upon Authentication, per derby-dev discussion &quot;JMX meeting system authorization (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt; &amp;amp; 1387)&quot;.&lt;/p&gt;

&lt;p&gt;c) Moved class SecurityUtil from o.a.d.security to o.a.d.iapi.security, per suggestion by Dan.&lt;/p&gt;

&lt;p&gt;d) Investigated an issue with non-normalized names in policy files where a grant to user edWard would not give permissions to the authenticated users edward or EDWARD but edWard only.&lt;/p&gt;

&lt;p&gt;Bottomline: When evaluating permissions, the (Sun) Java Security Runtime uses the principal names as found literally in the policy file and not as returned by SystemPrincipal.getName() (where we could return normalized names).&lt;/p&gt;

&lt;p&gt;As a workaround, our class SystemPrincipal could implement the non-standard interface com.sun.security.auth.PrincipalComparator, which declares a method implies(Subject) that allows for Principals to match Subjects based on normalized Authorization Identifiers, e.g., a policy grant  to edWard would give permissions to all users edWard, edward, and EDWARD.  But then we&apos;d be relying upon a non-standard Security Runtime class and behaviour.  (Yet another approach would be to construct the Subject with a Principal list having all lower/upper case combinations of an identifier, but that&apos;s clearly not feasible.)&lt;/p&gt;

&lt;p&gt;I changed classes SecurityUtil and SystemPrincipal and added javadoc comments reflecting that&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SystemPrincipal names are not Authorization Identifiers (i.e., non-delimited identifiers handled case-insensitively by magic of SystemPrincipal);&lt;/li&gt;
	&lt;li&gt;SecurityUtil constructs a Subject with two SystemPrincipals: one with the literal user name and another with the normalized name.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For users who want to put specific principal grants into customized policy files this means:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a grant to a principal named EDWARD gives permissions to all users edward, edWard, and EDWARD (and all other lower/upper case spellings);&lt;/li&gt;
	&lt;li&gt;a grant to principal edWard only gives permissions to the user edWard.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In my view that&apos;s still an acceptable and documentable behaviour; but as said, I haven&apos;t found any other feasible workaround lifting the Java Security Runtime&apos;s literal handling of principal names.&lt;/p&gt;

&lt;p&gt;e) Added comments to SystemPrivilegesPermissionTest.java on the use of Subject.doAsPrivileged() versus doAs() after further experiments with the Java Security Runtime.  Bottomline: doAsPrivileged() is the only implementation option for our purposes.&lt;/p&gt;

&lt;p&gt;f) The patch does not reflect the latest suggestions by Dan for the shutdown permission following a new naming scheme (wanted to get this patch out and tested first).  But will look into it and comment.&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12572991" author="djd" created="Wed, 27 Feb 2008 17:24:50 +0000"  >&lt;p&gt;&amp;gt; Bottomline: When evaluating permissions, the (Sun) Java Security Runtime uses the principal names as found literally in the policy file and not as returned by SystemPrincipal.getName() (where we could return normalized names). &lt;/p&gt;

&lt;p&gt;It&apos;s hard to see how that is the case, since the policy file is read in and converted to a Policy object containing permissions and for Derby&apos;s SystemPermission the class must be o.a.d.security.SystemPermission.&lt;/p&gt;

&lt;p&gt;Could you confirm the format for names in the policy file in the patch? Does it match the description here:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109?focusedCommentId=12561537#action_12561537&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-2109?focusedCommentId=12561537#action_12561537&lt;/a&gt;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;does it support delimited identifiers of the form &quot;\&quot;fred@acme.com\&quot;&quot;?&lt;/li&gt;
	&lt;li&gt;is the only issue that non-delimited identifiers &quot;fred&quot; do not resolve correctly?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12573003" author="djd" created="Wed, 27 Feb 2008 17:49:11 +0000"  >&lt;p&gt;I&apos;m prepared to commit this patch but I think there are a number of follow changes that would need to be done before a 10.4 release is made. I guess if it&apos;s committed to trunk then it can always be backed out from the branch if it doesn&apos;t seem ready for release.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;figuring out the principal names in the policy files - I&apos;d be interested to see the implementation of SystemPrincipal you used to try and implement the required functionality&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;related to the previous one is having more time to understand this:&lt;br/&gt;
+            // An alternative approach of normalizing all names within&lt;br/&gt;
+            // SystemPrincipal has issues; see comments there.&lt;br/&gt;
+            principals.add(new SystemPrincipal(user));&lt;br/&gt;
+            principals.add(new SystemPrincipal(getAuthorizationId(user)));&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;From a security point of view does this have the potential to allow one user to piggy back on the permissions of another user?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ensuring the new security objects that are serializable have serialization ids to ensure compatibility across releases&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;making the  new security objects final&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks for working on the functionality through many patches!&lt;/p&gt;</comment>
                            <comment id="12573057" author="djd" created="Wed, 27 Feb 2008 20:24:50 +0000"  >&lt;p&gt;Not sure the patch can be committed. The code uses javax.security classes which are not available on J2ME/CDC/Foundation.&lt;/p&gt;

&lt;p&gt;I raised this earlier:&lt;/p&gt;

&lt;p&gt;1) Since J2ME/CDC/Foundation does not support some of the security classes used, how is this being handled? Seems like it isn&apos;t at the moment. I think a new abstract method is needed in InternalDriver called shutdownCheck() is needed that would do nothing in J2ME but call the checks (through SecurityUtil in J2SE. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109?focusedCommentId=12561087#action_12561087&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-2109?focusedCommentId=12561087#action_12561087&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Does the patch work currently on J2ME, I don&apos;t have any environment to check it out at the moment. If someone has a J2ME environment and try the patch and see if shutting down Derby works that would be a help.&lt;/p&gt;</comment>
                            <comment id="12573059" author="mzaun" created="Wed, 27 Feb 2008 20:40:57 +0000"  >
&lt;p&gt;I&apos;m sorry to say that I overlooked one line of debug code in SecurityUtil that made it into &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-10. (I&apos;d forgotten tagged that line as usual.)  Unfortunately, the line is significant since the published code checks for a &quot;dummy&quot; permission I&apos;d put in there for doAs() v. doAsPrivileged() debugging purposes:&lt;br/&gt;
+                        //AccessController.checkPermission(perm);&lt;br/&gt;
+                        AccessController.checkPermission(new java.util.PropertyPermission(&quot;user.dir&quot;, &quot;read&quot;));&lt;/p&gt;

&lt;p&gt;I&apos;m right now running junit-all (1 error) and will publish another patch update right after.&lt;/p&gt;

&lt;p&gt;&amp;gt; Daniel John Debrunner wrote:&lt;br/&gt;
&amp;gt; &amp;gt; Bottomline: When evaluating permissions, the (Sun) Java Security Runtime uses the principal names as found literally in the policy file and not as returned by SystemPrincipal.getName() (where we could return normalized names).&lt;br/&gt;
&amp;gt; It&apos;s hard to see how that is the case, since the policy file is read in and converted to a Policy object containing permissions and for Derby&apos;s SystemPermission the class must be o.a.d.security.SystemPermission.&lt;/p&gt;

&lt;p&gt;It&apos;s correct that we&apos;re using our SystemPermission classes only &amp;#8211; but the issue is in the realm of Subject/Principal checking by the Java Security Runtime when matching the Subject instantiated by our code against the Principal declaration in the policy file. This check is not entirely carried out by means of getName()/equals()/hashCode()  on our SystemPrincipal class, in which case we could have had the name comparisons always done on the normalized names.  Instead, the Java Security Runtime uses the literal Principal name as declared in the policy file and denies permission when it can&apos;t find an exact match in our Subject&apos;s SystemPrincipal list.&lt;/p&gt;

&lt;p&gt;&amp;gt; - figuring out the principal names in the policy files - I&apos;d be interested to see the implementation of SystemPrincipal you used to try and implement the required functionality &lt;/p&gt;

&lt;p&gt;The SystemPrincipal class in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-09 attempted to encapsulate Authorization Identifiers and &quot;normalized&quot; the principal name right within the constructor, so that getName()/equals()/hashCode()  would operate on (normalized) auth ids. &lt;/p&gt;

&lt;p&gt;As commented I also looked into SystemPrincipal implementing com.sun.security.auth.PrincipalComparator by adding an implies(Subject) method returning true when a the Subject&apos;s principal list contains a normalized name matching this principal&apos;s normalized name.  With a few more tricks I got it working &amp;#8211; but that was just for insight, since PrincipalComparator is a non-standard interface.&lt;/p&gt;

&lt;p&gt;&amp;gt;  - related to the previous one is having more time to understand this:&lt;br/&gt;
&amp;gt; + // An alternative approach of normalizing all names within&lt;br/&gt;
&amp;gt; + // SystemPrincipal has issues; see comments there.&lt;br/&gt;
&amp;gt; + principals.add(new SystemPrincipal(user));&lt;br/&gt;
&amp;gt; + principals.add(new SystemPrincipal(getAuthorizationId(user))); &lt;/p&gt;

&lt;p&gt;Adding the normalized identifier ensures that a non-delimited principal &quot;FRED&quot; matches users &quot;fred&quot;, &quot;Fred&quot;, &quot;FRED&quot; ...&lt;/p&gt;

&lt;p&gt;Let me know if you think the code needs more comments.&lt;/p&gt;

&lt;p&gt;&amp;gt; Could you confirm the format for names in the policy file in the patch? Does it match the description here:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109?focusedCommentId=12561537#action_12561537&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-2109?focusedCommentId=12561537#action_12561537&lt;/a&gt;&lt;br/&gt;
&amp;gt; - does it support delimited identifiers of the form &quot;\&quot;fred@acme.com\&quot;&quot;?&lt;/p&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;p&gt;&amp;gt; - is the only issue that non-delimited identifiers &quot;fred&quot; do not resolve correctly?&lt;/p&gt;

&lt;p&gt;They resolve incompletely: non-delimited identifies &quot;fred&quot; only matches &quot;fred&quot;, while &quot;FRED&quot; matches &quot;fred&quot;, &quot;Fred&quot;, &quot;FRED&quot; ...&lt;/p&gt;

&lt;p&gt;Here&apos;s what I&apos;ve verified.  A policy file with belows grants results in the following System Privileges behaviour for users:&lt;/p&gt;

&lt;p&gt;  grant principal org.apache.derby.authentication.SystemPrincipal &quot;MARTIN&quot; &lt;/p&gt;
{ ... }&lt;br/&gt;
  checks for users:&lt;br/&gt;
     martin &amp;#8211; granted&lt;br/&gt;
     marTin &amp;#8211; granted&lt;br/&gt;
     MARTIN &amp;#8211; granted&lt;br/&gt;
     &quot;marTin&quot; &amp;#8211; denied, missing permission  (delimited identifier, different from marTin)&lt;br/&gt;
&lt;br/&gt;
  grant principal org.apache.derby.authentication.SystemPrincipal &quot;edWard&quot; { ... }
&lt;p&gt;  checks for users:&lt;br/&gt;
    edWard &amp;#8211; granted&lt;br/&gt;
    edward &amp;#8211; denied, missing permission&lt;/p&gt;

&lt;p&gt;  grant principal org.apache.derby.authentication.SystemPrincipal &quot;\&quot;fred@acme.com\&quot;&quot; &lt;/p&gt;
{ ... }
&lt;p&gt;  checks for users:&lt;br/&gt;
    &quot;fred@acme.com&quot; &amp;#8211; granted&lt;br/&gt;
    &quot;Fred@ACME.COM&quot; &amp;#8211; denied, missing permission&lt;br/&gt;
    fred@acme.com &amp;#8211; denied, illegally formed name as complained by IdUtil.getUserAuthorizationId() because it&apos;s a non-delimited identifier having special characters&lt;/p&gt;

&lt;p&gt;However, in the last case the exception is not nicely presented to the client and needs improvement (I&apos;d expected this case not to pass authentication, but we have to cover for it, especially since we now can have authorization checks without prior authentication).&lt;/p&gt;

&lt;p&gt;&amp;gt; From a security point of view does this have the potential to allow one user to piggy back on the permissions of another user?&lt;/p&gt;

&lt;p&gt;Not really.  Under the rules for Identifiers for authentication and authorization, the non-delimited identifiers &quot;fred&quot;, &quot;Fred&quot;, &quot;FRED&quot; all represent the same person.  So, if user &quot;fred&quot; can piggy-back on a principal grant to &quot;FRED&quot; &amp;#8211; that&apos;s the requested feature that took some effort to implement &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In contrast, user &quot;marTin&quot; cannot piggy-back on a principal grant for &quot;\&quot;martin\&quot;&quot;.&lt;/p&gt;

&lt;p&gt;&amp;gt;  - ensuring the new security objects that are serializable have serialization ids to ensure compatibility across releases&lt;/p&gt;

&lt;p&gt;I&apos;m not aware anymore why SystemPrincipal implements Serializable, so, perhaps, I should research and add a comment.  I&apos;m not sure there&apos;s a good reason for this class to be serializable (to the contrary, often information about user names etc should not be serialized), but if there is, I agree, a serialization id should be there (with the class being so simple, we probably won&apos;t need readObject() and writeObject()).&lt;/p&gt;

&lt;p&gt;Our Permission classes are not serializable, so, I don&apos;t think we have other security objects to think about.&lt;/p&gt;

&lt;p&gt;While NetworkServerControlImpl also does not implement Serializable, I wonder if the userArg, passewordArg, and bootpasswordArg fields should be declared transient as good pactice/precaution.&lt;/p&gt;

&lt;p&gt;&amp;gt; - making the new security objects final&lt;/p&gt;

&lt;p&gt;Yes, will do for SystemPrincipal, DatabasePermission and SystemPermission.&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12573086" author="rhillegas" created="Wed, 27 Feb 2008 22:27:06 +0000"  >&lt;p&gt;I&apos;m waiting for the next rev of the patch before I start running unit tests. If the tests pass, I&apos;m inclined to check this in in order to get the Replication and JMX folks unstuck. I&apos;m hoping that we can treat the J2ME issue like the other issues: address it in a follow-on patch. Perhaps Martin could boost the priority of the J2ME issue. If we have to back this work out, on the branch, that&apos;s fine. However, I hope that our release manager will be willing to delay the release a bit if it looks like a little more effort could fix these outstanding issues.&lt;/p&gt;</comment>
                            <comment id="12573096" author="djd" created="Wed, 27 Feb 2008 23:06:02 +0000"  >&lt;p&gt;The trouble is that the patch will break J2ME, all the other issues are related to this specific new code and do not have such a huge effect.&lt;/p&gt;

&lt;p&gt;Would we commit a patch that broke Java SE 6?&lt;/p&gt;</comment>
                            <comment id="12573110" author="rhillegas" created="Thu, 28 Feb 2008 00:22:13 +0000"  >&lt;p&gt;I would allow a patch which didn&apos;t work on Java 6 if it got other people unstuck and if I trusted the developer to submit a fix soon.&lt;/p&gt;</comment>
                            <comment id="12573159" author="mzaun" created="Thu, 28 Feb 2008 06:22:04 +0000"  >
&lt;p&gt;&amp;gt; Daniel John Debrunner wrote:&lt;br/&gt;
&amp;gt; 1) Since J2ME/CDC/Foundation does not support some of the security classes used, how is this being handled? Seems like it isn&apos;t at the moment. I think a new abstract method is needed in InternalDriver called shutdownCheck() is needed that would do nothing in J2ME but call the checks (through SecurityUtil in J2SE.&lt;/p&gt;

&lt;p&gt;The System Privileges checks are invoked from three places: NetworkServerControlImpl, InternalDriver, and EmbedConnection (and there may be more in future). They all call into SecurityUtil. Instead of introducing abstract methods in three different places, we may want to think about using SecurityUtil as a central switch for checking/not checking SystemPrivileges.&lt;/p&gt;

&lt;p&gt;Right now SecurityUtil is is a static utility class, which doesn&apos;t support delegation.  I see the following options:&lt;br/&gt;
a) Make SecurityUtil an interface and (perhaps rename it) and have a public singleton class providing an instance appropriate to the environment (i.e., dummy implementation for J2ME).&lt;br/&gt;
b) Keep SecurityUtil as class but make its method non-static, abstract and introduce a static method getSecurityChecker() (or so) returning a singleton instance implementing these methods according to the environment.&lt;br/&gt;
c) Keep SecurityUtil as utility class but have the static methods internally delegate to an instance appropriate to the environment.&lt;/p&gt;

&lt;p&gt;I like c) best since it keeps the callers unchanged.  Any thoughts/comments welcome.&lt;/p&gt;

&lt;p&gt;If you have a pointer to a derby code example for me where switch implementation classes to accommodate J2ME, that would be helpful to me too.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Martin&lt;/p&gt;</comment>
                            <comment id="12573174" author="mzaun" created="Thu, 28 Feb 2008 07:52:00 +0000"  >&lt;p&gt;Please find attached for review and testing the patch update &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-11 (replacing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-10):&lt;/p&gt;

&lt;p&gt;a) Fixed the debug/dummy code oversight in SecurityUtil, now really doing: AccessController.checkPermission(perm).&lt;/p&gt;

&lt;p&gt;b) All unit tests now passing (fixed a few unit tests and DRDAServerStarter).&lt;/p&gt;

&lt;p&gt;c) Made public API security classes final (SystemPrincipal, DatabasePermission, SystemPermission) per suggestion by Dan.&lt;/p&gt;

&lt;p&gt;d) Added serialization support (serialVersionUID) and comments to SystemPrincipal.&lt;/p&gt;

&lt;p&gt;Starting a final derbyall and junit-all run overnight,&lt;br/&gt;
Martin&lt;/p&gt;</comment>
                            <comment id="12573287" author="mzaun" created="Thu, 28 Feb 2008 13:59:26 +0000"  >&lt;p&gt;&amp;gt; Starting a final derbyall and junit-all run overnight, &lt;/p&gt;

&lt;p&gt;No errors.&lt;br/&gt;
Martin&lt;/p&gt;</comment>
                            <comment id="12573304" author="djd" created="Thu, 28 Feb 2008 14:42:27 +0000"  >&lt;p&gt;&amp;gt; The System Privileges checks are invoked from three places: NetworkServerControlImpl, InternalDriver, and EmbedConnection&lt;/p&gt;

&lt;p&gt;The network server doesn&apos;t currently run under J2ME and the other two places are already factored into platform specific modules (J2ME, JDK1.4/1.5, Java SE 6) so a quick fix would be to take advantage of the existing factoring and just have security check methods in InternalDriver that either call SecurityUtil or don&apos;t for J2ME.&lt;/p&gt;</comment>
                            <comment id="12573348" author="mzaun" created="Thu, 28 Feb 2008 16:48:45 +0000"  >
&lt;p&gt;&amp;gt; The network server doesn&apos;t currently run under J2ME and the other two places are already factored into platform specific modules (J2ME, JDK1.4/1.5, Java SE 6) so a quick fix would be to take advantage of the existing factoring and just have security check methods in InternalDriver that either call SecurityUtil or don&apos;t for J2ME.&lt;/p&gt;

&lt;p&gt;Thanks! Here&apos;s my understanding of your quick fix proposal:&lt;br/&gt;
1) change method InternalDriver.checkShutdownPrivileges() to be abstract&lt;br/&gt;
2) move the implementation to Driver20.checkShutdownPrivileges() (this way Driver30, 40 will have it too)&lt;br/&gt;
3) define an empty method Driver169.checkShutdownPrivileges() &lt;/p&gt;

&lt;p&gt;I&apos;ll do that and run tests.&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12573350" author="djd" created="Thu, 28 Feb 2008 16:54:53 +0000"  >&lt;p&gt;Right, and something similar for create database.&lt;/p&gt;

&lt;p&gt;One could even just have an abstract  checkPermission(Permission) method in InternalDriver and then pass in the required permission.&lt;br/&gt;
This tends to be more in line with how permission checks are implemented (see the permission in-line rather than hidden in a utility class).&lt;br/&gt;
Then only a single method is added to InternalDriver rather than one per type of permission check.&lt;br/&gt;
This also means SecurityUtil becomes a real utility class rather than having specific knowledge of permission requirements from other modules .&lt;/p&gt;</comment>
                            <comment id="12573411" author="myrna" created="Thu, 28 Feb 2008 19:21:06 +0000"  >&lt;p&gt;When a new patch with a fix for J2ME is available, I&apos;ll  be happy to run again, but my results with patch 10 are that for derbyall, only 5 tests passed, for suites.All, 113 fixtures out of  2697 failed (didn&apos;t run suites.All with jars, only classes).&lt;br/&gt;
For reference, here&apos;s a stack example, from lang/locktable.sql&apos;s derby.log, showing a problem would&apos;ve been through ij:&lt;/p&gt;

&lt;p&gt;java.lang.NoClassDefFoundError: javax.security.auth.Subject&lt;br/&gt;
	at org.apache.derby.iapi.security.SecurityUtil.createSystemPrincipalSubject(SecurityUtil.java:112)&lt;br/&gt;
	at org.apache.derby.iapi.security.SecurityUtil.checkDatabaseCreatePermission(SecurityUtil.java:255)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(EmbedConnection.java:2259)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:351)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver169.getNewEmbedConnection(Driver169.java:57)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:240)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(EmbeddedSimpleDataSource.java:406)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(EmbeddedSimpleDataSource.java:373)&lt;br/&gt;
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:213)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:272)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.util.getDataSourceConnection(util.java:426)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:516)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:585)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ConnectionEnv.init(ConnectionEnv.java:64)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.initFromEnvironment(utilMain.java:165)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.&amp;lt;init&amp;gt;(Main.java:230)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.getMain(Main.java:193)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:178)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:73)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(ij.java:59)&lt;/p&gt;</comment>
                            <comment id="12573542" author="mzaun" created="Fri, 29 Feb 2008 01:14:15 +0000"  >
&lt;p&gt;Please find attached for review and testing the updated patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;-12, which addresses the J2ME/CDC failures with former patches.  Patch #12 passes junit-all on my machine (and I&apos;ll run derbyall later tonight).&lt;/p&gt;

&lt;p&gt;Myrna, thanks for testing on J2ME/CDC.  It would be great if you could run the latest patch #12 too.&lt;/p&gt;

&lt;p&gt;I&apos;ve applied the code refactorizations along the lines Dan&apos;s suggested:&lt;/p&gt;

&lt;p&gt;a) InternalDriver now has a new method:&lt;br/&gt;
      abstract public void checkSystemPrivileges(String user, Permission perm) throws Exception;&lt;br/&gt;
   which is implemented in Driver20 with a call to SecurityUtil, and in Driver169 as an empty method body (with a comment).&lt;/p&gt;

&lt;p&gt;b) SecurityUtil has been stripped off knowledge of SystemPermission, DatabasePermission (but continues to deal with Subjects, Principals, Authorization Ids, and executing the permission checks).&lt;/p&gt;

&lt;p&gt;c) InternalDriver, EmbedConnection have methods&lt;br/&gt;
       public void checkShutdownPrivileges(String user) throws SQLException&lt;br/&gt;
       public void checkDatabaseCreatePrivileges(String user, String dbname) throws SQLException&lt;br/&gt;
   both of them calling the driver&apos;s (abstract) checkSystemPrivileges().&lt;/p&gt;

&lt;p&gt;d) NetworkServerControlImpl&apos;s method&lt;br/&gt;
       public void checkShutdownPrivileges() throws SQLException&lt;br/&gt;
   calls static SecurityUtil.checkUserHasPermission().  There may be an option to change that call to InternalDriver&apos;s checkSystemPrivileges(), but so far (by design, I guess), NetworkServerControl only knows of Driver, not InternalDriver.&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12573576" author="myrna" created="Fri, 29 Feb 2008 03:40:54 +0000"  >&lt;p&gt;I ran derbyall, for starters, with my JSR169 implementation (the jvm available through IBM&apos;s weme6.1) and unfortunately, this time, only 4 tests passed...(store/logDevice.sql; store/rollForwardBackup.sql, store/backupRestore.sql, store/bootlock.java). 153 tests failed.&lt;/p&gt;

&lt;p&gt;Many test diffs show something like this:&lt;br/&gt;
0a1&lt;br/&gt;
&amp;gt; Parsing policy file: &lt;a href=&quot;file:C:/derbyt/svn/tst/j9_f11/d2109_12/derbyall/derby_tests.policy&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:C:/derbyt/svn/tst/j9_f11/d2109_12/derbyall/derby_tests.policy&lt;/a&gt;, found unexpected: permission&lt;br/&gt;
and no connections are made (no database is created).&lt;/p&gt;

&lt;p&gt;Here&apos;s one derby.log file example (again, lockTable) shows that this time it&apos;s the String.split message which is not supported with JSR169 - at least, not with the implementation I&apos;m using:&lt;/p&gt;

&lt;p&gt;java.lang.NoSuchMethodError: java/lang/String.split(Ljava/lang/String&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;[Ljava/lang/String;&lt;br/&gt;
	at org.apache.derby.security.DatabasePermission.initActions(DatabasePermission.java:237)&lt;br/&gt;
	at org.apache.derby.security.DatabasePermission.&amp;lt;init&amp;gt;(DatabasePermission.java:210)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.checkDatabaseCreatePrivileges(EmbedConnection.java:2326)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(EmbedConnection.java:2261)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:354)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver169.getNewEmbedConnection(Driver169.java:60)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:237)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(EmbeddedSimpleDataSource.java:406)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(EmbeddedSimpleDataSource.java:373)&lt;br/&gt;
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:213)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:272)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.util.getDataSourceConnection(util.java:426)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:516)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:585)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ConnectionEnv.init(ConnectionEnv.java:64)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.initFromEnvironment(utilMain.java:165)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.&amp;lt;init&amp;gt;(Main.java:230)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.getMain(Main.java:193)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:178)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:73)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(ij.java:59)&lt;/p&gt;

&lt;p&gt;I&apos;ll kick off suites.All, to see what that shows us...&lt;/p&gt;

</comment>
                            <comment id="12573591" author="myrna" created="Fri, 29 Feb 2008 04:53:11 +0000"  >&lt;p&gt;suites.All (not using any ant target) with my JSR169 implementation with patch 102 installed (and merged with latest changes from trunk) results in 102 failures out of 2697...&lt;/p&gt;

&lt;p&gt;101 of those are because of String.split, for example,  here is the stack trace from lang.TimeHandlingTest:&lt;br/&gt;
--------------------&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTestjava.sql.SQLException: Java exception: &apos;java/lang/String.split(Ljava/lang/String&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;[Ljava/lang/String;: java.lang.NoSuchMethodError&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:245)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2023)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:511)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver169.getNewEmbedConnection(Driver169.java:60)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:237)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(EmbeddedSimpleDataSource.java:406)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(EmbeddedSimpleDataSource.java:373)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DataSourceConnector.openConnection(DataSourceConnector.java:67)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1312)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)&lt;br/&gt;
	at org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp(CleanDatabaseTestSetup.java:104)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:18)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: java.lang.NoSuchMethodError: java/lang/String.split(Ljava/lang/String&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;[Ljava/lang/String;&lt;br/&gt;
	at org.apache.derby.security.DatabasePermission.initActions(DatabasePermission.java:237)&lt;br/&gt;
	at org.apache.derby.security.DatabasePermission.&amp;lt;init&amp;gt;(DatabasePermission.java:210)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.checkDatabaseCreatePrivileges(EmbedConnection.java:2326)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(EmbedConnection.java:2261)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:354)&lt;br/&gt;
	... 21 more&lt;br/&gt;
--------------------&lt;/p&gt;

&lt;p&gt;The last failure is different - I think it ok if this one test gets excluded from the unitTests suite for JSR169.&lt;/p&gt;


&lt;p&gt;--------------------&lt;br/&gt;
102) testSystemPrivileges(org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest)java.lang.NoClassDefFoundError: javax.security.auth.Subject&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest$RunAsPrivilegedUserAction.run(SystemPrivilegesPermissionTest.java:640)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(AccessController.java:191)&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.execute(SystemPrivilegesPermissionTest.java:477)&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.checkSystemPermission(SystemPrivilegesPermissionTest.java:268)&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.execute(SystemPrivilegesPermissionTest.java:190)&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.testSystemPrivileges(SystemPrivilegesPermissionTest.java:180)&lt;br/&gt;
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
--------------------&lt;/p&gt;</comment>
                            <comment id="12573606" author="djd" created="Fri, 29 Feb 2008 06:04:38 +0000"  >&lt;p&gt;For patch 12 could you point to where these new features are tested as functional tests:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;passing authentication for network server shutdown&lt;/li&gt;
	&lt;li&gt;system level authorization for system shutdown&lt;/li&gt;
	&lt;li&gt;system level authorization for database creation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I stared at the patch for a while but couldn&apos;t see any new tests (apart from the unit tests which I think are only testing the behaviour of the low-level permissions and principals.&lt;/p&gt;</comment>
                            <comment id="12573779" author="rhillegas" created="Fri, 29 Feb 2008 15:13:47 +0000"  >&lt;p&gt;Thanks for the patch, Martin. For the record, the unit tests ran fine for me on Java 5 on my Mac, except for the known regressions mentioned in &lt;a href=&quot;http://www.nabble.com/failures-in-org.apache.derbyTesting.functionTests.tests.lang.LangScripts-to15747036.html#a15747036&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/failures-in-org.apache.derbyTesting.functionTests.tests.lang.LangScripts-to15747036.html#a15747036&lt;/a&gt; (a change in the text for error 42818) and the known regression in TransactionTable. However, given the J2ME issues, the patch does not seem ready for commit.&lt;/p&gt;</comment>
                            <comment id="12573812" author="myrna" created="Fri, 29 Feb 2008 16:17:36 +0000"  >&lt;p&gt;I woke up last night realizing I shouldn&apos;t have merged first.&lt;br/&gt;
I verified this morning, and this patch does &lt;b&gt;not&lt;/b&gt; use String.split.&lt;/p&gt;

&lt;p&gt;Instead, something else has gone in that caused these failures. They&apos;ll show up in the nightlies for this platform...&lt;br/&gt;
I&apos;m sorry for the confusion. I will run with just the patch, but am woefully out of time today. Hopefully someone else can track down what went in between the revision of the patch and 632207. &lt;/p&gt;</comment>
                            <comment id="12573847" author="myrna" created="Fri, 29 Feb 2008 17:12:34 +0000"  >&lt;p&gt;The plot thickens.&lt;br/&gt;
Sync-ed up to revision 631208, without the patch, with  my J2ME things pass (similarly to as reported in &lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-631820.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-631820.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;However, sync-ed up to this (631208, the level of the patch) with the patch&lt;br/&gt;
 I get the erros I reported above.&lt;/p&gt;

&lt;p&gt;Sync-ed up to 632212 without the patch also fails...but differently, so that&apos;s another issue.&lt;/p&gt;

&lt;p&gt;The trouble indicated above holds - I&apos;m sorry to say.&lt;/p&gt;</comment>
                            <comment id="12573849" author="kmarsden" created="Fri, 29 Feb 2008 17:14:38 +0000"  >&lt;p&gt;The J2ME run had other problems, perhaps related to:&lt;br/&gt;
r632125 | djd | 2008-02-28 13:43:25 -0800 (Thu, 28 Feb 2008) | 5 lines&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3445&quot; title=&quot;Make it easier to use the EMMA tool to measure the code coverage of the Derby testing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3445&quot;&gt;&lt;del&gt;DERBY-3445&lt;/del&gt;&lt;/a&gt; Adds ant targets to run the junit-all tests with EMMA code coverage.&lt;br/&gt;
Fixes some permission issues in tests when running coverage with EMMA.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3153&quot; title=&quot;AccessControlException when running junit tests under the ant harness in ant 1.7.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3153&quot;&gt;&lt;del&gt;DERBY-3153&lt;/del&gt;&lt;/a&gt; Allows the junit-all tests to be run with ant 1.7 &lt;/p&gt;

&lt;p&gt;.......Parsing policy file: jar:&lt;a href=&quot;file:/C:/jartest/classes/derbyTesting.jar!/org/a&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/C:/jartest/classes/derbyTesting.jar!/org/a&lt;/a&gt;&lt;br/&gt;
pache/derbyTesting/functionTests/util/derby_tests.policy, found unexpected: perm&lt;br/&gt;
ission&lt;br/&gt;
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE.EEE.EEEE.EE.EEEEEEEE.E.E.&lt;br/&gt;
E.E.E.E.E.E.EEE.E.E.E.EEEEEE.E.E.E.E.E.E.E.E.EEEEEEEEEEEEEEEEEEEEEEEEEEE.EEEEEE.&lt;br/&gt;
EEE.E.E.E.E.E.&lt;br/&gt;
E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.&lt;br/&gt;
E.&lt;br/&gt;
E.E.E.E.E.E.E.E.E.E.E.E.E.EEEE.E.EEEEEEEEEEEEEEEEEEEjava.sql.SQLException: Java&lt;br/&gt;
exception: &apos;Access denied (java.util.PropertyPermission user.dir read): java.sec&lt;br/&gt;
urity.AccessControlException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknow&lt;br/&gt;
n Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException&lt;br/&gt;
(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Un&lt;br/&gt;
known Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown So&lt;br/&gt;
urce)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver169.getNewEmbedConnection(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(Unknown&lt;br/&gt;
Source)&lt;br/&gt;
        at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(Unknown&lt;br/&gt;
Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.DataSourceConnector.openConnection(Data&lt;br/&gt;
SourceConnector.java:54)&lt;br/&gt;
        at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection&lt;br/&gt;
(TestConfiguration.java:1312)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDB&lt;br/&gt;
CTestSetup.java:72)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup&lt;br/&gt;
.setUp(SURDataModelSetup.java:119)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:18)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
....&lt;/p&gt;

&lt;p&gt;I will take a closer look and file a Jira entry.&lt;/p&gt;

&lt;p&gt;As for the split code it was added June 6. revision 544870 as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;.  &lt;br/&gt;
Is it possible that the new patch causes that code to be exercised for the first time?&lt;/p&gt;

</comment>
                            <comment id="12573851" author="mzaun" created="Fri, 29 Feb 2008 17:19:50 +0000"  >&lt;p&gt;Myrna, Rick, thank you very much for testing.&lt;/p&gt;

&lt;p&gt;On the NoSuchMethodError: (my) class DatabasePermission DOES call method String.split(String) at line 237.  However, the javadoc says this method has been introduced with JDK 1.4.  It&apos;s not in the patch but in the class that&apos;s already been in the trunk for some time (but not invoked yet).&lt;/p&gt;

&lt;p&gt;So, I&apos;m confused: does it mean that for J2ME/CDC we can&apos;t fully rely upon the 1.4 java.lang API ?&lt;/p&gt;

&lt;p&gt;Martin&lt;/p&gt;</comment>
                            <comment id="12573853" author="mzaun" created="Fri, 29 Feb 2008 17:25:32 +0000"  >&lt;p&gt;&amp;gt; As for the split code it was added June 6. revision 544870 as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;.&lt;br/&gt;
&amp;gt; Is it possible that the new patch causes that code to be exercised for the first time?&lt;/p&gt;

&lt;p&gt;Yes, that&apos;s exactly what happened.  Thanks,&lt;br/&gt;
Martin&lt;/p&gt;</comment>
                            <comment id="12573856" author="kristwaa" created="Fri, 29 Feb 2008 17:33:33 +0000"  >&lt;p&gt;Martin wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, I&apos;m confused: does it mean that for J2ME/CDC we can&apos;t fully rely upon the 1.4 java.lang API ?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Yes, that is the case. It is based on the Java SE 1.4 API, but it is not the same.&lt;br/&gt;
To be sure, I think you have to consult the J2ME API specification, which you can download from JCP I think.&lt;/p&gt;</comment>
                            <comment id="12573861" author="djd" created="Fri, 29 Feb 2008 17:40:52 +0000"  >&lt;p&gt;FYI, the J2ME profile Derby is coded against is:&lt;/p&gt;

&lt;p&gt; J2MC/CDC/Foundation 1.1 with JSR 169 for the JDBC subset.&lt;/p&gt;</comment>
                            <comment id="12573864" author="djd" created="Fri, 29 Feb 2008 17:48:36 +0000"  >&lt;p&gt;I&apos;m working on committing portions of the patch to move this issue forward and reduce the amount of effort for everyone in dealing with a new huge patch each time.&lt;/p&gt;

&lt;p&gt;First will be the security objects (e.g permissions, principals and SecurityUtil) all of which I think can be committed but continue not to be used by the current code, thus not causing problems. I&apos;m will run junit-all before committing.&lt;/p&gt;

&lt;p&gt;The next step may be the changes that relate to adding user &amp;amp; password to network server control.&lt;/p&gt;

&lt;p&gt;If I could get an answer on the test changes then I could proceed quicker.&lt;/p&gt;</comment>
                            <comment id="12573921" author="djd" created="Fri, 29 Feb 2008 19:37:03 +0000"  >&lt;p&gt;Committed (revision 632419) a sub-set of patch 12 related to the security code without enabling any functionality.&lt;br/&gt;
Note that the SystemPrivilegesPermissionTest is not added into the _Suite (as the complete patch does)&lt;br/&gt;
as I think it will fail under J2ME. It passes with classes but fails with jars but that is to be expected&lt;br/&gt;
as the Derby&apos;s permissions classes are not yet added into the jars, this will occur once they are used.&lt;/p&gt;

&lt;p&gt;M      java/build/org/apache/derbyBuild/classlister.java&lt;br/&gt;
D      java/engine/org/apache/derby/authentication/DatabasePrincipal.java&lt;br/&gt;
A      java/engine/org/apache/derby/authentication/SystemPrincipal.java&lt;br/&gt;
A      java/engine/org/apache/derby/iapi/security&lt;br/&gt;
A      java/engine/org/apache/derby/iapi/security/SecurityUtil.java&lt;br/&gt;
M      java/engine/org/apache/derby/security/DatabasePermission.java&lt;br/&gt;
M      java/engine/org/apache/derby/security/SystemPermission.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/unitTests/junit/SystemPrivilegesPermissionTest.policy&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/unitTests/junit/SystemPrivilegesPermissionTest.java&lt;/p&gt;</comment>
                            <comment id="12573979" author="djd" created="Fri, 29 Feb 2008 21:58:57 +0000"  >&lt;p&gt;Committed revision 632452 another sub-set of the 12 patch.&lt;br/&gt;
Framework code in InternalDriver and sub-classes to check permissions.&lt;br/&gt;
Code to enforce engine shutdown permission in InternalDriver but commented out. Need to understand which test code in the patch may be affected.&lt;br/&gt;
New error messages.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/jdbc/InternalDriver.java&lt;br/&gt;
M      java/engine/org/apache/derby/jdbc/Driver169.java&lt;br/&gt;
M      java/engine/org/apache/derby/jdbc/Driver20.java&lt;br/&gt;
M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java&lt;/p&gt;</comment>
                            <comment id="12574024" author="djd" created="Sat, 1 Mar 2008 00:18:11 +0000"  >&lt;p&gt;Committed revision 632502 Major sub-set of patch 12 that requires a user name and password for network server shutdown.&lt;br/&gt;
Also includes the code to check a permission when shutting down the network server but&lt;br/&gt;
the actual call to check the permission is commented out.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java&lt;br/&gt;
M      java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java&lt;br/&gt;
M      java/drda/org/apache/derby/drda/NetworkServerControl.java&lt;br/&gt;
M      java/drda/org/apache/derby/loc/drda/messages_en.properties&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/maxthreads.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/derbyrunjartest.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/timeslice.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java&lt;/p&gt;</comment>
                            <comment id="12574717" author="army" created="Mon, 3 Mar 2008 20:07:34 +0000"  >&lt;p&gt;A few javadoc warnings that have arisen from the recent commits:&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; java\engine\org\apache\derby\iapi\jdbc\DRDAServerStarter.java:107: warning - @param argument &quot;address&quot; is not a parameter name.&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; java\engine\org\apache\derby\iapi\jdbc\DRDAServerStarter.java:107: warning - Tag @see: reference not found: NetworkServerControl&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; java\engine\org\apache\derby\authentication\SystemPrincipal.java:47: warning - Tag @see: can&apos;t find name in java.security.Principal&lt;/p&gt;</comment>
                            <comment id="12574808" author="myrna" created="Tue, 4 Mar 2008 00:52:53 +0000"  >&lt;p&gt;I think one or more of the commits may have caused weme6.1 (my J2ME/JSR169 implementation) to run into 152 failed tests in derbyall.&lt;br/&gt;
The last one in the report for example has a failure diff like so:&lt;br/&gt;
====================&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Start: T_MarkedLimitInputStream jdkJ2ME Foundation Specification v1.1 derbyall:unit 2008-03-01 07:05:44 ***&lt;br/&gt;
1 del&lt;br/&gt;
&amp;lt; &amp;#8211; Unit Test T_MarkedLimitInputStream starting&lt;br/&gt;
2 del&lt;br/&gt;
&amp;lt; &amp;#8211; Unit Test T_MarkedLimitInputStream finished&lt;br/&gt;
2 add&lt;br/&gt;
&amp;gt; Parsing policy file: &lt;a href=&quot;file:C:/jartest/JarResults.2008-02-29/weme6.1_derbyall/derby_tests.policy&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:C:/jartest/JarResults.2008-02-29/weme6.1_derbyall/derby_tests.policy&lt;/a&gt;, found unexpected: permission&lt;br/&gt;
&amp;gt; xxxxxxFILTERED-TIMESTAMPxxxxxGMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; java.security.AccessControlException: Access denied (java.io.FilePermission derby.log read)&lt;br/&gt;
&amp;gt; xxxxxxFILTERED-TIMESTAMPxxxxxGMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; Cleanup action starting&lt;br/&gt;
&amp;gt; ERROR XBM02: Startup failed due to missing functionality for org.apache.derbyTesting.unitTests.harness.UnitTestManager. Please ensure your classpath includes the correct Derby software.&lt;br/&gt;
&amp;gt; Cleanup action completed&lt;br/&gt;
&amp;gt; xxxxxxFILTERED-TIMESTAMPxxxxxGMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; xxxxxxFILTERED-TIMESTAMPxxxxxGMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; Startup failed due to missing functionality for org.apache.derbyTesting.unitTests.harness.UnitTestManager. Please ensure your classpath includes the correct Derby software.&lt;br/&gt;
&amp;gt; ERROR XBM02: Startup failed due to missing functionality for org.apache.derbyTesting.unitTests.harness.UnitTestManager. Please ensure your classpath includes the correct Derby software.&lt;br/&gt;
Test Failed.&lt;br/&gt;
=================&lt;br/&gt;
I understood from the discussion re &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3445&quot; title=&quot;Make it easier to use the EMMA tool to measure the code coverage of the Derby testing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3445&quot;&gt;&lt;del&gt;DERBY-3445&lt;/del&gt;&lt;/a&gt; that with this jvm I need to run with properties spelled out (so I&apos;m now running with -Demma.active=&quot;&quot;). Is there some property I need to specify for these changes too that I missed?&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any other suggestions?&lt;/p&gt;

&lt;p&gt;There is no derby.log, and (so) no stack trace...&lt;/p&gt;</comment>
                            <comment id="12574812" author="djd" created="Tue, 4 Mar 2008 01:04:16 +0000"  >&lt;p&gt;None of the recent commits for this issue (sub-sets of patch 12) changed any policy file, so not sure what&apos;s going on with the weme 6.1 runs. It may be more due to the changes for EMMA than this issue.&lt;/p&gt;</comment>
                            <comment id="12575064" author="myrna" created="Tue, 4 Mar 2008 17:26:43 +0000"  >&lt;p&gt;Indeed, those errors were related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3445&quot; title=&quot;Make it easier to use the EMMA tool to measure the code coverage of the Derby testing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3445&quot;&gt;&lt;del&gt;DERBY-3445&lt;/del&gt;&lt;/a&gt;; apologies for the confusion.&lt;/p&gt;</comment>
                            <comment id="12575234" author="mzaun" created="Wed, 5 Mar 2008 04:03:20 +0000"  >&lt;p&gt;With the remaining work on System Pribileges partitioned into the subtasks &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3476&quot; title=&quot;Permissions and Principal objects added by this feature need to be final and have serialization identifiers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3476&quot;&gt;&lt;del&gt;DERBY-3476&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3477&quot; title=&quot;Make format principal names in SystemPermission (e.g. policy files) match the standard way Derby handles authorization identifiers in a Java context.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3477&quot;&gt;DERBY-3477&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3482&quot; title=&quot;Investigate implementing the file matching logic in DatabasePermission using FilePermission&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3482&quot;&gt;DERBY-3482&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3488&quot; title=&quot;Add functional (ie user level) tests for system privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3488&quot;&gt;DERBY-3488&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3491&quot; title=&quot;Change SystemPermission to be a two arguement permission with a name (object the permission is on) and an action.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3491&quot;&gt;&lt;del&gt;DERBY-3491&lt;/del&gt;&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3495&quot; title=&quot;Enable System Privileges checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3495&quot;&gt;DERBY-3495&lt;/a&gt;, I&apos;m unassigning myself from this JIRA and will next look into &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3488&quot; title=&quot;Add functional (ie user level) tests for system privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3488&quot;&gt;DERBY-3488&lt;/a&gt; (functional tests for system privileges).&lt;/p&gt;</comment>
                            <comment id="12578557" author="djd" created="Fri, 14 Mar 2008 01:02:24 +0000"  >&lt;p&gt;Kathey&apos;s work in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3534&quot; title=&quot;Run 10.3 tests against 10.4 to help identify any compatibility issues&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3534&quot;&gt;&lt;del&gt;DERBY-3534&lt;/del&gt;&lt;/a&gt; is showing the impact of this change (the network authentication part) on existing applications.&lt;/p&gt;</comment>
                            <comment id="12578880" author="mzaun" created="Fri, 14 Mar 2008 18:13:49 +0000"  >&lt;p&gt;While NetworkServerControl authentication was a missing security feature that 2109 attempted to address, there were a couple of unresolved questions at the time of the decision to postpone some of the 2109 until after 10.4, for instance:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If I remember correctly, there was a discussion how NSC authentication relates to JMX, which has its own authentication mechanism; a question was if we then require two authentications, one by JMX and another one by NSC, or if NSC in this case does not do its own authentication check for shutdown. But I&apos;m not sure remember this topic correctly.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Should we require user credentials for network server startup when running with authentication or should NSC not check user credentials upon shutdown when the server was started without ones? (Or should we have a default identity &quot;APP&quot; like with jdbc clients?)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When browsing through the committed parts of the patch, it slipped my attention that the authentication check in NetworkServerControlImpl was still in effect (unlike the check for authorization). If we decide to disable them for 10.4 it can be very easily done by making checkShutdownPrivileges() a dummy method (and keeping the remaining code for user credentials support).&lt;/p&gt;</comment>
                            <comment id="12578885" author="djd" created="Fri, 14 Mar 2008 18:33:24 +0000"  >&lt;p&gt;&amp;gt; ... how NSC authentication relates to JMX ...&lt;/p&gt;

&lt;p&gt;I think that&apos;s a future enhancement, it does not block &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt; from completing. It&apos;s the concept of a single-sign on, probably implemented through JAAS.&lt;/p&gt;

&lt;p&gt;&amp;gt; Should we require user credentials for network server startup when running with authentication or should NSC not check user credentials upon shutdown when the server was started without ones?&lt;/p&gt;

&lt;p&gt;I think those are two independent questions, rather than an &quot;or&quot; situation. For the second, if there is no system authentication then it should be transparent to the shutdown mechanism since Derby provides a no-op authentication in that case. So the user credentials are always checked but will always succeed. I think that&apos;s what is intended with the current implementation.&lt;/p&gt;

&lt;p&gt;&amp;gt; the authentication check in NetworkServerControlImpl was still in effect&lt;/p&gt;

&lt;p&gt;That was intentional on my part, the patch contained what I believed to be working code related to network server authentication so I committed it. The authorization had issues related to J2ME so I did not commit it. I was assuming work would continue incrementally to add authorization.&lt;/p&gt;</comment>
                            <comment id="12578898" author="kmarsden" created="Fri, 14 Mar 2008 19:24:13 +0000"  >&lt;p&gt;If &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt; has been postponed, should we back out the &lt;br/&gt;
user visible changes affecting existing applications on the 10.4 branch?  Based on my &lt;br/&gt;
short experience, I think that the  changes are going to be painful for Network Server users.&lt;br/&gt;
If we are going to be making more changes for startup etc, I would&lt;br/&gt;
rather hit them only hit users once with all the changes once they are&lt;br/&gt;
ready for 10.5.&lt;/p&gt;

</comment>
                            <comment id="12578908" author="djd" created="Fri, 14 Mar 2008 19:54:52 +0000"  >&lt;p&gt;Guess it depends on the definition of painful? Be careful of using the tests as an indicator of a typical application.&lt;/p&gt;

&lt;p&gt;The required change, as far as I understand, is that an application that is using system level authentication now needs to create its NetworkServerControl objects with a user name and password, rather than with none. E.g. they need to replace:&lt;/p&gt;

&lt;p&gt; NetworkServerControl ctrl = new NetworkServerControl();&lt;/p&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;p&gt; NetworkServerControl ctrl = new NetworkServerControl(user, password);&lt;/p&gt;


&lt;p&gt;Or if they are using the command line, they need to add arguments&lt;/p&gt;

&lt;p&gt;   -user user -password password&lt;/p&gt;

&lt;p&gt;I believe applications that do not use system authentication can continue to use the NetworkServerControl constructors that do not take a user name &amp;amp; password.&lt;/p&gt;

&lt;p&gt;So are those two steps &quot;painful&quot; for an application picking up a new release of its database engine which will close a security hole?&lt;/p&gt;</comment>
                            <comment id="12579444" author="rhillegas" created="Mon, 17 Mar 2008 14:10:13 +0000"  >&lt;p&gt;Could someone crisply state the compatibility implications of what is currently checked in? I think that SystemPrivilegesBehaviour.html describes potential 10.5 issues.&lt;/p&gt;</comment>
                            <comment id="12579533" author="kmarsden" created="Mon, 17 Mar 2008 17:46:25 +0000"  >&lt;p&gt;I think it is more painful than just that because users now have to &lt;br/&gt;
manage the password, adding some sort of ui to accept the password and &lt;br/&gt;
possibly making scripts that could once run unattended now need an &lt;br/&gt;
attendant.  If I understand correctly, in  a later release  they will &lt;br/&gt;
also need to change their policy file and start will also be &lt;br/&gt;
impacted.    I am not saying we shouldn&apos;t make these changes for &lt;br/&gt;
security&apos;s sake, just that we should group them together so that we &lt;br/&gt;
don&apos;t introduce new incompatibilities with every new release.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;

</comment>
                            <comment id="12580490" author="mzaun" created="Wed, 19 Mar 2008 18:27:31 +0000"  >&lt;p&gt;Not much to add to the description by Dan of the user-visible changes with NetworkServer shutdown authentication, this is pretty much it.  But to restate and summarize:&lt;/p&gt;

&lt;p&gt;1) If running derby server without authentication: no backward compatibility issues.  (The old command-line usage, APIs, and derby tests continue to work.)&lt;/p&gt;

&lt;p&gt;2) If running a derby server with authentication on:&lt;br/&gt;
    a)  The command-line usage of NetworkServerControl to shutdown the sever changes:&lt;br/&gt;
            java org.apache.derby.drda.NetworkServerControl shutdown&lt;br/&gt;
        results in an exception:&lt;br/&gt;
            08004:Connection authentication failure occurred.  Reason: Invalid authentication..&lt;/p&gt;

&lt;p&gt;        The remedy is to provide credentials:&lt;br/&gt;
            java org.apache.derby.drda.NetworkServerControl shutdown -user &amp;lt;user&amp;gt; -password &amp;lt;password&amp;gt;&lt;/p&gt;

&lt;p&gt;    b)  The NetworkServerControl API usage to programatically shutdown a server changes:&lt;br/&gt;
            NetworkServerControl nsc = new NetworkServerControl();&lt;br/&gt;
            nsc.shutdown();&lt;br/&gt;
        results in a java.sql.SQLException: Connection authentication failure occurred.  Reason: Invalid authentication..&lt;/p&gt;

&lt;p&gt;        The remedy is provide credentials to the NetworkServerControl constructor:&lt;br/&gt;
            NetworkServerControl nsc = new NetworkServerControl(&quot;user&quot;, &quot;password&quot;);&lt;br/&gt;
            nsc.shutdown();&lt;/p&gt;

&lt;p&gt;    c) Note that there is an edge case of b), which the current implementation only addresses poorly:&lt;br/&gt;
            NetworkServerControl nsc = new NetworkServerControl();&lt;br/&gt;
            nsc.start(console);&lt;br/&gt;
            ...&lt;br/&gt;
            nsc.shutdown();&lt;br/&gt;
        currently fails with above&apos;s SQLException.  This is because of an asymmetrie we currently have: we don&apos;t require credentials when bringing up a server but we do require them when shutting down.&lt;/p&gt;

&lt;p&gt;        There is an easy workaround, however:&lt;br/&gt;
            NetworkServerControl nsc = new NetworkServerControl();&lt;br/&gt;
            nsc.start(console);&lt;br/&gt;
            ...&lt;br/&gt;
            NetworkServerControl nscauth = new NetworkServerControl(&quot;user&quot;, &quot;password&quot;); &lt;br/&gt;
            nscauth.shutdown();&lt;/p&gt;

&lt;p&gt;    d)  If users have their own tests that use derby&apos;s junit test framework, they&apos;ll have to use a test decorator that takes user credential arguments.&lt;/p&gt;

&lt;p&gt;    e) I&apos;m not sure if users can programatically use derby&apos;s NetworkServerControlImpl &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; class to shutdown the server, but if so, they&apos;ll have to use an instance that has been constructed with user credential arguments, analog to b).&lt;/p&gt;

&lt;p&gt;One more item is a not a backward compatibility issue: When running with authentication on, I think the server already requires user credential in connection URLs, for example:&lt;br/&gt;
    connect &apos;jdbc:derby://localhost:1527/;shutdown=true&apos;;&lt;br/&gt;
fails but&lt;br/&gt;
    connect &apos;jdbc:derby://localhost:1527/;shutdown=true;user=user;password=password&apos;;&lt;br/&gt;
succeeds in 10.3 already.&lt;/p&gt;

&lt;p&gt;I don&apos;t have a strong opinion whether the shutdown authentication feature should be bundled with shutdown authorization checks later or not, but it would be nice to have a better solution for 2c).&lt;/p&gt;</comment>
                            <comment id="12580510" author="djd" created="Wed, 19 Mar 2008 19:11:05 +0000"  >&lt;p&gt;Just to add I think the current commit changes fix two bugs:&lt;/p&gt;

&lt;p&gt;1) If a network server shutdown also shuts down the database engine and authentication is enabled then previously the database shutdown would fail. E.g. a clean shutdown would not occur and recovery would be needed.&lt;/p&gt;

&lt;p&gt;2) Any user on the same machine could shutdown any network server even if they did not posses any valid authentication credentials.&lt;/p&gt;</comment>
                            <comment id="12580515" author="rhillegas" created="Wed, 19 Mar 2008 19:41:24 +0000"  >&lt;p&gt;Thanks to Martin and Dan for the crisp summary of the existing compatibility issues. I think that that we have fixed a very serious security problem. We should keep this more secure behavior in the 10.4 release even though, as Kathey points out, the extra security will cause extra pain.&lt;/p&gt;

&lt;p&gt;I think this is pretty much how the industry responds to serious security breaches today. The trend is to push security patches to the field as soon as the patches are available and not defer them for a half year.&lt;/p&gt;</comment>
                            <comment id="12580520" author="djd" created="Wed, 19 Mar 2008 19:58:29 +0000"  >&lt;p&gt;What I should have said was the current commit &lt;b&gt;attempts to&lt;/b&gt; fix two bugs:&lt;/p&gt;

&lt;p&gt;Given &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3537&quot; title=&quot;Invalid use shutdown authentication checks in NetworkServerControlImpl.directShutdown() &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3537&quot;&gt;&lt;del&gt;DERBY-3537&lt;/del&gt;&lt;/a&gt;  and the behaviour seen in &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; I&apos;m not convinced that it does fix this:&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) Any user on the same machine could shutdown any network server even if they did not posses any valid authentication credentials.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3534?focusedCommentId=12578892#action_12578892&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-3534?focusedCommentId=12578892#action_12578892&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;edit to refer to correct problem&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="12580533" author="kmarsden" created="Wed, 19 Mar 2008 20:13:32 +0000"  >&lt;p&gt;The issue reported with:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3534?focusedCommentId=12578892#action_12578892&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-3534?focusedCommentId=12578892#action_12578892&lt;/a&gt;&lt;br/&gt;
where I thought the server was not coming down was user error.  The test was bringing the server back &lt;br/&gt;
up quickly and I thought it wasn&apos;t going down.&lt;/p&gt;</comment>
                            <comment id="12581103" author="kmarsden" created="Fri, 21 Mar 2008 15:59:20 +0000"  >&lt;p&gt;Will there be documentation updates and a release note for this issue?&lt;br/&gt;
It seems like it would make sense to file a separate issue for the work that&lt;br/&gt;
has been done and submit doc changes and releaseNote with that, then it &lt;br/&gt;
can be resolved and show up in the 10.4 release notes.&lt;/p&gt;</comment>
                            <comment id="12581199" author="mzaun" created="Fri, 21 Mar 2008 22:02:45 +0000"  >&lt;p&gt;&amp;gt; Will there be documentation updates and a release note for this issue? &lt;/p&gt;

&lt;p&gt;I&apos;m working on a documentation update and a release note proposal for NetworkServerControl authentication.&lt;/p&gt;</comment>
                            <comment id="12584379" author="mzaun" created="Wed, 2 Apr 2008 03:22:01 +0100"  >&lt;p&gt;Created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3585&quot; title=&quot;Document user authentication support for network server shutdown&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3585&quot;&gt;&lt;del&gt;DERBY-3585&lt;/del&gt;&lt;/a&gt; for Release Note and documentation update proposal.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12344126">DERBY-1387</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12390228">DERBY-3495</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12365287">DERBY-2466</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12365355">DERBY-2470</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12391033">DERBY-3535</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12394786">DERBY-3644</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12361033">DERBY-2264</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12391013">DERBY-3532</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12393760">DERBY-3614</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12535903">DERBY-5548</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12390071">DERBY-3491</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12359514" name="DERBY-2109-02.diff" size="57996" author="mzaun" created="Tue, 12 Jun 2007 15:03:54 +0100"/>
                            <attachment id="12359513" name="DERBY-2109-02.stat" size="669" author="mzaun" created="Tue, 12 Jun 2007 15:03:54 +0100"/>
                            <attachment id="12359521" name="DERBY-2109-04.diff" size="10858" author="mzaun" created="Tue, 12 Jun 2007 16:03:52 +0100"/>
                            <attachment id="12359520" name="DERBY-2109-04.stat" size="268" author="mzaun" created="Tue, 12 Jun 2007 16:03:50 +0100"/>
                            <attachment id="12367172" name="DERBY-2109-05and06.diff" size="43156" author="mzaun" created="Sat, 6 Oct 2007 01:47:40 +0100"/>
                            <attachment id="12367171" name="DERBY-2109-05and06.stat" size="940" author="mzaun" created="Sat, 6 Oct 2007 01:47:39 +0100"/>
                            <attachment id="12371132" name="DERBY-2109-07.diff" size="82195" author="mzaun" created="Thu, 6 Dec 2007 13:48:30 +0000"/>
                            <attachment id="12371131" name="DERBY-2109-07.stat" size="1482" author="mzaun" created="Thu, 6 Dec 2007 13:48:28 +0000"/>
                            <attachment id="12372913" name="DERBY-2109-08.diff" size="85260" author="mzaun" created="Thu, 10 Jan 2008 15:47:59 +0000"/>
                            <attachment id="12372912" name="DERBY-2109-08.stat" size="1548" author="mzaun" created="Thu, 10 Jan 2008 15:47:59 +0000"/>
                            <attachment id="12373006" name="DERBY-2109-08_addendum.diff" size="5086" author="mzaun" created="Fri, 11 Jan 2008 20:45:06 +0000"/>
                            <attachment id="12373005" name="DERBY-2109-08_addendum.stat" size="328" author="mzaun" created="Fri, 11 Jan 2008 20:45:06 +0000"/>
                            <attachment id="12374963" name="DERBY-2109-09.diff" size="106061" author="mzaun" created="Thu, 7 Feb 2008 13:17:03 +0000"/>
                            <attachment id="12374962" name="DERBY-2109-09.stat" size="1931" author="mzaun" created="Thu, 7 Feb 2008 13:17:02 +0000"/>
                            <attachment id="12376650" name="DERBY-2109-10.diff" size="111513" author="mzaun" created="Wed, 27 Feb 2008 17:04:06 +0000"/>
                            <attachment id="12376649" name="DERBY-2109-10.stat" size="2087" author="mzaun" created="Wed, 27 Feb 2008 17:04:06 +0000"/>
                            <attachment id="12376699" name="DERBY-2109-11.diff" size="120540" author="mzaun" created="Thu, 28 Feb 2008 07:52:00 +0000"/>
                            <attachment id="12376698" name="DERBY-2109-11.stat" size="2447" author="mzaun" created="Thu, 28 Feb 2008 07:52:00 +0000"/>
                            <attachment id="12376783" name="DERBY-2109-12.diff" size="126455" author="mzaun" created="Fri, 29 Feb 2008 01:14:15 +0000"/>
                            <attachment id="12376782" name="DERBY-2109-12.stat" size="2558" author="mzaun" created="Fri, 29 Feb 2008 01:14:15 +0000"/>
                            <attachment id="12373208" name="SystemPrivilegesBehaviour.html" size="16394" author="mzaun" created="Tue, 15 Jan 2008 22:42:36 +0000"/>
                            <attachment id="12359282" name="derby-2109-03-javadoc-see-tags.diff" size="4583" author="kristwaa" created="Fri, 8 Jun 2007 15:12:29 +0100"/>
                            <attachment id="12354506" name="systemPrivs.html" size="62716" author="rhillegas" created="Thu, 29 Mar 2007 13:47:26 +0100"/>
                            <attachment id="12349693" name="systemPrivs.html" size="60606" author="rhillegas" created="Fri, 26 Jan 2007 15:07:49 +0000"/>
                            <attachment id="12348599" name="systemPrivs.html" size="56901" author="rhillegas" created="Tue, 9 Jan 2007 23:07:02 +0000"/>
                            <attachment id="12346941" name="systemPrivs.html" size="32642" author="rhillegas" created="Mon, 11 Dec 2006 20:35:12 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12389725">DERBY-3476</subtask>
                            <subtask id="12389726">DERBY-3477</subtask>
                            <subtask id="12389879">DERBY-3482</subtask>
                            <subtask id="12389946">DERBY-3488</subtask>
                            <subtask id="12390228">DERBY-3495</subtask>
                            <subtask id="12390990">DERBY-3531</subtask>
                            <subtask id="12392879">DERBY-3585</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10361"><![CDATA[Security]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 27 Nov 2006 22:12:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30278</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ed3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36145</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                </customfields>
    </item>
</channel>
</rss>