<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:12:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1142/DERBY-1142.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1142] Metadata calls leak memory</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1142</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When calling a DatabaseMetaData method that returns a ResultSet,&lt;br/&gt;
memory is leaked. A loop like this (using the embedded driver)&lt;/p&gt;

&lt;p&gt;  while (true) &lt;/p&gt;
{
    ResultSet rs = dmd.getSchemas();
    rs.close();
  }

&lt;p&gt;will eventually cause an OutOfMemoryError.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12330567">DERBY-1142</key>
            <summary>Metadata calls leak memory</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Mar 2006 02:51:23 +0000</created>
                <updated>Fri, 1 Sep 2006 13:00:51 +0100</updated>
                            <resolved>Fri, 1 Sep 2006 13:00:51 +0100</resolved>
                                    <version>10.1.2.1</version>
                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12371450" author="knutanders" created="Thu, 23 Mar 2006 03:08:07 +0000"  >&lt;p&gt;Attached repro. With Derby 10.1.2.1 and Sun JVM 1.4.2,&lt;br/&gt;
OutOfMemoryError was thrown after about 80000 calls to&lt;br/&gt;
DatabaseMetaData.getCatalogs().&lt;/p&gt;</comment>
                            <comment id="12371561" author="andersmo" created="Thu, 23 Mar 2006 21:30:47 +0000"  >&lt;p&gt;The direct cause of the memory usage is in the org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext class, more specifically its member &quot;acts&quot;, which is a Vector of Activation instances. It seems one Activation is added to the vector for every dmd.getSchemas() execution, but they are never removed. I&apos;ve drilled down to this using NetBeans&apos; memory profiler and debugger and IBMs HeapRoots utility in concert. While I can hunt through heap dumps I can&apos;t say that I know enough about Derby internals yet to suggest how to fix this. I&apos;ve tried explicitly closing the preparedstatement in DatabaseMetaData before returning, but to no effect. I need some time to figure out how all these things (activations, prepared statements, connections and connection contexts) fit together. =)&lt;/p&gt;</comment>
                            <comment id="12371579" author="knutanders" created="Thu, 23 Mar 2006 23:52:07 +0000"  >&lt;p&gt;Thanks for looking into this, Anders!&lt;/p&gt;

&lt;p&gt;The activation is removed from acts when Activation.close() is&lt;br/&gt;
called. Normally, EmbedResultSet.close() calls theResults.finish()&lt;br/&gt;
(implemented in BasicNoPutResultSetImpl), which calls&lt;br/&gt;
activation.close(). From BasicNoPutResultSetImpl.finishAndRTS():&lt;/p&gt;

&lt;p&gt;  if (isTopResultSet &amp;amp;&amp;amp; activation.isSingleExecution())&lt;br/&gt;
      activation.close();&lt;/p&gt;

&lt;p&gt;For the metadata query, isSingleExecution() returns false, hence&lt;br/&gt;
activation.close() isn&apos;t called when the result set is closed. It&lt;br/&gt;
seems like isSingleExecution() is true only if a Statement is used,&lt;br/&gt;
but the metadata query uses a PreparedStatement.&lt;/p&gt;

&lt;p&gt;As you noticed, the PreparedStatement is not being closed. However, I&lt;br/&gt;
found this in EmbedResultSet.close():&lt;/p&gt;

&lt;p&gt;    if (forMetaData) {&lt;br/&gt;
      LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();&lt;br/&gt;
      if (lcc.getActivationCount() &amp;gt; 1) &lt;/p&gt;
{
        // we do not want to commit here as there seems to be other
        // statements/resultSets currently opened for this connection.
      }
&lt;p&gt; else if (owningStmt != null) &lt;/p&gt;
{
        // allow the satement to commit if required.
        owningStmt.resultSetClosing(this);
      }
&lt;p&gt;    } else if (owningStmt != null) &lt;/p&gt;
{
      // allow the satement to commit if required.
      owningStmt.resultSetClosing(this);
    }

&lt;p&gt;Could we solve the problem by invoking owningStmt.close() when&lt;br/&gt;
forMetaData is true and the activation count is not greater than one?&lt;/p&gt;</comment>
                            <comment id="12371598" author="djd" created="Fri, 24 Mar 2006 01:44:13 +0000"  >&lt;p&gt;May be unrelated but part of my example patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-872&quot; title=&quot;Fix how to measure performance of lob streaming&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-872&quot;&gt;&lt;del&gt;DERBY-872&lt;/del&gt;&lt;/a&gt; I had a feeling was a more generic issue about activations not being closed correctly in some situations, though I think it may have only been related to single use activations. It&apos;s on  my list to extract that code and see if it made sense by itself and passed derbyall. &lt;/p&gt;</comment>
                            <comment id="12371700" author="knutanders" created="Fri, 24 Mar 2006 18:36:17 +0000"  >&lt;p&gt;My proposed solution actually fixed the memory leak, but broke&lt;br/&gt;
derbyall. These tests failed:&lt;/p&gt;

&lt;p&gt;derbyall/derbyall.fail:jdbcapi/odbc_metadata.java&lt;br/&gt;
derbyall/derbyall.fail:jdbcapi/bestrowidentifier.sql&lt;br/&gt;
derbyall/derbynetmats/derbynetmats.fail:jdbcapi/bestrowidentifier.sql&lt;br/&gt;
derbyall/derbynetclientmats/derbynetmats.fail:jdbcapi/bestrowidentifier.sql&lt;/p&gt;</comment>
                            <comment id="12419953" author="djd" created="Mon, 10 Jul 2006 13:21:21 +0100"  >&lt;p&gt;The subset of changes from the draft patch in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-827&quot; title=&quot;Performance can be improved by re-using language ResultSets across Activation executions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-827&quot;&gt;&lt;del&gt;DERBY-827&lt;/del&gt;&lt;/a&gt; (not 872 as I mis-typed previously) do not address this issue. I&apos;m looking at moving those changes into Derby, but no help here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12420085" author="djd" created="Mon, 10 Jul 2006 22:08:07 +0100"  >&lt;p&gt;An addition to the subset of changes of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-827&quot; title=&quot;Performance can be improved by re-using language ResultSets across Activation executions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-827&quot;&gt;&lt;del&gt;DERBY-827&lt;/del&gt;&lt;/a&gt; fixed the issue, increasing the number of iterations from ~10,000 to over a milllion with no error when limited to 10Mb of heap.&lt;br/&gt;
One part of the change is to close single use activations  in the close method of EmbedResultSet rather than waiting for some other time, need to figure out what that time was. Will attach the patch for this soon.&lt;br/&gt;
The second part is to mark EmbedResultSet as single use activations when they are created for meta data.&lt;/p&gt;</comment>
                            <comment id="12420091" author="djd" created="Mon, 10 Jul 2006 22:17:44 +0100"  >&lt;p&gt;Draft patch that closes an EmbedResultSet&apos;s single use activation when the result set is closed. Previously the activations&apos; close would have been delayed until after the EmbedResultSet was garbage collected and some activilty occured in the connection that caused the list of activations to be scanned. Comment needs some comments before being applied.&lt;/p&gt;</comment>
                            <comment id="12420461" author="djd" created="Wed, 12 Jul 2006 06:46:47 +0100"  >&lt;p&gt;Two patches applied (420656 &amp;amp; 421015) that stop the memory leak shown in the repro.&lt;/p&gt;

&lt;p&gt;A leak still exists if the repro is modified to not close the ResultSet.&lt;br/&gt;
This is because the activations marked unused in the language connection context are only cleaned up if a commit or rollback is executed.&lt;br/&gt;
In this code no such call is made.&lt;/p&gt;

&lt;p&gt;One solution is to look for unused activations when an activation is added to GenericLanguageConnectionContext (addActivation method).&lt;br/&gt;
A couple of possible solutions to avoid overhead when no check is needed are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Have Activation.markUnused() set an boolean (unsynchronized) flag in the LCC to indicate it has some unused activations&lt;/li&gt;
	&lt;li&gt;Only perform the check if the number of activations is beyond some threshold.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Not sure how urgent it is needed to solve this issue, if the application calls commit or rollback in any way (as most applications will at some point)&lt;br/&gt;
then memory leak will not be seen. This repro is an extereme edge case.&lt;/p&gt;</comment>
                            <comment id="12421981" author="djd" created="Tue, 18 Jul 2006 22:57:51 +0100"  >&lt;p&gt;Since this is an extreme edge case now, I&apos;m no longer working on it.&lt;/p&gt;</comment>
                            <comment id="12429260" author="mayureshnirhali" created="Sun, 20 Aug 2006 12:28:38 +0100"  >&lt;p&gt;If the singleUseActivation is closed in the finalize method of EmdebResultSet then the memory leak is not observed even in this extreme case. While, this may not be a complete fix, but certainly one of fixes.&lt;br/&gt;
Please see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-418&quot; title=&quot;outofmemory error when running large query in autocommit=false mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-418&quot;&gt;&lt;del&gt;DERBY-418&lt;/del&gt;&lt;/a&gt; for more details.&lt;/p&gt;</comment>
                            <comment id="12432128" author="knutanders" created="Fri, 1 Sep 2006 13:00:51 +0100"  >&lt;p&gt;Verified that the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-418&quot; title=&quot;outofmemory error when running large query in autocommit=false mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-418&quot;&gt;&lt;del&gt;DERBY-418&lt;/del&gt;&lt;/a&gt; also fixes the remaining problems for this issue.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12336595" name="1142_close_single_use_activations_draft.txt" size="1894" author="djd" created="Mon, 10 Jul 2006 22:17:42 +0100"/>
                            <attachment id="12324460" name="metadataloop.java" size="647" author="knutanders" created="Thu, 23 Mar 2006 03:08:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 23 Mar 2006 21:30:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22332</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy14pj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40413</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>