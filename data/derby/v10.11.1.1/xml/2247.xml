<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:49:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2247/DERBY-2247.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2247] provide set methods for blob in embeded driver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2247</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description></description>
                <environment>all</environment>
        <key id="12360658">DERBY-2247</key>
            <summary>provide set methods for blob in embeded driver</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12343409">DERBY-1341</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anurag">Anurag Shekhar</assignee>
                                    <reporter username="anurag">Anurag Shekhar</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jan 2007 08:17:19 +0000</created>
                <updated>Fri, 15 Jun 2007 13:33:51 +0100</updated>
                            <resolved>Wed, 13 Jun 2007 17:10:09 +0100</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12465535" author="anurag" created="Wed, 17 Jan 2007 20:08:14 +0000"  >&lt;p&gt;description of patch&lt;br/&gt;
I have added set methods for blob in embedded driver. The set methods are provided by introducing a new class LOBStreamControl. This class uses a temporary file if the data size is more than 4k. Random access file is used to read/write to the file. This class provides methods to use the data as byte array and streams to read/write data bytes.&lt;/p&gt;

&lt;p&gt;new files&lt;br/&gt;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java&lt;/p&gt;

&lt;p&gt;This class maintains the data bytes once the data is materialized, which can happen when&lt;br/&gt;
1. The blob is smaller than one page in that case there won&apos;t be any reference to store pages in blob class.&lt;br/&gt;
2. At the first call to setbytes or when a output stream is retrieved from the blob. In this case the data will be materialized in LOBStreamControl class.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/jdbc/LOBOutputStream.java&lt;br/&gt;
java/engine/org/apache/derby/impl/jdbc/LOBInputStream.java&lt;/p&gt;

&lt;p&gt;This two classes operate on LOBStreamControl to read or write bytes.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java&lt;/p&gt;

&lt;p&gt;EmbedBlob class is modified to use LOBStreamControl. current implementation uses bytes array within the same class, now this is moved to  LOBStreamControl. All read and write method is forwarded to LOBStreamControl if the data is materialized.&lt;/p&gt;

&lt;p&gt;java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
New sql state is added for closed stream.&lt;/p&gt;

&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/util/derby_tests.policy&lt;/p&gt;

&lt;p&gt;added permission to read/write/delete in system&apos;s temporary directory&lt;/p&gt;



&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestBlobSetMethods.java&lt;/p&gt;

&lt;p&gt;Test case for embedded blob set methods.&lt;/p&gt;

&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobStreamTest.java&lt;/p&gt;

&lt;p&gt;Test case for blob stream.&lt;/p&gt;

&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/suites/jdbc40.runall&lt;br/&gt;
added the tests part of jdbc40 test suite&lt;/p&gt;

&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNetClient.exclude&lt;/p&gt;

&lt;p&gt;excluded the test cases from network driver.&lt;/p&gt;









</comment>
                            <comment id="12465536" author="anurag" created="Wed, 17 Jan 2007 20:09:26 +0000"  >&lt;p&gt;please have a look at the comments in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1341&quot; title=&quot;LOB set method(s) are currently no supported, but part of the Java 1.4 JDBC interface&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1341&quot;&gt;&lt;del&gt;DERBY-1341&lt;/del&gt;&lt;/a&gt; for some discussion about this patch.&lt;/p&gt;</comment>
                            <comment id="12465537" author="anurag" created="Wed, 17 Jan 2007 20:11:24 +0000"  >&lt;p&gt;this patch doesn&apos;t address encryption issue when the data base is encrypted. I will submit another patch to add support for encryption in temporary file.&lt;/p&gt;</comment>
                            <comment id="12465549" author="djd" created="Wed, 17 Jan 2007 20:33:49 +0000"  >&lt;p&gt;Why use the system temp folder and not the database&apos;s? The database&apos;s temp folder will be cleaned up on re-boot.&lt;/p&gt;

&lt;p&gt;Could a existing store file be used so that encrpytion support would already be there?&lt;/p&gt;</comment>
                            <comment id="12465550" author="djd" created="Wed, 17 Jan 2007 20:38:10 +0000"  >&lt;hr /&gt;
&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestBlobSetMethods.java&lt;/p&gt;

&lt;p&gt;Test case for embedded blob set methods.&lt;/p&gt;

&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobStreamTest.java&lt;/p&gt;

&lt;p&gt;Test case for blob stream. &lt;/p&gt;

&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/suites/jdbc40.runall&lt;br/&gt;
added the tests part of jdbc40 test suite&lt;/p&gt;

&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/suites/DerbyNetClient.exclude&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Q1 - The Blob set methods are part of JDBC 3 so can this test be in tests.jdbcapi so it can be run on all JVMs rather than just Java SE 6?&lt;/p&gt;

&lt;p&gt;Q2 - Could the test be written as a JUnit test and not an old harness test? &lt;/p&gt;
</comment>
                            <comment id="12465559" author="anurag" created="Wed, 17 Jan 2007 21:01:29 +0000"  >&lt;p&gt;&amp;gt;Why use the system temp folder and not the database&apos;s? The database&apos;s temp folder will be cleaned up on re-boot.&lt;/p&gt;

&lt;p&gt;&amp;gt;Could a existing store file be used so that encrpytion support would already be there?&lt;/p&gt;

&lt;p&gt;I was planning to use database tmp directory and one of the patch in the parent issue uses database tmp directory and StoreFactory but lattered in the disscussion it was concluded that the store api and tmp file system are not supposed to be used for creating random files which are not part of database.&lt;/p&gt;</comment>
                            <comment id="12465560" author="anurag" created="Wed, 17 Jan 2007 21:03:09 +0000"  >&lt;p&gt;Q1 - The Blob set methods are part of JDBC 3 so can this test be in tests.jdbcapi so it can be run on all JVMs rather than just Java SE 6?&lt;/p&gt;

&lt;p&gt;Yes I should do that I will modify the location and test suit entries.&lt;/p&gt;

&lt;p&gt;Q2 - Could the test be written as a JUnit test and not an old harness test? &lt;/p&gt;

&lt;p&gt;They are actually junit tests I should add the entry in junit test suit.&lt;/p&gt;</comment>
                            <comment id="12465625" author="djd" created="Thu, 18 Jan 2007 00:32:51 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; Why use the system temp folder and not the database&apos;s? The database&apos;s temp folder will be cleaned up on re-boot.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;&amp;gt; Could a existing store file be used so that encrpytion support would already be there?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I was planning to use database tmp directory and one of the patch in the parent issue uses database tmp directory and StoreFactory but lattered in the disscussion it was concluded that the store api and tmp file system are not supposed to be used for creating random files which are not part of database.&lt;/p&gt;

&lt;p&gt;I thought that discussion was about using store code in the network client., whereas this is about using the code in embedded. With embedded the code is there and will by definition already have the correct security permissions set up. &lt;/p&gt;</comment>
                            <comment id="12466061" author="anurag" created="Fri, 19 Jan 2007 14:29:36 +0000"  >&lt;p&gt;changes made in  derby-2247v2-using_StoreFactory.diff  from previous patch&lt;/p&gt;

&lt;p&gt;LobStreamControl class is using StorageFactory to create a file in database temporary file system. &lt;br/&gt;
There is no change in policy file.&lt;br/&gt;
both tests are now part of junit framework but still run under jdbc4 (jdk1.6) as they are using some jdbc4.0 methods (create and free). I will be enabling the network drivers set method test cases to test embedded driver too in a separate patch.&lt;/p&gt;

&lt;p&gt;Additional files modified in this patch&lt;br/&gt;
java/engine/org/apache/derby/io/StorageFactory.java&lt;br/&gt;
added a new method to create temporary file (StorageFactory.createTemporaryFile)&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/io/BaseStorageFactory.java&lt;br/&gt;
Implemented method createTemporaryFile. This method takes care of creating a unique file in database temporary file system.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/io/StorageRandomAccessFile.java&lt;br/&gt;
added a new method read(byte[] b, int off, int len). This method is used by LobStreamControl to read bytes of given length or the remaining bytes whichever is less. In the absence of this method it need to call read in loop. The only implementation of StorageRandomAccessFile also extends from RandomAccessFile so no new implementation is required.&lt;/p&gt;

&lt;p&gt;  java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptRandomAccessFile.java&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptBaseStorageFactory.java&lt;/p&gt;

&lt;p&gt;added new methods in these class which forward the call to corresponding methods in torageRandomAccessFile and BaseStorageFactory.&lt;/p&gt;

</comment>
                            <comment id="12466066" author="anurag" created="Fri, 19 Jan 2007 14:52:12 +0000"  >&lt;p&gt;The two patch uses two different implementation for creating temporary files&lt;br/&gt;
1. Uses system temp directory.&lt;br/&gt;
2. uses database temp directory.&lt;/p&gt;

&lt;p&gt;I personally prefer 2nd because&lt;/p&gt;

&lt;p&gt;1. all the files related to one db is created in one location&lt;br/&gt;
2.  cleanup at the time of startup&lt;br/&gt;
3. You can be sure that we have write access. If general tmp system is used, we might get problems not discovered during boot. Right now derby doesn&apos;t asks user to provide a writable temp directory unless its a readonly database. &lt;/p&gt;

&lt;p&gt;please give your views.&lt;/p&gt;</comment>
                            <comment id="12467154" author="oysteing" created="Wed, 24 Jan 2007 21:18:12 +0000"  >&lt;p&gt;I agree with Anurag that it is best to use the database temp directory for temporary storage of LOBs.  &lt;/p&gt;</comment>
                            <comment id="12470452" author="narayanan" created="Tue, 6 Feb 2007 05:29:53 +0000"  >&lt;p&gt;Anurag&apos;s code looks very good. My comments are mostly nits.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java&lt;br/&gt;
------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Pls mention reason for choosing buffer size as 4096, if there was a particular&lt;br/&gt;
reason for choosing this value. Otherwise pls mention that it was a random&lt;br/&gt;
value. &lt;/p&gt;

&lt;p&gt;init - line nos 72 and 74&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Can the Monitor and the DataFactory be resused instead of doing a findService,&lt;br/&gt;
findServiceModule each time?&lt;/p&gt;

&lt;p&gt;line no 77&lt;br/&gt;
----------&lt;br/&gt;
String str = df.getStorageFactory().getTempDir().getPath(); (str is not being&lt;br/&gt;
used anywhere)&lt;/p&gt;

&lt;p&gt;line nos 171,196,229&lt;br/&gt;
--------------------&lt;/p&gt;

&lt;p&gt;write methods&lt;/p&gt;

&lt;p&gt;I notice that you have repeated the code snippet&lt;/p&gt;

&lt;p&gt;		if (isBytes) {&lt;br/&gt;
            if (pos + 1 &amp;lt; MAX_BUF_SIZE) {&lt;br/&gt;
                byte [] bytes = &lt;/p&gt;
{(byte) b}
&lt;p&gt;;&lt;br/&gt;
                updateData(bytes, 0, 1, pos);&lt;br/&gt;
                return pos + 1;&lt;br/&gt;
            } else &lt;/p&gt;
{
                init(dataBytes, pos);
            }
&lt;p&gt;        }&lt;br/&gt;
        if (tmpFile.getFilePointer() != pos)&lt;br/&gt;
            tmpFile.seek(pos);&lt;br/&gt;
        tmpFile.write(b);&lt;br/&gt;
        return tmpFile.getFilePointer();&lt;/p&gt;

&lt;p&gt;in all the three set methods. Is it possible that you can combine the code into one method that can&lt;br/&gt;
be called from all the three set methods?&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java&lt;br/&gt;
-------------------------------------------------------&lt;br/&gt;
can materialized can be initialized to false during declaration?&lt;br/&gt;
can control be initialized to null during declaration?&lt;br/&gt;
set methods&lt;br/&gt;
-----------&lt;br/&gt;
you check the following in the set methods&lt;/p&gt;

&lt;p&gt; if (pos - 1 &amp;gt; length())&lt;br/&gt;
	throw Util.generateCsSQLException(&lt;br/&gt;
		SQLState.BLOB_POSITION_TOO_LARGE, new Long(pos));&lt;br/&gt;
 if (pos &amp;lt; 1)&lt;br/&gt;
	throw Util.generateCsSQLException(&lt;br/&gt;
		SQLState.BLOB_BAD_POSITION, new Long(pos));&lt;/p&gt;

&lt;p&gt;But would&apos;nt isValidPostion(pos) in control.write take care of this and throw&lt;br/&gt;
appropriate exception? &lt;/p&gt;

&lt;p&gt;truncate&lt;br/&gt;
-------&lt;br/&gt;
can you move length checks inside truncate methods into control class similar to&lt;br/&gt;
pos checks?&lt;/p&gt;

&lt;p&gt;Some general comments&lt;br/&gt;
---------------------&lt;br/&gt;
There are a few missing javadocs and some javadocs missing the @throws tags.&lt;/p&gt;</comment>
                            <comment id="12472134" author="anurag" created="Sun, 11 Feb 2007 21:32:45 +0000"  >&lt;p&gt;Thanks Narayanan for looking at the patch.&lt;/p&gt;

&lt;p&gt;&amp;gt;Pls mention reason for choosing buffer size as 4096, if there was a particular&lt;br/&gt;
reason for choosing this value. Otherwise pls mention that it was a random&lt;br/&gt;
value. &lt;/p&gt;

&lt;p&gt;it&apos;s a randomly selected value. added a comment to indicate that.&lt;/p&gt;

&lt;p&gt;&amp;gt;Can the Monitor and the DataFactory be resused instead of doing a findService,&lt;br/&gt;
findServiceModule each time? &lt;/p&gt;

&lt;p&gt;It can be cached but init is a one time operation. If we want to cache it for a database we will have to add the varriable in connection. I don&apos;t think these calls are expensive enough to justify that.&lt;/p&gt;

&lt;p&gt;&amp;gt;String str = df.getStorageFactory().getTempDir().getPath(); (str is not being&lt;br/&gt;
used anywhere) &lt;/p&gt;

&lt;p&gt;It was a leftover of my debugging code taken it off.&lt;/p&gt;

&lt;p&gt;&amp;gt;write methods &lt;br/&gt;
&amp;gt;in all the three set methods. Is it possible that you can combine the code into one method that can&lt;br/&gt;
be called from all the three set methods? &lt;/p&gt;

&lt;p&gt;these overloaded methods are calling out the overloaded methods in StorageRandomAccessFile so actually they are three diff. methods.&lt;/p&gt;

&lt;p&gt;&amp;gt;can materialized can be initialized to false during declaration?&lt;br/&gt;
&amp;gt;can control be initialized to null during declaration? &lt;/p&gt;

&lt;p&gt;false is the default value for uninitialized blob and null is default for uninitialized objects so it doesn&apos;t makes any diff.&lt;/p&gt;

&lt;p&gt;&amp;gt;you check the following in the set methods &lt;br/&gt;
&amp;gt;But would&apos;nt isValidPostion(pos) in control.write take care of this and throw&lt;br/&gt;
appropriate exception? &lt;/p&gt;

&lt;p&gt;I moved the check in not materialzed block as that won&apos;t go to LobStreamControl.&lt;/p&gt;

&lt;p&gt;&amp;gt;There are a few missing javadocs and some javadocs missing the @throws tags. &lt;/p&gt;

&lt;p&gt;added @throws &lt;/p&gt;</comment>
                            <comment id="12472588" author="kristwaa" created="Tue, 13 Feb 2007 09:17:23 +0000"  >&lt;p&gt;Patch &apos;derby-2247-v4-usingStoreFactory.diff&apos; is equal to the previous patch, except that white space and various other formatting issues have been fixed. Further, the test &apos;TestBlobSetMethods&apos; were renamed to &apos;BlobSetMethodsTest&apos; to follow the JUnit naming convention.&lt;/p&gt;

&lt;p&gt;Tests ran without failures, and I committed the patch (v4) with revision 506918.&lt;/p&gt;

&lt;p&gt;I would appreciate a follow-up patch to address some of my comments:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;LOBOutputStream&amp;#93;&lt;/span&gt;&lt;br/&gt;
 1) Can control be final?&lt;br/&gt;
 2) Comment why AIOOB is thrown instead of IOException?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;LOBInputStream&amp;#93;&lt;/span&gt;&lt;br/&gt;
 3) Can control be final?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;LOBStreamControl&amp;#93;&lt;/span&gt;&lt;br/&gt;
 4) Delete line that is commented out.&lt;br/&gt;
 5) JavaDoc for isValidPosition and -Offset, saying that they throw exceptions.&lt;br/&gt;
 6) Remove IOException from the throws-clause for isValidOffset?&lt;br/&gt;
 7) In write(byte[],int,int,long), all SQLExceptions except one (BLOB_INVALID_OFFSET) are silently ignored. Is this intended?&lt;br/&gt;
 8) In free(), is there a chance we ignore some exceptions?  If not, add a comment? Or, if it is possible, create a RuntimeException from the PAE and throw it as last resort?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;BlobSetMethodsTest&amp;#93;&lt;/span&gt;&lt;br/&gt;
 9) Comment why the test is currently only run in embedded in suite().&lt;br/&gt;
10) I think it would be good to split the testSetBytes into one test method for in-memory operation, and one for on disk operation.&lt;br/&gt;
11) In tearDown(), you could use &quot;Statement stmt = createStatement()&quot; and at last call super.tearDown().&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;LobStreamTest&amp;#93;&lt;/span&gt;&lt;br/&gt;
12) JavaDoc for testReadWriteNoParameters (and the method name) is a little off.&lt;br/&gt;
13) For the assertEquals comparing input and output, I think it should say &quot;Output does not match input&quot; or something similar.&lt;br/&gt;
14) Replace assertTrue(msg, false) with fail(msg).&lt;br/&gt;
15) Comment why the test is currently only run in embedded in suite().&lt;/p&gt;

&lt;p&gt;I&apos;m not setting to fixed, as I hope there will be a follow-up patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


&lt;p&gt;Good work! Thanks!&lt;/p&gt;</comment>
                            <comment id="12472739" author="knutanders" created="Tue, 13 Feb 2007 16:09:56 +0000"  >&lt;p&gt;Some post-commit questions/suggestions:&lt;/p&gt;

&lt;p&gt;1) Wouldn&apos;t it be simpler to write&lt;br/&gt;
   BaseStorageFactory.createTemporaryFile() in terms of&lt;br/&gt;
   File.createTempFile(String prefix, String suffix, File directory)?&lt;/p&gt;

&lt;p&gt;2) EmbedBlob.setBinaryStream() has one check for (pos - 1 &amp;gt; length)&lt;br/&gt;
   and one check for (pos &amp;gt; length()). Should the second test also use&lt;br/&gt;
   pos-1 and/or could they be written as one test?&lt;/p&gt;

&lt;p&gt;3) The second use of BLOB_POSITION_TOO_LARGE in&lt;br/&gt;
   EmbedBlob.setBinaryStream() lacks the position argument.&lt;/p&gt;

&lt;p&gt;4) EmbedBlob.truncate() has this code:&lt;br/&gt;
+            if (len &amp;gt; length())&lt;br/&gt;
+                throw Util.generateCsSQLException(&lt;br/&gt;
+                    SQLState.BLOB_NONPOSITIVE_LENGTH, new Long(pos));&lt;br/&gt;
Isn&apos;t the SQL state wrong here?&lt;/p&gt;

&lt;p&gt;5) LOBInputStream.read(byte[]) and read(byte[],int,int) contain this&lt;br/&gt;
   piece of code:&lt;br/&gt;
+            int ret = control.read(b, off, len, pos);&lt;br/&gt;
+            if (ret &amp;gt; 0) &lt;/p&gt;
{
+                pos += ret;
+                return ret;
+            }
&lt;p&gt;+            return -1;&lt;br/&gt;
Since a call to InputStream.read(byte[]...) theoretically can return&lt;br/&gt;
0, I think (ret &amp;gt; 0) should be changed to (ret &amp;gt;= 0) or perhaps (ret&lt;br/&gt;
!= -1).&lt;/p&gt;

&lt;p&gt;6) Couldn&apos;t LOBInputStream.read(byte[]) be implemented as&lt;br/&gt;
    public int read(byte[] b) throws IOException &lt;/p&gt;
{
        return read(b, 0, b.length);
    }
&lt;p&gt; ?&lt;/p&gt;

&lt;p&gt;7) Same comment for LOBOutputStream.write(byte[] b). Could be&lt;br/&gt;
   implemented as a call to write(b, 0, b.length).&lt;/p&gt;

&lt;p&gt;8) All the methods of LOBInputStream and LOBOutputStream start with&lt;br/&gt;
+        if (closed)&lt;br/&gt;
+            throw new IOException (&lt;br/&gt;
+                    MessageService.getTextMessage(&lt;br/&gt;
+                        SQLState.LANG_STREAM_CLOSED));&lt;br/&gt;
Perhaps the code would be a bit clearer and easier to keep consistent&lt;br/&gt;
if these checks were moved into a utility method?&lt;/p&gt;

&lt;p&gt;9) The patch introduced a new SQL state LANG_STREAM_CLOSED =&lt;br/&gt;
   &quot;42Z12&quot;. Since it starts with 42, the generated exceptions will be&lt;br/&gt;
   of type SQLSyntaxErrorException, which according to the javadoc&lt;br/&gt;
   indicate &quot;that the in-progress query has violated SQL syntax&lt;br/&gt;
   rules.&quot; Does this description match the situations where it is&lt;br/&gt;
   used?&lt;/p&gt;

&lt;p&gt;10) EmbedBlob&apos;s constructor has this code:&lt;br/&gt;
+            catch (IOException e) &lt;/p&gt;
{
+                throw StandardException.newException (null, e);
+            }
&lt;p&gt;I&apos;m a bit worried that passing null as message id could cause&lt;br/&gt;
problems. I think we will get a NullPointerException when&lt;br/&gt;
StandardException&apos;s constructor calls getSeverityFromIdentifier(null).&lt;/p&gt;

&lt;p&gt;11) LOBStreamControl.init() might ignore some exceptions.&lt;/p&gt;

&lt;p&gt;12) Is this calculation in LOBStreamControl.write() correct?&lt;br/&gt;
+            long finalLen = (dataBytes != null) ? dataBytes.length + b.length&lt;br/&gt;
+                    : b.length;&lt;br/&gt;
If (pos!=dataBytes.length) and/or (len!=b.length) finalLen will be too&lt;br/&gt;
large, won&apos;t it?&lt;/p&gt;

&lt;p&gt;13) LOBStreamControl.write: Do we need the if? I guess seek() would be&lt;br/&gt;
    a no-op anyway if getFilePointer() == pos.&lt;br/&gt;
+        if (tmpFile.getFilePointer() != pos)&lt;br/&gt;
+            tmpFile.seek(pos);&lt;/p&gt;</comment>
                            <comment id="12476339" author="anurag" created="Tue, 27 Feb 2007 19:44:22 +0000"  >&lt;p&gt;thanks Kristian and Knut for the review. I will be submitting a follow up patch to address the issues you have pointed out.&lt;/p&gt;</comment>
                            <comment id="12478106" author="anurag" created="Mon, 5 Mar 2007 17:23:38 +0000"  >&lt;p&gt;Description of patch&lt;br/&gt;
Removed commented code.&lt;br/&gt;
Corrected javadoc problems&lt;br/&gt;
removed redundent checks&lt;br/&gt;
removed check for pos before seek&lt;br/&gt;
removed read write method with single parameneter (byte []) from stream and Control class&lt;br/&gt;
Fix squlstate in truncate method&lt;br/&gt;
Changed the SQLState for closed stream to XCL53 (non sql state error class)&lt;br/&gt;
Added SQLState to the calls to StatdurdException&lt;/p&gt;</comment>
                            <comment id="12480521" author="tsuresh" created="Tue, 13 Mar 2007 19:04:53 +0000"  >&lt;p&gt;While doing some testing I ran into the LOBStreamControl.java in &lt;br/&gt;
the stack. Couple of minor questions.  &lt;/p&gt;

&lt;p&gt;1) LOBStreamControl.java : isValidPostion() &lt;br/&gt;
   if (pos &amp;gt; tmpFile.length())&lt;br/&gt;
         throw Util.generateCsSQLException(&lt;br/&gt;
           SQLState.BLOB_POSITION_TOO_LARGE, new Long(pos + 1));&lt;/p&gt;


&lt;p&gt;isValidPosition() is called on most of the read/write.  I think calling  &lt;br/&gt;
a file length call can be expensive for each read/write call. &lt;/p&gt;


&lt;p&gt;2) Are blobs written to temp files for some special cases ? &lt;br/&gt;
I was just using BaseJdbcTestCase.java: assertEquals(Blob b1, Blob b2) &lt;br/&gt;
method in my test. It was triggering the writes to temp &lt;br/&gt;
file through  LOBStreamControl.java ,  is this expected ?&lt;/p&gt;</comment>
                            <comment id="12484097" author="knutanders" created="Mon, 26 Mar 2007 11:19:15 +0100"  >&lt;p&gt;Thanks for the follow-up patch, Anurag! It addresses most of my comments. However, I can&apos;t see that it addresses my comments 1, 5 and 11. Kristian&apos;s questions 1-3, 5 and 7-15 and Suresh&apos;s questions are also unanswered. Are you planning to address and/or comment on these questions as well?&lt;/p&gt;

&lt;p&gt;Two follow-up questions to the fix of for my comment #12 (LOBStreamControl.write(byte[],int,int,long)):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;long finalLen = (dataBytes != null) ? dataBytes.length + b.length&lt;/li&gt;
	&lt;li&gt;: b.length;&lt;/li&gt;
	&lt;li&gt;if (finalLen &amp;lt; MAX_BUF_SIZE)&lt;br/&gt;
+            if (pos + b.length &amp;lt; MAX_BUF_SIZE)&lt;br/&gt;
                 return updateData(b, off, len, pos);&lt;br/&gt;
             else 
{
                 init(dataBytes, pos);
             }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Shouldn&apos;t b.length have been len, in case we don&apos;t write the entire byte array?&lt;br/&gt;
And shouldn&apos;t the comparison use &amp;lt;= instead of &amp;lt;?&lt;/p&gt;

&lt;p&gt;Actually, I&apos;m also wondering whether this test in LOBStreamControl.write(int,long)&lt;br/&gt;
            if (pos + 1 &amp;lt; MAX_BUF_SIZE) {&lt;br/&gt;
should have been (pos &amp;lt; MAX_BUF_SIZE).&lt;/p&gt;

&lt;p&gt;And should this test in LOBStreamControl.truncate()&lt;br/&gt;
            if (size &amp;lt; Integer.MAX_VALUE &amp;amp;&amp;amp; size &amp;lt; MAX_BUF_SIZE) {&lt;br/&gt;
have been (size &amp;lt;= MAX_BUF_SIZE)?&lt;/p&gt;

&lt;p&gt;As it is now, I don&apos;t think the last byte in the buffer will ever be used.&lt;/p&gt;</comment>
                            <comment id="12484333" author="knutanders" created="Tue, 27 Mar 2007 07:57:15 +0100"  >&lt;p&gt;Committed derby-2247-followup.diff with revision 522789.&lt;/p&gt;</comment>
                            <comment id="12497347" author="anurag" created="Mon, 21 May 2007 05:15:11 +0100"  >&lt;p&gt;Sorry I had missed suresh&apos;s query and comment.&lt;/p&gt;

&lt;p&gt;1) LOBStreamControl.java : isValidPostion()&lt;br/&gt;
   if (pos &amp;gt; tmpFile.length())&lt;br/&gt;
         throw Util.generateCsSQLException(&lt;br/&gt;
           SQLState.BLOB_POSITION_TOO_LARGE, new Long(pos + 1));&lt;/p&gt;


&lt;p&gt;isValidPosition() is called on most of the read/write. I think calling&lt;br/&gt;
a file length call can be expensive for each read/write call.&lt;/p&gt;

&lt;p&gt;I will check how can I reduce it. Probably having a length variable in the control class itself will help.&lt;/p&gt;


&lt;p&gt;2) Are blobs written to temp files for some special cases ?&lt;br/&gt;
I was just using BaseJdbcTestCase.java: assertEquals(Blob b1, Blob b2)&lt;br/&gt;
method in my test. It was triggering the writes to temp &lt;/p&gt;

&lt;p&gt;Yes if blob size exceeds 4k its written into the file and subsequent blob operations are operated on file. &lt;/p&gt;</comment>
                            <comment id="12497415" author="anurag" created="Mon, 21 May 2007 12:02:18 +0100"  >&lt;p&gt;&amp;gt;1) Wouldn&apos;t it be simpler to write&lt;br/&gt;
&amp;gt;   BaseStorageFactory.createTemporaryFile() in terms of&lt;br/&gt;
&amp;gt;   File.createTempFile(String prefix, String suffix, File directory)? &lt;/p&gt;

&lt;p&gt;I thought it may be useful in case some other module decides to use this same service &lt;br/&gt;
and want to generate file name based of some pattern. &lt;/p&gt;

&lt;p&gt;&amp;gt;5) LOBInputStream.read(byte[]) and read(byte[],int,int) contain this&lt;br/&gt;
&amp;gt;   piece of code:&lt;br/&gt;
&amp;gt;+ int ret = control.read(b, off, len, pos);&lt;br/&gt;
&amp;gt;+ if (ret &amp;gt; 0) &lt;/p&gt;
{
&amp;gt;+ pos += ret;
&amp;gt;+ return ret;
&amp;gt;+ }
&lt;p&gt;&amp;gt;+ return -1;&lt;br/&gt;
&amp;gt;Since a call to InputStream.read(byte[]...) theoretically can return&lt;br/&gt;
&amp;gt;0, I think (ret &amp;gt; 0) should be changed to (ret &amp;gt;= 0) or perhaps (ret&lt;br/&gt;
&amp;gt;!= -1).&lt;/p&gt;

&lt;p&gt;this was taken care by one of the privious patch&lt;/p&gt;

&lt;p&gt;&amp;gt;11) LOBStreamControl.init() might ignore some exceptions. &lt;/p&gt;

&lt;p&gt;Added all skipped exception in unexpected exception.&lt;/p&gt;


&lt;p&gt;&amp;gt;1) Can control be final?&lt;/p&gt;

&lt;p&gt;ClobStreamControl extends from LOBStreamControl. ClobStreamControl is already final.&lt;/p&gt;

&lt;p&gt;&amp;gt;2) Comment why AIOOB is thrown instead of IOException?&lt;/p&gt;

&lt;p&gt;in case of BLOB_INVALID_OFFSET streams are expected to throw AIOOB.&lt;/p&gt;


&lt;p&gt;&amp;gt; 7) In write(byte[],int,int,long), all SQLExceptions except one (BLOB_INVALID_OFFSET) are silently ignored. &amp;gt;Is this intended?&lt;/p&gt;

&lt;p&gt;fixed&lt;/p&gt;


&lt;p&gt;&amp;gt; 8) In free(), is there a chance we ignore some exceptions? If not, add a comment? Or, if it is possible, &amp;gt;create a RuntimeException from the PAE and throw it as last resort?&lt;/p&gt;

&lt;p&gt;It won&apos;t be good idea to ignore exception from free as most of the time it will be a i/o error. If we throw a non runtime exception it will be trapped and recorded somewhere in the users of these methods hence making it easy to report problem.&lt;br/&gt;
added a new throw statement to wrap all no IOException uder IOException.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;BlobSetMethodsTest&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; 9) Comment why the test is currently only run in embedded in suite().&lt;/p&gt;

&lt;p&gt;enabled it for client too&lt;/p&gt;

&lt;p&gt;&amp;gt;10) I think it would be good to split the testSetBytes into one test method for in-memory operation, and one &amp;gt;for on disk operation.&lt;/p&gt;

&lt;p&gt;fixed&lt;/p&gt;

&lt;p&gt;&amp;gt;11) In tearDown(), you could use &quot;Statement stmt = createStatement()&quot; and at last call super.tearDown().&lt;/p&gt;

&lt;p&gt;added&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;LobStreamTest&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt;12) JavaDoc for testReadWriteNoParameters (and the method name) is a little off.&lt;br/&gt;
fixed&lt;/p&gt;

&lt;p&gt;&amp;gt;13) For the assertEquals comparing input and output, I think it should say &quot;Output does not match input&quot; or &amp;gt;something similar.&lt;br/&gt;
fixed&lt;br/&gt;
&amp;gt;14) Replace assertTrue(msg, false) with fail(msg).&lt;br/&gt;
fixed&lt;/p&gt;

&lt;p&gt;&amp;gt;15) Comment why the test is currently only run in embedded in suite(). &lt;/p&gt;

&lt;p&gt;these tests, the way they are written, are specific to embedded (testing with memory and then file system) and the client already has similar tests in jdbcapi/LobStreamsTest.&lt;/p&gt;



&lt;p&gt;Follow up comments from knuth&lt;/p&gt;

&lt;p&gt;&amp;gt;- long finalLen = (dataBytes != null) ? dataBytes.length + b.length&lt;br/&gt;
&amp;gt;- : b.length;&lt;br/&gt;
&amp;gt;- if (finalLen &amp;lt; MAX_BUF_SIZE)&lt;br/&gt;
&amp;gt;+ if (pos + b.length &amp;lt; MAX_BUF_SIZE)&lt;br/&gt;
&amp;gt;                 return updateData(b, off, len, pos);&lt;br/&gt;
&amp;gt;             else &lt;/p&gt;
{
&amp;gt;                init(dataBytes, pos);
&amp;gt;             }

&lt;p&gt;&amp;gt;Shouldn&apos;t b.length have been len, in case we don&apos;t write the entire byte array?&lt;br/&gt;
&amp;gt;And shouldn&apos;t the comparison use &amp;lt;= instead of &amp;lt;?&lt;/p&gt;

&lt;p&gt;changed&lt;/p&gt;

&lt;p&gt;&amp;gt;Actually, I&apos;m also wondering whether this test in LOBStreamControl.write(int,long)&lt;br/&gt;
&amp;gt;           if (pos + 1 &amp;lt; MAX_BUF_SIZE) {&lt;br/&gt;
&amp;gt;should have been (pos &amp;lt; MAX_BUF_SIZE).&lt;/p&gt;

&lt;p&gt;&amp;gt;And should this test in LOBStreamControl.truncate()&lt;br/&gt;
            if (size &amp;lt; Integer.MAX_VALUE &amp;amp;&amp;amp; size &amp;lt; MAX_BUF_SIZE) {&lt;br/&gt;
&amp;gt;have been (size &amp;lt;= MAX_BUF_SIZE)? &lt;/p&gt;

&lt;p&gt;fixed&lt;/p&gt;</comment>
                            <comment id="12497417" author="anurag" created="Mon, 21 May 2007 12:04:18 +0100"  >&lt;p&gt;reattaching with derby-2247-followup2.diff with  Grant license to ASF&lt;/p&gt;</comment>
                            <comment id="12497456" author="knutanders" created="Mon, 21 May 2007 14:55:23 +0100"  >&lt;p&gt;&amp;gt;&amp;gt;1) Wouldn&apos;t it be simpler to write&lt;br/&gt;
&amp;gt;&amp;gt; BaseStorageFactory.createTemporaryFile() in terms of&lt;br/&gt;
&amp;gt;&amp;gt; File.createTempFile(String prefix, String suffix, File directory)?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;I thought it may be useful in case some other module decides to use&lt;br/&gt;
&amp;gt;this same service and want to generate file name based of some&lt;br/&gt;
&amp;gt;pattern.&lt;/p&gt;

&lt;p&gt;BaseStorageFactory.createTemporaryFile() could still be used by other&lt;br/&gt;
modules if it was written in terms of File.createTempFile(), but the&lt;br/&gt;
implementation of the method would be simpler, like this:&lt;/p&gt;

&lt;p&gt;    public StorageFile createTemporaryFile(String prefix, String suffix)&lt;br/&gt;
        throws IOException&lt;/p&gt;
    {
        return File.createTempFile(prefix, suffix,
                                   new File(getTempDir().getPath()));
    }

&lt;p&gt;This would also remove the need for the counter variable in&lt;br/&gt;
BaseStorageFactory. The only difference would be that the prefix no&lt;br/&gt;
longer could be null, but that should be easy to fix.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;5) LOBInputStream.read(byte[]) and read(byte[],int,int) contain this&lt;br/&gt;
&amp;gt;&amp;gt; piece of code:&lt;br/&gt;
&amp;gt;&amp;gt;+ int ret = control.read(b, off, len, pos);&lt;br/&gt;
&amp;gt;&amp;gt;+ if (ret &amp;gt; 0) &lt;/p&gt;
{
&amp;gt;&amp;gt;+ pos += ret;
&amp;gt;&amp;gt;+ return ret;
&amp;gt;&amp;gt;+ }
&lt;p&gt;&amp;gt;&amp;gt;+ return -1;&lt;br/&gt;
&amp;gt;&amp;gt;Since a call to InputStream.read(byte[]...) theoretically can return&lt;br/&gt;
&amp;gt;&amp;gt;0, I think (ret &amp;gt; 0) should be changed to (ret &amp;gt;= 0) or perhaps (ret&lt;br/&gt;
&amp;gt;&amp;gt;!= -1).&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;this was taken care by one of the privious patch&lt;/p&gt;

&lt;p&gt;The previous patch removed read(byte[]), but read(byte[],int,int) is&lt;br/&gt;
still there with the same code.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;11) LOBStreamControl.init() might ignore some exceptions.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;Added all skipped exception in unexpected exception.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure unexpectedUserException() is the correct method to use to&lt;br/&gt;
wrap the exception in this case. I thought it was supposed to be used&lt;br/&gt;
to wrap exceptions thrown by user code (like stored procedures and&lt;br/&gt;
VTIs). Perhaps Util.javaException() would be better?&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;1) Can control be final?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;ClobStreamControl extends from LOBStreamControl. ClobStreamControl is&lt;br/&gt;
&amp;gt;already final.&lt;/p&gt;

&lt;p&gt;I think Kristian was referring to the variable control in&lt;br/&gt;
LOBOutputStream. It is not final.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;10) I think it would be good to split the testSetBytes into one test&lt;br/&gt;
&amp;gt;&amp;gt;method for in-memory operation, and one for on disk operation.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;fixed&lt;/p&gt;

&lt;p&gt;It would also be good if these test cases called close() on&lt;br/&gt;
rs. Another thing I noticed is that the test cases contain clean-up&lt;br/&gt;
code in a finally block. If an exception is thrown in the finally&lt;br/&gt;
block, it will hide the original error, so I think it&apos;s better to&lt;br/&gt;
remove the finally block.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;15) Comment why the test is currently only run in embedded in suite().&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;these tests, the way they are written, are specific to embedded&lt;br/&gt;
&amp;gt;(testing with memory and then file system) and the client already has&lt;br/&gt;
&amp;gt;similar tests in jdbcapi/LobStreamsTest.&lt;/p&gt;

&lt;p&gt;Could you add this comment in the source file as well? Would it run in&lt;br/&gt;
client/server mode? If so, I think it would be valuable to run it&lt;br/&gt;
under the client too.&lt;/p&gt;

&lt;p&gt;Some other comments to LobStreamTest:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;tearDown() doesn&apos;t call super.tearDown() (if it did, calling&lt;br/&gt;
    rollback() and close() on conn wouldn&apos;t be necessary)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the instance variables dbName, useLOBStreamControl and f are not&lt;br/&gt;
    used and should be removed&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the instance variable conn is not needed since the connection is&lt;br/&gt;
    also stored in the super class&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;blob should be set to null in tearDown()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;gt;Follow up comments from knuth&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;- long finalLen = (dataBytes != null) ? dataBytes.length + b.length&lt;br/&gt;
&amp;gt;&amp;gt;- : b.length;&lt;br/&gt;
&amp;gt;&amp;gt;- if (finalLen &amp;lt; MAX_BUF_SIZE)&lt;br/&gt;
&amp;gt;&amp;gt;+ if (pos + b.length &amp;lt; MAX_BUF_SIZE)&lt;br/&gt;
&amp;gt;&amp;gt; return updateData(b, off, len, pos);&lt;br/&gt;
&amp;gt;&amp;gt; else &lt;/p&gt;
{
&amp;gt;&amp;gt; init(dataBytes, pos);
&amp;gt;&amp;gt; }
&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;Shouldn&apos;t b.length have been len, in case we don&apos;t write the entire byte array?&lt;br/&gt;
&amp;gt;&amp;gt;And shouldn&apos;t the comparison use &amp;lt;= instead of &amp;lt;?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;changed&lt;/p&gt;

&lt;p&gt;I noticed that you didn&apos;t change the comparison operator. Do you think&lt;br/&gt;
that comment was wrong?&lt;/p&gt;</comment>
                            <comment id="12497711" author="anurag" created="Tue, 22 May 2007 06:38:11 +0100"  >&lt;p&gt;&amp;gt;BaseStorageFactory.createTemporaryFile() could still be used by other&lt;br/&gt;
&amp;gt;modules if it was written in terms of File.createTempFile(), but the&lt;br/&gt;
&amp;gt;implementation of the method would be simpler, like this:&lt;/p&gt;

&lt;p&gt;&amp;gt;    public StorageFile createTemporaryFile(String prefix, String suffix)&lt;br/&gt;
&amp;gt;        throws IOException&lt;br/&gt;
&amp;gt;    &lt;/p&gt;
{
&amp;gt;        return File.createTempFile(prefix, suffix,
&amp;gt;                                   new File(getTempDir().getPath()));
&amp;gt;    }
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I got confused and thought you are suggesting to take away the prams (prefix and suffix). Are you suggesting to signature change from public StorageFile createTemporaryFile (String, String) to public java.io.File createTemporaryFile (String, String) ? &lt;/p&gt;</comment>
                            <comment id="12497789" author="knutanders" created="Tue, 22 May 2007 10:56:06 +0100"  >&lt;p&gt;&amp;gt; Are you suggesting to signature change from public StorageFile&lt;br/&gt;
&amp;gt; createTemporaryFile (String, String) to public java.io.File&lt;br/&gt;
&amp;gt; createTemporaryFile (String, String) ?&lt;/p&gt;

&lt;p&gt;No, I didn&apos;t notice the difference in signatures. It should still&lt;br/&gt;
return StorageFile, so the method would look something like this:&lt;/p&gt;

&lt;p&gt;    public StorageFile createTemporaryFile(String prefix, String suffix)&lt;br/&gt;
        throws IOException&lt;/p&gt;
    {
        return newStorageFile(File.createTempFile(
                prefix, suffix, new File(getTempDir().getPath())).getPath());
    }</comment>
                            <comment id="12498115" author="anurag" created="Wed, 23 May 2007 07:14:15 +0100"  >&lt;p&gt;&amp;gt;No, I didn&apos;t notice the difference in signatures. It should still&lt;br/&gt;
&amp;gt;return StorageFile, so the method would look something like this:&lt;/p&gt;

&lt;p&gt;&amp;gt;    public StorageFile createTemporaryFile(String prefix, String suffix)&lt;br/&gt;
        throws IOException&lt;br/&gt;
&amp;gt;    &lt;/p&gt;
{
&amp;gt;        return newStorageFile(File.createTempFile(
&amp;gt;                prefix, suffix, new File(getTempDir().getPath())).getPath());
&amp;gt;    }

&lt;p&gt;updated with a minor change passing directory in newStorageFile (without this its tries to make absulute path starting from db direcotry)&lt;/p&gt;





&lt;p&gt;&amp;gt;&amp;gt;5) LOBInputStream.read(byte[]) and read(byte[],int,int) contain this&lt;br/&gt;
&amp;gt;&amp;gt; piece of code:&lt;br/&gt;
&amp;gt;&amp;gt;+ int ret = control.read(b, off, len, pos);&lt;br/&gt;
&amp;gt;&amp;gt;+ if (ret &amp;gt; 0) &lt;/p&gt;
{
&amp;gt;&amp;gt;+ pos += ret;
&amp;gt;&amp;gt;+ return ret;
&amp;gt;&amp;gt;+ }
&lt;p&gt;&amp;gt;&amp;gt;+ return -1;&lt;br/&gt;
&amp;gt;&amp;gt;Since a call to InputStream.read(byte[]...) theoretically can return&lt;br/&gt;
&amp;gt;&amp;gt;0, I think (ret &amp;gt; 0) should be changed to (ret &amp;gt;= 0) or perhaps (ret&lt;br/&gt;
&amp;gt;&amp;gt;!= -1).&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;this was taken care by one of the privious patch&lt;/p&gt;

&lt;p&gt;&amp;gt;The previous patch removed read(byte[]), but read(byte[],int,int) is&lt;br/&gt;
&amp;gt;still there with the same code.&lt;/p&gt;

&lt;p&gt;fixed &lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;11) LOBStreamControl.init() might ignore some exceptions.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;Added all skipped exception in unexpected exception.&lt;/p&gt;

&lt;p&gt;&amp;gt;I&apos;m not sure unexpectedUserException() is the correct method to use to&lt;br/&gt;
&amp;gt;wrap the exception in this case. I thought it was supposed to be used&lt;br/&gt;
&amp;gt;to wrap exceptions thrown by user code (like stored procedures and&lt;br/&gt;
&amp;gt;VTIs). Perhaps Util.javaException() would be better?&lt;/p&gt;

&lt;p&gt;It was wrong. I am now throw IOException (assuming most of the time it will be a i/o error apart form RuntimeException and StandardException) with cause set to original exception.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;1) Can control be final?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;ClobStreamControl extends from LOBStreamControl. ClobStreamControl is&lt;br/&gt;
&amp;gt;already final.&lt;/p&gt;

&lt;p&gt;&amp;gt;I think Kristian was referring to the variable control in&lt;br/&gt;
&amp;gt;LOBOutputStream. It is not final.&lt;/p&gt;

&lt;p&gt;changed control in LOBInputStrea and LOBOutputStream to final&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;10) I think it would be good to split the testSetBytes into one test&lt;br/&gt;
&amp;gt;&amp;gt;method for in-memory operation, and one for on disk operation.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;fixed&lt;/p&gt;

&lt;p&gt;&amp;gt;It would also be good if these test cases called close() on&lt;br/&gt;
&amp;gt;rs. Another thing I noticed is that the test cases contain clean-up&lt;br/&gt;
&amp;gt;code in a finally block. If an exception is thrown in the finally&lt;br/&gt;
&amp;gt;block, it will hide the original error, so I think it&apos;s better to&lt;br/&gt;
&amp;gt;remove the finally block.&lt;/p&gt;

&lt;p&gt;added close and removed fianlly block&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;15) Comment why the test is currently only run in embedded in suite().&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;these tests, the way they are written, are specific to embedded&lt;br/&gt;
&amp;gt;(testing with memory and then file system) and the client already has&lt;br/&gt;
&amp;gt;similar tests in jdbcapi/LobStreamsTest.&lt;/p&gt;

&lt;p&gt;&amp;gt;Could you add this comment in the source file as well? Would it run in&lt;br/&gt;
&amp;gt;client/server mode? If so, I think it would be valuable to run it&lt;br/&gt;
&amp;gt;under the client too.&lt;/p&gt;

&lt;p&gt;updated comment in suite method&lt;/p&gt;

&lt;p&gt;Some other comments to LobStreamTest:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;tearDown() doesn&apos;t call super.tearDown() (if it did, calling&lt;br/&gt;
    rollback() and close() on conn wouldn&apos;t be necessary)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the instance variables dbName, useLOBStreamControl and f are not&lt;br/&gt;
    used and should be removed&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the instance variable conn is not needed since the connection is&lt;br/&gt;
    also stored in the super class&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;blob should be set to null in tearDown()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;called super.tearDown and set blob to null and removed rollback and close call.&lt;/p&gt;

&lt;p&gt;&amp;gt;Follow up comments from knuth&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;- long finalLen = (dataBytes != null) ? dataBytes.length + b.length&lt;br/&gt;
&amp;gt;&amp;gt;- : b.length;&lt;br/&gt;
&amp;gt;&amp;gt;- if (finalLen &amp;lt; MAX_BUF_SIZE)&lt;br/&gt;
&amp;gt;&amp;gt;+ if (pos + b.length &amp;lt; MAX_BUF_SIZE)&lt;br/&gt;
&amp;gt;&amp;gt; return updateData(b, off, len, pos);&lt;br/&gt;
&amp;gt;&amp;gt; else &lt;/p&gt;
{
&amp;gt;&amp;gt; init(dataBytes, pos);
&amp;gt;&amp;gt; }
&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;Shouldn&apos;t b.length have been len, in case we don&apos;t write the entire byte array?&lt;br/&gt;
&amp;gt;&amp;gt;And shouldn&apos;t the comparison use &amp;lt;= instead of &amp;lt;?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;changed&lt;/p&gt;

&lt;p&gt;I noticed that you didn&apos;t change the comparison operator. Do you think&lt;br/&gt;
that comment was wrong?&lt;/p&gt;

&lt;p&gt;i had missed it changed it in the current patch.&lt;/p&gt;</comment>
                            <comment id="12499745" author="knutanders" created="Tue, 29 May 2007 10:42:26 +0100"  >&lt;p&gt;Thanks Anurag! Committed derby-2247-followupv3.diff with revision 542473.&lt;/p&gt;</comment>
                            <comment id="12502678" author="myrna" created="Fri, 8 Jun 2007 06:50:04 +0100"  >&lt;p&gt;Is this issue complete?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12333102">DERBY-1285</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12363005">DERBY-2345</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12352644" name="derby-2247-followup.diff" size="13976" author="anurag" created="Mon, 5 Mar 2007 17:23:38 +0000"/>
                            <attachment id="12357745" name="derby-2247-followup2.diff" size="15761" author="anurag" created="Mon, 21 May 2007 12:04:18 +0100"/>
                            <attachment id="12357744" name="derby-2247-followup2.diff" size="15761" author="anurag" created="Mon, 21 May 2007 12:02:18 +0100"/>
                            <attachment id="12357951" name="derby-2247-followupv3.diff" size="26629" author="anurag" created="Wed, 23 May 2007 07:14:15 +0100"/>
                            <attachment id="12350880" name="derby-2247-v3-usingStoreFactory.diff" size="73562" author="anurag" created="Sun, 11 Feb 2007 21:32:45 +0000"/>
                            <attachment id="12351020" name="derby-2247-v4-usingStoreFactory.diff" size="73445" author="kristwaa" created="Tue, 13 Feb 2007 09:17:22 +0000"/>
                            <attachment id="12349110" name="derby-2247.diff" size="67331" author="anurag" created="Wed, 17 Jan 2007 19:48:19 +0000"/>
                            <attachment id="12349264" name="derby-2247v2-using_StoreFactory.diff" size="73149" author="anurag" created="Fri, 19 Jan 2007 14:17:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 17 Jan 2007 20:33:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30339</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11v3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39952</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>