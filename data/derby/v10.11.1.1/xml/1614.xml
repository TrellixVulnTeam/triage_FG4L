<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:39:34 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1614/DERBY-1614.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1614] Test harness overrides heap size settings when starting Network Server</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1614</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Test specific heap size settings can be passed to the test harness using the jvmflags system property, for example in a &amp;lt;testname&amp;gt;_app.properties file or at the command line when starting a test, e.g &quot;-Djvmflags=-Xms32m^-Xmx32m&quot;.&lt;/p&gt;

&lt;p&gt;The test harness almost always overrides such settings when starting a new Network Server using the org.apache.derbyTesting.functionTests.harness.NetServer class of the test harness. Currently, if &lt;em&gt;either&lt;/em&gt; -ms &lt;em&gt;or&lt;/em&gt; -Xms is missing from the jvmflags, NetServer.start() adds -ms16777216. Also, if &lt;em&gt;either&lt;/em&gt; -mx &lt;em&gt;or&lt;/em&gt; -Xmx is missing from the jvmflags, NetServer.start() adds -ms33554432. This has been the case since SVN revision 420048 (July 8, 2006).&lt;/p&gt;

&lt;p&gt;Earlier revisions did not override the heap settings unless the newer -Xms or -Xmx flags were used instead of the -ms and -mx flags. A patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1091&quot; title=&quot;Test harness does not pass jvm flags properly if there are more than 1 property in jvm flags&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1091&quot;&gt;&lt;del&gt;DERBY-1091&lt;/del&gt;&lt;/a&gt; attempted (among other things) to make the harness recognize the newer flags as well as the older flags, but the resulting behavior is (most likely) not as intended. &lt;/p&gt;

&lt;p&gt;If a test is run in either the DerbyNet framework or the DerbyNetClient framework, the test-specific JVM flags should (probably) be used for the Network Server JVM as well as the test JVM. Currently, even if non-default heap size flags are passed to the harness, the server JVM will ignore these settings since the harness adds -ms and/or -mx flags &lt;em&gt;after&lt;/em&gt; all other heap flags. The exception is if both new and old versions of heap flags are passed to the harness, e.g:&lt;/p&gt;

&lt;p&gt;jvmflags=-ms32m^-Xms32m^-mx128m^-Xmx128m&lt;/p&gt;

&lt;p&gt;Here is the code causing this behaviour:&lt;/p&gt;

&lt;p&gt;if (setJvmFlags &amp;amp;&amp;amp; ((jvmflags.indexOf(&quot;-ms&quot;) == -1) || (jvmflags.indexOf(&quot;-Xms&quot;) == -1)))&lt;br/&gt;
     // only setMs if no starting memory was given&lt;br/&gt;
     jvm.setMs(16*1024*1024); // -ms16m&lt;br/&gt;
if (setJvmFlags &amp;amp;&amp;amp; ((jvmflags.indexOf(&quot;-mx&quot;) == -1) || (jvmflags.indexOf(&quot;-Xmx&quot;) == -1)))&lt;br/&gt;
     // only setMx if no max memory was given&lt;br/&gt;
     jvm.setMx(32*1024*1024); // -mx32m&lt;/p&gt;</description>
                <environment>Test frameworks DerbyNet and DerbyNetClient</environment>
        <key id="12346946">DERBY-1614</key>
            <summary>Test harness overrides heap size settings when starting Network Server</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="johnemb">John H. Embretsen</assignee>
                                    <reporter username="johnemb">John H. Embretsen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 31 Jul 2006 13:46:25 +0100</created>
                <updated>Tue, 8 Aug 2006 12:07:44 +0100</updated>
                            <resolved>Tue, 8 Aug 2006 04:16:35 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Test</component>
                        <due>Wed, 9 Aug 2006 07:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12424534" author="johnemb" created="Mon, 31 Jul 2006 14:19:01 +0100"  >&lt;p&gt;Example impact of this bug:&lt;/p&gt;

&lt;p&gt;The &apos;wisconsin_app.properties&apos; file includes the following:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;flags specific to this test: it runs out of memory on jdk118 sometimes&lt;/li&gt;
	&lt;li&gt;so give the JVM more memory always:&lt;br/&gt;
jvmflags=-ms32M^-mx128M&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Running the lang/wisconsin.java test with default heap size results in the flags from the wisconsin_app.properties file being overridden by the test harness:&lt;/p&gt;

&lt;p&gt;$ java -Dverbose=true -Dframework=DerbyNet org.apache.derbyTesting.functionTests.harness.RunTest lang/wisconsin.java&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&amp;#8211; listing properties &amp;#8211;&lt;br/&gt;
derby.debug.true=&lt;br/&gt;
derby.storage.checkpointInterval=100000&lt;br/&gt;
derby.optimizer.noTimeout=true&lt;br/&gt;
derby.language.preloadClasses=true&lt;br/&gt;
console.encoding:null file.encoding:ISO8859-1 derby.ui.codeset: null&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Start: wisconsin jdk1.5.0_06 DerbyNet 2006-07-27 13:35:41 ***&lt;br/&gt;
Initialize for framework: DerbyNet&lt;br/&gt;
java -ms32M -mx128M -ms16777216 -mx33554432 &lt;span class=&quot;error&quot;&gt;&amp;#91;SNIP various system properties&amp;#93;&lt;/span&gt; org.apache.derby.drda.NetworkServerControl start&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;SNIP rest of output&amp;#93;&lt;/span&gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;The Network Server JVM pics up the last value for each heap setting (-ms and -Xms set the initial (minimum) heap size. -mx and -Xmx set the maximum heap size). This was (partly) verified by running the jmap tool (part of Sun&apos;s JDK 1.5 or newer) with the &quot;-heap&quot; option against the server JVM and looking for &quot;MaxHeapSize&quot;, which was 32 MB, not 128 MB.&lt;/p&gt;

&lt;p&gt;It is likely that during 10.2.0.4 snapshot testing (more precisely: All testing on trunk since July 8, 2006), tests using non-default heap size flags in DerbyNet or DerbyNetClient frameworks were run with different server heap sizes than previous testing.&lt;/p&gt;</comment>
                            <comment id="12424539" author="johnemb" created="Mon, 31 Jul 2006 14:28:15 +0100"  >&lt;p&gt;This issue is related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1091&quot; title=&quot;Test harness does not pass jvm flags properly if there are more than 1 property in jvm flags&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1091&quot;&gt;&lt;del&gt;DERBY-1091&lt;/del&gt;&lt;/a&gt; since flags specifying initial and maximum heap sizes are part of the jvmflags property in the test harness. Proper parsing of jvmflags is essential for this functionality (setting Network Server heap size values during testing) to work as intended.&lt;/p&gt;</comment>
                            <comment id="12425207" author="johnemb" created="Wed, 2 Aug 2006 13:03:27 +0100"  >&lt;p&gt;Attatching patch &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;_v1.diff&apos;, which fixes the following issues:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;harness/NetServer.java: Changes harness behaviour so that no heap settings for the Network Server are set if either initial or max heap size has already been set in the jvmflags argument of the NetServer constructor. Prior to this change, the harness would override heap size settings from the command line or test property files unless both old heap flags (-ms or -mx) AND &quot;new&quot; heap flags (-Xms or -Xmx) had been set. The harness would also treat initial and max sizes independently, which caused incompatibilities in some situations (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1564&quot; title=&quot;wisconsin.java test failed in DerbyNet or DerbyNetClient frameworks, VM for network server got OutOfMemoryError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1564&quot;&gt;&lt;del&gt;DERBY-1564&lt;/del&gt;&lt;/a&gt;).&lt;/li&gt;
	&lt;li&gt;Behavior has &lt;b&gt;not&lt;/b&gt; changed in scenarios where jvmflags (when passed to NetServer) is null or empty, in which case no extra flags are added.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;testing/README.htm:&lt;/li&gt;
	&lt;li&gt;fixed small bug in jvmflags example (missing &apos;-&apos; in front of first flag).&lt;/li&gt;
	&lt;li&gt;changed jvmflags example from using -ms and -mx to using -Xms and -Xmx, since the latter flags are documented non-standard jvm options, while the former flags are deprecated (at least in Sun&apos;s current Java launchers...), and we are just lucky that they still work.&lt;/li&gt;
	&lt;li&gt;added comment about possible consequences of setting only initial or only max heap size using jvmflags.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;svn stat:&lt;/p&gt;

&lt;p&gt;M      java/testing/README.htm&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java&lt;/p&gt;

&lt;p&gt;The patch has been tested with individual test runs of lang/wisconsin.java and lang/forupdate.java. Derbyall is still running at the time of writing this...&lt;/p&gt;

&lt;p&gt;Please review this patch.&lt;/p&gt;


&lt;p&gt;Other patch comments:&lt;br/&gt;
------------------------------------------&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If only initial or only max heap size is set using the jvmflags harness property, no extra flags will be added by NetServer. This reduces the risk of incompatibilities between initial and max values, but it is still possible (which is also the case with any other Java application). For Sun&apos;s HotSpot JVM version 1.5, the default initial heap size is 2 MB, and the default max heap size is 64 MB &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. Hence:&lt;/li&gt;
	&lt;li&gt;if jvmflags specifies a max value that is smaller than 2 MB&lt;br/&gt;
     (or whatever is the default for a particular JVM), without also &lt;br/&gt;
     setting an initial heap size, or&lt;/li&gt;
	&lt;li&gt;if jvmflags specifies an initial value that is larger than the&lt;br/&gt;
     default max heap size for a particular JVM (e.g. 64 MB),&lt;br/&gt;
     without also setting a max heap size,&lt;/li&gt;
	&lt;li&gt;the Java launcher will fail with the message like this:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;gt; Error occurred during initialization of VM&lt;br/&gt;
&amp;gt; Incompatible initial and maximum heap sizes specified&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Current behavior depends on the JVM behavior described in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1091&quot; title=&quot;Test harness does not pass jvm flags properly if there are more than 1 property in jvm flags&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1091&quot;&gt;&lt;del&gt;DERBY-1091&lt;/del&gt;&lt;/a&gt;. Specifically, this means that as long as all test JVMs use the &lt;em&gt;last&lt;/em&gt; value of each heap setting if multiple values are specified, and old and new versions of heap flags are treated equally, we are all good.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I was tempted to remove the following line in NetServer.java (but didn&apos;t):&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     jvm.setNoasyncgc(true); // -noasyncgc&lt;/p&gt;

&lt;p&gt;  since no JVM that I know of supports the -noasyncgc option anymore. The last HotSpot VM where that option was supported was supposedly version 1.1 &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;. Besides, I do not see any reason why we would want to turn of dynamic garbage collection for the server when running tests. Anyway, I&apos;ll let it be, since most jdk* classes in the harness ignore the setting anyway.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/tooldocs/solaris/java.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/tooldocs/solaris/java.html&lt;/a&gt; and&lt;br/&gt;
      &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/tooldocs/windows/java.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/tooldocs/windows/java.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://forums.java.net/jive/thread.jspa?threadID=16315&amp;amp;tstart=0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forums.java.net/jive/thread.jspa?threadID=16315&amp;amp;tstart=0&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12425214" author="johnemb" created="Wed, 2 Aug 2006 13:25:57 +0100"  >&lt;p&gt;Here is an illustration of how the NetServer class handles heap size settings when &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;_v1.diff&apos; is applied:&lt;/p&gt;

&lt;p&gt;Input = the value of jvmflags when passed to NetServer&lt;br/&gt;
Output = heap flags set when starting the Network Server via NetServer&lt;br/&gt;
Old = 10.1.* and trunk SVN 420047 and earlier&lt;br/&gt;
Current = current trunk, i.e. SVN 420048 and later&lt;br/&gt;
New = current trunk if the above mentioned patch is applied&lt;/p&gt;


&lt;p&gt;Input:            -ms11m -mx12m&lt;br/&gt;
Old output:       -ms11m -mx12m&lt;br/&gt;
Current output:   -ms11m -mx12m -ms16777216 -mx33554432&lt;br/&gt;
New output:       -ms11m -mx12m&lt;/p&gt;

&lt;p&gt;Input:            -Xms11m -Xmx12m&lt;br/&gt;
Old output:       -Xms11m -Xmx12m -ms16777216 -mx33554432&lt;br/&gt;
Current output:   -Xms11m -Xmx12m -ms16777216 -mx33554432&lt;br/&gt;
New output:       -Xms11m -Xmx12m&lt;/p&gt;

&lt;p&gt;Input:            -ms11m&lt;br/&gt;
Old output:       -ms11m -mx33554432&lt;br/&gt;
Current output:   -ms11m -ms16777216 -mx33554432&lt;br/&gt;
New output:       -ms11m&lt;/p&gt;

&lt;p&gt;Input:            -mx12m&lt;br/&gt;
Old output:       -mx12m -ms16777216&lt;br/&gt;
Current output:   -mx12m -ms16777216 -mx33554432&lt;br/&gt;
New output:       -mx12m&lt;/p&gt;

&lt;p&gt;Input:            -Xms11m&lt;br/&gt;
Old output:       -Xms11m -ms16777216 -mx33554432&lt;br/&gt;
Current output:   -Xms11m -ms16777216 -mx33554432&lt;br/&gt;
New output:       -Xms11m&lt;/p&gt;

&lt;p&gt;Input:            -Xmx12m&lt;br/&gt;
Old output:       -Xmx12m -ms16777216 -mx33554432&lt;br/&gt;
Current output:   -Xmx12m -ms16777216 -mx33554432&lt;br/&gt;
New output:       -Xmx12m&lt;/p&gt;

&lt;p&gt;Input:            -ms11m -Xms12m -mx11m -Xmx12m&lt;br/&gt;
Old output:       -ms11m -Xms12m -mx11m -Xmx12m&lt;br/&gt;
Current output:   -ms11m -Xms12m -mx11m -Xmx12m&lt;br/&gt;
New output:       -ms11m -Xms12m -mx11m -Xmx12m&lt;/p&gt;

&lt;p&gt;Input:            null or &quot;&quot;&lt;br/&gt;
Old output:       &lt;br/&gt;
Current output:   &lt;br/&gt;
New output:       &lt;/p&gt;
</comment>
                            <comment id="12425391" author="myrna" created="Wed, 2 Aug 2006 23:14:49 +0100"  >&lt;p&gt;I reviewed the patch, and the testing described. (Did not do any testing myself).&lt;/p&gt;

&lt;p&gt;I think this section of code originally just meant to ensure networkserver had enough juice to get going with.&lt;/p&gt;

&lt;p&gt;If I summarize correctly, this patch, apart from fixing up the flawed logic of my change in this area for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1091&quot; title=&quot;Test harness does not pass jvm flags properly if there are more than 1 property in jvm flags&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1091&quot;&gt;&lt;del&gt;DERBY-1091&lt;/del&gt;&lt;/a&gt;, implements code to not interfere with the heap settings whenever it looks like specific settings in either ms or mx are passed in. I think this is a good improvement.&lt;/p&gt;

&lt;p&gt;Once derbyall results are in I think this can be committed.&lt;/p&gt;</comment>
                            <comment id="12425396" author="fuzzylogic" created="Thu, 3 Aug 2006 00:07:30 +0100"  >&lt;p&gt;This looks good to me as well. My only comment is that the !jvmName.equals(&quot;jview&quot;) can be removed. I don&apos;t think we need to be worrying about whether or not the test harness runs with jview anymore. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12425491" author="johnemb" created="Thu, 3 Aug 2006 11:55:00 +0100"  >&lt;p&gt;(NEED ADVICE ON HOW TO PROCEED WITH RELATED HARNESS &quot;DEFECT&quot;, SEE BELOW)&lt;/p&gt;

&lt;p&gt;Thanks for reviewing!&lt;/p&gt;

&lt;p&gt;Attaching &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;_v2.diff&apos;, which replaces &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;_v1.diff&apos;.&lt;/p&gt;

&lt;p&gt;The only change from the previous patch is that the check for !jvmName.equals(&quot;jview&quot;) has been removed.&lt;/p&gt;

&lt;p&gt;PLEASE NOTE: Harness decision about setting heap size flags should change even more, see below!&lt;/p&gt;

&lt;p&gt;I found a number of other references to jview in the harness code, but I have not removed them (this is outside the scope of this Jira description):&lt;/p&gt;

&lt;p&gt;./harness/RunList.java:726:             else if (javaCmd.equals(&quot;jview&quot;))&lt;br/&gt;
./harness/RunList.java:727:                 jvmName = &quot;jview&quot;;&lt;br/&gt;
./harness/RunList.java:743:             if ( (jvmName == null) || (jvmName.equals(&quot;jview&quot;)) )&lt;br/&gt;
./harness/RunTest.java:973:             if ( (jvmName == null) || (jvmName.length()==0) || (jvmName.equals(&quot;jview&quot;)))&lt;br/&gt;
./harness/RunTest.java:995:             if ( (jvmName == null) || (!jvmName.equals(&quot;jview&quot;)) )&lt;br/&gt;
./harness/NetServer.java:158:           if (jvmName.equals(&quot;jview&quot;))&lt;br/&gt;
./harness/NetServer.java:159:               jvm.setJavaCmd(&quot;jview&quot;);&lt;br/&gt;
./harness/jvm.java:39:  that is the reference point for all others.  Note some VMs (like jview)&lt;/p&gt;


&lt;p&gt;Anyway, I would actually like to change the jvmflags behavior a little more. The reason is that the test harness is (and always has been, I guess) setting heap size flags for the server JVM only if the jvmflags property is not null or the empty string:&lt;/p&gt;

&lt;p&gt;    boolean setJvmFlags = false;&lt;br/&gt;
    if ( (jvmflags != null) &amp;amp;&amp;amp; (jvmflags.length()&amp;gt;0) ) &lt;/p&gt;
{
        jvm.setFlags(jvmflags);
        setJvmFlags = true;
    }

&lt;p&gt;This means that if some JVM option other than -ms, -Xms, -mx or -Xmx is specified with the jvmflags property, &quot;harness-defaults&quot; will be used for min (16 MB) and max size (32 MB).  If jvmflags is not used, or empty, the harness will not set any heap size values. I do not see the logic behind this, unless the jvmflags property is never used for any jvm flags other than the heap flags mentioned above.&lt;/p&gt;

&lt;p&gt;This behavior makes it impossible to accurately compare two test runs (in DerbyNet or DerbyNetClient frameworks) with different jvm flags, as long as no heap size flags are set. Consider the following example:&lt;/p&gt;


&lt;p&gt;The lang/forupdate.sql test is chosen because there are no jvmflags associated with it by default, and it can be run in embedded, DerbyNet and DerbyNetClient frameworks.&lt;/p&gt;

&lt;p&gt;a) Default behavior:&lt;/p&gt;

&lt;p&gt;Run the following command:&lt;/p&gt;

&lt;p&gt;java -Dverbose=true -Dframework=DerbyNetClient org.apache.derbyTesting.functionTests.harness.RunTest lang/forupdate.sql&lt;/p&gt;

&lt;p&gt;Let&apos;s say the default JVM for this machine is the Java HotSpot Client VM.&lt;br/&gt;
With the latest patch for this issue, the harness starts the network server by doing:&lt;/p&gt;

&lt;p&gt;java -Duser.language=en -Duser.country=US -Dderby.system.home=/home/je159969/apache/Derby/sandBoxes/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;/test/forupdate/DerbyNetClient/forupdate -Djava.security.manager -Djava.security.policy=/home/je159969/apache/Derby/sandBoxes/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;/test/forupdate/derby_tests.policy -DderbyTesting.codejar=&lt;a href=&quot;file:/home/je159969/apache/Derby/sandBoxes/DERBY-1614/trunk/jars/sane/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/home/je159969/apache/Derby/sandBoxes/DERBY-1614/trunk/jars/sane/&lt;/a&gt; -DderbyTesting.codedir=/home/je159969/apache/Derby/sandBoxes/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;/trunk/jars/sane -DderbyTesting.serverhost=localhost -DderbyTesting.clienthost=localhost -DderbyTesting.codeclasses=&lt;a href=&quot;file://unused/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file://unused/&lt;/a&gt; org.apache.derby.drda.NetworkServerControl start&lt;/p&gt;


&lt;p&gt;b) Run the test with some JVM option &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, for example -server (meaning: &quot;Select the Java HotSpot Server VM&quot;):&lt;/p&gt;

&lt;p&gt;java -Djvmflags=-server -Dverbose=true -Dframework=DerbyNetClient org.apache.derbyTesting.functionTests.harness.RunTest lang/forupdate.sql&lt;/p&gt;

&lt;p&gt;With the latest patch for this issue, the harness starts the network server by doing:&lt;/p&gt;

&lt;p&gt;java -Duser.language=en -Duser.country=US -server -ms16777216 -mx33554432 -Dderby.system.home=/home/je159969/apache/Derby/sandBoxes/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;/test/forupdate/DerbyNetClient/forupdate -Djava.security.manager -Djava.security.policy=/home/je159969/apache/Derby/sandBoxes/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;/test/forupdate/derby_tests.policy -DderbyTesting.codejar=&lt;a href=&quot;file:/home/je159969/apache/Derby/sandBoxes/DERBY-1614/trunk/jars/sane/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/home/je159969/apache/Derby/sandBoxes/DERBY-1614/trunk/jars/sane/&lt;/a&gt; -DderbyTesting.codedir=/home/je159969/apache/Derby/sandBoxes/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;/trunk/jars/sane -DderbyTesting.serverhost=localhost -DderbyTesting.clienthost=localhost -DderbyTesting.codeclasses=&lt;a href=&quot;file://unused/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file://unused/&lt;/a&gt; org.apache.derby.drda.NetworkServerControl start&lt;/p&gt;

&lt;p&gt;The -server option is passed to the server JVM, but the harness also adds &quot;-ms16777216 -mx33554432&quot;. This means that tests may fail in b) that did not fail in a), or vice versa, but not because of differences between the flags set in jvmflags, but because of the harness changing heap size settings automatically. Note that this has always been the behavior of the test harness; it is not caused by the above mentioned patch.&lt;/p&gt;


&lt;p&gt;NEW PROPOSAL:&lt;/p&gt;

&lt;p&gt;I propose that the harness either&lt;/p&gt;

&lt;p&gt;A) stops setting any heap size flags for the network server, unless they are specified by jvmflags. I.e. use the defaults of the JVM in which the server is run.&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;B) sets heap size flags for the network server every time neither of the flags -ms, -Xms, -mx or -Xmx are specified in jvmflags, including when no jvmflags are specified.&lt;/p&gt;


&lt;p&gt;I would like to see opinions from other community members before proceeding. &lt;br/&gt;
If there is no reason why the harness should set server heap size by default, I vote for option A).&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; All valid JVM options have the same effect, e.g. -d32, -d64, -Dderby.drda.logConnections=true or -Demma.verbosity.level=silent&lt;/p&gt;</comment>
                            <comment id="12425580" author="myrna" created="Thu, 3 Aug 2006 18:48:41 +0100"  >&lt;p&gt;Assuming that things get put in for a reason and people would document (possibly) the reason I did some historical research.&lt;/p&gt;

&lt;p&gt;The first incantation in source control of this harness server code that I could find already forces a setting of -sm16m -xm32 -noasyncgc for connecting through RmiJdbc to Weblogic Server - which was supported in version 1.5 of cloudscape.&lt;/p&gt;

&lt;p&gt;Code to accept jvmflags was added in in 2001 in cloudscape, and this section looked then much like how it was contributed to apache. (see:  &lt;a href=&quot;http://svn.apache.org/viewvc/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java?revision=57503&amp;amp;view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java?revision=57503&amp;amp;view=markup&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The present code, making this optional depending on jvmflags being set or not went in with revision 160372 for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-121&quot; title=&quot;Network Server reading blob/clob data size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-121&quot;&gt;&lt;del&gt;DERBY-121&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
(see: &lt;a href=&quot;http://svn.apache.org/viewvc/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java?r1=160372&amp;amp;r2=179859&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java?r1=160372&amp;amp;r2=179859&lt;/a&gt;)&lt;br/&gt;
There is no specific documentation for this part of the change, but I assume the intent was to just ensure the NetworkServer&apos;s heap size settings would get overwritten when set by jvmflags.&lt;/p&gt;

&lt;p&gt;I keep going back and forth between A and B. &lt;br/&gt;
I wonder whether the default heap sizes of jdk131 vs. jdk142 vs. jdk15 etc have changed. &lt;br/&gt;
I also wonder if it&apos;s possible for certain jvms to have default sizes that differ from machine to machine (I know they do differ between Windows and Linux, for example).&lt;br/&gt;
I worry about causing failures on machines where previously the tests ran fine.&lt;/p&gt;

&lt;p&gt;On the other hand, this change has been in for a while, so maybe it&apos;s not affected anyone. And also, the setting is hidden from view. And not working properly. And to get it working properly would take more effort, and we should also make sure it can&apos;t get overwritten by settings coming through on testSpecialProps or testJavaFlags. It would be clearer to leave the setting to the test and remove it from NetServer.java...&lt;/p&gt;

&lt;p&gt;So, I cautiously vote for A. &lt;/p&gt;</comment>
                            <comment id="12425754" author="johnemb" created="Fri, 4 Aug 2006 15:17:12 +0100"  >&lt;p&gt;I really appreciate the historical information, Myrna, it is certainly useful in figuring out what the original intention must have been &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I was not aware of the change to the jvmflags behavior in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-121&quot; title=&quot;Network Server reading blob/clob data size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-121&quot;&gt;&lt;del&gt;DERBY-121&lt;/del&gt;&lt;/a&gt;. It seems to me that this change was done &quot;because the test for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-121&quot; title=&quot;Network Server reading blob/clob data size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-121&quot;&gt;&lt;del&gt;DERBY-121&lt;/del&gt;&lt;/a&gt; requires extra heap memory for the server&apos;s JVM&quot;, and that the intention was, as Myrna pointed out, to make sure that the &quot;default&quot; heap size settings (min 16 MB, max 32 MB) that had been there since before Derby/Cloudscape was open sourced were overridden by the test-specific settings set by jvmflags. &lt;/p&gt;

&lt;p&gt;I think the people involved at that time failed to notice that the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-121&quot; title=&quot;Network Server reading blob/clob data size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-121&quot;&gt;&lt;del&gt;DERBY-121&lt;/del&gt;&lt;/a&gt; also introduced a significant change to the behavior of the test harness; going from always setting the &quot;default&quot; heap size flags, to only setting them if jvmflags is not null and not the empty String (when a heap size flag was set in jvmflags, the &quot;default&quot; value for that flag was overridden). Please correct me if I am wrong...&lt;/p&gt;

&lt;p&gt;I&apos;d like to go through the two options (well, there is a third option: &quot;C) Don&apos;t change anything&quot;) and look at some pros &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and cons &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/forbidden.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; of each one.&lt;br/&gt;
I am rephrasing A) and B) slightly...&lt;/p&gt;

&lt;p&gt;A) Do not set any heap size flags for the network server apart from those specified in jvmflags&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Server heap sizes will not be the same for every JVM, since the default sizes depends on JVM vendor, JVM version, OS, hardware etc. &lt;span class=&quot;error&quot;&gt;&amp;#91;1, 2, 3&amp;#93;&lt;/span&gt;&lt;br/&gt;
+ The fact that test results may depend on the JVM which is used (at least when it comes to OutOfMemoryErrors) is more in line with how the product is used in production. Here I assume that most users of Derby don&apos;t change the memory settings of the JVM they use for the Network Server. &lt;br/&gt;
+ If a test fails with OutOfMemoryError on JVMs with a small default max heap size, but not on other JVMs, we immediately know that this particular test requires a certain amout of memory, and can take appropriate action.&lt;br/&gt;
+ Network Server instances started by the test harness via NetServer have the same heap size values as server instances started directly from tests, by default.&lt;br/&gt;
+ Test harness complexity is reduced&lt;br/&gt;
+ Current default behavior when jvmflags is not used is not changed&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;B) Always set heap size flags (min and max size) for the network server, unless either -ms, -Xms, -mx or -Xmx has been specified in jvmflags&lt;/p&gt;

&lt;p&gt;+ &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; All tests run with the same heap sizes on all platforms, unless jvmflags specifies non-default values - this may reduce the number of variables to consider when trying to figure out a test failure?&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It is hard to determine default heap size values that are suitable for all test platforms (from J2ME devices to multi-processor servers). The current values are min. 16 MB, max. 32 MB, but this has not been used by default since SVN 179859 (June 2005).&lt;/li&gt;
	&lt;li&gt;Current behavior (not setting any heap flags unless jvmflags is set) is changed back to old behavior (always setting heap flags), which may cause more tests to fail (since the harness default is smaller than the default of the most common test JVMs).&lt;/li&gt;
	&lt;li&gt;See pros of option A)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;C) Don&apos;t change anything&lt;/p&gt;

&lt;p&gt;+ Nothing is changed&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It is simply not very useful that the harness sets heap size flags whenever any jvm option is set using the jvmflags property, but not otherwise. I see a trend in that we are becoming more interested in running derbyall with certain options, for example enabling 64-bit datamodel (-d64) or setting a property used by a code coverage analysis tool (-Demma.verbosity.level=silent). Using &quot;passive&quot; flags has undesirable consequences.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;So, with this I hope anyone interested has captured my thoughts around this issue. I intend to provide a patch implementing option A) soon. (If tests are not successful, I will recommend that the current (v2) patch is committed to trunk/10.2, and that we postpone further action until the 10.2 release is out.) &lt;/p&gt;

&lt;p&gt;Please comment if you have other opinions.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://java.sun.com/docs/hotspot/gc5.0/gc_tuning_5.html#0.0.0.%20Total%20Heap%7Coutline&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/docs/hotspot/gc5.0/gc_tuning_5.html#0.0.0.%20Total%20Heap%7Coutline&lt;/a&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://java.sun.com/docs/hotspot/gc5.0/gc_tuning_5.html#0.0.0.0.%20Heap%20Size%7Coutline&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/docs/hotspot/gc5.0/gc_tuning_5.html#0.0.0.0.%20Heap%20Size%7Coutline&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://java.sun.com/docs/hotspot/gc5.0/ergo5.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/docs/hotspot/gc5.0/ergo5.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12425873" author="johnemb" created="Fri, 4 Aug 2006 22:50:25 +0100"  >&lt;p&gt;Attatching &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1614&quot; title=&quot;Test harness overrides heap size settings when starting Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1614&quot;&gt;&lt;del&gt;DERBY-1614&lt;/del&gt;&lt;/a&gt;_v3.diff&apos;, which is a replacement for all previous patches, provided that the changes are accepted by the community.&lt;/p&gt;

&lt;p&gt;This patch implements option A) as described in previous comments. In short, this means that the patch removes the test harness&apos; inclination to override any heap size (initial or max) flags for the Network Server JVM when started via the NetServer class of the test harness. &lt;/p&gt;

&lt;p&gt;Prior to applying this patch, the Network server JVM will have a particular heap size (initial size 16 MB and/or max size 32 MB) if the initial size has not been specified by both -ms AND -Xms, or if the max size has not been specified by both -mx and -Xmx, in the jvmflags argument to NetServer.java&apos;s constructor.&lt;/p&gt;

&lt;p&gt;This patch only affects harness behavior when the NetServer class is used to start a server instance in the DerbyNet and DerbyNetClient frameworks. Default behavior does not change for most tests; the patch only affects tests or test runs where any type of jvm flags are specified (usually by the jvmflags system property), either on the command line or in &amp;lt;test&amp;gt;_app.properties files.&lt;/p&gt;


&lt;p&gt;Testing:&lt;br/&gt;
-----------&lt;/p&gt;

&lt;p&gt;I have run derbyall on Solaris 10 x86, Sun&apos;s HotSpot client VM 1.5.0_06. The only test failure was XATest.java in the DerbyNetClient framework, which I assume is related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1640&quot; title=&quot;Instability in XATest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1640&quot;&gt;&lt;del&gt;DERBY-1640&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I have also run the wisconsin test with no jvmflags, with &quot;-Djvmflags=-server&quot;, and with &quot;-Djvmflags=-server^-Dderby.drda.logConnections=true&quot; in the DerbyNet and DerbyNetClient frameworks. All test runs were successful (tests passed and verbose output was as intended/expected). This verifies that:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the harness is able to parse both one and multiple jvm flags properly when specified on the command line by the jvmflags property&lt;/li&gt;
	&lt;li&gt;the harness successfully merges jvm flags from an .._app.properties file with jvm flags from the command line&lt;/li&gt;
	&lt;li&gt;the harness does no longer override heap size settings set in the ..._app.properties file&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am currently running derbyall with the property -Djvmflags=-server, to see if this makes any difference.&lt;/p&gt;

&lt;p&gt;Please review this patch. I hope to get this in by the 10.2 &quot;code freeze&quot; date.&lt;/p&gt;</comment>
                            <comment id="12425889" author="fuzzylogic" created="Fri, 4 Aug 2006 23:52:16 +0100"  >&lt;p&gt;I agree, I think this approach is better than setting a default, especially one which cannot be overridden. If there are no objections, I will commit the _v3 patch on Monday.&lt;/p&gt;</comment>
                            <comment id="12425949" author="johnemb" created="Sat, 5 Aug 2006 10:54:34 +0100"  >&lt;p&gt;I forgot to mention that the _v3 patch also removes the call to the jvm.setNoasyncgc() method (this is no longer a valid jvm option, and was only set if jvmflags was non-empty), and it fixes a small bug and adds a note about setting heap size flags in testing/README.htm, as mentioned in previous patch descriptions.&lt;/p&gt;

&lt;p&gt;The derbyall run with -Djvmflags=-server had the same failure (XATest.java) as the previous run - no more, no less (same platform).&lt;/p&gt;

&lt;p&gt;Thanks, Andrew, for putting this on your to-be-committed list!&lt;/p&gt;</comment>
                            <comment id="12426398" author="fuzzylogic" created="Tue, 8 Aug 2006 04:16:35 +0100"  >&lt;p&gt;Committed to trunk with revision 429550.&lt;/p&gt;</comment>
                            <comment id="12426536" author="johnemb" created="Tue, 8 Aug 2006 12:07:44 +0100"  >&lt;p&gt;Thank you very much for committing!&lt;/p&gt;

&lt;p&gt;I have verified that the fix is in the trunk, and that it seems to work as expected.&lt;br/&gt;
I noticed a typo in the commit-message: &quot;or network server&quot; should be read as &quot;for network server&quot;.&lt;/p&gt;

&lt;p&gt;Closing the issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12330003">DERBY-1091</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12337993" name="DERBY-1614_v1.diff" size="3651" author="johnemb" created="Wed, 2 Aug 2006 13:03:27 +0100"/>
                            <attachment id="12338054" name="DERBY-1614_v2.diff" size="3623" author="johnemb" created="Thu, 3 Aug 2006 11:55:00 +0100"/>
                            <attachment id="12338189" name="DERBY-1614_v3.diff" size="2715" author="johnemb" created="Fri, 4 Aug 2006 22:50:25 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 2 Aug 2006 22:14:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22599</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy14z3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40456</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10051"><![CDATA[Urgent]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>