<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:10:37 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5840/DERBY-5840.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5840] Clean up compiler warnings introduced by using Java 5 language features</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5840</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Using Java 5 language features forces us to compile code at level 5 or higher. At this level, the compiler raises warnings not seen at lower levels. This issue is a place to discuss and attach cleanup to eliminate these warnings.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12597240">DERBY-5840</key>
            <summary>Clean up compiler warnings introduced by using Java 5 language features</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Tue, 3 Jul 2012 14:48:57 +0100</created>
                <updated>Fri, 14 Jun 2013 18:13:30 +0100</updated>
                            <resolved>Tue, 28 May 2013 10:53:58 +0100</resolved>
                                    <version>10.10.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Miscellaneous</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13405941" author="rhillegas" created="Tue, 3 Jul 2012 14:59:22 +0100"  >&lt;p&gt;Attaching derby-5840-01-aa-compatibilityTests.diff. This patch fixes some unchecked compiler warnings in the compatibility tests. Committed at subversion revision 1356735.&lt;/p&gt;

&lt;p&gt;Most of the fixes involve adding parameter types to Collection declarations.&lt;/p&gt;

&lt;p&gt;However, I added @SuppressWarnings annotations to a couple methods in order to silence the compiler. The root cause of the warnings was that Collections methods were being called on Collections whose parameter types were compiled at level 1.4. These annotations are needed until we can use a Java 5 compiler to build the packages which contain the parameter types.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionedNetworkServerTestSetup.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/_Suite.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/JDBCDriverTest.java&lt;/p&gt;</comment>
                            <comment id="13406066" author="dagw" created="Tue, 3 Jul 2012 22:29:49 +0100"  >&lt;p&gt;I checked this and saw that the Lint warnings disappeared for the patch. Looks good to me. +1&lt;/p&gt;</comment>
                            <comment id="13406088" author="knutanders" created="Tue, 3 Jul 2012 22:51:22 +0100"  >&lt;p&gt;Thanks for cleaning this up, Rick. Looks like a good first step on the way to making use of Java 5 language features.&lt;/p&gt;

&lt;p&gt;I saw similar warnings a while ago when I looked into changing the source level of the client code to 1.5 (with the ultimate goal of being able to push the java.sql.Wrapper.unwrap() overrides to the base implementation classes, which would allow us to simplify the class hierarchy). What I noticed, though, was that changing the source level also made the compiler emit lots of deprecation warnings, primarily for deprecated methods in java.util.Date. Those methods were also deprecated in Java 1.4, so it wasn&apos;t obvious to me why changing the source level would make the warnings show up.&lt;/p&gt;</comment>
                            <comment id="13406389" author="knutanders" created="Wed, 4 Jul 2012 10:27:46 +0100"  >&lt;p&gt;For my own education, I went through the changes in the 01-aa patch to understand exactly why the compiler warned us. I found that some of the code touched by the patch could be made simpler now that they are using Java 5 features. Attaching the patch as 02-aa.&lt;/p&gt;

&lt;p&gt;JDBCDriverTest.java: The parameter that caused the warning was always null, so I just removed it.&lt;/p&gt;

&lt;p&gt;VersionCombinationConfigurator.java: Used the more specific type URL instead of Object so that no cast was needed.&lt;/p&gt;

&lt;p&gt;VersionedNetworkServerTestSetup.java: Removed casts when calling cmd.toArray(new String&lt;span class=&quot;error&quot;&gt;&amp;#91;cmd.size()&amp;#93;&lt;/span&gt;), as the compiler now knows the returned array is a String[].&lt;/p&gt;

&lt;p&gt;_Suite.java: Replaced the reference to Collections.EMPTY_LIST with a call to Collections.emptyList(), as the latter is type safe. Also removed the SuppressWarnings annotation since the change to emptyList() silenced the warning.&lt;/p&gt;

&lt;p&gt;The tests ran cleanly and I didn&apos;t see any warnings when doing a full build.&lt;/p&gt;</comment>
                            <comment id="13409337" author="knutanders" created="Mon, 9 Jul 2012 12:21:22 +0100"  >&lt;p&gt;Committed the 02-aa patch with revision 1359069.&lt;/p&gt;</comment>
                            <comment id="13412621" author="knutanders" created="Thu, 12 Jul 2012 10:10:25 +0100"  >&lt;p&gt;The network server is only supported on Java 5 and newer since 10.9. The attached patch, derby-5840-03-aa-drda.diff, changes source and target level to 1.5 for all the code under java/drda (except the servlet) and adds type arguments to declarations and constructor calls where it&apos;s required in order to silence unchecked conversion warnings.&lt;/p&gt;

&lt;p&gt;Some places the patch also removes casts that became unnecessary because of the extra type information available to the compiler, but I didn&apos;t spend too much time on tracking down code that could be simplified, as that didn&apos;t cause any compiler warnings.&lt;/p&gt;

&lt;p&gt;The code compiles with no warnings in my environment, and all the regression tests passed.&lt;/p&gt;</comment>
                            <comment id="13413816" author="knutanders" created="Fri, 13 Jul 2012 16:24:58 +0100"  >&lt;p&gt;I found that I got a sealing violation error when I tried to start the network server with &quot;java -jar derbynet.jar start&quot; after applying the 03-aa patch:&lt;/p&gt;

&lt;p&gt;$ java -jar derbynet.jar start&lt;br/&gt;
Fri Jul 13 16:12:58 CEST 2012 : Security manager installed using the Basic server security policy.&lt;br/&gt;
Exception in thread &quot;main&quot; java.lang.ExceptionInInitializerError&lt;br/&gt;
	at java.lang.Class.forName0(Native Method)&lt;br/&gt;
	at java.lang.Class.forName(Class.java:186)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(NetworkServerControlImpl.java:1008)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:711)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2226)&lt;br/&gt;
	at org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java:352)&lt;br/&gt;
Caused by: java.lang.SecurityException: sealing violation: package org.apache.derby.mbeans is sealed&lt;br/&gt;
	at java.net.URLClassLoader.getAndVerifyPackage(URLClassLoader.java:388)&lt;br/&gt;
(...)&lt;/p&gt;

&lt;p&gt;The JUnit tests would fail for similar reasons if derbynet.jar appeared before derby.jar on the classpath.&lt;/p&gt;

&lt;p&gt;The reason was that org.apache.derby.mbeans.VersionMBean ended up both in derby.jar and derbynet.jar, and it should only be in derby.jar.&lt;/p&gt;

&lt;p&gt;NetworkServerControlImpl has a reference to VersionMBean.class, and so it did before the patch:&lt;/p&gt;

&lt;p&gt;        final Object versionMBean = mgmtService.registerMBean(&lt;br/&gt;
                           new Version(&lt;br/&gt;
                                   getNetProductVersionHolder(),&lt;br/&gt;
                                   SystemPermission.SERVER),&lt;br/&gt;
                           VersionMBean.class,&lt;br/&gt;
                           &quot;type=Version,jar=derbynet.jar&quot;);&lt;/p&gt;

&lt;p&gt;When I disassembled the old and the new version of the NetworkServerControlImpl class, I found that the old version, compiled with target level 1.4, had no reference to VersionMBean.class, only to the string &quot;org.apache.derby.mbeans.VersionMBean&quot;. The byte code would dynamically load the class when the code that referenced it was invoked. Since there&apos;s no reference to the class, classlister couldn&apos;t find it. When compiled with target level 1.5, on the other hand, the byte code would have a direct reference to the class instance, and that enables classlister to find the dependency.&lt;/p&gt;

&lt;p&gt;I think the fix is to make classlister ignore the org.apache.derby.mbeans package when building the list of classes to include in derbynet.jar. It already has a list of other engine packages to exclude, so we could add the package to that list.&lt;/p&gt;</comment>
                            <comment id="13413819" author="knutanders" created="Fri, 13 Jul 2012 16:28:40 +0100"  >&lt;p&gt;Attaching an updated version of the 03-aa patch as 03-ab.&lt;/p&gt;

&lt;p&gt;The updated patch makes classlister skip the org.apache.derby.mbeans package (but not the org.apache.derby.mbeans.drda package) when building derbynet.jar.&lt;/p&gt;

&lt;p&gt;I&apos;ve verified that &quot;java -jar derbynet start&quot; works again and that the jars contain the same classes as they did before the patch.&lt;/p&gt;

&lt;p&gt;I&apos;ve started a new regression test run with the updated patch.&lt;/p&gt;</comment>
                            <comment id="13414894" author="knutanders" created="Mon, 16 Jul 2012 08:23:34 +0100"  >&lt;p&gt;Committed the 03-ab patch to trunk with revision 1361925.&lt;/p&gt;</comment>
                            <comment id="13414952" author="knutanders" created="Mon, 16 Jul 2012 10:25:43 +0100"  >&lt;p&gt;I mentioned that I had tried to change the source level for the network client and found that it caused a lot of deprecation warnings to pop up, even though the methods were deprecated before Java 5. I found an explanation in this bug report: &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6394563&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/view_bug.do?bug_id=6394563&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The compile target in java/client/build.xml specifies nowarn=&quot;on&quot;, which is supposed to silence warnings. However, it only silences non-mandatory warnings, and deprecation warnings became mandatory in Java 5. So when source level changes from 1.4 to 1.5, the compiler isn&apos;t allow to ignore the deprecation warnings.&lt;/p&gt;

&lt;p&gt;The attached patches change the source and target level for the network client code to 1.5, and clean up the warnings. I&apos;ve split this change in two separate patches so that it&apos;s easier to see which changes are for generics/unchecked conversion warnings, and which changes are for the deprecation warnings.&lt;/p&gt;

&lt;p&gt;derby-5840-04-aa-client-level.diff changes the compiler level and addresses the unchecked conversion warnings by using generics in signatures.&lt;/p&gt;

&lt;p&gt;One thing to note is that it removes the getTypeMap() implementations in LogicalConnection40 and NetConnection40, as the getTypeMap() implementations in their respective super-classes now have the correct generic signature and no overrides are needed anymore.&lt;/p&gt;

&lt;p&gt;derby-5840-05-aa-client-deprecation.diff cleans up the deprecation warnings. There were three kinds of warnings:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Use of deprecated class java.io.StringBufferInputStream in Clob, ClobOutputStream and ClobWriter. This code is only used when accessing clobs on an old server that doesn&apos;t support locators, so I just silenced them using a @SuppressWarnings(&quot;deprecation&quot;) annotation for now. I did however refactor the code so that the annotation only had to be added at one isolated location.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;LogicalCallableStatement and LogicalPreparedStatement implement some deprecated methods (which they have to implement in order to satisfy the interface), and the compiler complains because they are implemented by forwarding the calls to deprecated methods in the physical statement classes. Adding @Deprecated annotations to the methods in the logical statement classes silences the warnings, as calling deprecated methods from other deprecated methods does not cause warnings.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The ResultSet class uses deprecated methods in java.util.Date. The patch makes it use non-deprecated methods in java.util.Calendar instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The regression tests ran cleanly with these patches, and the compiler didn&apos;t emit any warnings.&lt;/p&gt;</comment>
                            <comment id="13416031" author="knutanders" created="Tue, 17 Jul 2012 10:10:17 +0100"  >&lt;p&gt;Committed the 04-aa-client-level and 05-aa-client-deprecation patches to trunk, revision 1362419 and 1362420.&lt;/p&gt;</comment>
                            <comment id="13416141" author="knutanders" created="Tue, 17 Jul 2012 13:33:56 +0100"  >&lt;p&gt;The 04 patch broke the build if the JDK was newer than Java 5 and no ant.properties file pointing to a Java 5 installation was present.&lt;/p&gt;

&lt;p&gt;The reason for the build break was that some JDBC methods actually changed between Java 1.4.2 and Java 5:&lt;/p&gt;

&lt;p&gt;CallableStatement.getObject(String, Map) -&amp;gt; Object&lt;br/&gt;
CallableStatement.getObject(int, Map) -&amp;gt; Object&lt;br/&gt;
Connection.setTypeMap(Map) -&amp;gt; void&lt;br/&gt;
Connection.getTypeMap() -&amp;gt; Map&lt;/p&gt;

&lt;p&gt;In all of these signatures, Map was changed to Map&amp;lt;String,Class&amp;lt;?&amp;gt;&amp;gt; in Java 5.&lt;/p&gt;

&lt;p&gt;When we changed the source level of the client&apos;s implementation of these interfaces, and the build used the real Java 5 libraries, we got warnings about unchecked conversions because the implementation classes did not have generic signatures. So the 04 patch changed the signatures to silence the warnings.&lt;/p&gt;

&lt;p&gt;However, if we compile using the stubs, which still use non-generic signatures, we get a build error because the compiler doesn&apos;t find that we have implemented that method with a more specific signature.&lt;/p&gt;

&lt;p&gt;The fix is to update the signatures in the JDBC 3.0 stubs to match the signatures in Java 5, so that we get the same results regardless of which libraries we compile against. The JDBC 3.0 stubs are no longer used to compile code that should run on older JVMs, so it should be a safe move.&lt;/p&gt;

&lt;p&gt;derby-5840-06-aa-jdbc3-stubs.diff does that by changing the signatures of the above mentioned methods to use generics.&lt;/p&gt;

&lt;p&gt;The patch also changes the source and target level in the build target for the stubs (in order to be allowed to use generic signatures in the code), and fixes a variable declaration in the java.sql.DriverManager stub in order to silence a warning that appeared because of the changed source level.&lt;/p&gt;

&lt;p&gt;Committed revision 1362464.&lt;/p&gt;</comment>
                            <comment id="13417111" author="knutanders" created="Wed, 18 Jul 2012 15:10:35 +0100"  >&lt;p&gt;While I was at it, I went quickly through the network server code to see if there were places where we could use for-each loops, which would make the code more concise. The attached patch, derby-5840-07-aa-drda-for-each.diff, changes the places I found. Note that in one case (NetworkServerControlImpl.checkAddressIsLocal()) I went one step further and replaced the original for loop with a call to contains(). Also, I only touched loops using Enumerations if the original loop was inside a block synchronized on the collection instance, as there&apos;s a slight risk that the for-each loop would throw ConcurrentModificationException, which the Enumeration wouldn&apos;t throw.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13418171" author="knutanders" created="Thu, 19 Jul 2012 09:55:10 +0100"  >&lt;p&gt;Committed the 07-aa patch to trunk with revision 1363264.&lt;/p&gt;</comment>
                            <comment id="13420264" author="knutanders" created="Sun, 22 Jul 2012 19:23:24 +0100"  >&lt;p&gt;Attaching another patch (derby-5840-08-aa-jdbc3-embedded.diff) to compile the JDBC 3-specific classes in the embedded driver with source and target level 1.5.&lt;/p&gt;

&lt;p&gt;Source and target level was changed to 1.5 for the JDBC 3 targets in the java/engine sub-tree.&lt;/p&gt;

&lt;p&gt;Since we don&apos;t produce a separate JDBC 2 driver anymore, the patch folds the JDBC 2 build targets into the JDBC 3 build targets, so that the JDBC 2 classes are also compiled with level 1.5.&lt;/p&gt;

&lt;p&gt;In addition to the usual updates to use generics where we get unchecked conversion warnings, the patch fixes a deprecation warning that popped up in EmbeddedDriver.boot(). The warning was about the use of DriverManager.getLogStream(), which is deprecated in favour of DriverManager.getLogWriter(). The patch makes it use getLogWriter(), and changes the signatures of the methods that receive the log writer to expect a PrintWriter instead of a PrintStream. Some places where System.err is passed to those methods, we now have to wrap System.err in a PrintWriter instance because of this.&lt;/p&gt;

&lt;p&gt;Changing the target level revealed that our build doesn&apos;t properly isolate the JSR-169 implementation classes from the JDBC 3.0 implementation classes, something that manifested itself as failure to boot the engine on J2ME platforms because it tried to load classes that were compiled with a higher target level than the JVM understood. These things had to be fixed to get the engine to load again on J2ME:&lt;/p&gt;

&lt;p&gt;1) EmbedConnection30 and EmbedSavepoint30 are used by the JSR-169 implementation, but the classes are compiled by the compile_jdbc3 target, because that target picks up every file whose name matches *30.java. This was addressed by renaming EmbedSavepoint30 to EmbedSavepoint, move all of EmbedConnection30&apos;s methods to the super-class (EmbedConnection), and remove the EmbedConnection30 class. Since the class names no longer indicated that this was JDBC 3-specific code (which it wasn&apos;t), it was correctly compiled for JSR-169.&lt;/p&gt;

&lt;p&gt;2) The XactFactory class failed to load on J2ME because it had a field (xa_resource) whose type was XAResourceManager. We don&apos;t support XA in our JSR-169 driver, so XAResourceManager is compiled with target level 1.5, and this prevented the XactFactory class from loading. The fix was to change the type of the field to Object. Using Object instead of XAResourceManager is an existing strategy in XactFactory, as can be seen for example in this method declaration:&lt;/p&gt;

&lt;p&gt;    public /* XAResourceManager */ Object getXAResourceManager()&lt;/p&gt;

&lt;p&gt;(Note XAResourceManager is commented out.) I assume this was done for a similar reason, perhaps back when JDBC 3 was compiled with target level 1.4, and we still supported Foundation Profile 1.0, which only supported level 1.3.&lt;/p&gt;

&lt;p&gt;3) ResourceAdapter (another XA class) is loaded as an optional component, as seen in BasicDatabase.bootResourceAdapter():&lt;/p&gt;

&lt;p&gt;		try&lt;/p&gt;
		{
			resourceAdapter = 
				Monitor.bootServiceModule(create, this,
										 org.apache.derby.iapi.reference.Module.ResourceAdapter,
										 allParams);
		}
&lt;p&gt;		catch (StandardException mse)&lt;/p&gt;
		{
			// OK, resourceAdapter is an optional module
		}

&lt;p&gt;However, even though it was prepared for failure to load the class, this code didn&apos;t see a StandardException on J2ME after ResourceAdapter&apos;s target level changed to 1.5. Instead, it saw a raw UnsupportedClassVersionError. The fix was to change ProtocolKey.create() to wrap LinkageError (a super-class of UnsupportedClassVersionError) in a StandardException. That method was already prepared for class loading to fail, but not because of wrong class version. When the error came out as a StandardException, BasicDatabase.bootResourceAdapter() knew how to handle it.&lt;/p&gt;

&lt;p&gt;I ran suites.All on Oracle Java ME Embedded Client 1.1 to verify that the JSR-169 driver still works. I also ran derbyall and suites.All on Java 5 and Java 7. All the tests passed.&lt;/p&gt;</comment>
                            <comment id="13421217" author="knutanders" created="Tue, 24 Jul 2012 07:41:53 +0100"  >&lt;p&gt;Committed revision 1364917.&lt;/p&gt;</comment>
                            <comment id="13656395" author="knutanders" created="Mon, 13 May 2013 22:20:04 +0100"  >&lt;p&gt;Attaching derby-5840-09-aa-test-deprecation-and-unchecked.diff which cleans up some deprecation warnings in the tests, and also fixes unchecked conversion warnings in the org.apache.derbyTesting.junit package.&lt;/p&gt;

&lt;p&gt;In case someone thinks the changes in ManyMethods.java look suspicious, for example this one:&lt;/p&gt;

&lt;p&gt; 	public static Date staticDateMethod()&lt;/p&gt;
 	{
-		/* July 2, 1997 */
-		return new Date(97, 7, 2);
+        /* August 2, 1997 */
+        Calendar cal = Calendar.getInstance();
+        cal.clear();
+        cal.set(1997, Calendar.AUGUST, 2, 0, 0, 0);
+        return new Date(cal.getTimeInMillis());
 	}

&lt;p&gt;The patch does not actually change the date returned by this method from July 2 to August 2. The original code comment was wrong. Since the month argument in Date&apos;s deprecated constructor starts counting on 0, 7 means August not July.&lt;/p&gt;

&lt;p&gt;All tests ran cleanly with an earlier version of the patch. I had to make some small changes because of conflicts with the latest changes in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6213&quot; title=&quot;Deprecate support for Java 5 and CDC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6213&quot;&gt;&lt;del&gt;DERBY-6213&lt;/del&gt;&lt;/a&gt;, so I&apos;m rerunning the tests.&lt;/p&gt;</comment>
                            <comment id="13656874" author="knutanders" created="Tue, 14 May 2013 08:36:56 +0100"  >&lt;p&gt;Committed derby-5840-09-aa-test-deprecation-and-unchecked.diff to trunk with revision 1482234.&lt;/p&gt;</comment>
                            <comment id="13658213" author="knutanders" created="Wed, 15 May 2013 11:09:16 +0100"  >&lt;p&gt;Attaching derby-5840-10-aa-derbynet-perf-system.diff which cleans up unchecked warnings in performance tests, system tests and derbynet tests.&lt;/p&gt;

&lt;p&gt;Warnings were silenced either by adding type parameters to collections and privileged actions, or by replacing privileged blocks with calls to already existing helper methods in the test framework.&lt;/p&gt;

&lt;p&gt;The modified tests seem to run fine with the changes. I&apos;ve started the full regression test suite just in case.&lt;/p&gt;</comment>
                            <comment id="13658282" author="knutanders" created="Wed, 15 May 2013 13:11:36 +0100"  >&lt;p&gt;Committed derby-5840-10-aa-derbynet-perf-system.diff with revision 1482780.&lt;/p&gt;</comment>
                            <comment id="13658300" author="knutanders" created="Wed, 15 May 2013 13:30:29 +0100"  >&lt;p&gt;Attaching derby-5840-11-aa-engine-i18n-store-tools.diff, which cleans up the warnings in the following test packages:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;engine&lt;/li&gt;
	&lt;li&gt;i18n&lt;/li&gt;
	&lt;li&gt;store&lt;/li&gt;
	&lt;li&gt;tools&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The warnings are silenced either by adding type parameters or by replacing code (typically privileged blocks) with helper methods in the test framework.&lt;/p&gt;

&lt;p&gt;The tests touched by the patch pass when run separately. I&apos;ve started a full regression test run to see if it breaks something else.&lt;/p&gt;</comment>
                            <comment id="13658395" author="knutanders" created="Wed, 15 May 2013 15:25:35 +0100"  >&lt;p&gt;All tests passed. Committed revision 1482862.&lt;/p&gt;</comment>
                            <comment id="13658859" author="knutanders" created="Wed, 15 May 2013 22:43:52 +0100"  >&lt;p&gt;I&apos;m running regression tests on the attached derby-5840-12-aa-jdbcapi.diff patch, which cleans up the warnings in the jdbcapi test package. The patch also touches some classes in the upgrade test that are compiled by the jdbcapi build target.&lt;/p&gt;

&lt;p&gt;The warnings are silenced by adding type parameters to the declarations, or in some cases by removing the code that causes the warnings if the test framework has helper methods that could do the same.&lt;/p&gt;</comment>
                            <comment id="13659291" author="knutanders" created="Thu, 16 May 2013 07:35:48 +0100"  >&lt;p&gt;All the tests passed. Committed revision 1483202.&lt;/p&gt;</comment>
                            <comment id="13659861" author="knutanders" created="Thu, 16 May 2013 20:22:51 +0100"  >&lt;p&gt;Attaching derby-5840-13-aa.diff which cleans up the warnings in the rest of the test classes.&lt;/p&gt;

&lt;p&gt;Some of the warnings came from code that was only needed on platforms that are no longer supported on trunk (like the use of reflection in TableFunctionTest to call JDBC 4 methods on pre-JDBC 4 platforms, and a big privileged block in OSReadOnlyTest to find the database name on JSR-169). I removed the code instead of cleaning it up.&lt;/p&gt;

&lt;p&gt;All the regression tests passed with the patch.&lt;/p&gt;</comment>
                            <comment id="13660541" author="knutanders" created="Fri, 17 May 2013 11:28:27 +0100"  >&lt;p&gt;Committed revision 1483727.&lt;/p&gt;</comment>
                            <comment id="13663052" author="knutanders" created="Tue, 21 May 2013 16:24:15 +0100"  >&lt;p&gt;Attaching derby-5840-13-aa-remove-suppression.diff, which removes some @SuppressWarnings annotations by making unchecked conversions checked.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Make getTypeMap() use Collections.emptyMap() instead of Collections.EMPTY_MAP. emptyMap() was added as a type-safe alternative to EMPTY_MAP in Java 5.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/load/ColumnInfo.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When creating a string array from a list of strings, cast each element explicitly to String instead of relying on an unchecked cast to ArrayList&amp;lt;String&amp;gt;.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/services/locks/Deadlock.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Change a List&amp;lt;Object&amp;gt; variable to plain List, as the type parameter isn&apos;t needed the way the list is used here, and this removes the need to do an unchecked cast from Object to List&amp;lt;Object&amp;gt;.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Explicitly cast the elements in the untyped lists passed to the init() method.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remove @SuppressWarnings annotation that&apos;s been made unnecessary because of other changes in this issue.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Change some occurrences of Class to Class&amp;lt;?&amp;gt;, which allows removing the @SuppressWarnings annotations.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/testing/org/apache/derbyTesting/functionTests/tests/management/MBeanTest.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Change the type of the privileged action in getDerbyDomainMBeans() from Object to Set&amp;lt;ObjectName&amp;gt;, so that the returned value doesn&apos;t need to be cast unchecked from Object to Set&amp;lt;ObjectName&amp;gt;.&lt;/p&gt;

&lt;p&gt;I&apos;m running tests on the patch.&lt;/p&gt;</comment>
                            <comment id="13663307" author="knutanders" created="Tue, 21 May 2013 20:51:12 +0100"  >&lt;p&gt;All tests ran cleanly. Committed revision 1484920.&lt;/p&gt;</comment>
                            <comment id="13663310" author="knutanders" created="Tue, 21 May 2013 20:59:30 +0100"  >&lt;p&gt;Attaching derby-5840-14-aa-bigdecimal.diff which removes the suppression of an unchecked warning in NumberDataType.setBigDecimal().&lt;/p&gt;

&lt;p&gt;The method takes a BigDecimal argument. However, its declared type is Number in order to compile on CDC. The method needs to call BigDecimal&apos;s compareTo() method, so it casts it to Comparable, which is a generic type in Java 5, and the cast causes an unchecked conversion warning.&lt;/p&gt;

&lt;p&gt;Since the support for CDC is dropped on trunk, the parameter type can now be BigDecimal. The patch changes the signature of the setBigDecimal() method in DataValueDescriptor and all overrides.&lt;/p&gt;

&lt;p&gt;Also, since CDC isn&apos;t supported, the patch removes the CDC-specific implementation classes rather than updating them with the new signatures. The following classes are removed:&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/types/BinaryDecimal.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/types/CDCDataValueFactory.java&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13663829" author="knutanders" created="Wed, 22 May 2013 07:13:33 +0100"  >&lt;p&gt;Committed revision 1485076.&lt;/p&gt;</comment>
                            <comment id="13663942" author="knutanders" created="Wed, 22 May 2013 10:00:52 +0100"  >&lt;p&gt;The attached patch derby-5840-15-aa-more-suppressions.diff removes more @SuppressWarnings annotations:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/services/context/ContextService.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The suppressed warnings were caused by casts from Object to Stack&amp;lt;ContextManager&amp;gt;, and casts to generic types cause unchecked warnings as they cannot be checked at run-time because of type erasure.&lt;/p&gt;

&lt;p&gt;These casts were needed because the stacks live in a ThreadLocal&amp;lt;Object&amp;gt; instance rather than a ThreadLocal&amp;lt;Stack&amp;lt;ContextManager&amp;gt;&amp;gt;, because of an optimization that prevents allocation of a Stack object until the second ContextManager is put on the stack. The code would have been simpler, and the warnings would go away, if the ThreadLocal always contained a Stack. But for now I&apos;m going to assume the optimization is worth the extra complexity, and keep the ThreadLocal as a ThreadLocal&amp;lt;Object&amp;gt;.&lt;/p&gt;

&lt;p&gt;To prevent the warnings, the patch changes ContextService so that it puts the context managers in a specialized sub-class of Stack. The class itself is actually empty:&lt;/p&gt;

&lt;p&gt;    /** Specialized stack class that contains context managers. */&lt;br/&gt;
    private static class ContextManagerStack extends Stack&amp;lt;ContextManager&amp;gt; &lt;/p&gt;
{
        // The class is empty. Its primary purpose is to allow type-safe casts
        // from Object, which are needed because the stacks live in a
        // ThreadLocal&amp;lt;Object&amp;gt; rather than ThreadLocal&amp;lt;Stack&amp;lt;ContextManager&amp;gt;&amp;gt;.
        // Casts from Object to Stack&amp;lt;ContextManager&amp;gt; will cause an unchecked
        // conversion warning, whereas casts from Object to ContextManagerStack
        // won&apos;t.
    }

&lt;p&gt;Casts to ContextManagerStack will not cause warnings, since it&apos;s not a generic type and doesn&apos;t suffer from type erasure. However, since it extends Stack&amp;lt;ContextManager&amp;gt;, it can be used just like a Stack&amp;lt;ContextManager&amp;gt; instance. For example, its pop() method returns a ContextManager without any cast needed, and the compiler will give an error if the argument to push() is not a ContextManager.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The suppressed warning was caused by a call to StandardMBean&apos;s constructor, which has a generic signature (T obj, Class&amp;lt;T&amp;gt; cl), whereas the actual arguments passed in were (Object, Class).&lt;/p&gt;

&lt;p&gt;The patch silences the warning by generifying the signature of ManagementService.registerMBean(), and its implementations in JMXManagementService and NoManagementService, so that StandardMBean&apos;s constructor can be called with properly typed arguments.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/services/locks/LockSpace.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The suppressed warning was caused by caching HashMap&amp;lt;Lock,Object&amp;gt; instances in an array. Since arrays cannot have generic types, the elements in the array had to be cast to the generic type each time they were read, and casting to generic types causes unchecked conversion warnings.&lt;/p&gt;

&lt;p&gt;The patch made LockSpace cache the HashMap objects in a collection (an ArrayDeque instance) instead of an array. Collections can have generic types, so the unsafe cast was avoided.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/vti/ForeignTableVTI.java:&lt;br/&gt;
java/engine/org/apache/derby/vti/VTITemplate.java:&lt;/p&gt;

&lt;p&gt;Removed suppression of deprecation warnings on the class level, and instead tagged each of the deprecated methods with a Deprecated annotation.&lt;/p&gt;

&lt;p&gt;I&apos;m running regression tests on the patch.&lt;/p&gt;</comment>
                            <comment id="13664011" author="knutanders" created="Wed, 22 May 2013 12:07:59 +0100"  >&lt;p&gt;The ClassSize class is annotated so that unchecked conversion warnings are suppressed in the entire class.&lt;/p&gt;

&lt;p&gt;The warnings are there because ClassSize cannot access ClassSizeCatalog directly, and must access it via an unchecked cast to Hashtable&amp;lt;String,int[]&amp;gt;. ClassSizeCatalog is generated by ClassSizeCrawler long after ClassSize is compiled, so ClassSize must use reflection to access it.&lt;/p&gt;

&lt;p&gt;The derby-5840-16-aa-class-size-catalog.diff patch refactors ClassSizeCatalog so that ClassSize doesn&apos;t have to do the unchecked cast. It introduces a new abstract class called ClassSizeCatalog, and makes ClassSizeCrawler create a ClassSizeCatalogImpl class that extends ClassSizeCatalog. This way, it&apos;s safe for ClassSize to access the catalog via the abstract ClassSizeCatalog class without reflection, and it doesn&apos;t need to cast it unchecked to Hashtable.&lt;/p&gt;

&lt;p&gt;I&apos;m running regression tests.&lt;/p&gt;</comment>
                            <comment id="13664054" author="knutanders" created="Wed, 22 May 2013 13:35:39 +0100"  >&lt;p&gt;All tests passed both with #15 and #16.&lt;/p&gt;</comment>
                            <comment id="13664393" author="knutanders" created="Wed, 22 May 2013 19:31:19 +0100"  >&lt;p&gt;Committed #15 to trunk with revision 1485321.&lt;br/&gt;
Committed #16 to trunk with revision 1485322.&lt;/p&gt;</comment>
                            <comment id="13664414" author="knutanders" created="Wed, 22 May 2013 19:56:06 +0100"  >&lt;p&gt;Attaching derby-5840-17-aa-property-conglomerate.diff which makes these changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In LockSpace, many methods operate on a HashMap&amp;lt;Lock,Object&amp;gt;. Since the values in those maps are always of type Lock, change the type of the maps to HashMap&amp;lt;Lock,Lock&amp;gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Remove the SuppressWarnings annotations in PropertyConglomerate and make the declarations strongly typed to avoid the warnings. Apart from adding type parameters to collections, the trick here was to recognize that the property derby.defaultPropertyName was always a FormatableHashtable, so when reading the property we could just as well do a checked conversion to FormatableHashtable instead of an unchecked conversion to Hashtable&amp;lt;Object,Object&amp;gt; or Dictionary&amp;lt;Object,Object&amp;gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13664985" author="knutanders" created="Thu, 23 May 2013 09:26:44 +0100"  >&lt;p&gt;Committed revision 1485609.&lt;/p&gt;</comment>
                            <comment id="13665021" author="knutanders" created="Thu, 23 May 2013 10:18:02 +0100"  >&lt;p&gt;ArrayUtil.asReadOnlyList(Object[]) has a SuppressWarnings annotation because the cast of Collections.EMPTY_LIST to List&amp;lt;Object&amp;gt; is unchecked. The attached patch, derby-5840-18-aa-arrayutil.diff, makes it a checked conversion by using Collections.emptyList() instead and removes the SuppressWarnings annotation.&lt;/p&gt;

&lt;p&gt;The patch also makes the following changes to ArrayUtil:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Generify the signature of asReadOnlyList(Object[]) so that it can be used on other types of arrays than Object[] (although it&apos;s only called on Object[] currently)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Generify the signature of copy(Object[]) so that the copy(String[]) overload can be removed, and so that casts to other more specific array types can be removed at many call sites&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m running regression tests on the patch.&lt;/p&gt;</comment>
                            <comment id="13665131" author="knutanders" created="Thu, 23 May 2013 13:56:59 +0100"  >&lt;p&gt;All tests passed. Committed revision 1485676.&lt;/p&gt;</comment>
                            <comment id="13665499" author="knutanders" created="Thu, 23 May 2013 20:05:01 +0100"  >&lt;p&gt;derby-5840-19-aa-ddutils.diff fixes a warning in DDUtils and removes the SuppressWarnings annotation that silenced it.&lt;/p&gt;

&lt;p&gt;The warning is caused by code that clones a Hashtable by calling clone() and casting the result to Hashtable&amp;lt;String,Integer&amp;gt;. Since Object.clone() has not been generified and returns a plain Object, that cast is unchecked.&lt;/p&gt;

&lt;p&gt;The fix is to clone the object by calling Hashtable&apos;s copy constructor instead. That is, replace&lt;br/&gt;
    (Hashtable&amp;lt;String,Integer&amp;gt;) deleteConnHashtable.clone()&lt;br/&gt;
with&lt;br/&gt;
    new Hashtable&amp;lt;String, Integer&amp;gt;(deleteConnHashtable)&lt;/p&gt;

&lt;p&gt;All tests ran cleanly with the patch.&lt;/p&gt;

&lt;p&gt;Committed revision 1485827.&lt;/p&gt;</comment>
                            <comment id="13666071" author="knutanders" created="Fri, 24 May 2013 08:48:56 +0100"  >&lt;p&gt;CollectNodesVisitor.visit() is annotated with @SuppressWarnings(&quot;unchecked&quot;) because it has an unchecked cast to T when inserting a node into a List&amp;lt;T&amp;gt; instance:&lt;/p&gt;

&lt;p&gt;    nodeList.add( (T) node);&lt;/p&gt;

&lt;p&gt;This can be turned into a checked cast by using the Class object in the nodeClass field:&lt;/p&gt;

&lt;p&gt;    nodeList.add(nodeClass.cast(node));&lt;/p&gt;

&lt;p&gt;The attached derby-5840-20-aa-collectnodes.diff patch makes this change.&lt;/p&gt;

&lt;p&gt;It also had to change the type of the nodeClass field from plain Class to Class&amp;lt;T&amp;gt; in order to make this work, and the type of the corresponding parameter in the constructor. Because of this, all callers of the constructor had to be updated to use the generic syntax to prevent new warnings from popping up where the constructor was called. That is, new CollectNodesVisitor(...) had to be replaced with new CollectNodesVisitor&amp;lt;SomeClass&amp;gt;(...).&lt;/p&gt;

&lt;p&gt;Running tests...&lt;/p&gt;</comment>
                            <comment id="13666120" author="knutanders" created="Fri, 24 May 2013 09:48:11 +0100"  >&lt;p&gt;All tests passed. Committed revision 1485961.&lt;/p&gt;</comment>
                            <comment id="13666131" author="knutanders" created="Fri, 24 May 2013 10:09:40 +0100"  >&lt;p&gt;Attaching derby-5840-21-aa-arrays.diff which fixes two compiler warnings and removes the corresponding SuppressWarnings annotations:&lt;/p&gt;

&lt;p&gt;1) CursorNode&apos;s init() method takes a List&amp;lt;String&amp;gt; parameter. However, the declared type is Object because of the way NodeFactory initializes the nodes, so it has to do an unchecked cast back to List&amp;lt;String&amp;gt;. The patch fixes this by making the parser pass a String[] instance instead of List&amp;lt;String&amp;gt;, and let the init() method convert the String[] value to a List&amp;lt;String&amp;gt; by wrapping it with Arrays.asList(). Both the cast from Object to String[] and the call to Arrays.asList() are checked operations, so the compiler won&apos;t produce warnings.&lt;/p&gt;

&lt;p&gt;2) TriggerEventActivator.setupExecutors() stores Vector&amp;lt;TriggerDescriptor&amp;gt; instances in an array. Since arrays cannot have generic types, it needs unchecked casts to Vector&amp;lt;TriggerDescriptor&amp;gt; each time it accesses the elements. The patch fixes the warning by using a List instead of an array, as Lists can have generic types. Also, since the Vector instances are used only in this methods and never leak out, they are replaced by unsynchronized ArrayLists.&lt;/p&gt;

&lt;p&gt;Running regression tests.&lt;/p&gt;</comment>
                            <comment id="13666148" author="knutanders" created="Fri, 24 May 2013 10:28:47 +0100"  >&lt;p&gt;All tests passed. Committed revision 1485984.&lt;/p&gt;</comment>
                            <comment id="13666225" author="knutanders" created="Fri, 24 May 2013 12:40:16 +0100"  >&lt;p&gt;derby-5840-22-aa-grouped-aggregates.diff removes a SuppressWarnings annotation from GroupedAggregateResultSet and fixes the suppressed warning. It was caused by unchecked conversions when getting HashSet&amp;lt;String&amp;gt; instances from a two-dimensional array of HashSets. The fix was to change the type of the distinctValues field from HashSet[][] to List&amp;lt;List&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt;&amp;gt;, as collections can have generic types whereas arrays cannot.&lt;/p&gt;

&lt;p&gt;While making this change, I found some suspicious-looking logic in the duplicate handling and filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6227&quot; title=&quot;Distinct aggregates don&amp;#39;t work well with territory-based collation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6227&quot;&gt;&lt;del&gt;DERBY-6227&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13666226" author="knutanders" created="Fri, 24 May 2013 12:40:53 +0100"  >&lt;p&gt;All regression tests passed with derby-5840-22-aa-grouped-aggregates.diff.&lt;/p&gt;</comment>
                            <comment id="13666239" author="knutanders" created="Fri, 24 May 2013 13:06:13 +0100"  >&lt;p&gt;Committed derby-5840-22-aa-grouped-aggregates.diff to trunk with revision 1486028.&lt;/p&gt;</comment>
                            <comment id="13666250" author="knutanders" created="Fri, 24 May 2013 13:20:48 +0100"  >&lt;p&gt;The build script post-processes the parsers generated by JavaCC and inserts @SuppressWarnings(&quot;unchecked&quot;) to silence the compiler.&lt;/p&gt;

&lt;p&gt;JavaCC has a JDK_VERSION option, and when it&apos;s set to &quot;1.5&quot; it produces code that compiles cleanly. (I also tried with &quot;1.6&quot;, but our version of JavaCC is too old to recognize that version.)&lt;/p&gt;

&lt;p&gt;The attached patch, derby-5840-23-aa-parsers.diff, sets JDK_VERSION = &quot;1.5&quot; in all the jj files and removes the post-processing target from the build script.&lt;/p&gt;

&lt;p&gt;The code compiles without warnings with the patch. I&apos;m running regression tests.&lt;/p&gt;</comment>
                            <comment id="13666269" author="knutanders" created="Fri, 24 May 2013 13:53:26 +0100"  >&lt;p&gt;All tests passed. Committed revision 1486039.&lt;/p&gt;</comment>
                            <comment id="13666306" author="knutanders" created="Fri, 24 May 2013 14:40:07 +0100"  >&lt;p&gt;The attached patch, derby-5840-24-aa-clone.diff, removes a SuppressWarnings annotation in ijMultipleResultSetResult.java. The warning is raised when an ArrayList&amp;lt;ResultSet&amp;gt; instance is cloned using the Object.clone() method, and the result has to be converted from Object to List&amp;lt;ResultSet&amp;gt; using an unchecked cast. The patch fixes the warning by calling ArrayList&apos;s constructor instead of Object.clone(), which removes the need for an unchecked cast.&lt;/p&gt;

&lt;p&gt;Running regression tests.&lt;/p&gt;</comment>
                            <comment id="13666352" author="knutanders" created="Fri, 24 May 2013 15:22:55 +0100"  >&lt;p&gt;All tests passed. Committed revision 1486071.&lt;/p&gt;</comment>
                            <comment id="13667675" author="knutanders" created="Mon, 27 May 2013 11:08:07 +0100"  >&lt;p&gt;DiskHashtable.getRemove() is annotated with @SuppressWarnings(&quot;unchecked&quot;) because it has an unchecked cast from Object to Vector&amp;lt;Object&amp;gt;. The cast is needed because the retValue variable that holds the Vector may also hold a DataValueDescriptor[], and is therefore of type Object.&lt;/p&gt;

&lt;p&gt;The attached patch, derby-5840-25-aa-diskhashtable.diff, replaces the single, weakly typed retValue variable with two strongly typed variables. When the overloading of the variable is gone, there is no need to cast it, and the warnings go away.&lt;/p&gt;

&lt;p&gt;The patch also makes the method return an ArrayList instead of a Vector. DiskHashtable instances are private to the transaction in which they are used, so returning synchronized collections shouldn&apos;t be necessary. Furthermore, all calls to DiskHashtable.getRemove() go through BackingStoreHashtable, which already returns an ArrayList instead of a Vector if the hash table hasn&apos;t spilt to disk yet. So the use of Vector in DiskHashtable seems to be because of its old age rather than its need for synchronization.&lt;/p&gt;

&lt;p&gt;There&apos;s also a unit test store/TestDiskHashtable.java that accesses DiskHashtable directly and checks the type of the returned value. The patch updates the test so that it accepts any List implementation, not only Vector.&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13667748" author="knutanders" created="Mon, 27 May 2013 14:23:08 +0100"  >&lt;p&gt;BackingStoreHashtable.add_row_to_hash_table() is annotated with @SuppressWarnings(&quot;unchecked&quot;) because of unchecked casts to List&amp;lt;Object&amp;gt;. The casts are needed because the List instances are stored in a HashMap that also stores non-List instances, and the declared type is therefore HashMap&amp;lt;Object, Object&amp;gt;.&lt;/p&gt;

&lt;p&gt;This is very similar to the warning in ContextService, fixed by patch #15.&lt;/p&gt;

&lt;p&gt;The attached patch, derby-5840-26-aa-backingstorehashtable.diff, fixes the warning using the same approach as patch #15. In order to prevent the unchecked casts, a vacuous class RowList that extends ArrayList&amp;lt;DataValueDescriptor[]&amp;gt; is introduced. Since the vacuous class does not have type parameters, type erasure (&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/generics/erasure.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/tutorial/java/generics/erasure.html&lt;/a&gt;) won&apos;t be performed by the compiler, and casts to RowList will be checked and won&apos;t cause unchecked conversion warnings.&lt;/p&gt;

&lt;p&gt;All regression tests passed.&lt;/p&gt;</comment>
                            <comment id="13668137" author="knutanders" created="Tue, 28 May 2013 08:12:29 +0100"  >&lt;p&gt;Committed derby-5840-25-aa-diskhashtable.diff with revision 1486780.&lt;br/&gt;
Committed derby-5840-26-aa-backingstorehashtable.diff with revision 1486782.&lt;/p&gt;</comment>
                            <comment id="13668156" author="knutanders" created="Tue, 28 May 2013 08:40:39 +0100"  >&lt;p&gt;BaseMonitor suppresses an unchecked warning caused by storing Vector&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; instances in an array of type Vector[]. The actual warning happens when elements are fetched from the array and cast unchecked from Vector to Vector&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;.&lt;/p&gt;

&lt;p&gt;Arrays cannot have generic types, but collections can. derby-5840-27-aa-basemonitor.diff fixes the warning by replacing the array of Vectors with an ArrayList of Vector&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;.&lt;/p&gt;

&lt;p&gt;I&apos;m running regression tests on the patch.&lt;/p&gt;</comment>
                            <comment id="13668193" author="knutanders" created="Tue, 28 May 2013 10:03:27 +0100"  >&lt;p&gt;All tests passed. Committed revision 1486826.&lt;/p&gt;</comment>
                            <comment id="13668214" author="knutanders" created="Tue, 28 May 2013 10:50:20 +0100"  >&lt;p&gt;I&apos;m not planning any more work on this issue.&lt;/p&gt;

&lt;p&gt;We currently have three occurrences of @SuppressWarnings(&quot;unchecked&quot;) in the code:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;UserType.compare() (unreachable code, I believe, see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4470&quot; title=&quot;Forbid ordering operations on UDTs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4470&quot;&gt;&lt;del&gt;DERBY-4470&lt;/del&gt;&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;UserDefinedAggregator.accumulate()&lt;/li&gt;
	&lt;li&gt;UserDefinedAggregator.merge()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All of these warnings happen when some instance of a user-defined class is cast to a generic interface type (either java.util.Comparable or org.apache.derby.agg.Aggregator). I don&apos;t see any obvious way to prevent these unchecked casts, so for now we&apos;ll just have to accept that the compiler cannot prove this code to type-safe, and keep the annotations.&lt;/p&gt;

&lt;p&gt;There are also three occurrences of @SuppressWarnings(&quot;deprecation&quot;):&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ParameterMappingTest.getXXX()&lt;/li&gt;
	&lt;li&gt;ParameterMappingTest.setUnicodeStream()&lt;/li&gt;
	&lt;li&gt;ClientClob.reInitForNonLocator()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The deprecation warnings in ParameterMappingTest happen because we test deprecated JDBC methods. We should test all JDBC methods that Derby implements, so the right thing to do is to continue calling the deprecated methods and suppress the warnings.&lt;/p&gt;

&lt;p&gt;The code that causes the deprecation warning in ClientClob is only used when the client talks to an old server that doesn&apos;t support locators. That is, a server whose data dictionary version is 10.2 or older. Modernizing legacy code that&apos;s probably hardly used anymore, doesn&apos;t have very high priority, so I think it&apos;s OK to suppress this warning for now.&lt;/p&gt;</comment>
                            <comment id="13668215" author="knutanders" created="Tue, 28 May 2013 10:53:58 +0100"  >&lt;p&gt;All the code on trunk is built with source and target level 1.6. No compiler warnings are seen when building, and only a small number of warnings are explicitly suppressed, so I believe the code is in such a state that this issue can be resolved now.&lt;/p&gt;</comment>
                            <comment id="13669245" author="dagw" created="Wed, 29 May 2013 14:35:17 +0100"  >&lt;p&gt;Thanks for cleaning this up!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12599458">DERBY-5864</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12646087">DERBY-6213</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12534872" name="derby-5840-01-aa-compatibilityTests.diff" size="5976" author="rhillegas" created="Tue, 3 Jul 2012 14:59:22 +0100"/>
                            <attachment id="12535056" name="derby-5840-02-aa-compatibilityTests-again.diff.txt" size="7297" author="knutanders" created="Wed, 4 Jul 2012 10:27:46 +0100"/>
                            <attachment id="12536191" name="derby-5840-03-aa-drda.diff" size="23788" author="knutanders" created="Thu, 12 Jul 2012 10:10:25 +0100"/>
                            <attachment id="12536397" name="derby-5840-03-ab-drda.diff" size="24727" author="knutanders" created="Fri, 13 Jul 2012 16:28:40 +0100"/>
                            <attachment id="12536607" name="derby-5840-04-aa-client-level.diff" size="65249" author="knutanders" created="Mon, 16 Jul 2012 10:25:43 +0100"/>
                            <attachment id="12536608" name="derby-5840-05-aa-client-deprecation.diff" size="9658" author="knutanders" created="Mon, 16 Jul 2012 10:25:43 +0100"/>
                            <attachment id="12536810" name="derby-5840-06-aa-jdbc3-stubs.diff" size="3280" author="knutanders" created="Tue, 17 Jul 2012 13:33:56 +0100"/>
                            <attachment id="12536992" name="derby-5840-07-aa-drda-for-each.diff" size="7457" author="knutanders" created="Wed, 18 Jul 2012 15:10:35 +0100"/>
                            <attachment id="12537516" name="derby-5840-08-aa-jdbc3-embedded.diff" size="69012" author="knutanders" created="Sun, 22 Jul 2012 19:23:24 +0100"/>
                            <attachment id="12583001" name="derby-5840-09-aa-test-deprecation-and-unchecked.diff" size="74128" author="knutanders" created="Mon, 13 May 2013 22:20:04 +0100"/>
                            <attachment id="12583306" name="derby-5840-10-aa-derbynet-perf-system.diff" size="45392" author="knutanders" created="Wed, 15 May 2013 11:09:16 +0100"/>
                            <attachment id="12583320" name="derby-5840-11-aa-engine-i18n-store-tools.diff" size="49411" author="knutanders" created="Wed, 15 May 2013 13:30:29 +0100"/>
                            <attachment id="12583380" name="derby-5840-12-aa-jdbcapi.diff" size="65383" author="knutanders" created="Wed, 15 May 2013 22:43:52 +0100"/>
                            <attachment id="12584019" name="derby-5840-13-aa-remove-suppression.diff" size="11566" author="knutanders" created="Tue, 21 May 2013 16:24:15 +0100"/>
                            <attachment id="12583525" name="derby-5840-13-aa.diff" size="173877" author="knutanders" created="Thu, 16 May 2013 20:22:51 +0100"/>
                            <attachment id="12584061" name="derby-5840-14-aa-bigdecimal.diff" size="47245" author="knutanders" created="Tue, 21 May 2013 20:59:30 +0100"/>
                            <attachment id="12584278" name="derby-5840-15-aa-more-suppressions.diff" size="17437" author="knutanders" created="Wed, 22 May 2013 10:00:52 +0100"/>
                            <attachment id="12584289" name="derby-5840-16-aa-class-size-catalog.diff" size="10716" author="knutanders" created="Wed, 22 May 2013 12:07:59 +0100"/>
                            <attachment id="12584363" name="derby-5840-17-aa-property-conglomerate.diff" size="11777" author="knutanders" created="Wed, 22 May 2013 19:56:06 +0100"/>
                            <attachment id="12584463" name="derby-5840-18-aa-arrayutil.diff" size="11343" author="knutanders" created="Thu, 23 May 2013 10:18:02 +0100"/>
                            <attachment id="12584554" name="derby-5840-19-aa-ddutils.diff" size="2017" author="knutanders" created="Thu, 23 May 2013 20:05:01 +0100"/>
                            <attachment id="12584656" name="derby-5840-20-aa-collectnodes.diff" size="24646" author="knutanders" created="Fri, 24 May 2013 08:48:56 +0100"/>
                            <attachment id="12584664" name="derby-5840-21-aa-arrays.diff" size="6493" author="knutanders" created="Fri, 24 May 2013 10:09:40 +0100"/>
                            <attachment id="12584682" name="derby-5840-22-aa-grouped-aggregates.diff" size="4662" author="knutanders" created="Fri, 24 May 2013 12:40:16 +0100"/>
                            <attachment id="12584688" name="derby-5840-23-aa-parsers.diff" size="2968" author="knutanders" created="Fri, 24 May 2013 13:20:48 +0100"/>
                            <attachment id="12584692" name="derby-5840-24-aa-clone.diff" size="1063" author="knutanders" created="Fri, 24 May 2013 14:40:07 +0100"/>
                            <attachment id="12584914" name="derby-5840-25-aa-diskhashtable.diff" size="6933" author="knutanders" created="Mon, 27 May 2013 11:08:07 +0100"/>
                            <attachment id="12584937" name="derby-5840-26-aa-backingstorehashtable.diff" size="3950" author="knutanders" created="Mon, 27 May 2013 14:23:08 +0100"/>
                            <attachment id="12585002" name="derby-5840-27-aa-basemonitor.diff" size="4996" author="knutanders" created="Tue, 28 May 2013 08:40:39 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 3 Jul 2012 21:29:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>245868</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0azb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35597</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>