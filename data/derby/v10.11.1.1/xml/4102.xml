<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:44:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4102/DERBY-4102.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4102] Assert failure or ClassCastException in EmbedBlob when retrieving BLOB &gt;= 32K</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4102</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The code below results in an assert error (with sane jars) or a ClassCastException (with insane jars):&lt;/p&gt;

&lt;p&gt;        PreparedStatement ps = c.prepareStatement(&quot;values cast(? as blob)&quot;);&lt;br/&gt;
        int len = 32 * 1024;&lt;br/&gt;
        ps.setBinaryStream(1, new ByteArrayInputStream(new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;len&amp;#93;&lt;/span&gt;), len);&lt;br/&gt;
        ResultSet rs = ps.executeQuery();&lt;br/&gt;
        while (rs.next()) &lt;/p&gt;
{
            rs.getBlob(1);
        }

&lt;p&gt;If len &amp;lt; 32K there is no error.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12417271">DERBY-4102</key>
            <summary>Assert failure or ClassCastException in EmbedBlob when retrieving BLOB &gt;= 32K</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Mar 2009 11:52:23 +0000</created>
                <updated>Tue, 2 Feb 2010 09:44:20 +0000</updated>
                            <resolved>Tue, 26 Jan 2010 13:41:39 +0000</resolved>
                                    <version>10.1.1.0</version>
                    <version>10.2.2.0</version>
                    <version>10.3.3.0</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.3.1</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12683444" author="knutanders" created="Thu, 19 Mar 2009 11:55:14 +0000"  >&lt;p&gt;Attached is a Java program that reproduces the bug.&lt;/p&gt;

&lt;p&gt;With sane jars:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLException: Java exception: &apos;ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.javaException(Util.java:244)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(EmbedResultSet.java:4000)&lt;br/&gt;
        at CastExc.main(CastExc.java:12)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
        ... 8 more&lt;br/&gt;
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:98)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedBlob.&amp;lt;init&amp;gt;(EmbedBlob.java:194)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(EmbedResultSet.java:3998)&lt;br/&gt;
        ... 1 more&lt;/p&gt;

&lt;p&gt;With insane jars:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLException: Java exception: &apos;org.apache.derby.iapi.types.RawToBinaryFormatStream cannot be cast to org.apache.derby.iapi.types.Resetable: java.lang.ClassCastException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(Unknown Source)&lt;br/&gt;
        at CastExc.main(CastExc.java:12)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;org.apache.derby.iapi.types.RawToBinaryFormatStream cannot be cast to org.apache.derby.iapi.types.Resetable: java.lang.ClassCastException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
        ... 9 more&lt;br/&gt;
Caused by: java.lang.ClassCastException: org.apache.derby.iapi.types.RawToBinaryFormatStream cannot be cast to org.apache.derby.iapi.types.Resetable&lt;br/&gt;
        at org.apache.derby.impl.jdbc.PositionedStoreStream.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedBlob.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
        ... 2 more&lt;/p&gt;</comment>
                            <comment id="12693761" author="kristwaa" created="Mon, 30 Mar 2009 14:31:41 +0100"  >&lt;p&gt;Patch 1a is a prototype patch which passes the repro posted by Knut Anders. I have started the regression tests, and will post the results tomorrow.&lt;/p&gt;

&lt;p&gt;The patch makes Derby store the stream as a temporary Blob (in the database&apos;s tmp directory). This is the same thing as is being done for small Blobs already.&lt;br/&gt;
Depending on the length of the stream, the temporary Blob will be held in memory or on disk.&lt;/p&gt;

&lt;p&gt;I also had a look at the Clob implementation, and it turns out that it already works. However, that code path uses a different approach - it materializes the Clob into memory (see SQLChar.setFrom). I&apos;ll file a separate issue for this problem.&lt;/p&gt;</comment>
                            <comment id="12694069" author="knutanders" created="Tue, 31 Mar 2009 12:18:31 +0100"  >&lt;p&gt;The patch looks good to me. I&apos;ve verified that the repro passes with the fix, and that the test case fails without the fix and passes with the fix.&lt;/p&gt;</comment>
                            <comment id="12699761" author="kristwaa" created="Thu, 16 Apr 2009 17:54:08 +0100"  >&lt;p&gt;Running the regression tests. If they all pass, I&apos;ll commit patch 1a tomorrow.&lt;/p&gt;</comment>
                            <comment id="12700149" author="kristwaa" created="Fri, 17 Apr 2009 13:15:11 +0100"  >&lt;p&gt;I&apos;m seeing an intermittent failure when running with the patch. The failure happens in jdbcapi.LobStreamsTest.&lt;br/&gt;
I have seen the following two stack traces:&lt;/p&gt;

&lt;p&gt;1) testBlobWrite3Param(org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest)java.io.IOException: ERROR 40XD0: Container has been closed.&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder(OverflowInputStream.java:159)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read(BufferedByteHolderInputStream.java:44)&lt;br/&gt;
	at java.io.DataInputStream.read(DataInputStream.java:132)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.PositionedStoreStream.read(PositionedStoreStream.java:116)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.AutoPositioningStream.read(AutoPositioningStream.java:113)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.UpdatableBlobStream.read(UpdatableBlobStream.java:184)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.readBytesFromStream(LobStreamsTest.java:463)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.compareLob2File(LobStreamsTest.java:488)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testBlobWrite3Param(LobStreamsTest.java:130)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 24,  Failures: 0,  Errors: 1&lt;/p&gt;

&lt;p&gt;1) testBlobWrite3Param(org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest)java.sql.SQLException: The data in this BLOB or CLOB is no longer available.  The BLOB/CLOB&apos;s transaction may be committed, its connection closed or it has been freed.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedBlob.handleMyExceptions(EmbedBlob.java:792)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedBlob.getBinaryStream(EmbedBlob.java:549)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testBlobWrite3Param(LobStreamsTest.java:129)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: java.sql.SQLException: The data in this BLOB or CLOB is no longer available.  The BLOB/CLOB&apos;s transaction may be committed, its connection closed or it has been freed.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
	... 39 more&lt;br/&gt;
Caused by: ERROR XJ073: The data in this BLOB or CLOB is no longer available.  The BLOB/CLOB&apos;s transaction may be committed, its connection closed or it has been freed.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedBlob.handleMyExceptions(EmbedBlob.java:789)&lt;br/&gt;
	... 33 more&lt;/p&gt;


&lt;p&gt;On my system the problem is seen in maybe one out of ten or fifteen runs. I can&apos;t see  the new code being run as part of the test, so I&apos;m not sure what&apos;s going on here.&lt;/p&gt;</comment>
                            <comment id="12726603" author="rhillegas" created="Thu, 2 Jul 2009 19:28:27 +0100"  >&lt;p&gt;Triaged July 2, 2009: Assigned normal urgency.&lt;/p&gt;</comment>
                            <comment id="12775362" author="kristwaa" created="Tue, 10 Nov 2009 10:01:31 +0000"  >&lt;p&gt;Testing this patch again, I have observed an intermittent failure both with a clean trunk and with a patched trunk (patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4102&quot; title=&quot;Assert failure or ClassCastException in EmbedBlob when retrieving BLOB &amp;gt;= 32K&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4102&quot;&gt;&lt;del&gt;DERBY-4102&lt;/del&gt;&lt;/a&gt; 1a).&lt;/p&gt;

&lt;p&gt;Running with a sane build:&lt;br/&gt;
1) testBlobWrite3Param(org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest)org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:98)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BasePage.unlatch(BasePage.java:1365)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder(OverflowInputStream.java:152)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read(BufferedByteHolderInputStream.java:44)&lt;br/&gt;
        at java.io.DataInputStream.read(DataInputStream.java:132)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.PositionedStoreStream.read(PositionedStoreStream.java:116)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.AutoPositioningStream.read(AutoPositioningStream.java:113)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.UpdatableBlobStream.read(UpdatableBlobStream.java:184)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.readBytesFromStream(LobStreamsTest.java:463)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.compareLob2File(LobStreamsTest.java:488)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testBlobWrite3Param(LobStreamsTest.java:130)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;

&lt;p&gt;This associated code in BasePage is:&lt;br/&gt;
    public void unlatch() {&lt;br/&gt;
        if (SanityManager.DEBUG) &lt;/p&gt;
{
            SanityManager.ASSERT(isLatched());
        }
&lt;p&gt;        releaseExclusive();&lt;br/&gt;
    }&lt;/p&gt;


&lt;p&gt;1) testBlobWrite3Param(org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest)java.io.IOException: ERROR 40XD0: Container has been closed.&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder(OverflowInputStream.java:159)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read(BufferedByteHolderInputStream.java:44)&lt;br/&gt;
        at java.io.DataInputStream.read(DataInputStream.java:132)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.PositionedStoreStream.read(PositionedStoreStream.java:116)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.AutoPositioningStream.read(AutoPositioningStream.java:113)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.UpdatableBlobStream.read(UpdatableBlobStream.java:184)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.readBytesFromStream(LobStreamsTest.java:463)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.compareLob2File(LobStreamsTest.java:488)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testBlobWrite3Param(LobStreamsTest.java:130)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;

&lt;p&gt;The origin of the real exception is lost here (not chained), but investigation shows where it comes from:&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkOpen(BaseContainerHandle.java:978)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPage(BaseContainerHandle.java:317)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder(OverflowInputStream.java:146)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read(BufferedByteHolderInputStream.java:44)&lt;br/&gt;
        ...&lt;/p&gt;

&lt;p&gt;The Java deadlock (see attached dump for details):&lt;br/&gt;
Found one Java-level deadlock:&lt;br/&gt;
=============================&lt;br/&gt;
&quot;Finalizer&quot;:&lt;br/&gt;
  waiting to lock monitor 0x080f2038 (object 0xceb8ef08, a org.apache.derby.impl.store.raw.data.StoredPage),&lt;br/&gt;
  which is held by &quot;main&quot;&lt;br/&gt;
&quot;main&quot;:&lt;br/&gt;
  waiting to lock monitor 0x082b5ef8 (object 0xceb98fe8, a org.apache.derby.impl.store.raw.data.BaseContainerHandle),&lt;br/&gt;
  which is held by &quot;Finalizer&quot;&lt;/p&gt;


&lt;p&gt;Since the problem occurs both with and without the patch, I plan to commit it.&lt;br/&gt;
I will log a new Jira for the deadlock and the asserts/exceptions. I assume they are all symptoms of the same problem, arising due to slightly different timing.&lt;/p&gt;</comment>
                            <comment id="12775364" author="kristwaa" created="Tue, 10 Nov 2009 10:13:35 +0000"  >&lt;p&gt;The Java deadlock seen when running tests.jdbcapi.LobStreamsTest (dual core machine, 3.2 GHz).&lt;/p&gt;</comment>
                            <comment id="12775368" author="knutanders" created="Tue, 10 Nov 2009 10:30:29 +0000"  >&lt;p&gt;The intermittent failure in testBlobWrite3Param() is already logged as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3844&quot; title=&quot;ASSERT failure in BasePage.unlatch() when running LobStreamsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3844&quot;&gt;&lt;del&gt;DERBY-3844&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12775374" author="kristwaa" created="Tue, 10 Nov 2009 10:50:34 +0000"  >&lt;p&gt;Thanks, Knut Anders.&lt;br/&gt;
I added a link to that issue. I&apos;m considering to log a new Jira for the deadlock, linking it to the other issue.&lt;br/&gt;
FYI, I can reproduce the assert by running LobStreamsTest in a loop. I see it 2 - 4 times out of 100 iterations on my machine. The deadlock I have only seen once so far.&lt;/p&gt;</comment>
                            <comment id="12776892" author="kristwaa" created="Thu, 12 Nov 2009 07:50:18 +0000"  >&lt;p&gt;Committed patch 1a to trunk with revision 835286. Will check if the fix can be back-ported.&lt;/p&gt;</comment>
                            <comment id="12805031" author="kristwaa" created="Tue, 26 Jan 2010 13:41:39 +0000"  >&lt;p&gt;The regression tests ran cleanly on both the 10.5 and 10.4 branch.&lt;br/&gt;
Merged fix into the 10.5 and 10.4 branches with revisions 903222 and 903223.&lt;/p&gt;

&lt;p&gt;This should complete the work on this issue.&lt;/p&gt;</comment>
                            <comment id="12828558" author="knutanders" created="Tue, 2 Feb 2010 09:44:19 +0000"  >&lt;p&gt;Verified fix on trunk. Closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12402790">DERBY-3844</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12421551">DERBY-4130</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12402573" name="CastExc.java" size="584" author="knutanders" created="Thu, 19 Mar 2009 11:55:14 +0000"/>
                            <attachment id="12404126" name="derby-4102-1a.diff" size="6269" author="kristwaa" created="Mon, 30 Mar 2009 14:31:41 +0100"/>
                            <attachment id="12404127" name="derby-4102-1a.stat" size="147" author="kristwaa" created="Mon, 30 Mar 2009 14:31:41 +0100"/>
                            <attachment id="12424456" name="java-deadlock.txt" size="12081" author="kristwaa" created="Tue, 10 Nov 2009 10:13:35 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 30 Mar 2009 13:31:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24026</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0r9r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38236</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>