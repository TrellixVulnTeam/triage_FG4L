<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:22:32 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6533/DERBY-6533.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6533] Add a quiet mode to NsTest</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6533</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Right now NsTest produces an enormous log file. This may be useful for tracking down some errors. However, this can also make it hard to find the signal in the noise. It would be good to turn off the chatty diagnostics which report the result of every insert, update, delete, and select. A summary at the end may be good enough, including a summary of the number of times each kind of error (SQLState) was seen. While I&apos;m in there, I plan to make other smallish changes.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12705676">DERBY-6533</key>
            <summary>Add a quiet mode to NsTest</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Mon, 31 Mar 2014 16:04:54 +0100</created>
                <updated>Wed, 21 Jan 2015 23:59:21 +0000</updated>
                            <resolved>Wed, 21 Jan 2015 23:35:31 +0000</resolved>
                                    <version>10.11.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13955506" author="rhillegas" created="Mon, 31 Mar 2014 19:45:25 +0100"  >&lt;p&gt;Attaching derby-6533-01-aa-quietMode.diff. This patch makes various improvements to NsTest:&lt;/p&gt;

&lt;p&gt;1) Silent logger - Adds a silent logger, enabled by setting -Dderby.nstest.justCountErrors=true. This causes the test to not log every insert, update, delete, and select. In this mode, the test counts errors instead. Each error is identified by its stack trace. The error counts are printed when the test ends.&lt;/p&gt;

&lt;p&gt;2) Shutdown hook - Adds a shutdown hook which prints the final statistics at the end of test, even when you kill the test by typing control-c.&lt;/p&gt;

&lt;p&gt;3) Output file - Adds the ability to re-direct diagnostic printout to a file.&lt;/p&gt;

&lt;p&gt;4) Bug fixes - In the course of running the test, I found various places where the test trips over itself.&lt;/p&gt;

&lt;p&gt;I have updated the test&apos;s README.txt to reflect the new usage:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Usage:

    java org.apache.derbyTesting.system.nstest.NsTest [ DerbyClient | Embedded [ small ] ]

If no arguments are specified, the test defaults to a client/server configuration (DerbyClient)

The following flags can be set:

    -Dderby.nstest.backupRestore=false    Turns off backup, restore, and re-encryption.

    -Dderby.nstest.outputFile=fileName    Redirects output and errors to a file.

    -Dderby.nstest.justCountErrors=true    Makes the test run quietly at steady-state, counting errors, and printing a summary at the end.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When derby.nstest.justCountErrors is set, the test prints a count of every SQLState it saw. E.g.:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;	Number of 40XL1 = 40
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the same SQLState can be raised at multiple points in the test, the printout also includes a count of how many time each distinct stack trace was seen. E.g.:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;//////////////////////////////////////////////////////////////
//    
//    Count = 26, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:321)
	at org.apache.derby.client.am.ClientConnection.prepareStatement(ClientConnection.java:442)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:95)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:721)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.client.am.ClientStatement.completeSqlca(ClientStatement.java:2109)
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(NetStatementReply.java:579)
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(NetStatementReply.java:145)
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(NetStatementReply.java:54)
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(StatementReply.java:41)
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(NetStatement.java:156)
	at org.apache.derby.client.am.ClientStatement.readPrepareDescribeOutput(ClientStatement.java:1695)
	at org.apache.derby.client.am.ClientPreparedStatement.readPrepareDescribeInputOutput(ClientPreparedStatement.java:1912)
	at org.apache.derby.client.am.ClientPreparedStatement.flowPrepareDescribeInputOutput(ClientPreparedStatement.java:1975)
	at org.apache.derby.client.am.ClientPreparedStatement.prepare(ClientPreparedStatement.java:314)
	at org.apache.derby.client.am.ClientConnection.prepareStatementX(ClientConnection.java:1946)
	at org.apache.derby.client.am.ClientConnection.prepareStatement(ClientConnection.java:429)
	... 4 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;I have run the test in embedded and client/server modes with these configurations:&lt;/p&gt;

&lt;p&gt;A) Re-directing output to a file.&lt;/p&gt;

&lt;p&gt;B) Re-directing output to a file and setting derby.nstest.justCountErrors.&lt;/p&gt;

&lt;p&gt;C) Not setting any flags.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/utils/MemCheck.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/NsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/init/Initializer.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/init/NWServerThread.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/init/DbSetup.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/Tester1.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/Tester2.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/Tester3.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/BackupRestoreReEncryptTester.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/system/nstest/NsTestPrintStream.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/system/nstest/NsTestError.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/README.txt&lt;/p&gt;</comment>
                            <comment id="13955530" author="jira-bot" created="Mon, 31 Mar 2014 19:53:39 +0100"  >&lt;p&gt;Commit 1583398 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1583398&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1583398&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6533&quot; title=&quot;Add a quiet mode to NsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6533&quot;&gt;&lt;del&gt;DERBY-6533&lt;/del&gt;&lt;/a&gt;: Add a quiet mode to NsTest; commit derby-6533-01-aa-quietMode.diff.&lt;/p&gt;</comment>
                            <comment id="13955696" author="mamtas" created="Mon, 31 Mar 2014 21:47:57 +0100"  >&lt;p&gt;Rick, I have not looked at your change yet but +1 for any changes which make the test and it&apos;s output easier to understand. I recall working on this test over two years back and it was hard to go through the long output to get to the real problem.&lt;/p&gt;</comment>
                            <comment id="13955976" author="rhillegas" created="Tue, 1 Apr 2014 02:15:35 +0100"  >&lt;p&gt;Thanks, Mamta. I have tried not to alter the traditional code path much. People should still be able to run the test the way they used to. But I have tried to add some extra knobs to help filter out noise. I welcome your advice about how to make this better. Thanks.&lt;/p&gt;</comment>
                            <comment id="13956862" author="rhillegas" created="Tue, 1 Apr 2014 19:31:01 +0100"  >&lt;p&gt;Attaching derby-6533-02-aa-sequencesAndMoreStats.diff. This patch makes a couple more improvements to NsTest:&lt;/p&gt;

&lt;p&gt;1) Exercises sequence generators. This feature was not being tested. I have added a sequence generator. I have added a column to the table, which INSERT stuffs with the next value of the sequence generator. I have added a background thread which inspects the current value of the sequence generator every minute. I&apos;ve added a line to the statistics printout at the end; this line reports the last value which the background thread read from the sequence generator.&lt;/p&gt;

&lt;p&gt;2) Added timestamps. The test now reports its start time, end time, and duration (in minutes).&lt;/p&gt;

&lt;p&gt;3) Another exception recorded. I found another spot in DbUtil where we needed to record an exception.&lt;/p&gt;

&lt;p&gt;With this patch, I ran the test for 2 hours using the following command...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java -Dderby.nstest.justCountErrors=true -Dderby.nstest.outputFile=nstest.out org.apache.derbyTesting.system.nstest.NsTest Embedded
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...and then hit control-c.&lt;/p&gt;

&lt;p&gt;I have attached the full output as derby-6533-02-aa-sequencesAndMoreStats.out. Here is the introductory statistics section:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-04-01 08:40:39.896
End time = 2014-04-01 10:50:19.255
Duration = 129 minutes



SUCCESSFUL: 
	Number of INSERTS = 164717
	Number of UPDATES = 81054
	Number of DELETES = 81255
	Number of SELECTS = 25372

FAILED: 
	Number of failed INSERTS = 108
	Number of failed UPDATES = 78975
	Number of failed DELETES = 79022
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 199029



	Number of 40XL1 = 154
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The remainder of derby-6533-02-aa-sequencesAndMoreStats.out is a list of twelve different stack traces which gave rise to 40XL1 (A lock could not be obtained within the time requested) errors. Each stack trace is marked with the number of times it was seen. The bulk of them are timeouts while trying to allocate a new identity value. The rest seem to be timeouts while trying to read the table descriptor during the compilation of various statements.&lt;/p&gt;

&lt;p&gt;Here&apos;s an example of one of these stack traces:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;//////////////////////////////////////////////////////////////
//    
//    Count = 74, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:753)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acea26cfefx0145x1df3x13ddx000003e474c00.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/system/nstest/utils/DbUtil.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/system/nstest/utils/SequenceReader.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/NsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/init/DbSetup.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java&lt;/p&gt;</comment>
                            <comment id="13956877" author="jira-bot" created="Tue, 1 Apr 2014 19:38:32 +0100"  >&lt;p&gt;Commit 1583749 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1583749&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1583749&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6533&quot; title=&quot;Add a quiet mode to NsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6533&quot;&gt;&lt;del&gt;DERBY-6533&lt;/del&gt;&lt;/a&gt;: Add a sequence generator to NsTest along with start and end timestamps; commit derby-6533-02-aa-sequencesAndMoreStats.diff.&lt;/p&gt;</comment>
                            <comment id="13959141" author="rhillegas" created="Thu, 3 Apr 2014 21:01:57 +0100"  >&lt;p&gt;I ran the revised NsTest for 7 hours on a fairly beefy (8 core) machine. This produced the following results. As you can see, exactly 1 error occurred (a lock timeout while getting a table descriptor during compilation):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-04-03 14:39:12.016
End time = 2014-04-03 21:39:12.021
Duration = 420 minutes



SUCCESSFUL: 
	Number of INSERTS = 1732859
	Number of UPDATES = 854518
	Number of DELETES = 853434
	Number of SELECTS = 76975

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 831033
	Number of failed DELETES = 830546
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 1767493



	Number of 40XL1 = 1


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:436)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:175)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:775)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(RowLocking3.java:188)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:531)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:648)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:306)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:590)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:104)
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:313)
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1600)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndexMinion(DataDictionaryImpl.java:9333)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(DataDictionaryImpl.java:9196)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(DataDictionaryImpl.java:2850)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(DataDictionaryImpl.java:2814)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.finishTableDescriptor(DataDictionaryImpl.java:2376)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptorIndex2Scan(DataDictionaryImpl.java:2355)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTableDescriptor(DataDictionaryImpl.java:2319)
	at org.apache.derby.impl.sql.catalog.OIDTDCacheable.setIdentity(OIDTDCacheable.java:107)
	at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(DataDictionaryImpl.java:2290)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(SPSDescriptor.java:353)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareAndRelease(SPSDescriptor.java:264)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:769)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:655)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:171)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:464)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:157)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13959906" author="rhillegas" created="Fri, 4 Apr 2014 13:28:03 +0100"  >&lt;p&gt;Attaching derby-6533-03-timerThread.diff. This patch adds another knob to NsTest, allowing you to set a time limit for the test.&lt;/p&gt;

&lt;p&gt;The new usage is&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Usage:

    java org.apache.derbyTesting.system.nstest.NsTest [ DerbyClient | Embedded [ small ] ]

If no arguments are specified, the test defaults to a client/server configuration (DerbyClient)

The following flags can be set:

    -Dderby.nstest.backupRestore=false    Turns off backup, restore, and re-encryption.

    -Dderby.nstest.outputFile=fileName    Redirects output and errors to a file.

    -Dderby.nstest.justCountErrors=true    Makes the test run quietly at steady-state, counting errors, and printing a summary at the end.

    -Dderby.nstest.durationInMinutes=$number    Run for this number of minutes.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/system/nstest/NsTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/system/nstest/TimerThread.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/README.txt&lt;/p&gt;</comment>
                            <comment id="13959907" author="jira-bot" created="Fri, 4 Apr 2014 13:29:07 +0100"  >&lt;p&gt;Commit 1584636 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1584636&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1584636&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6533&quot; title=&quot;Add a quiet mode to NsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6533&quot;&gt;&lt;del&gt;DERBY-6533&lt;/del&gt;&lt;/a&gt;: Add a knob to NsTest, allowing you to set a time limit for the test run; commit derby-6533-03-timerThread.diff.&lt;/p&gt;</comment>
                            <comment id="13960320" author="rhillegas" created="Fri, 4 Apr 2014 20:28:21 +0100"  >&lt;p&gt;I ran NsTest for 7 hours again on the same 8-core machine. The results follow. This time I saw the following errors:&lt;/p&gt;

&lt;p&gt;o 16 lock timeouts, all related to getting identity values&lt;/p&gt;

&lt;p&gt;o 121 failures to get a connection&lt;/p&gt;

&lt;p&gt;o An OutOfMemory error&lt;/p&gt;

&lt;p&gt;I think that a next step would be to investigate the memory leak.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-04-04 13:56:58.521
End time = 2014-04-04 20:56:58.535
Duration = 420 minutes



SUCCESSFUL: 
	Number of INSERTS = 1719701
	Number of UPDATES = 847559
	Number of DELETES = 847285
	Number of SELECTS = 76099

FAILED: 
	Number of failed INSERTS = 56
	Number of failed UPDATES = 822321
	Number of failed DELETES = 821436
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 1754769



	Number of 40XL1 = 16
	Number of 08003 = 121
	Number of XJ001 = 1


//////////////////////////////////////////////////////////////
//    
//    Count = 3, SQLState = 08003, Message = No current connection.
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.createStatement(EmbedConnection.java:1526)
	at org.apache.derby.impl.jdbc.EmbedConnection.createStatement(EmbedConnection.java:1483)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doSelectOperation(TesterObject.java:212)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:95)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 10 more


//////////////////////////////////////////////////////////////
//    
//    Count = 7, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:152)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement42.&amp;lt;init&amp;gt;(EmbedPreparedStatement42.java:41)
	at org.apache.derby.jdbc.Driver42.newEmbedPreparedStatement(Driver42.java:59)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1734)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:95)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:775)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(RowLocking3.java:188)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:531)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:648)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:306)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:590)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:104)
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:313)
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1600)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowInternal(TabInfoImpl.java:877)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowLocation(TabInfoImpl.java:810)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(DataDictionaryImpl.java:10114)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(DataDictionaryImpl.java:8640)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:544)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:134)
	... 8 more


//////////////////////////////////////////////////////////////
//    
//    Count = 3, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:152)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement42.&amp;lt;init&amp;gt;(EmbedPreparedStatement42.java:41)
	at org.apache.derby.jdbc.Driver42.newEmbedPreparedStatement(Driver42.java:59)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1734)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:95)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(RowLocking3.java:188)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:531)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:648)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:306)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:590)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:104)
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:313)
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1600)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowInternal(TabInfoImpl.java:877)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowLocation(TabInfoImpl.java:810)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(DataDictionaryImpl.java:10114)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(DataDictionaryImpl.java:8640)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:544)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:134)
	... 8 more


//////////////////////////////////////////////////////////////
//    
//    Count = 40, SQLState = 08003, Message = No current connection.
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.setupContextStack(EmbedConnection.java:2584)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1732)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:95)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 12 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 08003, Message = No current connection.
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.getTransactionIsolation(EmbedConnection.java:2266)
	at org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(EmbedConnection.java:2217)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:443)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:175)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 11 more


//////////////////////////////////////////////////////////////
//    
//    Count = 3, Message = null
//    
//////////////////////////////////////////////////////////////

java.lang.NullPointerException
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doSelectOperation(TesterObject.java:227)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:95)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)


//////////////////////////////////////////////////////////////
//    
//    Count = 35, SQLState = 08003, Message = No current connection.
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.getTransactionIsolation(EmbedConnection.java:2266)
	at org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(EmbedConnection.java:2217)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:413)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:175)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 11 more


//////////////////////////////////////////////////////////////
//    
//    Count = 35, SQLState = 08003, Message = No current connection.
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.getTransactionIsolation(EmbedConnection.java:2266)
	at org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(EmbedConnection.java:2217)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.update_one_row(DbUtil.java:251)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:162)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 11 more


//////////////////////////////////////////////////////////////
//    
//    Count = 6, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:775)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac3b36cd92x0145x2c99x5ae8x000017b00f4854.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = XJ001, Message = Java exception: &apos;Metaspace: java.lang.OutOfMemoryError&apos;.
//    
//////////////////////////////////////////////////////////////

java.sql.SQLException: Java exception: &apos;Metaspace: java.lang.OutOfMemoryError&apos;.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:436)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:175)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)
Caused by: ERROR XJ001: Java exception: &apos;Metaspace: java.lang.OutOfMemoryError&apos;.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 15 more
Caused by: java.lang.OutOfMemoryError: Metaspace
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:642)
	at org.apache.derby.impl.services.reflect.ReflectLoaderJava2.loadGeneratedClass(ReflectLoaderJava2.java:61)
	at org.apache.derby.impl.services.reflect.ReflectClassesJava2.loadGeneratedClassFromData(ReflectClassesJava2.java:62)
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadGeneratedClass(DatabaseClasses.java:147)
	at org.apache.derby.impl.sql.GenericStorablePreparedStatement.loadGeneratedClass(GenericStorablePreparedStatement.java:159)
	at org.apache.derby.impl.sql.GenericStorablePreparedStatement.getActivationClass(GenericStorablePreparedStatement.java:123)
	at org.apache.derby.impl.sql.GenericPreparedStatement.getClone(GenericPreparedStatement.java:1209)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:172)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:464)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:157)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 7, SQLState = 08003, Message = No current connection.
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.setupContextStack(EmbedConnection.java:2584)
	at org.apache.derby.impl.jdbc.EmbedConnection.commit(EmbedConnection.java:1916)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:118)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:779)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 9 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13965511" author="rhillegas" created="Thu, 10 Apr 2014 17:38:05 +0100"  >&lt;p&gt;Attaching derby-6533-04-outOfMemory.diff. This patch adds some additional defenses against OutOfMemoryErrors in NsTest:&lt;/p&gt;

&lt;p&gt;1) Now the test records the last measurements taken by the memory checker thread. The last memory measurements are reported when the test prints out its statistics at the end.&lt;/p&gt;

&lt;p&gt;2) When recording an exception, the test now checks whether the exception was (or was caused by) an OutOfMemoryError. If so, the statistics are printed and the program ends.&lt;/p&gt;

&lt;p&gt;Knut thinks that the OutOfMemoryError I saw in the last run was caused by a bug in JVM 8: &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8034852&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://bugs.openjdk.java.net/browse/JDK-8034852&lt;/a&gt; . The workaround is to run the test with this setting:&lt;/p&gt;

&lt;p&gt;  -XX:MaxMetaspaceFreeRatio=100&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/system/nstest/utils/MemCheck.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/NsTest.java&lt;/p&gt;</comment>
                            <comment id="13965512" author="jira-bot" created="Thu, 10 Apr 2014 17:39:44 +0100"  >&lt;p&gt;Commit 1586366 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1586366&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1586366&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6533&quot; title=&quot;Add a quiet mode to NsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6533&quot;&gt;&lt;del&gt;DERBY-6533&lt;/del&gt;&lt;/a&gt;: Give NsTest more defenses against OutOfMemoryErrors; commit derby-6533-04-outOfMemory.diff.&lt;/p&gt;</comment>
                            <comment id="13965785" author="rhillegas" created="Thu, 10 Apr 2014 21:05:15 +0100"  >&lt;p&gt;Running for 3 hours on the same 8-core machine with the latest changes, I saw the following results. There were 1372 lock timeouts. Of these, 587 were in the compiler and the rest were runtime attempts to get the next identity value.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-04-10 17:45:03.41
End time = 2014-04-10 20:45:03.415
Duration = 180 minutes



SUCCESSFUL: 
	Number of INSERTS = 178185
	Number of UPDATES = 88232
	Number of DELETES = 88204
	Number of SELECTS = 25908

FAILED: 
	Number of failed INSERTS = 1372
	Number of failed UPDATES = 86291
	Number of failed DELETES = 86100
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 213085


Last total memory = 6125780992, last free memory = 5313404888 as measured at Thu Apr 10 20:41:46 CEST 2014



	Number of 40XL1 = 1372


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac79745286x0145x4c50x532cx000017af67506d2.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 41, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac028d64cbx0145x4c50x532cx000017af6750c.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 7, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acc0a143bfx0145x4c50x532cx000017af6750b6.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 13, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac79745286x0145x4c50x532cx000017af6750270.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 40, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acf5c695e0x0145x4c50x532cx000017af67503e.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 13, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac82f588dex0145x4c50x532cx000017af6750b1.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 10, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acf0d69782x0145x4c50x532cx000017af675023.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 38, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac1dc72125x0145x4c50x532cx000017af675073b.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 39, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acb4b36581x0145x4c50x532cx000017af675059.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 2, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acff298c4ax0145x4c50x532cx000017af675028.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 40, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac5b728243x0145x4c50x532cx000017af67501e.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 200, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:152)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement42.&amp;lt;init&amp;gt;(EmbedPreparedStatement42.java:41)
	at org.apache.derby.jdbc.Driver42.newEmbedPreparedStatement(Driver42.java:59)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1734)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:95)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(RowLocking3.java:188)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:531)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:648)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:306)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:590)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:104)
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:313)
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1600)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowInternal(TabInfoImpl.java:877)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowLocation(TabInfoImpl.java:810)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(DataDictionaryImpl.java:10114)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(DataDictionaryImpl.java:8640)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:544)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:134)
	... 8 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acc0a143bfx0145x4c50x532cx000017af6750ba.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 10, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac3b36cd92x0145x4c50x532cx000017af675067.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 4, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac79745286x0145x4c50x532cx000017af67506d2.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 11, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acb931ad9cx0145x4c50x532cx000017af675057.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 4, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acc0a143bfx0145x4c50x532cx000017af6750b8.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 12, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac1dc72125x0145x4c50x532cx000017af675073b.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 587, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:152)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement42.&amp;lt;init&amp;gt;(EmbedPreparedStatement42.java:41)
	at org.apache.derby.jdbc.Driver42.newEmbedPreparedStatement(Driver42.java:59)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1734)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:95)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(RowLocking3.java:188)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:531)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:648)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:306)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:590)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:104)
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:313)
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1600)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowInternal(TabInfoImpl.java:877)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowLocation(TabInfoImpl.java:810)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(DataDictionaryImpl.java:10114)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(DataDictionaryImpl.java:8640)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:544)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:134)
	... 8 more


//////////////////////////////////////////////////////////////
//    
//    Count = 36, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acf0d69782x0145x4c50x532cx000017af675023.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acc0a143bfx0145x4c50x532cx000017af6750b9.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 23, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acc0a143bfx0145x4c50x532cx000017af6750b6.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 14, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acb4b36581x0145x4c50x532cx000017af675059.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 39, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac79745286x0145x4c50x532cx000017af6750270.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 12, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac1dc72125x0145x4c50x532cx000017af6750640.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acdfe0a82ax0145x4c50x532cx000017af675063.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 2, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acc0a143bfx0145x4c50x532cx000017af6750b8.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 13, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac138b318fx0145x4c50x532cx000017af67500.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 42, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac1dc72125x0145x4c50x532cx000017af6750640.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 3, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acc0a143bfx0145x4c50x532cx000017af6750b7.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 41, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acb931ad9cx0145x4c50x532cx000017af675057.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 14, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac5b728243x0145x4c50x532cx000017af67501e.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 14, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac028d64cbx0145x4c50x532cx000017af6750c.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 14, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.acf5c695e0x0145x4c50x532cx000017af67503e.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 30, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:148)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8688)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac82f588dex0145x4c50x532cx000017af6750b1.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13967015" author="rhillegas" created="Fri, 11 Apr 2014 20:48:51 +0100"  >&lt;p&gt;I ran NsTest for another 7 hours on the 8-core machine. This produced 5180 lock timeouts. Of these, 4332 were in the compiler. The rest arose while trying to allocate an identity value. I am attaching the detailed report.&lt;/p&gt;</comment>
                            <comment id="13968854" author="rhillegas" created="Mon, 14 Apr 2014 22:17:45 +0100"  >&lt;p&gt;I ran NsTest again on the 8-core machine. There were several new errors, the test died after 157 minutes, and my connection to the machine was broken. Here are the errors I saw:&lt;/p&gt;

&lt;p&gt;1) 1 assertion failure when looking up the sequence generator&lt;/p&gt;

&lt;p&gt;2) 1 &quot;too much contention&quot; error on the sequence generator&lt;/p&gt;

&lt;p&gt;3) 1 IndexArrayOutOfBoundsException when deleting a row from the table&lt;/p&gt;

&lt;p&gt;4) 306 lock timeouts&lt;/p&gt;

&lt;p&gt;5) 1032 NPEs in the test&lt;/p&gt;

&lt;p&gt;6) 46720 &quot;no current connection&quot; errors&lt;/p&gt;

&lt;p&gt;I will attach the report.&lt;/p&gt;

</comment>
                            <comment id="13969541" author="rhillegas" created="Tue, 15 Apr 2014 14:37:23 +0100"  >&lt;p&gt;Attaching derby-6533-05-aa-dieQuickly.diff. This patch adds some defensive code to NsTest, based on yesterday&apos;s disastrous run:&lt;/p&gt;

&lt;p&gt;1) Some NPE checks are added.&lt;/p&gt;

&lt;p&gt;2) In various places, we exit long-running loops if the connection becomes unusable. There&apos;s no sense in piling up tens of thousands of &quot;bad connection&quot; diagnostics.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/system/nstest/NsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/Tester1.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/Tester2.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java&lt;/p&gt;</comment>
                            <comment id="13969542" author="jira-bot" created="Tue, 15 Apr 2014 14:38:32 +0100"  >&lt;p&gt;Commit 1587581 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1587581&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1587581&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6533&quot; title=&quot;Add a quiet mode to NsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6533&quot;&gt;&lt;del&gt;DERBY-6533&lt;/del&gt;&lt;/a&gt;: Add more defensive code to NsTest; commit derby-6533-05-aa-dieQuickly.diff.&lt;/p&gt;</comment>
                            <comment id="13970190" author="rhillegas" created="Wed, 16 Apr 2014 00:26:13 +0100"  >&lt;p&gt;Attaching the log from a 5 hour run of NsTest on the 8-core machine. &lt;/p&gt;

&lt;p&gt;Summary: 421 lock timeouts (159 in the compiler, the rest while trying to allocate an identity value)&lt;/p&gt;
</comment>
                            <comment id="13971886" author="rhillegas" created="Wed, 16 Apr 2014 21:22:22 +0100"  >&lt;p&gt;Attaching today&apos;s 7 hour run of NsTest on the 8-core machine. Here is the summary of errors:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;	Number of 40XL1 = 3775
	Number of XJ001 = 1
	Number of 08003 = 16
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I went off my company vpn and back on while the test was running. This may be what caused the connection failures (the 08003s) and the NPE (the XJ001). In any event there&apos;s another NPE to plug in the test.&lt;/p&gt;</comment>
                            <comment id="13973057" author="rhillegas" created="Thu, 17 Apr 2014 16:17:51 +0100"  >&lt;p&gt;Attaching derby-6533-05-aa-dieQuickly.diff. This patch attempts to plug another NPE in NsTest.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java&lt;/p&gt;</comment>
                            <comment id="13973082" author="jira-bot" created="Thu, 17 Apr 2014 16:44:41 +0100"  >&lt;p&gt;Commit 1588289 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1588289&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1588289&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6533&quot; title=&quot;Add a quiet mode to NsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6533&quot;&gt;&lt;del&gt;DERBY-6533&lt;/del&gt;&lt;/a&gt;: Plug another NPE in NsTest; commit derby-6533-aa-anotherNPE.diff.&lt;/p&gt;</comment>
                            <comment id="13974035" author="rhillegas" created="Fri, 18 Apr 2014 14:03:00 +0100"  >&lt;p&gt;Here is yesterday&apos;s 4 hour NsTest run on the 8-core machine.&lt;/p&gt;

&lt;p&gt;Summary: 51 lock timeouts, of which 5 were attempts to allocate an identity value and the rest were in the compiler.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-04-17 17:47:58.0
End time = 2014-04-17 21:47:58.013
Duration = 240 minutes



SUCCESSFUL: 
	Number of INSERTS = 996700
	Number of UPDATES = 489758
	Number of DELETES = 490942
	Number of SELECTS = 52873

FAILED: 
	Number of failed INSERTS = 51
	Number of failed UPDATES = 476148
	Number of failed DELETES = 476470
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 1031313


Last total memory = 6268387328, last free memory = 4673013080 as measured at Thu Apr 17 21:44:41 CEST 2014



	Number of 40XL1 = 51


//////////////////////////////////////////////////////////////
//    
//    Count = 5, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:163)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(RowLocking3.java:248)
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(OpenConglomerate.java:588)
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:382)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(DataDictionaryImpl.java:8717)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:825)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac8f6a536bx0145x705fx8170x000017ae3f889e.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1249)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 24, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:152)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement42.&amp;lt;init&amp;gt;(EmbedPreparedStatement42.java:41)
	at org.apache.derby.jdbc.Driver42.newEmbedPreparedStatement(Driver42.java:59)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1734)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:95)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:163)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:114)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:790)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(RowLocking3.java:188)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:531)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:648)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:306)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:590)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:104)
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:313)
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1600)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowInternal(TabInfoImpl.java:877)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowLocation(TabInfoImpl.java:810)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(DataDictionaryImpl.java:10143)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(DataDictionaryImpl.java:8669)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:544)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:134)
	... 8 more


//////////////////////////////////////////////////////////////
//    
//    Count = 22, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:152)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement42.&amp;lt;init&amp;gt;(EmbedPreparedStatement42.java:41)
	at org.apache.derby.jdbc.Driver42.newEmbedPreparedStatement(Driver42.java:59)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1734)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:95)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:163)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:794)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:619)
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:120)
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)
	at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(RowLocking3.java:188)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:531)
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:648)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:306)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:590)
	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:104)
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:313)
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1600)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowInternal(TabInfoImpl.java:877)
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowLocation(TabInfoImpl.java:810)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(DataDictionaryImpl.java:10143)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(DataDictionaryImpl.java:8669)
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:544)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:134)
	... 8 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13976739" author="rhillegas" created="Tue, 22 Apr 2014 14:22:32 +0100"  >&lt;p&gt;Attaching the log of yesterday&apos;s 7 hour run on the 8-core machine.&lt;/p&gt;

&lt;p&gt;Summary: 610 lock timeouts, 586 in the compiler, and the rest while obtaining an identity value&lt;/p&gt;</comment>
                            <comment id="13977416" author="rhillegas" created="Tue, 22 Apr 2014 22:03:18 +0100"  >&lt;p&gt;Attaching the output from today&apos;s 7 hour run on the 8-core machine. Another NPE followed by 35323 &quot;no current connection&quot; errors plus 4863 lock timeouts.&lt;/p&gt;</comment>
                            <comment id="13978182" author="rhillegas" created="Wed, 23 Apr 2014 14:24:38 +0100"  >&lt;p&gt;Attaching derby-6533-aa-anotherNPE.diff. This patch adds some more defensive code to NsTest. This patch also adds timestamps to exception summaries. Now for each exception, we report the time of its first occurrence and the time of its last occurrence.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/system/nstest/NsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/tester/TesterObject.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/NsTestError.java&lt;/p&gt;</comment>
                            <comment id="13978183" author="jira-bot" created="Wed, 23 Apr 2014 14:25:58 +0100"  >&lt;p&gt;Commit 1589404 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1589404&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1589404&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6533&quot; title=&quot;Add a quiet mode to NsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6533&quot;&gt;&lt;del&gt;DERBY-6533&lt;/del&gt;&lt;/a&gt;: Add more defensive code to NsTest; commit derby-6533-07-aa-moreDefensiveCode.diff.&lt;/p&gt;</comment>
                            <comment id="13978882" author="rhillegas" created="Wed, 23 Apr 2014 21:54:11 +0100"  >&lt;p&gt;Attaching today&apos;s 7 hour run of NsTest on an 8 core machine. The timestamps help clarify the error pattern. There are 2 big clusters of errors:&lt;/p&gt;

&lt;p&gt;o One which starts with an ArrayIndexOutOfBoundsException while destroying a transaction as part of trigger processing.&lt;/p&gt;

&lt;p&gt;o Another which starts with a Metaspace: java.lang.OutOfMemoryError&lt;/p&gt;

&lt;p&gt;I don&apos;t know why we&apos;re still seeing the metaspace errors. The test is running with -XX:MaxMetaspaceFreeRatio=100 set.&lt;/p&gt;</comment>
                            <comment id="13979783" author="rhillegas" created="Thu, 24 Apr 2014 15:35:41 +0100"  >&lt;p&gt;Attaching derby-6533-08-aa-sortErrors.diff. This patch makes NsTest sort errors by the timestamp of their first occurrence. Hopefully, this will make it easier to see cause-and-effect relationships among errors.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/system/nstest/NsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/system/nstest/NsTestError.java&lt;/p&gt;</comment>
                            <comment id="13979784" author="jira-bot" created="Thu, 24 Apr 2014 15:37:38 +0100"  >&lt;p&gt;Commit 1589747 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1589747&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1589747&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6533&quot; title=&quot;Add a quiet mode to NsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6533&quot;&gt;&lt;del&gt;DERBY-6533&lt;/del&gt;&lt;/a&gt;: Sort NsTest errors by the timestamp of their first occurrence; commit derby-6533-08-aa-sortErrors.diff.&lt;/p&gt;</comment>
                            <comment id="13980172" author="rhillegas" created="Thu, 24 Apr 2014 20:55:24 +0100"  >&lt;p&gt;Attaching the report of today&apos;s 5 hour run of NsTest on the 8 core machine.&lt;/p&gt;

&lt;p&gt;Summary: 1271 lock timeouts&lt;/p&gt;</comment>
                            <comment id="13981483" author="rhillegas" created="Fri, 25 Apr 2014 20:26:39 +0100"  >&lt;p&gt;Attaching the log of today&apos;s 7 hour run of NsTest on the 8-core machine.&lt;/p&gt;

&lt;p&gt;Summary: 2988 lock timeouts&lt;/p&gt;</comment>
                            <comment id="13983474" author="rhillegas" created="Mon, 28 Apr 2014 21:02:31 +0100"  >&lt;p&gt;I ran NsTest for 6 hours on the 8 core machine, using an engine to which I&apos;d applied the derby-6542-02-ab-useNewSequenceGenerator.diff patch. No errors. No timeouts. Here is the output:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;SUCCESSFUL: 
	Number of INSERTS = 1769433
	Number of UPDATES = 871363
	Number of DELETES = 872081
	Number of SELECTS = 77837

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 847195
	Number of failed DELETES = 847304
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 1804792


Last total memory = 6329204736, last free memory = 4301127624 as measured at Mon Apr 28 21:36:34 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13984732" author="rhillegas" created="Tue, 29 Apr 2014 21:18:01 +0100"  >&lt;p&gt;Attaching the output from today&apos;s 7 hour run of NsTest on the 8 core machine using the patched version of Derby. Summary:&lt;/p&gt;

&lt;p&gt;1) There were a cluster of errors following an NPE in the test one hour into the test run.&lt;/p&gt;

&lt;p&gt;2) There were a huge number of errors caused by an assertion failure related to the sequence generator which backs the identity column. This happened two hours into the test. This looks like a serious problem which needs investigation.&lt;/p&gt;

&lt;p&gt;3) About 6 1/2 hours into the test, the Store fell over because of a &quot;java.io.IOException: Disc quota exceeded&quot;. It may be that the increased throughput enabled by the patch has allowed us to fill up the disk faster. I will restrict future runs to 6 hours.&lt;/p&gt;</comment>
                            <comment id="13986105" author="rhillegas" created="Wed, 30 Apr 2014 22:19:51 +0100"  >&lt;p&gt;Attaching the output from today&apos;s 6 hour run of NsTest on the 8 core machine using the derby-6542-02-ab-useNewSequenceGenerator.diff patch.&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;o A cluster of errors 5 hours into the test, starting with an NPE while pushing a CompilerContext.&lt;/p&gt;

&lt;p&gt;o Ten minutes later, an assertion failure while initializing a SequenceUpdater.&lt;/p&gt;</comment>
                            <comment id="13986880" author="rhillegas" created="Thu, 1 May 2014 20:06:49 +0100"  >&lt;p&gt;Here is the output from today&apos;s 6 hour run of NsTest on the 8 core machine using the derby-6542-02-ab-useNewSequenceGenerator.diff patch. No errors. No timeouts.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-01 14:56:07.471
End time = 2014-05-01 20:56:07.483
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2572569
	Number of UPDATES = 1266035
	Number of DELETES = 1267002
	Number of SELECTS = 104725

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1233442
	Number of failed DELETES = 1231390
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2608146


Last total memory = 6314524672, last free memory = 5839454304 as measured at Thu May 01 20:52:51 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13988141" author="rhillegas" created="Fri, 2 May 2014 20:41:51 +0100"  >&lt;p&gt;Here is the report from today&apos;s 6 hour run on the 8 core machine using the new derby-6542-02-ac-useNewSequenceGenerator.diff patch (the one with the extra bug fixes).&lt;/p&gt;

&lt;p&gt;Summary: No timeouts. 2 errors raised one minute into the test, starting with an ArrayIndexOutOfBoundsException during transaction cleanup in a delete trigger.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-02 13:49:37.39
End time = 2014-05-02 19:49:37.399
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2561027
	Number of UPDATES = 1262156
	Number of DELETES = 1262105
	Number of SELECTS = 104076

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1226657
	Number of failed DELETES = 1228425
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2597102


Last total memory = 6335496192, last free memory = 5917518216 as measured at Fri May 02 19:46:21 CEST 2014



	Number of XJ001 = 1
	Number of 08003 = 1


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = XJ001, Message = Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
//    
//    First occurrence at 2014-05-02 13:50:55.565, last occurrence at 2014-05-02 13:50:55.565
//    
//////////////////////////////////////////////////////////////

java.sql.SQLException: Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:436)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:193)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:121)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:805)
Caused by: ERROR XJ001: Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.elementData(ArrayList.java:403)
	at java.util.ArrayList.remove(ArrayList.java:480)
	at org.apache.derby.iapi.services.context.ContextManager.popContext(ContextManager.java:209)
	at org.apache.derby.iapi.services.context.ContextImpl.popMe(ContextImpl.java:81)
	at org.apache.derby.impl.store.access.RAMTransaction.destroy(RAMTransaction.java:2014)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:785)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:655)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:171)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:464)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:157)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 08003, Message = No current connection.
//    
//    First occurrence at 2014-05-02 13:50:55.567, last occurrence at 2014-05-02 13:50:55.567
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.getTransactionIsolation(EmbedConnection.java:2266)
	at org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(EmbedConnection.java:2217)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:443)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:193)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:121)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:805)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 11 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13989846" author="rhillegas" created="Mon, 5 May 2014 19:57:36 +0100"  >&lt;p&gt;Here is the report from today&apos;s 6 hour run on the 8 core machine using the new derby-6542-02-ac-useNewSequenceGenerator.diff patch (the one with the extra bug fixes).&lt;/p&gt;

&lt;p&gt;Summary: Pretty much the same results as from last Friday. No timeouts. 2 errors raised one minute into the test, starting with an ArrayIndexOutOfBoundsException during transaction cleanup in a delete trigger.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-05 14:06:20.223
End time = 2014-05-05 20:06:20.234
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2587919
	Number of UPDATES = 1272461
	Number of DELETES = 1274275
	Number of SELECTS = 104300

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1235579
	Number of failed DELETES = 1232925
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2623553


Last total memory = 6394216448, last free memory = 4113270256 as measured at Mon May 05 20:03:05 CEST 2014



	Number of XJ001 = 1
	Number of 08003 = 1


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = XJ001, Message = Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
//    
//    First occurrence at 2014-05-05 14:07:38.822, last occurrence at 2014-05-05 14:07:38.822
//    
//////////////////////////////////////////////////////////////

java.sql.SQLException: Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:436)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:193)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:121)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:805)
Caused by: ERROR XJ001: Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.elementData(ArrayList.java:403)
	at java.util.ArrayList.remove(ArrayList.java:480)
	at org.apache.derby.iapi.services.context.ContextManager.popContext(ContextManager.java:209)
	at org.apache.derby.iapi.services.context.ContextImpl.popMe(ContextImpl.java:81)
	at org.apache.derby.impl.store.access.RAMTransaction.destroy(RAMTransaction.java:2014)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:785)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:655)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:171)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:464)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:157)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 08003, Message = No current connection.
//    
//    First occurrence at 2014-05-05 14:07:38.823, last occurrence at 2014-05-05 14:07:38.823
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.getTransactionIsolation(EmbedConnection.java:2266)
	at org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(EmbedConnection.java:2217)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:443)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:193)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:121)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:805)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 11 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13991064" author="rhillegas" created="Tue, 6 May 2014 21:05:09 +0100"  >&lt;p&gt;Attaching the log from today&apos;s 6 hour run of NsTest on the 8 core machine using the latest patch.&lt;/p&gt;

&lt;p&gt;Summary: No timeouts. But there were 6 deadlocks 24 minutes into the test. The deadlocks involved the user table and SYSDEPENDS and occurred while running a delete trigger.&lt;/p&gt;</comment>
                            <comment id="13992146" author="rhillegas" created="Wed, 7 May 2014 20:31:20 +0100"  >&lt;p&gt;Here is the report from today&apos;s run on the 8 core machine. The test only ran for 4 hours: it was cut off when I had to reboot my laptop and break the connection to the remote machine. No errors, no timeouts.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-07 14:17:37.613
End time = 2014-05-07 18:25:55.786
Duration = 248 minutes



SUCCESSFUL: 
	Number of INSERTS = 1827847
	Number of UPDATES = 900028
	Number of DELETES = 899415
	Number of SELECTS = 80132

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 874896
	Number of failed DELETES = 874697
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 1861424


Last total memory = 6341787648, last free memory = 5122747656 as measured at Wed May 07 18:24:21 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13993058" author="rhillegas" created="Thu, 8 May 2014 21:04:33 +0100"  >&lt;p&gt;Attaching the output from today&apos;s 6 hour run using the latest patch on the 8 core machine.&lt;/p&gt;

&lt;p&gt;Summary: No timeouts. But 2 1/2 hours into the test, there were 5 deadlocks between SYSDEPENDS and the user table while firing DELETE triggers.&lt;/p&gt;</comment>
                            <comment id="13993867" author="rhillegas" created="Fri, 9 May 2014 20:50:04 +0100"  >&lt;p&gt;Here&apos;s the output from today&apos;s 6 hour run on the 8 core machine, same patch. No errors. No timeouts.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-09 14:07:28.219
End time = 2014-05-09 20:07:28.226
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2539381
	Number of UPDATES = 1251881
	Number of DELETES = 1251431
	Number of SELECTS = 102455

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1212376
	Number of failed DELETES = 1216299
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2575344


Last total memory = 6335496192, last free memory = 4574617096 as measured at Fri May 09 20:04:12 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14002226" author="rhillegas" created="Mon, 19 May 2014 20:44:01 +0100"  >&lt;p&gt;Here&apos;s the output from today&apos;s 5 hour run on the 8 core machine. No errors. No timeouts:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-19 16:23:30.834
End time = 2014-05-19 21:23:30.849
Duration = 300 minutes



SUCCESSFUL: 
	Number of INSERTS = 2139371
	Number of UPDATES = 1053342
	Number of DELETES = 1053870
	Number of SELECTS = 90337

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1021324
	Number of failed DELETES = 1022017
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2168669


Last total memory = 6431965184, last free memory = 4697779360 as measured at Mon May 19 21:20:16 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14003865" author="rhillegas" created="Tue, 20 May 2014 20:26:59 +0100"  >&lt;p&gt;Here&apos;s the output from today&apos;s 6 hour run on the 8 core machine. No errors. No timeouts.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-20 14:13:11.416
End time = 2014-05-20 20:13:11.422
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2570576
	Number of UPDATES = 1266642
	Number of DELETES = 1266756
	Number of SELECTS = 103668

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1230673
	Number of failed DELETES = 1230172
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2600089


Last total memory = 6383730688, last free memory = 6127439800 as measured at Tue May 20 20:09:55 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14005123" author="rhillegas" created="Wed, 21 May 2014 20:21:37 +0100"  >&lt;p&gt;I have updated my installation on the 8 core machine to use jar files built from the head of trunk after checking in derby-6542-02-af-useNewSequenceGenerator.diff. Here is the output from a 6 hour run.&lt;/p&gt;

&lt;p&gt;Summary: A couple errors 1 minute into the test, starting with a problem in destroying a transaction while firing a delete trigger. The a half hour into the test there was one TooMuchContention exception on the user-created sequence.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-21 14:11:38.358
End time = 2014-05-21 20:11:26.506
Duration = 359 minutes



SUCCESSFUL: 
	Number of INSERTS = 2544388
	Number of UPDATES = 1253208
	Number of DELETES = 1253550
	Number of SELECTS = 103324

FAILED: 
	Number of failed INSERTS = 1
	Number of failed UPDATES = 1216899
	Number of failed DELETES = 1217258
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2576467


Last total memory = 6312427520, last free memory = 5520965304 as measured at Wed May 21 20:08:22 CEST 2014



	Number of X0Y84 = 1
	Number of 08003 = 1
	Number of XJ001 = 1


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = XJ001, Message = Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
//    
//    First occurrence at 2014-05-21 14:12:56.693, last occurrence at 2014-05-21 14:12:56.693
//    
//////////////////////////////////////////////////////////////

java.sql.SQLException: Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:436)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:193)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:121)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:805)
Caused by: ERROR XJ001: Java exception: &apos;-1: java.lang.ArrayIndexOutOfBoundsException&apos;.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 15 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.elementData(ArrayList.java:403)
	at java.util.ArrayList.remove(ArrayList.java:480)
	at org.apache.derby.iapi.services.context.ContextManager.popContext(ContextManager.java:209)
	at org.apache.derby.iapi.services.context.ContextImpl.popMe(ContextImpl.java:81)
	at org.apache.derby.impl.store.access.RAMTransaction.destroy(RAMTransaction.java:2013)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:788)
	at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:655)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:171)
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)
	at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:469)
	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:158)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 08003, Message = No current connection.
//    
//    First occurrence at 2014-05-21 14:12:56.695, last occurrence at 2014-05-21 14:12:56.695
//    
//////////////////////////////////////////////////////////////

java.sql.SQLNonTransientConnectionException: No current connection.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:80)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:228)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:223)
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:239)
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2371)
	at org.apache.derby.impl.jdbc.EmbedConnection.getTransactionIsolation(EmbedConnection.java:2266)
	at org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(EmbedConnection.java:2217)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:443)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:193)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:121)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:805)
Caused by: ERROR 08003: No current connection.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 11 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = X0Y84, Message = Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
//    
//    First occurrence at 2014-05-21 14:32:42.785, last occurrence at 2014-05-21 14:32:42.785
//    
//////////////////////////////////////////////////////////////

java.sql.SQLException: Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:164)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:113)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:809)
Caused by: ERROR X0Y84: Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.tooMuchContentionException(SequenceUpdater.java:182)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.getCurrentValueAndAdvance(SequenceUpdater.java:418)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getCurrentValueAndAdvance(DataDictionaryImpl.java:10306)
	at org.apache.derby.impl.sql.execute.BaseActivation.getCurrentValueAndAdvance(BaseActivation.java:763)
	at org.apache.derby.exe.ac1db1e91ax0146x1eb1xab81x000017ae4fe0ef9.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1311)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:503)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14006337" author="rhillegas" created="Thu, 22 May 2014 20:05:21 +0100"  >&lt;p&gt;I have updated the version of Derby used on the 8 core machine again. This version incorporates changes to the mainline up through the checkin of derby-6542-03-aa-lockTimeoutForIdentityContention.diff. I am including the results of today&apos;s 6 hour run. Summary: no errors, no timeouts.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-22 14:12:40.609
End time = 2014-05-22 20:12:40.619
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2450284
	Number of UPDATES = 1207723
	Number of DELETES = 1206995
	Number of SELECTS = 100299

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1170966
	Number of failed DELETES = 1172099
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2479872


Last total memory = 6371147776, last free memory = 4946252504 as measured at Thu May 22 20:09:24 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14010130" author="rhillegas" created="Tue, 27 May 2014 20:02:50 +0100"  >&lt;p&gt;Here is the log from today&apos;s 6 hour run of NsTest on the 8 core machine.&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;o 3 TooMuchContention errors on the user-declared sequence generator, 1 1/2 hours into the test&lt;/p&gt;

&lt;p&gt;o 1 LockTimeout on the internal sequence generator which backs the identity column, 3 1/2 hours into the test&lt;/p&gt;

&lt;p&gt;o 1 TooMuchContention error on the user-declared sequence generator, 6 3/4 hours into the test&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-27 14:29:11.444
End time = 2014-05-27 20:29:11.452
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2490533
	Number of UPDATES = 1227762
	Number of DELETES = 1226891
	Number of SELECTS = 100888

FAILED: 
	Number of failed INSERTS = 5
	Number of failed UPDATES = 1190373
	Number of failed DELETES = 1189685
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2521325


Last total memory = 6337593344, last free memory = 4663293072 as measured at Tue May 27 20:25:55 CEST 2014



	Number of X0Y84 = 4
	Number of 40XL1 = 1


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = X0Y84, Message = Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
//    
//    First occurrence at 2014-05-27 16:01:04.741, last occurrence at 2014-05-27 16:01:04.741
//    
//////////////////////////////////////////////////////////////

java.sql.SQLException: Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:164)
	at org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting(Tester1.java:121)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:805)
Caused by: ERROR X0Y84: Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.tooMuchContentionException(SequenceUpdater.java:190)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.getCurrentValueAndAdvance(SequenceUpdater.java:427)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getCurrentValueAndAdvance(DataDictionaryImpl.java:10306)
	at org.apache.derby.impl.sql.execute.BaseActivation.getCurrentValueAndAdvance(BaseActivation.java:763)
	at org.apache.derby.exe.ac79d58706x0146x3da7xe5f6x000017b298301.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1311)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:503)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 2, SQLState = X0Y84, Message = Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
//    
//    First occurrence at 2014-05-27 16:01:04.742, last occurrence at 2014-05-27 16:01:04.743
//    
//////////////////////////////////////////////////////////////

java.sql.SQLException: Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:164)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:113)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:809)
Caused by: ERROR X0Y84: Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.tooMuchContentionException(SequenceUpdater.java:190)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.getCurrentValueAndAdvance(SequenceUpdater.java:427)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getCurrentValueAndAdvance(DataDictionaryImpl.java:10306)
	at org.apache.derby.impl.sql.execute.BaseActivation.getCurrentValueAndAdvance(BaseActivation.java:763)
	at org.apache.derby.exe.ac79d58706x0146x3da7xe5f6x000017b298301.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1311)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:503)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = 40XL1, Message = A lock could not be obtained within the time requested
//    
//    First occurrence at 2014-05-27 18:06:10.547, last occurrence at 2014-05-27 18:06:10.547
//    
//////////////////////////////////////////////////////////////

java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:92)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:164)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:113)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:809)
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.tooMuchContentionException(SequenceUpdater.java:185)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.getCurrentValueAndAdvance(SequenceUpdater.java:427)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getCurrentValueAndAdvance(DataDictionaryImpl.java:10306)
	at org.apache.derby.impl.sql.execute.BaseActivation.getCurrentValueAndAdvance(BaseActivation.java:763)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(InsertResultSet.java:777)
	at org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(BaseActivation.java:742)
	at org.apache.derby.exe.ac15941700x0146x3da7xe5f6x000017b2983082.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1311)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:503)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more


//////////////////////////////////////////////////////////////
//    
//    Count = 1, SQLState = X0Y84, Message = Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
//    
//    First occurrence at 2014-05-27 20:16:51.381, last occurrence at 2014-05-27 20:16:51.381
//    
//////////////////////////////////////////////////////////////

java.sql.SQLException: Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:233)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)
	at org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(DbUtil.java:196)
	at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:164)
	at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:113)
	at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:809)
Caused by: ERROR X0Y84: Too much contention on sequence NSTESTTAB_SEQ. This is probably caused by an uncommitted scan of the SYS.SYSSEQUENCES catalog. Do not query this catalog directly. Instead, use the SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function to view the current value of a sequence generator.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.tooMuchContentionException(SequenceUpdater.java:190)
	at org.apache.derby.impl.sql.catalog.SequenceUpdater.getCurrentValueAndAdvance(SequenceUpdater.java:427)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getCurrentValueAndAdvance(DataDictionaryImpl.java:10306)
	at org.apache.derby.impl.sql.execute.BaseActivation.getCurrentValueAndAdvance(BaseActivation.java:763)
	at org.apache.derby.exe.ac0bbcd7f9x0146x3da7xe5f6x000017b298308f.e0(Unknown Source)
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101)
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:150)
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:188)
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:143)
	at org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(InsertResultSet.java:1311)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:503)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)
	... 7 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14011399" author="rhillegas" created="Wed, 28 May 2014 19:10:43 +0100"  >&lt;p&gt;Here are the results of today&apos;s 6 hour run on the 8 core machine. Summary: no errors, no timeouts.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-28 13:55:43.29
End time = 2014-05-28 19:55:43.297
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2577657
	Number of UPDATES = 1270296
	Number of DELETES = 1268687
	Number of SELECTS = 103952

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1233570
	Number of failed DELETES = 1232040
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2613379


Last total memory = 6333399040, last free memory = 5009213136 as measured at Wed May 28 19:52:27 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14012743" author="rhillegas" created="Thu, 29 May 2014 20:10:36 +0100"  >&lt;p&gt;Attaching today&apos;s output from a 6 hour run on the 8 core machine.&lt;/p&gt;

&lt;p&gt;Summary: no timeouts or tooMuchContention errors, but there were 6 deadlocks between SYSDEPENDS and the user table, an hour into the test.&lt;/p&gt;</comment>
                            <comment id="14014135" author="rhillegas" created="Fri, 30 May 2014 20:29:08 +0100"  >&lt;p&gt;Here is the output from today&apos;s 6 hour run of NsTest on the 8 core machine. Summary: no timeouts, no errors.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-05-30 14:42:18.188
End time = 2014-05-30 20:42:18.199
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2559540
	Number of UPDATES = 1262022
	Number of DELETES = 1260993
	Number of SELECTS = 103682

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1221926
	Number of failed DELETES = 1222792
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2589942


Last total memory = 6398410752, last free memory = 6092017344 as measured at Fri May 30 20:39:02 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14015662" author="rhillegas" created="Mon, 2 Jun 2014 19:03:39 +0100"  >&lt;p&gt;Here is the output from today&apos;s 6 hour run on the 8 core machine. Summary: no errors, no timeouts.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-06-02 13:54:52.809
End time = 2014-06-02 19:54:52.819
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2585365
	Number of UPDATES = 1271792
	Number of DELETES = 1273090
	Number of SELECTS = 104338

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1235005
	Number of failed DELETES = 1235997
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2614636


Last total memory = 6335496192, last free memory = 4585562424 as measured at Mon Jun 02 19:51:37 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14017042" author="rhillegas" created="Tue, 3 Jun 2014 20:35:04 +0100"  >&lt;p&gt;Here is the output from today&apos;s 4 hours run on the 8 core machine. Summary: no errors, no timeouts.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-06-03 17:27:46.528
End time = 2014-06-03 21:27:46.538
Duration = 240 minutes



SUCCESSFUL: 
	Number of INSERTS = 1725420
	Number of UPDATES = 848622
	Number of DELETES = 848954
	Number of SELECTS = 76690

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 826673
	Number of failed DELETES = 824280
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 1756584


Last total memory = 6255804416, last free memory = 4635589648 as measured at Tue Jun 03 21:24:32 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14017956" author="rhillegas" created="Wed, 4 Jun 2014 19:16:29 +0100"  >&lt;p&gt;Here are the results of today&apos;s 4 hour run on the 8 core machine. No timeouts. No errors.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-06-04 13:55:08.54
End time = 2014-06-04 17:55:08.547
Duration = 240 minutes



SUCCESSFUL: 
	Number of INSERTS = 1763109
	Number of UPDATES = 869230
	Number of DELETES = 869533
	Number of SELECTS = 77954

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 843754
	Number of failed DELETES = 845147
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 1798700


Last total memory = 6278873088, last free memory = 5021092824 as measured at Wed Jun 04 17:51:52 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14019118" author="rhillegas" created="Thu, 5 Jun 2014 20:15:30 +0100"  >&lt;p&gt;Here&apos;s the output from today&apos;s 6  hour run on the 8 core machine. No timeouts. No errors.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-06-05 13:46:33.618
End time = 2014-06-05 19:46:33.633
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2576702
	Number of UPDATES = 1270999
	Number of DELETES = 1267990
	Number of SELECTS = 103788

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1230041
	Number of failed DELETES = 1231559
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2612586


Last total memory = 6429868032, last free memory = 5868794056 as measured at Thu Jun 05 19:43:17 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14025588" author="rhillegas" created="Mon, 9 Jun 2014 20:17:47 +0100"  >&lt;p&gt;Here is the output from today&apos;s 5 hour run on the 8 core machine. Note that I have been running with jars built after the checkin of derby-6595-01-aa-dontClearSequenceCache.diff.&lt;/p&gt;

&lt;p&gt;No timeouts. No errors.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-06-09 16:04:13.132
End time = 2014-06-09 21:04:13.146
Duration = 300 minutes



SUCCESSFUL: 
	Number of INSERTS = 2163490
	Number of UPDATES = 1066712
	Number of DELETES = 1065886
	Number of SELECTS = 91015

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1035674
	Number of failed DELETES = 1036857
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2193783


Last total memory = 6431965184, last free memory = 6295842656 as measured at Mon Jun 09 21:00:57 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14026842" author="rhillegas" created="Tue, 10 Jun 2014 19:54:51 +0100"  >&lt;p&gt;Here&apos;s the output from today&apos;s 6 hour run on the 8 core machine. No timeouts. No errors.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;STATISTICS OF OPERATIONS DONE
-----------------------------



Start time = 2014-06-10 13:50:40.878
End time = 2014-06-10 19:50:40.889
Duration = 360 minutes



SUCCESSFUL: 
	Number of INSERTS = 2524739
	Number of UPDATES = 1242978
	Number of DELETES = 1243728
	Number of SELECTS = 102539

FAILED: 
	Number of failed INSERTS = 0
	Number of failed UPDATES = 1205841
	Number of failed DELETES = 1207385
	Number of failed SELECTS = 0

  Note that this may not be the same as the server side connections made
   to the database especially if connection pooling is employed

NOTE: Failing operations could be because of locking issue that are
directly related to the application logic.  They are not necessarily bugs.

Max sequence counter peeked at = 2555362


Last total memory = 6413090816, last free memory = 4674349760 as measured at Tue Jun 10 19:47:24 CEST 2014
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14029706" author="rhillegas" created="Thu, 12 Jun 2014 20:57:50 +0100"  >&lt;p&gt;Summary of today&apos;s 6 hour run on the 8 core machine: No timeouts. No errors.&lt;/p&gt;</comment>
                            <comment id="14030963" author="rhillegas" created="Fri, 13 Jun 2014 19:27:26 +0100"  >&lt;p&gt;Summary of today&apos;s 6 hour run on the 8 core machine: No timeouts. No errors.&lt;/p&gt;</comment>
                            <comment id="14032707" author="rhillegas" created="Mon, 16 Jun 2014 19:11:03 +0100"  >&lt;p&gt;Summary for today&apos;s 5 1/2 hour run on the 8 core machine: No errors. No timeouts.&lt;/p&gt;</comment>
                            <comment id="14286327" author="myrna" created="Wed, 21 Jan 2015 21:39:45 +0000"  >&lt;p&gt;Rick, it seems that this task has been completed?&lt;/p&gt;</comment>
                            <comment id="14286550" author="rhillegas" created="Wed, 21 Jan 2015 23:35:31 +0000"  >&lt;p&gt;Thanks for the nudge, Myrna. Resolving and closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12710022">DERBY-6548</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12708269">DERBY-6542</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12637894" name="derby-6533-01-aa-quietMode.diff" size="68236" author="rhillegas" created="Mon, 31 Mar 2014 19:45:25 +0100"/>
                            <attachment id="12638103" name="derby-6533-02-aa-sequencesAndMoreStats.diff" size="14095" author="rhillegas" created="Tue, 1 Apr 2014 19:31:01 +0100"/>
                            <attachment id="12638105" name="derby-6533-02-aa-sequencesAndMoreStats.out" size="55659" author="rhillegas" created="Tue, 1 Apr 2014 19:32:02 +0100"/>
                            <attachment id="12638671" name="derby-6533-03-timerThread.diff" size="7975" author="rhillegas" created="Fri, 4 Apr 2014 13:28:03 +0100"/>
                            <attachment id="12639604" name="derby-6533-04-outOfMemory.diff" size="3684" author="rhillegas" created="Thu, 10 Apr 2014 17:38:05 +0100"/>
                            <attachment id="12640269" name="derby-6533-05-aa-dieQuickly.diff" size="5621" author="rhillegas" created="Tue, 15 Apr 2014 14:37:23 +0100"/>
                            <attachment id="12641472" name="derby-6533-07-aa-moreDefensiveCode.diff" size="3903" author="rhillegas" created="Wed, 23 Apr 2014 14:24:38 +0100"/>
                            <attachment id="12641721" name="derby-6533-08-aa-sortErrors.diff" size="3162" author="rhillegas" created="Thu, 24 Apr 2014 15:35:41 +0100"/>
                            <attachment id="12640645" name="derby-6533-aa-anotherNPE.diff" size="1138" author="rhillegas" created="Thu, 17 Apr 2014 16:17:51 +0100"/>
                            <attachment id="12647422" name="nstest.out" size="39757" author="rhillegas" created="Thu, 29 May 2014 20:10:36 +0100"/>
                            <attachment id="12643998" name="nstest.out" size="34413" author="rhillegas" created="Thu, 8 May 2014 21:04:33 +0100"/>
                            <attachment id="12643622" name="nstest.out" size="40290" author="rhillegas" created="Tue, 6 May 2014 21:05:09 +0100"/>
                            <attachment id="12642727" name="nstest.out" size="11814" author="rhillegas" created="Wed, 30 Apr 2014 22:19:51 +0100"/>
                            <attachment id="12642528" name="nstest.out" size="229127" author="rhillegas" created="Tue, 29 Apr 2014 21:18:01 +0100"/>
                            <attachment id="12641996" name="nstest.out" size="247324" author="rhillegas" created="Fri, 25 Apr 2014 20:26:39 +0100"/>
                            <attachment id="12641784" name="nstest.out" size="223113" author="rhillegas" created="Thu, 24 Apr 2014 20:55:24 +0100"/>
                            <attachment id="12641566" name="nstest.out" size="35748" author="rhillegas" created="Wed, 23 Apr 2014 21:54:11 +0100"/>
                            <attachment id="12641328" name="nstest.out" size="474296" author="rhillegas" created="Tue, 22 Apr 2014 22:03:18 +0100"/>
                            <attachment id="12641236" name="nstest.out" size="55698" author="rhillegas" created="Tue, 22 Apr 2014 14:22:32 +0100"/>
                            <attachment id="12640533" name="nstest.out" size="240618" author="rhillegas" created="Wed, 16 Apr 2014 21:22:22 +0100"/>
                            <attachment id="12640362" name="nstest.out" size="50384" author="rhillegas" created="Wed, 16 Apr 2014 00:26:13 +0100"/>
                            <attachment id="12640144" name="nstest.out" size="50134" author="rhillegas" created="Mon, 14 Apr 2014 22:18:19 +0100"/>
                            <attachment id="12639857" name="nstest.out" size="420904" author="rhillegas" created="Fri, 11 Apr 2014 20:48:51 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 31 Mar 2014 18:53:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>384010</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzo0en:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>384278</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>