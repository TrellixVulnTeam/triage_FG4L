<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:52:25 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3766/DERBY-3766.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3766] EmbedBlob.setPosition is highly ineffective for streams</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3766</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The EmbedBlob.setPosition implementation has two performance problems when the&lt;br/&gt;
Blob is represented by a store stream, at least one of them rather significant:&lt;/p&gt;

&lt;p&gt;  1) The store stream is reset to position zero for each position request.&lt;br/&gt;
     Data is then read until the requested position has been reached.&lt;/p&gt;

&lt;p&gt;  2) &apos;read&apos; is used instead of &apos;skip&apos;, which causes Derby to miss out on the&lt;br/&gt;
     optimization potential with streams that have a more efficient skip mechanism.&lt;/p&gt;

&lt;p&gt;My gut feeling is that once point 1) has been fixed, point 2) will have&lt;br/&gt;
disappeared. Also note that the reason why the unconditional reset approach was&lt;br/&gt;
chosen was because the blob implementation couldn&apos;t keep track of the underlying&lt;br/&gt;
streams position. This issue still has to be addressed.&lt;/p&gt;


&lt;p&gt;Performance degradation&lt;br/&gt;
=======================&lt;br/&gt;
Observations suggest the following approximation can be used to quantify the&lt;br/&gt;
number of bytes that have to be processed on the server. Goes for both the&lt;br/&gt;
embedded and the client driver when using the EmbedBlob.getBytes call.&lt;br/&gt;
    s = size of the blob&lt;br/&gt;
    b = buffer/block size&lt;br/&gt;
    n = s/b      (number of iterations needed to read the whole Blob)&lt;/p&gt;

&lt;p&gt;    s + b * n * (n+1) / 2 = number of bytes processed on the server side&lt;br/&gt;
    From now on, I ignore the s.&lt;/p&gt;

&lt;p&gt;For a 1 MB Blob when using a buffer of 32 000 bytes, we get:&lt;br/&gt;
   n = 1 * 1&apos;024 * 1&apos;024 / 32&apos;000 ~ 33&lt;br/&gt;
   32&apos;000 * 33 * (33+1) / 2 = 17&apos;952&apos;000 ~ 17 MB&lt;/p&gt;

&lt;p&gt;To quickly verify the approximation I summed up the bytes processed by&lt;br/&gt;
EmbedBlob.getBytes(long,int) and EmbedBlob.setPosition(long) with the 64 MB&lt;br/&gt;
Blob used by the repro for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-550&quot; title=&quot;BLOB : java.lang.OutOfMemoryError with network JDBC driver (org.apache.derby.jdbc.ClientDriver)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-550&quot;&gt;&lt;del&gt;DERBY-550&lt;/del&gt;&lt;/a&gt; (modified to use 32&apos;000 read buffer):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;approximation: 32&apos;000 * 2097 * (2097+1) / 2 =  70392096000 ~  66 GB&lt;/li&gt;
	&lt;li&gt;Derby byte count                            =  70459204864 ~  66 GB&lt;/li&gt;
	&lt;li&gt;Derby byte count (buffer 33&apos;000, see below) = 136526134864 ~ 127 GB&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll explain the biggest number further down.&lt;br/&gt;
As you see, the number of bytes processed is huge. Note that all of the&lt;br/&gt;
gigabytes are just the 64 MB repeated over and over again. Since the actual data&lt;br/&gt;
volume is so small, all the data will be in the caches of Derby and the&lt;br/&gt;
operating system. Note that only 64 MB is actually transferred to the client&lt;br/&gt;
when using the client driver.&lt;/p&gt;

&lt;p&gt;Another consequence of processing all this data repeatedly, is the effect it has&lt;br/&gt;
on the page cache. Pages has to be evicted and read back in. The performance hit&lt;br/&gt;
taken by this depends on the page cache size, operating system buffers and other&lt;br/&gt;
database activities on the system.&lt;/p&gt;

&lt;p&gt;The explanation for the largest number above, is another performance issue in&lt;br/&gt;
the client driver, related to locators. I&apos;ll explain it more detailed in a&lt;br/&gt;
separate Jira issue, but in short the issue causes the stream to be reset even&lt;br/&gt;
more frequently for read buffer sizes over 32&apos;672 bytes.&lt;/p&gt;


&lt;p&gt;Suggested fix&lt;br/&gt;
=============&lt;br/&gt;
My initial analysis suggests that the problem can be fixed by using the&lt;br/&gt;
functionality provided by PosistionedStoreStream. There are a few complicating&lt;br/&gt;
issues:&lt;br/&gt;
 a) The length encoding bytes must be accounted for properly.&lt;br/&gt;
 b) One must make sure all stream access happens through the&lt;br/&gt;
    PositionedStoreStream, otherwise the position will be incorrect and the&lt;br/&gt;
    wrong data will be returned.&lt;/p&gt;

&lt;p&gt;With a prototype fix, the repro duration went down from minutes (7 minutes&lt;br/&gt;
for the 127 GB case) down to between 2 and 4 seconds with a sane build, running&lt;br/&gt;
on localhost.&lt;/p&gt;



&lt;p&gt;Affected versions&lt;br/&gt;
=================&lt;br/&gt;
The code suffering from the performance issues is old, but because it isn&apos;t&lt;br/&gt;
used in the same way in all versions some releases are more affected than&lt;br/&gt;
others.&lt;/p&gt;

&lt;p&gt;Version     Embedded.getBytes   Client.getXXX&lt;br/&gt;
10.5                X                   X&lt;br/&gt;
10.4.1.3            X                   X&lt;br/&gt;
10.3.3.0            X                   X&lt;br/&gt;
10.2.2.1            X                   _&lt;br/&gt;
10.1.3.1            X                   _&lt;br/&gt;
(X = issue present)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12399881">DERBY-3766</key>
            <summary>EmbedBlob.setPosition is highly ineffective for streams</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 Jul 2008 09:43:58 +0100</created>
                <updated>Wed, 1 Jul 2009 17:29:32 +0100</updated>
                            <resolved>Tue, 5 Aug 2008 18:14:16 +0100</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.4.2.0</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12611943" author="kristwaa" created="Wed, 9 Jul 2008 09:48:12 +0100"  >&lt;p&gt;Marking as regression.&lt;br/&gt;
This is only true for the client driver, where Blob performance has dropped significantly after 10.2.&lt;br/&gt;
The reason is that the existing code with the performance issues has been taken into use by the implementation of locators.&lt;/p&gt;</comment>
                            <comment id="12614311" author="kristwaa" created="Thu, 17 Jul 2008 13:36:25 +0100"  >&lt;p&gt;&apos;derby-3766-1a-preparations.diff&apos; is a preparation patch for later changes. It extracts more trivial changes to make the later patch(es) a little smaller:&lt;br/&gt;
 a) Change type of &apos;myStream&apos; from InputStream to PositionedStoreStream.&lt;br/&gt;
    This includes removing superfluous casts.&lt;br/&gt;
 b) Fixed typo in JavaDoc for &apos;streamLength&apos;&lt;br/&gt;
 c) Improved JavaDoc for &apos;read()&apos;&lt;br/&gt;
 d) Made exception in &apos;truncate&apos; use the correct position argument.&lt;br/&gt;
 e) Added/updated a few comments.&lt;/p&gt;</comment>
                            <comment id="12614401" author="kristwaa" created="Thu, 17 Jul 2008 16:47:46 +0100"  >&lt;p&gt;Committed &apos;derby-3766-1a-preparations.diff&apos; to trunk with revision 677619.&lt;br/&gt;
suites.All and derbyall ran without failures with Sun JDK 1.6 on Solaris 10.&lt;/p&gt;</comment>
                            <comment id="12614405" author="kristwaa" created="Thu, 17 Jul 2008 16:57:41 +0100"  >&lt;p&gt;Added &quot;loose&quot; dependency to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3783&quot; title=&quot;LOBStreamControl shouldn&amp;#39;t throw SQLException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3783&quot;&gt;&lt;del&gt;DERBY-3783&lt;/del&gt;&lt;/a&gt;. It is only required to write a cleaner fix, it doesn&apos;t matter functionally.&lt;/p&gt;</comment>
                            <comment id="12614699" author="kristwaa" created="Fri, 18 Jul 2008 12:33:04 +0100"  >&lt;p&gt;&apos;derby-3766-2a-position_fix.diff&apos; is the first attempt at fixing the performance problem.&lt;/p&gt;

&lt;p&gt;Patch descriptions:&lt;br/&gt;
 a) Removed the &apos;pos&apos; and &apos;biStream&apos; variables. A &quot;global&quot; Blob position is no longer maintained by EmbedBlob.&lt;/p&gt;

&lt;p&gt; b) Introduced &apos;streamPositionOffset&apos; to account for the encoded length bytes. Only used when the Blob is represented by a store stream. Set to Integer.MIN_VALUE when unused. Otherwise, the offset is obtained in the constructor, where the Blob length is saved for later use as well if it is known (the stream is not skipped to find length).&lt;/p&gt;

&lt;p&gt; c) Removed &apos;BLOB_BUF_SIZE&apos; and &apos;buf&apos;, they&apos;re no longer needed.&lt;/p&gt;

&lt;p&gt; d) Renamed &apos;setPosition&apos; to &apos;setBlobPosition&apos; and rewrote the method. The method now relies on PositionedStoreStream to do the repositioning. In some cases this will lead to using the same algorithm as earlier, otherwise it will be more effective because the stream isn&apos;t reset. Note the addition of &apos;streamPositionOffset&apos; to the logical zero-based Blob position. Also note that another SQLState is used. The method also returns the new position (this is only for convenience).&lt;/p&gt;

&lt;p&gt; e) Changes in read(); added pos argument, don&apos;t throw SQLException, use the correct stream.&lt;/p&gt;

&lt;p&gt; f) Updated length() to reflect changes.&lt;/p&gt;

&lt;p&gt; g) Rewrote the two &apos;position&apos; methods to maintain a local position variable. Also removed special handling for the BLOB_LENGTH_TOO_LONG exception.&lt;/p&gt;

&lt;p&gt; h) Updated JavaDoc and added position argument for the two &apos;checkMatch&apos; methods.&lt;/p&gt;

&lt;p&gt; i) Added one new test in BlobClob4BlobTest.&lt;/p&gt;

&lt;p&gt;I thought about adding a &quot;inefficiency metric&quot; by checking how often PositionedStoreStream resets the underlying stream, but don&apos;t know of a simple way to record and present this info.&lt;/p&gt;

&lt;p&gt;Also note that this change doesn&apos;t protect users from poor access patterns, like fetching the Blob from the end using &apos;getBytes&apos; or something like that... &lt;br/&gt;
&apos;position&apos; can also suffer, depending on how many partial matches there are in the stream. I think these implementations can be optimized, as a comment in the code also says, by operating on a buffer instead of reading one byte at the time from the Blob representation. Such a change could avoid resetting the stream too much for patterns smaller than the read buffer size.&lt;/p&gt;

&lt;p&gt;The message to pass across here is that moving backwards in the Blob content is expensive.&lt;/p&gt;


&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12618662" author="kristwaa" created="Thu, 31 Jul 2008 13:44:41 +0100"  >&lt;p&gt;Committed patch 2a to trunk with revision 681359.&lt;/p&gt;</comment>
                            <comment id="12619960" author="kristwaa" created="Tue, 5 Aug 2008 18:14:16 +0100"  >&lt;p&gt;Backported patches 1a and 2a to 10.4 with revision 682803. They went in together with the second patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3783&quot; title=&quot;LOBStreamControl shouldn&amp;#39;t throw SQLException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3783&quot;&gt;&lt;del&gt;DERBY-3783&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12399902">DERBY-3769</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12400285">DERBY-3781</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12400453">DERBY-3783</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12386287" name="derby-3766-1a-preparations.diff" size="4652" author="kristwaa" created="Thu, 17 Jul 2008 13:36:25 +0100"/>
                            <attachment id="12386383" name="derby-3766-2a-position_fix.diff" size="20010" author="kristwaa" created="Fri, 18 Jul 2008 12:33:03 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23831</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0sen:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38420</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>