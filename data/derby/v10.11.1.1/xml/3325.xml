<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:15:03 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3325/DERBY-3325.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3325] Add &apos;maxStatements&apos; property to ClientConnectionPoolDataSource</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3325</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The classes in Derby implementing javax.sql.ConnectionPoolDataSource must provide setter and getter methods for the property &apos;maxStatements&apos;.&lt;br/&gt;
This property is used to control the whether the data source should produce pooled connections with statement cache capabilities or not, and how big the statement cache is allowed to be.&lt;/p&gt;

&lt;p&gt;This issue only deals with the client JDBC driver.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12386515">DERBY-3325</key>
            <summary>Add &apos;maxStatements&apos; property to ClientConnectionPoolDataSource</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12385979">DERBY-3313</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Jan 2008 17:05:31 +0000</created>
                <updated>Sat, 23 Feb 2008 15:50:39 +0000</updated>
                            <resolved>Sat, 23 Feb 2008 15:50:39 +0000</resolved>
                                    <version>10.4.1.3</version>
                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12561336" author="kristwaa" created="Tue, 22 Jan 2008 13:23:45 +0000"  >&lt;p&gt;&apos;derby-3325-1a-maxStatements.diff&apos; introduces the maxStatements property for the ClientConnectionPoolDataSource. The property is specified in the JDBC 4.0 standard, chapter 11.8 (don&apos;t remember if it was introduced in an earlier revision).&lt;/p&gt;

&lt;p&gt;Due to the current inheritance hierarchy, and the type being passed around in Derby, I have added the variable itself and the getter method to ClientBaseDataSource. They don&apos;t really belong there, but it was the easiest solution to avoid having to cast objects in the factory methods.&lt;br/&gt;
If people think we should &quot;redesign&quot; the hierarchy and/or change the factory method signatures, I&apos;m open for suggestions and opinions. I know there has been an earlier effort towards the hierarchy, so I would have to read up on why things were changed before we change something again.&lt;/p&gt;

&lt;p&gt;Only ClientPooledConnectionDataSource has a setter method. I have not added it to the XADataSource (I could not find any mention of statement pooling for XA in the standard, as I did for connection pooling).&lt;/p&gt;

&lt;p&gt;Note that the included test is not yet enabled.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12561691" author="knutanders" created="Wed, 23 Jan 2008 14:35:15 +0000"  >&lt;p&gt;I think your approach is fine. One variant that you may consider, is to move the getter and the field to ClientConnectionPoolDataSource and make the field private, and write a new getter in ClientBaseDataSource that just returns 0. Then you state more explicitly that the field is only used by CCPDS, and that DataSource classes that don&apos;t override getMaxStatement() never cache statements. Not that there&apos;s much difference between the variants, so feel free to choose whichever you want...&lt;/p&gt;

&lt;p&gt;I noticed that testGetConnectionWithStatemenPooling() (whose name misses a &apos;t&apos; in &apos;Statement&apos;, btw, as does its sibling s/With/Without/) was disabled, but after a brief inspection I couldn&apos;t see that anything would fail even before statement pooling is implemented. Perhaps it could be enabled right away?&lt;/p&gt;

&lt;p&gt;Could you log an issue for the bug you found in the test framework? It seems unnecessary that every test that uses DataSources needs to have a workaround for the 08004 error when running standalone. It would at least be good to track it.&lt;/p&gt;

&lt;p&gt;Test code that looks like this:&lt;/p&gt;

&lt;p&gt;+        rs = ps1.executeQuery();&lt;br/&gt;
+        assertTrue(rs.next());&lt;br/&gt;
+        assertEquals(31, rs.getInt(1));&lt;/p&gt;

&lt;p&gt;would be simpler (and have rs closed automatically) if written like this:&lt;/p&gt;

&lt;p&gt;    JDBC.assertSingleValueResultSet(ps1.executeQuery(), &quot;31&quot;);&lt;/p&gt;</comment>
                            <comment id="12561719" author="djd" created="Wed, 23 Jan 2008 15:51:59 +0000"  >&lt;p&gt;+            throw new IllegalArgumentException(&quot;Negative values for max &quot; +&lt;br/&gt;
+                    &quot;statements are not allowed: &quot; + maxStatements);&lt;/p&gt;

&lt;p&gt;There seems to be a worrying trend of adding English only, non-localized messages. Derby has always used localization for almost all error messages, ClientBaseDataSource already has a couple of localized exceptions, any reason not to use the mechanism here?&lt;/p&gt;

&lt;p&gt;Not sure I understand the comment avoid avoiding casts in the factory methods. Why would the factory methods care about max statements, won&apos;t the logic of statement pooling be self-contained in either the pooling data source or pooling connection? Is there another patch that shows this?&lt;/p&gt;

&lt;p&gt;Since we are adding a field to a serializable class are there any issues around that? Ie. 10.0 data sources serialized need to be unserialized correctly with 10.4 code.&lt;/p&gt;

&lt;p&gt;XA can support statement pooling, XAConnection extends PooledConnection, therefore it inherits all the behaviour of PooledConnection and thus section 11.6 of JDBC 4 spec applies to XA. If your own itch is just non-XA data sources then that&apos;s fine.&lt;/p&gt;</comment>
                            <comment id="12562065" author="kristwaa" created="Thu, 24 Jan 2008 13:22:46 +0000"  >&lt;p&gt;Good points, Dan.&lt;/p&gt;

&lt;p&gt;The non-localized message(s) is an oversight from my side. Thanks for reminding me. If you see a trend, maybe we should try to raise the awareness about it in the community?&lt;br/&gt;
I thought about adding it to &lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyContributorChecklist&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyContributorChecklist&lt;/a&gt; , but came to the conclusion it will clutter the list. My opinion is that this list should be short and only include the most important issues. Is there another wiki document we can add it to?&lt;/p&gt;

&lt;p&gt;I see one issue with the existing framework, and that is how we handle non-SQL exception messages (or methods that can&apos;t throw Sql-/SQLException)?&lt;br/&gt;
Shall we just put them into SQLState/messages as usual, and use MessageUtil directly to obtain the localized text? Or generate a SQLException to obtain the text?&lt;br/&gt;
What about severity codes? What states can be used for such messages?&lt;/p&gt;


&lt;p&gt;What I meant about avoiding casts in the factory methods, is that all methods taking a data source take ClientBaseDataSource. If I didn&apos;t add getMaxStatements into CBDS, I would have to start checking if I could cast to CPDS or XADS to get the value of the maxStatements property.&lt;br/&gt;
Instead of the current approach, one could change the method signatures and possibly introduce another data source class/interface. After incorporating Knut Anders&apos; suggestion, I&apos;m quite happy about the current situation though.&lt;/p&gt;


&lt;p&gt;Thanks bringing my attention to the issue, which can be a bit tricky I believe.&lt;br/&gt;
A few questions off the top of my head:&lt;br/&gt;
 a) What&apos;s the state of the existing data sources?&lt;br/&gt;
    Seems all of them are relying on the standard mechanism, but do provide an UID.&lt;br/&gt;
 b) What are the compatibility requirements?&lt;br/&gt;
 c) Should we enforce invariants on deserialization?&lt;br/&gt;
    An example is making sure maxStatements &amp;gt;= 0.&lt;/p&gt;


&lt;p&gt;I have updated the overview attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3313&quot; title=&quot;JDBC client driver statement cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3313&quot;&gt;&lt;del&gt;DERBY-3313&lt;/del&gt;&lt;/a&gt;, stating statement pooling for XA has lower priority. However, it might come almost for free. If I run out of time, it will not be supported. Note that CXADS does not inherit from CCPDS, so the maxStatements property will have to be added there as well with the current hierarchy.&lt;/p&gt;

&lt;p&gt;Based on further feedback and my own investigations, I might decide to add one or more subtasks to the parent issue to handle the issues brought up by Dan&apos;s comments. There will be a new patch anyway, to address the comments from Knut Anders (and possibly those from Dan).&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;</comment>
                            <comment id="12562113" author="djd" created="Thu, 24 Jan 2008 16:10:14 +0000"  >&lt;p&gt;There are existing non-SQL exceptions that use MessageUtil directly to obtain the localized text. A code search should find an example.&lt;/p&gt;

&lt;p&gt;Kristian wrote:&lt;br/&gt;
--------&lt;br/&gt;
What I meant about avoiding casts in the factory methods, is that all methods taking a data source take ClientBaseDataSource. If I didn&apos;t add getMaxStatements into CBDS, I would have to start checking if I could cast to CPDS or XADS to get the value of the maxStatements property.&lt;br/&gt;
Instead of the current approach, one could change the method signatures and possibly introduce another data source class/interface. After incorporating Knut Anders&apos; suggestion, I&apos;m quite happy about the current situation though. &lt;br/&gt;
---------&lt;/p&gt;

&lt;p&gt;My point was I&apos;m not sure why the factory methods even need to know about maxStatements. Encapsulating the logic within the the connection pooling data source and the connection pooling object would seem to make more sense. E.g. the pooling data source passes a parameter to the constructor of its pooling connection implementation that is maxStatements. Then all the pooling logic is self-contained in the pooled connection. If you could point to a patch and where the factory methods need to know about maxStatements, maybe I could understand what the issue is better.&lt;/p&gt;</comment>
                            <comment id="12562123" author="kristwaa" created="Thu, 24 Jan 2008 16:40:57 +0000"  >&lt;p&gt;Dan wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There are existing non-SQL exceptions that use MessageUtil directly to obtain the localized text. A code search should find an example.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Okay. So I guess it is okay to put all kinds of messages that need localization in SQLState.&lt;/p&gt;


&lt;p&gt;Dan wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My point was I&apos;m not sure why the factory methods even need to know about maxStatements. Encapsulating the logic within the the connection pooling data source and the connection pooling object would seem to make more sense. E.g. the pooling data source passes a parameter to the constructor of its pooling connection implementation that is maxStatements. Then all the pooling logic is self-contained in the pooled connection. If you could point to a patch and where the factory methods need to know about maxStatements, maybe I could understand what the issue is better.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Okay, then I understand your concern.&lt;br/&gt;
Your suggestion then falls under &quot;one could change the method signatures&quot; (more specifically add an extra argument), which would include some of the methods in ClientJDBCObjectFactory (and the two implementations) and the constructors of ClientPooledConnection. Seems the data source reference is still needed.&lt;/p&gt;

&lt;p&gt;The currently attached patch shows how it could be done by adding a getMaxStatements method to ClientBaseDataSource.&lt;br/&gt;
The data source creates its pooled connections through the JDBC factory (code from jdbc.ClientConnectionPoolDataSource):&lt;br/&gt;
    private PooledConnection getPooledConnectionX(LogWriter dncLogWriter, &lt;br/&gt;
                        ClientBaseDataSource ds, String user, &lt;br/&gt;
                        String password) throws SQLException &lt;/p&gt;
{
            return ClientDriver.getFactory().newClientPooledConnection(ds,
                    dncLogWriter, user, password);
    }
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Have I understood you correctly by saying you suggest one could add maxStatements to the code block above (and all other required places)?&lt;br/&gt;
Note that it is the methods I have called the factory methods that are invoking the PooledConnection constructor, and thus they must have a mean to obtain maxStatements if we add it to the constructor.&lt;/p&gt;</comment>
                            <comment id="12562137" author="djd" created="Thu, 24 Jan 2008 17:22:55 +0000"  >&lt;p&gt;Ideally messages that are not related to a SQL state would go into MessageId, that policy has not been followed over time though.&lt;/p&gt;</comment>
                            <comment id="12564059" author="kristwaa" created="Wed, 30 Jan 2008 15:46:18 +0000"  >&lt;p&gt;When investigating the issue around introducing maxStatements into the&lt;br/&gt;
client side data source(s), I ended up basically rewriting&lt;br/&gt;
jdbcapi.DataSourceReferenceTest.  The reason was that I had some trouble&lt;br/&gt;
understanding it at first, and also that I needed more flexibility now&lt;br/&gt;
that the three data source types (basic, connection pool and XA) are not&lt;br/&gt;
equal any more.&lt;/p&gt;

&lt;p&gt;Does anyone have feedback on the (early) new version?&lt;br/&gt;
Is it bad to rewrite it that heavily?&lt;br/&gt;
(I recommend looking at the class itself, rather than the diff)&lt;/p&gt;

&lt;p&gt;If no one looks at it, I will commit it soon (after doing some more&lt;br/&gt;
experiments running the new and old test to confirm that the errors the&lt;br/&gt;
old uncovered are still uncovered in the new test).&lt;br/&gt;
I have also attached a fix to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2559&quot; title=&quot;recreating a datasource using javax.naming.Reference from a ClientDataSource40 fails&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2559&quot;&gt;&lt;del&gt;DERBY-2559&lt;/del&gt;&lt;/a&gt;, which caused the test to be&lt;br/&gt;
disabled for client data sources when running Java SE 6.&lt;/p&gt;


&lt;p&gt;Regarding solving the maxStatement issue, the method in&lt;br/&gt;
ClientBaseDataSource cannot be named getMaxStatements if we do not add a&lt;br/&gt;
setter as well. Having only the setter breaks the JavaBean / Reference&lt;br/&gt;
contract and the JVM code fails with an NPE when it tries to create a&lt;br/&gt;
new instance of the data source (using Reference). I solved this by&lt;br/&gt;
giving the method another name. It will always return 0 in CBCP, whereas&lt;br/&gt;
it will be overridden to return maxStatements in CPDS (and eventually&lt;br/&gt;
XADS). This method will be used to obtain a value for maxStatements in&lt;br/&gt;
the PooledConnection constructor to determine if statement caching shall&lt;br/&gt;
be enabled or not.&lt;/p&gt;

&lt;p&gt;There are also alternative solutions by changing the method signatures.&lt;br/&gt;
I will go for the former approach unless anyone clearly state their&lt;br/&gt;
misapproval of it, or later testing reveals problems with the approach.&lt;/p&gt;</comment>
                            <comment id="12564106" author="myrna" created="Wed, 30 Jan 2008 17:35:08 +0000"  >&lt;p&gt;Regarding rewriting the test - I think if the rewrite makes the test easier to understand, and still tests the same, it&apos;s fine. At a superficial glance your rewrite accomplishes those two things.&lt;/p&gt;</comment>
                            <comment id="12564349" author="kristwaa" created="Thu, 31 Jan 2008 09:38:59 +0000"  >&lt;p&gt;Thanks for looking at the test Myrna.&lt;br/&gt;
I also want to add that I did not see an easy way to extend the test to handle different attributes,  and that was the main reason why I started studying it and rewriting it.&lt;/p&gt;

&lt;p&gt;Further, I think that the test is a good one! It had already discovered the problem with JDBC 4.0 data sources (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2559&quot; title=&quot;recreating a datasource using javax.naming.Reference from a ClientDataSource40 fails&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2559&quot;&gt;&lt;del&gt;DERBY-2559&lt;/del&gt;&lt;/a&gt;), and it started failing when I introduced the maxStatements property (for various problems with the addition). It has helped me a lot already &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3369&quot; title=&quot;Extend jdbcapi.DataSourceReferenceTest to handle data sources with differing property sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3369&quot;&gt;&lt;del&gt;DERBY-3369&lt;/del&gt;&lt;/a&gt; to track extension of the test.&lt;/p&gt;</comment>
                            <comment id="12565302" author="kristwaa" created="Mon, 4 Feb 2008 10:47:00 +0000"  >&lt;p&gt;Thanks for the comments you gave on the 23rd of January, Knut Anders.&lt;/p&gt;

&lt;p&gt;Regarding the getMaxStatements method, I discovered that I can&apos;t just add the getter to ClientBaseDataSource, as it breaks the JavaBean specification and causes an NPE in the JVM when using Referenceable. I will incorporate your suggestion, but rename the method to something else (&apos;maxStatementsToPool&apos;?) and add get-/setMaxStatements to ClientConnectionPoolDataSource only.&lt;br/&gt;
For CBDS the method will return 0, for CCPDS it will return maxStatements.&lt;/p&gt;

&lt;p&gt;I&apos;ll fix the typos, and enable the tests.&lt;/p&gt;

&lt;p&gt;I logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3306&quot; title=&quot;jdbc4.StatementEventsTest cannot be run individually in a clean environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3306&quot;&gt;&lt;del&gt;DERBY-3306&lt;/del&gt;&lt;/a&gt; a while ago for the bug in the framework regarding data sources, but it is for a specific test and not for the general problem. I do plan to use another mechanism in my tests (a decorator, see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3326&quot; title=&quot;Introduce a caching logical connection and logical prepared statement in the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3326&quot;&gt;&lt;del&gt;DERBY-3326&lt;/del&gt;&lt;/a&gt;), and the problem will go away.&lt;/p&gt;

&lt;p&gt;Will change test to use the assert method.&lt;/p&gt;

&lt;p&gt;I hope to post a new patch within a few days.&lt;/p&gt;</comment>
                            <comment id="12565305" author="kristwaa" created="Mon, 4 Feb 2008 11:09:02 +0000"  >&lt;p&gt;Kristian wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3306&quot; title=&quot;jdbc4.StatementEventsTest cannot be run individually in a clean environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3306&quot;&gt;&lt;del&gt;DERBY-3306&lt;/del&gt;&lt;/a&gt; a while ago for the bug in the framework regarding data sources, but it is for a specific test and not for the general problem. I do plan to use another mechanism in my tests (a decorator, see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3326&quot; title=&quot;Introduce a caching logical connection and logical prepared statement in the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3326&quot;&gt;&lt;del&gt;DERBY-3326&lt;/del&gt;&lt;/a&gt;), and the problem will go away.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I just realized what I wrote above is a lie. I won&apos;t be able to control the data source / connection to the degree I want to by using the decorator, so I still have to use the old mechanism which has the bug.&lt;/p&gt;

&lt;p&gt;From a very quick look at the issue, I think the easiest solution would be to set the create database property on the data source by default. This because the data source object reference is given out to the requester, and the getConnection call is executed in/by the requesters code and the framework can&apos;t catch the database-not-found-exception and retry with create=true.&lt;/p&gt;

&lt;p&gt;The above solution seems better to me than for instance trying to obtain a connection before the data source reference is published (and create the database if it does not exist), as it gives the requester the possibility to force create=false if that is what the test requires.&lt;/p&gt;

&lt;p&gt;Have I overlooked any simpler / better solutions?&lt;/p&gt;</comment>
                            <comment id="12566638" author="kristwaa" created="Thu, 7 Feb 2008 15:30:42 +0000"  >&lt;p&gt;&apos;derby-3325-1b-maxStatements.diff&apos; is another attempt for introducing the maxStatements property in ClientConnectionPoolDataSource.&lt;/p&gt;

&lt;p&gt;A summary of the changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;loc/messages.xml&lt;br/&gt;
  Added one new message. Only added it for English (default locale).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;jdbc/ClientConnectionPoolDataSource.java&lt;br/&gt;
  Added methods set-/getMaxStatements and maxStatementsToPool.&lt;br/&gt;
  The latter is used internally by Derby to determine if caching is to be enabled. See ClientBaseDataSource.&lt;br/&gt;
  Also added a verification method used when de-serializing.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;jdbc/ClientBaseDataSource.java&lt;br/&gt;
  Added method maxStatementsToPool. Always returns 0 here, override in data source supporting statement pooling.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java&lt;br/&gt;
  Added some very basic testing of the CCPDS.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;shared/common/reference/MessageId.java&lt;br/&gt;
  Added constant for the new error message.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;functionTests/tests/jdbcapi/DataSourceReferenceTest.java&lt;br/&gt;
  Updated the test to account for the newly introduced maxStatements property in CCPDS.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;On a side note, I manually tested compatibility with regards to serialization. I have also attached a patch testing serialization to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1318&quot; title=&quot;Add an upgrade test to verify that DataSources can be serialized by the previous release and then correctly deserialized by the current release&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1318&quot;&gt;&lt;del&gt;DERBY-1318&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have run the regression tests without failures with Sun JVM 1.4 and 1.5.&lt;/p&gt;


&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12568257" author="kristwaa" created="Tue, 12 Feb 2008 17:59:43 +0000"  >&lt;p&gt;I&apos;m planning to commit the patch tomorrow.&lt;/p&gt;</comment>
                            <comment id="12568535" author="kristwaa" created="Wed, 13 Feb 2008 12:28:34 +0000"  >&lt;p&gt;Committed &apos;derby-3325-1b-maxStatements.diff&apos; to trunk with revision 627380.&lt;br/&gt;
The new test still has to be enabled.&lt;/p&gt;</comment>
                            <comment id="12568537" author="kristwaa" created="Wed, 13 Feb 2008 12:56:27 +0000"  >&lt;p&gt;&apos;derby-3325-2a-enable_test_and_remove_workaround.diff&apos; enables the test in jdbcapi._Suite forJDBC 3.0+ environments. In addition, it removes the workaround for bug &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3306&quot; title=&quot;jdbc4.StatementEventsTest cannot be run individually in a clean environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3306&quot;&gt;&lt;del&gt;DERBY-3306&lt;/del&gt;&lt;/a&gt;, cleans up some JavaDoc tags and removes two unused imports in _Suite.&lt;/p&gt;</comment>
                            <comment id="12569302" author="kristwaa" created="Fri, 15 Feb 2008 16:20:03 +0000"  >&lt;p&gt;Committed &apos;derby-3325-2a-enable_test_and_remove_workaround.diff&apos; to trunk with revision 628102.&lt;br/&gt;
This concludes the planned work, but I&apos;m keeping the issue open for a while in case something creeps up when working on the other issues under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3313&quot; title=&quot;JDBC client driver statement cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3313&quot;&gt;&lt;del&gt;DERBY-3313&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12571750" author="kristwaa" created="Sat, 23 Feb 2008 15:50:39 +0000"  >&lt;p&gt;Closing. Further work, if any, will be handled as separate JIRAs.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12386521">DERBY-3329</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12374386" name="DataSourceReferenceTest.diff" size="36732" author="kristwaa" created="Wed, 30 Jan 2008 15:46:18 +0000"/>
                            <attachment id="12374385" name="DataSourceReferenceTest.java" size="26500" author="kristwaa" created="Wed, 30 Jan 2008 15:46:18 +0000"/>
                            <attachment id="12373753" name="derby-3325-1a-maxStatements.diff" size="8818" author="kristwaa" created="Tue, 22 Jan 2008 13:23:45 +0000"/>
                            <attachment id="12373754" name="derby-3325-1a-maxStatements.stat" size="256" author="kristwaa" created="Tue, 22 Jan 2008 13:23:45 +0000"/>
                            <attachment id="12374977" name="derby-3325-1b-maxStatements.diff" size="14816" author="kristwaa" created="Thu, 7 Feb 2008 15:30:42 +0000"/>
                            <attachment id="12374978" name="derby-3325-1b-maxStatements.stat" size="485" author="kristwaa" created="Thu, 7 Feb 2008 15:30:42 +0000"/>
                            <attachment id="12375478" name="derby-3325-2a-enable_test_and_remove_workaround.diff" size="3031" author="kristwaa" created="Wed, 13 Feb 2008 12:56:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 23 Jan 2008 14:35:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0zbz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39542</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>