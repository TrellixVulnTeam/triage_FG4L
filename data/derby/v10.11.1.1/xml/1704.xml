<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:33:32 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1704/DERBY-1704.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1704] Allow more concurrency in the lock manager</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1704</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I have seen indications of severe monitor contention in SinglePool&lt;br/&gt;
(the current lock manager) when multiple threads access a Derby&lt;br/&gt;
database concurrently. When a thread wants to lock an object, it needs&lt;br/&gt;
to obtain the monitor for both SinglePool and LockSet (both of them&lt;br/&gt;
are global synchronization points). This leads to poor scalability.&lt;/p&gt;

&lt;p&gt;We should investigate how to allow more concurrency in the lock&lt;br/&gt;
manager, and either extend SinglePool or implement a new manager.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12348056">DERBY-1704</key>
            <summary>Allow more concurrency in the lock manager</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Wed, 16 Aug 2006 13:29:45 +0100</created>
                <updated>Mon, 29 Jun 2009 15:31:59 +0100</updated>
                            <resolved>Fri, 25 May 2007 07:58:54 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12428383" author="knutanders" created="Wed, 16 Aug 2006 13:32:55 +0100"  >&lt;p&gt;Just to see how the performance would be affected if the global&lt;br/&gt;
synchronization points were eliminated, I split the hash tables in&lt;br/&gt;
SinglePool and LockSet into 16 partitions (that is, 16 hash tables),&lt;br/&gt;
and used the hash key to decide which partition an object should be&lt;br/&gt;
placed in. There was no global synchronization, only synchronization&lt;br/&gt;
on the partition.&lt;/p&gt;

&lt;p&gt;I have attached graphs for some performance tests with single-record&lt;br/&gt;
selects (the entire database was in the page cache). The graphs show&lt;br/&gt;
the results on a machine with a single CPU (1cpu.png), one with two&lt;br/&gt;
CPUs (2cpu.png) and one with eight CPUs (8cpu.png). They indicate that&lt;br/&gt;
there is no significant effect (neither positive nor negative) on the&lt;br/&gt;
single-CPU machine, but with multiple CPUs (and multiple threads) the&lt;br/&gt;
performance increases when the global synchronization points have been&lt;br/&gt;
eliminated.&lt;/p&gt;

&lt;p&gt;(Don&apos;t pay too much attention to the actual TPS numbers, since the&lt;br/&gt;
three machines didn&apos;t have identical processors.)&lt;/p&gt;</comment>
                            <comment id="12428384" author="knutanders" created="Wed, 16 Aug 2006 13:36:10 +0100"  >&lt;p&gt;Attaching the patch used to partition the hash tables. It is only&lt;br/&gt;
attached for reference, not for inclusion. I have not updated or added&lt;br/&gt;
comments, and I have not tried very hard to make the names of&lt;br/&gt;
variables and methods meaningful. If someone wants to implement a new&lt;br/&gt;
lock manager based on the ideas in this patch, please feel free to do&lt;br/&gt;
so. FWIW, derbyall ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="12434366" author="andersmo" created="Wed, 13 Sep 2006 07:12:38 +0100"  >&lt;p&gt;While I don&apos;t know exactly what indications you&apos;ve seen &lt;br/&gt;
of the lock contention in the lock manager, we&apos;ve seen the&lt;br/&gt;
exact same thing in our investigations in our &quot;SMP &lt;br/&gt;
scalability in Derby&quot; project. (We == me and Per Ottar &lt;br/&gt;
Ribe Pahr).&lt;/p&gt;

&lt;p&gt;Anyway, we used DTrace with a JDK1.6 beta release to&lt;br/&gt;
measure monitor contention in a simple embedded derby&lt;br/&gt;
scenario consisting of 8 threads doing simple &quot;SELECT A&lt;br/&gt;
FROM FOO WHERE A=?; COMMIT;&quot; loops. FOO is a table&lt;br/&gt;
consisting of about 100 000 rows of A, an integer and the &lt;br/&gt;
primary key, and a CHAR(96) FOR BIT DATA filler.&lt;/p&gt;

&lt;p&gt;The dtrace script measured three things: The classes of&lt;br/&gt;
objects whose monitors were most contented - in terms&lt;br/&gt;
of number of contentions and the wait time threads spent&lt;br/&gt;
waiting for their monitors. In addition, it took a snapshot of&lt;br/&gt;
the call stack at the point of contention to figure out which&lt;br/&gt;
method the contention occured in.&lt;/p&gt;

&lt;p&gt;Here&apos;s our measurements, we hope they&apos;re useful, if only&lt;br/&gt;
to confirm that you&apos;re onto something. =)&lt;/p&gt;

&lt;p&gt;PS: You want a fixed-point font to read this. Point your web &lt;br/&gt;
browser at &lt;a href=&quot;http://folk.ntnu.no/andersmo/monitor_contention.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://folk.ntnu.no/andersmo/monitor_contention.txt&lt;/a&gt; &lt;br/&gt;
to get a plain old text file. =)&lt;/p&gt;

&lt;p&gt;TOP BLOCKING OBJECTS:&lt;/p&gt;

&lt;p&gt;Monitor class                                        Contention count&lt;br/&gt;
  org/apache/derby/impl/services/locks/ActiveLock                   2&lt;br/&gt;
  java/lang/ref/ReferenceQueue$Lock                                 2&lt;br/&gt;
  org/apache/derby/impl/services/cache/CachedItem                   2&lt;br/&gt;
  org/apache/derby/impl/services/reflect/ReflectLoaderJava2         3&lt;br/&gt;
  java/io/PrintStream                                               5&lt;br/&gt;
  org/apache/derby/impl/store/raw/data/StoredPage                  10&lt;br/&gt;
  sun/misc/Launcher$AppClassLoader                                 10&lt;br/&gt;
  org/apache/derby/impl/sql/GenericPreparedStatement               10&lt;br/&gt;
  org/apache/derby/impl/store/raw/xact/XactFactory                 11&lt;br/&gt;
  org/apache/derby/impl/store/raw/xact/TransactionTable            29&lt;br/&gt;
  java/util/Hashtable                                              34&lt;br/&gt;
  org/apache/derby/impl/store/raw/data/AllocationCache             36&lt;br/&gt;
  org/apache/derby/impl/services/cache/Clock                      257&lt;br/&gt;
  org/apache/derby/impl/services/locks/SinglePool                 577&lt;br/&gt;
  org/apache/derby/impl/services/locks/LockSet                   7851&lt;/p&gt;

&lt;p&gt;TOP BLOCKING OBJECTS BY WAIT TIME:&lt;/p&gt;

&lt;p&gt;Monitor class                                          Wait time (ms)&lt;br/&gt;
  java/lang/ref/ReferenceQueue$Lock                                 2&lt;br/&gt;
  org/apache/derby/impl/services/locks/ActiveLock                   2&lt;br/&gt;
  org/apache/derby/impl/services/cache/CachedItem                   6&lt;br/&gt;
  org/apache/derby/impl/store/raw/data/StoredPage                  11&lt;br/&gt;
  org/apache/derby/impl/services/reflect/ReflectLoaderJava2        13&lt;br/&gt;
  org/apache/derby/impl/store/raw/data/AllocationCache            110&lt;br/&gt;
  org/apache/derby/impl/sql/GenericPreparedStatement              120&lt;br/&gt;
  org/apache/derby/impl/store/raw/xact/TransactionTable           129&lt;br/&gt;
  java/util/Hashtable                                             198&lt;br/&gt;
  org/apache/derby/impl/store/raw/xact/XactFactory                350&lt;br/&gt;
  sun/misc/Launcher$AppClassLoader                                660&lt;br/&gt;
  java/io/PrintStream                                             709&lt;br/&gt;
  org/apache/derby/impl/services/cache/Clock                     1380&lt;br/&gt;
  org/apache/derby/impl/services/locks/SinglePool                3137&lt;br/&gt;
  org/apache/derby/impl/services/locks/LockSet                  16194&lt;/p&gt;

&lt;p&gt;TOP BLOCKING METHOD SIGNATURES:&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/LockSet.lockObject(Ljava/lang/Object;Lorg/apache/derby/iapi/services/locks/Lockable;Ljava/l&lt;br/&gt;
ang/Object;ILorg/apache/derby/iapi/services/locks/Latch;)Lorg/apache/derby/impl/services/locks/Lock;*&lt;br/&gt;
               55&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/cache/Clock.find(Ljava/lang/Object;)Lorg/apache/derby/iapi/services/cache/Cacheable;*&lt;br/&gt;
               56&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/LockSet.lockObject(Ljava/lang/Object;Lorg/apache/derby/iapi/services/locks/Lockable;Ljava/l&lt;br/&gt;
ang/Object;ILorg/apache/derby/iapi/services/locks/Latch;)Lorg/apache/derby/impl/services/locks/Lock;*&lt;br/&gt;
               56&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/cache/Clock.release(Lorg/apache/derby/iapi/services/cache/Cacheable;)V*&lt;br/&gt;
               65&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/SinglePool.lockAnObject(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/derby/iapi/services&lt;br/&gt;
/locks/Lockable;Ljava/lang/Object;ILorg/apache/derby/iapi/services/locks/Latch;)Lorg/apache/derby/impl/services/locks/Lock;*&lt;br/&gt;
               79&lt;/p&gt;

&lt;p&gt;  java/util/Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;*&lt;br/&gt;
               84&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/SinglePool.unlock(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/derby/iapi/services/locks&lt;br/&gt;
/Lockable;Ljava/lang/Object;)I&lt;br/&gt;
               85&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/SinglePool.lockObject(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/derby/iapi/services/l&lt;br/&gt;
ocks/Lockable;Ljava/lang/Object;I)Z&lt;br/&gt;
              103&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/LockSpace.unlockGroup(Lorg/apache/derby/impl/services/locks/LockSet;Ljava/lang/Object;)V&lt;br/&gt;
              110&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/LockSet.unlock(Lorg/apache/derby/iapi/services/locks/Latch;I)V*&lt;br/&gt;
              153&lt;/p&gt;

&lt;p&gt;  java/util/Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;*&lt;br/&gt;
              221&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/SinglePool.lockAnObject(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/derby/iapi/services&lt;br/&gt;
/locks/Lockable;Ljava/lang/Object;ILorg/apache/derby/iapi/services/locks/Latch;)Lorg/apache/derby/impl/services/locks/Lock;&lt;br/&gt;
              260&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/SinglePool.unlatch(Lorg/apache/derby/iapi/services/locks/Latch;)V&lt;br/&gt;
              264&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/SinglePool.unlock(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/derby/iapi/services/locks&lt;br/&gt;
/Lockable;Ljava/lang/Object;)I&lt;br/&gt;
              330&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/SinglePool.latchObject(Ljava/lang/Object;Lorg/apache/derby/iapi/services/locks/Lockable;Lja&lt;br/&gt;
va/lang/Object;I)Z&lt;br/&gt;
              459&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/LockSet.lockObject(Ljava/lang/Object;Lorg/apache/derby/iapi/services/locks/Lockable;Ljava/l&lt;br/&gt;
ang/Object;ILorg/apache/derby/iapi/services/locks/Latch;)Lorg/apache/derby/impl/services/locks/Lock;*&lt;br/&gt;
              559&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/LockSet.unlock(Lorg/apache/derby/iapi/services/locks/Latch;I)V*&lt;br/&gt;
             1714&lt;/p&gt;

&lt;p&gt;  org/apache/derby/impl/services/locks/LockSet.lockObject(Ljava/lang/Object;Lorg/apache/derby/iapi/services/locks/Lockable;Ljava/l&lt;br/&gt;
ang/Object;ILorg/apache/derby/iapi/services/locks/Latch;)Lorg/apache/derby/impl/services/locks/Lock;*&lt;br/&gt;
             2840&lt;/p&gt;</comment>
                            <comment id="12434378" author="andersmo" created="Wed, 13 Sep 2006 08:54:10 +0100"  >&lt;p&gt;Oh, forgot to mention that the tests were run on a SMP machine - an old Sun Enterprise 450 with 4x400MHz CPUs (and a bit error on bit 12 on memory module 1701 - yay ECC. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. The Derby release used was 10.1.3.1 - (417277), the official release from the web page. If time permits we&apos;ll see about testing Knut Anders&apos; patch with DTrace as well.&lt;/p&gt;</comment>
                            <comment id="12449309" author="knutanders" created="Mon, 13 Nov 2006 10:48:46 +0000"  >&lt;p&gt;I am planning to partition the hash table in LockSet along the lines&lt;br/&gt;
of the split-hashtables.diff patch.&lt;/p&gt;

&lt;p&gt;For the other hash table on which there is monitor contention (the one&lt;br/&gt;
in SinglePool), I think it is better to remove the hash table&lt;br/&gt;
entirely. That hash table maps a compatibility space to a&lt;br/&gt;
LockSpace. Since there is a one-to-one mapping between compatibility&lt;br/&gt;
spaces and LockSpaces, we could change it so that each compatibility&lt;br/&gt;
space is a LockSpace object and remove the need for the hash&lt;br/&gt;
table. This would (a) remove the contention problem, and (b) save some&lt;br/&gt;
CPU cycles because we don&apos;t have to go through the hash table.&lt;/p&gt;

&lt;p&gt;If this sounds OK, I will create two sub-tasks: one for partitioning&lt;br/&gt;
the table in LockSet, and one for removing the table in SinglePool.&lt;/p&gt;</comment>
                            <comment id="12449382" author="djd" created="Mon, 13 Nov 2006 14:45:01 +0000"  >&lt;p&gt;I haven&apos;t had time to look at the patch  but the original intention was for there to be a multi-thread lock manager&lt;br/&gt;
using multiple LockSets, e.g. a MultiPool implementation instead of a SinglePool implementation. Just FYI.&lt;/p&gt;

&lt;p&gt;With the multiple synchronization how is deadlock detection to be handled?&lt;/p&gt;</comment>
                            <comment id="12449899" author="knutanders" created="Wed, 15 Nov 2006 03:19:38 +0000"  >
&lt;p&gt;Thanks. Do you think it would be better to leave SinglePool as it is&lt;br/&gt;
and create a new (perhaps optional) MultiPool implementation instead?&lt;/p&gt;


&lt;p&gt;I haven&apos;t looked very closely at the deadlock detection code yet, but&lt;br/&gt;
I hope it won&apos;t be necessary with too many changes. One possibility is&lt;br/&gt;
to obtain the synchronization locks on all partitions before the&lt;br/&gt;
waiters graph is built. Of course, some precautions are needed in&lt;br/&gt;
order to avoid java-level deadlocks when are multiple synchronization&lt;br/&gt;
locks possibly obtained in different order.&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;br/&gt;
Knut Anders&lt;/p&gt;</comment>
                            <comment id="12466012" author="knutanders" created="Fri, 19 Jan 2007 10:49:48 +0000"  >&lt;p&gt;In the patch I used when running the tests, monitor contention on LockSet was reduced by having multiple hash tables in each LockSet. I think it might be cleaner to have multiple LockSets, where each LockSet contains one hash table. Will look more into it and report back. In the meantime, I plan to submit some cleanup patches that hopefully will make the final patch smaller and easier to understand regardless of which approach is chosen.&lt;/p&gt;</comment>
                            <comment id="12466055" author="knutanders" created="Fri, 19 Jan 2007 14:08:51 +0000"  >&lt;p&gt;Attached cleanup1.diff.&lt;/p&gt;

&lt;p&gt;I observed that LockSet extends Hashtable, but all calls to Hashtable&apos;s methods are already synchronized on the LockSet, so it could just as well use a HashMap. The attached patch makes LockSet contain a HashMap instead of extending Hashtable. I ran some tests with the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1961&quot; title=&quot;Investigate resource usage for different types of load on an in-memory database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1961&quot;&gt;&lt;del&gt;DERBY-1961&lt;/del&gt;&lt;/a&gt; test client (single-record select on a dual-cpu machine, Solaris 10, Java SE 6) and saw ~2% throughput improvement for a single client and from 15% to 25% improvement for multiple (2-64) clients.&lt;/p&gt;

&lt;p&gt;Derbyall and the JUnit tests passed on Solaris 10/Java SE 6. Reviews would be appreciated.&lt;/p&gt;</comment>
                            <comment id="12466452" author="dyret" created="Mon, 22 Jan 2007 12:40:02 +0000"  >&lt;p&gt;cleanup1.diff looks good, but I have a couple of questions:&lt;/p&gt;

&lt;p&gt;LockSet has was declared &quot;public final&quot;, but is now just &quot;final&quot;. Is it intentional?&lt;/p&gt;

&lt;p&gt;In general, I have a hard time understanding the multithreading-related comments used in Derby (not specific to this patch). For example, the comment for LockSet says:&lt;br/&gt;
&quot;MT - Mutable - Container Object : Thread Safe&quot;. I really don&apos;t understand what that means. Is it still true when LockSet no longer inherits from a synchronized container?&lt;/p&gt;

&lt;p&gt;I think what is meant here is that only those methods declared &quot;synchronized&quot; are MT-safe. A client wanting to use any of the other methods must synchronize on the LockSet object. Correct?&lt;/p&gt;

&lt;p&gt;The method addWaiters(Dictionary) is not synchronized, and the comment says &quot;MT - must be synchronized on this LockSet object&quot;. But in Deadock.getWaiters(LockSet) it is called without synchronization. Presumably this is ok since the old code iterated using an enumeration over an unlocked LockSet, (unless the lock is higher up the stack, and cannot be seen in the diff). But a comment would have been nice &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                            <comment id="12466462" author="knutanders" created="Mon, 22 Jan 2007 13:32:35 +0000"  >&lt;p&gt;Thank you for looking at the patch! I&apos;ll try to answer your questions below.&lt;/p&gt;

&lt;p&gt;1) The change of LockSet from &quot;public final&quot; to &quot;final&quot; was intentional. LockSet is an internal implementation class that is not supposed to be accessed from other packages.&lt;/p&gt;

&lt;p&gt;2) I&apos;m not sure what the exact meaning of the MT comment is. I would assume that it meant something like &quot;calls to public (or non-private) methods of this class can be regarded as atomic operations&quot;. I&apos;m not sure that this statement is completely true before the patch, but it is definitely not true after the patch, so the comment should be updated.&lt;/p&gt;

&lt;p&gt;3) getWaiters() is a private helper method for Deadlock.look() which is only invoked from inside a synchronized block in LockSet, so getWaiters() is in fact always synchronized on the LockSet. This would probably have been clearer if Deadlock.look() had one of those infamous MT comments. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;ll add one.&lt;/p&gt;</comment>
                            <comment id="12466466" author="knutanders" created="Mon, 22 Jan 2007 14:35:17 +0000"  >&lt;p&gt;I have attached v2 of cleanup1. I went through LockSet&apos;s methods to determine which of them were not thread safe without extra synchronization and updated their javadoc comments. Changes from the first version:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;MT comment for LockSet class changed to &quot;MT - Mutable - Container Object : All non-private methods of this class are thread safe unless otherwise stated by their javadoc comments.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added javadoc comments to LockSet.oneMoreWaiter() and LockSet.oneLessWaiter() with information about required synchronization.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Removed what seems to be a false comment in LockSet.anyoneBlocked() (&quot;no synchronization needed because reads of ints are atomic&quot;). It is true that reads of ints are atomic, but synchronization is still needed to avoid that an old cached value is read instead of the real value.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Declared LockSet.anyoneBlocked() as synchronized to avoid the problem mentioned above. Currently, I don&apos;t think it is a problem since all calls to anyoneBlocked() come (indirectly) from the unit tests T_AccessFactory and T_LockFactory, but it would be good to fix it anyway.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added javadoc and MT comment to Deadlock.look().&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have started a new run of derbyall.&lt;/p&gt;</comment>
                            <comment id="12466719" author="dyret" created="Tue, 23 Jan 2007 11:42:39 +0000"  >&lt;p&gt;New version looks good. +1&lt;/p&gt;</comment>
                            <comment id="12466725" author="knutanders" created="Tue, 23 Jan 2007 12:11:14 +0000"  >&lt;p&gt;Thanks for the review! Committed cleanup1.v2 with revision 498999.&lt;/p&gt;</comment>
                            <comment id="12466949" author="knutanders" created="Wed, 24 Jan 2007 08:53:03 +0000"  >&lt;p&gt;Committed cleanup2.diff with revision 499316. The patch removes an unused variable, an unused import and an unused method.&lt;/p&gt;</comment>
                            <comment id="12472558" author="knutanders" created="Tue, 13 Feb 2007 08:03:47 +0000"  >&lt;p&gt;LockSpace extends Hashtable, but no other classes use its Hashtable methods (except one call to isEmpty()), so the Hashtable could just as well be a private member. Since all the non-private methods of LockSpace are synchronized, the Hashtable could be replaced with an unsynchronized HashMap. cleanup3.diff makes these changes. Derbyall and JUnit passed.&lt;/p&gt;</comment>
                            <comment id="12472585" author="knutanders" created="Tue, 13 Feb 2007 09:11:46 +0000"  >&lt;p&gt;The results shown in the attached graphs are not valid for trunk after the commit of the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2107&quot; title=&quot;Move page latching out of the lock manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2107&quot;&gt;&lt;del&gt;DERBY-2107&lt;/del&gt;&lt;/a&gt; patch. The single-record select load that was used is more latch-intensive than lock-intensive, and when the latches no longer use the lock manager, the effect of splitting the hash tables in the lock manager is small, even with multiple CPUs. There still is a positive effect for more lock-intensive loads though (for instance scans).&lt;/p&gt;

&lt;p&gt;Since there are two global synchronization points in the lock manager, I&apos;ll file subtasks so they can be discussed separately.&lt;/p&gt;</comment>
                            <comment id="12472717" author="andersmo" created="Tue, 13 Feb 2007 15:42:22 +0000"  >&lt;p&gt;In slightly related work, we&apos;ve recently done a little testing with a single-record select load on a trunk patched with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2107&quot; title=&quot;Move page latching out of the lock manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2107&quot;&gt;&lt;del&gt;DERBY-2107&lt;/del&gt;&lt;/a&gt; as well as a port of the patches to split the hash tables in the lock subsystem that you included here. &lt;/p&gt;

&lt;p&gt;With a separate table and index for each thread (to remove latch contention and lock waits from the equation) we got an overall throughput increase of about 16% compared to a &quot;single table for all threads&quot; run (given a cache large enough to maintain the database in-memory), and found that org.apache.derby.impl.services.cache.Clock.find()/release() caused about 5 times more contention than the synchronization in LockSet.lockObject() and LockSet.unlock(). That might be an indicator of where to apply the next push - and validates the &quot;split hashtable&quot; approach for this workload. =)&lt;/p&gt;

&lt;p&gt;For our part, we&apos;re proceeding to hack at latching. =)&lt;/p&gt;</comment>
                            <comment id="12473013" author="knutanders" created="Wed, 14 Feb 2007 07:41:16 +0000"  >&lt;p&gt;Committed cleanup3.diff with revision 507428.&lt;/p&gt;</comment>
                            <comment id="12480007" author="knutanders" created="Mon, 12 Mar 2007 08:32:26 +0000"  >&lt;p&gt;Attaching a tiny cleanup patch (cleanup4). LockControl.popFrontWaiter() is identical to removeWaiter(), only that it calls remove() with the constant 0 instead of using a parameter. The patch makes popFrontWaiter() forward calls to removeWaiter(). The tests passed.&lt;/p&gt;</comment>
                            <comment id="12480311" author="knutanders" created="Tue, 13 Mar 2007 08:34:14 +0000"  >&lt;p&gt;Committed cleanup4.diff with 517588.&lt;/p&gt;</comment>
                            <comment id="12480391" author="knutanders" created="Tue, 13 Mar 2007 13:38:24 +0000"  >&lt;p&gt;cleanup5.diff contains these changes:&lt;/p&gt;

&lt;p&gt;ActiveLock.java: removed some unused imports&lt;br/&gt;
Lock.java: made the class package private&lt;br/&gt;
LockControl.java:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;made the class final and package private&lt;/li&gt;
	&lt;li&gt;addLock() had an if which tested (!grantLock &amp;amp;&amp;amp; ...) at a place where grantLock always would be false. Removed the !grantLock part of the condition.&lt;/li&gt;
	&lt;li&gt;addWaiter(), removeWaiter() and popFrontWaiter() took a List argument called waiting. Since the argument always was identical to a private member with the same name, I removed &quot;List waiting&quot; from the parameter list.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Derbyall and the JUnit tests ran successfully.&lt;/p&gt;</comment>
                            <comment id="12480435" author="knutanders" created="Tue, 13 Mar 2007 15:29:16 +0000"  >&lt;p&gt;Attaching a new small cleanup patch (cleanup6) for LockSet.java. LockSet has a private Hashtable (lockTraces) into which it puts a Throwable each time a thread must wait for a lock (only if deadlock tracing is enabled). The values in the hash table are however never used, so the hash table and the code that updates it could be removed. Derbyall and the JUnit tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="12480693" author="knutanders" created="Wed, 14 Mar 2007 08:51:53 +0000"  >&lt;p&gt;Committed cleanup5 with revision 518052.&lt;br/&gt;
Committed cleanup6 with revision 518073.&lt;/p&gt;</comment>
                            <comment id="12498959" author="knutanders" created="Fri, 25 May 2007 07:58:54 +0100"  >&lt;p&gt;All sub-tasks completed. Closing the issue.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12338951" name="1cpu.png" size="3243" author="knutanders" created="Wed, 16 Aug 2006 13:32:55 +0100"/>
                            <attachment id="12338952" name="2cpu.png" size="3703" author="knutanders" created="Wed, 16 Aug 2006 13:32:55 +0100"/>
                            <attachment id="12338953" name="8cpu.png" size="3254" author="knutanders" created="Wed, 16 Aug 2006 13:32:55 +0100"/>
                            <attachment id="12349257" name="cleanup1.diff" size="7394" author="knutanders" created="Fri, 19 Jan 2007 13:35:28 +0000"/>
                            <attachment id="12349258" name="cleanup1.stat" size="285" author="knutanders" created="Fri, 19 Jan 2007 13:35:28 +0000"/>
                            <attachment id="12349376" name="cleanup1.v2.diff" size="8683" author="knutanders" created="Mon, 22 Jan 2007 14:02:23 +0000"/>
                            <attachment id="12349498" name="cleanup2.diff" size="1799" author="knutanders" created="Wed, 24 Jan 2007 08:53:03 +0000"/>
                            <attachment id="12351011" name="cleanup3.diff" size="6352" author="knutanders" created="Tue, 13 Feb 2007 08:03:44 +0000"/>
                            <attachment id="12351012" name="cleanup3.stat" size="209" author="knutanders" created="Tue, 13 Feb 2007 08:03:47 +0000"/>
                            <attachment id="12353090" name="cleanup4.diff" size="622" author="knutanders" created="Mon, 12 Mar 2007 08:32:26 +0000"/>
                            <attachment id="12353192" name="cleanup5.diff" size="4982" author="knutanders" created="Tue, 13 Mar 2007 13:38:24 +0000"/>
                            <attachment id="12353193" name="cleanup5.stat" size="211" author="knutanders" created="Tue, 13 Mar 2007 13:38:24 +0000"/>
                            <attachment id="12353201" name="cleanup6.diff" size="2201" author="knutanders" created="Tue, 13 Mar 2007 15:29:16 +0000"/>
                            <attachment id="12338954" name="split-hashtables.diff" size="12413" author="knutanders" created="Wed, 16 Aug 2006 13:36:10 +0100"/>
                            <attachment id="12338955" name="split-hashtables.stat" size="356" author="knutanders" created="Wed, 16 Aug 2006 13:36:10 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12362667">DERBY-2327</subtask>
                            <subtask id="12362668">DERBY-2328</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 13 Sep 2006 06:12:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30113</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wjb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39089</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>