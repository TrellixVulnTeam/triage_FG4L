<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:51:09 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4275/DERBY-4275.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4275] Query executions fail when compressing a table using SYSCS_UTIL.SYSCS_COMPRESS_TABLE</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4275</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Query executions (SELECT and/or UPDATE) fail with serious exceptions while the table is being compressed using SYSCS_UTIL.SYSCS_COMPRESS_ TABLE. The compression eventually finishes normally, but the queries keep failing with the same error until the database is rebooted. More information about this can be found on the Derby mailing list at &lt;a href=&quot;http://www.nabble.com/Issue-with-SYSCS_UTIL.SYSCS_COMPRESS_-TABLE-td23892893.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Issue-with-SYSCS_UTIL.SYSCS_COMPRESS_-TABLE-td23892893.html&lt;/a&gt;. The exception stacktrace is below: &lt;/p&gt;

&lt;p&gt;Caused by: java.sql.SQLException: The conglomerate (71,409) requested does not exist.&lt;br/&gt;
            at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(Unknown Source)&lt;br/&gt;
            at org.apache.tomcat.dbcp.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:93)&lt;br/&gt;
            ... 25 more&lt;br/&gt;
        Caused by: ERROR XSAI2: The conglomerate (71,409) requested does not exist.&lt;br/&gt;
            at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.store.access.btree.index.B2IFactory.readConglomerate(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.store.access.RAMTransaction.createBackingStoreHashtableFromScan(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.HashScanResultSet.openCore(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.UnionResultSet.getNextRowCore(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.SortResultSet.getRowFromResultSet(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.SortResultSet.getNextRowFromRS(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)&lt;br/&gt;
            at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) &lt;/p&gt;</description>
                <environment></environment>
        <key id="12428006">DERBY-4275</key>
            <summary>Query executions fail when compressing a table using SYSCS_UTIL.SYSCS_COMPRESS_TABLE</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="psai">Sai Pullabhotla</reporter>
                        <labels>
                            <label>derby_triage10_5_2</label>
                    </labels>
                <created>Tue, 16 Jun 2009 14:49:51 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:44 +0100</updated>
                            <resolved>Fri, 30 Mar 2012 20:15:00 +0100</resolved>
                                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.5.3.0</version>
                                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.4</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12720137" author="psai" created="Tue, 16 Jun 2009 14:55:05 +0100"  >&lt;p&gt;The attached files can be used to reproduce this reported bug. &lt;/p&gt;

&lt;p&gt;CompressDBTest1.java - tries to read a table while it is being compressed. The select statement errors out with the following error:&lt;br/&gt;
java.sql.SQLException: Container 2,192 not found.&lt;br/&gt;
Subsequent SELECTs with a brand new connection also fail with a little bit different error:&lt;br/&gt;
The conglomerate (2,192) requested does not exist.&lt;/p&gt;

&lt;p&gt;CompressDBTest2.java - tries to insert data into a table while it is being compressed. The insert errors out eventually with the following error:&lt;br/&gt;
A lock could not be obtained due to a deadlock, cycle of locks and waiters is:&lt;br/&gt;
Lock : TABLE, TEST, Tablelock&lt;br/&gt;
  Waiting XID : &lt;/p&gt;
{236439, IX}
&lt;p&gt; , APP, insert into test values(?, ?, ?, ?, ?)&lt;br/&gt;
  Granted XID : &lt;/p&gt;
{234342, X}&lt;br/&gt;
Lock : ROW, SYSCONGLOMERATES, (5,14)&lt;br/&gt;
  Waiting XID : {234342, X}
&lt;p&gt; , APP, alter table &quot;APP&quot;.&quot;TEST&quot; compress sequential&lt;br/&gt;
  Granted XID : &lt;/p&gt;
{234342, S}
&lt;p&gt; , &lt;/p&gt;
{236439, S}
&lt;p&gt;. The selected victim is XID : 236439.&lt;/p&gt;

&lt;p&gt;What the test classes do:&lt;/p&gt;

&lt;p&gt;Both classes first create a database named test under the current working directory if a directory named test does not already exist. Then a table named test is created and populated with 100,000 random records. Two threads are started then with the first one repeatedly compressing the test table and the second one repeatedly executing a DML statement. If the DML statement errors out, the compression thread will be stopped. Finally the database is shutdown. The standard output of the program goes to stdout.log and standard error goes to stderr.log in the current working directory.&lt;/p&gt;</comment>
                            <comment id="12727024" author="dagw" created="Fri, 3 Jul 2009 17:12:42 +0100"  >&lt;p&gt;Thanks for the repro, Sai! I was able to reproduce with Derby 10.4.1.3.&lt;/p&gt;</comment>
                            <comment id="12727026" author="dagw" created="Fri, 3 Jul 2009 17:13:49 +0100"  >&lt;p&gt;Triaged for 10.5.2, checking  &quot;repro attached&quot;.&lt;/p&gt;</comment>
                            <comment id="12844012" author="knutanders" created="Thu, 11 Mar 2010 10:54:13 +0000"  >&lt;p&gt;Some of the discussion on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-637&quot; title=&quot;Conglomerate does not exist after inserting large data  volume&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-637&quot;&gt;&lt;del&gt;DERBY-637&lt;/del&gt;&lt;/a&gt; may be relevant for this issue as well.&lt;/p&gt;</comment>
                            <comment id="12844036" author="brettw" created="Thu, 11 Mar 2010 11:43:35 +0000"  >&lt;p&gt;Throwing my vote in for this bug.  We were planning on enabling online compression, statistics regeneration, and backup in an upcoming release of our software.&lt;/p&gt;</comment>
                            <comment id="13042119" author="knutanders" created="Wed, 1 Jun 2011 12:39:36 +0100"  >&lt;p&gt;The problem shown by CompressDBTest2.java looks like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3683&quot; title=&quot;SYSCS_COMPRESS_TABLE gets deadlock while executing concurrently with other user threads&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3683&quot;&gt;DERBY-3683&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &quot;conglomerate does not exist&quot; errors in CompressDBTest1.java seem to happen because AlterTableConstantAction.compressTable() invalidates the prepared statements before it compresses the table. Executing statements may then try to recompile before the table has been compressed, and they continue using the old conglomerate since they&apos;re not invalidated again.&lt;/p&gt;

&lt;p&gt;I tried to delay the invalidation until the new compressed conglomerates had been created and the system tables were updated (see attached patch), and that made the CompressDBTest1 repro complete with no failures.&lt;/p&gt;

&lt;p&gt;There is a comment saying that the early invalidation was intentional to work around a bug. Looking at an earlier version of the comment, it referred to a bug 3653 where some statements didn&apos;t recompile if the invalidation happened later. I don&apos;t know what kind of statements had that problem, though. I&apos;ll run the regression tests to see if they show anything. (Truncate table has a similar comment and would probably need a similar fix.)&lt;/p&gt;

&lt;p&gt;There&apos;s always the possibility to invalidate statements both before and after compressing the table, but it really should be enough to do it once.&lt;/p&gt;</comment>
                            <comment id="13046502" author="knutanders" created="Thu, 9 Jun 2011 13:28:52 +0100"  >&lt;p&gt;Running the regression test suites didn&apos;t reveal any problems with the patch. I&apos;ll see if I can construct a case that runs into problem mentioned in the comment:&lt;/p&gt;

&lt;p&gt;		// invalidate any prepared statements that&lt;br/&gt;
		// depended on this table (including this one)&lt;br/&gt;
		// bug 3653 has threads that start up and block on our lock, but do&lt;br/&gt;
		// not see they have to recompile their plan.    We now invalidate earlier&lt;br/&gt;
		// however they still might recompile using the old conglomerate id before we&lt;br/&gt;
		// commit our DD changes.&lt;/p&gt;

&lt;p&gt;The scenario described in the last sentence of that comment, is exactly what&apos;s happening when we see the bug.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure why other threads would fail to see that they need to recompile if the invalidation happens later. They may fail because the conglomerate doesn&apos;t exist anymore, but the result set classes have code that checks if the statement is still valid if an error happens, and recompiles and reexecutes if it&apos;s not valid, so that case is supposed to be handled. But maybe that code was added after bug 3653 had been fixed, I don&apos;t know...&lt;/p&gt;</comment>
                            <comment id="13054327" author="knutanders" created="Fri, 24 Jun 2011 10:37:31 +0100"  >&lt;p&gt;During SYSCS_COMPRESS_TABLE we invalidate dependent statements three times, and all of them happen before any changes have been made to the data dictionary. With the patch, this is changed to two invalidations before the DD changes and one after the DD is updated.&lt;/p&gt;

&lt;p&gt;The first two invalidations are done by the general alter table machinery. The compress table implementation was moved into alter table in 10.5 (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1062&quot; title=&quot;Change the internal implemetation of SYSCS_INPLACE_COMPRESS_TABLE to share existing alter table&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1062&quot;&gt;&lt;del&gt;DERBY-1062&lt;/del&gt;&lt;/a&gt;). It may be that the earlier invalidation was needed before that change, but now that we have the alter table machinery doing early invalidation in any case, the bug mentioned in the comments (bug 3653) is probably handled even if we move the compress-specific invalidation after the data dictionary changes.&lt;/p&gt;</comment>
                            <comment id="13057730" author="knutanders" created="Thu, 30 Jun 2011 10:57:56 +0100"  >&lt;p&gt;Attached is a patch which adds JUnit test cases that reproduce this bug with compress table and truncate table. The patch also moves the third invalidation on compress/truncate to a point where the new conglomerate information has been written to the system tables, so that the statements get recompiled using the new conglomerates.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13059351" author="knutanders" created="Mon, 4 Jul 2011 08:54:17 +0100"  >&lt;p&gt;Committed revision 1142583.&lt;/p&gt;

&lt;p&gt;I also plan to backport the fix to the 10.8 branch.&lt;/p&gt;</comment>
                            <comment id="13060492" author="knutanders" created="Wed, 6 Jul 2011 12:42:03 +0100"  >&lt;p&gt;Merged to 10.8. Committed revision 1143356.&lt;/p&gt;</comment>
                            <comment id="13065256" author="kristwaa" created="Thu, 14 Jul 2011 14:37:00 +0100"  >&lt;p&gt;I&apos;m still seeing this on a Linux machine:&lt;br/&gt;
Fedora 15&lt;br/&gt;
Linux work2 2.6.38.8-32.fc15.x86_64 #1 SMP Mon Jun 13 19:49:05 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux&lt;br/&gt;
Intel(R) Core(TM)2 Duo CPU     E8500  @ 3.16GHz&lt;br/&gt;
java version &quot;1.6.0_22&quot;&lt;br/&gt;
OpenJDK Runtime Environment (IcedTea6 1.10.2) (fedora-58.1.10.2.fc15-x86_64)&lt;br/&gt;
OpenJDK 64-Bit Server VM (build 20.0-b11, mixed mode)&lt;/p&gt;

&lt;p&gt;To reproduce I ran two instances of the test in a tight loop in the shell. I&apos;ve also seen it reproduce when I&apos;ve used the parallel test runner.&lt;/p&gt;

&lt;p&gt;Last minute update, it also reproduces on Solaris 11:&lt;br/&gt;
java version &quot;1.6.0_24&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_24-b07)&lt;br/&gt;
Java HotSpot(TM) Server VM (build 19.1-b02, mixed mode)&lt;/p&gt;


&lt;p&gt;Time: 5.035&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
1) testConcurrentInvalidation(org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest)junit.framework.AssertionFailedError: Helper thread failed&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:801)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest.testConcurrentInvalidation(CompressTableTest.java:121)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: java.sql.SQLException: The conglomerate (2,720) requested does not exist.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:400)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(EmbedPreparedStatement.java:284)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest$1.run(CompressTableTest.java:92)&lt;br/&gt;
Caused by: java.sql.SQLException: The conglomerate (2,720) requested does not exist.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
	... 9 more&lt;br/&gt;
Caused by: ERROR XSAI2: The conglomerate (2,720) requested does not exist.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.readConglomerate(HeapConglomerateFactory.java:254)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(RAMAccessManager.java:482)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(RAMTransaction.java:394)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.getDynamicCompiledConglomInfo(RAMTransaction.java:692)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.TableScanResultSet.openCore(TableScanResultSet.java:245)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.openCore(BulkTableScanResultSet.java:248)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:255)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)&lt;br/&gt;
	... 3 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 2,  Failures: 1,  Errors: 0&lt;/p&gt;</comment>
                            <comment id="13065258" author="kristwaa" created="Thu, 14 Jul 2011 14:37:59 +0100"  >&lt;p&gt;Forgot to mention that I used a sane build and ran from classes.&lt;/p&gt;</comment>
                            <comment id="13068606" author="knutanders" created="Wed, 20 Jul 2011 21:21:04 +0100"  >&lt;p&gt;I&apos;ve also seen this happen frequently in my test runs on phoneME running inside a VirtualBox instance, so it seems that the fix was incomplete. I&apos;ll see if I can get it reproduced in a saner environment and do some debugging.&lt;/p&gt;</comment>
                            <comment id="13071739" author="knutanders" created="Wed, 27 Jul 2011 15:02:07 +0100"  >&lt;p&gt;I managed to reproduce it in my environment and have been running with an instrumented build to try to figure out what&apos;s going on. It looks to me as if the problem is that GenericPreparedStatement.makeInvalid() does nothing if the statement is in the process of being recompiled. That may be fine if the recompilation has just started, but if it&apos;s in the middle of the compilation, it may end up producing an execution plan that only works with the old conglomerate.&lt;/p&gt;

&lt;p&gt;I&apos;ve experimented with the attached patch (invalidation-during-compilation.diff). That patch makes GPS.makeInvalid() set a flag if it attempted an invalidation during compilation, and GPS.executeStmt() checks the flag after compilation and requests recompilation if necessary.&lt;/p&gt;

&lt;p&gt;This makes the failure happen less frequently. It appears to completely fix the situations where makeInvalid() used to swallow the invalidation request and the recompilation successfully completed using stale meta-data, which caused the execution of the plan to fail with a conglomerate not found exception. The stack trace Kristian posted was such a case.&lt;/p&gt;

&lt;p&gt;However, there&apos;s a variation that&apos;s not properly handled by the patch. If the conglomerate not found exception is thrown by the in-progress recompilation itself, because the conglomerate disappeared under its feet, something goes wrong. The patch does make it ignore the exception and recompile once more, the recompilation succeeds, and so does the execution of the plan. But when the transaction in which this happened is committed, the following exception is thrown:&lt;/p&gt;

&lt;p&gt;ERROR X0Y66: Cannot issue commit in a nested connection when there is a pending operation in the parent connection.&lt;/p&gt;

&lt;p&gt;Probably the context stack is in a bad state after the conglomerate not found exception and needs to be restored somehow, but I haven&apos;t dug into that yet.&lt;/p&gt;</comment>
                            <comment id="13071779" author="knutanders" created="Wed, 27 Jul 2011 15:57:15 +0100"  >&lt;p&gt;When I combined the invalidation-during-compilation.diff patch with the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5161&quot; title=&quot;Cannot rollback after syntax error in internal statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5161&quot;&gt;&lt;del&gt;DERBY-5161&lt;/del&gt;&lt;/a&gt; (which had to be backed out because of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5280&quot; title=&quot;Large batch of DDL in a database procedure dies on a transaction severity error.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5280&quot;&gt;&lt;del&gt;DERBY-5280&lt;/del&gt;&lt;/a&gt;), I didn&apos;t see the error on commit anymore. I&apos;ve been testing the patches by running three parallel processes of the attached Java program D4275.java.&lt;/p&gt;

&lt;p&gt;However, after 12 minutes, one of the test processes failed with a NullPointerException:&lt;/p&gt;

&lt;p&gt;java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.getStoreCostController(FromBaseTable.java:4515)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.getBaseCostController(FromBaseTable.java:4521)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(FromBaseTable.java:1428)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.estimateTotalCost(OptimizerImpl.java:2626)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costBasedCostOptimizable(OptimizerImpl.java:2172)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costOptimizable(OptimizerImpl.java:1985)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.optimizeIt(FromBaseTable.java:524)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(ProjectRestrictNode.java:316)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(OptimizerImpl.java:1939)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.SelectNode.optimize(SelectNode.java:1913)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(DMLStatementNode.java:315)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(CursorNode.java:587)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:384)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:85)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.rePrepare(GenericPreparedStatement.java:231)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:412)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(EmbedPreparedStatement.java:284)&lt;br/&gt;
	at D4275$1.run0(D4275.java:35)&lt;br/&gt;
	at D4275$1.run(D4275.java:23)&lt;/p&gt;

&lt;p&gt;I don&apos;t know if this is caused by the fix, or if it&apos;s some other existing problem that popped up by coincidence. The other two test processes didn&apos;t show any problems, and I terminated them after 30 minutes. Before I included the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5161&quot; title=&quot;Cannot rollback after syntax error in internal statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5161&quot;&gt;&lt;del&gt;DERBY-5161&lt;/del&gt;&lt;/a&gt; fix, the test would typically fail in less than a minute.&lt;/p&gt;

&lt;p&gt;If &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5161&quot; title=&quot;Cannot rollback after syntax error in internal statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5161&quot;&gt;&lt;del&gt;DERBY-5161&lt;/del&gt;&lt;/a&gt; + invalidation-during-compilation.diff (+ whatever extra is needed to fix the NPE) is the right solution for this issue, we&apos;ll need to find out how to reintroduce the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5161&quot; title=&quot;Cannot rollback after syntax error in internal statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5161&quot;&gt;&lt;del&gt;DERBY-5161&lt;/del&gt;&lt;/a&gt; fix without reintroducing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5280&quot; title=&quot;Large batch of DDL in a database procedure dies on a transaction severity error.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5280&quot;&gt;&lt;del&gt;DERBY-5280&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13071965" author="dagw" created="Wed, 27 Jul 2011 21:08:44 +0100"  >&lt;p&gt;Interesting find. Sounds like reintroducing a (better) fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5161&quot; title=&quot;Cannot rollback after syntax error in internal statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5161&quot;&gt;&lt;del&gt;DERBY-5161&lt;/del&gt;&lt;/a&gt; might be a useful first step.. The cleanup/context  popping machinery is complex, though, so I&apos;m just guessing. Thanks for digging into this.&lt;/p&gt;</comment>
                            <comment id="13072718" author="knutanders" created="Fri, 29 Jul 2011 08:26:51 +0100"  >&lt;p&gt;I had my test case running overnight to find out exactly what was causing the NPE (there were two references that could be null on the line number reported). I saw the NPE twice (after two and three hours). It looks like the NPE happens because a conglomerate is not found and a conglomerate descriptor ends up as null. So it sounds like a case where a conglomerate not found exception would be in order. If a StandardException is thrown instead of a NullPointerException, the code knows how to recover (recompile and retry).&lt;/p&gt;

&lt;p&gt;The attached patch (npe.diff) checks if a conglomerate descriptor was found, and raises a StandardException if not.&lt;/p&gt;</comment>
                            <comment id="13072765" author="knutanders" created="Fri, 29 Jul 2011 11:14:02 +0100"  >&lt;p&gt;All the regression tests ran cleanly with the npe.diff patch. The patch doesn&apos;t have a regression test case, as I don&apos;t have a reliable way to reproduce the NPE in reasonable time. I do think however that it can happen in the existing tests CompressTableTest and TruncateTableTest when the timing is right.&lt;/p&gt;</comment>
                            <comment id="13089365" author="knutanders" created="Tue, 23 Aug 2011 10:36:38 +0100"  >&lt;p&gt;Committed npe.diff to trunk with revision 1160597.&lt;/p&gt;</comment>
                            <comment id="13095934" author="knutanders" created="Fri, 2 Sep 2011 13:07:16 +0100"  >&lt;p&gt;Merged npe.diff to 10.8 and committed revision 1164499.&lt;/p&gt;</comment>
                            <comment id="13101101" author="knutanders" created="Fri, 9 Sep 2011 11:04:30 +0100"  >&lt;p&gt;I&apos;m marking the issue as resolved again so that it turns up in the 10.8.2 release notes, since the original fix did solve some of the problems in this area.&lt;/p&gt;

&lt;p&gt;I&apos;ve filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5406&quot; title=&quot;Intermittent failures in CompressTableTest and TruncateTableTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5406&quot;&gt;&lt;del&gt;DERBY-5406&lt;/del&gt;&lt;/a&gt; to track the remaining problems revealed by the regression test cases for this bug.&lt;/p&gt;</comment>
                            <comment id="13229393" author="kmarsden" created="Wed, 14 Mar 2012 17:19:50 +0000"  >&lt;p&gt;Reopen for 10.5 backport consideration. If working on the backport for this issue. Temporarily assign yourself and add a comment that you are working on it. When finished, reresolve with the new fix versions or label backport_reject_10_x as appropriate.&lt;/p&gt;</comment>
                            <comment id="13234016" author="mikem" created="Wed, 21 Mar 2012 01:27:35 +0000"  >&lt;p&gt;temp assigning issue to myself while working on backport.&lt;/p&gt;</comment>
                            <comment id="13234344" author="kmarsden" created="Wed, 21 Mar 2012 13:23:05 +0000"  >&lt;p&gt;This was reported by a user 10.3. Updating affects version&lt;/p&gt;</comment>
                            <comment id="13242652" author="mikem" created="Fri, 30 Mar 2012 20:14:29 +0100"  >&lt;p&gt;i have finished backporting.  backported to 10.7, 10.6, 10.5. 10.4, 10.3.  reassigning original owner.&lt;/p&gt;</comment>
                            <comment id="13685341" author="knutanders" created="Mon, 17 Jun 2013 10:19:44 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12515207">DERBY-5351</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12396485">DERBY-3683</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12318206">DERBY-637</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12515751">DERBY-5358</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12522398">DERBY-5406</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12546430">DERBY-5654</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12410807" name="CompressDBTest1.java" size="9144" author="psai" created="Tue, 16 Jun 2009 14:55:05 +0100"/>
                            <attachment id="12410808" name="CompressDBTest2.java" size="8231" author="psai" created="Tue, 16 Jun 2009 14:55:05 +0100"/>
                            <attachment id="12487984" name="D4275.java" size="1881" author="knutanders" created="Wed, 27 Jul 2011 15:57:15 +0100"/>
                            <attachment id="12484753" name="d4275-1a.diff" size="11136" author="knutanders" created="Thu, 30 Jun 2011 10:57:56 +0100"/>
                            <attachment id="12481068" name="invalidate-after.diff" size="1495" author="knutanders" created="Wed, 1 Jun 2011 12:39:36 +0100"/>
                            <attachment id="12487978" name="invalidation-during-compilation.diff" size="1692" author="knutanders" created="Wed, 27 Jul 2011 15:02:07 +0100"/>
                            <attachment id="12488183" name="npe.diff" size="1362" author="knutanders" created="Fri, 29 Jul 2011 08:26:51 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10365"><![CDATA[Crash]]></customfieldvalue>
    <customfieldvalue key="10421"><![CDATA[Seen in production]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Jul 2009 16:12:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24147</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0chr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35842</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>