<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:09:12 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1191/DERBY-1191.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1191] Some SQLExceptions, for example those generated from BrokeredStatements,  do not print to derby.log even  when  derby.stream.error.logSeverityLevel=0</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1191</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I found this when working on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1047&quot; title=&quot;[xa] With client xa, a PreparedStatement  created before the global transaction starts  gives  java.sql.SQLException: &amp;#39;Statement&amp;#39; already closed.&amp;#39;  when used after the global transaction ends&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1047&quot;&gt;&lt;del&gt;DERBY-1047&lt;/del&gt;&lt;/a&gt;.   Exceptions thrown  using &lt;br/&gt;
org.apache.derby.impl.jdbc.Util.generateCsSQLException()&lt;br/&gt;
do not print to derby.log even when derby.stream.error.logSeverityLevel=0&lt;/p&gt;

&lt;p&gt;For example the attached repro  generates an expected exception but does not  print the error to the log.&lt;/p&gt;

&lt;p&gt;java -Dderby.stream.error.logSeverityLevel=0 Derby1047&lt;/p&gt;


&lt;p&gt;This causes an expected exception to be thrown but it does not print to the derby.log&lt;/p&gt;

&lt;p&gt;10.2.0.0 alpha&lt;br/&gt;
Apache Derby&lt;br/&gt;
Apache Derby Embedded JDBC Driver&lt;br/&gt;
done creating  table&lt;br/&gt;
COL1&lt;br/&gt;
-----------&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
PASS: Expected Exception can&apos;tholdable cusror in global xact:Cannot set holdability ResultSet.HOLD_CURSORS_OVER_COMMIT for a global transaction.&lt;br/&gt;
COL1&lt;br/&gt;
-----------&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
3&lt;/p&gt;


&lt;p&gt;The code generating the exception is in org.apache.derby.iapi.jdbc.BrokeredStatement&lt;/p&gt;

&lt;p&gt;  final void checkHoldability() throws SQLException &lt;/p&gt;
{
        int holdability = controlCheck().checkHoldCursors(resultSetHoldability);
        if (holdability != resultSetHoldability)
            throw Util.generateCsSQLException(SQLState.CANNOT_HOLD_CURSOR_XA);

    }</description>
                <environment></environment>
        <key id="12331782">DERBY-1191</key>
            <summary>Some SQLExceptions, for example those generated from BrokeredStatements,  do not print to derby.log even  when  derby.stream.error.logSeverityLevel=0</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                            <label>derby_triage10_10</label>
                            <label>derby_triage10_8</label>
                    </labels>
                <created>Fri, 7 Apr 2006 23:51:35 +0100</created>
                <updated>Wed, 26 Sep 2012 20:00:29 +0100</updated>
                                            <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12373652" author="kmarsden" created="Sat, 8 Apr 2006 00:34:12 +0100"  >&lt;p&gt;I wanted to clarify that I don&apos;t think  this issue is not limited to XA.&lt;br/&gt;
There are  errors are thrown using this mechanism, for example:&lt;/p&gt;

&lt;p&gt;EmbeddedConnection.close()&lt;br/&gt;
EmbeddedConnection.createBoot()&lt;br/&gt;
Savepoint code in EmbeddedConnection30&lt;/p&gt;

&lt;p&gt;Places where Util.javaException(Throwable)  is  used, for example network server and &lt;br/&gt;
EmbeddedConnection.bootDatabase()  &lt;/p&gt;</comment>
                            <comment id="12373658" author="kmarsden" created="Sat, 8 Apr 2006 01:48:52 +0100"  >&lt;p&gt;Fixing priority.  There  will be a bit of a delay to post repro because I need to change the case as it doesn&apos;t actually throw the exception anymore with the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1158&quot; title=&quot;Allow use of Statements created in local transaction with default holdability to be used in global transactions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1158&quot;&gt;&lt;del&gt;DERBY-1158&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12373660" author="djd" created="Sat, 8 Apr 2006 01:57:55 +0100"  >&lt;p&gt;It&apos;s not clear to me that such exceptions belong in derby.log. Most exceptions that are a result of an application error (incorrect use of the JDBC api) do not end up in derby.log. E.g. calling ResultSet.getXXX when not on a row, calling a method on a closed JDBC object, calling ResultSet.getXXX with an out of range column identifier.&lt;/p&gt;

&lt;p&gt;I think derby.log should be reserved for errors that occur within the engine, not those at  the JDBC api level.&lt;/p&gt;</comment>
                            <comment id="12373669" author="kmarsden" created="Sat, 8 Apr 2006 02:36:33 +0100"  >&lt;p&gt;I disagree.&lt;/p&gt;

&lt;p&gt;The description of  derby.stream.error.logSeverityLevel the property says:&lt;br/&gt;
Specifies which errors are logged to the Derby error log (typically the derby.log file). In test environments, use the setting derby.stream.error.logSeverityLevel=0 so that &lt;b&gt;all&lt;/b&gt;  problems are reported.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://db.apache.org/derby/docs/dev/tuning/rtunproper26985.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/dev/tuning/rtunproper26985.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only printing some of the exceptions causes support issues. When users get unexpected exceptions, we usually ask them to set derby.stream.error.logSeverityLevel=0  and send the derby.log.  It is very useful to have the exception there, complete with the full exception chain,  regardless of where it came from and not have to worry about getting traces output from the application.&lt;/p&gt;


&lt;p&gt;Here is one current support case example:  &lt;/p&gt;

&lt;p&gt;Issue: Create database fails with &quot;Database not found&quot; exception after creating the database.&lt;/p&gt;

&lt;p&gt;There have been multiple round trips so far:&lt;/p&gt;

&lt;p&gt;1) Initial issue:&lt;br/&gt;
&quot;We are seeing this error  creating the database but the database actually gets created ok&quot;&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:databases/TopDown1;create=true&apos;;&lt;br/&gt;
ERROR XJ004: Database &apos;databases/TopDown1&apos; not found.&lt;br/&gt;
SQL Exception: Database &apos;databases/TopDown1&apos; not found.&lt;/p&gt;

&lt;p&gt;2) Asked for derby.log with derby.stream.error.logSeverityLevel=0&lt;br/&gt;
&quot;Here is the log file  &amp;lt;derby.log&amp;gt;&lt;br/&gt;
However, it does not contain any useful info &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;&lt;/p&gt;

&lt;p&gt;3) Asked for  ij stack trace with ij.exceptionTrace=true&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; ij&amp;gt; connect &apos;jdbc:derby:databases/TopDown1;create=true&apos;;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; ERROR XJ004: Database &apos;databases/TopDown1&apos; not found.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SQL Exception: Database &apos;databases/TopDown1&apos; not found.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at java.lang.Throwable.&amp;lt;init&amp;gt;(Throwable.java:196)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at java.lang.Exception.&amp;lt;init&amp;gt;(Exception.java:41)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at java.sql.SQLException.&amp;lt;init&amp;gt;(SQLException.java:40)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.jdbc.EmbedSQLException.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at java.sql.DriverManager.getConnection(DriverManager.java:525)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at java.sql.DriverManager.getConnection(DriverManager.java:140)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.tools.ij.ij.dynamicConnection(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.tools.ij.ij.ConnectStatement(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.tools.ij.ij.ijStatement(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 	at org.apache.derby.tools.ij.main(Unknown Source)&lt;/p&gt;

&lt;p&gt;Many other cases regarding errors thrown from the JDBC API occur  because we have a bug or  user expectations are different (ala &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1158&quot; title=&quot;Allow use of Statements created in local transaction with default holdability to be used in global transactions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1158&quot;&gt;&lt;del&gt;DERBY-1158&lt;/del&gt;&lt;/a&gt;).  Regardless of whether this issue is a bug or not,  when communicating with  users it is really good for the derby.log to be a one stop shop for exceptions.&lt;/p&gt;
</comment>
                            <comment id="12373678" author="djd" created="Sat, 8 Apr 2006 03:36:28 +0100"  >&lt;p&gt;The example you give is a problem with the engine, thus the error should be in the log. I just don&apos;t think application errors should make it to the derby.log, they are not a &quot;problem&quot; with Derby.&lt;/p&gt;</comment>
                            <comment id="12415229" author="davidvc" created="Thu, 8 Jun 2006 06:31:38 +0100"  >&lt;p&gt;I was thinking of working on this, but reading the comments, it is not clear to me what ultimately needs to be fixed here.  It sounds like we want engine-level exceptions, not application errors, to be logged.  How does one distinguish between the two in a programmatic way?  I&apos;m not clear what approach I would follow to fix this.   Should they just be fixed on a case-by-case basis or is there a determinant available in the code?&lt;/p&gt;</comment>
                            <comment id="12730997" author="kmarsden" created="Tue, 14 Jul 2009 18:43:10 +0100"  >&lt;p&gt;Changing this to major. I think it is very important for users trying to diagnose issues particularly for the new exceptions now thrown on connection close if the transaction has not been rolled back with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3319&quot; title=&quot;Logical connections do not check if a transaction is active on close&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3319&quot;&gt;&lt;del&gt;DERBY-3319&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12730998" author="kmarsden" created="Tue, 14 Jul 2009 18:44:30 +0100"  >&lt;p&gt;Linking &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3319&quot; title=&quot;Logical connections do not check if a transaction is active on close&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3319&quot;&gt;&lt;del&gt;DERBY-3319&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
This issue will be very important users trying to determine what application changes are required after that fix.&lt;/p&gt;</comment>
                            <comment id="12734399" author="kmarsden" created="Thu, 23 Jul 2009 01:11:16 +0100"  >&lt;p&gt;Looking back at the comments in this issue, I see that Dan had some objection to logging exceptions at the JDBC API level especially usage errors.  I still think logging all  exceptions is useful.  The one I especially am interested in logging  at the moment is:&lt;/p&gt;

&lt;p&gt;SQLState 25001&lt;br/&gt;
java.sql.SQLException: Cannot close a connection while a transaction is still active.&lt;/p&gt;

&lt;p&gt;which is new after the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3319&quot; title=&quot;Logical connections do not check if a transaction is active on close&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3319&quot;&gt;&lt;del&gt;DERBY-3319&lt;/del&gt;&lt;/a&gt; fix for pooled connections and has proved hard to track down in the cases of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4053&quot; title=&quot;Network Server&amp;#39;s failure to rollback local transactions on shutdown can cause  hang on startup with message java.net.BindException: Address already in use: NET_Bind in derby.log &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4053&quot;&gt;&lt;del&gt;DERBY-4053&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4225&quot; title=&quot;EmbeddedConnectionPoolDataSource40 never calls the ConnectionEventListener calbacks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4225&quot;&gt;&lt;del&gt;DERBY-4225&lt;/del&gt;&lt;/a&gt; and I think perhaps a current user case I am trying to diagnose.&lt;/p&gt;

&lt;p&gt;I think this exception would fall into the category of  usage error and JDBC API level, but  it sure would be helpful to see it especially for something that used to work.   &lt;/p&gt;

&lt;p&gt;Do others have opinions on this?&lt;/p&gt;</comment>
                            <comment id="12734661" author="mamtas" created="Thu, 23 Jul 2009 18:46:37 +0100"  >&lt;p&gt;I can see Dan&apos;s point but I do believe that it will be good to have one central place to look at all the exceptions irrespective of what code caused it.&lt;/p&gt;</comment>
                            <comment id="12737615" author="kmarsden" created="Fri, 31 Jul 2009 18:54:31 +0100"  >&lt;p&gt;Attaching a reproduction for this issue.  ReproDerby1191.  It includes just the one exception that we really need logged after the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3319&quot; title=&quot;Logical connections do not check if a transaction is active on close&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3319&quot;&gt;&lt;del&gt;DERBY-3319&lt;/del&gt;&lt;/a&gt;.  I am sure fixing this one will fix others as well, but there may be additional code paths that need attention.&lt;/p&gt;</comment>
                            <comment id="12737623" author="kmarsden" created="Fri, 31 Jul 2009 19:03:19 +0100"  >&lt;p&gt;Note a fix for this issue might be helpful in diagnosing a recent user report:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Derby-10.5.1.1-regression-tt24733315.html#a24733315&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Derby-10.5.1.1-regression-tt24733315.html#a24733315&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here an XCL30/XJ001 error shows up only in the protocol tracing and is not otherwise reported.&lt;/p&gt;</comment>
                            <comment id="12739624" author="kmarsden" created="Wed, 5 Aug 2009 18:14:36 +0100"  >&lt;p&gt;Lily helped me explore possible options for this issue (Thanks Lily!) .  Basically there seem to be two.&lt;br/&gt;
1) log the exception when the exception is created in SQLExceptionFactory and SQLExceptionFactory40 getSQLException().  Adding a method logException(SQLException se)  to SQLExceptionFactory and calling it just before returning the exception.  The  advantage to this approach is that it requires a small amount of centralized code.  The disadvantages are  that it requires access to the Monitor which seems a little out of place here.  Also at least in one case we create an exception that we normally never throw. In EmbeddedConnection we have:&lt;br/&gt;
  public static final SQLException NO_MEM =&lt;br/&gt;
       Util.generateCsSQLException(SQLState.LOGIN_FAILED, &quot;java.lang.OutOfMemoryError&quot;);&lt;/p&gt;

&lt;p&gt;and then only throw that if we run out of memory.  There would have to be special casing to handle this.&lt;/p&gt;

&lt;p&gt;The side effect of logging from a Factory class seems a little odd.&lt;/p&gt;

&lt;p&gt;2)  Add a method to the Util class throwAndLogSQLException(SQLException se) which logs the exception and then throws it. Then  change the individual  code calls to instead  of doing:&lt;br/&gt;
  throw Util.generateCsSQLException(...);&lt;/p&gt;

&lt;p&gt;to call &lt;br/&gt;
  throwAndLog(Util.generateCsSQLException(...));&lt;/p&gt;

&lt;p&gt;This seems clearer and the exception does not get logged until it is thrown.  The downside is that it changes a lot of code and it is possible some exceptions might get missed. Developers need to be aware that for new exceptions they need to call the method instead of just throwing the exception.  &lt;/p&gt;

&lt;p&gt;It might be tricky to backport to release branches since it would change so much code.&lt;/p&gt;

&lt;p&gt;I am really about split on the two options and welcome opinions or better ideas.&lt;/p&gt;
</comment>
                            <comment id="12739725" author="myrna" created="Wed, 5 Aug 2009 21:27:29 +0100"  >&lt;p&gt;I would worry about making a large code change in older branches. But it does seem - without actually looking at the code - that the second suggestion is clearer in the way the process flows.&lt;br/&gt;
It seems to me, could you do both - do approach 1 for older releases (10.4 and earlier) and approach 2 for trunk (and 10.5?) or would that be too much work and cause too much pain backporting fixes? &lt;/p&gt;</comment>
                            <comment id="12739735" author="kmarsden" created="Wed, 5 Aug 2009 21:38:42 +0100"  >&lt;p&gt;We certainly could take a different approach on the branches, If we choose option 2 on trunk and do not backport  it may indeed  interfere with merging unrelated fixes since so many methods will be impacted.&lt;/p&gt;</comment>
                            <comment id="12740200" author="kmarsden" created="Thu, 6 Aug 2009 19:56:03 +0100"  >&lt;p&gt;derby-1191_factory_hack_no_commit_diff.txt  contains the SQLExceptionFactory solution. On implementing it, it really looks like it is in the wrong place, but I will give it to someone having a problem with 10.5 to help debug their problem.  I am posting it here in case someone else needs to log the JDBC and network server errors for debugging.  The patch is against 10.5.&lt;/p&gt;</comment>
                            <comment id="12742669" author="kmarsden" created="Thu, 13 Aug 2009 01:58:12 +0100"  >&lt;p&gt;Here is a patch that takes the approach of adding a public static void logAndThrowSQLException(SQLException se) method and then calling that instead of just throwing the exception.&lt;/p&gt;

&lt;p&gt;The initial patch only uses the method for EmbedConnection.checkForTransactionInProgress() which is the most important exception to log after the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3319&quot; title=&quot;Logical connections do not check if a transaction is active on close&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3319&quot;&gt;&lt;del&gt;DERBY-3319&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If everyone agrees on the approach, I would like to commit this patch and backport it to 10.5 and then follow up with larger patches that use the method for other SQLExceptions thrown by Derby embedded JDBC and network server.&lt;/p&gt;

&lt;p&gt;I am running regression tests now. I manually tested that the exception gets logged always with a sane build and with the appropriate derby.stream.error.logSeverityLevel with an insane build.  I didn&apos;t add a regression test because we don&apos;t really have a good way I think to test  error log contents.&lt;/p&gt;</comment>
                            <comment id="12742823" author="kmarsden" created="Thu, 13 Aug 2009 14:51:56 +0100"  >&lt;p&gt;tests all passed for derby1191_checkForTransactionInProgress_diff.txt. I will check in in an about an hour unless someone asks for more time for review.&lt;/p&gt;</comment>
                            <comment id="12743236" author="dagw" created="Fri, 14 Aug 2009 16:31:29 +0100"  >&lt;p&gt;Is the intention here (with the new Util.logAndThrowSQLException method), that this be&lt;br/&gt;
used everywhere we now just do &quot;throw newSQLException&quot;, so we should use new method in all new&lt;br/&gt;
engine code?&lt;/p&gt;</comment>
                            <comment id="12743254" author="kmarsden" created="Fri, 14 Aug 2009 16:56:17 +0100"  >&lt;p&gt;Yes.  If everyone agrees this is the right approach,  I will start in September submitting patches to make all the changes and then put some documentation on the Wiki.  I thought I would start with this one exception that I really needed now and then let it sit a few weeks to make sure there are not better implementation  ideas out there.&lt;/p&gt;</comment>
                            <comment id="12744485" author="knutanders" created="Tue, 18 Aug 2009 13:41:44 +0100"  >&lt;p&gt;I agree that option 2 sounds better, but I have some comments to the patch that was committed:&lt;/p&gt;

&lt;p&gt;1) Many of the lines mix tabs and spaces (that is, they are mixed on the same line), and some lines exceed 80 characters&lt;/p&gt;

&lt;p&gt;2) The error stream is automatically redirected to System.err if derby.log cannot be opened, so the special case for printing to the console is probably not necessary&lt;/p&gt;

&lt;p&gt;3) Checking the exact contents of the error message is likely to break in some locales, or if the message text is changed without updating the magic string. Better to follow the getCause() chain to look for OutOfMemoryError? Or perhaps just change the condition to se == EmbedConnection.NO_MEM?&lt;/p&gt;</comment>
                            <comment id="12749594" author="kmarsden" created="Mon, 31 Aug 2009 21:00:16 +0100"  >&lt;p&gt;Thank you Knut for reviewing the change.  I had tried initially to put the check se == Embedconnection.NO_MEM but for some reason it wasn&apos;t working. I will research further and will make the other changes.&lt;/p&gt;
</comment>
                            <comment id="12887739" author="kristwaa" created="Tue, 13 Jul 2010 13:51:20 +0100"  >&lt;p&gt;Clearing patch available flag, there are comments to address.&lt;/p&gt;</comment>
                            <comment id="13464064" author="kmarsden" created="Wed, 26 Sep 2012 20:00:29 +0100"  >&lt;p&gt;Unmarking HVF as they really critical ones like the connection not closing due to an open transaction have been fixed.  &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12386268">DERBY-3319</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12433091">DERBY-4350</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12415132" name="ReproDerby1191.java" size="701" author="kmarsden" created="Fri, 31 Jul 2009 18:54:31 +0100"/>
                            <attachment id="12416385" name="derby-1191_checkForTransactionInProgress_diff.txt" size="4286" author="kmarsden" created="Thu, 13 Aug 2009 01:58:12 +0100"/>
                            <attachment id="12415771" name="derby-1191_factory_hack_no_commit_diff.txt" size="2689" author="kmarsden" created="Thu, 6 Aug 2009 19:56:03 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 8 Apr 2006 00:57:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22361</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy09hz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35357</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>