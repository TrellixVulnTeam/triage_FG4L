<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:39:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-877/DERBY-877.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-877] zOS - with DerbyClient getDate(#) fails with IllegalArgumentException - unsupported date format - resultset.java</title>
                <link>https://issues.apache.org/jira/browse/DERBY-877</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The test lang/resultset.java fails with DerbyNetClient on zOS &lt;br/&gt;
because ResultSet.getDate(#) fails with an &lt;br/&gt;
java.lang.IllegalArgumentException - unsupported date format.&lt;/p&gt;

&lt;p&gt;This is the stack trace with 10.2 debug version (but it fails &lt;br/&gt;
with 10.1 also):&lt;br/&gt;
------------------&lt;br/&gt;
....&lt;br/&gt;
getBytes(dt) got exception&lt;br/&gt;
Data Conversion SQLException&lt;br/&gt;
FAIL &amp;#8211; unexpected exception: &lt;br/&gt;
java.lang.IllegalArgumentException: Unsupported date format!&lt;br/&gt;
java.lang.IllegalArgumentException: Unsupported date format!&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.client.am.DateTime.dateBytesToDate(DateTime.java:63)&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.client.am.Cursor.getDATE(Cursor.java:400)&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.client.am.Cursor.getDate(Cursor.java:712)&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derby.client.am.ResultSet.getDate(ResultSet.java:687)&lt;br/&gt;
        at &lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.jdbcapi.resultset.main(Unknown Source)&lt;br/&gt;
------------------&lt;br/&gt;
Note: does not fail with jcc.&lt;/p&gt;

&lt;p&gt;Also, test lang/updatableResultSet.java failed with e.g.:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;instead of &apos;Got expected exception : Illegal Conversion&apos; :&lt;br/&gt;
		     &apos;Got expected exception : Unsupported date format!&apos; . &lt;/li&gt;
	&lt;li&gt;instead of &apos;Got expected exception : Illegal Conversion&apos; :&lt;br/&gt;
		     &apos;Got expected exception : nanos &amp;gt; 99999999999 or &amp;lt; 0&apos; .&lt;/li&gt;
&lt;/ul&gt;

</description>
                <environment>OS/390 with classic (IBM) jvm142</environment>
        <key id="12328136">DERBY-877</key>
            <summary>zOS - with DerbyClient getDate(#) fails with IllegalArgumentException - unsupported date format - resultset.java</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="myrna">Myrna van Lunteren</reporter>
                        <labels>
                    </labels>
                <created>Thu, 26 Jan 2006 22:35:21 +0000</created>
                <updated>Wed, 12 Jul 2006 02:40:40 +0100</updated>
                            <resolved>Sun, 19 Feb 2006 05:49:21 +0000</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.1.3.1</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12364297" author="kmarsden" created="Sat, 28 Jan 2006 14:41:55 +0000"  >&lt;p&gt;Please ignore previously deleted comment in favor of this one.&lt;/p&gt;

&lt;p&gt;Here is a summary if this issue. I will submit a patch next week.  Please read and comment if you have time.  To repro on windows with jdk 1.5:&lt;/p&gt;

&lt;p&gt;java -Dfile.encoding=UTF-16 -DConsole.encoding=Cp1252  TestEnc&lt;/p&gt;


&lt;p&gt;ISSUE:&lt;br/&gt;
Encoding issues with getDate(), getTime,  and getTimeStamp() when the JVM encoding does not match server encoding.  Failures are manifested with  various exceptions indicating the data is not formatted properly.&lt;/p&gt;


&lt;p&gt;BACKGROUND:&lt;br/&gt;
In DRDA, the rule for data encoding for result set data values is  that the receiver makes right.  So if the server sends a column with Ccsid 1208 (UTF-8), the client is responsible for handling that format correctly.  Alternately if the client sends a parameter, the server is responsible for handling the encoding properly.&lt;/p&gt;

&lt;p&gt;Network Server always sends data in UTF-8 (CCSID- 1208) format, so the client really only needs to handle that for result set data.&lt;/p&gt;

&lt;p&gt;Note: DDM String values are always EBCDIC (but that seems to be handled properly)&lt;/p&gt;



&lt;p&gt;PROBLEM:&lt;/p&gt;

&lt;p&gt;Methods in org.apache.derby.client.am.DateTime.java make the assumption that the default encoding of the JVM matches the encoding of the date/time/timestamp value for the characters sent in those values.  For example, the method &lt;b&gt;timeStampBytesToTimestamp&lt;/b&gt;  takes a byte[] buffer as sent by the server and returns a java.sql.Timestamp, computing  values like this:&lt;/p&gt;

&lt;p&gt;	String date = new String(buffer, offset, DateTime.dateRepresentationLength);&lt;br/&gt;
	&lt;span class=&quot;error&quot;&gt;&amp;#91;snip&amp;#93;&lt;/span&gt;&lt;br/&gt;
	 int zeroBase = ((int) &apos;0&apos;);&lt;br/&gt;
        year =&lt;br/&gt;
                1000 * (((int) date.charAt(yearIndx)) - zeroBase) + ...&lt;/p&gt;

&lt;p&gt;When the default encoding for the JVM is not compatible with the encoding sent by Network Server, (for example Cp500 or Cp037 are EBCDIC), zero base is caluculated incorectly, thus the resulting values are garbage.&lt;/p&gt;


&lt;p&gt;Other methods like &lt;b&gt;timestampToTimestampBytes&lt;/b&gt;  go  the exact reverse. They build up a character array and then turn it into a String and do getBytes() without specifying the encoding.  It seems that these would affect setTimestamp/setTime/setDate calls, but I will file this as a separate issue once I have a repro.&lt;/p&gt;

&lt;p&gt;One other issue regarding  DateTime.java is that it uses deprecated methods such as Date.setYear() deprecated since jdk 1.1.&lt;/p&gt;



&lt;p&gt;FIX&lt;br/&gt;
As a fix for 10.1 I am thinking the solution is to pass the encoding of the column into the methods in DateTime.java that create Strings and then create the string with the column encoding.&lt;br/&gt;
e.g&lt;br/&gt;
&lt;b&gt;timeStampBytesToTimestamp&lt;/b&gt; will have&lt;br/&gt;
String date = new String(buffer, offset, DateTime.dateRepresentationLength,encoding);&lt;br/&gt;
Then the math will be correct.&lt;/p&gt;

&lt;p&gt;I think longer term we should reconsider DateTime.java altogether and consider how much all of this character arithmetic is buying us, especially give it is relying on deprecated methods etc.&lt;/p&gt;


&lt;p&gt;TESTING&lt;br/&gt;
I can use Deepa&apos;s trick  with jdk 1.5 to reproduce the issue, but hope we can find a more generic way to test these encoding issues so that they can be encluded in the nightly regressions.&lt;/p&gt;

&lt;p&gt;java -Dfile.encoding=UTF-16 -DConsole.encoding=Cp1252  TestEnc&lt;/p&gt;


&lt;p&gt;OTHER  AREAS OF CONCERN&lt;br/&gt;
I looked briefly at the code for additional potential encoding problems. I saw these possible issues.&lt;/p&gt;

&lt;p&gt;DateTime.java&lt;br/&gt;
Need to look into setTime/setDate/setTimestamp cases.  I have not seen errors so maybe they are ok.&lt;/p&gt;

&lt;p&gt;Decimal.java, FloatingPoint.java&lt;br/&gt;
These converters need closer examination.&lt;/p&gt;

&lt;p&gt;Clob.java&lt;br/&gt;
Has an encoding_ field but it looks like it is not used.&lt;/p&gt;

&lt;p&gt;NetConnectionReply.java&lt;br/&gt;
has a getBytes() call that needs consideration.&lt;/p&gt;

&lt;p&gt;Cursor.java&lt;/p&gt;

&lt;p&gt;In getVARCHAR there is code like this that I don&apos;t quite understand.  If the server uses Ccsid 1208, why do we call getStringWithoutConvert for 1200?&lt;/p&gt;

&lt;p&gt; if(ccsid_&lt;span class=&quot;error&quot;&gt;&amp;#91;column-1&amp;#93;&lt;/span&gt; == 1200)&lt;br/&gt;
          return getStringWithoutConvert (columnDataPosition_&lt;span class=&quot;error&quot;&gt;&amp;#91;column-1&amp;#93;&lt;/span&gt; + 2, columnDataComputedLength_&lt;span class=&quot;error&quot;&gt;&amp;#91;column-1&amp;#93;&lt;/span&gt; - 2, fdocaLength_&lt;span class=&quot;error&quot;&gt;&amp;#91;column-1&amp;#93;&lt;/span&gt;);&lt;/p&gt;


</comment>
                            <comment id="12364360" author="kmarsden" created="Sun, 29 Jan 2006 13:23:40 +0000"  >&lt;p&gt;Updated repro&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Adds getString, getTimestamp,  getTime and getDate calls for TIME/DATE/TIMESTAMP&lt;/li&gt;
	&lt;li&gt;Allows  user to set output.encoding System property to allow more readable output on Windows and z/OS&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To repro on Windows, You must run with jdk 1.5&lt;br/&gt;
java  -Dfile.encoding=UTF-16 -Doutput.encoding=US-ASCII TestEnc&lt;br/&gt;
COLUMN 1:TS TIMESTAMP&lt;br/&gt;
java.lang.StringIndexOutOfBoundsException: String index out of range: 14&lt;br/&gt;
        at java.lang.String.charAt(String.java:558)&lt;br/&gt;
        at org.apache.derby.client.am.DateTime.timestampBytesToTimestamp(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.Cursor.getStringFromTIMESTAMP(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.Cursor.getString(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.ResultSet.getString(Unknown Source)&lt;br/&gt;
        at TestEnc.checkGetters(TestEnc.java:75)&lt;br/&gt;
        at TestEnc.go(TestEnc.java:49)&lt;br/&gt;
        at TestEnc.main(TestEnc.java:26)&lt;/p&gt;

&lt;p&gt;To repro on z/OS&lt;br/&gt;
java -Doutput.encoding=Cp500 TestEnc&lt;/p&gt;

&lt;p&gt;Note this repro shows a bug that getTImetamp() on a TIME column will show date 1900-01-01-01.  &lt;br/&gt;
I will file a separate bug for that.&lt;/p&gt;


</comment>
                            <comment id="12364380" author="kmarsden" created="Mon, 30 Jan 2006 00:20:13 +0000"  >&lt;p&gt;The patch fixes issues with getString, getTimeStamp, getDate and getTime on TIMESTAMP, DATE and TIME columns when the client JVM encoding does not match the server encoding for the characters being evaluated in DateTime.java methods&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changes the following methods in DateTime.java to take encoding parameter and create string based on encoding.&lt;br/&gt;
dateBytesToDate, timeBytesToTime, timeBytesToTimeStamp, dateBytesToTimeStamp, timestampBytesToDate, timestampBytesToTime&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changes calling code to pass column encoding and throw SQLExceptions for UnsupportedEncoding  exceptions if thrown from the methods above.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Tests: derbyall  passed as did  the repro attached to this issue on Windows  with Sun JDK 1.5 (note repro won&apos;t run with jdk 1.4.2).&lt;br/&gt;
I still do not have a solution for testing within the harness on systems  where the JVM encoding  does match the server encoding.&lt;br/&gt;
 Any ideas on testing  solutions are welcome. &lt;/p&gt;</comment>
                            <comment id="12364529" author="kmarsden" created="Tue, 31 Jan 2006 14:29:15 +0000"  >&lt;p&gt;I&apos;ll commit this patch tomorrow.  I would appreciate a quick review from whomever is available.&lt;br/&gt;
Even though the bug is marked  zOS it is a generic issue that affects any jvm where the  default jvm encoding for the characters in TIME/TIMESTAMP/DATE  do not match network server.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12364537" author="bryanpendleton" created="Tue, 31 Jan 2006 15:30:51 +0000"  >&lt;p&gt;Your change looks reasonable to me. I was able to reproduce the problem using your script, using Sun JDK 1.5 on Windows XP. I applied your patch to my code, and I was able to confirm that the problem went away and the StringOutOfBounds exceptions no longer occur.&lt;/p&gt;

&lt;p&gt;I&apos;m no expert on encodings, but I can confirm that your repro program works for me and your patch corrects the problem for me.&lt;/p&gt;</comment>
                            <comment id="12364646" author="djd" created="Wed, 1 Feb 2006 02:10:39 +0000"  >&lt;p&gt;This code looks wrong to me, at least it &apos;s deceptive. Here&apos;s on example:&lt;/p&gt;

&lt;p&gt;+        String timestamp = new String(buffer, offset, &lt;br/&gt;
+                DateTime.timestampRepresentationLength, encoding);&lt;/p&gt;

&lt;p&gt;If the encoding can be changed then the length of the byte representation should be changable.&lt;br/&gt;
The length here is hard-coded as 26 using the constant timestampRepresentationLength.&lt;/p&gt;

&lt;p&gt;If really the server is always sending the data with a fixed encoding, which looks like the case, then I think the&lt;br/&gt;
encoding should be fixed here. Otherwise it looks like the code can handle any encoding, and someone in the&lt;br/&gt;
future may try to take advantage of that, which may or may not work in some cases and fail in others.&lt;/p&gt;</comment>
                            <comment id="12364695" author="kmarsden" created="Wed, 1 Feb 2006 05:01:00 +0000"  >&lt;p&gt;I think I will buy deceptive, but deceptive in the way that passing the encoding around the way client generally does  in other places  is deceptive.  Also I think maybe the right thing is for these classes to actually go away moving forward.&lt;/p&gt;

&lt;p&gt;How about I submit this fix to provide the user some relief and then file another for the general encoding cleanup.  I had planned to do that anyway based on some things I found while investigating this issue.&lt;/p&gt;
</comment>
                            <comment id="12364702" author="djd" created="Wed, 1 Feb 2006 05:41:40 +0000"  >&lt;p&gt;Sounds good - fix the bug &amp;amp; register the cleanup issue.&lt;/p&gt;</comment>
                            <comment id="12366918" author="kmarsden" created="Sun, 19 Feb 2006 05:49:21 +0000"  >&lt;p&gt;submitted this fix to the trunk and 10.1&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12322461" name="TestEnc.java" size="7342" author="kmarsden" created="Sun, 29 Jan 2006 13:23:40 +0000"/>
                            <attachment id="12322463" name="derby-877.diff" size="16822" author="kmarsden" created="Mon, 30 Jan 2006 00:20:13 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 28 Jan 2006 14:41:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22182</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy15lz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40559</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>