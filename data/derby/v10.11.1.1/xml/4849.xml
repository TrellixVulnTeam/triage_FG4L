<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:55:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4849/DERBY-4849.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4849] Re-compilation may cause duplicate entries in the XPLAIN table</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4849</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;If happening at the right moment, a re-compilation request may cause duplicate entries in the XPLAIN statement tables.&lt;br/&gt;
I have only confirmed this for the SYSXPLAIN_STATEMENTS table, and I do not know if the other XPLAIN tables are affected.&lt;/p&gt;

&lt;p&gt;The error is highly intermittent, and so far I have only been able to trigger it when testing the automatic index statistics update prototype.&lt;br/&gt;
See the attached stack-trace for some more details.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12477327">DERBY-4849</key>
            <summary>Re-compilation may cause duplicate entries in the XPLAIN table</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Oct 2010 08:46:57 +0100</created>
                <updated>Tue, 1 Nov 2011 10:12:12 +0000</updated>
                            <resolved>Tue, 30 Nov 2010 15:10:42 +0000</resolved>
                                    <version>10.6.2.1</version>
                    <version>10.7.1.1</version>
                                    <fixVersion>10.6.2.2</fixVersion>
                    <fixVersion>10.7.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12920873" author="kristwaa" created="Thu, 14 Oct 2010 08:49:57 +0100"  >&lt;p&gt;Attached &apos;derby-4849-xplain_duplicate_stacktrace.txt&apos;, which shows a stack-trace from a JUnit run where the error is triggered.&lt;/p&gt;</comment>
                            <comment id="12920912" author="knutanders" created="Thu, 14 Oct 2010 11:06:31 +0100"  >&lt;p&gt;I think I see what&apos;s going on.&lt;/p&gt;

&lt;p&gt;BasicNoPutResultSetImpl.open() discovers that the statement has been invalidated, but only after the result set has actually been opened. It raises a LANG_STATEMENT_NEEDS_RECOMPILE exception to notice the caller that the result set is based on an invalid plan. The exception is caught and handled by this code in GenericPreparedStatement.executeStmt():&lt;/p&gt;

&lt;p&gt;			} catch (StandardException se) &lt;/p&gt;
{
				/* Cann&apos;t handle recompiling SPS action recompile here */
				if (!se.getMessageId().equals(SQLState.LANG_STATEMENT_NEEDS_RECOMPILE)
						 || spsAction)
					throw se;
				statementContext.cleanupOnError(se);
				continue recompileOutOfDatePlan;

			}

&lt;p&gt;The call to statementContext.cleanupOnError(se) will eventually lead to close() being called on the result set. Since the XPLAIN tables are updated on close(), we&apos;ll get an entry for the result set even if it was never actually executed. Since GPS will re-execute the statement, we&apos;ll get a second entry for the actual execution.&lt;/p&gt;

&lt;p&gt;I think this will only happen if the statement is invalidated between GPS&apos;s call to rePrepare() at line 409 and its call to resultSet.open() at line 436.&lt;/p&gt;</comment>
                            <comment id="12920955" author="bryanpendleton" created="Thu, 14 Oct 2010 14:25:06 +0100"  >&lt;p&gt;Thanks Knut Anders, that makes sense. Perhaps we need a way to set an&lt;br/&gt;
internal flag in the ResultSet data structure that says &quot;this result set was&lt;br/&gt;
opened, but was never actually executed&quot;.&lt;/p&gt;

&lt;p&gt;Then the code you reference, when raising the NEEDS_RECOMPILE&lt;br/&gt;
exception, could look something like:&lt;/p&gt;

&lt;p&gt;  this.setPlanWasRecompiled();&lt;br/&gt;
  throw LANG_STATEMENT_NEEDS_RECOMPILE...&lt;/p&gt;

&lt;p&gt;And the close code that builds the Xplain data could look something like:&lt;/p&gt;

&lt;p&gt;  if (!getPlanWasRecompiled()) &lt;/p&gt;
{ ... }

&lt;p&gt;Does that seem like it would work?&lt;/p&gt;</comment>
                            <comment id="12920958" author="kristwaa" created="Thu, 14 Oct 2010 14:32:19 +0100"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;Knut and I have briefly discussed this offline, and we came to the same conclusion as you.&lt;br/&gt;
I said I would write a patch for it, but you&apos;re free to take over if you want to &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In any case, I&apos;ll run the test with the index stats prototype and the patch. Writing a reliable regression test for this seems tricky. Any ideas?&lt;/p&gt;</comment>
                            <comment id="12920960" author="bryanpendleton" created="Thu, 14 Oct 2010 14:36:45 +0100"  >&lt;p&gt;I&apos;m not actively working on this, Kristian, but I&apos;ll be &lt;br/&gt;
glad to help review the patch you&apos;re considering. &lt;/p&gt;

&lt;p&gt;Thanks for taking the time to pursue this investigation!&lt;/p&gt;</comment>
                            <comment id="12920974" author="lilywei" created="Thu, 14 Oct 2010 15:30:58 +0100"  >&lt;p&gt;Wow! About reliable regression test for insert into SYSXPLAIN_STATEMENTS table: Could we have a test insert into SYSXPLAIN_STATEMENTS and failed by interrupt or something like that? An incomplete insert action by the test will trigger statement to invalided, won&apos;t it?&lt;/p&gt;</comment>
                            <comment id="12922095" author="kristwaa" created="Mon, 18 Oct 2010 16:04:22 +0100"  >&lt;p&gt;Attaching patches 1a and 2a.&lt;br/&gt;
The former sets the flag explicitly when needed, whereas the latter moves this logic into the cleanupOnError-method and automates setting the flag.&lt;br/&gt;
This is the first time we need this mechanism, so I don&apos;t  know for sure which one is best, but I&apos;m leaning towards patch 2a due to its more general nature.&lt;br/&gt;
Any opinions on that?&lt;/p&gt;

&lt;p&gt;I&apos;ll try writing a test too.&lt;br/&gt;
Manual testing (running XplainStatisticsTest with the auto index stats prototype) indicates that both patches address the reported problem. Running full regression tests now.&lt;/p&gt;</comment>
                            <comment id="12922177" author="lilywei" created="Mon, 18 Oct 2010 18:59:08 +0100"  >&lt;p&gt;+1 on 2a with cleanupOnError-method automates setting the flag for planWasRecompiled. I am a little bit worry that more generic 2a approach might affect performance more than 1a approach. I run XplainStatisticsTest against 2b with auto index stats prototype. It runs fine on my machine.&lt;/p&gt;</comment>
                            <comment id="12922280" author="knutanders" created="Mon, 18 Oct 2010 22:33:04 +0100"  >&lt;p&gt;I agree that 2a sounds like a good approach. Some comments on the patch:&lt;/p&gt;

&lt;p&gt;The name of the flag and the method may cause some confusion. The flag is set if the execution failed because the plan was invalidated. The plan has not necessarily been recompiled at that time, and the recompiling may in fact be performed by the same thread after processing the exception, if no other thread beats it to it. So perhaps rename to planWasInvalidated?&lt;/p&gt;

&lt;p&gt;I&apos;m wondering, though, what&apos;s the intended behaviour when the execution fails for some other reason? Currently we add rows into SYSXPLAIN_STATEMENTS regardless of the statement&apos;s successful execution, but should we have been suppressing all failed executions? If so, we could set the flag unconditionally in cleanupOnError(). But that may be outside the scope of this issue, unless it&apos;s obvious that the current behaviour is unintended.&lt;/p&gt;

&lt;p&gt;Do we know for sure that StandardException.getMessageId() will never return null? Probably... But just to be 100% that we don&apos;t cause a NPE in the error handling, should we turn around message id check in cleanupOnError() and call equals() on LANG_STATEMENT_NEEDS_RECOMPILE, which is known to be non-null?&lt;/p&gt;

&lt;p&gt;The comment in cleanupOnError() has a small typo: s/optimalization/optimization/&lt;/p&gt;</comment>
                            <comment id="12922434" author="bryanpendleton" created="Tue, 19 Oct 2010 05:47:50 +0100"  >&lt;p&gt;Perhaps the method name could be getStatementNeedsRecompile()? Just a thought.&lt;/p&gt;

&lt;p&gt;Regarding the question of how the XPLAIN tables should behave when the&lt;br/&gt;
statement has an error, I don&apos;t recall that being discussed in any detail when&lt;br/&gt;
we were building that feature.&lt;/p&gt;

&lt;p&gt;My quick reaction is that other types of execution failures will suffer from similar&lt;br/&gt;
problems: the runtime statistics information will be at best partial and inaccurate,&lt;br/&gt;
and at worst will cause crashes when we try to access it.&lt;/p&gt;

&lt;p&gt;I think the system would be more robust if it only captured XPLAIN statistics&lt;br/&gt;
on successful statement execution. At some later time, when we have more&lt;br/&gt;
experience with and confidence in the XPLAIN table feature, we could then&lt;br/&gt;
open it up to capturing statistics from failed executions.&lt;/p&gt;</comment>
                            <comment id="12922529" author="kristwaa" created="Tue, 19 Oct 2010 13:03:06 +0100"  >&lt;p&gt;Thanks, Knut and Bryan, for the comments.&lt;/p&gt;

&lt;p&gt;I&apos;d prefer to handle the more general problem with failed executions under a separate issue.&lt;/p&gt;

&lt;p&gt;In patch 2b, I have renamed the field/method, swapped the position of the constant and getMessageId, and written a test.&lt;br/&gt;
The test fails consistently on my machine, but I&apos;m not sure if that is the case on a single-core/-CPU machine. It would be nice if someone else could run the test without the fix. The easiest way to disable the fix is to comment out the following line in impl.sql.conn.GenericStatementContext:&lt;br/&gt;
+                statementWasInvalidated = true;&lt;/p&gt;

&lt;p&gt;It was easiest to make many of the helper methods/structures in XplainStatisticsTest static, I hope that is okay.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12922554" author="kristwaa" created="Tue, 19 Oct 2010 14:35:26 +0100"  >&lt;p&gt;Lily,&lt;/p&gt;

&lt;p&gt;I can&apos;t see any performance issues with this patch. Some of the code is only executed if there is an exception, and the extra if&apos;s are &quot;hidden behind&quot; an existing if-condition (which is mostly false). Let me know if you were thinking of something in particular.&lt;br/&gt;
As for the testing, it may seem as updating the statistics in a loop is good enough to trigger the invalidation just at the right spot. Of course, I can&apos;t do it only once due to the timing requirements, so I made the test run both the select and the invalidation code, in separate threads, in a loop for 10 seconds.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12922556" author="knutanders" created="Tue, 19 Oct 2010 14:36:47 +0100"  >&lt;p&gt;Thanks Kristian. The fix looks good to me. I also ran the test six times without the fix, and it failed twice.&lt;/p&gt;

&lt;p&gt;There&apos;s one small issue with the test that I think could lead to intermittent failures. The main JUnit thread runs a wait loop while the helper threads are running, but when it terminates the loop and checks if everything went well, it doesn&apos;t really know that the helper threads have completed. If they haven&apos;t (for example because one of them used a little longer than expected to start up, or used a little longer in one of the iterations), the asserts in the test may fail.&lt;/p&gt;

&lt;p&gt;I added Thread.sleep(1500) at the beginning of MTSimpleSelect.run() to test this, and then I got a mismatch in the final assertSingleValueResultSet() &amp;#8211; expected: &amp;gt;277&amp;lt;, found: &amp;gt;278&amp;lt;. I think we can avoid this problem by calling Thread.join() on the two helper threads instead of running the wait loop.&lt;/p&gt;</comment>
                            <comment id="12922558" author="kristwaa" created="Tue, 19 Oct 2010 14:44:39 +0100"  >&lt;p&gt;Hi Knut.&lt;/p&gt;

&lt;p&gt;Fair enough. I added 250 ms extra to wait for the threads, but you are correct that that may not be enough in certain cases. I&apos;ll post an updated patch later.&lt;/p&gt;</comment>
                            <comment id="12925084" author="kristwaa" created="Tue, 26 Oct 2010 19:46:05 +0100"  >&lt;p&gt;Attached patch 2c, which uses Thread.join() to wait for the two worker threads.&lt;br/&gt;
Thanks to Knut&apos;s suggestion I did find out one interesting thing; the method to disable XPLAIN in the tests is also exporting all recorded plans to disk as XML. This is why the test suddenly took ~20 seconds when Thread.join() was used.&lt;br/&gt;
Since the connection in use is created specifically for the select thread and goes away anyway, I decided to simply not disable XPLAIN to save some time.&lt;/p&gt;

&lt;p&gt;Patch 2c ready for review.&lt;/p&gt;</comment>
                            <comment id="12925343" author="knutanders" created="Wed, 27 Oct 2010 13:06:05 +0100"  >&lt;p&gt;Thanks for making these changes, Kristian. The patch looks good to me. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12925682" author="lilywei" created="Thu, 28 Oct 2010 05:10:54 +0100"  >&lt;p&gt;+1 for me from all the code perspective and wonderful job on adding the test. However, the time seems to be 8-11% slower when I try MicroAPITest. I am running it on Windows.&lt;/p&gt;</comment>
                            <comment id="12925776" author="knutanders" created="Thu, 28 Oct 2010 12:19:08 +0100"  >&lt;p&gt;I don&apos;t see anything in the patch that should affect the MicroAPITest, but you never know... FWIW, I tried the test on Solaris with Java 1.7.0-ea-b115, and there was no difference to see in my environment when I took the average of ten runs.&lt;/p&gt;</comment>
                            <comment id="12926247" author="kristwaa" created="Fri, 29 Oct 2010 13:23:37 +0100"  >&lt;p&gt;I&apos;m getting mixed feedback on the performance aspect of the patch, but I have decided to commit it and keep an eye on the performance regression tests.&lt;br/&gt;
Committed to trunk with revision 1028716.&lt;/p&gt;

&lt;p&gt;Thanks for investigating, Lily and Knut!&lt;/p&gt;</comment>
                            <comment id="12926556" author="knutanders" created="Sat, 30 Oct 2010 11:14:56 +0100"  >&lt;p&gt;The new test case failed because of a deadlock in one of the nightly tests: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/sparc/1028816-suitesAll_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/sparc/1028816-suitesAll_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caused by: ERROR 40001: A lock could not be obtained due to a deadlock, cycle of locks and waiters is:&lt;br/&gt;
Lock : ROW, SYSSTATISTICS, (11,622)&lt;br/&gt;
  Waiting XID : &lt;/p&gt;
{292152, X} , APP, alter table &quot;APP&quot;.&quot;COUNTRIES&quot; all update statistics &lt;br/&gt;
  Granted XID : {292143, S} &lt;br/&gt;
Lock : ROW, SYSSTATISTICS, (11,623)&lt;br/&gt;
  Waiting XID : {292143, S} , APP, SELECT country from countries WHERE region = &apos;Central America&apos;&lt;br/&gt;
  Granted XID : {292152, X}
&lt;p&gt; &lt;br/&gt;
. The selected victim is XID : 292152.&lt;/p&gt;</comment>
                            <comment id="12926557" author="knutanders" created="Sat, 30 Oct 2010 11:16:05 +0100"  >&lt;p&gt;(Removing the patch available flag since the patch has been committed.)&lt;/p&gt;</comment>
                            <comment id="12927058" author="myrna" created="Mon, 1 Nov 2010 17:50:19 +0000"  >&lt;p&gt;I see the same error with ibm jvms.&lt;/p&gt;</comment>
                            <comment id="12927105" author="knutanders" created="Mon, 1 Nov 2010 19:39:59 +0000"  >&lt;p&gt;I&apos;m wondering if it would make sense to change the isolation level in the code that reads SYSSTATISTICS to read uncommitted. I cannot see any harm in the optimizer reading statistics that haven&apos;t been committed yet, and I think it would prevent deadlocks like the ones we see in this test.&lt;/p&gt;</comment>
                            <comment id="12927323" author="kristwaa" created="Tue, 2 Nov 2010 07:47:10 +0000"  >&lt;p&gt;I&apos;m investigating this issue, and found that it is the insert of a new entry that conflicts with the lookup of statistics.&lt;/p&gt;

&lt;p&gt;Changing to read uncommitted is an option, but it looks like the code in the relevant code path (TableDescriptor and DataDictionaryImpl) isn&apos;t set up to return multiple rows when using read uncommitted. I have talked to Dag about this, which made some changes in that area of the code some years ago, and he believes the restriction was put there to be defensive (I think up until then all access was done using repeatable read).&lt;/p&gt;

&lt;p&gt;A potentially simpler fix could be to access the statistics system table with the NO_WAIT flag and retry if the lock cannot be obtained immediately. Does anyone see any notable drawbacks with this approach?&lt;br/&gt;
I&apos;ll disable the test if it is clear that my efforts today won&apos;t be sufficient to fix it.&lt;/p&gt;</comment>
                            <comment id="12927335" author="knutanders" created="Tue, 2 Nov 2010 09:12:19 +0000"  >&lt;p&gt;As to the NO_WAIT+retry option, if I&apos;ve understood correctly, I don&apos;t think that alone would solve the deadlock issue. The transaction will still hold the locks that it has already acquired, and the other thread(s) involved in the deadlock will still be blocked, so the retry will just run into the same deadlock again. It may work if the transaction releases the locks before retrying, but I think syscs_update_statistics does all its work in the user transaction, and we need to use nested transactions if we want to release exclusive locks in the middle of a user transaction. We&apos;d also need to decide how many times we should retry before giving up, and perhaps also how long to wait between each retry.&lt;/p&gt;</comment>
                            <comment id="12927343" author="kristwaa" created="Tue, 2 Nov 2010 09:42:42 +0000"  >&lt;p&gt;Thanks for the feedback, Knut.&lt;/p&gt;

&lt;p&gt;As for the NO_WAIT + retry option, the statistics in this case are accessed in a nested transaction which could be rollback back. However, I found it hard to guarantee that the relevant methods will always be called in a nested transaction, as they are used in a few more places.&lt;br/&gt;
For clarity, I was thinking of using this option for the case when we are reading the statistics, not when we are inserting/deleting entries. This was based on the assumption that almost all access to the system statistics table will be reads.&lt;/p&gt;

&lt;p&gt;I&apos;ll pursue the approach of modifying the data dictionary code to allow returning more than one row with isolation read uncommitted (this is of course allowed in the general case, but the data dictionary code seems to avoid it). It is not clear to me which issues we are exposed to, if any, by doing that.&lt;/p&gt;</comment>
                            <comment id="12927359" author="knutanders" created="Tue, 2 Nov 2010 11:02:57 +0000"  >&lt;p&gt;Thanks, now I see what you mean. Note that the approach with nested transactions with NO_WAIT and retry in the parent transaction is first and foremost used to resolve self-deadlocks (lock conflicts between a nested tx and its parent tx). In this test, the deadlock involves multiple transactions, and even if a retry may resolve a deadlock, it is still possible that the retry in the parent transaction runs into a similar deadlock.&lt;/p&gt;</comment>
                            <comment id="12927408" author="kristwaa" created="Tue, 2 Nov 2010 13:54:16 +0000"  >&lt;p&gt;I logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4881&quot; title=&quot;Deadlock accessing SYS.SYSSTATISTICS&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4881&quot;&gt;&lt;del&gt;DERBY-4881&lt;/del&gt;&lt;/a&gt; for the deadlock issue. Waiting for confirmation that the fix worked before backporting.&lt;/p&gt;</comment>
                            <comment id="12965254" author="kristwaa" created="Tue, 30 Nov 2010 15:10:42 +0000"  >&lt;p&gt;Backported fix to the 10.6 branch with revision 1040569.&lt;br/&gt;
Marking issue as fixed.&lt;/p&gt;</comment>
                            <comment id="13141062" author="kristwaa" created="Tue, 1 Nov 2011 10:12:12 +0000"  >&lt;p&gt;Closing issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                            <outwardlinks description="requires">
                                        <issuelink>
            <issuekey id="12478877">DERBY-4881</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12457449" name="derby-4849-1a-narrow_fix.diff" size="5188" author="kristwaa" created="Mon, 18 Oct 2010 16:04:22 +0100"/>
                            <attachment id="12457450" name="derby-4849-2a-broad_fix.diff" size="5052" author="kristwaa" created="Mon, 18 Oct 2010 16:04:22 +0100"/>
                            <attachment id="12457543" name="derby-4849-2b-broad_fix_with_test.diff" size="15511" author="kristwaa" created="Tue, 19 Oct 2010 13:03:06 +0100"/>
                            <attachment id="12457544" name="derby-4849-2b-broad_fix_with_test.stat" size="406" author="kristwaa" created="Tue, 19 Oct 2010 13:03:06 +0100"/>
                            <attachment id="12458090" name="derby-4849-2c-broad_fix_with_test.diff" size="15539" author="kristwaa" created="Tue, 26 Oct 2010 19:46:05 +0100"/>
                            <attachment id="12457131" name="derby-4849-xplain_duplicate_stacktrace.txt" size="11045" author="kristwaa" created="Thu, 14 Oct 2010 08:49:57 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Oct 2010 10:06:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24495</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0eo7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36195</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>