<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:38:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2566/DERBY-2566.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2566] OutOfMemory/Sanity-assert failed when updating database</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2566</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;If you run this application:&lt;/p&gt;

&lt;p&gt;-------- 8&amp;lt; -------&lt;br/&gt;
import java.sql.*;&lt;br/&gt;
import java.util.*;&lt;/p&gt;

&lt;p&gt;public class DerbyBug4 {&lt;br/&gt;
    private static String x;&lt;br/&gt;
    private static Random random = new Random(0);&lt;br/&gt;
    private static final int DB_SIZE = 10000;&lt;/p&gt;

&lt;p&gt;    public static void main(String[] args) throws Exception {&lt;br/&gt;
        final StringBuilder sbX = new StringBuilder();&lt;br/&gt;
        for (int i = 0; i &amp;lt; 65535; i++) &lt;/p&gt;
{
            sbX.append(&apos;X&apos;);
        }
&lt;p&gt;        x = sbX.toString();&lt;br/&gt;
        Class.forName(&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;);&lt;br/&gt;
        final Connection con =&lt;br/&gt;
            DriverManager.getConnection(&quot;jdbc:derby:bug;create=true&quot;);&lt;br/&gt;
        createAndFillDatabase(con);&lt;br/&gt;
        updateDatabase(con);&lt;br/&gt;
        con.close();&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    private static void updateDatabase(final Connection con) throws SQLException {&lt;br/&gt;
        final Statement stm = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,&lt;br/&gt;
                ResultSet.CONCUR_UPDATABLE);&lt;br/&gt;
        final ResultSet rs = stm.executeQuery(&quot;SELECT * FROM journal FOR UPDATE&quot;);&lt;br/&gt;
        for (int row = 1; rs.next(); row++) {&lt;br/&gt;
            update(rs, &quot;ip&quot;);&lt;br/&gt;
            update(rs, &quot;sender&quot;);&lt;br/&gt;
            update(rs, &quot;recipient&quot;);&lt;br/&gt;
            update(rs, &quot;mailsender&quot;);&lt;br/&gt;
            update(rs, &quot;mailfrom&quot;);&lt;br/&gt;
            update(rs, &quot;mailto&quot;);&lt;br/&gt;
            update(rs, &quot;cc&quot;);&lt;br/&gt;
            update(rs, &quot;bcc&quot;);&lt;br/&gt;
            update(rs, &quot;replyto&quot;);&lt;br/&gt;
            update(rs, &quot;subject&quot;);&lt;br/&gt;
            update(rs, &quot;attachments&quot;);&lt;br/&gt;
            update(rs, &quot;status&quot;);&lt;br/&gt;
            update(rs, &quot;reason&quot;);&lt;br/&gt;
            rs.updateInt(&quot;totallength&quot;, 0);&lt;br/&gt;
            rs.updateDouble(&quot;spamscore&quot;, 0);&lt;br/&gt;
            rs.updateRow();&lt;br/&gt;
            if (row % 500 == 0) &lt;/p&gt;
{
                System.out.println(&quot;update: &quot; + row);
            }
&lt;p&gt;        }&lt;br/&gt;
        rs.close();&lt;br/&gt;
        stm.close();&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    private static void createAndFillDatabase(Connection con)&lt;br/&gt;
    throws SQLException {&lt;br/&gt;
        final Statement stm = con.createStatement();&lt;br/&gt;
        stm.executeUpdate(&quot;CREATE TABLE journal(&quot;&lt;br/&gt;
                + &quot;ID VARCHAR(20) PRIMARY KEY default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;IP VARCHAR(45) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;SENDER VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;RECIPIENT VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;MAILSENDER VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;MAILFROM VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;MAILTO VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;CC VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;BCC VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;REPLYTO VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;MAILDATE TIMESTAMP default &apos;0001-01-01 00:00:00&apos;,&quot;&lt;br/&gt;
                + &quot;RECEIVEDDATE TIMESTAMP default &apos;0001-01-01 00:00:00&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;SUBJECT VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;TOTALLENGTH BIGINT default 0 NOT NULL,&quot;&lt;br/&gt;
                + &quot;ATTACHMENTS VARCHAR(32000) default &apos;&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;SPAMSCORE DOUBLE NOT NULL,&quot;&lt;br/&gt;
                + &quot;STATUS VARCHAR(11) default &apos;aborted&apos; NOT NULL,&quot;&lt;br/&gt;
                + &quot;REASON VARCHAR(32000) NOT NULL)&quot;);&lt;br/&gt;
        con.commit();&lt;br/&gt;
        stm.close();&lt;/p&gt;

&lt;p&gt;        final PreparedStatement pstm = con.prepareStatement(&lt;br/&gt;
                &quot;INSERT INTO journal VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;);&lt;br/&gt;
        for (int i = 0; i &amp;lt; DB_SIZE; i++) {&lt;br/&gt;
            int col = 1;&lt;br/&gt;
            pstm.setString(col++, Integer.toHexString&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;);&lt;br/&gt;
            doRandom(pstm, col++, 45);&lt;br/&gt;
            doRandom(pstm, col++, 10);&lt;br/&gt;
            doRandom(pstm, col++, 10);&lt;br/&gt;
            doRandom(pstm, col++, 5);&lt;br/&gt;
            doRandom(pstm, col++, 20);&lt;br/&gt;
            doRandom(pstm, col++, 20);&lt;br/&gt;
            doRandom(pstm, col++, 40);&lt;br/&gt;
            doRandom(pstm, col++, 5);&lt;br/&gt;
            doRandom(pstm, col++, 20);&lt;br/&gt;
            pstm.setTimestamp(col++, random.nextBoolean()&lt;br/&gt;
                                     ? new Timestamp(System.currentTimeMillis())&lt;br/&gt;
                                     : null);&lt;br/&gt;
            pstm.setTimestamp(col++, new Timestamp(System.currentTimeMillis()));&lt;br/&gt;
            doRandom(pstm, col++, 80);&lt;br/&gt;
            pstm.setInt(col++, random.nextInt(10000000));&lt;br/&gt;
            doRandom(pstm, col++, 500);&lt;br/&gt;
            pstm.setDouble(col++, random.nextDouble() * 10);&lt;br/&gt;
            doRandom(pstm, col++, 11);&lt;br/&gt;
            doRandom(pstm, col++, 100);&lt;/p&gt;

&lt;p&gt;            pstm.executeUpdate();&lt;br/&gt;
            if (i % 500 == 0) &lt;/p&gt;
{
                con.commit();
                System.out.println(&quot;insert: &quot; + i);
            }
&lt;p&gt;        }&lt;br/&gt;
        con.commit();&lt;br/&gt;
        pstm.close();&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    private static void doRandom(PreparedStatement pstm, int pos, int length)&lt;br/&gt;
    throws SQLException &lt;/p&gt;
{
        pstm.setString(pos, x.substring(0, random.nextInt(length)));
    }

&lt;p&gt;    private static void update(final ResultSet rs, final String field)&lt;br/&gt;
    throws SQLException &lt;/p&gt;
{
        rs.updateString(field, x.substring(0, rs.getString(field).length()));
    }
&lt;p&gt;}&lt;br/&gt;
-------- 8&amp;lt; -------&lt;/p&gt;

&lt;p&gt;you will get this exception:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space&lt;br/&gt;
	at org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.storeRecord(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.UpdateOperation.doMe(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.Xact.logAndDo(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.LoggableActions.doAction(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.UpdateResultSet.open(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(Unknown Source)&lt;br/&gt;
	at DerbyBug4.updateDatabase(DerbyBug4.java:43)&lt;br/&gt;
	at DerbyBug4.main(DerbyBug4.java:19)&lt;/p&gt;


&lt;p&gt;If you enable sanity checks, then this exception occurs:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED statementContext is not expected to equal statementContexts&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popStatementContext(GenericLanguageConnectionContext.java:2095)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(EmbedResultSet.java:3773)&lt;br/&gt;
	at DerbyBug4.updateDatabase(DerbyBug4.java:43)&lt;br/&gt;
	at DerbyBug4.main(DerbyBug4.java:19)&lt;/p&gt;</description>
                <environment>Sun JDK 1.6-b105, Linux 2.6.20&lt;br/&gt;
Sun JDK 1.5, Solaris 10</environment>
        <key id="12367571">DERBY-2566</key>
            <summary>OutOfMemory/Sanity-assert failed when updating database</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="kurti">Kurt Huwig</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Apr 2007 13:50:00 +0100</created>
                <updated>Fri, 21 Jan 2011 17:50:06 +0000</updated>
                            <resolved>Sun, 22 Apr 2007 13:32:18 +0100</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.2.2.1</fixVersion>
                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12490075" author="kristwaa" created="Thu, 19 Apr 2007 15:18:43 +0100"  >&lt;p&gt;Copied the code provided by Kurt in the comment into a file and renamed the class.&lt;br/&gt;
I tried running it with both 10.2.2.0 and current trunk (revision 530343), and they both fail as described.&lt;/p&gt;</comment>
                            <comment id="12490076" author="kristwaa" created="Thu, 19 Apr 2007 15:22:12 +0100"  >&lt;p&gt;Added versions 10.1.3.1 and 10.3 (trunk) to the list of affected versions.&lt;/p&gt;</comment>
                            <comment id="12490107" author="kristwaa" created="Thu, 19 Apr 2007 17:51:16 +0100"  >&lt;p&gt;I would suggest someone with good knowledge of the object allocations down in store/access took a look at the heap for this one.&lt;br/&gt;
One way to do this would be to use the Java SE 6 platform, run Java with -XX:+HeapDumpOnOutOfMemoryError and then use jhat (remember to increase the heap size for jhat with -J-XmxNNNm).&lt;/p&gt;

&lt;p&gt;For a quick reference, here are the topmost results with TYPE_FORWARD_ONLY:&lt;br/&gt;
242175 instances of class [C&lt;br/&gt;
241126 instances of class [[C&lt;br/&gt;
241023 instances of class org.apache.derby.iapi.types.SQLVarchar&lt;br/&gt;
232557 instances of class java.lang.String&lt;br/&gt;
131700 instances of class org.apache.derby.impl.sql.GenericParameter&lt;br/&gt;
21353 instances of class org.apache.derby.impl.store.raw.data.StoredRecordHeader&lt;br/&gt;
18636 instances of class org.apache.derby.iapi.types.SQLLongint&lt;br/&gt;
18126 instances of class org.apache.derby.iapi.types.SQLTimestamp&lt;br/&gt;
17843 instances of class org.apache.derby.iapi.types.SQLDouble&lt;br/&gt;
10343 instances of class [Lorg.apache.derby.iapi.types.DataValueDescriptor;&lt;br/&gt;
9344 instances of class org.apache.derby.impl.sql.execute.ValueRow&lt;br/&gt;
9060 instances of class org.apache.derby.iapi.types.SQLRef&lt;br/&gt;
8866 instances of class [Ljava.util.HashMap$Entry;&lt;br/&gt;
8863 instances of class java.util.HashMap&lt;br/&gt;
8808 instances of class java.util.HashSet&lt;br/&gt;
8781 instances of class org.apache.derby.impl.sql.GenericParameterValueSet&lt;br/&gt;
8781 instances of class [Lorg.apache.derby.iapi.sql.execute.ExecRow;&lt;br/&gt;
8781 instances of class [Lorg.apache.derby.impl.sql.GenericParameter;&lt;br/&gt;
8780 instances of class org.apache.derby.exe.ac07170079x0112x0ab4x5432x0000003d4b882&lt;br/&gt;
8780 instances of class org.apache.derby.impl.sql.execute.CurrentOfResultSet&lt;br/&gt;
7909 instances of class org.apache.derby.impl.store.raw.data.RecordId&lt;br/&gt;
4100 instances of class [B &lt;/p&gt;


&lt;p&gt;For a quick reference, here are the topmost results with TYPE_SCROLL_INSENSITIVE:&lt;br/&gt;
Instance Counts for All Classes (including platform)&lt;br/&gt;
310979 instances of class [[C&lt;br/&gt;
310876 instances of class org.apache.derby.iapi.types.SQLVarchar&lt;br/&gt;
174638 instances of class [C&lt;br/&gt;
162253 instances of class java.lang.String&lt;br/&gt;
84765 instances of class org.apache.derby.impl.sql.GenericParameter&lt;br/&gt;
34000 instances of class [Lorg.apache.derby.iapi.types.DataValueDescriptor;&lt;br/&gt;
33916 instances of class org.apache.derby.iapi.types.SQLTimestamp&lt;br/&gt;
22766 instances of class org.apache.derby.iapi.types.SQLLongint&lt;br/&gt;
22609 instances of class org.apache.derby.iapi.types.SQLDouble&lt;br/&gt;
17113 instances of class [Z&lt;br/&gt;
16958 instances of class org.apache.derby.impl.sql.execute.ValueRow&lt;br/&gt;
14337 instances of class org.apache.derby.impl.store.raw.data.StoredRecordHeader&lt;br/&gt;
11575 instances of class [B&lt;br/&gt;
11306 instances of class org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace&lt;br/&gt;
11303 instances of class org.apache.derby.impl.sql.execute.IndexRow&lt;br/&gt;
11302 instances of class org.apache.derby.iapi.types.SQLRef&lt;br/&gt;
8693 instances of class org.apache.derby.impl.store.raw.data.RecordId&lt;br/&gt;
5786 instances of class org.apache.derby.iapi.services.io.FormatableBitSet&lt;br/&gt;
5744 instances of class [Ljava.util.HashMap$Entry;&lt;br/&gt;
5741 instances of class java.util.HashMap &lt;/p&gt;

&lt;p&gt;If I change the repro to commit for every 500 updates, it runs without error with SCROLL_INSENSITIVE. However, it performs a lot of GC (also some full GC), but maybe this is to be expected in this case?&lt;br/&gt;
Last, it is not clear to me what is going on after the update phase. The repro takes a long time to finish up after all the records have been updated; rs.close - 16 s, stmt.close - 0 s, con.close - 31 s. CPU utilization is 100% in this period. Traversing a long list of some kind?&lt;/p&gt;

&lt;p&gt;Even with a commit for every 500 updates, the repro does not complete with TYPE_FORWARD_ONLY. GC goes crazy...&lt;/p&gt;

&lt;p&gt;Anyone got any ideas about this?&lt;/p&gt;


&lt;p&gt;(FYI, I won&apos;t be working on this issue.)&lt;/p&gt;</comment>
                            <comment id="12490116" author="kurti" created="Thu, 19 Apr 2007 18:16:37 +0100"  >&lt;p&gt;I&apos;ve got a JProfile license, so I can do memory profiling if anyone points me in the right direction.&lt;/p&gt;</comment>
                            <comment id="12490134" author="knutanders" created="Thu, 19 Apr 2007 19:38:56 +0100"  >&lt;p&gt;EmbedResultSet.updateRow() creates an activation which isn&apos;t closed. With the attached patch (closeactivation.diff) I managed to run the repro with no errors. I haven&apos;t run any other tests on the patch.&lt;/p&gt;</comment>
                            <comment id="12490140" author="mikem" created="Thu, 19 Apr 2007 19:54:09 +0100"  >&lt;p&gt;If closing the activation is the correct fix, it looks like there are multiple cases in this file where activation does not get closed:deleteRow(), updateRow(), insertRow(), &lt;/p&gt;</comment>
                            <comment id="12490150" author="knutanders" created="Thu, 19 Apr 2007 20:36:55 +0100"  >&lt;p&gt;I have started derbyall/suites.All with act.close() added to the three methods Mike mentioned. I think the alternative is to do it in CurrentOfResultSet&apos;s finalizer, but it sounds cleaner to me to close the activations explicitly.&lt;/p&gt;</comment>
                            <comment id="12490294" author="knutanders" created="Fri, 20 Apr 2007 10:40:10 +0100"  >&lt;p&gt;Derbyall and suites.All ran cleanly with the patch that closed the activations used in updateRow(), deleteRow() and insertRow().&lt;/p&gt;</comment>
                            <comment id="12490721" author="knutanders" created="Sun, 22 Apr 2007 13:32:18 +0100"  >&lt;p&gt;Committed revision 531170.&lt;/p&gt;</comment>
                            <comment id="12490724" author="kurti" created="Sun, 22 Apr 2007 14:51:22 +0100"  >&lt;p&gt;Will this be ported to 10.2.2.0? I mean Derby should not crash when updating several thoundsands of records, should it?&lt;/p&gt;</comment>
                            <comment id="12490727" author="knutanders" created="Sun, 22 Apr 2007 15:06:36 +0100"  >&lt;p&gt;No, it&apos;s not supposed to crash. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I&apos;ll back-port the fix to 10.2.&lt;/p&gt;</comment>
                            <comment id="12490817" author="knutanders" created="Mon, 23 Apr 2007 07:11:50 +0100"  >&lt;p&gt;Committed to the 10.2 branch with revision 531345.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12355838" name="Derby2566Repro.java" size="4908" author="kristwaa" created="Thu, 19 Apr 2007 15:18:43 +0100"/>
                            <attachment id="12355852" name="closeactivation.diff" size="625" author="knutanders" created="Thu, 19 Apr 2007 19:38:56 +0100"/>
                            <attachment id="12355906" name="closeactivations_v2.diff" size="1194" author="knutanders" created="Fri, 20 Apr 2007 10:40:10 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 19 Apr 2007 14:18:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23106</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0mgn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37457</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>