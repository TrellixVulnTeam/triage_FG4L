<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:21:56 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5947/DERBY-5947.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5947] Factor out common code from generated classes</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5947</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;There&apos;s some code that&apos;s added to all classes generated by Derby&apos;s query compiler. For example, there are three static fields that contain statistics used to check if the plan is stale, and there are getter and setter methods for each of the three fields. The fields and their accessor methods take up 468 bytes in every generated class.&lt;/p&gt;

&lt;p&gt;We should see if we can factor out some of this code so that there is a single shared copy in BaseActivation. Advantages would be: less complicated byte-code generation, less memory occupied by generated classes in the statement cache, smaller disk footprint for stored prepared statements.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12611498">DERBY-5947</key>
            <summary>Factor out common code from generated classes</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 12 Oct 2012 09:39:04 +0100</created>
                <updated>Mon, 17 Jun 2013 10:27:18 +0100</updated>
                            <resolved>Mon, 26 Nov 2012 13:06:02 +0000</resolved>
                                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13475008" author="bryanpendleton" created="Fri, 12 Oct 2012 15:14:15 +0100"  >&lt;p&gt;Byte code generation is one of the most arcane parts of Derby; anything that can reduce&lt;br/&gt;
or simplify the byte code gets a big +1 from me.&lt;/p&gt;

&lt;p&gt;In some ideal future, I&apos;d love to see a version of Derby where there was no byte code&lt;br/&gt;
generation at all; either because we&apos;d eliminated it entirely (in favor of an interpreter?),&lt;br/&gt;
or because it was at least an option and you could choose to execute your queries&lt;br/&gt;
some other way.&lt;/p&gt;

&lt;p&gt;In addition to making it easier for casual users to comprehend the details of Derby&lt;br/&gt;
query execution, this would also, I think, simplify some of our security policies, and&lt;br/&gt;
possibly make it so that we could run Derby in other Java environments, such as Android.&lt;/p&gt;</comment>
                            <comment id="13475048" author="rhillegas" created="Fri, 12 Oct 2012 16:01:53 +0100"  >&lt;p&gt;I agree with Bryan that we should eliminate as much byte code generation as possible. In the early days of Cloudscape, we were generating a lot more byte code for DDL statements--for no good reason. That is why the ConstantActions exist: to eliminate the need to generate obscure byte code for operations which don&apos;t need it.&lt;/p&gt;

&lt;p&gt;I think the major value of byte code generation is that it eliminates the cost of using reflection to call user-written code for functions, procedures, types, and (soon) aggregates. Maybe reflection has become tolerably cheap on modern JVMs and we could reconsider the need for invoking user-written logic via generated byte code.&lt;/p&gt;

&lt;p&gt;I think there are other operations for which we generate byte code in order to eliminate reflection.&lt;/p&gt;</comment>
                            <comment id="13475086" author="knutanders" created="Fri, 12 Oct 2012 16:42:13 +0100"  >&lt;p&gt;I think it&apos;s true that reflection is a lot cheaper now than it was in the early days of Cloudscape. And in Java 7 there are method handles&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, which are supposed to be even faster (as they are strongly typed). There are also library methods &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; that let you chain method handles together and produce new ones that represent compound expressions like if/else, try/catch, manipulation of arguments and return values, etc. So Bryan&apos;s ideal future may not be that far away. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;My biggest problem with the byte code generation is that loading the generated class significantly slows down the SQL compiler. I recently ran an experiment where I replaced the use of org.apache.derby.impl.services.reflect.ReflectLoaderJava2 with the OpenJDK-internal class sun.invoke.anon.AnonymousClassLoader (described in &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; and &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;), which would load the generated classes without registering it in the JVM&apos;s dictionary. This change made compilation of a VALUES 1 statement go more than three times faster, and compilation of a natural join between two system tables went almost twice as fast. It also helped the regression tests, as they do a lot of compilation. So if we could find a portable way to get rid of the code generation/class loading without hurting the runtime performance, I&apos;d be all for it.&lt;/p&gt;

&lt;p&gt;I don&apos;t think trimming down the size of the generated classes will help the compilation performance much, as we still need to load as many classes as before, but hopefully reducing the amount of generated code now will make it easier to eliminate it completely when we&apos;re ready to make that move.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandle.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandle.html&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandles.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandles.html&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://blogs.oracle.com/jrose/entry/anonymous_classes_in_the_vm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://blogs.oracle.com/jrose/entry/anonymous_classes_in_the_vm&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://blog.headius.com/2008/09/first-taste-of-invokedynamic.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blog.headius.com/2008/09/first-taste-of-invokedynamic.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13475093" author="knutanders" created="Fri, 12 Oct 2012 16:51:02 +0100"  >&lt;p&gt;Attaching files that show the generated code for a VALUES 1 statement and for SELECT SCHEMANAME, TABLENAME FROM SYS.SYSSCHEMAS NATURAL JOIN SYS.SYSTABLES.&lt;/p&gt;

&lt;p&gt;They are decompiled to Java code for readability. The decompiler got the base class wrong, it should be BaseActivation instead of CursorActivation, but other than that it did a good job.&lt;/p&gt;

&lt;p&gt;As can be seen from those files, the following fields are in both classes:&lt;/p&gt;

&lt;p&gt;    private static int getExecutionCount;&lt;br/&gt;
    private static Vector getRowCountCheckVector;&lt;br/&gt;
    private static int getStalePlanCheckInterval;&lt;/p&gt;

&lt;p&gt;And so are their six accessor methods.&lt;/p&gt;

&lt;p&gt;Additionally, we could probably factor out&lt;/p&gt;

&lt;p&gt;	this.throwIfClosed(&quot;execute&quot;);&lt;br/&gt;
	this.startExecution();&lt;/p&gt;

&lt;p&gt;from their execute() methods (code which is also duplicated in ConstantActionActivation.execute()).&lt;/p&gt;</comment>
                            <comment id="13476903" author="knutanders" created="Tue, 16 Oct 2012 11:45:14 +0100"  >&lt;p&gt;Attached is a patch (d5947-1a-remove-common-methods.diff) that reduces&lt;br/&gt;
the number of fields and methods in the generated classes. I&apos;m also&lt;br/&gt;
attaching values1-after-1a.txt which shows the decompiled class file&lt;br/&gt;
for a VALUES 1 statement, for comparison with the already attached&lt;br/&gt;
values1-decompiled.txt.&lt;/p&gt;

&lt;p&gt;As can be seen from the decompiled class file, the patch removes the&lt;br/&gt;
three fields getExecutionCount, getRowCountCheckVector and&lt;br/&gt;
getStalePlanCheckInterval, and replaces them with a single constant&lt;br/&gt;
field of type RowCountStats.&lt;/p&gt;

&lt;p&gt;The six accessor methods have been replaced with a single getter&lt;br/&gt;
method which returns the RowCountStats instance.&lt;/p&gt;

&lt;p&gt;For those who care about bits and bytes, the size of each generated&lt;br/&gt;
class was reduced by 139 bytes.&lt;/p&gt;

&lt;p&gt;All the regression tests passed with the patch.&lt;/p&gt;

&lt;p&gt;Patch details:&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added an inner class RowCountStats with three fields that could hold&lt;br/&gt;
  the same information as the three fields that previously were added&lt;br/&gt;
  to each generated class.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added an abstract method for getting the RowCountStats instance. To&lt;br/&gt;
  be implemented by the generated classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed six abstract methods that are no longer implemented by the&lt;br/&gt;
  generated classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed the six accessor methods (the same ones that are removed&lt;br/&gt;
  from the generated classes).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added overrides of two methods that tell the execution code that row&lt;br/&gt;
  counts are of no relevance to constant actions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed code that would add the three fields and their accessor&lt;br/&gt;
  methods to the generated classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added code to create the new static field, a static initializer for&lt;br/&gt;
  it, and a getter method.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;java/engine/org/apache/derby/iapi/reference/ClassName.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added a constant for the name of the new RowCountStats class.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java&lt;br/&gt;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java&lt;br/&gt;
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed the old helper methods used for generating fields and their&lt;br/&gt;
  corresponding accessor methods, as they are no longer used.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added new helper methods to generate static initializers and code to&lt;br/&gt;
  get or set static fields.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13476944" author="knutanders" created="Tue, 16 Oct 2012 12:52:15 +0100"  >&lt;p&gt;Attaching d5947-2a-execute-method.diff, which builds on top of the 1a&lt;br/&gt;
patch by factoring out some common code from the execute() methods of&lt;br/&gt;
the generated classes.&lt;/p&gt;

&lt;p&gt;It also does a little massaging of the code that&apos;s still generated for&lt;br/&gt;
the execute() method to make it more compact.&lt;/p&gt;

&lt;p&gt;The 2a patch reduces the size of each generated class by 91 bytes, or&lt;br/&gt;
230 bytes in total when counting the additional reduction we get from&lt;br/&gt;
the 1a patch.&lt;/p&gt;

&lt;p&gt;The file values1-after-2a.txt shows what a generated class for a&lt;br/&gt;
VALUES 1 statement looks like when the patch is applied.&lt;/p&gt;

&lt;p&gt;Before the patch, there would be an execute() method like this one:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ResultSet execute() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; StandardException {
	&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.throwIfClosed(&lt;span class=&quot;code-quote&quot;&gt;&quot;execute&quot;&lt;/span&gt;);
	&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.startExecution();
	ResultSet resultset;
	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (resultSet == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
	    ResultSet resultset_3_ = fillResultSet();
	    ace50d80a4x013ax6409x6343x000003196d400 var_ace50d80a4x013ax6409x6343x000003196d400_4_
		= &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;;
	    resultset
		= var_ace50d80a4x013ax6409x6343x000003196d400_4_.resultSet
		= resultset_3_;
	} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;
	    resultset = resultSet;
	((NoPutResultSet) resultset).markAsTopResultSet();
	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; resultset;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the patch, there is a shorter doExecute() method instead of the&lt;br/&gt;
original execute() method:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; ResultSet doExecute() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; StandardException {
	ResultSet resultset = resultSet;
	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (resultset == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
	    ace50d80a4x013ax64d6xddb7x00000319bb880 var_ace50d80a4x013ax64d6xddb7x00000319bb880_3_
		= &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;;
	    resultset
		= var_ace50d80a4x013ax64d6xddb7x00000319bb880_3_.resultSet
		= var_ace50d80a4x013ax64d6xddb7x00000319bb880_3_
		      .fillResultSet();
	}
	((NoPutResultSet) resultset).markAsTopResultSet();
	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; resultset;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first two calls have been taken out of the generated method and&lt;br/&gt;
have been moved to a shared execute() method in the super class. The&lt;br/&gt;
shared method calls the generated doExecute() method.&lt;/p&gt;

&lt;p&gt;Additionally, the code in the generated method has been massaged so&lt;br/&gt;
that it only looks up the value of the resultSet field once. That is,&lt;br/&gt;
there is no longer an else branch that does a second look-up.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch. (Ran the full&lt;br/&gt;
suite on JDK 7, and also the lang suite on OJEC to verify that the new&lt;br/&gt;
layout of the generated classes didn&apos;t cause any class format problems&lt;br/&gt;
on the small platforms.)&lt;/p&gt;

&lt;p&gt;Patch details:&lt;/p&gt;

&lt;p&gt;BaseActivation:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added new abstract method, doExecute(), to be implemented by the&lt;br/&gt;
  generated classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added implementation of Activation.execute() which contained the&lt;br/&gt;
  code that was previously added to every generated class. Finally, it&lt;br/&gt;
  calls the abstract doExecute() method to allow the generated classes&lt;br/&gt;
  to add logic to it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Moved the body of the startExecution() method into execute() and&lt;br/&gt;
  removed it, since it&apos;s so small and there are no other callers of it&lt;br/&gt;
  after the changes in this patch.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ConstantActionActivation:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Renamed the execute() method to doExecute() and removed the code&lt;br/&gt;
  that&apos;s identical to the code that now lives in BaseActivation&apos;s&lt;br/&gt;
  execute() method.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ActivationClassBuilder:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Renamed the generated execute() method to doExecute().&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed the code that generated the logic that now lives in&lt;br/&gt;
  BaseActivation.execute().&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;StatementNode:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Updated the generated code to keep the value of the resultSet field&lt;br/&gt;
  on the stack to avoid a second look-up when it&apos;s non-null.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Updated the generated code to push the instance for the getField()&lt;br/&gt;
  operation earlier to avoid the need to swap operands.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13477208" author="dagw" created="Tue, 16 Oct 2012 18:48:40 +0100"  >&lt;p&gt;This looks like good changes to me. Nice to be able to lift that shared code up into BaseActivation.&lt;br/&gt;
The less logic there remains in the generated code, the better. Good to tweak away superfluous bytes in the generated code, too, should help the JIT &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; +1&lt;/p&gt;</comment>
                            <comment id="13477701" author="knutanders" created="Wed, 17 Oct 2012 08:46:55 +0100"  >&lt;p&gt;Thanks, Dag. I&apos;ve committed the 1a and 2a patches to trunk (r1399139 and r1399140).&lt;/p&gt;

&lt;p&gt;I think there is still some code that could be factored out from the generated doExecute() method. Initialization of the BaseActivation.resultSet field is one thing. Maybe the authorization checks could be moved from byte code to Java code as well. I&apos;ll give it a try.&lt;/p&gt;</comment>
                            <comment id="13477911" author="knutanders" created="Wed, 17 Oct 2012 15:18:24 +0100"  >&lt;p&gt;Attaching d5947-3a-init-rs.diff, which moves the initialization of&lt;br/&gt;
BaseActivation&apos;s resultSet field from the generated code to&lt;br/&gt;
BaseActivation.execute().&lt;/p&gt;

&lt;p&gt;The only logic that&apos;s left in the generated doExecute() method is code&lt;br/&gt;
that reinitializes the generated data-structures before each&lt;br/&gt;
execution. Because of this, I renamed the doExecute() method to&lt;br/&gt;
reinit().&lt;/p&gt;

&lt;p&gt;BaseActivation is given an empty reinit() method so that those&lt;br/&gt;
generated classes that don&apos;t need to do any extra reinitialization,&lt;br/&gt;
don&apos;t need to lay out code for an empty method.&lt;/p&gt;

&lt;p&gt;Also, since BaseActivation.execute() now needs to call the generated&lt;br/&gt;
method that creates the result set tree, an abstract method called&lt;br/&gt;
createResultSet() has been added to BaseActivation. This method is&lt;br/&gt;
implemented by all generated classes. It&apos;s the same method as the&lt;br/&gt;
previously private fillResultSet() method, only that it has been&lt;br/&gt;
renamed and made visible from BaseActivation.&lt;/p&gt;

&lt;p&gt;With these changes, the amount of code generated for a VALUES 1&lt;br/&gt;
statement is reduced by yet another 234 bytes (total reduction: 464&lt;br/&gt;
bytes). A VALUES 1 statement doesn&apos;t have to generate a reinit()&lt;br/&gt;
method and benefits from the empty default method in BaseActivation. A&lt;br/&gt;
statement that generates a reinit() method, like the join whose&lt;br/&gt;
generated code I&apos;ve attached before, the reduction will be a little&lt;br/&gt;
smaller; 188 bytes (total: 418 bytes).&lt;/p&gt;

&lt;p&gt;As before, I&apos;m attaching values1-after-3a.txt to show what the&lt;br/&gt;
generated class for a VALUES 1 statement looks like now. I&apos;m also&lt;br/&gt;
attaching natural-join-after-3a.txt to show what the new reinit()&lt;br/&gt;
method looks like.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;

&lt;p&gt;Patch details:&lt;/p&gt;

&lt;p&gt;ActivationClassBuilder:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed generation of code that now lives in BaseActivation.execute().&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In finishExecuteMethod(): Only complete the method if code has been&lt;br/&gt;
  added to it (some simple statements don&apos;t add code to it anymore),&lt;br/&gt;
  so that we don&apos;t have to generate an empty method.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In getCurrentSetup(): Use getter method instead of accessing the&lt;br/&gt;
  method builder directly, since the method builder is generated&lt;br/&gt;
  lazily now and the field could therefore be null.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ExpressionClassBuilder:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Generate the reinit() method lazily to prevent generation of the&lt;br/&gt;
  method if no code is added to it.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;StatementNode:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed generation of code that now lives in BaseActivation.execute().&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changed name and visibility for the fillResultSet() method so that&lt;br/&gt;
  it matches the abstract method in BaseActivation.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BaseActivation:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added logic that used to be in the generated class. Note: In the&lt;br/&gt;
  generated classes, markAsTopResultSet() used to be called on each&lt;br/&gt;
  execution, but the new code only calls it once, when the result set&lt;br/&gt;
  is created. Since markAsTopResultSet() just sets a flag to true, and&lt;br/&gt;
  there is no code that ever changes it back to false, calling it once&lt;br/&gt;
  per result set should be enough.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;DMLModStatementNode:&lt;br/&gt;
DeleteNode:&lt;br/&gt;
InsertNode:&lt;br/&gt;
UpdateNode:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Stop calling getExecuteMethod() unless the method builder is&lt;br/&gt;
  actually going to be used. Otherwise, a reinit() method will be&lt;br/&gt;
  created for all INSERT, UPDATE and DELETE statement, even if no code&lt;br/&gt;
  is added to it and they could use the default implementation in&lt;br/&gt;
  BaseActivation.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13478945" author="knutanders" created="Thu, 18 Oct 2012 13:19:23 +0100"  >&lt;p&gt;The 4a patch moves the authorization check for cursor result sets from generated code to CursorActivation.&lt;/p&gt;

&lt;p&gt;This change removed 414 bytes from the generated class for VALUES 1. (The reduction was mainly class names and method names in the constant pool, not so many instructions were removed.) The total reduction in size for a VALUES 1 statement is now 878 bytes (from 3408 bytes to 2530 bytes).&lt;/p&gt;

&lt;p&gt;Attached is also the decompiled class for VALUES 1 after the 4a patch.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13479949" author="knutanders" created="Fri, 19 Oct 2012 11:52:57 +0100"  >&lt;p&gt;Committed the 3a and 4a patches (r1400023 and r1400024).&lt;/p&gt;

&lt;p&gt;I don&apos;t have any other changes planned for this issue, so I&apos;m marking it as resolved.&lt;/p&gt;</comment>
                            <comment id="13497834" author="knutanders" created="Thu, 15 Nov 2012 08:10:54 +0000"  >&lt;p&gt;The first patch for this issue reduced the amount of generated code needed for maintaining the execution count and row count information used to determine whether it&apos;s time to check if the plan is stale. But now it struck me that those statistics could probably be maintained in the GenericPreparedStatement instance that wraps the generated class. That is, outside of the generated code entirely. Reopening to investigate.&lt;/p&gt;</comment>
                            <comment id="13501217" author="knutanders" created="Tue, 20 Nov 2012 15:02:40 +0000"  >&lt;p&gt;Attaching d5947-5a-row-count-stats.diff, which moves the row count&lt;br/&gt;
statistics from generated code to GenericPreparedStatement.&lt;/p&gt;

&lt;p&gt;It was trickier than I had expected to get the tests to run cleanly&lt;br/&gt;
with the patch. I saw intermittent failures in the upgrade tests. They&lt;br/&gt;
failed because they triggered an assert in store when booting the&lt;br/&gt;
database for hard upgrade:&lt;/p&gt;

&lt;p&gt;Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED initSlotTable consistency check failed:  slot 0 minimumRecordSize = 12 totalSpace = 12 recordPortionLength = 8 reservedCount = 4&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable(StoredPage.java:2253)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.StoredPage.initFromData(StoredPage.java:849)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(CachedPage.java:213)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(FileContainer.java:2540)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.FileContainer.getNextHeadPage(FileContainer.java:2858)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainer.getNextPage(BaseContainer.java:516)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getNextPage(BaseContainerHandle.java:364)&lt;br/&gt;
        at org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtNextPage(GenericScanController.java:499)&lt;br/&gt;
        at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(GenericScanController.java:827)&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(HeapScan.java:238)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSPSPlans(DataDictionaryImpl.java:4638)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(DD_Version.java:555)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(DD_Version.java:250)&lt;br/&gt;
    (...)&lt;/p&gt;

&lt;p&gt;It only happened occasionally, and it looked like the order in which&lt;br/&gt;
the test cases ran determined whether or not the test run succeeded. I&lt;br/&gt;
managed to isolate it further and reliably reproduce it using the&lt;br/&gt;
following steps:&lt;/p&gt;

&lt;p&gt;1) Create an empty database with Derby 10.4.2.0 or earlier&lt;/p&gt;

&lt;p&gt;2) Boot the database with trunk+patch (soft-upgrade) and create two&lt;br/&gt;
tables and a trigger:&lt;/p&gt;

&lt;p&gt;    create table a(x int);&lt;br/&gt;
    create table b(y int);&lt;br/&gt;
    create trigger t after update on b&lt;br/&gt;
        referencing new as n for each row&lt;br/&gt;
        insert into a values (n.y);&lt;/p&gt;

&lt;p&gt;3) Boot the database once with any Derby version 10.6.2.1 or earlier&lt;/p&gt;

&lt;p&gt;4) Boot the database again with trunk, and see it fail with the above&lt;br/&gt;
mentioned assert failure&lt;/p&gt;

&lt;p&gt;The failing assert was added in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4577&quot; title=&quot;An expanding update fails with an nospc.U error.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4577&quot;&gt;&lt;del&gt;DERBY-4577&lt;/del&gt;&lt;/a&gt;. And indeed it only&lt;br/&gt;
reproduces if the downgrade step (3) is performed with a version that&lt;br/&gt;
suffers from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4577&quot; title=&quot;An expanding update fails with an nospc.U error.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4577&quot;&gt;&lt;del&gt;DERBY-4577&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what seems to be happening, is the following:&lt;/p&gt;

&lt;p&gt;When the trigger is created in step (2) with trunk+patch, the trigger&lt;br/&gt;
plan is stored in a column in SYS.SYSSTATEMENTS. The plan is large&lt;br/&gt;
enough to make the row overflow to another page. When downgrading the&lt;br/&gt;
database in step (3), the old Derby version will go through all rows&lt;br/&gt;
in SYS.SYSSTATEMENTS and set the column that holds compiled plans to&lt;br/&gt;
NULL. Apparently, when shrinking the row, the old version runs into&lt;br/&gt;
the condition that caused &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4577&quot; title=&quot;An expanding update fails with an nospc.U error.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4577&quot;&gt;&lt;del&gt;DERBY-4577&lt;/del&gt;&lt;/a&gt;, and ends up setting aside too&lt;br/&gt;
little space for future expansion of the row. When subsequently&lt;br/&gt;
booting the database again with trunk, the assert in StoredPage&lt;br/&gt;
recognizes that this has happened, and fails.&lt;/p&gt;

&lt;p&gt;If a version that includes the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4577&quot; title=&quot;An expanding update fails with an nospc.U error.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4577&quot;&gt;&lt;del&gt;DERBY-4577&lt;/del&gt;&lt;/a&gt; is used in step 3,&lt;br/&gt;
the corruption doesn&apos;t happen, and trunk doesn&apos;t complain when booting&lt;br/&gt;
the database later.&lt;/p&gt;

&lt;p&gt;Although I&apos;ve only seen the assert failure with the patch, I don&apos;t&lt;br/&gt;
think it&apos;s a problem introduced by the patch. It&apos;s just that the new&lt;br/&gt;
and smaller trigger plans happen to make the SYSSTATEMENT rows&lt;br/&gt;
produced by these test cases of the exact right size to hit&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4577&quot; title=&quot;An expanding update fails with an nospc.U error.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4577&quot;&gt;&lt;del&gt;DERBY-4577&lt;/del&gt;&lt;/a&gt;. Even without the patch, it might be possible to construct&lt;br/&gt;
a SYSSTATEMENTS table that trips over the same problem.&lt;/p&gt;

&lt;p&gt;The patch works around this problem by forcing the problematic test&lt;br/&gt;
cases to run in a known good order. I&apos;ve run the full upgrade test&lt;br/&gt;
suite successfully ten times with the workaround. Without the&lt;br/&gt;
workaround it would fail approximately every other run (with Java 7,&lt;br/&gt;
that is, where the test ordering varies between runs).&lt;/p&gt;


&lt;p&gt;Finally, a description of what the patch does:&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/reference/ClassName.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java&lt;br/&gt;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java&lt;br/&gt;
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java&lt;/p&gt;

&lt;p&gt;Removed code added by the 1a patch for manipulating static fields and&lt;br/&gt;
static initializers for the row count statistics.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java&lt;/p&gt;

&lt;p&gt;Added fields to hold execution count, result set row count and stale&lt;br/&gt;
plan interval for a statement.&lt;/p&gt;

&lt;p&gt;The fields were put in an inner class instead of directly inside&lt;br/&gt;
GenericPreparedStatement. This was done because triggers clone the&lt;br/&gt;
GenericPreparedStatement on each execution, so the statistics needed&lt;br/&gt;
to be shared among multiple GPS instances. For all other statements&lt;br/&gt;
than triggers, the statistics instance is private to one GPS instance.&lt;/p&gt;

&lt;p&gt;Also, since the lifespan of a GPS instance is longer than that of the&lt;br/&gt;
generated activation class, code to reset the statistics on&lt;br/&gt;
recompilation was added.&lt;/p&gt;

&lt;p&gt;org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java&lt;/p&gt;

&lt;p&gt;Interface methods that allowed calls to the new methods in&lt;br/&gt;
GenericPreparedStatement from BaseActivation.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;/p&gt;

&lt;p&gt;Removed inner class that held row count statistics.&lt;/p&gt;

&lt;p&gt;Made shouldWeCheckRowCounts() and informOfRowCount() save the&lt;br/&gt;
statistics in the GenericPreparedStatement instead of the now removed&lt;br/&gt;
inner class.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java&lt;/p&gt;

&lt;p&gt;Removed a method that&apos;s no longer used.&lt;/p&gt;

&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java&lt;/p&gt;

&lt;p&gt;Made the tests run in a fixed order, for reasons explained above.&lt;/p&gt;</comment>
                            <comment id="13503767" author="knutanders" created="Mon, 26 Nov 2012 13:06:02 +0000"  >&lt;p&gt;Committed revision 1413586. Resolving the issue again.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12644558">DERBY-6203</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12612672">DERBY-5956</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12549283" name="d5947-1a-remove-common-methods.diff" size="24150" author="knutanders" created="Tue, 16 Oct 2012 11:45:14 +0100"/>
                            <attachment id="12549292" name="d5947-2a-execute-method.diff" size="10175" author="knutanders" created="Tue, 16 Oct 2012 12:52:15 +0100"/>
                            <attachment id="12549512" name="d5947-3a-init-rs.diff" size="19268" author="knutanders" created="Wed, 17 Oct 2012 15:18:24 +0100"/>
                            <attachment id="12549679" name="d5947-4a-authorization.diff" size="3528" author="knutanders" created="Thu, 18 Oct 2012 13:19:23 +0100"/>
                            <attachment id="12554350" name="d5947-5a-row-count-stats.diff" size="31474" author="knutanders" created="Tue, 20 Nov 2012 15:02:40 +0000"/>
                            <attachment id="12549514" name="natural-join-after-3a.txt" size="3563" author="knutanders" created="Wed, 17 Oct 2012 15:18:24 +0100"/>
                            <attachment id="12548906" name="natural-join-decompiled.txt" size="4633" author="knutanders" created="Fri, 12 Oct 2012 16:51:02 +0100"/>
                            <attachment id="12549284" name="values1-after-1a.txt" size="2331" author="knutanders" created="Tue, 16 Oct 2012 11:45:14 +0100"/>
                            <attachment id="12549293" name="values1-after-2a.txt" size="2271" author="knutanders" created="Tue, 16 Oct 2012 12:52:15 +0100"/>
                            <attachment id="12549513" name="values1-after-3a.txt" size="1755" author="knutanders" created="Wed, 17 Oct 2012 15:18:24 +0100"/>
                            <attachment id="12549680" name="values1-after-4a.txt" size="1682" author="knutanders" created="Thu, 18 Oct 2012 13:19:23 +0100"/>
                            <attachment id="12548905" name="values1-decompiled.txt" size="2834" author="knutanders" created="Fri, 12 Oct 2012 16:51:02 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 12 Oct 2012 14:14:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>247919</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy305b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>51339</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>