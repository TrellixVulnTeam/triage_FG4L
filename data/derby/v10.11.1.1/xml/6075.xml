<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:14:25 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6075/DERBY-6075.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6075] Use modern collections in impl/sql/compile</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6075</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The code in the org.apache.derby.impl.sql.compile package predates the Java Collections Framework and uses old-style collections like java.util.Vector and java.util.Hashtable. Since the old-style collection classes are used in many method signatures, it&apos;s difficult to use modern collection classes when adding new code.&lt;/p&gt;

&lt;p&gt;I suggest we switch to using interfaces (like java.util.List and java.util.Map) instead of specific classes in the signatures, so that we have more flexibility in choosing the right collection class for the job.&lt;/p&gt;

&lt;p&gt;Only changing the signatures would allow us to continue using Vector and Hashtable, since they implement the interfaces. However, I think it would be good to switch to ArrayList and HashMap in a second step. The instances in impl/sql/compile are not shared between threads, so we don&apos;t need the synchronization provided by the old-style classes. Switching to unsynchronized classes may make compilation slightly faster.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12632805">DERBY-6075</key>
            <summary>Use modern collections in impl/sql/compile</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                    </labels>
                <created>Mon, 18 Feb 2013 09:30:32 +0000</created>
                <updated>Thu, 4 Jul 2013 09:30:10 +0100</updated>
                            <resolved>Thu, 4 Jul 2013 09:30:10 +0100</resolved>
                                    <version>10.10.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13580520" author="kristwaa" created="Mon, 18 Feb 2013 09:38:01 +0000"  >&lt;p&gt;+1 on the switch to using interfaces in the signatures&lt;/p&gt;</comment>
                            <comment id="13580579" author="knutanders" created="Mon, 18 Feb 2013 12:34:15 +0000"  >&lt;p&gt;Here&apos;s a first patch (1a) that updates the signature of CollectNodesVisitor.getList() to return List instead of Vector. It also changes the visitor to use an ArrayList instead of a Vector, and reorganizes CNV&apos;s constructors so that all the fields can be declared final.&lt;/p&gt;

&lt;p&gt;Because of the signature change, many callers had to switch from using Enumerator to Iterator, or from elementAt() to get(). Many callers already used the List interface methods of the Vector class and didn&apos;t need any change.&lt;/p&gt;

&lt;p&gt;The patch also clarifies the javadoc of the getList() method by stating that it never returns null. This allows us to remove a redundant null check in GenerationClauseNode.findReferencedColumns().&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13580673" author="bryanpendleton" created="Mon, 18 Feb 2013 15:48:29 +0000"  >&lt;p&gt;&amp;gt; I suggest we switch to using interfaces (like java.util.List and java.util.Map) instead of specific classes in the signatures&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;&amp;gt; switch from using Enumerator to Iterator&lt;/p&gt;

&lt;p&gt;Does this have implications for ConcurrentModificationException?&lt;/p&gt;</comment>
                            <comment id="13581126" author="knutanders" created="Tue, 19 Feb 2013 08:35:15 +0000"  >&lt;p&gt;Hi, Bryan. I don&apos;t think the iterators in the 1a patch will cause ConcurrentModificationException. They all access collections that are private to a single thread, so CME could only happen if the collection is modified by the thread that is iterating over it. As far as I can see, none of the changed loops modify the underlying collection, so I think these changes should be safe. It&apos;s worth keeping an open eye on the Enumeration-&amp;gt;Iterator transitions in future patches on this issue, though, as they may indeed cause CME if we&apos;re not careful. Thanks.&lt;/p&gt;</comment>
                            <comment id="13581278" author="knutanders" created="Tue, 19 Feb 2013 13:48:09 +0000"  >&lt;p&gt;Attaching d6075-2a-bindExpression.diff, which is built on top of the 1a patch.&lt;/p&gt;

&lt;p&gt;The patch changes the signatures of&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ValueNode.bindExpression(FromList, SubqueryList, Vector)&lt;/li&gt;
	&lt;li&gt;ValueNode.bindExpression(FromList, SubqueryList, Vector, boolean)&lt;/li&gt;
	&lt;li&gt;JavaValueNode.bindExpression(FromList, SubqueryList, Vector)&lt;/li&gt;
	&lt;li&gt;all overrides of the above methods&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;to use java.util.List instead of java.util.Vector.&lt;/p&gt;

&lt;p&gt;The patch only changes method signatures. The actual arguments passed to the bindExpression() methods are still of type java.util.Vector.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the 1a and the 2a patches.&lt;/p&gt;</comment>
                            <comment id="13582079" author="knutanders" created="Wed, 20 Feb 2013 10:34:26 +0000"  >&lt;p&gt;Committed 1a to trunk, revision 1448064.&lt;br/&gt;
Committed 2a to trunk, revision 1448065.&lt;/p&gt;</comment>
                            <comment id="13582524" author="knutanders" created="Wed, 20 Feb 2013 21:17:43 +0000"  >&lt;p&gt;I missed two javadoc warnings. The attached 3a patch fixes those.&lt;/p&gt;

&lt;p&gt;Committed revision 1448421.&lt;/p&gt;</comment>
                            <comment id="13583098" author="knutanders" created="Thu, 21 Feb 2013 10:48:00 +0000"  >&lt;p&gt;The attached 4a patch changes the signatures of CompilerContext.setParameterList(Vector), CompilerContext.getParameterList() and ResultColumnList.bindExpressions(FromList, SubqueryList, Vector), and of overriding methods, so that they use List instead of Vector. It also changes signatures of methods called from these methods, as they must also accept List.&lt;/p&gt;

&lt;p&gt;Most of the affected code already used the List interface methods. Only a single call to Vector.copyInto() had to be changed to List.toArray(). I also took the opportunity to change a few occurrences of size() == 0 to isEmpty().&lt;/p&gt;

&lt;p&gt;The patch does not change the actual type of the objects passed to these methods. They are still of type java.util.Vector.&lt;/p&gt;

&lt;p&gt;All the regression tests passed.&lt;/p&gt;</comment>
                            <comment id="13583973" author="dagw" created="Fri, 22 Feb 2013 06:50:09 +0000"  >&lt;p&gt;Changes look good to me. +1&lt;/p&gt;</comment>
                            <comment id="13584232" author="knutanders" created="Fri, 22 Feb 2013 12:49:24 +0000"  >&lt;p&gt;Thanks, Dag!&lt;/p&gt;

&lt;p&gt;Committed revision 1449020.&lt;/p&gt;</comment>
                            <comment id="13586952" author="knutanders" created="Tue, 26 Feb 2013 09:01:53 +0000"  >&lt;p&gt;Attaching d6075-5a-ordering.diff, which makes the classes RowOrderingImpl and ColumnOrdering use java.util.ArrayList instead of java.util.Vector to store ordering information internally. The vectors are only accessed during compilation, which is single-threaded so the synchronization is not needed.&lt;/p&gt;

&lt;p&gt;I took the opportunity to do the following cleanup in those two classes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Replaced checks for size() == 0 with isEmpty()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Replaced the body of ColumnOrdering.hasTable() with a simple call to List.contains()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed redundant size() check at the beginning of ColumnOrdering.hasAnyOtherTable()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Replaced allocation of fresh Integer objects for table numbers and column numbers with calls to ReuseFactory. Since table and column numbers tend to be small, they can almost always be taken from ReuseFactory&apos;s cache. (Eventually, we&apos;ll probably replace ReuseFactory.getInteger(int) with Integer.valueOf(int) and use the JVM&apos;s cache, but we need to make Java 5 the minimum platform before we can do that.)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13589344" author="knutanders" created="Thu, 28 Feb 2013 08:31:51 +0000"  >&lt;p&gt;Committed the 5a patch to trunk, revision 1451125.&lt;/p&gt;

&lt;p&gt;Attaching a new patch, d6075-6a-DMLModStatementNode.diff, which removes all usages of Vector in DMLModStatementNode and replaces them with ArrayList. None of the Vectors used in that class have a life span that exceeds the method in which they are created, and they are not visible to other threads, so it should be safe to replace them with unsynchronized ArrayLists.&lt;/p&gt;

&lt;p&gt;All regression tests passed.&lt;/p&gt;</comment>
                            <comment id="13592299" author="knutanders" created="Mon, 4 Mar 2013 15:46:12 +0000"  >&lt;p&gt;Committed the 6a patch to trunk, revision 1452350.&lt;/p&gt;</comment>
                            <comment id="13592310" author="knutanders" created="Mon, 4 Mar 2013 16:05:02 +0000"  >&lt;p&gt;Attaching d6075-7a-more-signatures.diff, which changes the rest of the fields and methods (that I could find) in the impl/sql/compile package to use List instead of Vector.&lt;/p&gt;

&lt;p&gt;Apart from the pure signature changes, the patch changes some occurrences of:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Vector.copyInto() -&amp;gt; List.toArray()&lt;/li&gt;
	&lt;li&gt;Vector.elementAt() -&amp;gt; List.get()&lt;/li&gt;
	&lt;li&gt;Vector.addElement() -&amp;gt; List.add()&lt;/li&gt;
	&lt;li&gt;Enumerator -&amp;gt; Iterator&lt;/li&gt;
	&lt;li&gt;size() == 0 -&amp;gt; isEmpty()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The Enumerator that&apos;s changed to an Iterator walks a Vector that&apos;s created by the parser and never modified after it leaves the parser, so switching to Iterator should not create a risk for ConcurrentModificationExceptions.&lt;/p&gt;

&lt;p&gt;The patch does not change any Vector instances to ArrayLists. It changes the signatures only.&lt;/p&gt;</comment>
                            <comment id="13594531" author="knutanders" created="Wed, 6 Mar 2013 09:40:58 +0000"  >&lt;p&gt;Committed the 7a patch to trunk, revision 1453240.&lt;/p&gt;</comment>
                            <comment id="13594585" author="knutanders" created="Wed, 6 Mar 2013 10:35:31 +0000"  >&lt;p&gt;Attaching d6075-8a-local-hashtables.diff which changes some Hashtables to HashSets. All the Hashtables were private to the methods in which they were created, so Hashtable synchronization were not necessary. Also, only the hash keys were ever looked at, so they could be replaced with HashSets rather than HashMaps.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13595542" author="dagw" created="Thu, 7 Mar 2013 04:39:54 +0000"  >&lt;p&gt;Should be a safe patch; makes code more readable, too. +1&lt;br/&gt;
I saw you simplified some of the javadoc comments to remove the statement that the hash table (now set) is for &quot;enforcing uniqueness&quot;; intentional?&lt;/p&gt;</comment>
                            <comment id="13595720" author="knutanders" created="Thu, 7 Mar 2013 09:37:27 +0000"  >&lt;p&gt;Thanks, Dag! I added the extra information to the @param tags and committed revision 1453745.&lt;/p&gt;</comment>
                            <comment id="13595740" author="knutanders" created="Thu, 7 Mar 2013 10:13:40 +0000"  >&lt;p&gt;Attaching d6075-9a-hashtable-fields.diff which removes the last three&lt;br/&gt;
Hashtables in the package. They are all used as sets, so they&apos;re&lt;br/&gt;
replaced with HashSets rather than HashMaps.&lt;/p&gt;

&lt;p&gt;None of them require synchronization, as they are not shared between&lt;br/&gt;
threads, so using HashSets should be safe. Details:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DMLModStatementNode.graphHashTable is created and used during the&lt;br/&gt;
  single-threaded bind phase only (used to track FK dependencies for&lt;br/&gt;
  cascading deletes)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Predicate.searchClauseHT is only used during query preprocessing to&lt;br/&gt;
  calculate the transitive closure for WHERE clauses&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;VTIDeferModPolicy.columns lives only for the duration of a call to&lt;br/&gt;
  the deferIt() method, during which it does not escape to other&lt;br/&gt;
  threads&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13596959" author="knutanders" created="Fri, 8 Mar 2013 09:13:21 +0000"  >&lt;p&gt;Committed revision 1454296.&lt;/p&gt;</comment>
                            <comment id="13596968" author="knutanders" created="Fri, 8 Mar 2013 09:25:27 +0000"  >&lt;p&gt;Attaching d6075-10a-aggregate-vectors.diff which changes the aggregateVector arguments passed to various bind methods from Vectors to ArrayLists. Those instances are created by the top-level caller and passed (recursively) down to sub-nodes in bindExpression() calls, where they are populated so that the top-level caller can inspect whether the sub-nodes contain aggregates. The Vectors are never seen by other threads, so replacing them with unsynchronized ArrayLists should be safe.&lt;/p&gt;</comment>
                            <comment id="13598512" author="dagw" created="Mon, 11 Mar 2013 03:59:20 +0000"  >&lt;p&gt;Reviewing d6075-9a-hashtable-fields.diff. Saw you also got rid of some casts. +1&lt;/p&gt;

</comment>
                            <comment id="13598517" author="dagw" created="Mon, 11 Mar 2013 04:13:02 +0000"  >&lt;p&gt;Reviewing d6075-10a-aggregate-vectors.diff &lt;/p&gt;

&lt;p&gt;You changed type of aggregateVector: maybe change its name now that it is no longer a vector?&lt;br/&gt;
+1&lt;/p&gt;</comment>
                            <comment id="13598631" author="knutanders" created="Mon, 11 Mar 2013 08:18:42 +0000"  >&lt;p&gt;Thanks for reviewing the patches, Dag. I agree that we should get rid of the Hungarian notation for the aggregate vectors. I&apos;ll add a note to self to go through them later and rename them to &quot;aggregates&quot;. I&apos;ve tried to do that for some of the other variables whose types have changes, but there were just so many aggregate vectors (not only the variables changed in the latest patch, but also the parameters to bindExpression() methods in all the node classes), so I left them with their old name for now.&lt;/p&gt;

&lt;p&gt;Committed revision 1455045.&lt;/p&gt;</comment>
                            <comment id="13598917" author="knutanders" created="Mon, 11 Mar 2013 15:54:36 +0000"  >&lt;p&gt;The attached 11a patch removes the remaining Vectors and replaces them with ArrayLists. One exception is the two Vectors storeCostControllers and storeCostConglomIds in CompilerContextImpl. They were replaced by a single HashMap, as the latter Vector is only used for looking up elements in the former.&lt;/p&gt;

&lt;p&gt;As far as I have been able to see, none of the Vectors are shared between threads, so it should be safe to replace them with unsynchronized collections.&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13598919" author="knutanders" created="Mon, 11 Mar 2013 15:58:45 +0000"  >&lt;p&gt;The 11a patch also touches some variables that have &quot;vector&quot; in their names. I&apos;ll revisit the naming of those variables when renaming the aggregate vectors later.&lt;/p&gt;</comment>
                            <comment id="13600005" author="knutanders" created="Tue, 12 Mar 2013 13:01:27 +0000"  >&lt;p&gt;Committed revision 1455518.&lt;/p&gt;</comment>
                            <comment id="13600024" author="knutanders" created="Tue, 12 Mar 2013 13:21:36 +0000"  >&lt;p&gt;CompilerContextImpl has a privilege type stack which is backed by a java.util.Stack instance. Stack extends Vector, and is therefore synchronized. The compiler context is private to the thread that performs the compilation, so a synchronized collection is not required. The attached patch (d6075-12a-stack.diff) changes the Stack to an ArrayList.&lt;/p&gt;

&lt;p&gt;All tests ran cleanly.&lt;/p&gt;

&lt;p&gt;Committed revision 1455523.&lt;/p&gt;</comment>
                            <comment id="13600038" author="knutanders" created="Tue, 12 Mar 2013 13:41:10 +0000"  >&lt;p&gt;Another kind of synchronized collection used in impl/sql/compile is Properties (extends Hashtable). Those instances are also used by other packages, like in the store, so I&apos;m not planning to change them to Maps as part of this issue.&lt;/p&gt;

&lt;p&gt;Just one small cleanup patch related to Properties: d6075-13a-unused-properties.diff removes import statements for java.util.Properties in classes where Properties is not used. I also found that calls from CompilerContextImpl to TransactionController.openSortCostController() passed a Properties argument that was always null. Since openSortCostController() in fact ignores that parameter, I removed it from the method signature.&lt;/p&gt;

&lt;p&gt;All tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13601067" author="knutanders" created="Wed, 13 Mar 2013 12:26:53 +0000"  >&lt;p&gt;Committed the 13a patch to trunk, revision 1455902.&lt;/p&gt;</comment>
                            <comment id="13601079" author="knutanders" created="Wed, 13 Mar 2013 12:44:47 +0000"  >&lt;p&gt;There are also some uses of Vector in sqlgrammar.jj, which generates classes that live in the impl/sql/compile package. Those vectors are private to the thread that&apos;s parsing the SQL statement, as far as I can tell, so it should be safe to replace them with ArrayLists.&lt;/p&gt;

&lt;p&gt;Before doing that, I&apos;m attaching a cleanup patch (d6075-14a-dead-syntax.diff) which removes unneeded import statements from sqlgrammar.jj and removes some dead code that uses vectors.&lt;/p&gt;

&lt;p&gt;The removed dead code seems to be there in order to support syntax for declaring columns nullable explicitly. There is however no such syntax in Derby currently (you can only declare them nullable implicitly by skipping the NOT NULL constraint), so the following fields and the code that accesses them are removed:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;explicitNotNull (a boolean)&lt;/li&gt;
	&lt;li&gt;explicitNull (a boolean)&lt;/li&gt;
	&lt;li&gt;explicitlyNullableColumnsList (a Vector)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The purpose of the fields is to check whether a column is declared explicitly nullable and not nullable at the same time, and raise an error if so happens. Since there is no way to declare a column explicitly nullable (evidence: there is no code that sets explicitlyNull to true, and there is no code that adds elements to explicitlyNullableColumnsList), that&apos;s an impossible situation.&lt;/p&gt;

&lt;p&gt;In addition to removing the dead code from sqlgrammar.jj, the patch removes the unused SQLState and the corresponding error message, including translations.&lt;/p&gt;

&lt;p&gt;All tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13601103" author="knutanders" created="Wed, 13 Mar 2013 13:07:30 +0000"  >&lt;p&gt;Attaching d6075-15a-sqlgrammar-vectors.diff, which must be applied on top of the 14a patch. This patch replaces the remaining Vectors in sqlgrammar.jj with ArrayLists. It also removes a couple of unused variables and unused methods.&lt;/p&gt;

&lt;p&gt;All regression tests passed.&lt;/p&gt;</comment>
                            <comment id="13601163" author="bryanpendleton" created="Wed, 13 Mar 2013 14:07:54 +0000"  >&lt;p&gt;&amp;gt; evidence: there is no code that sets explicitlyNull to true, and there is no code that adds elements to explicitlyNullableColumnsList&lt;/p&gt;

&lt;p&gt;Furthermore, tests.lang.NullsTest.java contains a number of tests which attempt&lt;br/&gt;
various combinations of syntax to try to explicitly declare columns as nullable,&lt;br/&gt;
all of which assert that a syntax error is returned.&lt;/p&gt;</comment>
                            <comment id="13601224" author="knutanders" created="Wed, 13 Mar 2013 15:15:27 +0000"  >&lt;p&gt;Thanks for pointing me to NullsTest, Bryan. That test contains lots of negative test cases to verify that explicit nullability cannot be used in combination with explicit NOT NULL or PRIMARY KEY. However, there is no test case to verify that explicit nullability alone is disallowed.&lt;/p&gt;

&lt;p&gt;I guess this means declaring a column explicitly nullable used to be allowed in some distant past, and that the test cases in NullsTest were written back then.&lt;/p&gt;

&lt;p&gt;Attaching d6075-16a-negative-test.diff which adds negative test cases to verify that&lt;br/&gt;
    create table a(a1 int null)&lt;br/&gt;
and&lt;br/&gt;
    alter table a add column a3 int null&lt;br/&gt;
fail with syntax errors.&lt;/p&gt;

&lt;p&gt;The new negative test cases pass both with and without the patches that remove the dead code from sqlgrammar.&lt;/p&gt;

&lt;p&gt;Committed the 16a patch to trunk, revision 1455992.&lt;/p&gt;</comment>
                            <comment id="13602152" author="knutanders" created="Thu, 14 Mar 2013 09:03:19 +0000"  >&lt;p&gt;Committed the 14a patch to trunk, revision 1456369.&lt;br/&gt;
Committed the 15a patch to trunk, revision 1456370.&lt;/p&gt;</comment>
                            <comment id="13607607" author="knutanders" created="Wed, 20 Mar 2013 13:38:33 +0000"  >&lt;p&gt;The attached patch (d6075-17a-rename-aggregate-vectors.diff) renames all parameters, fields and variables called aggregateVector to aggregates, and also updates references to them in comments. In SelectNode.init() the patch removes the unused aggregateVector parameter.&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13608702" author="dagw" created="Thu, 21 Mar 2013 06:46:51 +0000"  >&lt;p&gt;Thanks for more simplifications and cleanups, Knut! Out of curiosity, you have removed a lot of code that uses synchronization now, is it measurable?&lt;/p&gt;</comment>
                            <comment id="13608803" author="knutanders" created="Thu, 21 Mar 2013 10:03:30 +0000"  >&lt;p&gt;I haven&apos;t run any performance tests. I doubt that the patches have had any measurable effect since the monitors were completely uncontended, and any small improvement would probably be shadowed by class loading, which seems to be the big bottleneck when compiling statements.&lt;/p&gt;</comment>
                            <comment id="13608890" author="knutanders" created="Thu, 21 Mar 2013 12:59:55 +0000"  >&lt;p&gt;Committed the 17a patch to trunk with revision 1459276.&lt;/p&gt;</comment>
                            <comment id="13610341" author="knutanders" created="Fri, 22 Mar 2013 14:46:10 +0000"  >&lt;p&gt;Dag asked if there was any measurable performance improvement, so I ran a quick and completely unscientific experiment with the attached Compile.java class.&lt;/p&gt;

&lt;p&gt;The class repeatedly compiles the following statement:&lt;/p&gt;

&lt;p&gt;    select max&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from (values 1,2,3) v&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;(Why did I choose exactly this statement? Firstly, it doesn&apos;t touch any physical tables, so it shouldn&apos;t need to involve store or dictionary when compiling. Secondly, it calls an aggregate function, so I presume it will use the data structure previously known as aggregateVector, and we get to exercise at least some of the new code.)&lt;/p&gt;

&lt;p&gt;The statement cache is disabled, so that the statement is actually compiled each time prepareStatement() is called.&lt;/p&gt;

&lt;p&gt;Running the test several times to filter out variance/noise, I seem to be getting about 15-20% better results with 10.10.1.1 than with 10.9.1.0. (Test environment: Java 7, Solaris 11.)&lt;/p&gt;

&lt;p&gt;Now, there are many other changes between 10.9.1.0 and 10.10.1.1, so there&apos;s no evidence that changing the collections improved compilation speed measurably. But at the very least it looks like we&apos;re heading in the right direction. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13611497" author="bryanpendleton" created="Sat, 23 Mar 2013 01:03:18 +0000"  >&lt;p&gt;&amp;gt; I seem to be getting about 15-20% better results&lt;/p&gt;

&lt;p&gt;That&apos;s great news!&lt;/p&gt;

&lt;p&gt;But, can I say that I&apos;m skeptical?&lt;/p&gt;

&lt;p&gt;That seems like a dramatically larger change that I had anticipated.&lt;/p&gt;</comment>
                            <comment id="13612036" author="knutanders" created="Sun, 24 Mar 2013 07:51:54 +0000"  >&lt;p&gt;I agree. I suspect &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5947&quot; title=&quot;Factor out common code from generated classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5947&quot;&gt;&lt;del&gt;DERBY-5947&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6003&quot; title=&quot;Create row templates outside of the generated code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6003&quot;&gt;&lt;del&gt;DERBY-6003&lt;/del&gt;&lt;/a&gt; are more likely sources for the improvement (if the numbers are correct, that is), as smaller generated classes should mean less work to generate them, and less gc work when reclaiming the space.&lt;/p&gt;</comment>
                            <comment id="13612457" author="knutanders" created="Mon, 25 Mar 2013 08:16:49 +0000"  >&lt;p&gt;I reran the experiment with more data points and more iterations (ran the test 100 times per revision). Averages are shown below. Numbers are in milliseconds, so lower is better.&lt;/p&gt;

&lt;p&gt;10.9.1.0   -   12936 (baseline)&lt;br/&gt;
r1398952   -   13017 (baseline + 0.6%)  - before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5947&quot; title=&quot;Factor out common code from generated classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5947&quot;&gt;&lt;del&gt;DERBY-5947&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
r1412577   -   12402 (baseline - 4.1%)  - after &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5947&quot; title=&quot;Factor out common code from generated classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5947&quot;&gt;&lt;del&gt;DERBY-5947&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
r1413586   -   11761 (baseline - 9.1%)  - before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6003&quot; title=&quot;Create row templates outside of the generated code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6003&quot;&gt;&lt;del&gt;DERBY-6003&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
r1426151   -   11275 (baseline - 12.8%) - after &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6003&quot; title=&quot;Create row templates outside of the generated code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6003&quot;&gt;&lt;del&gt;DERBY-6003&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
r1448025   -   11065 (baseline - 14.5%) - before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6075&quot; title=&quot;Use modern collections in impl/sql/compile&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6075&quot;&gt;&lt;del&gt;DERBY-6075&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
10.10.1.1  -   11054 (baseline - 14.5%) - including most of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6075&quot; title=&quot;Use modern collections in impl/sql/compile&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6075&quot;&gt;&lt;del&gt;DERBY-6075&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5947&quot; title=&quot;Factor out common code from generated classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5947&quot;&gt;&lt;del&gt;DERBY-5947&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6003&quot; title=&quot;Create row templates outside of the generated code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6003&quot;&gt;&lt;del&gt;DERBY-6003&lt;/del&gt;&lt;/a&gt; indeed did improve compilation speed. The numbers also suggest that some other changes may have contributed to the improvements in 10.10. And any improvements caused by the changes in this issue are indistinguishable from noise.&lt;/p&gt;

&lt;p&gt;In any case, it looks like we&apos;re heading in the right direction with 10.10. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13613392" author="bryanpendleton" created="Tue, 26 Mar 2013 01:45:21 +0000"  >&lt;p&gt;Thanks for the follow-up and the nice breakdown, Knut Anders.&lt;/p&gt;

&lt;p&gt;This information is very valuable; it would be neat if we could figure out some&lt;br/&gt;
way to incorporate it into, say, our release notes, since as you say this is&lt;br/&gt;
good news and backed up by solid evidence.&lt;/p&gt;

&lt;p&gt;It&apos;s great to see that all the hard work that you and others on the team have&lt;br/&gt;
been putting into performance is paying off. I&apos;m looking forward to using the&lt;br/&gt;
new release even more now!&lt;/p&gt;</comment>
                            <comment id="13619699" author="knutanders" created="Tue, 2 Apr 2013 11:52:41 +0100"  >&lt;p&gt;I guess we could mention it in our release notes if there is a re-spin of the release candidate. In that case, I don&apos;t think we should mention any numbers, as the experiment I ran used a query that didn&apos;t use any tables, so real-world applications are not likely to see that high numbers. That said, I hope we won&apos;t have to re-spin the release candidate...&lt;/p&gt;</comment>
                            <comment id="13624886" author="knutanders" created="Sun, 7 Apr 2013 13:04:26 +0100"  >&lt;p&gt;Attaching d6075-18a-rename.diff which renames the rest of the variables with names that indicate they are vectors. It updates code comments that mention vectors (unless they refer to QueryTreeNodeVector or non-scalar aggregates).&lt;/p&gt;

&lt;p&gt;All tests ran cleanly. Committed revision 1465368.&lt;/p&gt;</comment>
                            <comment id="13624887" author="knutanders" created="Sun, 7 Apr 2013 13:05:39 +0100"  >&lt;p&gt;I haven&apos;t planned any more work on this issue. Marking it as resolved.&lt;/p&gt;</comment>
                            <comment id="13699139" author="kmarsden" created="Wed, 3 Jul 2013 17:24:01 +0100"  >&lt;p&gt;reopen to add backport reject label.&lt;/p&gt;</comment>
                            <comment id="13699140" author="kmarsden" created="Wed, 3 Jul 2013 17:25:12 +0100"  >&lt;p&gt;reclose issue after changing label.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12575018" name="Compile.java" size="909" author="knutanders" created="Fri, 22 Mar 2013 14:46:10 +0000"/>
                            <attachment id="12572735" name="d6075-10a-aggregate-vectors.diff" size="8390" author="knutanders" created="Fri, 8 Mar 2013 09:25:27 +0000"/>
                            <attachment id="12573104" name="d6075-11a-remaining-vectors.diff" size="20194" author="knutanders" created="Mon, 11 Mar 2013 15:54:36 +0000"/>
                            <attachment id="12573328" name="d6075-12a-stack.diff" size="1644" author="knutanders" created="Tue, 12 Mar 2013 13:21:36 +0000"/>
                            <attachment id="12573331" name="d6075-13a-unused-properties.diff" size="22770" author="knutanders" created="Tue, 12 Mar 2013 13:41:10 +0000"/>
                            <attachment id="12573509" name="d6075-14a-dead-syntax.diff" size="25317" author="knutanders" created="Wed, 13 Mar 2013 12:44:47 +0000"/>
                            <attachment id="12573512" name="d6075-15a-sqlgrammar-vectors.diff" size="12924" author="knutanders" created="Wed, 13 Mar 2013 13:07:30 +0000"/>
                            <attachment id="12573524" name="d6075-16a-negative-test.diff" size="1513" author="knutanders" created="Wed, 13 Mar 2013 15:15:27 +0000"/>
                            <attachment id="12574543" name="d6075-17a-rename-aggregate-vectors.diff" size="108490" author="knutanders" created="Wed, 20 Mar 2013 13:38:33 +0000"/>
                            <attachment id="12577444" name="d6075-18a-rename.diff" size="31161" author="knutanders" created="Sun, 7 Apr 2013 13:04:26 +0100"/>
                            <attachment id="12569805" name="d6075-1a-CollectNodesVisitor.diff" size="28525" author="knutanders" created="Mon, 18 Feb 2013 12:34:15 +0000"/>
                            <attachment id="12569940" name="d6075-2a-bindExpression.diff" size="79903" author="knutanders" created="Tue, 19 Feb 2013 13:48:09 +0000"/>
                            <attachment id="12570184" name="d6075-3a-javadoc.diff" size="1658" author="knutanders" created="Wed, 20 Feb 2013 21:17:43 +0000"/>
                            <attachment id="12570293" name="d6075-4a-parameterList.diff" size="16639" author="knutanders" created="Thu, 21 Feb 2013 10:48:00 +0000"/>
                            <attachment id="12570952" name="d6075-5a-ordering.diff" size="6655" author="knutanders" created="Tue, 26 Feb 2013 09:01:53 +0000"/>
                            <attachment id="12571378" name="d6075-6a-DMLModStatementNode.diff" size="3982" author="knutanders" created="Thu, 28 Feb 2013 08:31:51 +0000"/>
                            <attachment id="12571893" name="d6075-7a-more-signatures.diff" size="38659" author="knutanders" created="Mon, 4 Mar 2013 16:05:02 +0000"/>
                            <attachment id="12572304" name="d6075-8a-local-hashtables.diff" size="10378" author="knutanders" created="Wed, 6 Mar 2013 10:35:31 +0000"/>
                            <attachment id="12572517" name="d6075-9a-hashtable-fields.diff" size="13310" author="knutanders" created="Thu, 7 Mar 2013 10:13:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 18 Feb 2013 09:38:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313301</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzbwzz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313646</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>