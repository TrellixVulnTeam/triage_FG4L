<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:53:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1330/DERBY-1330.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1330] Provide runtime privilege checking for grant/revoke functionality</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1330</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Additional work needs to be done for grant/revoke to make sure that only users with required privileges can access various database objects. In order to do that, first we need to collect the privilege requirements for various database objects and store them in SYS.SYSREQUIREDPERM. Once we have this information then when a user tries to access an object, the required SYS.SYSREQUIREDPERM privileges for the object will be checked against the user privileges in SYS.SYSTABLEPERMS, SYS.SYSCOLPERMS and SYS.SYSROUTINEPERMS. The database object access will succeed only if the user has the necessary privileges.&lt;/p&gt;

&lt;p&gt;SYS.SYSTABLEPERMS, SYS.SYSCOLPERMS and SYS.SYSROUTINEPERMS are already populated by Satheesh&apos;s work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-464&quot; title=&quot;Enhance Derby by adding grant/revoke support. Grant/Revoke provide finner level of privileges than currently provided by Derby that is especially useful in network configurations.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-464&quot;&gt;&lt;del&gt;DERBY-464&lt;/del&gt;&lt;/a&gt;. But SYS.SYSREQUIREDPERM doesn&apos;t have any information in it at this point and hence no runtime privilege checking is getting done at this point.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12343197">DERBY-1330</key>
            <summary>Provide runtime privilege checking for grant/revoke functionality</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12312336">DERBY-464</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="mamtas">Mamta A. Satoor</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 May 2006 12:44:02 +0100</created>
                <updated>Wed, 30 Aug 2006 07:39:58 +0100</updated>
                            <resolved>Wed, 30 Aug 2006 07:37:28 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12412956" author="mamtas" created="Wed, 24 May 2006 00:55:05 +0100"  >&lt;p&gt;Attaching functional spec for grant/revoke authorization model. Appreciate any feedback&lt;/p&gt;</comment>
                            <comment id="12412987" author="djd" created="Wed, 24 May 2006 04:40:05 +0100"  >&lt;p&gt;Also have this comment in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-464&quot; title=&quot;Enhance Derby by adding grant/revoke support. Grant/Revoke provide finner level of privileges than currently provided by Derby that is especially useful in network configurations.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-464&quot;&gt;&lt;del&gt;DERBY-464&lt;/del&gt;&lt;/a&gt; &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-464#action_12376518&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-464#action_12376518&lt;/a&gt;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;How does SYSREQUIREDPERM relate to the current dependency system. Could this functionality not be incorporated into&lt;br/&gt;
the current dependency system so that we have a single system?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12413026" author="bandaram" created="Wed, 24 May 2006 07:08:50 +0100"  >&lt;p&gt;Interesting idea from Dan... about need to have SYSREQUIREDPERM system table. It does look possible, DEPENDENTID/PROVIDERID could be OPERATOR/OBJECT of new system table. Seems like a good fit with current dependency system.&lt;/p&gt;

&lt;p&gt;About the comment about including GRATOR in new system table index, seems useful as well, when WITH GRANT OPTION is added in the future, so I will make this change.&lt;/p&gt;</comment>
                            <comment id="12416293" author="mamtas" created="Thu, 15 Jun 2006 12:49:52 +0100"  >&lt;p&gt;I did a little research on Dan&apos;s suggestion about using existing system table SYS.SYSDEPENDS rather than introducing a new system table to keep track of views&apos;/triggers&apos;/constraints&apos; dependencies on privileges. I think SYS.SYSDEPENDS should serve the purpose. Based on that, I have updated the functional spec(1st 2 paragraphs under section &quot;DDL support for views, triggers and constraints&quot;)  and attached it as AuthorizationModelForDerbySQLStandardAuthorizationV2.html. Any feedback will be appreciated.&lt;/p&gt;</comment>
                            <comment id="12418133" author="mamtas" created="Wed, 28 Jun 2006 06:10:06 +0100"  >&lt;p&gt;I have been working on storing privilege requirements for view (in Derby SQL Authorization mode only) during create view time in SYSDEPENDS table. This information in SYSDEPENDS will later be used at the revoke privilege time. That patch for this work is attached as Derby1330ViewPrivilegeCollectionV1diff.txt to this JIRA entry. All the views that depend on the privilege being revoked will be dropped. The revoke privilege work to drop affected views is not included in this patch.&lt;/p&gt;

&lt;p&gt;The patch has 2 major components to it&lt;br/&gt;
1)If the query for create view is accessing view/s, then Derby engine flattens all those view/s. Once the view flattening is finished, Derby engine goes through all the columns for the flattened parent sql and it starts building the privilege requirement for those columns. But since views are always accessed with definer&apos;s privileges (which means that as long as a user has privilege to access a view, the user can select from the view. This works even if the user does not need direct privileges to the objects accessed by the view.), Derby engine should not collect privilege requirements for objects accessed by views. In order to implement this behavior, I have added a flag to QueryTreeNode which will be set to false if the object is going to be accessed with definer&apos;s privileges. During view flattening, the objects accessed by view will be marked with definer privileges. Later, when the Derby enging goes through all the columns, it will check if the column is marked with definer&apos;s privilege and if so, then do not look for privilege requirement for that column. &lt;br/&gt;
2)Once the privileges have been collected for the create view in the bind phase, they need to be recorded in SYSDEPENDS table during the execution phase of the create view sql. SYSDEPENDS will add one row for every privilege requirement for the view. The DEPENDENTID will be view descriptor and PROVIDERID has to be a unique id to identify permission descriptor&apos;s uniquely. In order to do this, PermissionsDescriptor needs to implement interface Provider and it needs to have a UUID associated with it. This required addition of a UUID column in SYSTABLEPERMS, SYSCOLPERMS and SYSROUTINEPERMS. This UUID is required by the DependencyManager to uniquely identify a row for a given PROVIDERID. &lt;/p&gt;

&lt;p&gt;The patch mail to the derby developer list can be found at &lt;a href=&quot;http://www.nabble.com/-PATCH-DERBY-1330-Collect-privilege-requirements-for-views-tf1858264.html#a5075008&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/-PATCH-DERBY-1330-Collect-privilege-requirements-for-views-tf1858264.html#a5075008&lt;/a&gt;. This thread has more information about individual class changes.&lt;/p&gt;</comment>
                            <comment id="12418146" author="djd" created="Wed, 28 Jun 2006 07:39:50 +0100"  >&lt;p&gt;Just from a quick look at the patch there are many cases where you add a new method or field and add comments, but not as javadoc comments. E.g.&lt;/p&gt;

&lt;p&gt;+	//A call to this method means stop collecting privilege requirements for&lt;br/&gt;
+	//this node because this node is executing under definer&apos;s privileges.&lt;br/&gt;
+	public void accessThisWithDefinerPrivileges()&lt;/p&gt;

&lt;p&gt;This means the comment does not make into the generated javadoc for the engine and (I think) will not be picked up by smart IDEs like Eclipse. In Eclipse &quot;hovering&quot; over a method call will show the javadoc comment for the called method, which can be useful when navigating unfamilar code. A javadoc comment uses the /** */ tokens, e.g.&lt;/p&gt;

&lt;p&gt;/**&lt;br/&gt;
   A call to this method means stop collecting privilege requirements for&lt;br/&gt;
   this node because this node is executing under definer&apos;s privileges.&lt;br/&gt;
*/&lt;br/&gt;
public void accessThisWithDefinerPrivileges()&lt;/p&gt;

&lt;p&gt;Is it possible to change to javadoc methods and get into the habit of using them for new fields, classes and methods?&lt;/p&gt;</comment>
                            <comment id="12418151" author="mamtas" created="Wed, 28 Jun 2006 10:20:11 +0100"  >&lt;p&gt;I will go ahead and change those comments to javadoc comments. Should have done them proactively &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I will wait for more comments on the patch before submitting a new patch.&lt;/p&gt;</comment>
                            <comment id="12418661" author="djd" created="Fri, 30 Jun 2006 22:51:06 +0100"  >&lt;p&gt;Comment on QueryTreeNode changes and related items:&lt;br/&gt;
I think the logic for what you are trying to do is correct, but the terminology and some of the descriptions in comments could be expanded.&lt;br/&gt;
    The code equates executing with definer&apos;s priviliges to not having to collect priviliges dependencies.  I think the comments on isExecutingWithInovkerPrivileges() could be expanded to explain why collection is not needed. I think that maybe it&apos;s not generally true for definer mode and maybe the methods could be better named to relfect the actual situations, which I think are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;create view - collect privilege information for select statement&lt;/li&gt;
	&lt;li&gt;execute view (as definer) -collect privilege information for select statement&lt;/li&gt;
	&lt;li&gt;execute select (invoker) - do collect privilege information for select statement&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m just concerned that in the future when/if Derby supports definer mode for routines will the naming scheme for your methods continue to make sense, or can we ensure today that the method names (and comments) accurately reflect their purpose?&lt;/p&gt;

&lt;p&gt;Another aspect of this is the use of &quot;executing&quot; in the current tense for the QueryNodes (method name isExecutingWithInvokerPrivileges,  comment &quot;this node is executing&quot;). The executing you are talking about relates to the runtime execution of the generated statement, not the execution of the node itself. Maybe be picky, but  it&apos;s easy to get lost in the code because the present tense leads one to have the mindset the code is referring the current compilation, not the future execution.&lt;/p&gt;



</comment>
                            <comment id="12418678" author="mamtas" created="Sat, 1 Jul 2006 00:45:19 +0100"  >&lt;p&gt;Based on Dan&apos;s feedback on QueryNode, I am proposing the method name to be changed from &quot;isExecutingWithInvokerPrivileges&quot; to  &quot;isPrivilegeCollectionRequired&quot;. I tend to get too verbose with my method names, so if anyone has another suggestion for more appropriate method name, please suggest so. As for the comments for that method, I am suggesting following&lt;br/&gt;
	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Return true from this method means that we need to collect privilege&lt;/li&gt;
	&lt;li&gt;requirement for this node. For following cases, this method will&lt;/li&gt;
	&lt;li&gt;return true.&lt;/li&gt;
	&lt;li&gt;1)execute view - collect privilege to access view but do not collect&lt;/li&gt;
	&lt;li&gt;privilege requirements for objects accessed by actual view uqery&lt;/li&gt;
	&lt;li&gt;2)execute select - collect privilege requirements for objects accessed&lt;/li&gt;
	&lt;li&gt;by select statement&lt;/li&gt;
	&lt;li&gt;3)create view -  collect privileges for select statement : the select&lt;/li&gt;
	&lt;li&gt;statement for create view falls under 2) category above.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@return true if need to collect privilege requirement for this node&lt;br/&gt;
	 */&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12419145" author="mamtas" created="Wed, 5 Jul 2006 00:07:03 +0100"  >&lt;p&gt;I am attaching an updated patch(Derby1330ViewPrivilegeCollectionV2diff.txt) which includes privilege collection for views, constraints and triggers. The earlier patch (Derby1330ViewPrivilegeCollectionV1diff.txt) had privilege collection changes for views only. The new patch is a superset of the earlier patch and hence, if anyone has spent time reviewing the earlier patch, that time spent won&apos;t be a waste. I have&lt;br/&gt;
also changed comments around the method and field definition into java doc comments. Additionally, I have changed the method name isExecutingWithInvokerPrivileges to isPrivilegeCollectionRequired. Both these changes are based on Dan&apos;s feedback on the first review package.&lt;/p&gt;

&lt;p&gt;During view, trigger and constraint creation, in SQL Authorization mode, we need to collect all the privileges that are required by those objects. Using the Dependency Manager, these dependencies need to be saved in SYSDEPENDS table. If any of those privileges are later revoked by a revoke statement, then all the dependent objects(views, triggers and constraints) should get dropped. &lt;/p&gt;

&lt;p&gt;The patch has 4 majors components to it. &lt;br/&gt;
1)If the query for create view/create trigger is accessing view/s, then Derby engine flattens all those view/s. Once the view flattening is finished, Derby engine goes through all the columns for the flattened parent sql and it starts building the privilege requirement for those columns. But since views are always accessed with definer&apos;s privileges (which means that as long as a user has privilege to access &lt;br/&gt;
a view, the user can select from the view. This works even if the user does not have direct privileges to the objects accessed by the view.), When collecting privilege requirement for a given sql, Derby engine should not collect privilege requirements for objects accessed by views. In order to implement this behavior, I have added a flag to QueryTreeNode which will be set to false if the object is going to be accessed with definer&apos;s privileges. During view flattening, the objects accessed by view will be marked with definer privileges. Later, when the Derby enging goes through all the columns to collect the privilege requirements, it will check if a column is marked with definer&apos;s privilege and if so, then do not look for privilege requirement for that column. &lt;br/&gt;
2)Once the privileges have been collected for the create view/create trigger/create constraint in the bind phase, they need to be recorded in SYSDEPENDS table during the execution phase of the create view/create trigger/create constraint sql. SYSDEPENDS will add one row for every privilege requirement for the view/trigger/constraint. The DEPENDENTID will be view/trigger/constraint descriptor and PROVIDERID has to be a unique id to identify permission descriptor&apos;s uniquely. In order to do this, PermissionsDescriptor needs to implement interface Provider and it needs to have a UUID associated with it. This required addition of a UUID column in SYSTABLEPERMS, SYSCOLPERMS and &lt;br/&gt;
SYSROUTINEPERMS. This UUID is required by the DependencyManager to uniquely identify a row for a given PROVIDERID. &lt;br/&gt;
3)Privilege collection during trigger creation is handled in a similar fashion as item 1. ie no privilege collection is required for objects that are accessed by objects running with definer privileges. For all the other objects, appropriate privilege is required by the trigger creator and those privilege requirements will be saved in SYSDEPENDS using the dependency manager. In addition, the trigger&lt;br/&gt;
creator will need TRIGGER privilege on the table on which the trigger is getting defined. The dependency of the trigger on this TRIGGER privilege will be saved in SYSDEPENDS too.&lt;br/&gt;
4)Among the different kinds of constraints, foreign key constraint is the only constraint in Derby that can access other objects in the database. And, anytime, an object accesses another object, appropriate privileges need to be in place. For foreign key constraints, we need to record these privilege dependencies in the system. This is so that when one of those privileges is revoked, the constraint&lt;br/&gt;
should get dropped. The peculiar thing about constraint creation compared to views and triggers is one can define multiple foreign key constraints for a given table within a single sql statement. Derby collects all the privileges required for such a sql statement but foreign key constraint does not necessarily depend on all those privileges. eg&lt;br/&gt;
create table t31ConstraintTest (c311 int references mamta1.t11ConstraintTest, c312 int references mamta2.t21ConstraintTest);&lt;br/&gt;
For the above sql, Derby will collect REFERENCES privilege requirements for mamta1.t11ConstraintTest and mamta2.t21ConstraintTest. But the foreign key constraint on c311 depends only on REFERENCES privilege requirement for mamta1.t11ConstraintTest and foreign key constraint on c132 depenly only on REFERENCES privilege requirements for mamta2.t21ConstraintTest. I have made changes to CreateConstraintConstantAction.executeConstantAction such that only the necessary privileges get recorded for each foreign key constraint in SYSDEPENDS table. &lt;/p&gt;

&lt;p&gt;Following classes are impacted by this change. Compared to the first patch, there are 2 additional classes that got changed in Derby engine, when I added privilege collection for triggers and constraints. In addition, I added more tests to grantRevokeDDL.sql and to ProcedureTest.java The 2 additional classes that changed in Derby enginge compared to first patch are&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/execute/CreateConstraintConstantAction.java&lt;/p&gt;

&lt;p&gt;I have put some comment for all the classes that got changed/added below in this patch&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;br/&gt;
     Has method to mark this node to run with definer privileges (this could happen if the node is being accessed by an object(view/trigger/constraint) running with definer&apos;s privileges. This method also marks the result column list as running with definer privileges. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java&lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java &lt;br/&gt;
     Has method to mark this node to run with definer privileges (this could happen if the node is being accessed by an object (view/trigger/constraint) running with definer&apos;s privileges. This method also marks the subquery underneath it as running with definer privileges. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/SelectNode.java&lt;br/&gt;
     Has method to mark this node to run with definer privileges (this could happen if the node is being accessed by an object (view/trigger/constraint) running with definer&apos;s privileges. This method also marks it&apos;s fromTableList as running with definer privileges.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
     This is the super class that keeps the flag which determines if the object is getting accessed with invoker&apos;s or definer&apos;s privileges. It has methods to setter and getter methods on the flag. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java&lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges. In addition, it has method to mark this node to run with definer privileges (this could happen if the node is being accessed by an object(view/trigger/constraint) running with definer&apos;s privileges. This method also marks the expression underneath it as running with definer privileges. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java&lt;br/&gt;
    Grant was activated only on base tables in this class. I changed the code to allow grant on views along with the base tables.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java &lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java&lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/CreateSchemaNode.java&lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java &lt;br/&gt;
     Has method to mark this node to run with definer privileges (this could happen if the node is being accessed by an object (view/trigger/constraint) running with definer&apos;s privileges. This method also marks it&apos;s javaNode as running with definer privileges. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/FromList.java&lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java &lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
     If we are dealing with a view, we need to mark the query underneath it to run with definer privileges. This will make sure that we do not collect privilege requirements for that query. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java &lt;br/&gt;
     Has method to mark this node to run with definer privileges (this could happen if the node is being accessed by an object (view/trigger/constraint) running with definer&apos;s privileges. This method also marks all the result columns in it as running with definer privileges. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;br/&gt;
     Need to add a privilege requirement for the object access, only if the object is running with invoker&apos;s privileges.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/execute/CreateViewConstantAction.java &lt;br/&gt;
     Add rows in SYSDEPENDS to keep track of view&apos;s dependency on various privileges. If any of those privileges are later revoked, the view will be dropped automatically. If the view is getting created by the dba, then no privilege dependency is created because dba has access to all the objects in the database. If view is accessing an object that is owned by the view creator, then no need to put any privilege dependencies on such objects. If object accessed is not user owned, then check if there exists a privilege on that object  for this user. If yes, then save that privilege in SYSDEPENDS table as one of the privileges required by the view. If user does not have the privilege on the object, then there has to exist a PUBLIC level privilege  on that object. If that was not true, authorization checking for all the objects accessed by the views at the beginning of the execution phase would have failed. Column level privileges have a distinct behavior. For a given table, a user can have access to some of the columns via the privileges granted to the user explicitly. For the same table, the user may have access to some of the volumns via the privileged granted to the PUBLIC. an eg &lt;br/&gt;
 user1&lt;br/&gt;
 create table t11(c11 int, c12 int);&lt;br/&gt;
 grant select(c11) on t1 to user2;&lt;br/&gt;
 grant select(c12) on t1 to PUBLIC;&lt;br/&gt;
 user2&lt;br/&gt;
 create view v1 as select c11 from user1.t11 where c12=2;&lt;br/&gt;
 For the view above, there are 2 column level privilege depencies, one for column c11 which exists directly for user2 and one for column c12 which exists at PUBLIC level. &lt;br/&gt;
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java (explanation for this node is same as for CreateViewConstantAction)&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/execute/CreateConstraintConstantAction.java&lt;br/&gt;
  Derby allows multiple foreign key creation within a single sql statement. The privileges collected for such a sql may end up having a superset of privileges required for individual foreign key constraints. eg&lt;br/&gt;
  create table t31ConstraintTest (c311 int references mamta1.t11ConstraintTest, c312 int references mamta2.t21ConstraintTest);&lt;br/&gt;
  For the above sql, Derby will collect REFERENCES privilege requirements for mamta1.t11ConstraintTest and mamta2.t21ConstraintTest. But the foreign key constraint on c311 depends only on REFERENCES privilege requirement for mamta1.t11ConstraintTest and foreign key constraint on c132 depenly only on REFERENCES privilege requirements for mamta2.t21ConstraintTest. The changes in the class above makes sure that right REFERENCES privilege gets picked up for each foreign key constraint. The logic for this went into executeConstantAction method.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/catalog/SYSCOLPERMSRowFactory.java&lt;br/&gt;
 Added a column, uuid, (similar to one in SYSCONSTRAINTS). This column will be used as PROVIDERID in SYSDEPENDS table to keep track of view/triiger/constraint&apos;s dependency on column level constraints. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/catalog/SYSROUTINEPERMSRowFactory.java&lt;br/&gt;
 Added a column, uuid, (similar to one in SYSCONSTRAINTS). This column will be used as PROVIDERID in SYSDEPENDS table to keep track of view/triiger/constraint&apos;s dependency on routine level constraints. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/catalog/SYSTABLEPERMSRowFactory.java&lt;br/&gt;
 Added a column, uuid, (similar to one in SYSCONSTRAINTS). This column will be used as PROVIDERID in SYSDEPENDS table to keep track of view/triiger/constraint&apos;s dependency on table level constraints. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
     Add a new method getColumnPermissions which is similar to another method by the same name in the class. But the new method accepts column privilege type in String format. This new method is called by ColPermsDescriptor.getDependableFinder and ColPermsDescriptor keeps privilege type in String format.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/catalog/DDColumnPermissionsDependableFinder.java&lt;br/&gt;
     Need to add a new class because a Column Permission Descriptor needs a tableuuid and the column privilege type. The generic DDdependableFinder class can only deal with uuid and hence need a new subclass of DDdependableFinder. This new class is similar in nature to existing DDColumnDependableFinder &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/sql/catalog/DDdependableFinder.java&lt;br/&gt;
java/engine/org/apache/derby/impl/sql/catalog/CoreDDFinderClassInfo.java&lt;br/&gt;
java/engine/org/apache/derby/catalog/Dependable.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java &lt;br/&gt;
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java&lt;br/&gt;
     Above few classes do the ground work for 3 permission descriptors so they can be used by the existing dependency system(to populate SYSDEPENDS table) to record view/triiger/constraint&apos;s dependency on them. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/sql/dictionary/PermissionsDescriptor.java&lt;br/&gt;
 Permission Descriptor can now be the PROVIDER in SYSDEPENDS. ie a view/triiger/constraint might be dependent on an object level privilege. In order to allow this, PermissionsDescriptor implements Provider interface. Some of the methods of the interface are implemented by subclasses on PermissionsDescriptor. Also, each of the 3 Permission Descriptors now have a unique uuid. Added that uuid to PermissionsDescriptor and provided getter/setter on it. This uuid will be used as the PROVIDERID in SYSDEPENDS table. In &lt;br/&gt;
addition, there is a method called checkOwner in PermissionsDescriptor which checks if the passed authorization id is same as the owner of the object on which the permission is defined. This gets called by create view/triiger/constraint while storing view/triiger/constraint&apos;s dependency on various permissions in SYSDEPENDS table. If the view/triiger/constraint and object being accessed &lt;br/&gt;
is owned by the same authorization id, then no need to save view/triiger/constraint&apos;s dependency on object privilege in SYSDEPENDS table. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java&lt;br/&gt;
 This class is modified to implement some of the PROVIDER interface methods. Another modification to this class was addition of checkOwner method (described under PermissionDescriptor class) &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java&lt;br/&gt;
 This class is modified to implement some of the PROVIDER interface methods. Another modification to this class was addition of checkOwner method (described under PermissionDescriptor class) &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java&lt;br/&gt;
 This class is modified to implement some of the PROVIDER interface methods. Another modification to this class was addition of checkOwner method (described under PermissionDescriptor class) &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/sql/dictionary/DataDescriptorGenerator.java&lt;br/&gt;
 Three methods in this class are modified to throw StandardException in their signature because they call constructor&apos;s of PermissionDescriptor subclasses and those constructors can throw StandardException. &lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/sql/dictionary/StatementPermission.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/sql/dictionary/StatementTablePermission.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/sql/dictionary/StatementRoutinePermission.java &lt;br/&gt;
java/engine/org/apache/derby/iapi/sql/dictionary/StatementSchemaPermission.java&lt;br/&gt;
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java&lt;br/&gt;
     In the classes above, added a method called getPermissionDescriptor which will return the PermissionDescriptor for the passed authorization id for the StatementPermission object. This method gets during the execution phase of create view/trigger/constraint to track view/trigger/constraint&apos;s dependency on various permissions. getPermissionDescriptor for StatementSchemaPermission always returns null because views/triggers/constraints do not need to keep track of schema level privileges. They only need table, column and routine privileges as part of view/trigger/constraint dependency. They do need to have create permission is the schema, but once the view/trigger/constraint is created in that schema, there is no need to keep that schema permission in SYSDEPENDS. Special code is required to track column level privileges. It is possible that some column level privileges are available to the passed authorizer id but the rest required column level privileges are available at PUBLIC level. In order to record &lt;br/&gt;
view/trigger/constraint dependency on user level and public level column privileges, I needed to add method getPUBLIClevelColPermsDescriptor to StatementColumnPermission. &lt;/p&gt;

&lt;p&gt;Test changes in following files&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/grantRevokeDDL.sql&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/syscat.out&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/master/grantRevokeDDL.out &lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/syscat.out&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk14/syscat.out&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/master/syscat.out &lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/util/ProcedureTest.java &lt;/p&gt;

&lt;p&gt;I have attached the svn stat -q(Derby1330PrivilegeCollectionV2stat.txt) and svn diff(Derby1330PrivilegeCollectionV2diff.txt) output to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1330&quot; title=&quot;Provide runtime privilege checking for grant/revoke functionality&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1330&quot;&gt;&lt;del&gt;DERBY-1330&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, any feedback highly appreciated.&lt;/p&gt;</comment>
                            <comment id="12419438" author="mamtas" created="Thu, 6 Jul 2006 16:19:51 +0100"  >&lt;p&gt;Wondered if anyone got a chance to look at the patch. &lt;/p&gt;</comment>
                            <comment id="12419792" author="djd" created="Sat, 8 Jul 2006 06:09:25 +0100"  >&lt;p&gt;I&apos;m  starting to look at the patch, I&apos;m a little confused by your references to &apos;add a row to SYSDEPENDS&apos;. Is your code doing this directly or is it using the dependency manager (as I hope)?  Might be clearer if you described the change in terms of &quot;adding a dependency on X&quot; rather than &quot;adding a row to SYSDEPENDS&quot;. Then the description and comments would match the code.&lt;/p&gt;

&lt;p&gt;The implementation of  the dependency manager (ie. the current implementation uses SYSDEPENDS) should not be a factor in the design here.&lt;/p&gt;</comment>
                            <comment id="12419797" author="mamtas" created="Sat, 8 Jul 2006 07:35:36 +0100"  >&lt;p&gt;I am using the dependency manager and not touching SYSDEPENDS directly through my code changes. I will change the code comments to talk in terms of dependency manager rather than SYSDEPENDS but will wait for further review feedback before submiiting a new patch. Please let me know if a patch with comment changes will make the code review easier for you, in that case, I will go ahead and commit an updated patch.&lt;/p&gt;</comment>
                            <comment id="12419836" author="djd" created="Sat, 8 Jul 2006 13:42:43 +0100"  >&lt;p&gt;What would be really helpful if was if this patch was split into multiple patches.&lt;/p&gt;

&lt;p&gt;I&apos;m finally realizing the patch is making several changes:&lt;/p&gt;

&lt;p&gt;1) Add mechanism to stop collection of privilege information during compilation&lt;/p&gt;

&lt;p&gt;2) Use mechanism of 1) for view execution&lt;/p&gt;

&lt;p&gt;3) Add a UUID to the existing privilege systems tables.&lt;/p&gt;

&lt;p&gt;4) Change the PrivilegeDescriptor classes to be Providers as well as being&lt;br/&gt;
      TupleDescriptors&lt;/p&gt;

&lt;p&gt;5) Allowing GRANT to execute on views&lt;/p&gt;

&lt;p&gt;6) Make CREATE VIEW depend  on the(existing)  list of priviliges collected&lt;/p&gt;

&lt;p&gt;7) Stuff added for triggers added recently that I haven&apos;t managed to look at.&lt;/p&gt;

&lt;p&gt;8) Stuff added for constraints added recently that I haven&apos;t managed to look at.&lt;/p&gt;

&lt;p&gt;9) Others I&apos;ve missed due to the size of the patch&lt;/p&gt;

&lt;p&gt;+) Test changes.&lt;/p&gt;

&lt;p&gt;So 8+) seperate changes &quot;forced&quot; into a single 352k patch. Personally I find patches like this really hard to review due to their size  and multiple issues.  I believe the risk of missing something in a review or in writing the code is increased by the size of the change, thus the quality of Derby can be degraded by accepting large patches. Incremental development is good.&lt;/p&gt;

&lt;p&gt;I know it&apos;s hard to anticipate &amp;amp; identify incremental changes from the start of  implementing functionality,  but it&apos;s a good habit to get into. As one develops something and realise that a new piece of functionality is needed, stop and think if it could be implemented in a separate clean code line and delivered as a separate patch. For example, with this change the requirement for the UUID to be added to the existing system tables could have been identified as a stand-alone item.&lt;br/&gt;
Another technique I use is to separate items after the fact. Once a codeline becomes clogged with multiple changes, I pull individual changes into a separate code line and then test &amp;amp; submit incrementally. I will write this up in the wiki.&lt;/p&gt;

&lt;p&gt;Now, I do believe that the we, the community, could maybe do a better job to encourage smaller patches, faster turn around on submitted small patches etc., but I also believe, in general, the contributors can help a lot here. At least by following the guidelines from the wiki. I think we are in somewhat of a negative-feedback situation, patches are slow to be reviewed &amp;amp; committed due to time constraints and patch complexity leading to contributors trying to cram more things into a single patch to only have to undergo a single commit leading to longer review times etc. etc. If we could break the cycle and have fast turnaround on small patches it would move more people to the incremental development model.&lt;/p&gt;

&lt;p&gt;As for this specific patch, I&apos;m not sure it&apos;s a good plan to have you submit 8+ patches &amp;amp; the testing associated with it, given we have a working patch here. There are some more changes I would like to see, and I would like you to refrain from adding any more functionality into the patch. I wll add specific review comments in another comment.&lt;/p&gt;</comment>
                            <comment id="12419837" author="djd" created="Sat, 8 Jul 2006 14:04:53 +0100"  >&lt;p&gt;Mamta wrote: &quot;I am proposing the method name to be changed from &quot;isExecutingWithInvokerPrivileges&quot; to &quot;isPrivilegeCollectionRequired&quot;. I tend to get too verbose with my method names&quot;&lt;/p&gt;

&lt;p&gt;Not at all, that method name describes exactly what it does, a perfect name.&lt;/p&gt;

&lt;p&gt;One issue with the patch is that your change to the new (correct) name seems to be only half implemented, e.g.&lt;/p&gt;

&lt;p&gt;+	public boolean isPrivilegeCollectionRequired()&lt;br/&gt;
+	&lt;/p&gt;
{
+		return(accessWithInvokerPrivileges);
+	}

&lt;p&gt;Shouldn&apos;t the field name accessWithInvokerPrivileges be the same as the method name?&lt;/p&gt;

&lt;p&gt;Then for:&lt;/p&gt;

&lt;p&gt;+	public void accessThisWithDefinerPrivileges()&lt;br/&gt;
+	&lt;/p&gt;
{
+		accessWithInvokerPrivileges = false;
+	}

&lt;p&gt;Shouldn&apos;t this method be called something like, &apos; disablePrivilegeCollection&apos;?&lt;/p&gt;

&lt;p&gt;Otherwise my earlier concerns still stand, in the future will we have to change the name of accessWithInvokerPrivileges /accessThisWithDefinerPrivileges  because their usage (stop collection) might not match the access mode.&lt;/p&gt;

&lt;p&gt;Other comments on the patch are the similarity of the code in the create  constant actions for triggers and views, in fact the one in trigger has only views as examples in the comments. This is the code that converts the list of privileges into a list of dependencies (or added dependencies). Could this code be shared, what about the one in create constraint?&lt;/p&gt;

&lt;p&gt;If you can address these &amp;amp; earlier comments I will commit the patch.&lt;/p&gt;</comment>
                            <comment id="12419854" author="mamtas" created="Sat, 8 Jul 2006 18:56:49 +0100"  >&lt;p&gt;Dan, truly appreciate your time on the patch review. &lt;/p&gt;

&lt;p&gt;I think I have taken care of all your comments in the attached review package ( Derby1330PrivilegeCollectionV3diff.txt) Along with javadoc comments, method and variable renaming, I have abstracted the actual dependency saving code from CreateViewConstantAction,  CreateConstraintConstantAction and CreateTriggerConstantAction into DDLConstantAction as 2 methods.&lt;/p&gt;

&lt;p&gt;Running the derbyall suite suite right noww for sanity check. Please let me know if I missed any of your feedback or if you/anyone else has any comments on the latest review package.&lt;/p&gt;

&lt;p&gt;svn stat -q output attached as Derby1330PrivilegeCollectionV3stat.txt&lt;/p&gt;</comment>
                            <comment id="12419887" author="mamtas" created="Sun, 9 Jul 2006 06:24:57 +0100"  >&lt;p&gt;derbyall suite finished with no new failures.&lt;/p&gt;</comment>
                            <comment id="12419921" author="djd" created="Mon, 10 Jul 2006 00:20:06 +0100"  >&lt;p&gt;Patch Derby1330PrivilegeCollectionV3diff.txt Committed revision 420306 - Thanks Mamta&lt;/p&gt;</comment>
                            <comment id="12420027" author="knutanders" created="Mon, 10 Jul 2006 19:14:28 +0100"  >&lt;p&gt;I have seen this regression test failure a couple of times lately. Could it be related to this issue?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;Diff file derbyall/derbylang/grantRevokeDDL.diff&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
			&lt;li&gt;Start: grantRevokeDDL jdk1.5.0_04 derbyall:derbylang 2006-07-10 09:56:26 ***&lt;br/&gt;
560 del&lt;br/&gt;
&amp;lt; ERROR 28508: User &apos;MAMTA3&apos; does not have select permission on column &apos;C111&apos; of table &apos;MAMTA2&apos;.&apos;V22&apos;.&lt;br/&gt;
560a560&lt;br/&gt;
&amp;gt; ERROR 28508: User &apos;MAMTA3&apos; does not have select permission on column &apos;C111&apos; of table &apos;MAMTA2&apos;.&apos;V21&apos;.&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   grantRevokeDDL jdk1.5.0_04 derbyall:derbylang 2006-07-10 09:56:37 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It seems to happen on both Solaris and Linux, JVM 1.4 and 1.5:&lt;br/&gt;
&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/Derby/testlog/Linux-2.6.9-34.ELsmp_x86_64-x86_64/420328-derbylang_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/Derby/testlog/Linux-2.6.9-34.ELsmp_x86_64-x86_64/420328-derbylang_diff.txt&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/Derby/testlog/SunOS-5.10_i86pc-i386/420328-derbylang_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/Derby/testlog/SunOS-5.10_i86pc-i386/420328-derbylang_diff.txt&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/DerbyJvm1.4/testlog/Linux-2.6.9-34.ELsmp_x86_64-x86_64/420328-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/DerbyJvm1.4/testlog/Linux-2.6.9-34.ELsmp_x86_64-x86_64/420328-derbyall_diff.txt&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/DerbyJvm1.4/testlog/SunOS-5.10_i86pc-i386/420328-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/DerbyJvm1.4/testlog/SunOS-5.10_i86pc-i386/420328-derbyall_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It does not happen on the tinderbox, though.&lt;/p&gt;</comment>
                            <comment id="12420121" author="mamtas" created="Tue, 11 Jul 2006 01:40:25 +0100"  >&lt;p&gt;Knut, the diffs you are noticing is in one of the new tests that I added to grantRevokeDDL.sql &lt;/p&gt;

&lt;p&gt;The diff is for following sql which is executed by mamta3(Note that  mamta3 does not have SELECT privilege on mamta2.v22.c111 and on mamta2.v21.c111 but does have SELECT privilege on mamta1.t11)&lt;/p&gt;

&lt;p&gt;create view v33 as select v22.c111 as a, t11.c111 as b from mamta2.v22 v22, mamta1.t11 t11, mamta2.v21;&lt;/p&gt;

&lt;p&gt;When this create view is compiled by Derby, it collects the privileges required by the create view. Derby collects following privilege requirements for the create view sql above&lt;br/&gt;
1)SELECT on mamta2.v22&lt;br/&gt;
2)SELECT on mamta1.t11&lt;br/&gt;
3)SELECT on mamta2.v21&lt;br/&gt;
4)ownership of the schema in which create view is being issued&lt;/p&gt;

&lt;p&gt;Later on, at create view execution time, Derby grows through the required privileges list and checks if mamta3 has the required privileges or not. And since mamta3 does not have the required privileges on mamta2.v22 and mamta2.v21, the create view fails.&lt;/p&gt;

&lt;p&gt;In the diff that you posted above, both the error messages are correct. It seems like &lt;br/&gt;
1)either the order in which the privilege requirements get added to the list in compile phase is not always the same &lt;br/&gt;
2)or the order in which privileges get retrieved in the execution phase is not always the same&lt;br/&gt;
and hence different error messages&lt;/p&gt;

&lt;p&gt;CompilerContextimpl.addRequiredTablePriv() has following&lt;br/&gt;
		requiredTablePrivileges.put(key, key);&lt;br/&gt;
and requiredTablePrivileges is defined as follows in CompilerContextimpl&lt;br/&gt;
	private HashMap requiredTablePrivileges;&lt;/p&gt;

&lt;p&gt;Is this a Java behavior that you can count on the order in which items will be added and retrieved from HashMap? &lt;/p&gt;

&lt;p&gt;At this point, I am not sure, how to make sure that items get added and retrieved in the same order from the HashMap so that we will have consistent error message return from the create view sql above. Any insight from the list will be appreciated.&lt;/p&gt;</comment>
                            <comment id="12420145" author="mamtas" created="Tue, 11 Jul 2006 02:36:53 +0100"  >&lt;p&gt;Mike responded following on the mailing list&lt;br/&gt;
&amp;lt;quote&amp;gt;&lt;br/&gt;
I do not believe you can count on the order of a HashMap, different&lt;br/&gt;
JVM&apos;s may use different hash algo&apos;s which may result in different orders&lt;br/&gt;
when you ask for the full list.  I have seen this behavior in queries&lt;br/&gt;
which use hash nodes in derby (I believe we first noticed a difference&lt;br/&gt;
between j9 and other jvm&apos;s).  In that case we added order by&apos;s as&lt;br/&gt;
necessary to the tests, as either order of results was correct from&lt;br/&gt;
SQL point of view.&lt;/p&gt;

&lt;p&gt;In your case is the order a code problem, or just a testing issue?&lt;br/&gt;
&amp;lt;/quote&amp;gt;&lt;/p&gt;

&lt;p&gt;First of all, thanks Mike for your response.&lt;/p&gt;

&lt;p&gt;As to your question, the order is not a testing issue because test is simply trying a scenario where a user is trying to create a object based on more than one object on which the user doesn&apos;t have access to. And depending on how items got into HashMap, the test fails with privilege error on one object vs the other. So, in this case, the order is a code problem.&lt;/p&gt;</comment>
                            <comment id="12420228" author="mamtas" created="Tue, 11 Jul 2006 14:35:29 +0100"  >&lt;p&gt;The patch Derby1330PrivilegeCollectionV3diff.txt attached to this JIRA entry was recently committed into main trunk. I am working on revoke privilege which is based on that committed patch. While working on revoke privilege, I realized that I have incorrect logic for getting a permission descriptor from system tables based on the unique uuid. SYSTABLEPERMS, SYSCOLPERMS and SYSROUTINEPERMS each have a uuid column called TABLEPERMSID, COLPERMSID and ROUTINEPERMSID respectively. When a view\constraint\trigger is found to be dependent on a permission, we have the dependency manager track view\constraint\trigger&apos;s dependency on that permission&apos;s unique uuid. Later on, that unique uuid can be used to get the unique row from the system tables. The patch Derby1330PrivilegeCollectionV3diff.txt accidentally looked for combination of unique uuid and &lt;br/&gt;
permission type to find the exact unique row from the system tables. The uuid column is sufficient to find the unique row form these 3 system tables and there is no need to keep track of permission type.&lt;/p&gt;

&lt;p&gt;I have attached a patch (Derby1330uuidIndexForPermsSystemTablesV4diff.txt) to fix that behavior. The patch gets rid of requirement of permission type along with the uuid to find a unique row. Fixing this has in fact cleaned up the supporting code quite a bit. For instance, there is no need for special class DDColumnPermissionDependableFinder or no need for a constructor in ColPermsDescriptor which takes permission types in the form of an int. DDdependableFinder is much cleaner too with this patch. In addition, I have also created a unique index on the uuid for these 3 system tables in order to quickly locate a row in those system tables.&lt;/p&gt;

&lt;p&gt;svn stat -q output is attached as Derby1330uuidIndexForPermsSystemTablesV4stat.txt&lt;/p&gt;

&lt;p&gt;Can someone please review this patch for me and submit it to the trunk if everything looks good?&lt;/p&gt;

&lt;p&gt;The grantRevokeDDL.sql test is ran fine and I have fired derbyall.&lt;/p&gt;</comment>
                            <comment id="12420337" author="mamtas" created="Wed, 12 Jul 2006 00:01:23 +0100"  >&lt;p&gt;I have come across one test failure in derbyall suite with my changes, so please don&apos;t commit the latest patch just yet.&lt;/p&gt;</comment>
                            <comment id="12420491" author="mamtas" created="Wed, 12 Jul 2006 11:47:52 +0100"  >&lt;p&gt;With the earlier (uncommitted) patch, one of the tests in derbyall was failing for following sql&lt;br/&gt;
grant execute on function f_abs to mamata2, mamata3;&lt;br/&gt;
The execution of grant above needs to add 2 rows into SYSTABLEPERMS. And each one of those rows need to have a unique uuid. In my earlier patch, I had forgotten to reset the uuid in TablePrivilegeInfo.executeGrantRevoke and that is why the test above was failing. Similar change is required in RoutinePrivilegeInfo.executeGrantRevoke for grant on a function to multiple users in one statement. &lt;/p&gt;

&lt;p&gt;Also, I had said in the comments for earlier patch that there is no need for a constructor in ColPermsDescriptor which takes permission types in the form of an int. While prototyping revoke references privilege, I realized that we do need that constructor. So I am going to leave the constructor as it is and it&apos;s usage will be clear once I have the patch fo revoke references privilege ready.&lt;/p&gt;

&lt;p&gt;Can someone review the patch (Derby1330uuidIndexForPermsSystemTablesV5diff.txt) for me and commit it if it looks good?&lt;/p&gt;</comment>
                            <comment id="12420499" author="djd" created="Wed, 12 Jul 2006 12:15:11 +0100"  >&lt;p&gt;Mamta wrote:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In my earlier patch, I had forgotten to reset the uuid in TablePrivilegeInfo.executeGrantRevoke and that is why the test above was failing. Similar change is required in RoutinePrivilegeInfo.executeGrantRevoke for grant on a function to multiple users in one statement.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Looking at the code for this it implies to me that the api is incorrect. Requiring the caller to reset the uuid is likely to lead to bugs, could the addRemovePermissionsDescriptor handle this automatically rather than relying on the caller? This could be addressed in a subsequent patch.&lt;/p&gt;</comment>
                            <comment id="12420503" author="djd" created="Wed, 12 Jul 2006 12:49:01 +0100"  >&lt;p&gt;Derby1330uuidIndexForPermsSystemTablesV5diff.txt  Patch committed - Committed revision 421118 - Thanks Mamta!&lt;/p&gt;</comment>
                            <comment id="12420669" author="mamtas" created="Thu, 13 Jul 2006 00:37:14 +0100"  >&lt;p&gt;As per Dan&apos;s suggestion, I have moved the resetting of permission descriptor&apos;s uuid into DataDictionary.addRemovePermissionsDescriptor method. The derbyall runs fine with no new failures. I have also added couple tests to lang\grantRevokeDDL.sql&lt;/p&gt;

&lt;p&gt;Please find this change in the attached Derby1330uuidIndexForPermsSystemTablesV6diff.txt. svn stat -q output is in Derby1330uuidIndexForPermsSystemTablesV6stat.txt&lt;/p&gt;</comment>
                            <comment id="12420911" author="mamtas" created="Fri, 14 Jul 2006 02:34:45 +0100"  >&lt;p&gt;Just wondered if anyone got a chance to look at the patch Derby1330uuidIndexForPermsSystemTablesV6diff.txt. This one is a pretty localized change.&lt;/p&gt;</comment>
                            <comment id="12421189" author="djd" created="Fri, 14 Jul 2006 19:40:35 +0100"  >&lt;p&gt;Patch Derby1330uuidIndexForPermsSystemTablesV6diff.txt applied Committed revision 421981. Thanks Mamta&lt;/p&gt;</comment>
                            <comment id="12421660" author="mamtas" created="Mon, 17 Jul 2006 17:38:59 +0100"  >&lt;p&gt;I have an extremely minor patch attached to this JIRA entry (svn diff attached as Derby1330MinorCleanupV7diff.txt and svn stat -q attached as Derby1330MinorCleanupV7stat.txt). There is a typo in SYSROUTINEPERMSRowFactory.java for one of the variables and this patch fixes just that. I have run the 2 grant revoke tests and they ran fine. I don&apos;t see a need to run derbyall but let me know if someone thinks it should be run.&lt;/p&gt;</comment>
                            <comment id="12421892" author="mamtas" created="Tue, 18 Jul 2006 17:03:38 +0100"  >&lt;p&gt;Currently, in case of revoke privilege, DataDictionary.addRemovePermissionsDescriptor expects it&apos;s callers to set the permission descriptor&apos;s uuid so that DependencyManager can be invoked by addRemovePermissionsDescriptor to send REVOKE_PRIVILEGE action to permission descriptor&apos;s dependents(sending of REVOKE_PRIVILEGE work has not been finished yet. This patch is in preparation of that work). In order to set the uuid, the callers have to goto system tables to find the uuid and then set the permission descriptor&apos;s uuid.&lt;/p&gt;

&lt;p&gt;It will be less error prone if DataDictionary.addRemovePermissionsDescriptor did the setting of uuid of permission descriptor, rather than having every caller set the uuid correctly. DataDictionary.addRemovePermissionsDescriptor method has to goto the permission system tables anyways and has the uuid information handy and hence it will be more efficient for it to set the uuid of the permission descriptor. This is inline with the patch that was commited some time back so that resetting of the uuid happened in addRemovePermissionsDescriptor method rather than expecting the callers to do that.&lt;/p&gt;

&lt;p&gt;In order to do this, I have added an abstract method to PermissionsCatalogRowFactory called setUUIDOfThePassedDescriptor. This method will set the uuid of the passed permission descriptor to same value as the row corresponding to the permission system table which is also passed as a parameter. This method will be called by DataDictionary.addRemovePermissionsDescriptor.&lt;/p&gt;

&lt;p&gt;I have run derbyall suite on my Windows XP machine with Sun&apos;s jdk14 and there were no new failures. Can someon please review this patch(Derby1330setUUIDinDataDictionaryV8diff.txt) and if no comments, can a commiter please commit this patch?&lt;/p&gt;

&lt;p&gt;ps There is another patch pending on this JIRA entry(Derby1330MinorCleanupV7diff.txt). Can a commiter please commit that too?&lt;/p&gt;</comment>
                            <comment id="12421902" author="mamtas" created="Tue, 18 Jul 2006 18:06:31 +0100"  >&lt;p&gt;Please disregard change to RAFContainer.java in Derby1330setUUIDinDataDictionaryV8diff.txt. Let me know if I should submit another diff file w/o the RAFContainer change.&lt;/p&gt;</comment>
                            <comment id="12421961" author="djd" created="Tue, 18 Jul 2006 21:41:08 +0100"  >&lt;p&gt;Patch Derby1330MinorCleanupV7diff.txt applied - Committed revision 423232. - thanks Mamta&lt;/p&gt;</comment>
                            <comment id="12422017" author="mamtas" created="Wed, 19 Jul 2006 03:11:22 +0100"  >&lt;p&gt;There are couple javadoc warnings for the code that got submitted as part of this JIRA entry. Can a commiter please commit this patch (svn diff o/p is attached as DERBY1330javaDocWarningsDiffV9.txt and svn stat -q o/p is attached as DERBY1330javaDocWarningsStatV9.txt) to fix the problem? Thanks&lt;/p&gt;</comment>
                            <comment id="12422021" author="fuzzylogic" created="Wed, 19 Jul 2006 04:30:14 +0100"  >&lt;p&gt;Committed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1330&quot; title=&quot;Provide runtime privilege checking for grant/revoke functionality&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1330&quot;&gt;&lt;del&gt;DERBY-1330&lt;/del&gt;&lt;/a&gt;javaDocWarningsDiffV9.txt patch to trunk with revision 423352. Note that in two cases, the @param privType actually needed to be privTypeStr to match the name of the parameter.&lt;/p&gt;</comment>
                            <comment id="12422262" author="djd" created="Wed, 19 Jul 2006 22:51:15 +0100"  >&lt;p&gt;I get this compile error applying this patch; Derby1330setUUIDinDataDictionaryV8diff.txt&lt;/p&gt;

&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 1 source file to C:&amp;#95;work\svn_linq\trunk\classes&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; C:&amp;#95;work\svn_linq\trunk\java\engine\org\apache\derby\impl\sql\catalo&lt;br/&gt;
g\SYSROUTINEPERMSRowFactory.java:319: cannot resolve symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : variable ROUTINPERMSID_COL_NUM&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: class org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRow&lt;br/&gt;
Factory&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;         DataValueDescriptor existingPermDVD = row.getColumn(ROUTINPE&lt;br/&gt;
RMSID_COL_NUM);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                                                             ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 1 error&lt;/p&gt;</comment>
                            <comment id="12422339" author="mamtas" created="Thu, 20 Jul 2006 05:48:52 +0100"  >&lt;p&gt;Dan, the patch Derby1330setUUIDinDataDictionaryV8diff.txt failed for you because it was trying to reference a variable by a name which got changed by another patch that went in for this jira entry.&lt;/p&gt;

&lt;p&gt;I have attached a new patch Derby1330setUUIDinDataDictionaryV10diff.txt to resolve the problem. The svn stat -q is attached as Derby1330setUUIDinDataDictionaryV10stat.txt. At this point, this new patch is the only pending patch on this Jira entry and I will highly appreciate somebody taking the time to review and committer commiting it.&lt;/p&gt;</comment>
                            <comment id="12422435" author="djd" created="Thu, 20 Jul 2006 15:59:37 +0100"  >&lt;p&gt;Patch Derby1330setUUIDinDataDictionaryV10diff.txt Committed revision 423949. - Thanks Mamta&lt;/p&gt;</comment>
                            <comment id="12424980" author="scotsmatrix" created="Tue, 1 Aug 2006 20:03:03 +0100"  >&lt;p&gt;In the spec AuthorizationModelForDerbySQLStandardAuthorizationV2.html, I am not sure that I understand the sentences in this paragraph :&lt;/p&gt;

&lt;p&gt;&quot;Authorization checking is of little value unless Derby authentication is turned on. By default, Derby&apos;s authentication is OFF and can be turned ON by setting derby.connection.requireAuthentication to TRUE. Attempts to set security mode to Derby SQL Standard Authorization mode without first requiring authentication will raise a warning.&quot;&lt;/p&gt;

&lt;p&gt;Questions:&lt;br/&gt;
1. The text here refers to &quot;derby.connection.requireAuthentication&quot;, how is that different from &quot;derby.database.defaultConnectionMode&quot; and &quot;derby.database.sqlAuthorization&quot; ?&lt;/p&gt;

&lt;p&gt;2. The last sentence in the paragraph from the spec is confusing.  It is unclear what &quot;requiring authentication&quot; means. Is that &quot;user&quot; authentication, &quot;Derby&quot; authentication?  What is clear is that &quot;authentication&quot; must be set before the security mode is set.  The sentence implies that &quot;Derby SQL Standard Authorization&quot; is a mode that can be set for security. How is the &quot;security mode&quot; set?  &lt;/p&gt;

&lt;p&gt;I&apos;d appreciate any clarification that you can provide.&lt;/p&gt;</comment>
                            <comment id="12425162" author="mamtas" created="Wed, 2 Aug 2006 08:34:35 +0100"  >&lt;p&gt;Laura, here are my attempts at your questions. &lt;/p&gt;

&lt;p&gt;derby.connection.requireAuthentication is a pre 10.2 property which enables user authentication. This property will require that a user name and password is supplied at database connection time. Chances are that in  a multi-user environment, Derby would be run with authentication enabled (more info can be found in our existing docs in the &lt;br/&gt;
Security-&amp;gt;Derby and Security -&amp;gt; Working with user authentication -&amp;gt; Enabling user authentication section)&lt;/p&gt;

&lt;p&gt;derby.connection.requireAuthentication will ensures that a user with valid user name and password will be allowed to connect to Derby. A multi-user&lt;br/&gt;
environment might also want to control what actions are allowed by different users once they are connected to Derby. This part falls under User authorization. More on this can be found under&lt;br/&gt;
Security-&amp;gt;Derby and Security -&amp;gt; User authorization -&amp;gt; Setting user authorization&lt;/p&gt;

&lt;p&gt;Prior to Derby 10.2, you could use derby.database.defaultConnectionMode to specify the default access mode to be noAccess, readOnlyAccess and fullAccess. There was no support for Grant/Revoke pre 10.2.&lt;/p&gt;

&lt;p&gt;With Derby 10.2, we are introducing grant revoke which is another scheme of user authorization and it is enabled by the property derby.database.sqlAuthorization. When you set this property to true, Derby is said to be running in Derby SQL Standard Authorization mode. So, in short, property derby.database.sqlAuthorization allows the grant revoke feature. &lt;/p&gt;

&lt;p&gt;There has been some talk about not requiring property property derby.database.sqlAuthorization and enabling grant revoke when user attempts to use grant/revoke sql statements for the first time. Someone more knowledgable about that discussion might want to add their comments here.&lt;/p&gt;

&lt;p&gt;So, I hope I have not gotten you confused with all the jargons. Existing manuals might be helpful in clearing out confusion on authentication vs authorization.&lt;/p&gt;

&lt;p&gt;If you have any further questions, feel free to post them,&lt;/p&gt;</comment>
                            <comment id="12425914" author="scotsmatrix" created="Sat, 5 Aug 2006 01:34:41 +0100"  >&lt;p&gt;I want to be certain that I understand cascading object dependencies.  Please correct any errors that I have in the scenarios below:&lt;/p&gt;

&lt;p&gt;1. Table T1 is owned by user u1 and the SELECT privilege on T1 is granted&lt;br/&gt;
to user u2. Next, if u2 creates a view v1 on T1, When the SELECT privilege&lt;br/&gt;
on T1 is revoked from u2, view v1 is dropped. Queries that access v1 are invalid.&lt;/p&gt;

&lt;p&gt;2. Table T1 is owned by user u1 and SELECT privilege on T1 is granted to user u2. Next,&lt;br/&gt;
if u2 creates a view v1 on T1, Next, u2 creates a view v2 on v1. When the&lt;br/&gt;
SELECT privilege on T1 is revoked from u2, Derby attempts to drop v1, but&lt;br/&gt;
because v2 is dependent upon v1, the revoke fails. &lt;/p&gt;</comment>
                            <comment id="12425919" author="mamtas" created="Sat, 5 Aug 2006 02:30:49 +0100"  >&lt;p&gt;Laura, your understanding of the current behavior for revoke statement and views is correct.&lt;/p&gt;

&lt;p&gt;This behavior applies only to views. A trigger can&apos;t be dependent on another trigger. And hence when a revoke trigger is issued, you will not run into cascading problem. Same is true for foreign key constraints and hence one will not run into cascading problems with constraints.&lt;/p&gt;

&lt;p&gt;Hope this answers your question.&lt;/p&gt;</comment>
                            <comment id="12425921" author="scotsmatrix" created="Sat, 5 Aug 2006 02:48:25 +0100"  >&lt;p&gt;Another question.  This is what I have to document the behavior &lt;br/&gt;
for views, triggers, and constraints when only the PUBLIC privilege is active.&lt;br/&gt;
Please let me know if there are errors in my understanding &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;If you create a view, trigger, or constraint when only the PUBLIC privilege&lt;br/&gt;
is active, the object that you create is dependent on the PUBLIC privilege.&lt;br/&gt;
If you are subsequently granted the same user privileges as you have with&lt;br/&gt;
PUBLIC, the objects that you created remain dependent on the PUBLIC privilege.&lt;br/&gt;
If the PUBLIC privilege is later revoked, the objects that you created when&lt;br/&gt;
only the PUBLIC privilege was active are dropped. Ensure that you have user&lt;br/&gt;
level privileges before you create database objects to avoid this privilege&lt;br/&gt;
dependency.&lt;/p&gt;</comment>
                            <comment id="12425933" author="mamtas" created="Sat, 5 Aug 2006 06:28:03 +0100"  >&lt;p&gt;Basically, during an object create time, Derby will first look for the required privilege at the user level. If found, then the object will depend on that user-level privilege, for it&apos;s entire life. If privilege is not found at user-level, then Derby will look for that privilege at PUBLIC level. If found, then the object will depend on that PUBLIC level privilege, for it&apos;s entire life. After the object creation, if the privilege on which it depends is revoked, the object will simply drop itself. Derby will not try to see if it can find any other privilege to replace the one being dropped so the object does not have to drop itself. Ideally, during the privilege revoke time, the dependent object should see if there is any other privilege that they can start relying on so that they don&apos;t have to drop themselves.&lt;/p&gt;

&lt;p&gt;eg&lt;br/&gt;
user1 &lt;br/&gt;
create t1&lt;br/&gt;
grant select on t1 to user2&lt;br/&gt;
grant select on t1 to public&lt;br/&gt;
user2&lt;br/&gt;
create view v1 as select * from user1.t1 &amp;#8211; this view will depend on user-level select privilege on user1.t1&lt;br/&gt;
user1&lt;br/&gt;
revoke select on t1 from users &lt;br/&gt;
&amp;#8211; the above revoke will drop user2.v1, Ideally, rather than dropping user2.v1, Derby can make user2.v1 depend on available PUBLIC level privilege&lt;br/&gt;
&amp;#8211; this doesn&apos;t happen at this point and hence we should document the existing behavior to clear any confusion&lt;/p&gt;

&lt;p&gt;another eg&lt;br/&gt;
user1 &lt;br/&gt;
create t1&lt;br/&gt;
grant select on t1 to PUBLIC&lt;br/&gt;
user2&lt;br/&gt;
create view v1 as select * from user1.t1 &amp;#8211; this view will depend on PUBLIC-level select privilege on user1.t1 since no user level privilege is around&lt;br/&gt;
user1&lt;br/&gt;
grant select on t1 to public&lt;br/&gt;
revoke select on t1 from PUBLIC&lt;br/&gt;
&amp;#8211; the above revoke will drop user2.v1, Ideally, rather than dropping user2.v1, Derby can make user2.v1 depend on available user-level privilege&lt;br/&gt;
&amp;#8211; this doesn&apos;t happen at this point and hence we should document the existing behavior to clear any confusion&lt;/p&gt;</comment>
                            <comment id="12429933" author="yipng" created="Wed, 23 Aug 2006 09:27:17 +0100"  >&lt;p&gt;It seems that the getTablePermissions( UUID ) method in DataDictionaryImpl might be problematic.&lt;br/&gt;
This method is called when the dependency manager needs to get a dependable via its provider id. (tableperms id)&lt;br/&gt;
(i.e.:  getPersistentProviderInfos() of the dependency manager)&lt;/p&gt;

&lt;p&gt;In getTablePermissions(UUID), the TablePermsDescriptor constructor will set its member vars grantee and TableUUID &lt;br/&gt;
to null since the row in sys.systableperms can be located via tablePermsUUID (instead of tableUUID, grantor and grantee).  But during getPermissions() processing, the hashCode() of the TablePermsDescriptor will be invoked by the permissionCache which eventually will lead to a call to grantee.hashCode(); thus, resulting in NullPointerException.&lt;/p&gt;


&lt;p&gt;public TablePermsDescriptor getTablePermissions( UUID tablePermsUUID) throws StandardException &lt;/p&gt;
{
    TablePermsDescriptor key = new TablePermsDescriptor( this, tablePermsUUID);
    return (TablePermsDescriptor) getPermissions( key);
}</comment>
                            <comment id="12430191" author="mamtas" created="Thu, 24 Aug 2006 08:51:26 +0100"  >&lt;p&gt;Yip, I would like to debug the behavior you mentioned. Do you have a test case that I could try to reproduce the NPE?&lt;/p&gt;</comment>
                            <comment id="12430242" author="rhillegas" created="Thu, 24 Aug 2006 15:08:26 +0100"  >&lt;p&gt;Assign to 10.2 and bump urgency.&lt;/p&gt;</comment>
                            <comment id="12430325" author="yipng" created="Thu, 24 Aug 2006 21:44:10 +0100"  >&lt;p&gt;Mamta, one can reproduce this by reading the entries from SYSDEPENDS that has a row that have a tableperms as its provider id.  For example, via getPersistentProviderInfos() of the dependency manager.  This will eventually call the getTablePermissions(UUID) from DDdependableFinder object, which will lead to the NPE I described above.  All the getXXXPermissions(UUID) methods also have the same problem.&lt;/p&gt;


</comment>
                            <comment id="12430351" author="yipng" created="Thu, 24 Aug 2006 23:28:59 +0100"  >&lt;p&gt;I noticed getPersistentProviderInfos() are overloaded, so to be precise, call getPersistentProviderInfos(Dependent) with a dependent that depends on the table privilege from dependency manager to see the NPE symptom.&lt;/p&gt;</comment>
                            <comment id="12430438" author="yipng" created="Fri, 25 Aug 2006 09:25:45 +0100"  >&lt;p&gt;How does the PermissionsCache work with respect to passing two type of keys to represent the same PermissionDescriptor?  If an object can be represented by two type of keys, how does it take advantage of the cache?  Once one key&apos;s identity  is set, its hash code should remain the same while it is stored in the cache, wouldn&apos;t the &quot;other&quot; key always miss then?  &lt;/p&gt;

&lt;p&gt;For example, in the case of TablePermsDescriptor, there is one key that is composed of (grantee + tableUUID) and the other is the UUID of the TablePermsDescriptor.  However, in its equals() and hashCode() implementation, it only takes in account for the (grantee + tableUUID) case.  &lt;/p&gt;

&lt;p&gt;The getTablePermissions( UUID ) and other getXXXPermissions(UUID) seems to be mainly used by  the dependency manager when it needs to load the stored dependencies which have PermissionDescriptor as a provider id but currently there is no code to force loading these stored dependencies.  So in order to reproduce the NPE problem, one can call getPersistentProviderInfos(Dependent) of the dependency manager.&lt;/p&gt;
</comment>
                            <comment id="12430533" author="mamtas" created="Fri, 25 Aug 2006 17:10:58 +0100"  >&lt;p&gt;Yip, the NPE behavrior you are describing is something I had run into before the dependency manager (DM) was changed by Dan with Revision: 425479 &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1581&quot; title=&quot;BasicDependencyManager re-loads the Provider multiple times from the DataDictionary when loading the stored dependencies for the Provider.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1581&quot;&gt;&lt;del&gt;DERBY-1581&lt;/del&gt;&lt;/a&gt;. (You can find the disucssion of this very topic in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1539&quot; title=&quot;A  trigger should be dropped when a privilege required by the trigger is revoked.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1539&quot;&gt;&lt;del&gt;DERBY-1539&lt;/del&gt;&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Prior to Dan&apos;s changes, DM loaded the passed Provider while building the list of dependents for the passed Provider. But since the Provider object is already available to DM as parameter to the method, there really is not need to recreate Provider object. Before Dan&apos;s changes to not construct Provider object, the code path used to run into hashCode() and would get null pointer exception because at this point in DM, we only know about the UUID and not the tableUUID. &lt;/p&gt;

&lt;p&gt;After Dan&apos;s fix for the Provider objects, we do not go through the cache to construct the Provider object anymore and hence do not run into the hashCode() which expects that tableUUID be non-null. &lt;/p&gt;

&lt;p&gt;Hope this answers your question.&lt;/p&gt;</comment>
                            <comment id="12430545" author="yipng" created="Fri, 25 Aug 2006 18:19:57 +0100"  >&lt;p&gt;Mamta, thanks for those jira links.  My actual concern is the working of the permission cache.  From what I interpret from those discussion, it seems that getXXXPermissions(UUID) are currently never called from the code line; thus, they are never exercised.   Dan&apos;s patch addressed the issue of avoiding to reconstruct the &quot;provider&quot; from the stored dependencies; however, my example above is actually of the &quot;dependent&quot;.  There are cases where we need to exercise getXXXPermissions(UUID) to make use of the stored dependencies.  For example, when granting a view that has underlying objects that is not own by the grantor, we need to go through all the view&apos;s providers to see if they are own by the grantor  ( + grant option check, but since Derby does not support this yet, I&apos;ll skip the details).  So, the getXXXPermission(UUID) needs to be called and currently the equals and hashCode methods of the various PermissionDescriptor types do need to address the nullibility of grantee and tableUUID or other related field that is used for the hashing.  Even though the nullibility are addressed... back to my original question:&lt;/p&gt;

&lt;p&gt;How does the PermissionsCache work with respect to passing two type of keys to represent the same PermissionDescriptor? If an object can be represented by two type of keys, how does it take advantage of the cache? Once one key&apos;s identity is set, its hash code should remain the same while it is stored in the cache, wouldn&apos;t the &quot;other&quot; key always miss then?&lt;/p&gt;</comment>
                            <comment id="12430551" author="mamtas" created="Fri, 25 Aug 2006 18:37:51 +0100"  >&lt;p&gt;Yip, I thought you were running into NPE with the functionality implemented so far. &lt;/p&gt;

&lt;p&gt;As for when the PermissionDescriptor gets used as dependent, unfortunately, I think there can be NPE issue because of 2 types of keys associated with PermissionDescriptors and we will need to resolve this issue for what you are trying to accomplish. I do remember that some of the other Descriptors do not go through the cache when going through the DM(I think) and we could possibly do the same for PermissionDescriptors but I think more research is required in this area.&lt;/p&gt;</comment>
                            <comment id="12430565" author="yipng" created="Fri, 25 Aug 2006 19:09:47 +0100"  >&lt;p&gt;Yes, it is unfortunate indeed.  The permissions cache won&apos;t work properly when we are dealing with 2 types of keys associated with PermissionDescriptors.  It looks like when calling getXXXPermissions(UUID), there is no choice but to load it from sys.sysdepends and bypass the cache mechanism since:&lt;/p&gt;

&lt;p&gt;1.  The UUID of the PermissionDescriptor as a key will always miss the cache because the identity of the object is determined by the grantee and other related fields currently.&lt;/p&gt;

&lt;p&gt;2.  The UUID of the PermissionDescriptor is not part of the equations of equals and hashCode method.  It cannot because Derby do not know the &quot;other&quot; key value upfront during compilation of a statement until we retrieve it from the stored dependencies.&lt;/p&gt;
</comment>
                            <comment id="12431492" author="mamtas" created="Wed, 30 Aug 2006 07:37:28 +0100"  >&lt;p&gt;Closing this issue since I am finished with the work targeted for 10.2 release. The remaining work for this issue is getting tracked in following 2 jira entries &lt;br/&gt;
1)&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1782&quot; title=&quot;When a privilege is revoked at table level, Derby should only drop objects that require that particular privilege and not all the objects that require some form of privilege on that table.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1782&quot;&gt;DERBY-1782&lt;/a&gt;&lt;br/&gt;
2)&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1632&quot; title=&quot;During revoke privilege, Derby does not look for replacement privilege for the dependent objects and simply drops the dependent objects. This is not SQL compliant and should be fixed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1632&quot;&gt;DERBY-1632&lt;/a&gt;&lt;br/&gt;
3)&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1631&quot; title=&quot;Derby needs to support drop view cascade in order for revoke privilege to function correctly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1631&quot;&gt;&lt;del&gt;DERBY-1631&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will link the these issuess so we can keep track of the correlation between them.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12347332">DERBY-1646</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12346301">DERBY-1539</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12346922">DERBY-1611</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12346923">DERBY-1612</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12347285">DERBY-1643</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12346534">DERBY-1579</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12347134">DERBY-1632</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12348900">DERBY-1782</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12347842">DERBY-1686</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12347130">DERBY-1631</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12334454" name="AuthorizationModelForDerbySQLStandardAuthorization.html" size="14124" author="mamtas" created="Wed, 24 May 2006 00:55:05 +0100"/>
                            <attachment id="12335479" name="AuthorizationModelForDerbySQLStandardAuthorizationV2.html" size="12803" author="mamtas" created="Thu, 15 Jun 2006 12:49:52 +0100"/>
                            <attachment id="12337135" name="DERBY1330javaDocWarningsDiffV9.txt" size="2545" author="mamtas" created="Wed, 19 Jul 2006 03:11:22 +0100"/>
                            <attachment id="12337136" name="DERBY1330javaDocWarningsStatV9.txt" size="305" author="mamtas" created="Wed, 19 Jul 2006 03:11:22 +0100"/>
                            <attachment id="12337038" name="Derby1330MinorCleanupV7diff.txt" size="2704" author="mamtas" created="Mon, 17 Jul 2006 17:38:59 +0100"/>
                            <attachment id="12337039" name="Derby1330MinorCleanupV7stat.txt" size="153" author="mamtas" created="Mon, 17 Jul 2006 17:38:59 +0100"/>
                            <attachment id="12336333" name="Derby1330PrivilegeCollectionV2diff.txt" size="370565" author="mamtas" created="Wed, 5 Jul 2006 00:07:03 +0100"/>
                            <attachment id="12336334" name="Derby1330PrivilegeCollectionV2stat.txt" size="3928" author="mamtas" created="Wed, 5 Jul 2006 00:07:03 +0100"/>
                            <attachment id="12336525" name="Derby1330PrivilegeCollectionV3diff.txt" size="371321" author="mamtas" created="Sat, 8 Jul 2006 18:56:49 +0100"/>
                            <attachment id="12336526" name="Derby1330PrivilegeCollectionV3stat.txt" size="4005" author="mamtas" created="Sat, 8 Jul 2006 18:56:49 +0100"/>
                            <attachment id="12336026" name="Derby1330ViewPrivilegeCollectionV1diff.txt" size="360421" author="mamtas" created="Wed, 28 Jun 2006 06:10:06 +0100"/>
                            <attachment id="12336027" name="Derby1330ViewPrivilegeCollectionV1stat.txt" size="3668" author="mamtas" created="Wed, 28 Jun 2006 06:10:06 +0100"/>
                            <attachment id="12337212" name="Derby1330setUUIDinDataDictionaryV10diff.txt" size="5968" author="mamtas" created="Thu, 20 Jul 2006 05:48:52 +0100"/>
                            <attachment id="12337213" name="Derby1330setUUIDinDataDictionaryV10stat.txt" size="564" author="mamtas" created="Thu, 20 Jul 2006 05:48:52 +0100"/>
                            <attachment id="12337109" name="Derby1330setUUIDinDataDictionaryV8diff.txt" size="6792" author="mamtas" created="Tue, 18 Jul 2006 17:03:38 +0100"/>
                            <attachment id="12337110" name="Derby1330setUUIDinDataDictionaryV8stat.txt" size="639" author="mamtas" created="Tue, 18 Jul 2006 17:03:38 +0100"/>
                            <attachment id="12336628" name="Derby1330uuidIndexForPermsSystemTablesV4diff.txt" size="40041" author="mamtas" created="Tue, 11 Jul 2006 14:35:29 +0100"/>
                            <attachment id="12336629" name="Derby1330uuidIndexForPermsSystemTablesV4stat.txt" size="975" author="mamtas" created="Tue, 11 Jul 2006 14:35:29 +0100"/>
                            <attachment id="12336697" name="Derby1330uuidIndexForPermsSystemTablesV5diff.txt" size="86541" author="mamtas" created="Wed, 12 Jul 2006 11:47:52 +0100"/>
                            <attachment id="12336698" name="Derby1330uuidIndexForPermsSystemTablesV5stat.txt" size="1394" author="mamtas" created="Wed, 12 Jul 2006 11:47:52 +0100"/>
                            <attachment id="12336753" name="Derby1330uuidIndexForPermsSystemTablesV6diff.txt" size="19452" author="mamtas" created="Thu, 13 Jul 2006 00:37:14 +0100"/>
                            <attachment id="12336754" name="Derby1330uuidIndexForPermsSystemTablesV6stat.txt" size="478" author="mamtas" created="Thu, 13 Jul 2006 00:37:14 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 24 May 2006 03:40:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29949</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy14qf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40417</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10051"><![CDATA[Urgent]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>