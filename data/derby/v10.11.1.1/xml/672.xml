<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:14:34 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-672/DERBY-672.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-672] Re-enable user defined aggregates</title>
                <link>https://issues.apache.org/jira/browse/DERBY-672</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Nicolas Dufour in an email thread titled &quot;functions and list&quot; started on November 2, 2005 requests the ability to create user defined aggregates.&lt;/p&gt;

&lt;p&gt;This functionality used to be in Cloudscape. It was disabled presumably because it was considered non-standard. However, most of the machinery needed for this feature is still in the code. We should re-enable user defined aggregates after we agree on acceptable syntax.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12325245">DERBY-672</key>
            <summary>Re-enable user defined aggregates</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Thu, 3 Nov 2005 01:07:01 +0000</created>
                <updated>Mon, 3 Jun 2013 13:21:45 +0100</updated>
                            <resolved>Mon, 3 Jun 2013 13:21:37 +0100</resolved>
                                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>6</votes>
                                    <watches>7</watches>
                                                                                                            <comments>
                            <comment id="12457874" author="rhillegas" created="Tue, 12 Dec 2006 20:59:44 +0000"  >&lt;p&gt;I do not see ANSI syntax for this feature. Here is the syntax used by some other databases.&lt;/p&gt;

&lt;p&gt;----------------------------------------&lt;/p&gt;

&lt;p&gt;Cloudscape 3.5:&lt;/p&gt;

&lt;p&gt;CREATE AGGREGATE AggregateName FOR&lt;/p&gt;
    { JavaClassName | ClassAlias }

&lt;p&gt;The aliased class has to be an implementation of a Cloudscape interface (COM.cloudscape.aggregates.AggregateDefinition). That, in turn, means that the class has to implement a couple methods:&lt;/p&gt;

&lt;p&gt;accumulate() &amp;#8211; accumulator for non-grouped results&lt;br/&gt;
getResult()     &amp;#8211; the final result of the accumulation&lt;br/&gt;
merge()          &amp;#8211; accumulator for grouped results&lt;/p&gt;

&lt;p&gt;---------------------------------------&lt;/p&gt;

&lt;p&gt;Postgres 8.0.0:&lt;/p&gt;

&lt;p&gt;CREATE AGGREGATE name (&lt;br/&gt;
    BASETYPE = input_data_type,&lt;br/&gt;
    SFUNC = sfunc,&lt;br/&gt;
    STYPE = state_data_type&lt;br/&gt;
    [ , FINALFUNC = ffunc ]&lt;br/&gt;
    [ , INITCOND = initial_condition ]&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;Here&lt;/p&gt;

&lt;p&gt;SFUNC is the name of an accumulator function&lt;br/&gt;
FFUNC is the name of a function which returns the accumulated result&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;IBM Informix:&lt;/p&gt;

&lt;p&gt;CREATE AGGREGATE average&lt;br/&gt;
   WITH (&lt;br/&gt;
      INIT = initFunction,&lt;br/&gt;
      ITER = iterationFunction,&lt;br/&gt;
      COMBINE = combinationFunction,&lt;br/&gt;
      FINAL = resultFunction&lt;br/&gt;
      )&lt;/p&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;p&gt;initFunction is a function initializing the accumulator&lt;br/&gt;
iterationFunction a counting function&lt;br/&gt;
combinationFunction an accumulator function&lt;br/&gt;
resultFunction a function which returns the accumulated result&lt;/p&gt;


&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Oracle:&lt;/p&gt;

&lt;p&gt;In Oracle, you define a UDT which implements an aggregator interface. Then you bind that UDT to an aggregate name. See &lt;a href=&quot;http://download.oracle.com/docs/cd/B28359_01/appdev.111/b28425/aggr_functions.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/docs/cd/B28359_01/appdev.111/b28425/aggr_functions.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CREATE TYPE MyAggregatorRoutines(&lt;br/&gt;
   STATIC FUNCTION ODCIAggregateInitialize( ... ) ...,&lt;br/&gt;
   MEMBER FUNCTION ODCIAggregateIterate(...) ... ,&lt;br/&gt;
   MEMBER FUNCTION ODCIAggregateMerge(...) ...,&lt;br/&gt;
   MEMBER FUNCTION ODCIAggregateTerminate(...)&lt;br/&gt;
);&lt;br/&gt;
CREATE TYPE BODY MyAggregatorRoutines IS &lt;br/&gt;
...&lt;br/&gt;
END;&lt;/p&gt;

&lt;p&gt;CREATE FUNCTION MyAggregate(x SomeDataType) RETURN SomeDataType &lt;br/&gt;
AGGREGATE USING MyAggregateRoutines;&lt;/p&gt;




</comment>
                            <comment id="13026961" author="rhillegas" created="Fri, 29 Apr 2011 13:57:47 +0100"  >&lt;p&gt;Another use-case for this feature came up on the Derby user list: implementing a MySQL-style GROUP_CONCAT function. See &lt;a href=&quot;http://old.nabble.com/help-with-sql-query-for-Derby-to31503029.html#a31503029&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://old.nabble.com/help-with-sql-query-for-Derby-to31503029.html#a31503029&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13031306" author="rhillegas" created="Tue, 10 May 2011 19:50:36 +0100"  >&lt;p&gt;The SQL Server syntax for user-defined aggregates can be found here: &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182741.aspx&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://msdn.microsoft.com/en-us/library/ms182741.aspx&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms131051.aspx&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://msdn.microsoft.com/en-us/library/ms131051.aspx&lt;/a&gt; In summary, you bind an external class to an aggregate name. The class must satisfy a contract, which requires it to have methods to initialize, aggregate, merge, and terminate:&lt;/p&gt;

&lt;p&gt;CREATE AGGREGATE &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;lt;schemaName&amp;gt;.&amp;#93;&lt;/span&gt;&amp;lt;aggregateName&amp;gt; ( &amp;lt;functionParameter&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;, &amp;lt;functionParameter&amp;gt; &amp;#93;&lt;/span&gt; * )&lt;br/&gt;
RETURNS &amp;lt;returnDataType&amp;gt;&lt;br/&gt;
EXTERNAL NAME &amp;lt;className&amp;gt;&lt;/p&gt;

&lt;p&gt;where &amp;lt;functionParameter&amp;gt; is as defined for CREATE FUNCTION (a parameter name followed by a dataType)&lt;/p&gt;

&lt;p&gt;and &amp;lt;className&amp;gt; implements the following methods:&lt;/p&gt;

&lt;p&gt;public void init();&lt;br/&gt;
public void accumulate( &amp;lt;methodParameter&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;, &amp;lt;methodParameter&amp;gt; &amp;#93;&lt;/span&gt; *);  // method parameters correspond to function parameters above&lt;br/&gt;
public void merge( &amp;lt;className&amp;gt; otherAggregator );&lt;br/&gt;
public &amp;lt;returnType&amp;gt; terminate();  // returnType corresponds to returnDataType above&lt;/p&gt;

</comment>
                            <comment id="13031310" author="rhillegas" created="Tue, 10 May 2011 19:56:05 +0100"  >&lt;p&gt;The Virtuoso syntax for declaring a user-defined aggregate can be found here: &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtuoso_Universal_Server&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Virtuoso_Universal_Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CREATE AGGREGATE aggregate_name (parameter, parameter ...) [ RETURNS data_type ]&lt;br/&gt;
FROM&lt;br/&gt;
    init_procedure,&lt;br/&gt;
    acc_procedure,&lt;br/&gt;
    final_function&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;, merge_procedure &amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;parameter : parameter_type name data_type&lt;/p&gt;

&lt;p&gt;parameter_type : IN | INOUT&lt;/p&gt;</comment>
                            <comment id="13031316" author="rhillegas" created="Tue, 10 May 2011 20:05:31 +0100"  >&lt;p&gt;The IBM Informix syntax for declaring a user-defined aggregate can be found here: www.informixoncampus.org/IDS_DOC/SQLSyntax1150.pdf&lt;/p&gt;

&lt;p&gt;CREATE AGGREGATE &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;lt;schemaName&amp;gt;.&amp;#93;&lt;/span&gt;&amp;lt;aggregateName&amp;gt;&lt;br/&gt;
WITH&lt;br/&gt;
(&lt;br/&gt;
    [ INIT = &amp;lt;initFunctionName&amp;gt; ]&lt;br/&gt;
    ITER = &amp;lt;accumulatorFunctionName&amp;gt;&lt;br/&gt;
    COMBINE = &amp;lt;mergeFunctionName&amp;gt;&lt;br/&gt;
    [ FINAL = &amp;lt;resultsFunctionName&amp;gt; ]&lt;br/&gt;
    [ HANDLESNULLS ]&lt;br/&gt;
)&lt;/p&gt;</comment>
                            <comment id="13415462" author="rhillegas" created="Mon, 16 Jul 2012 19:04:34 +0100"  >&lt;p&gt;Here is a proposal for creating/dropping user defined aggregates in Derby. If this seems reasonable, I will write a functional spec. I would appreciate feedback on:&lt;/p&gt;

&lt;p&gt;1) Whether the syntax is acceptable.&lt;/p&gt;

&lt;p&gt;2) Whether the restriction to Java 5 (and above) is acceptable.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;

&lt;p&gt;--------------------------------&lt;/p&gt;

&lt;p&gt;Because there is no SQL Standard syntax for user defined aggregates, I see only two ways to offer this frequently requested feature:&lt;/p&gt;

&lt;p&gt;i) Introduce new system procedures to create and drop user defined aggregates.&lt;/p&gt;

&lt;p&gt;ii) Introduce Derby-specific syntax.&lt;/p&gt;

&lt;p&gt;Approach &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; might look something like this:&lt;/p&gt;

&lt;p&gt;sys.create_aggregate&lt;br/&gt;
(&lt;br/&gt;
    aggregateSchema varchar( 128 ),&lt;br/&gt;
    aggregateName varchar( 128 ),&lt;br/&gt;
    valueDataTypeSchema varchar( 128 ),&lt;br/&gt;
    valueDataTypeName varchar( 128 ),&lt;br/&gt;
    returnTypeSchema varchar( 128 ),&lt;br/&gt;
    returnTypeName varchar( 128 ),&lt;br/&gt;
    aggregateClassName varchar( 32672 )&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;sys.drop_aggregate&lt;br/&gt;
(&lt;br/&gt;
    aggregateSchema varchar( 128 ),&lt;br/&gt;
    aggregateName varchar( 128 )&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;Approach (ii) might look something like the following. Note that the extra &quot;derby&quot; keyword flags these statements as Derby extensions and protects us from syntax conflicts in case ANSI/ISO decide to introduce standard syntax in the future:&lt;/p&gt;

&lt;p&gt;create derby aggregate &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;lt;schemaName&amp;gt;.&amp;#93;&lt;/span&gt;&amp;lt;aggregateName&amp;gt; for &amp;lt;argumentDataType&amp;gt;&lt;br/&gt;
returns &amp;lt;returnDataType&amp;gt;&lt;br/&gt;
external name &amp;lt;className&amp;gt;&lt;/p&gt;

&lt;p&gt;drop derby aggregate &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;lt;schemaName&amp;gt;.&amp;#93;&lt;/span&gt;&amp;lt;aggregateName&amp;gt;&lt;/p&gt;


&lt;p&gt;The two approaches would look like this to the user:&lt;/p&gt;

&lt;p&gt;    call sys.create_aggregate ( &apos;APP&apos;, &apos;MODE&apos;, null, &apos;int&apos;, null, &apos;int&apos;, &apos;com.mycompany.myapp.aggs.Mode&apos; );&lt;/p&gt;

&lt;p&gt;    call sys.drop_aggregate ( &apos;APP&apos;, &apos;MODE&apos; );&lt;/p&gt;

&lt;p&gt;vs.:&lt;/p&gt;

&lt;p&gt;    create derby aggregate MODE for int&lt;br/&gt;
    returns int&lt;br/&gt;
    external name &apos;com.mycompany.myapp.aggs.Mode&apos;;&lt;/p&gt;

&lt;p&gt;    drop derby aggregate MODE;&lt;/p&gt;


&lt;p&gt;Here&apos;s how I rate these two approaches:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;:&lt;/p&gt;

&lt;p&gt;+ Compact&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Cryptic&lt;/li&gt;
	&lt;li&gt;Suffers the same identifier casing problems which mar our other system procedures.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(ii):&lt;/p&gt;

&lt;p&gt;+ Readable&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Verbose&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I think that approach (ii) is more elegant and attractive.&lt;/p&gt;

&lt;p&gt;--------------------------------&lt;/p&gt;

&lt;p&gt;Regardless of how we declare and drop user defined aggregates, they would be invoked just like builtin aggregates. For example:&lt;/p&gt;

&lt;p&gt;    select age, mode( salary )&lt;br/&gt;
    from employee&lt;br/&gt;
    group by age;&lt;/p&gt;


&lt;p&gt;--------------------------------&lt;/p&gt;

&lt;p&gt;User defined aggregates look like parameterized types to me. That means that they would be available on platforms operating at level Java 5 or higher. They would not be available on CDC platforms. To run them on small devices, you would need Java Embedded SE.&lt;/p&gt;

&lt;p&gt;I think that a user defined aggregate is a class which implements the following interface. A little mapping code would be necessary to map between this interface and the Java implementations expected by Postgres, IBM, and Oracle. Regardless of the Java api we require, some (probably trivial) re-coding would be necessary to port an aggregate between Derby and Microsoft&apos;s .NET apis.&lt;/p&gt;

&lt;p&gt;Note that the interface extends Serializable. That is because Derby may have to serialize these objects when sorts spill to disk.&lt;/p&gt;


&lt;p&gt;package org.apache.derby.agg;&lt;/p&gt;

&lt;p&gt;import java.io.Serializable;&lt;br/&gt;
import java.sql.SQLException;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;Behavior of a user-defined Derby aggregator. Aggregates values&lt;/li&gt;
	&lt;li&gt;of type V and returns a result of type R. In addition to the methods&lt;/li&gt;
	&lt;li&gt;in the interface, implementing classes must have a 0-arg public&lt;/li&gt;
	&lt;li&gt;constructor.&lt;/li&gt;
	&lt;li&gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
 */&lt;br/&gt;
public interface Aggregator&amp;lt;V,R&amp;gt;    extends Serializable
{
    /** Initialize the Aggregator */
    public void init()  throws SQLException;

    /** Accumulate the next scalar value */
    public  void    accumulate( V value )   throws SQLException;

    /**
     * For merging another partial result into this Aggregator.
     * This lets the SQL interpreter divide the incoming rows into
     * subsets, aggregating each subset in isolation, and then merging
     * the partial results together.
     */
    public  void    merge( Aggregator&amp;lt;V,R&amp;gt; otherAggregator )    throws SQLException;

    /** Return the result scalar value */
    public  R   terminate() throws SQLException;
}&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13416960" author="knutanders" created="Wed, 18 Jul 2012 10:36:03 +0100"  >&lt;p&gt;The proposal looks good to me. I would be fine with either of the two alternatives, but I agree that alternative (ii) sounds more elegant. It might also be more flexible, as adding optional clauses to the syntax later is probably easier than adding more parameters to existing procedures.&lt;/p&gt;

&lt;p&gt;I have no objections to restricting new features to modern platforms. By using parameterized types, the user doesn&apos;t have to cast the parameter in the accumulate() method, and it is checked at compile time that the value returned from terminate() has the correct type.&lt;/p&gt;

&lt;p&gt;It does however still seem to me that the user will have to cast the otherAggregator parameter that&apos;s passed to the merge() method, as the implementation in most cases will need to access fields/method of the instance that&apos;s passed in. Example (reimplementing the SUM aggregate function for integers):&lt;/p&gt;

&lt;p&gt;public class MyIntSum implements Aggregator&amp;lt;Integer,Integer&amp;gt; {&lt;br/&gt;
  private int sum;&lt;br/&gt;
  public void init() &lt;/p&gt;
{ sum=0; }&lt;br/&gt;
  public void accumulate(Integer value) { sum += value; }&lt;br/&gt;
  public void merge(Aggregator&amp;lt;Integer,Integer&amp;gt; otherAggregator) {
    MyIntSum that = (MyIntSum) otherAggregator;
    this.sum += that.sum;
  }&lt;br/&gt;
  public Integer terminate() { return sum; }&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Not sure what&apos;s the cleanest way to handle this. Maybe we could add a third parameterized type that tells which kind of aggregators it can be merged with. That would mean changing the interface declaration like this:&lt;br/&gt;
&lt;br/&gt;
public interface Aggregator&amp;lt;V, R, T extends Aggregator&amp;lt;V,R,T&amp;gt;&amp;gt; extends Serializable
{
...
public void merge( T otherAggregator ) throws SQLException;
...
}&lt;br/&gt;
&lt;br/&gt;
and MyIntSum would become:&lt;br/&gt;
&lt;br/&gt;
public class MyIntSum implements Aggregator&amp;lt;Integer,Integer,MyIntSum&amp;gt; {&lt;br/&gt;
  private int sum;&lt;br/&gt;
  public void init() { sum=0; }
&lt;p&gt;  public void accumulate(Integer value) &lt;/p&gt;
{ sum += value; }
&lt;p&gt;  public void merge(MyIntSum that) &lt;/p&gt;
{ this.sum += that.sum; }
&lt;p&gt;  public Integer terminate() &lt;/p&gt;
{ return sum; }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;It makes the declaration a little more messy, but the implementation becomes more concise and statically type-checked.&lt;/p&gt;</comment>
                            <comment id="13416965" author="knutanders" created="Wed, 18 Jul 2012 10:50:32 +0100"  >&lt;p&gt;The proposal doesn&apos;t say whether the class name argument itself could be a parameterized type.&lt;/p&gt;

&lt;p&gt;That is, could we have&lt;/p&gt;

&lt;p&gt;  public class MySum&amp;lt;T extends Number&amp;gt; implements Aggragator&amp;lt;T,T&amp;gt; &lt;/p&gt;
{ ... }

&lt;p&gt;and then define aggregates for two different types using that single class&lt;/p&gt;

&lt;p&gt;  create derby aggregate int_sum for int returns int external name &apos;MySum&amp;lt;Integer&amp;gt;&apos;;&lt;br/&gt;
  create derby aggregate bigint_sum for bigint returns bigint external name &apos;MySum&amp;lt;Long&amp;gt;&apos;;&lt;/p&gt;

&lt;p&gt;?&lt;/p&gt;

&lt;p&gt;Or would we have to define two separate sub-classes with fully specified types, like&lt;/p&gt;

&lt;p&gt;  public class MyIntSum extends MySum&amp;lt;Integer&amp;gt; {}&lt;br/&gt;
  public class MyBigintSum extends MySum&amp;lt;Long&amp;gt; {}&lt;/p&gt;

&lt;p&gt;  create derby aggregate int_sum for int returns int external name &apos;MyIntSum&apos;;&lt;br/&gt;
  create derby aggregate bigint_sum for bigint returns bigint external name &apos;MyBigintSum&apos;;&lt;/p&gt;

&lt;p&gt;?&lt;/p&gt;</comment>
                            <comment id="13417176" author="rhillegas" created="Wed, 18 Jul 2012 16:32:25 +0100"  >&lt;p&gt;Thanks for continuing the discussion, Knut. I like your suggestion for how to eliminate the need to cast inside the merge() method. I agree that it makes the Aggregator interface iself a little more wordy, but I don&apos;t have a better idea.&lt;/p&gt;

&lt;p&gt;I hope that users will be able to re-use an Aggregator for multiple datatypes as shown in your first example:&lt;/p&gt;

&lt;p&gt;  create derby aggregate int_sum for int returns int external name &apos;MySum&amp;lt;Integer&amp;gt;&apos;;&lt;br/&gt;
  create derby aggregate bigint_sum for bigint returns bigint external name &apos;MySum&amp;lt;Long&amp;gt;&apos;;&lt;/p&gt;

&lt;p&gt;I suppose it depends on whether Derby can currently swallow a genericized class name and, if not, how hard it would be to teach Derby this trick. We may need to get further into implementation before we can answer your question. Thanks.&lt;/p&gt;</comment>
                            <comment id="13417373" author="rhillegas" created="Wed, 18 Jul 2012 19:58:22 +0100"  >&lt;p&gt;Attaching UserDefinedAggregates.html, the first rev of a functional spec for this feature.&lt;/p&gt;</comment>
                            <comment id="13417624" author="kmarsden" created="Wed, 18 Jul 2012 20:56:43 +0100"  >&lt;p&gt;I am sorry I haven&apos;t been following recent discussions closely.  I think stored procedures  are better than  non-standard SQL even if less elegant.&lt;/p&gt;
</comment>
                            <comment id="13417703" author="mamtas" created="Wed, 18 Jul 2012 22:29:20 +0100"  >&lt;p&gt;I agree with Kathey, I would prefer us adding a new stored procedure rather than adding non-SQL compliant SQL. We have used procedures for other non-standard features like update/drop statistics and it will be good to follow the same path for any non-compliant work.&lt;/p&gt;</comment>
                            <comment id="13418399" author="kmarsden" created="Thu, 19 Jul 2012 17:08:43 +0100"  >&lt;p&gt;I am curious. Is there any ongoing or proposed SQL standard work regarding user defined aggregates?&lt;/p&gt;</comment>
                            <comment id="13418464" author="rhillegas" created="Thu, 19 Jul 2012 18:20:03 +0100"  >&lt;p&gt;Thanks for continuing the discussion, Kathey and Mamta. In writing the first draft of the functional spec, I realized that we would also need GRANT/REVOKE syntax for user defined aggregates (UDAs). That further tipped me toward preferring using SQL for declaring/dropping these objects. I thought it would look odd for some UDA-related DDL operations to happen via SQL and others via stored procedures. In addition, I decided that using procedures would be a break with current Derby practice: today we use SQL to create and drop all other kinds of schema objects. No other kind of schema object is created/dropped via procedures.&lt;/p&gt;

&lt;p&gt;I want to address Mamta&apos;s comment about SQL compliance. The word &quot;compliance&quot; does not appear in the Standard. Probably what is intended here is &quot;SQL conformance&quot;. Every DBMS vendor supports vendor-specific extensions in their SQL dialects. These extensions don&apos;t make their implementations non-conforming.  Non-conformance is caused by failing to implement required features or by mis-implementing features which are defined by the Standard. SQL conformance is defined by part 1 chapter 8, part 2 chapter 25, and (for a Java database like Derby) part 13 chapter 16. In particular, part 1 section 8.4 says:&lt;/p&gt;

&lt;p&gt;&quot;An SQL-implementation may provide implementation-defined features that are additional to those specified by ISO/IEC 9075, and may add to the list of reserved words.&quot;&lt;/p&gt;

&lt;p&gt;Vendor-specific extensions must be carefully considered, however. We want to avoid the following problems:&lt;/p&gt;

&lt;p&gt;1) Creating the impression that the extension is Standard and therefore portable.&lt;/p&gt;

&lt;p&gt;2) Increasing the porting burden for applications which need to run on multiple DBMSes.&lt;/p&gt;

&lt;p&gt;3) Creating syntax which may become non-conforming if the Standard defines conflicting syntax later on.&lt;/p&gt;

&lt;p&gt;The proposed syntax does not suffer from these problems, for the following reasons:&lt;/p&gt;

&lt;p&gt;1&apos;) The use of the DERBY keyword clearly flags this syntax as a Derby extension.&lt;/p&gt;

&lt;p&gt;2&apos;) Many DBMSes support UDAs but the Standard has not defined an api in this area. Using UDAs necessarily causes a porting issue. Simply implementing this JIRA will hopefully reduce the porting burden because applications will not have to rewrite their DML in order to workaround Derby&apos;s lack of support for UDAs. I do not see how the porting burden is significantly affected by whether Derby uses stored procedures vs. SQL. &lt;/p&gt;

&lt;p&gt;3&apos;) The use of the DERBY keyword insulates us from future changes to the SQL spec, in case the Standard provides official syntax later on. There is no way that our syntax would conflict with the Standard and become non-conforming.&lt;/p&gt;

&lt;p&gt;Also note that if the Standard did supply official syntax later on, we would want to consider implementing it, hooking it up to the machinery which this JIRA will enable. That is true regardless of whether Derby uses stored procedures or SQL.&lt;/p&gt;

&lt;p&gt;However, I am not aware of any interest by the SQL committee in trying to harmonize the divergent extensions in this area.&lt;/p&gt;

&lt;p&gt;Hope this clarifies my reasoning.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13436107" author="rhillegas" created="Thu, 16 Aug 2012 18:04:06 +0100"  >&lt;p&gt;Attaching 2nd rev of a functional spec for this issue. The chief change here is to clarify that user-defined aggregates live in the same namespace as 1-arg user-defined functions and to avoid widening the namespace issue identified by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5901&quot; title=&quot;You can declare user-defined functions which shadow builtin functions by the same name.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5901&quot;&gt;DERBY-5901&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13436110" author="rhillegas" created="Thu, 16 Aug 2012 18:06:14 +0100"  >&lt;p&gt;Linking to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5901&quot; title=&quot;You can declare user-defined functions which shadow builtin functions by the same name.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5901&quot;&gt;DERBY-5901&lt;/a&gt;. Solutions to that issue may take advantage of work done on user-defined aggregates.&lt;/p&gt;</comment>
                            <comment id="13436125" author="rhillegas" created="Thu, 16 Aug 2012 18:21:09 +0100"  >&lt;p&gt;Attaching derby-672-01-aa-ddl.diff. This patch adds CREATE and DROP ddl for user-defined aggregates, including dblook support and upgrade tests. I am running full regression tests now.&lt;/p&gt;

&lt;p&gt;This patch adds support for the following two DDL statements:&lt;/p&gt;

&lt;p&gt;CREATE DERBY AGGREGATE [ schemaName. ] SQL92Identifier&lt;br/&gt;
FOR ValueDataType&lt;br/&gt;
[ RETURNS ReturnDataType ]&lt;br/&gt;
EXTERNAL NAME ClassNameString&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;DROP DERBY AGGREGATE [ schemaName. ] SQL92Identifier RESTRICT&lt;/p&gt;

&lt;p&gt;I have gone to some trouble to prevent name collisions between user-defined aggregates and 1-arg functions. That work may be useful when we address &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5901&quot; title=&quot;You can declare user-defined functions which shadow builtin functions by the same name.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5901&quot;&gt;DERBY-5901&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/depend/DependencyManager.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/AliasDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/AliasInfo.java&lt;br/&gt;
A       java/engine/org/apache/derby/catalog/types/AggregateAliasInfo.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java&lt;/p&gt;

&lt;p&gt;A user-defined aggregate is implemented as a kind of Java alias, like SQL routines and UDTs.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/DropAliasNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/CreateAliasConstantAction.java&lt;/p&gt;

&lt;p&gt;Actual DDL support. Introduces 2 new non-reserved keywords: DERBY and AGGREGATE.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/loc/toolsmessages.properties&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error messages introduced by the new DDL.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/tools/dblook.java&lt;br/&gt;
M       java/tools/org/apache/derby/impl/tools/dblook/DB_Alias.java&lt;/p&gt;

&lt;p&gt;Tool support for re-creating aggregate DDL when dumping a database.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/junit/JDBC.java&lt;/p&gt;

&lt;p&gt;Support for dropping aggregates when scouring out schemas inbetween regression test cases.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_10.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_makeDB_2.sql&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/master/dblook_test_territory.out&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/master/dblook_test.out&lt;/p&gt;

&lt;p&gt;New regression tests for basic aggregate DDL, dblook, and upgrade.&lt;/p&gt;</comment>
                            <comment id="13436207" author="rhillegas" created="Thu, 16 Aug 2012 19:38:10 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-672-01-aa-ddl.diff.&lt;/p&gt;</comment>
                            <comment id="13436978" author="rhillegas" created="Fri, 17 Aug 2012 20:08:50 +0100"  >&lt;p&gt;Committed derby-672-01-aa-ddl.diff at subversion revision 1374399.&lt;/p&gt;</comment>
                            <comment id="13443480" author="rhillegas" created="Tue, 28 Aug 2012 21:12:24 +0100"  >&lt;p&gt;Attaching derby-672-02-ac-nonDistinct.diff. This patch adds bind() and execute() support for non-distinct user-defined aggregates. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;With this patch you can invoke user-defined aggregates in simple queries. These include both scalar and grouped results. So, for instance, the following script now runs correctly:&lt;/p&gt;

&lt;p&gt;create derby aggregate mode for int external name &apos;org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate&apos;;&lt;br/&gt;
create table mode_inputs( a int, b int );&lt;br/&gt;
insert into mode_inputs( a, b ) values ( 1, 1 ), ( 1, 2 ), ( 1, 2 ), ( 1, 2 ), ( 2, 3 ), ( 2, 3 ), ( 2, 4 );&lt;br/&gt;
select mode( b ) from mode_inputs;&lt;br/&gt;
select a, mode( b ) from mode_inputs group by a;&lt;/p&gt;

&lt;p&gt;Support is NOT included for DISTINCT invocations of user-defined aggregates nor for user-defined aggregates in HAVING clauses.&lt;/p&gt;

&lt;p&gt;On 2012-07-18 Knut wondered whether we would support parameterized aggregates, e.g., with elegant syntax like the following:&lt;/p&gt;

&lt;p&gt;    create derby aggregate int_mode for int external name &apos;GenericMode&amp;lt;Integer&amp;gt;&apos;; &lt;/p&gt;

&lt;p&gt;Unfortunately, I have not been able to make this work. That is because type erasure makes it impossible to instantiate the aggregate via Class.forName(). The following sample code demonstrates the problem:&lt;/p&gt;

&lt;p&gt;public  class   z&lt;br/&gt;
{&lt;br/&gt;
    public  static  void    main( String[] args ) throws Exception&lt;/p&gt;
    {
        // raises a ClassNotFoundException
        Class.forName( &quot;java.util.ArrayList&amp;lt;String&amp;gt;&quot; );
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Your thoughts about how to work around this limitation are welcome. In the meantime, the following less elegant syntax will work:&lt;/p&gt;

&lt;p&gt;public  class   GenericMode&amp;lt;V extends Comparable&amp;lt;V&amp;gt;&amp;gt;    implements  Aggregator&amp;lt;V,V,GenericMode&amp;lt;V&amp;gt;&amp;gt;&lt;br/&gt;
{&lt;br/&gt;
    public  static  final   class   IntMode extends GenericMode&amp;lt;Integer&amp;gt; {}&lt;/p&gt;

&lt;p&gt;   ...&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;    create derby aggregate intMode for int external name &apos;GenericMode$IntMode&apos;;&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/agg&lt;br/&gt;
A       java/engine/org/apache/derby/agg/Aggregator.java&lt;br/&gt;
A       java/engine/org/apache/derby/agg/build.xml&lt;br/&gt;
M       tools/javadoc/publishedapi.ant&lt;br/&gt;
M       java/engine/build.xml&lt;/p&gt;

&lt;p&gt;Adds this interface to the public api. This is the interface which users implement in order to create a user-defined aggregate.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/services/reflect/Java5ClassFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/services/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/modules.properties&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/build.xml&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/services/loader/Java5ClassInspector.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;Adds a new implementation of the ClassFactory module, for use on JVMs which support generics. Adds the following new method to ClassInspector:&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Given an implementation of a parameterized class/interface, return&lt;/li&gt;
	&lt;li&gt;the actual concrete types of the parameters. Types are returned in the&lt;/li&gt;
	&lt;li&gt;order that they are declared by the parameterized class/interface.&lt;/li&gt;
	&lt;li&gt;So for instance, if the parameterized class is Map&amp;lt;K,V&amp;gt; and the&lt;/li&gt;
	&lt;li&gt;implementation is HashMap&amp;lt;Integer,String&amp;gt;, then the return value is&lt;/li&gt;
	&lt;li&gt;[ Integer.class, String.class ]. This method raises an exception if the&lt;/li&gt;
	&lt;li&gt;JVM does not support generics. May return null if type resolution fails.&lt;br/&gt;
	 */&lt;br/&gt;
	public Class[] getGenericParameterTypes( Class parameterizedType, Class implementation )&lt;br/&gt;
        throws StandardException;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;On CDC/FP this method raises an exception. On Java 5 and higher, this resolves the types of the generic variables. Fortunately, this type resolution is possible via the reflection classes. Unfortunately, getting at this information is far from straightforward.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/catalog/types/AggregateAliasInfo.java&lt;/p&gt;

&lt;p&gt;Added some accessors to this metadata descriptor.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/sql/compile/UserAggregateDefinition.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/AggregateDefinition.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;Bind-time logic for handling non-distinct user-defined aggregates in the SELECT list. These are the highlights:&lt;/p&gt;

&lt;p&gt;1) JavaToSQLValueNode.bindExpression() and StaticMethodCallNode.bindExpression() cooperate to check whether the invocation of a single-arg function is actually the invocation of a user-defined aggregate.&lt;/p&gt;

&lt;p&gt;2) If so, StaticMethodCallNode.bindExpression() returns an AggregateNode wrapping a UserAggregateDefinition.&lt;/p&gt;

&lt;p&gt;3) UserAggregateDefinition calls ClassInspector.getGenericParameterTypes() in order to resolve the user-defined aggregate&apos;s types. It is expected that the actual types will correspond to the declared types under the same rules which map SQL routines args to Java method args.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/execute/ExecAggregator.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/reference/ClassName.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/GenericAggregator.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/CountAggregator.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/MaxMinAggregator.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/sql/execute/UserDefinedAggregator.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/OrderableAggregator.java&lt;br/&gt;
M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;Execution logic for invoking user-defined aggregates. Some additional parameters were added to the ExecAggregator.setup() method. The guts of the execution logic are in UserDefinedAggregator, a new implementation of ExecAggregator.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/MessageId.java&lt;/p&gt;

&lt;p&gt;New error messages.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GenericMode.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/ModeAggregate.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/build.xml&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;/p&gt;

&lt;p&gt;Tests for this functionality. Includes tests for scalar and grouped user-defined aggregates. Includes tests for user-defined aggregates which extend generic implementations. These tests do not run on small devices.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java&lt;/p&gt;

&lt;p&gt;Added a test case for CDC/FP, verifying that we raise a reasonable error if someone tries to execute a user-defined aggregate on a small device.&lt;/p&gt;</comment>
                            <comment id="13444199" author="rhillegas" created="Wed, 29 Aug 2012 17:54:09 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-672-02-ac-nonDistinct.diff. Committed at subversion revision 1378639.&lt;/p&gt;</comment>
                            <comment id="13445976" author="rhillegas" created="Fri, 31 Aug 2012 15:14:13 +0100"  >&lt;p&gt;Attaching derby-672-03-aa-distinct.diff. This patch adds support for invoking DISTINCT user-defined aggregates in the SELECT list. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;New parser production for DISTINCT user-defined aggregate invocations. When looking for function invocations, we also look for DISTINCT user-defined aggregate invocations. If we find one, we return an AggregateNode rather than a StaticMethodCallNode.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;Bind-time support for AggregateNodes which were created by the new parser production.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/UserDefinedAggregator.java&lt;/p&gt;

&lt;p&gt;Fixes a casting error in the runtime logic for user-defined aggregates. The cast occurs in the merge() processing, which is tickled by DISTINCT aggregates.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;New test cases.&lt;/p&gt;</comment>
                            <comment id="13446087" author="knutanders" created="Fri, 31 Aug 2012 17:17:14 +0100"  >&lt;p&gt;The last commit seems to have caused a test failure on Java ME: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/Daily/javaME/testing/Limited/testSummary-1378997.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/Daily/javaME/testing/Limited/testSummary-1378997.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) testUDAWithoutGenerics(org.apache.derbyTesting.functionTests.tests.lang.UngroupedAggregatesNegativeTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&amp;lt;X&lt;span class=&quot;error&quot;&gt;&amp;#91;BCM5&amp;#93;&lt;/span&gt;&amp;gt; but was:&amp;lt;X&lt;span class=&quot;error&quot;&gt;&amp;#91;J001&amp;#93;&lt;/span&gt;&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:853)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:882)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:896)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementErrorMinion(BaseJDBCTestCase.java:1106)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1052)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1135)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.UngroupedAggregatesNegativeTest.testUDAWithoutGenerics(UngroupedAggregatesNegativeTest.java:121)&lt;br/&gt;
(...)&lt;br/&gt;
Caused by: java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate : org/apache/derbyTesting/functionTests/tests/lang/ModeAggregate (Unsupported major.minor version 49.0)&lt;br/&gt;
(...)&lt;/p&gt;</comment>
                            <comment id="13446128" author="rhillegas" created="Fri, 31 Aug 2012 17:56:38 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-672-03-aa-distinct.diff. Attaching a second rev of the patch, which includes more test cases: derby-672-03-ab-distinct.diff. Committed at revision 1379505.&lt;/p&gt;</comment>
                            <comment id="13446154" author="rhillegas" created="Fri, 31 Aug 2012 18:32:06 +0100"  >&lt;p&gt;Thanks for spotting that test failure, Knut. Attaching derby-672-04-aa-fixJSR169test.diff, which hopefully fixes the test. The patch changes the test to treat both XBCM5 and XJ001 as valid errors. Committed at subversion revision 1379519.&lt;/p&gt;

&lt;p&gt;I don&apos;t understand what&apos;s different between my Java ME environment and that of the test. With and without the patch, the test runs cleanly for me on both OJEC and phoneME.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java&lt;/p&gt;</comment>
                            <comment id="13446159" author="rhillegas" created="Fri, 31 Aug 2012 18:37:10 +0100"  >&lt;p&gt;I see the following errors on the test run on Java 7 on Sol32. See &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/Limited/testSummary-1378997.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/Limited/testSummary-1378997.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) test_01_basicSyntax(org.apache.derbyTesting.functionTests.tests.lang.UserDefinedAggregatesTest)java.sql.SQLException: DERBY AGGREGATE &apos;MODE&apos; already exists.&lt;br/&gt;
2) test_01_basicSyntax(org.apache.derbyTesting.functionTests.tests.lang.UserDefinedAggregatesTest)java.sql.SQLTransactionRollbackException: DERBY AGGREGATE &apos;MODE&apos; already exists.&lt;/p&gt;

&lt;p&gt;Probably caused by running the test cases in a different order on that platform.&lt;/p&gt;</comment>
                            <comment id="13446175" author="rhillegas" created="Fri, 31 Aug 2012 18:51:54 +0100"  >&lt;p&gt;Attaching derby-672-05-aa-java7testOrderProblem.diff. Hopefully this fixes the test order problem on Java 7 on Sol32. Committed at subversion revision 1379527.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;</comment>
                            <comment id="13447216" author="rhillegas" created="Mon, 3 Sep 2012 12:16:47 +0100"  >&lt;p&gt;Attaching derby-672-06-aa-grantRevoke.diff. This patch adds GRANT/REVOKE USAGE support for user-defined aggregates. Regression tests passed cleanly for me. Committed at subversion revision 1380202.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/StatementGenericPermission.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java&lt;/p&gt;

&lt;p&gt;Add user-defined aggregates to the dependency/privilege managers.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UserAggregateDefinition.java&lt;/p&gt;

&lt;p&gt;Wire-in dependency and privilege checking for invocations of user-defined aggregates.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java&lt;br/&gt;
M       java/tools/org/apache/derby/loc/toolsmessages.properties&lt;/p&gt;

&lt;p&gt;Support for reconstructing permissions on aggregates when the database schema is dumped.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;/p&gt;

&lt;p&gt;Add a new test for USAGE privilege on user-defined aggregates&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;Add a test case for dependencies of view/triggers on user-defined aggregates.&lt;/p&gt;</comment>
                            <comment id="13447221" author="rhillegas" created="Mon, 3 Sep 2012 12:25:22 +0100"  >&lt;p&gt;Attaching derby-672-07-aa-fixJSR169again.diff. This is a second attempt to fix UngroupedAggregatesNegativeTest. The previous fix just seemed to push the problem around. Committed at subversion revision 1380207.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java&lt;/p&gt;</comment>
                            <comment id="13447767" author="mamtas" created="Tue, 4 Sep 2012 16:54:00 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;The user-defined aggregate name will not conflict with builtin function names, right? May be it is not even an issue for user-defined aggregates but I wanted to bring it up anyways. There is a pre-existing jira for conflict between user-defined function names with builtin functions &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5901&quot; title=&quot;You can declare user-defined functions which shadow builtin functions by the same name.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5901&quot;&gt;DERBY-5901&lt;/a&gt; (You can declare user-defined functions which shadow builtin functions by the same name. )&lt;/p&gt;</comment>
                            <comment id="13447782" author="rhillegas" created="Tue, 4 Sep 2012 17:13:28 +0100"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;Thanks for thinking about this issue. Right, I have put in logic to prevent user-defined aggregate names from colliding with the names of functions, both builtin functions and user-defined functions. Thinking about this collision is what caused me to stumble across the existing problem with user-defined functions and to log &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5901&quot; title=&quot;You can declare user-defined functions which shadow builtin functions by the same name.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5901&quot;&gt;DERBY-5901&lt;/a&gt;. Technically, all that has to be prevented is the collision of user-defined aggregate names with the names of 1-arg functions. If someone complains about the over-broad limitation, we can dial it back later on. Thanks.&lt;/p&gt;</comment>
                            <comment id="13447894" author="rhillegas" created="Tue, 4 Sep 2012 19:23:33 +0100"  >&lt;p&gt;Attaching 3rd attempt to fix test failure on jsr 169: derby-672-08-aa-fixJSR169yetAgain.diff. Committed at subversion revision 1380784.&lt;/p&gt;</comment>
                            <comment id="13464657" author="rhillegas" created="Thu, 27 Sep 2012 13:18:54 +0100"  >&lt;p&gt;Attaching derby-672-09-ab-udtAggregates.diff. This patch makes it possible to create aggregates on user defined types. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java&lt;/p&gt;

&lt;p&gt;The input and return types of the aggregate needed to be bound in order for CREATE DERBY AGGREGATE to succeed on user defined types. &lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullName.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GenericMode.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/build.xml&lt;/p&gt;

&lt;p&gt;Additional test case for creating aggregates on a user-defined type.&lt;/p&gt;</comment>
                            <comment id="13464696" author="knutanders" created="Thu, 27 Sep 2012 14:00:21 +0100"  >&lt;p&gt;Thanks for eliminating the duplicated code. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; The 09-ab patch looks good to me. +1.&lt;/p&gt;</comment>
                            <comment id="13464787" author="rhillegas" created="Thu, 27 Sep 2012 15:44:38 +0100"  >&lt;p&gt;Thanks for the quick review, Knut. Tests passed cleanly for me. Committed derby-672-09-ab-udtAggregates.diff at subversion revision 1391034.&lt;/p&gt;</comment>
                            <comment id="13465811" author="rhillegas" created="Fri, 28 Sep 2012 19:35:56 +0100"  >&lt;p&gt;Attaching derby-672-10-af-typeBounds.diff. This patch implements something akin to the elegant pattern which Knut suggested in his comment on 2012-07-18. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;With this patch, you can write a single generic Java class:&lt;/p&gt;

&lt;p&gt;    public class GenericMode&amp;lt;V extends Comparable&amp;lt;V&amp;gt;&amp;gt; implements Aggregator&amp;lt;V,V,GenericMode&amp;lt;V&amp;gt;&amp;gt; &lt;/p&gt;
{...}

&lt;p&gt;and bind many type-specific aggregates to it:&lt;/p&gt;

&lt;p&gt;    create derby aggregate intMode_09 for int external name &apos;org.apache.derbyTesting.functionTests.tests.lang.GenericMode&apos;;&lt;br/&gt;
    create derby aggregate varcharMode_09 for varchar( 5 ) external name &apos;org.apache.derbyTesting.functionTests.tests.lang.GenericMode&apos;;&lt;br/&gt;
    create derby aggregate fullNameMode_09 for FullName_09 external name &apos;org.apache.derbyTesting.functionTests.tests.lang.GenericMode&apos;;&lt;/p&gt;

&lt;p&gt;To achieve this, I replaced the type inspection code used on the input and return types of the aggregator. Previously, we were checking for raw types. With this patch, we are checking that the declared input and return types fit within the generic aggregator&apos;s type bounds.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/loader/Java5ClassInspector.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;Replaced the tricky discovery of raw types with a simpler scheme for&lt;br/&gt;
discovering type bounds.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/UserAggregateDefinition.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;

&lt;p&gt;Used type bounds rather than raw types to match declared SQL types to&lt;br/&gt;
actual Java types.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java&lt;/p&gt;

&lt;p&gt;When a type mismatch occurs, report it using the SQL name of the&lt;br/&gt;
aggregate rather than its Java name.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/ValueNode.java&lt;/p&gt;

&lt;p&gt;Bind user-defined types better.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;Added test cases for generic aggregator classes.&lt;/p&gt;</comment>
                            <comment id="13465850" author="rhillegas" created="Fri, 28 Sep 2012 20:36:19 +0100"  >&lt;p&gt;Tests passed cleanly on derby-672-10-af-typeBounds.diff.&lt;/p&gt;</comment>
                            <comment id="13466765" author="rhillegas" created="Mon, 1 Oct 2012 13:50:56 +0100"  >&lt;p&gt;Committed derby-672-10-af-typeBounds.diff at subversion revision 1392307.&lt;/p&gt;</comment>
                            <comment id="13472679" author="rhillegas" created="Tue, 9 Oct 2012 20:44:34 +0100"  >&lt;p&gt;Attaching derby-672-11-aa-tests.diff. This patch adds a battery of data type tests for user-defined aggregates. I will run regression tests.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;

&lt;p&gt;Prevent XML from being used as an input or return type of a user-defined aggregate. We can&apos;t support aggregates on XML types until we add support for java.sql.SQLXML, the corresponding Java data type.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/UserAggregateDefinition.java&lt;/p&gt;

&lt;p&gt;Handle binary SQL types by translating their Java type name as &quot;[B&quot; rather than &quot;byte[]&quot;.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/build.xml&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GenericMode.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LobMode.java&lt;/p&gt;

&lt;p&gt;Additional tests.&lt;/p&gt;</comment>
                            <comment id="13472905" author="rhillegas" created="Wed, 10 Oct 2012 01:45:23 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-672-11-aa-tests.diff.&lt;/p&gt;</comment>
                            <comment id="13473075" author="knutanders" created="Wed, 10 Oct 2012 09:01:04 +0100"  >&lt;p&gt;In UserAggregateDefinition.getJavaClass():&lt;/p&gt;

&lt;p&gt;+        if ( &quot;byte[]&quot;.equals( javaClassName ) ) &lt;/p&gt;
{ javaClassName = &quot;[B&quot;; }

&lt;p&gt;Perhaps just return byte[].class directly, so that we get rid of one of the magic strings? And maybe add a short comment saying why byte[] needs special handling.&lt;/p&gt;

&lt;p&gt;It might also be helpful to add a class-level javadoc comment to LobMode describing what kind of operation it implements.&lt;/p&gt;

&lt;p&gt;The catch clause in LobMode.toString(Object) loses the stack trace of the original exception. Using &quot;throw new IllegalArgumentException(e)&quot; would produce a better trace, should it ever fail.&lt;/p&gt;</comment>
                            <comment id="13473128" author="knutanders" created="Wed, 10 Oct 2012 10:40:24 +0100"  >&lt;p&gt;Two more nits:&lt;/p&gt;

&lt;p&gt;LobMode.Accumulator.compareTo() doesn&apos;t satisfy the contract of Comparable.compareTo() in its handling of null values. It&apos;s supposed to throw NPE if the object is null, but the implemented method returns 1. Just removing the null check at the beginning of the method should be enough to make it satisfy the contract.&lt;/p&gt;

&lt;p&gt;LobMode.terminate() would be more concise if it used the Collections.max() library method. Then we could also remove the SuppressWarnings annotation from the method, as we no longer needed an intermediate, weakly typed array representation of the accumulators. The body of the method could be as simple as return _accumulators.isEmpty() ? null : Collections.max(_accumulators.values()).getValue().&lt;/p&gt;

&lt;p&gt;(Both of these comments also apply to the already existing GenericMode and ModeAggregate classes, by the way.)&lt;/p&gt;</comment>
                            <comment id="13473217" author="rhillegas" created="Wed, 10 Oct 2012 14:33:45 +0100"  >&lt;p&gt;Thanks for the quick review, Knut. Attaching derby-672-11-ab-tests.diff. This version makes all of the improvements you suggested. Committed at subversion revision 1396589.&lt;/p&gt;

&lt;p&gt;I also added another test condition. UserDefinedAggregatesTest.test_11_datatypes() will now fail if we add another builtin datatype to Derby. The comment accompanying that check explains that when we add a new builtin datatype, we need to add a corresponding test case to test_11_datatypes().&lt;/p&gt;

&lt;p&gt;Touches the following additional file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/ModeAggregate.java&lt;/p&gt;</comment>
                            <comment id="13476167" author="rhillegas" created="Mon, 15 Oct 2012 15:26:45 +0100"  >&lt;p&gt;Attaching derby-672-12-aa-implicitCasts.diff. This patch attempts to make datatype coercion work for user-defined aggregates the way that it works for function arguments. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch makes two noteworthy changes:&lt;/p&gt;

&lt;p&gt;1) The input arg to the user-defined aggregate is wrapped in a CAST node if we would do the same thing when invoking a similar user-defined function on that argument.&lt;/p&gt;

&lt;p&gt;2) Input datatype checking for user-defined aggregates is relaxed. Instead of demanding exact type match, we check to see whether the actual datatype can be stored in the expected type. This is what we do for user-defined functions. This allows implicit casting to occur at runtime.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UserAggregateDefinition.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;Changes needed for (1) and (2).&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;Additional tests.&lt;/p&gt;</comment>
                            <comment id="13476225" author="rhillegas" created="Mon, 15 Oct 2012 17:00:48 +0100"  >&lt;p&gt;Tests passed cleanly for me. Committed at subversion revision 1398352.&lt;/p&gt;</comment>
                            <comment id="13476308" author="rhillegas" created="Mon, 15 Oct 2012 18:58:05 +0100"  >&lt;p&gt;Attaching derby-672-13-aa-differentReturnType.diff. This patch makes it possible for a user-defined aggregate to have different input and return types. I am running regression tests now.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java&lt;/p&gt;

&lt;p&gt;The problem was that the type of the aggregate result column was being derived from the type of the aggregate&apos;s input expression, for all aggregates except for COUNT. This file is changed to use the actual bound type of the aggregate result.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/build.xml&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LongMagnitude.java&lt;/p&gt;

&lt;p&gt;Additional tests.&lt;/p&gt;</comment>
                            <comment id="13476385" author="rhillegas" created="Mon, 15 Oct 2012 21:14:45 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-672-13-aa-differentReturnType.diff. Committed at subversion revision 1398489.&lt;/p&gt;</comment>
                            <comment id="13476998" author="rhillegas" created="Tue, 16 Oct 2012 14:41:41 +0100"  >&lt;p&gt;Attaching 3rd rev of the functional spec for this feature. This rev incorporates the following changes:&lt;/p&gt;

&lt;p&gt;o    Clarifies that a UDA&apos;s input and return types are always nullable.&lt;br/&gt;
o    Removes SQLException from the signature of Aggregator.&lt;br/&gt;
o    Clarifies that XML is not a valid datatype for UDA inputs and return values.&lt;br/&gt;
o    Clarifies that the type of a value passed to a UDA must be storable in the input type of the UDA.&lt;br/&gt;
o    Replaces the &quot;Open Questions&quot; section with an appendix showing an example which is suitable for the user guides.&lt;/p&gt;</comment>
                            <comment id="13477271" author="rhillegas" created="Tue, 16 Oct 2012 20:18:03 +0100"  >&lt;p&gt;Attaching derby-672-14-aa-collations.diff. This patch adds a fixture to make the user-defined aggregate tests run both with and without territory based collations. Committed at subversion revision 1398934.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;</comment>
                            <comment id="13477284" author="rhillegas" created="Tue, 16 Oct 2012 20:44:04 +0100"  >&lt;p&gt;Attaching derby-672-15-aa-setCollation.diff. This patch sets the collation for the string input and return types of user-defined aggregates in the same way that it is set for the arguments and return values of functions. Committed at subversion revision 1398952.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/types/AggregateAliasInfo.java&lt;/p&gt;</comment>
                            <comment id="13477899" author="rhillegas" created="Wed, 17 Oct 2012 14:54:41 +0100"  >&lt;p&gt;Attaching derby-672-16-aa-forbidInGroupBy.diff. This patch forbids user-defined aggregates in GROUP BY clauses, just as builtin aggregates are illegal there. I will run regression tests.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;Logic to forbid user-defined aggregates in GROUP by clauses.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;


&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/CollectNodesVisitor.java&lt;/p&gt;

&lt;p&gt;Corrected a javadoc comment here.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;Test case.&lt;/p&gt;</comment>
                            <comment id="13478080" author="rhillegas" created="Wed, 17 Oct 2012 18:58:58 +0100"  >&lt;p&gt;Tests passed cleanly on derby-672-16-aa-forbidInGroupBy.diff.  Committed at subversion revision 1399364.&lt;/p&gt;</comment>
                            <comment id="13480009" author="rhillegas" created="Fri, 19 Oct 2012 14:16:30 +0100"  >&lt;p&gt;Attaching derby-672-17-aa-moreTests.diff. This patch adds negative tests for more illegal uses of user-defined aggregates. Along the way, some code had to be corrected. Tests ran cleanly for me. Committed at subversion revision 1400083.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java&lt;/p&gt;

&lt;p&gt;Changes some error messages to use the schema-qualified name of the user-defined aggregate rather than the name of the class it is bound to.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java&lt;/p&gt;

&lt;p&gt;I was seeing NPEs when using user-defined aggregates in CASE expressions for the following reason: although the aggregate-bearing clauses were being bound in isolation, the bound forms weren&apos;t being substituted back into the larger expression tree. I corrected this by putting the bound forms back into the tree.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;Additional test cases.&lt;/p&gt;</comment>
                            <comment id="13480071" author="rhillegas" created="Fri, 19 Oct 2012 16:10:35 +0100"  >&lt;p&gt;Attaching derby-672-18-aa-udaInJar.diff. This patch adds support for running user-defined aggregates from jar files stored in the database. I am running regression tests now.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/UserAggregateDefinition.java&lt;/p&gt;

&lt;p&gt;Fault-in Aggregator before faulting-in the user-supplied class. I don&apos;t think this is necessary but it looks cleaner.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/services/reflect/JarLoader.java&lt;/p&gt;

&lt;p&gt;Add the Aggregator package to the list of Derby packages which the database class loader is willing to load.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/median_uda.jar&lt;/p&gt;

&lt;p&gt;Test for this functionality. The jar file holds a Median aggregator. A new test case in DatabaseClassLoadingTest installs the jar, wires it into the database class path, and then invokes the aggregate inside.&lt;/p&gt;</comment>
                            <comment id="13480075" author="knutanders" created="Fri, 19 Oct 2012 16:17:25 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;I saw you made this change in revision 1400083:&lt;/p&gt;

&lt;p&gt;     /** Get the SQL name of the aggregate */&lt;br/&gt;
     public  String  getSQLName()&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;throws StandardException&lt;br/&gt;
     {&lt;br/&gt;
         if ( isUserDefinedAggregate() )&lt;br/&gt;
         {&lt;/li&gt;
	&lt;li&gt;return ((UserAggregateDefinition) uad).getAliasDescriptor().getQualifiedName();&lt;br/&gt;
+            try 
{
+                return ((UserAggregateDefinition) uad).getAliasDescriptor().getQualifiedName();
+            }
&lt;p&gt; catch (StandardException se)&lt;br/&gt;
+            &lt;/p&gt;
{
+                return aggregateName;
+            }
&lt;p&gt;         }&lt;br/&gt;
         else &lt;/p&gt;
{ return aggregateName; }
&lt;p&gt;     }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Could you add a comment explaining what could cause exceptions here and why it&apos;s OK to ignore those exceptions?&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="13480079" author="rhillegas" created="Fri, 19 Oct 2012 16:29:40 +0100"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;Thanks for taking a look at the patch. I will add a comment to a future patch, probably derby-672-19-????. An exception can occur if the data dictionary fails to find the schema descriptor for the schema which holds the user-defined aggregate. Something would have to be seriously broken for that to occur. It would indicate a corrupt DB. The fallback action is to return a different identifier for the user-defined aggregate in order to give the user some information rather than choking on the database corruption. I don&apos;t think we would ever fall into this code. That is because I would expect the corrupted DB would have tripped other schema resolution errors long before we got to this code. Thanks.&lt;/p&gt;</comment>
                            <comment id="13480124" author="rhillegas" created="Fri, 19 Oct 2012 17:48:44 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-672-18-aa-udaInJar.diff. Committed at subversion revision 1400161.&lt;/p&gt;</comment>
                            <comment id="13480211" author="rhillegas" created="Fri, 19 Oct 2012 19:19:09 +0100"  >&lt;p&gt;Attaching derby-672-19-aa-precisionChecks.diff. This patch adds tests for precision mismatches in datatype coercion for user-defined aggregates. Committed at subversion revision 1400208.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java&lt;/p&gt;

&lt;p&gt;Adds a comment to the exception-swallowing in getSQLName() as requested by Knut.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;Precision tests.&lt;/p&gt;</comment>
                            <comment id="13481585" author="rhillegas" created="Mon, 22 Oct 2012 19:27:31 +0100"  >&lt;p&gt;Attaching derby-672-20-aa-exactBounds.diff. This patch tightens up the bounds checking on the input and return types of user-defined aggregates. Committed at subversion revision 1400984.&lt;/p&gt;

&lt;p&gt;When I simplified bounds checking for input and return types, I lost the ability to catch some user mistakes at compile time. So for instance, given the following UDA:&lt;/p&gt;

&lt;p&gt;    create derby aggregate bigintMode_16 for bigint&lt;br/&gt;
    external name &apos;org.apache.derbyTesting.functionTests.tests.lang.GenericMode$IntMode&apos;&lt;/p&gt;

&lt;p&gt;...the following statement would fail at run time when the user code tried to cast a Long to an Integer:&lt;/p&gt;

&lt;p&gt;    select bigintMode_16( b ) from bigintMode_16_mode_inputs&lt;/p&gt;

&lt;p&gt;The solution was to revive the tricky code which I deprecated in patch derby-672-10-af-typeBounds.diff and to use that tricky code alongside the simpler bounds checking introduced by that patch. The tricky code catches the above mismatch at bind() time rather than failing at run time. I am not pleased by the complexity of the tricky code but I think it is better to catch these kinds of errors when the statement is compiled.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/loader/Java5ClassInspector.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java&lt;/p&gt;

&lt;p&gt;Re-introduce the tricky code.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/UserAggregateDefinition.java&lt;/p&gt;

&lt;p&gt;Wire the tricky code back into bind-time type resolution.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GenericMode.java&lt;/p&gt;

&lt;p&gt;While experimenting, I changed the name of the GenericMode type variable from V to B. This helps to clearly disambiguate it from the V type variable of the Aggregator class itself. It&apos;s a cosmetic change which I think may be useful in the future if we need to keep improving bounds checking for UDAs.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;Additional tests.&lt;/p&gt;</comment>
                            <comment id="13482265" author="knutanders" created="Tue, 23 Oct 2012 12:26:30 +0100"  >&lt;p&gt;I took another look at the exception handling in AggregateNode.getSQLName() and found that there was no code called from it that could ever cause a StandardException. The need to catch StandardException came from AliasDescriptor.getSchemaName(), which is declared as throws StandardException even though it does not call any methods that could raise StandardExceptions.&lt;/p&gt;

&lt;p&gt;The patch d672-no-exceptions.diff removes the unnecessary throws clause from AliasDescriptor.getSchemaName() and the methods that call it, as well as the exception handler in getSQLName(). The patch also removes a redundant null check in isUserDefinedAggregate() (redundant because instanceof implies not null). All the regression tests ran cleanly. Committed revision 1401250.&lt;/p&gt;</comment>
                            <comment id="13482356" author="rhillegas" created="Tue, 23 Oct 2012 15:31:19 +0100"  >&lt;p&gt;Attaching derby-672-21-aa-typeDependencies.diff. This patch adds support for dependencies of user-defined aggregates on user-defined types. Committed at subversion revision 1401303.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;/p&gt;

&lt;p&gt;Added dependencies of aggregates on types similar to the dependencies of routines on types.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDAPermsTest.java&lt;/p&gt;

&lt;p&gt;Tests for GRANT/REVOKE USAGE on types which are used by aggregates.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserDefinedAggregatesTest.java&lt;/p&gt;

&lt;p&gt;Tests for attempting to drop a type which an aggregate uses.&lt;/p&gt;</comment>
                            <comment id="13482365" author="rhillegas" created="Tue, 23 Oct 2012 15:49:50 +0100"  >&lt;p&gt;Attaching a 4th rev of the functional spec for this feature. This rev makes a couple minor changes:&lt;/p&gt;

&lt;p&gt;o    Further clarify that a UDA&apos;s input and return types may not be XML.&lt;br/&gt;
o    Add package declaration to javadoc for Aggregator.&lt;/p&gt;

&lt;p&gt;At this point, I have reached the limit of my ability to test this feature. I cannot see past my own blinders. Hopefully, other people will be able to find some time to buddy-test this feature.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13482386" author="chaase3" created="Tue, 23 Oct 2012 16:06:29 +0100"  >&lt;p&gt;Is it also true, as we said of user-defined types, that &quot;If a qualified aggregate name is specified, the&lt;br/&gt;
schema name cannot begin with SYS&quot;? Thanks!&lt;/p&gt;</comment>
                            <comment id="13482394" author="rhillegas" created="Tue, 23 Oct 2012 16:13:25 +0100"  >&lt;p&gt;Hi Kim,&lt;/p&gt;

&lt;p&gt;Yes. You can&apos;t create a schema which begins with SYS so you can&apos;t create any objects in such a schema:&lt;/p&gt;

&lt;p&gt;ij version 10.10&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;br/&gt;
ij&amp;gt; create schema sysmine;&lt;br/&gt;
ERROR 42939: An object cannot be created with the schema name &apos;SYSMINE&apos;.&lt;br/&gt;
ij&amp;gt; create derby aggregate sys.foo for int&lt;br/&gt;
external name &apos;org.apache.derbyTesting.functionTests.tests.lang.GenericMode&apos;;&lt;br/&gt;
ERROR 42X62: &apos;CREATE DERBY AGGREGATE&apos; is not allowed in the &apos;SYS&apos; schema.&lt;br/&gt;
ij&amp;gt; create derby aggregate sysmine.foo for int&lt;br/&gt;
external name &apos;org.apache.derbyTesting.functionTests.tests.lang.GenericMode&apos;;&lt;br/&gt;
ERROR 42X62: &apos;CREATE DERBY AGGREGATE&apos; is not allowed in the &apos;SYSMINE&apos; schema.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13482522" author="chaase3" created="Tue, 23 Oct 2012 19:00:01 +0100"  >&lt;p&gt;I notice the Documentation section of the spec mentions changes to the dblook documentation. Does the dblook tool produce SQL to recreate user-defined types, as well as UDAs? We didn&apos;t include that in the UDT documentation, so I thought I&apos;d better check. &lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13482568" author="rhillegas" created="Tue, 23 Oct 2012 19:53:21 +0100"  >&lt;p&gt;Hi Kim, &lt;/p&gt;

&lt;p&gt;Yep, dblook outputs type-creating SQL too. Thanks.&lt;/p&gt;</comment>
                            <comment id="13482618" author="chaase3" created="Tue, 23 Oct 2012 20:49:34 +0100"  >&lt;p&gt;Thanks &amp;#8211; I&apos;ll update the tools topic to include UDTs too.&lt;/p&gt;</comment>
                            <comment id="13610303" author="rhillegas" created="Fri, 22 Mar 2013 14:06:55 +0000"  >&lt;p&gt;Attaching derby-672-22-aa-makeModeAggregateStateSerializable.diff. This patch makes a helper class Serializable. The helper class is used by the test class ModeAggregate. The UserDefinedAggregatesTest runs cleanly for me with this patch. Committed at subversion revision 1459784.&lt;/p&gt;

&lt;p&gt;I discovered that the helper class needs to be Serializable while writing experiments to try to force Derby to perform the merge() phase of aggregation. In my experiment, a grouped aggregate with millions of groups ended up serializing partial results to disk and this tripped across the unserializability of the helper class. It would be worthwhile to file an issue to add some advice to the Reference Manual: the Aggregator interface extends Serializable, which means that all of the state in your UDA needs to be serializable.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/ModeAggregate.java&lt;/p&gt;</comment>
                            <comment id="13610310" author="rhillegas" created="Fri, 22 Mar 2013 14:12:43 +0000"  >&lt;p&gt;Ported 1459784 to 10.10 branch at subversion revision 1459787.&lt;/p&gt;</comment>
                            <comment id="13610367" author="rhillegas" created="Fri, 22 Mar 2013 15:17:20 +0000"  >&lt;p&gt;Attaching derby-672-23-aa-improveJavadocForAggregator.merge.diff. This patch expands the javadoc for the Aggregator.merge() method. Committed at subversion revision 1459837.&lt;/p&gt;

&lt;p&gt;Buddy-testing raised the following issue: How can users test their merge() implementations? It&apos;s not clear what kinds of queries cause Derby to call the merge() method. The answer is that merge() is called when Derby has to spill intermediate results to disk (and retrieve them later) for grouped aggregates with a large number of groups. A query like the following can cause Derby to do this. The merge() method is called when Derby encounters rows which belong to groups which spilled to disk previously:&lt;/p&gt;

&lt;p&gt;    select a, mode( b ) from mode_inputs group by a order by a&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/agg/Aggregator.java&lt;/p&gt;</comment>
                            <comment id="13610369" author="rhillegas" created="Fri, 22 Mar 2013 15:19:52 +0000"  >&lt;p&gt;Ported 1459837 from trunk to 10.10 branch at subversion revision 1459837.&lt;/p&gt;</comment>
                            <comment id="13610382" author="rhillegas" created="Fri, 22 Mar 2013 15:31:56 +0000"  >&lt;p&gt;Thanks for buddy-testing user-defined aggregates, Dag. Here are responses to questions you posed on this wiki page: &lt;a href=&quot;http://wiki.apache.org/db-derby/TenTenOneBuddyTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/TenTenOneBuddyTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;&amp;gt;* Currently, our docs say:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  &quot;An unqualified UDA name may not be the name of an aggregate defined in part 2 of the SQL Standard, section 10.9:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  ANY..&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    But even when name is qualified, I see: &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  ij&amp;gt; create derby aggregate app.ANY for int returns int external name &apos;foo.Agg&apos;;&lt;br/&gt;
&amp;gt;  ERROR 42X01: Syntax error: Encountered &quot;ANY&quot; at line 1, column 28.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    I need to quote it: &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  ij&amp;gt; create derby aggregate app.&quot;ANY&quot; for int returns int external name &apos;foo.Agg&apos;;&lt;br/&gt;
&amp;gt;  0 rows inserted/updated/deleted&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    Code or doc correct? &lt;/p&gt;


&lt;p&gt;The wording in the Reference Manual could be improved. Logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6116&quot; title=&quot;Confusing description of limitation on user-defined aggregate names.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6116&quot;&gt;&lt;del&gt;DERBY-6116&lt;/del&gt;&lt;/a&gt; to track this.&lt;/p&gt;


&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;&amp;gt;*&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  &quot;In general, UDAs live in the same namespace as one-argument user-defined functions (see CREATE FUNCTION statement).&quot;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    But ij doesn&apos;t show aggregates: &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  ij&amp;gt; create function app.&quot;ANY&quot; (i int) returns int parameter style java language java external name &apos;foo.bar&apos;;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  ERROR X0Y87: There is already an aggregate or function with one argument whose name is &apos;APP&apos;.&apos;ANY&apos;.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  ij&amp;gt; show functions in app;&lt;br/&gt;
&amp;gt;  FUNCTION_SCHEM|FUNCTION_NAME               |REMARKS                            &lt;br/&gt;
&amp;gt;  -------------------------------------------------------------------------------&lt;br/&gt;
&amp;gt;  0 rows selected&lt;/p&gt;


&lt;p&gt;I think what&apos;s missing here is a &quot;show aggregates&quot; command. Logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6119&quot; title=&quot;Add an ij command to show user-defined aggregates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6119&quot;&gt;DERBY-6119&lt;/a&gt; to track this.&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;&amp;gt;* checked simple int aggregator: found agg class could not be static nested class in another&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    Expected or pilot error? If expected, why? document? Currently we say: &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;  &quot;The !ClassNameString is a single-quoted string. It is the full name of a Java class which implements the org.apache.derby.agg.Aggre&amp;gt;gator interface.&quot;&lt;/p&gt;

&lt;p&gt;I believe that the problem here is that a period rather than a dollar sign was used in the name of the nested class in the &quot;external name&quot; clause. This gotcha trips up a lot of people and indicates that we need to provide some more advice in the Reference Manual. Logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6120&quot; title=&quot;Clarify that $ is the separator character which should be used for the external names of static nested classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6120&quot;&gt;&lt;del&gt;DERBY-6120&lt;/del&gt;&lt;/a&gt; to track this issue.&lt;/p&gt;


&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;&amp;gt;* The merge method wasn&apos;t used in my simple example. When is it used?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    If only needed in compex queries, we might want to warn the user on how to construct test cases to debug it... &lt;/p&gt;

&lt;p&gt;This method is called when Derby has to spill intermediate results to disk (and retrieve them later) when processing a grouped aggregate with a large number of groups. I have added this explanation to the javadoc for Aggregator.merge() via patch derby-672-23-aa-improveJavadocForAggregator.merge.diff.&lt;/p&gt;

&lt;p&gt;While verifying this behavior, I tripped across a problem in the test class ModeAggregator: its state was not serializable. I corrected that problem via patch derby-672-22-aa-makeModeAggregateStateSerializable.diff. This prompted me to log an issue for beefing up the UDA documentation with the advice that all of the state of a UDA must be serializable: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6127&quot; title=&quot;Tell users to make sure that the state of a user-defined aggregate needs to be serializable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6127&quot;&gt;&lt;del&gt;DERBY-6127&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;&amp;gt;* In the GRANT-statement refman page, we are inconsisten when it comes to explaining&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    identifiers (seen when looking at GRANT USAGE of aggregates): &quot;table-Name&quot; occurences are linked to a section explainig them (rre&amp;gt;ftablename.html), but UDA names are defined in-lined as &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;      GRANT USAGE ON DERBY AGGREGATE [ schemaName. ] SQL92Identifier TO grantees&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    In a third variant, &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;      GRANT EXECUTE ON &lt;/p&gt;
{ FUNCTION | PROCEDURE }
&lt;p&gt; routine-designator TO grantees&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    routine-designator is defined locally as &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;      routine-designator &lt;/p&gt;
{ function-name | procedure-name }
&lt;p&gt;  &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    without links to what &quot;function-name&quot; or &quot;procedure-name&quot; might look like. It would be good to harmonize the latter two forms to&amp;gt; a central definition as for &quot;table-Name&quot;.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    Finally, I noted that the definition page for SchemaName doesn&apos;t link to the SQL92Identifier page... &lt;/p&gt;

&lt;p&gt;Logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6121&quot; title=&quot;Regularize how we refer to object names in the Reference Manual&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6121&quot;&gt;&lt;del&gt;DERBY-6121&lt;/del&gt;&lt;/a&gt; to track this issue.&lt;/p&gt;</comment>
                            <comment id="13672061" author="knutanders" created="Sat, 1 Jun 2013 12:34:38 +0100"  >&lt;p&gt;Is there more work remaining on this issue, or can it be resolved now? The feature was part of the Derby 10.10.1.1 release.&lt;/p&gt;</comment>
                            <comment id="13673064" author="rhillegas" created="Mon, 3 Jun 2013 13:21:37 +0100"  >&lt;p&gt;Thanks for the nudge, Knut. Resolving.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12603246">DERBY-5901</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12391618">DERBY-3550</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12527344">DERBY-5466</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12638512">DERBY-6127</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12550472" name="UserDefinedAggregates.html" size="18415" author="rhillegas" created="Tue, 23 Oct 2012 15:49:50 +0100"/>
                            <attachment id="12549302" name="UserDefinedAggregates.html" size="17954" author="rhillegas" created="Tue, 16 Oct 2012 14:41:41 +0100"/>
                            <attachment id="12541240" name="UserDefinedAggregates.html" size="15493" author="rhillegas" created="Thu, 16 Aug 2012 18:04:06 +0100"/>
                            <attachment id="12537046" name="UserDefinedAggregates.html" size="12547" author="rhillegas" created="Wed, 18 Jul 2012 19:58:22 +0100"/>
                            <attachment id="12550441" name="d672-no-exceptions.diff" size="3532" author="knutanders" created="Tue, 23 Oct 2012 12:26:30 +0100"/>
                            <attachment id="12541244" name="derby-672-01-aa-ddl.diff" size="58717" author="rhillegas" created="Thu, 16 Aug 2012 18:21:09 +0100"/>
                            <attachment id="12542817" name="derby-672-02-ac-nonDistinct.diff" size="82154" author="rhillegas" created="Tue, 28 Aug 2012 21:12:24 +0100"/>
                            <attachment id="12543274" name="derby-672-03-aa-distinct.diff" size="16665" author="rhillegas" created="Fri, 31 Aug 2012 15:14:13 +0100"/>
                            <attachment id="12543299" name="derby-672-03-ab-distinct.diff" size="22769" author="rhillegas" created="Fri, 31 Aug 2012 17:56:38 +0100"/>
                            <attachment id="12543307" name="derby-672-04-aa-fixJSR169test.diff" size="1522" author="rhillegas" created="Fri, 31 Aug 2012 18:32:06 +0100"/>
                            <attachment id="12543311" name="derby-672-05-aa-java7testOrderProblem.diff" size="15885" author="rhillegas" created="Fri, 31 Aug 2012 18:51:54 +0100"/>
                            <attachment id="12543530" name="derby-672-06-aa-grantRevoke.diff" size="23958" author="rhillegas" created="Mon, 3 Sep 2012 12:16:47 +0100"/>
                            <attachment id="12543532" name="derby-672-07-aa-fixJSR169again.diff" size="853" author="rhillegas" created="Mon, 3 Sep 2012 12:25:22 +0100"/>
                            <attachment id="12543718" name="derby-672-08-aa-fixJSR169yetAgain.diff" size="669" author="rhillegas" created="Tue, 4 Sep 2012 19:23:33 +0100"/>
                            <attachment id="12546849" name="derby-672-09-ab-udtAggregates.diff" size="11323" author="rhillegas" created="Thu, 27 Sep 2012 13:18:54 +0100"/>
                            <attachment id="12547020" name="derby-672-10-af-typeBounds.diff" size="26245" author="rhillegas" created="Fri, 28 Sep 2012 19:35:56 +0100"/>
                            <attachment id="12548445" name="derby-672-11-aa-tests.diff" size="38817" author="rhillegas" created="Tue, 9 Oct 2012 20:44:34 +0100"/>
                            <attachment id="12548557" name="derby-672-11-ab-tests.diff" size="42828" author="rhillegas" created="Wed, 10 Oct 2012 14:33:45 +0100"/>
                            <attachment id="12549149" name="derby-672-12-aa-implicitCasts.diff" size="16044" author="rhillegas" created="Mon, 15 Oct 2012 15:26:45 +0100"/>
                            <attachment id="12549177" name="derby-672-13-aa-differentReturnType.diff" size="7035" author="rhillegas" created="Mon, 15 Oct 2012 18:58:05 +0100"/>
                            <attachment id="12549363" name="derby-672-14-aa-collations.diff" size="1830" author="rhillegas" created="Tue, 16 Oct 2012 20:18:03 +0100"/>
                            <attachment id="12549368" name="derby-672-15-aa-setCollation.diff" size="2168" author="rhillegas" created="Tue, 16 Oct 2012 20:44:04 +0100"/>
                            <attachment id="12549510" name="derby-672-16-aa-forbidInGroupBy.diff" size="4898" author="rhillegas" created="Wed, 17 Oct 2012 14:54:41 +0100"/>
                            <attachment id="12549981" name="derby-672-17-aa-moreTests.diff" size="7576" author="rhillegas" created="Fri, 19 Oct 2012 14:16:30 +0100"/>
                            <attachment id="12549989" name="derby-672-18-aa-udaInJar.diff" size="5964" author="rhillegas" created="Fri, 19 Oct 2012 16:10:35 +0100"/>
                            <attachment id="12550028" name="derby-672-19-aa-precisionChecks.diff" size="4983" author="rhillegas" created="Fri, 19 Oct 2012 19:19:09 +0100"/>
                            <attachment id="12550322" name="derby-672-20-aa-exactBounds.diff" size="16786" author="rhillegas" created="Mon, 22 Oct 2012 19:27:31 +0100"/>
                            <attachment id="12550467" name="derby-672-21-aa-typeDependencies.diff" size="4750" author="rhillegas" created="Tue, 23 Oct 2012 15:31:19 +0100"/>
                            <attachment id="12575012" name="derby-672-22-aa-makeModeAggregateStateSerializable.diff" size="933" author="rhillegas" created="Fri, 22 Mar 2013 14:06:55 +0000"/>
                            <attachment id="12575021" name="derby-672-23-aa-improveJavadocForAggregator.merge.diff" size="1275" author="rhillegas" created="Fri, 22 Mar 2013 15:17:20 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12607339">DERBY-5926</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 18 Jul 2012 09:36:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29651</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy08nz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35222</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>