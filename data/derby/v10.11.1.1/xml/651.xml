<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:47:51 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-651/DERBY-651.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-651] Re-enable the storing of java objects in the database</title>
                <link>https://issues.apache.org/jira/browse/DERBY-651</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Islay Symonette, in an email thread called &quot;Storing Java Objects in a table&quot; on October 26, 2005 requests the ability to store java objects in the database.&lt;/p&gt;

&lt;p&gt;Old releases of Cloudscape allow users to declare a column&apos;s type to be a Serializable class. This feature was removed from Derby because the syntax was non-standard. However, most of the machinery to support objects serialized to columns is still in Derby and is even used in system tables. We need to agree on some standard syntax here and re-expose this useful feature. Some subset of the ANSI adt syntax, cumbersome as it is, would do.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12325061">DERBY-651</key>
            <summary>Re-enable the storing of java objects in the database</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 Oct 2005 07:15:21 +0100</created>
                <updated>Thu, 2 May 2013 03:29:28 +0100</updated>
                            <resolved>Fri, 16 Apr 2010 17:40:43 +0100</resolved>
                                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12356028" author="bandaram" created="Thu, 27 Oct 2005 09:44:44 +0100"  >&lt;p&gt;I think this &quot;bug&quot; needs to be marked as Enhancement... Derby never had capability to store Java objects, so this should be seen as an enhancement request.&lt;/p&gt;

&lt;p&gt;SQL specification Part 13:SQL Routines and Types Using the Java Programming Language (SQL/JRT) is the standard way to add java objects.&lt;/p&gt;</comment>
                            <comment id="12356088" author="rhillegas" created="Fri, 28 Oct 2005 00:21:42 +0100"  >&lt;p&gt;Thanks, Satheesh. You&apos;re right, this is an enhancement.&lt;/p&gt;</comment>
                            <comment id="12761683" author="rhillegas" created="Fri, 2 Oct 2009 20:34:11 +0100"  >&lt;p&gt;Attaching a first rev of a functional spec for User Defined Types. This describes a minimal amount of work needed to declare Java objects which can be stored in the database. In this first rev, the query language is only able to see these objects as structs. The spec lists future enhancements which can make these types even more useful.&lt;/p&gt;

&lt;p&gt;I don&apos;t expect that I will have time to implement this feature in the 10.6 timeframe. However, I would be happy to coach someone else through the process.&lt;/p&gt;

&lt;p&gt;Thanks is advance for reading this spec and posting your feedback.&lt;/p&gt;</comment>
                            <comment id="12763296" author="dagw" created="Thu, 8 Oct 2009 00:04:49 +0100"  >&lt;p&gt;yHi Rick, thanks for starting this work. It would be nice to re-enable&lt;br/&gt;
Derby&apos;s capability to store Java objects directly in columns of&lt;br/&gt;
structured user defined types.&lt;/p&gt;

&lt;p&gt;Meta-comment: Would it be possible (legal) to allow a SQL User defined&lt;br/&gt;
type that maps to a Java class that has no attributes (the fields are&lt;br/&gt;
opaque to SQL)? If so, wouldn&apos;t that provide an even smaller build&lt;br/&gt;
increment to re-enable Derby&apos;s ability to store Java object values in&lt;br/&gt;
columns?  Then, SQL visible attributes (fields) could be added later if&lt;br/&gt;
desired.&lt;/p&gt;

&lt;p&gt;Please see comments in-lined.&lt;/p&gt;


&lt;p&gt;Declare that you are talking about SQL structured types, not distinct&lt;br/&gt;
types (which can be UDTs, too).&lt;/p&gt;

&lt;p&gt;&amp;gt;       * Access - Type-creators control who can use their types.&lt;/p&gt;

&lt;p&gt;&quot;Can control&quot;. Derby does not force you to control access.&lt;/p&gt;

&lt;p&gt;&amp;gt;       * Structs - These user-defined objects appear to the query&lt;br/&gt;
&amp;gt;         language as structs. That is, queries can filter results based&lt;br/&gt;
&amp;gt;         on the values of public fields in these objects. However, in&lt;br/&gt;
&amp;gt;         this first increment, queries cannot invoke methods on these&lt;/p&gt;

&lt;p&gt;&quot;methods&quot;: To be clear, this means UDT methods, presumably (in contrast to other&lt;br/&gt;
SQL functions, procedures). They can&apos;t be declared (in SQL) either? &lt;/p&gt;

&lt;p&gt;&amp;gt;       * Selection - Nevertheless, these user-defined objects can be&lt;br/&gt;
&amp;gt;       SELECTed and returned to application code.&lt;/p&gt;

&lt;p&gt;And/or their fields? &lt;/p&gt;

&lt;p&gt;A note on terminology; are they really objects after serialization to&lt;br/&gt;
a column? Melton says no, because they have no unique id, they are&lt;br/&gt;
just (compound) values. He says in his book that only Typed tables can&lt;br/&gt;
have objects (with id). Does &quot;instances&quot; imply it&apos;s an object?&lt;/p&gt;

&lt;p&gt;Should the overview say that the corresponding Java class can have&lt;br/&gt;
non-public fields, too (and of course, methods)?&lt;/p&gt;


&lt;p&gt;&amp;gt;   Follow-on Work&lt;/p&gt;

&lt;p&gt;&amp;gt;   Future efforts can enable other capabilities. Each of these&lt;br/&gt;
&amp;gt;   features should be a small increment of work on top of this&lt;br/&gt;
&amp;gt;   spec. However, these capabilities are not addressed by this spec:&lt;/p&gt;

&lt;p&gt;&amp;gt;       * Ordering - The Standard supports ordering of Java types which&lt;br/&gt;
&amp;gt;         implement java.lang.Comparable.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;       * Methods/Constructors - Methods and constructors can be&lt;br/&gt;
&amp;gt;         declared by CREATE/ALTER TYPE and then invoked in queries.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;       * Streaming - Object transport and persistence can occur via&lt;br/&gt;
&amp;gt;         the streaming java.sql.SQLData interface.&lt;/p&gt;

&lt;p&gt;If this is not available, how will getObject construct the object?&lt;br/&gt;
Using metadata? Ok, explained later. Answer is serializable.&lt;/p&gt;

&lt;p&gt;&amp;gt;           * Attribute/field mismatch - For each mentioned attribute,&lt;br/&gt;
&amp;gt;             the Java class must contain a public instance field with&lt;br/&gt;
&amp;gt;             the corresponding singleQuotedFieldName. Furthermore,&lt;br/&gt;
&amp;gt;             the SQL dataType of the attribute must correspond to the&lt;br/&gt;
&amp;gt;             Java datatype of the field. See Appendix A for the&lt;br/&gt;
&amp;gt;             correspondences of SQL to Java types.&lt;/p&gt;

&lt;p&gt;Is it an error if the Java class contains &lt;b&gt;more&lt;/b&gt; public fields than&lt;br/&gt;
are declared in the SQL? Do we allows fields to be Java object&lt;br/&gt;
references?&lt;/p&gt;

&lt;p&gt;&amp;gt;       Further errors can occur at query-execution time:&lt;br/&gt;
&amp;gt;           * Null mismatch - A null cannot be stored in an attribute&lt;br/&gt;
&amp;gt;           which maps to a primitive Java field.&lt;/p&gt;

&lt;p&gt;Confused.. This concerns SQL NULL, right? Or a JDBC null?  In what&lt;br/&gt;
section of the standard is this described?&lt;/p&gt;

&lt;p&gt;&amp;gt;       Example:&lt;/p&gt;

&lt;p&gt;&amp;gt;           CREATE TABLE order&lt;br/&gt;
&amp;gt;           (&lt;br/&gt;
&amp;gt;               orderID INT GENERATED ALWAYS AS IDENTITY,&lt;br/&gt;
&amp;gt;               customerID INT REFERENCES customer( customerID ),&lt;br/&gt;
&amp;gt;               totalPrice price&lt;/p&gt;

&lt;p&gt;schema.type would be allowed here, too, presumably (if USAGE is granted)? &lt;br/&gt;
E.g. &quot;totalPrice dags.price&quot;&lt;/p&gt;


&lt;p&gt;&amp;gt;           PreparedStatement ps = conn.prepareStatement( &quot;INSERT INTO&lt;br/&gt;
&amp;gt;                order( customerID, totalPrice ) values ( ?, ? )&quot; );&lt;/p&gt;

&lt;p&gt;&amp;gt;           ps.setInt( 1, customerID );&lt;br/&gt;
&amp;gt;           ps.setObject( 2, new Price( &quot;USD&quot;, new BigDecimal( &quot;9.99&quot; ) ) );&lt;/p&gt;

&lt;p&gt;Is type checked as part of setObject? Or only at execute time?  So,&lt;br/&gt;
the fact that BigDecimal is an object reference (not a Java primitive&lt;br/&gt;
type) is not a problem here? It will be separately type checked&lt;br/&gt;
against decimal( 31, 5 )? I&apos;m muddled here...&lt;/p&gt;

&lt;p&gt;&amp;gt;       SELECT&lt;/p&gt;

&lt;p&gt;&amp;gt;       No changes are made to the SELECT syntax. You can use JDBC to&lt;br/&gt;
&amp;gt;       retrieve selected user defined types. For example:&lt;/p&gt;


&lt;p&gt;&amp;gt;           PreparedStatement ps = conn.prepareStatement( &quot;SELECT * from order&quot; );&lt;br/&gt;
&amp;gt;           ResultSet rs = ps.executeQuery();&lt;/p&gt;

&lt;p&gt;&amp;gt;           while( rs.next() )&lt;br/&gt;
&amp;gt;           &lt;/p&gt;
{
&amp;gt;               int    orderID = rs.getInt( 1 );
&amp;gt;               int    customerID = rs.getInt( 2 );
&amp;gt;               Price  totalPrice = (Price) getObject( 3 );
&amp;gt;               ...
&amp;gt;           }

&lt;p&gt;So can one select directly the attribute?&lt;br/&gt;
E.g. SELECT totalPrice.amount from order&lt;/p&gt;


&lt;p&gt;&amp;gt;       ALTER TYPE&lt;br/&gt;
        :&lt;br/&gt;
&amp;gt;           ALTER TYPE addAttribute | dropAttribute&lt;/p&gt;

&lt;p&gt;&amp;gt;           addAttribute :: ADD ATTRIBUTE attribute&lt;/p&gt;

&lt;p&gt;&amp;gt;           dropAttribute :: DROP ATTRIBUTE identifier RESTRICT&lt;/p&gt;

&lt;p&gt;&amp;gt;       You cannot drop an attribute if it is mentioned in any of the&lt;br/&gt;
&amp;gt;       following SQL objects:&lt;/p&gt;

&lt;p&gt;&amp;gt;           * View definition&lt;br/&gt;
&amp;gt;           * Constraint definition&lt;br/&gt;
&amp;gt;           * Triggered action of a trigger definition&lt;br/&gt;
&amp;gt;           * Generation clause of a generated column&lt;/p&gt;

&lt;p&gt;Cf. above comment. Presumably, we would need to allow SELECTing of attributes for these&lt;br/&gt;
condition to be relevant? Or?&lt;/p&gt;

&lt;p&gt;&amp;gt;       GRANT/REVOKE USAGE&lt;/p&gt;

&lt;p&gt;&amp;gt;       The work on sequence generators. added a new USAGE privilege to&lt;br/&gt;
&amp;gt;       Derby. This is needed to support user defined types too. The&lt;br/&gt;
&amp;gt;       relevant material in the SQL Standard is in part 2 section 4.34.2&lt;br/&gt;
&amp;gt;       (Privileges) and part 2 section 12.3 (&amp;lt;privileges&amp;gt;). You need&lt;br/&gt;
&amp;gt;       USAGE privilege in order to create or access a column of user&lt;br/&gt;
&amp;gt;       defined type. Here is the first increment of Derby support for&lt;/p&gt;

&lt;p&gt;Only if SQL authorization mode is enabled. Currently, we don&apos;t grant&lt;br/&gt;
creation privileges, e.g. CREATE ROLE can only be done by the data&lt;br/&gt;
base owner. A priori, the DBO will have USAGE privilege, I assume?&lt;/p&gt;

&lt;p&gt;&amp;gt;       managing privileges on user defined types:&lt;/p&gt;


&lt;p&gt;&amp;gt;           GRANT USAGE ON TYPE [ schemaName. ] typeName TO grantees&lt;/p&gt;

&lt;p&gt;&amp;gt;           REVOKE USAGE ON TYPE [ schemaName. ] typeName FROM grantees RESTRICT&lt;/p&gt;

&lt;p&gt;&amp;gt;       You cannot REVOKE USAGE on a user defined type if this would&lt;br/&gt;
&amp;gt;       make some schema object unusable by its owner.  Attribute&lt;br/&gt;
&amp;gt;       References&lt;/p&gt;

&lt;p&gt;So, it might make the schema object unaccessible for other users that&lt;br/&gt;
otherwise have, say, SELECT privilege on a table which has a column of&lt;br/&gt;
that type? I.e. the RESTRICT only applies for the owner?&lt;/p&gt;

&lt;p&gt;&amp;gt;           SELECT *&lt;br/&gt;
&amp;gt;           FROM t, s&lt;br/&gt;
&amp;gt;           WHERE t.att IS NOT NULL;&lt;/p&gt;

&lt;p&gt;&amp;gt;       Derby raises an error when it encounters this kind of&lt;/p&gt;

&lt;p&gt;You mean &quot;will raise&quot; ? Or currently?&lt;/p&gt;

&lt;p&gt;&amp;gt;       ambiguity. The solution, as Melton points out, is to add a&lt;br/&gt;
&amp;gt;       disambiguating correlation variable. Derby knows how to&lt;br/&gt;
&amp;gt;       interpret the following queries:&lt;/p&gt;


&lt;p&gt;&amp;gt;           SELECT *&lt;br/&gt;
&amp;gt;           FROM t cor, s&lt;br/&gt;
&amp;gt;           WHERE cor.att IS NOT NULL;&lt;/p&gt;

&lt;p&gt;&amp;gt;           SELECT *&lt;br/&gt;
&amp;gt;           FROM t, s cor&lt;br/&gt;
&amp;gt;           WHERE cor.t.att IS NOT NULL;&lt;/p&gt;

&lt;p&gt;In this case, wouldn&apos;t s.t.att be unambiguous also? As long as you&lt;br/&gt;
have only looked at the &quot;s.t&quot; is is still ambiguous, so maybe its not&lt;br/&gt;
allowed?&lt;/p&gt;

&lt;p&gt;&amp;gt;       Here are supported example references to attributes inside&lt;br/&gt;
&amp;gt;       user defined types:&lt;/p&gt;

&lt;p&gt;&amp;gt;           SELECT *&lt;br/&gt;
&amp;gt;           FROM order&lt;br/&gt;
&amp;gt;           WHERE totalPrice.currencyCode = &apos;USD&apos;;&lt;/p&gt;

&lt;p&gt;So in this  case, a correlation name is not required, so it would seem&lt;br/&gt;
a correlation name is only required if there is an ambiguity.&lt;/p&gt;

&lt;p&gt;&amp;gt;           UPDATE order&lt;br/&gt;
&amp;gt;           set totalPrice.amount = totalPrice.amount * (cast (1.05 as decimal( 31, 5 )));&lt;/p&gt;

&lt;p&gt;&amp;gt;   Behavior&lt;/p&gt;

&lt;p&gt;&amp;gt;   Note the following behaviors of user defined types:&lt;/p&gt;

&lt;p&gt;&amp;gt;       * Casts - A user defined type cannot be cast to any other&lt;br/&gt;
&amp;gt;         type. The converse is also true: no other type can be cast&lt;br/&gt;
&amp;gt;         to a user defined type.&lt;/p&gt;

&lt;p&gt;To be clear, this is only true for structured user defined types, not&lt;br/&gt;
distinct ones (e.g. CAST(shoesize to INTEGER) is OK, according to&lt;br/&gt;
&quot;Understanding SQL and Java together&quot;.&lt;/p&gt;

&lt;p&gt;&amp;gt;       * Comparisons - A user defined type has no ordering. This&lt;br/&gt;
&amp;gt;         means that you cannot compare and sort user defined&lt;br/&gt;
&amp;gt;         types. You cannot use them in expressions involving the &amp;lt;,&lt;br/&gt;
&amp;gt;         =, &amp;gt;, IN, BETWEEN, and LIKE operators. You cannot use user&lt;br/&gt;
&amp;gt;         defined types in aggregates, DISTINCT expressions, and&lt;br/&gt;
&amp;gt;         GROUP/ORDER BY clauses. You cannot build indexes on them.&lt;/p&gt;

&lt;p&gt;Ditto.&lt;/p&gt;

&lt;p&gt;&amp;gt;       * Subtypes - Derby is not aware of sub/super-type&lt;br/&gt;
&amp;gt;       relationships among user defined types. For this reason, you&lt;br/&gt;
&amp;gt;       cannot put a subtype object in a supertyped column..&lt;/p&gt;

&lt;p&gt;&amp;gt;   Type Evolution&lt;br/&gt;
    :&lt;/p&gt;

&lt;p&gt;&amp;gt;       * Recompilation - If the second rev of your application is&lt;br/&gt;
&amp;gt;         compiled on a different platform than the first rev, then&lt;br/&gt;
&amp;gt;         your serialized objects may fail to de-serialize. This&lt;br/&gt;
&amp;gt;         problem and a possible workaround are discussed in the&lt;br/&gt;
&amp;gt;         &quot;Version Control&quot; section near the end of this Serialization&lt;br/&gt;
&amp;gt;         Primer and in the last paragraph of the header comment for&lt;br/&gt;
&amp;gt;         java.io.Serializable.&lt;/p&gt;

&lt;p&gt;Client/server: Client&apos;s view of type may differ from server&apos;s view of&lt;br/&gt;
same type? &lt;/p&gt;

&lt;p&gt;&amp;gt;       * Evolution - Your tools for evolving a class which simply&lt;br/&gt;
&amp;gt;         implements java.io.Serializable are very limited.&lt;/p&gt;

&lt;p&gt;&amp;gt;   Fortunately, it&apos;s easy to write a version-aware user defined type&lt;br/&gt;
&amp;gt;   which implements java.io.Externalizable and can evolve itself over&lt;br/&gt;
&amp;gt;   time. For example, here is the first rev of such a class:&lt;/p&gt;

&lt;p&gt;    : &amp;lt;example&amp;gt;&lt;/p&gt;

&lt;p&gt;Thanks for this explanation; really useful for User Guide later!&lt;/p&gt;

&lt;p&gt;&amp;gt;   DatabaseMetaData&lt;/p&gt;

&lt;p&gt;&amp;gt;       DatabaseMetaData.getColumns()&lt;/p&gt;

&lt;p&gt;&amp;gt;       The DatabaseMetaData.getColumns() method must account for user&lt;br/&gt;
&amp;gt;       defined types. This method returns a ResultSet which contains&lt;br/&gt;
&amp;gt;       a row for every column in a table or view. That row, in turn,&lt;br/&gt;
&amp;gt;       has two columns which are aware of user defined types:&lt;/p&gt;

&lt;p&gt;&amp;gt;       DatabaseMetaData type information Column name 	Description 	Value returned for a user defined type&lt;br/&gt;
&amp;gt;       DATA_TYPE 	The JDBC type id of the column&apos;s data type 	java.sql.Types.JAVA_OBJECT&lt;/p&gt;

&lt;p&gt;&amp;gt;   java.sql.Types.JAVA_OBJECT links to BOOLEAN, not JAVA_OBJECT.&lt;/p&gt;

&lt;p&gt;What about this candidate:&lt;/p&gt;

&lt;p&gt;OTHER - The constant in the Java programming language that indicates&lt;br/&gt;
that the SQL type is database-specific and gets mapped to a Java&lt;br/&gt;
object that can be accessed via the methods getObject and setObject.&lt;/p&gt;

&lt;p&gt;I am not sure when JAVA_OBJECT or more appropriate than OTHER. Can you&lt;br/&gt;
enlighten me?&lt;/p&gt;

&lt;p&gt;&amp;gt;       TYPE_NAME 	The schema-qualified name of the user defined type 	&lt;br/&gt;
&amp;gt;       CREATE TYPE statement 	Corresponding TYPE_NAME&lt;br/&gt;
&amp;gt;       create type mySchema.myType ... 	&quot;MYSCHEMA&quot;.&quot;MYTYPE&quot;&lt;br/&gt;
&amp;gt;       create type &quot;mySchema&quot;.&quot;myType&quot; ... 	&quot;mySchema&quot;.&quot;myType&quot;&lt;/p&gt;

&lt;p&gt;&amp;gt;       DatabaseMetaData.getTypeInfo()&lt;/p&gt;

&lt;p&gt;&amp;gt;       In addition, the DatabaseMetaData.getTypeInfo() method must&lt;br/&gt;
&amp;gt;       report that Derby supports user defined types. This method is&lt;br/&gt;
&amp;gt;       described in the JDBC 2.0 spec. It returns a ResultSet which&lt;br/&gt;
&amp;gt;       contains a row for every JDBC type supported by Derby. We add&lt;br/&gt;
&amp;gt;       a new row to this ResultSet:&lt;/p&gt;

&lt;p&gt;&amp;gt;       Supported JDBC Types Column name 	Description 	Value returned for a user defined type&lt;br/&gt;
&amp;gt;       TYPE_NAME 	Database-specific name for the JDBC type 	OBJECT&lt;br/&gt;
&amp;gt;       DATA_TYPE 	JDBC type 	java.sql.Types.JAVA_OBJECT&lt;/p&gt;

&lt;p&gt;java.sql.Types.JAVA_OBJECT links to BOOLEAN, not JAVA_OBJECT.&lt;/p&gt;

&lt;p&gt;&amp;gt;       PRECISION 	For numeric and string types 	null&lt;br/&gt;
&amp;gt;       LITERAL_PREFIX 	Prefix for quoting literals 	null&lt;br/&gt;
&amp;gt;       LITERAL_SUFFIX 	Suffix for quoting literals 	null&lt;br/&gt;
&amp;gt;       CREATE_PARAMS 	Parameters used to create the type 	null&lt;br/&gt;
&amp;gt;       NULLABLE 	Whether nulls are allows 	DatabaseMetaData.typeNullable&lt;/p&gt;

&lt;p&gt;So we do allow a NULL for such columns. Maybe nice to mention&lt;br/&gt;
somewhere above?&lt;/p&gt;

&lt;p&gt;&amp;gt;   System Tables&lt;/p&gt;

&lt;p&gt;&amp;gt;       SYSALIASES&lt;/p&gt;

&lt;p&gt;&amp;gt;       This feature affects a couple columns of this table.&lt;/p&gt;

&lt;p&gt;&amp;gt;           * ALIASTYPE - This column takes a new value, A for user defined types.&lt;/p&gt;

&lt;p&gt;A character value &apos;A&apos;, right. &lt;/p&gt;

&lt;p&gt;&amp;gt;           * NAMESPACE - This column takes a new value, A for user defined types.&lt;br/&gt;
&amp;gt;           * ALIASINFO - This column can hold a new kind of AliasInfo object which describes a user defined type.&lt;/p&gt;


&lt;p&gt;So the &quot;ALIAS&quot; column holds the SQL type name, I presume.&lt;/p&gt;

&lt;p&gt;&amp;gt;       SYSPERMS&lt;/p&gt;

&lt;p&gt;&amp;gt;       This table was added as part of the work on sequence&lt;br/&gt;
&amp;gt;       generators. A couple columns of this table are affected by&lt;br/&gt;
&amp;gt;       user defined types:&lt;/p&gt;

&lt;p&gt;&amp;gt;           * OBJECTTYPE - This column can hold an additional value:&lt;br/&gt;
&amp;gt;             &quot;USER-DEFINED TYPE&quot;.&lt;/p&gt;

&lt;p&gt;&amp;gt;           * OBJECTID - This column can now join to&lt;br/&gt;
&amp;gt;             SYS.SYSALIASES.ALIASID. In this case, the SYSALIASES row&lt;br/&gt;
&amp;gt;             describes a user defined type.&lt;/p&gt;

&lt;p&gt;This is a UUID for the UDT I presume.&lt;/p&gt;


&lt;p&gt;&amp;gt;           * IS_GRANTABLE - If this is a permission on a user defined&lt;br/&gt;
&amp;gt;             type, this column is &apos;Y&apos; only if the GRANTOR is the&lt;br/&gt;
&amp;gt;             owner of the type. Otherwise, this column is &apos;N&apos;.&lt;/p&gt;

&lt;p&gt;&amp;gt;   Upgrade&lt;/p&gt;

&lt;p&gt;&amp;gt;       Soft Upgrade&lt;/p&gt;

&lt;p&gt;&amp;gt;       After a soft-upgrade to target release, this feature remains NOT enabled.&lt;br/&gt;
&amp;gt;       Hard Upgrade&lt;/p&gt;

&lt;p&gt;&amp;gt;       After a hard-upgrade to target release, this feature is enabled.&lt;/p&gt;

&lt;p&gt;Will it work with a down-rev client?&lt;/p&gt;</comment>
                            <comment id="12764076" author="rhillegas" created="Fri, 9 Oct 2009 17:20:17 +0100"  >&lt;p&gt;Thanks for the great feedback, Dag. I am attaching a second rev of the spec, which addresses many of your comments:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Clarify that these are structured, not distinct types.&lt;/li&gt;
	&lt;li&gt;Clarify that instance methods are not covered by this first increment.&lt;/li&gt;
	&lt;li&gt;Clarify that declared public fields can be selected.&lt;/li&gt;
	&lt;li&gt;Clarify that UDT names are schema-qualified names.&lt;/li&gt;
	&lt;li&gt;Clarify authorization language.&lt;/li&gt;
	&lt;li&gt;Clarify the importance of defensive code to handle client/server version mismatches.&lt;/li&gt;
	&lt;li&gt;Fix links to java.sql.Types.JAVA_OBJECT javadoc.&lt;/li&gt;
	&lt;li&gt;Cite the JDBC spec to explain why java.sql.Types.JAVA_OBJECT is the value of DatabaseMetaData.getColumns().DATA_TYPE for UDT columns.&lt;/li&gt;
	&lt;li&gt;Clarify that by definition, UDTs are nullable.&lt;/li&gt;
	&lt;li&gt;Clarify that SYSALIASES.ALIAS holds the UDT&apos;s name.&lt;/li&gt;
	&lt;li&gt;Clarify that SYSCOLUMNS.REFERENCEID and SYSPERMS.OBJECTID continue to be UUIDs.&lt;/li&gt;
	&lt;li&gt;Clarify that down-rev clients can access UDTs after hard upgrade.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In the meantime, I have been toying with the idea of simplifying the CREATE TYPE syntax. I would like to get feedback on this proposal before addressing your other comments, many of which hinge on the syntax of the CREATE TYPE statement.&lt;/p&gt;

&lt;p&gt;I believe that the following extension would be compatible with the SQL Standard and would greatly simplify the task of the type designer in mapping Java to SQL types. We could extend the standard syntax with a new &amp;lt;user defined type option&amp;gt; (see part 2 of the standard, section 11.42 &amp;lt;user-defined type definition&amp;gt;):&lt;/p&gt;

&lt;p&gt;STYLE DERBY&lt;/p&gt;

&lt;p&gt;Here&apos;s the simplified Derby syntax for binding a SQL type to a Java type:&lt;/p&gt;

&lt;p&gt;CREATE TYPE [ schemaName . ] typeName&lt;br/&gt;
EXTERNAL NAME singleQuotedJavaClassName&lt;br/&gt;
LANGUAGE JAVA&lt;br/&gt;
STYLE DERBY&lt;/p&gt;

&lt;p&gt;With this syntax, you would not need to declare public attributes, methods, and constructors. Derby would automatically recognize them. Here&apos;s how simple the declaration of the example Price type would look using this syntax:&lt;/p&gt;

&lt;p&gt;CREATE TYPE price&lt;br/&gt;
EXTERNAL NAME &apos;com.acme.types.Price&apos;&lt;br/&gt;
LANGUAGE JAVA&lt;br/&gt;
STYLE DERBY&lt;/p&gt;

&lt;p&gt;This would eliminate the need for an ALTER TYPE statement and so dodge the odd limitation in part 13, section 9.6 &amp;lt;alter type statement&amp;gt;. For the first increment, Derby would just recognize public fields of the bound class. In later increments, we would add support for public methods and constructors.&lt;/p&gt;

&lt;p&gt;What do you think? &lt;/p&gt;

</comment>
                            <comment id="12766597" author="rhillegas" created="Fri, 16 Oct 2009 17:46:04 +0100"  >&lt;p&gt;Attaching a third rev of a functional spec for this feature. In this rev:&lt;/p&gt;

&lt;p&gt;o The CREATE TYPE statement is even simpler.&lt;/p&gt;

&lt;p&gt;o UDTs are opaque objects with no visible fields/methods/constructors.&lt;/p&gt;

&lt;p&gt;o However, UDTs can be inspected and manipulated via functions and procedures.&lt;/p&gt;

&lt;p&gt;Here is an example of the CREATE TYPE statement supported by this rev of the spec:&lt;/p&gt;

&lt;p&gt;CREATE TYPE price&lt;br/&gt;
EXTERNAL NAME &apos;com.acme.types.Price&apos;&lt;br/&gt;
LANGUAGE JAVA&lt;/p&gt;</comment>
                            <comment id="12766661" author="mikem" created="Fri, 16 Oct 2009 20:02:32 +0100"  >&lt;p&gt;Just a heads up, I don&apos;t think the storage support for user defined types which don&apos;t implement the &lt;br/&gt;
special read/write interfaces works anymore.  It may partially work, but I seem to remember some&lt;br/&gt;
dead code being not updated or being removed, there may be ASSERTS that pop.  So extra testing necessary in this area.  Best to test types that are both sometimes less than a page and some that are more than a page. Another area that&lt;br/&gt;
may be problem would be network testing in addition to embedded testing, again in the area of a new&lt;br/&gt;
type that just defaults to the basic java externalization routines.&lt;/p&gt;</comment>
                            <comment id="12771443" author="rhillegas" created="Thu, 29 Oct 2009 15:14:47 +0000"  >&lt;p&gt;Attaching version 4 of the spec, incorporating feedback from Kim Haase.&lt;/p&gt;</comment>
                            <comment id="12779624" author="rhillegas" created="Wed, 18 Nov 2009 19:29:42 +0000"  >&lt;p&gt;Attaching derby-651-01-aa-basicCreateDropType.diff. This adds machinery to create and drop UDTs. You can&apos;t do anything with these UDTs yet. That is, you can&apos;t declare columns or parameters to be UDT types. But this is a foundation to build on. The regression tests ran cleanly for me.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/AliasDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/AliasInfo.java&lt;br/&gt;
A      java/engine/org/apache/derby/catalog/types/UDTAliasInfo.java&lt;/p&gt;

&lt;p&gt;DataDictionary support for a new kind of alias, representing a Java class that can be used as a UDT.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/DropAliasNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/CreateAliasConstantAction.java&lt;/p&gt;

&lt;p&gt;Support for CREATE/DROP TYPE.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_6.java&lt;/p&gt;

&lt;p&gt;Basic tests for CREATE/DROP TYPE plus upgrade test to verify that you must hard-upgrade to 10.6 before you can create a UDT.&lt;/p&gt;</comment>
                            <comment id="12780567" author="rhillegas" created="Fri, 20 Nov 2009 14:25:32 +0000"  >&lt;p&gt;Committed derby-651-01-aa-basicCreateDropType.diff at subversion revision 882569.&lt;/p&gt;</comment>
                            <comment id="12781992" author="rhillegas" created="Tue, 24 Nov 2009 15:54:54 +0000"  >&lt;p&gt;Attaching derby-651-02-af-udtColumnsRetvalsParams.diff. This patch makes it possible to create UDT columns and store UDTs in them. This patch also makes it possible to pass UDTs as parameters into functions and procedures and to return UDTs from functions. The following is possible with this patch:&lt;/p&gt;

&lt;p&gt;	create type Price external name &apos;org.apache.derbyTesting.functionTests.tests.lang.Price&apos; language java;&lt;/p&gt;

&lt;p&gt;	create table orders( orderID int generated always as identity, customerID int, totalPrice price );&lt;/p&gt;

&lt;p&gt;	create function makePrice( currencyCode char( 3 ), amount decimal( 31, 5 ), timeInstant Timestamp )&lt;br/&gt;
        returns Price language java parameter style java no sql&lt;br/&gt;
        external name &apos;org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice&apos;;&lt;br/&gt;
	create function getCurrencyCode( price Price ) returns char( 3 ) language java parameter style java no sql&lt;br/&gt;
        external name &apos;org.apache.derbyTesting.functionTests.tests.lang.Price.getCurrencyCode&apos;;&lt;br/&gt;
	create function getAmount( price Price ) returns decimal( 31, 5 ) language java parameter style java no sql&lt;br/&gt;
        external name &apos;org.apache.derbyTesting.functionTests.tests.lang.Price.getAmount&apos;;&lt;br/&gt;
	create function getTimeInstant( price Price ) returns timestamp language java parameter style java no sql&lt;br/&gt;
        external name &apos;org.apache.derbyTesting.functionTests.tests.lang.Price.getTimeInstant&apos;;&lt;/p&gt;

&lt;p&gt;	insert into orders( customerID, totalPrice ) values&lt;br/&gt;
        ( 12345, makePrice( &apos;USD&apos;, cast( 9.99 as decimal( 31, 5 ) ), timestamp(&apos;2009-10-16 14:24:43&apos;) ) );&lt;/p&gt;

&lt;p&gt;	select getCurrencyCode( totalPrice ), getAmount( totalPrice ), getTimeInstant( totalPrice ) from orders;&lt;/p&gt;

&lt;p&gt;	select totalPrice from orders;&lt;/p&gt;


&lt;p&gt;At least for small UDTs, it turns out that Derby still has the logic needed to store the UDT values in columns. It appears (although I have not tested this yet), that the Store can probably persist UDT values for UDTs which implement SQLData in addition to UDTs which implement Serializable. What was needed was the ability to identify UDTs by schema qualified names. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/types/TypeId.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/UserType.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/TypeDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/DecimalTypeIdImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/UserDefinedTypeIdImpl.java&lt;/p&gt;

&lt;p&gt;This adds a persistable schema qualified name to the existing UserDefinedType object.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java&lt;/p&gt;

&lt;p&gt;Changes to allow schema qualified UDT names in CREATE TABLE/FUNCTION/PROCEDURE statements.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;/p&gt;

&lt;p&gt;Adds logic to bind a UDT declaration. This means looking up the UDT in the DataDictionary given its schema qualified name and then poking the corresponding Java class name into the UDT type descriptor.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;Small changes to support the use of UDT values at execution time.&lt;/p&gt;



&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/Price.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;

&lt;p&gt;Some basic tests to verify that you can create columns, parameters, and return values of UDT type.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/db2Compatibility.out&lt;/p&gt;

&lt;p&gt;Changes some tests to account for the fact that the parser now raises a different error when it encounters illegal type declarations.&lt;/p&gt;


&lt;p&gt;The regression tests pass for me.&lt;/p&gt;</comment>
                            <comment id="12783152" author="rhillegas" created="Fri, 27 Nov 2009 19:24:44 +0000"  >&lt;p&gt;Committed derby-651-02-af-udtColumnsRetvalsParams.diff at subversion revision 884970.&lt;/p&gt;</comment>
                            <comment id="12783201" author="dagw" created="Sat, 28 Nov 2009 02:44:34 +0000"  >&lt;p&gt;Thanks for this patch, Rick. Nice to see this addition!  It was pretty&lt;br/&gt;
straight-forward to grok, although as always the changes in the type&lt;br/&gt;
classes challenge me. The general approach seems fine. I have only&lt;br/&gt;
nits which may have escaped your attention to contribute for now.&lt;br/&gt;
You may want to assign yourself now that you have made two nice patches &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Clarify somewhere difference between Derby User defined types and&lt;br/&gt;
  (actual user created) UDTs; usage is a bit confusing now, you do use&lt;br/&gt;
  the term UserDefinedTypeIdImpl for UDTs...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Many lines &amp;gt; 80&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;UserDefinedTypeIdImpl#isBound:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;lacks proper javadoc @return tag (more methods do too)&lt;/li&gt;
	&lt;li&gt;simplify return !(className == null) -&amp;gt;&lt;br/&gt;
  return className != null&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;TypeDescriptor#isUserDefinedType:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;lacks proper javadoc @return tag&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;BaseTypeIdImpl#getSchemaName, getUnqualifiedName: lack proper javadoc&lt;br/&gt;
  @return tag&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;TypeDescriptorImpl#isUserDefinedType: Javadoc: suggest 
{@inheritDoc}
&lt;p&gt;  instead of @see&lt;br/&gt;
  isBound: lacks proper javadoc @return tag&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;TypeId#getUserDefinedTypeId lacks all javadoc tags&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;ColumnDefinitionNode.java: spurious blank lines introduced&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;UserType.java: would be nice to see docs describing difference between&lt;br/&gt;
  setValue, setObject. Both have an Object parameter...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;QueryTreeNode#bindUserType: lacks all javadoc tags&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12783251" author="rhillegas" created="Sat, 28 Nov 2009 17:02:43 +0000"  >&lt;p&gt;Attaching derby-651-03-aa-udttestInstability.diff, which hopefully commits an instability in UDTTest which seems to be VM-specific. Committed at subversion revision 885114.&lt;/p&gt;</comment>
                            <comment id="12783257" author="rhillegas" created="Sat, 28 Nov 2009 17:48:38 +0000"  >&lt;p&gt;Thanks for the comments, Dag. Attaching derby-651-04-aa-javadoc.diff:&lt;/p&gt;

&lt;p&gt;o I added a class javadoc header to UserDefinedTypeIdImpl, describing the 2 kinds of user defined types&lt;/p&gt;

&lt;p&gt;o I added some javadoc tags. I didn&apos;t add all of the tags you suggested. Instead, I erred on the side of keeping the javadoc style consistent throughout those files.&lt;/p&gt;

&lt;p&gt;The javadoc builds cleanly for me.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12783478" author="dagw" created="Sun, 29 Nov 2009 21:23:41 +0000"  >&lt;p&gt;Thanks, Rick, for the comments on the two kinds of udts! &lt;br/&gt;
Changes look good, except for this small typo in Javadoc for &lt;br/&gt;
BaseTypeIdImpl(String schemaName, String unqualifiedName ):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;@param unqualifiedName The qualified name of the UDT in that schema&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That should be &quot;The unqualified name of the UDT in that schema&quot;, presumably.&lt;/p&gt;</comment>
                            <comment id="12783738" author="rhillegas" created="Mon, 30 Nov 2009 16:49:54 +0000"  >&lt;p&gt;Thanks, Dag. Fixed the typo at subversion revision 885489.&lt;/p&gt;</comment>
                            <comment id="12786715" author="rhillegas" created="Sun, 6 Dec 2009 21:58:21 +0000"  >&lt;p&gt;Attaching derby-651-05-ac-dependencyTable.diff. This adds persistent dependency tracking between tables and the UDT types of their columns. This patch prevents you from dropping a UDT if there are tables whose columns rely on that type. Regression tests passed cleanly for me.&lt;/p&gt;

&lt;p&gt;Ideally, we would like to track these dependencies at column granularity. However, columns don&apos;t have UUIDs. UUIDs identify the tuple descriptors which are endpoints of arcs in the dependency graph. The following design choice had to be made:&lt;/p&gt;

&lt;p&gt;1) Create UUIDs for every column.&lt;/p&gt;

&lt;p&gt;2) Track the dependency at a higher level, drawing the arcs between tables and UDTs rather than between columns and UDTs.&lt;/p&gt;

&lt;p&gt;Option (1) looked like a lot of work with a high probability of destabilizing the codeline. I opted for (2) instead. This ended up pushing some complexity into one localized method: DDLConstantAction.adjustUDTDependencies(). That method is responsible for making sure that there is only one dependency arc between a table and a UDT, regardless of how many columns in the table may share that UDT type.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M      java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java&lt;/p&gt;

&lt;p&gt;Adds a dictionary method for looking up the AliasDescriptor associated with a UDT. This AliasDescriptor is the persistent object that is one of the endpoints of a dependency arc.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/depend/DependencyManager.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/AliasDescriptor.java&lt;/p&gt;

&lt;p&gt;Boilerplate to support DROP TYPE.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error message raised when a dependent table prevents a UDT from being dropped.&lt;/p&gt;



&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/TableElementNode.java&lt;/p&gt;

&lt;p&gt;Made DROP COLUMN nodes report that they are DROP COLUMN nodes rather than MODIFY COLUMN nodes. Some of the DROP COLUMN logic was being skipped.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;/p&gt;

&lt;p&gt;Made it possible for a table to be the starting point of a dependency arc. Previously, a  table could only be the ending point of a dependency arc.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/TableElementList.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java&lt;/p&gt;

&lt;p&gt;This is the heart of the logic which adds and drops the dependency arc from a table to a UDT.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java&lt;/p&gt;

&lt;p&gt;More debug machinery for printing out the contents of DDL nodes in the AST. Debug support for DDL nodes seems weak.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;

&lt;p&gt;Basic tests to verify that if a table has a UDT column then that UDT cannot be dropped.&lt;/p&gt;</comment>
                            <comment id="12788104" author="rhillegas" created="Wed, 9 Dec 2009 14:23:20 +0000"  >&lt;p&gt;Committed derby-651-05-ac-dependencyTable.diff at subversion revision 888811.&lt;/p&gt;</comment>
                            <comment id="12788217" author="kmarsden" created="Wed, 9 Dec 2009 18:36:25 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;Thank you for tackling this feature. I am sure it will be most useful for users. I have not been following your progress closely, but was wondering if you could confirm that all functionality being added is part of the SQL Standard or do you plan some Derby specific syntax?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12788233" author="rhillegas" created="Wed, 9 Dec 2009 18:53:57 +0000"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;So far the syntax is all a subset of what is defined in the SQL Standard and I don&apos;t anticipate needing any extensions for this first increment.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12788760" author="knutanders" created="Thu, 10 Dec 2009 15:57:31 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;I noticed this error while playing with the feature:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create type java_string external name &apos;java.lang.String&apos; language java;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table t(x java_string);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; drop table t;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; drop type java_string restrict;&lt;br/&gt;
ERROR 42X94: Table &apos;341cc09e-0125-7948-f4fb-00003fb80d23&apos; does not exist.&lt;/p&gt;</comment>
                            <comment id="12788775" author="rhillegas" created="Thu, 10 Dec 2009 16:26:32 +0000"  >&lt;p&gt;Thanks for kicking the tires, Knut! I&apos;ll take a look at that one. Cheers-Rick&lt;/p&gt;</comment>
                            <comment id="12788780" author="kmarsden" created="Thu, 10 Dec 2009 16:41:40 +0000"  >&lt;p&gt;Thanks Rick for the clarification on the standard compliance. Please  raise a flag on this issue if you want to start working on extensions so we can discuss at that time.&lt;/p&gt;</comment>
                            <comment id="12789273" author="knutanders" created="Fri, 11 Dec 2009 12:20:08 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;The Behavior section in the func spec says:&lt;br/&gt;
&amp;gt; Casts - A UDT  cannot be cast explicitly to any other type. The converse is also true: no other type can be cast to a UDT.&lt;/p&gt;

&lt;p&gt;With the current code, casting from a UDT to CHAR/VARCHAR appears to work:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create type java_string external name &apos;java.lang.String&apos; language java;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table t(s java_string);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t values (&apos;a&apos;);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t values (&apos;abc&apos;);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t values (&apos;abcdef&apos;);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select cast(s as varchar(7)), length(s) from t;&lt;br/&gt;
1      |2          &lt;br/&gt;
-------------------&lt;br/&gt;
a      |1          &lt;br/&gt;
abc    |3          &lt;br/&gt;
abcdef |6          &lt;/p&gt;

&lt;p&gt;3 rows selected&lt;/p&gt;

&lt;p&gt;Casting to a UDT, on the other hand, gives a syntax error:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; values cast(&apos;abc&apos; as java_string);&lt;br/&gt;
ERROR 42X01: Syntax error: Encountered &quot;&quot; at line 1, column 22.&lt;/p&gt;

&lt;p&gt;I think it makes sense that one cannot in general cast to a UDT, but in some special cases it may make sense. For instance, it may be useful to allow casting of parameters &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; or NULLs to a UDT. That is, queries like these:&lt;/p&gt;

&lt;p&gt;  VALUES CAST(? AS MY_TYPE)&lt;/p&gt;

&lt;p&gt;  VALUES CAST(NULL AS MY_TYPE)&lt;/p&gt;

&lt;p&gt;Further, the Behavior section says:&lt;br/&gt;
&amp;gt; Comparisons - A UDT has no ordering. This means that you cannot compare and sort UDTs. You cannot use them in expressions involving the &amp;lt;, =, &amp;gt;, IN, BETWEEN, and LIKE operators. You cannot use UDTs in aggregates, DISTINCT expressions, and GROUP/ORDER BY clauses. You cannot build indexes on them.&lt;/p&gt;

&lt;p&gt;This is not how the current code behaves. Possibly because of implicit casts to string types?&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select distinct * from t where s like &apos;ab%&apos; group by s order by s desc;&lt;br/&gt;
S              &lt;br/&gt;
---------------&lt;br/&gt;
abcdef         &lt;br/&gt;
abc            &lt;/p&gt;

&lt;p&gt;2 rows selected&lt;/p&gt;</comment>
                            <comment id="12789310" author="rhillegas" created="Fri, 11 Dec 2009 13:42:57 +0000"  >&lt;p&gt;Thanks for continuing to experiment with UDTs, Knut. I have logged two issues to track the behaviors you have discovered.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4469&quot; title=&quot;Fix the CASTing behavior of UDTs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4469&quot;&gt;&lt;del&gt;DERBY-4469&lt;/del&gt;&lt;/a&gt;: I agree that the spec is too harsh and we should allow certain casts to UDTs, including casts from ?, NULL, and subtypes&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4470&quot; title=&quot;Forbid ordering operations on UDTs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4470&quot;&gt;&lt;del&gt;DERBY-4470&lt;/del&gt;&lt;/a&gt;: The ordering behavior you see is wrong and should be corrected. I think it results from the fact that java.lang.String gets special handling. I do get an error if I try to sort on the Price type. E.g.:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby:memory:dummy;create=true&apos;;&lt;br/&gt;
ij&amp;gt; create type Price external name &apos;org.apache.derbyTesting.functionTests.tests.lang.Price&apos; language java;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table t( a price );&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select * from t order by a;&lt;br/&gt;
ERROR X0X67: Columns of type &apos;&quot;APP&quot;.&quot;PRICE&quot;&apos; may not be used in CREATE INDEX, ORDER BY, GROUP BY, UNION, INTERSECT, EXCEPT or DISTINCT statements because comparisons are not supported for that type.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12789548" author="rhillegas" created="Fri, 11 Dec 2009 21:34:39 +0000"  >&lt;p&gt;Attaching derby-651-06-aa-dropTable.diff. This addresses the bug which Knut discovered: if you drop a table which depends on a UDT, the dependency arc from the table to the UDT is not dropped. We were only dropping the arcs when we dropped individual columns from the table. Tests passed cleanly for me. Committed at subversion revision 889822.&lt;/p&gt;

&lt;p&gt;The fix was to make the DROP TABLE logic call the same arc-dropping code as the ALTER TABLE logic calls. That logic was modified slightly to handle the DROP TABLE case.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;/p&gt;

&lt;p&gt;Changes the arc-dropping code to handle DROP TABLE. Changes the signature of the arc-dropping method.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java&lt;/p&gt;

&lt;p&gt;Calls that logic for DROP TABLE.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java&lt;/p&gt;

&lt;p&gt;Accounts for the new signature of the arc-dropping method.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;

&lt;p&gt;Some regression tests to verify that the bug is fixed.&lt;/p&gt;</comment>
                            <comment id="12789639" author="rhillegas" created="Sat, 12 Dec 2009 01:23:57 +0000"  >&lt;p&gt;Attaching derby-651-07-aa-dependencyView.diff. This adds dependencies of views on UDTs. Regression tests pass for me. Committed at subversion revision 889876.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;/p&gt;

&lt;p&gt;Adds a method for adding dependencies on UDTs.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ValueNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;Wires that method into nodes which views rely on.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/Price.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;

&lt;p&gt;Basic tests for dependencies of views on UDTs.&lt;/p&gt;</comment>
                            <comment id="12789940" author="rhillegas" created="Sun, 13 Dec 2009 20:32:16 +0000"  >&lt;p&gt;Attaching derby-651-08-aa-dependencyRoutines.diff. This patch adds dependencies of routines on UDTs. The tests passed cleanly for me. Committed at subversion revision 890115.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error message raised when a routine blocks the dropping of a UDT.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;/p&gt;

&lt;p&gt;Moved some reporting logic out of TableDescriptor up into its superclass so that the logic can be used by AliasDescriptor.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/AliasDescriptor.java&lt;/p&gt;

&lt;p&gt;Made AliasDescriptor a dependent.&lt;/p&gt;



&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/DropAliasConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/CreateAliasConstantAction.java&lt;/p&gt;

&lt;p&gt;Logic to add and drop dependencies of routines on UDTs.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;

&lt;p&gt;Regression tests for dependencies of routines on UDTs.&lt;/p&gt;</comment>
                            <comment id="12790018" author="knutanders" created="Mon, 14 Dec 2009 07:10:19 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;There was one little piece of the 08 patch I didn&apos;t quite understand. Why does AliasDescriptor.isValid() have to be synchronized?&lt;/p&gt;</comment>
                            <comment id="12790176" author="rhillegas" created="Mon, 14 Dec 2009 14:25:46 +0000"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;Thanks for reading the patch. I don&apos;t know why isValid() is synchronized. I simply copied that signature from another tuple descriptor. I also introduced a synchronized isValid() method to TableDescriptor in an earlier patch: derby-651-05-ac-dependencyTable.diff and a synchronized isValid() method was introduced when SequenceDescriptor was added earlier this year. Most of our Dependents have synchronized isValid() methods, but not all. Here&apos;s the situation:&lt;/p&gt;

&lt;p&gt;Synchronized:&lt;/p&gt;

&lt;p&gt;    Alias&lt;br/&gt;
    Constraint&lt;br/&gt;
    Default&lt;br/&gt;
    Sequence&lt;br/&gt;
    SPS&lt;br/&gt;
    Table&lt;br/&gt;
    Trigger&lt;/p&gt;

&lt;p&gt;Unsynchronized:&lt;/p&gt;

&lt;p&gt;    BaseActivation&lt;br/&gt;
    GenericActivationHolder&lt;br/&gt;
    GenericPreparedStatement&lt;br/&gt;
    View&lt;/p&gt;</comment>
                            <comment id="12790274" author="knutanders" created="Mon, 14 Dec 2009 18:29:17 +0000"  >&lt;p&gt;Thanks for investigating, Rick. Looks like it&apos;s an established pattern, then, and not something that needs to be addressed in this issue.&lt;/p&gt;</comment>
                            <comment id="12792097" author="rhillegas" created="Thu, 17 Dec 2009 19:42:03 +0000"  >&lt;p&gt;Attaching derby-651-09-ac-usagePrivilege.diff. This patch wires in the USAGE privilege, which is needed for sequences and udts. The support for sequences can&apos;t be finished until a bit more work has been done on implementing the NEXT SEQUENCE FOR operator. Regression tests pass for me.&lt;/p&gt;

&lt;p&gt;The USAGE privilege is stored in the SYSPERMS catalog, a 10.6 catalog which was introduced by earlier work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-712&quot; title=&quot;Support for sequences&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-712&quot;&gt;&lt;del&gt;DERBY-712&lt;/del&gt;&lt;/a&gt;. SYSPERMS is intended to be a general purpose permissions catalog. Over time, the complexity of our permissions implementation and the number of permissions catalogs can be reduced by storing other kinds of privileges in this catalog. For instance, it should be easy to store the EXECUTE privilege in SYSPERMS. Much of the implementation of the USAGE privilege parallels the implementation of the EXECUTE privilege.&lt;/p&gt;

&lt;p&gt;This patch introduces a new abstraction: PrivilegedSQLObject. This is a data dictionary representation of a schema object which has privileges granted on it. In this patch, this abstraction covers two kinds of schema objects: sequences and udts. Over time, we may want to simplify the hierarchy descending from TupleDescriptor. More descendants of TupleDescriptor should be candidates to be PrivilegedSQLObjects represented in SYSPERMS.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/PermissionsCacheable.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/SYSPERMSRowFactory.java&lt;/p&gt;

&lt;p&gt;Added USAGE privileges to the permissions cache.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/catalog/DDdependableFinder.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/CoreDDFinderClassInfo.java&lt;/p&gt;

&lt;p&gt;Filled in some missing bits of the Formatable machinery for sequences and generic privileges.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java&lt;/p&gt;

&lt;p&gt;Compiler support for the new USAGE privilege. The USAGE privilege can be granted on sequences and udts. However, the compiler creates runtime USAGE checks only for udts right now.&lt;/p&gt;


&lt;p&gt;A      java/engine/org/apache/derby/impl/sql/execute/GenericPrivilegeInfo.java&lt;/p&gt;

&lt;p&gt;Runtime support for the new USAGE privilege.&lt;/p&gt;


&lt;p&gt;A      java/engine/org/apache/derby/iapi/sql/dictionary/PrivilegedSQLObject.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/AliasDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java&lt;/p&gt;

&lt;p&gt;Support for the new abstraction discussed above: a schema object which can have privileges granted on it.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/StatementPermission.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/StatementRoutinePermission.java&lt;br/&gt;
A      java/engine/org/apache/derby/iapi/sql/dictionary/StatementGenericPermission.java&lt;/p&gt;

&lt;p&gt;Additional runtime enforcement of the new USAGE privilege. Enforcement code is shared by the EXECUTE and USAGE privileges. I have some reservations about the placement of this part of the runtime machinery in the data dictionary. To me it looks as though this code might be more comfortable in org.apache.derby.impl.sql.execute. However, that is outside the scope of this patch.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;Some new error messages. A message related to EXECUTE permissions has been renamed and pressed into service to also serve the USAGE privilege.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTPermsTest.java&lt;/p&gt;

&lt;p&gt;Basic tests for granting and revoking USAGE privilege on udts.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SystemCatalogTest.java&lt;/p&gt;

&lt;p&gt;An assertion in this test needed to be updated to account for a new index added to SYSPERMS.&lt;/p&gt;</comment>
                            <comment id="12792508" author="rhillegas" created="Fri, 18 Dec 2009 15:15:58 +0000"  >&lt;p&gt;Committed derby-651-09-ac-usagePrivilege.diff at subversion revision 892272.&lt;/p&gt;</comment>
                            <comment id="12792598" author="rhillegas" created="Fri, 18 Dec 2009 19:23:43 +0000"  >&lt;p&gt;Attaching derby-651-10-aa-usageTriggers.diff. This patch adds regression tests to verify that you can&apos;t drop a UDT or revoke USAGE on it if that would orphan a trigger. Committed at subversion revision 892354.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;

&lt;p&gt;Factored out some common code into method verifyDropRestrictions() and added test case for triggers.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTPermsTest.java&lt;/p&gt;

&lt;p&gt;Added test case for revoking USAGE privilege on a type needed by a trigger.&lt;/p&gt;</comment>
                            <comment id="12792860" author="rhillegas" created="Sat, 19 Dec 2009 16:38:41 +0000"  >&lt;p&gt;Attaching derby-651-11-aa-dropSchema.diff. This patch prevents you from dropping a schema if it contains any types. I also noticed that it was possible to drop schemas which contained routines. I have made that illegal too. Regression tests passed for me. Committed at subversion revision 892485.&lt;/p&gt;

&lt;p&gt;Basically, SYSALIASES is now not allowed to contain any rows that refer to the schema which is about to be dropped. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;/p&gt;

&lt;p&gt;This is the code which enforces the rule that a schema must be empty before you drop it.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTPermsTest.java&lt;/p&gt;

&lt;p&gt;New test to verify that a schema may not hold any routines or types if you are going to drop it.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/junit/JDBC.java&lt;/p&gt;

&lt;p&gt;Added a little logic so that UDTs are dropped along with routines when cleaning out a test schema.&lt;/p&gt;</comment>
                            <comment id="12793662" author="rhillegas" created="Tue, 22 Dec 2009 16:36:42 +0000"  >&lt;p&gt;Attaching derby-651-12-ab-metadata.diff. This patch adjusts JDBC metadata to account for the fact that UDTs can now be created (see the spec for a description of the necessary changes). Regression tests passed for me. Committed at subversion revision 893224.&lt;/p&gt;

&lt;p&gt;Changes to metadata queries were needed for&lt;/p&gt;

&lt;p&gt;DatabaseMetaData.getTypeInfo()&lt;br/&gt;
DatabaseMetaData.getUDTs()&lt;/p&gt;

&lt;p&gt;Previous changes already resulted in the correct results for&lt;/p&gt;

&lt;p&gt;DatabaseMetaData.getColumns()&lt;br/&gt;
ResultSetMetaData.getColumnType()&lt;br/&gt;
ResultSetMetaData.getColumnTypeName()&lt;/p&gt;

&lt;p&gt;Actually, the wrong results are returned for the ResultSetMetaData methods in the network client. This is a pre-existing bug and discrepancy with the embedded behavior. Apparently, when the network client was written, a deliberate decision was made to coerce object types to LONGVARBINARY. I have created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4491&quot; title=&quot;The network client changes UDTs into Strings and returns their type as LONGVARBINARY.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4491&quot;&gt;&lt;del&gt;DERBY-4491&lt;/del&gt;&lt;/a&gt; to track this issue.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/metadata.properties&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java&lt;/p&gt;

&lt;p&gt;Changes for DatabaseMetaData.getTypeInfo() and DatabaseMetaData.getUDTs().&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java&lt;/p&gt;

&lt;p&gt;Added a new test for DatabaseMetaData.getUDTs() and removed it from the test of vacuous methods.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/CastingTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/connectionJdbc20.out&lt;/p&gt;

&lt;p&gt;Accounted for the new type (JAVA_OBJECT) returned by DatabaseMetaData.getTypeInfo().&lt;/p&gt;</comment>
                            <comment id="12794459" author="myrna" created="Thu, 24 Dec 2009 17:05:08 +0000"  >&lt;p&gt;Since Dec 18, I see the following javadoc warnings:&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; &amp;lt;mypathtotrunk&amp;gt;\java\engine\org\apache\derby\iapi\sql\dictionary\DataDictionary.java:2035: warning - @param argument &quot;granteeAuthid&quot; is not a parameter name.&lt;br/&gt;
		  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; &amp;lt;mypathtotrunk&amp;gt;\java\engine\org\apache\derby\impl\sql\catalog\DataDictionaryImpl.java:12843: warning - @param argument &quot;granteeAuthid&quot; is not a parameter name.&lt;/p&gt;</comment>
                            <comment id="12794467" author="rhillegas" created="Thu, 24 Dec 2009 18:09:14 +0000"  >&lt;p&gt;Thanks for spotting this, Myrna. Javadoc corrected at subversion revision 893795.&lt;/p&gt;</comment>
                            <comment id="12830223" author="rhillegas" created="Fri, 5 Feb 2010 18:43:58 +0000"  >&lt;p&gt;Attaching derby-651-13-aa-tableFunctionColumns.diff. This patch makes it possible to use UDTs as columns in the ResultSets returned by table functions. Regression tests are running.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;/p&gt;

&lt;p&gt;Added logic for binding row multi sets which contain UDT columns.&lt;/p&gt;


&lt;p&gt;--------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java&lt;/p&gt;

&lt;p&gt;Always re-bind the return value of a function, even if it is not itself a UDT. This is because the return type could be a row multi set which has a UDT column.&lt;/p&gt;


&lt;p&gt;--------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;/p&gt;

&lt;p&gt;Add logic to create dependencies on UDT-typed columns in table functions.&lt;/p&gt;


&lt;p&gt;--------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;

&lt;p&gt;Added a test case to verify that UDTs can be columns in table functions.&lt;/p&gt;</comment>
                            <comment id="12830300" author="rhillegas" created="Fri, 5 Feb 2010 21:19:44 +0000"  >&lt;p&gt;Tests ran cleanly for me on derby-651-13-aa-tableFunctionColumns.diff. Committed at subversion revision 907097.&lt;/p&gt;</comment>
                            <comment id="12830786" author="rhillegas" created="Sun, 7 Feb 2010 22:54:02 +0000"  >&lt;p&gt;Attaching derby-651-14-aa-testBigUDTs.diff. This patch adds tests to verify that you can store and retrieve large UDTs. The tests store and retrieve UDTs that serialize to around 90K and 1000K bytes. Committed at subversion revision revision 907509.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/FakeByteArray.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/IntArray.java&lt;/p&gt;</comment>
                            <comment id="12830953" author="rhillegas" created="Mon, 8 Feb 2010 14:30:03 +0000"  >&lt;p&gt;Attaching derby-651-15-aa-testSQLData.diff. This adds a test to verify that a class does not become storeable simply because it implements SQLData. Part 13 of the SQL Standard describes user defined types which implement SQLData, but Derby does not support these types right now. Committed at subversion revision 907668.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SampleSQLData.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;</comment>
                            <comment id="12833156" author="rhillegas" created="Fri, 12 Feb 2010 20:41:32 +0000"  >&lt;p&gt;Attaching version 5 of the spec for this first increment. This version clarifies subtyping behavior and adds a section on the dblook tool. Although more testing needs to be done, I believe that the functionality described by this spec has now been implemented.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12443090">DERBY-4469</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12443094">DERBY-4470</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12444442">DERBY-4499</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12443771">DERBY-4484</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12443772">DERBY-4485</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12444023">DERBY-4491</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12458945">DERBY-4580</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12457494">DERBY-4572</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12435724" name="UserDefinedTypes.html" size="53987" author="rhillegas" created="Fri, 12 Feb 2010 20:41:32 +0000"/>
                            <attachment id="12423583" name="UserDefinedTypes.html" size="53390" author="rhillegas" created="Thu, 29 Oct 2009 15:14:47 +0000"/>
                            <attachment id="12422369" name="UserDefinedTypes.html" size="53796" author="rhillegas" created="Fri, 16 Oct 2009 17:46:04 +0100"/>
                            <attachment id="12421751" name="UserDefinedTypes.html" size="48171" author="rhillegas" created="Fri, 9 Oct 2009 17:20:17 +0100"/>
                            <attachment id="12421145" name="UserDefinedTypes.html" size="44522" author="rhillegas" created="Fri, 2 Oct 2009 20:34:11 +0100"/>
                            <attachment id="12425372" name="derby-651-01-aa-basicCreateDropType.diff" size="25814" author="rhillegas" created="Wed, 18 Nov 2009 19:29:42 +0000"/>
                            <attachment id="12425978" name="derby-651-02-af-udtColumnsRetvalsParams.diff" size="43882" author="rhillegas" created="Tue, 24 Nov 2009 15:54:54 +0000"/>
                            <attachment id="12426328" name="derby-651-03-aa-udttestInstability.diff" size="2348" author="rhillegas" created="Sat, 28 Nov 2009 17:02:43 +0000"/>
                            <attachment id="12426329" name="derby-651-04-aa-javadoc.diff" size="3908" author="rhillegas" created="Sat, 28 Nov 2009 17:48:38 +0000"/>
                            <attachment id="12427111" name="derby-651-05-ac-dependencyTable.diff" size="31501" author="rhillegas" created="Sun, 6 Dec 2009 21:58:21 +0000"/>
                            <attachment id="12427774" name="derby-651-06-aa-dropTable.diff" size="7481" author="rhillegas" created="Fri, 11 Dec 2009 21:34:39 +0000"/>
                            <attachment id="12427803" name="derby-651-07-aa-dependencyView.diff" size="6515" author="rhillegas" created="Sat, 12 Dec 2009 01:23:57 +0000"/>
                            <attachment id="12427865" name="derby-651-08-aa-dependencyRoutines.diff" size="20058" author="rhillegas" created="Sun, 13 Dec 2009 20:32:16 +0000"/>
                            <attachment id="12428335" name="derby-651-09-ac-usagePrivilege.diff" size="90384" author="rhillegas" created="Thu, 17 Dec 2009 19:42:03 +0000"/>
                            <attachment id="12428462" name="derby-651-10-aa-usageTriggers.diff" size="15129" author="rhillegas" created="Fri, 18 Dec 2009 19:23:43 +0000"/>
                            <attachment id="12428535" name="derby-651-11-aa-dropSchema.diff" size="5684" author="rhillegas" created="Sat, 19 Dec 2009 16:38:41 +0000"/>
                            <attachment id="12428738" name="derby-651-12-ab-metadata.diff" size="15774" author="rhillegas" created="Tue, 22 Dec 2009 16:36:42 +0000"/>
                            <attachment id="12434986" name="derby-651-13-aa-tableFunctionColumns.diff" size="10202" author="rhillegas" created="Fri, 5 Feb 2010 18:43:58 +0000"/>
                            <attachment id="12435140" name="derby-651-14-aa-testBigUDTs.diff" size="14047" author="rhillegas" created="Sun, 7 Feb 2010 22:54:02 +0000"/>
                            <attachment id="12435168" name="derby-651-15-aa-testSQLData.diff" size="6076" author="rhillegas" created="Mon, 8 Feb 2010 14:30:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 27 Oct 2005 08:44:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29644</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0pef:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37933</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>